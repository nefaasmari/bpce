// Technique
/// <reference path="..\..\_dependances\typings\services\com-interdomaine.d.ts" />
/// <reference path="..\..\_dependances\typings\services\com-eds.d.ts" />
/// <reference path="..\..\_dependances\typings\reference.commun.d.ts" />
/// <reference path="..\..\_dependances\typings\third-party\d3\d3.d.ts" />
// déclarations portail service ----------------
/// <reference path="..\..\_dependances\typings\socle-fonctionnel\portail\19.05\myway.portail.lib-portail.d.ts" />
/// <reference path="..\..\_dependances\typings\services\19.05\myway-core-api.d.ts" />
/// <reference path="..\..\_dependances\typings\socle-fonctionnel\libSynchroSynthese\18.03\myway.lib-synchro-synthese-cc.d.ts" />
/// <reference path="..\..\_dependances\typings\services\portail\framework-client-portal.d.ts" />
/// <reference path="..\..\_dependances\typings\services\portail\framework-client-tech.d.ts" />
/// <reference path="..\..\_dependances\typings\services\tables-delocalisees.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\entitetitulaire\v1\recherche.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\entitetitulaire\v2\informationEntiteTitulaire.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\tiers\v1\tiers-identification.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\tiers\v3\tiers-media.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\tiers\v2\tiers-identification.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\tiers\v2\tiers-portefeuille.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\structure\v2\caracteristique-eds.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\structure\v2\poste-fonctionnel-agent.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\structure\v2\etablissement-mysys.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\rechercheapplication.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\application.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\regleApplication.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\elementconfportail.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\elementconfzone.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\recherchefamille.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\recherchesousfamille.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\recherchefavori.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\widget.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\recherchewidget.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\recherchewidgetjourneefo.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\zoneportail.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\sousfamille.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\portailmyway\v1\famille.d.ts" />
/// <reference path="..\..\_dependances\typings\services\ressources\encaisseagenceservice\v1\ctrlDebutJournee.d.ts" />
/// <reference path="..\..\_dependances\typings\socle-fonctionnel\19.11\myway.trans-pdt-entreprise.pdt-entreprise.d.ts" />

var Portefeuille;
(function (Portefeuille) {
    "use strict";
    Portefeuille.app = angular.module("portefeuille", ["ngRoute",
        "myway.ui", "ui.bootstrap", "ngAnimate", "moduleAgent", "myway.composantAide",
        "myway.comInterdomaine", "myway.comEds", "libPortail", "PdtEntreprise"]);
    var routeResolve = {
        initialisationApplication: ["InitialisationApplicationService",
            /* istanbul ignore next */
            function (initialisationApplicationService) {
                return initialisationApplicationService.initialisation();
            }
        ]
    };
    Portefeuille.app.config([
        "$routeProvider",
        function ($routeProvider) {
            $routeProvider.when(Portefeuille.Constantes.Url.CLIENTS, {
                controller: "ClientsControleur",
                templateUrl: "vues/clients-vue.html",
                controllerAs: "clientsCtrl",
                resolve: routeResolve
            });
            $routeProvider.when(Portefeuille.Constantes.Url.PORTEFEUILLE, {
                controller: "PortefeuilleControleur",
                templateUrl: "vues/portefeuille-vue.html",
                controllerAs: "portefeuilleCtrl",
                resolve: routeResolve
            });
            $routeProvider.when(Portefeuille.Constantes.Url.SELECTION_INDICATEURS, {
                controller: "SelectionIndicateursControleur",
                templateUrl: "vues/selection-indicateurs-vue.html",
                controllerAs: "selectionIndicateursCtrl",
                resolve: routeResolve
            });
            $routeProvider.when(Portefeuille.Constantes.Url.BILAN_REVUE, {
                controller: "BilanRevueControleur",
                templateUrl: "vues/bilan-revue-vue.html",
                controllerAs: "bilanRevueCtrl",
                resolve: routeResolve
            });
            $routeProvider.when(Portefeuille.Constantes.Url.SAISIE_REVUE, {
                controller: "SaisieRevueControleur",
                templateUrl: "vues/saisie-revue-vue.html",
                controllerAs: "saisieRevueCtrl",
                resolve: routeResolve
            });
            $routeProvider.when(Portefeuille.Constantes.Url.BILAN_REVUES_PORTEFEUILLE, {
                controller: "BilanRevuesPortefeuilleControleur",
                templateUrl: "vues/bilan-revues-portefeuille-vue.html",
                controllerAs: "bilanRevuesPortefeuilleCtrl",
                resolve: routeResolve
            });
            $routeProvider.otherwise({
                templateUrl: "vues/page-non-trouvee.html",
                resolve: routeResolve
            });
            // Non utilisé pour le moment
            //$routeProvider.when(Constantes.Url.DETAIL_CLIENT, {
            //    controller: "DetailClientControleur",
            //    templateUrl: "vues/detail-client-vue.html",
            //    controllerAs: "detailClientCtrl",
            //    resolve: routeResolve
            //});
        }
    ]);
    MyWay.Services.AppServiceParameters.Instance().PortalDomain = "http://myway-dua.sigcesie.caisse-epargne.fr:6080";
})(Portefeuille || (Portefeuille = {}));

/**
 * Enumeartions applicatives
 * @module Portefeuille.Enum
 * @author S0078068 (Yannis VESSEREAU)
 */
var Portefeuille;
(function (Portefeuille) {
    var Enum;
    (function (Enum) {
        "use strict";
        /**
         * Enumeration lièe à la page clients
         */
        var PageClients;
        (function (PageClients) {
            (function (TYPE_VUE) {
                TYPE_VUE[TYPE_VUE["VUE_RELATION_ECONOMIQUE"] = "VRE"] = "VUE_RELATION_ECONOMIQUE";
                TYPE_VUE[TYPE_VUE["VUE_CLIENTS"] = "VC"] = "VUE_CLIENTS";
            })(PageClients.TYPE_VUE || (PageClients.TYPE_VUE = {}));
            var TYPE_VUE = PageClients.TYPE_VUE;
            ;
            (function (TYPE_FORCAGE) {
                TYPE_FORCAGE[TYPE_FORCAGE["SANS"] = 0] = "SANS";
                TYPE_FORCAGE[TYPE_FORCAGE["CLIENTS"] = 1] = "CLIENTS";
                TYPE_FORCAGE[TYPE_FORCAGE["PROSPECTS"] = 2] = "PROSPECTS";
                TYPE_FORCAGE[TYPE_FORCAGE["TOUT"] = 3] = "TOUT";
            })(PageClients.TYPE_FORCAGE || (PageClients.TYPE_FORCAGE = {}));
            var TYPE_FORCAGE = PageClients.TYPE_FORCAGE;
            ;
        })(PageClients = Enum.PageClients || (Enum.PageClients = {}));
        /**
         * Enumeration lièe à la directive pf-tuile-indicateur
         */
        var PfTuileIndicateur;
        (function (PfTuileIndicateur) {
            (function (COULEUR) {
                COULEUR[COULEUR["AGENDA"] = "rouge"] = "AGENDA";
                COULEUR[COULEUR["PNB"] = "orange"] = "PNB";
                COULEUR[COULEUR["CA"] = "vert"] = "CA";
                COULEUR[COULEUR["EQUIPEMENTS"] = "bleu"] = "EQUIPEMENTS";
                COULEUR[COULEUR["COLLECT"] = "noir"] = "COLLECT";
                COULEUR[COULEUR["BALE2"] = "jaune"] = "BALE2";
            })(PfTuileIndicateur.COULEUR || (PfTuileIndicateur.COULEUR = {}));
            var COULEUR = PfTuileIndicateur.COULEUR;
            ;
        })(PfTuileIndicateur = Enum.PfTuileIndicateur || (Enum.PfTuileIndicateur = {}));
        var FiltrageRelationCommerciale;
        (function (FiltrageRelationCommerciale) {
            (function (FILTRECLIENTPROSPECT) {
                FILTRECLIENTPROSPECT[FILTRECLIENTPROSPECT["TOUS"] = "00"] = "TOUS";
                FILTRECLIENTPROSPECT[FILTRECLIENTPROSPECT["CLIENT"] = "01"] = "CLIENT";
                FILTRECLIENTPROSPECT[FILTRECLIENTPROSPECT["PROSPECTTIERS"] = "02"] = "PROSPECTTIERS";
            })(FiltrageRelationCommerciale.FILTRECLIENTPROSPECT || (FiltrageRelationCommerciale.FILTRECLIENTPROSPECT = {}));
            var FILTRECLIENTPROSPECT = FiltrageRelationCommerciale.FILTRECLIENTPROSPECT;
            ;
        })(FiltrageRelationCommerciale = Enum.FiltrageRelationCommerciale || (Enum.FiltrageRelationCommerciale = {}));
        /**
         * Enumeration concernant le type de valeur d'indicateur
         */
        var Indicateur;
        (function (Indicateur) {
            (function (TYPE) {
                TYPE[TYPE["DATE"] = "Date"] = "DATE";
                TYPE[TYPE["NOMBRE"] = "Nombre"] = "NOMBRE";
                TYPE[TYPE["MONTANT"] = "Montant"] = "MONTANT";
                TYPE[TYPE["POURCENT"] = "Pourcent"] = "POURCENT";
                TYPE[TYPE["TEXTE"] = "Texte"] = "TEXTE";
                TYPE[TYPE["BEGACLI"] = "Begacli"] = "BEGACLI";
            })(Indicateur.TYPE || (Indicateur.TYPE = {}));
            var TYPE = Indicateur.TYPE;
            ;
            (function (CODE) {
                CODE[CODE["CLIENTPROSPECT"] = "codeTypePersonne"] = "CLIENTPROSPECT";
                CODE[CODE["ACTIF"] = "actif"] = "ACTIF";
                CODE[CODE["EQUIPE"] = "equipe"] = "EQUIPE";
                CODE[CODE["LEADER"] = "leader"] = "LEADER";
                CODE[CODE["CA_N"] = "chiffreAffaireN"] = "CA_N";
                CODE[CODE["CA_N_MOINS_1"] = "chiffreAffaireN-1"] = "CA_N_MOINS_1";
                CODE[CODE["MARCHE"] = "libelleCourtSegmentMarche"] = "MARCHE";
                CODE[CODE["POTENTIEL_PROSPECT"] = "potentielProspect"] = "POTENTIEL_PROSPECT";
                CODE[CODE["SEG_RELATIONNELLE"] = "libelleLongSegmentationRel"] = "SEG_RELATIONNELLE";
                CODE[CODE["SEG_RELATIONNELLE_GROUPE"] = "SEG_REL_GRP"] = "SEG_RELATIONNELLE_GROUPE";
                CODE[CODE["DATE_DERNIER_ENTRETIEN"] = "DateDernierEntretien"] = "DATE_DERNIER_ENTRETIEN";
                CODE[CODE["DATE_DERNIER_RDV"] = "DateDernierRdv"] = "DATE_DERNIER_RDV";
                CODE[CODE["NB_RDV_ANNEE_EN_COURS"] = "NbRdvAnneeEncours"] = "NB_RDV_ANNEE_EN_COURS";
                CODE[CODE["NB_RDV_12_MOIS_GLISSANTS"] = "NbRdvSur12moisGliss"] = "NB_RDV_12_MOIS_GLISSANTS";
                CODE[CODE["DATE_PROCHAIN_RDV"] = "DateProchainRdv"] = "DATE_PROCHAIN_RDV";
                CODE[CODE["NOTE_BALE2"] = "noteBale2"] = "NOTE_BALE2";
                CODE[CODE["PART_ENGAG"] = "PART_ENGAG"] = "PART_ENGAG";
                CODE[CODE["PROCHAINE_REVISION"] = "revision"] = "PROCHAINE_REVISION";
                CODE[CODE["PNB_3112"] = "pnb3112"] = "PNB_3112";
                CODE[CODE["PNB_N"] = "pnbN"] = "PNB_N";
                CODE[CODE["PNB_N_MOINS_1"] = "pnbN-1"] = "PNB_N_MOINS_1";
                CODE[CODE["REV_DATE_DERNIERE_REVUE"] = "DateDerniereRevue"] = "REV_DATE_DERNIERE_REVUE";
                CODE[CODE["REV_NB_SSFAMILLES_PROPOSE"] = "NbSousFamilleAProposer"] = "REV_NB_SSFAMILLES_PROPOSE";
                CODE[CODE["REV_VALIDEE_PAR"] = "NomAgentRevue"] = "REV_VALIDEE_PAR";
                CODE[CODE["FLUX_CREDITEURS_N"] = "CREDITEUR_N"] = "FLUX_CREDITEURS_N";
                CODE[CODE["FLUX_CREDITEURS_N_MOINS_1"] = "CREDITEUR_N-1"] = "FLUX_CREDITEURS_N_MOINS_1";
                CODE[CODE["FLUX_DEBITEURS_N"] = "DEBITEUR_N"] = "FLUX_DEBITEURS_N";
                CODE[CODE["FLUX_DEBITEURS_N_MOINS_1"] = "DEBITEUR_N-1"] = "FLUX_DEBITEURS_N_MOINS_1";
                CODE[CODE["NB_AFFAIRES_EN_COURS"] = "AFF_EC"] = "NB_AFFAIRES_EN_COURS";
                CODE[CODE["NB_PROPOSITIONS_EN_COURS"] = "PROP_EC"] = "NB_PROPOSITIONS_EN_COURS";
                CODE[CODE["NB_APPETENCES"] = "APP_PROD"] = "NB_APPETENCES";
                // NOUVEL INDICATEUR enum code score
                CODE[CODE["SCORE_ACTIVATION"] = "SCORE_ACTI"] = "SCORE_ACTIVATION";
                CODE[CODE["SCORE_DEFAILLANCE"] = "SCORE_DEFA"] = "SCORE_DEFAILLANCE";
                CODE[CODE["SCORE_APPETENCE"] = "SCORE_APPE"] = "SCORE_APPETENCE";
                CODE[CODE["TOP_CC"] = "TOP_CC"] = "TOP_CC";
                CODE[CODE["PART_FLUX_CONFIES_CRED"] = "PART_FLUX_CONFIES_CRED"] = "PART_FLUX_CONFIES_CRED";
                CODE[CODE["PART_FLUX_CONFIES_DEB"] = "PART_FLUX_CONFIES_DEB"] = "PART_FLUX_CONFIES_DEB";
                CODE[CODE["PREMIER_EQUIPEMENT"] = "PREMIER_EQUIPEMENT_INDIC"] = "PREMIER_EQUIPEMENT";
                CODE[CODE["PREMIER_EQUIPEMENT_TAG"] = "PREMIER_EQUIPEMENT"] = "PREMIER_EQUIPEMENT_TAG";
                CODE[CODE["PREMIER_EQUIPEMENT_TEXTE"] = "PREMIER_EQUIPEMENT_TEXTE"] = "PREMIER_EQUIPEMENT_TEXTE";
                CODE[CODE["OBJECTIF_FLUX"] = "OBJECTIF_FLUX"] = "OBJECTIF_FLUX";
                CODE[CODE["ENCOURS_BDF"] = "ENCOURS_BDF"] = "ENCOURS_BDF";
                CODE[CODE["BEGACLI"] = "BEGACLI"] = "BEGACLI";
            })(Indicateur.CODE || (Indicateur.CODE = {}));
            var CODE = Indicateur.CODE;
            ;
            (function (CODEPREF) {
                // Pour changer l'ordre, il faut modifier la config dans indicateur-service.ts
                CODEPREF[CODEPREF["CLIENTPROSPECT"] = "A"] = "CLIENTPROSPECT";
                CODEPREF[CODEPREF["ACTIF"] = "B"] = "ACTIF";
                CODEPREF[CODEPREF["LEADER"] = "ZE"] = "LEADER";
                CODEPREF[CODEPREF["CA_N"] = "C"] = "CA_N";
                CODEPREF[CODEPREF["CA_N_MOINS_1"] = "D"] = "CA_N_MOINS_1";
                CODEPREF[CODEPREF["MARCHE"] = "E"] = "MARCHE";
                CODEPREF[CODEPREF["POTENTIEL_PROSPECT"] = "Z"] = "POTENTIEL_PROSPECT";
                CODEPREF[CODEPREF["SEG_RELATIONNELLE"] = "F"] = "SEG_RELATIONNELLE";
                CODEPREF[CODEPREF["SEG_RELATIONNELLE_GROUPE"] = "ZA"] = "SEG_RELATIONNELLE_GROUPE";
                CODEPREF[CODEPREF["DATE_DERNIER_ENTRETIEN"] = "G"] = "DATE_DERNIER_ENTRETIEN";
                CODEPREF[CODEPREF["DATE_DERNIER_RDV"] = "H"] = "DATE_DERNIER_RDV";
                CODEPREF[CODEPREF["NB_RDV_ANNEE_EN_COURS"] = "J"] = "NB_RDV_ANNEE_EN_COURS";
                CODEPREF[CODEPREF["NB_RDV_12_MOIS_GLISSANTS"] = "K"] = "NB_RDV_12_MOIS_GLISSANTS";
                CODEPREF[CODEPREF["DATE_PROCHAIN_RDV"] = "I"] = "DATE_PROCHAIN_RDV";
                CODEPREF[CODEPREF["NOTE_BALE2"] = "M"] = "NOTE_BALE2";
                CODEPREF[CODEPREF["PART_ENGAG"] = "ZD"] = "PART_ENGAG";
                CODEPREF[CODEPREF["PROCHAINE_REVISION"] = "L"] = "PROCHAINE_REVISION";
                CODEPREF[CODEPREF["PNB_N"] = "N"] = "PNB_N";
                CODEPREF[CODEPREF["PNB_N_MOINS_1"] = "O"] = "PNB_N_MOINS_1";
                CODEPREF[CODEPREF["REV_DATE_DERNIERE_REVUE"] = "Q"] = "REV_DATE_DERNIERE_REVUE";
                CODEPREF[CODEPREF["REV_NB_SSFAMILLES_PROPOSE"] = "R"] = "REV_NB_SSFAMILLES_PROPOSE";
                CODEPREF[CODEPREF["REV_VALIDEE_PAR"] = "P"] = "REV_VALIDEE_PAR";
                CODEPREF[CODEPREF["FLUX_CREDITEURS_N"] = "S"] = "FLUX_CREDITEURS_N";
                CODEPREF[CODEPREF["FLUX_CREDITEURS_N_MOINS_1"] = "T"] = "FLUX_CREDITEURS_N_MOINS_1";
                CODEPREF[CODEPREF["FLUX_DEBITEURS_N"] = "U"] = "FLUX_DEBITEURS_N";
                CODEPREF[CODEPREF["FLUX_DEBITEURS_N_MOINS_1"] = "V"] = "FLUX_DEBITEURS_N_MOINS_1";
                CODEPREF[CODEPREF["SANS_CONTRAT"] = "W"] = "SANS_CONTRAT";
                CODEPREF[CODEPREF["PNB_3112"] = "X"] = "PNB_3112";
                CODEPREF[CODEPREF["NB_AFFAIRES_EN_COURS"] = "Y"] = "NB_AFFAIRES_EN_COURS";
                CODEPREF[CODEPREF["NB_APPETENCES"] = "ZC"] = "NB_APPETENCES";
                CODEPREF[CODEPREF["NB_PROPOSITIONS_EN_COURS"] = "ZB"] = "NB_PROPOSITIONS_EN_COURS";
                // NOUVEL INDICATEUR enum codepref score
                CODEPREF[CODEPREF["SCORE_ACTIVATION"] = "ZF"] = "SCORE_ACTIVATION";
                CODEPREF[CODEPREF["SCORE_DEFAILLANCE"] = "ZG"] = "SCORE_DEFAILLANCE";
                CODEPREF[CODEPREF["SCORE_APPETENCE"] = "ZH"] = "SCORE_APPETENCE";
                CODEPREF[CODEPREF["TOP_CC"] = "ZI"] = "TOP_CC";
                CODEPREF[CODEPREF["PART_FLUX_CONFIES_CRED"] = "ZJ"] = "PART_FLUX_CONFIES_CRED";
                CODEPREF[CODEPREF["PART_FLUX_CONFIES_DEB"] = "ZK"] = "PART_FLUX_CONFIES_DEB";
                CODEPREF[CODEPREF["PREMIER_EQUIPEMENT"] = "ZL"] = "PREMIER_EQUIPEMENT";
                CODEPREF[CODEPREF["PREMIER_EQUIPEMENT_TAG"] = "ZM"] = "PREMIER_EQUIPEMENT_TAG";
                CODEPREF[CODEPREF["OBJECTIF_FLUX"] = "ZN"] = "OBJECTIF_FLUX";
                CODEPREF[CODEPREF["ENCOURS_BDF"] = "ZO"] = "ENCOURS_BDF";
                CODEPREF[CODEPREF["BEGACLI"] = "ZP"] = "BEGACLI";
                CODEPREF[CODEPREF["PREMIER_EQUIPEMENT_TEXTE"] = "ZQ"] = "PREMIER_EQUIPEMENT_TEXTE";
            })(Indicateur.CODEPREF || (Indicateur.CODEPREF = {}));
            var CODEPREF = Indicateur.CODEPREF;
            (function (CODEREST) {
                CODEREST[CODEREST["ACTIF"] = "ACTIF"] = "ACTIF";
                CODEREST[CODEREST["PERSONNE_PROTEGEE"] = "PP"] = "PERSONNE_PROTEGEE";
                CODEREST[CODEREST["CA_N"] = "CA_N"] = "CA_N";
                CODEREST[CODEREST["CA_N_MOINS_1"] = "CA_N-1"] = "CA_N_MOINS_1";
                CODEREST[CODEREST["PNB12MOISGLISSANT"] = "PNB"] = "PNB12MOISGLISSANT";
                CODEREST[CODEREST["PROCHAINE_REVISION"] = "REVISION"] = "PROCHAINE_REVISION";
                CODEREST[CODEREST["NOTE_BALE2"] = "BAL2"] = "NOTE_BALE2";
                CODEREST[CODEREST["PNB_3112"] = "PNB_3112"] = "PNB_3112";
                CODEREST[CODEREST["PNB_N"] = "PNB_N"] = "PNB_N";
                CODEREST[CODEREST["PNB_N_MOINS_1"] = "PNB_N-1"] = "PNB_N_MOINS_1";
                CODEREST[CODEREST["REVUE"] = "REVUE"] = "REVUE";
                CODEREST[CODEREST["FLUX"] = "FLUX"] = "FLUX";
                CODEREST[CODEREST["POT_PROS"] = "POT_PROS"] = "POT_PROS";
                CODEREST[CODEREST["AFFAIRES_EN_COURS"] = "AFF_EC"] = "AFFAIRES_EN_COURS";
                CODEREST[CODEREST["SEG_RELATIONNELLE_GROUPE"] = "SEG_REL_GRP"] = "SEG_RELATIONNELLE_GROUPE";
                CODEREST[CODEREST["PROPOSITIONS_EN_COURS"] = "PROP_EC"] = "PROPOSITIONS_EN_COURS";
                CODEREST[CODEREST["NB_APPETENCES"] = "APP_PROD"] = "NB_APPETENCES";
                CODEREST[CODEREST["PART_ENGAG"] = "PART_ENGAG"] = "PART_ENGAG";
                // NOUVEL INDICATEUR enum coderest score
                CODEREST[CODEREST["SCORE_ACTIVATION"] = "SCORE_ACTI"] = "SCORE_ACTIVATION";
                CODEREST[CODEREST["SCORE_DEFAILLANCE"] = "SCORE_DEFA"] = "SCORE_DEFAILLANCE";
                CODEREST[CODEREST["SCORE_APPETENCE"] = "SCORE_APPE"] = "SCORE_APPETENCE";
                CODEREST[CODEREST["TOP_CC"] = "TOP_CC"] = "TOP_CC";
                CODEREST[CODEREST["PART_FLUX_CONFIES_CRED"] = "PART_FLUX_CONFIES_CRED"] = "PART_FLUX_CONFIES_CRED";
                CODEREST[CODEREST["PART_FLUX_CONFIES_DEB"] = "PART_FLUX_CONFIES_DEB"] = "PART_FLUX_CONFIES_DEB";
                CODEREST[CODEREST["PREMIER_EQUIPEMENT"] = "PREMIER_EQUIPEMENT_INDIC"] = "PREMIER_EQUIPEMENT";
                CODEREST[CODEREST["PREMIER_EQUIPEMENT_TAG"] = "PREMIER_EQUIPEMENT"] = "PREMIER_EQUIPEMENT_TAG";
                CODEREST[CODEREST["PREMIER_EQUIPEMENT_TEXTE"] = "PREMIER_EQUIPEMENT_TEXTE"] = "PREMIER_EQUIPEMENT_TEXTE";
                CODEREST[CODEREST["OBJECTIF_FLUX"] = "OBJECTIF_FLUX"] = "OBJECTIF_FLUX";
                CODEREST[CODEREST["ENCOURS_BDF"] = "ENCOURS_BDF"] = "ENCOURS_BDF";
                CODEREST[CODEREST["BEGACLI"] = "BEGACLI"] = "BEGACLI";
            })(Indicateur.CODEREST || (Indicateur.CODEREST = {}));
            var CODEREST = Indicateur.CODEREST;
            (function (CODEREL) {
                CODEREL[CODEREL["CLIENTPROSPECT"] = "codeTypePersonneRel"] = "CLIENTPROSPECT";
                CODEREL[CODEREL["DATE_DERNIER_ENTRETIEN"] = "DateDernierEntretienRel"] = "DATE_DERNIER_ENTRETIEN";
                CODEREL[CODEREL["DATE_DERNIER_RDV"] = "DateDernierRdvRealiseRel"] = "DATE_DERNIER_RDV";
                CODEREL[CODEREL["DATE_PROCHAIN_RDV"] = "DateProchainRdvRel"] = "DATE_PROCHAIN_RDV";
                CODEREL[CODEREL["NB_RDV_ANNEE_EN_COURS"] = "NbRdvAnneeEncoursRel"] = "NB_RDV_ANNEE_EN_COURS";
                CODEREL[CODEREL["NB_RDV_12_MOIS_GLISSANTS"] = "NbRdvSur12moisGlissRel"] = "NB_RDV_12_MOIS_GLISSANTS";
                CODEREL[CODEREL["REV_NB_SSFAMILLES_PROPOSE"] = "NbSousFamilleAProposerRel"] = "REV_NB_SSFAMILLES_PROPOSE";
                CODEREL[CODEREL["PNB_3112"] = "pnb3112Rel"] = "PNB_3112";
                CODEREL[CODEREL["PNB_N"] = "pnbNRel"] = "PNB_N";
                CODEREL[CODEREL["PNB_N_MOINS_1"] = "pnbNMoins1Rel"] = "PNB_N_MOINS_1";
                CODEREL[CODEREL["POTENTIEL_PROSPECT"] = "potentielProspect"] = "POTENTIEL_PROSPECT";
                CODEREL[CODEREL["NB_AFFAIRES_EN_COURS"] = "NbAffairesEnCoursRel"] = "NB_AFFAIRES_EN_COURS";
                CODEREL[CODEREL["SEG_RELATIONNELLE_GROUPE"] = "SEG_REL_GRP"] = "SEG_RELATIONNELLE_GROUPE";
                CODEREL[CODEREL["NB_PROPOSITIONS_EN_COURS"] = "NbPropositionsEnCoursRel"] = "NB_PROPOSITIONS_EN_COURS";
                CODEREL[CODEREL["NB_APPETENCES"] = "APP_PROD_REL"] = "NB_APPETENCES";
                CODEREL[CODEREL["PART_ENGAG"] = "PART_ENGAG"] = "PART_ENGAG";
                CODEREL[CODEREL["REV_DATE_DERNIERE_REVUE"] = "DateDerniereRevueRel"] = "REV_DATE_DERNIERE_REVUE";
                CODEREL[CODEREL["ENCOURS_BDF"] = "ENCOURS_BDF"] = "ENCOURS_BDF";
                CODEREL[CODEREL["BEGACLI"] = "BEGACLI"] = "BEGACLI";
            })(Indicateur.CODEREL || (Indicateur.CODEREL = {}));
            var CODEREL = Indicateur.CODEREL;
            ;
            (function (INTITULE) {
                INTITULE[INTITULE["CLIENTPROSPECT"] = "Client/Prospect"] = "CLIENTPROSPECT";
                INTITULE[INTITULE["ACTIF"] = "Top Actif"] = "ACTIF";
                INTITULE[INTITULE["NON_EQUIPE"] = "Avec contrat"] = "NON_EQUIPE";
                INTITULE[INTITULE["CA_N"] = "Dernier CA"] = "CA_N";
                INTITULE[INTITULE["CA_N_MOINS_1"] = "Avant dernier CA"] = "CA_N_MOINS_1";
                INTITULE[INTITULE["LEADER"] = "Leader"] = "LEADER";
                INTITULE[INTITULE["MARCHE"] = "Marché"] = "MARCHE";
                INTITULE[INTITULE["POTENTIEL_PROSPECT"] = "Potentiel prospect"] = "POTENTIEL_PROSPECT";
                INTITULE[INTITULE["SEG_RELATIONNELLE"] = "Seg. relationnelle client"] = "SEG_RELATIONNELLE";
                INTITULE[INTITULE["SEG_RELATIONNELLE_GROUPE"] = "Seg. relationnelle groupe"] = "SEG_RELATIONNELLE_GROUPE";
                // SEG_RELATIONNELLE_GROUPE_TUILE = <any>"Seg. rel. groupe",
                INTITULE[INTITULE["DATE_DERNIER_ENTRETIEN"] = "Dernier CR"] = "DATE_DERNIER_ENTRETIEN";
                INTITULE[INTITULE["DATE_DERNIER_RDV"] = "Dernier RDV"] = "DATE_DERNIER_RDV";
                INTITULE[INTITULE["NB_RDV_ANNEE_EN_COURS"] = "Nb RDV "] = "NB_RDV_ANNEE_EN_COURS";
                INTITULE[INTITULE["NB_RDV_12_MOIS_GLISSANTS"] = "Nb RDV 12 derniers M"] = "NB_RDV_12_MOIS_GLISSANTS";
                INTITULE[INTITULE["DATE_PROCHAIN_RDV"] = "Prochain RDV"] = "DATE_PROCHAIN_RDV";
                INTITULE[INTITULE["NOTE_BALE2"] = "Note Bâle II"] = "NOTE_BALE2";
                INTITULE[INTITULE["PART_ENGAG"] = "Part en engagement"] = "PART_ENGAG";
                INTITULE[INTITULE["PROCHAINE_REVISION"] = "Prochaine révision"] = "PROCHAINE_REVISION";
                INTITULE[INTITULE["PNB_3112"] = "PNB 31/12/"] = "PNB_3112";
                INTITULE[INTITULE["PNB_N"] = "PNB N"] = "PNB_N";
                INTITULE[INTITULE["PNB_N_MOINS_1"] = "PNB N-1"] = "PNB_N_MOINS_1";
                INTITULE[INTITULE["REV_DATE_DERNIERE_REVUE"] = "Dernière revue"] = "REV_DATE_DERNIERE_REVUE";
                INTITULE[INTITULE["REV_NB_SSFAMILLES_PROPOSE"] = "Nb produits à proposer"] = "REV_NB_SSFAMILLES_PROPOSE";
                INTITULE[INTITULE["REV_VALIDEE_PAR"] = "Validé par"] = "REV_VALIDEE_PAR";
                INTITULE[INTITULE["FLUX_CREDITEURS_N"] = "Flux créditeurs N"] = "FLUX_CREDITEURS_N";
                INTITULE[INTITULE["FLUX_CREDITEURS_N_MOINS_1"] = "Flux créditeurs N-1"] = "FLUX_CREDITEURS_N_MOINS_1";
                INTITULE[INTITULE["FLUX_DEBITEURS_N"] = "Flux débiteurs N"] = "FLUX_DEBITEURS_N";
                INTITULE[INTITULE["FLUX_DEBITEURS_N_MOINS_1"] = "Flux débiteurs N-1"] = "FLUX_DEBITEURS_N_MOINS_1";
                INTITULE[INTITULE["NB_AFFAIRES_EN_COURS"] = "Nb affaires en cours"] = "NB_AFFAIRES_EN_COURS";
                INTITULE[INTITULE["NB_APPETENCES"] = "Nb appétences produits"] = "NB_APPETENCES";
                INTITULE[INTITULE["NB_PROPOSITIONS_EN_COURS"] = "Nb propositions en cours"] = "NB_PROPOSITIONS_EN_COURS";
                // NOUVEL INDICATEUR enum intitule score
                INTITULE[INTITULE["SCORE_ACTIVATION"] = "Score activation"] = "SCORE_ACTIVATION";
                INTITULE[INTITULE["SCORE_DEFAILLANCE"] = "Score défaillance"] = "SCORE_DEFAILLANCE";
                INTITULE[INTITULE["SCORE_APPETENCE"] = "Score appétence"] = "SCORE_APPETENCE";
                INTITULE[INTITULE["TOP_CC"] = "Top CC"] = "TOP_CC";
                INTITULE[INTITULE["PART_FLUX_CONFIES_CRED"] = "Part de flux créditeurs"] = "PART_FLUX_CONFIES_CRED";
                INTITULE[INTITULE["PART_FLUX_CONFIES_DEB"] = "Part de flux débiteurs"] = "PART_FLUX_CONFIES_DEB";
                INTITULE[INTITULE["PREMIER_EQUIPEMENT"] = "1er équipement"] = "PREMIER_EQUIPEMENT";
                INTITULE[INTITULE["PREMIER_EQUIPEMENT_TAG"] = "1er équipement tag"] = "PREMIER_EQUIPEMENT_TAG";
                INTITULE[INTITULE["PREMIER_EQUIPEMENT_TEXTE"] = "1er équipement"] = "PREMIER_EQUIPEMENT_TEXTE";
                INTITULE[INTITULE["OBJECTIF_FLUX"] = "Objectif de flux"] = "OBJECTIF_FLUX";
                INTITULE[INTITULE["ENCOURS_BDF"] = "Encours BDF"] = "ENCOURS_BDF";
                INTITULE[INTITULE["BEGACLI"] = "BEGACLI"] = "BEGACLI";
            })(Indicateur.INTITULE || (Indicateur.INTITULE = {}));
            var INTITULE = Indicateur.INTITULE;
            ;
            (function (FAMILLE) {
                FAMILLE[FAMILLE["CA"] = "CA/Budget"] = "CA";
                FAMILLE[FAMILLE["SEGMENTATION"] = "Segmentation"] = "SEGMENTATION";
                FAMILLE[FAMILLE["RENDEZ_VOUS"] = "Rendez vous"] = "RENDEZ_VOUS";
                FAMILLE[FAMILLE["RISQUE"] = "Risque"] = "RISQUE";
                FAMILLE[FAMILLE["NC"] = "NC"] = "NC";
                FAMILLE[FAMILLE["PNB"] = "PNB"] = "PNB";
                FAMILLE[FAMILLE["REVUE"] = "Revue de portefeuille"] = "REVUE";
                FAMILLE[FAMILLE["FLUX"] = "Flux"] = "FLUX";
                FAMILLE[FAMILLE["PROSPECT"] = "Segmentation"] = "PROSPECT";
                FAMILLE[FAMILLE["OPPORTUNITES"] = "Opportunités"] = "OPPORTUNITES";
                // NOUVEL INDICATEUR nouvelle famille
                FAMILLE[FAMILLE["PROSPECTION"] = "Prospection"] = "PROSPECTION";
            })(Indicateur.FAMILLE || (Indicateur.FAMILLE = {}));
            var FAMILLE = Indicateur.FAMILLE;
            ;
            (function (ICONE) {
                ICONE[ICONE["DATE_DERNIER_RDV"] = "itce-calendar"] = "DATE_DERNIER_RDV";
                ICONE[ICONE["DATE_PROCHAIN_RDV"] = "itce-calendar"] = "DATE_PROCHAIN_RDV";
                ICONE[ICONE["DATE_DERNIER_ENTRETIEN"] = "itce-pencil"] = "DATE_DERNIER_ENTRETIEN";
                ICONE[ICONE["NB_RDV_ANNEE_EN_COURS"] = "itce-calendar-o"] = "NB_RDV_ANNEE_EN_COURS";
                ICONE[ICONE["NB_RDV_12_MOIS_GLISSANTS"] = "itce-calendar-o"] = "NB_RDV_12_MOIS_GLISSANTS";
            })(Indicateur.ICONE || (Indicateur.ICONE = {}));
            var ICONE = Indicateur.ICONE;
            ;
        })(Indicateur = Enum.Indicateur || (Enum.Indicateur = {}));
        /**
         * Enumeration lièe aux filtres
         */
        var Filtre;
        (function (Filtre) {
            (function (COMPARATEUR) {
                COMPARATEUR[COMPARATEUR["SUPERIEUR"] = ">"] = "SUPERIEUR";
                COMPARATEUR[COMPARATEUR["INFERIEUR"] = "<"] = "INFERIEUR";
                COMPARATEUR[COMPARATEUR["EGALE"] = "="] = "EGALE";
                COMPARATEUR[COMPARATEUR["ENTRE"] = "Entre"] = "ENTRE";
                COMPARATEUR[COMPARATEUR["NC"] = "= NC"] = "NC";
                COMPARATEUR[COMPARATEUR["ECHUE"] = "= Echue (plus d'un an)"] = "ECHUE";
                COMPARATEUR[COMPARATEUR["ENCOURS"] = "= En cours (moins d'un an)"] = "ENCOURS";
                COMPARATEUR[COMPARATEUR["NONREALISEE"] = "= Non réalisée"] = "NONREALISEE";
            })(Filtre.COMPARATEUR || (Filtre.COMPARATEUR = {}));
            var COMPARATEUR = Filtre.COMPARATEUR;
            ;
            (function (OPERATEUR) {
                OPERATEUR[OPERATEUR["ET"] = "ET"] = "ET";
                OPERATEUR[OPERATEUR["OU"] = "OU"] = "OU";
            })(Filtre.OPERATEUR || (Filtre.OPERATEUR = {}));
            var OPERATEUR = Filtre.OPERATEUR;
            ;
        })(Filtre = Enum.Filtre || (Enum.Filtre = {}));
        /**
         * Enumération liée à la Revue
         */
        var Revue;
        (function (Revue) {
            (function (POPUP_REVUE) {
                POPUP_REVUE[POPUP_REVUE["POPUP_CLIENTS_PRODUIT_A_PROPOSER"] = 0] = "POPUP_CLIENTS_PRODUIT_A_PROPOSER";
                POPUP_REVUE[POPUP_REVUE["POPUP_CLIENTS_APPETENCE_PRODUIT"] = 0] = "POPUP_CLIENTS_APPETENCE_PRODUIT";
                POPUP_REVUE[POPUP_REVUE["POPUP_CLIENTS_A_ACTIVER"] = Number.MAX_VALUE] = "POPUP_CLIENTS_A_ACTIVER";
                POPUP_REVUE[POPUP_REVUE["POPUP_CLIENTS_TARIFICATION"] = 99977] = "POPUP_CLIENTS_TARIFICATION";
            })(Revue.POPUP_REVUE || (Revue.POPUP_REVUE = {}));
            var POPUP_REVUE = Revue.POPUP_REVUE;
            ;
        })(Revue = Enum.Revue || (Enum.Revue = {}));
        /**
         * Enumération type de vue dans la ressource statPortfeuilleEds
         */
        var Rest;
        (function (Rest) {
            (function (TYPE_VUE_STAT_GLOBAL) {
                TYPE_VUE_STAT_GLOBAL[TYPE_VUE_STAT_GLOBAL["VUE_GLOBAL"] = "0"] = "VUE_GLOBAL";
                TYPE_VUE_STAT_GLOBAL[TYPE_VUE_STAT_GLOBAL["VUE_DETAILLE"] = "1"] = "VUE_DETAILLE";
                TYPE_VUE_STAT_GLOBAL[TYPE_VUE_STAT_GLOBAL["VUE_GLOBAL_ET_DETAILLE"] = "2"] = "VUE_GLOBAL_ET_DETAILLE";
            })(Rest.TYPE_VUE_STAT_GLOBAL || (Rest.TYPE_VUE_STAT_GLOBAL = {}));
            var TYPE_VUE_STAT_GLOBAL = Rest.TYPE_VUE_STAT_GLOBAL;
            ;
        })(Rest = Enum.Rest || (Enum.Rest = {}));
        /**
         *
         */
        var Vue;
        (function (Vue) {
            (function (TYPE_VUE) {
                TYPE_VUE[TYPE_VUE["VUE_AGENT"] = "0"] = "VUE_AGENT";
                TYPE_VUE[TYPE_VUE["VUE_EDS"] = "1"] = "VUE_EDS";
            })(Vue.TYPE_VUE || (Vue.TYPE_VUE = {}));
            var TYPE_VUE = Vue.TYPE_VUE;
            ;
        })(Vue = Enum.Vue || (Enum.Vue = {}));
    })(Enum = Portefeuille.Enum || (Portefeuille.Enum = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        var Inject;
        (function (Inject) {
            "use strict";
            var Angular;
            (function (Angular) {
                Angular.$q = "$q";
                Angular.$modalInstance = "$modalInstance";
                Angular.$scope = "$scope";
                Angular.$location = "$location";
                Angular.$filter = "$filter";
                Angular.$parse = "$parse";
                Angular.$window = "$window";
                Angular.$rootScope = "$rootScope";
                Angular.$element = "$element";
                Angular.$anchorScroll = "$anchorScroll";
            })(Angular = Inject.Angular || (Inject.Angular = {}));
            var MyWay;
            (function (MyWay) {
                MyWay.serviceAgentExtended = "serviceAgentExtended";
                MyWay.serviceAgent = "serviceAgent";
                MyWay.tableServiceOpefi = "tableServiceOpefi";
                MyWay.mwsfRechercheEdsGlobaleService = "mwsfRechercheEdsGlobaleService";
                MyWay.data = "data";
                MyWay.mwEvents = "MW_EVENTS";
                MyWay.portailService = "portailService-libPortail";
            })(MyWay = Inject.MyWay || (Inject.MyWay = {}));
            var Services;
            (function (Services) {
                Services.suiviParComplementaireRestService = "SuiviComplementaireService";
                Services.choixEdsService = "ChoixEdsService";
                Services.contexteService = "ContexteService";
                Services.eventService = "EventService";
                Services.filtreService = "FiltreService";
                Services.begacliService = "BegacliService";
                Services.indicateurService = "IndicateurService";
                Services.lisaApplication = "LisaApplication";
                Services.listeClientsService = "ListeClientsService";
                Services.popupService = "PopupService";
                Services.portefeuilleService = "PortefeuilleService";
                Services.preferencesService = "PreferencesService";
                Services.rechercheAgentRestService = "RechercheAgentService";
                Services.recherchePortefeuilleRestService = "RecherchePortefeuilleService";
                Services.indicateursRestService = "IndicateursService";
                Services.rechercheCommercialRestService = "RechercheCommercialeService";
                Services.corporateInformationRestService = "CorporateFamilleLienService";
                Services.relationCommercialeRestService = "RelationCommercialeService";
                Services.clientRestService = "ClientService";
                Services.habilitationService = "HabilitationService";
                Services.gestionAffectationRestService = "GestionAffectationService";
                Services.choixUtilisateurService = "ChoixUtilisateurService";
                Services.modalePaniersService = "ModalePaniersService";
                Services.pfDragAndDropService = "PfDragAndDropService";
                Services.mwNotificationService = "MwNotificationService";
                Services.modalService = "modalService";
                Services.applicationUtils = "ApplicationUtils";
                Services.preferenceUtilisateurRestService = "PreferenceUtilisateurService";
                Services.restStatRentabiliteService = "StatRentabiliteService";
                Services.restStatRevueService = "StatRevueService";
                Services.restStatPortefeuilleService = "StatPortefeuilleService";
                Services.restStatFluxMouvementFinancierService = "StatFluxMouvementFinancierService";
                Services.statService = "StatsService";
                Services.ihmService = "IhmService";
                Services.rechercheRevueService = "RechercheRevueService";
                Services.indicateurFlecheService = "IndicateurFlecheService";
                Services.creationPourcentageService = "CreationPourcentageService";
                Services.restStatPortefeuilleEdsService = "StatPortefeuilleEdsService";
                Services.mwCsvService = "mwCsvService";
                Services.edsNiveauInferieurService = "EdsNiveauInferieurService";
                Services.mockService = "MockService";
            })(Services = Inject.Services || (Inject.Services = {}));
            var LibrairieD3;
            (function (LibrairieD3) {
                LibrairieD3.creationDonutService = "CreationDonutService";
                LibrairieD3.creationPourcentageService = "CreationPourcentageService";
            })(LibrairieD3 = Inject.LibrairieD3 || (Inject.LibrairieD3 = {}));
            var Autres;
            (function (Autres) {
                Autres.dataModale = "data";
            })(Autres = Inject.Autres || (Inject.Autres = {}));
        })(Inject = Constantes.Inject || (Constantes.Inject = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../constantes/inject-constantes.ts" />
/**
 * Controleur de la page Clients
 * @module Portefeuille.Controleurs
 * @author S0078068 (Yannis VESSEREAU)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Controleur de l'index
         */
        var ClientsControleur = (function () {
            /**
             * Constructeur
             */
            function ClientsControleur(serviceAgentExtended, $scope, $q, $location, $window, listeClientsService, $filter, popupService, $parse, tableService, eventService, lisaApplication, contexteService, indicateurService, filtreService, portefeuilleService, preferencesService, ihmService, portailService, habilitationService, mwCsvService, exportService, $timeout) {
                this.serviceAgentExtended = serviceAgentExtended;
                this.$scope = $scope;
                this.$q = $q;
                this.$location = $location;
                this.$window = $window;
                this.listeClientsService = listeClientsService;
                this.$filter = $filter;
                this.popupService = popupService;
                this.$parse = $parse;
                this.tableService = tableService;
                this.eventService = eventService;
                this.lisaApplication = lisaApplication;
                this.contexteService = contexteService;
                this.indicateurService = indicateurService;
                this.filtreService = filtreService;
                this.portefeuilleService = portefeuilleService;
                this.preferencesService = preferencesService;
                this.ihmService = ihmService;
                this.portailService = portailService;
                this.habilitationService = habilitationService;
                this.mwCsvService = mwCsvService;
                this.exportService = exportService;
                this.$timeout = $timeout;
                this.chargementEnCours = false;
                this.contexteGererRelation = {};
                // export excel
                this.formatDate = "DD/MM/YYYY";
                // création du fichier CSV
                this.nomFichierExport = "Export portefeuilles";
                this.colonneCsvClient = [
                    {
                        "title": "Suivi Par",
                        "bind": "nomAgent",
                        "cssClass": ""
                    }, {
                        "title": "Identifiant Portefeuille",
                        "bind": "identifiantPortefeuille",
                        "cssClass": ""
                    }, {
                        "title": "Libellé Portefeuille",
                        "bind": "libellePortefeuille",
                        "cssClass": ""
                    }, {
                        "title": "Relation économique",
                        "bind": "nomRelationEconomique",
                        "cssClass": ""
                    }, {
                        "title": "Identifiant Personne",
                        "bind": "id",
                        "cssClass": ""
                    }, {
                        "title": "Raison Sociale",
                        "bind": "nom",
                        "cssClass": ""
                    }, {
                        "title": "Leader",
                        "bind": "estLeader",
                        "cssClass": ""
                    }, {
                        "title": "Prospect",
                        "bind": "estClient",
                        "cssClass": ""
                    }, {
                        "title": "Sans Contrat",
                        "bind": "estSansContrat",
                        "cssClass": ""
                    }, {
                        "title": "Actif",
                        "bind": "estActif",
                        "cssClass": ""
                    }, {
                        "title": "1er Équipement",
                        "bind": "premierEquipement",
                        "cssClass": ""
                    }, {
                        "title": "Nb Personnes Relation",
                        "bind": "nbPersonneRelation",
                        "cssClass": ""
                    }];
                this.nombreAppelInitialiserTableaux = 0;
                this.etatChargementLong = -1;
                this.accessibiliteBoutonVoirProduitsPourClient = false;
                if (this.portefeuilleService.getTypeForcage()) {
                    this.initialiser(this.portefeuilleService.getTypeForcage());
                }
                else {
                    this.initialiser(Portefeuille.Enum.PageClients.TYPE_FORCAGE.SANS);
                }
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            ClientsControleur.prototype.initialiser = function (typeForcage) {
                var _this = this;
                ClientsControleur.logger.info(">>> Appel de la méthode : ClientsControleur.initialiser <<<");
                console.log("--> ClientsControleur.initialiser typeForcage : ", typeForcage);
                //this.typeForcageEnCours = typeForcage;
                this.estHabiliteConsultRevue = this.habilitationService.estHabiliteConsultRevue();
                this.estHabiliteMajRevue = this.habilitationService.estHabiliteMajRevue();
                this.messageChoixPtf = Portefeuille.Constantes.Messages.MESSAGE_CHOIX_PORTEFEUILLE;
                this.messageAucunPtf = Portefeuille.Constantes.Messages.MESSAGE_AUCUN_PORTEFEUILLE;
                this.chargementEnCours = true;
                this.listeFiltresClients = [];
                this.listeFiltresRelationEco = [];
                this.listeFiltres = [];
                this.listeIndicateursFiltre = [];
                this.listeIndicateursRelationEcoFiltre = [];
                this.listeClients = [];
                this.listeClientsAAfficher = [];
                this.listeRelationEco = [];
                this.listeRelationEcoAAfficher = [];
                this.listeIndicateursTableau = [];
                this.eventService.setClientsControleur(this);
                this.messageLimiteClientsAtteinte = this.valoriserMessageLimiteClientsAtteinte(this.portefeuilleService.getTypeForcage());
                this.dateMin = moment(Portefeuille.Constantes.Application.DATE_MIN).toDate();
                this.dateMax = moment(Portefeuille.Constantes.Application.DATE_MAX).toDate();
                console.log("--> ClientsControleur.initialiser portefeuilleService.aPortefeuilles() : ", this.portefeuilleService.aPortefeuille());
                console.log("--> ClientsControleur.initialiser portefeuilleService.aPortefeuillesAffiche() : ", this.portefeuilleService.aPortefeuillesAffiche());
                console.log("--> ClientsControleur.initialiser portefeuilleService.aPortefeuillesReelAffiche() : ", this.portefeuilleService.aPortefeuillesReelAffiche());
                console.log("--> ClientsControleur.initialiser portefeuilleService.aPortefeuilleExpertAffiche() : ", this.portefeuilleService.aPortefeuilleExpertAffiche());
                // On vérifie qu'un choix de portefeuille a bien été fait
                if (this.portefeuilleService.aPortefeuillesAffiche()) {
                    // Determination de la vue affichée par défaut
                    if (this.estEnForcageTypeClientsOuProspects()) {
                        this.typeVue = Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS;
                    }
                    else {
                        this.typeVue = this.ihmService.getTypeVue();
                    }
                    this.radioBoutonEstVueClient = this.typeVue;
                    if (this.portefeuilleService.getCaracteristiquesAgent()) {
                        this.nombreAppelInitialiserTableaux = this.nombreAppelInitialiserTableaux + 1;
                        return this.initApplication(typeForcage);
                    }
                    else {
                        this.contexteService.getAuthentification()
                            .then(function (authentification) {
                            var caracteristiquesAgent = {};
                            caracteristiquesAgent.codeEtablissement = authentification.codeEtablissement;
                            caracteristiquesAgent.designationAgent = authentification.agentConnecte.designationLongueAgent;
                            caracteristiquesAgent.identifiantElementStructure = +authentification.agentConnecte.numeroInterneEds;
                            caracteristiquesAgent.libelleFonction = authentification.agentConnecte.designationPosteFonctionnel;
                            _this.portefeuilleService.setCaracteristiquesAgent(caracteristiquesAgent);
                            _this.nombreAppelInitialiserTableaux = _this.nombreAppelInitialiserTableaux + 1;
                            //return this.initTableaux(typeForcage);
                            return _this.initApplication(typeForcage);
                        });
                    }
                }
                else {
                    this.chargementEnCours = false;
                    return this.$q.when();
                }
            };
            /**
             *
             * @param typeForcage
             */
            ClientsControleur.prototype.initApplication = function (typeForcage) {
                var _this = this;
                return this.contexteService.getContexte().then(function (contexte) {
                    return _this.serviceAgentExtended.DonneesDelocalisees.getDonneesDelocalisees(contexte.codeEtablissement, Portefeuille.Constantes.Application.TABLE_DELOC_SEGMENTATIONS).then(function (resultat) {
                        // récupère les libellés segmentation BDR
                        if (resultat.donnees) {
                            resultat.donnees.forEach(function (donnee) {
                                if (donnee.CODLTS === "BM") {
                                    // on ajout edans Utils qui fera la transformation direct à la récupération des indicateurs (évite un traitement en plus)
                                    Portefeuille.Services.Utils.ApplicationUtils.segmentationsBDR.push(donnee);
                                }
                            });
                        }
                        // puis initialise les relations ecos et indicateurs clients
                        return _this.initTableaux(typeForcage);
                    });
                });
            };
            // récupère les relations éco et la liste des clients puis les indicateurs clients
            ClientsControleur.prototype.initTableaux = function (typeForcage) {
                var _this = this;
                // Si on est en train de regarder les client d'un portefeuille expert (SPC), on n'affiche pas la conlonne "nb personnes relation"
                var avecColonneNbClientRelation = this.portefeuilleService.aPortefeuilleExpertAffiche() ? false : true;
                this.tableauClients = new Portefeuille.Modeles.Tableaux.TableauClient(this, this, this.$filter, this.$parse, this.listeClients, this.listeIndicateursTableau, avecColonneNbClientRelation);
                this.tableauRelations = new Portefeuille.Modeles.Tableaux.TableauRelation(this, this, this.$filter, this.$parse, this.listeRelationEco, this.listeIndicateursTableau);
                this.listeTotaleIndicateurs = this.indicateurService.getListeTotaleIndicateursType();
                this.pageActuelle = 1;
                // Si on arrive du bloc "Revue de portefeuille" on ne cherche pas dans les preferences car les indicateurs revues sont fixés à l'avance, sinon on cherche dans le panier
                return this.serviceAgentExtended.getFromContext(Portefeuille.Constantes.Contexte.ACCES_DEPUIS_BLOC_REVUE).then(function (accesDepuisBlocRevue) {
                    var isAccesDepuisBlocRevue = accesDepuisBlocRevue === "O";
                    _this.isAccesDepuisBlocRevue = isAccesDepuisBlocRevue;
                    _this.isAfficherMessageLimiteClientAtteinte = _this.controlerLimiteClientAtteinte(isAccesDepuisBlocRevue);
                    if (isAccesDepuisBlocRevue) {
                        // si on est passé par le bloc Revue (typeForcage = TOUS) et qu'on a débranché vers la revue, au retour il faut qu'on check ce qu'on dans le context
                        // pour appeler la liste des relations éco enb 9999 pour avoir les clients
                        typeForcage = Portefeuille.Enum.PageClients.TYPE_FORCAGE.TOUT;
                        _this.listeIndicateursTableau = _this.indicateurService.getListeIndicateursRevue();
                        return _this.getRelationEconomiques(typeForcage);
                    }
                    else {
                        return _this.preferencesService.lirePanierDefaut(_this.listeTotaleIndicateurs)
                            .then(function (panierDefautPref) {
                            _this.panierDefaut = panierDefautPref;
                            // Determination de la liste des indicateurs choisis
                            if (typeForcage === Portefeuille.Enum.PageClients.TYPE_FORCAGE.TOUT) {
                                _this.panierDefaut = _this.preferencesService.convertirPanierPreferenceEnApplicatif(_this.indicateurService.getPanierDeForcage(), _this.listeTotaleIndicateurs, Portefeuille.Constantes.Application.NOM_PANIER_FORCAGE, false);
                                _this.listeIndicateursTableau = _this.panierDefaut.listeChoixIndicateurs;
                            }
                            else {
                                _this.listeIndicateursTableau = panierDefautPref ? panierDefautPref.listeChoixIndicateurs : [];
                            }
                            return _this.getRelationEconomiques(typeForcage);
                        });
                    }
                });
            };
            ClientsControleur.prototype.getRelationEconomiques = function (typeForcage) {
                var _this = this;
                return this.listeClientsService.getListeRelationsEconomiques(this.portefeuilleService.getCaracteristiquesAgent().identifiantElementStructure, this.portefeuilleService.getListePortefeuillesVisu(), typeForcage, this.listeIndicateursTableau, this.isAccesDepuisBlocRevue, this.portefeuilleService.getListeCodeSuiviParComplementairePortefeuillesExpertVisu())
                    .then(function (listeRelationsEco) {
                    _this.listeRelationEco = listeRelationsEco.sort(function (a, b) { return (a.nom > b.nom) ? 1 : ((b.nom > a.nom) ? -1 : 0); });
                    _this.listeRelationEcoFiltre = angular.copy(_this.listeRelationEco);
                    _this.listeRelationEcoFiltre.unshift(_this.getRelationEcoToutes());
                    _this.choixRelationEco = _.where(_this.listeRelationEcoFiltre, { "id": "" })[0];
                    _this.listeRelationEcoAAfficher = _this.listeRelationEco;
                    _this.tableauRelations = new Portefeuille.Modeles.Tableaux.TableauRelation(_this, _this, _this.$filter, _this.$parse, _this.listeRelationEco, _this.listeIndicateursTableau);
                    _this.listeIndicateursRelationEcoFiltre = _this.listeClientsService.getListeIndicateursRelationEcoFiltre();
                    _.forEach(_this.listeRelationEco, function (relationEco) {
                        relationEco.listeClients = _this.listeClientsService.ordonnerListeClientsAvecLeader(relationEco.listeClients);
                        // ici, on ajoute pour chaque client de la liste , le nombre de clients dans la relation.
                        var nb = relationEco.listeClients.length;
                        for (var _i = 0, _a = relationEco.listeClients; _i < _a.length; _i++) {
                            var itemClient = _a[_i];
                            itemClient.nbPersonneRelation = nb;
                        }
                        _this.listeClients = _this.listeClients.concat(relationEco.listeClients);
                    });
                    _this.listeClientsAAfficher = _this.listeClients;
                    _this.tableauClients = new Portefeuille.Modeles.Tableaux.TableauClient(_this, _this, _this.$filter, _this.$parse, _this.listeClients, _this.listeIndicateursTableau, true);
                    _this.majFiltres();
                    _this.relationEcoPourConsultationProduits = angular.copy(_this.choixRelationEco);
                })
                    .catch(function (erreur) {
                    return _this.serviceAgentExtended.getFromContext(Portefeuille.Constantes.Contexte.ACCES_DEPUIS_BLOC_REVUE).then(function (accesDepuisBlocRevue) {
                        if (erreur.codeLibelle === Portefeuille.Constantes.Service.RELATION_COMMERCIALE_CODE_MAX_CLIENT_ATTEINT && accesDepuisBlocRevue !== "O") {
                            // si on revient directement de la revue, on vérifie si un forcage est déja présent
                            return _this.contexteService.recupererRetourDebranchement()
                                .then(function (contexteGererPortefeuille) {
                                if (contexteGererPortefeuille
                                    && contexteGererPortefeuille.objetEdsVisu
                                    && contexteGererPortefeuille.objetEdsVisu.typeForcage
                                    && contexteGererPortefeuille.objetEdsVisu.typeForcage !== Portefeuille.Enum.PageClients.TYPE_FORCAGE.SANS) {
                                    _this.portefeuilleService.setTypeForcage(contexteGererPortefeuille.objetEdsVisu.typeForcage);
                                    _this.listeClientsService.setAffichageModificationChoix(contexteGererPortefeuille.objetEdsVisu.affichageModificationChoix);
                                    return _this.initialiser(contexteGererPortefeuille.objetEdsVisu.typeForcage);
                                }
                                else {
                                    return _this.accederForcage();
                                }
                            });
                        }
                        else {
                            ClientsControleur.logger.error("Erreur de récupération du portefeuille", erreur.codeLibelle, erreur.libelle);
                            return _this.popupService.showErreur(erreur);
                        }
                    });
                })
                    .finally(function () {
                    _this.nombreAppelInitialiserTableaux = _this.nombreAppelInitialiserTableaux - 1;
                    _this.chargementEnCours = !(_this.nombreAppelInitialiserTableaux === 0);
                    // si on revient directement de la revue, on a un filtrage sur la relation
                    return _this.contexteService.recupererRetourDebranchement()
                        .then(function (contexteGererPortefeuille) {
                        if (contexteGererPortefeuille
                            && contexteGererPortefeuille.objetEdsVisu
                            && contexteGererPortefeuille.identifiantRelation) {
                            _this.portefeuilleService.setTypeForcage(contexteGererPortefeuille.objetEdsVisu.typeForcage);
                            if (contexteGererPortefeuille.objetEdsVisu.typeForcage === Portefeuille.Enum.PageClients.TYPE_FORCAGE.CLIENTS ||
                                contexteGererPortefeuille.objetEdsVisu.typeForcage === Portefeuille.Enum.PageClients.TYPE_FORCAGE.PROSPECTS) {
                                _this.affichageVueClient();
                            }
                            else {
                                // applique les filtres relation et clients sans changer la vue
                                // si on est en vue relation éco, il faut appliquer en priorité le filtre client qui s'applique aussi en vue relation, car on va etre dans le détail
                                var filtresRelations = _this.appliquerFiltresRelationApresDebranchement(contexteGererPortefeuille.filtresRelation);
                                var filtresClients = _this.appliquerFiltresApresDebranchement(contexteGererPortefeuille.filtres);
                                // maintenant on se positionne au bon endroit: en vue relation éco ou clients
                                if (contexteGererPortefeuille.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {
                                    // force en vue clients
                                    _this.radioBoutonEstVueClient = contexteGererPortefeuille.typeVue;
                                    _this.affichageVueClient();
                                    if (filtresClients) {
                                        _this.majFiltres();
                                    }
                                }
                                else {
                                    // force en vue relation economique
                                    _this.radioBoutonEstVueClient = contexteGererPortefeuille.typeVue;
                                    _this.affichageVueRelationEco();
                                    _this.typeVue = Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS; // met en mode clients pour afficher les filtres clients
                                    if (filtresClients) {
                                        _this.listeFiltres = contexteGererPortefeuille.filtres;
                                        _this.majFiltres();
                                    }
                                    else if (filtresRelations) {
                                        _this.majFiltres();
                                    }
                                    // on se met en vue relation éco. En vue relation éco on se positionne tjs sur le détail de la dernière relation éco vue
                                    // (pour débrancher on était forcement dans le détail d'une relation eco)
                                    _this.filtrageTableauClient(contexteGererPortefeuille.identifiantRelation.toString());
                                }
                            }
                            //Remise en place des filtre et du positionnement dans le tableau
                            _this.miseAJourTableauAvecContexte(contexteGererPortefeuille);
                            // suppression du contexte
                            var listeContextesASupprimer = [Portefeuille.Constantes.Contexte.CONTEXTE_VERS_REVUE, Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF];
                            return _this.contexteService.supprimerContexteDevenuInutile(listeContextesASupprimer);
                        }
                        else {
                            if (_this.ihmService.getTypeVue() === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {
                                _this.affichageVueClient();
                            }
                        }
                        _this.$scope.$applyAsync();
                    });
                });
            };
            // lorsqu'on revient d'un débranchement, si des filtres avaient été positonnés on va les réappliquer
            ClientsControleur.prototype.appliquerFiltresApresDebranchement = function (filtres) {
                if (filtres && filtres.length > 0) {
                    this.filtreService.setFiltresClients(filtres);
                    return true;
                }
                else {
                    return false;
                }
            };
            ClientsControleur.prototype.appliquerFiltresRelationApresDebranchement = function (filtres) {
                if (filtres && filtres.length > 0) {
                    this.filtreService.setFiltresRelationsEco(filtres);
                    return true;
                }
                else {
                    return false;
                }
            };
            ClientsControleur.prototype.majFiltres = function () {
                if (this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {
                    this.listeIndicateursFiltre = this.listeClientsService.getListeIndicateursFiltre();
                    this.listeFiltresClients = this.filtreService.getFiltresClients();
                    this.listeFiltres = this.listeFiltresClients;
                    if (this.listeFiltresClients && this.listeFiltresClients.length > 0) {
                        // Maj liste filtre selon dispo indicateur
                        this.listeFiltresClients = this.filtreService.majAndGetFiltresClientsAvecListeIndicateursDispo(this.listeIndicateursTableau);
                    }
                }
                else {
                    this.listeIndicateursFiltre = this.listeClientsService.getListeIndicateursRelationEcoFiltre();
                    this.listeFiltresRelationEco = this.filtreService.getFiltresRelationsEco();
                    this.listeFiltres = this.listeFiltresRelationEco;
                    if (this.listeFiltresRelationEco && this.listeFiltresRelationEco.length > 0) {
                        // Maj liste filtre selon dispo indicateur
                        this.listeFiltresRelationEco = this.filtreService.majAndGetFiltresRelationsEcoAvecListeIndicateursDispo(this.listeIndicateursTableau);
                    }
                }
                //console.log(">>>> listeIndicateursFiltre >>>>", this.listeIndicateursFiltre);
                this.majTableauSuiteModificationFiltre(this.listeIndicateursFiltre);
            };
            ClientsControleur.prototype.getRelationEcoToutes = function () {
                var toutesRelation = {};
                toutesRelation.id = "";
                toutesRelation.nom = "Toutes les relations";
                toutesRelation.listeClients = [];
                toutesRelation.listeIndicateurs = [];
                return toutesRelation;
            };
            ClientsControleur.prototype.filtrageTableauClient = function (filtreRelationEco) {
                // AAAA, ici, on a cliqué sur la ligne en vue relation.
                this.typeVue = Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS;
                if (filtreRelationEco) {
                    this.choixRelationEco = _.where(this.listeRelationEcoFiltre, { "id": filtreRelationEco })[0];
                    this.listeClientsFiltre = _.where(this.listeClients, { "idRelationEconomique": +filtreRelationEco });
                    this.listeClientsAAfficher = this.filtreService.filtrerListeClients(this.listeClientsFiltre, this.listeFiltresClients);
                    this.tableauClients = new Portefeuille.Modeles.Tableaux.TableauClient(this, this, this.$filter, this.$parse, this.listeClientsAAfficher, this.listeIndicateursTableau, false);
                }
                else {
                    this.choixRelationEco = _.where(this.listeRelationEcoFiltre, { "id": "" })[0];
                    this.listeClientsAAfficher = this.filtreService.filtrerListeClients(this.listeClients, this.listeFiltresClients);
                    this.tableauClients = new Portefeuille.Modeles.Tableaux.TableauClient(this, this, this.$filter, this.$parse, this.listeClientsAAfficher, this.listeIndicateursTableau, false);
                }
                this.relationEcoPourConsultationProduits = angular.copy(this.choixRelationEco);
            };
            /**
             * Méthode appelé lors de l'action de sélection d'un client dans le tableau
             * @param {Modeles.Application.IRelation} relation ou {Modeles.Application.IClient} client
             * @returns {void}
             */
            ClientsControleur.prototype.onSelectionChange = function (selectedObjet) {
                ClientsControleur.logger.info(">>> Appel de la méthode : ClientsControleur.onSelectionChange <<<");
                var relationEcoDuClientSelectionne = null;
                //Ici selectedObjet est de type ICLient
                if (this.estVueClients()) {
                    this.accessibiliteBoutonVoirProduitsPourClient = selectedObjet.checked;
                    if (selectedObjet.checked && selectedObjet.idRelationEconomique) {
                        relationEcoDuClientSelectionne = _.find(this.listeRelationEco, function (relationEcoLue) {
                            if (relationEcoLue && relationEcoLue.id === selectedObjet.idRelationEconomique.toString()) {
                                return true;
                            }
                        });
                        this.relationEcoPourConsultationProduits = angular.copy(relationEcoDuClientSelectionne);
                    }
                }
                //Ici selectedObjet est de type IRelationEconomique
                if (this.estVueRelationEco()) {
                    this.estAvecFiltreColonne = false;
                    this.listeFiltres = this.listeFiltresClients;
                    if (selectedObjet.checked) {
                        this.construireContexteRel();
                        //this.tableauRelations.selectedItems = []; // deselection de la ligne
                        this.filtrageTableauClient(selectedObjet.id);
                    }
                }
            };
            /**
             * Methode qui permet d'ouvrir la modale de filtrage
             * @returns {void}
             */
            ClientsControleur.prototype.accederAuxFiltres = function () {
                var _this = this;
                var data = {};
                data.listeIndicateursTableau = angular.copy(this.listeIndicateursTableau);
                if (this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {
                    data.listeFiltres = angular.copy(this.listeFiltresClients);
                    data.listeIndicateursFiltre = angular.copy(this.listeIndicateursFiltre);
                    data.estVueClient = true;
                }
                else {
                    data.listeFiltres = angular.copy(this.listeFiltresRelationEco);
                    data.listeIndicateursFiltre = angular.copy(this.listeIndicateursRelationEcoFiltre);
                    data.estVueClient = false;
                }
                var templateDatas = {};
                templateDatas.model = data;
                this.popupService.showModalFull("vues/template-modale/modale-filtre-vue.html", "ModaleFiltreControleur", templateDatas)
                    .then(function (donneesDeSortie) {
                    if (_this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {
                        _this.filtreService.setFiltresClients(donneesDeSortie.listeFiltres);
                    }
                    else {
                        _this.filtreService.setFiltresRelationsEco(donneesDeSortie.listeFiltres);
                    }
                    // ajoute une action remarquable
                    _this.contexteService.tracerSuiviAction(ClientsControleur.logger, Portefeuille.Constantes.ActionsRemarquables.BTN_FILTRES);
                    _this.majFiltres();
                });
            };
            /**
             * Methode qui permet de mettre à jour un tableau suite à une modification de filtre
             * @param {Array<Modeles.Application.IIndicateurFiltre>} listeIndicateursFiltre
             * @returns {void}
             */
            //private majTableauSuiteModificationFiltre(listeFiltres: Array<Modeles.Application.IFiltre>, listeIndicateursFiltre: Array<Modeles.Application.IIndicateurFiltre>): void {
            ClientsControleur.prototype.majTableauSuiteModificationFiltre = function (listeIndicateursFiltre) {
                var _this = this;
                this.chargementEnCours = true;
                if (this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {
                    //this.listeFiltresClients = listeFiltres;
                    this.listeIndicateursFiltre = listeIndicateursFiltre;
                    this.listeClientsAAfficher = this.listeClients;
                    if (this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS && (this.choixRelationEco && this.choixRelationEco.id !== "")) {
                        this.listeClientsAAfficher = this.listeClientsFiltre;
                    }
                    if (this.listeFiltresClients.length > 0) {
                        this.listeClientsAAfficher = this.filtreService.filtrerListeClients(this.listeClientsAAfficher, this.listeFiltresClients);
                    }
                    // Si on est en train de regarder les client d'un portefeuille expert (SPC), on n'affiche pas la conlonne "nb personnes relation"
                    var avecColonneNbClientRelation = this.portefeuilleService.aPortefeuilleExpertAffiche() ? false : true;
                    this.tableauClients = new Portefeuille.Modeles.Tableaux.TableauClient(this, this, this.$filter, this.$parse, this.listeClientsAAfficher, this.listeIndicateursTableau, avecColonneNbClientRelation);
                }
                else {
                    //this.listeFiltresRelationEco = listeFiltres;
                    this.listeIndicateursRelationEcoFiltre = listeIndicateursFiltre;
                    this.listeRelationEcoAAfficher = this.listeRelationEco;
                    if (this.listeFiltresRelationEco.length > 0) {
                        this.listeRelationEcoAAfficher = this.filtreService.filtrerListeRelationsEco(this.listeRelationEcoAAfficher, this.listeFiltresRelationEco);
                    }
                    this.tableauRelations = new Portefeuille.Modeles.Tableaux.TableauRelation(this, this, this.$filter, this.$parse, this.listeRelationEcoAAfficher, this.listeIndicateursTableau);
                }
                angular.element(document.querySelector("#" + this.definirIndentifiantTableauEnCours())).ready(function () {
                    _this.chargementEnCours = false;
                    _this.$scope.$applyAsync();
                });
            };
            /**
             * Methode qui permet d'aller à la page de gestion des indicateurs
             * @returns {void}
             */
            ClientsControleur.prototype.accederAuxIndicateursV2 = function () {
                // ajoute une action remarquable
                this.contexteService.tracerSuiviAction(ClientsControleur.logger, Portefeuille.Constantes.ActionsRemarquables.BTN_PANIER);
                this.$location.path(Portefeuille.Constantes.Url.SELECTION_INDICATEURS);
            };
            /**
             * Methode qui permet d'ouvrir la modale de forcage
             * @returns {void}
             */
            ClientsControleur.prototype.accederForcage = function () {
                var _this = this;
                return this.popupService.showModalMd("vues/template-modale/modale-avertissement-choix-portefeuille-vue.html", "ModaleAvertissementChoixPortefeuilleControleur", null).then(function (retourPopup) {
                    if (retourPopup) {
                        _this.listeClientsService.setAffichageModificationChoix(retourPopup.nombreBoutonsAffiches > 1);
                        if (retourPopup.typeForcage !== Portefeuille.Enum.PageClients.TYPE_FORCAGE.SANS) {
                            //La limite du nombre de clients pour un portefeuille est atteinte (350 max à ce jour)
                            if (_this.listeClientsService.getEstLimiteClientsAtteinte()) {
                                _this.messageLimiteClientsAtteinte = _this.valoriserMessageLimiteClientsAtteinte(retourPopup.typeForcage);
                            }
                            if (_this.portefeuilleService.getTypeForcage() !== retourPopup.typeForcage) {
                                _this.listeClientsService.razRelations();
                            }
                            _this.portefeuilleService.setTypeForcage(retourPopup.typeForcage);
                            return _this.initialiser(retourPopup.typeForcage);
                        }
                        else {
                            return _this.eventService.ouvrirVoletChoixPortefeuilleIndexControleur();
                        }
                    }
                    else {
                        _this.listeClientsService.initialiserEstLimiteClientsAtteinte(null);
                        return _this.eventService.ouvrirVoletChoixPortefeuilleIndexControleur();
                    }
                });
            };
            ClientsControleur.prototype.afficherLigneRelationEco = function () {
                return (!this.chargementEnCours && this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS && (this.choixRelationEco && this.choixRelationEco.id !== ""));
            };
            ClientsControleur.prototype.afficherTableauRelation = function () {
                return (!this.chargementEnCours && this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE);
            };
            ClientsControleur.prototype.afficherTableauClients = function () {
                return (!this.chargementEnCours && this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS);
            };
            ClientsControleur.prototype.estVueClients = function () {
                return this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS;
            };
            ClientsControleur.prototype.estVueRelationEco = function () {
                return this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE;
            };
            ClientsControleur.prototype.estAfficheBtnRetour = function () {
                return this.choixRelationEco && this.choixRelationEco.id !== "";
            };
            /** Indique si le bouton "Effectuer la revue" est visible ou non (true => visible) */
            ClientsControleur.prototype.estAfficheBtnEffectuerRevue = function () {
                //Le bouton "Effectuer la revue" n'est visible que sur les vues clients et si l'habilitation est ok
                return this.typeVue !== Portefeuille.Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE && this.estHabiliteMajRevue && this.estHabiliteConsultRevue && this.portefeuilleService.aPortefeuillesReelAffiche();
            };
            /**
             * Indique si le bouton consulter les produit est visible
             */
            ClientsControleur.prototype.estAfficheBtnVoirProduits = function () {
                //Le bouton "Consulter les produits" n'est visible que sur les vues relation eco detail et si l'habilitation est ok
                // Ajout limitation si on est en train de regarder de portefeuilles Expert (SPC)
                return (this.afficherLigneRelationEco() && this.estHabiliteConsultRevue) || (this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS);
            };
            // le bouton Exporter n'est visible que en Vue Clients (pas en Relations éco ni en détail de relation éco)
            ClientsControleur.prototype.estAfficheBtnExporter = function () {
                return this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS ||
                    (this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE && (this.choixRelationEco && this.choixRelationEco.id !== ""));
            };
            ClientsControleur.prototype.estAfficherBoutonSynthese = function () {
                return this.typeVue !== Portefeuille.Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE;
            };
            ClientsControleur.prototype.estDisabledBoutonVoirProduits = function () {
                if (this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {
                    if (this.choixRelationEco && this.choixRelationEco.id) {
                        return false;
                    }
                    else {
                        return !this.accessibiliteBoutonVoirProduitsPourClient;
                    }
                }
                return true;
            };
            /** Indique si le bouton "Effectuer la revue" est actif ou non (true => inactif) */
            ClientsControleur.prototype.estDisabledBtnEffectuerRevue = function () {
                var resultat = true; //Par défaut le bouton est inactif.
                if (this.tableauClients && this.tableauClients.selectedItems && this.tableauClients.selectedItems.length > 0) {
                    //Une ligne doit être sélectionnée pour que l'on envisage d'activer le bouton "Effectuer la revue"
                    resultat = this.typeVue !== Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS;
                }
                return resultat;
            };
            ClientsControleur.prototype.getTitreVue = function () {
                if (this.estVueClients()) {
                    return Portefeuille.Constantes.Application.TITRE_VUE_CLIENT;
                }
                else {
                    return Portefeuille.Constantes.Application.TITRE_VUE_RELATION;
                }
            };
            ClientsControleur.prototype.getNomPanier = function () {
                if (this.panierDefaut) {
                    return this.panierDefaut.nom ? Portefeuille.Constantes.Application.CHAINE_NOM_PANIER_INDICATEUR + ": \"" + this.panierDefaut.nom + "\"" : Portefeuille.Constantes.Application.CHAINE_NOM_PANIER_INDICATEUR;
                }
                else {
                    return "";
                }
            };
            /**
             * Méthode pour récupérer le texte sur le ratio client ou relation disponible suite à filtrage
             * @returns {string}
             */
            ClientsControleur.prototype.getTxtRatioFiltrage = function () {
                if (this.estVueClients()) {
                    var typeForcage = this.portefeuilleService.getTypeForcage();
                    if (typeForcage && typeForcage === Portefeuille.Enum.PageClients.TYPE_FORCAGE.CLIENTS) {
                        return "Nb clients / prospects: " + this.nbClientsRelationsFiltre() + "/" + this.nbClientsRelationsTotal();
                    }
                    if (typeForcage && typeForcage === Portefeuille.Enum.PageClients.TYPE_FORCAGE.PROSPECTS) {
                        return "Nb prospects: " + this.nbClientsRelationsFiltre() + "/" + this.nbClientsRelationsTotal();
                    }
                    return "Nb clients / prospects: " + this.nbClientsRelationsFiltre() + "/" + this.nbClientsRelationsTotal();
                }
                else {
                    return "Nb relations: " + this.nbClientsRelationsFiltre() + "/" + this.nbClientsRelationsTotal();
                }
            };
            ClientsControleur.prototype.afficherLigneStatsEtTableau = function () {
                if (!this.chargementEnCours && ((this.estVueClients() && this.tableauClients.data.length > 0) || (this.estVueRelationEco() && this.tableauRelations.data.length > 0))) {
                    if (this.estAvecFiltreColonne) {
                        return false;
                    }
                    else {
                        return true;
                    }
                }
                else {
                    return false;
                }
            };
            /**
             * Méthode pour récupérer le texte sur les index des éléments visibles sur la page du tableau client ou relation
             * @returns {string}
             */
            ClientsControleur.prototype.getTxtEtatPagination = function () {
                if (!this.chargementEnCours && this.tableauClients) {
                    var indexDebut = void 0;
                    var indexFin = void 0;
                    if (this.estVueClients()) {
                        var typeForcage = this.portefeuilleService.getTypeForcage();
                        indexDebut = (this.tableauClients.perPage * this.pageActuelle) - this.tableauClients.perPage + 1;
                        indexFin = this.tableauClients.perPage * this.pageActuelle;
                        if (indexFin > this.tableauClients.data.length) {
                            indexFin = this.tableauClients.data.length;
                        }
                        if (typeForcage && typeForcage === Portefeuille.Enum.PageClients.TYPE_FORCAGE.CLIENTS) {
                            return "Clients " + indexDebut + " \u00E0 " + indexFin + " sur " + this.tableauClients.data.length;
                        }
                        if (typeForcage && typeForcage === Portefeuille.Enum.PageClients.TYPE_FORCAGE.PROSPECTS) {
                            return "Prospects " + indexDebut + " \u00E0 " + indexFin + " sur " + this.tableauClients.data.length;
                        }
                        return "Clients / Prospects " + indexDebut + " \u00E0 " + indexFin + " sur " + this.tableauClients.data.length;
                    }
                    else {
                        indexDebut = (this.tableauRelations.perPage * this.pageActuelle) - this.tableauRelations.perPage + 1;
                        indexFin = this.tableauRelations.perPage * this.pageActuelle;
                        if (indexFin > this.tableauRelations.data.length) {
                            indexFin = this.tableauRelations.data.length;
                        }
                        return "Relations " + indexDebut + " \u00E0 " + indexFin + " sur " + this.tableauRelations.data.length;
                    }
                }
                else {
                    return "";
                }
            };
            /**
             * récupération de la page courante depuis IMwTableHandler
             * @param currentPage
             */
            ClientsControleur.prototype.onPageChange = function (currentPage) {
                this.pageActuelle = currentPage;
                this.$window.scrollTo(0, 0);
            };
            /**
             * Fonction appelé lors du changement du filtre tableau
             * @param search
             */
            //public onFilterChange(search: any): void {
            //    if (search.nom !== "") {
            //        this.estAvecFiltreColonne = true;
            //    } else {
            //        this.estAvecFiltreColonne = false;
            //    }
            //}
            /**
             * Fonction appelé lors de l'affichage de la vue relation eco
             */
            ClientsControleur.prototype.affichageVueRelationEco = function () {
                this.accessibiliteBoutonVoirProduitsPourClient = false;
                this.typeVue = Portefeuille.Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE;
                this.ihmService.setTypeVue(Portefeuille.Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE);
                this.estAvecFiltreColonne = false;
                //this.listeFiltres = this.listeFiltresRelationEco;
                this.tableauRelations = new Portefeuille.Modeles.Tableaux.TableauRelation(this, this, this.$filter, this.$parse, this.listeRelationEcoAAfficher, this.listeIndicateursTableau);
                this.majFiltres();
            };
            /**
             * Fonction appelé lors de l'affichage de la vue clients
             */
            ClientsControleur.prototype.affichageVueClient = function () {
                this.accessibiliteBoutonVoirProduitsPourClient = false;
                this.typeVue = Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS;
                this.ihmService.setTypeVue(Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS);
                this.estAvecFiltreColonne = false;
                //this.listeFiltres = this.listeFiltresClients;
                this.filtrageTableauClient("");
                this.majFiltres();
            };
            /**
             * Methode qui retourne le nombre de clients/relations totales affichés
             * @returns {number}
             */
            ClientsControleur.prototype.nbClientsRelationsTotal = function () {
                if (!this.chargementEnCours) {
                    if (this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {
                        return this.afficherLigneRelationEco() ? this.listeClientsFiltre.length : this.listeClients.length;
                    }
                    else {
                        return this.listeRelationEco.length;
                    }
                }
            };
            /**
             * Methode qui retourne le nombre de clients/relations filtres
             * @returns {number}
             */
            ClientsControleur.prototype.nbClientsRelationsFiltre = function () {
                if (!this.chargementEnCours) {
                    if (this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {
                        return this.listeClientsAAfficher.length;
                    }
                    else {
                        return this.listeRelationEcoAAfficher.length;
                    }
                }
            };
            /**
             * Methode qui permet de savoir si on affiche ou non l'icone de filtre actif
             * @returns {boolean}
             */
            ClientsControleur.prototype.afficherFiltreActif = function () {
                if (this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {
                    return this.listeFiltresClients ? this.listeFiltresClients.length > 0 : false;
                }
                else {
                    return this.listeFiltresRelationEco ? this.listeFiltresRelationEco.length > 0 : false;
                }
            };
            /**
             * Methode qui permet de savoir si on est en forcage clients ou prospects
             * @returns {boolean}
             */
            ClientsControleur.prototype.estEnForcageTypeClientsOuProspects = function () {
                return this.portefeuilleService.getTypeForcage() === Portefeuille.Enum.PageClients.TYPE_FORCAGE.CLIENTS
                    || this.portefeuilleService.getTypeForcage() === Portefeuille.Enum.PageClients.TYPE_FORCAGE.PROSPECTS;
            };
            /**
             * Methode qui permet de savoir si on est en forcage tout
             * @returns {boolean}
             */
            ClientsControleur.prototype.estEnForcageTypeTout = function () {
                return this.portefeuilleService.getTypeForcage() === Portefeuille.Enum.PageClients.TYPE_FORCAGE.TOUT;
            };
            /**
             * Methode qui permet de revenir sur la vue relation économique
             * @returns {void}
             */
            ClientsControleur.prototype.retourVueRelEco = function () {
                this.choixRelationEco = null;
                this.affichageVueRelationEco();
                this.miseAJourTableauAvecContexteRel();
            };
            /** Méthode permettant de retourner à la page d'accueil (càd page des stats, des graphes,...) */
            ClientsControleur.prototype.retourAccueil = function () {
                var _this = this;
                this.contexteService.recupererRetourDebranchement().then(function (resultatPromesse) {
                    if (resultatPromesse) {
                        var contexteMisAJour_1;
                        //1°) On ne conserve que objeVisu s'il est valorisé
                        if (resultatPromesse.objetEdsVisu) {
                            contexteMisAJour_1 = {};
                            contexteMisAJour_1.objetEdsVisu = angular.copy(resultatPromesse.objetEdsVisu);
                            contexteMisAJour_1.objetEdsVisu.locationPath = Portefeuille.Constantes.Url.PORTEFEUILLE;
                        }
                        //2°) On supprime les données contextuelles, puis on valorise les données contextuelles nécessaires à la gestion des portefeuilles
                        _this.contexteService.supprimerContexteDevenuInutile([Portefeuille.Constantes.Contexte.CONTEXTE_VERS_REVUE, Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF]).then(function () {
                            //this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteMisAJour
                            _this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteMisAJour_1).catch(function (erreur) {
                                ClientsControleur.logger.info(JSON.stringify(">>retourAccueil<< Erreur lors de l'écriture du contexte de gestion des portefeuilles: " + JSON.stringify(erreur)));
                            });
                        }).catch(function (erreur) {
                            ClientsControleur.logger.info(JSON.stringify(">>retourAccueil<< Erreur lors de la suppression du contexte de gestion des portefeuilles: " + JSON.stringify(erreur)));
                        });
                    }
                    else {
                        // On supprime les données contextuelles liée à la Revue
                        _this.contexteService.supprimerContexteDevenuInutile([Portefeuille.Constantes.Contexte.CONTEXTE_VERS_REVUE]);
                    }
                }).catch(function (erreur) {
                    ClientsControleur.logger.info(">>retourAccueil<< Erreur lors de la récupération du contexte de gestion des portefeuilles: " + JSON.stringify(erreur));
                }).finally(function () {
                    // On va vers l'écran d'accueil
                    _this.$location.path(Portefeuille.Constantes.Url.PORTEFEUILLE);
                });
            };
            /**
             * Méthode permettant d'effectuer la revue (=> en fait on se débranche vers la saisie de la revue).
             */
            ClientsControleur.prototype.effectuerRevue = function () {
                var _this = this;
                ClientsControleur.logger.info(">>> Appel de la méthode : ClientsControleur.effectuerRevue <<<");
                var contexteGererPortefeuille = {};
                contexteGererPortefeuille = this.construireContexte(true);
                return this.contexteService.ajouterDonneesDebranchementRevueClient(contexteGererPortefeuille)
                    .then(function () {
                    // Gestion en vue du retour
                    // ajoute une action remarquable
                    _this.contexteService.tracerSuiviAction(ClientsControleur.logger, Portefeuille.Constantes.ActionsRemarquables.BTN_EFFC_REVUE);
                    return _this.lisaApplication.next(Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_SAISIE_REVUE, null)
                        .then(function () {
                        // attention, en myway v2 on supprime trop tot ! c'est executé avant mm que la revue ne soit lancée !
                        // il ne faut donc pas le faire ici
                        //  this.contexteService.supprimerContexteDevenuInutile([Constantes.Contexte.CONTEXTE_VERS_REVUE]);
                    })
                        .catch(function (erreur) {
                        ClientsControleur.logger.debug(">>> Echec sur lisa.next de la méthode : ClientsControleur.effectuerRevue <<<");
                        _this.popupService.showErreur(erreur);
                    });
                });
            };
            /**
             * Défini l'identifiant du tableau en cours d'utilisation
             */
            ClientsControleur.prototype.definirIndentifiantTableauEnCours = function () {
                var idTable = "";
                // Récupère les selection utilisateur en identifiant la vue en cours
                if (this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {
                    idTable = Portefeuille.Constantes.Tableau.ID_TABLE_CLIENT;
                }
                else if (this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE) {
                    idTable = Portefeuille.Constantes.Tableau.ID_TABLE_RELATION;
                }
                return idTable;
            };
            /**
             * Récuperation des information sur le tableau en cours pour les mettre en contexte
             * @param contexteGererPortefeuille
             */
            ClientsControleur.prototype.miseAJourContexteAvecTableau = function (contexteGererPortefeuille) {
                var idTable = this.definirIndentifiantTableauEnCours();
                if (idTable && idTable !== "") {
                    contexteGererPortefeuille.pagination = angular.copy(this.tableService.getPaginationState(idTable));
                    contexteGererPortefeuille.colonneTriee = angular.copy(this.tableService.getSortedColumn(idTable));
                    contexteGererPortefeuille.colonneFiltre = angular.copy(this.tableService.getFilterCriteria(idTable));
                }
            };
            /**
             * Récuperation du contexte pour les appliquer au tableau en cours
             * @param contexteGererPortefeuille
             */
            ClientsControleur.prototype.miseAJourTableauAvecContexte = function (contexte) {
                var _this = this;
                // console.log("<<<< ClientsControleur miseAJourTableauAvecContexte : ", contexte);
                var idTable = this.definirIndentifiantTableauEnCours();
                var contexteGererPortefeuille = angular.copy(contexte);
                if (idTable &&
                    idTable !== "") {
                    angular.element(document.querySelector(Portefeuille.Constantes.Application.ID_TABLE_CLIENT)).ready(function () {
                        _this.$timeout(function () {
                            _this.tableService.setSortedColumn(idTable, contexteGererPortefeuille.colonneTriee);
                            _this.tableService.setFilterCriteria(idTable, contexteGererPortefeuille.colonneFiltre);
                            _this.tableService.setPaginationState(idTable, contexteGererPortefeuille.pagination);
                            if (contexteGererPortefeuille.identifiantPersonneSelection) {
                                if (idTable === Portefeuille.Constantes.Tableau.ID_TABLE_RELATION) {
                                    _this.tableService.setSelectedLines(idTable, _.filter(_this.listeRelationEcoAAfficher, function (item) {
                                        return item.id === contexteGererPortefeuille.identifiantPersonneSelection.toString();
                                    }));
                                }
                                else {
                                    _this.tableService.setSelectedLines(idTable, _.filter(_this.listeClientsAAfficher, function (item) {
                                        return item.id === contexteGererPortefeuille.identifiantPersonneSelection.toString();
                                    }));
                                }
                            }
                            _this.tableService.apply(idTable);
                        }, 0);
                    });
                }
            };
            /**
             * Contruire le contexte
             * @param priseEnCompteSelection Permet de prendre en compte la selection dans le tableau client si celle-ci est selectionne
             */
            ClientsControleur.prototype.construireContexte = function (priseEnCompteSelection) {
                var contexteGererPortefeuille = {};
                // Garde la personne selectionné
                if (this.tableauClients.selectedItems &&
                    this.tableauClients.selectedItems.length > 0 &&
                    this.tableauClients.selectedItems[0] &&
                    this.tableauClients.selectedItems[0].id) {
                    contexteGererPortefeuille.identifiantPersonneSelection = Number(this.tableauClients.selectedItems[0].id);
                }
                if (priseEnCompteSelection &&
                    contexteGererPortefeuille.identifiantPersonneSelection) {
                    //Selection d'un client et de la relation économique
                    contexteGererPortefeuille.identifiantPersonne = contexteGererPortefeuille.identifiantPersonneSelection;
                    contexteGererPortefeuille.estClient = this.tableauClients.selectedItems[0].estClient;
                    contexteGererPortefeuille.raisonSociale = this.tableauClients.selectedItems[0].nom;
                    contexteGererPortefeuille.siren = this.tableauClients.selectedItems[0].siren;
                    contexteGererPortefeuille.identifiantRelation = this.tableauClients.selectedItems[0].idRelationEconomique;
                    contexteGererPortefeuille.libelleRelation = this.tableauClients.selectedItems[0].nomRelationEconomique;
                }
                else {
                    // Gestion cas portefeuille expert
                    if (this.portefeuilleService.aPortefeuilleExpertAffiche()) {
                        contexteGererPortefeuille.identifiantRelation = Number(this.tableauClients.selectedItems[0].idRelationEconomique);
                        contexteGererPortefeuille.libelleRelation = this.tableauClients.selectedItems[0].nomRelationEconomique;
                    }
                    else {
                        //Selection seulement la relation économique
                        if (this.relationEcoPourConsultationProduits.id) {
                            contexteGererPortefeuille.identifiantRelation = Number(this.relationEcoPourConsultationProduits.id);
                        }
                        contexteGererPortefeuille.libelleRelation = this.relationEcoPourConsultationProduits.nom;
                    }
                }
                contexteGererPortefeuille.typeForcage = this.portefeuilleService.getTypeForcage().toString();
                contexteGererPortefeuille.typeVue = this.radioBoutonEstVueClient;
                // ajoute les données des filtres et de tri
                contexteGererPortefeuille.filtres = this.listeFiltres;
                contexteGererPortefeuille.filtresRelation = this.listeFiltresRelationEco;
                contexteGererPortefeuille.objetEdsVisu = this.alimenterObjetEds();
                var idTable = this.definirIndentifiantTableauEnCours();
                // console.log("idTable : ", idTable);
                var tableObserver = this.tableService.getMwTableObserver(idTable);
                // récupère la liste des clients affichés ( avec filtres, tri etc ... )
                // va être récupérée pour le popup de revue
                if (tableObserver && tableObserver.sortedModel) {
                    // console.log("sortedModel : ", tableObserver.sortedModel);
                    contexteGererPortefeuille.listeClientAffiches = tableObserver.sortedModel;
                }
                this.miseAJourContexteAvecTableau(contexteGererPortefeuille);
                console.log("<<<< ClientsControleur construireContexte : ", contexteGererPortefeuille);
                return contexteGererPortefeuille;
            };
            /**
             * Contruire le contexte de relation : Ajout 11/07/2022
             */
            ClientsControleur.prototype.construireContexteRel = function () {
                this.contexteGererRelation = {};
                var idTable = Portefeuille.Constantes.Tableau.ID_TABLE_RELATION;
                this.contexteGererRelation.pagination = angular.copy(this.tableService.getPaginationState(idTable));
                this.contexteGererRelation.colonneTriee = angular.copy(this.tableService.getSortedColumn(idTable));
                this.contexteGererRelation.colonneFiltre = angular.copy(this.tableService.getFilterCriteria(idTable));
                this.contexteGererRelation.selectedItems = this.tableauRelations.selectedItems;
            };
            /**
             * Récuperation du contexte pour les appliquer au tableau relation
             * @param contexteGererRelation
             */
            ClientsControleur.prototype.miseAJourTableauAvecContexteRel = function () {
                var _this = this;
                var idTable = Portefeuille.Constantes.Tableau.ID_TABLE_RELATION;
                if (this.contexteGererRelation.selectedItems) {
                    angular.element(document.querySelector("#" + Portefeuille.Constantes.Tableau.ID_TABLE_RELATION)).ready(function () {
                        _this.$timeout(function () {
                            _this.tableService.setSortedColumn(idTable, _this.contexteGererRelation.colonneTriee);
                            _this.tableService.setFilterCriteria(idTable, _this.contexteGererRelation.colonneFiltre);
                            _this.tableService.setPaginationState(idTable, _this.contexteGererRelation.pagination);
                            var selections = angular.copy(_this.contexteGererRelation.selectedItems);
                            _this.tableService.setSelectedLines(Portefeuille.Constantes.Tableau.ID_TABLE_RELATION, selections);
                            _this.tableService.apply(idTable);
                        }, 0);
                    });
                }
            };
            /**
             * typeSynthese :
             * 1 – pour la synthèse part
             * 2 – pour la synthèse PM
             * 3 – pour la synthèse EI
             * ici, pas de particulier
             */
            ClientsControleur.prototype.getTypeSynthese = function (codePersonnaliteJuridique) {
                if (codePersonnaliteJuridique === Portefeuille.Constantes.Rest.CODE_PERSONNALITE_JURIDIQUE_EI) {
                    return "3"; // pour synthese EI
                }
                if (codePersonnaliteJuridique === Portefeuille.Constantes.Rest.CODE_PERSONNALITE_JURIDIQUE_PM) {
                    return "2"; // pour synthese PM
                }
                return null;
            };
            ClientsControleur.prototype.accederSyntheseClient = function () {
                var _this = this;
                ClientsControleur.logger.info(">>> Appel de la méthode : ClientsControleur.accederSyntheseClient <<<");
                var idPersonne = this.tableauClients.selectedItems[0].id;
                var codePersonnaliteJuridique = null;
                for (var _i = 0, _a = this.listeRelationEco; _i < _a.length; _i++) {
                    var itemRelEco = _a[_i];
                    for (var _b = 0, _c = itemRelEco.listeClients; _b < _c.length; _b++) {
                        var itemClient = _c[_b];
                        if (itemClient.id === idPersonne) {
                            codePersonnaliteJuridique = itemClient.codePersonnaliteJuridique;
                        }
                    }
                }
                var typeSynthese;
                typeSynthese = this.getTypeSynthese(codePersonnaliteJuridique);
                return this.contexteService.ajoutPourDebranchementSyntheseClient(idPersonne, typeSynthese)
                    .then(function () {
                    return _this.contexteService.isPCM().then(function (isPCM) {
                        var sessionStore = sessionStorage;
                        if (sessionStore.getItem("myway-portal-id") !== null) {
                            // portail Mysys (v2)
                            console.log("--> XXXX portail Mysys: typeSynthese = " + typeSynthese);
                            //this.serviceAgentExtended.Interop.AfficherSynthese(this.tableauClients.selectedItems[0].id).then(() => {
                            //    return this.$q.when(true);
                            //});
                            var contexteGererPortefeuille = {};
                            contexteGererPortefeuille = _this.construireContexte(true);
                            return _this.contexteService.ajouterDonneesDebranchementSyntheseClient(contexteGererPortefeuille, typeSynthese)
                                .then(function () {
                                // ajoute une action remarquable
                                _this.contexteService.tracerSuiviAction(ClientsControleur.logger, Portefeuille.Constantes.ActionsRemarquables.BTN_SYNTH_PM);
                                return _this.lisaApplication.next(Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_SYNTHESE_PM, "")
                                    .then(function () { })
                                    .catch(function (erreur) {
                                    ClientsControleur.logger.debug(">>> Echec sur lisa.next de la méthode : ClientsControleur.accederSyntheseClient <<<");
                                    _this.popupService.showErreur(erreur);
                                });
                            });
                        }
                        else if (isPCM) {
                            console.log("--> XXXX PCM");
                            // PCM: débranche vers la synthèse mobilité via le LISA
                            var contexteGererPortefeuille = {};
                            contexteGererPortefeuille = _this.construireContexte(true);
                            return _this.contexteService.ajouterDonneesDebranchementSyntheseClient(contexteGererPortefeuille, typeSynthese)
                                .then(function () {
                                // ajoute une action remarquable
                                _this.contexteService.tracerSuiviAction(ClientsControleur.logger, Portefeuille.Constantes.ActionsRemarquables.BTN_SYNTH_PM);
                                return _this.lisaApplication.next(Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_SYNTHESE_PM, "")
                                    .then(function () { })
                                    .catch(function (erreur) {
                                    ClientsControleur.logger.debug(">>> Echec sur lisa.next de la méthode : ClientsControleur.accederSyntheseClient <<<");
                                    _this.popupService.showErreur(erreur);
                                });
                            });
                        }
                        else {
                            // portail Myway (v1)
                            console.log("--> XXXX portail Myway");
                            return _this.portailService.lancerSyntheseClient(Number(_this.tableauClients.selectedItems[0].id));
                        }
                    });
                });
            };
            ClientsControleur.prototype.exporter = function () {
                var _this = this;
                // on vérifie dans un premier temps qu'une génération n'est pas en cours
                if (this.exportCSVEnCours === true) {
                    return;
                }
                this.exportCSVEnCours = true;
                var columns = this.getColonnesExport();
                var colonnesReferencesBrut = _.pluck(columns, "bind");
                var colonnesReferencesExport = this.getColonnesReferences(colonnesReferencesBrut);
                var colonnesLibelles = _.pluck(columns, "title");
                // ajoute la date du jour au nom du fichier
                var dateJour = moment(new Date()).format("DDMMYYYY");
                // ajoute aussi le nom de l'eds das le nom du fichier 
                var objetEdsChoisi = this.alimenterObjetEds();
                var nomAgent = (objetEdsChoisi && objetEdsChoisi.objCaractAgent) ? objetEdsChoisi.objCaractAgent.designationAgent : this.contexteService.getDesignation();
                return this.getDonneesExport(nomAgent).then(function (donnees) {
                    var options = {
                        header: colonnesLibelles,
                        columnOrder: colonnesReferencesExport,
                        filename: _this.nomFichierExport + " " + nomAgent + " " + dateJour
                    };
                    console.log("donnees : ", donnees);
                    // Ancienne version de génération CSV
                    //let promiseDownloadCsv: ng.IPromise<any> = this.mwCsvService.downloadCsv(null, donnees, options);
                    var promiseDownloadCsv = _this.exportService.genererFichierExport(options.header, donnees, options.filename);
                    return promiseDownloadCsv.then(function () {
                        _this.exportCSVEnCours = false;
                        // ajoute une action remarquable
                        _this.contexteService.tracerSuiviAction(ClientsControleur.logger, Portefeuille.Constantes.ActionsRemarquables.BTN_EXPORT);
                    });
                });
            };
            /**
             *
             */
            ClientsControleur.prototype.getColonnesExport = function () {
                var columns = angular.copy(this.colonneCsvClient);
                this.tableauClients.columns.forEach(function (column) {
                    // on ne prend pas en compte le premier equipement en tant qu'indicateur car il est déjà en tant que tag
                    if (column.bind !== "nom"
                        && column.title.indexOf(Portefeuille.Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT) === -1) {
                        // transforme listeIndicateurs[14].valeurNumber en 14_valeurNumber
                        var index = column.bind.substring(17, column.bind.indexOf("]"));
                        var props = column.bind.split(".");
                        if (props.length > 1) {
                            // pour les flux et le CA on ajoute en prefix "k€"
                            // pour les Part en engagement on ajoue en prefix "%"
                            var prefix = "";
                            if (column.title.indexOf("Part de flux") > -1) {
                                prefix = " (%)";
                            }
                            else if (column.title.indexOf("Flux") > -1) {
                                prefix = " (k€)";
                            }
                            else if (column.title.indexOf("PNB ") > -1) {
                                prefix = " (€)";
                            }
                            else if (column.title.indexOf("CA") > -1) {
                                prefix = " (k€)";
                            }
                            else if (column.title.indexOf("Encours BDF") > -1) {
                                prefix = " (k€)";
                            }
                            else if (column.title.indexOf("Part en engagement") > -1) {
                                prefix = " (%)";
                            }
                            else if (column.title.indexOf("Top CC") > -1) {
                                // pour Top CC : Le fichier exoprt doit afficher la valeur en texte "Vert", "Rouge"..... (bind par valeur)
                                props[1] = "valeur";
                            }
                            else if (column.title.indexOf("Objectif de flux") > -1) {
                                prefix = " (%)";
                            }
                            columns.push({
                                "title": column.title + prefix,
                                "bind": index + "_" + props[1],
                                "cssClass": ""
                            });
                            // ajout indicateur fictif pour CA  et CA-1 ( date de maj ). qui servira pour export excel.
                            if (column.title.indexOf("CA") > -1) {
                                columns.push({
                                    "title": "Date " + column.title,
                                    "bind": index + "_" + "dateMaj",
                                    "cssClass": ""
                                });
                            }
                        }
                    }
                });
                console.log("columns : ", columns);
                return columns;
            };
            ClientsControleur.prototype.getColonnesReferences = function (colonnesReferencesNonTraitees) {
                var colonnesReferences = [];
                _.forEach(colonnesReferencesNonTraitees, function (colonne) {
                    var detailsColonneComplexe = colonne.split(".");
                    colonnesReferences.push(detailsColonneComplexe[detailsColonneComplexe.length - 1]);
                });
                return colonnesReferences;
            };
            // permet de formater le tableau a utilisé pour exporter les donnees
            // vers un fichier excel
            ClientsControleur.prototype.getDonneesExport = function (nomAgent) {
                var _tab = [];
                // recupérere les colonnes affichées et créé le format avec ca
                var columns = this.getColonnesExport();
                var _this = this;
                // parcours les clients, puis pour chaque client récupère chaque indicateur
                this.listeClientsAAfficher.forEach(function (client) {
                    if (client) {
                        console.log("--> export client : ", client);
                        var obj_1 = {};
                        // les 8 premieres infos sont sur le client
                        obj_1.nomAgent = nomAgent;
                        obj_1.identifiantPortefeuille = client.identifiantPortefeuille;
                        obj_1.libellePortefeuille = client.libellePortefeuille;
                        obj_1.nomRelationEconomique = client.nomRelationEconomique;
                        obj_1.id = client.id;
                        obj_1.nom = client.nom;
                        obj_1.estLeader = _this.formatBoolean(client.estLeader);
                        obj_1.estClient = _this.formatBoolean(!client.estClient);
                        obj_1.estSansContrat = _this.formatBoolean(client.estSansContrat);
                        obj_1.estActif = _this.formatBoolean(client.estActif);
                        var indicateurPremierEquipement = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG });
                        console.log("indicateurPremierEquipement : ", indicateurPremierEquipement);
                        obj_1.premierEquipement = _this.gereTriHack("valeurDate", indicateurPremierEquipement ? indicateurPremierEquipement.valeurDate : null);
                        obj_1.nbPersonneRelation = client.nbPersonneRelation;
                        // maintenant on va recupérer les indicateurs pour ce client
                        var i_1 = 0;
                        var indiceIndicateurClient_1 = 11; //this.colonneCsvClient.length - 1;
                        columns.forEach(function (column) {
                            // on exclut les indicateurs de type client
                            if (i_1 > indiceIndicateurClient_1) {
                                // attention, ici le 10 correspond au nombre de colonnes.
                                // y avait 9. avec nbPersonneRelation en plus : +1 --> 10
                                var ps = column.bind.split("_");
                                if (ps.length > 0) {
                                    obj_1[column.bind] = _this.gereTriHack(ps[1], client.listeIndicateurs[ps[0]][ps[1]]);
                                    // cas particulier ajouté d'une colone dateMaj, sinon , c'est "valeurNumber"
                                    // bidouille
                                    if (ps[1] === "dateMaj") {
                                        // la date est le champ dateMaj,le montant esst le champ valeurNumber
                                        var valeur = client.listeIndicateurs[ps[0]]["valeurNumber"];
                                        console.log("valeur : ", valeur);
                                        if (valeur === null) {
                                            obj_1[column.bind] = "NC";
                                        }
                                        else {
                                            var maDate = obj_1[column.bind];
                                            // console.log("maDate : ", maDate);
                                            var texte = moment(maDate).format("MM/YYYY");
                                            if (texte === "Invalid date") {
                                                texte = "NC";
                                            }
                                            obj_1[column.bind] = " " + texte; // si on laisse MM/AAAAA, excel reforme à la lecture.
                                        }
                                    }
                                }
                            }
                            i_1++;
                        });
                        _tab.push(obj_1);
                    }
                });
                return this.$q.when(_tab);
            };
            // gère le hack du tri pour reformatter proprement la valeur (valueur Infinity pour les number etc)
            ClientsControleur.prototype.gereTriHack = function (type, valeur) {
                if (type === "valeur") {
                    var chaineTravail = valeur;
                    if (chaineTravail.search(Portefeuille.Constantes.Application.FIN_CHAINE_MAX) !== -1) {
                        return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                    }
                    return (valeur !== undefined && valeur !== null && valeur !== "") ? valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                }
                else if (type === "valeurDate") {
                    var dateMin = moment(Portefeuille.Constantes.Application.DATE_MIN).toDate();
                    var dateMax = moment(Portefeuille.Constantes.Application.DATE_MAX).toDate();
                    if (valeur) {
                        if (moment(valeur).isSame(dateMax)) {
                            return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                        }
                        if (moment(valeur).isSame(dateMin)) {
                            return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                        }
                        return moment(valeur).format("DD/MM/YYYY");
                    }
                    else {
                        return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                    }
                }
                else if (type === "valeurNumber") {
                    var nombreMin = Number.NEGATIVE_INFINITY;
                    var nombreMax = Number.POSITIVE_INFINITY;
                    if (valeur !== null
                        && valeur !== undefined) {
                        if (valeur === nombreMin
                            || valeur === nombreMax) {
                            return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                        }
                        // ici, remplacer le . par ,
                        var texte = valeur.toString();
                        texte = texte.replace(".", ",");
                        return texte;
                    }
                    else {
                        return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                    }
                }
                return valeur;
            };
            ClientsControleur.prototype.formatBoolean = function (val) {
                return (val) ? "Oui" : "";
            };
            ClientsControleur.prototype.formaterDate = function (date) {
                var formatDate = "";
                if (date !== null && angular.isDefined(date)
                    && date !== "0001-01-01"
                    && date !== "9999-12-31"
                    && date !== "1970-01-01") {
                    formatDate = moment(date).format(this.formatDate);
                }
                return formatDate;
            };
            /**
             * Méthode permettant de consulter les produits (=> en fait on se débranche vers l'affichage de la revue).
             */
            ClientsControleur.prototype.consulterProduits = function () {
                var _this = this;
                ClientsControleur.logger.info(">>> Appel de la méthode : ClientsControleur.consulterProduits <<<");
                var contexteGererPortefeuille = {};
                contexteGererPortefeuille = this.construireContexte(false);
                return this.contexteService.ajouterDonneesDebranchementBilanRevueRelationEco(contexteGererPortefeuille)
                    .then(function () {
                    //Gestion en vue du retour
                    // ajoute une action remarquable
                    _this.contexteService.tracerSuiviAction(ClientsControleur.logger, Portefeuille.Constantes.ActionsRemarquables.BTN_CONS_PROD);
                    return _this.lisaApplication.next(Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_BILAN_REVUE, Portefeuille.Constantes.Url.BILAN_REVUE)
                        .then(function () { })
                        .catch(function (erreur) {
                        ClientsControleur.logger.debug(">>> Echec sur lisa.next de la méthode : ClientsControleur.consulterProduits <<<");
                        _this.popupService.showErreur(erreur);
                    });
                });
            };
            /**
             * Methode qui permet de supprimer tous les filtres
             * @returns {void}
             */
            ClientsControleur.prototype.supprimerTousLesFiltres = function () {
                if (this.typeVue === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {
                    this.filtreService.razFiltresClient();
                }
                else {
                    this.filtreService.razFiltresRelationEco();
                }
                this.majFiltres();
            };
            ClientsControleur.prototype.controlerLimiteClientAtteinte = function (accesDepuisBlocRevue) {
                var resultat = false;
                resultat = this.portefeuilleService.getTypeForcage() !== Portefeuille.Enum.PageClients.TYPE_FORCAGE.SANS
                    && this.messageLimiteClientsAtteinte
                    && this.listeClientsService.getEstLimiteClientsAtteinte()
                    && ((this.tableauClients && this.tableauClients.data && this.tableauClients.data.length > 0)
                        || (this.tableauRelations && this.tableauRelations.data && this.tableauRelations.data.length > 0))
                    && !accesDepuisBlocRevue;
                return resultat;
            };
            ClientsControleur.prototype.ouvrirChoixForcage = function () {
                return this.accederForcage();
            };
            ClientsControleur.prototype.valoriserMessageLimiteClientsAtteinte = function (typeForcage) {
                var resultat = "";
                if (typeForcage) {
                    switch (typeForcage) {
                        case Portefeuille.Enum.PageClients.TYPE_FORCAGE.CLIENTS:
                            resultat = (this.portefeuilleService.getListePortefeuillesActifs().length === 1) ?
                                Portefeuille.Constantes.Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_CLIENTS_SINGULIER : Portefeuille.Constantes.Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_CLIENTS_PLURIEL;
                            resultat = resultat + " " + Portefeuille.Constantes.Application.LISTE_RELATIONS_ECONOMIQUES_INACCESSIBLE;
                            break;
                        case Portefeuille.Enum.PageClients.TYPE_FORCAGE.PROSPECTS:
                            resultat = (this.portefeuilleService.getListePortefeuillesActifs().length === 1) ?
                                Portefeuille.Constantes.Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_PROSPECTS_SINGULIER : Portefeuille.Constantes.Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_PROSPECTS_PLURIEL;
                            resultat = resultat + " " + Portefeuille.Constantes.Application.LISTE_RELATIONS_ECONOMIQUES_INACCESSIBLE;
                            break;
                        default:
                            resultat = (this.portefeuilleService.getListePortefeuillesActifs().length === 1) ?
                                Portefeuille.Constantes.Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_TOUT_SINGULIER : Portefeuille.Constantes.Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_TOUT_PLURIEL;
                            resultat = resultat + " " + Portefeuille.Constantes.Application.INDICATEURS_PREDEFINIS_NON_MODIFIABLES;
                            break;
                    }
                }
                return resultat;
            };
            ClientsControleur.prototype.afficherModifierChoix = function () {
                return (this.listeClientsService.getAffichageModificationChoix());
            };
            ClientsControleur.prototype.alimenterObjetEds = function () {
                var resultat = {};
                resultat.objCaractAgent = this.portefeuilleService.getCaracteristiquesAgent();
                resultat.listePtfVisu = _.pluck(this.portefeuilleService.getListePortefeuillesActifs(), "id");
                resultat.typeForcage = this.portefeuilleService.getTypeForcage();
                resultat.affichageModificationChoix = this.listeClientsService.getAffichageModificationChoix();
                resultat.locationPath = Portefeuille.Constantes.Url.CLIENTS;
                return resultat;
            };
            /**
             * Méthode appelée à chaque fois qu'un tri est demandé sur une des colonnes d'un tableau
             * @param predicate
             * @param reserve
             */
            ClientsControleur.prototype.onSortChange = function (predicate, reserve) {
                var proprietes;
                if (predicate) {
                    proprietes = predicate;
                    proprietes = proprietes.replace("[", ".");
                    proprietes = proprietes.replace("]", "");
                    if (this.afficherTableauRelation() && this.tableauRelations && this.tableauRelations.data && this.tableauRelations.data.length > 0) {
                        this.traiterTriDonneesListeTableaux(this.tableauRelations.data, proprietes, reserve);
                    }
                    if (this.afficherTableauClients() && this.tableauClients && this.tableauClients.data && this.tableauClients.data.length > 0) {
                        this.traiterTriDonneesListeTableaux(this.tableauClients.data, proprietes, reserve);
                    }
                }
                return false;
            };
            /**
             * Gère le tri des données listeTableaux transmise en paramètre en appliquant systématiquement toute valeur à 'NC' en fin de tri.
             * @param listeTableaux
             * @param proprietes
             * @param triEstDecroissant
             */
            ClientsControleur.prototype.traiterTriDonneesListeTableaux = function (listeTableaux, proprietes, triEstDecroissant) {
                var _this = this;
                var listeProprietesTri;
                var sousObjet;
                if (proprietes && proprietes.length > 0 && listeTableaux && listeTableaux.length > 0) {
                    listeProprietesTri = proprietes.split(".");
                    sousObjet = angular.copy(listeTableaux[0]);
                    _.forEach(listeProprietesTri, function (proprieteLue) {
                        sousObjet = sousObjet[proprieteLue];
                        if (proprieteLue === listeProprietesTri[listeProprietesTri.length - 1]) {
                            if (typeof sousObjet === Portefeuille.Constantes.Application.DONNEE_STRING) {
                                //Détermination de la chaîne max
                                _this.valoriserChaineMaxPourComparaison(listeTableaux, proprietes);
                            }
                        }
                    });
                    listeTableaux.sort(function (a, b) {
                        return _this.analyserRecursifPourTriUnCritere(a, b, listeProprietesTri, 0, triEstDecroissant);
                    });
                }
            };
            /**
             * Détermine la valeur de la plus grande chaîne (en termes de croissant - décroissant)
             * @param listeDonnees
             * @param proprietes
             */
            ClientsControleur.prototype.valoriserChaineMaxPourComparaison = function (listeDonnees, proprietes) {
                var _this = this;
                var chaineMaxTravail;
                this.chaineMaxPourComparaison = "";
                _.forEach(listeDonnees, function (itemLu) {
                    _this.determinerChaineMaxRecursif(itemLu, proprietes);
                });
                chaineMaxTravail = this.chaineMaxPourComparaison;
                if (chaineMaxTravail.search(Portefeuille.Constantes.Application.FIN_CHAINE_MAX) === -1) {
                    this.chaineMaxPourComparaison = chaineMaxTravail + Portefeuille.Constantes.Application.FIN_CHAINE_MAX;
                }
            };
            /**
             * Balaye les propriétés d'un objet de façon récursive jusqu'à atteindre la dernière propriété (càd la plus profonde) indiquée dans le paramètre proprietesAExplorer
             * @param objet
             * @param proprietesAExplorer
             */
            ClientsControleur.prototype.determinerChaineMaxRecursif = function (objet, proprietesAExplorer) {
                if (proprietesAExplorer.search("\\.") !== -1) {
                    this.determinerChaineMaxRecursif(objet[proprietesAExplorer.split(".")[0]], proprietesAExplorer.substr(proprietesAExplorer.search("\\.") + 1));
                }
                else if (!this.chaineMaxPourComparaison || objet[proprietesAExplorer] > this.chaineMaxPourComparaison) {
                    this.chaineMaxPourComparaison = objet[proprietesAExplorer];
                }
            };
            /**
             * Tri récursif en se basant sur les propriétés données de 2 objets, et le sens du tri demandé.
             * @param objetA
             * @param objetB
             * @param listeProprietes
             * @param indicePropriete
             * @param triEstDecroissant
             */
            ClientsControleur.prototype.analyserRecursifPourTriUnCritere = function (objetA, objetB, listeProprietes, indicePropriete, triEstDecroissant) {
                var resultatAEgalB = 0;
                var resultatASuperieurB = 1;
                var resultatAInferieurB = -1;
                var resultatComparaison = resultatAEgalB;
                //Cas ou au moins un des deux objets passés en paramètre est null (ou undefined) => l'objet non défini sera considéré supérieur
                if (!objetA || !objetB) {
                    if (!objetA && objetB) {
                        resultatComparaison = resultatASuperieurB;
                    }
                    if (objetA && !objetB) {
                        resultatComparaison = resultatAInferieurB;
                    }
                    //On ajuste la valeur du résultat à retourner selon le sens réel du tri.
                    resultatComparaison = (triEstDecroissant === false) ? resultatComparaison : resultatComparaison * (-1);
                    return resultatComparaison;
                }
                //Cas où tous les paramètres sont renseignés
                if (objetA && objetB && listeProprietes && listeProprietes.length > 0 && indicePropriete >= 0) {
                    //On examine la dernière propriété qui est celle de plus bas niveau (bref, celle sur laquelle s'applique le tri) (valeur, valeurNumber, etc)
                    if (indicePropriete === listeProprietes.length - 1) {
                        var propertyName = listeProprietes[indicePropriete];
                        var propertyNameSort = propertyName; // + "_sort";
                        if (typeof objetA[propertyName] === Portefeuille.Constantes.Application.DONNEE_NUMBER || propertyName === Portefeuille.Constantes.Application.DONNEE_VALEUR_NUMBER) {
                            var nombreNC = this.valoriserNombreNCSelonSensTri(triEstDecroissant);
                            // au début on se base sur la valeur existante, puis on ne travaillera ensuite que sur la valeur _sort
                            var propACompare = (typeof objetA[propertyNameSort] !== "undefined") ? objetA[propertyNameSort] : objetA[propertyName];
                            var propBCompare = (typeof objetB[propertyNameSort] !== "undefined") ? objetB[propertyNameSort] : objetB[propertyName];
                            objetA[propertyNameSort] = this.valoriserProprieteNombreViaEquivalentNC(propACompare, nombreNC);
                            objetB[propertyNameSort] = this.valoriserProprieteNombreViaEquivalentNC(propBCompare, nombreNC);
                            resultatComparaison = this.comparerNumberANumberB(objetA[propertyNameSort], objetB[propertyNameSort], nombreNC);
                        }
                        else if (propertyName === Portefeuille.Constantes.Application.DONNEE_VALEUR_DATE) {
                            var dateNC = this.valoriserDateNCSelonSensTri(triEstDecroissant);
                            var propACompare = (typeof objetA[propertyNameSort] !== "undefined") ? objetA[propertyNameSort] : objetA[propertyName];
                            var propBCompare = (typeof objetB[propertyNameSort] !== "undefined") ? objetB[propertyNameSort] : objetB[propertyName];
                            objetA[propertyNameSort] = this.valoriserProprieteDateViaEquivalentNC(propACompare, dateNC);
                            objetB[propertyNameSort] = this.valoriserProprieteDateViaEquivalentNC(propBCompare, dateNC);
                            resultatComparaison = this.comparerDateADateB(objetA[propertyNameSort], objetB[propertyNameSort], dateNC);
                        }
                        else {
                            var chaineNC = this.valoriserChaineNCSelonSensTri(triEstDecroissant);
                            var propACompare = (typeof objetA[propertyNameSort] !== "undefined") ? objetA[propertyNameSort] : objetA[propertyName];
                            var propBCompare = (typeof objetB[propertyNameSort] !== "undefined") ? objetB[propertyNameSort] : objetB[propertyName];
                            objetA[propertyNameSort] = this.valoriserProprieteChaineViaEquivalentNC(propACompare, chaineNC);
                            objetB[propertyNameSort] = this.valoriserProprieteChaineViaEquivalentNC(propBCompare, chaineNC);
                            resultatComparaison = this.comparerStringAStringB(objetA[propertyNameSort], objetB[propertyNameSort]);
                        }
                        //On ajuste la valeur du résultat à retourner selon le sens réel du tri.
                        resultatComparaison = (triEstDecroissant === false) ? resultatComparaison : resultatComparaison * (-1);
                        return resultatComparaison;
                    }
                    return this.analyserRecursifPourTriUnCritere(objetA[listeProprietes[indicePropriete]], objetB[listeProprietes[indicePropriete]], listeProprietes, indicePropriete + 1, triEstDecroissant);
                }
            };
            /**
             * Détermine la valeur correspondant à l'affichage NC pour une chaîne selon le sens du tri
             * (ex pour un tri croissant la valeur retournée correspondra à la plus petite chaîne possible; à savoir "")
             * @param triEstDecroissant
             */
            ClientsControleur.prototype.valoriserChaineNCSelonSensTri = function (triEstDecroissant) {
                var chaineMin = "";
                var chaineMax = this.chaineMaxPourComparaison;
                return (triEstDecroissant === false) ?
                    angular.copy(chaineMax) :
                    angular.copy(chaineMin);
            };
            /**
             * Détermine la valeur correspondant à l'affichage NC pour un nombre selon le sens du tri
             * (ex pour un tri croissant la valeur retournée correspondra à la plus petite valeur numérique possible; à savoir NEGATIVE_INFINITY)
             * @param triEstDecroissant
             */
            ClientsControleur.prototype.valoriserNombreNCSelonSensTri = function (triEstDecroissant) {
                return (triEstDecroissant === false) ?
                    Number.POSITIVE_INFINITY :
                    Number.NEGATIVE_INFINITY;
            };
            /**
             * Détermine la valeur correspondant à l'affichage NC pour une date selon le sens du tri
             * (ex pour un tri croissant la valeur retournée correspondra à la plus petite date possible; à savoir 01/01/1970)
             * @param triEstDecroissant
             */
            ClientsControleur.prototype.valoriserDateNCSelonSensTri = function (triEstDecroissant) {
                return (triEstDecroissant === false) ?
                    angular.copy(this.dateMax) :
                    angular.copy(this.dateMin);
            };
            /**
             * Détermine si la valeur initiale de la propriété de type chaîne doit être écrasée par la valeur correspondant à un affichage NC
             * @param valeurInitialePropriete
             * @param chaineNC
             */
            ClientsControleur.prototype.valoriserProprieteChaineViaEquivalentNC = function (valeurInitialePropriete, chaineNC) {
                return (!valeurInitialePropriete ||
                    valeurInitialePropriete === Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU ||
                    valeurInitialePropriete === "" ||
                    valeurInitialePropriete === this.chaineMaxPourComparaison) ?
                    chaineNC :
                    valeurInitialePropriete;
            };
            /**
             * Détermine si la valeur initiale de la propriété de type nombre doit être écrasée par la valeur correspondant à un affichage NC
             * @param valeurInitialePropriete
             * @param nombreNC
             */
            ClientsControleur.prototype.valoriserProprieteNombreViaEquivalentNC = function (valeurInitialePropriete, nombreNC) {
                return (nombreNC !== null &&
                    nombreNC !== undefined &&
                    (valeurInitialePropriete === null ||
                        valeurInitialePropriete === undefined ||
                        valeurInitialePropriete === Number.NEGATIVE_INFINITY ||
                        valeurInitialePropriete === Number.POSITIVE_INFINITY)) ?
                    nombreNC :
                    valeurInitialePropriete;
            };
            /**
             * Détermine si la valeur initiale de la propriété de type date doit être écrasée par la valeur correspondant à un affichage NC
             * @param valeurInitialePropriete
             * @param dateNC
             */
            ClientsControleur.prototype.valoriserProprieteDateViaEquivalentNC = function (valeurInitialePropriete, dateNC) {
                return (dateNC &&
                    (!valeurInitialePropriete ||
                        moment(valeurInitialePropriete).isSame(this.dateMin) ||
                        moment(valeurInitialePropriete).isSame(this.dateMax))) ?
                    dateNC :
                    valeurInitialePropriete;
            };
            /**
             * Compare 2 nombres et restitue le résultat de cette comparaison (0: A égal à B, 1: A supérieur à B, -1: A inférieur à B)
             * @param nombreA
             * @param nombreB
             * @param nombreComparaison
             */
            ClientsControleur.prototype.comparerNumberANumberB = function (nombreA, nombreB, nombreComparaison) {
                var resultatAEgalB = 0;
                var resultatASuperieurB = 1;
                var resultatAInferieurB = -1;
                if (nombreA === undefined && nombreB === null) {
                    return resultatASuperieurB;
                }
                if (nombreA === null && nombreB === undefined) {
                    return resultatAInferieurB;
                }
                if (nombreA === null) {
                    nombreA = nombreComparaison;
                }
                if (nombreB === null) {
                    nombreB = nombreComparaison;
                }
                if (nombreA > nombreB) {
                    return resultatASuperieurB;
                }
                else if (nombreA < nombreB) {
                    return resultatAInferieurB;
                }
                else {
                    return resultatAEgalB;
                }
            };
            /**
             * Compare 2 dates et restitue le résultat de cette comparaison (0: A égal à B, 1: A supérieur à B, -1: A inférieur à B)
             * @param dateA
             * @param dateB
             * @param dateComparaison
             */
            ClientsControleur.prototype.comparerDateADateB = function (dateA, dateB, dateComparaison) {
                var resultatAEgalB = 0;
                var resultatASuperieurB = 1;
                var resultatAInferieurB = -1;
                if (dateA === undefined && dateB === null) {
                    return resultatASuperieurB;
                }
                if (dateA === null && dateB === undefined) {
                    return resultatAInferieurB;
                }
                if (!dateA) {
                    dateA = dateComparaison;
                }
                if (!dateB) {
                    dateB = dateComparaison;
                }
                if (moment(dateA).isAfter(dateB)) {
                    return resultatASuperieurB;
                }
                else if (moment(dateA).isBefore(dateB)) {
                    return resultatAInferieurB;
                }
                else {
                    return resultatAEgalB;
                }
            };
            /**
             * Compare 2 chaînes et restitue le résultat de cette comparaison (0: A égal à B, 1: A supérieur à B, -1: A inférieur à B)
             * @param chaineA
             * @param chaineB
             */
            ClientsControleur.prototype.comparerStringAStringB = function (chaineA, chaineB) {
                var resultatAEgalB = 0;
                var resultatASuperieurB = 1;
                var resultatAInferieurB = -1;
                var resultatComparaison = resultatAEgalB;
                if (chaineA > chaineB) {
                    resultatComparaison = resultatASuperieurB;
                }
                else if (chaineA < chaineB) {
                    resultatComparaison = resultatAInferieurB;
                }
                return resultatComparaison;
            };
            ClientsControleur.CLASS_NAME = "ClientsControleur";
            ClientsControleur.logger = loggerClass(ClientsControleur.CLASS_NAME);
            // Injection de dépendances 
            ClientsControleur.$inject = [
                Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                Portefeuille.Constantes.Inject.Angular.$scope,
                Portefeuille.Constantes.Inject.Angular.$q,
                Portefeuille.Constantes.Inject.Angular.$location,
                Portefeuille.Constantes.Inject.Angular.$window,
                Portefeuille.Constantes.Inject.Services.listeClientsService,
                Portefeuille.Constantes.Inject.Angular.$filter,
                Portefeuille.Constantes.Inject.Services.popupService,
                Portefeuille.Constantes.Inject.Angular.$parse,
                Portefeuille.Constantes.Inject.MyWay.tableServiceOpefi,
                Portefeuille.Constantes.Inject.Services.eventService,
                Portefeuille.Constantes.Inject.Services.lisaApplication,
                Portefeuille.Constantes.Inject.Services.contexteService,
                Portefeuille.Constantes.Inject.Services.indicateurService,
                Portefeuille.Constantes.Inject.Services.filtreService,
                Portefeuille.Constantes.Inject.Services.portefeuilleService,
                Portefeuille.Constantes.Inject.Services.preferencesService,
                Portefeuille.Constantes.Inject.Services.ihmService,
                Portefeuille.Constantes.Inject.MyWay.portailService,
                Portefeuille.Constantes.Inject.Services.habilitationService,
                Portefeuille.Constantes.Inject.Services.mwCsvService,
                "ExportService",
                "$timeout"
            ];
            return ClientsControleur;
        }());
        Controleurs.ClientsControleur = ClientsControleur;
        // Déclaration du controleur
        Portefeuille.app.controller(ClientsControleur.CLASS_NAME, ClientsControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../constantes/inject-constantes.ts" />
/**
 * Controleur de la page détail client
 * @module Portefeuille.Controleurs
 * @author S0078068 (Yannis VESSEREAU)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Controleur de l'index
         */
        var DetailClientControleur = (function () {
            /**
             * Constructeur
             */
            function DetailClientControleur() {
            }
            DetailClientControleur.CLASS_NAME = "DetailClientControleur";
            DetailClientControleur.logger = loggerClass(DetailClientControleur.CLASS_NAME);
            // Proprietées
            // Injection de dépendances 
            DetailClientControleur.$inject = [];
            return DetailClientControleur;
        }());
        Controleurs.DetailClientControleur = DetailClientControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("DetailClientControleur", DetailClientControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../constantes/inject-constantes.ts" />
/**
 * Controleur de l'index
 * @module Portefeuille.Controleurs
 * @author S0078068 (Yannis VESSEREAU)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Controleur de l'index
         */
        var IndexControleur = (function () {
            /**
             * Constructeur
             * @param $scope
             * @param serviceAgentExtended
             * @param $location
             * @param lisaApplication
             */
            function IndexControleur($scope, $location, $window, lisaApplication, contexteService, portefeuilleService, eventService, popupService, $q, listeClientsService, choixUtilisateurService) {
                this.$scope = $scope;
                this.$location = $location;
                this.$window = $window;
                this.lisaApplication = lisaApplication;
                this.contexteService = contexteService;
                this.portefeuilleService = portefeuilleService;
                this.eventService = eventService;
                this.popupService = popupService;
                this.$q = $q;
                this.listeClientsService = listeClientsService;
                this.choixUtilisateurService = choixUtilisateurService;
                this.afficherHeader = false;
                this.initialiser();
            }
            /**
             *
             */
            IndexControleur.prototype.initialiser = function () {
                this.eventService.setIndexControleur(this);
                this.chargementEnCours = true;
                this.estHabiliteChoixAgent = false;
                this.estHabiliteChoixEDS = false;
                this.titrePage = Portefeuille.Constantes.Application.TITRE_APPLICATION;
                this.afficherHeader = true;
                this.messageAucunPortefeuille = Portefeuille.Constantes.Messages.MESSAGE_AUCUN_PORTEFEUILLE;
                this.chargementEnCours = false;
                this.aErreurTechnique = false;
                this.messageErreurTechnique = Portefeuille.Constantes.Messages.MESSAGE_ERREUR_TECHNIQUE;
            };
            /**
             *
             * @param habilitation
             */
            IndexControleur.prototype.initialiserHabilitationChoixAgent = function (habilitation) {
                this.estHabiliteChoixAgent = habilitation;
            };
            /**
             *
             * @param habilitation
             */
            IndexControleur.prototype.initialiserHabilitationChoixEDS = function (habilitation) {
                this.estHabiliteChoixEDS = habilitation;
            };
            /**
             *
             */
            IndexControleur.prototype.estVueMultiSuiviPar = function () {
                return this.estVueGlobalConsolide;
            };
            /**
             *
             */
            IndexControleur.prototype.afficherPopupChoixAgent = function () {
                this.afficherPopupEDS({
                    actionButtonText: null,
                    closeButtonText: null,
                    headerText: "Changer d'agent",
                    bodyText: null,
                    iconName: null,
                    model: Portefeuille.Enum.Vue.TYPE_VUE.VUE_AGENT.toString()
                });
            };
            /**
             *
             */
            IndexControleur.prototype.afficherPopupChoixEds = function () {
                this.afficherPopupEDS({
                    actionButtonText: null,
                    closeButtonText: null,
                    headerText: "Choisir l'EDS",
                    bodyText: null,
                    iconName: null,
                    model: Portefeuille.Enum.Vue.TYPE_VUE.VUE_EDS.toString()
                });
            };
            /**
             *
             * @param data
             */
            IndexControleur.prototype.afficherPopupEDS = function (data) {
                var _this = this;
                var templateChoixEds = "vues/template-modale/modale-choix-eds-vue.html";
                var controleurChoixEds = "ModaleChoixEdsControleur";
                var contexte = {};
                this.contexteService.getContexte().then(function (contexteRecu) {
                    var modalChoixEds = (data.model === Portefeuille.Enum.Vue.TYPE_VUE.VUE_EDS.toString()) ?
                        _this.popupService.showModalFull(templateChoixEds, controleurChoixEds, data) :
                        _this.popupService.showModalMd(templateChoixEds, controleurChoixEds, data);
                    return modalChoixEds.then(function (edsChoisi) {
                        // ajoute une action remarquable
                        _this.contexteService.tracerSuiviAction(IndexControleur.logger, Portefeuille.Constantes.ActionsRemarquables.BTN_CHANGER_AGENT);
                        _this.estVueGlobalConsolide = (data.model === Portefeuille.Enum.Vue.TYPE_VUE.VUE_EDS.toString());
                        _this.eventService.setEstVueMultiGererPar(_this.estVueGlobalConsolide);
                        _this.chargementEnCours = true;
                        _this.$window.scrollTo(0, 0);
                        return _this.majDonneesDonneesEds(edsChoisi, contexte, null).then(function () {
                            _this.$location.path(Portefeuille.Constantes.Url.PORTEFEUILLE);
                            _this.chargementEnCours = false;
                            return _this.$q.when();
                        });
                    });
                }).catch(function (erreur) {
                    if (erreur) {
                        IndexControleur.logger.error("Erreur de recherche de l'EDS", erreur.codeLibelle, erreur.libelle);
                        _this.popupService.showErreur(erreur);
                    }
                    else {
                        IndexControleur.logger.error("Erreur de recherche de l'EDS");
                    }
                });
            };
            /**
             *
             * @param edsChoisi
             * @param contexte
             * @param listePtfActifs
             */
            IndexControleur.prototype.majDonneesDonneesEds = function (edsChoisi, contexte, listePtfActifs) {
                var _this = this;
                this.edsChoisi = edsChoisi;
                //Defini si un changement de contexte à été effectue soit par :
                //  - changement d'agent
                //  - choix d'un EDS
                if (edsChoisi &&
                    (edsChoisi.identifiantElementStructure !== contexte.edsVisu ||
                        this.estVueGlobalConsolide !== contexte.estVueMultiSuiviPar)) {
                    this.contexteService.setEdsVisu(edsChoisi.identifiantElementStructure);
                    this.contexteService.setestVueMultiSuiviPar(this.estVueGlobalConsolide);
                    this.listeClientsService.razRelations();
                    this.portefeuilleService.setCaracteristiquesAgent(edsChoisi);
                    this.portefeuilleService.setTypeForcage(Portefeuille.Enum.PageClients.TYPE_FORCAGE.SANS);
                    if (this.estVueMultiSuiviPar()) {
                        return this.portefeuilleService.
                            getListePortefeuilleEDSChoisi(contexte.codeEtablissement, this.choixUtilisateurService.edsSelectionne.id).
                            then(function (portefeuille) {
                            return _this.integrerPortefeuilleActifs(portefeuille, listePtfActifs);
                        });
                    }
                    else {
                        return this.portefeuilleService.
                            getListePortefeuilleAgentChoisi(edsChoisi).
                            then(function (portefeuille) {
                            return _this.integrerPortefeuilleActifs(portefeuille, listePtfActifs);
                        });
                    }
                }
                else {
                    return this.$q.when();
                }
            };
            /**
             *
             * @param portefeuille
             * @param listePtfActifs
             */
            IndexControleur.prototype.integrerPortefeuilleActifs = function (portefeuille, listePtfActifs) {
                console.log("indexControleur integrerPortefeuilleActifs listePtfActifs", listePtfActifs);
                this.listePortefeuilles = angular.copy(portefeuille);
                this.$scope.$apply();
                if (this.portefeuilleService.aPortefeuille()) {
                    if (listePtfActifs && listePtfActifs.length > 0) {
                        this.portefeuilleService.setListePortefeuillesActifs(listePtfActifs);
                        this.listePortefeuilles = this.portefeuilleService.getListePortefeuillesVisu();
                    }
                    if (this.portefeuilleService.aPortefeuille() &&
                        (!this.portefeuilleService.aPortefeuillesAffiche() ||
                            this.estVueGlobalConsolide)) {
                        // si on l'agent a des portefeuilles mais qu'aucun n'est coché, 
                        // on ouvre automatiquement le volet pour choisir les portefeuilles à afficher
                        // ou que nous somme en vue EDS
                        this.chargerListePortefeilleDropDown();
                        this.ouvertureVoletChoixPortefeuille = true;
                        this.eventService.reinitInitStatsVueGlobale();
                    }
                    if (this.portefeuilleService.aPortefeuillesAffiche()) {
                        this.chargerListePortefeilleDropDown();
                        this.eventService.reinitInitStatsVueGlobale();
                        return this.eventService.initialiserVueGlobale();
                    }
                    return this.$q.when();
                }
                else {
                    this.eventService.reinitInitStatsVueGlobale();
                }
                return this.$q.when();
            };
            /**
             * Permet de retourner le sous-titre
             * @return {string}
             */
            IndexControleur.prototype.getSousTitrePage = function () {
                var listePortefeuilles = this.portefeuilleService.getListePortefeuillesVisu();
                var listePortefeuillesActifs = this.portefeuilleService.getListePortefeuillesActifs();
                var libellePortefeuille = "";
                if (this.estVueGlobalConsolide) {
                    var nblisteAgent = _.uniq(listePortefeuillesActifs, "idAgent").length;
                    var nblisteAgentTotal = _.uniq(listePortefeuilles, "idAgent").length;
                    var pluriel = (nblisteAgent > 1) ? "s" : "";
                    var nomEds = (this.choixUtilisateurService &&
                        this.choixUtilisateurService.edsSelectionne &&
                        this.choixUtilisateurService.edsSelectionne.nomEds) ?
                        this.choixUtilisateurService.edsSelectionne.nomEds : "";
                    libellePortefeuille = " / " + nblisteAgent + " collaborateur" + pluriel + " selectionn\u00E9" + pluriel + " sur " + nblisteAgentTotal;
                    return nomEds + libellePortefeuille;
                }
                else {
                    var designationAgent = this.edsChoisi ? this.edsChoisi.designationAgent : this.contexteService.getDesignation();
                    if (listePortefeuilles.length > 0) {
                        var pluriel = (listePortefeuillesActifs.length > 1) ? "s" : "";
                        libellePortefeuille = " / " + listePortefeuillesActifs.length + " portefeuille" + pluriel + " s\u00E9lectionn\u00E9" + pluriel + " sur " + listePortefeuilles.length;
                        if (listePortefeuillesActifs.length === 1) {
                            libellePortefeuille = libellePortefeuille + (" (" + listePortefeuillesActifs[0].libelle + ")");
                        }
                    }
                    return "SUIVI PAR " + designationAgent + libellePortefeuille;
                }
            };
            /**
             * Charger la listePorteFeuilleDropDown
             */
            IndexControleur.prototype.chargerListePortefeilleDropDown = function () {
                this.listePortefeuillesDropDown = this.portefeuilleService.regrouperPortfeuilleParAgent(this.listePortefeuilles);
            };
            /**
             *
             */
            IndexControleur.prototype.initListePortefeuilles = function () {
                var _this = this;
                this.chargementEnCours = true;
                var defer = this.$q.defer();
                if (!this.listePortefeuilles) {
                    return this.portefeuilleService.getListePortefeuilleAgentConnecte().then(function (res) {
                        _this.listePortefeuilles = angular.copy(res);
                        _this.chargerListePortefeilleDropDown();
                        _this.chargementEnCours = false;
                        if (_this.portefeuilleService.aPortefeuillesAffiche()) {
                            _this.$location.path(Portefeuille.Constantes.Url.PORTEFEUILLE);
                        }
                        else {
                        }
                    }).catch(function (error) {
                        defer.reject();
                        _this.popupService.showErreur(error);
                        _this.aErreurTechnique = true;
                        _this.chargementEnCours = false;
                    });
                }
                else {
                    this.chargerListePortefeilleDropDown();
                    this.chargementEnCours = false;
                    return this.$q.when();
                }
            };
            /**
             * Permet d'ouvrir le choix de portefeuille
             * @return {void}
             */
            IndexControleur.prototype.ouvrirChoixPortefeuille = function () {
                this.ouvertureVoletChoixPortefeuille = true;
            };
            /**
             * Fermeture de l'application
             */
            IndexControleur.prototype.quitter = function () {
                var _this = this;
                IndexControleur.logger.info(">>> Appel de la méthode : IndexControleur.quitter() <<<");
                var listeContexteASupprimer = [Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF];
                this.contexteService.supprimerContexteDevenuInutile(listeContexteASupprimer).then(function () {
                    IndexControleur.logger.info("Suppression du contexte => OK");
                }).catch(function () {
                    IndexControleur.logger.error("Suppression du contexte => KO");
                }).finally(function () {
                    _this.lisaApplication.next(Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_SORTIE, "");
                });
            };
            IndexControleur.CLASS_NAME = "IndexControleur";
            IndexControleur.logger = loggerClass(IndexControleur.CLASS_NAME);
            // Injection de dépendances 
            IndexControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$scope,
                Portefeuille.Constantes.Inject.Angular.$location,
                Portefeuille.Constantes.Inject.Angular.$window,
                Portefeuille.Constantes.Inject.Services.lisaApplication,
                Portefeuille.Constantes.Inject.Services.contexteService,
                Portefeuille.Constantes.Inject.Services.portefeuilleService,
                Portefeuille.Constantes.Inject.Services.eventService,
                Portefeuille.Constantes.Inject.Services.popupService,
                Portefeuille.Constantes.Inject.Angular.$q,
                Portefeuille.Constantes.Inject.Services.listeClientsService,
                Portefeuille.Constantes.Inject.Services.choixUtilisateurService
            ];
            return IndexControleur;
        }());
        Controleurs.IndexControleur = IndexControleur;
        Portefeuille.app.controller(IndexControleur.CLASS_NAME, IndexControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../constantes/inject-constantes.ts" />
/**
 * Controleur de la page portefeuille
 * @module Portefeuille.Controleurs
 * @author S0078068 (Yannis VESSEREAU)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Controleur de l'index
         */
        var PortefeuilleControleur = (function () {
            /**
             * Constructeur
             */
            function PortefeuilleControleur(serviceAgentExtended, $q, $scope, $location, portefeuilleService, eventService, statService, ihmService, contexteService, habilitationService, creationDonutService, indicateurFlecheService, popupService) {
                var _this = this;
                this.serviceAgentExtended = serviceAgentExtended;
                this.$q = $q;
                this.$scope = $scope;
                this.$location = $location;
                this.portefeuilleService = portefeuilleService;
                this.eventService = eventService;
                this.statService = statService;
                this.ihmService = ihmService;
                this.contexteService = contexteService;
                this.habilitationService = habilitationService;
                this.creationDonutService = creationDonutService;
                this.indicateurFlecheService = indicateurFlecheService;
                this.popupService = popupService;
                this.estVueMultiSuiviPar = false;
                this.anneeEnCours = moment().year();
                // chargements pour chaque panel
                this.chargementRentabEnCours = false;
                this.chargementRdvEnCours = false;
                this.chargementPtfEnCours = false;
                this.chargementRevuePtfEnCours = false;
                this.isInitRentab = false;
                this.isInitRevuePtf = false;
                this.isInitPtf = false;
                this.isInitRdv = false;
                this.afficheAppetencesProduits = true; // masque la ligne appetences pour Crédit Coop et BTP (pas d'appétences chez eux)
                this.afficheErreurPoidsPNB = false;
                // Variables bloc Flux
                this.estActifBlocFlux = true;
                this.chargementFluxEnCours = false;
                /**
                 * Variable contenant la méthode permettant d'acceder à la gestion des portefeuilles Expert
                 * @returns {void}
                 */
                this.accederGestionPortefeuillesExpert = function () {
                    _this.ihmService.setTypeVue(Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS); // demande vue client
                    _this.portefeuilleService.setTypeForcage(Portefeuille.Enum.PageClients.TYPE_FORCAGE.CLIENTS); // forçage client
                    //On indique qu'on ne vient pas du bouton "accéder" du bloc revue portefeuille
                    _this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.ACCES_DEPUIS_BLOC_REVUE, "N").then(function () {
                        // ajoute une action remarquable
                        _this.contexteService.tracerSuiviAction(PortefeuilleControleur.logger, Portefeuille.Constantes.ActionsRemarquables.BTN_ACCES_LISTE_CLIENTS);
                        _this.$location.path(Portefeuille.Constantes.Url.CLIENTS);
                    });
                };
                /**
                 * Variable contenant la méthode permettant d'acceder à la gestion des portefeuilles
                 * @returns {void}
                 */
                this.accederGestionPortefeuilles = function () {
                    _this.contexteService.recupererRetourDebranchement().then(function (resultatPromesse) {
                        if (resultatPromesse) {
                            var contexteMisAJour_1;
                            //1°) On ne conserve que objeVisu s'il est valorisé
                            if (resultatPromesse.objetEdsVisu) {
                                contexteMisAJour_1 = {};
                                contexteMisAJour_1 = {};
                                contexteMisAJour_1.objetEdsVisu = angular.copy(resultatPromesse.objetEdsVisu);
                            }
                            //2°) On supprime les données contextuelles, puis on valorise les données contextuelles nécessaires à la gestion des portefeuilles
                            _this.contexteService.supprimerContexteDevenuInutile([Portefeuille.Constantes.Contexte.CONTEXTE_VERS_REVUE, Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF]).then(function () {
                                //this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteMisAJour
                                _this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteMisAJour_1).catch(function (erreur) {
                                    PortefeuilleControleur.logger.info(JSON.stringify(">>accederGestionPortefeuilles<< Erreur lors de l'écriture du contexte de gestion des portefeuilles: " + JSON.stringify(erreur)));
                                });
                            }).catch(function (erreur) {
                                PortefeuilleControleur.logger.info(JSON.stringify(">>accederGestionPortefeuilles<< Erreur lors de la suppression du contexte de gestion des portefeuilles: " + JSON.stringify(erreur)));
                            });
                        }
                        else {
                            // On supprime les données contextuelles liée à la Revue
                            _this.contexteService.supprimerContexteDevenuInutile([Portefeuille.Constantes.Contexte.CONTEXTE_VERS_REVUE]);
                        }
                    }).catch(function (erreur) {
                        PortefeuilleControleur.logger.info(">>accederGestionPortefeuilles<< Erreur lors de la récupération du contexte de gestion des portefeuilles: " + JSON.stringify(erreur));
                    }).finally(function () {
                        // On change va vers la liste des relations éco
                        _this.ihmService.setTypeVue(Portefeuille.Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE);
                        _this.portefeuilleService.setTypeForcage(Portefeuille.Enum.PageClients.TYPE_FORCAGE.SANS); // ICI, je remets
                        //On indique qu'on ne vient pas du bouton "accéder" du bloc revue portefeuille
                        _this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.ACCES_DEPUIS_BLOC_REVUE, "N").then(function () {
                            // ajoute une action remarquable
                            _this.contexteService.tracerSuiviAction(PortefeuilleControleur.logger, Portefeuille.Constantes.ActionsRemarquables.BTN_ACCES_LISTE_CLIENTS);
                            _this.$location.path(Portefeuille.Constantes.Url.CLIENTS);
                        });
                    });
                };
                /**
                 * Variable contenant la méthode permettant d'acceder à la revue portefeuille
                 * @returns {void}
                 */
                this.accederRevuePortefeuilles = function () {
                    _this.contexteService.recupererRetourDebranchement().then(function (resultatPromesse) {
                        if (resultatPromesse) {
                            var contexteMisAJour_2;
                            //1°) On ne conserve que objeVisu s'il est valorisé
                            if (resultatPromesse.objetEdsVisu) {
                                contexteMisAJour_2 = {};
                                contexteMisAJour_2.objetEdsVisu = angular.copy(resultatPromesse.objetEdsVisu);
                            }
                            //2°) On supprime les données contextuelles, puis on valorise les données contextuelles nécessaires à la gestion des portefeuilles
                            _this.contexteService.supprimerContexteDevenuInutile([Portefeuille.Constantes.Contexte.CONTEXTE_VERS_REVUE, Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF]).then(function () {
                                //this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteMisAJour
                                _this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteMisAJour_2).catch(function (erreur) {
                                    PortefeuilleControleur.logger.info(JSON.stringify(">>accederRevuePortefeuilles<< Erreur lors de l'écriture du contexte de gestion des portefeuilles: " + JSON.stringify(erreur)));
                                });
                            }).catch(function (erreur) {
                                PortefeuilleControleur.logger.info(JSON.stringify(">>accederRevuePortefeuilles<< Erreur lors de la suppression du contexte de gestion des portefeuilles: " + JSON.stringify(erreur)));
                            });
                        }
                        else {
                            // On supprime les données contextuelles liée à la Revue
                            _this.contexteService.supprimerContexteDevenuInutile([Portefeuille.Constantes.Contexte.CONTEXTE_VERS_REVUE]);
                        }
                    }).catch(function (erreur) {
                        PortefeuilleControleur.logger.info(">>accederRevuePortefeuilles<< Erreur lors de la récupération du contexte de gestion des portefeuilles: " + JSON.stringify(erreur));
                    }).finally(function () {
                        // On change va vers la liste des clients
                        _this.ihmService.setTypeVue(Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS);
                        //on impose aucune limite du nombre de client a rechercher dans le cas d'un acces aux indicateurs de revue
                        _this.portefeuilleService.setTypeForcage(Portefeuille.Enum.PageClients.TYPE_FORCAGE.TOUT);
                        //On indique qu'on vient du bouton "accéder" du bloc revue portefeuille
                        _this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.ACCES_DEPUIS_BLOC_REVUE, "O").then(function () {
                            // ajoute une action remarquable
                            _this.contexteService.tracerSuiviAction(PortefeuilleControleur.logger, Portefeuille.Constantes.ActionsRemarquables.BTN_ACCES_LISTE_CLIENTS_REVUE);
                            _this.$location.path(Portefeuille.Constantes.Url.CLIENTS);
                        });
                    });
                };
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PortefeuilleControleur.prototype.initialiser = function () {
                PortefeuilleControleur.logger.info(">>> Appel de la méthode : PortefeuilleControleur.initialiser <<<");
                this.reinitInitStats();
                this.messageChoixPtf = Portefeuille.Constantes.Messages.MESSAGE_CHOIX_PORTEFEUILLE;
                this.messageChoixPtfExpert = Portefeuille.Constantes.Messages.MESSAGE_CHOIX_PORTEFEUILLE_EXPERT;
                this.messageAucunPtf = Portefeuille.Constantes.Messages.MESSAGE_AUCUN_PORTEFEUILLE;
                this.estHabiliteBlocRentabilite = this.habilitationService.estHabiliteAccesPNB();
                this.estHabiliteBlocRevue = this.habilitationService.estHabiliteConsultRevue();
                this.estHabiliteConsultAffaires = this.habilitationService.estHabiliteConsultAffaires();
                this.estHabiliteConsultPropositions = this.habilitationService.estHabiliteConsultPropositions();
                this.eventService.setPortefeuilleControleur(this);
                //Titre du panel RDV
                this.titrePanelRdv = Portefeuille.Constantes.Application.TITRE_PANEL_RDV + this.anneeEnCours.toString();
                this.titrePanelRdv2 = Portefeuille.Constantes.Application.TITRE_PANEL_RDV_AVEC_CRE;
                // mise à vide du donut pour qu'il soit recréé
                this.creationDonutService.viderDonut();
                // Configs du bloc Portefeuille
                this.creerConfigBoutonDetailsPortefeuille();
                // Configs du bloc Portefeuille Expert
                this.creerConfigBoutonDetailsPortefeuilleExpert();
                // Configs du bloc Revue Portefeuille
                this.creerConfigBoutonAccederRevuePortefeuille();
                if (this.portefeuilleService.aPortefeuillesAffiche() && this.portefeuilleService.aPortefeuillesReelAffiche()) {
                    return this.initialiserStatistiques();
                }
                else {
                    return this.$q.when();
                }
            };
            /**
             *
             * @param etat
             */
            PortefeuilleControleur.prototype.setEstVueMultiSuiviPar = function (etat) {
                if (this.estVueMultiSuiviPar !== etat) {
                    this.estVueMultiSuiviPar = etat;
                    this.creerConfigBoutonDetailsPortefeuille();
                    this.creerConfigBoutonAccederRevuePortefeuille();
                }
            };
            /**
             * Méthode pour initialiser les blocs de statistiques
             */
            PortefeuilleControleur.prototype.initialiserStatistiques = function () {
                var _this = this;
                if (this.portefeuilleService.aPortefeuillesAffiche() && this.portefeuilleService.aPortefeuillesReelAffiche()) {
                    this.chargementRentabEnCours = true;
                    this.chargementPtfEnCours = true;
                    this.chargementRdvEnCours = true;
                    this.chargementRevuePtfEnCours = true;
                    this.chargementFluxEnCours = true;
                    // Charger les données stat globale on creer une promesse vide
                    var promesse = (this.estVueMultiSuiviPar) ?
                        this.statService.getStatsListeEds() :
                        this.$q.when();
                    promesse.then(function () {
                        // initialisation bloc Rentabilité
                        _this.initBlocRentabilite();
                        // initialisation bloc Rdv et Portefeuille
                        _this.initStatsRdvEtPortefeuille();
                        // initialisation bloc Revue Portefeuille
                        _this.initStatsRevuePortefeuille();
                        // initialisation bloc Flux
                        _this.initStatsFluxMouvementFinancier();
                        return _this.$q.when();
                    });
                }
                if (!this.portefeuilleService.aPortefeuillesReelAffiche()) {
                    this.reinitInitStats();
                }
                return this.$q.when();
            };
            /**
             * initialisation bloc Rentabilité
             */
            PortefeuilleControleur.prototype.initBlocRentabilite = function () {
                var _this = this;
                if (this.estHabiliteBlocRentabilite) {
                    var statRentabilite = (this.estVueMultiSuiviPar) ?
                        this.statService.getStatsRentabiliteEds() :
                        this.statService.getStatsRentabilite();
                    statRentabilite.then(function (statsRentab) {
                        if (statsRentab) {
                            _this.creerBlocRentab(statsRentab);
                            _this.isInitRentab = true;
                        }
                        else {
                            _this.initStatRentab();
                        }
                    }).catch(function (erreur) {
                        _this.isInitRentab = false;
                        _this.messageInitRentab = "Un probl\u00E8me technique emp\u00EAche la r\u00E9cup\u00E9ration des donn\u00E9es: " + erreur.libelle;
                    }).finally(function () {
                        _this.chargementRentabEnCours = false;
                    });
                }
            };
            /**
             * initialisation bloc Rdv et Portefeuille
             */
            PortefeuilleControleur.prototype.initStatsRdvEtPortefeuille = function () {
                var _this = this;
                var statsRdvEtPortefeuille = (this.estVueMultiSuiviPar) ?
                    this.statService.getStatsRdvEtPortefeuilleEds() :
                    this.statService.getStatsRdvEtPortefeuille();
                statsRdvEtPortefeuille.then(function (statsRdvEtPtf) {
                    _this.creerBlocPtf(statsRdvEtPtf);
                    _this.creerBlocRdv(statsRdvEtPtf);
                    _this.isInitRdv = true;
                    _this.isInitPtf = true;
                }).catch(function (erreur) {
                    _this.isInitRdv = false;
                    _this.isInitPtf = false;
                    _this.messageInitPtf = "Un probl\u00E8me technique emp\u00EAche la r\u00E9cup\u00E9ration des donn\u00E9es: " + erreur.libelle;
                    _this.messageInitRdv = "Un probl\u00E8me technique emp\u00EAche la r\u00E9cup\u00E9ration des donn\u00E9es: " + erreur.libelle;
                    _this.creationDonutService.viderDonut();
                }).finally(function () {
                    _this.chargementPtfEnCours = false;
                    _this.chargementRdvEnCours = false;
                });
            };
            /**
             * initialisation bloc Revue Portefeuille
             */
            PortefeuilleControleur.prototype.initStatsRevuePortefeuille = function () {
                var _this = this;
                if (this.estHabiliteBlocRevue) {
                    var statsRevuePortefeuille = (this.estVueMultiSuiviPar) ?
                        this.statService.getStatsRevuePortefeuilleEds() :
                        this.statService.getStatsRevuePortefeuille();
                    statsRevuePortefeuille.then(function (statsRevuePtf) {
                        _this.creerBlocRevuePortefeuille(statsRevuePtf);
                        _this.isInitRevuePtf = true;
                    }).catch(function (erreur) {
                        _this.isInitRevuePtf = false;
                        _this.messageInitRevuePtf = "Un probl\u00E8me technique emp\u00EAche la r\u00E9cup\u00E9ration des donn\u00E9es: " + erreur.libelle;
                    }).finally(function () {
                        _this.chargementRevuePtfEnCours = false;
                    });
                }
            };
            /**
             *
             */
            PortefeuilleControleur.prototype.initStatsFluxMouvementFinancier = function () {
                var _this = this;
                var statsFluxMouvementFinancier;
                this.chargementFluxEnCours = true;
                if (this.estVueMultiSuiviPar) {
                    statsFluxMouvementFinancier = this.statService.getStatsFluxMouvementFinancierEds();
                }
                else {
                    // initialisation bloc Flux
                    var listeIdsPortefeuilles = _.pluck(_.where(this.portefeuilleService.getListePortefeuillesVisu(), { "estAffiche": true }), "id");
                    statsFluxMouvementFinancier = this.statService.getStatsFluxMouvementFinancier(listeIdsPortefeuilles, null);
                }
                statsFluxMouvementFinancier.then(function (statsFlux) {
                    if (statsFlux &&
                        statsFlux.length === 2) {
                        _this.creerBlocFluxCrediteurs(statsFlux[0]);
                        _this.creerBlocFluxDebiteurs(statsFlux[1]);
                        _this.isInitFlux = true;
                    }
                    else {
                        _this.initStatFlux();
                    }
                }).catch(function (erreur) {
                    _this.isInitFlux = false;
                    _this.messageInitFlux = "Un probl\u00E8me technique emp\u00EAche la r\u00E9cup\u00E9ration des donn\u00E9es: " + erreur.libelle;
                }).finally(function () {
                    _this.chargementFluxEnCours = false;
                });
            };
            /**
             * Méthode pour mettre à false les booléen d'init des stats + maj des messages stats
             */
            PortefeuilleControleur.prototype.reinitInitStats = function () {
                this.initStatPtf();
                this.initStatRdv();
                this.initStatRevuePtf();
                this.initStatRentab();
                this.initStatFlux();
                //On vide le donut => utile lorsque l'on change d'agent pour un agent qui possède plusieurs portefeuilles
                this.creationDonutService.viderDonut();
            };
            /**
             *  ouvre la popin détail des portefeuilles en vue multi-conseiller
             */
            PortefeuilleControleur.prototype.debrancherVersDetailsPorteuille = function () {
                this.popupService.showModalFull("vues/template-modale/modale-details-portefeuille-vue.html", "ModaleDetailsPortefeuilleControleur", this.statService.getStatsDetail()).then(function (data) {
                });
            };
            /**
             *  ouvre la popin détail des taux de visite en vue multi-conseiller
             */
            PortefeuilleControleur.prototype.debrancherVersDetailsTauxVisite = function () {
                this.popupService.showModalFull("vues/template-modale/modale-details-taux-visite-vue.html", "ModaleDetailsTauxVisiteControleur", this.statService.getStatsDetail()).then(function (data) {
                });
            };
            /**
             *  ouvre la popin détail de la rentablité PNB en vue multi-conseiller
             */
            PortefeuilleControleur.prototype.debrancherVersDetailsRentabilitePNB = function () {
                this.popupService.showModalFull("vues/template-modale/modale-details-rentabilite-pnb-vue.html", "ModaleDetailsRentabilitePNBControleur", this.statService.getStatsDetail()).then(function (data) {
                });
            };
            /**
             *  ouvre la popin détail des revue portfeuille en vue multi-conseiller
             */
            PortefeuilleControleur.prototype.debrancherVersDetailsRevuePortfeuille = function () {
                this.popupService.showModalFull("vues/template-modale/modale-details-revue-portefeuille-vue.html", "ModaleDetailsRevuePortefeuilleControleur", this.statService.getStatsDetail()).then(function (data) {
                });
            };
            /**
             *  ouvre la popin détail du flux créditeur en vue multi-conseiller
             */
            PortefeuilleControleur.prototype.debrancherVersDetailsFluxCrediteur = function () {
                this.popupService.showModalFull("vues/template-modale/modale-details-flux-crediteur-vue.html", "ModaleDetailsFluxCrediteurControleur", this.statService.getStatsDetail()).then(function (data) {
                });
            };
            /**
             *  ouvre la popin détail du flux débiteur en vue multi-conseiller
             */
            PortefeuilleControleur.prototype.debrancherVersDetailsFluxDebiteur = function () {
                this.popupService.showModalFull("vues/template-modale/modale-details-flux-debiteur-vue.html", "ModaleDetailsFluxDebiteurControleur", this.statService.getStatsDetail()).then(function (data) {
                });
            };
            /**
             *
             */
            PortefeuilleControleur.prototype.initStatRdv = function () {
                this.messageInitRdv = Portefeuille.Constantes.Messages.MESSAGE_NO_DATA_STATS;
                this.isInitRdv = false;
            };
            /**
             *
             */
            PortefeuilleControleur.prototype.initStatPtf = function () {
                this.messageInitPtf = Portefeuille.Constantes.Messages.MESSAGE_NO_DATA_STATS;
                this.isInitPtf = false;
            };
            /**
             *
             */
            PortefeuilleControleur.prototype.initStatRevuePtf = function () {
                this.messageInitRevuePtf = Portefeuille.Constantes.Messages.MESSAGE_NO_DATA_STATS;
                this.isInitRevuePtf = false;
            };
            /**
             *
             */
            PortefeuilleControleur.prototype.initStatRentab = function () {
                this.messageInitRentab = Portefeuille.Constantes.Messages.MESSAGE_NO_DATA_STATS;
                this.isInitRentab = false;
            };
            /**
             *
             */
            PortefeuilleControleur.prototype.initStatFlux = function () {
                this.messageInitFlux = Portefeuille.Constantes.Messages.MESSAGE_NO_DATA_STATS;
                this.isInitFlux = false;
            };
            /**
             * Méthode permettant de créer la config du bouton de détails portefeuille
             * @returns {void}
             */
            PortefeuilleControleur.prototype.creerConfigBoutonDetailsPortefeuille = function () {
                if (this.estVueMultiSuiviPar) {
                    this.configBoutonDetailsPortefeuille = null;
                }
                else {
                    this.configBoutonDetailsPortefeuille = {};
                    this.configBoutonDetailsPortefeuille.label = "Accéder";
                    this.configBoutonDetailsPortefeuille.action = this.accederGestionPortefeuilles;
                }
            };
            /**
             * Méthode permettant de créer la config du bouton de détails portefeuille Expert
             * @returns {void}
             */
            PortefeuilleControleur.prototype.creerConfigBoutonDetailsPortefeuilleExpert = function () {
                this.configBoutonDetailsPortefeuilleExpert = {};
                this.configBoutonDetailsPortefeuilleExpert.label = "Accéder";
                this.configBoutonDetailsPortefeuilleExpert.action = this.accederGestionPortefeuillesExpert;
            };
            /**
             *
             * @param statsRdvEtPortefeuille
             */
            PortefeuilleControleur.prototype.creerBlocPtf = function (statsRdvEtPortefeuille) {
                this.dataIndicateurClientsPmeEsi = {};
                this.dataIndicateurClientsPmeEsi.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_PME_ESI;
                this.dataIndicateurClientsPmeEsi.valeur = statsRdvEtPortefeuille.nombreClientsPMEESI.toString();
                this.dataIndicateurClientsPEetPEES = {};
                this.dataIndicateurClientsPEetPEES.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_PE_ET_PEES;
                this.dataIndicateurClientsPEetPEES.valeur = statsRdvEtPortefeuille.nombreClientsPEetPEES.toString();
                this.dataIndicateurClientsPEetPEES.isSousIntitule = true;
                this.dataIndicateurClientsMEetMEES = {};
                this.dataIndicateurClientsMEetMEES.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_ME_ET_MEES;
                this.dataIndicateurClientsMEetMEES.valeur = statsRdvEtPortefeuille.nombreClientsMEetMEES.toString();
                this.dataIndicateurClientsMEetMEES.isSousIntitule = true;
                this.dataIndicateurClientsGEetGEES = {};
                this.dataIndicateurClientsGEetGEES.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_GE_ET_GEES;
                this.dataIndicateurClientsGEetGEES.valeur = statsRdvEtPortefeuille.nombreClientsGEetGEES.toString();
                this.dataIndicateurClientsGEetGEES.isSousIntitule = true;
                this.dataIndicateurClientsPro = {};
                this.dataIndicateurClientsPro.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_PRO;
                this.dataIndicateurClientsPro.valeur = statsRdvEtPortefeuille.nombreClientsPro.toString();
                this.dataIndicateurAutres = {};
                this.dataIndicateurAutres.intitule = Portefeuille.Constantes.Application.BADGE_AUTRES_CLIENTS;
                this.dataIndicateurAutres.valeur = statsRdvEtPortefeuille.nombreClientsAutres.toString();
                this.creerConfigDonutSegRel(statsRdvEtPortefeuille);
                this.creerConfigDiagrammeColonnePortefeuille(statsRdvEtPortefeuille);
            };
            /**
             *
             * @param statsRdvEtPortefeuille
             */
            PortefeuilleControleur.prototype.creerBlocRdv = function (statsRdvEtPortefeuille) {
                //RDV Clients réalisés année en cours
                this.dataIndicateurNbRdvClientsRealisesAnneeEnCours = {};
                this.dataIndicateurNbRdvClientsRealisesAnneeEnCours.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_REALISES_ANNEE_EN_COURS;
                this.dataIndicateurNbRdvClientsRealisesAnneeEnCours.valeur = statsRdvEtPortefeuille.nombreRdvClientAnneeEnCours.toString();
                this.dataIndicateurNbRdvClientsRealisesAnneeEnCours.isSousIntitule = true;
                //RDV Prospects réalisés année en cours
                this.dataIndicateurNbRdvProspectsRealisesAnneeEnCours = {};
                this.dataIndicateurNbRdvProspectsRealisesAnneeEnCours.intitule = Portefeuille.Constantes.Application.BADGE_PROSPECTS_REALISES_ANNEE_EN_COURS;
                this.dataIndicateurNbRdvProspectsRealisesAnneeEnCours.valeur = statsRdvEtPortefeuille.nombreRdvProspectAnneeCivile.toString();
                this.dataIndicateurNbRdvProspectsRealisesAnneeEnCours.isSousIntitule = true;
                //RDV Clients + Prospects réalisés année en cours
                this.dataIndicateurNbRdvRealisesAnneeEnCours = {};
                this.dataIndicateurNbRdvRealisesAnneeEnCours.intitule = Portefeuille.Constantes.Application.BADGE_RDV_REALISES_ANNEE_EN_COURS;
                this.dataIndicateurNbRdvRealisesAnneeEnCours.valeur = (statsRdvEtPortefeuille.nombreRdvClientAnneeEnCours + statsRdvEtPortefeuille.nombreRdvProspectAnneeCivile).toString();
                this.dataIndicateurNbRdvProspectsVusAnneeEnCours = {};
                this.dataIndicateurNbRdvProspectsVusAnneeEnCours.intitule = Portefeuille.Constantes.Application.BADGE_PROSPECTS_VUS_ANNEE_EN_COURS;
                this.dataIndicateurNbRdvProspectsVusAnneeEnCours.valeur = statsRdvEtPortefeuille.nombreRdvProspectAnneeEnCours.toString();
                this.dataIndicateurNbRelationsEconomiquesAnneeEnCours = {};
                this.dataIndicateurNbRelationsEconomiquesAnneeEnCours.intitule = Portefeuille.Constantes.Application.BADGE_RELATION_ECONOMIQUE_ANNEE_EN_COURS;
                this.dataIndicateurNbRelationsEconomiquesAnneeEnCours.valeur = statsRdvEtPortefeuille.nombreRdvRelationEcoClient.toString();
                this.configPourcentageVisites = {};
                this.configPourcentageVisites.titre = "Taux de visites (relations économiques)";
                this.configPourcentageVisites.pourcentageUn = statsRdvEtPortefeuille.rdvTauxVisite;
                this.configPourcentageVisites.degrade = Portefeuille.Services.LibrairieD3.DEGRADE_POURCENTAGE.BLEU;
            };
            /**
             * Méthode permettant de créer la config du donut segmentation Relationnelle
             * @returns {void}
             */
            PortefeuilleControleur.prototype.creerConfigDonutSegRel = function (statsRdvEtPortefeuille) {
                this.configDonutSegRel = {};
                this.configDonutSegRel.titre = Portefeuille.Constantes.Application.GRAPHE_SEGMENTATION_TITRE_GROUPE;
                this.configDonutSegRel.degrade = Portefeuille.Services.LibrairieD3.DEGRADE_DONUT.ROSE;
                var listeDonnees = [];
                if (statsRdvEtPortefeuille.nombreClientsPMEESI > statsRdvEtPortefeuille.nombreClientsPro) {
                    this.configDonutSegRel.donutChoisi = Portefeuille.Constantes.Application.DONUT_PME_ESI;
                    this.configDonutSegRel.nombreClients = statsRdvEtPortefeuille.nombreClientsPMEESI.toString();
                    _.forEach(statsRdvEtPortefeuille.listeSegmentationsPMEESI, function (seg) {
                        var section = {};
                        section.nom = seg.libelle;
                        section.pourcentage = seg.pourcentage;
                        listeDonnees.push(section);
                    });
                }
                else {
                    this.configDonutSegRel.donutChoisi = Portefeuille.Constantes.Application.DONUT_PRO;
                    this.configDonutSegRel.nombreClients = statsRdvEtPortefeuille.nombreClientsPro.toString();
                    _.forEach(statsRdvEtPortefeuille.listeSegmentationsPro, function (seg) {
                        var section = {};
                        section.nom = seg.libelle;
                        section.pourcentage = seg.pourcentage;
                        listeDonnees.push(section);
                    });
                }
                this.configDonutSegRel.listeDonnees = listeDonnees;
                this.eventService.initialiserPfDiagrammeDonutControleur();
            };
            /**
             * Méthode permettant de créer les données d'entrée du diagramme présenté en colonnes.
             * @returns {void}
             */
            PortefeuilleControleur.prototype.creerConfigDiagrammeColonnePortefeuille = function (statsRdvEtPortefeuille) {
                this.configDiagrammeColonnePortefeuille = [];
                var valeurMax = Math.max(statsRdvEtPortefeuille.nombreRelations, statsRdvEtPortefeuille.nombreClientsAvecProduitService, statsRdvEtPortefeuille.nombreClientsSansContratEtProspect);
                this.configDiagrammeColonnePortefeuille.push({
                    id: "colonne-relations",
                    intitule: Portefeuille.Constantes.Application.DIAGRAMME_COLONNE_RELATIONS,
                    valeur: statsRdvEtPortefeuille.nombreRelations,
                    couleur: Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_RELATIONS,
                    hauteur: Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRdvEtPortefeuille.nombreRelations),
                    estMontant: false
                });
                this.configDiagrammeColonnePortefeuille.push({
                    id: "colonne-clients",
                    intitule: Portefeuille.Constantes.Application.DIAGRAMME_COLONNE_CLIENTS,
                    sousIntitule: Portefeuille.Constantes.Application.DIAGRAMME_COLONNE_CLIENTS_ACTIFS,
                    valeur: statsRdvEtPortefeuille.nombreClientsAvecProduitService,
                    sousValeur: statsRdvEtPortefeuille.nombreClientsActifs,
                    couleur: Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_CLIENT,
                    couleurSousValeur: Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_ACTIF,
                    hauteur: Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRdvEtPortefeuille.nombreClientsAvecProduitService - statsRdvEtPortefeuille.nombreClientsActifs),
                    sousHauteur: Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRdvEtPortefeuille.nombreClientsActifs),
                    estMontant: false
                });
                this.configDiagrammeColonnePortefeuille.push({
                    id: "colonne-prospects",
                    intitule: Portefeuille.Constantes.Application.DIAGRAMME_COLONNE_PROSPECTS,
                    valeur: statsRdvEtPortefeuille.nombreClientsSansContratEtProspect,
                    couleur: Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_SANS_CONTRAT,
                    hauteur: Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRdvEtPortefeuille.nombreClientsSansContratEtProspect),
                    estMontant: false
                });
            };
            /**
             * Méthode permettant de créer la config du bouton de accéder portefeuille
             * @returns {void}
             */
            PortefeuilleControleur.prototype.creerConfigBoutonAccederRevuePortefeuille = function () {
                if (this.estVueMultiSuiviPar) {
                    this.configBoutonAccederRevuePortefeuille = null;
                }
                else {
                    this.configBoutonAccederRevuePortefeuille = {};
                    this.configBoutonAccederRevuePortefeuille.label = "Accéder";
                    this.configBoutonAccederRevuePortefeuille.action = this.accederRevuePortefeuilles;
                }
            };
            PortefeuilleControleur.prototype.creerBlocRevuePortefeuille = function (statsRevuePtf) {
                this.configPourcentagePortefeuilleRealise = {};
                this.configPourcentagePortefeuilleRealise.titre = Portefeuille.Constantes.Application.GRAPHE_REVUE_PORTEFEUILLE;
                this.configPourcentagePortefeuilleRealise.pourcentageUn = statsRevuePtf.pourcentageRevuePtfRealisee;
                this.configPourcentagePortefeuilleRealise.degrade = Portefeuille.Services.LibrairieD3.DEGRADE_POURCENTAGE.BLEU;
                this.dataIndicateurNbProduitsAEquiper = {};
                this.dataIndicateurNbProduitsAEquiper.intitule = Portefeuille.Constantes.Application.BADGE_PRODUITS_PROPOSER;
                if (this.estVueMultiSuiviPar) {
                    this.dataIndicateurNbProduitsAEquiper.debranchementLisa = Portefeuille.Enum.Revue.POPUP_REVUE.POPUP_CLIENTS_PRODUIT_A_PROPOSER;
                    this.dataIndicateurNbProduitsAEquiper.debranchementLocal = null;
                }
                else {
                    this.dataIndicateurNbProduitsAEquiper.debranchementLisa = Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_BILAN_REVUES_PORTEFEUILLE;
                    this.dataIndicateurNbProduitsAEquiper.debranchementLocal = Portefeuille.Constantes.Url.BILAN_REVUES_PORTEFEUILLE;
                }
                this.dataIndicateurNbProduitsAEquiper.valeur = statsRevuePtf.nombreDeProduitsAProposer.toString();
                this.dataIndicateurNbProduitsAppetence = {};
                this.dataIndicateurNbProduitsAppetence.intitule = Portefeuille.Constantes.Application.BADGE_APPETENCE_PRODUITS;
                if (this.estVueMultiSuiviPar) {
                    this.dataIndicateurNbProduitsAEquiper.debranchementLisa = Portefeuille.Enum.Revue.POPUP_REVUE.POPUP_CLIENTS_APPETENCE_PRODUIT;
                    this.dataIndicateurNbProduitsAEquiper.debranchementLocal = null;
                }
                else {
                    this.dataIndicateurNbProduitsAppetence.debranchementLisa = Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_BILAN_APPETENCES_PORTEFEUILLE;
                    this.dataIndicateurNbProduitsAppetence.debranchementLocal = Portefeuille.Constantes.Url.BILAN_APPETENCES_PORTEFEUILLE;
                }
                this.dataIndicateurNbProduitsAppetence.valeur = (statsRevuePtf.nombreDeClientsAAppetence) ? statsRevuePtf.nombreDeClientsAAppetence.toString() : "0";
                // EPIPTF-104 si il n'y a aucune appétence on n'affiche pas du tout la ligne pour ne pas perturber les marchés qui n'ont pas d'appétences
                this.afficheAppetencesProduits = (!statsRevuePtf.nombreDeClientsAAppetence || statsRevuePtf.nombreDeClientsAAppetence === 0) ? false : true;
                this.dataIndicateurNbClientsAActiver = {};
                this.dataIndicateurNbClientsAActiver.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_ACTIVER;
                this.dataIndicateurNbClientsAActiver.debranchementLisa = (this.estVueMultiSuiviPar) ? 0 : Portefeuille.Enum.Revue.POPUP_REVUE.POPUP_CLIENTS_A_ACTIVER;
                this.dataIndicateurNbClientsAActiver.valeur = statsRevuePtf.nombreDeClientsAActiver.toString();
                this.dataIndicateurNbClientsARenegocier = {};
                this.dataIndicateurNbClientsARenegocier.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_RENEGOCIER;
                this.dataIndicateurNbClientsARenegocier.debranchementLisa = (this.estVueMultiSuiviPar) ? 0 : Portefeuille.Enum.Revue.POPUP_REVUE.POPUP_CLIENTS_TARIFICATION;
                this.dataIndicateurNbClientsARenegocier.valeur = (statsRevuePtf.nombreDeClientsARenegocier) ? statsRevuePtf.nombreDeClientsARenegocier.toString() : "0";
                this.dataIndicateurNbPropositionsEnCours = {};
                this.dataIndicateurNbPropositionsEnCours.intitule = Portefeuille.Constantes.Application.BADGE_PROPOSITIONS_EN_COURS;
                this.dataIndicateurNbPropositionsEnCours.debranchementLisa = (this.estVueMultiSuiviPar) ? 0 : Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_PROPOSITONS;
                // this.dataIndicateurNbPropositionsEnCours.debranchementLisa = 0;
                this.dataIndicateurNbPropositionsEnCours.debranchementLocal = null;
                this.dataIndicateurNbPropositionsEnCours.valeur = statsRevuePtf.nombreDePropositionsEnCours.toString();
                this.dataIndicateurNbAffairesEnCours = {};
                this.dataIndicateurNbAffairesEnCours.intitule = Portefeuille.Constantes.Application.BADGE_AFFAIRES_EN_COURS;
                this.dataIndicateurNbAffairesEnCours.debranchementLisa = (this.estVueMultiSuiviPar) ? 0 : Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_GESTION_AFFAIRES;
                this.dataIndicateurNbAffairesEnCours.debranchementLocal = null;
                this.dataIndicateurNbAffairesEnCours.valeur = statsRevuePtf.nombreDeAffairesEnCours.toString();
            };
            /**
             * Méthode d'alimentation du bloc stats rentabilité
             * @param statsRentab
             */
            PortefeuilleControleur.prototype.creerBlocRentab = function (statsRentab) {
                this.creerConfigPourcentageRentabilite(statsRentab);
                this.configFlecheRentabilite = this.indicateurFlecheService.getConfigIndicateurFleche(statsRentab.tauxEvolutionPnb);
                this.creerConfigDiagrammeColonneRentabilite(statsRentab);
            };
            /**
             * Méthode d'alimentation du bloc flux créditeurs
             * @param statsFlux
             */
            PortefeuilleControleur.prototype.creerBlocFluxCrediteurs = function (statsFlux) {
                this.configFlecheFluxCrediteurs = this.indicateurFlecheService.getConfigIndicateurFleche(statsFlux.tauxEvolutionFlux);
                this.creerConfigDiagrammeColonneFluxCrediteurs(statsFlux);
            };
            /**
             * Méthode d'alimentation du bloc flux débiteurs
             * @param statsFlux
             */
            PortefeuilleControleur.prototype.creerBlocFluxDebiteurs = function (statsFlux) {
                this.configFlecheFluxDebiteurs = this.indicateurFlecheService.getConfigIndicateurFleche(statsFlux.tauxEvolutionFlux);
                this.creerConfigDiagrammeColonneFluxDebiteurs(statsFlux);
            };
            /**
             * Méthode permettant de créer la liste des configs grande barre Flux Créditeurs
             * @returns {void}
             */
            PortefeuilleControleur.prototype.creerConfigDiagrammeColonneFluxCrediteurs = function (statsFlux) {
                this.configDiagrammeColonneFluxCrediteurs = [];
                var valeurMax = Math.max(statsFlux.flux12DerniersMoisGlissantN, statsFlux.flux12DerniersMoisGlissNMoins1);
                var configGrandeBarrePeriode1 = {};
                configGrandeBarrePeriode1.intitule = statsFlux ? moment(statsFlux.dateDebFlux12DerMoisGlissNMoins1).format("MM/YYYY") + " \u00E0 " + moment(statsFlux.dateFinFlux12DerMoisGlissNMoins1).format("MM/YYYY") : "";
                configGrandeBarrePeriode1.valeur = statsFlux ? statsFlux.flux12DerniersMoisGlissNMoins1 : 0;
                configGrandeBarrePeriode1.couleur = Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2;
                configGrandeBarrePeriode1.estMontant = true;
                configGrandeBarrePeriode1.hauteur = Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsFlux.flux12DerniersMoisGlissNMoins1);
                configGrandeBarrePeriode1.nePasAfficherIntitule = true;
                this.configDiagrammeColonneFluxCrediteurs.push(configGrandeBarrePeriode1);
                var configGrandeBarrePeriode2 = {};
                configGrandeBarrePeriode2.intitule = statsFlux ? moment(statsFlux.dateDebFlux12DerMoisGlissN).format("MM/YYYY") + " \u00E0 " + moment(statsFlux.dateFinFlux12DerMoisGlissN).format("MM/YYYY") : "";
                configGrandeBarrePeriode2.valeur = statsFlux ? statsFlux.flux12DerniersMoisGlissantN : 0;
                configGrandeBarrePeriode2.couleur = Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1;
                configGrandeBarrePeriode2.estMontant = true;
                configGrandeBarrePeriode2.hauteur = Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsFlux.flux12DerniersMoisGlissantN);
                configGrandeBarrePeriode2.nePasAfficherIntitule = true;
                this.configDiagrammeColonneFluxCrediteurs.push(configGrandeBarrePeriode2);
            };
            /**
             * Méthode permettant de créer la liste des configs grande barre Flux Débiteurs
             * @returns {void}
             */
            PortefeuilleControleur.prototype.creerConfigDiagrammeColonneFluxDebiteurs = function (statsFlux) {
                this.configDiagrammeColonneFluxDebiteurs = [];
                var valeurMax = Math.max(statsFlux.flux12DerniersMoisGlissantN, statsFlux.flux12DerniersMoisGlissNMoins1);
                var configGrandeBarrePeriode1 = {};
                configGrandeBarrePeriode1.intitule = statsFlux ? moment(statsFlux.dateDebFlux12DerMoisGlissNMoins1).format("MM/YYYY") + " \u00E0 " + moment(statsFlux.dateFinFlux12DerMoisGlissNMoins1).format("MM/YYYY") : "";
                configGrandeBarrePeriode1.valeur = statsFlux ? statsFlux.flux12DerniersMoisGlissNMoins1 : 0;
                configGrandeBarrePeriode1.couleur = Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2;
                configGrandeBarrePeriode1.estMontant = true;
                configGrandeBarrePeriode1.hauteur = Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsFlux.flux12DerniersMoisGlissNMoins1);
                configGrandeBarrePeriode1.nePasAfficherIntitule = true;
                this.configDiagrammeColonneFluxDebiteurs.push(configGrandeBarrePeriode1);
                var configGrandeBarrePeriode2 = {};
                configGrandeBarrePeriode2.intitule = statsFlux ? moment(statsFlux.dateDebFlux12DerMoisGlissN).format("MM/YYYY") + " \u00E0 " + moment(statsFlux.dateFinFlux12DerMoisGlissN).format("MM/YYYY") : "";
                configGrandeBarrePeriode2.valeur = statsFlux ? statsFlux.flux12DerniersMoisGlissantN : 0;
                configGrandeBarrePeriode2.couleur = Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1;
                configGrandeBarrePeriode2.estMontant = true;
                configGrandeBarrePeriode2.hauteur = Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsFlux.flux12DerniersMoisGlissantN);
                configGrandeBarrePeriode2.nePasAfficherIntitule = true;
                this.configDiagrammeColonneFluxDebiteurs.push(configGrandeBarrePeriode2);
            };
            /**
             * Méthode permettant de créer la liste des configs grande barre PNB
             * @returns {void}
             */
            PortefeuilleControleur.prototype.creerConfigDiagrammeColonneRentabilite = function (statsRentab) {
                this.configDiagrammeColonneRentabilite = [];
                var valeurMax = Math.max(statsRentab.pnb12DerniersMoisGlissantN, statsRentab.pnb12DerniersMoisGlissNMoins1, statsRentab.pnb3112AnneeNMoins1);
                var configGrandeBarrePeriode3 = {};
                configGrandeBarrePeriode3.intitule = (statsRentab.dateDebPnb3112AnneeNMoins1 && moment(statsRentab.dateDebPnb3112AnneeNMoins1).isValid()) ?
                    "31/12/" + statsRentab.dateDebPnb3112AnneeNMoins1.getFullYear().toString() : "Année précédente";
                configGrandeBarrePeriode3.valeur = statsRentab ? statsRentab.pnb3112AnneeNMoins1 : 0;
                configGrandeBarrePeriode3.couleur = Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE3;
                configGrandeBarrePeriode3.estMontant = true;
                configGrandeBarrePeriode3.nePasAfficherIntitule = true;
                configGrandeBarrePeriode3.hauteur = Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRentab.pnb3112AnneeNMoins1);
                this.configDiagrammeColonneRentabilite.push(configGrandeBarrePeriode3);
                var configGrandeBarrePeriode1 = {};
                configGrandeBarrePeriode1.intitule = statsRentab ? moment(statsRentab.dateDebPnb12DerMoisGlissNMoins1).format("DD/MM/YYYY") + " \u00E0 " + moment(statsRentab.dateFinPnb12DerMoisGlissNMoins1).format("DD/MM/YYYY") : "";
                configGrandeBarrePeriode1.valeur = statsRentab ? statsRentab.pnb12DerniersMoisGlissNMoins1 : 0;
                configGrandeBarrePeriode1.couleur = Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2;
                configGrandeBarrePeriode1.estMontant = true;
                configGrandeBarrePeriode1.nePasAfficherIntitule = true;
                configGrandeBarrePeriode1.hauteur = Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRentab.pnb12DerniersMoisGlissNMoins1);
                this.configDiagrammeColonneRentabilite.push(configGrandeBarrePeriode1);
                var configGrandeBarrePeriode2 = {};
                configGrandeBarrePeriode2.intitule = statsRentab ? moment(statsRentab.dateDebPnb12DerMoisGlissN).format("DD/MM/YYYY") + " \u00E0 " + moment(statsRentab.dateFinPnb12DerMoisGlissN).format("DD/MM/YYYY") : "";
                configGrandeBarrePeriode2.valeur = statsRentab ? statsRentab.pnb12DerniersMoisGlissantN : 0;
                configGrandeBarrePeriode2.couleur = Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1;
                configGrandeBarrePeriode2.estMontant = true;
                configGrandeBarrePeriode2.nePasAfficherIntitule = true;
                configGrandeBarrePeriode2.hauteur = Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRentab.pnb12DerniersMoisGlissantN);
                this.configDiagrammeColonneRentabilite.push(configGrandeBarrePeriode2);
            };
            /**
             * Méthode permettant de créer la config du pourcentage Rentabilité
             * @returns {void}
             */
            PortefeuilleControleur.prototype.creerConfigPourcentageRentabilite = function (statsRentab) {
                this.configPourcentageRentabilite = {};
                this.configPourcentageRentabilite.titre = Portefeuille.Constantes.Application.GRAPHE_POIDS_PNB;
                this.configPourcentageRentabilite.pourcentageUn = statsRentab ? statsRentab.ratioPNBImportants : 0;
                this.configPourcentageRentabilite.degrade = Portefeuille.Services.LibrairieD3.DEGRADE_POURCENTAGE.BLEU;
            };
            PortefeuilleControleur.CLASS_NAME = "PortefeuilleControleur";
            PortefeuilleControleur.logger = loggerClass(PortefeuilleControleur.CLASS_NAME);
            // Injection de dépendances 
            PortefeuilleControleur.$inject = [
                Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                Portefeuille.Constantes.Inject.Angular.$q,
                Portefeuille.Constantes.Inject.Angular.$scope,
                Portefeuille.Constantes.Inject.Angular.$location,
                Portefeuille.Constantes.Inject.Services.portefeuilleService,
                Portefeuille.Constantes.Inject.Services.eventService,
                Portefeuille.Constantes.Inject.Services.statService,
                Portefeuille.Constantes.Inject.Services.ihmService,
                Portefeuille.Constantes.Inject.Services.contexteService,
                Portefeuille.Constantes.Inject.Services.habilitationService,
                Portefeuille.Constantes.Inject.LibrairieD3.creationDonutService,
                Portefeuille.Constantes.Inject.Services.indicateurFlecheService,
                Portefeuille.Constantes.Inject.Services.popupService
            ];
            return PortefeuilleControleur;
        }());
        Controleurs.PortefeuilleControleur = PortefeuilleControleur;
        Portefeuille.app.controller("PortefeuilleControleur", PortefeuilleControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../constantes/inject-constantes.ts" />
/**
 * Controleur de la page selection indicateurs
 * @module Portefeuille.Controleurs
 * @author S0005354 (JM FOLLETTI)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Controleur de l'index
         */
        var SelectionIndicateursControleur = (function () {
            /**
             * Constructeur
             */
            function SelectionIndicateursControleur($scope, serviceAgentExtended, $q, $location, 
                //private $element: ng.IAugmentedJQuery,
                ihmService, preferencesService, indicateurService, modalePaniersService, listeClientsService, filtreService, eventService, contexteService) {
                var _this = this;
                this.$scope = $scope;
                this.serviceAgentExtended = serviceAgentExtended;
                this.$q = $q;
                this.$location = $location;
                this.ihmService = ihmService;
                this.preferencesService = preferencesService;
                this.indicateurService = indicateurService;
                this.modalePaniersService = modalePaniersService;
                this.listeClientsService = listeClientsService;
                this.filtreService = filtreService;
                this.eventService = eventService;
                this.contexteService = contexteService;
                ///**
                // * Variable contenant la méthode a appelé lorsqu'un indicateur est déposé dans le panier
                // */
                this.panierDeposeEvent = function (tuileCatalogueSettings) {
                    // Changement de l'état de l'indicateur
                    tuileCatalogueSettings.indicateur.choisi = true;
                    // Création de la nouvelle tuile panier
                    var tuilePanierSettings = {};
                    tuilePanierSettings.id = _this.modalePaniersService.genererIdentifiantAleatoire();
                    tuilePanierSettings.indicateur = tuileCatalogueSettings.indicateur;
                    _this.listeTuilePanierSettings.push(tuilePanierSettings);
                    // On desactive les drops du panier
                    _this.setEstActiverDropPanier(false);
                    _this.modalePaniersService.desactiverDropTuilesPanier(_this.listeTuilePanierSettings);
                    // Rafraichir listeTuileCatalogueSettings
                    _this.rafraichirListeTuileCatalogueSettings();
                    // si le nombre d'indicateur max est atteint
                    if (_this.getNombreIndicateurPanier() === Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {
                        // Desactivation du drag sur les tuiles du catalogue
                        _.forEach(_this.listeTuileCatalogueSettings, function (tuile) {
                            tuile.dragSettings.desactiverDrag();
                        });
                    }
                    //    // Mise à jour du message d'avertissement de modification de filtre
                    //    this.modalePaniersService.afficherMessageAvertissementFiltre(
                    //        this.listeFiltresRelationEco,
                    //        this.listeFiltresClients,
                    //        _.pluck(this.listeTuilePanierSettings, "indicateur"));
                    _this.$scope.$applyAsync();
                    //this.$scope.$apply();
                };
                /**
                 * Variable contenant la méthode a appelé lorsqu'un indicateur est déposé dans la poubelle
                 */
                this.poubelleDeposeEvent = function (tuilePanierSettings) {
                    // Récupération de la tuile catalogue
                    var tuileCatalogue = _.find(_this.listeTuileCatalogueSettings, function (tuile) {
                        return tuile.indicateur.indicateur.code === tuilePanierSettings.indicateur.indicateur.code;
                    });
                    tuileCatalogue.estEnEdition = true;
                    _this.modalePaniersService.supprimerIndicateurPanier(tuilePanierSettings, _this.listeTuileCatalogueSettings, _this.listeTuilePanierSettings, undefined, undefined);
                    // On cache le drop poubelle
                    _this.setEstAfficherDropPoubelle(false);
                    // On desactive les drops des tuiles du panier
                    _this.modalePaniersService.desactiverDropTuilesPanier(_this.listeTuilePanierSettings);
                };
                this.txtTooltip = "Le bouton \"Gérer la sélection\" permet de :\n -Ajouter, supprimer et ordonner les indicateurs.\n -Modifier le nom de la sélection.";
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            SelectionIndicateursControleur.prototype.initialiser = function () {
                var _this = this;
                SelectionIndicateursControleur.logger.info(">>> Appel de la méthode : SelectionIndicateursControleur.initialiser <<<");
                this.erreurSelection = false;
                this.estDispoAjoutSelection = false;
                this.modalePaniersService.setSelectionIndicateursControleur(this);
                // Fil Ariane
                this.strFilArianePageActuelle = Portefeuille.Constantes.Application.FIL_ARIANE_PAGE_SELECTION_INDICATEURS;
                this.strFilArianePageOrigine = this.ihmService.getTypeVue() === Portefeuille.Enum.PageClients.TYPE_VUE.VUE_CLIENTS ? "Clients" : "Relations économiques";
                if (!this.estEnEditionPanier) {
                    this.estEnEditionPanier = false;
                }
                this.listeTotaleIndicateurs = this.indicateurService.getListeTotaleIndicateursType();
                return this.preferencesService.lirePaniers(this.listeTotaleIndicateurs, true).then(function (lstPaniers) {
                    if (!_this.listePaniers) {
                        _this.listePaniers = lstPaniers ? lstPaniers : [];
                    }
                    _this.estDispoAjoutSelection = !_this.listePaniers || _this.listePaniers.length < Portefeuille.Constantes.Application.LIMITE_NB_PANIERS;
                    if (!_this.panierEnCours) {
                        _this.panierEnCours = Portefeuille.Services.Utils.ApplicationUtils.recupererPanierDefaut(_this.listePaniers);
                        if (!_this.panierDefaut) {
                            _this.panierDefaut = _this.panierEnCours;
                        }
                    }
                    // Creation de listeTuileCatalogueSettings
                    _this.creationListeCatalogueSettings();
                    // Création de listeTuilePanierSettings
                    _this.creationListePanierSettings();
                    //this.listeFiltresClients = this.filtreService.getListeFiltresClients();
                    //this.listeFiltresRelationEco = this.filtreService.getListeFiltresRelationsEco();
                    // Création des paramètres du drop du panier
                    _this.panierDropSettings = _this.panierDropSettings ? _this.panierDropSettings : _this.modalePaniersService.creerDropSettings(_this.panierDeposeEvent);
                    // Création des paramètres du drop de la poubelle
                    _this.poubelleDropSettings = _this.poubelleDropSettings ? _this.poubelleDropSettings : _this.modalePaniersService.creerDropSettings(_this.poubelleDeposeEvent);
                    _this.setEstActiverDropPanier(_this.estEnEditionPanier);
                    _this.setEstAfficherDropPoubelle(_this.estEnEditionPanier);
                    // BDRL-1616: si aucune sélection, on passe directement en mode saisie de nouvelle sélection
                    if (_this.listePaniers.length === 0) {
                        return _this.ajouterSelection();
                    }
                    else {
                        return _this.$q.when();
                    }
                });
            };
            /**
             * Méthode permettant de rafraichir listeTuileCatalogueSettings
             * @return {void}
             */
            SelectionIndicateursControleur.prototype.rafraichirListeTuileCatalogueSettings = function () {
                var _this = this;
                if (this.estEnEditionPanier) {
                    _.forEach(this.listeTuilePanierSettings, function (tuile) {
                        tuile.estEnEdition = true;
                        //if (!tuile.dragSettings) {
                        //    tuile.dragSettings = this.eventService.getDefautDragSettingsPfCoreDraggableControleur();
                        //}
                    });
                    _.forEach(this.listeTuileCatalogueSettings, function (tuile) {
                        // gestion du nombre max atteint
                        if (_this.listeTuilePanierSettings.length >= Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {
                            tuile.estEnEdition = false;
                            tuile.dragSettings.desactiverDrag();
                        }
                        else {
                            var indicateurExistant = _.find(_this.listeTuilePanierSettings, function (tuilePanier) {
                                return tuile.indicateur.indicateur.code === tuilePanier.indicateur.indicateur.code;
                            });
                            if (indicateurExistant) {
                                tuile.estEnEdition = false;
                                tuile.indicateur.choisi = true;
                                tuile.dragSettings.desactiverDrag();
                            }
                            else {
                                tuile.estEnEdition = true;
                                tuile.dragSettings.activerDrag();
                            }
                        }
                    });
                }
            };
            /**
             * Méthode permettant de retourner le nombre d'indicateur présent dans le panier en cours
             * @return {void}
             */
            SelectionIndicateursControleur.prototype.getNombreIndicateurPanier = function () {
                return this.listeTuilePanierSettings.length;
            };
            /**
             * Méthode permettant de modifier l'état du drop panier
             * @param {boolean} estAfficher
             * @returns {void}
             */
            SelectionIndicateursControleur.prototype.setEstActiverDropPanier = function (estAfficher) {
                if (estAfficher) {
                    this.estAfficherDropPanier = true;
                    if (this.panierDropSettings.activerDragOver) {
                        this.panierDropSettings.activerDragOver();
                    }
                }
                else {
                    this.estAfficherDropPanier = false;
                    if (this.panierDropSettings.desactiverDragOver) {
                        this.panierDropSettings.desactiverDragOver();
                    }
                }
                this.$scope.$applyAsync();
            };
            /**
             * Méthode permettant de modifier l'état du drop poubelle
             * @param {boolean} estAfficher
             * @returns {void}
             */
            SelectionIndicateursControleur.prototype.setEstAfficherDropPoubelle = function (estAfficher) {
                if (estAfficher) {
                    if (this.poubelleDropSettings.activerDragOver) {
                        this.poubelleDropSettings.activerDragOver();
                    }
                }
                else {
                    if (this.poubelleDropSettings.desactiverDragOver) {
                        this.poubelleDropSettings.desactiverDragOver();
                    }
                }
                this.$scope.$applyAsync();
            };
            SelectionIndicateursControleur.prototype.creationListePanierSettings = function () {
                var _this = this;
                this.listeTuilePanierSettings = [];
                if (this.panierEnCours) {
                    _.forEach(this.panierEnCours.listeChoixIndicateurs, function (indicateur) {
                        var tuilePanierSettings = {};
                        tuilePanierSettings.id = _this.modalePaniersService.genererIdentifiantAleatoire();
                        tuilePanierSettings.indicateur = indicateur;
                        tuilePanierSettings.estEnEdition = _this.estEnEditionPanier;
                        _this.listeTuilePanierSettings.push(tuilePanierSettings);
                    });
                }
            };
            SelectionIndicateursControleur.prototype.creationListeCatalogueSettings = function () {
                var _this = this;
                this.listeTuileCatalogueSettings = [];
                _.forEach(this.listeTotaleIndicateurs, function (indicateur) {
                    if (indicateur.estVisibleColonne) {
                        var tuileCatalogueSettings = {};
                        tuileCatalogueSettings.id = _this.modalePaniersService.genererIdentifiantAleatoire();
                        tuileCatalogueSettings.estEnEdition = _this.estEnEditionPanier && _this.panierEnCours.listeChoixIndicateurs.length < Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX;
                        // Récupération de l'indicateur
                        var indicateurExistant = void 0;
                        if (_this.panierEnCours) {
                            indicateurExistant = _.find(_this.panierEnCours.listeChoixIndicateurs, function (indicateurChoix) {
                                return indicateurChoix.indicateur.code === indicateur.code;
                            });
                        }
                        if (indicateurExistant) {
                            tuileCatalogueSettings.indicateur = indicateurExistant;
                            tuileCatalogueSettings.estEnEdition = false;
                        }
                        else {
                            var indicateurCatalogue = {};
                            indicateurCatalogue.indicateur = indicateur;
                            indicateurCatalogue.choisi = false;
                            tuileCatalogueSettings.indicateur = indicateurCatalogue;
                        }
                        _this.listeTuileCatalogueSettings.push(tuileCatalogueSettings);
                    }
                });
            };
            /**
             * Methode qui permet d'afficher ou non le message d'avertissement filtre
             * @param {string} nomFiltre1
             * @param {string} nomFiltre2
             * @param {string} nomFiltre3
             * @param {string} nomFiltre4
             * @return {void}
             */
            SelectionIndicateursControleur.prototype.afficherMessageAvertissementFiltre = function (nomFiltre1, nomFiltre2, nomFiltre3, nomFiltre4) {
                this.nomFiltre1 = nomFiltre1;
                this.nomFiltre2 = nomFiltre2;
                this.nomFiltre3 = nomFiltre3;
                this.nomFiltre4 = nomFiltre4;
            };
            SelectionIndicateursControleur.prototype.getEtatNbIndicateurs = function () {
                if (!this.panierEnCours) {
                    return "";
                }
                return "Nombre d'indicateurs: " + this.listeTuilePanierSettings.length + "/" + Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX;
            };
            SelectionIndicateursControleur.prototype.getEtatNbSelections = function () {
                if (!this.listePaniers) {
                    return "";
                }
                return this.listePaniers.length + "/" + Portefeuille.Constantes.Application.LIMITE_NB_PANIERS;
            };
            SelectionIndicateursControleur.prototype.getRoleIndicateurSelection = function () {
                if (this.erreurSelection) {
                    return "alert";
                }
                else {
                    return undefined;
                }
            };
            SelectionIndicateursControleur.prototype.getRoleIndicateurNom = function () {
                if (this.myForm["nom"].$invalid) {
                    return "alert";
                }
                else {
                    return undefined;
                }
            };
            /**
             * Méthode pour passer en mode édition sur le panier en cours
             */
            SelectionIndicateursControleur.prototype.gererSelection = function () {
                var _this = this;
                // ajoute une action remarquable
                this.contexteService.tracerSuiviAction(SelectionIndicateursControleur.logger, Portefeuille.Constantes.ActionsRemarquables.BTN_PERSO_INDIC);
                if (this.panierEnCours) {
                    this.estEnEditionPanier = true;
                    this.modalePaniersService.majEstEditionPanier(true);
                    // On sauve le nom de la selection qui va être modifier en cas d'annulation
                    this.nomSelTemp = this.panierEnCours.nom;
                    this.chargementEnCours = true;
                    return this.initialiser().then(function () {
                        _this.chargementEnCours = false;
                    });
                }
                else {
                    this.erreurSelection = true;
                    return this.$q.when();
                }
            };
            /**
             * Méthode de changement de selection dans la combo de la liste des sélections
             * @param $item
             */
            SelectionIndicateursControleur.prototype.changePanier = function ($item) {
                this.panierEnCours = $item;
                this.erreurSelection = false;
                // on initialise
                return this.initialiser();
            };
            /**
             * Méthode pour passer en mode édition sur une nouvelle sélection
             */
            SelectionIndicateursControleur.prototype.ajouterSelection = function () {
                this.panierEnCours = Portefeuille.Services.Utils.ApplicationUtils.recupererNouvelleSelection();
                this.listePaniers.push(this.panierEnCours);
                this.estEnEditionPanier = true;
                this.modalePaniersService.majEstEditionPanier(true);
                this.estCreationSelection = true;
                return this.initialiser();
            };
            /**
             * Méthode de mise à jour du panier par défaut et de retour à la page précédente
             */
            SelectionIndicateursControleur.prototype.appliquer = function () {
                var _this = this;
                if (this.panierEnCours) {
                    this.chargementEnCours = true;
                    _.forEach(this.listePaniers, function (panier) {
                        if (panier.numero === _this.panierEnCours.numero) {
                            panier.estDefaut = true;
                        }
                        else {
                            panier.estDefaut = false;
                        }
                    });
                    return this.majIndicateursClientsPanierEnCours().then(function () {
                        return _this.preferencesService.ecrirePaniers(_this.listePaniers).then(function () {
                            _this.$location.path(Portefeuille.Constantes.Url.CLIENTS);
                            return _this.$q.when();
                        });
                    });
                }
                else {
                    this.erreurSelection = true;
                    return this.$q.when();
                }
            };
            /**
             * Méthode permettant de mettre à jour les indicateurs clients pour le panier en cours
             * @returns {ng.IPromise<void>}
             */
            SelectionIndicateursControleur.prototype.majIndicateursClientsPanierEnCours = function () {
                return this.majIndicateursClientsPanier(this.panierEnCours.listeChoixIndicateurs);
            };
            /**
             * Méthode permettant de mettre à jour les indicateurs clients pour le panier par defaut
             * @returns {ng.IPromise<void>}
             */
            SelectionIndicateursControleur.prototype.majIndicateursClientsPanierDefaut = function () {
                return this.majIndicateursClientsPanier(this.panierDefaut.listeChoixIndicateurs);
            };
            SelectionIndicateursControleur.prototype.majIndicateursClientsPanier = function (listeChoixIndicateurs) {
                // on va mettre à jour la liste relation avec les nouveaux indicateurs paramétrables si nécéssaire
                var listeEcartIndicateursParametrables = this.indicateurService.getListeEcartIndicateurParametrable(listeChoixIndicateurs);
                this.indicateurService.setListeIndicateurChoix(listeChoixIndicateurs);
                if (listeEcartIndicateursParametrables.length > 0) {
                    return this.listeClientsService.majClientsIndicateurs(listeEcartIndicateursParametrables);
                }
                else {
                    return this.$q.when();
                }
            };
            /**
             * Méthode de retour à la page client sans modification du panier par défaut: il faut cependant prendre en compte les modifications faites sur le panier par defaut initial
             */
            SelectionIndicateursControleur.prototype.retour = function () {
                var _this = this;
                this.chargementEnCours = true;
                if (this.panierDefaut) {
                    return this.majIndicateursClientsPanierDefaut().then(function () {
                        _this.$location.path(Portefeuille.Constantes.Url.CLIENTS);
                        return _this.$q.when();
                    });
                }
                else {
                    this.$location.path(Portefeuille.Constantes.Url.CLIENTS);
                    return this.$q.when();
                }
            };
            /**
             * méthode de retour à l'état initial de la page
             */
            SelectionIndicateursControleur.prototype.annulerModifSelection = function () {
                var _this = this;
                this.chargementEnCours = true;
                // On remet le nom initial de la selection
                if (!this.estCreationSelection) {
                    this.panierEnCours.nom = this.nomSelTemp;
                }
                else {
                    // on supprime la selection en cours de creation
                    _.remove(this.listePaniers, function (panier) {
                        return !panier.numero;
                    });
                    // on remet en panierEncours le panier par defaut
                    this.panierEnCours = Portefeuille.Services.Utils.ApplicationUtils.recupererPanierDefaut(this.listePaniers);
                }
                this.estEnEditionPanier = false;
                this.modalePaniersService.majEstEditionPanier(false);
                return this.initialiser().then(function () {
                    _this.chargementEnCours = false;
                });
            };
            /**
             * Méthode d'enregistrement de de la sélection
             */
            SelectionIndicateursControleur.prototype.enregistrerSelection = function () {
                var _this = this;
                this.chargementEnCours = true;
                if (this.estFormulaireValide()) {
                    this.majPanierEnCoursAvecListeTuilesPanierSettings();
                    if (!this.panierDefaut) {
                        this.panierDefaut = this.panierEnCours;
                    }
                    return this.preferencesService.ecrirePaniers(this.listePaniers).then(function () {
                        _this.estEnEditionPanier = false;
                        _this.modalePaniersService.majEstEditionPanier(false);
                        return _this.initialiser().then(function () {
                            _this.chargementEnCours = false;
                        });
                    });
                }
                else {
                    this.chargementEnCours = false;
                    return this.$q.reject();
                }
            };
            SelectionIndicateursControleur.prototype.estNomAChanger = function () {
                if (!Portefeuille.Services.Utils.ApplicationUtils.estOkNomSelection(this.panierEnCours.nom)) {
                    return true;
                }
                else {
                    return false;
                }
            };
            SelectionIndicateursControleur.prototype.estFormulaireValide = function () {
                var _this = this;
                if (!this.panierEnCours.nom) {
                    this.messageErreurNomSelection = "Le nom de la sélection est obligatoire";
                    return false;
                }
                else {
                    var rep_1 = true;
                    // on vérifie si on n'a pas deja une autre sélection avec ce nom
                    _.find(this.listePaniers, function (selection) {
                        if (selection.nom.toLowerCase() === _this.panierEnCours.nom.toLowerCase() && selection.numero !== _this.panierEnCours.numero) {
                            _this.messageErreurNomSelection = "Nom de sélection déja utilisé";
                            rep_1 = false;
                        }
                        ;
                    });
                    if (rep_1) {
                        this.messageErreurNomSelection = "";
                    }
                    return rep_1;
                }
            };
            SelectionIndicateursControleur.prototype.afficherTuileEmplacementVide = function () {
                return this.listeTuilePanierSettings.length < Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX;
            };
            /**
             * Méthode de mise à jour du panier en cours avec listeTuilePanierSettings
             */
            SelectionIndicateursControleur.prototype.majPanierEnCoursAvecListeTuilesPanierSettings = function () {
                var _this = this;
                this.panierEnCours.listeChoixIndicateurs = [];
                _.forEach(this.listeTuilePanierSettings, function (tuilePanierSettings) {
                    var indic = tuilePanierSettings.indicateur;
                    _this.panierEnCours.listeChoixIndicateurs.push(indic);
                });
            };
            SelectionIndicateursControleur.CLASS_NAME = "SelectionIndicateursControleur";
            SelectionIndicateursControleur.logger = loggerClass(SelectionIndicateursControleur.CLASS_NAME);
            // Injection de dépendances 
            SelectionIndicateursControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$scope,
                Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                Portefeuille.Constantes.Inject.Angular.$q,
                Portefeuille.Constantes.Inject.Angular.$location,
                Portefeuille.Constantes.Inject.Services.ihmService,
                Portefeuille.Constantes.Inject.Services.preferencesService,
                Portefeuille.Constantes.Inject.Services.indicateurService,
                Portefeuille.Constantes.Inject.Services.modalePaniersService,
                Portefeuille.Constantes.Inject.Services.listeClientsService,
                Portefeuille.Constantes.Inject.Services.filtreService,
                Portefeuille.Constantes.Inject.Services.eventService,
                Portefeuille.Constantes.Inject.Services.contexteService
            ];
            return SelectionIndicateursControleur;
        }());
        Controleurs.SelectionIndicateursControleur = SelectionIndicateursControleur;
        // Déclaration du controleur
        Portefeuille.app.controller(SelectionIndicateursControleur.CLASS_NAME, SelectionIndicateursControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var ActionsRemarquables;
        (function (ActionsRemarquables) {
            ActionsRemarquables.BTN_CHANGER_AGENT = "BTN_AGNT";
            ActionsRemarquables.BTN_ACCES_LISTE_CLIENTS = "LST_PTF";
            ActionsRemarquables.BTN_ACCES_LISTE_CLIENTS_REVUE = "LST_REV";
            ActionsRemarquables.BTN_PANIER = "BTN_PANIER";
            ActionsRemarquables.BTN_PERSO_INDIC = "BTN_INDIC";
            ActionsRemarquables.BTN_FILTRES = "BTN_FILTRES";
            ActionsRemarquables.BTN_EXPORT = "BTN_EXPORT";
            ActionsRemarquables.BTN_CONS_PROD = "BTN_CONS_PROD";
            ActionsRemarquables.BTN_EFFC_REVUE = "BTN_EFFC_REVUE";
            ActionsRemarquables.BTN_SYNTH_PM = "BTN_SYNTH_PM";
        })(ActionsRemarquables = Constantes.ActionsRemarquables || (Constantes.ActionsRemarquables = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var Service;
        (function (Service) {
            Service.EDS_RECH_GLBL_PARAM_CODE_RELATION = "002";
            Service.EDS_RECH_GLBL_PARAM_PRES_PM_PAR_FCT = true;
            Service.RELATION_COMMERCIALE_NB_MAX_RES = 350;
            Service.RELATION_COMMERCIALE_NB_MAX_NO_LIMIT = 9999;
            Service.RELATION_COMMERCIALE_CODE_MAX_CLIENT_ATTEINT = "MAX_CLIENTS_ATTEINT";
        })(Service = Constantes.Service || (Constantes.Service = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

/* Fichier pré-requis pour utiliser c'est constantes
 * sans cela une erreur est produite lors de l'execution */
/// <reference path="./service-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var Application;
        (function (Application) {
            Application.TITRE_APPLICATION = "Animer les portefeuilles PM et EI";
            Application.TITRE_VUE_CLIENT = "Liste des clients";
            Application.TITRE_VUE_RELATION = "Liste des relations économiques";
            Application.CHAINE_INDICATEUR_ACTIF = "Actif";
            Application.CHAINE_INDICATEUR_INACTIF = "Inactif";
            Application.CHAINE_INDICATEUR_CLIENT = "Client";
            Application.CHAINE_INDICATEUR_TIERS = "Tiers";
            Application.CHAINE_INDICATEUR_PROSPECT = "Prospect";
            Application.CHAINE_INDICATEUR_LEADER = "Leader";
            Application.CHAINE_INDICATEUR_NON_CONNU = "NC";
            Application.CHAINE_AJOUT_PERSONNALISATION = "Ajouter nouvelle personnalisation";
            Application.CHAINE_OUI = "Oui";
            Application.CHAINE_NON = "Non";
            Application.FORMAT_DATE_IHM = "DD/MM/YYYY";
            Application.FORMAT_DATE_REST = "YYYY-MM-DD";
            Application.CODE_HABILITATION_CHOIX_EDS = "SHDC23";
            Application.CODE_HABILITATION_AGENCE_NIVEAU_2 = "SHDC23";
            Application.CODE_HABILITATION_ACCES_PNB = "SHDC26";
            Application.CODE_HABILITATION_CONSULT_REVUE = "SHDC24";
            Application.CODE_HABILITATION_CONSULT_AFFAIRES = "SHP6AF";
            Application.CODE_HABILITATION_CONSULT_PROPOSITIONS = "SHPI04";
            Application.CODE_HABILITATION_MAJ_REVUE = "SHDC25";
            Application.CODE_HABILITATION_CONSULT_POT_PROSPECT = "SHPIQ1";
            Application.CODE_HABILITATION_MAJ_POT_PROSPECT = "SHPIQ2";
            Application.CODE_HABILITATION_CONSULT_SEGMENTATIONS = "SHDL01";
            Application.CODE_HABILITATION_CHOIX_AGENT = "SHDC22";
            Application.TXT_SELECTIONNER_TOUT = "Sélectionner tout";
            Application.TXT_DESELECTIONNER_TOUT = "Désélectionner tout";
            Application.NB_LIGNE_TABLEAU = 20;
            Application.CODE_LEADER_RELATION = "L";
            Application.CHAINE_NOM_PANIER_INDICATEUR = "Ma sélection d'indicateurs";
            Application.TXT_CHOIX_PORTEFEUILLE = "Choix de portefeuille";
            Application.CLASSE_COLONNE_CLIENTS = ".colonne-clients";
            Application.CLASSE_COLONNE_RELATIONS = ".colonne-relations";
            Application.CLASSE_BTN_FILTRE = ".btn-filtre";
            Application.ID_TABLE_CLIENT = "#tab-client";
            Application.CLASSE_ACTIF = "actif";
            Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_CLIENTS_SINGULIER = "Votre portefeuille est filtré, seuls les clients sont affichés.";
            Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_PROSPECTS_SINGULIER = "Votre portefeuille est filtré, seuls les prospects sont affichés.";
            Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_CLIENTS_PLURIEL = "Vos portefeuilles sont filtrés, seuls les clients sont affichés.";
            Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_PROSPECTS_PLURIEL = "Vos portefeuilles sont filtrés, seuls les prospects sont affichés.";
            Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_TOUT_SINGULIER = "Votre portefeuille comporte plus de " + Constantes.Service.RELATION_COMMERCIALE_NB_MAX_RES + " clients/prospects.";
            Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_TOUT_PLURIEL = "Vos portefeuilles comportent plus de " + Constantes.Service.RELATION_COMMERCIALE_NB_MAX_RES + " clients/prospects.";
            Application.LISTE_RELATIONS_ECONOMIQUES_INACCESSIBLE = "La liste des relations économiques n'est pas accessible.";
            Application.INDICATEURS_PREDEFINIS_NON_MODIFIABLES = "Les indicateurs sont prédéfinis et non modifiables.";
            Application.NOM_PANIER_FORCAGE = "Indicateurs prédéfinis";
            Application.NOM_PANIER_DEFAUT = "Ma sélection d'indicateurs";
            Application.NOM_PANIER_CREATION = "Sélection d'indicateurs";
            Application.LIMITE_NB_PANIERS = 3;
            Application.FIL_ARIANE_PAGE_SELECTION_INDICATEURS = "Personnaliser les indicateurs";
            //Vue Globale => Partie "Portefeuille"
            Application.DIAGRAMME_COLONNE_CLIENTS = "Clients";
            Application.DIAGRAMME_COLONNE_CLIENTS_ACTIFS = "Dont actifs";
            Application.DIAGRAMME_COLONNE_SANS_CONTRAT = "Dont clients sans contrat";
            Application.DIAGRAMME_COLONNE_PROSPECTS = "Prospects et<br>clients sans contrat";
            Application.DIAGRAMME_COLONNE_RELATIONS = "Relations";
            Application.BADGE_CLIENTS_PME_ESI = "Clients PME et ESI";
            Application.BADGE_CLIENTS_PE_ET_PEES = "Dont clients PE et PEES";
            Application.BADGE_CLIENTS_ME_ET_MEES = "Dont clients ME et MEES";
            Application.BADGE_CLIENTS_GE_ET_GEES = "Dont clients GE et GEES";
            Application.BADGE_CLIENTS_PRO = "Clients Pro";
            Application.BADGE_AUTRES_CLIENTS = "Clients autres marchés";
            Application.GRAPHE_SEGMENTATION_TITRE = "Segmentation relationnelle";
            Application.GRAPHE_SEGMENTATION_TITRE_GROUPE = "Segmentation relationnelle groupe";
            Application.GRAPHE_SEGMENTATION_TITRE_CLIENT = "Segmentation relationnelle client";
            Application.PUCE_SEGMENTATION_FIDELISER = "A fidéliser";
            Application.PUCE_SEGMENTATION_SURVEILLER = "A surveiller";
            Application.PUCE_SEGMENTATION_DEVELOPPER = "A développer";
            Application.PUCE_SEGMENTATION_ACQUERIR = "A acquérir";
            Application.PUCE_SEGMENTATION_GERER = "A gérer";
            Application.PUCE_SEGMENTATION_PRESERVER = "A préserver";
            Application.PUCE_SEGMENTATION_NON_SEGMENTE = "Non segmenté";
            Application.DONUT_PRO = "PRO";
            Application.DONUT_PME_ESI = "PME/ESI";
            Application.TABLE_DELOC_SEGMENTATIONS = "DU2L";
            //Vue Globale => Partie "Rentabilité"
            Application.GRAPHE_POIDS_PNB = "Poids du PNB des 10 relations économiques les plus importantes";
            // SPC identifiant maximum de portefeuille qui ne sont pas des id portfeuille mais des type de suivi par complémentaires
            // Pour le moment 13/06/2024, les type de suivi par complémentaire vont de 001 à 009.
            // Les id portefeuille en production commencent à 1 mais les 20 premiers sont des portefeuilles collectifs ou reservoire
            Application.ID_PORTEFEUILLE_MAX_SPC = 20;
            //Vue Globale => Partie "Revue Portefeuille"
            Application.BADGE_PRODUITS_PROPOSER = "Produits à proposer";
            Application.BADGE_APPETENCE_PRODUITS = "Appétence produits";
            Application.BADGE_CLIENTS_ACTIVER = "Clients à activer";
            Application.BADGE_CLIENTS_RENEGOCIER = "Tarifications à renégocier";
            Application.BADGE_PROPOSITIONS_EN_COURS = "Propositions en cours";
            Application.BADGE_AFFAIRES_EN_COURS = "Affaires en cours";
            Application.GRAPHE_REVUE_PORTEFEUILLE = "Taux de revues";
            //Vue Globale => Partie "Rendez-vous"
            Application.TITRE_PANEL_RDV = "Activité commerciale depuis le 1er janvier "; //Suivi de l'année en cours
            Application.TITRE_PANEL_RDV_AVEC_CRE = "(RDV avec CRE)";
            Application.BADGE_RDV_REALISES_ANNEE_EN_COURS = "RDV réalisés";
            Application.BADGE_CLIENTS_REALISES_ANNEE_EN_COURS = "Dont RDV Clients";
            Application.BADGE_PROSPECTS_REALISES_ANNEE_EN_COURS = "Dont RDV Prospects et clients sans contrat";
            Application.BADGE_PROSPECTS_VUS_ANNEE_EN_COURS = "Prospects rencontrés";
            Application.BADGE_RELATION_ECONOMIQUE_ANNEE_EN_COURS = "Relations économiques rencontrées";
            //Libellés IHM associés aux codes segmentation Pro
            Application.LIBELLE_AGGLOMERAT_ENTREE_RELATION = "Entrée en relation";
            Application.LIBELLE_AGGLOMERAT_RISQUE = "Risqué";
            Application.LIBELLE_AGGLOMERAT_PRO_NON_CAPTE = "Faiblement/Non capté";
            Application.LIBELLE_AGGLOMERAT_PRO_PARTIELLEMENT_CAPTE = "Partiellement capté";
            Application.LIBELLE_AGGLOMERAT_PRO_LARGEMENT_CAPTE = "Largement capté";
            Application.LIBELLE_AGGLOMERAT_AUTRES = "Non concerné/calculé";
            //Fin de chaîne pour la chaîne max utilisée lors des tris dans tableau relations éco et clients
            Application.FIN_CHAINE_MAX = new Date().toDateString();
            Application.DATE_MIN = "1970/01/01";
            Application.DATE_MAX = "9999/12/31";
            Application.DONNEE_NUMBER = "number";
            Application.DONNEE_STRING = "string";
            Application.DONNEE_VALEUR_NUMBER = "valeurNumber";
            Application.DONNEE_VALEUR_DATE = "valeurDate";
            Application.LIBELLE_NOTE_PROSPECT = ["0", "1 étoile", "2 étoiles", "3 étoiles"];
            Application.LIBELLE_TOP_CC_BLANC = "Blanc";
        })(Application = Constantes.Application || (Constantes.Application = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var Contexte;
        (function (Contexte) {
            Contexte.CONTEXTE_GERR_PORTF = "contexteProcessusGererPortefeuille";
            Contexte.CONTEXTE_VERS_REVUE = "contexteVersRevue";
            Contexte.CONTEXTE_EDS_PORTEFEUILLES = "contexteEdsPortefeuilles";
            Contexte.IDENTIFIANT_PERSONNE = "identifiantPersonne";
            Contexte.ACCES_DEPUIS_BLOC_REVUE = "accesDepuisBlocRevue";
            Contexte.TYPE_SYNTHESE = "typeSynthese";
        })(Contexte = Constantes.Contexte || (Constantes.Contexte = {}));
        ;
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

/* Fichier pré-requis pour utiliser c'est constantes
 * sans cela une erreur est produite lors de l'execution */
/// <reference path="../enums/application-enums.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var Indicateur;
        (function (Indicateur) {
            Indicateur.ORDRE_INDICATEUR = [
                Portefeuille.Enum.Indicateur.CODE.CA_N_MOINS_1.toString(),
                Portefeuille.Enum.Indicateur.CODE.CA_N.toString(),
                Portefeuille.Enum.Indicateur.CODE.CLIENTPROSPECT.toString(),
                Portefeuille.Enum.Indicateur.CODE.ACTIF.toString(),
                Portefeuille.Enum.Indicateur.CODE.EQUIPE.toString(),
                Portefeuille.Enum.Indicateur.CODE.LEADER.toString(),
                Portefeuille.Enum.Indicateur.CODE.FLUX_CREDITEURS_N.toString(),
                Portefeuille.Enum.Indicateur.CODE.FLUX_CREDITEURS_N_MOINS_1.toString(),
                Portefeuille.Enum.Indicateur.CODE.FLUX_DEBITEURS_N.toString(),
                Portefeuille.Enum.Indicateur.CODE.FLUX_DEBITEURS_N_MOINS_1.toString(),
                Portefeuille.Enum.Indicateur.CODE.OBJECTIF_FLUX.toString(),
                Portefeuille.Enum.Indicateur.CODE.NB_AFFAIRES_EN_COURS.toString(),
                Portefeuille.Enum.Indicateur.CODE.NB_APPETENCES.toString(),
                Portefeuille.Enum.Indicateur.CODE.NB_PROPOSITIONS_EN_COURS.toString(),
                Portefeuille.Enum.Indicateur.CODE.PNB_3112.toString(),
                Portefeuille.Enum.Indicateur.CODE.PNB_N.toString(),
                Portefeuille.Enum.Indicateur.CODE.PNB_N_MOINS_1.toString(),
                Portefeuille.Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString(),
                Portefeuille.Enum.Indicateur.CODE.SCORE_ACTIVATION.toString(),
                Portefeuille.Enum.Indicateur.CODE.SCORE_APPETENCE.toString(),
                Portefeuille.Enum.Indicateur.CODE.SCORE_DEFAILLANCE.toString(),
                Portefeuille.Enum.Indicateur.CODE.DATE_DERNIER_ENTRETIEN.toString(),
                Portefeuille.Enum.Indicateur.CODE.DATE_DERNIER_RDV.toString(),
                Portefeuille.Enum.Indicateur.CODE.NB_RDV_12_MOIS_GLISSANTS.toString(),
                Portefeuille.Enum.Indicateur.CODE.NB_RDV_ANNEE_EN_COURS.toString(),
                Portefeuille.Enum.Indicateur.CODE.DATE_PROCHAIN_RDV.toString(),
                Portefeuille.Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString(),
                Portefeuille.Enum.Indicateur.CODE.REV_NB_SSFAMILLES_PROPOSE.toString(),
                Portefeuille.Enum.Indicateur.CODE.REV_VALIDEE_PAR.toString(),
                Portefeuille.Enum.Indicateur.CODE.NOTE_BALE2.toString(),
                Portefeuille.Enum.Indicateur.CODE.PART_ENGAG.toString(),
                Portefeuille.Enum.Indicateur.CODE.PROCHAINE_REVISION.toString(),
                Portefeuille.Enum.Indicateur.CODE.MARCHE.toString(),
                Portefeuille.Enum.Indicateur.CODE.SEG_RELATIONNELLE.toString(),
                Portefeuille.Enum.Indicateur.CODE.SEG_RELATIONNELLE_GROUPE.toString(),
                Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString(),
                Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG.toString(),
                Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TEXTE.toString(),
                Portefeuille.Enum.Indicateur.CODE.ENCOURS_BDF.toString(),
                Portefeuille.Enum.Indicateur.CODE.BEGACLI.toString()
            ];
            Indicateur.ORDRE_INDICATEUR_REVUE = [
                Portefeuille.Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString(),
                Portefeuille.Enum.Indicateur.CODE.REV_VALIDEE_PAR.toString(),
                Portefeuille.Enum.Indicateur.CODE.NB_APPETENCES.toString(),
                Portefeuille.Enum.Indicateur.CODE.REV_NB_SSFAMILLES_PROPOSE.toString(),
                Portefeuille.Enum.Indicateur.CODE.NB_AFFAIRES_EN_COURS.toString(),
                Portefeuille.Enum.Indicateur.CODE.NB_PROPOSITIONS_EN_COURS.toString(),
                Portefeuille.Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString()];
            Indicateur.INDICATEUR_PANIER_FORCAGE = [
                Portefeuille.Enum.Indicateur.CODE.SEG_RELATIONNELLE.toString(),
                Portefeuille.Enum.Indicateur.CODE.DATE_DERNIER_ENTRETIEN.toString(),
                Portefeuille.Enum.Indicateur.CODE.DATE_DERNIER_RDV.toString(),
                Portefeuille.Enum.Indicateur.CODE.DATE_PROCHAIN_RDV.toString(),
                Portefeuille.Enum.Indicateur.CODE.NB_RDV_ANNEE_EN_COURS.toString(),
                Portefeuille.Enum.Indicateur.CODE.NB_RDV_12_MOIS_GLISSANTS.toString()];
            Indicateur.INDICATEUR_EN_EURO = [
                Portefeuille.Enum.Indicateur.CODE.PNB_3112.toString(),
                Portefeuille.Enum.Indicateur.CODE.PNB_N.toString(),
                Portefeuille.Enum.Indicateur.CODE.PNB_N_MOINS_1.toString(),
                Portefeuille.Enum.Indicateur.CODEREL.PNB_3112.toString(),
                Portefeuille.Enum.Indicateur.CODEREL.PNB_N.toString(),
                Portefeuille.Enum.Indicateur.CODEREL.PNB_N_MOINS_1.toString()
            ];
            Indicateur.INDICATEUR_TAG = [
                Portefeuille.Enum.Indicateur.CODE.CLIENTPROSPECT.toString(),
                Portefeuille.Enum.Indicateur.CODE.ACTIF.toString(),
                Portefeuille.Enum.Indicateur.CODE.EQUIPE.toString(),
                Portefeuille.Enum.Indicateur.CODE.LEADER.toString(),
                Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TEXTE.toString()
            ];
            Indicateur.INDICATEUR_CEER_MANUELLEMENT = [
                Portefeuille.Enum.Indicateur.CODEREL.REV_NB_SSFAMILLES_PROPOSE.toString(),
                Portefeuille.Enum.Indicateur.CODEREL.PNB_3112.toString(),
                Portefeuille.Enum.Indicateur.CODEREL.PNB_N.toString(),
                Portefeuille.Enum.Indicateur.CODEREL.PNB_N_MOINS_1.toString(),
                Portefeuille.Enum.Indicateur.CODEREL.PNB_N_MOINS_1.toString(),
                Portefeuille.Enum.Indicateur.CODEREL.NB_AFFAIRES_EN_COURS.toString(),
                Portefeuille.Enum.Indicateur.CODEREL.NB_PROPOSITIONS_EN_COURS.toString(),
                Portefeuille.Enum.Indicateur.CODEREL.NB_APPETENCES.toString(),
                Portefeuille.Enum.Indicateur.CODEREL.SEG_RELATIONNELLE_GROUPE.toString(),
                Portefeuille.Enum.Indicateur.CODEREL.REV_DATE_DERNIERE_REVUE.toString(),
                Portefeuille.Enum.Indicateur.CODEREL.ENCOURS_BDF.toString()
            ];
            Indicateur.LISTE_COMPARATEUR_COMMUNE = [
                Portefeuille.Enum.Filtre.COMPARATEUR.SUPERIEUR,
                Portefeuille.Enum.Filtre.COMPARATEUR.INFERIEUR,
                Portefeuille.Enum.Filtre.COMPARATEUR.EGALE,
                Portefeuille.Enum.Filtre.COMPARATEUR.ENTRE,
                Portefeuille.Enum.Filtre.COMPARATEUR.NC
            ];
            Indicateur.LISTE_COMPARATEUR_INTERVAL = [
                Portefeuille.Enum.Filtre.COMPARATEUR.SUPERIEUR,
                Portefeuille.Enum.Filtre.COMPARATEUR.INFERIEUR,
                Portefeuille.Enum.Filtre.COMPARATEUR.ENTRE,
                Portefeuille.Enum.Filtre.COMPARATEUR.NC
            ];
            Indicateur.LISTE_COMPARATEUR_DERNIERE_REVUE = [
                Portefeuille.Enum.Filtre.COMPARATEUR.ECHUE,
                Portefeuille.Enum.Filtre.COMPARATEUR.ENCOURS,
                Portefeuille.Enum.Filtre.COMPARATEUR.NONREALISEE
            ];
            Indicateur.LISTE_COMPARATEUR = [
                Portefeuille.Enum.Filtre.COMPARATEUR.ECHUE,
                Portefeuille.Enum.Filtre.COMPARATEUR.EGALE,
                Portefeuille.Enum.Filtre.COMPARATEUR.ENCOURS,
                Portefeuille.Enum.Filtre.COMPARATEUR.ENTRE,
                Portefeuille.Enum.Filtre.COMPARATEUR.INFERIEUR,
                Portefeuille.Enum.Filtre.COMPARATEUR.NC,
                Portefeuille.Enum.Filtre.COMPARATEUR.NONREALISEE,
                Portefeuille.Enum.Filtre.COMPARATEUR.SUPERIEUR
            ];
            Indicateur.LISTE_INDICATEUR_NUMERIQUE = [
                Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                Portefeuille.Enum.Indicateur.TYPE.MONTANT,
                Portefeuille.Enum.Indicateur.TYPE.POURCENT
            ];
            Indicateur.LISTE_OPERATEURS_FILTRE = [
                Portefeuille.Enum.Filtre.OPERATEUR.ET,
                Portefeuille.Enum.Filtre.OPERATEUR.OU
            ];
            Indicateur.LISTE_TOTAL_INDICATEUR = [
                {
                    "code": Portefeuille.Enum.Indicateur.CODE.CA_N_MOINS_1.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.CA_N_MOINS_1.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.MONTANT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.CA_N_MOINS_1.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.CA,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.CA_N_MOINS_1.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.CA_N.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.CA_N.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.MONTANT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.CA_N.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.CA,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.CA_N.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.CLIENTPROSPECT.toString(),
                    "codeRest": "",
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.CLIENTPROSPECT.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.TEXTE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.CLIENTPROSPECT.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": false,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.CLIENTPROSPECT.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.ACTIF.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.ACTIF.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.TEXTE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.ACTIF.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": false,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.ACTIF.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.EQUIPE.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.ACTIF.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.TEXTE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.NON_EQUIPE.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": false,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.SANS_CONTRAT.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.LEADER.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.ACTIF.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.TEXTE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.LEADER.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": false,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.LEADER.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.FLUX_CREDITEURS_N.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.FLUX.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.MONTANT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.FLUX_CREDITEURS_N.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.FLUX,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.FLUX_CREDITEURS_N.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.FLUX_CREDITEURS_N_MOINS_1.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.FLUX.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.MONTANT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.FLUX_CREDITEURS_N_MOINS_1.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.FLUX,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.FLUX_CREDITEURS_N_MOINS_1.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.FLUX_DEBITEURS_N.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.FLUX.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.MONTANT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.FLUX_DEBITEURS_N.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.FLUX,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.FLUX_DEBITEURS_N.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.FLUX_DEBITEURS_N_MOINS_1.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.FLUX.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.MONTANT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.FLUX_DEBITEURS_N_MOINS_1.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.FLUX,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.FLUX_DEBITEURS_N_MOINS_1.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.OBJECTIF_FLUX.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.OBJECTIF_FLUX.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.POURCENT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.OBJECTIF_FLUX.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.FLUX,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.OBJECTIF_FLUX.toString()
                },
                {
                    "code": Portefeuille.Enum.Indicateur.CODE.PART_FLUX_CONFIES_CRED.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.PART_FLUX_CONFIES_CRED.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.POURCENT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.PART_FLUX_CONFIES_CRED.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.FLUX,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.PART_FLUX_CONFIES_CRED.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.PART_FLUX_CONFIES_DEB.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.PART_FLUX_CONFIES_DEB.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.POURCENT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.PART_FLUX_CONFIES_DEB.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.FLUX,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.PART_FLUX_CONFIES_DEB.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.DATE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.OPPORTUNITES,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.PREMIER_EQUIPEMENT.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.BEGACLI.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.BEGACLI.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.BEGACLI,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.BEGACLI.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.OPPORTUNITES,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.BEGACLI.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.NB_AFFAIRES_EN_COURS.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.AFFAIRES_EN_COURS.toString(),
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.NB_AFFAIRES_EN_COURS.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.NB_AFFAIRES_EN_COURS.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.OPPORTUNITES,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.NB_AFFAIRES_EN_COURS.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.NB_APPETENCES.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.NB_APPETENCES.toString(),
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.NB_APPETENCES.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.NB_APPETENCES.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.OPPORTUNITES,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.NB_APPETENCES.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.NB_PROPOSITIONS_EN_COURS.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.PROPOSITIONS_EN_COURS.toString(),
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.NB_PROPOSITIONS_EN_COURS.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.NB_PROPOSITIONS_EN_COURS.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.OPPORTUNITES,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.NB_PROPOSITIONS_EN_COURS.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.PNB_3112.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.PNB_3112.toString(),
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.PNB_3112.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.MONTANT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.PNB_3112.toString() + moment().subtract(1, "year").format("YYYY"),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.PNB,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.PNB_3112.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.PNB_N.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.PNB_N.toString(),
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.PNB_N.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.MONTANT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.PNB_N.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.PNB,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.PNB_N.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.PNB_N_MOINS_1.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.PNB_N_MOINS_1.toString(),
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.PNB_N_MOINS_1.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.MONTANT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.PNB_N_MOINS_1.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.PNB,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.PNB_N_MOINS_1.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.POT_PROS.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.TEXTE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.POTENTIEL_PROSPECT.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.PROSPECTION,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.POTENTIEL_PROSPECT.toString()
                }, {
                    // NOUVEL INDICATEUR score activation
                    "code": Portefeuille.Enum.Indicateur.CODE.SCORE_ACTIVATION.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.SCORE_ACTIVATION.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.SCORE_ACTIVATION.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.PROSPECTION,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.SCORE_ACTIVATION.toString()
                }, {
                    // NOUVEL INDICATEUR score appétence
                    "code": Portefeuille.Enum.Indicateur.CODE.SCORE_APPETENCE.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.SCORE_APPETENCE.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.SCORE_APPETENCE.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.PROSPECTION,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.SCORE_APPETENCE.toString()
                }, {
                    // NOUVEL INDICATEUR score défaillance
                    "code": Portefeuille.Enum.Indicateur.CODE.SCORE_DEFAILLANCE.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.SCORE_DEFAILLANCE.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.SCORE_DEFAILLANCE.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.PROSPECTION,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.SCORE_DEFAILLANCE.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.DATE_DERNIER_ENTRETIEN.toString(),
                    "codeRest": "",
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.DATE_DERNIER_ENTRETIEN.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.DATE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.DATE_DERNIER_ENTRETIEN.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.RENDEZ_VOUS,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.DATE_DERNIER_ENTRETIEN.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.DATE_DERNIER_RDV.toString(),
                    "codeRest": "",
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.DATE_DERNIER_RDV.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.DATE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.DATE_DERNIER_RDV.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.RENDEZ_VOUS,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.DATE_DERNIER_RDV.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.NB_RDV_12_MOIS_GLISSANTS.toString(),
                    "codeRest": "",
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.NB_RDV_12_MOIS_GLISSANTS.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.NB_RDV_12_MOIS_GLISSANTS.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.RENDEZ_VOUS,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.NB_RDV_12_MOIS_GLISSANTS.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.NB_RDV_ANNEE_EN_COURS.toString(),
                    "codeRest": "",
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.NB_RDV_ANNEE_EN_COURS.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.NB_RDV_ANNEE_EN_COURS.toString() + moment().format("YYYY"),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.RENDEZ_VOUS,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.NB_RDV_ANNEE_EN_COURS.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.DATE_PROCHAIN_RDV.toString(),
                    "codeRest": "",
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.DATE_PROCHAIN_RDV.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.DATE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.DATE_PROCHAIN_RDV.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.RENDEZ_VOUS,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.DATE_PROCHAIN_RDV.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.REVUE.toString(),
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.REV_DATE_DERNIERE_REVUE.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.DATE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.REV_DATE_DERNIERE_REVUE.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.REVUE,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.REV_DATE_DERNIERE_REVUE.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.REV_NB_SSFAMILLES_PROPOSE.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.REVUE.toString(),
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.REV_NB_SSFAMILLES_PROPOSE.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.REV_NB_SSFAMILLES_PROPOSE.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.REVUE,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.REV_NB_SSFAMILLES_PROPOSE.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.REV_VALIDEE_PAR.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.REVUE.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.TEXTE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.REV_VALIDEE_PAR.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.REVUE,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.REV_VALIDEE_PAR.toString()
                },
                {
                    "code": Portefeuille.Enum.Indicateur.CODE.ENCOURS_BDF.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.ENCOURS_BDF.toString(),
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.ENCOURS_BDF.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.MONTANT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.ENCOURS_BDF.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.RISQUE,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.ENCOURS_BDF.toString()
                },
                {
                    "code": Portefeuille.Enum.Indicateur.CODE.NOTE_BALE2.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.NOTE_BALE2.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.TEXTE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.NOTE_BALE2.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.RISQUE,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.NOTE_BALE2.toString()
                },
                {
                    "code": Portefeuille.Enum.Indicateur.CODE.PART_ENGAG.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.PART_ENGAG.toString(),
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.PART_ENGAG.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.POURCENT,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.PART_ENGAG.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.RISQUE,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.PART_ENGAG.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.PROCHAINE_REVISION.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.PROCHAINE_REVISION.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.DATE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.PROCHAINE_REVISION.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.RISQUE,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.PROCHAINE_REVISION.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.TOP_CC.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.TOP_CC.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.TEXTE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.TOP_CC.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.RISQUE,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.TOP_CC.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.MARCHE.toString(),
                    "codeRest": "",
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.TEXTE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.MARCHE.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.SEGMENTATION,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.MARCHE.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.SEG_RELATIONNELLE.toString(),
                    "codeRest": "",
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.TEXTE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.SEG_RELATIONNELLE.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.SEGMENTATION,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.SEG_RELATIONNELLE.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.SEG_RELATIONNELLE_GROUPE.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.SEG_RELATIONNELLE_GROUPE.toString(),
                    "codeRel": Portefeuille.Enum.Indicateur.CODEREL.SEG_RELATIONNELLE_GROUPE.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.TEXTE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.SEG_RELATIONNELLE_GROUPE.toString(),
                    "estUniquementVueClients": false,
                    "estVisibleColonne": true,
                    "famille": Portefeuille.Enum.Indicateur.FAMILLE.SEGMENTATION,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.SEG_RELATIONNELLE_GROUPE.toString()
                }, {
                    "code": Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.DATE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT_TAG.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": false,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.PREMIER_EQUIPEMENT_TAG.toString()
                }, {
                    // indicateur équivalent à PREMIER_EQUIPEMENT_TAG de type date
                    // PREMIER_EQUIPEMENT_TAG contient une date ou NC
                    // PREMIER_EQUIPEMENT_TEXTE contient Oui si une date est présente, Non si NC
                    "code": Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TEXTE.toString(),
                    "codeRest": Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TEXTE.toString(),
                    "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.TEXTE,
                    "intitule": Portefeuille.Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT_TEXTE.toString(),
                    "estUniquementVueClients": true,
                    "estVisibleColonne": false,
                    "codePreference": Portefeuille.Enum.Indicateur.CODEPREF.PREMIER_EQUIPEMENT_TEXTE.toString()
                }
            ];
        })(Indicateur = Constantes.Indicateur || (Constantes.Indicateur = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var CodeProcessusLisa;
        (function (CodeProcessusLisa) {
            CodeProcessusLisa.CODE_LISA_SORTIE = 1;
            CodeProcessusLisa.CODE_LISA_ACCES_CLIENTS = 2;
            CodeProcessusLisa.CODE_LISA_SAISIE_REVUE = 11;
            CodeProcessusLisa.CODE_LISA_BILAN_REVUE = 12;
            CodeProcessusLisa.CODE_LISA_SYNTHESE_PM = 10;
            CodeProcessusLisa.CODE_LISA_BILAN_REVUES_PORTEFEUILLE = 13;
            CodeProcessusLisa.CODE_LISA_BILAN_APPETENCES_PORTEFEUILLE = 15;
            CodeProcessusLisa.CODE_LISA_GESTION_AFFAIRES = 16;
            CodeProcessusLisa.CODE_LISA_PROPOSITONS = 17;
        })(CodeProcessusLisa = Constantes.CodeProcessusLisa || (Constantes.CodeProcessusLisa = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var Messages;
        (function (Messages) {
            Messages.MESSAGE_CHOIX_PORTEFEUILLE = "Merci de choisir le ou les portefeuilles à interroger";
            Messages.MESSAGE_AUCUN_PORTEFEUILLE = "Aucun portefeuille en gestion";
            Messages.MESSAGE_ERREUR_TECHNIQUE = "Une erreur technique empêche le bon fonctionnement de l'application";
            Messages.MESSAGE_NO_DATA_STATS = "Aucune donnée";
            Messages.MESSAGE_CHOIX_PORTEFEUILLE_EXPERT = "Vous avez choisi le portefeuille d'expertise suivant :";
        })(Messages = Constantes.Messages || (Constantes.Messages = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var ModalePaniers;
        (function (ModalePaniers) {
            ModalePaniers.ID_HTML_MODALE_PANIERS_BODY = "modale-panier-body";
            ModalePaniers.CLASS_HTML_BOUTON_TUILE_STANDARD = "mw-tuile-bloc";
            ModalePaniers.ATTRIBUT_HTML_DISABLED = "disabled";
            ModalePaniers.ATTRIBUT_HTML_STYLE = "style";
            ModalePaniers.STRING_VALUE_TRUE = "true";
            ModalePaniers.STRING_VALUE_CURSOR_POINTER_IMPORTANT = "cursor:move !important;";
            ModalePaniers.NOMBRE_INDICATEUR_MAX = 6;
            ModalePaniers.TUILE_CATALOGUE_TAILLE = "md";
            ModalePaniers.TUILE_CATALOGUE_PICTO_MARQUAGE = "itce-star";
            ModalePaniers.TUILE_TYPE_MARQUAGE_TEXTE = "texte";
            ModalePaniers.TUILE_CATALOGUE_TYPE_MARQUAGE_PICTO = "picto";
            ModalePaniers.TUILE_CATALOGUE_TYPE_MARQUAGE_AUCUN = "none";
            ModalePaniers.TUILE_NOM_MARQUAGE_VIDE = "";
            ModalePaniers.TUILE_NOM_MARQUAGE_CLIENT = "Client";
            ModalePaniers.TUILE_NOM_MARQUAGE_CLIENT_PROSPECT = "Client/Prospect";
            ModalePaniers.TUILE_COULEUR_JAUNE = "couleur-jaune";
            ModalePaniers.TUILE_COULEUR_ROUGE = "couleur-rouge"; // couleur du liseret vertical dans une tuile --> css --> rouge
            ModalePaniers.TUILE_COULEUR_SOMBRE = "couleur-sombre"; // utilisé pour couleur blanche, afin d'avoir un alignement horizontal
            ModalePaniers.TUILE_PANIER_TAILLE = "md";
        })(ModalePaniers = Constantes.ModalePaniers || (Constantes.ModalePaniers = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var Popup;
        (function (Popup) {
            Popup.BOUTON_FERMER = "Fermer";
            Popup.LIBELLE_ERREUR_CHARGEMENT = "Erreur de chargement du service";
            Popup.LIBELLE_ERREUR_DEFAULT = "Erreur inconnue";
        })(Popup = Constantes.Popup || (Constantes.Popup = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var Preferences;
        (function (Preferences) {
            Preferences.CODE_PANIER = "GERR_PORTF_CLNT_PM-PANIER";
            Preferences.CODE_EDS = "GERR_PORTF_CLNT_PM-EDS";
            Preferences.CODE_PORTEFEUILLE = "GERR_PORTF_CLNT_PM-PORTEFEUILLE";
        })(Preferences = Constantes.Preferences || (Constantes.Preferences = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var Rest;
        (function (Rest) {
            Rest.AGENT_V2_CODE_ACTION_1 = "1";
            Rest.AGENT_V2_TYPE_RECHERCHE_NOM = 1;
            Rest.AGENT_V2_TYPE_RECHERCHE_GROUPE_FONCTION = 4;
            Rest.AGENT_V2_TYPE_RECHERCHE_MATRICULE = 5;
            Rest.AGENT_V2_TYPE_RECHERCHE_AGENCE_RATTACHEMENT = 21;
            Rest.AGENT_V2_RECHERCHE_GROUPE_FONCTION_BDR = "009";
            Rest.CODE_PERSONNALITE_JURIDIQUE_EI = "1";
            Rest.CODE_PERSONNALITE_JURIDIQUE_PM = "2";
            Rest.CODE_TYPE_PERSONNE_CLIENT = "0";
            Rest.CODE_TYPE_PERSONNE_TIERS = "1";
            Rest.CODE_TYPE_PERSONNE_PROPECT_RESTREINT = "2";
            Rest.CODE_TYPE_PERSONNE_PROPECT_ENRICHI = "3";
            Rest.CODE_O_TRUE = "O";
            Rest.CODE_STRING_ACTIF = "O";
            Rest.CODE_ENTREE_EN_RELATION = "EER";
            Rest.CODE_RISQUE = "RSK";
            Rest.CODE_PRO_NON_CAPTE = "NCP";
            Rest.CODE_PRO_PARTIELLEMENT_CAPTE = "PCP";
            Rest.CODE_PRO_LARGEMENT_CAPTE = "LCP";
            Rest.CODE_AUTRES = "AUT";
            Rest.ENTREE_EN_RELATION = "_ER";
            Rest.PRO_RISQUE = "_RK";
            Rest.NON_CALCULE_NON_CONCERNE = "NON";
        })(Rest = Constantes.Rest || (Constantes.Rest = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var Tableau;
        (function (Tableau) {
            Tableau.TAB_LISTE_CLIENTS_CAPTION = "Liste clients";
            Tableau.TAB_LISTE_CLIENTS_NO_ELEMENT = "Aucun client";
            Tableau.TAB_LISTE_CLIENTS_COLONNE_NOM = "Nom";
            Tableau.TAB_LISTE_CLIENTS_COLONNE_DETAIL = "Détail";
            Tableau.TAB_NO_ELEMENT_CLIENT = "Aucun client";
            Tableau.TAB_NO_ELEMENT_RELATION = "Aucune relation";
            Tableau.TAB_LISTE_CLIENTS_COLONNE_ID = "N° de personne";
            Tableau.TAB_LISTE_CLIENTS_COLONNE_RAISON_SOCIALE = "Raison sociale";
            Tableau.TAB_LISTE_CLIENTS_COLONNE_MARCHE = "Marché";
            Tableau.TAB_LISTE_CLIENTS_COLONNE_OBJECTIF_DE_FLUX = "Objectif de flux";
            Tableau.VALEUR_POSSIBLE_POTENTIEL_PROSPECT = ["1 étoile", "2 étoiles", "3 étoiles"];
            Tableau.VALEUR_POSSIBLE_TOP_CC = ["Vert", "Orange", "Rouge", "Blanc"];
            Tableau.ID_TABLE_CLIENT = "tab-client";
            Tableau.ID_TABLE_RELATION = "tab-relation";
        })(Tableau = Constantes.Tableau || (Constantes.Tableau = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var Token;
        (function (Token) {
            Token.TOKEN_ENVIRONNEMENT = "DUA";
            Token.TOKEN_ENVIRONNEMENT_VALEUR_DUA = "DUA";
            Token.TOKEN_ENVIRONNEMENT_VALEUR_VFO = "VFO";
        })(Token = Constantes.Token || (Constantes.Token = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var Url;
        (function (Url) {
            Url.PORTEFEUILLE = "/";
            Url.CLIENTS = "/clients";
            Url.DETAIL_CLIENT = "/client-detail";
            Url.BILAN_REVUE = "/revue-visu";
            Url.SAISIE_REVUE = "/revue-client";
            Url.BILAN_REVUES_PORTEFEUILLE = "/bilan-revues-portefeuille";
            Url.BILAN_APPETENCES_PORTEFEUILLE = "/bilan-appetences-portefeuille";
            Url.SELECTION_INDICATEURS = "/selection-indicateurs";
        })(Url = Constantes.Url || (Constantes.Url = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var urlsRest;
        (function (urlsRest) {
            urlsRest.URL_REST = "http://myway-ressources-dua.sigcesie.caisse-epargne.fr:6083";
            urlsRest.URL_REST_TIERSCORPORATEV1_CORPORATE_INFORMATION = urlsRest.URL_REST + "/tierscorporate/v1/corporateInformation";
            urlsRest.URL_REST_TIERSCORPORATESERVICV1_RECHERCHE_COMMERCIALE = urlsRest.URL_REST + "/tierscorporateservic/v1/rechercheCommerciale";
            urlsRest.URL_REST_PORTEFEUILLEV1_RECHERCHE = urlsRest.URL_REST + "/portefeuille/v1/recherche";
            urlsRest.URL_REST_PORTEFEUILLEV1_RECHERCHE_LISTE = urlsRest.URL_REST + "/portefeuille/v1/recherche/getListe";
            urlsRest.URL_REST_PORTEFEUILLEV1_RELATION_COMMERCIALE = urlsRest.URL_REST + "/portefeuille/v1/relationCommerciale";
            urlsRest.URL_REST_PORTEFEUILLEV1_SUIVI_COMPLEMENTAIRE = urlsRest.URL_REST + "/portefeuille/v1/suiviComplementaire";
            urlsRest.URL_REST_PORTEFEUILLEV1_CLIENT = urlsRest.URL_REST + "/portefeuille/v1/client";
            urlsRest.URL_REST_AGENTV2_RECHERCHE = urlsRest.URL_REST + "/agent/v2/recherche";
            urlsRest.URL_REST_AGENTV2_GESTION_AFFECTATION = urlsRest.URL_REST + "/agent/v2/gestionAffectation";
            urlsRest.URL_REST_STRUCTUREV2_EDS_NIVEAU_INFERIEURE = urlsRest.URL_REST + "/structure/v2/edsNiveauInferieur";
            urlsRest.URL_REST_PREFERENCE_UTILISATEUR = urlsRest.URL_REST + "/preferenceUtilisateur/v1/";
            urlsRest.URL_REST_PORTEFEUILLECORPORATEV1_STATRENTABILITE = urlsRest.URL_REST + "/portefeuillcorporate/v1/statRentabilite";
            urlsRest.URL_REST_PORTEFEUILLECORPORATEV1_STATFLUXMOUVEMENTFINANCIER = urlsRest.URL_REST + "/portefeuillcorporate/v1/statFluxMvtFinancier";
            urlsRest.URL_REST_PORTEFEUILLECORPORATEV1_STATPTF = urlsRest.URL_REST + "/portefeuillcorporate/v1/statPortefeuille";
            urlsRest.URL_REST_PROPOSITIONCORPORATEV1_STATREVUE = urlsRest.URL_REST + "/propositioncorporate/v1/statRevue";
            urlsRest.URL_REST_PROPOSITIONCORPORATEV1_RECHERCHE_REVUE = urlsRest.URL_REST + "/propositioncorporate/v1/rechercheRevue";
            urlsRest.URL_REST_PROPOSITIONCORPORATEV1_STAT_PORTEFEUILLE_EDS = urlsRest.URL_REST + "/propositioncorporate/v1/statPortefeuilleEds";
        })(urlsRest = Constantes.urlsRest || (Constantes.urlsRest = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Filtres utiles à l'application
 * @module Portefeuille.Filtres
 * @author S0078068 (Yannis VESSEREAU)
 */
var Portefeuille;
(function (Portefeuille) {
    var Filtres;
    (function (Filtres) {
        "use strict";
        /**
         * Filtre la liste des indicateurs qui sont utilisés
         * @param {ng.IFilterService} $filter
         * @return {Function} La fonction du filtre
         */
        function indicateurUtilisantPasFiltre($filter) {
            return function (listeIndicateurs, estVueClient) {
                if (estVueClient) {
                    return _.where(listeIndicateurs, { "utilise": false });
                }
                else {
                    return _.where(listeIndicateurs, { "utiliseRelationEco": false });
                }
            };
        }
        Filtres.indicateurUtilisantPasFiltre = indicateurUtilisantPasFiltre;
        /**
         * Filtre la liste des nombre qui sont utilisés
         * @param {ng.IFilterService} $filter
         * @return {Function} La fonction du filtre
         */
        function nombreFiltre($filter) {
            return function (valeur) {
                //Si le montant n'existe pas, ou s'il est fixé à une des valeurs extrèmes, alors il convient d'afficher NC
                return (valeur !== undefined
                    && valeur !== null
                    && valeur !== ""
                    && valeur !== Number.POSITIVE_INFINITY
                    && valeur !== Number.NEGATIVE_INFINITY) ?
                    Portefeuille.Services.Utils.DataUtils.formatNombre(valeur) :
                    Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
            };
        }
        Filtres.nombreFiltre = nombreFiltre;
        /**
         * Formate le montant à afficher en foncntion de la valeur
         * @param $filter
         */
        function montantFiltre($filter) {
            return function (valeur, isEuros) {
                var devise = isEuros ? "€" : "k€";
                //Si le montant n'existe pas, ou s'il est fixé à une des valeurs extrèmes, alors il convient d'afficher NC
                return (valeur !== undefined
                    && valeur !== null
                    && valeur !== ""
                    && valeur !== Number.POSITIVE_INFINITY
                    && valeur !== Number.NEGATIVE_INFINITY) ?
                    valeur.toString().replace(/\B(?=(\d{3})+(?!\d))/g, String.fromCharCode(160)) + "\u00A0" + devise : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
            };
        }
        Filtres.montantFiltre = montantFiltre;
        function pourcentFiltre($filter) {
            return function (valeur) {
                //Si le montant n'existe pas, ou s'il est fixé à une des valeurs extrèmes, alors il convient d'afficher NC
                return (valeur !== undefined
                    && valeur !== null
                    && valeur !== ""
                    && valeur !== Number.POSITIVE_INFINITY
                    && valeur !== Number.NEGATIVE_INFINITY) ?
                    Portefeuille.Services.Utils.DataUtils.formatPourcent(valeur) + " %" : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
            };
        }
        Filtres.pourcentFiltre = pourcentFiltre;
        /**
         * Filtre la liste des indicateurs qui sont de type Date
         * @param {ng.IFilterService} $filter
         * @return {Function} La fonction du filtre
         */
        function sansIndicateurDateFiltre($filter) {
            return function (listeIndicateurs) {
                var listeIndicateurFitre = _.filter(listeIndicateurs, function (indicateur) {
                    return indicateur.indicateur.typeIndicateur !== Portefeuille.Enum.Indicateur.TYPE.DATE;
                });
                return listeIndicateurFitre;
            };
        }
        Filtres.sansIndicateurDateFiltre = sansIndicateurDateFiltre;
        /**
         * Filtre les valeurs null est indefinis
         * @param {ng.IFilterService} $filter
         * @return {Function} La fonction du filtre
         */
        function valeurNonConnuFiltre($filter) {
            return function (valeur) {
                //chaineTravail est utilisée afin de vérifer si valeur correspond à la chaine Max utilisée lors des comparaisons sur les tris
                var chaineTravail = valeur;
                return (valeur === undefined ||
                    valeur === null ||
                    valeur === "" ||
                    chaineTravail.search(Portefeuille.Constantes.Application.FIN_CHAINE_MAX) !== -1) ?
                    Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU :
                    valeur;
            };
        }
        Filtres.valeurNonConnuFiltre = valeurNonConnuFiltre;
        /**
         * Affichage de date NC (Selon la valeur transmise, on affiche ou pas NC)
         */
        function dateNC() {
            var dateMin = moment(Portefeuille.Constantes.Application.DATE_MIN).toDate();
            var dateMax = moment(Portefeuille.Constantes.Application.DATE_MAX).toDate();
            return function (valeur) {
                if (valeur) {
                    if (moment(valeur).isSame(dateMax)) {
                        return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                    }
                    if (moment(valeur).isSame(dateMin)) {
                        return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                    }
                    return moment(valeur).format("DD/MM/YYYY");
                }
                else {
                    return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                }
            };
        }
        Filtres.dateNC = dateNC;
        /**
         * Affichage de nombre NC (Selon la valeur transmise, on affiche ou pas NC)
         */
        function nombreNC() {
            var nombreMin = Number.NEGATIVE_INFINITY;
            var nombreMax = Number.POSITIVE_INFINITY;
            return function (valeur) {
                if (valeur !== null
                    && valeur !== undefined) {
                    return valeur === nombreMin || valeur === nombreMax ? Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU : valeur.toString();
                }
                else {
                    return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                }
            };
        }
        Filtres.nombreNC = nombreNC;
        // Déclaration des filtres
        Portefeuille.app.filter("indicateurUtilisantPasFiltre", ["$filter", indicateurUtilisantPasFiltre]);
        Portefeuille.app.filter("sansIndicateurDateFiltre", ["$filter", sansIndicateurDateFiltre]);
        Portefeuille.app.filter("valeurNonConnuFiltre", ["$filter", valeurNonConnuFiltre]);
        Portefeuille.app.filter("montantFiltre", ["$filter", montantFiltre]);
        Portefeuille.app.filter("pourcentFiltre", ["$filter", pourcentFiltre]);
        Portefeuille.app.filter("nombreFiltre", ["$filter", nombreFiltre]);
        Portefeuille.app.filter("nombreNC", ["$filter", nombreNC]);
        Portefeuille.app.filter("dateNC", ["$filter", dateNC]);
    })(Filtres = Portefeuille.Filtres || (Portefeuille.Filtres = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Mocks;
    (function (Mocks) {
        "use strict";
        function getClient(index) {
            if (!index) {
                index = "";
            }
            return {
                "id": "123456789" + index,
                "nom": "GYEC" + index,
                "siren": "02547841002596" + index,
                "relationEconomique": "Relation Economique " + index,
                "listeIndicateurs": [
                    {
                        "intitule": "PNB N-1 civile",
                        "valeur": "32 254 k€",
                        "couleur": Portefeuille.Enum.PfTuileIndicateur.COULEUR.PNB,
                        "icone": "",
                        "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                        "code": "",
                        "famille": Portefeuille.Enum.Indicateur.FAMILLE.PNB
                    },
                    {
                        "intitule": "PNB N glissante",
                        "valeur": "35 326 k€",
                        "couleur": Portefeuille.Enum.PfTuileIndicateur.COULEUR.PNB,
                        "icone": "globe",
                        "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                        "code": "",
                        "famille": Portefeuille.Enum.Indicateur.FAMILLE.PNB
                    },
                    {
                        "intitule": "Dernier RDV",
                        "valeur": "25/06/2018",
                        "couleur": Portefeuille.Enum.PfTuileIndicateur.COULEUR.AGENDA,
                        "icone": "calendar",
                        "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.DATE,
                        "code": "",
                        "famille": Portefeuille.Enum.Indicateur.FAMILLE.RENDEZ_VOUS
                    },
                    {
                        "intitule": "Volume engagement utilisé N-1 civile",
                        "valeur": "5 356 k€",
                        "couleur": Portefeuille.Enum.PfTuileIndicateur.COULEUR.EQUIPEMENTS,
                        "icone": "product-category-circle",
                        "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                        "code": "",
                        "famille": Portefeuille.Enum.Indicateur.FAMILLE.CA
                    }
                ]
            };
        }
        Mocks.getClient = getClient;
        function getRelationEco(index) {
            if (!index) {
                index = "";
            }
            var listeClients = [];
            for (var i = 0; i < 3; i++) {
                listeClients.push(Mocks.getClient(i.toString()));
            }
            return {
                "nom": "GEDECO " + index,
                "id": "41100125" + index,
                "siren": "123456789123456" + index,
                "relationEconomique": "Nom Relation economique " + index,
                "listeClients": listeClients,
                "listeIndicateurs": [
                    {
                        "intitule": "Chiffre d'affaire",
                        "valeur": "100 000 254 k€",
                        "couleur": Portefeuille.Enum.PfTuileIndicateur.COULEUR.CA,
                        "icone": "money",
                        "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                        "code": "",
                        "famille": Portefeuille.Enum.Indicateur.FAMILLE.CA
                    },
                    {
                        "intitule": "PNB N glissante",
                        "valeur": "35 326 k€",
                        "couleur": Portefeuille.Enum.PfTuileIndicateur.COULEUR.PNB,
                        "icone": "globe",
                        "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                        "code": "",
                        "famille": Portefeuille.Enum.Indicateur.FAMILLE.PNB
                    },
                    {
                        "intitule": "Dernier RDV",
                        "valeur": "25/06/2018",
                        "couleur": Portefeuille.Enum.PfTuileIndicateur.COULEUR.AGENDA,
                        "icone": "calendar",
                        "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.DATE,
                        "code": "",
                        "famille": Portefeuille.Enum.Indicateur.FAMILLE.RENDEZ_VOUS
                    },
                    {
                        "intitule": "Prochain RDV",
                        "valeur": "25/10/2018",
                        "couleur": Portefeuille.Enum.PfTuileIndicateur.COULEUR.AGENDA,
                        "icone": "calendar",
                        "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.DATE,
                        "code": "",
                        "famille": Portefeuille.Enum.Indicateur.FAMILLE.RENDEZ_VOUS
                    },
                    {
                        "intitule": "Volume engagement utilisé N-1 civile",
                        "valeur": "5 356 k€",
                        "couleur": Portefeuille.Enum.PfTuileIndicateur.COULEUR.EQUIPEMENTS,
                        "icone": "product-category-circle",
                        "typeIndicateur": Portefeuille.Enum.Indicateur.TYPE.NOMBRE,
                        "code": "",
                        "famille": Portefeuille.Enum.Indicateur.FAMILLE.CA
                    }
                ]
            };
        }
        Mocks.getRelationEco = getRelationEco;
    })(Mocks = Portefeuille.Mocks || (Portefeuille.Mocks = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur de la modale d'avertissement du choix de portefeuille
 * @module Portefeuille.Controleurs
 * @author S0078068 (Yannis VESSEREAU)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        /**
         * Classe du controleur
         */
        var ModaleAvertissementChoixPortefeuilleControleur = (function () {
            /**
             * Constructeur
             */
            function ModaleAvertissementChoixPortefeuilleControleur($modalInstance, listeClientsService) {
                this.$modalInstance = $modalInstance;
                this.listeClientsService = listeClientsService;
                // Variables d'entrée
                // Variables utiles
                this.nbMaxPortefeuilles = Portefeuille.Constantes.Service.RELATION_COMMERCIALE_NB_MAX_RES;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            ModaleAvertissementChoixPortefeuilleControleur.prototype.initialiser = function () {
                ModaleAvertissementChoixPortefeuilleControleur.logger.info(">>> Appel de la méthode : ModaleAvertissementChoixPortefeuilleControleur.initialiser <<<");
                this.listePortefeuilles = this.listeClientsService.getListePortefeuillesAvecLimite();
                this.estEnMultiPortefeuille = this.listePortefeuilles.length > 1;
                this.determinerAffichageBtnClientsEtProspects();
                this.determinerMessagesAction();
            };
            /**
             * Permet de déterminer l'affichage ou non des boutons Clients et Prospects
             * @returns {void}
             */
            ModaleAvertissementChoixPortefeuilleControleur.prototype.determinerAffichageBtnClientsEtProspects = function () {
                var nbTotalClients = 0;
                var nbTotalProspects = 0;
                _.forEach(this.listePortefeuilles, function (portefeuille) {
                    nbTotalClients += portefeuille.nombreTotalClients;
                    nbTotalProspects += portefeuille.nombreTotalProspectsTiers;
                });
                this.estAfficherBtnClients = nbTotalClients <= Portefeuille.Constantes.Service.RELATION_COMMERCIALE_NB_MAX_RES && nbTotalClients > 0;
                this.estAfficherBtnProspects = nbTotalProspects <= Portefeuille.Constantes.Service.RELATION_COMMERCIALE_NB_MAX_RES && nbTotalProspects > 0;
            };
            ModaleAvertissementChoixPortefeuilleControleur.prototype.determinerMessagesAction = function () {
                this.listeMessageAction = [];
                if (this.estAfficherBtnProspects) {
                    this.listeMessageAction.push("- \"Afficher les prospects\" : la liste des \"Relations \u00E9conomiques\" de votre s\u00E9l\u00E9ction ne sera pas accessible.");
                }
                if (this.estAfficherBtnClients) {
                    this.listeMessageAction.push("- \"Afficher les clients\" : la liste des \"Relations \u00E9conomiques\" de votre s\u00E9l\u00E9ction ne sera pas accessible.");
                }
                if (this.estEnMultiPortefeuille) {
                    this.listeMessageAction.push("- \"Nouvelle s\u00E9lection\" : modifier votre s\u00E9lection de portefeuilles.");
                }
                else {
                    this.listeMessageAction.push("- \"Afficher\" : les indicateurs seront pr\u00E9d\u00E9finis et non modifiables.");
                }
            };
            /**
             * Action du bouton "Fermer"
             * @returns {void}
             */
            ModaleAvertissementChoixPortefeuilleControleur.prototype.fermer = function () {
                this.$modalInstance.dismiss();
            };
            /**
             * Action du bouton "Afficher les clients"
             * @returns {void}
             */
            ModaleAvertissementChoixPortefeuilleControleur.prototype.afficherClients = function () {
                this.$modalInstance.close(this.setRetourPopup(Portefeuille.Enum.PageClients.TYPE_FORCAGE.CLIENTS));
            };
            /**
             * Action du bouton "Afficher les prospects"
             * @returns {void}
             */
            ModaleAvertissementChoixPortefeuilleControleur.prototype.afficherProspects = function () {
                this.$modalInstance.close(this.setRetourPopup(Portefeuille.Enum.PageClients.TYPE_FORCAGE.PROSPECTS));
            };
            /**
             * Action du bouton "Afficher les prospects"
             * @returns {void}
             */
            ModaleAvertissementChoixPortefeuilleControleur.prototype.afficherTout = function () {
                this.$modalInstance.close(this.setRetourPopup(Portefeuille.Enum.PageClients.TYPE_FORCAGE.TOUT));
            };
            /**
             * Action du bouton "Nouvelle sélection"
             * @returns {void}
             */
            ModaleAvertissementChoixPortefeuilleControleur.prototype.nouvelleSelection = function () {
                this.$modalInstance.close(this.setRetourPopup(Portefeuille.Enum.PageClients.TYPE_FORCAGE.SANS));
            };
            ModaleAvertissementChoixPortefeuilleControleur.prototype.setRetourPopup = function (typeForcage) {
                var resultat = {};
                var nombreBoutonsAffiches;
                resultat.typeForcage = typeForcage;
                switch (typeForcage) {
                    case Portefeuille.Enum.PageClients.TYPE_FORCAGE.CLIENTS:
                        nombreBoutonsAffiches = 2 + ((this.estAfficherBtnProspects === true) ? 1 : 0); //A minima 2 boutons affichés
                        break;
                    case Portefeuille.Enum.PageClients.TYPE_FORCAGE.PROSPECTS:
                        nombreBoutonsAffiches = 2 + ((this.estAfficherBtnClients === true) ? 1 : 0); //A minima 2 boutons affichés
                        break;
                    case Portefeuille.Enum.PageClients.TYPE_FORCAGE.TOUT:
                        nombreBoutonsAffiches = 1 + ((this.estAfficherBtnClients === true) ? 1 : 0) + ((this.estAfficherBtnProspects === true) ? 1 : 0); //A minima 1 bouton affiché
                        break;
                    case Portefeuille.Enum.PageClients.TYPE_FORCAGE.SANS:
                        nombreBoutonsAffiches = 1 + ((this.estAfficherBtnClients === true) ? 1 : 0) + ((this.estAfficherBtnProspects === true) ? 1 : 0); //A minima 1 bouton affiché
                        break;
                    default:
                        nombreBoutonsAffiches = 1;
                        break;
                }
                resultat.nombreBoutonsAffiches = nombreBoutonsAffiches;
                return resultat;
            };
            ModaleAvertissementChoixPortefeuilleControleur.CLASS_NAME = "ModaleAvertissementChoixPortefeuilleControleur";
            ModaleAvertissementChoixPortefeuilleControleur.logger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleAvertissementChoixPortefeuilleControleur.CLASS_NAME);
            //Injection des dependances
            ModaleAvertissementChoixPortefeuilleControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$modalInstance,
                Portefeuille.Constantes.Inject.Services.listeClientsService
            ];
            return ModaleAvertissementChoixPortefeuilleControleur;
        }());
        Controleurs.ModaleAvertissementChoixPortefeuilleControleur = ModaleAvertissementChoixPortefeuilleControleur;
        // Déclaration du controlleur
        Portefeuille.app.controller(ModaleAvertissementChoixPortefeuilleControleur.CLASS_NAME, ModaleAvertissementChoixPortefeuilleControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur de la modale de choix EDS
 * @module Portefeuille.Controleurs
 * @author S0078068 (Yannis VESSEREAU)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        /**
         * Classe du controleur
         */
        var ModaleChoixEdsControleur = (function () {
            /**
             * Constructeur
             */
            function ModaleChoixEdsControleur(
                //private $scope: ng.IScope,
                $q, data, $modalInstance, choixEdsService, popupService, choixUtilisateurService, contexteService) {
                this.$q = $q;
                this.data = data;
                this.$modalInstance = $modalInstance;
                this.choixEdsService = choixEdsService;
                this.popupService = popupService;
                this.choixUtilisateurService = choixUtilisateurService;
                this.contexteService = contexteService;
                //    si on a une valeur on va permettre de remonter a ce niveau
                this.ancienNiveauEds = 0;
                this.agenceReadOnly = false;
                // Récupération des données transmises
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            ModaleChoixEdsControleur.prototype.initialiser = function () {
                var _this = this;
                ModaleChoixEdsControleur.logger.info(">>> Appel de la méthode : ModaleChoixEdsControleur.initialiser <<<");
                this.titre = this.data.headerText;
                this.edsAncien = this.choixUtilisateurService.edsSelectionne;
                if (this.estVueEDS) {
                    this.choixUtilisateurService.edsSelectionne = null;
                    // par défaut on se positionne sur l'agent qui est connecté : on le met dans le modèle pour qu'il soit affiché dans la dropdown,
                    // puis on va charger ses N+1/N+2
                    if (!this.sauveAgentRechercher) {
                        this.contexteService.getAuthentification().then(function (resultat) {
                            // converti dans le modèle cible => A TRANSFORMER PAR UNE METHODE DANS UTILS !
                            _this.agentChoisi = {};
                            _this.agentChoisi.id = resultat.agentConnecte.referenceExterneAgent; // important, c'est ce qu'on utilisera par la suite ! 
                            _this.agentChoisi.designation = resultat.agentConnecte.designationLongueAgent;
                            _this.agentChoisi.idEds = resultat.agentConnecte.numeroInterneEds;
                            _this.agentChoisi.idEdsHierarchique = resultat.agentConnecte.numeroEdsSuperieur;
                            _this.agentChoisi.libelle = resultat.agentConnecte.libelleEds;
                            _this.agentChoisi.refEDS = resultat.agentConnecte.numeroInterneEds;
                            _this.agentChoisi.typeEdsHierarchique = resultat.agentConnecte.typeEdsRattachement;
                            _this.agentChoisi.typeFonction = resultat.agentConnecte.typeFonction;
                            _this.agentChoisi.dateDebutValidite = new Date(resultat.agentConnecte.dateDebutValidite); // format: 2004-04-01
                            _this.agentChoisi.dateFinValidite = new Date(resultat.agentConnecte.dateFinValidite);
                            // récupère les N+1/+2 de cet agent
                            _this.changeAgent(_this.agentChoisi);
                        });
                    }
                    else {
                        this.changeAgent(this.sauveAgentRechercher);
                    }
                }
            };
            /**
             * Recherche les agents par le nom qui est tapé dans la liste
             * @param agent
             */
            ModaleChoixEdsControleur.prototype.changeAgent = function (agent) {
                var _this = this;
                // 1ère chose, on récupère l'agent connecté et on le met dans la 1ère liste. Au change on va maj la 2ème liste
                // @note On n'a pas de filtre ici
                this.chargementAgences = true;
                this.choixUtilisateurService.edsSelectionne = null;
                this.agenceChoisi = null;
                this.sauveAgentRechercher = agent;
                // attention, c'est l'identifiantAgent qu'il faut donner a cette ressource !
                return this.choixUtilisateurService.
                    rechercherListeAgence(+agent.id).
                    then(function (listeAgences) {
                    _this.listeAgences = listeAgences;
                    if (_this.listeAgences &&
                        _this.listeAgences.length === 1) {
                        _this.agenceChoisi = listeAgences[0];
                        // Ouvre le premier niveau  si une seul EDS de ratachement
                        _this.changementAgence(_this.agenceChoisi, null);
                        _this.agenceReadOnly = true;
                    }
                    else {
                        _this.agenceReadOnly = false;
                    }
                    _this.chargementAgences = false;
                }).catch(/* istanbul ignore next */ function (erreur) {
                    ModaleChoixEdsControleur.logger.error("Erreur de recherche de la liste des agences", erreur.codeLibelle, erreur.libelle);
                    _this.popupService.showErreur(erreur);
                    // ne bloque pas la liste
                    _this.chargementAgences = false;
                });
            };
            /**
             * Méthode appelé lors du changement d'agence
             * @returns {void}
             */
            ModaleChoixEdsControleur.prototype.changementAgence = function (EDS, ancienEDS) {
                var _this = this;
                //this.listeAgencesInferieures = [];
                this.chargementAgents = true;
                this.choixUtilisateurService.edsSelectionne = null;
                return this.choixUtilisateurService.rechercherEdsInferieurs(EDS)
                    .then(function (caracteristiquesEDS) {
                    // Si c'est le premier noeud EDS (identifier par ancienEds à null) on charge les EDS et on l'affiche
                    if (!ancienEDS) {
                        _this.changementAgence(_this.agenceChoisi, EDS);
                        _this.agenceChoisi.affiche = true;
                    }
                    _this.chargementAgents = false;
                    return _this.$q.when();
                }).catch(/* istanbul ignore next */ function (erreur) {
                    ModaleChoixEdsControleur.logger.error("Erreur de recherche de la liste des agents", erreur.codeLibelle, erreur.libelle);
                    return _this.popupService.showErreur(erreur);
                });
            };
            /**
             * Action du bouton "Valider"
             * @returns {void}
             */
            ModaleChoixEdsControleur.prototype.valider = function () {
                var _this = this;
                this.choixEdsService.getCaracteristiquesAgent(this.agentChoisi).
                    then(function (edsChoisi) {
                    if (!_this.estVueEDS) {
                        _this.choixUtilisateurService.edsSelectionne = null;
                    }
                    _this.$modalInstance.close(edsChoisi);
                }).catch(function (erreur) {
                    ModaleChoixEdsControleur.logger.error("Erreur de recherche de l'EDS", erreur.codeLibelle, erreur.libelle);
                    _this.popupService.showErreur(erreur);
                });
            };
            Object.defineProperty(ModaleChoixEdsControleur.prototype, "estVueEDS", {
                /**
                 *
                 */
                get: function () {
                    return this.data.model === Portefeuille.Enum.Vue.TYPE_VUE.VUE_EDS.toString();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModaleChoixEdsControleur.prototype, "estChoisiEDS", {
                /**
                 *
                 */
                get: function () {
                    return (this.agentChoisi && this.agentChoisi.id) ? true : false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModaleChoixEdsControleur.prototype, "estChoisiEDSvalide", {
                /**
                 *
                 */
                get: function () {
                    if ((!this.estVueEDS &&
                        this.estChoisiEDS) ||
                        (this.estVueEDS &&
                            this.estChoisiEDS &&
                            this.agenceChoisi &&
                            this.edsSelectionne)) {
                        return true;
                    }
                    else {
                        return false;
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModaleChoixEdsControleur.prototype, "edsRattachement", {
                /**
                 *
                 */
                get: function () {
                    return (this.estVueEDS && this.agenceChoisi) ? this.agenceChoisi : {};
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModaleChoixEdsControleur.prototype, "afficheListeEdsRattachement", {
                /**
                 *
                 */
                get: function () {
                    return (!this.agenceReadOnly && this.agentChoisi && this.agentChoisi.id) ? true : false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModaleChoixEdsControleur.prototype, "afficheLibelleEdsRattachement", {
                /**
                 *
                 */
                get: function () {
                    return (this.agenceReadOnly && this.agentChoisi && this.agentChoisi.id) ? true : false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModaleChoixEdsControleur.prototype, "nomEdsRattachement", {
                /**
                 *
                 */
                get: function () {
                    return (this.agenceChoisi && this.agenceChoisi.nomEds) ? this.agenceChoisi.nomEds : "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModaleChoixEdsControleur.prototype, "afficheEdsSelectionne", {
                /**
                 *
                 */
                get: function () {
                    return this.estVueEDS;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModaleChoixEdsControleur.prototype, "nomEdsSelectionne", {
                /**
                 *
                 */
                get: function () {
                    return (this.choixUtilisateurService.edsSelectionne) ? this.choixUtilisateurService.edsSelectionne.nomEds : "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModaleChoixEdsControleur.prototype, "edsSelectionne", {
                /**
                 *
                 */
                get: function () {
                    return this.choixUtilisateurService.edsSelectionne;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModaleChoixEdsControleur.prototype, "afficheBlocEds", {
                /**
                 *
                 */
                get: function () {
                    return this.estVueEDS && this.estChoisiEDS && this.agenceChoisi != null;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Action du bouton "Fermer"
             * @returns {void}
             */
            ModaleChoixEdsControleur.prototype.fermer = function () {
                this.choixUtilisateurService.edsSelectionne = this.edsAncien;
                this.$modalInstance.dismiss();
            };
            ModaleChoixEdsControleur.CLASS_NAME = "ModaleChoixEdsControleur";
            ModaleChoixEdsControleur.logger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleChoixEdsControleur.CLASS_NAME);
            //Injection des dependances
            ModaleChoixEdsControleur.$inject = [
                //Constantes.Inject.Angular.$scope,
                Portefeuille.Constantes.Inject.Angular.$q,
                Portefeuille.Constantes.Inject.MyWay.data,
                Portefeuille.Constantes.Inject.Angular.$modalInstance,
                Portefeuille.Constantes.Inject.Services.choixEdsService,
                Portefeuille.Constantes.Inject.Services.popupService,
                Portefeuille.Constantes.Inject.Services.choixUtilisateurService,
                Portefeuille.Constantes.Inject.Services.contexteService
            ];
            return ModaleChoixEdsControleur;
        }());
        Controleurs.ModaleChoixEdsControleur = ModaleChoixEdsControleur;
        // Déclaration du controlleur
        Portefeuille.app.controller(ModaleChoixEdsControleur.CLASS_NAME, ModaleChoixEdsControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        /**
         * Classe du controleur
         */
        var ModaleClientsActiverControleur = (function () {
            /**
             * Constructeur
             */
            function ModaleClientsActiverControleur($modalInstance, data) {
                this.$modalInstance = $modalInstance;
                this.data = data;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            ModaleClientsActiverControleur.prototype.initialiser = function () {
                ModaleClientsActiverControleur.logger.info(">>> Appel de la méthode : ModaleClientsActiverControleur.initialiser <<<");
                this.clientsAActiver = angular.copy(this.data);
                this.tableauRaisonsSociales = new Portefeuille.Modeles.Tableaux.TableauRaisonsSociales(true);
                this.titreModale = "Clients à activer";
                if (this.clientsAActiver) {
                    this.tableauRaisonsSociales.data = this.clientsAActiver;
                }
            };
            /**
             * Action du bouton "Fermer"
             * @returns {void}
             */
            ModaleClientsActiverControleur.prototype.fermer = function () {
                this.$modalInstance.dismiss();
            };
            ModaleClientsActiverControleur.CLASS_NAME = "ModaleClientsActiverControleur";
            ModaleClientsActiverControleur.logger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleClientsActiverControleur.CLASS_NAME);
            //Injection des dependances
            ModaleClientsActiverControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$modalInstance,
                Portefeuille.Constantes.Inject.Autres.dataModale
            ];
            return ModaleClientsActiverControleur;
        }());
        Controleurs.ModaleClientsActiverControleur = ModaleClientsActiverControleur;
        // Déclaration du controlleur
        Portefeuille.app.controller(ModaleClientsActiverControleur.CLASS_NAME, ModaleClientsActiverControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        /**
         * Classe du controleur
         */
        var ModaleClientsRenegocierControleur = (function () {
            /**
             * Constructeur
             */
            function ModaleClientsRenegocierControleur($modalInstance, data) {
                this.$modalInstance = $modalInstance;
                this.data = data;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            ModaleClientsRenegocierControleur.prototype.initialiser = function () {
                ModaleClientsRenegocierControleur.logger.info(">>> Appel de la méthode : ModaleClientsRenegocierControleur.initialiser <<<");
                this.clientsARenegocier = angular.copy(this.data);
                this.tableauRaisonsSociales = new Portefeuille.Modeles.Tableaux.TableauRaisonsSociales(false);
                this.titreModale = "Tarifications à renégocier";
                if (this.clientsARenegocier) {
                    this.tableauRaisonsSociales.data = this.clientsARenegocier;
                }
            };
            /**
             * Action du bouton "Fermer"
             * @returns {void}
             */
            ModaleClientsRenegocierControleur.prototype.fermer = function () {
                this.$modalInstance.dismiss();
            };
            ModaleClientsRenegocierControleur.CLASS_NAME = "ModaleClientsRenegocierControleur";
            ModaleClientsRenegocierControleur.logger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleClientsRenegocierControleur.CLASS_NAME);
            //Injection des dependances
            ModaleClientsRenegocierControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$modalInstance,
                Portefeuille.Constantes.Inject.Autres.dataModale
            ];
            return ModaleClientsRenegocierControleur;
        }());
        Controleurs.ModaleClientsRenegocierControleur = ModaleClientsRenegocierControleur;
        // Déclaration du controlleur
        Portefeuille.app.controller(ModaleClientsRenegocierControleur.CLASS_NAME, ModaleClientsRenegocierControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        /**
         * Classe du controleur
         */
        var ModaleDetailsFluxCrediteurControleur = (function () {
            /**
             * Constructeur
             */
            function ModaleDetailsFluxCrediteurControleur($modalInstance, data, indicateurFlecheService) {
                this.$modalInstance = $modalInstance;
                this.data = data;
                this.indicateurFlecheService = indicateurFlecheService;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            ModaleDetailsFluxCrediteurControleur.prototype.initialiser = function () {
                ModaleDetailsFluxCrediteurControleur.logger.info(">>> Appel de la méthode : ModaleDetailsFluxCrediteurControleur.initialiser <<<");
                this.titreModale = "Flux commerciaux créditeurs";
                this.creerConfigDiagrammeColonneDetailPtfParSuviPar(this.data);
            };
            /**
             *
             * @param statsDetailPtfParSuviPar
             */
            ModaleDetailsFluxCrediteurControleur.prototype.creerConfigDiagrammeColonneDetailPtfParSuviPar = function (statsDetailPtf) {
                var _this = this;
                var configDiagrammeColonnePnbParAgent;
                var index = 0;
                this.configDiagrammeColonneFluxCrediteur = [];
                //récupère l'ensemble des PNB et identifie le plus gros
                var valeurMax = Math.max.apply(Math, (_a = _.pluck(statsDetailPtf.detailParSuviPar, "fluxCrediteursNMoins1")).concat.apply(_a, _.pluck(statsDetailPtf.detailParSuviPar, "fluxCrediteursAnneeN")));
                statsDetailPtf.detailParSuviPar.forEach(function (parSuiviPar) {
                    configDiagrammeColonnePnbParAgent = {};
                    configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne = [];
                    configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne.push({
                        id: "colonne-flux-cred-" + index,
                        intitule: "",
                        valeur: parSuiviPar.fluxCrediteursNMoins1,
                        couleur: Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2,
                        hauteur: Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.fluxCrediteursNMoins1),
                        estMontant: true
                    });
                    index = index + 1;
                    configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne.push({
                        id: "colonne-flux-cred-" + index,
                        intitule: "",
                        valeur: parSuiviPar.fluxCrediteursAnneeN,
                        couleur: Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1,
                        hauteur: Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.fluxCrediteursAnneeN),
                        estMontant: true
                    });
                    index = index + 1;
                    configDiagrammeColonnePnbParAgent.id = "pnb-detail-agent-" + index;
                    configDiagrammeColonnePnbParAgent.intitule = parSuiviPar.nomSuiviPar;
                    configDiagrammeColonnePnbParAgent.tendence = _this.indicateurFlecheService.getConfigIndicateurFleche(parSuiviPar.tauxEvolutionFluxCrediteurs);
                    _this.configDiagrammeColonneFluxCrediteur.push(configDiagrammeColonnePnbParAgent);
                });
                this.legendeColonne1 =
                    (moment(statsDetailPtf.dateDebFluxAnneeNMoins1).format("MM/YYYY") + " \u00E0 ") +
                        ("" + moment(statsDetailPtf.dateFinFluxAnneeNMoins1).format("MM/YYYY"));
                this.couleurColonne1 = Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2;
                this.legendeColonne2 =
                    (moment(statsDetailPtf.dateDebFluxAnneeN).format("MM/YYYY") + " \u00E0 ") +
                        ("" + moment(statsDetailPtf.dateFinFluxAnneeN).format("MM/YYYY"));
                this.couleurColonne2 = Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1;
                this.configTendenceFluxCrediteurTotal = this.indicateurFlecheService.getConfigIndicateurFleche(statsDetailPtf.tauxEvolutionFluxCrediteurs);
                var _a;
            };
            Object.defineProperty(ModaleDetailsFluxCrediteurControleur.prototype, "libelle1Total", {
                /**
                 *
                 */
                get: function () {
                    return "Total flux cr\u00E9diteurs N-1 : " + Portefeuille.Services.Utils.DataUtils.formaterMontantkiloText(this.data.fluxCrediteursNMoins1);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModaleDetailsFluxCrediteurControleur.prototype, "libelle2Total", {
                /**
                 *
                 */
                get: function () {
                    return "Total flux cr\u00E9diteurs N : " + Portefeuille.Services.Utils.DataUtils.formaterMontantkiloText(this.data.fluxCrediteursAnneeN);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Action du bouton "Fermer"
             * @returns {void}
             */
            ModaleDetailsFluxCrediteurControleur.prototype.fermer = function () {
                this.$modalInstance.dismiss();
            };
            ModaleDetailsFluxCrediteurControleur.CLASS_NAME = "ModaleDetailsFluxCrediteurControleur";
            ModaleDetailsFluxCrediteurControleur.logger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleDetailsFluxCrediteurControleur.CLASS_NAME);
            //Injection des dependances
            ModaleDetailsFluxCrediteurControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$modalInstance,
                Portefeuille.Constantes.Inject.MyWay.data,
                Portefeuille.Constantes.Inject.Services.indicateurFlecheService
            ];
            return ModaleDetailsFluxCrediteurControleur;
        }());
        Controleurs.ModaleDetailsFluxCrediteurControleur = ModaleDetailsFluxCrediteurControleur;
        // Déclaration du controlleur
        Portefeuille.app.controller(ModaleDetailsFluxCrediteurControleur.CLASS_NAME, ModaleDetailsFluxCrediteurControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        /**
         * Classe du controleur
         */
        var ModaleDetailsFluxDebiteurControleur = (function () {
            /**
             * Constructeur
             */
            function ModaleDetailsFluxDebiteurControleur($modalInstance, data, indicateurFlecheService) {
                this.$modalInstance = $modalInstance;
                this.data = data;
                this.indicateurFlecheService = indicateurFlecheService;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            ModaleDetailsFluxDebiteurControleur.prototype.initialiser = function () {
                ModaleDetailsFluxDebiteurControleur.logger.info(">>> Appel de la méthode : ModaleDetailsFluxDebiteurControleur.initialiser <<<");
                this.titreModale = "Flux commerciaux débiteurs";
                this.creerConfigDiagrammeColonneDetailPtfParSuviPar(this.data);
            };
            /**
             *
             * @param statsDetailPtfParSuviPar
             */
            ModaleDetailsFluxDebiteurControleur.prototype.creerConfigDiagrammeColonneDetailPtfParSuviPar = function (statsDetailPtf) {
                var _this = this;
                var configDiagrammeColonnePnbParAgent;
                var index = 0;
                this.configDiagrammeColonneFluxDebiteur = [];
                //récupère l'ensemble des PNB et identifie le plus gros
                var valeurMax = Math.max.apply(Math, (_a = _.pluck(statsDetailPtf.detailParSuviPar, "fluxDebiteursNMoins1")).concat.apply(_a, _.pluck(statsDetailPtf.detailParSuviPar, "fluxDebiteursAnneeN")));
                statsDetailPtf.detailParSuviPar.forEach(function (parSuiviPar) {
                    configDiagrammeColonnePnbParAgent = {};
                    configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne = [];
                    configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne.push({
                        id: "colonne-flux-debit-" + index,
                        intitule: "",
                        valeur: parSuiviPar.fluxDebiteursNMoins1,
                        couleur: Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2,
                        hauteur: Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.fluxDebiteursNMoins1),
                        estMontant: true
                    });
                    index = index + 1;
                    configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne.push({
                        id: "colonne-flux-debit-" + index,
                        intitule: "",
                        valeur: parSuiviPar.fluxDebiteursAnneeN,
                        couleur: Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1,
                        hauteur: Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.fluxDebiteursAnneeN),
                        estMontant: true
                    });
                    index = index + 1;
                    configDiagrammeColonnePnbParAgent.id = "pnb-detail-agent-" + index;
                    configDiagrammeColonnePnbParAgent.intitule = parSuiviPar.nomSuiviPar;
                    configDiagrammeColonnePnbParAgent.tendence = _this.indicateurFlecheService.getConfigIndicateurFleche(parSuiviPar.tauxEvolutionFluxDebiteurs);
                    _this.configDiagrammeColonneFluxDebiteur.push(configDiagrammeColonnePnbParAgent);
                });
                this.legendeColonne1 =
                    (moment(statsDetailPtf.dateDebFluxAnneeNMoins1).format("MM/YYYY") + " \u00E0 ") +
                        ("" + moment(statsDetailPtf.dateFinFluxAnneeNMoins1).format("MM/YYYY"));
                this.couleurColonne1 = Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2;
                this.legendeColonne2 =
                    (moment(statsDetailPtf.dateDebFluxAnneeN).format("MM/YYYY") + " \u00E0 ") +
                        ("" + moment(statsDetailPtf.dateFinFluxAnneeN).format("MM/YYYY"));
                this.couleurColonne2 = Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1;
                this.configTendenceFluxDebiteurTotal = this.indicateurFlecheService.getConfigIndicateurFleche(statsDetailPtf.tauxEvolutionFluxDebiteurs);
                var _a;
            };
            Object.defineProperty(ModaleDetailsFluxDebiteurControleur.prototype, "libelle1Total", {
                /**
                 *
                 */
                get: function () {
                    return "Total flux d\u00E9biteurs N-1 : " + Portefeuille.Services.Utils.DataUtils.formaterMontantkiloText(this.data.fluxDebiteursNMoins1);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModaleDetailsFluxDebiteurControleur.prototype, "libelle2Total", {
                /**
                 *
                 */
                get: function () {
                    return "Total flux d\u00E9biteurs N : " + Portefeuille.Services.Utils.DataUtils.formaterMontantkiloText(this.data.fluxDebiteursAnneeN);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Action du bouton "Fermer"
             * @returns {void}
             */
            ModaleDetailsFluxDebiteurControleur.prototype.fermer = function () {
                this.$modalInstance.dismiss();
            };
            ModaleDetailsFluxDebiteurControleur.CLASS_NAME = "ModaleDetailsFluxDebiteurControleur";
            ModaleDetailsFluxDebiteurControleur.logger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleDetailsFluxDebiteurControleur.CLASS_NAME);
            //Injection des dependances
            ModaleDetailsFluxDebiteurControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$modalInstance,
                Portefeuille.Constantes.Inject.MyWay.data,
                Portefeuille.Constantes.Inject.Services.indicateurFlecheService
            ];
            return ModaleDetailsFluxDebiteurControleur;
        }());
        Controleurs.ModaleDetailsFluxDebiteurControleur = ModaleDetailsFluxDebiteurControleur;
        // Déclaration du controlleur
        Portefeuille.app.controller(ModaleDetailsFluxDebiteurControleur.CLASS_NAME, ModaleDetailsFluxDebiteurControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        /**
         * Classe du controleur
         */
        var ModaleDetailsPortefeuilleControleur = (function () {
            /**
             * Constructeur
             */
            function ModaleDetailsPortefeuilleControleur($modalInstance, data) {
                this.$modalInstance = $modalInstance;
                this.data = data;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            ModaleDetailsPortefeuilleControleur.prototype.initialiser = function () {
                ModaleDetailsPortefeuilleControleur.logger.info(">>> Appel de la méthode : ModaleDetailsPortefeuilleControleur.initialiser <<<");
                this.titreModale = "Portefeuille(s)";
                this.creerConfigDiagrammeColonneDetailPtfParSuviPar(this.data.detailParSuviPar);
                this.typeDiagramme = 1;
            };
            /**
             *
             * @param statsDetailPtfParSuviPar
             */
            ModaleDetailsPortefeuilleControleur.prototype.creerConfigDiagrammeColonneDetailPtfParSuviPar = function (statsDetailPtfParSuviPar) {
                var _this = this;
                this.configDiagrammeColonnePortefeuille = [];
                //récupère l'ensemble clients et identifie le plus gros (on utilise ... pour faire passé un tableau en tableau liste d'élément)
                var valeurMax = Math.max.apply(Math, _.pluck(statsDetailPtfParSuviPar, "nbClientsAvecProduitService"));
                this.nombreTotalClient = _.pluck(statsDetailPtfParSuviPar, "nbClientsAvecProduitService").reduce(function (a, b) {
                    return a + b;
                });
                this.nombreTotalDontActif = _.pluck(statsDetailPtfParSuviPar, "nombreClientsActifs").reduce(function (a, b) {
                    return a + b;
                });
                statsDetailPtfParSuviPar.forEach(function (parSuiviPar) {
                    _this.configDiagrammeColonnePortefeuille.push({
                        id: "colonne-clients" + parSuiviPar.nomSuiviPar,
                        intitule: Portefeuille.Constantes.Application.DIAGRAMME_COLONNE_CLIENTS,
                        sousIntitule: Portefeuille.Constantes.Application.DIAGRAMME_COLONNE_CLIENTS_ACTIFS,
                        valeur: parSuiviPar.nbClientsAvecProduitService,
                        sousValeur: parSuiviPar.nombreClientsActifs,
                        couleur: Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_CLIENT,
                        couleurSousValeur: Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_ACTIF,
                        hauteur: Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, Math.abs(parSuiviPar.nbClientsAvecProduitService - parSuiviPar.nombreClientsActifs)),
                        sousHauteur: Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.nombreClientsActifs),
                        estMontant: false,
                        nomSuiviPar: parSuiviPar.nomSuiviPar
                    });
                });
            };
            Object.defineProperty(ModaleDetailsPortefeuilleControleur.prototype, "libelleTotal", {
                /**
                 *
                 */
                get: function () {
                    return "Total clients : " + this.nombreTotalClient + " dont " + this.nombreTotalDontActif + " actifs";
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Action du bouton "Fermer"
             * @returns {void}
             */
            ModaleDetailsPortefeuilleControleur.prototype.fermer = function () {
                this.$modalInstance.dismiss();
            };
            ModaleDetailsPortefeuilleControleur.CLASS_NAME = "ModaleDetailsPortefeuilleControleur";
            ModaleDetailsPortefeuilleControleur.logger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleDetailsPortefeuilleControleur.CLASS_NAME);
            //Injection des dependances
            ModaleDetailsPortefeuilleControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$modalInstance,
                Portefeuille.Constantes.Inject.MyWay.data
            ];
            return ModaleDetailsPortefeuilleControleur;
        }());
        Controleurs.ModaleDetailsPortefeuilleControleur = ModaleDetailsPortefeuilleControleur;
        // Déclaration du controlleur
        Portefeuille.app.controller(ModaleDetailsPortefeuilleControleur.CLASS_NAME, ModaleDetailsPortefeuilleControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        /**
         * Classe du controleur
         */
        var ModaleDetailsRentabilitePNBControleur = (function () {
            /**
             * Constructeur
             */
            function ModaleDetailsRentabilitePNBControleur($modalInstance, data, indicateurFlecheService) {
                this.$modalInstance = $modalInstance;
                this.data = data;
                this.indicateurFlecheService = indicateurFlecheService;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            ModaleDetailsRentabilitePNBControleur.prototype.initialiser = function () {
                ModaleDetailsRentabilitePNBControleur.logger.info(">>> Appel de la méthode : ModaleDetailsRentabilitePNBControleur.initialiser <<<");
                this.titreModale = "PNB (IPADE)";
                this.creerConfigDiagrammeColonneDetailPtfParSuviPar(this.data);
            };
            /**
             *
             * @param statsDetailPtfParSuviPar
             */
            ModaleDetailsRentabilitePNBControleur.prototype.creerConfigDiagrammeColonneDetailPtfParSuviPar = function (statsDetailPtf) {
                var _this = this;
                var configDiagrammeColonnePnbParAgent;
                var index = 0;
                this.configDiagrammeColonnePnb = [];
                //récupère l'ensemble des PNB et identifie le plus gros
                var valeurMax = Math.max.apply(Math, (_a = _.pluck(statsDetailPtf.detailParSuviPar, "pnb12DerniersMoisGlissNMoins1")).concat.apply(_a, _.pluck(statsDetailPtf.detailParSuviPar, "pnb12DerniersMoisGlissantN")));
                statsDetailPtf.detailParSuviPar.forEach(function (parSuiviPar) {
                    configDiagrammeColonnePnbParAgent = {};
                    configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne = [];
                    configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne.push({
                        id: "colonne-pnb-" + index,
                        intitule: "",
                        valeur: parSuiviPar.pnb12DerniersMoisGlissNMoins1,
                        couleur: Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2,
                        hauteur: Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.pnb12DerniersMoisGlissNMoins1),
                        estMontant: true
                    });
                    index = index + 1;
                    configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne.push({
                        id: "colonne-pnb-" + index,
                        intitule: "",
                        valeur: parSuiviPar.pnb12DerniersMoisGlissantN,
                        couleur: Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1,
                        hauteur: Portefeuille.Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.pnb12DerniersMoisGlissantN),
                        estMontant: true
                    });
                    index = index + 1;
                    configDiagrammeColonnePnbParAgent.id = "pnb-detail-agent-" + index;
                    configDiagrammeColonnePnbParAgent.intitule = parSuiviPar.nomSuiviPar;
                    configDiagrammeColonnePnbParAgent.tendence = _this.indicateurFlecheService.getConfigIndicateurFleche(parSuiviPar.tauxEvolutionPnb);
                    _this.configDiagrammeColonnePnb.push(configDiagrammeColonnePnbParAgent);
                });
                this.legendeColonne1 =
                    (moment(statsDetailPtf.dateDebPnb12DerMoisGlissNMoins1).format("DD/MM/YYYY") + " \u00E0 ") +
                        ("" + moment(statsDetailPtf.dateFinPnb12DerMoisGlissNMoins1).format("DD/MM/YYYY"));
                this.couleurColonne1 = Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2;
                this.legendeColonne2 =
                    (moment(statsDetailPtf.dateDebPnb12DerMoisGlissN).format("DD/MM/YYYY") + " \u00E0 ") +
                        ("" + moment(statsDetailPtf.dateFinPnb12DerMoisGlissN).format("DD/MM/YYYY"));
                this.couleurColonne2 = Portefeuille.Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1;
                this.configTendencePNBTotal = this.indicateurFlecheService.getConfigIndicateurFleche(statsDetailPtf.tauxEvolutionPnb);
                var _a;
            };
            Object.defineProperty(ModaleDetailsRentabilitePNBControleur.prototype, "libelle1Total", {
                /**
                 *
                 */
                get: function () {
                    return "Total PNB N-1 : " + Portefeuille.Services.Utils.DataUtils.formaterMontantkiloText(this.data.pnb12DerniersMoisGlissNMoins1);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ModaleDetailsRentabilitePNBControleur.prototype, "libelle2Total", {
                /**
                 *
                 */
                get: function () {
                    return "Total PNB N : " + Portefeuille.Services.Utils.DataUtils.formaterMontantkiloText(this.data.pnb12DerniersMoisGlissantN);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Action du bouton "Fermer"
             * @returns {void}
             */
            ModaleDetailsRentabilitePNBControleur.prototype.fermer = function () {
                this.$modalInstance.dismiss();
            };
            ModaleDetailsRentabilitePNBControleur.CLASS_NAME = "ModaleDetailsRentabilitePNBControleur";
            ModaleDetailsRentabilitePNBControleur.logger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleDetailsRentabilitePNBControleur.CLASS_NAME);
            //Injection des dependances
            ModaleDetailsRentabilitePNBControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$modalInstance,
                Portefeuille.Constantes.Inject.MyWay.data,
                Portefeuille.Constantes.Inject.Services.indicateurFlecheService
            ];
            return ModaleDetailsRentabilitePNBControleur;
        }());
        Controleurs.ModaleDetailsRentabilitePNBControleur = ModaleDetailsRentabilitePNBControleur;
        // Déclaration du controlleur
        Portefeuille.app.controller(ModaleDetailsRentabilitePNBControleur.CLASS_NAME, ModaleDetailsRentabilitePNBControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        /**
         * Classe du controleur
         */
        var ModaleDetailsRevuePortefeuilleControleur = (function () {
            /**
             * Constructeur
             */
            function ModaleDetailsRevuePortefeuilleControleur($modalInstance, data) {
                this.$modalInstance = $modalInstance;
                this.data = data;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            ModaleDetailsRevuePortefeuilleControleur.prototype.initialiser = function () {
                ModaleDetailsRevuePortefeuilleControleur.logger.info(">>> Appel de la méthode : ModaleDetailsRevuePortefeuilleControleur.initialiser <<<");
                this.titreModale = "Taux de revues";
                this.creerConfigDiagrammePourcentageDetailTauxRevueParSuviPar(this.data);
                //Chargement de la la liste détail
            };
            /**
             *
             * @param statsDetailPtfParSuviPar
             */
            ModaleDetailsRevuePortefeuilleControleur.prototype.creerConfigDiagrammePourcentageDetailTauxRevueParSuviPar = function (statsDetailPtf) {
                var _this = this;
                this.configDiagrammePourcentageTauxRevue = [];
                var index = 0;
                statsDetailPtf.detailParSuviPar.forEach(function (parSuiviPar) {
                    _this.configDiagrammePourcentageTauxRevue.push({
                        titre: "",
                        id: "pourcentage-clients-revue" + index,
                        degrade: Portefeuille.Services.LibrairieD3.DEGRADE_POURCENTAGE.BLEU,
                        pourcentageUn: parSuiviPar.tauxDeRevue,
                        nombreUn: parSuiviPar.tauxDeRevue,
                        legende: parSuiviPar.nomSuiviPar
                    });
                    index = index + 1;
                });
                this.pourcentageTauxTotal = this.data.tauxDeRevueTotal;
            };
            /**
             * Action du bouton "Fermer"
             * @returns {void}
             */
            ModaleDetailsRevuePortefeuilleControleur.prototype.fermer = function () {
                this.$modalInstance.dismiss();
            };
            ModaleDetailsRevuePortefeuilleControleur.CLASS_NAME = "ModaleDetailsRevuePortefeuilleControleur";
            ModaleDetailsRevuePortefeuilleControleur.logger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleDetailsRevuePortefeuilleControleur.CLASS_NAME);
            //Injection des dependances
            ModaleDetailsRevuePortefeuilleControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$modalInstance,
                Portefeuille.Constantes.Inject.MyWay.data
            ];
            return ModaleDetailsRevuePortefeuilleControleur;
        }());
        Controleurs.ModaleDetailsRevuePortefeuilleControleur = ModaleDetailsRevuePortefeuilleControleur;
        // Déclaration du controlleur
        Portefeuille.app.controller(ModaleDetailsRevuePortefeuilleControleur.CLASS_NAME, ModaleDetailsRevuePortefeuilleControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        /**
         * Classe du controleur
         */
        var ModaleDetailsTauxVisiteControleur = (function () {
            /**
             * Constructeur
             */
            function ModaleDetailsTauxVisiteControleur($modalInstance, data) {
                this.$modalInstance = $modalInstance;
                this.data = data;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            ModaleDetailsTauxVisiteControleur.prototype.initialiser = function () {
                ModaleDetailsTauxVisiteControleur.logger.info(">>> Appel de la méthode : ModaleDetailsPortefeuilleControleur.initialiser <<<");
                this.titreModale = "Taux de visites (Relations économiques)";
                this.creerConfigDiagrammePourcentageDetailTauxVisiteParSuviPar(this.data);
                //Chargement de la la liste détail
            };
            /**
             *
             * @param statsDetailPtfParSuviPar
             */
            ModaleDetailsTauxVisiteControleur.prototype.creerConfigDiagrammePourcentageDetailTauxVisiteParSuviPar = function (statsDetailPtf) {
                var _this = this;
                this.configDiagrammePourcentageTauxVisite = [];
                var index = 0;
                statsDetailPtf.detailParSuviPar.forEach(function (parSuiviPar) {
                    _this.configDiagrammePourcentageTauxVisite.push({
                        titre: "",
                        id: "pourcentage-clients-visite" + index,
                        degrade: Portefeuille.Services.LibrairieD3.DEGRADE_POURCENTAGE.BLEU,
                        pourcentageUn: parSuiviPar.tauxDeVisite,
                        nombreUn: parSuiviPar.tauxDeVisite,
                        legende: parSuiviPar.nomSuiviPar
                    });
                    index = index + 1;
                });
                this.pourcentageTauxTotal = this.data.tauxDeVisiteTotal;
            };
            /**
             * Action du bouton "Fermer"
             * @returns {void}
             */
            ModaleDetailsTauxVisiteControleur.prototype.fermer = function () {
                this.$modalInstance.dismiss();
            };
            ModaleDetailsTauxVisiteControleur.CLASS_NAME = "ModaleDetailsTauxVisiteControleur";
            ModaleDetailsTauxVisiteControleur.logger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleDetailsTauxVisiteControleur.CLASS_NAME);
            //Injection des dependances
            ModaleDetailsTauxVisiteControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$modalInstance,
                Portefeuille.Constantes.Inject.MyWay.data
            ];
            return ModaleDetailsTauxVisiteControleur;
        }());
        Controleurs.ModaleDetailsTauxVisiteControleur = ModaleDetailsTauxVisiteControleur;
        // Déclaration du controlleur
        Portefeuille.app.controller(ModaleDetailsTauxVisiteControleur.CLASS_NAME, ModaleDetailsTauxVisiteControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur de la modale de filtre
 * @module Portefeuille.Controleurs
 * @author S0078068 (Yannis VESSEREAU)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        /**
         * Classe du controleur
         */
        var ModaleFiltreControleur = (function () {
            /**
             * Constructeur
             */
            function ModaleFiltreControleur($scope, $modalInstance, data, $filter, indicateurService, filtreService, begacliService) {
                this.$scope = $scope;
                this.$modalInstance = $modalInstance;
                this.data = data;
                this.$filter = $filter;
                this.indicateurService = indicateurService;
                this.filtreService = filtreService;
                this.begacliService = begacliService;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            ModaleFiltreControleur.prototype.initialiser = function () {
                var _this = this;
                ModaleFiltreControleur.logger.info(">>> Appel de la méthode : ModaleFiltreControleur.initialiser <<<");
                console.log("--> filtre Begacli", this.begacliService.getFiltreBegacli());
                // Récupération des données transmises
                this.listeIndicateurs = this.data.model.listeIndicateursFiltre;
                this.listeIndicateursTableau = this.data.model.listeIndicateursTableau;
                this.listeFiltres = this.data.model.listeFiltres;
                this.estVueClient = this.data.model.estVueClient;
                // Initialisation du boolean filtre actif ou non
                this.sansFiltreActif = this.listeFiltres.length === 0;
                // Création de la liste des indicateurs disponibles
                this.listeIndicateursFiltreDisponible = [];
                _.forEach(this.listeIndicateursTableau, function (indicateurChoix) {
                    // n'affiche pas premier_Equipement car il est déjà géré en premier_Equipement TAG
                    if (indicateurChoix.indicateur.code !== Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {
                        if (_this.estVueClient) {
                            _this.ajouterFiltreDisponible(indicateurChoix.indicateur.code);
                        }
                        else if (!indicateurChoix.indicateur.estUniquementVueClients) {
                            _this.ajouterFiltreDisponible(indicateurChoix.indicateur.codeRel);
                        }
                    }
                });
                // Ajout des indicateurs non visibles
                // Et n'affiche pas premier_Equipement car il est déjà géré en premier_Equipement TAG
                _.forEach(this.indicateurService.getListeTotaleIndicateursType(), function (indicateurType) {
                    if (!indicateurType.estVisibleColonne
                        && indicateurType.code !== Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {
                        if (_this.estVueClient) {
                            _this.ajouterFiltreDisponible(indicateurType.code);
                        }
                        else if (!indicateurType.estUniquementVueClients) {
                            _this.ajouterFiltreDisponible(indicateurType.codeRel);
                        }
                    }
                });
                var listeIndicateurFiltered = this.$filter("sansIndicateurDateFiltre")(this.listeIndicateursFiltreDisponible);
                this.pasDeFiltreDisponible = listeIndicateurFiltered.length === 0;
                this.unSeulFiltreDisponible = listeIndicateurFiltered.length === 1;
                if (this.sansFiltreActif) {
                    this.ajouterCondition(false);
                }
            };
            ModaleFiltreControleur.prototype.ajouterFiltreDisponible = function (code) {
                var indicateurFiltreExistant = _.find(this.listeIndicateurs, function (indicateurFiltre) {
                    return code === indicateurFiltre.indicateur.code;
                });
                // console.log("--> indicateurFiltreExistant.indicateur.code : ", indicateurFiltreExistant.indicateur.code);
                if (indicateurFiltreExistant) {
                    if (indicateurFiltreExistant.indicateur.code !== Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG.toString()) {
                        // on ignore le PREMIER_EQUIPEMENT_TAG qui a été remplacé par PREMIER_EQUIPEMENT_TEXTE
                        this.listeIndicateursFiltreDisponible.push(indicateurFiltreExistant);
                    }
                }
            };
            /**
             * Méthode permettant d'ajouter une condition interne au bloc
             * @returns {void}
             */
            ModaleFiltreControleur.prototype.ajouterCondition = function (setDefaultEt) {
                this.filtreService.ajouterFiltre(this.listeFiltres, setDefaultEt);
            };
            /**
             * Action du bouton "Appliquer"
             * @returns {void}
             */
            ModaleFiltreControleur.prototype.appliquer = function () {
                var donneesDeSortie = {};
                donneesDeSortie.listeFiltres = this.listeFiltres;
                donneesDeSortie.listeIndicateursFiltre = this.listeIndicateurs;
                console.log("--> appliquer : ", this.listeFiltres);
                // on fait le ménage pour BEGACLI...
                if (this.listeFiltres.length === 0) {
                    this.begacliService.setCasesDecochees();
                }
                this.$modalInstance.close(donneesDeSortie);
            };
            /**
             * Action du bouton "Fermer"
             * @returns {void}
             */
            ModaleFiltreControleur.prototype.fermer = function () {
                this.$modalInstance.dismiss();
            };
            /**
             * Action de l'appui de la touche "Entrer"
             * @returns {void}
             */
            ModaleFiltreControleur.prototype.appuiToucheEntrer = function ($event) {
                if ($event.keyCode === 13 && !this.desactiverBoutonAppliquer()) {
                    $event.preventDefault();
                    this.appliquer();
                }
            };
            /**
             * Action du bouton "Ajouter +"
             * @returns {void}
             */
            ModaleFiltreControleur.prototype.afficherBoutonAjouter = function () {
                return (this.listeFiltres.length === 1
                    && this.unSeulFiltreDisponible) ?
                    false :
                    !(this.listeFiltres.length >= 2);
            };
            /**
             * Desactiver ou non le bouton "Annuler"
             * @returns {void}
             */
            ModaleFiltreControleur.prototype.desactiverBoutonAnnuler = function () {
                return this.pasDeFiltreDisponible
                    || (this.sansFiltreActif
                        && this.listeFiltres.length === 0);
            };
            /**
             * Descativer ou non le bouton "Appliquer"
             * @returns {void}
             */
            ModaleFiltreControleur.prototype.desactiverBoutonAppliquer = function () {
                var _this = this;
                var estMalRempli = false;
                _.forEach(this.listeFiltres, function (filtre, index) {
                    // Test de l'indicateur
                    if (filtre.indicateur) {
                        switch (filtre.indicateur.indicateur.typeIndicateur) {
                            case Portefeuille.Enum.Indicateur.TYPE.TEXTE:
                                if (!_.find(filtre.indicateur.listeValeurs, function (valeur) {
                                    return valeur.actif;
                                })) {
                                    estMalRempli = true;
                                    return false;
                                }
                                break;
                            case Portefeuille.Enum.Indicateur.TYPE.BEGACLI:
                                if (!_this.begacliService.getCasesCochees()) {
                                    estMalRempli = true;
                                    return false;
                                }
                                break;
                            case Portefeuille.Enum.Indicateur.TYPE.NOMBRE:
                            case Portefeuille.Enum.Indicateur.TYPE.DATE:
                            case Portefeuille.Enum.Indicateur.TYPE.MONTANT:
                            case Portefeuille.Enum.Indicateur.TYPE.POURCENT:
                                // Test du comparateur
                                if (_this.controllerComparateurKo(filtre)) {
                                    estMalRempli = true;
                                    return false;
                                }
                                break;
                            default:
                                estMalRempli = true;
                                return false;
                        }
                        // Test de l'opérateur
                        if (!filtre.operateur && index > 0) {
                            estMalRempli = true;
                            return false;
                        }
                    }
                    else {
                        estMalRempli = true;
                        return false;
                    }
                });
                return estMalRempli
                    || this.pasDeFiltreDisponible
                    || (this.sansFiltreActif && this.listeFiltres.length === 0);
            };
            /**
             * Controle si un nombre est :
             *  - non null
             *  - non defini
             *  - non négatif
             * @param valeur valeur à controler
             */
            ModaleFiltreControleur.prototype.estVide = function (valeur) {
                return valeur === null ||
                    valeur === undefined ||
                    valeur < 0;
            };
            /**
             * Controle le la validité du comparateur
             * @param filtre
             */
            ModaleFiltreControleur.prototype.controllerComparateurKo = function (filtre) {
                var retour = false;
                if (filtre.comparateur) {
                    if (filtre.comparateur === Portefeuille.Enum.Filtre.COMPARATEUR.NC
                        || filtre.comparateur === Portefeuille.Enum.Filtre.COMPARATEUR.NONREALISEE
                        || filtre.comparateur === Portefeuille.Enum.Filtre.COMPARATEUR.ECHUE
                        || filtre.comparateur === Portefeuille.Enum.Filtre.COMPARATEUR.ENCOURS) {
                        retour = false;
                    }
                    else if (filtre.comparateur === Portefeuille.Enum.Filtre.COMPARATEUR.ENTRE) {
                        if (this.estVide(filtre.valeurMultiple1)
                            || this.estVide(filtre.valeurMultiple2)) {
                            // On intérdit toute saisie partielle
                            retour = true;
                        }
                        else if (filtre.valeurMultiple1 > filtre.valeurMultiple2) {
                            // On intérdit toute saisie inverse sur un interval de date ou de nombre
                            retour = true;
                        }
                        ;
                    }
                    else if (this.estVide(filtre.valeurUnique)) {
                        retour = true;
                    }
                }
                else {
                    retour = true;
                }
                return retour;
            };
            ModaleFiltreControleur.CLASS_NAME = "ModaleFiltreControleur";
            ModaleFiltreControleur.logger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleFiltreControleur.CLASS_NAME);
            //Injection des dependances
            ModaleFiltreControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$scope,
                Portefeuille.Constantes.Inject.Angular.$modalInstance,
                Portefeuille.Constantes.Inject.MyWay.data,
                Portefeuille.Constantes.Inject.Angular.$filter,
                Portefeuille.Constantes.Inject.Services.indicateurService,
                Portefeuille.Constantes.Inject.Services.filtreService,
                Portefeuille.Constantes.Inject.Services.begacliService
            ];
            return ModaleFiltreControleur;
        }());
        Controleurs.ModaleFiltreControleur = ModaleFiltreControleur;
        // Déclaration du controlleur
        Portefeuille.app.controller("ModaleFiltreControleur", ModaleFiltreControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur de la modale des paniers
 * @module Portefeuille.Controleurs
 * @author S0078068 (Yannis VESSEREAU)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        /**
         * Classe du controleur
         */
        var ModalePaniersControleur = (function () {
            /**
             * Constructeur
             */
            function ModalePaniersControleur($rootScope, $scope, modalePaniersService, $modalInstance, data, preferencesService, popupService, indicateurService, listeClientsService, $q, mwEvents, $location, scroll) {
                var _this = this;
                this.$rootScope = $rootScope;
                this.$scope = $scope;
                this.modalePaniersService = modalePaniersService;
                this.$modalInstance = $modalInstance;
                this.data = data;
                this.preferencesService = preferencesService;
                this.popupService = popupService;
                this.indicateurService = indicateurService;
                this.listeClientsService = listeClientsService;
                this.$q = $q;
                this.mwEvents = mwEvents;
                this.$location = $location;
                this.scroll = scroll;
                /**
                 * Variable contenant la méthode a appelé lorsqu'un indicateur est déposé dans le panier
                 */
                this.panierDeposeEvent = function (tuileCatalogueSettings) {
                    // Changement de l'état de l'indicateur
                    tuileCatalogueSettings.indicateur.choisi = true;
                    // Création de la nouvelle tuile panier
                    var tuilePanierSettings = {};
                    tuilePanierSettings.id = _this.modalePaniersService.genererIdentifiantAleatoire();
                    tuilePanierSettings.indicateur = tuileCatalogueSettings.indicateur;
                    _this.listeTuilePanierSettings.push(tuilePanierSettings);
                    // On desactive les drops du panier
                    _this.setEstActiverDropPanier(false);
                    _this.modalePaniersService.desactiverDropTuilesPanier(_this.listeTuilePanierSettings);
                    // Rafraichir listeTuileCatalogueSettings
                    _this.rafraichirListeTuileCatalogueSettings();
                    // si le nombre d'indicateur max est atteint
                    if (_this.getNombreIndicateurPanier() === Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {
                        // Desactivation du drag sur les tuiles du catalogue
                        _.forEach(_this.listeTuileCatalogueSettings, function (tuile) {
                            tuile.dragSettings.desactiverDrag();
                        });
                    }
                    // Mise à jour du message d'avertissement de modification de filtre
                    _this.modalePaniersService.afficherMessageAvertissementFiltre(_this.listeFiltresRelationEco, _this.listeFiltresClients, _.pluck(_this.listeTuilePanierSettings, "indicateur"));
                    //this.$scope.$applyAsync();
                    _this.$scope.$apply();
                };
                /**
                 * Variable contenant la méthode a appelé lorsqu'un indicateur est déposé dans la poubelle
                 */
                this.poubelleDeposeEvent = function (tuilePanierSettings) {
                    // Si Mode édtion catalogue
                    if (_this.estEnEditionCatalogue) {
                        // Récupération de la tuile catalogue
                        var tuileCatalogue = _.find(_this.listeTuileCatalogueSettings, function (tuile) {
                            return tuile.indicateur.indicateur.code === tuilePanierSettings.indicateur.indicateur.code;
                        });
                        tuileCatalogue.estEnEdition = true;
                    }
                    _this.modalePaniersService.supprimerIndicateurPanier(tuilePanierSettings, _this.listeTuileCatalogueSettings, _this.listeTuilePanierSettings, _this.listeFiltresClients, _this.listeFiltresRelationEco);
                    // On cache le drop poubelle
                    _this.setEstAfficherDropPoubelle(false);
                    // On desactive les drops des tuiles du panier
                    _this.modalePaniersService.desactiverDropTuilesPanier(_this.listeTuilePanierSettings);
                };
                // Récupération des données transmises
                this.listeTotaleIndicateurs = data.model.listeTotaleIndicateurs;
                this.listePaniers = data.model.listePaniers ? data.model.listePaniers : [];
                this.listeFiltresClients = data.model.listeFiltresClients;
                this.listeFiltresRelationEco = data.model.listeFiltresRelationEco;
                this.txtAjoutPerso = Portefeuille.Constantes.Application.CHAINE_AJOUT_PERSONNALISATION;
                this.listeErreurs = [];
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le controleur
             * @returns {void}
             */
            ModalePaniersControleur.prototype.initialiser = function () {
                var _this = this;
                this.chargementEnCours = false;
                ModalePaniersControleur.logger.info(">>> Appel de la méthode : ModalePaniersControleur.initialiser <<<");
                this.modalePaniersService.setModalePaniersControleur(this);
                // Initialisation variables
                this.estAfficherDropPanier = false;
                this.estEnEditionPanier = false;
                // Récupération du premier panier
                //this.panierEnCours = this.listePaniers[0];
                // Gestion de panier vide: on créer une nouvelle selection
                if (this.listePaniers.length === 0) {
                    this.ajouterSelection();
                }
                // Récupération du premier defaut
                var lstPanierDefaut = _.where(this.listePaniers, { "estDefaut": true });
                this.panierEnCours = lstPanierDefaut.length > 0 ? lstPanierDefaut[0] : this.listePaniers[0];
                // Nouvelle selection
                if (this.listePaniers.length < Portefeuille.Constantes.Application.LIMITE_NB_PANIERS
                    && this.panierEnCours.nom) {
                    this.listePaniers.push(this.recupererPanierFacticeAjoutSelection());
                }
                // Gestion erreur si on arrive avec un panier sans nom
                if (this.panierEnCours.numero) {
                    this.estFormulaireValide();
                }
                // Creation de listeTuileCatalogueSettings
                this.listeTuileCatalogueSettings = [];
                _.forEach(this.listeTotaleIndicateurs, function (indicateur) {
                    if (indicateur.estVisibleColonne) {
                        var tuileCatalogueSettings = {};
                        tuileCatalogueSettings.id = _this.modalePaniersService.genererIdentifiantAleatoire();
                        tuileCatalogueSettings.estEnEdition = false;
                        // Récupération de l'indicateur
                        var indicateurExistant = _.find(_this.panierEnCours.listeChoixIndicateurs, function (indicateurChoix) {
                            return indicateurChoix.indicateur.code === indicateur.code;
                        });
                        if (indicateurExistant) {
                            tuileCatalogueSettings.indicateur = indicateurExistant;
                        }
                        else {
                            var indicateurCatalogue = {};
                            indicateurCatalogue.indicateur = indicateur;
                            indicateurCatalogue.choisi = false;
                            tuileCatalogueSettings.indicateur = indicateurCatalogue;
                        }
                        _this.listeTuileCatalogueSettings.push(tuileCatalogueSettings);
                    }
                });
                // Création de listeTuilePanierSettings
                this.listeTuilePanierSettings = [];
                _.forEach(this.panierEnCours.listeChoixIndicateurs, function (indicateur) {
                    var tuilePanierSettings = {};
                    tuilePanierSettings.id = _this.modalePaniersService.genererIdentifiantAleatoire();
                    tuilePanierSettings.indicateur = indicateur;
                    tuilePanierSettings.estEnEdition = false;
                    _this.listeTuilePanierSettings.push(tuilePanierSettings);
                });
                //// Init affichage ou non du bouton Ajouter
                //if (this.listeTuilePanierSettings.length < Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {
                //    this.setEstAfficherBoutonAjouter(true);
                //} else {
                //    this.setEstAfficherBoutonAjouter(false);
                //}
                // Création des paramètres du drop du panier
                this.panierDropSettings = this.modalePaniersService.creerDropSettings(this.panierDeposeEvent);
                // Création des paramètres du drop de la poubelle
                this.poubelleDropSettings = this.modalePaniersService.creerDropSettings(this.poubelleDeposeEvent);
            };
            ModalePaniersControleur.prototype.recupererPanierFacticeAjoutSelection = function () {
                var panierFactice = {
                    numero: 0, estDefaut: false, listeChoixIndicateurs: null, nom: Portefeuille.Constantes.Application.CHAINE_AJOUT_PERSONNALISATION
                };
                return panierFactice;
            };
            /**
             * Méthode permettant de modifier l'état du drop panier
             * @param {boolean} estAfficher
             * @returns {void}
             */
            ModalePaniersControleur.prototype.setEstActiverDropPanier = function (estAfficher) {
                this.estAfficherDropPanier = estAfficher;
                if (estAfficher) {
                    this.panierDropSettings.activerDragOver();
                }
                else {
                    this.panierDropSettings.desactiverDragOver();
                }
                //this.$scope.$applyAsync();
                this.$scope.$apply();
            };
            /**
             * Méthode permettant de modifier l'état du drop poubelle
             * @param {boolean} estAfficher
             * @returns {void}
             */
            ModalePaniersControleur.prototype.setEstAfficherDropPoubelle = function (estAfficher) {
                if (estAfficher) {
                    this.poubelleDropSettings.activerDragOver();
                }
                else {
                    this.poubelleDropSettings.desactiverDragOver();
                }
                //this.$scope.$applyAsync(); 
                this.$scope.$apply();
            };
            /**
             * Méthode permettant de modifier l'état du bouton ajouter
             * @param {boolean} estAfficher
             * @returns {void}
             */
            ModalePaniersControleur.prototype.setEstAfficherBoutonAjouter = function (estAfficher) {
                this.estAfficherBoutonAjouter = estAfficher;
                //this.$scope.$applyAsync();
                this.$scope.$apply();
            };
            /**
             * Méthode permettant de rafraichir listeTuileCatalogueSettings
             * @return {void}
             */
            ModalePaniersControleur.prototype.rafraichirListeTuileCatalogueSettings = function () {
                var _this = this;
                var listeTemp = this.listeTuileCatalogueSettings;
                this.listeTuileCatalogueSettings = [];
                //this.$scope.$applyAsync();
                this.$scope.$apply();
                this.listeTuileCatalogueSettings = listeTemp;
                //this.$scope.$applyAsync();
                if (this.estEnEditionCatalogue) {
                    _.forEach(this.listeTuileCatalogueSettings, function (tuile) {
                        if (!tuile.indicateur.choisi) {
                            if (_this.getNombreIndicateurPanier() < Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {
                                tuile.estEnEdition = true;
                            }
                            if (tuile && tuile.dragSettings) {
                                tuile.dragSettings.desactiverDrag();
                            }
                        }
                    });
                }
                if (this.estEnEditionPanier) {
                    _.forEach(this.listeTuilePanierSettings, function (tuile) {
                        tuile.estEnEdition = true;
                        if (tuile && tuile.dragSettings) {
                            tuile.dragSettings.desactiverDrag();
                        }
                    });
                }
                this.$scope.$apply();
            };
            /**
             * Méthode permettant de retourner le nombre d'indicateur présent dans le panier en cours
             * @return {void}
             */
            ModalePaniersControleur.prototype.getNombreIndicateurPanier = function () {
                return this.listeTuilePanierSettings.length;
            };
            ModalePaniersControleur.prototype.ajouterSelection = function () {
                // on met "estDefaut" à false pour les paniers existants
                _.forEach(this.listePaniers, function (panierTemp) {
                    panierTemp.estDefaut = false;
                });
                // on ajoute un panier vide
                this.listePaniers.push({ nom: "", listeChoixIndicateurs: [], estDefaut: true, numero: undefined });
            };
            /**
             * Action du bouton "Ajouter"
             * @returns {void}
             */
            ModalePaniersControleur.prototype.ajouterIndicateur = function () {
                this.estEnEditionCatalogue = true;
                // Modification des paramètres des tuiles catalogues
                _.forEach(this.listeTuileCatalogueSettings, function (tuile) {
                    if (!tuile.indicateur.choisi) {
                        tuile.estEnEdition = true;
                        tuile.dragSettings.desactiverDrag();
                    }
                });
                // Enregistrement de la liste du panier
                this.listeCodesIndicateursPanierInit = _.pluck(this.listeTuilePanierSettings, "indicateur.indicateur.code");
            };
            /**
             * Action du bouton "Mode édition"
             * @returns {void}
             */
            ModalePaniersControleur.prototype.activerModeEditionPanier = function () {
                var _this = this;
                this.estEnEditionPanier = true;
                // Modification des paramètres des tuiles panier
                _.forEach(this.listeTuilePanierSettings, function (tuile) {
                    tuile.estEnEdition = true;
                    tuile.dragSettings.desactiverDrag();
                });
                // Partie ajout indicateurs
                this.estEnEditionCatalogue = true;
                // Modification des paramètres des tuiles catalogues
                _.forEach(this.listeTuileCatalogueSettings, function (tuile) {
                    if (!tuile.indicateur.choisi) {
                        if (_this.getNombreIndicateurPanier() < Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {
                            tuile.estEnEdition = true;
                        }
                        tuile.dragSettings.desactiverDrag();
                    }
                });
                // Enregistrement de la liste du panier
                this.listeCodesIndicateursPanierInit = _.pluck(this.listeTuilePanierSettings, "indicateur.indicateur.code");
            };
            /**
             * Action du bouton "Supprimer la selection"
             * @returns {void}
             */
            ModalePaniersControleur.prototype.supprimerTousLesIndicateurs = function () {
                var _this = this;
                var listeTemp = [];
                _.forEach(this.listeTuilePanierSettings, function (tuilePanierSettings) {
                    listeTemp.push(tuilePanierSettings);
                });
                _.forEach(listeTemp, function (tuilePanierSettings) {
                    _this.modalePaniersService.supprimerIndicateurPanier(tuilePanierSettings, _this.listeTuileCatalogueSettings, _this.listeTuilePanierSettings, _this.listeFiltresClients, _this.listeFiltresRelationEco);
                });
                //this.setEstAfficherBoutonAjouter(true);
            };
            /**
             * Action du bouton "Enregistrer" en édition panier
             * @returns {void}
             */
            ModalePaniersControleur.prototype.enregistrerEditionPanier = function () {
                this.initFinEditionPanier();
                this.enregistrerEditionCatalogue();
            };
            /**
             * Action du bouton "Annuler" en édition panier
             * @returns {void}
             */
            ModalePaniersControleur.prototype.annulerEditionPanier = function () {
                this.initFinEditionPanier();
                this.remettrePanierInitial();
                this.annulerEditionCatalogue();
            };
            /**
             * Méthode permettant d'initialiser la modale lors de la fin de l'édition Panier
             * @returns {void}
             */
            ModalePaniersControleur.prototype.initFinEditionPanier = function () {
                this.estEnEditionPanier = false;
                //if (this.getNombreIndicateurPanier() < Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {
                //    this.setEstAfficherBoutonAjouter(true);
                //}
                // Modification des paramètres des tuiles panier
                _.forEach(this.listeTuilePanierSettings, function (tuile) {
                    tuile.estEnEdition = false;
                    tuile.dragSettings.activerDrag();
                });
            };
            /**
             * Action du bouton "Enregistrer" en édition catalogue
             * @returns {void}
             */
            ModalePaniersControleur.prototype.enregistrerEditionCatalogue = function () {
                this.initFinEditionCatalogue();
            };
            /**
             * Action du bouton "Annuler" en édition catalogue
             * @returns {void}
             */
            ModalePaniersControleur.prototype.annulerEditionCatalogue = function () {
                this.initFinEditionCatalogue();
                this.remettrePanierInitial();
            };
            /**
             * Méthode permettant d'initialiser la modale lors de la fin de l'édition Catalogue
             * @returns {void}
             */
            ModalePaniersControleur.prototype.initFinEditionCatalogue = function () {
                var _this = this;
                this.estEnEditionCatalogue = false;
                // Modification des paramètres des tuiles catalogue
                _.forEach(this.listeTuileCatalogueSettings, function (tuile) {
                    tuile.estEnEdition = false;
                    if (_this.getNombreIndicateurPanier() === Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {
                        tuile.dragSettings.desactiverDrag();
                    }
                    else if (tuile.indicateur.choisi) {
                        tuile.dragSettings.desactiverDrag();
                    }
                    else {
                        tuile.dragSettings.activerDrag();
                    }
                });
            };
            /**
             * Méthode permettant de remettre le panier initial
             * @returns {void}
             */
            ModalePaniersControleur.prototype.remettrePanierInitial = function () {
                var _this = this;
                // RAZ de la liste des tuiles du panier
                this.listeTuilePanierSettings = [];
                // Remise en place de l'ancien panier
                _.forEach(this.listeCodesIndicateursPanierInit, function (code) {
                    var tuileCatalogue = _.find(_this.listeTuileCatalogueSettings, function (tuile) {
                        return tuile.indicateur.indicateur.code === code;
                    });
                    var tuilePanierSettings = {};
                    tuilePanierSettings.id = _this.modalePaniersService.genererIdentifiantAleatoire();
                    tuilePanierSettings.indicateur = tuileCatalogue.indicateur;
                    tuilePanierSettings.indicateur.choisi = true;
                    tuilePanierSettings.estEnEdition = false;
                    _this.listeTuilePanierSettings.push(tuilePanierSettings);
                });
                // Remise en place de l'ancien catalogue
                _.forEach(this.listeTuileCatalogueSettings, function (tuile) {
                    var tuileCatalogue = _.find(_this.listeCodesIndicateursPanierInit, function (code) {
                        return tuile.indicateur.indicateur.code === code;
                    });
                    if (!tuileCatalogue) {
                        tuile.indicateur.choisi = false;
                    }
                });
                if (this.listeTuilePanierSettings.length === Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {
                    this.modalePaniersService.cacherBoutonValider();
                }
                else {
                    this.modalePaniersService.afficherBoutonValider();
                }
                // Mise à jour du message d'avertissement de modification de filtre
                this.modalePaniersService.afficherMessageAvertissementFiltre(this.listeFiltresRelationEco, this.listeFiltresClients, _.pluck(this.listeTuilePanierSettings, "indicateur"));
                // Rafraichir listeTuileCatalogueSettings
                this.rafraichirListeTuileCatalogueSettings();
            };
            /**
             * Méthode permettant de mettre à jour les indicateurs clients
             * @returns {ng.IPromise<void>}
             */
            ModalePaniersControleur.prototype.majIndicateursClients = function () {
                // on va mettre à jour la liste relation avec les nouveaux indicateurs paramétrables si nécéssaire
                var listeEcartIndicateursParametrables = this.indicateurService.getListeEcartIndicateurParametrable(this.panierEnCours.listeChoixIndicateurs);
                this.indicateurService.setListeIndicateurChoix(this.panierEnCours.listeChoixIndicateurs);
                if (listeEcartIndicateursParametrables.length > 0) {
                    return this.listeClientsService.majClientsIndicateurs(listeEcartIndicateursParametrables);
                }
                else {
                    return this.$q.when();
                }
            };
            /**
             * Méthode appelé lors de la selection d'un panier
             * @returns {void}
             */
            ModalePaniersControleur.prototype.changePanier = function ($item) {
                if ($item.numero === 0) {
                    this.ajouterSelection();
                }
                else {
                    // on met à defaut le panier choisi
                    _.forEach(this.listePaniers, function (panier) {
                        if (panier.nom === $item.nom) {
                            panier.estDefaut = true;
                        }
                        else {
                            panier.estDefaut = false;
                        }
                    });
                }
                // supression du panier factice d'ajout de selection
                _.remove(this.listePaniers, function (panier) {
                    return panier.numero === 0;
                });
                // on initialise
                this.initialiser();
            };
            /**
             * Methode qui permet d'afficher ou non le message d'avertissement filtre
             * @param {string} nomFiltre1
             * @param {string} nomFiltre2
             * @param {string} nomFiltre3
             * @param {string} nomFiltre4
             * @return {void}
             */
            ModalePaniersControleur.prototype.afficherMessageAvertissementFiltre = function (nomFiltre1, nomFiltre2, nomFiltre3, nomFiltre4) {
                this.nomFiltre1 = nomFiltre1;
                this.nomFiltre2 = nomFiltre2;
                this.nomFiltre3 = nomFiltre3;
                this.nomFiltre4 = nomFiltre4;
            };
            /**
             * Méthode de vérification que le formaulaire est valide
             */
            ModalePaniersControleur.prototype.estFormulaireValide = function () {
                if (!this.panierEnCours.nom) {
                    //this.myForm["nom"].$invalid = true;
                    this.listeErreurs.push({ message: "Le champ Nom est obligatoire", champs: "Nom", ancre: "id-nom" });
                    return false;
                }
                return true;
            };
            ModalePaniersControleur.prototype.goToAnchor = function (ancre) {
                this.$location.hash(ancre);
                this.scroll.yOffset = 100;
                this.scroll();
            };
            /**
             * Action du bouton "Valider"
             * @returns {ng.IPromise<void>}
             */
            ModalePaniersControleur.prototype.valider = function () {
                var _this = this;
                this.goToAnchor("id-erreur-form");
                if (this.estFormulaireValide()) {
                    this.chargementEnCours = true;
                    this.panierEnCours.listeChoixIndicateurs = _.pluck(this.listeTuilePanierSettings, "indicateur");
                    return this.majIndicateursClients()
                        .then(function () {
                        return _this.preferencesService.ecrirePaniers(_this.listePaniers);
                    })
                        .then(function () {
                        var donneesDeSortie = {};
                        donneesDeSortie.panier = _this.panierEnCours;
                        _this.chargementEnCours = false;
                        _this.$modalInstance.close(donneesDeSortie);
                    }).catch(function (erreur) {
                        ModalePaniersControleur.logger.error("Erreur lors de l'enregistrement du panier dans les préférences", erreur.codeLibelle, erreur.libelle);
                        _this.chargementEnCours = false;
                        _this.popupService.showErreur(erreur);
                    });
                }
                else {
                    return this.$q.when();
                }
            };
            /**
             * Méthode pour savoir s'il faut afficher ou non le bouton gérer la selection
             * @returns {boolean}
             */
            ModalePaniersControleur.prototype.estAfficheBtnGererLaSelection = function () {
                //return !this.estEnEditionPanier && this.getNombreIndicateurPanier() > 0;
                return !this.estEnEditionPanier;
            };
            /**
             * Méthode pour savoir s'il faut afficher ou non le bouton supprimer la selection
             * @returns {boolean}
             */
            ModalePaniersControleur.prototype.estAfficheBtnSupprimerLaSelection = function () {
                return this.getNombreIndicateurPanier() > 0;
            };
            /**
             * Méthode pour savoir s'il faut afficher ou non le bouton valider
             * @returns {boolean}
             */
            ModalePaniersControleur.prototype.estValidable = function () {
                return this.estEnEditionPanier || this.estEnEditionCatalogue || !this.panierEnCours;
            };
            ModalePaniersControleur.prototype.estChangementPanierDisponible = function () {
                if (this.panierEnCours.nom) {
                    return true;
                }
                return false;
            };
            /**
             * Action du bouton "Fermer"
             * @returns {void}
             */
            ModalePaniersControleur.prototype.fermer = function () {
                this.$modalInstance.dismiss();
            };
            ModalePaniersControleur.CLASS_NAME = "ModalePaniersControleur";
            ModalePaniersControleur.logger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModalePaniersControleur.CLASS_NAME);
            //Injection des dependances
            ModalePaniersControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$rootScope,
                Portefeuille.Constantes.Inject.Angular.$scope,
                Portefeuille.Constantes.Inject.Services.modalePaniersService,
                Portefeuille.Constantes.Inject.Angular.$modalInstance,
                Portefeuille.Constantes.Inject.MyWay.data,
                Portefeuille.Constantes.Inject.Services.preferencesService,
                Portefeuille.Constantes.Inject.Services.popupService,
                Portefeuille.Constantes.Inject.Services.indicateurService,
                Portefeuille.Constantes.Inject.Services.listeClientsService,
                Portefeuille.Constantes.Inject.Angular.$q,
                Portefeuille.Constantes.Inject.MyWay.mwEvents,
                Portefeuille.Constantes.Inject.Angular.$location,
                Portefeuille.Constantes.Inject.Angular.$anchorScroll
            ];
            return ModalePaniersControleur;
        }());
        Controleurs.ModalePaniersControleur = ModalePaniersControleur;
        // Déclaration du controlleur
        Portefeuille.app.controller(ModalePaniersControleur.CLASS_NAME, ModalePaniersControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        var TemplateTableau;
        (function (TemplateTableau) {
            "use strict";
            var ColonneDataCAN1Controleur = (function () {
                function ColonneDataCAN1Controleur(serviceAgentExtended, $scope, eventService) {
                    this.serviceAgentExtended = serviceAgentExtended;
                    this.$scope = $scope;
                    this.eventService = eventService;
                    this.afficherDate = true;
                }
                /**
                 * Méthode qui renvoie le texte à afficher pour la colonne dernier CA
                 * @param client
                 */
                ColonneDataCAN1Controleur.prototype.getTexteCA = function (client) {
                    var texte = Portefeuille.Services.Utils.DataUtils.getTexteCA(client, Portefeuille.Enum.Indicateur.CODE.CA_N_MOINS_1.toString());
                    this.afficherDate = (texte === Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU) ? false : true;
                    return texte;
                };
                ColonneDataCAN1Controleur.prototype.getTexteDate = function (client) {
                    var texte = Portefeuille.Services.Utils.DataUtils.getTexteDate(client, Portefeuille.Enum.Indicateur.CODE.CA_N_MOINS_1.toString());
                    return texte;
                };
                ColonneDataCAN1Controleur.$inject = [
                    Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                    Portefeuille.Constantes.Inject.Angular.$scope,
                    Portefeuille.Constantes.Inject.Services.eventService
                ];
                return ColonneDataCAN1Controleur;
            }());
            TemplateTableau.ColonneDataCAN1Controleur = ColonneDataCAN1Controleur;
            Portefeuille.app.controller("ColonneDataCAN1Controleur", ColonneDataCAN1Controleur);
        })(TemplateTableau = Controleurs.TemplateTableau || (Controleurs.TemplateTableau = {}));
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        var TemplateTableau;
        (function (TemplateTableau) {
            "use strict";
            var ColonneDataCANControleur = (function () {
                function ColonneDataCANControleur(serviceAgentExtended, $scope, eventService) {
                    this.serviceAgentExtended = serviceAgentExtended;
                    this.$scope = $scope;
                    this.eventService = eventService;
                    this.afficherDate = true;
                }
                /**
                 * Méthode qui renvoie le texte à afficher pour la colonne dernier CA
                 * @param client
                 */
                ColonneDataCANControleur.prototype.getTexteCA = function (client) {
                    var texte = Portefeuille.Services.Utils.DataUtils.getTexteCA(client, Portefeuille.Enum.Indicateur.CODE.CA_N.toString());
                    this.afficherDate = (texte === Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU) ? false : true;
                    return texte;
                };
                ColonneDataCANControleur.prototype.getTexteDate = function (client) {
                    var texte = Portefeuille.Services.Utils.DataUtils.getTexteDate(client, Portefeuille.Enum.Indicateur.CODE.CA_N.toString());
                    return texte;
                };
                ColonneDataCANControleur.prototype.getTendance = function (client) {
                    var indic = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.CA_N });
                    return indic.tendance;
                };
                ColonneDataCANControleur.$inject = [
                    Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                    Portefeuille.Constantes.Inject.Angular.$scope,
                    Portefeuille.Constantes.Inject.Services.eventService
                ];
                return ColonneDataCANControleur;
            }());
            TemplateTableau.ColonneDataCANControleur = ColonneDataCANControleur;
            Portefeuille.app.controller("ColonneDataCANControleur", ColonneDataCANControleur);
        })(TemplateTableau = Controleurs.TemplateTableau || (Controleurs.TemplateTableau = {}));
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        var TemplateTableau;
        (function (TemplateTableau) {
            "use strict";
            var ColonneDataClientControleur = (function () {
                function ColonneDataClientControleur(serviceAgentExtended, $scope, eventService) {
                    this.serviceAgentExtended = serviceAgentExtended;
                    this.$scope = $scope;
                    this.eventService = eventService;
                    this.indicateurActif = Portefeuille.Constantes.Application.CHAINE_INDICATEUR_ACTIF;
                    this.indicateurInactif = Portefeuille.Constantes.Application.CHAINE_INDICATEUR_INACTIF;
                    this.indicateurProspect = Portefeuille.Constantes.Application.CHAINE_INDICATEUR_PROSPECT;
                    this.indicateurLeader = Portefeuille.Constantes.Application.CHAINE_INDICATEUR_LEADER;
                }
                /**
                 * Méthode qui permet de récupérer la valueur de la note du prospect
                 * @param client
                 */
                ColonneDataClientControleur.prototype.getNoteProspect = function (client) {
                    // Recherche de l'indicateur potentiel prospect (La liste peux ne renvoyer aucun indicateur ou 1 indicateur)
                    var indicateur = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.POTENTIEL_PROSPECT });
                    // Retourne l'indexe ou 0 si pas d'indicateur ou valeur null
                    return (indicateur && indicateur.valeur) ?
                        _.indexOf(Portefeuille.Constantes.Application.LIBELLE_NOTE_PROSPECT, indicateur.valeur) : 0;
                };
                /**
                 *
                 * @param client
                 * @param numero
                 */
                ColonneDataClientControleur.prototype.afficherEtoile = function (client, numeroEtoile) {
                    var noteProspect = this.getNoteProspect(client);
                    return noteProspect
                        && noteProspect > 0
                        && noteProspect >= numeroEtoile;
                };
                /**
                 * Méthode qui renvoie true si l'indicateur codeTypePersonne = 'prospect'
                 * @param client
                 */
                ColonneDataClientControleur.prototype.isProspect = function (client) {
                    return !client.estClient;
                };
                /**
                 * Méthode qui renvoie true si l'indicateur ActifInactif = 'Actif'
                 * @param client
                 */
                ColonneDataClientControleur.prototype.isActif = function (client) {
                    return !this.isProspect(client)
                        && client.estActifRenseigne
                        && client.estActif;
                };
                /**
                 * Méthode qui renvoie true si l'indicateur ActifInactif = 'Inactif'
                 * @param client
                 */
                ColonneDataClientControleur.prototype.isInactif = function (client) {
                    return !this.isProspect(client)
                        && client.estActifRenseigne
                        && !client.estActif
                        && !this.isSansContrat(client);
                };
                /**
                 * Méthode qui renvoie true si le client est sans contrat (et qu'il n'est pas prospect)
                 * @param client
                 */
                ColonneDataClientControleur.prototype.isSansContrat = function (client) {
                    return client.estSansContrat
                        && client.estClient;
                };
                ColonneDataClientControleur.prototype.isPremierEquipement = function (client) {
                    var indicateur = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG });
                    // Retourne l'indexe ou 0 si pas d'indicateur ou valeur null
                    if (indicateur
                        && indicateur.valeur
                        && indicateur.valeur !== ""
                        && indicateur.valeur !== Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU) {
                        this.indicateurPremierEquipement = ": " + indicateur.valeur;
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                ColonneDataClientControleur.$inject = [
                    Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                    Portefeuille.Constantes.Inject.Angular.$scope,
                    Portefeuille.Constantes.Inject.Services.eventService
                ];
                return ColonneDataClientControleur;
            }());
            TemplateTableau.ColonneDataClientControleur = ColonneDataClientControleur;
            Portefeuille.app.controller("ColonneDataClientControleur", ColonneDataClientControleur);
        })(TemplateTableau = Controleurs.TemplateTableau || (Controleurs.TemplateTableau = {}));
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        var TemplateTableau;
        (function (TemplateTableau) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             *
             */
            var ColonneDataDerniereRevueControleur = (function () {
                function ColonneDataDerniereRevueControleur() {
                }
                /**
                 * Restitue l'indicateur "dernière revue"
                 * @param client
                 */
                ColonneDataDerniereRevueControleur.prototype.recupererDerniereRevue = function (client) {
                    var indicateur;
                    // Recherche l'indicateur  date de dernière revue
                    indicateur = _.find(client.listeIndicateurs, function (indicateur) {
                        return indicateur &&
                            indicateur.code === Portefeuille.Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString();
                    });
                    return indicateur;
                };
                /**
                 * Valorise la date de dernière revue
                 * @param client
                 */
                ColonneDataDerniereRevueControleur.prototype.valoriserDateRevue = function (client) {
                    var indicateur;
                    indicateur = this.recupererDerniereRevue(client);
                    // Renvoi la date de dernière revue si elle est présente, sinon renvoi non connu
                    return indicateur &&
                        indicateur.valeurDate &&
                        moment(indicateur.valeurDate).isValid() &&
                        !moment(indicateur.valeurDate).isSame(Portefeuille.Constantes.Application.DATE_MIN) &&
                        !moment(indicateur.valeurDate).isSame(Portefeuille.Constantes.Application.DATE_MAX)
                        ? moment(indicateur.valeurDate).format("DD/MM/YYYY") :
                        Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                };
                /**
                 * Indique si le client à une revue ancienne
                 * @param client
                 */
                ColonneDataDerniereRevueControleur.prototype.ancienneRevue = function (client) {
                    var indicateur;
                    indicateur = this.recupererDerniereRevue(client);
                    return indicateur &&
                        indicateur.valeurDate &&
                        moment(indicateur.valeurDate).isValid() &&
                        !moment(indicateur.valeurDate).isSame(Portefeuille.Constantes.Application.DATE_MIN) &&
                        !moment(indicateur.valeurDate).isSame(Portefeuille.Constantes.Application.DATE_MAX) &&
                        moment(indicateur.valeurDate).isBefore(ColonneDataDerniereRevueControleur.dateLimite);
                };
                ColonneDataDerniereRevueControleur.CLASS_NAME = "ColonneDataDerniereRevueControleur";
                ColonneDataDerniereRevueControleur.logger = loggerClass(ColonneDataDerniereRevueControleur.CLASS_NAME);
                // la periode limite est positionné à 1 an
                ColonneDataDerniereRevueControleur.dateLimite = moment(new Date()).subtract(1, "year").toDate();
                ColonneDataDerniereRevueControleur.$inject = [];
                return ColonneDataDerniereRevueControleur;
            }());
            TemplateTableau.ColonneDataDerniereRevueControleur = ColonneDataDerniereRevueControleur;
            Portefeuille.app.controller(ColonneDataDerniereRevueControleur.CLASS_NAME, ColonneDataDerniereRevueControleur);
        })(TemplateTableau = Controleurs.TemplateTableau || (Controleurs.TemplateTableau = {}));
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        var TemplateTableau;
        (function (TemplateTableau) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             *
             */
            var ColonneDataDerniereRevueRelControleur = (function () {
                function ColonneDataDerniereRevueRelControleur() {
                }
                /**
                 * Restitue l'indicateur "dernière revue"
                 * @param relation
                 */
                ColonneDataDerniereRevueRelControleur.prototype.recupererDerniereRevue = function (relation) {
                    var indicateur;
                    // Recherche l'indicateur  date de dernière revue
                    indicateur = _.find(relation.listeIndicateurs, function (indicateur) {
                        return indicateur &&
                            indicateur.code === Portefeuille.Enum.Indicateur.CODEREL.REV_DATE_DERNIERE_REVUE.toString();
                    });
                    return indicateur;
                };
                /**
                 * Valorise la date de dernière revue
                 * @param relation
                 */
                ColonneDataDerniereRevueRelControleur.prototype.valoriserDateRevue = function (relation) {
                    var indicateur;
                    indicateur = this.recupererDerniereRevue(relation);
                    // Renvoi la date de dernière revue si elle est présente, sinon renvoi non connu
                    return indicateur &&
                        indicateur.valeurDate &&
                        moment(indicateur.valeurDate).isValid() &&
                        !moment(indicateur.valeurDate).isSame(Portefeuille.Constantes.Application.DATE_MIN) &&
                        !moment(indicateur.valeurDate).isSame(Portefeuille.Constantes.Application.DATE_MAX)
                        ? moment(indicateur.valeurDate).format("DD/MM/YYYY") :
                        Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                };
                /**
                 * Indique si le client à une revue ancienne
                 * @param relation
                 */
                ColonneDataDerniereRevueRelControleur.prototype.ancienneRevue = function (relation) {
                    var indicateur;
                    indicateur = this.recupererDerniereRevue(relation);
                    return indicateur &&
                        indicateur.valeurDate &&
                        moment(indicateur.valeurDate).isValid() &&
                        !moment(indicateur.valeurDate).isSame(Portefeuille.Constantes.Application.DATE_MIN) &&
                        !moment(indicateur.valeurDate).isSame(Portefeuille.Constantes.Application.DATE_MAX) &&
                        moment(indicateur.valeurDate).isBefore(TemplateTableau.ColonneDataDerniereRevueControleur.dateLimite);
                };
                ColonneDataDerniereRevueRelControleur.CLASS_NAME = "ColonneDataDerniereRevueRelControleur";
                ColonneDataDerniereRevueRelControleur.logger = loggerClass(ColonneDataDerniereRevueRelControleur.CLASS_NAME);
                // la periode limite est positionné à 1 an
                ColonneDataDerniereRevueRelControleur.dateLimite = moment(new Date()).subtract(1, "year").toDate();
                ColonneDataDerniereRevueRelControleur.$inject = [];
                return ColonneDataDerniereRevueRelControleur;
            }());
            TemplateTableau.ColonneDataDerniereRevueRelControleur = ColonneDataDerniereRevueRelControleur;
            Portefeuille.app.controller(ColonneDataDerniereRevueRelControleur.CLASS_NAME, ColonneDataDerniereRevueRelControleur);
        })(TemplateTableau = Controleurs.TemplateTableau || (Controleurs.TemplateTableau = {}));
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        var TemplateTableau;
        (function (TemplateTableau) {
            "use strict";
            var ColonneFluxCrediteurControleur = (function () {
                function ColonneFluxCrediteurControleur() {
                }
                ColonneFluxCrediteurControleur.prototype.getMontant = function (client) {
                    var texte = "";
                    var indic = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.FLUX_CREDITEURS_N });
                    if (indic) {
                        if (indic.valeurNumber !== undefined &&
                            indic.valeurNumber != null &&
                            indic.valeurNumber !== Number.POSITIVE_INFINITY &&
                            indic.valeurNumber !== Number.NEGATIVE_INFINITY) {
                            texte = indic.valeurNumber.toString().replace(/\B(?=(\d{3})+(?!\d))/g, String.fromCharCode(160)) + " k\u20AC";
                        }
                        else {
                            texte = Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                        }
                    }
                    return texte;
                };
                ColonneFluxCrediteurControleur.prototype.getTendance = function (client) {
                    var indic = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.FLUX_CREDITEURS_N });
                    return indic.tendance;
                };
                ColonneFluxCrediteurControleur.$inject = [
                    Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                    Portefeuille.Constantes.Inject.Angular.$scope,
                    Portefeuille.Constantes.Inject.Services.eventService
                ];
                return ColonneFluxCrediteurControleur;
            }());
            TemplateTableau.ColonneFluxCrediteurControleur = ColonneFluxCrediteurControleur;
            Portefeuille.app.controller("ColonneFluxCrediteurControleur", ColonneFluxCrediteurControleur);
        })(TemplateTableau = Controleurs.TemplateTableau || (Controleurs.TemplateTableau = {}));
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        var TemplateTableau;
        (function (TemplateTableau) {
            "use strict";
            var ColonneFluxDebiteurControleur = (function () {
                function ColonneFluxDebiteurControleur() {
                }
                ColonneFluxDebiteurControleur.prototype.getMontant = function (client) {
                    var texte = "";
                    var indic = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.FLUX_DEBITEURS_N });
                    if (indic) {
                        if (indic.valeurNumber !== undefined && indic.valeurNumber != null && indic.valeurNumber !== Number.POSITIVE_INFINITY && indic.valeurNumber !== Number.NEGATIVE_INFINITY) {
                            texte = indic.valeurNumber.toString().replace(/\B(?=(\d{3})+(?!\d))/g, String.fromCharCode(160)) + " k\u20AC";
                        }
                        else {
                            texte = Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                        }
                    }
                    return texte;
                };
                ColonneFluxDebiteurControleur.prototype.getTendance = function (client) {
                    var indic = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.FLUX_DEBITEURS_N });
                    return indic.tendance;
                };
                ColonneFluxDebiteurControleur.$inject = [
                    Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                    Portefeuille.Constantes.Inject.Angular.$scope,
                    Portefeuille.Constantes.Inject.Services.eventService
                ];
                return ColonneFluxDebiteurControleur;
            }());
            TemplateTableau.ColonneFluxDebiteurControleur = ColonneFluxDebiteurControleur;
            Portefeuille.app.controller("ColonneFluxDebiteurControleur", ColonneFluxDebiteurControleur);
        })(TemplateTableau = Controleurs.TemplateTableau || (Controleurs.TemplateTableau = {}));
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        var TemplateTableau;
        (function (TemplateTableau) {
            "use strict";
            var ColonnePnbAnneeNControleur = (function () {
                function ColonnePnbAnneeNControleur() {
                }
                ColonnePnbAnneeNControleur.prototype.getMontant = function (client) {
                    var texte = "";
                    var indic = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.PNB_N });
                    if (indic) {
                        if (indic.valeurNumber !== undefined && indic.valeurNumber != null && indic.valeurNumber !== Number.POSITIVE_INFINITY && indic.valeurNumber !== Number.NEGATIVE_INFINITY) {
                            texte = indic.valeurNumber.toString();
                        }
                    }
                    return texte;
                };
                ColonnePnbAnneeNControleur.prototype.getTendance = function (client) {
                    var indic = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.PNB_N });
                    return indic.tendance;
                };
                ColonnePnbAnneeNControleur.$inject = [
                    Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                    Portefeuille.Constantes.Inject.Angular.$scope,
                    Portefeuille.Constantes.Inject.Services.eventService
                ];
                return ColonnePnbAnneeNControleur;
            }());
            TemplateTableau.ColonnePnbAnneeNControleur = ColonnePnbAnneeNControleur;
            Portefeuille.app.controller("ColonnePnbAnneeNControleur", ColonnePnbAnneeNControleur);
        })(TemplateTableau = Controleurs.TemplateTableau || (Controleurs.TemplateTableau = {}));
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        var TemplateTableau;
        (function (TemplateTableau) {
            "use strict";
            var ColonneDataRelationControleur = (function () {
                function ColonneDataRelationControleur(serviceAgentExtended, $scope, eventService) {
                    this.serviceAgentExtended = serviceAgentExtended;
                    this.$scope = $scope;
                    this.eventService = eventService;
                    this.indicateurProspect = Portefeuille.Constantes.Application.CHAINE_INDICATEUR_PROSPECT;
                }
                /**
                 * Appel à la fonction de filtrage du tableau client du controleur ClientsControleur via EventSErvice
                 * @param idRelationFiltre
                 */
                ColonneDataRelationControleur.prototype.filtrerTableauClients = function (idRelationFiltre) {
                    this.eventService.filtrageTableauClientClientsControleur(idRelationFiltre);
                };
                /**
                 * Méthode qui renvoie true si l'indicateur codeTypePersonneRel = 'prospect'
                 * @param client
                 */
                ColonneDataRelationControleur.prototype.isProspect = function (relationEco) {
                    return (relationEco.estClient !== undefined && !relationEco.estClient);
                };
                ColonneDataRelationControleur.$inject = [
                    Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                    Portefeuille.Constantes.Inject.Angular.$scope,
                    Portefeuille.Constantes.Inject.Services.eventService
                ];
                return ColonneDataRelationControleur;
            }());
            TemplateTableau.ColonneDataRelationControleur = ColonneDataRelationControleur;
            Portefeuille.app.controller("ColonneDataRelationControleur", ColonneDataRelationControleur);
        })(TemplateTableau = Controleurs.TemplateTableau || (Controleurs.TemplateTableau = {}));
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        var TemplateTableau;
        (function (TemplateTableau) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            var ColonnePotentielProspectControleur = (function () {
                function ColonnePotentielProspectControleur() {
                }
                /**
                 * Valorise la note du potentiel prospect
                 * Paquet mep 27/03
                 * @param client
                 */
                ColonnePotentielProspectControleur.prototype.valoriserPotentielProspect = function (client) {
                    var indicateur;
                    // Recherche l'indicateur  potentiel prospect contenant une note
                    indicateur = _.find(client.listeIndicateurs, function (indicateur) {
                        return indicateur &&
                            indicateur.code === Portefeuille.Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString() &&
                            ~Portefeuille.Constantes.Tableau.VALEUR_POSSIBLE_POTENTIEL_PROSPECT.indexOf(indicateur.valeur);
                    });
                    // Renvoi la note si elle est présente, sinon renvoi non connu
                    return indicateur ? indicateur.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                };
                ColonnePotentielProspectControleur.CLASS_NAME = "ColonnePotentielProspectControleur";
                ColonnePotentielProspectControleur.logger = loggerClass(ColonnePotentielProspectControleur.CLASS_NAME);
                ColonnePotentielProspectControleur.$inject = [];
                return ColonnePotentielProspectControleur;
            }());
            TemplateTableau.ColonnePotentielProspectControleur = ColonnePotentielProspectControleur;
            Portefeuille.app.controller(ColonnePotentielProspectControleur.CLASS_NAME, ColonnePotentielProspectControleur);
        })(TemplateTableau = Controleurs.TemplateTableau || (Controleurs.TemplateTableau = {}));
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        var TemplateTableau;
        (function (TemplateTableau) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            var ColonneStatutControleur = (function () {
                function ColonneStatutControleur() {
                    this.indicateurActif = Portefeuille.Constantes.Application.CHAINE_INDICATEUR_ACTIF;
                    this.indicateurInactif = Portefeuille.Constantes.Application.CHAINE_INDICATEUR_INACTIF;
                    this.indicateurProspect = Portefeuille.Constantes.Application.CHAINE_INDICATEUR_PROSPECT;
                }
                /**
                 * Méthode qui renvoie true si l'indicateur codeTypePersonne = 'prospect'
                 * @param client
                 */
                ColonneStatutControleur.prototype.isProspect = function (client) {
                    return (client.estClient !== undefined && !client.estClient);
                };
                /**
                 * Méthode qui renvoie true si l'indicateur ActifInactif = 'Actif'
                 * @param client
                 */
                ColonneStatutControleur.prototype.isActif = function (client) {
                    return (client.estActifRenseigne && client.estActif);
                };
                /**
                 * Méthode qui renvoie true si l'indicateur ActifInactif = 'Inactif'
                 * @param client
                 */
                ColonneStatutControleur.prototype.isInactif = function (client) {
                    return (client.estActifRenseigne && !client.estActif);
                };
                ColonneStatutControleur.CLASS_NAME = "ColonneStatutControleur";
                ColonneStatutControleur.logger = loggerClass(ColonneStatutControleur.CLASS_NAME);
                ColonneStatutControleur.$inject = [];
                return ColonneStatutControleur;
            }());
            TemplateTableau.ColonneStatutControleur = ColonneStatutControleur;
            Portefeuille.app.controller(ColonneStatutControleur.CLASS_NAME, ColonneStatutControleur);
        })(TemplateTableau = Controleurs.TemplateTableau || (Controleurs.TemplateTableau = {}));
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        var TemplateTableau;
        (function (TemplateTableau) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            var ColonneTopCCControleur = (function () {
                function ColonneTopCCControleur() {
                }
                /**
                 * Valorise la couleur Top CC
                 * 24/01/2022
                 * @param client
                 */
                ColonneTopCCControleur.prototype.valoriserTopCC = function (client) {
                    var indicateur;
                    // Recherche le Top CC
                    indicateur = _.find(client.listeIndicateurs, function (indicateur) {
                        return indicateur &&
                            indicateur.code === Portefeuille.Enum.Indicateur.CODE.TOP_CC.toString() &&
                            ~Portefeuille.Constantes.Tableau.VALEUR_POSSIBLE_TOP_CC.indexOf(indicateur.valeur);
                    });
                    // Renvoi la valeur si elle est présente, sinon renvoi blanc
                    return indicateur ? indicateur.valeur : Portefeuille.Constantes.Tableau.VALEUR_POSSIBLE_TOP_CC[3];
                };
                ColonneTopCCControleur.CLASS_NAME = "ColonneTopCCControleur";
                ColonneTopCCControleur.logger = loggerClass(ColonneTopCCControleur.CLASS_NAME);
                ColonneTopCCControleur.$inject = [];
                return ColonneTopCCControleur;
            }());
            TemplateTableau.ColonneTopCCControleur = ColonneTopCCControleur;
            Portefeuille.app.controller(ColonneTopCCControleur.CLASS_NAME, ColonneTopCCControleur);
        })(TemplateTableau = Controleurs.TemplateTableau || (Controleurs.TemplateTableau = {}));
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Ensemble d'interfaces de modèles applicatifs
 * @module Portefeuille.Modeles.Application
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var Application;
        (function (Application) {
            "use strict";
            (function (COULEUR_GRANDE_COLONNE) {
                COULEUR_GRANDE_COLONNE[COULEUR_GRANDE_COLONNE["COULEUR_CLIENT"] = "#007399"] = "COULEUR_CLIENT";
                COULEUR_GRANDE_COLONNE[COULEUR_GRANDE_COLONNE["COULEUR_SANS_CONTRAT"] = "#D7BDE2"] = "COULEUR_SANS_CONTRAT";
                COULEUR_GRANDE_COLONNE[COULEUR_GRANDE_COLONNE["COULEUR_ACTIF"] = "#27BAE9"] = "COULEUR_ACTIF";
                COULEUR_GRANDE_COLONNE[COULEUR_GRANDE_COLONNE["COULEUR_PROSPECT"] = "#545494"] = "COULEUR_PROSPECT";
                COULEUR_GRANDE_COLONNE[COULEUR_GRANDE_COLONNE["COULEUR_RELATIONS"] = "#cc6666"] = "COULEUR_RELATIONS";
                COULEUR_GRANDE_COLONNE[COULEUR_GRANDE_COLONNE["COULEUR_PERIODE1"] = "#545494"] = "COULEUR_PERIODE1";
                COULEUR_GRANDE_COLONNE[COULEUR_GRANDE_COLONNE["COULEUR_PERIODE2"] = "#00cccc"] = "COULEUR_PERIODE2";
                COULEUR_GRANDE_COLONNE[COULEUR_GRANDE_COLONNE["COULEUR_PERIODE3"] = "#E6A016"] = "COULEUR_PERIODE3";
                COULEUR_GRANDE_COLONNE[COULEUR_GRANDE_COLONNE["COULEUR_MT_NEGATIF"] = "#FF0000"] = "COULEUR_MT_NEGATIF";
            })(Application.COULEUR_GRANDE_COLONNE || (Application.COULEUR_GRANDE_COLONNE = {}));
            var COULEUR_GRANDE_COLONNE = Application.COULEUR_GRANDE_COLONNE;
            ;
        })(Application = Modeles.Application || (Modeles.Application = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Ensemble d'interfaces de modèles applicatifs pour les statistiques
 * @module Portefeuille.Modeles.Application
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var ApplicationStats;
        (function (ApplicationStats) {
            "use strict";
        })(ApplicationStats = Modeles.ApplicationStats || (Modeles.ApplicationStats = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var Application;
        (function (Application) {
            "use strict";
        })(Application = Modeles.Application || (Modeles.Application = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Ensemble d'interfaces de modèles lié à la modale panier
 * @module Portefeuille.Modeles.Application
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var Application;
        (function (Application) {
            "use strict";
        })(Application = Modeles.Application || (Modeles.Application = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var Application;
        (function (Application) {
            "use strict";
        })(Application = Modeles.Application || (Modeles.Application = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var Application;
        (function (Application) {
            "use strict";
        })(Application = Modeles.Application || (Modeles.Application = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var Tableaux;
        (function (Tableaux) {
            var TableauClientEco = (function () {
                function TableauClientEco(handler, $filter, $parse, data) {
                    this.tableauColonneDataClient = {
                        title: "Client",
                        bind: "nom",
                        cssClass: "col-md-2 col-lg-2",
                        disableFilter: false,
                        template: "vues/templates-tableau/colonne-tableau-data-client.html"
                    };
                    this.width = "col-md-12 col-lg-12";
                    //public orderBy = "nom";
                    this.orderBy = "";
                    this.reserve = false;
                    this.perPage = 20;
                    this.multiSelect = false;
                    this.filterEnable = true;
                    this.sortEnable = true;
                    this.moreEnable = false;
                    this.caption = "Liste des clients";
                    this.theadSticky = "mw-zone-travail";
                    this.readOnly = false;
                    this.templateUrl = "";
                    this.data = [];
                    this.selectedItems = [];
                    this.disabledItems = [];
                    this.columns = [this.tableauColonneDataClient];
                    this.selectionChangeHandler = handler;
                    this.tableauColonneDataClient.comparator = new Tableaux.Comparator.ClientComparator($filter, $parse);
                    this.initialiser(data);
                }
                TableauClientEco.prototype.initialiser = function (data) {
                    if (!_.isEmpty(data)) {
                        var indicateurs = data[0].listeIndicateurs;
                        if (!_.isEmpty(indicateurs)) {
                            var listeColonnes = indicateurs.map(function (indic, index) {
                                var colonne;
                                if (indic.valeurNumber) {
                                    colonne = {
                                        title: indic.intitule,
                                        bind: "listeIndicateurs[" + index + "].valeurNumber",
                                        cssClass: "col-md-2 col-lg-2",
                                        disableFilter: true
                                    };
                                }
                                else {
                                    colonne = {
                                        title: indic.intitule,
                                        bind: "listeIndicateurs[" + index + "].valeur",
                                        cssClass: "col-md-2 col-lg-2",
                                        disableFilter: true
                                    };
                                }
                                switch (indic.typeIndicateur) {
                                    case Portefeuille.Enum.Indicateur.TYPE.DATE:
                                        colonne.filter = " | date: 'dd/MM/yyyy'";
                                        break;
                                    case Portefeuille.Enum.Indicateur.TYPE.MONTANT:
                                        colonne.filter = " | currency";
                                        break;
                                    default:
                                        break;
                                }
                                return colonne;
                            });
                            this.columns = this.columns.concat(listeColonnes);
                        }
                    }
                    this.data = data;
                };
                return TableauClientEco;
            }());
            Tableaux.TableauClientEco = TableauClientEco;
        })(Tableaux = Modeles.Tableaux || (Modeles.Tableaux = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var Tableaux;
        (function (Tableaux) {
            var TableauClient = (function () {
                function TableauClient(handler, handlerTable, $filter, $parse, data, choixIndicateurs, voirNbPersonne) {
                    this.tableauColonneDataClient = {
                        title: "Clients / Prospects",
                        bind: "nom",
                        cssClass: "col-md-2 colonne-clients",
                        disableFilter: false,
                        template: "vues/templates-tableau/colonne-tableau-data-client.html"
                    };
                    this.tableauColonneDataNbPersonnes = {
                        title: "Nb personnes / relation",
                        bind: "nbPersonneRelation",
                        cssClass: "col-md-2 text-align-right",
                        disableFilter: true
                    };
                    this.width = "col-md-12 col-lg-12";
                    this.reserve = false;
                    this.perPage = Portefeuille.Constantes.Application.NB_LIGNE_TABLEAU;
                    this.multiSelect = false;
                    this.filterEnable = true;
                    this.sortEnable = true;
                    this.moreEnable = false;
                    this.caption = "Liste des clients";
                    this.theadSticky = "mw-zone-travail";
                    this.readOnly = false;
                    this.templateUrl = "";
                    this.data = [];
                    this.selectedItems = [];
                    this.disabledItems = [];
                    this.columns = [this.tableauColonneDataClient, this.tableauColonneDataNbPersonnes];
                    this.hasNoneElements = Portefeuille.Constantes.Tableau.TAB_NO_ELEMENT_CLIENT;
                    if (voirNbPersonne === true) {
                        this.columns = [this.tableauColonneDataClient, this.tableauColonneDataNbPersonnes];
                    }
                    else {
                        this.columns = [this.tableauColonneDataClient];
                    }
                    this.selectionChangeHandler = handler;
                    this.tableHandler = handlerTable;
                    this.tableauColonneDataClient.comparator = new Tableaux.Comparator.ClientComparator($filter, $parse);
                    this.choixIndicateurs = choixIndicateurs;
                    this.initEtatFiltre(handler);
                    this.initialiser(data, $filter, $parse);
                }
                /**
                 *
                 * @param data
                 * @param $filter
                 * @param $parse
                 */
                TableauClient.prototype.initialiser = function (data, $filter, $parse) {
                    if (!_.isEmpty(data)) {
                        if (!_.isEmpty(this.choixIndicateurs)) {
                            var listeColonnes_1 = [];
                            _.forEach(this.choixIndicateurs, function (indicateurChoix) {
                                // v2 @nwo : certains cas peuvent avoir le premier client avec un indicateur manquant mais les autres OK, 
                                // donc on va tester sur tous les clients disponibles si jamais le 1er n'était pas entier
                                var indexIndicateur = -1;
                                _.find(data, function (personne) {
                                    return indexIndicateur = _.findIndex(personne.listeIndicateurs, function (indicateurData) {
                                        return indicateurData.code === indicateurChoix.indicateur.code;
                                    });
                                });
                                if (indexIndicateur !== -1 && indicateurChoix.indicateur.estVisibleColonne) {
                                    var colonne = void 0;
                                    if (indicateurChoix.indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.MONTANT
                                        || indicateurChoix.indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.NOMBRE
                                        || indicateurChoix.indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.POURCENT) {
                                        colonne = {
                                            title: indicateurChoix.indicateur.intitule,
                                            bind: "listeIndicateurs[" + indexIndicateur + "].valeurNumber",
                                            cssClass: "col-md-1",
                                            disableFilter: true
                                        };
                                    }
                                    else if (indicateurChoix.indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.DATE) {
                                        colonne = {
                                            title: indicateurChoix.indicateur.intitule,
                                            bind: "listeIndicateurs[" + indexIndicateur + "].valeurDate",
                                            cssClass: "col-md-1",
                                            disableFilter: true
                                        };
                                    }
                                    else {
                                        colonne = {
                                            title: indicateurChoix.indicateur.intitule,
                                            bind: "listeIndicateurs[" + indexIndicateur + "].valeur",
                                            cssClass: "col-md-1",
                                            disableFilter: true
                                        };
                                    }
                                    // gère le filter
                                    colonne.filter = "";
                                    var isEuros = false;
                                    if (indicateurChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.PNB_3112.toString()
                                        || indicateurChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.PNB_N.toString()
                                        || indicateurChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.PNB_N_MOINS_1.toString()) {
                                        isEuros = true;
                                    }
                                    switch (indicateurChoix.indicateur.typeIndicateur) {
                                        case Portefeuille.Enum.Indicateur.TYPE.DATE:
                                            colonne.filter = " | dateNC";
                                            break;
                                        case Portefeuille.Enum.Indicateur.TYPE.MONTANT:
                                            colonne.filter = " | montantFiltre: " + isEuros;
                                            colonne.cssClass = colonne.cssClass + " text-align-right";
                                            break;
                                        case Portefeuille.Enum.Indicateur.TYPE.POURCENT:
                                            colonne.filter = " | pourcentFiltre";
                                            colonne.cssClass = colonne.cssClass + " text-align-right";
                                            break;
                                        case Portefeuille.Enum.Indicateur.TYPE.NOMBRE:
                                            colonne.filter = " | nombreNC";
                                            colonne.cssClass = colonne.cssClass + " text-align-right";
                                            break;
                                        default:
                                            break;
                                    }
                                    // Gestion colonne CA
                                    if (indicateurChoix.indicateur.famille === Portefeuille.Enum.Indicateur.FAMILLE.CA) {
                                        if (indicateurChoix.indicateur.codeRest === Portefeuille.Enum.Indicateur.CODEREST.CA_N.toString()) {
                                            colonne.template = "vues/templates-tableau/colonne-tableau-data-ca-n.html";
                                        }
                                        if (indicateurChoix.indicateur.codeRest === Portefeuille.Enum.Indicateur.CODEREST.CA_N_MOINS_1.toString()) {
                                            colonne.template = "vues/templates-tableau/colonne-tableau-data-ca-n-1.html";
                                        }
                                    }
                                    if (indicateurChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.PNB_N.toString()) {
                                        colonne.template = "vues/templates-tableau/colonne-tableau-pnb-n.html";
                                    }
                                    if (indicateurChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.FLUX_CREDITEURS_N.toString()) {
                                        colonne.template = "vues/templates-tableau/colonne-tableau-flux-crediteur.html";
                                    }
                                    if (indicateurChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.FLUX_DEBITEURS_N.toString()) {
                                        colonne.template = "vues/templates-tableau/colonne-tableau-flux-debiteur.html";
                                    }
                                    if (indicateurChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString()) {
                                        colonne.template = "vues/templates-tableau/colonne-potentiel-prospect.html";
                                    }
                                    if (indicateurChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString()) {
                                        colonne.template = "vues/templates-tableau/colonne-date-derniere-revue.html";
                                    }
                                    if (indicateurChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.TOP_CC.toString()) {
                                        // pour Top CC : Trié par valeurNumber (Chaque pastille est associée à une valeur numérique pour pouvoir trier dans l'ordre : 1 = "Vert", 2="Orange")
                                        colonne.bind = "listeIndicateurs[" + indexIndicateur + "].valeurNumber";
                                        colonne.template = "vues/templates-tableau/colonne-tableau-top-cc.html";
                                    }
                                    colonne.filter += " | valeurNonConnuFiltre";
                                    // NOUVEL INDICATEUR, titre pour score
                                    var codeRest = indicateurChoix.indicateur.codeRest;
                                    if (codeRest === Portefeuille.Enum.Indicateur.CODEREST.SCORE_ACTIVATION.toString() ||
                                        codeRest === Portefeuille.Enum.Indicateur.CODEREST.SCORE_APPETENCE.toString()) {
                                        colonne.title = colonne.title + " (/100)";
                                    }
                                    if (codeRest === Portefeuille.Enum.Indicateur.CODEREST.SCORE_DEFAILLANCE.toString()) {
                                        colonne.title = colonne.title + " (/20)";
                                    }
                                    listeColonnes_1.push(colonne);
                                }
                            });
                            this.columns = this.columns.concat(listeColonnes_1);
                        }
                    }
                    this.data = data;
                };
                TableauClient.prototype.initEtatFiltre = function (clientsControleur) {
                    angular.element(document.querySelector(Portefeuille.Constantes.Application.CLASSE_COLONNE_RELATIONS)).ready(function () {
                        if (document.querySelector(Portefeuille.Constantes.Application.CLASSE_COLONNE_CLIENTS)) {
                            // Récupération de l'élément bouton filtre clients
                            var boutonFiltreClients_1 = angular.element(document.querySelector(Portefeuille.Constantes.Application.CLASSE_COLONNE_CLIENTS).querySelector(Portefeuille.Constantes.Application.CLASSE_BTN_FILTRE));
                            // Initialisation
                            clientsControleur.estAvecFiltreColonne = boutonFiltreClients_1.hasClass(Portefeuille.Constantes.Application.CLASSE_ACTIF);
                            // Evenement de clique sur le bouton
                            boutonFiltreClients_1.on("click", function () {
                                clientsControleur.estAvecFiltreColonne = boutonFiltreClients_1.hasClass(Portefeuille.Constantes.Application.CLASSE_ACTIF);
                            });
                        }
                    });
                };
                return TableauClient;
            }());
            Tableaux.TableauClient = TableauClient;
        })(Tableaux = Modeles.Tableaux || (Modeles.Tableaux = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var Tableaux;
        (function (Tableaux) {
            /* istanbul ignore next */
            var TableauRaisonsSociales = (function () {
                function TableauRaisonsSociales(colonneObjectif) {
                    this.tableauColonneId = {
                        title: Portefeuille.Constantes.Tableau.TAB_LISTE_CLIENTS_COLONNE_ID,
                        bind: "identifiantPersonne",
                        cssClass: "col-md-3"
                    };
                    this.tableauColonneRaisonSociale = {
                        title: Portefeuille.Constantes.Tableau.TAB_LISTE_CLIENTS_COLONNE_RAISON_SOCIALE,
                        bind: "raisonSociale",
                        cssClass: "col-md-3"
                    };
                    this.tableauColonneMarche = {
                        title: Portefeuille.Constantes.Tableau.TAB_LISTE_CLIENTS_COLONNE_MARCHE,
                        bind: "libelleSegment",
                        cssClass: "col-md-3"
                    };
                    this.tableauColonneObjectifDeFlux = {
                        title: Portefeuille.Constantes.Tableau.TAB_LISTE_CLIENTS_COLONNE_OBJECTIF_DE_FLUX,
                        bind: "",
                        cssClass: "col-md-3",
                        template: "vues/templates-tableau/colonne-objectif-flux.html"
                    };
                    this.width = "col-md-12 col-lg-12";
                    this.orderBy = "raisonSociale";
                    this.reserve = false;
                    this.perPage = 10;
                    this.multiSelect = false;
                    this.filterEnable = false;
                    this.sortEnable = false;
                    this.moreEnable = false;
                    this.caption = "Infos clients";
                    this.readOnly = false;
                    this.theadSticky = "mw-zone-travail";
                    this.templateUrl = "";
                    this.data = [];
                    this.selectedItems = [];
                    this.disabledItems = [];
                    this.columns = [
                        this.tableauColonneRaisonSociale,
                        this.tableauColonneId,
                        this.tableauColonneMarche
                    ];
                    this.hasNoneElements = Portefeuille.Constantes.Tableau.TAB_LISTE_CLIENTS_NO_ELEMENT;
                    if (colonneObjectif) {
                        this.columns = [
                            this.tableauColonneRaisonSociale,
                            this.tableauColonneId,
                            this.tableauColonneMarche,
                            this.tableauColonneObjectifDeFlux // affiche l'objectif de flux
                        ];
                    }
                }
                return TableauRaisonsSociales;
            }());
            Tableaux.TableauRaisonsSociales = TableauRaisonsSociales;
        })(Tableaux = Modeles.Tableaux || (Modeles.Tableaux = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var Tableaux;
        (function (Tableaux) {
            var TableauRelation = (function () {
                function TableauRelation(handler, handlerTable, $filter, $parse, data, choixIndicateurs) {
                    this.tableauColonneDataRelation = {
                        title: "Relations",
                        bind: "nom",
                        cssClass: "col-md-2 col-lg-2 colonne-relations",
                        disableFilter: false,
                        template: "vues/templates-tableau/colonne-tableau-data-relation.html"
                    };
                    this.tableauColonneDataNbClients = {
                        title: "Nb clients / prospects",
                        bind: "listeClients.length",
                        cssClass: "col-md-1 col-lg-1 text-align-right",
                        disableFilter: true
                    };
                    this.width = "col-md-12 col-lg-12";
                    this.orderBy = "nom";
                    this.reserve = false;
                    this.perPage = Portefeuille.Constantes.Application.NB_LIGNE_TABLEAU;
                    this.multiSelect = false;
                    this.filterEnable = true;
                    this.sortEnable = true;
                    this.moreEnable = false;
                    this.caption = "Liste des relations économiques";
                    this.theadSticky = "mw-zone-travail";
                    this.readOnly = false;
                    this.templateUrl = "";
                    this.data = [];
                    this.selectedItems = [];
                    this.disabledItems = [];
                    this.columns = [this.tableauColonneDataRelation, this.tableauColonneDataNbClients];
                    this.hasNoneElements = Portefeuille.Constantes.Tableau.TAB_NO_ELEMENT_RELATION;
                    this.selectionChangeHandler = handler;
                    this.tableHandler = handlerTable;
                    this.tableauColonneDataRelation.comparator = new Tableaux.Comparator.RelationComparator($filter, $parse);
                    this.choixIndicateurs = choixIndicateurs;
                    this.initEtatFiltre(handler);
                    this.initialiser(data);
                }
                TableauRelation.prototype.initialiser = function (data) {
                    if (!_.isEmpty(data)) {
                        if (!_.isEmpty(this.choixIndicateurs)) {
                            var listeColonnes_1 = [];
                            _.forEach(this.choixIndicateurs, function (indicateurChoix) {
                                var indexIndicateur = _.findIndex(data[0].listeIndicateurs, function (indicateurData) {
                                    return indicateurData.code === indicateurChoix.indicateur.codeRel;
                                });
                                if (indexIndicateur !== -1 && indicateurChoix.indicateur.estVisibleColonne) {
                                    var colonne = void 0;
                                    if (indicateurChoix.indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.MONTANT
                                        || indicateurChoix.indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.NOMBRE
                                        || indicateurChoix.indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.POURCENT) {
                                        colonne = {
                                            title: indicateurChoix.indicateur.intitule,
                                            bind: "listeIndicateurs[" + indexIndicateur + "].valeurNumber",
                                            cssClass: "col-md-1",
                                            disableFilter: true
                                        };
                                    }
                                    else if (indicateurChoix.indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.DATE) {
                                        colonne = {
                                            title: indicateurChoix.indicateur.intitule,
                                            bind: "listeIndicateurs[" + indexIndicateur + "].valeurDate",
                                            cssClass: "col-md-1",
                                            disableFilter: true
                                        };
                                    }
                                    else {
                                        colonne = {
                                            title: indicateurChoix.indicateur.intitule,
                                            bind: "listeIndicateurs[" + indexIndicateur + "].valeur",
                                            cssClass: "col-md-1",
                                            disableFilter: true
                                        };
                                    }
                                    colonne.filter = "";
                                    var isEuros = false;
                                    if (indicateurChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.PNB_3112.toString()
                                        || indicateurChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.PNB_N.toString()
                                        || indicateurChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.PNB_N_MOINS_1.toString()) {
                                        isEuros = true;
                                    }
                                    if (indicateurChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString()) {
                                        colonne.template = "vues/templates-tableau/colonne-date-derniere-revue-rel.html";
                                    }
                                    switch (indicateurChoix.indicateur.typeIndicateur) {
                                        case Portefeuille.Enum.Indicateur.TYPE.DATE:
                                            colonne.filter = " | dateNC";
                                            break;
                                        case Portefeuille.Enum.Indicateur.TYPE.MONTANT:
                                            colonne.filter = " | montantFiltre: " + isEuros;
                                            colonne.cssClass = colonne.cssClass + " text-align-right";
                                            break;
                                        case Portefeuille.Enum.Indicateur.TYPE.POURCENT:
                                            colonne.filter = " | pourcentFiltre";
                                            colonne.cssClass = colonne.cssClass + " text-align-right";
                                            break;
                                        case Portefeuille.Enum.Indicateur.TYPE.NOMBRE:
                                            colonne.filter = " | nombreNC";
                                            colonne.cssClass = colonne.cssClass + " text-align-right";
                                            break;
                                        default:
                                            break;
                                    }
                                    colonne.filter += " | valeurNonConnuFiltre";
                                    listeColonnes_1.push(colonne);
                                }
                            });
                            this.columns = this.columns.concat(listeColonnes_1);
                        }
                    }
                    this.data = data;
                };
                TableauRelation.prototype.initEtatFiltre = function (clientsControleur) {
                    angular.element(document.querySelector(Portefeuille.Constantes.Application.CLASSE_COLONNE_RELATIONS)).ready(function () {
                        if (document.querySelector(Portefeuille.Constantes.Application.CLASSE_COLONNE_RELATIONS)) {
                            // Récupération de l'élément bouton filtre relations
                            var boutonFiltreRelations_1 = angular.element(document.querySelector(Portefeuille.Constantes.Application.CLASSE_COLONNE_RELATIONS).querySelector(Portefeuille.Constantes.Application.CLASSE_BTN_FILTRE));
                            // Initialisation
                            clientsControleur.estAvecFiltreColonne = boutonFiltreRelations_1.hasClass(Portefeuille.Constantes.Application.CLASSE_ACTIF);
                            // Evenement de clique sur le bouton
                            boutonFiltreRelations_1.on("click", function () {
                                clientsControleur.estAvecFiltreColonne = boutonFiltreRelations_1.hasClass(Portefeuille.Constantes.Application.CLASSE_ACTIF);
                            });
                        }
                    });
                };
                return TableauRelation;
            }());
            Tableaux.TableauRelation = TableauRelation;
        })(Tableaux = Modeles.Tableaux || (Modeles.Tableaux = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

// Code récupéré depuis Connaissance Client / Ancienne version des liens
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-bloc-condition-filtre
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfBlocConditionFiltreControleur = (function () {
            /**
             * Constructeur
             */
            function PfBlocConditionFiltreControleur(filtreService, begacliService) {
                this.filtreService = filtreService;
                this.begacliService = begacliService;
                this.listeOperateurs = Portefeuille.Constantes.Indicateur.LISTE_OPERATEURS_FILTRE;
                this.isOpen = true;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfBlocConditionFiltreControleur.prototype.initialiser = function () {
                var _this = this;
                PfBlocConditionFiltreControleur.logger.info(">>> Appel de la méthode : PfBlocConditionFiltreControleur.initialiser <<<");
                //console.log("->no index : ", this.noIndex);
                //console.log("-> listeFiltres : ", this.listeFiltres);
                //console.log("-> listeIndicateurs : ", this.listeIndicateurs);
                this.sauvegardeIndicateur = null;
                this.filtreBegacli = this.begacliService.getFiltreBegacli();
                // Initialisation de l'indicateur
                if (this.filtre.indicateur) {
                    // on va garder les valeurs filtrées pour les indicateurs type texte et begacli ????
                    var listeValeursActives_1 = _.pluck(_.where(this.filtre.indicateur.listeValeurs, { "actif": true }), "libelle");
                    var indicateurTrouve = _.find(this.listeIndicateurs, function (indicateur) {
                        if (_this.filtre.indicateur.indicateur.code === indicateur.indicateur.code) {
                            _this.filtre.indicateur = indicateur;
                            _this.dernierIndicateurSelect = indicateur;
                            return true;
                        }
                        else {
                            return false;
                        }
                    });
                    // remise en place des valeurs actives dans listeValeurs
                    if (indicateurTrouve &&
                        this.filtre.indicateur.listeValeurs &&
                        this.filtre.indicateur.listeValeurs.length > 0) {
                        _.forEach(indicateurTrouve.listeValeurs, function (valeur) {
                            if (listeValeursActives_1.indexOf(valeur.libelle) >= 0) {
                                valeur.actif = true;
                            }
                        });
                    }
                    this.selectionnerListeFiltre();
                }
            };
            // dans HTML, listeIndicateurs remplacé par getListeIndicateurs(noIndex)
            // ce qui permet de filtrer BEGACLI dans le 1er ou 2ème filtre, si présent dans l'autre.
            PfBlocConditionFiltreControleur.prototype.getListeIndicateurs = function (noIndex) {
                // 2 filtres max. donc noIndex vaut 0 ou 1
                var liste;
                var presenceBegacli = this.presenceBegacliAutreIndex(noIndex);
                liste = [];
                _.forEach(this.listeIndicateurs, function (unIndicateur) {
                    if (presenceBegacli === true) {
                        if (unIndicateur.indicateur.code !== Portefeuille.Enum.Indicateur.CODE.BEGACLI.toString()) {
                            liste.push(unIndicateur);
                        }
                    }
                    else {
                        liste.push(unIndicateur);
                    }
                });
                //console.log("-> getListeIndicateurs noIndex : ", noIndex);
                //console.log("-> getListeIndicateurs liste : ", liste);
                return liste;
            };
            PfBlocConditionFiltreControleur.prototype.presenceBegacliAutreIndex = function (noIndex) {
                if (this.listeFiltres.length === 1) {
                    // pas d'autre filtre car 1 seul
                    return false;
                }
                ;
                // l'autre index
                var index = 0;
                if (noIndex === 0) {
                    index = 1;
                }
                ;
                // l'autre filtre
                var filtre = this.listeFiltres[index];
                if (filtre && filtre.indicateur && filtre.indicateur.indicateur && filtre.indicateur.indicateur.code === Portefeuille.Enum.Indicateur.CODE.BEGACLI.toString()) {
                    return true;
                }
                return false;
            };
            PfBlocConditionFiltreControleur.prototype.begacliChangeMaj = function (lettreBegacli) {
                // console.log("--> lettreBegacli Maj : ", lettreBegacli);
                if (lettreBegacli.choisiMaj === true) {
                    lettreBegacli.choisiMin = false;
                }
            };
            PfBlocConditionFiltreControleur.prototype.begacliChangeMin = function (lettreBegacli) {
                // console.log("--> lettreBegacli Min : ", lettreBegacli);
                if (lettreBegacli.choisiMin === true) {
                    lettreBegacli.choisiMaj = false;
                }
            };
            PfBlocConditionFiltreControleur.prototype.selectionnerListeFiltre = function () {
                var listeDeListeComparateur = {
                    "DateDerniereRevue": Portefeuille.Constantes.Indicateur.LISTE_COMPARATEUR_DERNIERE_REVUE,
                    "DateDerniereRevueRel": Portefeuille.Constantes.Indicateur.LISTE_COMPARATEUR_DERNIERE_REVUE
                };
                this.listeComparateurs = listeDeListeComparateur[this.filtre.indicateur.indicateur.code] ?
                    listeDeListeComparateur[this.filtre.indicateur.indicateur.code] :
                    Portefeuille.Constantes.Indicateur.LISTE_COMPARATEUR_COMMUNE;
                // Si on selectionne un indicateur n'ayant pas le comparateur selection reinitalise le comparateur
                if (_.indexOf(this.listeComparateurs, this.filtre.comparateur) === -1) {
                    this.filtre.comparateur = null;
                }
                // Si on selectionne un indicateur différent on reinitalise les valeurs 
                // (si on ne valide pas le filtre les valeurs précédentes sont restitué)
                if (this.sauvegardeIndicateur
                    && this.sauvegardeIndicateur.indicateur.code !== this.filtre.indicateur.indicateur.code) {
                    this.filtre.valeurUnique = undefined;
                    this.filtre.valeurMultiple1 = undefined;
                    this.filtre.valeurMultiple2 = undefined;
                }
                this.sauvegardeIndicateur = this.filtre.indicateur;
            };
            /**
             * Méthode appelée lors du clique sur le bouton Supprimer de la condition
             * @returns {void}
             */
            PfBlocConditionFiltreControleur.prototype.supprimerCondition = function () {
                // Initialisation de l'utilisation de l'indicateur à faux
                if (this.filtre.indicateur) {
                    if (this.estVueClient) {
                        this.filtre.indicateur.utilise = false;
                    }
                    else {
                        this.filtre.indicateur.utiliseRelationEco = false;
                    }
                }
                // Suppression du filtre de la liste des filtres
                this.listeFiltres.splice(this.listeFiltres.indexOf(this.filtre), 1);
                //S'il ne reste plus qu'un filtre
                if (this.listeFiltres.length === 1) {
                    // on supprime l'opérateur
                    this.listeFiltres[0].operateur = null;
                }
            };
            /**
             * Méthode appelée lors de la selection d'un indicateur
             * @returns {void}
             */
            PfBlocConditionFiltreControleur.prototype.selectionIndicateur = function () {
                this.selectionnerListeFiltre();
                if (this.dernierIndicateurSelect) {
                    if (this.estVueClient) {
                        this.dernierIndicateurSelect.utilise = false;
                    }
                    else {
                        this.dernierIndicateurSelect.utiliseRelationEco = false;
                    }
                }
                if (this.filtre.indicateur) {
                    if (this.estVueClient) {
                        this.filtre.indicateur.utilise = true;
                    }
                    else {
                        this.filtre.indicateur.utiliseRelationEco = true;
                    }
                    this.dernierIndicateurSelect = this.filtre.indicateur;
                }
            };
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "comparateurUniqueInactif", {
                get: function () {
                    return this.estComparateurDeTypeEntre
                        || (_.indexOf(Portefeuille.Constantes.Indicateur.LISTE_COMPARATEUR, this.filtre.comparateur) === -1);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Méthode permettant de savoir si un comparateur est du type Entre
             * @param {Enum.Filtre.COMPARATEUR} comparateur
             * @returns {boolean}
             */
            PfBlocConditionFiltreControleur.prototype.comparateurEstDeTypeEntre = function (comparateur) {
                return comparateur === Portefeuille.Enum.Filtre.COMPARATEUR.ENTRE;
            };
            /**
             * Méthode permettant de savoir si un comparateur est du type = NC
             * @param {Enum.Filtre.COMPARATEUR} comparateur
             * @returns {boolean}
             */
            PfBlocConditionFiltreControleur.prototype.comparateurEstDeTypeNC = function (comparateur) {
                return comparateur === Portefeuille.Enum.Filtre.COMPARATEUR.NC;
            };
            /**
             * Méthode permettant de savoir si un comparateur est du type = Null (PlaceHolder)
             * @param {Enum.Filtre.COMPARATEUR} comparateur
             * @returns {boolean}
             */
            PfBlocConditionFiltreControleur.prototype.comparateurNonRenseigne = function (comparateur) {
                return !comparateur;
            };
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "estComparateurDeTypeEntre", {
                /**
                 * Propriété récupérent le type d'indicateur
                 */
                get: function () {
                    return this.comparateurEstDeTypeEntre(this.filtre.comparateur);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "typeIndicateur", {
                /**
                 * Propriété récupérent le type d'indicateur
                 */
                get: function () {
                    return this.estIndicateur ? this.filtre.indicateur.indicateur.typeIndicateur : null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "codeIndicateur", {
                /**
                 * Propriété retourne le code de l'indicateur
                 */
                get: function () {
                    return this.estIndicateur ? this.filtre.indicateur.indicateur.code : null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "estIndicateur", {
                get: function () {
                    return (this.filtre
                        && this.filtre.indicateur
                        && this.filtre.indicateur.indicateur) ? true : false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "listeValeurs", {
                /**
                 * Propriété retournant la liste des valeur possible
                 */
                get: function () {
                    return (this.filtre
                        && this.filtre.indicateur) ?
                        this.filtre.indicateur.listeValeurs : null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "cacheChampSaisieDateSimple", {
                /**
                 * Propriété indiquant de cacher le champ saisie date simple
                 */
                get: function () {
                    return this.comparateurEstDeTypeEntre(this.filtre.comparateur)
                        || this.comparateurNonRenseigne(this.filtre.comparateur);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "cacheChampsSaisieDate", {
                /**
                 * Propriété indiquant de cacher le champ saisie date
                 */
                get: function () {
                    return (_.indexOf(Portefeuille.Constantes.Indicateur.LISTE_COMPARATEUR_DERNIERE_REVUE, this.filtre.comparateur) !== -1) ||
                        this.comparateurEstDeTypeNC(this.filtre.comparateur);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "estIndicateurDeTypeDate", {
                /**
                 * Propriété indiquant si c'est l'indicateur de type date
                 */
                get: function () {
                    return this.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.DATE;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "estIndicateurNumerique", {
                /**
                 * Propriété indiquant si c'est l'indicateur de type numérique
                 */
                get: function () {
                    return _.indexOf(Portefeuille.Constantes.Indicateur.LISTE_INDICATEUR_NUMERIQUE, this.typeIndicateur) !== -1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "estComparateurDeTypeNC", {
                /**
                 * Propriété indiquant le comparateur de type NC
                 */
                get: function () {
                    return this.comparateurEstDeTypeNC(this.filtre.comparateur);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "uniteMin", {
                /**
                 * Propriété retournant l'unité borne min de l'indicateur
                 */
                get: function () {
                    return this.getUnite("");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "uniteMax", {
                /**
                 * Propriété retournant l'unité borne max de l'indicateur
                 */
                get: function () {
                    return this.getUnite(this.codeIndicateur === Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG.toString() ? "mois" : "");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "estUniteMin", {
                get: function () {
                    return this.uniteMin
                        && this.uniteMin.length !== 0;
                },
                enumerable: true,
                configurable: true
            });
            PfBlocConditionFiltreControleur.prototype.getUnite = function (chaineMois) {
                return this.estIndicateurMontant ? this.devise :
                    (this.estIndicateurPourcent ? "%" :
                        (!this.estIndicateurDeTypeDate ? chaineMois : ""));
            };
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "devise", {
                /**
                 * Propriété retournant la devise de l'indicateur
                 */
                get: function () {
                    return (_.indexOf(Portefeuille.Constantes.Indicateur.INDICATEUR_EN_EURO, this.codeIndicateur) !== -1) ? "€" : "k€";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "estIndicateurMontant", {
                /**
                 * Propriété indiquant l'indicateur de type montant
                 */
                get: function () {
                    return this.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.MONTANT;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "estIndicateurPourcent", {
                /**
                 * Propriété indiquant l'indicateur de type pourcentage
                 */
                get: function () {
                    return this.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.POURCENT;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "estIndicateurTexte", {
                /**
                 * Propriété indiquant l'indicateur de type texte
                 */
                get: function () {
                    return this.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfBlocConditionFiltreControleur.prototype, "estIndicateurBegacli", {
                get: function () {
                    return this.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.BEGACLI;
                },
                enumerable: true,
                configurable: true
            });
            PfBlocConditionFiltreControleur.CLASS_NAME = "PfBlocConditionFiltreControleur";
            PfBlocConditionFiltreControleur.logger = loggerClass(PfBlocConditionFiltreControleur.CLASS_NAME);
            //Injection des dependances
            PfBlocConditionFiltreControleur.$inject = [
                Portefeuille.Constantes.Inject.Services.filtreService,
                Portefeuille.Constantes.Inject.Services.begacliService
            ];
            return PfBlocConditionFiltreControleur;
        }());
        Controleurs.PfBlocConditionFiltreControleur = PfBlocConditionFiltreControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfBlocConditionFiltreControleur", PfBlocConditionFiltreControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-bloc-condition-filtre
 * @module portefeuille.Directives
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfBlocConditionFiltre() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-bloc-condition-filtre/pf-bloc-condition-filtre-vue.html",
                controller: "PfBlocConditionFiltreControleur",
                controllerAs: "pfBlocConditionFiltreCtrl",
                bindToController: true,
                scope: {
                    listeIndicateurs: "=",
                    listeFiltres: "=",
                    noIndex: "=",
                    filtre: "=",
                    afficherOperateur: "=",
                    estVueClient: "="
                }
            };
        }
        Directives.mwPfBlocConditionFiltre = mwPfBlocConditionFiltre;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfBlocConditionFiltre", mwPfBlocConditionFiltre);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-choix-portefeuille
 * @module portefeuille.Controleurs
 * @author S00053555 (Eric ALBERT)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfChoixPortefeuilleControleur = (function () {
            /**
             * Constructeur
             */
            function PfChoixPortefeuilleControleur($location, contexteService, portefeuilleService, eventService, listeClientsService) {
                this.$location = $location;
                this.contexteService = contexteService;
                this.portefeuilleService = portefeuilleService;
                this.eventService = eventService;
                this.listeClientsService = listeClientsService;
                this.finInit = false;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfChoixPortefeuilleControleur.prototype.initialiser = function () {
                PfChoixPortefeuilleControleur.logger.info(">>> Appel de la méthode : PfChoixPortefeuilleControleur.initialiser <<<");
                this.eventService.setChoixPortfeuilleControleur(this);
                this.listePortefeuilles = null;
                this.ouvertureVoletChoixPortefeuille = false;
                this.listePortefeuillesDropDown = null;
                this.tousPortfeuillesSelectionnes = this.aTousPortefeuillesCoches();
            };
            /**
             * Annuler le choix du portefeuille
             */
            PfChoixPortefeuilleControleur.prototype.annulerChoixPortefeuille = function () {
                //recharge l'ancien portefeuille
                this.restaurerPoretefeuille();
                this.ouvertureVoletChoixPortefeuille = false;
                this.eventService.chargerListePortefeilleDropDown();
                this.finInit = true;
            };
            /**
             *
             * @param indexAgent
             */
            PfChoixPortefeuilleControleur.prototype.selectionnerListe = function (indexAgent) {
                return (indexAgent !== null &&
                    indexAgent !== undefined) ?
                    this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent :
                    this.listePortefeuilles;
            };
            /**
             *
             * @param indexAgent
             * @param estSuiviPar
             */
            PfChoixPortefeuilleControleur.prototype.aPortefeuillesNonCoches = function (indexAgent, estSuiviPar) {
                if (estSuiviPar === undefined) {
                    return (_.filter(this.selectionnerListe(indexAgent), function (item) {
                        return item.estAffiche === false || item.estAffiche === undefined;
                    }).length > 0);
                }
                else if (estSuiviPar) {
                    // return (_.where(this.selectionnerListe(indexAgent), { "estAffiche": false, "id": 0 }).length > 0);
                    return (_.where(this.selectionnerListe(indexAgent), function (item) {
                        return item.id <= Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && !item.estAffiche;
                    }).length > 0);
                }
                else {
                    //return (_.filter(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>
                    //    item.id > 0 && !item.estAffiche
                    //).length > 0);
                    return (_.filter(this.selectionnerListe(indexAgent), function (item) {
                        return item.id > Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && !item.estAffiche;
                    }).length > 0);
                }
            };
            /**
             *
             * @param indexAgent
             * @param estSuiviPar
             */
            PfChoixPortefeuilleControleur.prototype.aPortefeuilleCoche = function (indexAgent, estSuiviPar) {
                if (estSuiviPar === undefined) {
                    return (_.where(this.selectionnerListe(indexAgent), { "estAffiche": true }).length > 0);
                }
                else if (estSuiviPar) {
                    // return (_.where(this.selectionnerListe(indexAgent), { "estAffiche": true, "id": 0 }).length > 0);
                    return (_.where(this.selectionnerListe(indexAgent), function (item) {
                        return item.id <= Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && item.estAffiche;
                    }).length > 0);
                }
                else {
                    //return (_.filter(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>
                    //    item.id > 0 && item.estAffiche
                    //).length > 0);
                    return (_.filter(this.selectionnerListe(indexAgent), function (item) {
                        return item.id > Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && item.estAffiche;
                    }).length > 0);
                }
            };
            /**
             *
             * @param indexAgent
             * @param estSuiviPar
             */
            PfChoixPortefeuilleControleur.prototype.aTousPortefeuillesCoches = function (indexAgent, estSuiviPar) {
                if (estSuiviPar === undefined) {
                    return (_.where(this.selectionnerListe(indexAgent), { "estAffiche": false }).length === 0);
                }
                else if (estSuiviPar) {
                    //return (_.filter(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>
                    //    item.id === 0 && !item.estAffiche
                    //).length === 0);
                    return (_.filter(this.selectionnerListe(indexAgent), function (item) {
                        return item.id <= Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && !item.estAffiche;
                    }).length === 0);
                }
                else {
                    //return (_.filter(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>
                    //    item.id > 0 && !item.estAffiche
                    //).length === 0);
                    return (_.filter(this.selectionnerListe(indexAgent), function (item) {
                        return item.id > Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && !item.estAffiche;
                    }).length === 0);
                }
            };
            /**
             * Appelé lorsqu'on actionne une touche et que la case à cocher globale (3 états) a le focus.
             * @param $event
             * @param indexAgent
             */
            PfChoixPortefeuilleControleur.prototype.keyDownTroisEtat = function ($event, indexAgent) {
                if ($event.keyCode === MyWay.UI.Constants.CLAVIER_KEYCODE.ESPACE) {
                    this.forceMultiSelection(undefined, indexAgent);
                }
            };
            /**
             * Appelé lorsqu'on clique sur la case à cocher globale (3 états).
             * @param $event
             * @param indexAgent
             */
            PfChoixPortefeuilleControleur.prototype.forceMultiSelection = function ($event, indexAgent, estSuiviPar) {
                var target;
                if (this.setIndetermine(indexAgent, estSuiviPar)) {
                    target = false;
                }
                if (!this.aPortefeuilleCoche(indexAgent, estSuiviPar)) {
                    target = true;
                }
                if (indexAgent !== null &&
                    indexAgent !== undefined) {
                    angular.forEach(this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent, function (item) {
                        if (estSuiviPar === undefined) {
                            item.estAffiche = target;
                        }
                        else if (estSuiviPar) {
                            // if (item.id === 0) { item.estAffiche = target; }
                            // if (item.id > 0 && target) { item.estAffiche = !target; }
                            if (item.id <= Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC) {
                                item.estAffiche = target;
                            }
                            if (item.id > Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && target) {
                                item.estAffiche = !target;
                            }
                        }
                        else {
                            //if (item.id > 0) { item.estAffiche = target; }
                            //if (item.id === 0 && target) { item.estAffiche = !target; }
                            if (item.id > Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC) {
                                item.estAffiche = target;
                            }
                            if (item.id <= Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && target) {
                                item.estAffiche = !target;
                            }
                        }
                    });
                    this.listePortefeuillesDropDown[indexAgent].estAffiche = target;
                }
                else {
                    angular.forEach(this.listePortefeuilles, function (item) {
                        item.estAffiche = target;
                    });
                    angular.forEach(this.listePortefeuillesDropDown, function (item) {
                        item.estAffiche = target;
                    });
                }
                if ($event !== undefined) {
                    $event.preventDefault();
                }
            };
            /**
             *
             */
            PfChoixPortefeuilleControleur.prototype.getLabelTroisEtats = function (indexAgent, estSuiviPar) {
                return this.aPortefeuilleCoche(indexAgent, estSuiviPar) ?
                    Portefeuille.Constantes.Application.TXT_DESELECTIONNER_TOUT :
                    Portefeuille.Constantes.Application.TXT_SELECTIONNER_TOUT;
            };
            /**
             * Permet de retourner le nom et l'ID du portefeuille
             * @param indexPortfeuille position dans la liste de l'agent du portfeuille
             * @param indexAgent position dans la liste d'agent
             * @return {string}
             */
            PfChoixPortefeuilleControleur.prototype.getLibelleEtIdPortefeuille = function (indexPortfeuille, indexAgent) {
                if (this.listePortefeuillesDropDown &&
                    this.listePortefeuillesDropDown.length > 0 &&
                    this.listePortefeuillesDropDown[indexAgent] &&
                    this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent &&
                    this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent.length > 0 &&
                    this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille]) {
                    if (this.getEstPortefeuille(indexPortfeuille, indexAgent)) {
                        return this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].libelle + " - " +
                            this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].id;
                    }
                    else {
                        return this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].libelle;
                    }
                }
                else {
                    return "";
                }
            };
            /**
             * Permet de vérifier si on est sur un portefeuille : id <> 0
             * @param indexPortfeuille
             * @param indexAgent
             * @return {boolean}
             */
            PfChoixPortefeuilleControleur.prototype.getEstPortefeuille = function (indexPortfeuille, indexAgent) {
                if (this.listePortefeuillesDropDown &&
                    this.listePortefeuillesDropDown.length > 0 &&
                    this.listePortefeuillesDropDown[indexAgent] &&
                    this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent &&
                    this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent.length > 0 &&
                    this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille]) {
                    return this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].id > Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC - 1;
                }
                else {
                    return false;
                }
            };
            /**
             * Permet de vérifier si on est sur un suivi par complémenataire : id = 0
             * @param indexPortfeuille
             * @param indexAgent
             * @return {boolean}
             */
            PfChoixPortefeuilleControleur.prototype.getEstSuiviParComplementaire = function (indexPortfeuille, indexAgent) {
                if (this.listePortefeuillesDropDown &&
                    this.listePortefeuillesDropDown.length > 0 &&
                    this.listePortefeuillesDropDown[indexAgent] &&
                    this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent &&
                    this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent.length > 0 &&
                    this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille]) {
                    return this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].id < Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC;
                }
                else {
                    return false;
                }
            };
            /**
             * Permet de retourner le nom d'un agent
             * @param {number} index position dans la liste d'agent
             * @return {string} Nom de l'agent
             */
            PfChoixPortefeuilleControleur.prototype.getLibelleAgent = function (index) {
                if (this.listePortefeuillesDropDown &&
                    this.listePortefeuillesDropDown.length > 0 &&
                    this.listePortefeuillesDropDown[index]) {
                    return this.listePortefeuillesDropDown[index].nomPrenonAgent;
                }
                else {
                    return "";
                }
            };
            /**
             * obtenir le texte affiché sur le bouton du choix portfeuille
             */
            PfChoixPortefeuilleControleur.prototype.getTxtChoixPortefeuille = function () {
                if (this.listePortefeuilles &&
                    this.listePortefeuillesDropDown) {
                    var nbPortefeuillesSelectionne = _.where(this.portefeuilleService.regrouperToutPortfeuille(this.listePortefeuillesDropDown), { "estAffiche": true }).length;
                    return (Portefeuille.Constantes.Application.TXT_CHOIX_PORTEFEUILLE + " ") +
                        ("(" + nbPortefeuillesSelectionne + "/" + this.listePortefeuilles.length + ")");
                }
                else {
                    return Portefeuille.Constantes.Application.TXT_CHOIX_PORTEFEUILLE + " (???/???)";
                }
            };
            /**
             * Méthode pour deselectionner les choix portefeuille si selection de suivi par complémentaire ou deselectionner les choix suivi par complémentaire si selection de portefeuille
             * @param indexPortfeuille
             * @param indexAgent
             */
            PfChoixPortefeuilleControleur.prototype.majSelection = function (indexPortfeuille, indexAgent) {
                if (this.getEstSuiviParComplementaire(indexPortfeuille, indexAgent)) {
                    this.deselectChoixPortefeuille();
                    this.deselectAutresChoixSuiviParComplementaire(indexPortfeuille, indexAgent);
                }
                else {
                    this.deselectChoixSuiviParComplementaire();
                }
            };
            /**
             * Methode pour deselectionner les autres choix de domaine de suivi par complémentaire car un seul choix est possible
             * @param indexPortfeuille
             * @param indexAgent
             */
            PfChoixPortefeuilleControleur.prototype.deselectAutresChoixSuiviParComplementaire = function (indexPortfeuille, indexAgent) {
                var index = 0;
                this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent.forEach(function (ptf) {
                    if (index !== indexPortfeuille && (ptf.id < Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC)) {
                        ptf.estAffiche = false;
                    }
                    index++;
                });
            };
            /**
             * Deselectionner tous les choix typés portefeuille réél
             */
            PfChoixPortefeuilleControleur.prototype.deselectChoixPortefeuille = function () {
                this.listePortefeuillesDropDown.forEach(function (agent) {
                    agent.listPortefeuilleParAgent.forEach(function (ptf) {
                        if (ptf.id > Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC - 1) {
                            // console.log(ptf);
                            ptf.estAffiche = false;
                        }
                    });
                });
            };
            /**
             * Deselectionner tous les choix typés Suivi par complémentaire SPC
             */
            PfChoixPortefeuilleControleur.prototype.deselectChoixSuiviParComplementaire = function () {
                this.listePortefeuillesDropDown.forEach(function (agent) {
                    agent.listPortefeuilleParAgent.forEach(function (ptf) {
                        if (ptf.id < Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC) {
                            ptf.estAffiche = false;
                        }
                    });
                });
            };
            /**
             * Appelé lorsqu'on ouvre/ferme le dropdown de choix de portefeuille
             */
            PfChoixPortefeuilleControleur.prototype.ouvrirFermerChoixPortefeuille = function () {
                this.sauvegarderPoretefeuille();
            };
            /**
             *  Sauvegarder le Poretefeuille
             */
            PfChoixPortefeuilleControleur.prototype.sauvegarderPoretefeuille = function () {
                var _this = this;
                this.sauveListePortefeuille = [];
                this.listePortefeuilles.forEach(function (item) {
                    _this.sauveListePortefeuille.push(angular.copy(item));
                });
            };
            ;
            /**
             * Restaurer Poretefeuille via la sauvegarde ou sans
             */
            PfChoixPortefeuilleControleur.prototype.restaurerPoretefeuille = function () {
                var _this = this;
                if (this.sauveListePortefeuille) {
                    // vide la liste de portefeuille
                    this.listePortefeuilles.length = 0;
                    // Recharge la liste de portefeuille avec la sauvegarde
                    this.sauveListePortefeuille.forEach(function (item) {
                        _this.listePortefeuilles.push(item);
                    });
                    this.viderSauvagardePortefeuille();
                }
                else {
                    // Si pas de sauvegarde cela veux dire que c'est la première fois que le 
                    // choix portefeuille est ouvert. Donc on réinitalise la liste sans aucune selection.
                    this.listePortefeuilles.forEach(function (item) {
                        item.estAffiche = false;
                    });
                }
            };
            ;
            /**
             * Vider sauvagarde Portefeuille
             */
            PfChoixPortefeuilleControleur.prototype.viderSauvagardePortefeuille = function () {
                // Reinitalise la liste de la sauvegarde des portefeuille
                this.sauveListePortefeuille = null;
            };
            /**
             *
             * @param indexAgent
             */
            PfChoixPortefeuilleControleur.prototype.setIndetermine = function (indexAgent, estSuiviPar) {
                return (this.aPortefeuilleCoche(indexAgent, estSuiviPar) && this.aPortefeuillesNonCoches(indexAgent, estSuiviPar));
            };
            /**
             *
             */
            PfChoixPortefeuilleControleur.prototype.validerChoixPortefeuille = function () {
                var _this = this;
                this.viderSauvagardePortefeuille();
                if (this.sauveListePortefeuille) {
                    // vide la liste sauvegardé des portefeuilles
                    this.sauveListePortefeuille.length = 0;
                    this.sauveListePortefeuille = null;
                }
                this.listePortefeuilles = this.portefeuilleService.regrouperToutPortfeuille(this.listePortefeuillesDropDown);
                return this.portefeuilleService.setListePortfeuillesVisu(this.listePortefeuilles).then(function () {
                    _this.ouvertureVoletChoixPortefeuille = false;
                    // on vide la liste des relations afin de la reconstruire
                    _this.listeClientsService.razRelations();
                    if (_this.$location.path() === Portefeuille.Constantes.Url.CLIENTS) {
                        _this.listeClientsService.initialiserEstLimiteClientsAtteinte(null);
                        // Si on est sur la page de liste client/relations, on doit réinitialiser
                        // la liste sans tenir compte du forçage en place car la liste de portefeuille peut avoir changé
                        // SPC si on passe d'une visu 
                        var typeForcageAAppliquer = _this.portefeuilleService.aPortefeuillesReelAffiche() ?
                            Portefeuille.Enum.PageClients.TYPE_FORCAGE.TOUT : _this.portefeuilleService.aPortefeuilleExpertAffiche() ?
                            Portefeuille.Enum.PageClients.TYPE_FORCAGE.CLIENTS : undefined;
                        _this.portefeuilleService.setTypeForcage(typeForcageAAppliquer);
                        return _this.eventService.initialiserListeRelationEtClient(typeForcageAAppliquer);
                    }
                    else {
                        return _this.eventService.initialiserVueGlobale();
                    }
                });
            };
            PfChoixPortefeuilleControleur.prototype.nbPortefeuilleReel = function () {
                return this.portefeuilleService.nbPortefeuilleReel();
            };
            PfChoixPortefeuilleControleur.prototype.aSuiviParComplementaire = function () {
                return this.portefeuilleService.aSuiviParComplementaire();
            };
            PfChoixPortefeuilleControleur.prototype.aPortefeuilleReel = function () {
                return this.portefeuilleService.aPortefeuilleReel();
            };
            PfChoixPortefeuilleControleur.prototype.aPortefeuille = function () {
                return this.portefeuilleService.aPortefeuille();
            };
            /**
             * il y a-t-il une designation dans le contexte ?
             */
            PfChoixPortefeuilleControleur.prototype.estDesignation = function () {
                return this.contexteService.getDesignation() !== "";
            };
            /**
             * Stop la propagation d'un evenement (emit)
             * @param $event
             */
            PfChoixPortefeuilleControleur.prototype.stopPropagation = function ($event) {
                $event.stopPropagation();
            };
            /**
             *
             * @param indexAgent
             */
            PfChoixPortefeuilleControleur.prototype.isCheckedGlobal = function (indexAgent) {
                return !this.aPortefeuillesNonCoches(indexAgent) && !this.setIndetermine(indexAgent);
            };
            PfChoixPortefeuilleControleur.CLASS_NAME = "PfChoixPortefeuilleControleur";
            PfChoixPortefeuilleControleur.logger = loggerClass(PfChoixPortefeuilleControleur.CLASS_NAME);
            //Injection des dependances
            PfChoixPortefeuilleControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$location,
                Portefeuille.Constantes.Inject.Services.contexteService,
                Portefeuille.Constantes.Inject.Services.portefeuilleService,
                Portefeuille.Constantes.Inject.Services.eventService,
                Portefeuille.Constantes.Inject.Services.listeClientsService
            ];
            return PfChoixPortefeuilleControleur;
        }());
        Controleurs.PfChoixPortefeuilleControleur = PfChoixPortefeuilleControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfChoixPortefeuilleControleur", PfChoixPortefeuilleControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-choix-portefeuille
 * @module portefeuille.Directives
 * @author S0005355 (Eric ALBERT)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfChoixPortefeuille() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-choix-portefeuille/pf-choix-portefeuille-vue.html",
                controller: "PfChoixPortefeuilleControleur",
                controllerAs: "PfChoixPortefeuilleCtrl",
                bindToController: true,
                scope: {
                    listePortefeuillesDropDown: "=",
                    listePortefeuilles: "=",
                    ouvertureVoletChoixPortefeuille: "=",
                    estVueGlobalConsolide: "="
                }
            };
        }
        Directives.mwPfChoixPortefeuille = mwPfChoixPortefeuille;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfChoixPortefeuille", mwPfChoixPortefeuille);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-diagramme-colonne
 * @module portefeuille.Controleurs
 * @author S0005410 (Eric Jacquot)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfDiagrammeColonneControleur = (function () {
            // Variables utiles
            /**
             * Constructeur
             */
            function PfDiagrammeColonneControleur() {
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfDiagrammeColonneControleur.prototype.initialiser = function () {
                PfDiagrammeColonneControleur.logger.info(">>> Appel de la méthode : PfDiagrammeColonneControleur.initialiser <<<");
                if (!this.typeDiagramme) {
                    this.typeDiagramme = 0;
                }
            };
            PfDiagrammeColonneControleur.CLASS_NAME = "PfDiagrammeColonneControleur";
            PfDiagrammeColonneControleur.logger = loggerClass(PfDiagrammeColonneControleur.CLASS_NAME);
            //Injection des dependances
            PfDiagrammeColonneControleur.$inject = [];
            return PfDiagrammeColonneControleur;
        }());
        Controleurs.PfDiagrammeColonneControleur = PfDiagrammeColonneControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfDiagrammeColonneControleur", PfDiagrammeColonneControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-diagramme-colonne
 * @module portefeuille.Directives
 * @author S0005410 (Eric Jacquot)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfDiagrammeColonne() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-diagramme-colonne/pf-diagramme-colonne-vue.html",
                controller: "PfDiagrammeColonneControleur",
                controllerAs: "pfDiagrammeColonneCtrl",
                bindToController: true,
                transclude: true,
                scope: {
                    svgId: "=",
                    config: "=",
                    typeDiagramme: "=?"
                }
            };
        }
        Directives.mwPfDiagrammeColonne = mwPfDiagrammeColonne;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfDiagrammeColonne", mwPfDiagrammeColonne);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-detail-filtre
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfDetailFiltreControleur = (function () {
            // Variables utiles
            /**
             * Constructeur
             */
            function PfDetailFiltreControleur(eventService, begacliService) {
                this.eventService = eventService;
                this.begacliService = begacliService;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfDetailFiltreControleur.prototype.initialiser = function () {
                PfDetailFiltreControleur.logger.info(">>> Appel de la méthode : PfDetailFiltreControleur.initialiser <<<");
            };
            PfDetailFiltreControleur.prototype.supprimerFiltres = function () {
                this.begacliService.setCasesDecochees();
                this.eventService.supprimerTousLesFiltresClientsControleur();
            };
            PfDetailFiltreControleur.prototype.getTxtFiltre = function (filtre) {
                var txt;
                switch (filtre.indicateur.indicateur.typeIndicateur) {
                    case Portefeuille.Enum.Indicateur.TYPE.TEXTE:
                        txt = this.getTxtListeValeurs(filtre);
                        break;
                    case Portefeuille.Enum.Indicateur.TYPE.BEGACLI:
                        txt = this.begacliService.getFiltreBegacliTexte(filtre);
                        break;
                    default:
                        switch (filtre.comparateur) {
                            case Portefeuille.Enum.Filtre.COMPARATEUR.SUPERIEUR:
                                txt = this.getTxtValUnique(filtre);
                                break;
                            case Portefeuille.Enum.Filtre.COMPARATEUR.INFERIEUR:
                                txt = this.getTxtValUnique(filtre);
                                break;
                            case Portefeuille.Enum.Filtre.COMPARATEUR.EGALE:
                                txt = this.getTxtValUnique(filtre);
                                break;
                            case Portefeuille.Enum.Filtre.COMPARATEUR.ENTRE:
                                txt = this.getTxtValMultiple(filtre);
                                break;
                            case Portefeuille.Enum.Filtre.COMPARATEUR.NC:
                                txt = this.getTxtValNC(filtre);
                                break;
                            case Portefeuille.Enum.Filtre.COMPARATEUR.ECHUE:
                                txt = this.getTxtValDerniereRevue(filtre);
                                break;
                            case Portefeuille.Enum.Filtre.COMPARATEUR.ENCOURS:
                                txt = this.getTxtValDerniereRevue(filtre);
                                break;
                            case Portefeuille.Enum.Filtre.COMPARATEUR.NONREALISEE:
                                txt = this.getTxtValDerniereRevue(filtre);
                                break;
                            default:
                                txt = "";
                        }
                }
                return txt;
            };
            PfDetailFiltreControleur.prototype.getTxtListeValeurs = function (filtre) {
                var intitule = filtre.indicateur.indicateur.intitule;
                // regardderici ... le changement de nom , pas cool si sans contrat choisi en plus....
                //if (filtre.indicateur.indicateur.code === Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TEXTE.toString()) {
                //    intitule = "Avec contrat";
                //}
                // console.log("--> filtre.indicateur.indicateur.code : ", filtre.indicateur.indicateur.code);
                var listeVal = _.pluck(_.where(filtre.indicateur.listeValeurs, { "actif": true }), "libelle");
                return intitule + " = [" + listeVal.join(", ") + "]";
            };
            PfDetailFiltreControleur.prototype.getDevise = function (code) {
                return _.indexOf(Portefeuille.Constantes.Indicateur.INDICATEUR_EN_EURO, code) !== -1 ? "€" : "k€";
            };
            PfDetailFiltreControleur.prototype.getTxtValUnique = function (filtre) {
                return this.getTexteValeurs(filtre, false);
            };
            PfDetailFiltreControleur.prototype.getTxtValMultiple = function (filtre) {
                return this.getTexteValeurs(filtre, true);
            };
            PfDetailFiltreControleur.prototype.getTexteValeurs = function (filtre, multiple) {
                var uniteMin = "";
                var uniteMax = "";
                var valeurNumMin = multiple ? filtre.valeurMultiple1 : filtre.valeurUnique;
                var valeurMin = valeurNumMin.toString();
                var valeurNumMax = multiple ? filtre.valeurMultiple2 : null;
                var valeurMax = multiple ? valeurNumMax.toString() : null;
                var indicateur = filtre.indicateur.indicateur;
                if (indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.MONTANT) {
                    valeurMin = Portefeuille.Services.Utils.DataUtils.formatMontant(valeurNumMin);
                    valeurMax = valeurNumMax ? Portefeuille.Services.Utils.DataUtils.formatMontant(valeurNumMax) : null;
                    uniteMin = " " + this.getDevise(indicateur.code);
                    uniteMax = uniteMin;
                }
                if (indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.POURCENT) {
                    valeurMin = Portefeuille.Services.Utils.DataUtils.formatPourcent(valeurNumMin);
                    valeurMax = valeurNumMax ? Portefeuille.Services.Utils.DataUtils.formatPourcent(valeurNumMax) : null;
                    uniteMin = " %";
                    uniteMax = uniteMin;
                }
                if (indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.DATE) {
                    valeurMin = moment(valeurMin).format("DD/MM/YYYY");
                    valeurMax = valeurNumMax ? moment(valeurMax).format("DD/MM/YYYY") : null;
                    uniteMin = "";
                    uniteMax = uniteMin;
                }
                return (indicateur.intitule + " " + filtre.comparateur.toString() + " " + valeurMin + uniteMin) +
                    (valeurMax ? " et " + valeurMax + uniteMax : "");
            };
            /**
             * Renvoi un text pour les valeurs NC
             * @param filtre pour fournir l'intitulé
             */
            PfDetailFiltreControleur.prototype.getTxtValNC = function (filtre) {
                return filtre.indicateur.indicateur.intitule + " " + filtre.comparateur.toString();
            };
            /**
             * Renvoi un text pour indicateur derniere revue : les valeurs Echue, En cours, Non réalisé
             * @param filtre pour fournir l'intitulé
             */
            PfDetailFiltreControleur.prototype.getTxtValDerniereRevue = function (filtre) {
                return filtre.indicateur.indicateur.intitule + " " + filtre.comparateur.toString();
            };
            PfDetailFiltreControleur.CLASS_NAME = "PfDetailFiltreControleur";
            PfDetailFiltreControleur.logger = loggerClass(PfDetailFiltreControleur.CLASS_NAME);
            //Injection des dependances
            PfDetailFiltreControleur.$inject = [
                Portefeuille.Constantes.Inject.Services.eventService,
                Portefeuille.Constantes.Inject.Services.begacliService
            ];
            return PfDetailFiltreControleur;
        }());
        Controleurs.PfDetailFiltreControleur = PfDetailFiltreControleur;
        // Déclaration du controleur
        Portefeuille.app.controller(PfDetailFiltreControleur.CLASS_NAME, PfDetailFiltreControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-detail-filtre
 * @module portefeuille.Directives
 * @author S0005354 (JM FOLLETTI)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfDetailFiltre() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-detail-filtre/pf-detail-filtre-vue.html",
                controller: "PfDetailFiltreControleur",
                controllerAs: "pfDetailFiltreCtrl",
                bindToController: true,
                scope: {
                    listeFiltres: "="
                }
            };
        }
        Directives.mwPfDetailFiltre = mwPfDetailFiltre;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfDetailFiltre", mwPfDetailFiltre);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-diagramme-grande-barre
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        (function (COULEUR_GRANDE_BARRE) {
            COULEUR_GRANDE_BARRE[COULEUR_GRANDE_BARRE["VIOLET_NIV1"] = "#D955AC"] = "VIOLET_NIV1";
            COULEUR_GRANDE_BARRE[COULEUR_GRANDE_BARRE["VIOLET_NIV2"] = "#B84F6B"] = "VIOLET_NIV2";
            COULEUR_GRANDE_BARRE[COULEUR_GRANDE_BARRE["VIOLET_NIV3"] = "#66334A"] = "VIOLET_NIV3";
        })(Controleurs.COULEUR_GRANDE_BARRE || (Controleurs.COULEUR_GRANDE_BARRE = {}));
        var COULEUR_GRANDE_BARRE = Controleurs.COULEUR_GRANDE_BARRE;
        ;
        /**
         * Classe du controleur
         */
        var PfDiagrammeGrandeBarreControleur = (function () {
            /**
             * Constructeur
             */
            function PfDiagrammeGrandeBarreControleur($element) {
                this.$element = $element;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfDiagrammeGrandeBarreControleur.prototype.initialiser = function () {
                PfDiagrammeGrandeBarreControleur.logger.info(">>> Appel de la méthode : PfDiagrammeGrandeBarreControleur.initialiser <<<");
                this.valeurMax = this.recupererValeurMax();
                this.pourcentage = this.calculerRapportValeur();
            };
            /**
             * Méthode permettant de récupérer la plus grande valeur
             * @returns {void}
             */
            PfDiagrammeGrandeBarreControleur.prototype.recupererValeurMax = function () {
                return Math.max.apply(Math, (_.pluck(this.listeConfig, "valeur")));
            };
            /**
             * Méthode permettant de calculer le rapport de la valeur
             * @returns {void}
             */
            PfDiagrammeGrandeBarreControleur.prototype.calculerRapportValeur = function () {
                return (this.config.valeur * 80) / this.valeurMax;
            };
            PfDiagrammeGrandeBarreControleur.CLASS_NAME = "PfDiagrammeGrandeBarreControleur";
            PfDiagrammeGrandeBarreControleur.logger = loggerClass(PfDiagrammeGrandeBarreControleur.CLASS_NAME);
            //Injection des dependances
            PfDiagrammeGrandeBarreControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$element,
            ];
            return PfDiagrammeGrandeBarreControleur;
        }());
        Controleurs.PfDiagrammeGrandeBarreControleur = PfDiagrammeGrandeBarreControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfDiagrammeGrandeBarreControleur", PfDiagrammeGrandeBarreControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-diagramme-grande-barre
 * @module portefeuille.Directives
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfDiagrammeGrandeBarre() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-diagramme-grande-barre/pf-diagramme-grande-barre-vue.html",
                controller: "PfDiagrammeGrandeBarreControleur",
                controllerAs: "pfDiagrammeGrandeBarreCtrl",
                bindToController: true,
                scope: {
                    config: "=",
                    listeConfig: "="
                }
            };
        }
        Directives.mwPfDiagrammeGrandeBarre = mwPfDiagrammeGrandeBarre;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfDiagrammeGrandeBarre", mwPfDiagrammeGrandeBarre);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-diagramme-donut
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfDiagrammeDonutControleur = (function () {
            /**
             * Constructeur
             */
            function PfDiagrammeDonutControleur($element, creationDonutService, eventService, statService, scope) {
                this.$element = $element;
                this.creationDonutService = creationDonutService;
                this.eventService = eventService;
                this.statService = statService;
                this.scope = scope;
                this.listeDonuts = [Portefeuille.Constantes.Application.DONUT_PME_ESI, Portefeuille.Constantes.Application.DONUT_PRO];
                this.eventService.setPfDiagrammeDonutControleur(this);
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfDiagrammeDonutControleur.prototype.initialiser = function () {
                var _this = this;
                PfDiagrammeDonutControleur.logger.info(">>> Appel de la méthode : PfDiagrammeDonutControleur.initialiser <<<");
                this.$element.ready(function () {
                    var existeDonneePertinente = -1; //-1 indique non trouvée
                    //On cherche une donnée > 0; càd pertinente pour afficher un donut à pourcentages
                    existeDonneePertinente = _.findIndex(_this.config.listeDonnees, function (donneeLue) {
                        if (donneeLue && donneeLue.pourcentage > 0) {
                            return true;
                        }
                    });
                    // Gestion du cas avec aucun client 
                    if (_this.config.nombreClients === "0") {
                        existeDonneePertinente = -1;
                    }
                    if (existeDonneePertinente === -1) {
                        //Aucune donnée pertinente trouvée => affichage d'un donut Gris sans chiffre, ni légende
                        var configDonutGris = {
                            titre: _this.config.titre,
                            degrade: Portefeuille.Services.LibrairieD3.DEGRADE_DONUT.GRIS,
                            nombreClients: _this.config.nombreClients,
                            listeDonnees: []
                        };
                        configDonutGris.listeDonnees.push({
                            nom: "Donut Gris",
                            pourcentage: Number.MAX_VALUE
                        });
                        _this.creationDonutService.creerDonut(configDonutGris, _this.svgId);
                        _this.listeConfigPuceLegende = [];
                    }
                    else {
                        // Au moins un pourcentage est différent de 0, donc significatif => on affiche un donut coloré et la(les) légende(s) qui l'accompagne(nt)
                        _this.creationDonutService.creerDonut(_this.config, _this.svgId);
                        if (_this.config && _this.config.listeDonnees) {
                            _this.listeConfigPuceLegende = [];
                            var echelle_1 = _this.creationDonutService.getCouleurDegrade(_this.config.degrade);
                            _.forEach(_this.config.listeDonnees, function (donneeLue) {
                                var configPuceLegende = {};
                                configPuceLegende.intitule = donneeLue.nom;
                                configPuceLegende.couleur = echelle_1(donneeLue.nom);
                                configPuceLegende.affichagePuceLegendeActif = (donneeLue.pourcentage && donneeLue.pourcentage > 0) ? true : false;
                                _this.listeConfigPuceLegende.push(configPuceLegende);
                            });
                        }
                    }
                    _this.scope.$applyAsync();
                });
            };
            PfDiagrammeDonutControleur.prototype.echangerDonuts = function (item, model, label, evt) {
                var _this = this;
                this.statService.getStatsRdvEtPortefeuille().then(function (statsRdvEtPortefeuille) {
                    if (statsRdvEtPortefeuille) {
                        _this.config = Portefeuille.Services.Utils.ApplicationUtils.getConfigDonutSelonType(item, statsRdvEtPortefeuille);
                        _this.initialiser();
                    }
                });
            };
            PfDiagrammeDonutControleur.CLASS_NAME = "PfDiagrammeDonutControleur";
            PfDiagrammeDonutControleur.logger = loggerClass(PfDiagrammeDonutControleur.CLASS_NAME);
            //Injection des dependances
            PfDiagrammeDonutControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$element,
                Portefeuille.Constantes.Inject.LibrairieD3.creationDonutService,
                Portefeuille.Constantes.Inject.Services.eventService,
                Portefeuille.Constantes.Inject.Services.statService,
                Portefeuille.Constantes.Inject.Angular.$scope
            ];
            return PfDiagrammeDonutControleur;
        }());
        Controleurs.PfDiagrammeDonutControleur = PfDiagrammeDonutControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfDiagrammeDonutControleur", PfDiagrammeDonutControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-diagramme-donut
 * @module portefeuille.Directives
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfDiagrammeDonut() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-diagramme-donut/pf-diagramme-donut-vue.html",
                controller: "PfDiagrammeDonutControleur",
                controllerAs: "pfDiagrammeDonutCtrl",
                bindToController: true,
                scope: {
                    svgId: "=",
                    config: "="
                }
            };
        }
        Directives.mwPfDiagrammeDonut = mwPfDiagrammeDonut;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfDiagrammeDonut", mwPfDiagrammeDonut);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-diagramme-petite-barre
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        (function (COULEUR_PETITE_BARRE) {
            COULEUR_PETITE_BARRE[COULEUR_PETITE_BARRE["BLEU_NIV1"] = "#76DDFB"] = "BLEU_NIV1";
            COULEUR_PETITE_BARRE[COULEUR_PETITE_BARRE["BLEU_NIV2"] = "#53A8E2"] = "BLEU_NIV2";
            COULEUR_PETITE_BARRE[COULEUR_PETITE_BARRE["BLEU_NIV3"] = "#CFE3F0"] = "BLEU_NIV3";
        })(Controleurs.COULEUR_PETITE_BARRE || (Controleurs.COULEUR_PETITE_BARRE = {}));
        var COULEUR_PETITE_BARRE = Controleurs.COULEUR_PETITE_BARRE;
        ;
        /**
         * Classe du controleur
         */
        var PfDiagrammePetiteBarreControleur = (function () {
            /**
             * Constructeur
             */
            function PfDiagrammePetiteBarreControleur() {
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfDiagrammePetiteBarreControleur.prototype.initialiser = function () {
                PfDiagrammePetiteBarreControleur.logger.info(">>> Appel de la méthode : PfDiagrammePetiteBarreControleur.initialiser <<<");
                this.valeurMax = this.recupererValeurMax();
                this.pourcentage = this.calculerRapportValeur();
            };
            /**
             * Méthode permettant de récupérer la plus grande valeur
             * @returns {void}
             */
            PfDiagrammePetiteBarreControleur.prototype.recupererValeurMax = function () {
                return Math.max.apply(Math, (_.pluck(this.listeConfig, "valeur")));
            };
            /**
             * Méthode permettant de calculer le rapport de la valeur
             * @returns {void}
             */
            PfDiagrammePetiteBarreControleur.prototype.calculerRapportValeur = function () {
                return (this.config.valeur * 80) / this.valeurMax;
            };
            PfDiagrammePetiteBarreControleur.CLASS_NAME = "PfDiagrammePetiteBarreControleur";
            PfDiagrammePetiteBarreControleur.logger = loggerClass(PfDiagrammePetiteBarreControleur.CLASS_NAME);
            //Injection des dependances
            PfDiagrammePetiteBarreControleur.$inject = [];
            return PfDiagrammePetiteBarreControleur;
        }());
        Controleurs.PfDiagrammePetiteBarreControleur = PfDiagrammePetiteBarreControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfDiagrammePetiteBarreControleur", PfDiagrammePetiteBarreControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-diagramme-petite-barre
 * @module portefeuille.Directives
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfDiagrammePetiteBarre() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-diagramme-petite-barre/pf-diagramme-petite-barre-vue.html",
                controller: "PfDiagrammePetiteBarreControleur",
                controllerAs: "pfDiagrammePetiteBarreCtrl",
                bindToController: true,
                scope: {
                    config: "=",
                    listeConfig: "="
                }
            };
        }
        Directives.mwPfDiagrammePetiteBarre = mwPfDiagrammePetiteBarre;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfDiagrammePetiteBarre", mwPfDiagrammePetiteBarre);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-core-draggable
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfCoreDraggableControleur = (function () {
            // Variables utiles
            /**
             * Constructeur
             */
            function PfCoreDraggableControleur($scope, $element, pfDragAndDropService) {
                var _this = this;
                this.$scope = $scope;
                this.$element = $element;
                this.pfDragAndDropService = pfDragAndDropService;
                /**
                 * Variable contenant la méthode permettant de gérer l'événement dragStart
                 * @param {JQueryEventObject} event
                 */
                /* istanbul ignore next */
                this.dragStart = function (event) {
                    if (_this.dragSettings.dragStartBeforeEvent) {
                        _this.dragSettings.dragStartBeforeEvent();
                    }
                    var listeDropTargetElements = document.getElementById(_this.dragSettings.idHTMLElementConteneur).getElementsByClassName(Portefeuille.Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ELEMENT);
                    _.forEach(listeDropTargetElements, function (dropTargetElement) {
                        dropTargetElement.classList.add(Portefeuille.Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ON_DRAG);
                    });
                    _this.pfDragAndDropService.setDonnees(_this.dragSettings.donneesATransmettre);
                };
                /**
                 * Variable contenant la méthode permettant de gérer l'événement dragEnd
                 * @param {JQueryEventObject} event
                 */
                /* istanbul ignore next */
                this.dragEnd = function (event) {
                    if (_this.dragSettings.dragEndBeforeEvent) {
                        _this.dragSettings.dragEndBeforeEvent();
                    }
                    var listeDropTargetElements = document.getElementById(_this.dragSettings.idHTMLElementConteneur).getElementsByClassName(Portefeuille.Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ELEMENT);
                    _.forEach(listeDropTargetElements, function (dropTargetElement) {
                        dropTargetElement.classList.remove(Portefeuille.Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ON_DRAG);
                    });
                };
                /**
                 * Variable contenant la méthode permettant d'activer le drag
                 */
                this.activerDrag = function () {
                    _this.dragSettings.estActiver = true;
                    _this.$element.attr(Portefeuille.Constantes.DragAndDrop.ATTRIBUT_DRAGGABLE, Portefeuille.Constantes.DragAndDrop.STRING_VALUE_TRUE);
                };
                /**
                 * Variable contenant la méthode permettant de desactiver le drag
                 */
                this.desactiverDrag = function () {
                    _this.dragSettings.estActiver = false;
                    _this.$element.attr(Portefeuille.Constantes.DragAndDrop.ATTRIBUT_DRAGGABLE, Portefeuille.Constantes.DragAndDrop.STRING_VALUE_FALSE);
                };
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfCoreDraggableControleur.prototype.initialiser = function () {
                this.dragSettings = this.$scope.dragSettings;
                this.dragSettings.activerDrag = this.activerDrag;
                this.dragSettings.desactiverDrag = this.desactiverDrag;
                if (this.dragSettings.estActiver) {
                    this.activerDrag();
                }
                else {
                    this.desactiverDrag();
                }
                this.$element.bind(Portefeuille.Constantes.DragAndDrop.EVENT_LISTENER_DRAGSTART, this.dragStart); // Gestion du dragstart
                this.$element.bind(Portefeuille.Constantes.DragAndDrop.EVENT_LISTENER_DRAGEND, this.dragEnd); // Gestion du dragend
            };
            PfCoreDraggableControleur.CLASS_NAME = "PfCoreDraggableControleur";
            PfCoreDraggableControleur.logger = loggerClass(PfCoreDraggableControleur.CLASS_NAME);
            //Injection des dependances
            PfCoreDraggableControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$scope,
                Portefeuille.Constantes.Inject.Angular.$element,
                Portefeuille.Constantes.Inject.Services.pfDragAndDropService
            ];
            return PfCoreDraggableControleur;
        }());
        Controleurs.PfCoreDraggableControleur = PfCoreDraggableControleur;
        // Déclaration du controleur
        Portefeuille.app.controller(PfCoreDraggableControleur.CLASS_NAME, PfCoreDraggableControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-core-draggable
 * @module portefeuille.Directives
 * @author S0078068 (Yannis VESSEREAU)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfCoreDraggable() {
            return {
                restrict: "A",
                controller: "PfCoreDraggableControleur",
                bindToController: true,
                scope: {
                    dragSettings: "="
                }
            };
        }
        Directives.mwPfCoreDraggable = mwPfCoreDraggable;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfCoreDraggable", mwPfCoreDraggable);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-core-drop-target
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfCoreDropTargetControleur = (function () {
            // Variables utiles
            /**
             * Constructeur
             */
            function PfCoreDropTargetControleur($scope, $element, pfDragAndDropService) {
                var _this = this;
                this.$scope = $scope;
                this.$element = $element;
                this.pfDragAndDropService = pfDragAndDropService;
                /**
                 * Méthode permettant de gérer l'événement dragover
                 * @param {JQueryEventObject} event
                 */
                /* istanbul ignore next */
                this.onDragOver = function (event) {
                    event.preventDefault();
                };
                /**
                 * Méthode permettant de gérer l'événement drop
                 * @param {JQueryEventObject} event
                 */
                /* istanbul ignore next */
                this.onDrop = function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    var listeDropTargetElements = document.
                        getElementById(_this.dropSettings.idHTMLElementConteneur).
                        getElementsByClassName(Portefeuille.Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ELEMENT);
                    _.forEach(listeDropTargetElements, function (dropTargetElement) {
                        dropTargetElement.classList.remove(Portefeuille.Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ON_DRAG);
                    });
                    var donnees = _this.pfDragAndDropService.getDonnees();
                    _this.dropSettings.dropEventAction(donnees);
                };
                /**
                 * Méthode permettant de gérer l'événement dragenter
                 * @param {JQueryEventObject} event
                 */
                //private onDragEnter = (event: JQueryEventObject) => {
                //    event.preventDefault();
                //};
                /**
                 * Méthode permettant de gérer l'événement dragleave
                 * @param {JQueryEventObject} event
                 */
                //private onDragLeave = (event: JQueryEventObject) => {
                //    event.preventDefault();
                //};
                /**
                 * Variable contenant la méthode permettant d'activer le dragover
                 */
                this.activerDragOver = function () {
                    _this.dropSettings.estActiver = true;
                    _this.$element.bind(Portefeuille.Constantes.DragAndDrop.EVENT_LISTENER_DRAGOVER, _this.onDragOver);
                    _this.$element.addClass(Portefeuille.Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ELEMENT);
                };
                /**
                 * Variable contenant la méthode permettant de desactiver le dragover
                 */
                this.desactiverDragOver = function () {
                    _this.dropSettings.estActiver = false;
                    _this.$element.unbind(Portefeuille.Constantes.DragAndDrop.EVENT_LISTENER_DRAGOVER, _this.onDragOver);
                    _this.$element.removeClass(Portefeuille.Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ELEMENT);
                    _this.$element.removeClass(Portefeuille.Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ON_DRAG);
                };
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfCoreDropTargetControleur.prototype.initialiser = function () {
                this.dropSettings = this.$scope.dropSettings;
                this.dropSettings.activerDragOver = this.activerDragOver;
                this.dropSettings.desactiverDragOver = this.desactiverDragOver;
                if (this.dropSettings.estActiver) {
                    this.activerDragOver();
                }
                else {
                    this.desactiverDragOver();
                }
                this.$element.bind(Portefeuille.Constantes.DragAndDrop.EVENT_LISTENER_DROP, this.onDrop); // Gestion du drop
                //this.$element.bind("dragenter", this.onDragEnter); // Gestion du dragenter
                //this.$element.bind("dragleave", this.onDragLeave); // Gestion du dragleave
            };
            PfCoreDropTargetControleur.CLASS_NAME = "PfCoreDropTargetControleur";
            PfCoreDropTargetControleur.logger = loggerClass(PfCoreDropTargetControleur.CLASS_NAME);
            //Injection des dependances
            PfCoreDropTargetControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$scope,
                Portefeuille.Constantes.Inject.Angular.$element,
                Portefeuille.Constantes.Inject.Services.pfDragAndDropService
            ];
            return PfCoreDropTargetControleur;
        }());
        Controleurs.PfCoreDropTargetControleur = PfCoreDropTargetControleur;
        // Déclaration du controleur
        Portefeuille.app.controller(PfCoreDropTargetControleur.CLASS_NAME, PfCoreDropTargetControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-core-drop-target
 * @module portefeuille.Directives
 * @author S0078068 (Yannis VESSEREAU)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfCoreDropTarget() {
            return {
                restrict: "A",
                controller: "PfCoreDropTargetControleur",
                bindToController: true,
                scope: {
                    dropSettings: "="
                }
            };
        }
        Directives.mwPfCoreDropTarget = mwPfCoreDropTarget;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfCoreDropTarget", mwPfCoreDropTarget);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Constantes;
    (function (Constantes) {
        "use strict";
        var DragAndDrop;
        (function (DragAndDrop) {
            DragAndDrop.EVENT_LISTENER_DRAGSTART = "dragstart";
            DragAndDrop.EVENT_LISTENER_DRAGEND = "dragend";
            DragAndDrop.EVENT_LISTENER_DRAGOVER = "dragover";
            DragAndDrop.EVENT_LISTENER_DROP = "drop";
            DragAndDrop.ATTRIBUT_DRAGGABLE = "draggable";
            DragAndDrop.STRING_VALUE_TRUE = "true";
            DragAndDrop.STRING_VALUE_FALSE = "false";
            DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ELEMENT = "pf-drop-target-element";
            DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ON_DRAG = "pf-drop-target-on-drag";
        })(DragAndDrop = Constantes.DragAndDrop || (Constantes.DragAndDrop = {}));
    })(Constantes = Portefeuille.Constantes || (Portefeuille.Constantes = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Ensemble d'interfaces de modèles drag and drop
 * @module Portefeuille.Modeles.Application
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var Application;
        (function (Application) {
            "use strict";
        })(Application = Modeles.Application || (Modeles.Application = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Service applicatif de gestion du drag and drop
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service permettant de gerer le choix EDS
             */
            var PfDragAndDropService = (function () {
                /**
                 * Constructeur
                 */
                function PfDragAndDropService() {
                }
                /**
                 * Methode permetant de récupérer les données du drag and drop
                 * @return {any}
                 */
                PfDragAndDropService.prototype.getDonnees = function () {
                    return this.donnees;
                };
                /**
                 * Methode permetant de modifier les données du drag and drop
                 * @param {any} donnees
                 * @return {void}
                 */
                PfDragAndDropService.prototype.setDonnees = function (donnees) {
                    this.donnees = donnees;
                };
                PfDragAndDropService.CLASS_NAME = "PfDragAndDropService";
                PfDragAndDropService.logger = loggerClass(PfDragAndDropService.CLASS_NAME);
                // Injection de dépendances 
                PfDragAndDropService.$inject = [];
                return PfDragAndDropService;
            }());
            // Déclaration du service
            Portefeuille.app.service("PfDragAndDropService", PfDragAndDropService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-diagramme-pourcentage
 * @module portefeuille.Controleurs
 * @author S0005355 (Eric ALBERT)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfDiagrammePourcentageControleur = (function () {
            // Variables utiles
            /**
             * Constructeur
             */
            function PfDiagrammePourcentageControleur() {
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfDiagrammePourcentageControleur.prototype.initialiser = function () {
                Controleurs.PfDiagrammeColonneControleur.logger.info(">>> Appel de la méthode : PfDiagrammePourcentageControleur.initialiser <<<");
            };
            PfDiagrammePourcentageControleur.CLASS_NAME = "PfDiagrammePourcentageControleur";
            PfDiagrammePourcentageControleur.logger = loggerClass(PfDiagrammePourcentageControleur.CLASS_NAME);
            //Injection des dependances
            PfDiagrammePourcentageControleur.$inject = [];
            return PfDiagrammePourcentageControleur;
        }());
        Controleurs.PfDiagrammePourcentageControleur = PfDiagrammePourcentageControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfDiagrammePourcentageControleur", PfDiagrammePourcentageControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-diagramme-liste-donut
 * @module portefeuille.Directives
 * @author S0005355 (Eric ALBERT)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfDiagrammePourcentage() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-diagramme-pourcentage/pf-diagramme-pourcentage-vue.html",
                controller: "PfDiagrammePourcentageControleur",
                controllerAs: "pfDiagrammePourcentageCtrl",
                bindToController: true,
                transclude: true,
                scope: {
                    config: "="
                }
            };
        }
        Directives.mwPfDiagrammePourcentage = mwPfDiagrammePourcentage;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfDiagrammePourcentage", mwPfDiagrammePourcentage);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-diagramme-colonne
 * @module portefeuille.Controleurs
 * @author S0005410 (Eric Jacquot)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfDiagrammeMultiColonneControleur = (function () {
            // Variables utiles
            /**
             * Constructeur
             */
            function PfDiagrammeMultiColonneControleur() {
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfDiagrammeMultiColonneControleur.prototype.initialiser = function () {
                Controleurs.PfDiagrammeColonneControleur.logger.info(">>> Appel de la méthode : PfDiagrammeMultiColonneControleur.initialiser <<<");
            };
            PfDiagrammeMultiColonneControleur.CLASS_NAME = "PfDiagrammeMultiColonneControleur";
            PfDiagrammeMultiColonneControleur.logger = loggerClass(PfDiagrammeMultiColonneControleur.CLASS_NAME);
            //Injection des dependances
            PfDiagrammeMultiColonneControleur.$inject = [];
            return PfDiagrammeMultiColonneControleur;
        }());
        Controleurs.PfDiagrammeMultiColonneControleur = PfDiagrammeMultiColonneControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfDiagrammeMultiColonneControleur", PfDiagrammeMultiColonneControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-diagramme-colonne
 * @module portefeuille.Directives
 * @author S0005410 (Eric Jacquot)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfDiagrammeMultiColonne() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-diagramme-multi-colonne/pf-diagramme-multi-colonne-vue.html",
                controller: "PfDiagrammeMultiColonneControleur",
                controllerAs: "pfDiagrammeMultiColonneCtrl",
                bindToController: true,
                transclude: true,
                scope: {
                    config: "="
                }
            };
        }
        Directives.mwPfDiagrammeMultiColonne = mwPfDiagrammeMultiColonne;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfDiagrammeMultiColonne", mwPfDiagrammeMultiColonne);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-indicateur-badge
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfIndicateurBadgeControleur = (function () {
            /**
             * Constructeur
             */
            function PfIndicateurBadgeControleur(portefeuilleService, contexteService, statsService, lisaService, popupService) {
                this.portefeuilleService = portefeuilleService;
                this.contexteService = contexteService;
                this.statsService = statsService;
                this.lisaService = lisaService;
                this.popupService = popupService;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfIndicateurBadgeControleur.prototype.initialiser = function () {
                PfIndicateurBadgeControleur.logger.info(">>> Appel de la méthode : PfIndicateurBadgeControleur.initialiser <<<");
                this.chargementIndicateurBadgeEnCours = false;
            };
            PfIndicateurBadgeControleur.prototype.show = function () {
                return (this.debranchementLisa > 0
                    && (this.valeur > "0"
                        || this.showZero === true))
                    ? true : false;
            };
            PfIndicateurBadgeControleur.prototype.debrancherVers = function () {
                var _this = this;
                PfIndicateurBadgeControleur.logger.info(">>> Appel de la méthode : PfIndicateurBadgeControleur.debrancherVers <<<");
                if (!this.portefeuilleService.getCaracteristiquesAgent()) {
                    this.portefeuilleService.getCaracteristiquesAgentConnecte().then(function (retour) {
                        _this.portefeuilleService.setCaracteristiquesAgent(retour);
                        _this.debrancherVersSuite();
                    });
                }
                else {
                    this.debrancherVersSuite();
                }
            };
            PfIndicateurBadgeControleur.prototype.debrancherVersSuite = function () {
                var _this = this;
                PfIndicateurBadgeControleur.logger.info(">>> Appel de la méthode : PfIndicateurBadgeControleur.debrancherVersSuite <<<");
                if (this.debranchementLisa === Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_BILAN_REVUES_PORTEFEUILLE ||
                    this.debranchementLisa === Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_BILAN_APPETENCES_PORTEFEUILLE ||
                    this.debranchementLisa === Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_GESTION_AFFAIRES ||
                    this.debranchementLisa === Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_PROPOSITONS) {
                    var contexteGererPortefeuille = {};
                    var objetEdsChoisi = {};
                    objetEdsChoisi.objCaractAgent = this.portefeuilleService.getCaracteristiquesAgent();
                    objetEdsChoisi.listePtfVisu = _.pluck(_.where(this.portefeuilleService.getListePortefeuillesVisu(), { "estAffiche": true }), "id");
                    objetEdsChoisi.nombrePortefeuilleTotalAgent = this.portefeuilleService.getListePortefeuillesVisu().length;
                    objetEdsChoisi.locationPath = Portefeuille.Constantes.Url.PORTEFEUILLE;
                    contexteGererPortefeuille.objetEdsVisu = objetEdsChoisi;
                    return this.contexteService.ajouterDonneesDebranchementBilanRevuePortefeuille(contexteGererPortefeuille)
                        .then(function () {
                        return _this.lisaService.next(_this.debranchementLisa, _this.debranchementLocal)
                            .then(function () {
                            //       this.contexteService.supprimerContexteDevenuInutile([Constantes.Contexte.CONTEXTE_VERS_REVUE]);
                        })
                            .catch(function (erreur) {
                            Controleurs.ClientsControleur.logger.debug(">>> Echec sur lisa.next de la méthode : PfIndicateurBadgeControleur.debrancherVers <<<");
                            _this.popupService.showErreur(erreur);
                        });
                    });
                }
                else if (this.debranchementLisa === Portefeuille.Enum.Revue.POPUP_REVUE.POPUP_CLIENTS_A_ACTIVER) {
                    var caracteristiquesAgent = void 0;
                    var listeIdsPortefeuilles = void 0;
                    if (this.portefeuilleService) {
                        caracteristiquesAgent = this.portefeuilleService.getCaracteristiquesAgent();
                        listeIdsPortefeuilles = _.pluck(_.where(this.portefeuilleService.getListePortefeuillesVisu(), { "estAffiche": true }), "id");
                        if (caracteristiquesAgent && listeIdsPortefeuilles && listeIdsPortefeuilles.length > 0) {
                            this.chargementIndicateurBadgeEnCours = true;
                            this.statsService.getClientsAActiver(caracteristiquesAgent.codeEtablissement, caracteristiquesAgent.identifiantElementStructure, listeIdsPortefeuilles).then(function (resultatPromesse) {
                                if (resultatPromesse && resultatPromesse.length > 0) {
                                    _this.popupService.showModal("vues/template-modale/modale-clients-activer-vue.html", "ModaleClientsActiverControleur", resultatPromesse);
                                }
                            }).catch(function (erreur) {
                                Controleurs.ClientsControleur.logger.debug(">>> Echec sur l'ouverture de la popup des clients à activer: PfIndicateurBadgeControleur.debrancherVers <<<");
                                _this.popupService.showErreur(erreur);
                            }).finally(function () {
                                _this.chargementIndicateurBadgeEnCours = false;
                            });
                        }
                    }
                }
                else if (this.debranchementLisa === Portefeuille.Enum.Revue.POPUP_REVUE.POPUP_CLIENTS_TARIFICATION) {
                    var caracteristiquesAgent = void 0;
                    var listeIdsPortefeuilles = void 0;
                    if (this.portefeuilleService) {
                        caracteristiquesAgent = this.portefeuilleService.getCaracteristiquesAgent();
                        listeIdsPortefeuilles = _.pluck(_.where(this.portefeuilleService.getListePortefeuillesVisu(), { "estAffiche": true }), "id");
                        if (caracteristiquesAgent && listeIdsPortefeuilles && listeIdsPortefeuilles.length > 0) {
                            this.chargementIndicateurBadgeEnCours = true;
                            this.statsService.getClientsARenegocier(caracteristiquesAgent.codeEtablissement, caracteristiquesAgent.identifiantElementStructure, listeIdsPortefeuilles).then(function (resultatPromesse) {
                                if (resultatPromesse && resultatPromesse.length > 0) {
                                    _this.popupService.showModal("vues/template-modale/modale-clients-activer-vue.html", "ModaleClientsRenegocierControleur", resultatPromesse);
                                }
                            }).catch(function (erreur) {
                                Controleurs.ClientsControleur.logger.debug(">>> Echec sur l'ouverture de la popup des clients à activer: PfIndicateurBadgeControleur.debrancherVers <<<");
                                _this.popupService.showErreur(erreur);
                            }).finally(function () {
                                _this.chargementIndicateurBadgeEnCours = false;
                            });
                        }
                    }
                }
                else {
                    return this.lisaService.next(this.debranchementLisa, this.debranchementLocal)
                        .catch(function (erreur) {
                        Controleurs.ClientsControleur.logger.debug(">>> Echec sur lisa.next de la méthode : PfIndicateurBadgeControleur.debrancherVers <<<");
                        _this.popupService.showErreur(erreur);
                    });
                }
            };
            PfIndicateurBadgeControleur.CLASS_NAME = "PfIndicateurBadgeControleur";
            PfIndicateurBadgeControleur.logger = loggerClass(PfIndicateurBadgeControleur.CLASS_NAME);
            //Injection des dependances
            PfIndicateurBadgeControleur.$inject = [
                Portefeuille.Constantes.Inject.Services.portefeuilleService,
                Portefeuille.Constantes.Inject.Services.contexteService,
                Portefeuille.Constantes.Inject.Services.statService,
                PdtEntreprise.Constantes.Inject.Services.LISA_SERVICE,
                PdtEntreprise.Constantes.Inject.Services.POPUP_SERVICE
            ];
            return PfIndicateurBadgeControleur;
        }());
        Controleurs.PfIndicateurBadgeControleur = PfIndicateurBadgeControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfIndicateurBadgeControleur", PfIndicateurBadgeControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-indicateur-badge
 * @module portefeuille.Directives
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfIndicateurBadge() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-indicateur-badge/pf-indicateur-badge-vue.html",
                controller: "PfIndicateurBadgeControleur",
                controllerAs: "pfIndicateurBadgeCtrl",
                bindToController: true,
                scope: {
                    intitule: "=",
                    valeur: "=",
                    isSousIntitule: "=",
                    debranchementLisa: "=",
                    debranchementLocal: "=",
                    showZero: "="
                }
            };
        }
        Directives.mwPfIndicateurBadge = mwPfIndicateurBadge;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfIndicateurBadge", mwPfIndicateurBadge);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-indicateur-fleche
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        (function (COULEUR_INDICATEUR_FLECHE) {
            COULEUR_INDICATEUR_FLECHE[COULEUR_INDICATEUR_FLECHE["VERT"] = "couleur-verte"] = "VERT";
            COULEUR_INDICATEUR_FLECHE[COULEUR_INDICATEUR_FLECHE["ORANGE"] = "couleur-orange"] = "ORANGE";
            COULEUR_INDICATEUR_FLECHE[COULEUR_INDICATEUR_FLECHE["ROUGE"] = "couleur-rouge"] = "ROUGE";
        })(Controleurs.COULEUR_INDICATEUR_FLECHE || (Controleurs.COULEUR_INDICATEUR_FLECHE = {}));
        var COULEUR_INDICATEUR_FLECHE = Controleurs.COULEUR_INDICATEUR_FLECHE;
        ;
        (function (ICONE_INDICATEUR_FLECHE) {
            ICONE_INDICATEUR_FLECHE[ICONE_INDICATEUR_FLECHE["HAUT"] = "itce-arrow-up-circle"] = "HAUT";
            ICONE_INDICATEUR_FLECHE[ICONE_INDICATEUR_FLECHE["BAS"] = "itce-arrow-down-circle"] = "BAS";
            ICONE_INDICATEUR_FLECHE[ICONE_INDICATEUR_FLECHE["DROITE"] = "itce-arrow-right-circle"] = "DROITE";
        })(Controleurs.ICONE_INDICATEUR_FLECHE || (Controleurs.ICONE_INDICATEUR_FLECHE = {}));
        var ICONE_INDICATEUR_FLECHE = Controleurs.ICONE_INDICATEUR_FLECHE;
        ;
        /**
         * Classe du controleur
         */
        var PfIndicateurFlecheControleur = (function () {
            /**
             * Constructeur
             */
            function PfIndicateurFlecheControleur() {
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfIndicateurFlecheControleur.prototype.initialiser = function () {
                PfIndicateurFlecheControleur.logger.info(">>> Appel de la méthode : PfIndicateurFlecheControleur.initialiser <<<");
            };
            Object.defineProperty(PfIndicateurFlecheControleur.prototype, "isPositif", {
                /**
                 *
                 */
                get: function () {
                    return this.config.icone === "itce-arrow-up-circle";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfIndicateurFlecheControleur.prototype, "isNeutre", {
                /**
                 *
                 */
                get: function () {
                    return this.config.icone === "itce-arrow-right-circle";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfIndicateurFlecheControleur.prototype, "isNegatif", {
                /**
                 *
                 */
                get: function () {
                    return this.config.icone === "itce-arrow-down-circle";
                },
                enumerable: true,
                configurable: true
            });
            PfIndicateurFlecheControleur.CLASS_NAME = "PfIndicateurFlecheControleur";
            PfIndicateurFlecheControleur.logger = loggerClass(PfIndicateurFlecheControleur.CLASS_NAME);
            //Injection des dependances
            PfIndicateurFlecheControleur.$inject = [];
            return PfIndicateurFlecheControleur;
        }());
        Controleurs.PfIndicateurFlecheControleur = PfIndicateurFlecheControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfIndicateurFlecheControleur", PfIndicateurFlecheControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-indicateur-badge
 * @module portefeuille.Directives
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfIndicateurFleche() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-indicateur-fleche/pf-indicateur-fleche-vue.html",
                controller: "PfIndicateurFlecheControleur",
                controllerAs: "pfIndicateurFlecheCtrl",
                bindToController: true,
                scope: {
                    config: "="
                }
            };
        }
        Directives.mwPfIndicateurFleche = mwPfIndicateurFleche;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfIndicateurFleche", mwPfIndicateurFleche);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-element-eds
 * @module portefeuille.Controleurs
 * @author S0005355 (Eric ALBERT)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfElementEdsControleur = (function () {
            // Variables utiles
            /**
             * Constructeur
             */
            function PfElementEdsControleur($compile, choixUtilisateurService) {
                this.$compile = $compile;
                this.choixUtilisateurService = choixUtilisateurService;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfElementEdsControleur.prototype.initialiser = function () {
                Controleurs.PfTuileIndicateurControleur.logger.info(">>> Appel de la méthode : PfTuileIndicateurControleur.initialiser <<<");
            };
            Object.defineProperty(PfElementEdsControleur.prototype, "nomEds", {
                /**
                 *
                 */
                get: function () {
                    return (this.eds &&
                        this.eds.nomEds &&
                        this.eds.nomEds.length > 0) ?
                        this.eds.nomEds :
                        "-x-";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfElementEdsControleur.prototype, "edsSelectionne", {
                /**
                 *
                 */
                set: function (edsItem) {
                    this.choixUtilisateurService.edsSelectionne = edsItem;
                },
                enumerable: true,
                configurable: true
            });
            /**
             *
             */
            PfElementEdsControleur.prototype.ouvrir = function () {
                var _this = this;
                if (!this.eds.agencesInferieur) {
                    return this.choixUtilisateurService.rechercherEdsInferieurs(this.eds).then(function () {
                        _this.eds.affiche = true;
                        return;
                    });
                }
                else {
                    this.eds.affiche = !this.eds.affiche;
                }
            };
            Object.defineProperty(PfElementEdsControleur.prototype, "estfermer", {
                /**
                 *
                 */
                get: function () {
                    return !(this.eds && this.eds.affiche);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfElementEdsControleur.prototype, "estOuvert", {
                /**
                 *
                 */
                get: function () {
                    return (this.eds && this.eds.affiche);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfElementEdsControleur.prototype, "estCoche", {
                get: function () {
                    return this.choixUtilisateurService.edsSelectionne === this.eds;
                },
                enumerable: true,
                configurable: true
            });
            /**
             *
             */
            PfElementEdsControleur.prototype.selectionnerEDS = function () {
                return this.choixUtilisateurService.edsSelectionne = this.eds;
            };
            Object.defineProperty(PfElementEdsControleur.prototype, "estVide", {
                /**
                 *
                 */
                get: function () {
                    return (this.eds && this.eds.agencesInferieur && this.eds.agencesInferieur.length === 0);
                },
                enumerable: true,
                configurable: true
            });
            PfElementEdsControleur.CLASS_NAME = "PfElementEdsControleur";
            PfElementEdsControleur.logger = loggerClass(PfElementEdsControleur.CLASS_NAME);
            //Injection des dependances
            PfElementEdsControleur.$inject = [
                "$compile",
                Portefeuille.Constantes.Inject.Services.choixUtilisateurService];
            return PfElementEdsControleur;
        }());
        Controleurs.PfElementEdsControleur = PfElementEdsControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfElementEdsControleur", PfElementEdsControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-element-eds
 * @module portefeuille.Directives
 * @author S0005355 (Eric ALBERT)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfElementEds($compile) {
            return {
                restrict: "EA",
                templateUrl: "typescript/directives/pf-element-eds/pf-element-eds-vue.html",
                controller: "PfElementEdsControleur",
                controllerAs: "popupCtrl",
                bindToController: true,
                //replace: true,
                transclude: true,
                scope: {
                    eds: "="
                },
                compile: function (tElement, tAttr, trantransclude) {
                    var contents = tElement.contents().remove();
                    var compiledContents;
                    return function (scope, element, attrs, ctrl, transclude) {
                        if (!compiledContents) {
                            compiledContents = $compile(contents, trantransclude);
                        }
                        return compiledContents(scope, function (clone) {
                            element.append(clone);
                        });
                    };
                }
            };
        }
        Directives.mwPfElementEds = mwPfElementEds;
        // Déclaration de la directive
        // Attention !!! mettre l'injection de la compile en paramètre (Sans en DUA ok mais en VFO ko)
        Portefeuille.app.directive("mwPfElementEds", ["$compile", mwPfElementEds]);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-indicateur-colonne
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfIndicateurColonneControleur = (function () {
            // Variables utiles
            /**
             * Constructeur
             */
            function PfIndicateurColonneControleur() {
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfIndicateurColonneControleur.prototype.initialiser = function () {
                PfIndicateurColonneControleur.logger.info(">>> Appel de la méthode : PfIndicateurColonneControleur.initialiser <<<");
            };
            /**
             * Sous Valeur visible
             */
            PfIndicateurColonneControleur.prototype.estVisibleSousValeur = function () {
                return this.data.sousValeur !== undefined;
            };
            /**
             * Intitulé Sous Valeur visible
             */
            PfIndicateurColonneControleur.prototype.estVisibleIntituleSousValeur = function () {
                return this.data.sousValeur !== 0;
            };
            Object.defineProperty(PfIndicateurColonneControleur.prototype, "estVisibleSuiviPar", {
                /**
                 * suivi par visible
                 */
                get: function () {
                    return this.data.nomSuiviPar !== undefined && this.data.nomSuiviPar !== null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfIndicateurColonneControleur.prototype, "estSousValeurEnNombre", {
                /**
                 *
                 */
                get: function () {
                    return !this.data.estMontant && this.estVisibleIntituleSousValeur();
                },
                enumerable: true,
                configurable: true
            });
            PfIndicateurColonneControleur.CLASS_NAME = "PfIndicateurColonneControleur";
            PfIndicateurColonneControleur.logger = loggerClass(PfIndicateurColonneControleur.CLASS_NAME);
            //Injection des dependances
            PfIndicateurColonneControleur.$inject = [];
            return PfIndicateurColonneControleur;
        }());
        Controleurs.PfIndicateurColonneControleur = PfIndicateurColonneControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfIndicateurColonneControleur", PfIndicateurColonneControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-indicateur-colonne
 * @module portefeuille.Directives
 * @author S0005410 (Eric Jacquot)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfIndicateurColonne() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-indicateur-colonne/pf-indicateur-colonne-vue.html",
                controller: "PfIndicateurColonneControleur",
                controllerAs: "pfIndicateurColonneCtrl",
                bindToController: true,
                scope: {
                    data: "="
                }
            };
        }
        Directives.mwPfIndicateurColonne = mwPfIndicateurColonne;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfIndicateurColonne", mwPfIndicateurColonne);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-indicateur-pourcentage
 * @module portefeuille.Controleurs
 * @author S0005355 (Eric ALBERT)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfIndicateurPourcentageControleur = (function () {
            // Variables utiles
            /**
             * Constructeur
             */
            function PfIndicateurPourcentageControleur(creationPourcentageService) {
                this.creationPourcentageService = creationPourcentageService;
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfIndicateurPourcentageControleur.prototype.initialiser = function () {
                var _this = this;
                Controleurs.PfIndicateurColonneControleur.logger.info(">>> Appel de la méthode : PfIndicateurPourcentageControleur.initialiser <<<");
                angular.element(document.querySelector("#" + this.config.id)).ready(function () {
                    _this.creationPourcentageService.creerPourcentage(_this.config, _this.config.id);
                });
            };
            Object.defineProperty(PfIndicateurPourcentageControleur.prototype, "id", {
                /**
                 *
                 */
                get: function () {
                    return this.config.id;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PfIndicateurPourcentageControleur.prototype, "isIE", {
                /**
                 *
                 */
                get: function () {
                    return Portefeuille.Services.Utils.ApplicationUtils.isIE();
                },
                enumerable: true,
                configurable: true
            });
            PfIndicateurPourcentageControleur.CLASS_NAME = "PfIndicateurPourcentageControleur";
            PfIndicateurPourcentageControleur.logger = loggerClass(PfIndicateurPourcentageControleur.CLASS_NAME);
            //Injection des dependances
            PfIndicateurPourcentageControleur.$inject = [
                Portefeuille.Constantes.Inject.Services.creationPourcentageService
            ];
            return PfIndicateurPourcentageControleur;
        }());
        Controleurs.PfIndicateurPourcentageControleur = PfIndicateurPourcentageControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfIndicateurPourcentageControleur", PfIndicateurPourcentageControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-indicateur-Pourcentage
 * @module portefeuille.Directives
 * @author S0005355 (Eric ALBERT)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfIndicateurPourcentage() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-indicateur-pourcentage/pf-indicateur-pourcentage-vue.html",
                controller: "PfIndicateurPourcentageControleur",
                controllerAs: "pfIndicateurPourcentageCtrl",
                bindToController: true,
                scope: {
                    config: "="
                }
            };
        }
        Directives.mwPfIndicateurPourcentage = mwPfIndicateurPourcentage;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfIndicateurPourcentage", mwPfIndicateurPourcentage);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-ligne-relation-eco
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfLigneRelationEcoControleur = (function () {
            /**
             * Constructeur
             */
            function PfLigneRelationEcoControleur($filter, $parse, eventService) {
                this.$filter = $filter;
                this.$parse = $parse;
                this.eventService = eventService;
                this.eventService.setPfLigneRelationEcoControleur(this);
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant avec une liste d'indicateurs définis
             * @returns {void}
             */
            PfLigneRelationEcoControleur.prototype.reInitialiser = function (listeIndicateurs) {
                var _this = this;
                PfLigneRelationEcoControleur.logger.info(">>> Appel de la méthode : PfLigneRelationEcoControleur.initialiser <<<");
                this.estOuvert = false;
                this.listeIndicateursAAfficher = [];
                _.forEach(listeIndicateurs, function (indicateurChoix) {
                    var indexIndicateur = _.findIndex(_this.relationEconomique.listeIndicateurs, function (indicateurData) {
                        return indicateurData.code === indicateurChoix.indicateur.codeRel;
                    });
                    if (indexIndicateur !== -1 && indicateurChoix.indicateur.estVisibleColonne) {
                        _this.listeIndicateursAAfficher.push(_this.relationEconomique.listeIndicateurs[indexIndicateur]);
                    }
                });
            };
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfLigneRelationEcoControleur.prototype.initialiser = function () {
                var _this = this;
                PfLigneRelationEcoControleur.logger.info(">>> Appel de la méthode : PfLigneRelationEcoControleur.initialiser <<<");
                this.estOuvert = false;
                this.listeIndicateursAAfficher = [];
                _.forEach(this.listeIndicateursTableau, function (indicateurChoix) {
                    var indexIndicateur = _.findIndex(_this.relationEconomique.listeIndicateurs, function (indicateurData) {
                        return indicateurData.code === indicateurChoix.indicateur.codeRel;
                    });
                    if (indexIndicateur !== -1 && indicateurChoix.indicateur.estVisibleColonne) {
                        _this.listeIndicateursAAfficher.push(_this.relationEconomique.listeIndicateurs[indexIndicateur]);
                    }
                });
            };
            /**
             * Méthode permettant d'ouvrir ou fermer le détail de la ligne
             * @returns {void}
             */
            PfLigneRelationEcoControleur.prototype.afficherMoinsPlus = function () {
                PfLigneRelationEcoControleur.logger.info(">>> Appel de la méthode : PfLigneRelationEcoControleur.afficherMoinsPlus <<<");
                this.estOuvert = !this.estOuvert;
            };
            PfLigneRelationEcoControleur.prototype.onSelectionChange = function (selectedObject) {
            };
            PfLigneRelationEcoControleur.CLASS_NAME = "PfLigneRelationEcoControleur";
            PfLigneRelationEcoControleur.logger = loggerClass(PfLigneRelationEcoControleur.CLASS_NAME);
            //public tableauClientEconomique: Modeles.Tableaux.TableauClientEco;
            //Injection des dependances
            PfLigneRelationEcoControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$filter,
                Portefeuille.Constantes.Inject.Angular.$parse,
                Portefeuille.Constantes.Inject.Services.eventService
            ];
            return PfLigneRelationEcoControleur;
        }());
        Controleurs.PfLigneRelationEcoControleur = PfLigneRelationEcoControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfLigneRelationEcoControleur", PfLigneRelationEcoControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-ligne-relation-eco
 * @module portefeuille.Directives
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfLigneRelationEco() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-ligne-relation-eco/pf-ligne-relation-eco-vue.html",
                controller: "PfLigneRelationEcoControleur",
                controllerAs: "pfLigneRelationEcoCtrl",
                bindToController: true,
                scope: {
                    relationEconomique: "=",
                    listeIndicateursTableau: "="
                }
            };
        }
        Directives.mwPfLigneRelationEco = mwPfLigneRelationEco;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfLigneRelationEco", mwPfLigneRelationEco);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-diagramme-donut
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfPuceLegendeControleur = (function () {
            // Variables utiles
            /**
             * Constructeur
             */
            function PfPuceLegendeControleur() {
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfPuceLegendeControleur.prototype.initialiser = function () {
                Controleurs.PfDiagrammeDonutControleur.logger.info(">>> Appel de la méthode : PfPuceLegendeControleur.initialiser <<<");
            };
            PfPuceLegendeControleur.CLASS_NAME = "PfPuceLegendeControleur";
            PfPuceLegendeControleur.logger = loggerClass(PfPuceLegendeControleur.CLASS_NAME);
            //Injection des dependances
            PfPuceLegendeControleur.$inject = [];
            return PfPuceLegendeControleur;
        }());
        Controleurs.PfPuceLegendeControleur = PfPuceLegendeControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfPuceLegendeControleur", PfPuceLegendeControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-puce-legende
 * @module portefeuille.Directives
 * @author S0005410 (Eric Jacquot)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfPuceLegende() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-puce-legende/pf-puce-legende-vue.html",
                controller: "PfPuceLegendeControleur",
                controllerAs: "pfPuceLegendeCtrl",
                bindToController: true,
                scope: {
                    intitule: "@",
                    couleur: "@",
                    affichagePuceLegendeActif: "=",
                    sousIntitule: "@",
                    sousCouleur: "@"
                }
            };
        }
        Directives.mwPfPuceLegende = mwPfPuceLegende;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfPuceLegende", mwPfPuceLegende);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-tuile-catalogue
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfTuileCatalogueControleur = (function () {
            /**
             * Constructeur
             */
            function PfTuileCatalogueControleur($element, modalePaniersService) {
                var _this = this;
                this.$element = $element;
                this.modalePaniersService = modalePaniersService;
                /**
                 * Variable contenant la méthode a appelé avant que le dragStart commence
                 */
                this.dragStartBeforeEvent = function () {
                    _this.modalePaniersService.activerDropPanier();
                    _this.modalePaniersService.activerDropTuilesPanier(_this.listeTuilePanierSettings);
                    if (_this.listeTuilePanierSettings.length === Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX - 1) {
                        _this.modalePaniersService.cacherBoutonValider();
                    }
                };
                /**
                 * Variable contenant la méthode a appelé avant que le dragEnd commence
                 */
                this.dragEndBeforeEvent = function () {
                    _this.modalePaniersService.desactiverDropPanier();
                    _this.modalePaniersService.desactiverDropTuilesPanier(_this.listeTuilePanierSettings);
                    if (_this.listeTuilePanierSettings.length === Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX - 1) {
                        _this.modalePaniersService.afficherBoutonValider();
                    }
                };
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfTuileCatalogueControleur.prototype.initialiser = function () {
                PfTuileCatalogueControleur.logger.info(">>> Appel de la méthode : PfTuileCatalogueControleur.initialiser <<<");
                // Initialisation configuration tuile
                this.configTuile = this.getConfigTuile();
                // Initialisation dragSettings
                this.tuileCatalogueSettings.dragSettings = this.modalePaniersService.creerDragSettings(this.tuileCatalogueSettings);
                //this.tuileCatalogueSettings.dragSettings.estActiver = true;
                this.tuileCatalogueSettings.dragSettings.estActiver = this.modalePaniersService.getEstEditionPanier();
                if (this.tuileCatalogueSettings.indicateur.choisi) {
                    this.tuileCatalogueSettings.dragSettings.estActiver = false;
                }
                else if (this.listeTuilePanierSettings.length === Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {
                    this.tuileCatalogueSettings.dragSettings.estActiver = false;
                }
                // Ajout des fonctions des événements drag
                this.tuileCatalogueSettings.dragSettings.dragStartBeforeEvent = this.dragStartBeforeEvent;
                this.tuileCatalogueSettings.dragSettings.dragEndBeforeEvent = this.dragEndBeforeEvent;
                this.$element.ready(this.modalePaniersService.rendreCompatibleTuilesAvecDragAndDrop);
            };
            /**
             * Récupération de la configuration de la tuile
             */
            PfTuileCatalogueControleur.prototype.getConfigTuile = function () {
                var config = {};
                config.taille = Portefeuille.Constantes.ModalePaniers.TUILE_CATALOGUE_TAILLE;
                config.typeMarquage = Portefeuille.Constantes.ModalePaniers.TUILE_TYPE_MARQUAGE_TEXTE;
                if (!this.tuileCatalogueSettings.indicateur.indicateur.estUniquementVueClients) {
                    config.typeMarquage = Portefeuille.Constantes.ModalePaniers.TUILE_CATALOGUE_TYPE_MARQUAGE_AUCUN;
                    this.tuileCatalogueSettings.indicateur.indicateur.intitule = this.modifIntitule(this.tuileCatalogueSettings.indicateur.indicateur.intitule);
                }
                return config;
            };
            // la 1ere fois, on ajoute un mot "composé de blancs insécables" et d'un blanc
            // moyen détourné d'aller à la ligne
            // car on est dans un composant myway : mw-tuile-standard...
            // aller à la ligne permet de rester aligner avec les tuiles où il y a un TAG...(CLIENT/PROSPECT)
            PfTuileCatalogueControleur.prototype.modifIntitule = function (texte) {
                var ligneVide = _.padLeft("", 40, String.fromCharCode(160));
                if (texte.indexOf(ligneVide) === -1) {
                    texte = ligneVide + " " + texte;
                }
                return texte;
            };
            /**
             * Méthode permettant de gérer l'affichage ou non du marquage de la tuile
             * @returns {boolean}
             */
            PfTuileCatalogueControleur.prototype.afficherMarquage = function () {
                if (this.tuileCatalogueSettings.indicateur.choisi) {
                    return true;
                }
                else if (this.tuileCatalogueSettings.indicateur.indicateur.estUniquementVueClients) {
                    return true;
                }
                else {
                    return true;
                }
            };
            /**
             * Méthode permettant de gérer le nom du marquage de la tuile
             * @returns {string}
             */
            PfTuileCatalogueControleur.prototype.nomMarquage = function () {
                if (this.tuileCatalogueSettings.indicateur.indicateur.estUniquementVueClients) {
                    return Portefeuille.Constantes.ModalePaniers.TUILE_NOM_MARQUAGE_CLIENT_PROSPECT;
                }
                else {
                    return undefined;
                }
            };
            /**
             * Méthode permettant de gérer la couleur de la tuile
             * @returns {string}
             */
            PfTuileCatalogueControleur.prototype.couleur = function () {
                if (this.tuileCatalogueSettings.indicateur.choisi) {
                    return Portefeuille.Constantes.ModalePaniers.TUILE_COULEUR_JAUNE;
                }
                else if (this.tuileCatalogueSettings.indicateur.indicateur.estUniquementVueClients) {
                    return Portefeuille.Constantes.ModalePaniers.TUILE_COULEUR_ROUGE;
                }
                else {
                    return Portefeuille.Constantes.ModalePaniers.TUILE_COULEUR_SOMBRE;
                }
            };
            /**
             * Méthode permettant de gérer le click sur le plus d'une tuile
             * @returns {void}
             */
            PfTuileCatalogueControleur.prototype.ajouter = function () {
                // On cache le bouton ajouter si on ajoute le sixième indicateur
                if (this.listeTuilePanierSettings.length === Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX - 1) {
                    this.modalePaniersService.cacherBoutonValider();
                    // Modification des paramètres des tuiles catalogue
                    _.forEach(this.listeTuileCatalogueSettings, function (tuile) {
                        tuile.estEnEdition = false;
                    });
                }
                // Changement de l'état de l'indicateur
                this.tuileCatalogueSettings.indicateur.choisi = true;
                this.tuileCatalogueSettings.estEnEdition = false;
                //this.configTuile.typeMarquage = Constantes.ModalePaniers.TUILE_CATALOGUE_TYPE_MARQUAGE_PICTO;
                // Création de la nouvelle tuile panier
                var tuilePanierSettings = {};
                tuilePanierSettings.id = this.modalePaniersService.genererIdentifiantAleatoire();
                tuilePanierSettings.indicateur = this.tuileCatalogueSettings.indicateur;
                this.listeTuilePanierSettings.push(tuilePanierSettings);
                // Mise à jour du message d'avertissement de modification de filtre
                this.modalePaniersService.afficherMessageAvertissementFiltre(this.listeFiltresRelationEco, this.listeFiltresClients, _.pluck(this.listeTuilePanierSettings, "indicateur"));
                // Rafraichir listeTuileCatalogueSettings
                this.modalePaniersService.rafraichirListeTuileCatalogueSettings();
            };
            /**
             * Méthode permettant de savoir si l'indicateur est uniquement client et choisi
             * @returns {boolean}
             */
            PfTuileCatalogueControleur.prototype.estClientEtChoisi = function () {
                return this.tuileCatalogueSettings.indicateur.indicateur.estUniquementVueClients && this.tuileCatalogueSettings.indicateur.choisi;
            };
            PfTuileCatalogueControleur.CLASS_NAME = "PfTuileCatalogueControleur";
            PfTuileCatalogueControleur.logger = loggerClass(PfTuileCatalogueControleur.CLASS_NAME);
            //Injection des dependances
            PfTuileCatalogueControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$element,
                Portefeuille.Constantes.Inject.Services.modalePaniersService
            ];
            return PfTuileCatalogueControleur;
        }());
        Controleurs.PfTuileCatalogueControleur = PfTuileCatalogueControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfTuileCatalogueControleur", PfTuileCatalogueControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-tuile-catalogue
 * @module portefeuille.Directives
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfTuileCatalogue() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-tuile-catalogue/pf-tuile-catalogue-vue.html",
                controller: "PfTuileCatalogueControleur",
                controllerAs: "pfTuileCatalogueCtrl",
                bindToController: true,
                scope: {
                    tuileCatalogueSettings: "=",
                    listeTuileCatalogueSettings: "=",
                    listeTuilePanierSettings: "=",
                    listeFiltresClients: "=",
                    listeFiltresRelationEco: "="
                }
            };
        }
        Directives.mwPfTuileCatalogue = mwPfTuileCatalogue;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfTuileCatalogue", mwPfTuileCatalogue);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-panel-niveau-2
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfPanelNiveau2Controleur = (function () {
            // Variables utiles
            /**
             * Constructeur
             */
            function PfPanelNiveau2Controleur() {
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfPanelNiveau2Controleur.prototype.initialiser = function () {
                PfPanelNiveau2Controleur.logger.info(">>> Appel de la méthode : PfPanelNiveau2Controleur.initialiser <<<");
            };
            PfPanelNiveau2Controleur.CLASS_NAME = "PfPanelNiveau2Controleur";
            PfPanelNiveau2Controleur.logger = loggerClass(PfPanelNiveau2Controleur.CLASS_NAME);
            //Injection des dependances
            PfPanelNiveau2Controleur.$inject = [];
            return PfPanelNiveau2Controleur;
        }());
        Controleurs.PfPanelNiveau2Controleur = PfPanelNiveau2Controleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfPanelNiveau2Controleur", PfPanelNiveau2Controleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-panel-niveau-2
 * @module portefeuille.Directives
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfPanelNiveau2() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-panel-niveau-2/pf-panel-niveau-2-vue.html",
                controller: "PfPanelNiveau2Controleur",
                controllerAs: "pfPanelNiveau2Ctrl",
                bindToController: true,
                scope: {
                    id: "@",
                    titre: "@",
                    titre2: "@",
                    icone: "@?",
                    configBouton: "="
                },
                transclude: true
            };
        }
        Directives.mwPfPanelNiveau2 = mwPfPanelNiveau2;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfPanelNiveau2", mwPfPanelNiveau2);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-tuile-indicateur
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfTuileIndicateurControleur = (function () {
            // Variables utiles
            /**
             * Constructeur
             */
            function PfTuileIndicateurControleur() {
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfTuileIndicateurControleur.prototype.initialiser = function () {
                PfTuileIndicateurControleur.logger.info(">>> Appel de la méthode : PfTuileIndicateurControleur.initialiser <<<");
                this.isEuro = true;
                // @hack modifie l'intitulé Segm. relationnelle groupe en Seg. rel. groupe
                if (this.intitule === Portefeuille.Enum.Indicateur.INTITULE.SEG_RELATIONNELLE_GROUPE.toString()) {
                    this.intitule = "Seg. rel. groupe";
                }
                console.log("--> tuile indicateur controleur , intitule : ", this.intitule);
                if (this.intitule === Portefeuille.Enum.Indicateur.INTITULE.ENCOURS_BDF.toString()) {
                    this.isEuro = false; // pas euro, donc k€ pour le filtre
                    console.log("--> encours BDF en k€ ");
                }
            };
            /**
             * Méthode permettant de savoir si valeurNumber est defini
             * utilisé par l'IHM
             * @returns {void}
             */
            PfTuileIndicateurControleur.prototype.valeurNumberDefini = function () {
                return this.valeurNumber !== null && this.valeurNumber !== undefined;
            };
            PfTuileIndicateurControleur.prototype.isGreen = function () {
                return (this.type !== Portefeuille.Enum.Indicateur.TYPE.DATE && this.valeurNumber > 0);
            };
            PfTuileIndicateurControleur.prototype.isOrange = function () {
                return (this.type !== Portefeuille.Enum.Indicateur.TYPE.DATE && this.valeurNumber === 0);
            };
            PfTuileIndicateurControleur.prototype.isTypeDate = function () {
                return this.type === Portefeuille.Enum.Indicateur.TYPE.DATE;
            };
            PfTuileIndicateurControleur.prototype.isTypeMontant = function () {
                return this.valeurNumberDefini() && this.type === Portefeuille.Enum.Indicateur.TYPE.MONTANT;
            };
            PfTuileIndicateurControleur.prototype.isTypeNombre = function () {
                return this.valeurNumberDefini() && this.type === Portefeuille.Enum.Indicateur.TYPE.NOMBRE;
            };
            PfTuileIndicateurControleur.prototype.isTypePourcent = function () {
                return this.valeurNumberDefini() && this.type === Portefeuille.Enum.Indicateur.TYPE.POURCENT;
            };
            PfTuileIndicateurControleur.prototype.isTypeTexte = function () {
                return this.type === Portefeuille.Enum.Indicateur.TYPE.TEXTE;
            };
            PfTuileIndicateurControleur.prototype.isTypeBegacli = function () {
                return this.type === Portefeuille.Enum.Indicateur.TYPE.BEGACLI;
            };
            PfTuileIndicateurControleur.CLASS_NAME = "PfTuileIndicateurControleur";
            PfTuileIndicateurControleur.logger = loggerClass(PfTuileIndicateurControleur.CLASS_NAME);
            //Injection des dependances
            PfTuileIndicateurControleur.$inject = [];
            return PfTuileIndicateurControleur;
        }());
        Controleurs.PfTuileIndicateurControleur = PfTuileIndicateurControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfTuileIndicateurControleur", PfTuileIndicateurControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-tuile-indicateur
 * @module portefeuille.Directives
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfTuileIndicateur() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-tuile-indicateur/pf-tuile-indicateur-vue.html",
                controller: "PfTuileIndicateurControleur",
                controllerAs: "pfTuileIndicateurCtrl",
                bindToController: true,
                replace: true,
                scope: {
                    type: "=",
                    intitule: "=",
                    valeur: "=",
                    valeurNumber: "=",
                    icone: "="
                }
            };
        }
        Directives.mwPfTuileIndicateur = mwPfTuileIndicateur;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfTuileIndicateur", mwPfTuileIndicateur);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service de gestion des indicateurs
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service de gestion des indicateurs
             */
            var BegacliService = (function () {
                /**
                 * Constructeur
                 */
                function BegacliService() {
                    this.expReguliere = null;
                    this.initialiser();
                }
                BegacliService.prototype.initialiser = function () {
                    this.filtreBegacli = {};
                    this.filtreBegacli.listeLettres = [];
                    this.filtreBegacli.listeNombres = [];
                    this.ajouterUniversLettre("Banque au quotidien", "b");
                    this.ajouterUniversLettre("Epargne", "e");
                    this.ajouterUniversLettre("Gestion des flux", "g");
                    this.ajouterUniversLettre("Assurance prévoyance", "a");
                    this.ajouterUniversLettre("Financement Court terme", "c");
                    this.ajouterUniversLettre("Financement moyen Long terme", "l");
                    this.ajouterUniversLettre("Ingénierie sociale", "i");
                    // this.ajouterUniversLettre("Univers en trop", "x");
                    var nb = this.filtreBegacli.listeLettres.length;
                    for (var i = 0; i <= nb; i++) {
                        this.AjouterNombre(i.toString());
                    }
                    this.filtreBegacli.choisiNC = false;
                };
                BegacliService.prototype.ajouterUniversLettre = function (univers, lettre) {
                    var lettreBegacli = {};
                    lettreBegacli.univers = univers;
                    lettreBegacli.lettreMin = lettre.toLocaleLowerCase();
                    lettreBegacli.choisiMin = false;
                    lettreBegacli.lettreMaj = lettre.toLocaleUpperCase();
                    lettreBegacli.choisiMaj = false;
                    this.filtreBegacli.listeLettres.push(lettreBegacli);
                };
                BegacliService.prototype.AjouterNombre = function (nombre) {
                    var nombreBegacli = {};
                    nombreBegacli.nombre = nombre;
                    nombreBegacli.choisi = false;
                    this.filtreBegacli.listeNombres.push(nombreBegacli);
                };
                /**
                 *  décoche toutes les cases du filtre begacli
                 */
                BegacliService.prototype.setCasesDecochees = function () {
                    _.forEach(this.filtreBegacli.listeLettres, function (lettreBegacli) {
                        lettreBegacli.choisiMaj = false;
                        lettreBegacli.choisiMin = false;
                    });
                    _.forEach(this.filtreBegacli.listeNombres, function (nombreBegacli) {
                        nombreBegacli.choisi = false;
                    });
                    this.filtreBegacli.choisiNC = false;
                    this.expReguliere = null;
                };
                /**
                 *  si aucune case cochée , retour false
                 *  si au mmoins 1 case cochée, retour true
                 */
                BegacliService.prototype.getCasesCochees = function () {
                    var nb = 0;
                    _.forEach(this.filtreBegacli.listeLettres, function (lettreBegacli) {
                        if (lettreBegacli.choisiMaj === true || lettreBegacli.choisiMin === true) {
                            nb++;
                        }
                    });
                    _.forEach(this.filtreBegacli.listeNombres, function (nombreBegacli) {
                        if (nombreBegacli.choisi === true) {
                            nb++;
                        }
                    });
                    if (this.filtreBegacli.choisiNC === true) {
                        nb++;
                    }
                    if (nb > 0) {
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                /**
                 * completer bagacli avec le nombre d'univers
                 * recherche dans la relation les BEGACLI...
                 * calcule le nombre de majuscules dans le texte et l'ajoute au début sous forme x-.....
                 * @param relationCommerciale
                 */
                BegacliService.prototype.completerUniversBegacli = function (relationCommerciale) {
                    var indicateurBegacli;
                    for (var _i = 0, _a = relationCommerciale.listePortefeuilles; _i < _a.length; _i++) {
                        var itemPortefeuille = _a[_i];
                        for (var _b = 0, _c = itemPortefeuille.listeRelation; _b < _c.length; _b++) {
                            var itemRelation = _c[_b];
                            for (var _d = 0, _e = itemRelation.listeClient; _d < _e.length; _d++) {
                                var itemClient = _e[_d];
                                console.log(" ==> itemClient : ", itemClient);
                                indicateurBegacli = _.find(itemClient.listeIndicateurClient, { code: Portefeuille.Enum.Indicateur.CODE.BEGACLI.toString() });
                                if (indicateurBegacli) {
                                    indicateurBegacli.valeur = this.completerNombreMajuscules(indicateurBegacli.valeur);
                                }
                            }
                        }
                    }
                    return relationCommerciale;
                };
                /**
                 * completer bagacli avec le nombre d'univers
                 * recherche dans le client les indicagteurs BEGACLI...
                 * calcule le nombre de majuscules dans le texte et l'ajoute au début sous forme x-.....
                 * @param clients
                 */
                BegacliService.prototype.completerUniversBegacliClient = function (client) {
                    var indicateurBegacli;
                    for (var _i = 0, _a = client.listeClientIndicateur; _i < _a.length; _i++) {
                        var unClient = _a[_i];
                        indicateurBegacli = _.find(unClient.listeIndicateurClient, { code: Portefeuille.Enum.Indicateur.CODE.BEGACLI.toString() });
                        if (indicateurBegacli) {
                            indicateurBegacli.valeur = this.completerNombreMajuscules(indicateurBegacli.valeur);
                        }
                    }
                    return client;
                };
                BegacliService.prototype.completerNombreMajuscules = function (texte) {
                    if (texte === null) {
                        return null;
                    }
                    // mets devant le texte, le nombre de majuscules trouvées.
                    var cpt = 0;
                    var nb;
                    nb = texte.length;
                    for (var i = 0; i < nb; i++) {
                        if (texte[i] >= "A" && texte[i] <= "Z") {
                            cpt = cpt + 1;
                        }
                    }
                    return cpt + "-" + texte;
                };
                BegacliService.prototype.getFiltreBegacliTexte = function (filtre) {
                    var texte;
                    // console.log("--> getFiltreBegacliTexte filtre : ", filtre);
                    texte = filtre.indicateur.indicateur.intitule + " = ";
                    var txtUnivers = this.texteUnivers();
                    var txtNombre = this.texteNombre();
                    var txtNC = this.texteNC();
                    if (txtUnivers !== "" || txtNombre !== "") {
                        texte = texte + "[";
                    }
                    texte = texte + txtUnivers;
                    if (txtUnivers !== "" && txtNombre !== "") {
                        texte = texte + " et ";
                    }
                    texte = texte + txtNombre;
                    if (txtUnivers !== "" || txtNombre !== "") {
                        texte = texte + "]";
                    }
                    if (txtUnivers !== "" || txtNombre !== "") {
                        if (txtNC !== "") {
                            texte = texte + " ou ";
                        }
                    }
                    texte = texte + txtNC;
                    texte = texte; // + " - exp régulière : " + this.getExpReguliere();
                    return texte;
                };
                BegacliService.prototype.texteNC = function () {
                    var texte = "";
                    if (this.filtreBegacli.choisiNC === true) {
                        texte = "NC";
                    }
                    return texte;
                };
                BegacliService.prototype.texteNombre = function () {
                    var _this = this;
                    // si rien de coché, renvoie ""
                    // si au moins 1 case cochée, envoie le texte complet des nombres cochés
                    var texte = "";
                    _.forEach(this.filtreBegacli.listeNombres, function (nombreBegacli) {
                        if (nombreBegacli.choisi === true) {
                            texte = _this.ajoutercaractere(texte, nombreBegacli.nombre);
                        }
                    });
                    if (texte !== "") {
                        texte = "Nbr Univers équipés= [" + texte + "]";
                    }
                    return texte;
                };
                BegacliService.prototype.texteUnivers = function () {
                    var _this = this;
                    // si rien de coché, renvoie ""
                    // si au moins 1 case cochée, envoie le texte complet des univers
                    var texte = "";
                    _.forEach(this.filtreBegacli.listeLettres, function (lettreBegacli) {
                        if (lettreBegacli.choisiMaj === true) {
                            texte = _this.ajoutercaractere(texte, lettreBegacli.lettreMaj);
                        }
                        if (lettreBegacli.choisiMin === true) {
                            texte = _this.ajoutercaractere(texte, lettreBegacli.lettreMin);
                        }
                    });
                    if (texte !== "") {
                        texte = "Univers = [" + texte + "]";
                    }
                    return texte;
                };
                BegacliService.prototype.ajoutercaractere = function (texte, caractere) {
                    if (texte === "") {
                        return caractere;
                    }
                    else {
                        return texte + "," + caractere;
                    }
                };
                /**
                 * Récupération du filtre begacli
                 */
                BegacliService.prototype.getFiltreBegacli = function () {
                    return this.filtreBegacli;
                };
                /**
                 * conversion du filtre Begacli en expression régulière en fonction des cases cochées ...
                 */
                BegacliService.prototype.calculerExpReguliere = function () {
                    var texte = "";
                    var cpt = 0;
                    _.forEach(this.filtreBegacli.listeNombres, function (nombreBegacli) {
                        if (nombreBegacli.choisi === true) {
                            texte = texte + nombreBegacli.nombre;
                            cpt++;
                        }
                    });
                    if (texte === "") {
                        texte = "..";
                    }
                    else {
                        texte = "[" + texte + "].";
                    }
                    _.forEach(this.filtreBegacli.listeLettres, function (lettreBegacli) {
                        if (lettreBegacli.choisiMaj === true) {
                            cpt++;
                            texte = texte + lettreBegacli.lettreMaj;
                        }
                        else if (lettreBegacli.choisiMin === true) {
                            cpt++;
                            texte = texte + lettreBegacli.lettreMin;
                        }
                        else {
                            texte = texte + ".";
                        }
                    });
                    if (cpt === 0) {
                        texte = "";
                    }
                    return texte;
                };
                BegacliService.prototype.getExpReguliere = function () {
                    this.expReguliere = this.calculerExpReguliere();
                    return this.expReguliere;
                };
                BegacliService.CLASS_NAME = Portefeuille.Constantes.Inject.Services.begacliService;
                BegacliService.logger = loggerClass(BegacliService.CLASS_NAME);
                // Injection de dépendances 
                BegacliService.$inject = [];
                return BegacliService;
            }());
            Portefeuille.app.service(BegacliService.CLASS_NAME, BegacliService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service applicatif de choix EDS
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service permettant de gerer le choix EDS
             */
            var ChoixEdsService = (function () {
                // Variables utiles
                /**
                 * Constructeur
                 */
                function ChoixEdsService(contexteService, $q) {
                    this.contexteService = contexteService;
                    this.$q = $q;
                }
                /**
                 * Methode permetant de récupérer les caractéristiques agent à partir du modèle MyWay.Model.Agent
                 * @param {MyWay.Model.Agent} agent
                 * @return {ng.IPromise<Modeles.Application.ICaracteristiquesAgent>}
                 */
                ChoixEdsService.prototype.getCaracteristiquesAgent = function (agent) {
                    var deferred = this.$q.defer();
                    this.contexteService.getContexte()
                        .then(function (contexte) {
                        var caracteristiquesAgent = {};
                        caracteristiquesAgent.designationAgent = agent.designation;
                        caracteristiquesAgent.identifiantElementStructure = agent.idEds;
                        caracteristiquesAgent.libelleFonction = agent.libelleFonction;
                        caracteristiquesAgent.codeEtablissement = contexte.codeEtablissement;
                        deferred.resolve(caracteristiquesAgent);
                    })
                        .catch(function (error) {
                        deferred.reject(error);
                    });
                    return deferred.promise;
                };
                ChoixEdsService.CLASS_NAME = "EventService";
                ChoixEdsService.logger = loggerClass(ChoixEdsService.CLASS_NAME);
                // Injection de dépendances 
                ChoixEdsService.$inject = [
                    Portefeuille.Constantes.Inject.Services.contexteService,
                    Portefeuille.Constantes.Inject.Angular.$q
                ];
                return ChoixEdsService;
            }());
            // Déclaration du service
            Portefeuille.app.service("ChoixEdsService", ChoixEdsService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service applicatif de choix Utilisateur
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service permettant de gerer le choix utilisateur
             */
            var ChoixUtilisateurService = (function () {
                /**
                 * Constructeur
                 */
                function ChoixUtilisateurService(gestionAffectationService, rechercheAgentService, edsNiveauInferieurService, contexteService, $q) {
                    this.gestionAffectationService = gestionAffectationService;
                    this.rechercheAgentService = rechercheAgentService;
                    this.edsNiveauInferieurService = edsNiveauInferieurService;
                    this.contexteService = contexteService;
                    this.$q = $q;
                }
                /**
                 * Methode permetant de récupérer la liste des agences
                 * @param identifiantEds
                 * @return {MyWay.Services.IPromesse<Array<Modeles.Application.IAgence>>}
                 */
                ChoixUtilisateurService.prototype.rechercherListeAgence = function (identifiantEds) {
                    var _this = this;
                    return this.contexteService.getContexte()
                        .then(function (contexte) {
                        var query = {};
                        query.codeEtablissement = contexte.codeEtablissement;
                        query.codeAgentAffectation = identifiantEds;
                        query.dateDebutPeriodeAffectation = moment().format(Portefeuille.Constantes.Application.FORMAT_DATE_REST);
                        //  query.niveau2 = "1";  // pas besoin
                        return _this.gestionAffectationService.getGestionAffectation(query);
                    }).then(function (gestionAffectation) {
                        var listeAgences = [];
                        _.forEach(gestionAffectation.listeGestionAffectationAgent, function (affectation) {
                            var agence = {};
                            agence.id = affectation.identifiantEDSRattachement; // ou identifiantEDSAffectation
                            agence.nomEds = affectation.libelleEDSRattachement;
                            agence.affiche = false;
                            listeAgences.push(agence);
                        });
                        return listeAgences;
                    });
                };
                /**
                 * Methode permetant de récupérer la liste des agents
                 * @return {MyWay.Services.IPromesse<Array<Modeles.Application.ICaracteristiquesAgent>>}
                 */
                ChoixUtilisateurService.prototype.rechercherAgent = function (identifiantEdsAgence) {
                    var _this = this;
                    var deferred = this.$q.defer();
                    this.contexteService.getContexte()
                        .then(function (contexte) {
                        var query = {};
                        query.codeEtablissement = contexte.codeEtablissement;
                        query.codeAction = Portefeuille.Constantes.Rest.AGENT_V2_CODE_ACTION_1;
                        //query.typeRecherche = Constantes.Rest.AGENT_V2_TYPE_RECHERCHE_AGENCE_RATTACHEMENT;
                        query.typeRecherche = Portefeuille.Constantes.Rest.AGENT_V2_TYPE_RECHERCHE_GROUPE_FONCTION;
                        query.identifiantEDSRattachement = identifiantEdsAgence;
                        query.groupeFonction = Portefeuille.Constantes.Rest.AGENT_V2_RECHERCHE_GROUPE_FONCTION_BDR;
                        return _this.rechercheAgentService.getListeCaracteristiquesAgent(query);
                    })
                        .then(function (rechercheAgent) {
                        var listeEds = [];
                        _.forEach(rechercheAgent.listeAgents, function (agent) {
                            if (agent.identifiantEDSHierarchique === identifiantEdsAgence) {
                                var caracteristiquesAgent = {};
                                caracteristiquesAgent.designationAgent = agent.designationAgent;
                                caracteristiquesAgent.identifiantElementStructure = agent.identifiantElementStructure;
                                caracteristiquesAgent.libelleFonction = agent.libelleFonction;
                                caracteristiquesAgent.codeEtablissement = agent.codeEtablissement;
                                caracteristiquesAgent.identifiantAgent = agent.identifiantAgent;
                                listeEds.push(caracteristiquesAgent);
                            }
                        });
                        deferred.resolve(listeEds);
                    })
                        .catch(function (error) {
                        deferred.reject(error);
                    });
                    return deferred.promise;
                };
                // récupère tous les EDS de niveaux inférieurs
                // on va retourner les postes fonctionnels dans .infoPosteFonctionnel et les autres dans .infoEDS qui seront affichés comme des dossiers pour descendre d'un niveau
                ChoixUtilisateurService.prototype.rechercherEdsInferieurs = function (edsAgence) {
                    var _this = this;
                    var deferred = this.$q.defer();
                    this.contexteService.getContexte()
                        .then(function (contexte) {
                        var query = {};
                        query.codeEtablissement = contexte.codeEtablissement;
                        query.identifiantInterneEDS = edsAgence.id;
                        return _this.edsNiveauInferieurService.getEdsNiveauInferieur(query);
                    })
                        .then(function (resultat) {
                        var listeEds = [];
                        // récupère aussi les autres éléments de structure dans .infoEDS et les afficher dans des dossiers. 
                        // Au clic on ira recharger la vue de sélection des PTFS avec cette nouvelle réponse.
                        _.forEach(resultat.infoEDS, function (infoEDS) {
                            var caracteristiquesAgence = {};
                            caracteristiquesAgence.id = infoEDS.identifiantInterneEDS;
                            caracteristiquesAgence.nomEds = infoEDS.libelleEDS;
                            caracteristiquesAgence.agencesSuperieur = edsAgence;
                            caracteristiquesAgence.agencesInferieur = null;
                            caracteristiquesAgence.typeEDS = infoEDS.typeEDS;
                            caracteristiquesAgence.libelleTypeEDS = infoEDS.libelleTypeEDS;
                            caracteristiquesAgence.affiche = false;
                            listeEds.push(caracteristiquesAgence);
                        });
                        edsAgence.agencesInferieur = listeEds;
                        deferred.resolve(edsAgence);
                    })
                        .catch(function (error) {
                        deferred.reject(error);
                    });
                    return deferred.promise;
                };
                Object.defineProperty(ChoixUtilisateurService.prototype, "edsSelectionne", {
                    /**
                     *
                     */
                    get: function () {
                        return this._edsSelectionne;
                    },
                    /**
                     *
                     */
                    set: function (eds) {
                        this._edsSelectionne = eds;
                    },
                    enumerable: true,
                    configurable: true
                });
                ChoixUtilisateurService.CLASS_NAME = "ChoixUtilisateurService";
                ChoixUtilisateurService.logger = loggerClass(ChoixUtilisateurService.CLASS_NAME);
                // Injection de dépendances 
                ChoixUtilisateurService.$inject = [
                    Portefeuille.Constantes.Inject.Services.gestionAffectationRestService,
                    Portefeuille.Constantes.Inject.Services.rechercheAgentRestService,
                    Portefeuille.Constantes.Inject.Services.edsNiveauInferieurService,
                    Portefeuille.Constantes.Inject.Services.contexteService,
                    Portefeuille.Constantes.Inject.Angular.$q
                ];
                return ChoixUtilisateurService;
            }());
            // Déclaration du service
            Portefeuille.app.service("ChoixUtilisateurService", ChoixUtilisateurService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Implémentation du service gérant le contexte de l'application
             * @author: S0077481
             */
            var ContexteService = (function () {
                function ContexteService(serviceAgentExtended, $q, $location, eventService) {
                    this.serviceAgentExtended = serviceAgentExtended;
                    this.$q = $q;
                    this.$location = $location;
                    this.eventService = eventService;
                }
                /**
                 * Retourne l'objet Authentification
                 */
                ContexteService.prototype.getAuthentification = function () {
                    var _this = this;
                    ContexteService.logger.info(">>> Appel de la méthode : ContexteService.getAuthentification <<<");
                    if (this.authentificationInfo) {
                        return this.$q.when(this.authentificationInfo);
                    }
                    else {
                        return this.setAuthentification().then(function () {
                            return _this.authentificationInfo;
                        });
                    }
                };
                /**
                 * Methode permettant de recuperer les informations d'authentification
                 */
                ContexteService.prototype.setAuthentification = function () {
                    var _this = this;
                    ContexteService.logger.info(">>> Appel de la méthode : ContexteService.setAuthentification <<<");
                    return this.serviceAgentExtended.getAuthentificationInfo().then(function (result) {
                        return _this.authentificationInfo = result;
                    });
                };
                /**
                 * Mise en place du contexte LISA
                 * @author: S0005354
                 */
                ContexteService.prototype.setContexte = function () {
                    ContexteService.logger.debug(">>> Appel de la méthode : ContexteService.setContexte <<<");
                    var contexteRetour = null;
                    if (this.contexte) {
                        contexteRetour = this.contexte;
                    }
                    else if (this.authentificationInfo &&
                        this.authentificationInfo.agentConnecte) {
                        contexteRetour = {};
                        contexteRetour.identifiantUser = this.authentificationInfo.agentConnecte.referenceExterneAgent;
                        contexteRetour.codeEtablissement = this.authentificationInfo.codeEtablissement;
                        contexteRetour.designation = this.authentificationInfo.agentConnecte.designationLongueAgent;
                        contexteRetour.edsUser = +this.authentificationInfo.agentConnecte.numeroInterneEds;
                        contexteRetour.edsVisu = +this.authentificationInfo.agentConnecte.numeroInterneEds;
                        contexteRetour.edsSuperieurUser = +this.authentificationInfo.agentConnecte.numeroEdsSuperieur;
                        this.contexte = contexteRetour;
                    }
                    return this.$q.when(contexteRetour);
                };
                /**
                 * Récupération de l'objet IContexte
                 */
                ContexteService.prototype.getContexte = function () {
                    var _this = this;
                    ContexteService.logger.debug(">>> Appel de la méthode : ContexteApplication.getContexte <<<");
                    if (this.contexte) {
                        return this.$q.when(this.contexte);
                    }
                    else {
                        return this.setContexte().then(function () {
                            return _this.$q.when(_this.contexte);
                        });
                    }
                };
                /**
                 *
                 */
                ContexteService.prototype.getDesignation = function () {
                    return (this.contexte) ? this.contexte.designation : "";
                };
                /**
                 *
                 * @param edsVisu
                 */
                ContexteService.prototype.setEdsVisu = function (edsVisu) {
                    this.contexte.edsVisu = edsVisu;
                };
                /**
                 *
                 * @param edsVisu
                 */
                ContexteService.prototype.setestVueMultiSuiviPar = function (estVueMultiSuiviPar) {
                    this.contexte.estVueMultiSuiviPar = estVueMultiSuiviPar;
                };
                ContexteService.prototype.ajoutPourDebranchementSyntheseClient = function (identifiantPersonne, typeSynthese) {
                    var _this = this;
                    var tabPromesses = [];
                    var listeClesContexteAEffacer = [
                        Portefeuille.Constantes.Contexte.IDENTIFIANT_PERSONNE,
                        Portefeuille.Constantes.Contexte.TYPE_SYNTHESE];
                    return this.viderContexteDebranchement(listeClesContexteAEffacer)
                        .then(function () {
                        //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.IDENTIFIANT_PERSONNE, identifiantPersonne));
                        //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.TYPE_SYNTHESE, typeSynthese));
                        tabPromesses.push(_this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.IDENTIFIANT_PERSONNE, identifiantPersonne));
                        tabPromesses.push(_this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.TYPE_SYNTHESE, typeSynthese));
                        return _this.$q.all(tabPromesses)
                            .catch(function (erreur) {
                            ContexteService.logger.error("Erreur lors de l'ajout dans le contexte pour l'appel de synthèse client", erreur);
                            throw erreur;
                        });
                    });
                };
                /**
                 * Methode permetant d'ajouter les données utiles au débranchement vers Synthèse client
                 * @param {string} identifiantPersonne
                 * @returns {ng.IPromise<any>}
                 */
                ContexteService.prototype.ajouterDonneesDebranchementSyntheseClient = function (contexteGererPortefeuille, typeSynthese) {
                    var _this = this;
                    var tabPromesses = [];
                    if (!contexteGererPortefeuille) {
                        return this.$q.reject(new MyWay.Services.Erreur("Paramètre contexteGererPortefeuille absent à tort => Débranchement vers Synthèse Client impossible."));
                    }
                    var listeClesContexteAEffacer = [
                        Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF,
                        Portefeuille.Constantes.Contexte.IDENTIFIANT_PERSONNE,
                        Portefeuille.Constantes.Contexte.TYPE_SYNTHESE];
                    return this.viderContexteDebranchement(listeClesContexteAEffacer)
                        .then(function () {
                        //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));
                        //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.IDENTIFIANT_PERSONNE, contexteGererPortefeuille.identifiantPersonne));
                        //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.TYPE_SYNTHESE, typeSynthese));
                        tabPromesses.push(_this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));
                        tabPromesses.push(_this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.IDENTIFIANT_PERSONNE, contexteGererPortefeuille.identifiantPersonne));
                        tabPromesses.push(_this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.TYPE_SYNTHESE, typeSynthese));
                        return _this.$q.all(tabPromesses)
                            .catch(function (erreur) {
                            ContexteService.logger.error("Erreur lors de l'ajout dans le contexte du contrat d'entrée de synthése client", erreur);
                            throw erreur;
                        });
                    });
                };
                /**
                 * Methode permettant d'ajouter les données utiles au débranchement vers la revue de portefeuille d'un client
                 * @param contexteGererPortefeuille
                 */
                ContexteService.prototype.ajouterDonneesDebranchementRevueClient = function (contexteGererPortefeuille) {
                    var _this = this;
                    var tabPromesses = [];
                    if (!contexteGererPortefeuille) {
                        return this.$q.reject(new MyWay.Services.Erreur("Paramètre contexteGererPortefeuille absent à tort => Débranchement vers Revue Client impossible."));
                    }
                    var listeClesContexteAEffacer = [
                        Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF,
                        Portefeuille.Constantes.Contexte.CONTEXTE_VERS_REVUE
                    ];
                    return this.viderContexteDebranchement(listeClesContexteAEffacer)
                        .then(function () {
                        var contextePourRevue = _this.alimenterContexteVersRevue(contexteGererPortefeuille);
                        //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));
                        //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_VERS_REVUE, contextePourRevue));
                        tabPromesses.push(_this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));
                        tabPromesses.push(_this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.CONTEXTE_VERS_REVUE, contextePourRevue));
                        return _this.$q.all(tabPromesses)
                            .catch(function (erreur) {
                            ContexteService.logger.error("Erreur lors de l'ajout dans le contexte du contrat d'entrée de la revue client", erreur);
                            throw erreur;
                        });
                    });
                };
                /**
                 * Methode permettant d'ajouter les données utiles au débranchement vers le bilan revue de portefeuille d'une relation économique
                 * @param contexteGererPortefeuille
                 */
                ContexteService.prototype.ajouterDonneesDebranchementBilanRevueRelationEco = function (contexteGererPortefeuille) {
                    var _this = this;
                    var tabPromesses = [];
                    if (!contexteGererPortefeuille) {
                        return this.$q.reject(new MyWay.Services.Erreur("Paramètre contexteGererPortefeuille absent à tort => Débranchement vers Bilan Revue Relation éco impossible."));
                    }
                    var listeClesContexteAEffacer = [
                        Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF,
                        Portefeuille.Constantes.Contexte.CONTEXTE_VERS_REVUE
                    ];
                    return this.viderContexteDebranchement(listeClesContexteAEffacer)
                        .then(function () {
                        var contextePourRevue = _this.alimenterContexteVersRevue(contexteGererPortefeuille);
                        //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));
                        //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_VERS_REVUE, contextePourRevue));
                        tabPromesses.push(_this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));
                        tabPromesses.push(_this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.CONTEXTE_VERS_REVUE, contextePourRevue));
                        return _this.$q.all(tabPromesses)
                            .catch(function (erreur) {
                            ContexteService.logger.error("Erreur lors de l'ajout dans le contexte du contrat d'entrée du bilan de revues d'une relation économique", erreur);
                            throw erreur;
                        });
                    });
                };
                /**
                 * Methode permettant d'ajouter les données utiles au débranchement vers le bilan revue de portefeuille
                 * @param contexteGererPortefeuille
                 */
                ContexteService.prototype.ajouterDonneesDebranchementBilanRevuePortefeuille = function (contexteGererPortefeuille) {
                    var _this = this;
                    var tabPromesses = [];
                    if (!contexteGererPortefeuille) {
                        return this.$q.reject(new MyWay.Services.Erreur("Paramètre contexteGererPortefeuille absent à tort => Débranchement vers Bilan Revue Portefeuille impossible."));
                    }
                    var listeClesContexteAEffacer = [
                        Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF,
                        Portefeuille.Constantes.Contexte.CONTEXTE_VERS_REVUE,
                        Portefeuille.Constantes.Contexte.CONTEXTE_EDS_PORTEFEUILLES
                    ];
                    return this.viderContexteDebranchement(listeClesContexteAEffacer)
                        .then(function () {
                        var contextePourRevue = _this.alimenterContexteVersRevue(contexteGererPortefeuille);
                        var contextePourEdsPortefeuilles = _this.alimenterContexteVersEsdPortefeuilles(contexteGererPortefeuille);
                        //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));
                        //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_VERS_REVUE, contextePourRevue));
                        //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_EDS_PORTEFEUILLES, JSON.stringify(contextePourEdsPortefeuilles)));
                        tabPromesses.push(_this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));
                        tabPromesses.push(_this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.CONTEXTE_VERS_REVUE, contextePourRevue));
                        tabPromesses.push(_this.serviceAgentExtended.addToContext(Portefeuille.Constantes.Contexte.CONTEXTE_EDS_PORTEFEUILLES, JSON.stringify(contextePourEdsPortefeuilles)));
                        return _this.$q.all(tabPromesses)
                            .catch(function (erreur) {
                            ContexteService.logger.error("Erreur lors de l'ajout dans le contexte du contrat d'entrée du bilan de revues d'une liste de portefeuilles", erreur);
                            throw erreur;
                        });
                    });
                };
                /**
                 * Supprime le(s) contexte(s) dont l'application n'a plus besoin.
                 * @param listeClesAEffacer
                 */
                ContexteService.prototype.supprimerContexteDevenuInutile = function (listeClesAEffacer) {
                    return this.viderContexteDebranchement(listeClesAEffacer)
                        .then(function () {
                        ContexteService.logger.info("Suppression du contexte réalisée avec succès.");
                    })
                        .catch(function (erreur) {
                        ContexteService.logger.error("Erreur lors de la suppression du contexte", erreur);
                        throw erreur;
                    });
                };
                /**
                 * Methode permettant de récupérer du contexte de gestion du retour
                 * @returns {ng.IPromise<Modeles.Application.IObjetEdsChoisi>}
                 */
                ContexteService.prototype.recupererRetourDebranchement = function () {
                    var _this = this;
                    return this.serviceAgentExtended.getFromContext(Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF).then(function (contexteGererPortefeuille) {
                        return _this.$q.when(contexteGererPortefeuille);
                    });
                };
                /**
                 * Méthode permettant de vérifier si on est dans un contexte PCM
                 * @returns {ng.IPromise<boolean>}
                 */
                ContexteService.prototype.isPCM = function () {
                    ContexteService.logger.info("Vérification intéropérabilité application bancaire");
                    return this.serviceAgentExtended.Capacites.getCapacite(MyWay.Services.Capacites.REGLE.INTEROP_APPLI_BANCAIRE);
                };
                /**
                 * Supprime du contexte toutes les clés passées en paramètre
                 * @param listeClesAEffacer
                 */
                ContexteService.prototype.viderContexteDebranchement = function (listeClesAEffacer) {
                    var _this = this;
                    var tabPromesses = [];
                    _.forEach(listeClesAEffacer, function (cleLue) {
                        if (cleLue) {
                            //tabPromesses.push(this.serviceAgentExtended.removeFromSharedContext(cleLue));
                            // on ne mets plus rien dans le shared contexte. Il n'y a pas de méthode equivalente au remove shared context donc on met "null" dans la valeur
                            tabPromesses.push(_this.serviceAgentExtended.addToContext(cleLue, null));
                        }
                    });
                    return this.$q.all(tabPromesses).then(function (resultats) {
                        return _this.$q.when();
                    });
                };
                /**
                 * Alimente le contexte nécessaire au fonctionnement de l'application Revue de Portefeuilles à partir de celui de l'application Animer les Portefeuilles
                 * @param contexteGererPortefeuille
                 */
                ContexteService.prototype.alimenterContexteVersRevue = function (contexteGererPortefeuille) {
                    var resultat;
                    if (contexteGererPortefeuille) {
                        resultat = {};
                        //On ne crée les propriétés que si la source est renseignée.
                        if (contexteGererPortefeuille.identifiantPersonne) {
                            resultat.identifiantPersonne = contexteGererPortefeuille.identifiantPersonne;
                        }
                        resultat.estClient = contexteGererPortefeuille.estClient;
                        if (contexteGererPortefeuille.raisonSociale) {
                            resultat.raisonSociale = contexteGererPortefeuille.raisonSociale;
                        }
                        if (contexteGererPortefeuille.identifiantRelation) {
                            resultat.identifiantRelation = contexteGererPortefeuille.identifiantRelation;
                        }
                        if (contexteGererPortefeuille.libelleRelation) {
                            resultat.libelleRelation = contexteGererPortefeuille.libelleRelation;
                        }
                        if (contexteGererPortefeuille.siren) {
                            resultat.siren = contexteGererPortefeuille.siren;
                        }
                        if (contexteGererPortefeuille.objetEdsVisu) {
                            if (contexteGererPortefeuille.objetEdsVisu.objCaractAgent) {
                                resultat.idEds = contexteGererPortefeuille.objetEdsVisu.objCaractAgent.identifiantElementStructure;
                                resultat.designationAgent = contexteGererPortefeuille.objetEdsVisu.objCaractAgent.designationAgent;
                            }
                            resultat.nombreTotalPortefeuilles = contexteGererPortefeuille.objetEdsVisu.nombrePortefeuilleTotalAgent;
                            resultat.listeIdsPortefeuille = contexteGererPortefeuille.objetEdsVisu.listePtfVisu;
                        }
                        resultat.typeForcage = contexteGererPortefeuille.typeForcage;
                        resultat.listeClientAffiches = contexteGererPortefeuille.listeClientAffiches;
                    }
                    return resultat;
                };
                /**
                 * Alimente le contexte nécessaire au fonctionnement de l'application Revue de Portefeuilles à partir de celui de l'application Animer les Portefeuilles
                 * @param contexteGererPortefeuille
                 */
                ContexteService.prototype.alimenterContexteVersEsdPortefeuilles = function (contexteGererPortefeuille) {
                    var resultat;
                    resultat = {};
                    if (contexteGererPortefeuille) {
                        if (contexteGererPortefeuille.objetEdsVisu) {
                            if (contexteGererPortefeuille.objetEdsVisu.objCaractAgent) {
                                resultat.idEds = contexteGererPortefeuille.objetEdsVisu.objCaractAgent.identifiantElementStructure;
                            }
                            resultat.listeIdsPortefeuille = contexteGererPortefeuille.objetEdsVisu.listePtfVisu;
                        }
                    }
                    return resultat;
                };
                ContexteService.prototype.tracerSuiviAction = function (logger, action) {
                    logger.warn("ActionBouton " + action);
                };
                /*
                 * Trace le suivi d'une action remarquable
                 * @param action {string} action associée
                 */
                ContexteService.prototype.tracerSuiviActionPromise = function (action) {
                    var traceSuivi = {
                        action: action,
                        agentCode: null,
                        agentEdsCode: null,
                        agentEdsInternalRef: null,
                        agentEdsType: null,
                        computerEdsInternalId: null,
                        computerSi: null,
                        data: null,
                        dateUse: null,
                        deviceId: null,
                        deviceType: null,
                        establishment: null,
                        processIdBusiness: null,
                        processIdCurrent: null,
                        processIdMaster: null,
                        resultStep: null,
                        state: null,
                        stepIdCurrent: null,
                        timezone: null
                    };
                    return this.serviceAgentExtended.TraceSuivi.tracer(traceSuivi);
                };
                ContexteService.$inject = [
                    Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                    Portefeuille.Constantes.Inject.Angular.$q,
                    Portefeuille.Constantes.Inject.Angular.$location,
                    Portefeuille.Constantes.Inject.Services.eventService
                ];
                ContexteService.CLASS_NAME = "ContexteService";
                ContexteService.logger = loggerClass(ContexteService.CLASS_NAME);
                return ContexteService;
            }());
            Portefeuille.app.service(ContexteService.CLASS_NAME, ContexteService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service applicatif de gestion d'événement
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service permettant d'exposer tout ou partie de fonctions de certains controleurs
             */
            var EventService = (function () {
                /**
                 * Constructeur
                 */
                function EventService($q) {
                    this.$q = $q;
                }
                /**
                 * Méthode permettant de modifier le PfDiagrammeDonutControleur
                 * @param PfDiagrammeDonutControleur
                 * @return {void}
                 */
                EventService.prototype.setPfDiagrammeDonutControleur = function (pfDiagrammeDonutControleur) {
                    this.pfDiagrammeDonutControleur = pfDiagrammeDonutControleur;
                };
                /**
                 *
                 */
                EventService.prototype.initialiserPfDiagrammeDonutControleur = function () {
                    if (this.pfDiagrammeDonutControleur) {
                        this.pfDiagrammeDonutControleur.initialiser();
                    }
                };
                /**
                 * Méthode permettant de modifier le portefeuilleControleur
                 * @param portefeuilleControleur
                 * @return {void}
                 */
                EventService.prototype.setPortefeuilleControleur = function (portefeuilleControleur) {
                    this.portefeuilleControleur = portefeuilleControleur;
                };
                /**
                 * Méthode permettant de modifier le pfLigneRelationEcoControleur
                 * @param pfLigneRelationEcoControleur
                 * @return {void}
                 */
                EventService.prototype.setPfLigneRelationEcoControleur = function (pfLigneRelationEcoControleur) {
                    this.pfLigneRelationEcoControleur = pfLigneRelationEcoControleur;
                };
                /**
                 *
                 * @param listeIndicateurs
                 */
                EventService.prototype.reInitialiserLigneRelationEcoPfLigneRelationEcoControleur = function (listeIndicateurs) {
                    if (this.pfLigneRelationEcoControleur) {
                        this.pfLigneRelationEcoControleur.reInitialiser(listeIndicateurs);
                    }
                };
                /**
                 * Méthode permettant de modifier le clientControleur
                 * @param clientsControleur
                 * @return {void}
                 */
                EventService.prototype.setClientsControleur = function (clientsControleur) {
                    this.clientsControleur = clientsControleur;
                };
                /**
                 * Méthode permettant de modifier l'indexControleur
                 * @param indexControleur
                 * @return {void}
                 */
                EventService.prototype.setIndexControleur = function (indexControleur) {
                    this.indexControleur = indexControleur;
                };
                /**
                 * Méthode permettant de modifier l'indexControleur
                 * @param indexControleur
                 * @return {void}
                 */
                EventService.prototype.setChoixPortfeuilleControleur = function (choixPortfeilleControleur) {
                    this.pfChoixPortefeuilleControleur = choixPortfeilleControleur;
                };
                /**
                 *
                 */
                EventService.prototype.initialiserListePortfeuilleIndexControleur = function () {
                    if (this.pfChoixPortefeuilleControleur) {
                        return this.indexControleur.initListePortefeuilles();
                    }
                };
                /**
                 *
                 * @param edsChoisi
                 * @param contexte
                 * @param listePtfActifs
                 */
                EventService.prototype.majDonneesDonneesEdsIndexControleur = function (edsChoisi, contexte, listePtfActifs) {
                    if (this.indexControleur) {
                        return this.indexControleur.majDonneesDonneesEds(edsChoisi, contexte, listePtfActifs);
                    }
                    else {
                        return this.$q.when();
                    }
                };
                /**
                 *
                 * @param estHabilite
                 */
                EventService.prototype.initialiserHabilitationChoixAgentIndexControleur = function (estHabilite) {
                    if (this.indexControleur) {
                        this.indexControleur.initialiserHabilitationChoixAgent(estHabilite);
                    }
                };
                /**
                 *
                 * @param estHabilite
                 */
                EventService.prototype.initialiserHabilitationChoixEDSIndexControleur = function (estHabilite) {
                    if (this.indexControleur) {
                        this.indexControleur.initialiserHabilitationChoixEDS(estHabilite);
                    }
                };
                /**
                 * Méthode permettant d'ouvrir le volet de choix de portefeuille via l'indexControleur
                 * @param indexControleur
                 * @return {void}
                 */
                EventService.prototype.ouvrirVoletChoixPortefeuilleIndexControleur = function () {
                    if (this.indexControleur) {
                        this.indexControleur.ouvrirChoixPortefeuille();
                    }
                };
                /**
                 * Permet d'effectuer le filtrage relation economique sur le tableau client
                 * @param idRelationFiltre
                 * @returns {void}
                 */
                EventService.prototype.filtrageTableauClientClientsControleur = function (idRelationFiltre) {
                    if (this.clientsControleur) {
                        this.clientsControleur.filtrageTableauClient(idRelationFiltre);
                    }
                };
                /**
                 *
                 * @param typeForcage
                 */
                EventService.prototype.initialiserListeRelationEtClient = function (typeForcage) {
                    if (this.clientsControleur) {
                        return this.clientsControleur.initialiser(typeForcage);
                    }
                };
                /**
                 *
                 */
                EventService.prototype.initialiserVueGlobale = function () {
                    if (this.portefeuilleControleur) {
                        return this.portefeuilleControleur.initialiserStatistiques();
                    }
                };
                /**
                 * Permet de supprimer tous les filtres d'un tableau via le clients controleur
                 * @returns {void}
                 */
                EventService.prototype.supprimerTousLesFiltresClientsControleur = function () {
                    if (this.clientsControleur) {
                        this.clientsControleur.supprimerTousLesFiltres();
                    }
                };
                /**
                 *
                 */
                EventService.prototype.reinitInitStatsVueGlobale = function () {
                    if (this.portefeuilleControleur) {
                        this.portefeuilleControleur.reinitInitStats();
                    }
                };
                /**
                 *
                 */
                EventService.prototype.initListePortefeuilles = function () {
                    if (this.indexControleur) {
                        return this.indexControleur.initListePortefeuilles();
                    }
                    else {
                        return this.$q.when();
                    }
                };
                /**
                 *
                 */
                EventService.prototype.chargerListePortefeilleDropDown = function () {
                    if (this.indexControleur) {
                        this.indexControleur.chargerListePortefeilleDropDown();
                    }
                };
                /**
                 *
                 */
                EventService.prototype.setEstVueMultiGererPar = function (etat) {
                    if (this.portefeuilleControleur) {
                        this.portefeuilleControleur.setEstVueMultiSuiviPar(etat);
                    }
                };
                EventService.CLASS_NAME = "EventService";
                EventService.logger = loggerClass(EventService.CLASS_NAME);
                // Injection de dépendances 
                EventService.$inject = [
                    Portefeuille.Constantes.Inject.Angular.$q
                ];
                return EventService;
            }());
            // Déclaration du service
            Portefeuille.app.service(EventService.CLASS_NAME, EventService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service applicatif de choix EDS
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service permettant de gerer le choix EDS
             */
            var ExportService = (function () {
                function ExportService(serviceAgent, mwNotificationService) {
                    this.serviceAgent = serviceAgent;
                    this.mwNotificationService = mwNotificationService;
                }
                /**
                 * Export du tableau affiché dans un fichier CSV
                 * @param tableauExport Le tableau à exporter
                 * @param nomFichier Le nom du fichier d'export (la date sera ajoutée à la fin du nom indiqué)
                 */
                ExportService.prototype.exporterCSV = function (tableauExport, nomFichier) {
                    var _this = this;
                    var optionSup = {
                        nomFichier: nomFichier
                    };
                    /** Création du fichier .csv (format Excel) */
                    return this.serviceAgent.Export.exporterFichier(tableauExport, MyWay.Services.Export.FORMAT_FICHIER.CSV, optionSup).then(function () {
                        _this.mwNotificationService.showNotification("Export du tableau réussi");
                    });
                };
                /**
                 * Formatage CSV
                 * @param pContenu
                 */
                ExportService.prototype.chargerDonneesTableau = function (pContenu) {
                    var ligneDonnees = [];
                    _.forEach(pContenu, function (ligneTableauJson) {
                        var maLigne = { ligne: [] };
                        for (var i in ligneTableauJson) {
                            var cell = {};
                            cell.cellule = ligneTableauJson[i];
                            maLigne.ligne.push(cell);
                        }
                        ligneDonnees.push(maLigne);
                    });
                    return ligneDonnees;
                };
                /**
                 *
                 * @param listeEntetes
                 * @param donneesExport
                 * @param fichierExport
                 */
                ExportService.prototype.genererFichierExport = function (listeEntetes, donneesExport, fichierExport) {
                    var tableauExport;
                    tableauExport = {
                        entetes: listeEntetes,
                        contenu: this.chargerDonneesTableau(donneesExport)
                    };
                    return this.exporterCSV(tableauExport, fichierExport);
                };
                ExportService.CLASS_NAME = "ExportService";
                ExportService.logger = loggerClass(ExportService.CLASS_NAME);
                // Injection de dépendances 
                ExportService.$inject = [
                    Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                    "MwNotificationService"
                ];
                return ExportService;
            }());
            Application.ExportService = ExportService;
            Portefeuille.app.service(ExportService.CLASS_NAME, ExportService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service de gestion des filtres
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service de gestion de la liste des clients
             */
            var FiltreService = (function () {
                /**
                 * Constructeur
                 */
                function FiltreService(eventService, begacliService) {
                    this.eventService = eventService;
                    this.begacliService = begacliService;
                    this.filtresClients = [];
                    this.filtresRelationsEco = [];
                }
                /**
                 * Methode qui permet de filtrer une liste de client à partir d'une liste de filtre
                 * @param {Array<Modeles.Application.IClient>} listeDeClient
                 * @param {Array<Modeles.Application.IFiltre>} listeFiltres
                 * @returns {Array<Modeles.Application.IClient>}
                 */
                FiltreService.prototype.filtrerListeClients = function (listeDeClient, listeFiltres) {
                    var _this = this;
                    if (listeFiltres.length > 0) {
                        return _.filter(listeDeClient, function (client) {
                            return _this.estConformeAuxCriteres(_this.creerTableauResultatsFiltre(client.listeIndicateurs, listeFiltres, true), listeFiltres);
                        });
                    }
                    else {
                        return listeDeClient;
                    }
                };
                /**
                 * Methode qui permet de filtrer une liste de relation économique à partir d'une liste de filtre
                 * @param {Array<Modeles.Application.IRelationEconomique>} listeRelationsEco
                 * @param {Array<Modeles.Application.IFiltre>} listeFiltres
                 * @returns {Array<Modeles.Application.IRelationEconomique>}
                 */
                FiltreService.prototype.filtrerListeRelationsEco = function (listeRelationsEco, listeFiltres) {
                    var _this = this;
                    if (listeFiltres.length > 0) {
                        return _.filter(listeRelationsEco, function (relationEco) {
                            return _this.estConformeAuxCriteres(_this.creerTableauResultatsFiltre(relationEco.listeIndicateurs, listeFiltres, false), listeFiltres);
                        });
                    }
                    else {
                        return listeRelationsEco;
                    }
                };
                /**
                 * Methode qui permet de savoir si une liste de resultats de filtre d'un client est conforme ou non
                 * @param {Array<boolean>} listeResultatsFiltre
                 * @returns {boolean}
                 */
                FiltreService.prototype.estConformeAuxCriteres = function (listeResultatsFiltre, listeFiltres) {
                    if (listeFiltres.length === 1) {
                        return listeResultatsFiltre[0];
                    }
                    else {
                        switch (listeFiltres[1].operateur) {
                            case Portefeuille.Enum.Filtre.OPERATEUR.ET:
                                // Faux s'il y a au moins un resultat faux dans la liste des resultats
                                var trouveResultatFaux = _.find(listeResultatsFiltre, function (resultat) {
                                    return resultat === false;
                                });
                                return trouveResultatFaux === false ? false : true;
                            case Portefeuille.Enum.Filtre.OPERATEUR.OU:
                                // Vrai s'il y a au moins un resultat vrai dans la liste des resultats
                                var trouveResultatVrai = _.find(listeResultatsFiltre, function (resultat) {
                                    return resultat === true;
                                });
                                return trouveResultatVrai ? true : false;
                            default:
                                return false;
                        }
                    }
                };
                /**
                 * Methode qui permet de creer le tableau de resultats des filtres sur un client
                 * @param {Array<Modeles.Application.IIndicateur>} listeIndicateursClient
                 * @returns {Array<boolean>}
                 */
                FiltreService.prototype.creerTableauResultatsFiltre = function (listeIndicateurs, listeFiltres, estVueClient) {
                    var _this = this;
                    var listeResultats = [];
                    _.forEach(listeFiltres, function (filtre) {
                        var indicateurClient = _.find(listeIndicateurs, { code: filtre.indicateur.indicateur.code });
                        switch (filtre.indicateur.indicateur.typeIndicateur) {
                            case Portefeuille.Enum.Indicateur.TYPE.TEXTE:
                                listeResultats.push(_this.traiterFiltreTypeTexte(indicateurClient.valeur, filtre.indicateur.listeValeurs));
                                break;
                            case Portefeuille.Enum.Indicateur.TYPE.BEGACLI:
                                listeResultats.push(_this.traiterFiltreTypeBegacli(indicateurClient.valeur, filtre.indicateur.listeValeurs));
                                break;
                            case Portefeuille.Enum.Indicateur.TYPE.DATE:
                                listeResultats.push(_this.traiterFiltreTypeDate(indicateurClient.valeurDate, filtre));
                                break;
                            case Portefeuille.Enum.Indicateur.TYPE.NOMBRE:
                            case Portefeuille.Enum.Indicateur.TYPE.POURCENT:
                            case Portefeuille.Enum.Indicateur.TYPE.MONTANT:
                                listeResultats.push(_this.traiterFiltreTypeNombre(indicateurClient.valeurNumber, filtre));
                                break;
                            default:
                                break;
                        }
                    });
                    return listeResultats;
                };
                /**
                 * Methode qui permet de traiter un filtre de type texte
                 * @param {string} valeurClient
                 * @param {Array<Modeles.Application.IValeurFiltre>} listeValeursFiltre
                 * @returns {boolean}
                 */
                FiltreService.prototype.traiterFiltreTypeTexte = function (valeurClient, listeValeursFiltre) {
                    var trouve = _.find(listeValeursFiltre, function (valeur) {
                        // gère les NC avec un tri: la valeur dans ce cas est xxxxDate_du_jour pour les forcer a la fin
                        var estNCTrie = (valeur.libelle === "NC" && valeurClient.indexOf(Portefeuille.Constantes.Application.FIN_CHAINE_MAX) !== -1);
                        return valeur.actif && (valeur.libelle === valeurClient || estNCTrie);
                    });
                    if (valeurClient === null || valeurClient === undefined) {
                        trouve = null;
                    }
                    return trouve ? true : false;
                };
                /**
                 * Methode qui permet de traiter un filtre de type texte
                 * @param {string} valeurClient
                 * @param {Array<Modeles.Application.IValeurFiltre>} listeValeursFiltre
                 * @returns {boolean}
                 */
                FiltreService.prototype.traiterFiltreTypeBegacli = function (valeurClient, listeValeursFiltre) {
                    var expReg = this.begacliService.getExpReguliere();
                    //console.log("===> ici filtre begacli appliqué");
                    //console.log("===> valeurClient : ", valeurClient);
                    //console.log("===> listeValeursFiltre : ", listeValeursFiltre);
                    //console.log("===> expReg : ", expReg);
                    var trouve = false;
                    if (this.begacliService.getFiltreBegacli().choisiNC) {
                        if (valeurClient === "NC") {
                            trouve = true;
                            return trouve;
                        }
                        ;
                    }
                    if (expReg !== "") {
                        var leTest = new RegExp(expReg);
                        if (leTest.test(valeurClient)) {
                            trouve = true;
                        }
                    }
                    // console.log("--> trouve : ", trouve);
                    return trouve;
                };
                /**
                 * Methode qui permet de traiter un filtre de type nombre
                 * @param {number} valeurClient
                 * @param {Modeles.Application.IFiltre} filtre
                 * @returns {boolean}
                 */
                FiltreService.prototype.traiterFiltreTypeNombre = function (valeurClient, filtre) {
                    // le NC est par défaut null ou undefined
                    // sauf que si on tri la colonne, il se tranforme en -infinity ou +infinity
                    // ce cas est à prendre en compte pour ignorer les NC si filtre.
                    // et les prendre si filtre = NC
                    // si filtre, les NC sont ignorés dans tous les cas
                    if (valeurClient === null ||
                        valeurClient === undefined ||
                        valeurClient === Number.POSITIVE_INFINITY ||
                        valeurClient === Number.NEGATIVE_INFINITY) {
                        return filtre.comparateur === Portefeuille.Enum.Filtre.COMPARATEUR.NC ? true : false;
                    }
                    switch (filtre.comparateur) {
                        case Portefeuille.Enum.Filtre.COMPARATEUR.SUPERIEUR:
                            return valeurClient > filtre.valeurUnique;
                        case Portefeuille.Enum.Filtre.COMPARATEUR.INFERIEUR:
                            return valeurClient < filtre.valeurUnique;
                        case Portefeuille.Enum.Filtre.COMPARATEUR.EGALE:
                            return valeurClient === filtre.valeurUnique;
                        case Portefeuille.Enum.Filtre.COMPARATEUR.ENTRE:
                            return valeurClient >= filtre.valeurMultiple1 && valeurClient <= filtre.valeurMultiple2;
                        default:
                            return false;
                    }
                };
                /**
                 * Methode qui permet de traiter un filtre de type Date
                 * @param {number} valeurClient
                 * @param {Modeles.Application.IFiltre} filtre
                 * @returns {boolean}
                 */
                FiltreService.prototype.traiterFiltreTypeDate = function (valeurClient, filtre) {
                    // le NC est par défaut null ou undefined
                    // sauf que si on tri la colonne, il se tranforme en 01.01.1970 ou 31.12.9999
                    // ce cas est à prendre en compte pour ignorer les NC si filtre.--> erreur dans code existant
                    // et les prendre si filtre = NC
                    var valeurDate = valeurClient;
                    if (valeurClient === null
                        || valeurClient === undefined
                        || moment(valeurDate).isSame(Portefeuille.Constantes.Application.DATE_MIN)
                        || moment(valeurDate).isSame(Portefeuille.Constantes.Application.DATE_MAX)) {
                        return (filtre.comparateur === Portefeuille.Enum.Filtre.COMPARATEUR.NC
                            || filtre.comparateur === Portefeuille.Enum.Filtre.COMPARATEUR.NONREALISEE) ?
                            true :
                            false;
                    }
                    switch (filtre.comparateur) {
                        case Portefeuille.Enum.Filtre.COMPARATEUR.SUPERIEUR:
                            return valeurClient > filtre.valeurUnique;
                        case Portefeuille.Enum.Filtre.COMPARATEUR.INFERIEUR:
                            return valeurClient < filtre.valeurUnique;
                        case Portefeuille.Enum.Filtre.COMPARATEUR.EGALE:
                            return moment(valeurClient).format("MMM Do YY") === moment(filtre.valeurUnique.toString()).format("MMM Do YY");
                        case Portefeuille.Enum.Filtre.COMPARATEUR.ENTRE:
                            return (valeurClient >= filtre.valeurMultiple1 && valeurClient <= filtre.valeurMultiple2);
                        case Portefeuille.Enum.Filtre.COMPARATEUR.ECHUE:
                            return valeurClient < moment().subtract(1, "year").toDate();
                        case Portefeuille.Enum.Filtre.COMPARATEUR.ENCOURS:
                            return valeurClient >= moment().subtract(1, "year").toDate();
                        default:
                            return false;
                    }
                };
                /**
                 * Methode qui permet de maj les filtres client par rapport à la nouvelle configuration des indicateurs
                 * @param {Array<Modeles.Application.IFiltre>} listeFiltres
                 * @param {Array<Modeles.Application.IIndicateurChoix>} listeChoixIndicateurs
                 * @param {Array<Modeles.Application.IIndicateurFiltre>} listeIndicateursFiltre
                 * @param {Array<Modeles.Application.IClient>} listeClients
                 * @return {void}
                 */
                FiltreService.prototype.majFiltresClientNouveauxIndicateurs = function (listeFiltres, listeChoixIndicateurs, listeIndicateursFiltre, listeClients) {
                    // Suppression des filtres des indicateurs supprimés
                    this.supprimerFiltres(listeFiltres, listeChoixIndicateurs, listeIndicateursFiltre);
                    // Ajout des nouveaux indicateurs filtre
                    _.forEach(listeChoixIndicateurs, function (choixIndicateur) {
                        var indicateurFiltreExistant = _.find(listeIndicateursFiltre, function (indicateurFiltre) {
                            return indicateurFiltre.indicateur.code === choixIndicateur.indicateur.code;
                        });
                        // Si l'indicateur filtre n'est pas présent dans la liste, on l'ajoute
                        if (!indicateurFiltreExistant) {
                            var nouvelIndicateurFiltre_1 = {};
                            nouvelIndicateurFiltre_1.indicateur = choixIndicateur.indicateur;
                            nouvelIndicateurFiltre_1.utilise = false;
                            nouvelIndicateurFiltre_1.utiliseRelationEco = false;
                            nouvelIndicateurFiltre_1.listeValeurs = [];
                            if (nouvelIndicateurFiltre_1.indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.TEXTE) {
                                _.forEach(listeClients, function (client) {
                                    var indicateurClient = _.find(client.listeIndicateurs, function (indicateur) {
                                        return indicateur.code === nouvelIndicateurFiltre_1.indicateur.code;
                                    });
                                    var valeurFiltre = {};
                                    valeurFiltre.libelle = indicateurClient.valeur;
                                    valeurFiltre.actif = false;
                                    if (indicateurClient.code === Portefeuille.Enum.Indicateur.CODE.TOP_CC.toString()) {
                                        valeurFiltre.ordreAffichage = Services.Utils.ApplicationUtils.ValeurNumberTopCC(indicateurClient.valeur);
                                    }
                                    nouvelIndicateurFiltre_1.listeValeurs.push(valeurFiltre);
                                    nouvelIndicateurFiltre_1.listeValeurs = _.uniq(nouvelIndicateurFiltre_1.listeValeurs, "libelle");
                                });
                            }
                            listeIndicateursFiltre.push(nouvelIndicateurFiltre_1);
                        }
                    });
                };
                /**
                 * Methode qui permet de maj les filtres client par rapport à la nouvelle configuration des indicateurs
                 * @param {Array<Modeles.Application.IFiltre>} listeFiltres
                 * @param {Array<Modeles.Application.IIndicateurChoix>} listeChoixIndicateurs
                 * @param {Array<Modeles.Application.IIndicateurFiltre>} listeIndicateursFiltre
                 * @param {Array<Modeles.Application.IRelationEconomique>} listeRelationEco
                 * @return {void}
                 */
                FiltreService.prototype.majFiltresRelationEcoNouveauxIndicateurs = function (listeFiltres, listeChoixIndicateurs, listeIndicateursFiltre, listeRelationEco) {
                    // Suppression des filtres des indicateurs supprimés
                    this.supprimerFiltres(listeFiltres, listeChoixIndicateurs, listeIndicateursFiltre);
                    // Ajout des nouveaux indicateurs filtre
                    _.forEach(listeChoixIndicateurs, function (choixIndicateur) {
                        var indicateurFiltreExistant = _.find(listeIndicateursFiltre, function (indicateurFiltre) {
                            return indicateurFiltre.indicateur.code === choixIndicateur.indicateur.code;
                        });
                        // Si l'indicateur filtre n'est pas présent dans la liste, on l'ajoute
                        if (!indicateurFiltreExistant) {
                            var nouvelIndicateurFiltre_2 = {};
                            nouvelIndicateurFiltre_2.indicateur = choixIndicateur.indicateur;
                            nouvelIndicateurFiltre_2.utilise = false;
                            nouvelIndicateurFiltre_2.utiliseRelationEco = false;
                            nouvelIndicateurFiltre_2.listeValeurs = [];
                            if (nouvelIndicateurFiltre_2.indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.TEXTE) {
                                _.forEach(listeRelationEco, function (relationEco) {
                                    var indicateurRelationEco = _.find(relationEco.listeIndicateurs, function (indicateur) {
                                        return indicateur.code === nouvelIndicateurFiltre_2.indicateur.codeRel;
                                    });
                                    if (indicateurRelationEco) {
                                        var valeurFiltre = {};
                                        valeurFiltre.libelle = indicateurRelationEco.valeur;
                                        valeurFiltre.actif = false;
                                        nouvelIndicateurFiltre_2.listeValeurs.push(valeurFiltre);
                                        nouvelIndicateurFiltre_2.listeValeurs = _.uniq(nouvelIndicateurFiltre_2.listeValeurs, "libelle");
                                    }
                                });
                            }
                            listeIndicateursFiltre.push(nouvelIndicateurFiltre_2);
                        }
                    });
                };
                /**
                 * Methode qui permet de supprimer les filtres par rapport à la nouvelle configuration des indicateurs
                 * @param {Array<Modeles.Application.IFiltre>} listeFiltres
                 * @param {Array<Modeles.Application.IIndicateurChoix>} listeChoixIndicateurs
                 * @return {void}
                 */
                FiltreService.prototype.supprimerFiltres = function (listeFiltres, listeChoixIndicateurs, listeIndicateursFiltre) {
                    // Suppression des filtres dont l'indicateur n'est plus présent
                    _.forEach(angular.copy(listeFiltres), function (filtre) {
                        var indicateurChoixExistant = _.find(listeChoixIndicateurs, function (indicateurChoix) {
                            return indicateurChoix.indicateur.code === filtre.indicateur.indicateur.code;
                        });
                        // Si le filtre n'est pas présent dans la liste des indicateurs, on le supprime
                        if (!indicateurChoixExistant) {
                            // Récupération de l'indicateur filtre pour le mettre à faux
                            var indicateurFiltreExistant = _.find(listeIndicateursFiltre, function (indicateurFiltre) {
                                return indicateurFiltre.indicateur.code === filtre.indicateur.indicateur.code;
                            });
                            indicateurFiltreExistant.utilise = false;
                            indicateurFiltreExistant.utiliseRelationEco = false;
                            // Suppression du filtre
                            _.remove(listeFiltres, function (vraiFiltre) {
                                return vraiFiltre.indicateur.indicateur.code === filtre.indicateur.indicateur.code;
                            });
                        }
                    });
                    //S'il ne reste plus qu'un filtre, on supprime l'opérateur
                    if (listeFiltres.length === 1) {
                        listeFiltres[0].operateur = null;
                    }
                };
                /**
                 * Vidage des filtres relation eco
                 */
                FiltreService.prototype.razFiltresRelationEco = function () {
                    this.filtresRelationsEco = [];
                };
                /**
                 * Vidage des filtres client
                 */
                FiltreService.prototype.razFiltresClient = function () {
                    this.filtresClients = [];
                };
                /**
                 * Méthode permettant d'ajouter un filtre
                 * @returns {void}
                 */
                FiltreService.prototype.ajouterFiltre = function (listeFiltres, setDefaultEt) {
                    var filtre = {};
                    filtre.id = Services.Utils.ApplicationUtils.genererIdentifiantAleatoire();
                    // positionne par défaut sur ET
                    if (setDefaultEt) {
                        filtre.operateur = Portefeuille.Enum.Filtre.OPERATEUR.ET;
                    }
                    listeFiltres.push(filtre);
                };
                /**
                 * mise à jour de la liste des filtres relation éco
                 * @param inListe
                 */
                FiltreService.prototype.setFiltresRelationsEco = function (inListe) {
                    this.filtresRelationsEco = inListe;
                };
                /**
                 * mise à jour de la liste des filtres client
                 * @param inListe
                 */
                FiltreService.prototype.setFiltresClients = function (inListe) {
                    this.filtresClients = inListe;
                };
                /**
                 * Récupération de la liste des filtres relation éco
                 */
                FiltreService.prototype.getFiltresRelationsEco = function () {
                    return this.filtresRelationsEco;
                };
                /**
                 * Récupération de la liste des filtres client
                 */
                FiltreService.prototype.getFiltresClients = function () {
                    return this.filtresClients;
                };
                /**
                 * Méthode de mise à jour des filtres client en fonction des indicateurs choisis pour le tableau client
                 * @param listeIndicateursChoix Liste des indicateurs du tableau client
                 * @returns {Modeles.Application.IFiltre[]} Retourne la liste des filtres clients à jour
                 */
                FiltreService.prototype.majAndGetFiltresClientsAvecListeIndicateursDispo = function (listeIndicateursChoix) {
                    var _this = this;
                    var listeFiltre = angular.copy(this.filtresClients);
                    _.forEach(listeFiltre, function (filtre) {
                        if (_.findIndex(_.pluck(listeIndicateursChoix, "indicateur"), {
                            "code": filtre.indicateur.indicateur.code
                        }) < 0) {
                            _.remove(_this.filtresClients, function (filtreI) {
                                // XXXX
                                // si filtre typePersonne (Client/Prospect), top actif ou sans contrat, 
                                // ou leader on ne supprime pas car ce n'est pas un indicateur (gestion exception)
                                if (filtreI.indicateur &&
                                    filtreI.indicateur.indicateur &&
                                    _.indexOf(Portefeuille.Constantes.Indicateur.INDICATEUR_TAG, filtreI.indicateur.indicateur.code) === -1) {
                                    return filtreI.id === filtre.id;
                                }
                            });
                        }
                    });
                    // on verifie s'il n'en reste qu'un: si c'est le cas, ou supprime l'operateur présent
                    if (this.filtresClients &&
                        this.filtresClients.length === 1) {
                        this.filtresClients[0].operateur = undefined;
                    }
                    return this.filtresClients;
                };
                /**
                 * Méthode de mise à jour des filtres relation économique en fonction des indicateurs choisis pour le tableau relation économique
                 * @param listeIndicateursChoix Liste des indicateurs du tableau relation économique
                 * @returns {Modeles.Application.IFiltre[]} Retourne la liste des filtres relation économique à jour
                 */
                FiltreService.prototype.majAndGetFiltresRelationsEcoAvecListeIndicateursDispo = function (listeIndicateursChoix) {
                    var _this = this;
                    var listeFiltre = angular.copy(this.filtresRelationsEco);
                    _.forEach(listeFiltre, function (filtre) {
                        if (_.findIndex(_.pluck(listeIndicateursChoix, "indicateur"), {
                            "codeRel": filtre.indicateur.indicateur.code
                        }) < 0) {
                            _.remove(_this.filtresRelationsEco, function (filtreI) {
                                // si filtre typePersonne (Client/Prospect), on ne supprime pas car ce n'est pas un indicateur (gestion exception)
                                if (filtreI.indicateur
                                    && filtreI.indicateur.indicateur
                                    && filtreI.indicateur.indicateur.code !== Portefeuille.Enum.Indicateur.CODEREL.CLIENTPROSPECT.toString()) {
                                    return filtreI.id === filtre.id;
                                }
                            });
                        }
                    });
                    // on verifie s'il n'en reste qu'un: si c'est le cas, ou supprime l'operateur présent
                    if (this.filtresRelationsEco && this.filtresRelationsEco.length === 1) {
                        this.filtresRelationsEco[0].operateur = undefined;
                    }
                    return this.filtresRelationsEco;
                };
                FiltreService.CLASS_NAME = "IndicateurService";
                FiltreService.logger = loggerClass(FiltreService.CLASS_NAME);
                // Proprietés
                // Injection de dépendances 
                FiltreService.$inject = [
                    Portefeuille.Constantes.Inject.Services.eventService,
                    Portefeuille.Constantes.Inject.Services.begacliService
                ];
                return FiltreService;
            }());
            Portefeuille.app.service("FiltreService", FiltreService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service applicatif des habilitations
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service permettant de gerer le choix EDS
             */
            var HabilitationService = (function () {
                /**
                 * Constructeur
                 */
                function HabilitationService() {
                }
                /**
                 * Méthode permettant de modifier l'habilitation niveau 2
                 * @param {boolean} estHabilite
                 * @return {void}
                 */
                HabilitationService.prototype.setHabiliteAgenceNiveau2 = function (estHabilite) {
                    this.habiliteAgenceNiveau2 = estHabilite;
                };
                /**
                 * Méthode permettant de savoir si l'utilisateur est habilité agence niveau 2
                 * @return {boolean}
                 */
                HabilitationService.prototype.estHabiliteAgenceNiveau2 = function () {
                    return this.habiliteAgenceNiveau2;
                };
                /**
                 * Méthode permettant de modifier l'habilitation d'acces aux donnnees PNB
                 * @param {boolean} estHabilite
                 * @return {void}
                 */
                HabilitationService.prototype.setHabiliteAccesPNB = function (estHabilite) {
                    this.habiliteAccesPNB = estHabilite;
                };
                /**
                 * Méthode permettant de savoir si l'utilisateur est habilité acces aux donnnees PNB
                 * @return {boolean}
                 */
                HabilitationService.prototype.estHabiliteAccesPNB = function () {
                    return this.habiliteAccesPNB;
                };
                /**
                 * Méthode permettant de modifier l'habilitation d'acces a la consultation revue de portefeuille
                 * @param {boolean} estHabilite
                 * @return {void}
                 */
                HabilitationService.prototype.setHabiliteConsultRevue = function (estHabilite) {
                    this.habiliteConsultREVUE = estHabilite;
                };
                /**
                 * Méthode permettant de savoir si l'utilisateur est habilité a la consultation revue de portefeuille
                 * @return {boolean}
                 */
                HabilitationService.prototype.estHabiliteConsultRevue = function () {
                    return this.habiliteConsultREVUE;
                };
                /**
                 * Méthode permettant de modifier l'habilitation d'acces a la mise à jour revue de portefeuille
                 * @param {boolean} estHabilite
                 * @return {void}
                 */
                HabilitationService.prototype.setHabiliteMajRevue = function (estHabilite) {
                    this.habiliteMajREVUE = estHabilite;
                };
                /**
                 * Méthode permettant de savoir si l'utilisateur est habilité a la mise à jour revue de portefeuille
                 * @return {boolean}
                 */
                HabilitationService.prototype.estHabiliteMajRevue = function () {
                    return this.habiliteMajREVUE;
                };
                /**
                 * Méthode permettant de modifier l'habilitation d'acces a la consultation des affaires
                 * @param {boolean} estHabilite
                 * @return {void}
                 */
                HabilitationService.prototype.setHabiliteConsultAffaires = function (estHabilite) {
                    this.habiliteConsultAFFAIRES = estHabilite;
                };
                /**
                 * Méthode permettant de modifier l'habilitation d'acces a la consultation des propositions
                 * @param {boolean} estHabilite
                 * @return {void}
                 */
                HabilitationService.prototype.setHabiliteConsultPropositions = function (estHabilite) {
                    this.habiliteConsultPropositions = estHabilite;
                };
                /**
                 * Méthode permettant de savoir si l'utilisateur est habilité a la consultation des affaires
                 * @return {boolean}
                 */
                HabilitationService.prototype.estHabiliteConsultAffaires = function () {
                    return this.habiliteConsultAFFAIRES;
                };
                /**
                 * Méthode permettant de savoir si l'utilisateur est habilité a la consultation des propositions en cours
                 * @return {boolean}
                 */
                HabilitationService.prototype.estHabiliteConsultPropositions = function () {
                    return this.habiliteConsultPropositions;
                };
                /**
                 * Méthode permettant de modifier l'habilitation d'acces a la consultation des affaires
                 * @param {boolean} estHabilite
                 * @return {void}
                 */
                HabilitationService.prototype.setHabiliteConsultPotentielProspect = function (estHabilite) {
                    this.habiliteConsultPotProspect = estHabilite;
                };
                /**
                 * Méthode permettant de savoir si l'utilisateur est habilité a la consultation du potentiel prospect
                 * @return {boolean}
                 */
                HabilitationService.prototype.estHabiliteConsultPotentielProspect = function () {
                    return this.habiliteConsultPotProspect;
                };
                /**
                 * Méthode permettant de modifier l'habilitation d'acces a la consultation des segmentations
                 * @param {boolean} estHabilite
                 * @return {void}
                 */
                HabilitationService.prototype.setHabiliteConsultSegmentations = function (estHabilite) {
                    this.habiliteConsultSegmentations = estHabilite;
                };
                /**
                 * Méthode permettant de savoir si l'utilisateur est habilité a la consultation des segmentations
                 * @return {boolean}
                 */
                HabilitationService.prototype.estHabiliteConsultSegmentations = function () {
                    return this.habiliteConsultSegmentations;
                };
                HabilitationService.CLASS_NAME = "EventService";
                HabilitationService.logger = loggerClass(HabilitationService.CLASS_NAME);
                // Injection de dépendances 
                HabilitationService.$inject = [];
                return HabilitationService;
            }());
            // Déclaration du service
            Portefeuille.app.service("HabilitationService", HabilitationService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service applicatif de gestion de l'ihm
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service permettant de gerer certains choix de l'ihm
             */
            var IhmService = (function () {
                /**
                 * Constructeur
                 */
                function IhmService($q) {
                    this.$q = $q;
                }
                IhmService.prototype.getTypeVue = function () {
                    if (this.typeVue) {
                        return this.typeVue;
                    }
                    else {
                        return Portefeuille.Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE;
                    }
                };
                IhmService.prototype.setTypeVue = function (type) {
                    if (type) {
                        this.typeVue = type;
                    }
                };
                IhmService.CLASS_NAME = "IhmService";
                IhmService.logger = loggerClass(IhmService.CLASS_NAME);
                // Injection de dépendances 
                IhmService.$inject = [
                    Portefeuille.Constantes.Inject.Angular.$q
                ];
                return IhmService;
            }());
            // Déclaration du service
            Portefeuille.app.service(IhmService.CLASS_NAME, IhmService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service applicatif de gestion de l'indicateur fleche
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service permettant de gerer l'indicateur Fleche
             */
            var IndicateurFlecheService = (function () {
                // Variables utiles
                /**
                 * Constructeur
                 */
                function IndicateurFlecheService() {
                }
                /**
                 * Retourne la config utile à la dierctive indicateur fleche en fonction de la valeur transmise en paramètre
                 * @param valeur
                 */
                IndicateurFlecheService.prototype.getConfigIndicateurFleche = function (valeur) {
                    var configResultat = {};
                    if (valeur > 0) {
                        configResultat.valeurFormate = "+" + valeur.toLocaleString() + "%";
                        configResultat.couleur = Portefeuille.Controleurs.COULEUR_INDICATEUR_FLECHE.VERT.toString();
                        configResultat.icone = Portefeuille.Controleurs.ICONE_INDICATEUR_FLECHE.HAUT.toString();
                        return configResultat;
                    }
                    if (valeur < 0) {
                        configResultat.valeurFormate = valeur.toLocaleString() + "%";
                        configResultat.couleur = Portefeuille.Controleurs.COULEUR_INDICATEUR_FLECHE.ROUGE.toString();
                        configResultat.icone = Portefeuille.Controleurs.ICONE_INDICATEUR_FLECHE.BAS.toString();
                        return configResultat;
                    }
                    configResultat.valeurFormate = "0%";
                    configResultat.couleur = Portefeuille.Controleurs.COULEUR_INDICATEUR_FLECHE.ORANGE.toString();
                    configResultat.icone = Portefeuille.Controleurs.ICONE_INDICATEUR_FLECHE.DROITE.toString();
                    return configResultat;
                };
                IndicateurFlecheService.CLASS_NAME = "IndicateurFlecheService";
                IndicateurFlecheService.logger = loggerClass(IndicateurFlecheService.CLASS_NAME);
                // Injection de dépendances 
                IndicateurFlecheService.$inject = [];
                return IndicateurFlecheService;
            }());
            // Déclaration du service
            Portefeuille.app.service("IndicateurFlecheService", IndicateurFlecheService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service de gestion des indicateurs
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service de gestion des indicateurs
             */
            var IndicateurService = (function () {
                /**
                 * Constructeur
                 */
                function IndicateurService(habilitationService) {
                    this.habilitationService = habilitationService;
                    this.listeIndicateursChoix = [];
                }
                /**
                 *
                 */
                IndicateurService.prototype.getListeIndicateurChoix = function () {
                    return this.listeIndicateursChoix;
                };
                /**
                 *
                 * @param liste
                 */
                IndicateurService.prototype.setListeIndicateurChoix = function (liste) {
                    this.listeIndicateursChoix = liste;
                };
                /**
                 * Méthode qui retourne la liste des nouveaux indicateurs choisis nécéssitant un appel REST
                 * @param liste
                 */
                IndicateurService.prototype.getListeEcartIndicateurParametrable = function (liste) {
                    var reponse = [];
                    if (this.listeIndicateursChoix) {
                        var listeIndicateurNew = _.pluck(liste, "indicateur.code");
                        var listeIndicateurOld_1 = _.pluck(this.listeIndicateursChoix, "indicateur.code");
                        var ecarts_1 = listeIndicateurNew.filter(function (item) { return listeIndicateurOld_1.indexOf(item) < 0; });
                        if (ecarts_1) {
                            _.forEach(this.getListeTotalIndicateursParametrables(), function (indic) {
                                if (ecarts_1.indexOf(indic.code) > -1) {
                                    reponse.push(indic);
                                }
                            });
                        }
                    }
                    return reponse;
                };
                /**
                 * Méthode de récupération des indicateurType pour lesquels la propriété codeRest est non vide
                 */
                IndicateurService.prototype.getListeTotalIndicateursParametrables = function () {
                    var listeIndicateursParametrables = this.getListeTotaleIndicateursType();
                    _.remove(listeIndicateursParametrables, function (indic) {
                        return indic.codeRest === "";
                    });
                    return listeIndicateursParametrables;
                };
                /**
                 * Recuperation de liste de tous les type d'indicateurs
                 * @returns {Array<Modeles.Application.IIndicateurType>}
                 */
                IndicateurService.prototype.getListeTotaleIndicateursType = function () {
                    var reponse = angular.copy(Portefeuille.Constantes.Indicateur.LISTE_TOTAL_INDICATEUR);
                    var isNotHabiliteFamillePNB = !this.habilitationService.estHabiliteAccesPNB();
                    var isNotHabiliteRevue = !this.habilitationService.estHabiliteConsultRevue();
                    var isNotHabiliteAffaireOuRevue = !this.habilitationService.estHabiliteConsultAffaires() || !this.habilitationService.estHabiliteConsultRevue();
                    var isNotHabilitePotentielProspect = !this.habilitationService.estHabiliteConsultPotentielProspect();
                    if (isNotHabiliteFamillePNB ||
                        isNotHabiliteRevue ||
                        isNotHabiliteAffaireOuRevue ||
                        isNotHabilitePotentielProspect) {
                        reponse = _.filter(reponse, function (indic) {
                            // on supprime les indicateurs de la famille PNB
                            return ((isNotHabiliteFamillePNB) ? (indic.famille !== Portefeuille.Enum.Indicateur.FAMILLE.PNB) : true) &&
                                // on supprime les indicateurs de la famille Revue (ca comprend le score d'appétence)
                                ((isNotHabiliteRevue) ? (indic.famille !== Portefeuille.Enum.Indicateur.FAMILLE.REVUE) : true) &&
                                // on supprime les indicateurs de la famille Affaires
                                ((isNotHabiliteAffaireOuRevue) ? (indic.famille !== Portefeuille.Enum.Indicateur.FAMILLE.OPPORTUNITES &&
                                    indic.code !== Portefeuille.Enum.Indicateur.CODE.NB_PROPOSITIONS_EN_COURS.toString()) : true) &&
                                // on supprime les indicateurs de la famille Revue
                                // il faut seulement retirer cet indicateur, pas la famille !
                                ((isNotHabilitePotentielProspect) ? (indic.code !== Portefeuille.Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString()) : true);
                        });
                    }
                    return reponse;
                };
                /**
                 * Retourne le panier de forcage
                 * @returns {Array<Modeles.Application.IIndicateurType>}
                 */
                IndicateurService.prototype.getPanierDeForcage = function () {
                    var panierPreference = {};
                    panierPreference.listeCodesIndicateurs = [];
                    (_a = panierPreference.listeCodesIndicateurs).push.apply(_a, Portefeuille.Constantes.Indicateur.INDICATEUR_PANIER_FORCAGE);
                    // Evolution multi panier
                    panierPreference.estDefaut = false;
                    panierPreference.nom = Portefeuille.Constantes.Application.NOM_PANIER_FORCAGE;
                    // fin Evolution multi panier
                    return panierPreference;
                    var _a;
                };
                /**
                 * Retourne la liste des indicateurs spécifiques à la revue
                 */
                IndicateurService.prototype.getListeIndicateursRevue = function () {
                    var listeIndicateursRevue = [];
                    var indicateurRevue;
                    var position;
                    _.forEach(this.getListeTotaleIndicateursType(), function (indicateurType) {
                        position = _.indexOf(Portefeuille.Constantes.Indicateur.ORDRE_INDICATEUR_REVUE, indicateurType.code);
                        if (position !== -1) {
                            indicateurRevue = {};
                            indicateurRevue.indicateur = indicateurType;
                            indicateurRevue.choisi = true;
                            indicateurRevue.position = position;
                            listeIndicateursRevue.push(indicateurRevue);
                        }
                    });
                    return _.sortByOrder(listeIndicateursRevue, ["position"]);
                };
                /**
                 *
                 * @param objet
                 * @param codeIndicateur
                 */
                IndicateurService.prototype.getIndicateurIListeIndicateur = function (objet, codeIndicateur) {
                    return this.getIndicateur(objet.listeIndicateurs, codeIndicateur);
                };
                /**
                 *
                 * @param listeIndicateurs
                 * @param codeIndicateur
                 */
                IndicateurService.prototype.getIndicateur = function (listeIndicateurs, codeIndicateur) {
                    return _.find(listeIndicateurs, { "code": codeIndicateur });
                };
                IndicateurService.CLASS_NAME = "IndicateurService";
                IndicateurService.logger = loggerClass(IndicateurService.CLASS_NAME);
                // Injection de dépendances 
                IndicateurService.$inject = [
                    Portefeuille.Constantes.Inject.Services.habilitationService
                ];
                return IndicateurService;
            }());
            Portefeuille.app.service(IndicateurService.CLASS_NAME, IndicateurService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * service d'initialisation de l'application
             */
            var InitialisationApplicationService = (function () {
                // Constructeur
                function InitialisationApplicationService($rootScope, serviceAgentExtended, $q, $location, contexteService, popupService, eventService, habilitationService, preferencesService) {
                    this.$rootScope = $rootScope;
                    this.serviceAgentExtended = serviceAgentExtended;
                    this.$q = $q;
                    this.$location = $location;
                    this.contexteService = contexteService;
                    this.popupService = popupService;
                    this.eventService = eventService;
                    this.habilitationService = habilitationService;
                    this.preferencesService = preferencesService;
                    this.promesseInitialisation = false;
                }
                /**
                 * Initialisation des services
                 */
                InitialisationApplicationService.prototype.initialisation = function () {
                    var _this = this;
                    var defer = this.$q.defer();
                    if (!this.promesseInitialisation) {
                        return this.serviceAgentExtended.init(InitialisationApplicationService.SERVICE_AGENT_INIT).then(function () {
                            return _this.contexteService.getAuthentification();
                        }).then(function () {
                            var promises = [];
                            promises.push(_this.contexteService.getContexte());
                            promises.push(_this.preferencesService.completerCreationPaniers());
                            InitialisationApplicationService.logger.info(">>> Appel de la méthode : InitialisationApplicationService.initialisation <<<");
                            return MyWay.Services.CoreCommon.ServiceDePromesse.all(promises).then(function (resultat) {
                                return _this.eventService.initialiserListePortfeuilleIndexControleur().then(function () {
                                    return _this.serviceAgentExtended.Habilitation.EstHabilite(InitialisationApplicationService.LISTE_HABILITATION).
                                        then(function (habilitations) {
                                        // a laisser car utile pr débugger les habilitations meme en prod
                                        console.log("--> habilitations : ", habilitations);
                                        var estHabiliteChoixAgent = habilitations[0];
                                        var estHabiliteAgenceNiv2 = habilitations[1];
                                        _this.habilitationService.setHabiliteAgenceNiveau2(estHabiliteAgenceNiv2);
                                        _this.habilitationService.setHabiliteAccesPNB(habilitations[2]);
                                        _this.habilitationService.setHabiliteConsultRevue(habilitations[3]);
                                        _this.habilitationService.setHabiliteMajRevue(habilitations[4]);
                                        _this.habilitationService.setHabiliteConsultAffaires(habilitations[5]);
                                        _this.habilitationService.setHabiliteConsultPotentielProspect(habilitations[6]);
                                        _this.habilitationService.setHabiliteConsultSegmentations(habilitations[7]);
                                        var estHabiliteChoixEds = habilitations[8];
                                        _this.habilitationService.setHabiliteConsultPropositions(habilitations[9]);
                                        _this.eventService.initialiserHabilitationChoixAgentIndexControleur(estHabiliteChoixAgent);
                                        _this.eventService.initialiserHabilitationChoixEDSIndexControleur(estHabiliteChoixEds);
                                        // Dans le cas d'un retour de debranchement, on vérifie si l'eds visualisée est dans le contexte LISA
                                        return _this.serviceAgentExtended.getFromContext(Portefeuille.Constantes.Contexte.CONTEXTE_GERR_PORTF).
                                            then(function (contexteGererPortefeuille) {
                                            console.log("=>>>>> Retour débranchement contexteGererPortefeuille", contexteGererPortefeuille);
                                            if (contexteGererPortefeuille &&
                                                contexteGererPortefeuille.objetEdsVisu) {
                                                return _this.contexteService.getContexte().then(function (ctx) {
                                                    console.log("=>>>>> Retour débranchement getContexte", ctx);
                                                    return _this.eventService.majDonneesDonneesEdsIndexControleur(contexteGererPortefeuille.objetEdsVisu.objCaractAgent, ctx, contexteGererPortefeuille.objetEdsVisu.listePtfVisu).then(function () {
                                                        _this.promesseInitialisation = true;
                                                        _this.$location.path(contexteGererPortefeuille.objetEdsVisu.locationPath);
                                                        return _this.$q.when();
                                                    });
                                                });
                                            }
                                            else {
                                                _this.promesseInitialisation = true;
                                                return _this.$q.when();
                                            }
                                        });
                                    });
                                });
                            }).catch(function (error) {
                                defer.reject();
                                _this.popupService.showErreur(error);
                            });
                        }).catch(function (error) {
                            defer.reject();
                            _this.popupService.showErreur(error);
                        });
                    }
                    else {
                        return this.$q.when();
                    }
                };
                InitialisationApplicationService.CLASS_NAME = "InitialisationApplicationService";
                InitialisationApplicationService.logger = loggerClass(InitialisationApplicationService.CLASS_NAME);
                // Injection de dépendances 
                InitialisationApplicationService.$inject = [
                    Portefeuille.Constantes.Inject.Angular.$rootScope,
                    Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                    Portefeuille.Constantes.Inject.Angular.$q,
                    Portefeuille.Constantes.Inject.Angular.$location,
                    Portefeuille.Constantes.Inject.Services.contexteService,
                    Portefeuille.Constantes.Inject.Services.popupService,
                    Portefeuille.Constantes.Inject.Services.eventService,
                    Portefeuille.Constantes.Inject.Services.habilitationService,
                    Portefeuille.Constantes.Inject.Services.preferencesService
                ];
                InitialisationApplicationService.LISTE_HABILITATION = [
                    Portefeuille.Constantes.Application.CODE_HABILITATION_CHOIX_AGENT,
                    Portefeuille.Constantes.Application.CODE_HABILITATION_AGENCE_NIVEAU_2,
                    Portefeuille.Constantes.Application.CODE_HABILITATION_ACCES_PNB,
                    Portefeuille.Constantes.Application.CODE_HABILITATION_CONSULT_REVUE,
                    Portefeuille.Constantes.Application.CODE_HABILITATION_MAJ_REVUE,
                    Portefeuille.Constantes.Application.CODE_HABILITATION_CONSULT_AFFAIRES,
                    Portefeuille.Constantes.Application.CODE_HABILITATION_CONSULT_POT_PROSPECT,
                    Portefeuille.Constantes.Application.CODE_HABILITATION_CONSULT_SEGMENTATIONS,
                    Portefeuille.Constantes.Application.CODE_HABILITATION_CHOIX_EDS,
                    Portefeuille.Constantes.Application.CODE_HABILITATION_CONSULT_PROPOSITIONS //9
                ];
                InitialisationApplicationService.SERVICE_AGENT_INIT = {
                    codeApplication: "portefeuille",
                    disableScopeSave: false,
                    scopeType: MyWay.Services.Context.ScopeType.Service,
                    donneesScopeASauvegarder: ["portefeuille"]
                };
                return InitialisationApplicationService;
            }());
            Application.InitialisationApplicationService = InitialisationApplicationService;
            Portefeuille.app.service(InitialisationApplicationService.CLASS_NAME, InitialisationApplicationService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service permettant de gerer LISA en LOCALHOST/DUA
             */
            var LisaApplication = (function () {
                /**
                 * Constructeur
                 * @param serviceAgentExtended
                 * @param $location
                 * @param $window
                 * @param $q
                 */
                function LisaApplication(serviceAgentExtended, $location, $window, $q) {
                    this.serviceAgentExtended = serviceAgentExtended;
                    this.$location = $location;
                    this.$window = $window;
                    this.$q = $q;
                }
                /**
                 * Gestion du routage LISA
                 * @param valeurSortie
                 * @param urlLocal
                 */
                /* istanbul ignore next */
                LisaApplication.prototype.next = function (valeurSortie, urlLocal) {
                    var _this = this;
                    if (this.$location.host() === "localhost") {
                        // En local
                        return this.naviguerHorsLisa(urlLocal);
                    }
                    else {
                        return this.serviceAgentExtended.Lisa.Next(valeurSortie).catch(function (erreur) {
                            if (Portefeuille.Constantes.Token.TOKEN_ENVIRONNEMENT === Portefeuille.Constantes.Token.TOKEN_ENVIRONNEMENT_VALEUR_DUA) {
                                LisaApplication.logger.debug("Pas de LISA et en DUA");
                                // Revient à naviguer en local
                                return _this.naviguerHorsLisa(urlLocal);
                            }
                            else {
                                LisaApplication.logger.debug("Pas de LISA et pas en DUA");
                                //Lisa KO ET pas en local => Erreur à remonter
                                return _this.$q.reject(erreur);
                            }
                        });
                    }
                };
                /**
                 * Gestion du routage Hors LISA
                 * @param urlLocal
                 */
                /* istanbul ignore next */
                LisaApplication.prototype.naviguerHorsLisa = function (urlLocal) {
                    var _this = this;
                    if (urlLocal && urlLocal.length > 0) {
                        if (urlLocal.length > 4 && urlLocal.substr(0, 5) === "http:") {
                            return this.$q.when().then(function () {
                                _this.$window.location.href = urlLocal;
                            });
                        }
                        else {
                            return this.$q.when().then(function () {
                                _this.$location.path(urlLocal);
                            });
                        }
                    }
                    else {
                        return this.$q.reject(new MyWay.Services.Erreur(": Navigation locale impossible. Vérifier le paramétrage LISA."));
                    }
                };
                LisaApplication.CLASS_NAME = "LisaApplication";
                LisaApplication.logger = loggerClass(LisaApplication.CLASS_NAME);
                // Injection de dépendances 
                LisaApplication.$inject = [
                    Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                    Portefeuille.Constantes.Inject.Angular.$location,
                    Portefeuille.Constantes.Inject.Angular.$window,
                    Portefeuille.Constantes.Inject.Angular.$q
                ];
                return LisaApplication;
            }());
            Portefeuille.app.service("LisaApplication", LisaApplication);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service de gestion de la liste des clients
             */
            var ListeClientsService = (function () {
                /**
                 * Constructeur
                 * @param serviceAgentExtended
                 * @param $location
                 */
                function ListeClientsService(serviceAgentExtended, $location, $window, $q, recherchePortefeuilleService, relationCommercialeRestService, clientRestService, contexteService, indicateurService, ihmService, habilitationService, begacliService, mockService, suiviParComplementaireRestService) {
                    this.serviceAgentExtended = serviceAgentExtended;
                    this.$location = $location;
                    this.$window = $window;
                    this.$q = $q;
                    this.recherchePortefeuilleService = recherchePortefeuilleService;
                    this.relationCommercialeRestService = relationCommercialeRestService;
                    this.clientRestService = clientRestService;
                    this.contexteService = contexteService;
                    this.indicateurService = indicateurService;
                    this.ihmService = ihmService;
                    this.habilitationService = habilitationService;
                    this.begacliService = begacliService;
                    this.mockService = mockService;
                    this.suiviParComplementaireRestService = suiviParComplementaireRestService;
                    this.listeRelationsEconomiques = [];
                    this.listeIndicateursFiltre = [];
                }
                ListeClientsService.prototype.getListeRelationsEconomiquesCache = function () {
                    return this.listeRelationsEconomiques;
                };
                ListeClientsService.prototype.clonerIndicateurClient = function (codeOrigine, codeCible, client) {
                    var indicateurOrigine;
                    var indicateurCible;
                    for (var _i = 0, _a = client.listeClientIndicateur; _i < _a.length; _i++) {
                        var itemClientIndicateur = _a[_i];
                        indicateurOrigine = _.find(itemClientIndicateur.listeIndicateurClient, { code: codeOrigine });
                        indicateurCible = {};
                        indicateurCible.code = codeCible;
                        if (indicateurOrigine) {
                            if (codeCible === Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TEXTE.toString()) {
                                // on converti au passage
                                // date remplie --> Oui
                                // date non remplie --> Non
                                var texte = void 0;
                                if (indicateurOrigine.valeur) {
                                    texte = Portefeuille.Constantes.Application.CHAINE_OUI;
                                }
                                else {
                                    texte = Portefeuille.Constantes.Application.CHAINE_NON;
                                }
                                ;
                                indicateurCible.valeur = texte;
                            }
                            else {
                                indicateurCible.valeur = indicateurOrigine.valeur;
                            }
                            indicateurCible.dateMaj = indicateurOrigine.dateMaj;
                            indicateurCible.tendance = indicateurOrigine.tendance;
                        }
                        // Pour la 1ère fois qu'on ajoute l'indicateur dans la liste
                        if (!itemClientIndicateur.listeIndicateurClient) {
                            itemClientIndicateur.listeIndicateurClient = Array();
                        }
                        itemClientIndicateur.listeIndicateurClient.push(indicateurCible);
                    }
                    return client;
                };
                ListeClientsService.prototype.getListeRelationsEconomiques = function (identifiantEds, listePortefeuilles, typeForcage, listeIndicateursTableau, isAccesDepuisBlocRevue, listeCodeSuiviParComplementaire) {
                    var _this = this;
                    var queryCli = {};
                    var queryCliExpert = {};
                    //Si l'on appelle la méthode avec un nouvel identifiantEds, on initialise estLimiteClientsAtteinte.
                    this.initialiserEstLimiteClientsAtteinte(identifiantEds);
                    if (!this.listeRelationsEconomiques || this.listeRelationsEconomiques.length === 0
                        || this.isAccesDepuisBlocRevue !== isAccesDepuisBlocRevue
                        || typeForcage === Portefeuille.Enum.PageClients.TYPE_FORCAGE.SANS) {
                        this.isAccesDepuisBlocRevue = isAccesDepuisBlocRevue;
                        this.indicateurService.setListeIndicateurChoix(listeIndicateursTableau);
                        var listeClientsIdSirenTotal_1 = [];
                        if (listeCodeSuiviParComplementaire.length > 0) {
                            return this.contexteService.getContexte()
                                .then(function (contexte) {
                                queryCli.codeEtablissement = contexte.codeEtablissement;
                                queryCliExpert.listeSuivi = [];
                                queryCliExpert.suiviComplementaireModifie = null;
                                listeCodeSuiviParComplementaire.forEach(function (code) {
                                    queryCliExpert.listeSuivi.push({
                                        codeEtablissement: contexte.codeEtablissement,
                                        codeTypeSuiviComplementaire: code,
                                        idEdsInterne: contexte.edsVisu,
                                        designationLongueEds: null,
                                        libelleSuiviComplementaire: null,
                                        libelleSuiviComplementClient: null,
                                        numeroPersonne: null,
                                        dateMajEnregistrement: null,
                                        typeElementStructure: null,
                                        indicateurRestitutionClient: null,
                                        indicateurRestitutionClientRMP: null,
                                        informationAnimation: null
                                    });
                                });
                                console.log("Recup client Expert query >>>> ", queryCliExpert);
                                return _this.suiviParComplementaireRestService.getClientsSuiviComplementaire(queryCliExpert);
                            })
                                .then(function (listeSuiviComplementaire) {
                                var listeRelationsEcoApp = [];
                                // Initialisation de la liste des valeurs de chaque indicateurs filtres existant
                                _.forEach(_this.listeIndicateursFiltre, function (indicFiltre) {
                                    indicFiltre.listeValeurs = [];
                                });
                                var relationEcoApp = {};
                                relationEcoApp.identifiantPortefeuille = 0;
                                relationEcoApp.libellePortefeuille = "Portefeuille expertise";
                                relationEcoApp.id = "0";
                                relationEcoApp.nom = Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                                _this.ajouterListeClientsExpertIdSirenTotal(listeSuiviComplementaire.listeSuivi, listeClientsIdSirenTotal_1);
                                relationEcoApp.listeClients = _this.listeClientsRestToAppExpert(listeSuiviComplementaire.listeSuivi);
                                relationEcoApp.listeIndicateurs = [];
                                // Récupération du type de personne (client/prospect)
                                relationEcoApp.estClient = true;
                                // A jout de la relation économique à la liste
                                if (relationEcoApp.listeClients.length !== 0) {
                                    listeRelationsEcoApp.push(relationEcoApp);
                                }
                                _this.listeRelationsEconomiques = listeRelationsEcoApp;
                                _this.listeTotalIdSirenClients = listeClientsIdSirenTotal_1;
                                // Appel au service portefeuille/client pour les autres indicateurs
                                queryCli.listeClients = listeClientsIdSirenTotal_1;
                                queryCli.listeIndicateurs = [];
                                // On ajoute l'indicateur ACTIF/INACTIF par défaut + Potentiel prospect + Premier Equipement
                                // (car affichés en tant que marqueurs)
                                queryCli.listeIndicateurs.push(Portefeuille.Enum.Indicateur.CODEREST.ACTIF.toString());
                                // on ne met le potentiel prospect que si habilité à la SHPIQ1
                                if (_this.habilitationService.estHabiliteConsultPotentielProspect()) {
                                    queryCli.listeIndicateurs.push(Portefeuille.Enum.Indicateur.CODEREST.POT_PROS.toString());
                                }
                                queryCli.listeIndicateurs.push(Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString());
                                // On ajoute les indicateurs choisis si ils ont un codeRest
                                var premierEquipementAAjouter = false;
                                _.forEach(_this.indicateurService.getListeIndicateurChoix(), function (indicChoix) {
                                    if (indicChoix.choisi) {
                                        if (indicChoix.indicateur.codeRest
                                            && indicChoix.indicateur.code !== Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {
                                            queryCli.listeIndicateurs.push(indicChoix.indicateur.codeRest);
                                        }
                                        else if (indicChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {
                                            // et On verifie si l'indicateur Premier équipement est ajouté si c'est le cas on utilisera 
                                            // cette information pour dupliquer l'indicateur tag Premier équipement
                                            premierEquipementAAjouter = true;
                                        }
                                    }
                                });
                                // suppression des doublons dans la liste
                                queryCli.listeIndicateurs = _.uniq(queryCli.listeIndicateurs);
                                return _this.getResultatListeRelations(queryCli, premierEquipementAAjouter);
                                // return this.$q.when([]);
                            });
                        }
                        else {
                            console.log("Recup client Portefeuille");
                            return this.contexteService.getContexte()
                                .then(function (contexte) {
                                queryCli.codeEtablissement = contexte.codeEtablissement;
                                var queryRCV2 = {};
                                queryRCV2.codeEtablissement = contexte.codeEtablissement;
                                queryRCV2.identifiantEds = identifiantEds;
                                queryRCV2.listeIdentifiantPortefeuille = _this.listePortefeuillesToListeId(listePortefeuilles);
                                queryRCV2.nombreLimiteMaxClient = Portefeuille.Constantes.Service.RELATION_COMMERCIALE_NB_MAX_RES;
                                switch (typeForcage) {
                                    case Portefeuille.Enum.PageClients.TYPE_FORCAGE.CLIENTS:
                                        queryRCV2.filtrageClientProspect = Portefeuille.Enum.FiltrageRelationCommerciale.FILTRECLIENTPROSPECT.CLIENT.toString();
                                        break;
                                    case Portefeuille.Enum.PageClients.TYPE_FORCAGE.PROSPECTS:
                                        queryRCV2.filtrageClientProspect = Portefeuille.Enum.FiltrageRelationCommerciale.FILTRECLIENTPROSPECT.PROSPECTTIERS.toString();
                                        break;
                                    default:
                                        queryRCV2.filtrageClientProspect = Portefeuille.Enum.FiltrageRelationCommerciale.FILTRECLIENTPROSPECT.TOUS.toString();
                                        if (typeForcage === Portefeuille.Enum.PageClients.TYPE_FORCAGE.TOUT) {
                                            queryRCV2.nombreLimiteMaxClient = Portefeuille.Constantes.Service.RELATION_COMMERCIALE_NB_MAX_NO_LIMIT;
                                        }
                                }
                                return _this.relationCommercialeRestService.getRelationCommerciale(queryRCV2);
                            }).then(function (relationCommerciale) {
                                // NOUVEL_INDICATEUR c'est ici qu'on peut surcharger un indicateur avant qu'il n'arrive.
                                // relationCommerciale = this.mockService.ajouterLeader(relationCommerciale);
                                // relationCommerciale = this.mockService.ajouterObjectif(relationCommerciale);
                                // relationCommerciale = this.mockService.ajouterEncoursBDF(relationCommerciale);  
                                // relationCommerciale = this.mockService.ajouterBegacli(relationCommerciale);
                                // relationCommerciale = this.begacliService.completerUniversBegacli(relationCommerciale);
                                return _this.serviceAgentExtended.getFromContext(Portefeuille.Constantes.Contexte.ACCES_DEPUIS_BLOC_REVUE).then(function (accesDepuisBlocRevue) {
                                    if (relationCommerciale.messageInformation
                                        && relationCommerciale.messageInformation.code === Portefeuille.Constantes.Service.RELATION_COMMERCIALE_CODE_MAX_CLIENT_ATTEINT
                                        && accesDepuisBlocRevue !== "O") {
                                        _this.estLimiteClientsAtteinte = true; //On indique que la limite max des clients est atteinte
                                        // Création de la liste des portefeuilles
                                        _this.listePortefeuillesAvecLimite = [];
                                        _.forEach(relationCommerciale.listePortefeuilles, function (portefeuilleRC) {
                                            var portefeuille = {};
                                            portefeuille.id = portefeuilleRC.identifiantPortefeuille;
                                            portefeuille.libelle = portefeuilleRC.libellePortefeuille;
                                            portefeuille.nombreTotalClients = portefeuilleRC.nombreTotalClients;
                                            portefeuille.nombreTotalProspectsTiers = portefeuilleRC.nombreTotalProspectsTiers;
                                            _this.listePortefeuillesAvecLimite.push(portefeuille);
                                        });
                                        // Création de l'erreur
                                        var erreur = {};
                                        erreur.codeLibelle = relationCommerciale.messageInformation.code;
                                        erreur.libelle = relationCommerciale.messageInformation.libelle;
                                        return _this.$q.reject(erreur);
                                    }
                                    else {
                                        var listeRelationsEcoApp_1 = [];
                                        // Initialisation de la liste des valeurs de chaque indicateurs filtres existant
                                        _.forEach(_this.listeIndicateursFiltre, function (indicFiltre) {
                                            indicFiltre.listeValeurs = [];
                                        });
                                        // Concaténation des listes clients de chaque portefeuille reçus et création 
                                        _.forEach(relationCommerciale.listePortefeuilles, function (portefeuilleRC) {
                                            // Création de la liste des relations économiques
                                            _.forEach(portefeuilleRC.listeRelation, function (relationRest) {
                                                var relationEcoApp = {};
                                                relationEcoApp.identifiantPortefeuille = portefeuilleRC.identifiantPortefeuille;
                                                relationEcoApp.libellePortefeuille = portefeuilleRC.libellePortefeuille;
                                                relationEcoApp.id = relationRest.identifiantRelationEco.toString();
                                                relationEcoApp.nom = relationRest.libelleRelationEco ? relationRest.libelleRelationEco : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                                                _this.ajouterListeClientsIdSirenTotal(relationRest.listeClient, listeClientsIdSirenTotal_1);
                                                relationEcoApp.listeClients = _this.listeClientsRestToApp(relationRest.listeClient, relationEcoApp.nom, relationRest.identifiantRelationEco, relationEcoApp.identifiantPortefeuille, relationEcoApp.libellePortefeuille);
                                                // On ajout une liste d'indicateur manuellemenent au niveau relation commerciale 
                                                // car non renvoyé par la ressource relationCommerciale mais par la ressource client.
                                                for (var _i = 0, _a = Portefeuille.Constantes.Indicateur.INDICATEUR_CEER_MANUELLEMENT; _i < _a.length; _i++) {
                                                    var code = _a[_i];
                                                    relationRest.listeIndicateurRelation.push(_this.creerIndcateur(code));
                                                }
                                                relationEcoApp.listeIndicateurs = _this.getIndicateursPourRelation(relationRest.listeIndicateurRelation);
                                                // Récupération du type de personne (client/prospect)
                                                relationEcoApp.estClient = undefined;
                                                var indicProspect = _.where(relationEcoApp.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODEREL.CLIENTPROSPECT.toString() });
                                                if (indicProspect) {
                                                    relationEcoApp.estClient = Services.Utils.DataUtils.getEstClientDepuisIndicateur(indicProspect[0]);
                                                }
                                                // A jout de la relation économique à la liste
                                                if (relationEcoApp.listeClients.length !== 0) {
                                                    listeRelationsEcoApp_1.push(relationEcoApp);
                                                }
                                            });
                                        });
                                        _this.listeRelationsEconomiques = listeRelationsEcoApp_1;
                                        _this.listeTotalIdSirenClients = listeClientsIdSirenTotal_1;
                                        // Appel au service portefeuille/client pour les autres indicateurs
                                        queryCli.listeClients = listeClientsIdSirenTotal_1;
                                        queryCli.listeIndicateurs = [];
                                        // On ajoute l'indicateur ACTIF/INACTIF par défaut + Potentiel prospect + Premier Equipement
                                        // (car affichés en tant que marqueurs)
                                        queryCli.listeIndicateurs.push(Portefeuille.Enum.Indicateur.CODEREST.ACTIF.toString());
                                        // on ne met le potentiel prospect que si habilité à la SHPIQ1
                                        if (_this.habilitationService.estHabiliteConsultPotentielProspect()) {
                                            queryCli.listeIndicateurs.push(Portefeuille.Enum.Indicateur.CODEREST.POT_PROS.toString());
                                        }
                                        queryCli.listeIndicateurs.push(Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString());
                                        // On ajoute les indicateurs choisis si ils ont un codeRest
                                        var premierEquipementAAjouter_1 = false;
                                        _.forEach(_this.indicateurService.getListeIndicateurChoix(), function (indicChoix) {
                                            if (indicChoix.choisi) {
                                                if (indicChoix.indicateur.codeRest
                                                    && indicChoix.indicateur.code !== Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {
                                                    queryCli.listeIndicateurs.push(indicChoix.indicateur.codeRest);
                                                }
                                                else if (indicChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {
                                                    // et On verifie si l'indicateur Premier équipement est ajouté si c'est le cas on utilisera 
                                                    // cette information pour dupliquer l'indicateur tag Premier équipement
                                                    premierEquipementAAjouter_1 = true;
                                                }
                                            }
                                        });
                                        // suppression des doublons dans la liste
                                        queryCli.listeIndicateurs = _.uniq(queryCli.listeIndicateurs);
                                        //if (queryCli.listeIndicateurs.length > 0 && queryCli.listeClients.length > 0) {
                                        //    return this.clientRestService.getClientsIndicateurs(queryCli)
                                        //        .then((client: Modeles.Rest.PortefeuilleV1.client.IClient) => {
                                        //            // NOUVEL_INDICATEUR ajouterBouchonIndicateurClient
                                        //            //client = this.mockService.ajouterBouchonIndicateurClient(queryCli, Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(), client);
                                        //            client = this.begacliService.completerUniversBegacliClient(client);
                                        //            console.log("==> client2 : ", client);
                                        //            // Si l'indicateur premier équipement est ajouté au panier on recopie les indicateurs premier equipement tag
                                        //            // pour créer premier équipement.
                                        //            client = this.clonerIndicateurClient(
                                        //                Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(),
                                        //                Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TEXTE.toString(), client);
                                        //            if (premierEquipementAAjouter) {
                                        //                client = this.clonerIndicateurClient(
                                        //                    Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(),
                                        //                    Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT.toString(), client);
                                        //            }
                                        //            _.forEach(client.listeClientIndicateur, (clientIndicateur: Modeles.Rest.PortefeuilleV1.client.IClientIndicateur) => {
                                        //                //On trie la liste avant de la restituer afin que tous les clients aient des listes d'indicateurs identiques.
                                        //                if (clientIndicateur.listeIndicateurClient) {
                                        //                    clientIndicateur.listeIndicateurClient = clientIndicateur.listeIndicateurClient.sort(
                                        //                        (a: Portefeuille.Modeles.Rest.PortefeuilleV1.client.IIndicateur,
                                        //                            b: Portefeuille.Modeles.Rest.PortefeuilleV1.client.IIndicateur) =>
                                        //                            (a.code > b.code) ? 1 : ((b.code > a.code) ? -1 : 0)
                                        //                    );
                                        //                }
                                        //                this.ajouterIndicateurPourClient(clientIndicateur.identifiantPersonne, clientIndicateur.listeIndicateurClient);
                                        //            });
                                        //            return this.listeRelationsEconomiques;
                                        //        });
                                        //} else {
                                        //    return this.$q.when(this.listeRelationsEconomiques);
                                        //}
                                        return _this.getResultatListeRelations(queryCli, premierEquipementAAjouter_1);
                                    }
                                });
                            });
                        }
                    }
                    else {
                        //Mis a jour uniquement des indicateurs clients
                        console.log("--> else uniquement , que indicateurs");
                        var listeEcartIndicateursParametrables = this.indicateurService.getListeEcartIndicateurParametrable(listeIndicateursTableau);
                        this.indicateurService.setListeIndicateurChoix(listeIndicateursTableau);
                        if (listeEcartIndicateursParametrables.length > 0) {
                            return this.majClientsIndicateurs(listeEcartIndicateursParametrables).then(function () { return _this.$q.when(_this.listeRelationsEconomiques); });
                        }
                        else {
                            return this.$q.when(this.listeRelationsEconomiques);
                        }
                    }
                };
                ListeClientsService.prototype.getResultatListeRelations = function (query, premierEquipementAAjouter) {
                    var _this = this;
                    if (query && query.listeIndicateurs.length > 0 && query.listeClients.length > 0) {
                        return this.clientRestService.getClientsIndicateurs(query)
                            .then(function (client) {
                            // NOUVEL_INDICATEUR ajouterBouchonIndicateurClient
                            //client = this.mockService.ajouterBouchonIndicateurClient(queryCli, Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(), client);
                            client = _this.begacliService.completerUniversBegacliClient(client);
                            console.log("==> client : ", client);
                            // Si l'indicateur premier équipement est ajouté au panier on recopie les indicateurs premier equipement tag
                            // pour créer premier équipement.
                            client = _this.clonerIndicateurClient(Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(), Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TEXTE.toString(), client);
                            if (premierEquipementAAjouter) {
                                client = _this.clonerIndicateurClient(Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(), Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT.toString(), client);
                            }
                            _.forEach(client.listeClientIndicateur, function (clientIndicateur) {
                                //On trie la liste avant de la restituer afin que tous les clients aient des listes d'indicateurs identiques.
                                if (clientIndicateur.listeIndicateurClient) {
                                    clientIndicateur.listeIndicateurClient = clientIndicateur.listeIndicateurClient.sort(function (a, b) {
                                        return (a.code > b.code) ? 1 : ((b.code > a.code) ? -1 : 0);
                                    });
                                }
                                _this.ajouterIndicateurPourClient(clientIndicateur.identifiantPersonne, clientIndicateur.listeIndicateurClient);
                            });
                            return _this.listeRelationsEconomiques;
                        });
                    }
                    else {
                        return this.$q.when(this.listeRelationsEconomiques);
                    }
                };
                ListeClientsService.prototype.creerIndcateur = function (code) {
                    var indicateur = {};
                    indicateur.code = code;
                    return indicateur;
                };
                ;
                ListeClientsService.prototype.majClientsIndicateurs = function (listeIndicateurARecuperer) {
                    var _this = this;
                    console.log("--> majClientsIndicateurs");
                    var listeIndicateursADemander = [];
                    // on vérifie que chaque indicateur n'est pas déja présent: on ne test que le premier client 
                    // présent car ils ont tous les mêmes indicateurs
                    _.forEach(listeIndicateurARecuperer, function (indic) {
                        if (_this.listeRelationsEconomiques
                            && _this.listeRelationsEconomiques.length > 0
                            && _this.listeRelationsEconomiques[0].listeClients
                            && _this.listeRelationsEconomiques[0].listeClients.length > 0) {
                            var listecodeIndicateursDejaRecuperes = _.pluck(_this.listeRelationsEconomiques[0].listeClients[0].listeIndicateurs, "code");
                            if (listecodeIndicateursDejaRecuperes.indexOf(indic.code) < 0) {
                                listeIndicateursADemander.push(indic);
                            }
                        }
                    });
                    if (listeIndicateursADemander.length > 0) {
                        var queryCli_1 = {};
                        return this.contexteService.getContexte().then(function (contexte) {
                            queryCli_1.codeEtablissement = contexte.codeEtablissement;
                            queryCli_1.listeIndicateurs = _.pluck(listeIndicateursADemander, "codeRest");
                            queryCli_1.listeIndicateurs = _.uniq(queryCli_1.listeIndicateurs);
                            queryCli_1.listeClients = _this.listeTotalIdSirenClients;
                            // On ajoute les indicateurs choisis si ils ont un codeRest
                            var premierEquipementAAjouter = false;
                            _.forEach(_this.indicateurService.getListeIndicateurChoix(), function (indicChoix) {
                                if (indicChoix.choisi) {
                                    if (indicChoix.indicateur.codeRest
                                        && indicChoix.indicateur.code !== Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {
                                        queryCli_1.listeIndicateurs.push(indicChoix.indicateur.codeRest);
                                    }
                                    else if (indicChoix.indicateur.code === Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {
                                        // et On verifie si l'indicateur Premier équipement est ajouté si c'est le cas on utilisera 
                                        // cette information pour dupliquer l'indicateur tag Premier équipement
                                        premierEquipementAAjouter = true;
                                    }
                                }
                            });
                            return _this.clientRestService.getClientsIndicateurs(queryCli_1)
                                .then(function (client) {
                                // NOUVEL INDICATEUR ajouterBouchonIndicateurClient - Bouchon pour 1ere fois qu'on ajoute dans la liste
                                //client = this.mockService.ajouterBouchonIndicateurClient(queryCli, Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(), client);
                                client = _this.begacliService.completerUniversBegacliClient(client);
                                console.log("==> client1 : ", client);
                                client = _this.clonerIndicateurClient(Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(), Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TEXTE.toString(), client);
                                if (premierEquipementAAjouter) {
                                    client = _this.clonerIndicateurClient(Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(), Portefeuille.Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT.toString(), client);
                                }
                                _.forEach(client.listeClientIndicateur, function (clientIndicateur) {
                                    //On trie la liste avant de la restituer afin que tous les clients aient des listes d'indicateurs identiques.
                                    if (clientIndicateur.listeIndicateurClient) {
                                        clientIndicateur.listeIndicateurClient = clientIndicateur.listeIndicateurClient.sort(function (a, b) {
                                            return (a.code > b.code) ? 1 : ((b.code > a.code) ? -1 : 0);
                                        });
                                    }
                                    // attention, dans ce cas il faut reinitiliaser les indicateurs de relations qui sont calculés sinon ils vont être doublés
                                    // jpdut : erreur , on mets à 0 à chaque fois.
                                    // du coup incomptatible avec ajouterIndicateurPourClient
                                    // il faut séparer le cumul.
                                    _this.reinitIndicateursCalculesRelations(clientIndicateur.identifiantPersonne);
                                });
                                // Ajout séparé dans un comptage indépendant.
                                _.forEach(client.listeClientIndicateur, function (clientIndicateur) {
                                    // ajout eles indicateurs
                                    _this.ajouterIndicateurPourClient(clientIndicateur.identifiantPersonne, clientIndicateur.listeIndicateurClient);
                                });
                            });
                        });
                    }
                    else {
                        return this.$q.when();
                    }
                };
                // remet les compteurs des indicateurs calculés sur la relation éco à 0
                ListeClientsService.prototype.reinitIndicateursCalculesRelations = function (clientId) {
                    var _this = this;
                    _.forEach(this.listeRelationsEconomiques, function (relation) {
                        _.forEach(relation.listeClients, function (client) {
                            if (client.id === clientId.toString()) {
                                _this.initIndicateurNombre(relation, Portefeuille.Enum.Indicateur.CODEREL.REV_NB_SSFAMILLES_PROPOSE);
                                _this.initIndicateurNombre(relation, Portefeuille.Enum.Indicateur.CODEREL.PNB_3112);
                                _this.initIndicateurNombre(relation, Portefeuille.Enum.Indicateur.CODEREL.PNB_N);
                                _this.initIndicateurNombre(relation, Portefeuille.Enum.Indicateur.CODEREL.PNB_N_MOINS_1);
                                _this.initIndicateurNombre(relation, Portefeuille.Enum.Indicateur.CODEREL.NB_AFFAIRES_EN_COURS);
                                _this.initIndicateurNombre(relation, Portefeuille.Enum.Indicateur.CODEREL.NB_PROPOSITIONS_EN_COURS);
                                _this.initIndicateurNombre(relation, Portefeuille.Enum.Indicateur.CODEREL.NB_APPETENCES);
                                _this.initIndicateurNombre(relation, Portefeuille.Enum.Indicateur.CODEREL.ENCOURS_BDF);
                                //gestion indicateur seg rel groupe : on somme le nombre de produit a proposer de tous les client
                                var indicateurSegRelGroupe = _.find(relation.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODEREL.SEG_RELATIONNELLE_GROUPE });
                                if (indicateurSegRelGroupe) {
                                    indicateurSegRelGroupe.valeur = "NC";
                                    indicateurSegRelGroupe.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                                }
                                //gestion indicateur date dernière revue  : on récupère la date dernière revue le plus récent
                                var dateDerniereRevueRel = _.find(relation.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODEREL.REV_DATE_DERNIERE_REVUE });
                                if (dateDerniereRevueRel) {
                                    dateDerniereRevueRel.valeur = "NC";
                                    dateDerniereRevueRel.valeurDate = undefined;
                                    dateDerniereRevueRel.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.DATE;
                                }
                                return false;
                            }
                        });
                    });
                };
                ListeClientsService.prototype.initIndicateurNombre = function (relation, code) {
                    var indicateurNombre = _.find(relation.listeIndicateurs, { "code": code });
                    if (indicateurNombre) {
                        indicateurNombre.valeurNumber = 0;
                    }
                };
                ListeClientsService.prototype.ajouterIndicateurPourClient = function (clientId, indicateurs) {
                    var _this = this;
                    // on parcours la liste des relation pour se placer sur le bon client
                    _.forEach(this.listeRelationsEconomiques, function (relation) {
                        _.forEach(relation.listeClients, function (client) {
                            if (client.id === clientId.toString()) {
                                client.listeIndicateurs = client.listeIndicateurs.concat(_this.getIndicateursPourClient(indicateurs));
                                // Gestion de l'indicateur particulier Top Actif
                                var indicActif = _.where(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.ACTIF.toString() });
                                if (indicActif && indicActif.length > 0) {
                                    client.estActif = Services.Utils.DataUtils.getEstActifDepuisIndicateur(indicActif[0]);
                                    if (indicActif[0].valeur !== Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU) {
                                        client.estActifRenseigne = true;
                                    }
                                }
                                // gestion indicateur "equipe"
                                // BDRPTF-316 : ne s'applique que aux clients ! Un prospect ne peut pas être "Client sans contrat"
                                var indicateurEquipe = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.EQUIPE });
                                if (indicateurEquipe
                                    && client.estClient) {
                                    client.estSansContrat = indicateurEquipe.valeur === Portefeuille.Constantes.Application.CHAINE_NON;
                                }
                                // BDRL-2285 : si le client est un prospect ou est sans contrat on va forcer le inactif en NC afin de pas les sortir dans les filtres
                                if (!client.estClient) {
                                    client.estActif = null;
                                    client.estActifRenseigne = false;
                                    // faut aussi maj l'indicateur dans .listeIndicateurs[code=actif] = NC
                                    var indicateurActif = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.ACTIF });
                                    indicateurActif.valeur = "NC";
                                    // idem pour les sans contrats
                                    client.estSansContrat = null;
                                    var indicateurSansContrat = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.EQUIPE });
                                    indicateurSansContrat.valeur = "NC";
                                }
                                //Pour la liste suivante on somme le nombre de tous les client de la relation et on la met à jour sur la relation
                                _this.cumulerNombre(client, relation, Portefeuille.Enum.Indicateur.CODE.REV_NB_SSFAMILLES_PROPOSE, Portefeuille.Enum.Indicateur.CODEREL.REV_NB_SSFAMILLES_PROPOSE);
                                _this.cumulerNombre(client, relation, Portefeuille.Enum.Indicateur.CODE.PNB_3112, Portefeuille.Enum.Indicateur.CODEREL.PNB_3112);
                                _this.cumulerNombre(client, relation, Portefeuille.Enum.Indicateur.CODE.PNB_N, Portefeuille.Enum.Indicateur.CODEREL.PNB_N);
                                _this.cumulerNombre(client, relation, Portefeuille.Enum.Indicateur.CODE.PNB_N_MOINS_1, Portefeuille.Enum.Indicateur.CODEREL.PNB_N_MOINS_1);
                                _this.cumulerNombre(client, relation, Portefeuille.Enum.Indicateur.CODE.NB_AFFAIRES_EN_COURS, Portefeuille.Enum.Indicateur.CODEREL.NB_AFFAIRES_EN_COURS);
                                _this.cumulerNombre(client, relation, Portefeuille.Enum.Indicateur.CODE.NB_PROPOSITIONS_EN_COURS, Portefeuille.Enum.Indicateur.CODEREL.NB_PROPOSITIONS_EN_COURS);
                                _this.cumulerNombre(client, relation, Portefeuille.Enum.Indicateur.CODE.NB_APPETENCES, Portefeuille.Enum.Indicateur.CODEREL.NB_APPETENCES);
                                _this.cumulerNombre(client, relation, Portefeuille.Enum.Indicateur.CODE.ENCOURS_BDF, Portefeuille.Enum.Indicateur.CODEREL.ENCOURS_BDF);
                                // seg rel groupe : on prend celle envoyée par la ressource client (pas de calcul à faire)
                                // On l'effectue qu'une fois par relation
                                var indicateurSegRelGroupeRel = _.find(relation.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODEREL.SEG_RELATIONNELLE_GROUPE });
                                if (indicateurSegRelGroupeRel && indicateurSegRelGroupeRel.valeur !== undefined) {
                                    var indicateurSegRelGroupe = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.SEG_RELATIONNELLE_GROUPE });
                                    if (indicateurSegRelGroupe) {
                                        indicateurSegRelGroupeRel.valeur = indicateurSegRelGroupe.valeur;
                                    }
                                }
                                // Top_CC : recupérer la valeur index du top CC du tableau constant pour mettre dans valeurNumber
                                var indicateurTopCC = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.TOP_CC });
                                if (indicateurTopCC) {
                                    indicateurTopCC.valeurNumber = Services.Utils.ApplicationUtils.ValeurNumberTopCC(indicateurTopCC.valeur);
                                }
                                //gestion indicateur date dernière revue : on récupère la date la plus récente de tous les clients
                                var indicateurDateDerniereRevue = _.find(client.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE });
                                var indicateurDateDerniereRevueRel = _.find(relation.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODEREL.REV_DATE_DERNIERE_REVUE });
                                if (indicateurDateDerniereRevue
                                    && indicateurDateDerniereRevueRel
                                    && _this.comparerDateADateB(indicateurDateDerniereRevue.valeurDate, indicateurDateDerniereRevueRel.valeurDate) === 1) {
                                    indicateurDateDerniereRevueRel.valeur = indicateurDateDerniereRevue.valeur;
                                    indicateurDateDerniereRevueRel.valeurDate = indicateurDateDerniereRevue.valeurDate;
                                }
                                return false;
                            }
                        });
                    });
                };
                ListeClientsService.prototype.cumulerNombre = function (client, relation, codeClient, codeRelation) {
                    var indicateurNbClient = _.find(client.listeIndicateurs, { "code": codeClient });
                    var indicateurNbRelation = _.find(relation.listeIndicateurs, { "code": codeRelation });
                    if (indicateurNbRelation
                        && indicateurNbClient) {
                        indicateurNbRelation.valeurNumber += this.gererInfinity(indicateurNbClient.valeurNumber);
                    }
                };
                /**
                 * supprime les valeur -infinity + infinity par 0
                 * @param nombre nombre à corrigé
                 */
                ListeClientsService.prototype.gererInfinity = function (nombre) {
                    return (nombre === -Infinity || nombre === Infinity) ? 0 : nombre;
                };
                ListeClientsService.prototype.listePortefeuillesToListeId = function (listePortefeuilles) {
                    var listeId = [];
                    _.forEach(listePortefeuilles, function (portefeuille) {
                        if (portefeuille.estAffiche) {
                            listeId.push(portefeuille.id);
                        }
                    });
                    return listeId;
                };
                ListeClientsService.prototype.listeClientsRestToApp = function (listeClientsRest, nomRelationEconomique, idRelationEconomique, identifiantPortefeuille, libellePortefeuille) {
                    var _this = this;
                    var listeClientsApp = [];
                    _.forEach(listeClientsRest, function (clientRest) {
                        var clientApp = {};
                        clientApp.nom = clientRest.raisonSociale ? clientRest.raisonSociale : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                        clientApp.nomRelationEconomique = nomRelationEconomique;
                        clientApp.idRelationEconomique = idRelationEconomique;
                        // XXXX
                        clientApp.codePersonnaliteJuridique = clientRest.codePersonnaliteJuridique;
                        // pour export
                        clientApp.identifiantPortefeuille = identifiantPortefeuille;
                        clientApp.libellePortefeuille = libellePortefeuille;
                        clientApp.id = clientRest.identifiantPersonne.toString();
                        clientApp.siren = clientRest.numeroSiren;
                        clientApp.estActifRenseigne = false;
                        clientApp.listeIndicateurs = _this.getIndicateursPourClient(clientRest.listeIndicateurClient);
                        clientApp.estLeader = Services.Utils.DataUtils.getEstLeaderDepuisCodeLeader(clientRest.codeLeaderEspaceEntreprise);
                        // Gestion de l'indicateur particulier Client/Prospect
                        clientApp.estClient = undefined;
                        var indicClientProspect = _.where(clientApp.listeIndicateurs, { "code": Portefeuille.Enum.Indicateur.CODE.CLIENTPROSPECT.toString() });
                        if (indicClientProspect) {
                            clientApp.estClient = Services.Utils.DataUtils.getEstClientDepuisIndicateur(indicClientProspect[0]);
                        }
                        listeClientsApp.push(clientApp);
                    });
                    return listeClientsApp;
                };
                ListeClientsService.prototype.listeClientsRestToAppExpert = function (listeClientsRest) {
                    var _this = this;
                    var listeClientsApp = [];
                    _.forEach(listeClientsRest, function (clientRest) {
                        var clientApp = {};
                        clientApp.estSansContrat = null;
                        clientApp.identifiantPortefeuille = 0;
                        clientApp.libellePortefeuille = "";
                        clientApp.id = clientRest.numeroPersonne.toString();
                        clientApp.estActifRenseigne = false;
                        if (clientRest.informationAnimation) {
                            clientApp.estClient = clientRest.informationAnimation.codeTypeRelationPersonne === "0" || clientRest.informationAnimation.codeTypeRelationPersonne === null;
                            clientApp.estLeader = clientRest.informationAnimation.typeRoleRelation === "2";
                            clientApp.nom = clientRest.informationAnimation.raisonSociale;
                            clientApp.nomRelationEconomique = clientRest.informationAnimation.intituleRelation;
                            clientApp.idRelationEconomique = clientRest.informationAnimation.identifiantRelationEconomique;
                            clientApp.codePersonnaliteJuridique = clientRest.informationAnimation.codePersonaliteJuridique;
                            clientApp.siren = clientRest.informationAnimation.numeroSiren;
                            clientApp.listeIndicateurs = _this.getIndicateursPourClientExpert(clientRest);
                            clientApp.nbPersonneRelation = clientRest.informationAnimation.nombrePersonneMenage;
                        }
                        clientApp.listeIndicateurs = _this.getIndicateursPourClientExpert(clientRest);
                        listeClientsApp.push(clientApp);
                    });
                    // return listeClientsApp;
                    return _.uniq(listeClientsApp, "id");
                };
                ListeClientsService.prototype.razRelations = function () {
                    this.listeRelationsEconomiques = [];
                };
                /**
                 * Récupération des filtres des indicateurs textes pour la Relation Eco.
                 * @param listeIndicateurs
                 */
                ListeClientsService.prototype.getIndicateursPourRelation = function (listeIndicateurs) {
                    var _this = this;
                    var reponse = [];
                    if (listeIndicateurs) {
                        _.forEach(listeIndicateurs, function (indicRest) {
                            var indicateur = Services.Utils.ApplicationUtils.getIndicateur(indicRest);
                            reponse.push(indicateur);
                            var indicateurType = {};
                            var indicateurFiltre = {};
                            indicateurType.code = indicateur.code;
                            indicateurType.typeIndicateur = indicateur.typeIndicateur;
                            indicateurType.intitule = indicateur.intitule;
                            indicateurFiltre.indicateur = indicateurType;
                            indicateurFiltre.utilise = false;
                            indicateurFiltre.utiliseRelationEco = false;
                            indicateurFiltre.listeValeurs = [];
                            var listeCodeIndicateurRelationDejaAjoutes = _.pluck(_this.listeIndicateursFiltre, "indicateur.code");
                            if (indicateur.intitule && listeCodeIndicateurRelationDejaAjoutes.indexOf(indicateur.code) < 0) {
                                _this.listeIndicateursFiltre.push(indicateurFiltre);
                            }
                            if (indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.TEXTE) {
                                _.forEach(_this.listeIndicateursFiltre, function (indicFiltre) {
                                    if (indicFiltre.indicateur.code === indicRest.code) {
                                        var valeurFiltre = {};
                                        valeurFiltre.libelle = (indicateur.valeur) ? indicateur.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                                        valeurFiltre.actif = false;
                                        indicFiltre.listeValeurs.push(valeurFiltre);
                                        indicFiltre.listeValeurs = _.uniq(indicFiltre.listeValeurs, "libelle");
                                    }
                                });
                            }
                        });
                    }
                    return reponse;
                };
                /**
                 *
                 * @param listeIndicateurs
                 */
                ListeClientsService.prototype.getIndicateursPourClient = function (listeIndicateurs) {
                    var _this = this;
                    var reponse = [];
                    if (listeIndicateurs) {
                        _.forEach(listeIndicateurs, function (indicRest) {
                            var indicateur = Services.Utils.ApplicationUtils.getIndicateur(indicRest);
                            reponse.push(indicateur);
                            //if (!this.listIndicateursDefinie) {
                            var indicateurType = {};
                            var indicateurFiltre = {};
                            indicateurType.code = indicateur.code;
                            indicateurType.typeIndicateur = indicateur.typeIndicateur;
                            indicateurType.intitule = indicateur.intitule;
                            indicateurFiltre.indicateur = indicateurType;
                            indicateurFiltre.utilise = false;
                            indicateurFiltre.utiliseRelationEco = false;
                            indicateurFiltre.listeValeurs = [];
                            var listeCodeIndicateurDejaAjoutes = _.pluck(_this.listeIndicateursFiltre, "indicateur.code");
                            if (indicateur.intitule && listeCodeIndicateurDejaAjoutes.indexOf(indicateur.code) < 0) {
                                _this.listeIndicateursFiltre.push(indicateurFiltre);
                            }
                            //}
                            if (indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.TEXTE) {
                                _.forEach(_this.listeIndicateursFiltre, function (indicFiltre) {
                                    if (indicFiltre.indicateur.code === indicRest.code) {
                                        var valeurFiltre = {};
                                        valeurFiltre.libelle = (indicateur.valeur) ? indicateur.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                                        valeurFiltre.actif = false;
                                        if (indicateur.code === Portefeuille.Enum.Indicateur.CODE.TOP_CC.toString()) {
                                            valeurFiltre.ordreAffichage = Services.Utils.ApplicationUtils.ValeurNumberTopCC(indicateur.valeur);
                                        }
                                        indicFiltre.listeValeurs.push(valeurFiltre);
                                        indicFiltre.listeValeurs = _.uniq(indicFiltre.listeValeurs, "libelle");
                                    }
                                });
                            }
                            if (indicateur.typeIndicateur === Portefeuille.Enum.Indicateur.TYPE.BEGACLI) {
                                _.forEach(_this.listeIndicateursFiltre, function (indicFiltre) {
                                    if (indicFiltre.indicateur.code === indicRest.code) {
                                        var valeurFiltre = {};
                                        valeurFiltre.libelle = (indicateur.valeur) ? indicateur.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                                        valeurFiltre.actif = false;
                                        indicFiltre.listeValeurs.push(valeurFiltre);
                                        indicFiltre.listeValeurs = _.uniq(indicFiltre.listeValeurs, "libelle");
                                    }
                                });
                            }
                        });
                    }
                    return reponse;
                };
                /**
                 *
                 * @param listeIndicateurs pour suivi par complémentaire SPC
                 */
                ListeClientsService.prototype.getIndicateursPourClientExpert = function (clientRest) {
                    var reponse = [];
                    if (clientRest.informationAnimation) {
                        /* Indicateur Date dernier RDV */
                        var date = clientRest.informationAnimation.dateDernierRdvRealise && clientRest.informationAnimation.dateDernierRdvRealise.substring(0, 4) !== "0001" ?
                            new Date(clientRest.informationAnimation.dateDernierRdvRealise) : null;
                        reponse.push(this.getIndicateurPourCodeIndicateur(date, Portefeuille.Enum.Indicateur.CODE.DATE_DERNIER_RDV.toString(), Portefeuille.Enum.Indicateur.TYPE.DATE));
                        /* Indicateur nombre RDV année en cours */
                        reponse.push(this.getIndicateurPourCodeIndicateur(clientRest.informationAnimation.nombreRdvAnneeEnCours, Portefeuille.Enum.Indicateur.CODE.NB_RDV_ANNEE_EN_COURS.toString(), Portefeuille.Enum.Indicateur.TYPE.NOMBRE));
                        /* Indicateur nombre RDV 12 derniers mois */
                        reponse.push(this.getIndicateurPourCodeIndicateur(clientRest.informationAnimation.nombreRdv12Mois, Portefeuille.Enum.Indicateur.CODE.NB_RDV_12_MOIS_GLISSANTS.toString(), Portefeuille.Enum.Indicateur.TYPE.NOMBRE));
                        /* Indicateur Marché */
                        reponse.push(this.getIndicateurPourCodeIndicateur(clientRest.informationAnimation.libelleCourtSegmentation, Portefeuille.Enum.Indicateur.CODE.MARCHE.toString(), Portefeuille.Enum.Indicateur.TYPE.TEXTE));
                        /* Indicateur Segmentation relationnelle client */
                        reponse.push(this.getIndicateurPourCodeIndicateur(clientRest.informationAnimation.libelleSegmentClientele2, Portefeuille.Enum.Indicateur.CODE.SEG_RELATIONNELLE.toString(), Portefeuille.Enum.Indicateur.TYPE.TEXTE));
                        /* Date dernier CR */
                        date = clientRest.informationAnimation.dateDernierEntretien && clientRest.informationAnimation.dateDernierEntretien.substring(0, 4) !== "0001" ?
                            new Date(clientRest.informationAnimation.dateDernierEntretien) : null;
                        reponse.push(this.getIndicateurPourCodeIndicateur(date, Portefeuille.Enum.Indicateur.CODE.DATE_DERNIER_ENTRETIEN.toString(), Portefeuille.Enum.Indicateur.TYPE.DATE));
                        /* Date prochain RDV */
                        date = clientRest.informationAnimation.dateProchainRdv && clientRest.informationAnimation.dateProchainRdv.substring(0, 4) !== "0001" ?
                            new Date(clientRest.informationAnimation.dateProchainRdv) : null;
                        reponse.push(this.getIndicateurPourCodeIndicateur(date, Portefeuille.Enum.Indicateur.CODE.DATE_PROCHAIN_RDV.toString(), Portefeuille.Enum.Indicateur.TYPE.DATE));
                    }
                    return reponse;
                };
                ListeClientsService.prototype.getIndicateurPourCodeIndicateur = function (valeur, codeIndicateur, type) {
                    return {
                        code: codeIndicateur,
                        dateMaj: null,
                        icone: null,
                        intitule: "",
                        typeIndicateur: type,
                        valeur: type === Portefeuille.Enum.Indicateur.TYPE.TEXTE ? valeur : null,
                        valeurDate: type === Portefeuille.Enum.Indicateur.TYPE.DATE ? valeur : null,
                        valeurNumber: type === Portefeuille.Enum.Indicateur.TYPE.NOMBRE ? valeur : null,
                        tendance: null
                    };
                };
                /**
                 * Méthode permettant d'ajouter les clients à la liste total des id et siren clients
                 * @param {Array<Modeles.Rest.PortefeuilleV1.relationCommerciale.IClient>} listeClient
                 * @returns {void}
                 */
                ListeClientsService.prototype.ajouterListeClientsIdSirenTotal = function (listeClient, listeClientsIdSirenTotal) {
                    _.forEach(listeClient, function (client) {
                        var clientRest = {};
                        clientRest.idClient = client.identifiantPersonne;
                        clientRest.sirenClient = client.numeroSiren;
                        listeClientsIdSirenTotal.push(clientRest);
                    });
                };
                /**
                 * Méthode permettant d'ajouter les clients à la liste total des id et siren clients
                 * @param {Array<Modeles.Rest.PortefeuilleV1.relationCommerciale.IClient>} listeClient
                 * @returns {void}
                 */
                ListeClientsService.prototype.ajouterListeClientsExpertIdSirenTotal = function (listeClient, listeClientsIdSirenTotal) {
                    _.forEach(listeClient, function (client) {
                        var clientRest = {};
                        clientRest.idClient = client.numeroPersonne;
                        clientRest.sirenClient = client.informationAnimation.numeroSiren;
                        listeClientsIdSirenTotal.push(clientRest);
                    });
                };
                /**
                 * Méthode permettant de recuperer la liste des indicateurs filtre
                 * @returns {Array<Modeles.Application.IIndicateurFiltre>}
                 */
                ListeClientsService.prototype.getListeIndicateursFiltre = function () {
                    this.ordonnerValeurListeFiltre(this.listeIndicateursFiltre);
                    return this.listeIndicateursFiltre;
                };
                /**
                 * Méthode permettant de recuperer la liste des indicateurs filtre
                 * @returns {Array<Modeles.Application.IIndicateurFiltre>}
                 */
                ListeClientsService.prototype.getListeIndicateursRelationEcoFiltre = function () {
                    this.ordonnerValeurListeFiltre(this.listeIndicateursFiltre);
                    return this.listeIndicateursFiltre;
                };
                /**
                 * Méthode permettant de recuperer la liste des portefeuilles avec limite
                 * @returns {Array<Modeles.Application.IIndicateurFiltre>}
                 */
                ListeClientsService.prototype.getListePortefeuillesAvecLimite = function () {
                    return this.listePortefeuillesAvecLimite;
                };
                /**
                 * Méthode permettant d'ordonner les valeurs d'une liste de filtre
                 * @param {Array<Modeles.Application.IIndicateurFiltre>} listeFiltre
                 * @returns {void}
                 */
                ListeClientsService.prototype.ordonnerValeurListeFiltre = function (listeFiltre) {
                    _.forEach(listeFiltre, function (filtre) {
                        // console.log("--> avant tri : ", filtre.indicateur.code + " - " + filtre.listeValeurs.length);
                        // sort ne s'active que si plus de 1 élément, sinon ne fait rien.
                        filtre.listeValeurs = filtre.listeValeurs.sort(function (a, b) {
                            if (filtre.indicateur.code === Portefeuille.Enum.Indicateur.CODE.TOP_CC.toString()) {
                                return ListeClientsService.compareInterne(a.ordreAffichage, b.ordreAffichage, null);
                            }
                            if (filtre.indicateur.code === Portefeuille.Enum.Indicateur.CODE.LEADER.toString() // leader
                                || filtre.indicateur.code === Portefeuille.Enum.Indicateur.CODE.EQUIPE.toString() // avec contrat
                                || filtre.indicateur.code === Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TEXTE.toString()) {
                                // console.log("--> on inverse le tri pour : ", filtre.indicateur.code);
                                return ListeClientsService.compareInterneOuiNon(a.libelle, b.libelle, Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU);
                            }
                            else {
                                return ListeClientsService.compareInterne(a.libelle, b.libelle, Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU);
                            }
                        });
                    });
                };
                /**
                 * Méthode permettant d'ordonner une liste de clients avec le leader en premier
                 * @param {Array<Modeles.Application.IClient>} listeClients
                 * @returns {Array<Modeles.Application.IClient>}
                 */
                ListeClientsService.prototype.ordonnerListeClientsAvecLeader = function (listeClients) {
                    return listeClients.sort(function (a, b) {
                        return ListeClientsService.compareInterne(a.estLeader, b.estLeader, false);
                    });
                };
                /**
                 * Compare avec gestion du null non typé
                 * @param a
                 * @param b
                 * @param valNull
                 */
                ListeClientsService.compareInterne = function (a, b, valeurNull) {
                    if (a === valeurNull) {
                        return 1;
                    }
                    else if (b === valeurNull) {
                        return -1;
                    }
                    else {
                        return (a > b) ? 1 : ((a < b) ? -1 : 0);
                    }
                };
                /**
                 * Compare avec gestion du null non typé. inversé, en 1er Oui , puis Non, puis NC ( valeurNull ) ....
                 * @param a
                 * @param b
                 * @param valNull
                 */
                ListeClientsService.compareInterneOuiNon = function (a, b, valeurNull) {
                    if (a === valeurNull) {
                        return 1;
                    }
                    else if (b === valeurNull) {
                        return -1;
                    }
                    else {
                        return (a > b) ? -1 : ((a < b) ? 1 : 0);
                    }
                };
                /**
                 * Compare 2 dates et restitue le résultat de cette comparaison (0: A égal à B, 1: A supérieur à B, -1: A inférieur à B)
                 * @param dateA
                 * @param dateB
                 */
                ListeClientsService.prototype.comparerDateADateB = function (dateA, dateB) {
                    var resultatAEgalB = 0;
                    var resultatASuperieurB = 1;
                    var resultatAInferieurB = -1;
                    if ((dateA === undefined && dateB === null) || (dateB === undefined)) {
                        return resultatASuperieurB;
                    }
                    if ((dateA === null && dateB === undefined) || (dateA === undefined)) {
                        return resultatAInferieurB;
                    }
                    if (moment(dateA).isAfter(dateB)) {
                        return resultatASuperieurB;
                    }
                    else if (moment(dateA).isBefore(dateB)) {
                        return resultatAInferieurB;
                    }
                    else {
                        return resultatAEgalB;
                    }
                };
                /**
                 *
                 * @param identifiantEds
                 */
                ListeClientsService.prototype.initialiserEstLimiteClientsAtteinte = function (identifiantEds) {
                    if (this.identifiantEds !== identifiantEds) {
                        this.estLimiteClientsAtteinte = false;
                        this.identifiantEds = identifiantEds;
                    }
                };
                /**
                 *
                 */
                ListeClientsService.prototype.getEstLimiteClientsAtteinte = function () {
                    return this.estLimiteClientsAtteinte;
                };
                /**
                 *
                 */
                ListeClientsService.prototype.getAffichageModificationChoix = function () {
                    return this.affichageModificationChoix;
                };
                /**
                 *
                 * @param valeur
                 */
                ListeClientsService.prototype.setAffichageModificationChoix = function (valeur) {
                    this.affichageModificationChoix = valeur;
                };
                ListeClientsService.CLASS_NAME = "ListeClientsService";
                ListeClientsService.logger = loggerClass(ListeClientsService.CLASS_NAME);
                // Injection de dépendances 
                ListeClientsService.$inject = [
                    Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                    Portefeuille.Constantes.Inject.Angular.$location,
                    Portefeuille.Constantes.Inject.Angular.$window,
                    Portefeuille.Constantes.Inject.Angular.$q,
                    Portefeuille.Constantes.Inject.Services.recherchePortefeuilleRestService,
                    Portefeuille.Constantes.Inject.Services.relationCommercialeRestService,
                    Portefeuille.Constantes.Inject.Services.clientRestService,
                    Portefeuille.Constantes.Inject.Services.contexteService,
                    Portefeuille.Constantes.Inject.Services.indicateurService,
                    Portefeuille.Constantes.Inject.Services.ihmService,
                    Portefeuille.Constantes.Inject.Services.habilitationService,
                    Portefeuille.Constantes.Inject.Services.begacliService,
                    Portefeuille.Constantes.Inject.Services.mockService,
                    Portefeuille.Constantes.Inject.Services.suiviParComplementaireRestService
                ];
                return ListeClientsService;
            }());
            Portefeuille.app.service(ListeClientsService.CLASS_NAME, ListeClientsService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service Permettant l'usage d'un mock
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service permettant l'usage d'un mock pour injecté des nouveau indicateur
             */
            var MockService = (function () {
                // Variables utiles
                /**
                 * Constructeur
                 */
                function MockService() {
                }
                /**
                 * ajouter un Leader
                 * pour simuler l'indicateur leader en attendant l'évolution du service REST
                 * @param relationCommerciale
                 */
                MockService.prototype.ajouterLeader = function (relationCommerciale) {
                    for (var _i = 0, _a = relationCommerciale.listePortefeuilles; _i < _a.length; _i++) {
                        var itemPortefeuille = _a[_i];
                        for (var _b = 0, _c = itemPortefeuille.listeRelation; _b < _c.length; _b++) {
                            var itemRelation = _c[_b];
                            for (var _d = 0, _e = itemRelation.listeClient; _d < _e.length; _d++) {
                                var itemClient = _e[_d];
                                var indicateur = {};
                                indicateur.code = "leader";
                                indicateur.valeur = itemClient.codeLeaderEspaceEntreprise === "L" ? "O" : "N";
                                indicateur.dateMaj = "31/12/2100";
                                itemClient.listeIndicateurClient.push(indicateur);
                            }
                        }
                    }
                    console.log("--> XXXX relationCommerciale avec leader : ", relationCommerciale);
                    return relationCommerciale;
                };
                /**
                 * ajouter un Leader
                 * pour simuler l'indicateur leader en attendant l'évolution du service REST
                 * @param relationCommerciale
                 */
                MockService.prototype.ajouterObjectif = function (relationCommerciale) {
                    for (var _i = 0, _a = relationCommerciale.listePortefeuilles; _i < _a.length; _i++) {
                        var itemPortefeuille = _a[_i];
                        for (var _b = 0, _c = itemPortefeuille.listeRelation; _b < _c.length; _b++) {
                            var itemRelation = _c[_b];
                            for (var _d = 0, _e = itemRelation.listeClient; _d < _e.length; _d++) {
                                var itemClient = _e[_d];
                                var indicateur = {};
                                indicateur.code = "OBJECTIF_FLUX";
                                indicateur.valeur = this.getRandomInt(100);
                                indicateur.dateMaj = "31/12/2100";
                                itemClient.listeIndicateurClient.push(indicateur);
                            }
                        }
                    }
                    console.log("--> XXXX relationCommerciale avec leader : ", relationCommerciale);
                    return relationCommerciale;
                };
                /**
                 * ajouter un encours BDF
                 * pour simuler l'indicateur leader en attendant l'évolution du service REST
                 * @param relationCommerciale
                 */
                MockService.prototype.ajouterEncoursBDF = function (relationCommerciale) {
                    for (var _i = 0, _a = relationCommerciale.listePortefeuilles; _i < _a.length; _i++) {
                        var itemPortefeuille = _a[_i];
                        for (var _b = 0, _c = itemPortefeuille.listeRelation; _b < _c.length; _b++) {
                            var itemRelation = _c[_b];
                            for (var _d = 0, _e = itemRelation.listeClient; _d < _e.length; _d++) {
                                var itemClient = _e[_d];
                                var indicateur = {};
                                indicateur.code = "ENCOURS_BDF";
                                indicateur.valeur = this.getRandomInt(100);
                                indicateur.dateMaj = "31/12/2100";
                                itemClient.listeIndicateurClient.push(indicateur);
                            }
                        }
                    }
                    // console.log("--> XXXX relationCommerciale avec encours BDF : ", relationCommerciale);
                    return relationCommerciale;
                };
                /**
                 * ajouter un bagacli
                 * pour simuler l'indicateur begacli en attendant l'évolution du service REST
                 * @param relationCommerciale
                 */
                MockService.prototype.ajouterBegacli = function (relationCommerciale) {
                    for (var _i = 0, _a = relationCommerciale.listePortefeuilles; _i < _a.length; _i++) {
                        var itemPortefeuille = _a[_i];
                        for (var _b = 0, _c = itemPortefeuille.listeRelation; _b < _c.length; _b++) {
                            var itemRelation = _c[_b];
                            for (var _d = 0, _e = itemRelation.listeClient; _d < _e.length; _d++) {
                                var itemClient = _e[_d];
                                var indicateur = {};
                                indicateur.code = "BEGACLI";
                                indicateur.valeur = this.getRandomBegacli();
                                indicateur.dateMaj = "31/12/2100";
                                itemClient.listeIndicateurClient.push(indicateur);
                            }
                        }
                    }
                    // console.log("--> XXXX relationCommerciale avec begacli : ", relationCommerciale);
                    return relationCommerciale;
                };
                /**
                 * NOUVEL INDICATEUR, ajouterBouchonIndicateurClient
                 * ajout indicateur client par bouchon dynamique.
                 * @param query
                 * @param code
                 * @param client
                 */
                MockService.prototype.ajouterBouchonIndicateurClient = function (query, code, client) {
                    console.log("--> ajouterBouchonIndicateurClient recherche : ", code);
                    var indicateurRevue;
                    var indicateur;
                    if (_.indexOf(query.listeIndicateurs, code) < 0) {
                        console.log("--> ajouterBouchonIndicateurClient trouve !");
                        for (var _i = 0, _a = client.listeClientIndicateur; _i < _a.length; _i++) {
                            var itemClientIndicateur = _a[_i];
                            indicateurRevue = _.find(itemClientIndicateur.listeIndicateurClient, { code: "DateDerniereRevue" });
                            //console.log("--> ajouterBouchonIndicateurClient itemClientIndicateur : ", itemClientIndicateur, code);
                            indicateur = {};
                            indicateur.code = code;
                            indicateur.valeur = indicateurRevue ? indicateurRevue.valeur : "";
                            indicateur.dateMaj = "31/12/2100";
                            // Pour la 1ère fois qu'on ajoute l'indicateur dans la liste
                            if (!itemClientIndicateur.listeIndicateurClient) {
                                itemClientIndicateur.listeIndicateurClient = Array();
                            }
                            itemClientIndicateur.listeIndicateurClient.push(indicateur);
                        }
                    }
                    return client;
                };
                /**
                 * NOUVEL INDICATEUR, pour bouchon en attedant service REST
                 * @param max
                 */
                MockService.prototype.getRandomInt = function (max) {
                    var i = Math.floor(Math.random() * max);
                    // console.log("-->  random i : ", i);
                    if (i === 0) {
                        return null;
                    }
                    else {
                        return (i - 1).toString();
                    }
                };
                /**
                 * NOUVEL INDICATEUR, pour bouchon en attedant service REST
                 */
                MockService.prototype.getRandomBegacli = function () {
                    // onajoute en 1er le nombre de majuscules dans le texte begacli
                    var i = Math.floor(Math.random() * 4);
                    if (i === 0) {
                        return null;
                    }
                    else {
                        return this.getRandom("B", "b") + this.getRandom("E", "e") + this.getRandom("G", "g")
                            + this.getRandom("A", "a") + this.getRandom("C", "c") + this.getRandom("L", "l") + this.getRandom("I", "i");
                    }
                };
                MockService.prototype.getRandom = function (a, b) {
                    var i = Math.floor(Math.random() * 2);
                    if (i === 0) {
                        return a;
                    }
                    else {
                        return b;
                    }
                };
                MockService.CLASS_NAME = "MockService";
                MockService.logger = loggerClass(MockService.CLASS_NAME);
                // Injection de dépendances 
                MockService.$inject = [];
                return MockService;
            }());
            // Déclaration du service
            Portefeuille.app.service(Portefeuille.Constantes.Inject.Services.mockService, MockService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service applicatif de gestion du drag and drop
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service permettant de gerer le choix EDS
             */
            var ModalePaniersService = (function () {
                /**
                 * Constructeur
                 */
                function ModalePaniersService() {
                }
                /**
                 * Méthode permettant de modifier modalePaniersControleur
                 * @param clientsControleur
                 * @return {void}
                 */
                ModalePaniersService.prototype.setModalePaniersControleur = function (modalePaniersControleur) {
                    this.modalePaniersControleur = modalePaniersControleur;
                };
                /**
                 * Méthode permettant de modifier modalePaniersControleur
                 * @param clientsControleur
                 * @return {void}
                 */
                ModalePaniersService.prototype.setSelectionIndicateursControleur = function (selectionIndicateursControleur) {
                    this.selectionIndicateursControleur = selectionIndicateursControleur;
                };
                /**
                 * Méthode pour mettre à jour la valeur de estEditionPanier
                 * @param val
                 */
                ModalePaniersService.prototype.majEstEditionPanier = function (val) {
                    this.estEditionPanier = val;
                };
                ModalePaniersService.prototype.getEstEditionPanier = function () {
                    return this.estEditionPanier ? this.estEditionPanier : false;
                };
                /**
                 * Méthode permettant de modifier l'état du drop panier à vrai
                 * @returns {void}
                 */
                ModalePaniersService.prototype.activerDropPanier = function () {
                    if (this.modalePaniersControleur) {
                        this.modalePaniersControleur.setEstActiverDropPanier(true);
                    }
                    if (this.selectionIndicateursControleur) {
                        this.selectionIndicateursControleur.setEstActiverDropPanier(true);
                    }
                };
                /**
                 * Méthode permettant de modifier l'état du drop panier à faux
                 * @returns {void}
                 */
                ModalePaniersService.prototype.desactiverDropPanier = function () {
                    if (this.modalePaniersControleur) {
                        this.modalePaniersControleur.setEstActiverDropPanier(false);
                    }
                    if (this.selectionIndicateursControleur) {
                        this.selectionIndicateursControleur.setEstActiverDropPanier(false);
                    }
                };
                /**
                 * Méthode permettant de modifier l'état du drop des tuiles du panier à vrai
                 * @param {Array<Modeles.Application.ITuilePanierSettings>} listeTuilePanierSettings
                 * @returns {void}
                 */
                ModalePaniersService.prototype.activerDropTuilesPanier = function (listeTuilePanierSettings) {
                    _.forEach(listeTuilePanierSettings, function (tuile) {
                        tuile.dropSettings.activerDragOver();
                    });
                };
                /**
                 * Méthode permettant de modifier l'état du drop des tuiles du panier à faux
                 * @param {Array<Modeles.Application.ITuilePanierSettings>} listeTuilePanierSettings
                 * @returns {void}
                 */
                ModalePaniersService.prototype.desactiverDropTuilesPanier = function (listeTuilePanierSettings) {
                    _.forEach(listeTuilePanierSettings, function (tuile) {
                        if (tuile.dropSettings) {
                            tuile.dropSettings.desactiverDragOver();
                        }
                    });
                };
                /**
                 * Méthode permettant de modifier l'état du drop poubelle à vrai
                 * @returns {void}
                 */
                ModalePaniersService.prototype.afficherDropPoubelle = function () {
                    if (this.modalePaniersControleur) {
                        this.modalePaniersControleur.setEstAfficherDropPoubelle(true);
                    }
                    if (this.selectionIndicateursControleur) {
                        this.selectionIndicateursControleur.setEstAfficherDropPoubelle(true);
                    }
                };
                /**
                 * Méthode permettant de modifier l'état du drop poubelle à faux
                 * @returns {void}
                 */
                ModalePaniersService.prototype.cacherDropPoubelle = function () {
                    if (this.modalePaniersControleur) {
                        this.modalePaniersControleur.setEstAfficherDropPoubelle(false);
                    }
                    if (this.selectionIndicateursControleur) {
                        this.selectionIndicateursControleur.setEstAfficherDropPoubelle(false);
                    }
                };
                /**
                 * Méthode permettant de modifier l'état du bouton valider à vrai
                 * @returns {void}
                 */
                ModalePaniersService.prototype.afficherBoutonValider = function () {
                    if (this.modalePaniersControleur) {
                        this.modalePaniersControleur.setEstAfficherBoutonAjouter(true);
                    }
                };
                /**
                 * Méthode permettant de modifier l'état du bouton valider à faux
                 * @returns {void}
                 */
                ModalePaniersService.prototype.cacherBoutonValider = function () {
                    if (this.modalePaniersControleur) {
                        this.modalePaniersControleur.setEstAfficherBoutonAjouter(false);
                    }
                };
                /**
                 * Méthode permettant de rafraichir listeTuileCatalogueSettings
                 * @return {void}
                 */
                ModalePaniersService.prototype.rafraichirListeTuileCatalogueSettings = function () {
                    if (this.modalePaniersControleur) {
                        this.modalePaniersControleur.rafraichirListeTuileCatalogueSettings();
                    }
                    if (this.selectionIndicateursControleur) {
                        this.selectionIndicateursControleur.rafraichirListeTuileCatalogueSettings();
                    }
                };
                /**
                 * Methode permetant de rendre compatible les tuiles avec le drag and drop
                 * @return {void}
                 */
                ModalePaniersService.prototype.rendreCompatibleTuilesAvecDragAndDrop = function () {
                    var boutons = document.getElementById(Portefeuille.Constantes.ModalePaniers.ID_HTML_MODALE_PANIERS_BODY).getElementsByClassName(Portefeuille.Constantes.ModalePaniers.CLASS_HTML_BOUTON_TUILE_STANDARD);
                    _.forEach(boutons, function (bouton) {
                        bouton.setAttribute(Portefeuille.Constantes.ModalePaniers.ATTRIBUT_HTML_DISABLED, Portefeuille.Constantes.ModalePaniers.STRING_VALUE_TRUE);
                        bouton.setAttribute(Portefeuille.Constantes.ModalePaniers.ATTRIBUT_HTML_STYLE, Portefeuille.Constantes.ModalePaniers.STRING_VALUE_CURSOR_POINTER_IMPORTANT);
                    });
                };
                /**
                 * Méthode permettant de créer un dragSettings
                 * @param {Modeles.Application.ITuileCatalogueSettings} tuileCatalogueSettings
                 * @return {Modeles.Application.IDragSettings}
                 */
                ModalePaniersService.prototype.creerDragSettings = function (tuileCatalogueSettings) {
                    var dragSettings = {};
                    dragSettings.idHTMLElementConteneur = Portefeuille.Constantes.ModalePaniers.ID_HTML_MODALE_PANIERS_BODY;
                    dragSettings.donneesATransmettre = tuileCatalogueSettings;
                    dragSettings.estActiver = this.estEditionPanier ? this.estEditionPanier : false;
                    return dragSettings;
                };
                /**
                 * Méthode permettant de créer un dropSettings
                 * @param {string} codeIndicateur
                 * @return {Modeles.Application.IDropSettings}
                 */
                ModalePaniersService.prototype.creerDropSettings = function (event) {
                    var dropSettings = {};
                    dropSettings.idHTMLElementConteneur = Portefeuille.Constantes.ModalePaniers.ID_HTML_MODALE_PANIERS_BODY;
                    dropSettings.estActiver = this.estEditionPanier ? this.estEditionPanier : false;
                    dropSettings.dropEventAction = event;
                    return dropSettings;
                };
                /**
                 * Méthode permettant de supprimer un indicateur du panier
                 * @param {Modeles.Application.ITuilePanierSettings} tuilePanierSettings
                 * @param {Array<Modeles.Application.ITuileCatalogueSettings>} listeTuileCatalogueSettings
                 * @param {Array<Modeles.Application.ITuilePanierSettings>} listeTuilePanierSettings
                 * @param {Array<Modeles.Application.IFiltre>} listeFiltresClients
                 * @param {Array<Modeles.Application.IFiltre>} listeFiltresRelationEco
                 * @return {void}
                 */
                ModalePaniersService.prototype.supprimerIndicateurPanier = function (tuilePanierSettings, listeTuileCatalogueSettings, listeTuilePanierSettings, listeFiltresClients, listeFiltresRelationEco) {
                    // Récupération de la tuile catalogue settings
                    var tuileCatalogueSettings = _.find(listeTuileCatalogueSettings, function (tuileCatalogue) {
                        return tuileCatalogue.indicateur.indicateur.code === tuilePanierSettings.indicateur.indicateur.code;
                    });
                    // Changement de l'état de l'indicateur
                    tuileCatalogueSettings.indicateur.choisi = false;
                    // Suppression de la tuile panier
                    _.remove(listeTuilePanierSettings, function (tuilePanier) {
                        return tuilePanier.indicateur.indicateur.code === tuilePanierSettings.indicateur.indicateur.code;
                    });
                    // Mise à jour du message d'avertissement de modification de filtre
                    this.afficherMessageAvertissementFiltre(listeFiltresRelationEco, listeFiltresClients, _.pluck(listeTuilePanierSettings, "indicateur"));
                    // Rafraichir listeTuileCatalogueSettings
                    this.rafraichirListeTuileCatalogueSettings();
                };
                /**
                 * Fonction permettant de copier une liste sans copier les items
                 * @param {Array<any>} liste
                 * @returns {Array<any>}
                 */
                ModalePaniersService.prototype.copierListe = function (liste) {
                    var copieListe = [];
                    _.forEach(liste, function (item) {
                        copieListe.push(item);
                    });
                    return copieListe;
                };
                /**
                 * Methode qui permet d'afficher ou non le message d'avertissement filtre
                 * @param {Array<Modeles.Application.IFiltre>} listeFiltresRelationEco
                 * @param {Array<Modeles.Application.IFiltre>} listeFiltresClients
                 * @param {Array<Modeles.Application.IIndicateurChoix>} listeChoixIndicateurs
                 * @return {void}
                 */
                ModalePaniersService.prototype.afficherMessageAvertissementFiltre = function (listeFiltresRelationEco, listeFiltresClients, listeChoixIndicateurs) {
                    var nomFiltre1 = null;
                    var nomFiltre2 = null;
                    var nomFiltre3 = null;
                    var nomFiltre4 = null;
                    // Recuperation du nom des filtres relation eco
                    _.forEach(listeFiltresRelationEco, function (filtre) {
                        var indicateurChoixExistant = _.find(listeChoixIndicateurs, function (indicateurChoix) {
                            return indicateurChoix.indicateur.codeRel === filtre.indicateur.indicateur.code;
                        });
                        if (!indicateurChoixExistant) {
                            if (nomFiltre1) {
                                nomFiltre2 = filtre.indicateur.indicateur.intitule;
                            }
                            else {
                                nomFiltre1 = filtre.indicateur.indicateur.intitule;
                            }
                        }
                    });
                    // Recuperation du nom des filtres client
                    _.forEach(listeFiltresClients, function (filtre) {
                        var indicateurChoixExistant = _.find(listeChoixIndicateurs, function (indicateurChoix) {
                            return indicateurChoix.indicateur.code === filtre.indicateur.indicateur.code;
                        });
                        if (!indicateurChoixExistant) {
                            if (nomFiltre3) {
                                nomFiltre4 = filtre.indicateur.indicateur.intitule;
                            }
                            else {
                                nomFiltre3 = filtre.indicateur.indicateur.intitule;
                            }
                        }
                    });
                    if (this.modalePaniersControleur) {
                        this.modalePaniersControleur.afficherMessageAvertissementFiltre(nomFiltre1, nomFiltre2, nomFiltre3, nomFiltre4);
                    }
                    if (this.selectionIndicateursControleur) {
                        this.selectionIndicateursControleur.afficherMessageAvertissementFiltre(nomFiltre1, nomFiltre2, nomFiltre3, nomFiltre4);
                    }
                };
                /**
                 * Fonction permettant de generer un identifiant aléatoire
                 * @returns {number}
                 */
                ModalePaniersService.prototype.genererIdentifiantAleatoire = function () {
                    return Math.floor(new Date().valueOf() * Math.random());
                };
                ModalePaniersService.CLASS_NAME = "ModalePaniersService";
                ModalePaniersService.logger = loggerClass(ModalePaniersService.CLASS_NAME);
                // Injection de dépendances 
                ModalePaniersService.$inject = [];
                return ModalePaniersService;
            }());
            // Déclaration du service
            Portefeuille.app.service("ModalePaniersService", ModalePaniersService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

// Code récupéré depuis Connaissance Client / Ancienne version des liens
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            /**
             * Service de génération d'un fichier CSV à partir d'un tableau
             */
            var CsvService = (function () {
                function CsvService($q, $parse, $window, $document, $timeout) {
                    this.$q = $q;
                    this.$parse = $parse;
                    this.$window = $window;
                    this.$document = $document;
                    this.$timeout = $timeout;
                }
                /**
                 * @ngdoc method
                 * @name myway.tools.service:mwsfAdresseService#downloadCsv
                 * @methodOf myway.tools.service:mwCsvService
                 * @param {any[]} data Tableau de données
                 * @param {Myway.Tools.ICsvOptions} options Configuration du fichier csv
                 * @description
                 * Création et téléchargement d'un fichier csv à partir du tableau passé en paramètre.
                 * Le tableau doit être un objet simple sans sous-objets puisque ces derniers ne sont pas gérés.
                 * Les options sont toutes détaillées dans l'interface dédiée.
                 *
                 * #Configuration
                 * La configuration fonctionne par surcharge, il faut donc indiquer ce qui diffère de la configuration par défaut.
                 * <pre class="prettyprint">
                 *   header: [ "Nom", "Prénom", "Age" ],
                 *   columnOrder: ["nom", "prenom", "age" ],
                 *   filename: "personnes.csv"
                 * </pre>
                 *
                 * ##Configuration par défaut du fichier csv:
                 * <pre class="prettyprint">
                 *   txtDelimiter: "\"",
                 *   decimalSeparator: ",",
                 *   quoteStrings: true,
                 *   addByteOrderMarker: true,
                 *   fieldSeparator: ";",
                 *   charset: "utf-8",
                 *   label: false,
                 *   filename: "export.csv"
                 * </pre>
                 * @returns {Promise<any>} Promesse résolue lorsque le téléchargement est lancé ou rejetée en cas d'erreur.
                 */
                CsvService.prototype.downloadCsv = function (header, data, options) {
                    var _this = this;
                    var deferred = this.$q.defer();
                    options = this.getOptions(options);
                    var csv = this.stringify(header, data, options);
                    var blob = new Blob([csv], {
                        type: "text/csv;charset=" + options.charset + ";"
                    });
                    if (window.navigator.msSaveOrOpenBlob) {
                        if (navigator.msSaveBlob(blob, options.filename)) {
                            deferred.resolve(null);
                        }
                        else {
                            deferred.reject(null);
                        }
                    }
                    else {
                        var objectURL = this.$window["URL"].createObjectURL(blob);
                        var downloadLink = angular.element("<a></a>");
                        downloadLink.attr("href", objectURL);
                        downloadLink.attr("download", options.filename);
                        downloadLink.attr("target", "_blank");
                        this.$document.find("body").append(downloadLink);
                        this.$timeout(function () {
                            downloadLink[0].click();
                            downloadLink.remove();
                            _this.$window["URL"].revokeObjectURL(objectURL);
                            deferred.resolve(null);
                        });
                    }
                    return deferred.promise;
                };
                /**
                 * Get options
                 */
                CsvService.prototype.getOptions = function (options) {
                    var result = angular.extend({}, CsvService.DEFAULT_OPTIONS, options || {});
                    // Replaces any badly formatted special character string with correct special character
                    if (this.isSpecialChar(result.fieldSeparator)) {
                        result.fieldSeparator = this.getSpecialChar(result.fieldSeparator);
                    }
                    return result;
                };
                /**
                 * Creates a csv from a data array
                 */
                CsvService.prototype.stringify = function (header, data, options) {
                    var _this = this;
                    var lines = [];
                    // Create the header of the file if it is provided
                    if (header) {
                        angular.forEach(header, function (row, index) {
                            var infoArray = [];
                            for (var i = 0; i < row.length; i++) {
                                infoArray.push(_this.stringifyField(row[i], options));
                            }
                            lines.push(infoArray.join(options.fieldSeparator));
                        });
                    }
                    if (options.header) {
                        var encodingArray = [];
                        angular.forEach(options.header, function (title) {
                            encodingArray.push(_this.stringifyField(title, options));
                        });
                        lines.push(encodingArray.join(options.fieldSeparator));
                    }
                    else if (options.label && data && data.length) {
                        var labelArray = [];
                        var iterator = options.columnOrder || data[0];
                        angular.forEach(iterator, function (value, label) {
                            var val = options.columnOrder ? value : label;
                            labelArray.push(_this.stringifyField(val, options));
                        });
                        lines.push(labelArray.join(options.fieldSeparator));
                    }
                    angular.forEach(data, function (row, index) {
                        var infoArray = [];
                        var iterator = options.columnOrder || row;
                        angular.forEach(iterator, function (field) {
                            var val = options.columnOrder ? row[field] : field;
                            infoArray.push(_this.stringifyField(val, options));
                        });
                        lines.push(infoArray.join(options.fieldSeparator));
                    });
                    var csv = lines.join(CsvService.EOL);
                    // Add BOM if needed
                    if (options.addByteOrderMarker) {
                        csv = CsvService.BOM + csv;
                    }
                    return csv;
                };
                /**
                 * Helper function to check if input is really a special character
                 */
                CsvService.prototype.isSpecialChar = function (input) {
                    return CsvService.SPECIAL_CHARS[input] !== undefined;
                };
                /**
                 * Helper function to get what the special character was supposed to be since Angular escapes the first backslash
                 */
                CsvService.prototype.getSpecialChar = function (input) {
                    return CsvService.SPECIAL_CHARS[input];
                };
                /**
                 * Stringify one field
                 */
                CsvService.prototype.stringifyField = function (data, options) {
                    var result = data;
                    if (this.isFloat(data)) {
                        if (options.decimalSeparator === "locale") {
                            result = data.toLocaleString();
                        }
                        else if (options.decimalSeparator !== ".") {
                            result = data.toString().replace(".", options.decimalSeparator);
                        }
                    }
                    else if (typeof data === "string") {
                        result = data.replace(/"/g, "\"\""); // Escape double quotes
                        if (options.quoteStrings || data.indexOf(options.fieldSeparator) !== -1 || data.indexOf("\n") !== -1 || data.indexOf("\r") !== -1) {
                            result = options.txtDelimiter + result + options.txtDelimiter;
                        }
                    }
                    else if (typeof data === "boolean") {
                        result = data ? "TRUE" : "FALSE";
                    }
                    return result;
                };
                /**
                 * Helper function to check if input is float
                 */
                CsvService.prototype.isFloat = function (input) {
                    return +input === input && (!isFinite(input) || Boolean(input % 1));
                };
                CsvService.EOL = "\r\n";
                CsvService.BOM = "\ufeff";
                CsvService.SPECIAL_CHARS = {
                    "\\t": "\t",
                    "\\b": "\b",
                    "\\v": "\v",
                    "\\f": "\f",
                    "\\r": "\r"
                };
                CsvService.DEFAULT_OPTIONS = {
                    txtDelimiter: "\"",
                    decimalSeparator: ",",
                    quoteStrings: true,
                    addByteOrderMarker: true,
                    fieldSeparator: ";",
                    charset: "utf-8",
                    label: false,
                    filename: "export.csv"
                };
                CsvService.$inject = [
                    "$q",
                    "$parse",
                    "$window",
                    "$document",
                    "$timeout"
                ];
                return CsvService;
            }());
            Application.CsvService = CsvService;
            /**
             * @ngdoc service
             * @name myway.tools.service:mwCsvService
             * @requires $q
             * @requires $parse
             * @requires $window
             * @requires $document
             * @requires $timeout
             * @description
             * Service de génération d'un fichier CSV à partir d'un tableau
             */
            Portefeuille.app.service("mwCsvService", CsvService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            /**
             * Implémentation du service d'ouverture des popups
             */
            var PopupService = (function () {
                /**
                 * Constructeur
                 * @param modalService: MyWay.UI.IModalService
                 * @param lisaApplication: assisynt.Services.Application.ILisaApplication
                 */
                function PopupService(modalService, lisaApplication) {
                    this.modalService = modalService;
                    this.lisaApplication = lisaApplication;
                }
                /**
                 * Permet d'ouvrir une popup simple d'informations
                 */
                PopupService.prototype.showInfos = function (titre, texte) {
                    var popupOptions = {
                        closeButtonText: Portefeuille.Constantes.Popup.BOUTON_FERMER,
                        headerText: titre,
                        bodyText: texte,
                        iconName: "itce-warning",
                        size: "md"
                    };
                    return this.modalService.showPopup(popupOptions);
                };
                /**
                 * Permet d'ouvrir une popup simple affichant un message d'erreur
                 * @param {MyWay.Services.Erreur} erreur
                 */
                PopupService.prototype.showErreur = function (erreur) {
                    if (!erreur.libelle) {
                        erreur.libelle = Portefeuille.Constantes.Popup.LIBELLE_ERREUR_CHARGEMENT;
                    }
                    return this.modalService.showErreur(MyWay.UI.TYPE_POPUP_ERREUR.BLOQUANT, erreur.codeLibelle, erreur.libelle);
                };
                /**
                 * Ouverture d'une popup demandant la confirmation d'une action
                 * @param {string} titre
                 * @param {string} texte
                 * @param {string} validerTexte
                 * @param {string} closeTexte
                 */
                PopupService.prototype.showConfirmations = function (titre, texte, validerTexte, closeTexte) {
                    var confirmOptions = {
                        actionButtonText: validerTexte,
                        closeButtonText: closeTexte,
                        headerText: titre,
                        bodyText: texte,
                        //iconName: "itce-question",
                        size: "md"
                    };
                    return this.modalService.showConfirm(confirmOptions);
                };
                /**
                 * Permet d'ouvrir une fenêtre modale large. Le template est donné par templateUrl
                 * @param {string} templateUrl
                 * @param {string} controllerName
                 * @param {Modeles.Application.IPopupData<any>} templateDatas
                 */
                PopupService.prototype.showModal = function (templateUrl, controllerName, templateDatas) {
                    var modalOptions = {
                        templateUrl: templateUrl,
                        controller: controllerName,
                        controllerAs: "popupCtrl",
                        windowClass: "app-modal-window-MEG",
                        backdrop: "static",
                        keyboard: true,
                        size: "lg",
                        resolve: {
                            callback: /* istanbul ignore next */ function () {
                            },
                            data: /* istanbul ignore next */ function () {
                                return templateDatas;
                            }
                        }
                    };
                    return this.modalService.showModal(modalOptions);
                };
                /**
                 * Permet d'ouvrir une fenêtre modale medium. Le template est donné par templateUrl
                 * @param {string} templateUrl
                 * @param {string} controllerName
                 * @param {Modeles.Application.IPopupData<any>} templateDatas
                 */
                PopupService.prototype.showModalMd = function (templateUrl, controllerName, templateDatas) {
                    var modalOptions = {
                        templateUrl: templateUrl,
                        controller: controllerName,
                        controllerAs: "popupCtrl",
                        windowClass: "app-modal-window-MEG",
                        backdrop: "static",
                        keyboard: true,
                        size: "md",
                        resolve: {
                            callback: /* istanbul ignore next */ function () {
                            },
                            data: /* istanbul ignore next */ function () {
                                return templateDatas;
                            }
                        }
                    };
                    return this.modalService.showModal(modalOptions);
                };
                /**
                 * Permet d'ouvrir une fenêtre modale large. Le template est donné par templateUrl
                 * @param {string} templateUrl
                 * @param {string} controllerName
                 * @param {Modeles.Application.IPopupData<any>} templateDatas
                 */
                PopupService.prototype.showModalLg = function (templateUrl, controllerName, templateDatas) {
                    var modalOptions = {
                        templateUrl: templateUrl,
                        controller: controllerName,
                        controllerAs: "popupCtrl",
                        windowClass: "app-modal-window-MEG",
                        backdrop: "static",
                        keyboard: true,
                        size: "lg",
                        resolve: {
                            callback: /* istanbul ignore next */ function () {
                            },
                            data: /* istanbul ignore next */ function () {
                                return templateDatas;
                            }
                        }
                    };
                    return this.modalService.showModal(modalOptions);
                };
                /**
                 * Permet d'ouvrir une fenêtre modale large. Le template est donné par templateUrl
                 * @param {string} templateUrl
                 * @param {string} controllerName
                 * @param {Modeles.Application.IPopupData<any>} templateDatas
                 */
                PopupService.prototype.showModalFull = function (templateUrl, controllerName, templateDatas) {
                    var modalOptions = {
                        templateUrl: templateUrl,
                        controller: controllerName,
                        controllerAs: "popupCtrl",
                        windowClass: "app-modal-window-MEG",
                        backdrop: "static",
                        keyboard: true,
                        size: "full",
                        resolve: {
                            callback: /* istanbul ignore next */ function () {
                            },
                            data: /* istanbul ignore next */ function () {
                                return templateDatas;
                            }
                        }
                    };
                    return this.modalService.showModal(modalOptions);
                };
                // Injection de dépendances 
                PopupService.$inject = [
                    Portefeuille.Constantes.Inject.Services.modalService,
                    Portefeuille.Constantes.Inject.Services.lisaApplication
                ];
                return PopupService;
            }());
            Portefeuille.app.service("PopupService", PopupService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service de gestion de la liste des portefeuilles
             */
            var PortefeuilleService = (function () {
                /**
                 * Constructeur
                 * @param serviceAgentExtended
                 * @param $location
                 */
                function PortefeuilleService(serviceAgentExtended, $location, $window, $q, recherchePortefeuilleService, contexteService, eventService, preferencesService) {
                    this.serviceAgentExtended = serviceAgentExtended;
                    this.$location = $location;
                    this.$window = $window;
                    this.$q = $q;
                    this.recherchePortefeuilleService = recherchePortefeuilleService;
                    this.contexteService = contexteService;
                    this.eventService = eventService;
                    this.preferencesService = preferencesService;
                    this.listePortefeuilles = [];
                    this.portefeuilleInitialise = false;
                }
                /**
                 * Méthode de mise à jour des portefeuilles selectionnés dans les préférences
                 * @param {Modeles.Application.IPortefeuille[]} portefeuilles
                 */
                PortefeuilleService.prototype.setListePortfeuillesVisu = function (portefeuilles) {
                    var _this = this;
                    this.listePortefeuilles = portefeuilles;
                    return this.contexteService.getContexte().then(function (ctx) {
                        // On enregistre les choix de portefeuille que si l'on est sur l'eds de l'agent connecté
                        return (ctx.edsUser === ctx.edsVisu) ?
                            _this.preferencesService.ecrireChoixPortefeuilles(portefeuilles) :
                            _this.$q.when();
                    });
                };
                /**
                 * Methode permetant de récupérer la liste des portefeuilles selectionnées
                 * @return {Array<Modeles.Application.IPortefeuille>}
                 */
                PortefeuilleService.prototype.getListePortefeuillesVisu = function () {
                    return this.listePortefeuilles;
                };
                PortefeuilleService.prototype.getListeCodeSuiviParComplementairePortefeuillesExpertVisu = function () {
                    return _.filter(this.listePortefeuilles, function (item) {
                        return item.id < Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && item.estAffiche;
                    }).map(function (ptf) {
                        return ptf.codeSuiviParComplementaire;
                    });
                };
                PortefeuilleService.prototype.getListeLibelleSuiviParComplementairePortefeuillesExpertVisu = function () {
                    return _.filter(this.listePortefeuilles, function (item) {
                        return item.id < Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && item.estAffiche;
                    }).map(function (ptf) {
                        return ptf.libelle;
                    });
                };
                /**
                 * Méthode permettant d'indiquer si au moins 1 portefeuille est séléctionné pour affichage
                 */
                PortefeuilleService.prototype.aPortefeuillesAffiche = function () {
                    return (_.where(this.listePortefeuilles, { "estAffiche": true }).length > 0);
                };
                /**
                 * Méthode permettant d'indiquer si au moins 1 portefeuille est séléctionné pour affichage
                 */
                PortefeuilleService.prototype.aPortefeuillesReelAffiche = function () {
                    return (_.filter(this.listePortefeuilles, function (item) {
                        return item.id > (Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC - 1) && item.estAffiche;
                    }).length > 0);
                };
                /**
                 * Methode permetant de récupérer la liste des portefeuilles de l'agent connecté
                 * @return {ng.IPromise<Modeles.Application.IPortefeuille[]>}
                 */
                PortefeuilleService.prototype.getListePortefeuilleAgentConnecte = function () {
                    var _this = this;
                    if (this.portefeuilleInitialise) {
                        return this.$q.when(this.listePortefeuilles);
                    }
                    else {
                        this.portefeuilleInitialise = true;
                        return this.contexteService.getAuthentification().
                            then(function (contexte) {
                            var query = {};
                            query.codeEtablissement = contexte.codeEtablissement;
                            query.IdentifianElementStructure = +contexte.agentConnecte.numeroInterneEds;
                            query.typeRecherche = "C"; // recherche en incluant le suiviPar complémentaire 'SPC'
                            return _this.getListePortefeuilleQuery(query);
                        });
                    }
                };
                /**
                 * Récupèrer le caracterisitque de l'agent connecté
                 */
                PortefeuilleService.prototype.getCaracteristiquesAgentConnecte = function () {
                    var _this = this;
                    return this.contexteService.getAuthentification().then(function (contexte) {
                        var caracteristiquesAgent = {};
                        caracteristiquesAgent.codeEtablissement = contexte.codeEtablissement;
                        caracteristiquesAgent.designationAgent = contexte.agentConnecte.designationLongueAgent;
                        caracteristiquesAgent.identifiantElementStructure = +contexte.agentConnecte.numeroInterneEds;
                        caracteristiquesAgent.libelleFonction = contexte.agentConnecte.designationPosteFonctionnel;
                        _this.setCaracteristiquesAgent(caracteristiquesAgent);
                        return _this.caracteristiquesAgent;
                    });
                };
                /**
                 * Methode permetant de récupérer la liste des portefeuilles d'un agent choisi
                 * @param {Modeles.Application.ICaracteristiquesAgent} edsChoisi
                 * @return {ng.IPromise<Modeles.Application.IPortefeuille[]>}
                 */
                PortefeuilleService.prototype.getListePortefeuilleAgentChoisi = function (edsChoisi) {
                    var query = {};
                    query.codeEtablissement = edsChoisi.codeEtablissement;
                    query.IdentifianElementStructure = edsChoisi.identifiantElementStructure;
                    query.typeRecherche = "C"; // recherche en incluant le suiviPar complémentaire 'SPC'
                    return this.getListePortefeuilleQuery(query);
                };
                /**
                 * Methode permetant de récupérer la liste des portefeuilles d'une structure qui contient des agents
                 * @param {Modeles.Application.ICaracteristiquesAgent} edsChoisi
                 * @return {ng.IPromise<Modeles.Application.IPortefeuille[]>}
                 */
                PortefeuilleService.prototype.getListePortefeuilleEDSChoisi = function (codeEtablissement, edsChoisi) {
                    var query = {};
                    query.codeEtablissement = codeEtablissement;
                    query.IdentifianElementStructure = edsChoisi;
                    return this.getListePortefeuilleParEdsQuery(query);
                };
                /**
                 * Methode permetant de récupérer la liste des portefeuilles multi suivi par à partir d'un query
                 * @param {Services.Rest.RecherchePortefeuille.IRecherchePortefeuilleQuery} query
                 * @return {ng.IPromise<Modeles.Application.IPortefeuille[]>}
                 */
                PortefeuilleService.prototype.getListePortefeuilleQuery = function (query) {
                    var _this = this;
                    var listPromesse = [];
                    listPromesse.push(this.preferencesService.lireChoixPortefeuilles().
                        then(function (listePreferences) {
                        return listePreferences;
                    }));
                    listPromesse.push(this.recherchePortefeuilleService.getPortefeuilles(query).
                        then(function (listePortefeilleRest) {
                        return listePortefeilleRest;
                    }));
                    return this.$q.all(listPromesse).then(function (resultat) {
                        var listePreferences = resultat[0];
                        var listePortefeilleRest = resultat[1];
                        _this.listePortefeuilles = [];
                        if (listePortefeilleRest && listePortefeilleRest.DonneeSignifiante) {
                            _.forEach(listePortefeilleRest.DonneeSignifiante, (function (portefeuilleAgent) {
                                var portefeuille = Services.Utils.ApplicationUtils.getPortefeuilleDepuisDonneeSignifiante(portefeuilleAgent);
                                // on verifie si le portefeuille traite est dans les preferences
                                if (listePreferences && listePreferences.indexOf(portefeuille.id) >= 0) {
                                    portefeuille.estAffiche = true;
                                }
                                _this.listePortefeuilles.push(portefeuille);
                            }));
                        }
                        // Forçage de l'affichage si 1 seul portefeuille
                        if (_this.listePortefeuilles.length === 1) {
                            _this.listePortefeuilles[0].estAffiche = true;
                        }
                        _this.portefeuilleInitialise = true;
                        // console.log('getListePortefeuilleQuery', this.listePortefeuilles);
                        return _this.$q.when(_this.listePortefeuilles);
                    });
                };
                /**
                 * Methode permetant de récupérer la liste des portefeuilles pour un EDS à partir d'un query
                 * @param {Services.Rest.RecherchePortefeuille.IRecherchePortefeuilleQuery} query
                 * @return {ng.IPromise<Modeles.Application.IPortefeuille[]>}
                 */
                PortefeuilleService.prototype.getListePortefeuilleParEdsQuery = function (query) {
                    var _this = this;
                    return this.recherchePortefeuilleService.getlistePortefeuillesParEds(query).
                        then(function (listePortefeilleRest) {
                        _this.listePortefeuilles = [];
                        if (listePortefeilleRest &&
                            listePortefeilleRest.donneePortefeuille) {
                            _.forEach(listePortefeilleRest.donneePortefeuille, (function (portefeuilleAgent) {
                                if (portefeuilleAgent.codeTypePortefeuille === "C" ||
                                    portefeuilleAgent.codeTypePortefeuille === "R" ||
                                    (portefeuilleAgent.codeTypePortefeuille === "N" &&
                                        portefeuilleAgent.indicateurAffectation === "N")) {
                                }
                                else {
                                    // Si le libelle court EDS est null on met une un libelle avec le numéro EDS du suivi Par
                                    if (!portefeuilleAgent.libelleCourtEDS) {
                                        portefeuilleAgent.libelleCourtEDS = "AGENT-" + portefeuilleAgent.identifiantEdsSuiviPortefeuille;
                                    }
                                    var portefeuille = Services.Utils.ApplicationUtils.getPortefeuilleDepuisListePortefeuille(portefeuilleAgent);
                                    _this.listePortefeuilles.push(portefeuille);
                                }
                            }));
                        }
                        // Forçage de l'affichage si 1 seul portefeuille
                        if (_this.listePortefeuilles.length === 1) {
                            _this.listePortefeuilles[0].estAffiche = true;
                        }
                        _this.portefeuilleInitialise = true;
                        return _this.$q.when(_this.listePortefeuilles);
                    });
                };
                /**
                 * Méthode de récupération des caractéristiques Agent
                 *  @return {Modeles.Application.ICaracteristiquesAgent}
                 */
                PortefeuilleService.prototype.getCaracteristiquesAgent = function () {
                    return this.caracteristiquesAgent;
                };
                /**
                 * Méthode de Mise à jour des caractéristiques Agent
                 * @param {Modeles.Application.ICaracteristiquesAgent} caracteristiquesAgent
                 */
                PortefeuilleService.prototype.setCaracteristiquesAgent = function (caracteristiquesAgent) {
                    this.caracteristiquesAgent = caracteristiquesAgent;
                };
                /**
                 * Méthode permettant de voir si l'eds en cours a au moins un portefeuille
                 */
                PortefeuilleService.prototype.aPortefeuille = function () {
                    return (this.listePortefeuilles.length > 0);
                };
                /**
                 * Méthode permettant de savoir si l'eds en cours à au moins un portefeuille de type portefeuille
                 */
                PortefeuilleService.prototype.aPortefeuilleReel = function () {
                    return (_.filter(this.listePortefeuilles, function (item) {
                        return item.id > Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC - 1;
                    }).length > 0);
                };
                /**
                 *
                 */
                PortefeuilleService.prototype.aPortefeuilleExpertAffiche = function () {
                    return (_.filter(this.listePortefeuilles, function (item) {
                        return item.id < Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && item.estAffiche;
                    }).length > 0);
                };
                /**
                 * Méthode permettant de savoir si l'eds en cours à au moins un suivi par complémentaire
                 */
                PortefeuilleService.prototype.aSuiviParComplementaire = function () {
                    // return (_.where(this.listePortefeuilles, { "id": 0 }).length > 0);
                    return (_.filter(this.listePortefeuilles, function (item) {
                        return item.id < Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC;
                    }).length > 0);
                };
                PortefeuilleService.prototype.nbPortefeuilleReel = function () {
                    return _.filter(this.listePortefeuilles, function (item) {
                        return item.id > Portefeuille.Constantes.Application.ID_PORTEFEUILLE_MAX_SPC - 1;
                    }).length;
                };
                /**
                 * Méthode retournant les portefeuilles sélectionnés
                 */
                PortefeuilleService.prototype.getListePortefeuillesActifs = function () {
                    return _.where(this.listePortefeuilles, { "estAffiche": true });
                };
                /**
                 *
                 * @param listePtfActifs
                 */
                PortefeuilleService.prototype.setListePortefeuillesActifs = function (listePtfActifs) {
                    var _this = this;
                    _.forEach(listePtfActifs, function (ptfId) {
                        var ptfTemp = _.where(_this.listePortefeuilles, { "id": ptfId });
                        if (ptfTemp && ptfTemp.length > 0) {
                            ptfTemp[0].estAffiche = true;
                        }
                    });
                };
                /**
                 *
                 * @param typeForcage
                 */
                PortefeuilleService.prototype.setTypeForcage = function (typeForcage) {
                    this.typeForcage = typeForcage;
                };
                /**
                 *
                 */
                PortefeuilleService.prototype.getTypeForcage = function () {
                    return this.typeForcage;
                };
                /**
                 * Grouper les portefeuille par agent
                 * @param listePortefeuilles
                 */
                PortefeuilleService.prototype.regrouperPortfeuilleParAgent = function (listePortefeuilles) {
                    _.forEach(listePortefeuilles, function (item) {
                        if (!item.idAgent) {
                            item.idAgent = 0;
                            item.nomPrenonAgent = "";
                        }
                        item.idAgentString = "" + item.idAgent;
                    });
                    var listPortfeuilleParAgent;
                    if (listePortefeuilles) {
                        listPortfeuilleParAgent = _.chain(listePortefeuilles).
                            groupBy("idAgentString").
                            map(function (value) {
                            return {
                                "id": value[0].idAgent,
                                "nomPrenonAgent": value[0].nomPrenonAgent,
                                "listPortefeuilleParAgent": value,
                                "estAffiche": true,
                                "isVisu": true
                            };
                        }).value();
                        listPortfeuilleParAgent = _.sortBy(listPortfeuilleParAgent, function (obj) {
                            return obj.nomPrenonAgent.replace("MR ", "").replace("ME ", "");
                        });
                    }
                    else {
                        listPortfeuilleParAgent = [];
                    }
                    return listPortfeuilleParAgent;
                };
                /**
                 * degrouper la liste des portefeuilles (contraire du regroupement des portefeuilles par agent)
                 * @param listPortfeuilleParAgent
                 */
                PortefeuilleService.prototype.regrouperToutPortfeuille = function (listPortfeuilleParAgent) {
                    var listetRegrouper;
                    if (listPortfeuilleParAgent) {
                        listetRegrouper =
                            _.reduce(listPortfeuilleParAgent, function (resultat, value) {
                                return resultat.concat(value.listPortefeuilleParAgent);
                            }, []);
                        listetRegrouper = _.sortBy(listetRegrouper, function (item) {
                            return item.nomPrenonAgent;
                        });
                    }
                    return listetRegrouper;
                };
                PortefeuilleService.CLASS_NAME = "PortefeuilleService";
                PortefeuilleService.logger = loggerClass(PortefeuilleService.CLASS_NAME);
                // Injection de dépendances 
                PortefeuilleService.$inject = [
                    Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                    Portefeuille.Constantes.Inject.Angular.$location,
                    Portefeuille.Constantes.Inject.Angular.$window,
                    Portefeuille.Constantes.Inject.Angular.$q,
                    Portefeuille.Constantes.Inject.Services.recherchePortefeuilleRestService,
                    Portefeuille.Constantes.Inject.Services.contexteService,
                    Portefeuille.Constantes.Inject.Services.eventService,
                    Portefeuille.Constantes.Inject.Services.preferencesService
                ];
                return PortefeuilleService;
            }());
            Portefeuille.app.service(PortefeuilleService.CLASS_NAME, PortefeuilleService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service applicatif de gestion d'événement
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service de gestion des préférences IHM MyWay via le service serviceAgent.Preferences
             */
            var PreferencesService = (function () {
                /**
                 * Constructeur
                 */
                function PreferencesService(serviceAgent, indicateurService, preferenceUtilisateurRestService, contexteService, $q) {
                    this.serviceAgent = serviceAgent;
                    this.indicateurService = indicateurService;
                    this.preferenceUtilisateurRestService = preferenceUtilisateurRestService;
                    this.contexteService = contexteService;
                    this.$q = $q;
                }
                /**
                 * Permet de completer les paniers manquants
                 */
                PreferencesService.prototype.completerCreationPaniers = function () {
                    var _this = this;
                    var panierTemp;
                    var listeTotaleIndicateurs = this.indicateurService.getListeTotaleIndicateursType();
                    var listePanier = [];
                    return this.lirePreference(Portefeuille.Constantes.Preferences.CODE_PANIER)
                        .then(function (valeur) {
                        if (valeur) {
                            var paniers = valeur.split("|");
                            if (paniers.length < Portefeuille.Constantes.Application.LIMITE_NB_PANIERS) {
                                // Traitement du premier panier car il lui manque potentiellement les 
                                // proprétés "estDefaut" et "nom"(versions précédententes de l'applicatif)
                                _.forEach(paniers, function (panierString) {
                                    panierTemp = _this.convertirPanierPreferenceEnApplicatif(JSON.parse(panierString), listeTotaleIndicateurs);
                                    panierTemp.nom = panierTemp.nom ? panierTemp.nom : Portefeuille.Constantes.Application.NOM_PANIER_DEFAUT;
                                    panierTemp.estDefaut = panierTemp.estDefaut !== undefined ? panierTemp.estDefaut : true;
                                    listePanier.push(panierTemp);
                                });
                                // Ajout paniers vides pour compléter                   
                                for (var _i = paniers.length; _i < Portefeuille.Constantes.Application.LIMITE_NB_PANIERS; _i++) {
                                    var panierNom = Portefeuille.Constantes.Application.NOM_PANIER_CREATION + " " + (_i + 1);
                                    var dataPanier = _this.convertirPanierApplicatifEnPreference([], _i + 1, panierNom, false);
                                    valeur = valeur + "|" + JSON.stringify(dataPanier);
                                    panierTemp = _this.convertirPanierPreferenceEnApplicatif(dataPanier, listeTotaleIndicateurs);
                                    listePanier.push(panierTemp);
                                }
                                return _this.ecrirePaniers(listePanier);
                            }
                            else {
                                return _this.$q.when();
                            }
                        }
                        else {
                            // creation des X paniers vides
                            var pref = "";
                            for (var _i = 0; _i < Portefeuille.Constantes.Application.LIMITE_NB_PANIERS; _i++) {
                                var panierNom = Portefeuille.Constantes.Application.NOM_PANIER_CREATION + " " + (_i + 1);
                                pref = ((_i === 0) ? "" : pref + "|") +
                                    JSON.stringify(_this.convertirPanierApplicatifEnPreference([], _i + 1, panierNom, (_i === 0)));
                            }
                            return _this.serviceAgent.Preferences.EcrirePreference(Portefeuille.Constantes.Preferences.CODE_PANIER, pref);
                        }
                    });
                };
                /**
                 * Permet d'ecrire les preferences de portefeuilles affiches
                 * @param {Array<Modeles.Application.IPortefeuille>} portefeuilles
                 * @returns {MyWay.Services.IPromesse<void>}
                 */
                PreferencesService.prototype.ecrireChoixPortefeuilles = function (portefeuilles) {
                    var valeur = JSON.stringify(this.convertirListePortefeuilleEnPreference(portefeuilles));
                    return this.serviceAgent.Preferences.EcrirePreference(Portefeuille.Constantes.Preferences.CODE_PORTEFEUILLE, valeur);
                };
                /**
                 * Permet de lire une liste d'identifiants portefeuilles selectionnes provenant des préférences
                 * @returns {Array<number>}
                 */
                PreferencesService.prototype.lireChoixPortefeuilles = function () {
                    return this.lirePreference(Portefeuille.Constantes.Preferences.CODE_PORTEFEUILLE).then(function (valeur) {
                        return valeur ? JSON.parse(valeur) : null;
                    });
                };
                /**
                 * Permet de convertir la liste des portefeuilles en liste d'identifiants correspondant aux portefeuilles selectionnes
                 * @param {Array<Modeles.Application.IPortefeuille>} portefeuilles
                 * @returns {Array<number>}
                 */
                PreferencesService.prototype.convertirListePortefeuilleEnPreference = function (portefeuilles) {
                    return _.pluck(_.where(portefeuilles, { "estAffiche": true }), "id").filter(function (num) { return num !== 0; });
                };
                /**
                 * Permet d'écrire un panier dans les préférences
                 * @param {Array<Modeles.Application.IPanier>} liste des paniers
                 * @returns {MyWay.Services.IPromesse<void>}
                 */
                PreferencesService.prototype.ecrirePaniers = function (paniers) {
                    var _this = this;
                    var valeurs = "";
                    var i = 1;
                    _.forEach(paniers, function (panier) {
                        var valeur = JSON.stringify(_this.convertirPanierApplicatifEnPreference(panier.listeChoixIndicateurs, i, panier.nom, panier.estDefaut));
                        // "|" est le séparateur de paniers
                        valeurs = valeurs ? valeurs + "|" + valeur : valeur;
                        i++;
                    });
                    return this.serviceAgent.Preferences.EcrirePreference(Portefeuille.Constantes.Preferences.CODE_PANIER, valeurs).then(function () {
                        _this.listePaniersPreference = paniers;
                        return _this.$q.when();
                    });
                };
                /**
                 * permet de récupérer la liste des paniers provenant des préférence
                 * @param {Array<Modeles.Application.IIndicateurType>} listeTotaleIndicateurs
                 * @return {Array<Modeles.Application.IPanier>} liste des paniers en préférence
                 */
                PreferencesService.prototype.lirePaniers = function (listeTotaleIndicateurs, sansMajListeIndicateursChoix) {
                    var _this = this;
                    return this.lirePreference(Portefeuille.Constantes.Preferences.CODE_PANIER)
                        .then(function (valeur) {
                        if (valeur) {
                            var paniers_1 = valeur.split("|");
                            var listePaniers_1 = [];
                            _.forEach(paniers_1, function (panierString) {
                                var panierTemp = _this.convertirPanierPreferenceEnApplicatif(JSON.parse(panierString), listeTotaleIndicateurs);
                                // gestion initiale pour la version avec 1 seul panier sans estDefaut
                                if (panierTemp.estDefaut || paniers_1.length === 1) {
                                    // si on ne souhaite pas mettre à jour la liste d'indicateurs. Si non renseigné, on met à jour
                                    if (!sansMajListeIndicateursChoix) {
                                        _this.indicateurService.setListeIndicateurChoix(panierTemp.listeChoixIndicateurs);
                                    }
                                    panierTemp.estDefaut = true;
                                }
                                if (!panierTemp.nom) {
                                    panierTemp.nom = Portefeuille.Constantes.Application.NOM_PANIER_DEFAUT;
                                }
                                listePaniers_1.push(panierTemp);
                            });
                            return listePaniers_1;
                        }
                        else {
                            return undefined;
                        }
                    });
                };
                /**
                 * Permet de lire un panier provenant des préférences
                 * @param {Array<Modeles.Application.IIndicateurType>} listeTotaleIndicateurs
                 * @returns {Modeles.Application.IPanier}
                 */
                PreferencesService.prototype.lirePanierDefaut = function (listeTotaleIndicateurs) {
                    var _this = this;
                    return this.lirePreference(Portefeuille.Constantes.Preferences.CODE_PANIER)
                        .then(function (valeur) {
                        if (valeur) {
                            var paniers_2 = valeur.split("|");
                            var panierDef_1;
                            _.forEach(paniers_2, function (panierString) {
                                var panierTemp = _this.convertirPanierPreferenceEnApplicatif(JSON.parse(panierString), listeTotaleIndicateurs);
                                // gestion initiale pour la version avec 1 seul panier sans estDefaut
                                if (panierTemp.estDefaut ||
                                    paniers_2.length === 1) {
                                    panierTemp.estDefaut = true;
                                    if (!panierTemp.nom) {
                                        panierTemp.nom = Portefeuille.Constantes.Application.NOM_PANIER_DEFAUT;
                                    }
                                    panierDef_1 = panierTemp;
                                }
                            });
                            return panierDef_1;
                        }
                        else {
                            return undefined;
                        }
                    });
                };
                /**
                 * Permet de convertir un panier applicatif en panier pour les préférences
                 * @param {Array<Modeles.Application.IIndicateurChoix>} listeIndicateursChoix
                 * @param {number} numeroPanier
                 * @returns {Modeles.Application.IPanierPreferences}
                 */
                PreferencesService.prototype.convertirPanierApplicatifEnPreference = function (listeIndicateursChoix, numeroPanier, nomPanier, estDefautPanier) {
                    var panierPreferenceVMin = {};
                    panierPreferenceVMin.listeCodesIndicateurs = [];
                    panierPreferenceVMin.numero = numeroPanier;
                    panierPreferenceVMin.nom = nomPanier;
                    panierPreferenceVMin.estDefaut = estDefautPanier;
                    _.forEach(listeIndicateursChoix, function (indicateurChoix) {
                        if (indicateurChoix.choisi) {
                            panierPreferenceVMin.listeCodesIndicateurs.push(indicateurChoix.indicateur.codePreference);
                        }
                    });
                    return panierPreferenceVMin;
                };
                /**
                 * Permet de convertir un panier provenant des préférences en panier applicatif
                 * @param {Modeles.Application.IPanierPreferences} panierPreference
                 * @returns {Modeles.Application.IPanier}
                 */
                PreferencesService.prototype.convertirPanierPreferenceEnApplicatif = function (panierPreference, listeTotaleIndicateurs) {
                    var listeIndicateursChoix = [];
                    var panier;
                    if (panierPreference) {
                        _.forEach(panierPreference.listeCodesIndicateurs, function (codeIndicateur) {
                            var indicateurChoix = {};
                            indicateurChoix.choisi = true;
                            indicateurChoix.desactive = null;
                            indicateurChoix.indicateur = _.find(listeTotaleIndicateurs, function (indicateurType) {
                                // gestion du passage de l'ancienne gestion des preference avec code, à la nouvelle avec codePreference
                                return indicateurType.code === codeIndicateur || indicateurType.codePreference === codeIndicateur;
                            });
                            if (indicateurChoix.indicateur) {
                                listeIndicateursChoix.push(indicateurChoix);
                            }
                        });
                        panier = {};
                        panier.listeChoixIndicateurs = listeIndicateursChoix;
                        panier.nom = panierPreference.nom ? panierPreference.nom : "";
                        panier.estDefaut = panierPreference.estDefaut;
                        panier.numero = panierPreference.numero;
                    }
                    return panier;
                };
                /**
                 * Permet de recupérer une préférence
                 * @param {string} cle
                 * @returns {ng.IPromise<any>}
                 */
                PreferencesService.prototype.lirePreference = function (cle) {
                    var _this = this;
                    return this.contexteService.getContexte()
                        .then(function (contexteRecu) {
                        var query = {};
                        query.codeAgent = contexteRecu.identifiantUser;
                        return _this.preferenceUtilisateurRestService.getListePreferences(query);
                    }).then(function (listePreferences) {
                        var maPreference = _.find(listePreferences, function (preference) {
                            return preference.cle === cle;
                        });
                        return maPreference ? maPreference.valeur : null;
                    });
                };
                PreferencesService.CLASS_NAME = "PreferencesService";
                PreferencesService.logger = loggerClass(PreferencesService.CLASS_NAME);
                // Injection de dépendances 
                PreferencesService.$inject = [
                    Portefeuille.Constantes.Inject.MyWay.serviceAgent,
                    Portefeuille.Constantes.Inject.Services.indicateurService,
                    Portefeuille.Constantes.Inject.Services.preferenceUtilisateurRestService,
                    Portefeuille.Constantes.Inject.Services.contexteService,
                    Portefeuille.Constantes.Inject.Angular.$q
                ];
                return PreferencesService;
            }());
            Application.PreferencesService = PreferencesService;
            // Déclaration du service
            Portefeuille.app.service(PreferencesService.CLASS_NAME, PreferencesService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Service applicatif de gestion des donnees de la vue globale présentant les statistiques des portefeuilles selectionnes
 * @module Portefeuille.Services.Application
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            "use strict";
            var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
            /**
             * Service permettant d'exposer tout ou partie de fonctions de certains controleurs
             */
            var StatsService = (function () {
                /**
                 * Constructeur
                 */
                function StatsService($q, contexteService, portefeuilleService, restStatRentabiliteService, restStatRevueService, rechercheRevueService, restStatPortefeuilleService, restStatFluxMouvementFinancierService, restStatPortefeuilleEdsService) {
                    this.$q = $q;
                    this.contexteService = contexteService;
                    this.portefeuilleService = portefeuilleService;
                    this.restStatRentabiliteService = restStatRentabiliteService;
                    this.restStatRevueService = restStatRevueService;
                    this.rechercheRevueService = rechercheRevueService;
                    this.restStatPortefeuilleService = restStatPortefeuilleService;
                    this.restStatFluxMouvementFinancierService = restStatFluxMouvementFinancierService;
                    this.restStatPortefeuilleEdsService = restStatPortefeuilleEdsService;
                }
                /**
                 * Méthode permettant de récupérer les statistiques de la rentabilite
                 * @param
                 * @return {Modeles.ApplicationStats.IRentabilite}
                 */
                StatsService.prototype.getStatsRentabilite = function () {
                    var _this = this;
                    return this.contexteService.getContexte().then(function (ctx) {
                        var query = {};
                        query.codeEtablissement = ctx.codeEtablissement;
                        query.identifiantElementStructure = ctx.edsVisu;
                        query.listeIdentifiantPortefeuille = _.pluck(_this.portefeuilleService.getListePortefeuillesActifs(), "id");
                        if (!_this.statsRentab ||
                            _this.isQueryStatsRentabDifferent(query)) {
                            return _this.restStatRentabiliteService.getStatsRentab(query).
                                then(function (statsRentab) {
                                _this.queryStatsRentab = query;
                                _this.statsRentab = statsRentab ?
                                    Services.Utils.ApplicationUtils.getStatsRentabiliteAppDepuisRest(statsRentab.infoPnb) :
                                    _this.statsRentab;
                                if (_this.statsRentab &&
                                    !_this.statsRentab.pnb12DerniersMoisGlissantN &&
                                    !_this.statsRentab.pnb12DerniersMoisGlissNMoins1 &&
                                    !_this.statsRentab.pnb3112AnneeNMoins1 &&
                                    !_this.statsRentab.ratioPNBImportants &&
                                    !_this.statsRentab.tauxEvolutionPnb) {
                                    _this.statsRentab = undefined;
                                }
                                return _this.statsRentab;
                            });
                        }
                        else {
                            return _this.$q.when(_this.statsRentab);
                        }
                    });
                };
                /**
                 *
                 */
                StatsService.prototype.getStatsRdvEtPortefeuille = function () {
                    var _this = this;
                    return this.contexteService.getContexte().then(function (ctx) {
                        var query = {};
                        query.codeEtablissement = ctx.codeEtablissement;
                        query.identifiantEds = ctx.edsVisu;
                        query.listeIdentifiantPortefeuille = _.pluck(_this.portefeuilleService.getListePortefeuillesActifs(), "id");
                        if (!_this.statsRdvPtf ||
                            _this.isQueryStatsPortefeuilleDifferent(query)) {
                            return _this.restStatPortefeuilleService.getStats(query).
                                then(function (statsPtf) {
                                _this.queryStatsPortefeuille = query;
                                _this.statsRdvPtf = Services.Utils.ApplicationUtils.getStatsPortefeuilleAppDepuisRest(statsPtf);
                                return _this.statsRdvPtf;
                            });
                        }
                        else {
                            return _this.$q.when(_this.statsRdvPtf);
                        }
                    });
                };
                //public getStatsRevuePortefeuille(): ng.IPromise<Modeles.ApplicationStats.IRevuePortefeuille> {
                //    return this.contexteService.getContexte().then((ctx: Modeles.Application.IContexte) => {
                //        let query: Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevueParametres =
                //            <Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevueParametres>{};
                //        query.codeEtablissement = ctx.codeEtablissement;
                //        query.identifiantElementStructure = ctx.edsVisu;
                //        query.listeIdentifiantPortefeuille = _.pluck(this.portefeuilleService.getListePortefeuillesActifs(), "id");
                //        if (!this.statsRevuePtf ||
                //            this.isQueryStatsRevueDifferent(query)) {
                //            return this.restStatRevueService.getStats(query).
                //                then((statsRevue: Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevue) => {
                //                this.queryStatsRevue = query;
                //                this.statsRevuePtf = Utils.ApplicationUtils.getStatsRevueAppDepuisRest(statsRevue);
                //                return this.statsRevuePtf;
                //            });
                //        } else {
                //            return this.$q.when(this.statsRevuePtf);
                //        }
                //    });
                //}
                /**
                 *
                 */
                StatsService.prototype.getStatsRevuePortefeuille = function () {
                    var _this = this;
                    return this.contexteService.getContexte().then(function (ctx) {
                        var query = {};
                        query.codeEtablissement = ctx.codeEtablissement;
                        query.identifiantElementStructure = ctx.edsVisu;
                        query.listeIdentifiantPortefeuille = _.pluck(_this.portefeuilleService.getListePortefeuillesActifs(), "id");
                        return _this.restStatRevueService.getStats(query).
                            then(function (statsRevue) {
                            _this.queryStatsRevue = query;
                            _this.statsRevuePtf = Services.Utils.ApplicationUtils.getStatsRevueAppDepuisRest(statsRevue);
                            return _this.statsRevuePtf;
                        });
                    });
                };
                /**
                 *
                 */
                StatsService.prototype.getStatsListeEds = function () {
                    var _this = this;
                    return this.contexteService.getContexte().then(function (ctx) {
                        var query;
                        query = {};
                        query.parametres = {};
                        query.parametres.codeEtablissement = ctx.codeEtablissement;
                        // Creer la liste des portefeuilles à partir de la liste selectionné pour charger la vue EDS
                        query.parametres.listePortefeuilleEds = _.map(_this.portefeuilleService.getListePortefeuillesActifs(), function (value) {
                            return {
                                "identifiantEds": value.idAgent,
                                "identifiantPortefeuille": value.id
                            };
                        });
                        query.parametres.typeVue = Portefeuille.Enum.Rest.TYPE_VUE_STAT_GLOBAL.VUE_GLOBAL_ET_DETAILLE.toString();
                        if (!_this.statsRevuePtf ||
                            _this.isQueryStatsPortefeuilleEdsDifferent(query)) {
                            return _this.restStatPortefeuilleEdsService.getStatPortefeuilleEds(query).
                                then(function (statsPortfeuilleEds) {
                                _this.queryStatsPortefeuilleEds = query;
                                _this.statsRevuePtf = Services.Utils.ApplicationUtils.getStatsRevueAppDepuisRestGlobal(statsPortfeuilleEds);
                                _this.statsRentab = Services.Utils.ApplicationUtils.getStatsRentabiliteAppDepuisRestGlobal(statsPortfeuilleEds);
                                _this.statsRdvPtf = Services.Utils.ApplicationUtils.getStatsPortefeuilleAppDepuisRestGlobal(statsPortfeuilleEds);
                                _this.statsFluxFinancier = Services.Utils.ApplicationUtils.getStatsFluxFinancierPortefeuilleAppDepuisRestGlobal(statsPortfeuilleEds);
                                _this.statsDetail = Services.Utils.ApplicationUtils.getStatsDetailPortefeuilleAppDepuisRestGlobal(statsPortfeuilleEds);
                                if (_this.statsRentab &&
                                    !_this.statsRentab.pnb12DerniersMoisGlissantN &&
                                    !_this.statsRentab.pnb12DerniersMoisGlissNMoins1 &&
                                    !_this.statsRentab.pnb3112AnneeNMoins1 &&
                                    !_this.statsRentab.ratioPNBImportants &&
                                    !_this.statsRentab.tauxEvolutionPnb) {
                                    _this.statsRentab = undefined;
                                }
                                return _this.$q.when();
                            });
                        }
                        else {
                            return _this.$q.when();
                        }
                    });
                };
                /**
                 * Restitue la liste des clinets à activer à partir d'une liste de portefeuilles
                 * @param codeEtablissement
                 * @param identifiantElementStructure
                 * @param listeIdentifiantPortefeuille
                 */
                StatsService.prototype.getClientsAActiver = function (codeEtablissement, identifiantElementStructure, listeIdentifiantPortefeuille) {
                    var _this = this;
                    if (codeEtablissement &&
                        (identifiantElementStructure > 0) &&
                        (listeIdentifiantPortefeuille &&
                            listeIdentifiantPortefeuille.length > 0)) {
                        return this.getRevue(codeEtablissement, identifiantElementStructure, listeIdentifiantPortefeuille).
                            then(function (resultatPromesse) {
                            var listeClientsAActiver;
                            if (resultatPromesse) {
                                listeClientsAActiver = _this.extraireClientsAActiverDepuisRevue(resultatPromesse);
                            }
                            return listeClientsAActiver;
                        });
                    }
                    return this.$q.reject(new MyWay.Services.Erreur("Paramètres insuffisamment renseignés => recherche de revue impossible"));
                };
                /**
                 * Restitue la liste des clinets à renégocier à partir d'une liste de portefeuilles
                 * @param codeEtablissement
                 * @param identifiantElementStructure
                 * @param listeIdentifiantPortefeuille
                 */
                StatsService.prototype.getClientsARenegocier = function (codeEtablissement, identifiantElementStructure, listeIdentifiantPortefeuille) {
                    var _this = this;
                    if (codeEtablissement &&
                        (identifiantElementStructure > 0) &&
                        (listeIdentifiantPortefeuille &&
                            listeIdentifiantPortefeuille.length > 0)) {
                        return this.getRevue(codeEtablissement, identifiantElementStructure, listeIdentifiantPortefeuille).
                            then(function (resultatPromesse) {
                            var listeClientsAActiver;
                            if (resultatPromesse) {
                                listeClientsAActiver = _this.extraireClientsARenegocierDepuisRevue(resultatPromesse);
                            }
                            return listeClientsAActiver;
                        });
                    }
                    return this.$q.reject(new MyWay.Services.Erreur("Paramètres insuffisamment renseignés => recherche de revue impossible"));
                };
                /**
                 * Restitue une liste de clients à renégocier à partir des données de la revue.
                 * @param revue
                 */
                StatsService.prototype.extraireClientsARenegocierDepuisRevue = function (revue) {
                    var resultat;
                    if (revue &&
                        revue.listeBilanRevue) {
                        resultat = [];
                        if (revue.listeBilanRevue.length > 0) {
                            resultat = _.where(revue.listeBilanRevue, { "indicateurTarifARenegocier": "O" });
                        }
                    }
                    return resultat;
                };
                /**
                 *
                 * @param listeIdentifiantPortefeuille
                 * @param listeIdentifiantRelationEco
                 */
                StatsService.prototype.getStatsFluxMouvementFinancier = function (listeIdentifiantPortefeuille, listeIdentifiantRelationEco) {
                    var _this = this;
                    return this.contexteService.getContexte().then(function (ctx) {
                        var parametresRenseignes = ctx.codeEtablissement &&
                            (ctx.edsVisu > 0) &&
                            ((listeIdentifiantPortefeuille && listeIdentifiantPortefeuille.length > 0) ||
                                (listeIdentifiantRelationEco && listeIdentifiantRelationEco.length > 0));
                        if (parametresRenseignes) {
                            var queryFlux = void 0;
                            queryFlux = {};
                            queryFlux.codeEtablissement = ctx.codeEtablissement;
                            queryFlux.identifiantElementStructure = ctx.edsVisu;
                            queryFlux.listeIdentifiantPortefeuille =
                                (listeIdentifiantPortefeuille && listeIdentifiantPortefeuille.length > 0) ?
                                    listeIdentifiantPortefeuille : null;
                            queryFlux.listeIdentifiantRelationEco =
                                (listeIdentifiantRelationEco && listeIdentifiantRelationEco.length > 0) ?
                                    listeIdentifiantRelationEco : null;
                            return _this.restStatFluxMouvementFinancierService.postStatFluxMvtFinancier(queryFlux).
                                then(function (resultatPromesse) {
                                if (resultatPromesse && resultatPromesse.infoFluxMvtFinancier) {
                                    _this.statsFluxFinancier = _this.definirFluxFinancier(resultatPromesse.infoFluxMvtFinancier);
                                }
                                return _this.statsFluxFinancier;
                            });
                        }
                        return _this.$q.reject(new MyWay.Services.Erreur("Paramètres insuffisamment renseignés => recherche de stats mouvement financier impossible"));
                    });
                };
                /**
                 * Contrôle les paramètres en entrée puis sollicite le service REST pour obtenir les données de la revue.
                 * @param codeEtablissement
                 * @param identifiantElementStructure
                 * @param listeIdentifiantPortefeuille
                 * @param listeIdentifiantRelationEco
                 * @param listeIdentifiantPersonne
                 */
                StatsService.prototype.getRevue = function (codeEtablissement, identifiantElementStructure, listeIdentifiantPortefeuille, listeIdentifiantRelationEco, listeIdentifiantPersonne) {
                    if (codeEtablissement &&
                        (identifiantElementStructure > 0) &&
                        ((listeIdentifiantPortefeuille && listeIdentifiantPortefeuille.length > 0) ||
                            (listeIdentifiantRelationEco && listeIdentifiantRelationEco.length > 0) ||
                            (listeIdentifiantPersonne && listeIdentifiantPersonne.length > 0))) {
                        var queryRechercheRevue = void 0;
                        queryRechercheRevue = {};
                        queryRechercheRevue.codeEtablissement = codeEtablissement;
                        queryRechercheRevue.identifiantElementStructure = identifiantElementStructure;
                        queryRechercheRevue.codeActionEquipement = "A";
                        queryRechercheRevue.listeIdentifiantPersonne = this.alimenterListeNombre(listeIdentifiantPersonne);
                        queryRechercheRevue.listeIdentifiantPortefeuille = this.alimenterListeNombre(listeIdentifiantPortefeuille);
                        queryRechercheRevue.listeIdentifiantRelationEco = this.alimenterListeNombre(listeIdentifiantRelationEco);
                        return this.rechercheRevueService.postRechercheRevue(queryRechercheRevue).
                            then(function (resultatPromesseRest) {
                            return resultatPromesseRest;
                        });
                    }
                    return this.$q.reject(new MyWay.Services.Erreur("Aucun paramètre renseigné => recherche de revue impossible"));
                };
                /**
                 * alimente la liste
                 * @param liste
                 */
                StatsService.prototype.alimenterListeNombre = function (liste) {
                    return (liste && liste.length > 0) ? liste : null;
                };
                /**
                 * Restitue une liste de clients à activer à partir des données de la revue.
                 * @param revue
                 */
                StatsService.prototype.extraireClientsAActiverDepuisRevue = function (revue) {
                    var resultat;
                    if (revue &&
                        revue.listeBilanRevue) {
                        resultat = (revue.listeBilanRevue.length > 0) ? _.where(revue.listeBilanRevue, { "indicateurClientAActiver": "O" }) : [];
                    }
                    else {
                        resultat = null;
                    }
                    return resultat;
                };
                /**
                 *
                 * @param infoFluxFinancierRest
                 */
                StatsService.prototype.definirFluxFinancier = function (infoFluxFinancierRest) {
                    var resultat;
                    if (infoFluxFinancierRest) {
                        var fluxTravail = void 0;
                        resultat = [];
                        //Flux créditeurs
                        fluxTravail = {};
                        //Traitement des dates
                        fluxTravail.dateDebFlux12DerMoisGlissN = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateDebFluxAnneeN);
                        fluxTravail.dateDebFlux12DerMoisGlissNMoins1 = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateDebFluxAnneeNMoins1);
                        fluxTravail.dateFinFlux12DerMoisGlissN = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateFinFluxAnneeN);
                        fluxTravail.dateFinFlux12DerMoisGlissNMoins1 = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateFinFluxAnneeNMoins1);
                        //Traitement des chiffres
                        fluxTravail.flux12DerniersMoisGlissantN = infoFluxFinancierRest.fluxCrediteursAnneeN;
                        fluxTravail.flux12DerniersMoisGlissNMoins1 = infoFluxFinancierRest.fluxCrediteursNMoins1;
                        fluxTravail.tauxEvolutionFlux = infoFluxFinancierRest.tauxEvolutionFluxCrediteurs;
                        resultat.push(fluxTravail);
                        //Flux débiteurs
                        fluxTravail = {};
                        //Traitement des dates
                        fluxTravail.dateDebFlux12DerMoisGlissN = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateDebFluxAnneeN);
                        fluxTravail.dateDebFlux12DerMoisGlissNMoins1 = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateDebFluxAnneeNMoins1);
                        fluxTravail.dateFinFlux12DerMoisGlissN = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateFinFluxAnneeN);
                        fluxTravail.dateFinFlux12DerMoisGlissNMoins1 = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateFinFluxAnneeNMoins1);
                        //Traitement des chiffres
                        fluxTravail.flux12DerniersMoisGlissantN = infoFluxFinancierRest.fluxDebiteursAnneeN;
                        fluxTravail.flux12DerniersMoisGlissNMoins1 = infoFluxFinancierRest.fluxDebiteursNMoins1;
                        fluxTravail.tauxEvolutionFlux = infoFluxFinancierRest.tauxEvolutionFluxDebiteurs;
                        resultat.push(fluxTravail);
                    }
                    return resultat;
                };
                /**
                 * Méthode de comparaison de query pour appel restStatRentabiliteService.getStatsRentab:
                 * renvoie Vrai si duery différentes, Faux sinon
                 * @param query
                 */
                StatsService.prototype.isQueryStatsRentabDifferent = function (query) {
                    this.queryStatsPortefeuilleEds = null;
                    return (!this.queryStatsRentab ||
                        query.identifiantElementStructure !== this.queryStatsRentab.identifiantElementStructure ||
                        !_.isEqual(query.listeIdentifiantPortefeuille, this.queryStatsRentab.listeIdentifiantPortefeuille)) ? true : false;
                };
                /**
                 * Méthode de comparaison de query pour appel restStatRevueService.getStats:
                 * renvoie Vrai si duery différentes, Faux sinon
                 * @param query
                 */
                //private isQueryStatsRevueDifferent(
                //    query: Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevueParametres): boolean {
                //    this.queryStatsPortefeuilleEds = null;
                //    return (!this.queryStatsRevue ||
                //        query.identifiantElementStructure !== this.queryStatsRevue.identifiantElementStructure ||
                //        !_.isEqual(query.listeIdentifiantPortefeuille, this.queryStatsRevue.listeIdentifiantPortefeuille)) ? true : false;
                //}
                /**
                 * Méthode de comparaison de query pour appel restStatPortefeuilleService.getStats:
                 * renvoie Vrai si query différentes, Faux sinon
                 * @param query
                 */
                StatsService.prototype.isQueryStatsPortefeuilleDifferent = function (query) {
                    this.queryStatsPortefeuilleEds = null;
                    return (!this.queryStatsPortefeuille ||
                        query.identifiantEds !== this.queryStatsPortefeuille.identifiantEds ||
                        !_.isEqual(query.listeIdentifiantPortefeuille, this.queryStatsPortefeuille.listeIdentifiantPortefeuille)) ? true : false;
                };
                /**
                 * Méthode de comparaison de query pour appel :
                 * renvoie Vrai si query différentes, Faux sinon
                 * @param query
                 */
                StatsService.prototype.isQueryStatsPortefeuilleEdsDifferent = function (query) {
                    this.queryStatsPortefeuille = null;
                    return (!this.queryStatsPortefeuilleEds ||
                        !_.isEqual(query.parametres.listePortefeuilleEds, this.queryStatsPortefeuilleEds.parametres.listePortefeuilleEds)) ? true : false;
                };
                /**
                 *
                 */
                StatsService.prototype.getStatsRevuePortefeuilleEds = function () {
                    this.queryStatsRevue = undefined;
                    return this.$q.when(this.statsRevuePtf);
                };
                /**
                 *
                 */
                StatsService.prototype.getStatsRentabiliteEds = function () {
                    this.queryStatsRentab = undefined;
                    return this.$q.when(this.statsRentab);
                };
                /**
                 *
                 */
                StatsService.prototype.getStatsRdvEtPortefeuilleEds = function () {
                    this.queryStatsPortefeuille = undefined;
                    return this.$q.when(this.statsRdvPtf);
                };
                /**
                 *
                 */
                StatsService.prototype.getStatsFluxMouvementFinancierEds = function () {
                    return this.$q.when(this.statsFluxFinancier);
                };
                /**
                 *
                 */
                StatsService.prototype.getStatsDetail = function () {
                    return this.statsDetail;
                };
                StatsService.CLASS_NAME = "StatsService";
                StatsService.logger = loggerClass(StatsService.CLASS_NAME);
                // Injection de dépendances 
                StatsService.$inject = [
                    Portefeuille.Constantes.Inject.Angular.$q,
                    Portefeuille.Constantes.Inject.Services.contexteService,
                    Portefeuille.Constantes.Inject.Services.portefeuilleService,
                    Portefeuille.Constantes.Inject.Services.restStatRentabiliteService,
                    Portefeuille.Constantes.Inject.Services.restStatRevueService,
                    Portefeuille.Constantes.Inject.Services.rechercheRevueService,
                    Portefeuille.Constantes.Inject.Services.restStatPortefeuilleService,
                    Portefeuille.Constantes.Inject.Services.restStatFluxMouvementFinancierService,
                    Portefeuille.Constantes.Inject.Services.restStatPortefeuilleEdsService
                ];
                return StatsService;
            }());
            // Déclaration du service
            Portefeuille.app.service(StatsService.CLASS_NAME, StatsService);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var LibrairieD3;
        (function (LibrairieD3) {
            "use strict";
            (function (DEGRADE_DONUT) {
                DEGRADE_DONUT[DEGRADE_DONUT["BLEU"] = "BLEU"] = "BLEU";
                DEGRADE_DONUT[DEGRADE_DONUT["ROSE"] = "ROSE"] = "ROSE";
                DEGRADE_DONUT[DEGRADE_DONUT["GRIS"] = "GRIS"] = "GRIS";
            })(LibrairieD3.DEGRADE_DONUT || (LibrairieD3.DEGRADE_DONUT = {}));
            var DEGRADE_DONUT = LibrairieD3.DEGRADE_DONUT;
            ;
            var CreationDonutService = (function () {
                function CreationDonutService() {
                    CreationDonutService.logger.debug("----------- Constructeur  ------------");
                    this.margin = { top: 0, right: 0, bottom: 0, left: 0 };
                }
                /**
                 *
                 * @param id
                 */
                CreationDonutService.prototype.setWidthHeight = function (id) {
                    this.margin = { top: 10, right: 10, bottom: 10, left: 10 };
                    if (d3.select("#" + id).node()) {
                        this.width = d3.select("#" + id).node().getBoundingClientRect().width;
                    }
                    this.height = 250; // Hauteur max: a l'init, pas de hauteur 
                    if (this.width > this.height) {
                        this.width = this.height;
                    }
                    else {
                        this.height = this.width;
                    }
                };
                /**
                 *
                 * @param config
                 * @param id
                 */
                CreationDonutService.prototype.creerDonut = function (config, id) {
                    var _this = this;
                    if (!d3.select("#" + id).empty()) {
                        d3.select("#" + id).selectAll("svg").remove();
                        this.viderDonut();
                    }
                    this.setWidthHeight(id);
                    var color = this.getCouleurDegrade(config.degrade);
                    var pie = d3.layout.pie()
                        .value(function (data) { return data.pourcentage; })
                        .sort(null);
                    var arc = d3.svg.arc()
                        .innerRadius(60)
                        .padRadius(125);
                    if (!this.donut) {
                        // creation du donut
                        this.donut = d3.select("#" + id).append("svg")
                            .attr("viewBox", "0 0 " + (this.width) + " " + (this.height))
                            .attr("height", this.height)
                            .classed("svg-content", true)
                            .append("g")
                            .attr("transform", this.getTranslateText(0, 0));
                    }
                    else {
                        // vidage du donut
                        this.donut.selectAll("g.part").remove();
                        this.donut.selectAll("text.chiffre-central").remove();
                    }
                    var partDeTarte = this.donut.selectAll("g.part")
                        .data(pie(config.listeDonnees))
                        .enter()
                        .append("g")
                        .attr("transform", this.getTranslateText(this.width / 2, this.height / 2))
                        .each(function (arcDescriptor) {
                        arcDescriptor.outerRadius = 100;
                    })
                        .attr("class", "part");
                    partDeTarte.append("path")
                        .attr({
                        d: arc,
                        fill: function (data) {
                            return color(data.data.nom);
                        }
                    })
                        .on("mouseover", this.arcTween(105, 0, arc))
                        .on("mouseout", this.arcTween(100, 75, arc));
                    partDeTarte.append("text")
                        .transition()
                        .duration(200)
                        .attr("transform", function (data) {
                        return _this.getTranslateText((data.value <= 4) ?
                            arc.centroid(data).map(function (valeur) { return valeur * 3 / 2; }) :
                            arc.centroid(data));
                    })
                        .attr("class", "donut-text")
                        .attr("dy", ".4em")
                        .attr("text-anchor", "middle")
                        .style("fill", function (data) {
                        return (data.value <= 4) ? "black" : "white";
                    })
                        .style("display", function (data) {
                        //Pour ne pas afficher de pourcentage avec le donut Gris
                        if (data.value === Number.MAX_VALUE) {
                            return "none";
                        }
                    })
                        .text(function (data) {
                        return data.data.pourcentage ? data.data.pourcentage + "%" : "";
                    });
                    this.donut
                        .append("text")
                        .attr("transform", this.getTranslateText(this.width / 2, this.height / 2))
                        .style("fill", "#4F5563")
                        .attr("class", "chiffre-central")
                        .style("text-anchor", "middle")
                        .style("font-size", "3rem")
                        .append("tspan")
                        .attr("dy", "0.5ex")
                        .text(config.nombreClients);
                };
                /**
                 * @param valeurs
                 */
                CreationDonutService.prototype.getTranslateText = function () {
                    var valeurs = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        valeurs[_i - 0] = arguments[_i];
                    }
                    return "translate(" + valeurs.join(",") + ")";
                };
                /**
                 *
                 * @param outerRadius
                 * @param delay
                 * @param arc
                 */
                CreationDonutService.prototype.arcTween = function (outerRadius, delay, arc) {
                    return function () {
                        d3.select(this).transition().delay(delay).attrTween("d", function (datum) {
                            var i = d3.interpolate(datum.outerRadius, outerRadius);
                            return function (t) {
                                datum.outerRadius = i(t);
                                return arc(datum);
                            };
                        });
                    };
                };
                /**
                 *
                 * @param degrade
                 */
                CreationDonutService.prototype.getCouleurDegrade = function (degrade) {
                    switch (degrade) {
                        case DEGRADE_DONUT.BLEU:
                            return d3.scale.ordinal().range(["#3182bd", "#6baed6", "#9ecae1", "#c6dbef", "#007399", "#00cccc", "#545494"]);
                        case DEGRADE_DONUT.ROSE:
                            return d3.scale.ordinal().range(["#c34f73", "#d4d110", "#63ccc4", "#e45fd2", "#5870d2", "#e6a016", "#5fa262"]); //Couleurs fournies par N.W BDRL-1691
                        case DEGRADE_DONUT.GRIS:
                            return d3.scale.ordinal().range(["#cccccc"]);
                        default:
                            return d3.scale.category10();
                    }
                };
                /**
                 *
                 */
                CreationDonutService.prototype.viderDonut = function () {
                    this.donut = undefined;
                };
                CreationDonutService.CLASS_NAME = "CreationDonutService";
                CreationDonutService.logger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(CreationDonutService.CLASS_NAME);
                return CreationDonutService;
            }());
            Portefeuille.app.service(CreationDonutService.CLASS_NAME, CreationDonutService);
        })(LibrairieD3 = Services.LibrairieD3 || (Services.LibrairieD3 = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var LibrairieD3;
        (function (LibrairieD3) {
            "use strict";
            (function (DEGRADE_POURCENTAGE) {
                DEGRADE_POURCENTAGE[DEGRADE_POURCENTAGE["ORANGE"] = "ORANGE"] = "ORANGE";
                DEGRADE_POURCENTAGE[DEGRADE_POURCENTAGE["VERT"] = "VERT"] = "VERT";
                DEGRADE_POURCENTAGE[DEGRADE_POURCENTAGE["VIOLET"] = "VIOLET"] = "VIOLET";
                DEGRADE_POURCENTAGE[DEGRADE_POURCENTAGE["BLEU"] = "BLEU"] = "BLEU";
            })(LibrairieD3.DEGRADE_POURCENTAGE || (LibrairieD3.DEGRADE_POURCENTAGE = {}));
            var DEGRADE_POURCENTAGE = LibrairieD3.DEGRADE_POURCENTAGE;
            ;
            var CreationPourcentageService = (function () {
                /**
                 * Constructeur
                 */
                function CreationPourcentageService() {
                }
                /**
                 *
                 * @param id
                 */
                CreationPourcentageService.prototype.setWidthHeight = function (id) {
                    var element = d3.select("#" + id);
                    if (element.node()) {
                        this.width = element.node().getBoundingClientRect().width;
                        this.height = this.width;
                    }
                };
                /**
                 *
                 * @param data
                 * @param id
                 */
                CreationPourcentageService.prototype.creerPourcentage = function (data, id) {
                    this.setWidthHeight(id);
                    var listeCouleurs = this.getCouleurDegrade(data.degrade);
                    var valAngle = (data.nombreUn * 360) / 100;
                    var current = data.nombreUn;
                    var arc = this.creerArc((this.width - 40) / 2, ((this.width - 40) / 10), 0);
                    // Definir l'emplacement du SVG
                    var svg = this.initialiserSvg(id, this.width, this.height);
                    // Definir le fond graphique initiale du donut
                    var arrierePlan = this.CreerCheminPlein(svg, 0, "#e6f7ff", arc);
                    // Definir la valeur graphique du initiale donut
                    var visuelValeur = this.CreerCheminPlein(svg, 0, listeCouleurs[0], arc);
                    // Affichage de la valeur % au centre
                    var texteValeur = svg.append("text").
                        attr("dy", "0.5ex").
                        attr("text-anchor", "middle").
                        // TODO EA remplacer les sytles par des class
                        //attr("class", "xxxxxx").
                        style("font-size", "3rem").
                        style("font-weight", "bold").
                        style("fill", "#ffffff").
                        text(current + "%");
                    if (data.legende && data.legende.length > 0) {
                        var texteInititule = svg.append("text").
                            attr("dy", "0.5ex").
                            attr("y", this.height / 2 - 10).
                            attr("text-anchor", "middle").
                            // TODO EA remplacer les sytles par  des class
                            //attr("class", "xxxxxx").
                            style("font-size", "1rem").
                            style("font-weight", "bold").
                            style("fill", "#ffffff").
                            style("width", "auto").
                            style("white-space", "nowrap").
                            style("overflow", "hidden").
                            style("text-overflow", "ellipsis").
                            text(data.legende);
                        this.tronquerText(texteInititule);
                        this.genererTransitionCouleur(texteInititule, 1750, "#ffffff", "#000000");
                    }
                    this.AjouterMouvementArc(this.genererTransitionCouleur(arrierePlan, 1750, "#ffffff", "#e6f7ff"), 360, arc);
                    this.AjouterMouvementArc(this.genererTransitionCouleur(visuelValeur, 1750, "#ffffff", listeCouleurs[0]), valAngle, arc);
                    this.genererTransitionCouleur(texteValeur, 1750, "#ffffff", "#000000");
                };
                /**
                 * Convertir des degrées en radian
                 * @param degree
                 */
                CreationPourcentageService.convertirRadian = function (degree) {
                    return degree * (Math.PI / 180);
                };
                /**
                 *
                 * @param rayonExterne
                 * @param epaisseur
                 * @param angleInitial
                 */
                CreationPourcentageService.prototype.creerArc = function (rayonExterne, epaisseur, angleInitial) {
                    return d3.svg.arc().
                        innerRadius(rayonExterne).
                        outerRadius(rayonExterne - epaisseur).
                        startAngle(CreationPourcentageService.convertirRadian(angleInitial));
                };
                /**
                 *
                 * @param id
                 * @param largeur
                 * @param hauteur
                 */
                CreationPourcentageService.prototype.initialiserSvg = function (id, largeur, hauteur) {
                    return d3.select("#" + id).
                        append("svg:svg").
                        attr("viewBox", "0 0 " + largeur + " " + hauteur).
                        classed("svg-content", true).
                        append("g").
                        attr("transform", "translate(" + largeur / 2 + "," + hauteur / 2 + ")");
                };
                /**
                 *
                 * @param svg
                 * @param degree
                 * @param couleur
                 * @param arcModel
                 */
                CreationPourcentageService.prototype.CreerCheminPlein = function (svg, degree, couleur, arcModel) {
                    return svg.append("path").
                        datum({
                        endAngle: CreationPourcentageService.convertirRadian(degree)
                    }).
                        style("fill", couleur).
                        attr("d", arcModel);
                };
                /**
                 *
                 * @param svg
                 * @param duree
                 * @param couleurInit
                 * @param couleurFin
                 */
                CreationPourcentageService.prototype.genererTransitionCouleur = function (svg, duree, couleurInit, couleurFin) {
                    return svg.transition().duration(duree).styleTween("fill", function () {
                        return d3.interpolate(couleurInit, couleurFin);
                    });
                };
                /**
                 *
                 * @param transition
                 * @param degree
                 * @param arcModel
                 */
                CreationPourcentageService.prototype.AjouterMouvementArc = function (transition, degree, arcModel) {
                    return transition.call(this.arcTween, arcModel, CreationPourcentageService.convertirRadian(degree));
                };
                /**
                 *
                 * @param transition
                 * @param arc
                 * @param newAngle
                 */
                CreationPourcentageService.prototype.arcTween = function (transition, arc, newAngle) {
                    transition.attrTween("d", function (d) {
                        var interpolate = d3.interpolate(d.endAngle, newAngle);
                        return function (t) {
                            d.endAngle = interpolate(t);
                            return arc(d);
                        };
                    });
                };
                /**
                 *
                 * @param pourcent
                 * @param listeCouleurs
                 * @param id
                 */
                CreationPourcentageService.prototype.addGradient = function (pourcent, listeCouleurs, id) {
                    var gradient = pourcent
                        .append("linearGradient")
                        .attr("id", "gradient" + id)
                        .attr("x1", "0%")
                        .attr("y1", "0%")
                        .attr("x2", "100%")
                        .attr("y2", "100%")
                        .attr("spreadMethod", "pad");
                    gradient.append("stop")
                        .attr("offset", "0%")
                        .attr("stop-color", listeCouleurs[0])
                        .attr("stop-opacity", 1);
                    gradient.append("stop")
                        .attr("offset", "100%")
                        .attr("stop-color", listeCouleurs[1])
                        .attr("stop-opacity", 1);
                };
                /**
                 * Permet de tronquer le texte en D3 en ajoutant ...
                 */
                CreationPourcentageService.prototype.tronquerText = function (self) {
                    var _this = this;
                    self.each(function () {
                        var node = self.node();
                        var textLength = node.getComputedTextLength();
                        var text = self.text();
                        var padding = 0;
                        while (textLength > (_this.width - 2 * padding) && text.length > 0) {
                            text = text.slice(0, -1);
                            self.text(text + "...");
                            textLength = node.getComputedTextLength();
                        }
                    });
                };
                /**
                 *
                 * @param degrade
                 */
                CreationPourcentageService.prototype.getCouleurDegrade = function (degrade) {
                    switch (degrade) {
                        case DEGRADE_POURCENTAGE.BLEU:
                            return ["#0077b3", "#0077b3"];
                        case DEGRADE_POURCENTAGE.VERT:
                            return ["#4DDBDB", "#5BEE81"];
                        case DEGRADE_POURCENTAGE.VIOLET:
                            return ["#7670DB", "#AE58B8"];
                        default:
                            return ["#FF37BB", "#FF9A23"];
                    }
                };
                CreationPourcentageService.CLASS_NAME = "CreationPourcentageService";
                return CreationPourcentageService;
            }());
            Portefeuille.app.service(CreationPourcentageService.CLASS_NAME, CreationPourcentageService);
        })(LibrairieD3 = Services.LibrairieD3 || (Services.LibrairieD3 = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../constantes/inject-constantes.ts" />
/**
 * Controleur pour la directive pf-tuile-panier
 * @module portefeuille.Controleurs
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Controleurs;
    (function (Controleurs) {
        "use strict";
        var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
        /**
         * Classe du controleur
         */
        var PfTuilePanierControleur = (function () {
            /**
             * Constructeur
             */
            function PfTuilePanierControleur($scope, $element, modalePaniersService) {
                var _this = this;
                this.$scope = $scope;
                this.$element = $element;
                this.modalePaniersService = modalePaniersService;
                /**
                 * Variable contenant la méthode a appelé avant que le dragStart commence
                 */
                this.dragStartBeforeEvent = function () {
                    _this.modalePaniersService.desactiverDropPanier(); // on ne peut pas dropper une tuile panier dans le panier global
                    //if (!this.tuilePanierSettings.estEnEdition) {
                    if (!_this.tuilePanierSettings.estEnEdition || _this.modalePaniersService.getEstEditionPanier()) {
                        _this.modalePaniersService.afficherDropPoubelle();
                        _this.modalePaniersService.activerDropTuilesPanier(_this.listeTuilePanierSettings);
                    }
                };
                /**
                 * Variable contenant la méthode a appelé avant que le dragEnd commence
                 */
                this.dragEndBeforeEvent = function () {
                    _this.modalePaniersService.cacherDropPoubelle();
                    _this.modalePaniersService.desactiverDropTuilesPanier(_this.listeTuilePanierSettings);
                };
                /**
                 * Variable contenant la méthode a appelé lorsqu'un indicateur est déposé sur un indicateur du panier
                 */
                this.indicateurPanierDeposeEvent = function (tuileSettings) {
                    // On desactive les drops des tuiles du panier
                    _this.modalePaniersService.desactiverDropTuilesPanier(_this.listeTuilePanierSettings);
                    if (tuileSettings !== _this.tuilePanierSettings) {
                        // Récupération de l'index de la tuile de drop
                        var indexIndicateurDrop = _.findIndex(_this.listeTuilePanierSettings, function (tuilePanier) {
                            return tuilePanier.indicateur.indicateur.code === _this.tuilePanierSettings.indicateur.indicateur.code;
                        });
                        if (tuileSettings.dropSettings) {
                            // Récupération de l'index de la tuile à déplacer
                            var indexIndicateurADeplacer = _.findIndex(_this.listeTuilePanierSettings, function (tuilePanier) {
                                return tuilePanier.indicateur.indicateur.code === tuileSettings.indicateur.indicateur.code;
                            });
                            // Interchangement des tuiles
                            _this.listeTuilePanierSettings[indexIndicateurDrop] = tuileSettings;
                            _this.listeTuilePanierSettings[indexIndicateurADeplacer] = _this.tuilePanierSettings;
                            //this.$scope.$applyAsync(); 
                            _this.$scope.$apply();
                        }
                        else {
                            // Changement de l'état de l'indicateur
                            tuileSettings.indicateur.choisi = true;
                            // Création de la nouvelle tuile panier
                            var tuilePanierSettings = {};
                            tuilePanierSettings.id = _this.modalePaniersService.genererIdentifiantAleatoire();
                            tuilePanierSettings.indicateur = tuileSettings.indicateur;
                            _this.listeTuilePanierSettings.splice(indexIndicateurDrop, 0, tuilePanierSettings);
                            // On desactive le drop panier
                            _this.modalePaniersService.desactiverDropPanier();
                            // Mise à jour du message d'avertissement de modification de filtre
                            _this.modalePaniersService.afficherMessageAvertissementFiltre(_this.listeFiltresRelationEco, _this.listeFiltresClients, _.pluck(_this.listeTuilePanierSettings, "indicateur"));
                            // Desactivation du drag sur les tuiles du catalogue si le nombre d'indicateur max est atteint
                            if (_this.listeTuilePanierSettings.length === Portefeuille.Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {
                                _.forEach(_this.listeTuileCatalogueSettings, function (tuile) {
                                    tuile.dragSettings.desactiverDrag();
                                });
                            }
                            // Rafraichir listeTuileCatalogueSettings
                            _this.modalePaniersService.rafraichirListeTuileCatalogueSettings();
                        }
                    }
                };
                this.initialiser();
            }
            /**
             * Méthode permettant d'initialiser le composant
             * @returns {void}
             */
            PfTuilePanierControleur.prototype.initialiser = function () {
                PfTuilePanierControleur.logger.info(">>> Appel de la méthode : PfTuilePanierControleur.initialiser <<<");
                this.configTuile = {};
                //this.configTuile.tuileHandler = null;
                this.configTuile.taille = Portefeuille.Constantes.ModalePaniers.TUILE_PANIER_TAILLE;
                this.configTuile.typeMarquage = Portefeuille.Constantes.ModalePaniers.TUILE_TYPE_MARQUAGE_TEXTE;
                // si marquage, on a le TAG en haut.
                // si non parquage, on a pas le TAG, mais le texte remonte d'une ligne
                if (!this.tuilePanierSettings.indicateur.indicateur.estUniquementVueClients) {
                    this.configTuile.typeMarquage = Portefeuille.Constantes.ModalePaniers.TUILE_CATALOGUE_TYPE_MARQUAGE_AUCUN;
                }
                // Initialisation du dragSettings et dropSettings
                this.tuilePanierSettings.dragSettings = this.modalePaniersService.creerDragSettings(this.tuilePanierSettings);
                this.tuilePanierSettings.dropSettings = this.modalePaniersService.creerDropSettings(this.indicateurPanierDeposeEvent);
                // Ajout des fonctions des événements drag
                this.tuilePanierSettings.dragSettings.dragStartBeforeEvent = this.dragStartBeforeEvent;
                this.tuilePanierSettings.dragSettings.dragEndBeforeEvent = this.dragEndBeforeEvent;
                this.$element.ready(this.modalePaniersService.rendreCompatibleTuilesAvecDragAndDrop);
            };
            /**
             * Méthode permettant de gérer l'affichage ou non du marquage de la tuile
             * @returns {boolean}
             */
            PfTuilePanierControleur.prototype.afficherMarquage = function () {
                // poue avoiur la ligne verticale tout le temps, il faut afficher le marquage
                // donc toujours true
                return this.tuilePanierSettings.indicateur.indicateur.estUniquementVueClients ? true : true;
            };
            /**
             * Méthode permettant de gérer le nom du marquage de la tuile
             * @returns {string}
             */
            PfTuilePanierControleur.prototype.nomMarquage = function () {
                return this.tuilePanierSettings.indicateur.indicateur.estUniquementVueClients ?
                    Portefeuille.Constantes.ModalePaniers.TUILE_NOM_MARQUAGE_CLIENT_PROSPECT :
                    Portefeuille.Constantes.ModalePaniers.TUILE_NOM_MARQUAGE_VIDE;
            };
            /**
             * Méthode permettant de gérer la couleur de la tuile
             * @returns {string}
             */
            PfTuilePanierControleur.prototype.couleur = function () {
                return this.tuilePanierSettings.indicateur.indicateur.estUniquementVueClients ?
                    Portefeuille.Constantes.ModalePaniers.TUILE_COULEUR_ROUGE :
                    Portefeuille.Constantes.ModalePaniers.TUILE_COULEUR_SOMBRE;
            };
            /**
             * Méthode permettant de gérer le click sur la poubelle d'une tuile
             * @returns {void}
             */
            PfTuilePanierControleur.prototype.supprimer = function () {
                this.modalePaniersService.supprimerIndicateurPanier(this.tuilePanierSettings, this.listeTuileCatalogueSettings, this.listeTuilePanierSettings, this.listeFiltresClients, this.listeFiltresRelationEco);
            };
            /**
             * Méthode permettant de gérer le click sur la flèche gauche d'une tuile
             * @returns {void}
             */
            PfTuilePanierControleur.prototype.deplacerAGauche = function () {
                var oldIndex = this.listeTuilePanierSettings.indexOf(this.tuilePanierSettings);
                var newIndex = oldIndex - 1;
                if (newIndex > -1) {
                    var item = this.listeTuilePanierSettings.splice(oldIndex, 1)[0];
                    this.listeTuilePanierSettings.splice(newIndex, 0, item);
                }
            };
            /**
             * Méthode permettant de gérer le click sur la flèche droite d'une tuile
             * @returns {void}
             */
            PfTuilePanierControleur.prototype.deplacerADroite = function () {
                var oldIndex = this.listeTuilePanierSettings.indexOf(this.tuilePanierSettings);
                var newIndex = oldIndex + 1;
                if (newIndex < this.listeTuilePanierSettings.length) {
                    var item = this.listeTuilePanierSettings.splice(oldIndex, 1)[0];
                    this.listeTuilePanierSettings.splice(newIndex, 0, item);
                }
            };
            /**
             * Méthode permettant d'afficher ou non la fléche gauche
             * @returns {boolean}
             */
            PfTuilePanierControleur.prototype.afficherFlecheGauche = function () {
                if (this.tuilePanierSettings &&
                    this.tuilePanierSettings.estEnEdition &&
                    this.listeTuilePanierSettings) {
                    return (this.listeTuilePanierSettings.indexOf(this.tuilePanierSettings) === 0) ? false : true;
                }
                else {
                    return false;
                }
            };
            /**
             * Méthode permettant d'afficher ou non la fléche droite
             * @returns {boolean}
             */
            PfTuilePanierControleur.prototype.afficherFlecheDroite = function () {
                if (this.tuilePanierSettings &&
                    this.tuilePanierSettings.estEnEdition &&
                    this.listeTuilePanierSettings) {
                    var listeTuile = this.listeTuilePanierSettings;
                    return (listeTuile.indexOf(this.tuilePanierSettings) === listeTuile.length - 1) ? false : true;
                }
                else {
                    return false;
                }
            };
            Object.defineProperty(PfTuilePanierControleur.prototype, "famille", {
                /**
                 * Retour le libelle famille sur de la tuile
                 * @return {string} libelle de la famille
                 */
                get: function () {
                    return String.fromCharCode(160, 160, 160) +
                        this.tuilePanierSettings.indicateur.indicateur.famille.toString();
                },
                enumerable: true,
                configurable: true
            });
            PfTuilePanierControleur.CLASS_NAME = "PfTuilePanierControleur";
            PfTuilePanierControleur.logger = loggerClass(PfTuilePanierControleur.CLASS_NAME);
            //Injection des dependances
            PfTuilePanierControleur.$inject = [
                Portefeuille.Constantes.Inject.Angular.$scope,
                Portefeuille.Constantes.Inject.Angular.$element,
                Portefeuille.Constantes.Inject.Services.modalePaniersService
            ];
            return PfTuilePanierControleur;
        }());
        Controleurs.PfTuilePanierControleur = PfTuilePanierControleur;
        // Déclaration du controleur
        Portefeuille.app.controller("PfTuilePanierControleur", PfTuilePanierControleur);
    })(Controleurs = Portefeuille.Controleurs || (Portefeuille.Controleurs = {}));
})(Portefeuille || (Portefeuille = {}));

/**
 * Directive pf-tuile-panier
 * @module portefeuille.Directives
 * @author S0078068 (Yannis Vessereau)
 */
var Portefeuille;
(function (Portefeuille) {
    var Directives;
    (function (Directives) {
        "use strict";
        /**
         * Méthode permettant de déclarer la directive
         * @return {ng.IDirective} La directive créée
         */
        function mwPfTuilePanier() {
            return {
                restrict: "E",
                templateUrl: "typescript/directives/pf-tuile-panier/pf-tuile-panier-vue.html",
                controller: "PfTuilePanierControleur",
                controllerAs: "pfTuilePanierCtrl",
                bindToController: true,
                scope: {
                    tuilePanierSettings: "=",
                    listeTuileCatalogueSettings: "=",
                    listeTuilePanierSettings: "=",
                    listeFiltresClients: "=",
                    listeFiltresRelationEco: "="
                }
            };
        }
        Directives.mwPfTuilePanier = mwPfTuilePanier;
        // Déclaration de la directive
        Portefeuille.app.directive("mwPfTuilePanier", mwPfTuilePanier);
    })(Directives = Portefeuille.Directives || (Portefeuille.Directives = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Utils;
        (function (Utils) {
            "use strict";
            var ApplicationUtils = (function () {
                function ApplicationUtils() {
                }
                /**
                 *
                 */
                ApplicationUtils.recupererNouvelleSelection = function () {
                    return {
                        "estDefaut": false,
                        "nom": "",
                        listeChoixIndicateurs: []
                    };
                };
                /**
                 * Méthode de vérification sur une string pour voir si celle ci correspond à un nom par défaut de création de sélection
                 * @param nomSelection
                 */
                ApplicationUtils.estOkNomSelection = function (nomSelection) {
                    for (var _i = 1; _i <= Portefeuille.Constantes.Application.LIMITE_NB_PANIERS; _i++) {
                        var nomTest = Portefeuille.Constantes.Application.NOM_PANIER_CREATION + " " + _i;
                        if (nomSelection.indexOf(nomTest) === 0) {
                            return false;
                        }
                    }
                    return true;
                };
                ApplicationUtils.recupererPanierDefaut = function (listePanier) {
                    var panierReponse;
                    if (listePanier.length === 1) {
                        panierReponse = listePanier[0];
                        panierReponse.estDefaut = true;
                    }
                    else {
                        _.find(listePanier, function (panier) {
                            if (panier.estDefaut) {
                                panierReponse = panier;
                                return;
                            }
                        });
                    }
                    return panierReponse;
                };
                /**
                 * Méthode retournant le pourcentage représenté par "valeur" par rapport à "valeurMax".
                 * @param valeurMax
                 * @param valeur
                 * @returns {number}
                 */
                ApplicationUtils.calculerHauteurRelativeColonne = function (valeurMax, valeur, isPresenceSousValeur) {
                    var hauteurMin = 1;
                    var hauteur;
                    hauteur = (valeurMax && valeurMax > 0 && valeur) ? 100 * valeur / valeurMax : hauteurMin;
                    return (hauteur < hauteurMin) ? hauteurMin : hauteur;
                };
                /**
                 * Méthode retournant le pourcentage représenté par "valeur" par rapport à "valeurMax".
                 * @param valeurMax
                 * @param valeur
                 * @returns {number}
                 */
                ApplicationUtils.calculerHauteurRelativeColonneSousValeur = function (valeurMax, valeur, sousValeur) {
                    var hauteurMin = 15;
                    var hauteurMax = 85;
                    var hauteurCalculee = hauteurMin;
                    valeur = sousValeur;
                    if (valeurMax && valeurMax > 0 && valeur) {
                        hauteurCalculee = 100 * valeur / valeurMax;
                        //on verifie que la hauteur de la colonne client soit au maximum et au minimum
                        if (hauteurCalculee < hauteurMin) {
                            hauteurCalculee = hauteurMin;
                        }
                        else if (hauteurCalculee > hauteurMax) {
                            hauteurCalculee = hauteurMax;
                        }
                    }
                    return hauteurCalculee;
                };
                /**
                 * Méthode retournant le pourcentage représenté par "valeur" par rapport à "valeurMax".
                 * @param valeurMax
                 * @param valeur
                 * @returns {number}
                 */
                ApplicationUtils.calculerHauteurRelativeColonneValeur = function (valeurMax, valeur, sousValeur) {
                    var hauteurMin = 1;
                    var hauteurMax = 85;
                    valeur = valeur - sousValeur;
                    var hauteurCalculee = hauteurMin;
                    if (!sousValeur) {
                        sousValeur = 0;
                    }
                    if (valeurMax && valeurMax > 0 && valeur) {
                        hauteurCalculee = 100 * valeur / valeurMax;
                        //on verifie que la hauteur de la colonne client soit au maximum et au minimum
                        if (hauteurCalculee < hauteurMin) {
                            hauteurCalculee = hauteurMin;
                        }
                        else if (hauteurCalculee > hauteurMax) {
                            hauteurCalculee = hauteurMax;
                        }
                    }
                    return hauteurCalculee;
                };
                /**
                 * Permet de calculer la hauteur de la colonne client actif (par rapport au nombre de client actif)
                 * @param valeurMax
                 * @param nombreClient
                 * @param nombreClientActif
                 */
                ApplicationUtils.calculerHauteurRelativeColonneClient = function (valeurMax, nombreClient, nombreClientActif) {
                    var hauteurMin = 1;
                    var hauteurMax = 100;
                    var hauteurCalculee = hauteurMin;
                    if (valeurMax && valeurMax > 0 && nombreClient) {
                        hauteurCalculee = 100 * nombreClient / valeurMax;
                        //on verifie que la hauteur de la colonne client soit au mmaximum a 95% et au minimum a 5%
                        if (nombreClientActif >= nombreClient && hauteurCalculee > hauteurMin) {
                            hauteurCalculee = hauteurMin;
                        }
                        else if (hauteurCalculee > hauteurMax) {
                            hauteurCalculee = hauteurMax;
                        }
                    }
                    return hauteurCalculee;
                };
                /**
                 * Permet de calculer la hauteur de la colonne client actif (par rapport au nombre de client total)
                 * @param valeurMax
                 * @param nombreClientActif
                 * @param nombreClient
                 */
                ApplicationUtils.calculerHauteurRelativeColonneClientActif = function (valeurMax, nombreClientActif, nombreClient) {
                    var hauteurMin = 0;
                    var hauteurMax = 100;
                    var hauteurCalculee = hauteurMin;
                    if (valeurMax && valeurMax > 0 && nombreClientActif) {
                        hauteurCalculee = 100 * nombreClientActif / valeurMax;
                        //on verifie que la hauteur de la colonne client actif soit au mmaximum a 95% et au minimum a 5%
                        if (hauteurCalculee > hauteurMax) {
                            hauteurCalculee = hauteurMax;
                        }
                    }
                    return hauteurCalculee;
                };
                /**
                 *
                 * @param data
                 */
                ApplicationUtils.getPortefeuilleDepuisDonneeSignifiante = function (data) {
                    if (data) {
                        var reponse = {};
                        if (data.identifiantPortefeuille) {
                            reponse.id = data.identifiantPortefeuille;
                            reponse.libelle = data.libellePortefeuille;
                        }
                        else {
                            // reponse.id = 0;
                            reponse.id = +data.codeSuiviComplementaire;
                            reponse.libelle = data.libelleSuiviComplementaire ? data.libelleSuiviComplementaire : data.codeSuiviComplementaire + " *pb lib*";
                            reponse.codeSuiviParComplementaire = data.codeSuiviComplementaire;
                        }
                        reponse.estAffiche = false;
                        reponse.listeRelations = [];
                        return reponse;
                    }
                    else {
                        return undefined;
                    }
                };
                /**
                 *
                 * @param data
                 */
                ApplicationUtils.getPortefeuilleDepuisListePortefeuille = function (data) {
                    if (data) {
                        var reponse = {};
                        reponse.id = data.identifiantPortefeuille;
                        reponse.libelle = data.libellePortefeuille;
                        reponse.estAffiche = false;
                        reponse.idAgent = data.identifiantEdsSuiviPortefeuille;
                        reponse.fonctionAgent = data.libelleFonction;
                        reponse.nomPrenonAgent = data.libelleCourtEDS;
                        reponse.listeRelations = [];
                        return reponse;
                    }
                    else {
                        return undefined;
                    }
                };
                /**
                 *
                 * @param indicRest
                 */
                ApplicationUtils.getIndicateur = function (indicRest) {
                    var reponse = {};
                    reponse.code = indicRest.code;
                    reponse.dateMaj = moment(indicRest.dateMaj, "DD/MM/YYYY").toDate();
                    reponse.tendance = indicRest.tendance;
                    // console.log("---> code : ", reponse.code);
                    switch (reponse.code) {
                        case Portefeuille.Enum.Indicateur.CODE.CLIENTPROSPECT.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.CLIENTPROSPECT.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.CLIENTPROSPECT.toString();
                            reponse.valeur = Utils.DataUtils.setStrToClientProspectVide(indicRest.valeur);
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.ACTIF.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.ACTIF.toString();
                            reponse.valeur = Utils.DataUtils.setStrToActifInactif(indicRest.valeur);
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.EQUIPE.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.NON_EQUIPE.toString();
                            reponse.valeur = Utils.DataUtils.setStrToSansContrat(indicRest.valeur);
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.LEADER.toString():
                            // XXXX
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.LEADER.toString();
                            reponse.valeur = Utils.DataUtils.setStrToLeader(indicRest.valeur);
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.CA_N.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.CA_N.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.MONTANT;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.CA_N_MOINS_1.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.CA_N_MOINS_1.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.MONTANT;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.MARCHE.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.MARCHE.toString();
                            reponse.valeur = indicRest.valeur ? indicRest.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.SEG_RELATIONNELLE.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.SEG_RELATIONNELLE.toString();
                            reponse.valeur = indicRest.valeur ? indicRest.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.DATE_DERNIER_ENTRETIEN.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.DATE_DERNIER_ENTRETIEN.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.DATE_DERNIER_ENTRETIEN.toString();
                            reponse.valeur = indicRest.valeur ? indicRest.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, "DD/MM/YYYY").toDate() : undefined;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.DATE;
                            reponse.icone = Portefeuille.Enum.Indicateur.ICONE.DATE_DERNIER_ENTRETIEN.toString();
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.DATE_DERNIER_RDV.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.DATE_DERNIER_RDV.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.DATE_DERNIER_RDV.toString();
                            reponse.valeur = indicRest.valeur ? indicRest.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, "DD/MM/YYYY").toDate() : undefined;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.DATE;
                            reponse.icone = Portefeuille.Enum.Indicateur.ICONE.DATE_DERNIER_RDV.toString();
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.DATE_PROCHAIN_RDV.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.DATE_PROCHAIN_RDV.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.DATE_PROCHAIN_RDV.toString();
                            reponse.valeur = indicRest.valeur ? indicRest.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, "DD/MM/YYYY").toDate() : undefined;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.DATE;
                            reponse.icone = Portefeuille.Enum.Indicateur.ICONE.DATE_PROCHAIN_RDV.toString();
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.NB_RDV_ANNEE_EN_COURS.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.NB_RDV_ANNEE_EN_COURS.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.NB_RDV_ANNEE_EN_COURS.toString() + moment().format("YYYY");
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.NOMBRE;
                            reponse.icone = Portefeuille.Enum.Indicateur.ICONE.NB_RDV_ANNEE_EN_COURS.toString();
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.NB_RDV_12_MOIS_GLISSANTS.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.NB_RDV_12_MOIS_GLISSANTS.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.NB_RDV_12_MOIS_GLISSANTS.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.NOMBRE;
                            reponse.icone = Portefeuille.Enum.Indicateur.ICONE.NB_RDV_12_MOIS_GLISSANTS.toString();
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.PROCHAINE_REVISION.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.PROCHAINE_REVISION.toString();
                            reponse.valeur = indicRest.valeur ? indicRest.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, "DD/MM/YYYY").toDate() : undefined;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.DATE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.NOTE_BALE2.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.NOTE_BALE2.toString();
                            reponse.valeur = indicRest.valeur ? indicRest.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.PNB_3112.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.PNB_3112.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.PNB_3112.toString() + moment().subtract(1, "year").format("YYYY");
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.MONTANT;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.PNB_N.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.PNB_N.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.PNB_N.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.MONTANT;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.PNB_N_MOINS_1.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.PNB_N_MOINS_1.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.PNB_N_MOINS_1.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.MONTANT;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.REV_DATE_DERNIERE_REVUE.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.REV_DATE_DERNIERE_REVUE.toString();
                            reponse.valeur = indicRest.valeur ? indicRest.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, "DD/MM/YYYY").toDate() : undefined;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.DATE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.REV_NB_SSFAMILLES_PROPOSE.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.REV_NB_SSFAMILLES_PROPOSE.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.REV_NB_SSFAMILLES_PROPOSE.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.NOMBRE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.REV_VALIDEE_PAR.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.REV_VALIDEE_PAR.toString();
                            reponse.valeur = indicRest.valeur ? Utils.DataUtils.formatterPascaleCase(indicRest.valeur) : null;
                            reponse.valeur = reponse.valeur ? reponse.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.FLUX_CREDITEURS_N.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.FLUX_CREDITEURS_N.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.MONTANT;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.FLUX_CREDITEURS_N_MOINS_1.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.FLUX_CREDITEURS_N_MOINS_1.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.MONTANT;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.FLUX_DEBITEURS_N.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.FLUX_DEBITEURS_N.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.MONTANT;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.FLUX_DEBITEURS_N_MOINS_1.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.FLUX_DEBITEURS_N_MOINS_1.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.MONTANT;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.POTENTIEL_PROSPECT.toString();
                            reponse.valeur = ApplicationUtils.formaterPotentielProspect(indicRest.valeur);
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.NB_AFFAIRES_EN_COURS.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.NB_AFFAIRES_EN_COURS.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.NB_AFFAIRES_EN_COURS.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.NOMBRE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODEREL.SEG_RELATIONNELLE_GROUPE.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.SEG_RELATIONNELLE_GROUPE.toString();
                            reponse.valeur = indicRest.valeur ? this.getLibelleSegmentationRelationnelle(indicRest.valeur) : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.NB_APPETENCES.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.NB_APPETENCES.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.NB_APPETENCES.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.NOMBRE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.NB_PROPOSITIONS_EN_COURS.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.NB_PROPOSITIONS_EN_COURS.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.NB_PROPOSITIONS_EN_COURS.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.NOMBRE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODEREL.PART_ENGAG.toString():
                        case Portefeuille.Enum.Indicateur.CODE.PART_ENGAG.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.PART_ENGAG.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.POURCENT;
                            break;
                        // NOUVEL INDICATEUR conversion indicateur REST en Modeles.Application.IIndicateur
                        case Portefeuille.Enum.Indicateur.CODE.SCORE_ACTIVATION.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.SCORE_ACTIVATION.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.NOMBRE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.SCORE_APPETENCE.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.SCORE_APPETENCE.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.NOMBRE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.SCORE_DEFAILLANCE.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.SCORE_DEFAILLANCE.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.NOMBRE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.TOP_CC.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.TOP_CC.toString();
                            reponse.valeurNumber = ApplicationUtils.ValeurNumberTopCC(indicRest.valeur);
                            reponse.valeur = ApplicationUtils.formaterTopCC(indicRest.valeur);
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.PART_FLUX_CONFIES_CRED.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.PART_FLUX_CONFIES_CRED.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.POURCENT;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.PART_FLUX_CONFIES_DEB.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.PART_FLUX_CONFIES_DEB.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.POURCENT;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT.toString();
                            reponse.valeur = indicRest.valeur ? indicRest.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, "DD/MM/YYYY").toDate() : undefined;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.DATE;
                            break;
                        // PREMIER_EQUIPEMENT_TAG ne doit plus être proposé dansles filtres.
                        case Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT_TAG.toString();
                            reponse.valeur = indicRest.valeur ? indicRest.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, "DD/MM/YYYY").toDate() : undefined;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.DATE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TEXTE.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT_TEXTE.toString();
                            reponse.valeur = indicRest.valeur ? indicRest.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.OBJECTIF_FLUX.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.OBJECTIF_FLUX.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.POURCENT;
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.ENCOURS_BDF.toString():
                        case Portefeuille.Enum.Indicateur.CODEREL.ENCOURS_BDF.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.ENCOURS_BDF.toString();
                            reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.MONTANT;
                            // console.log("---> encours BDF reponse : ", reponse);
                            break;
                        case Portefeuille.Enum.Indicateur.CODE.BEGACLI.toString():
                            reponse.intitule = Portefeuille.Enum.Indicateur.INTITULE.BEGACLI.toString();
                            reponse.valeur = indicRest.valeur ? indicRest.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.BEGACLI;
                            // console.log("---> begacli reponse : ", reponse);
                            break;
                        default:
                            reponse.intitule = "";
                            reponse.valeur = indicRest.valeur ? indicRest.valeur : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                            reponse.typeIndicateur = Portefeuille.Enum.Indicateur.TYPE.TEXTE;
                            break;
                    }
                    return reponse;
                };
                /**
                 *
                 */
                ApplicationUtils.formaterPotentielProspect = function (valeur) {
                    var valeurFormater;
                    if (valeur === undefined || valeur === null || valeur === "0") {
                        valeurFormater = Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                    }
                    else {
                        valeurFormater = valeur + " " + "étoile" + ((valeur !== "1") ? "s" : "");
                    }
                    return valeurFormater;
                };
                /**
                 * 23/02/2022 Top_CC
                 */
                ApplicationUtils.formaterTopCC = function (valeur) {
                    // Valeur par défaut = Blanc
                    var valeurFormater = Portefeuille.Constantes.Application.LIBELLE_TOP_CC_BLANC;
                    _.forEach(Portefeuille.Constantes.Tableau.VALEUR_POSSIBLE_TOP_CC, function (libelle) {
                        if (valeur[0] === libelle[0]) {
                            valeurFormater = libelle;
                        }
                    });
                    return valeurFormater;
                };
                /**
                 * 23/02/2022 : Mettre dans valeurNumber l'index de la valeur TOP CC du tableau constant
                 */
                ApplicationUtils.ValeurNumberTopCC = function (valeur) {
                    var valeurNumber = Portefeuille.Constantes.Tableau.VALEUR_POSSIBLE_TOP_CC.indexOf(Portefeuille.Constantes.Application.LIBELLE_TOP_CC_BLANC);
                    _.forEach(Portefeuille.Constantes.Tableau.VALEUR_POSSIBLE_TOP_CC, function (libelle) {
                        if (valeur[0] === libelle[0]) {
                            valeurNumber = Portefeuille.Constantes.Tableau.VALEUR_POSSIBLE_TOP_CC.indexOf(libelle);
                        }
                    });
                    return valeurNumber;
                };
                ApplicationUtils.getLibelleSegmentationRelationnelle = function (codeSeg) {
                    this.segmentationsBDR.forEach(function (donnee) {
                        if (donnee.CODLTS === "BM" &&
                            donnee.CODLST === codeSeg) {
                            codeSeg = donnee.LIDLSG;
                        }
                    });
                    return codeSeg;
                };
                /**
                 *
                 * @param statsPtf
                 */
                ApplicationUtils.getStatsPortefeuilleAppDepuisRest = function (statsPtf) {
                    var statsApp = {};
                    if (!statsPtf) {
                        return undefined;
                    }
                    if (statsPtf.portefeuilleRdv) {
                        statsApp.nombreClients = statsPtf.portefeuilleRdv.nombreClients;
                        statsApp.nombreClientsActifs = statsPtf.portefeuilleRdv.nombreClientsActifs;
                        statsApp.nombreClientsPMEESI = statsPtf.portefeuilleRdv.nombreClientsTypePmeEsi;
                        statsApp.nombreClientsPEetPEES = statsPtf.portefeuilleRdv.nbClientsPePees;
                        statsApp.nombreClientsMEetMEES = statsPtf.portefeuilleRdv.nbClientsMeMees;
                        statsApp.nombreClientsGEetGEES = statsPtf.portefeuilleRdv.nbClientsGeGees;
                        statsApp.nombreClientsPro = statsPtf.portefeuilleRdv.nombreClientsTypeProEi;
                        statsApp.nombreClientsAutres = statsPtf.portefeuilleRdv.nombreClientsTypeAutre;
                        statsApp.nombreProspects = statsPtf.portefeuilleRdv.nombreProspects;
                        statsApp.nombreClientsAvecProduitService = statsPtf.portefeuilleRdv.nbClientsAvecProduitService;
                        statsApp.nombreClientsSansContratEtProspect = statsPtf.portefeuilleRdv.nbClientsSansContratEtProspect;
                        statsApp.nombreRelations = statsPtf.portefeuilleRdv.nombreRelationsEconomiques;
                        statsApp.nombreRdvProspectAnneeCivile = statsPtf.portefeuilleRdv.nbRdvProspectRealiseAnneeCivile;
                        statsApp.nombreRdvProspectAnneeEnCours = statsPtf.portefeuilleRdv.nbProspectsVusAnneeEncours;
                        statsApp.nombreRdvRelationEcoClient = statsPtf.portefeuilleRdv.nbRelEcoClientVuesAnneeEncours;
                        statsApp.rdvTauxVisite = statsPtf.portefeuilleRdv.tauxDeVisite;
                        statsApp.nombreRdvClientAnneeEnCours = statsPtf.portefeuilleRdv.nbRdvClient; //BDRL-1636
                        statsApp.nombreClientsNonEquipe = statsPtf.portefeuilleRdv.nbClientsNonEquipe;
                    }
                    if (statsPtf.listeSegmentationRelationnellePmeEsi && statsPtf.listeSegmentationRelationnellePmeEsi.length > 0) {
                        statsApp.listeSegmentationsPMEESI = [];
                        _.forEach(statsPtf.listeSegmentationRelationnellePmeEsi, function (seg) {
                            var segApp = {};
                            segApp.code = seg.codeSegmentation;
                            segApp.libelle = seg.libelleSegmentation;
                            segApp.pourcentage = seg.pourcentageNombreDeClients;
                            statsApp.listeSegmentationsPMEESI.push(segApp);
                        });
                    }
                    //BDRL-1648 : Ajout Segmentation Pro
                    if (statsPtf.listeSegmentationRelationnellePro && statsPtf.listeSegmentationRelationnellePro.length > 0) {
                        statsApp.listeSegmentationsPro = this.agglomererSegmentationPro(statsPtf.listeSegmentationRelationnellePro);
                    }
                    return statsApp;
                };
                ApplicationUtils.getStatsRentabiliteAppDepuisRest = function (statsRest) {
                    var statsApp;
                    if (statsRest) {
                        statsApp = {};
                        statsApp.dateDebPnb12DerMoisGlissN = Utils.DataUtils.strDateRestToDate(statsRest.dateDebPnb12DerMoisGlissN);
                        statsApp.dateDebPnb12DerMoisGlissNMoins1 = Utils.DataUtils.strDateRestToDate(statsRest.dateDebPnb12DerMoisGlissNMoins1);
                        statsApp.dateDebPnb3112AnneeNMoins1 = Utils.DataUtils.strDateRestToDate(statsRest.dateDebPnb3112AnneeNMoins1);
                        statsApp.dateFinPnb12DerMoisGlissN = Utils.DataUtils.strDateRestToDate(statsRest.dateFinPnb12DerMoisGlissN);
                        statsApp.dateFinPnb12DerMoisGlissNMoins1 = Utils.DataUtils.strDateRestToDate(statsRest.dateFinPnb12DerMoisGlissNMoins1);
                        statsApp.dateFinPnb3112AnneeNMoins1 = Utils.DataUtils.strDateRestToDate(statsRest.dateFinPnb3112AnneeNMoins1);
                        statsApp.pnb12DerniersMoisGlissantN = statsRest.pnb12DerniersMoisGlissantN;
                        statsApp.pnb12DerniersMoisGlissNMoins1 = statsRest.pnb12DerniersMoisGlissNMoins1;
                        statsApp.pnb3112AnneeNMoins1 = statsRest.pnb3112AnneeNMoins1;
                        statsApp.ratioPNBImportants = statsRest.ratioPnbClient;
                        statsApp.tauxEvolutionPnb = statsRest.tauxEvolutionPnb;
                    }
                    else {
                        statsApp = undefined;
                    }
                    return statsApp;
                };
                ApplicationUtils.getStatsRevueAppDepuisRest = function (statsRest) {
                    var statsApp;
                    if (statsRest) {
                        statsApp = {};
                        statsApp.nombreDeClientsAActiver = statsRest.nombreDeClientsAActiver;
                        statsApp.nombreDeProduitsAProposer = statsRest.nombreDeProduitsAProposer;
                        statsApp.nombreDeClientsAAppetence = statsRest.nombreDeClientsAAppetence;
                        statsApp.pourcentageRevuePtfRealisee = statsRest.pourcentageRevuePtfRealisee;
                        statsApp.nombreDeClientsARenegocier = statsRest.nombreDeClientsARenegocier;
                        statsApp.nombreDePropositionsEnCours = statsRest.cumulPropositionCommerciale;
                        statsApp.nombreDeAffairesEnCours = statsRest.cumulNombreAffaires;
                        statsApp.nombreDePropositionsEnCours = statsRest.cumulPropositionCommerciale; // bouchon temporaire
                        statsApp.nombreDeAffairesEnCours = statsRest.cumulNombreAffaires; // bouchon temporaire
                    }
                    else {
                        statsApp = undefined;
                    }
                    return statsApp;
                };
                /**
                 *
                 * @param statsRest
                 */
                ApplicationUtils.getStatsRevueAppDepuisRestGlobal = function (statsRest) {
                    var statsApp;
                    if (statsRest && statsRest.vueGlobaleStatPtfEds) {
                        statsApp = {};
                        statsApp.nombreDeClientsAActiver = statsRest.vueGlobaleStatPtfEds.nombreDeClientsAActiver;
                        statsApp.nombreDeProduitsAProposer = statsRest.vueGlobaleStatPtfEds.nombreDeProduitsAProposer;
                        statsApp.nombreDeClientsAAppetence = statsRest.vueGlobaleStatPtfEds.nombreDeClientsAAppetence;
                        statsApp.pourcentageRevuePtfRealisee = statsRest.vueGlobaleStatPtfEds.pourcentageRevuePtfRealisee;
                        statsApp.nombreDeClientsARenegocier = statsRest.vueGlobaleStatPtfEds.nombreDeClientsTarifARenegocier;
                        statsApp.nombreDePropositionsEnCours = statsRest.vueGlobaleStatPtfEds.cumulPropositionCommerciale; // bouchon temporaire
                        statsApp.nombreDeAffairesEnCours = statsRest.vueGlobaleStatPtfEds.cumulNombreAffaires; // bouchon temporaire
                    }
                    else {
                        statsApp = undefined;
                    }
                    return statsApp;
                };
                /**
                 *
                 * @param statsRest
                 */
                ApplicationUtils.getStatsRentabiliteAppDepuisRestGlobal = function (statsRest) {
                    var statsApp = {};
                    if (!statsRest || !statsRest.vueGlobaleStatPtfEds) {
                        return undefined;
                    }
                    statsApp.dateDebPnb12DerMoisGlissN =
                        Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateDebPnb12DerMoisGlissN);
                    statsApp.dateDebPnb12DerMoisGlissNMoins1 =
                        Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateDebPnb12DerMoisGlissNMoins1);
                    statsApp.dateDebPnb3112AnneeNMoins1 =
                        Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateDebPnb3112AnneeNMoins1);
                    statsApp.dateFinPnb12DerMoisGlissN =
                        Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateFinPnb12DerMoisGlissN);
                    statsApp.dateFinPnb12DerMoisGlissNMoins1 =
                        Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateFinPnb12DerMoisGlissNMoins1);
                    statsApp.dateFinPnb3112AnneeNMoins1 =
                        Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateFinPnb3112AnneeNMoins1);
                    statsApp.pnb12DerniersMoisGlissantN = statsRest.vueGlobaleStatPtfEds.pnb12DerniersMoisGlissantN;
                    statsApp.pnb12DerniersMoisGlissNMoins1 = statsRest.vueGlobaleStatPtfEds.pnb12DerniersMoisGlissNMoins1;
                    statsApp.pnb3112AnneeNMoins1 = statsRest.vueGlobaleStatPtfEds.pnb3112AnneeNMoins1;
                    /*statsApp.ratioPNBImportants = statsRest.vueGlobaleStatPtfEds.ratioPnbClient;     TODO EA a ne pas mappé qu cadre de la version vue DCA */
                    statsApp.tauxEvolutionPnb = statsRest.vueGlobaleStatPtfEds.tauxEvolutionPnb;
                    return statsApp;
                };
                /**
                 *
                 * @param statsRest
                 */
                ApplicationUtils.getStatsPortefeuilleAppDepuisRestGlobal = function (statsRest) {
                    var statsApp = {};
                    if (!statsRest || !statsRest.vueGlobaleStatPtfEds) {
                        return undefined;
                    }
                    if (statsRest.vueGlobaleStatPtfEds) {
                        statsApp.nombreClients = statsRest.vueGlobaleStatPtfEds.nombreClients;
                        statsApp.nombreClientsActifs = statsRest.vueGlobaleStatPtfEds.nombreClientsActifs;
                        statsApp.nombreClientsPMEESI = statsRest.vueGlobaleStatPtfEds.nombreClientsTypePmeEsi;
                        statsApp.nombreClientsPEetPEES = statsRest.vueGlobaleStatPtfEds.nbClientsPePees;
                        statsApp.nombreClientsMEetMEES = statsRest.vueGlobaleStatPtfEds.nbClientsMeMees;
                        statsApp.nombreClientsGEetGEES = statsRest.vueGlobaleStatPtfEds.nbClientsGeGees;
                        statsApp.nombreClientsPro = statsRest.vueGlobaleStatPtfEds.nombreClientsTypeProEi;
                        statsApp.nombreClientsAutres = statsRest.vueGlobaleStatPtfEds.nombreClientsTypeAutre;
                        statsApp.nombreProspects = statsRest.vueGlobaleStatPtfEds.nombreProspects;
                        statsApp.nombreClientsAvecProduitService = statsRest.vueGlobaleStatPtfEds.nbClientsAvecProduitService;
                        statsApp.nombreClientsSansContratEtProspect = statsRest.vueGlobaleStatPtfEds.nbClientsSansContratEtProspect;
                        statsApp.nombreRelations = statsRest.vueGlobaleStatPtfEds.nombreRelationsEconomiques;
                        statsApp.nombreRdvProspectAnneeCivile = statsRest.vueGlobaleStatPtfEds.nbRdvProspectRealiseAnneeCivile;
                        statsApp.nombreRdvProspectAnneeEnCours = statsRest.vueGlobaleStatPtfEds.nbProspectsVusAnneeEncours;
                        statsApp.nombreRdvRelationEcoClient = statsRest.vueGlobaleStatPtfEds.nbRelEcoClientVuesAnneeEncours;
                        statsApp.rdvTauxVisite = statsRest.vueGlobaleStatPtfEds.tauxDeVisite;
                        statsApp.nombreRdvClientAnneeEnCours = statsRest.vueGlobaleStatPtfEds.nbRdvClient; //BDRL-1636
                        statsApp.nombreClientsNonEquipe = statsRest.vueGlobaleStatPtfEds.nbClientsNonEquipe;
                    }
                    /* TODO EA a remettre en place mais il n'y a pas de sortie sur la ressource dans le lot 1 vue DCA
                    if (statsRest.listeSegmentationRelationnellePmeEsi && statsRest.listeSegmentationRelationnellePmeEsi.length > 0) {
                        statsApp.listeSegmentationsPMEESI = [];
                        _.forEach(
                            statsRest.listeSegmentationRelationnellePmeEsi,
                            (seg: Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.ISegmentationRelationnellePmeEsi) => {
                            let segApp: Modeles.ApplicationStats.ISegmentationRelationnelle = <Modeles.ApplicationStats.ISegmentationRelationnelle>{};
                            segApp.code = seg.codeSegmentation;
                            segApp.libelle = seg.libelleSegmentation;
                            segApp.pourcentage = seg.pourcentageNombreDeClients;
                            statsApp.listeSegmentationsPMEESI.push(segApp);
                        });
                    }
                    //BDRL-1648 : Ajout Segmentation Pro
                    if (statsRest.listeSegmentationRelationnellePro && statsRest.listeSegmentationRelationnellePro.length > 0) {
                        statsApp.listeSegmentationsPro = this.agglomererSegmentationPro(statsRest.listeSegmentationRelationnellePro);
                    }
                    */
                    return statsApp;
                };
                /**
                 *
                 * @param statsRest
                 */
                ApplicationUtils.getStatsFluxFinancierPortefeuilleAppDepuisRestGlobal = function (statsRest) {
                    var listFlux = [];
                    var fluxTravail;
                    //Flux créditeurs
                    fluxTravail = {};
                    //Traitement des dates
                    fluxTravail.dateDebFlux12DerMoisGlissN = Utils.DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateDebFluxAnneeN);
                    fluxTravail.dateDebFlux12DerMoisGlissNMoins1 = Utils.DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateDebFluxAnneeNMoins1);
                    fluxTravail.dateFinFlux12DerMoisGlissN = Utils.DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateFinFluxAnneeN);
                    fluxTravail.dateFinFlux12DerMoisGlissNMoins1 = Utils.DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateFinFluxAnneeNMoins1);
                    //Traitement des chiffres
                    fluxTravail.flux12DerniersMoisGlissantN = statsRest.vueGlobaleStatPtfEds.fluxCrediteursAnneeN;
                    fluxTravail.flux12DerniersMoisGlissNMoins1 = statsRest.vueGlobaleStatPtfEds.fluxCrediteursNMoins1;
                    fluxTravail.tauxEvolutionFlux = statsRest.vueGlobaleStatPtfEds.tauxEvolutionFluxCrediteurs;
                    listFlux.push(fluxTravail);
                    //Flux débiteurs
                    fluxTravail = {};
                    //Traitement des dates
                    fluxTravail.dateDebFlux12DerMoisGlissN = Utils.DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateDebFluxAnneeN);
                    fluxTravail.dateDebFlux12DerMoisGlissNMoins1 = Utils.DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateDebFluxAnneeNMoins1);
                    fluxTravail.dateFinFlux12DerMoisGlissN = Utils.DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateFinFluxAnneeN);
                    fluxTravail.dateFinFlux12DerMoisGlissNMoins1 = Utils.DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateFinFluxAnneeNMoins1);
                    //Traitement des chiffres
                    fluxTravail.flux12DerniersMoisGlissantN = statsRest.vueGlobaleStatPtfEds.fluxDebiteursAnneeN;
                    fluxTravail.flux12DerniersMoisGlissNMoins1 = statsRest.vueGlobaleStatPtfEds.fluxDebiteursNMoins1;
                    fluxTravail.tauxEvolutionFlux = statsRest.vueGlobaleStatPtfEds.tauxEvolutionFluxDebiteurs;
                    listFlux.push(fluxTravail);
                    return listFlux;
                };
                /**
                 *
                 * @param statsRest
                 */
                ApplicationUtils.getStatsDetailPortefeuilleAppDepuisRestGlobal = function (statsRest) {
                    var listDetail = {};
                    listDetail.detailParSuviPar = [];
                    if (statsRest &&
                        statsRest.vueDetailleeStatPtfEds &&
                        statsRest.vueDetailleeStatPtfEds.length > 0) {
                        _.forEach(statsRest.vueDetailleeStatPtfEds, function (statDetailRest) {
                            var statDetailApplication = {};
                            // Detail données général
                            statDetailApplication.codeCiviliteSuiviPar = Utils.DataUtils.determinerLibelleCivilite(statDetailRest.codeCiviliteChargeAffaire);
                            // dans certain cas le nom est à vide car aucun poste fonctionnel
                            if (!statDetailRest.nomFamilleChargeAffaire) {
                                statDetailApplication.nomSuiviPar = "AGENT-" + statDetailRest.identifiantEds;
                                statDetailApplication.prenomSuiviPar = "";
                            }
                            else {
                                statDetailApplication.nomSuiviPar =
                                    (statDetailRest.nomUsageChargeAffaire &&
                                        statDetailRest.nomUsageChargeAffaire !== "")
                                        ? statDetailRest.nomUsageChargeAffaire
                                        : statDetailRest.nomFamilleChargeAffaire;
                                statDetailApplication.prenomSuiviPar = statDetailRest.prenomChargeAffaire;
                            }
                            // Détail pour le porfeuille
                            statDetailApplication.nbClientsAvecProduitService = statDetailRest.nbClientsAvecProduitService;
                            statDetailApplication.nombreClientsActifs = statDetailRest.nombreClientsActifs;
                            statDetailApplication.nombreClients = statDetailRest.nombreClients;
                            // Détail pour l'activité
                            statDetailApplication.tauxDeVisite = statDetailRest.tauxDeVisite;
                            // Détail pour rentabilité
                            statDetailApplication.pnb12DerniersMoisGlissNMoins1 = statDetailRest.pnb12DerniersMoisGlissNMoins1;
                            statDetailApplication.pnb12DerniersMoisGlissantN = statDetailRest.pnb12DerniersMoisGlissantN;
                            statDetailApplication.tauxEvolutionPnb = statDetailRest.tauxEvolutionPnb;
                            // Détail pour la revue portefeuille
                            statDetailApplication.tauxDeRevue = statDetailRest.pourcentageRevuePtfRealisee;
                            // Détail pour les flux commericaux
                            statDetailApplication.fluxCrediteursNMoins1 = statDetailRest.fluxCrediteursNMoins1;
                            statDetailApplication.fluxCrediteursAnneeN = statDetailRest.fluxCrediteursAnneeN;
                            statDetailApplication.tauxEvolutionFluxCrediteurs = statDetailRest.tauxEvolutionFluxCrediteurs;
                            statDetailApplication.fluxDebiteursNMoins1 = statDetailRest.fluxDebiteursNMoins1;
                            statDetailApplication.fluxDebiteursAnneeN = statDetailRest.fluxDebiteursAnneeN;
                            statDetailApplication.tauxEvolutionFluxDebiteurs = statDetailRest.tauxEvolutionFluxDebiteurs;
                            listDetail.detailParSuviPar.push(statDetailApplication);
                        });
                        listDetail.detailParSuviPar = _.sortBy(listDetail.detailParSuviPar, function (item) {
                            return item.nomSuiviPar;
                        });
                    }
                    // Total pour chaque détail
                    if (statsRest && statsRest.vueGlobaleStatPtfEds) {
                        listDetail.tauxDeVisiteTotal = statsRest.vueGlobaleStatPtfEds.tauxDeVisite;
                        listDetail.tauxDeRevueTotal = statsRest.vueGlobaleStatPtfEds.pourcentageRevuePtfRealisee;
                        //PNB
                        listDetail.dateDebPnb12DerMoisGlissNMoins1 = Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateDebPnb12DerMoisGlissNMoins1);
                        listDetail.dateFinPnb12DerMoisGlissNMoins1 = Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateFinPnb12DerMoisGlissNMoins1);
                        listDetail.dateDebPnb12DerMoisGlissN = Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateDebPnb12DerMoisGlissN);
                        listDetail.dateFinPnb12DerMoisGlissN = Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateFinPnb12DerMoisGlissN);
                        listDetail.pnb12DerniersMoisGlissNMoins1 = statsRest.vueGlobaleStatPtfEds.pnb12DerniersMoisGlissNMoins1;
                        listDetail.pnb12DerniersMoisGlissantN = statsRest.vueGlobaleStatPtfEds.pnb12DerniersMoisGlissantN;
                        listDetail.tauxEvolutionPnb = statsRest.vueGlobaleStatPtfEds.tauxEvolutionPnb;
                        //Flux
                        listDetail.dateDebFluxAnneeNMoins1 = Utils.DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateDebFluxAnneeNMoins1);
                        listDetail.dateFinFluxAnneeNMoins1 = Utils.DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateFinFluxAnneeNMoins1);
                        listDetail.dateDebFluxAnneeN = Utils.DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateDebFluxAnneeN);
                        listDetail.dateFinFluxAnneeN = Utils.DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateFinFluxAnneeN);
                        listDetail.fluxCrediteursNMoins1 = statsRest.vueGlobaleStatPtfEds.fluxCrediteursNMoins1;
                        listDetail.fluxCrediteursAnneeN = statsRest.vueGlobaleStatPtfEds.fluxCrediteursAnneeN;
                        listDetail.tauxEvolutionFluxCrediteurs = statsRest.vueGlobaleStatPtfEds.tauxEvolutionFluxCrediteurs;
                        listDetail.fluxDebiteursNMoins1 = statsRest.vueGlobaleStatPtfEds.fluxDebiteursNMoins1;
                        listDetail.fluxDebiteursAnneeN = statsRest.vueGlobaleStatPtfEds.fluxDebiteursAnneeN;
                        listDetail.tauxEvolutionFluxDebiteurs = statsRest.vueGlobaleStatPtfEds.tauxEvolutionFluxDebiteurs;
                    }
                    return listDetail;
                };
                /**
                 * Fonction permettant de generer un identifiant aléatoire
                 * @returns {number}
                 */
                ApplicationUtils.genererIdentifiantAleatoire = function () {
                    return Math.floor(new Date().valueOf() * Math.random());
                };
                /**
                 * Agglomère les segmentations Pro reçues du service Rest en fonction des codes segmentation
                 * @param listeSegmentationProRest
                 */
                ApplicationUtils.agglomererSegmentationPro = function (listeSegmentationProRest) {
                    var listeSegmentationResultat;
                    if (listeSegmentationProRest) {
                        listeSegmentationResultat = [];
                        //La caractère recherché est *
                        var expressionReguliereRecherchee_1 = /\*/;
                        _.forEach(listeSegmentationProRest, function (segmentationProLue) {
                            if (segmentationProLue) {
                                var segmentationTravail_1 = {};
                                var nombreEtoiles = 0;
                                var tableauAvecEtoiles = void 0;
                                if (segmentationProLue.codeSegmentation) {
                                    tableauAvecEtoiles = segmentationProLue.codeSegmentation.split(expressionReguliereRecherchee_1);
                                    if (tableauAvecEtoiles) {
                                        nombreEtoiles = tableauAvecEtoiles.length - 1;
                                    }
                                }
                                //On valorise les propriétés de segmentationTravail en fonction de celles de segmentationProLue
                                switch (nombreEtoiles) {
                                    case 0:
                                        if (segmentationProLue.codeSegmentation.indexOf(Portefeuille.Constantes.Rest.ENTREE_EN_RELATION) !== -1) {
                                            //Cas "Entrée en relation"
                                            segmentationTravail_1.code = Portefeuille.Constantes.Rest.CODE_ENTREE_EN_RELATION;
                                            segmentationTravail_1.libelle = Portefeuille.Constantes.Application.LIBELLE_AGGLOMERAT_ENTREE_RELATION;
                                            segmentationTravail_1.pourcentage = segmentationProLue.pourcentageNombreDeClients;
                                        }
                                        else if (segmentationProLue.codeSegmentation.indexOf(Portefeuille.Constantes.Rest.PRO_RISQUE) !== -1) {
                                            //Cas "Risqué"
                                            segmentationTravail_1.code = Portefeuille.Constantes.Rest.CODE_RISQUE;
                                            segmentationTravail_1.libelle = Portefeuille.Constantes.Application.LIBELLE_AGGLOMERAT_RISQUE;
                                            segmentationTravail_1.pourcentage = segmentationProLue.pourcentageNombreDeClients;
                                        }
                                        else {
                                            if (segmentationProLue.codeSegmentation.toUpperCase().substr(0, 3) === Portefeuille.Constantes.Rest.NON_CALCULE_NON_CONCERNE) {
                                                //Autres cas traités
                                                segmentationTravail_1.code = Portefeuille.Constantes.Rest.CODE_AUTRES;
                                                segmentationTravail_1.libelle = Portefeuille.Constantes.Application.LIBELLE_AGGLOMERAT_AUTRES;
                                                segmentationTravail_1.pourcentage = segmentationProLue.pourcentageNombreDeClients;
                                            }
                                            else {
                                                //Autres cas non ignorés (ex SCI)
                                                segmentationTravail_1 = null;
                                            }
                                        }
                                        break;
                                    case 1:
                                        segmentationTravail_1.code = Portefeuille.Constantes.Rest.CODE_PRO_NON_CAPTE;
                                        segmentationTravail_1.libelle = Portefeuille.Constantes.Application.LIBELLE_AGGLOMERAT_PRO_NON_CAPTE;
                                        segmentationTravail_1.pourcentage = segmentationProLue.pourcentageNombreDeClients;
                                        break;
                                    case 2:
                                        segmentationTravail_1.code = Portefeuille.Constantes.Rest.CODE_PRO_PARTIELLEMENT_CAPTE;
                                        segmentationTravail_1.libelle = Portefeuille.Constantes.Application.LIBELLE_AGGLOMERAT_PRO_PARTIELLEMENT_CAPTE;
                                        segmentationTravail_1.pourcentage = segmentationProLue.pourcentageNombreDeClients;
                                        break;
                                    case 3:
                                        segmentationTravail_1.code = Portefeuille.Constantes.Rest.CODE_PRO_LARGEMENT_CAPTE;
                                        segmentationTravail_1.libelle = Portefeuille.Constantes.Application.LIBELLE_AGGLOMERAT_PRO_LARGEMENT_CAPTE;
                                        segmentationTravail_1.pourcentage = segmentationProLue.pourcentageNombreDeClients;
                                        break;
                                    default:
                                        segmentationTravail_1 = null;
                                        break;
                                }
                                if (segmentationTravail_1) {
                                    //Recherche de ce type de segmentation dans la liste à retourner: Si trouvé => mise à jour pourcentage; Sinon => ajout
                                    var indexTrouve = -1; //Par défaut on considère la recherche infructueuse
                                    indexTrouve = _.findIndex(listeSegmentationResultat, function (segmentationTestee) {
                                        if (segmentationTestee.code === segmentationTravail_1.code) {
                                            return true;
                                        }
                                    });
                                    //Exploitation du résultat de la recherche
                                    if (indexTrouve === -1) {
                                        //Ce type de segmentation n'est pas encore présent dans la liste résultat => on l'ajoute
                                        listeSegmentationResultat.push(segmentationTravail_1);
                                    }
                                    else {
                                        //Ce type de segmentation est déjà présent dans la liste résultat => on met le pourcentage à jour
                                        listeSegmentationResultat[indexTrouve].pourcentage = listeSegmentationResultat[indexTrouve].pourcentage + segmentationTravail_1.pourcentage;
                                    }
                                }
                            }
                        });
                    }
                    return listeSegmentationResultat;
                };
                /**
                 * Retourne une config de donut selon le type de donut souhaité et les stats passés en paramètre
                 * @param typeDonutSouhaite
                 * @param statsRdvEtPortefeuille
                 */
                ApplicationUtils.getConfigDonutSelonType = function (typeDonutSouhaite, statsRdvEtPortefeuille) {
                    var configResultat;
                    if (typeDonutSouhaite && statsRdvEtPortefeuille) {
                        switch (typeDonutSouhaite) {
                            case Portefeuille.Constantes.Application.DONUT_PME_ESI:
                                //Segmentation Donut PME
                                configResultat = ApplicationUtils.getConfigDonutD3(typeDonutSouhaite);
                                configResultat.titre = Portefeuille.Constantes.Application.GRAPHE_SEGMENTATION_TITRE_GROUPE;
                                configResultat.nombreClients = statsRdvEtPortefeuille.nombreClientsPMEESI.toString();
                                configResultat.listeDonnees = this.alimenterListeDonneesConfigDonut(statsRdvEtPortefeuille.listeSegmentationsPMEESI);
                                break;
                            case Portefeuille.Constantes.Application.DONUT_PRO:
                                //Segmentation Donut PRO
                                configResultat = ApplicationUtils.getConfigDonutD3(typeDonutSouhaite);
                                configResultat.titre = Portefeuille.Constantes.Application.GRAPHE_SEGMENTATION_TITRE_CLIENT;
                                configResultat.nombreClients = statsRdvEtPortefeuille.nombreClientsPro.toString();
                                configResultat.listeDonnees = this.alimenterListeDonneesConfigDonut(statsRdvEtPortefeuille.listeSegmentationsPro);
                                break;
                            default:
                        }
                    }
                    return configResultat;
                };
                /**
                 *
                 * @param typeDonutSouhaite
                 */
                ApplicationUtils.getConfigDonutD3 = function (typeDonutSouhaite) {
                    var configResultat;
                    configResultat = {};
                    configResultat.donutChoisi = typeDonutSouhaite;
                    configResultat.degrade = Services.LibrairieD3.DEGRADE_DONUT.ROSE;
                    return configResultat;
                };
                /**
                 * Retourne les données affichées dans un donut à partir d'une liste de segmentation relationnelle
                 * @param listeSegmentation
                 */
                ApplicationUtils.alimenterListeDonneesConfigDonut = function (listeSegmentation) {
                    var listeDonneesResultat;
                    if (listeSegmentation) {
                        listeDonneesResultat = [];
                        _.forEach(listeSegmentation, function (seg) {
                            var section = {};
                            section.nom = seg.libelle;
                            section.pourcentage = seg.pourcentage;
                            listeDonneesResultat.push(section);
                        });
                    }
                    return listeDonneesResultat;
                };
                /**
                 *  Déduit si le navigateur est un Internet Explorer
                 */
                ApplicationUtils.isIE = function () {
                    return navigator.userAgent.indexOf("Trident") !== -1;
                };
                // transforme un code segmentation BDR en libellé (données récupérées depuis la table délocalisée DU2L chargée à l'init du clients-controller)
                ApplicationUtils.segmentationsBDR = [];
                return ApplicationUtils;
            }());
            Utils.ApplicationUtils = ApplicationUtils;
        })(Utils = Services.Utils || (Services.Utils = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Utils;
        (function (Utils) {
            "use strict";
            /**
             *
             */
            var DataUtils = (function () {
                function DataUtils() {
                }
                /**
                 *
                 * @param inStr
                 */
                DataUtils.formatterPascaleCase = function (inStr) {
                    return inStr.replace(/\w+/g, function (w) { return w[0].toUpperCase() + w.slice(1).toLowerCase(); });
                };
                /**
                 *
                 * @param code
                 */
                DataUtils.setONToBoolean = function (code) {
                    return code === Portefeuille.Constantes.Rest.CODE_O_TRUE;
                };
                /**
                 *
                 * @param code
                 */
                DataUtils.getEstLeaderDepuisCodeLeader = function (code) {
                    return code === Portefeuille.Constantes.Application.CODE_LEADER_RELATION;
                };
                /**
                 *
                 * @param indicClientProspect
                 */
                DataUtils.getEstClientDepuisIndicateur = function (indicClientProspect) {
                    return indicClientProspect ? indicClientProspect.valeur === Portefeuille.Constantes.Application.CHAINE_INDICATEUR_CLIENT : undefined;
                };
                /**
                 *
                 * @param indicClientActif
                 */
                DataUtils.getEstActifDepuisIndicateur = function (indicClientActif) {
                    return indicClientActif.valeur === Portefeuille.Constantes.Application.CHAINE_INDICATEUR_ACTIF;
                };
                /**
                 *
                 * @param code
                 */
                DataUtils.setStrToActifInactif = function (code) {
                    if (code && code !== " ") {
                        return code === Portefeuille.Constantes.Rest.CODE_STRING_ACTIF ? Portefeuille.Constantes.Application.CHAINE_INDICATEUR_ACTIF : Portefeuille.Constantes.Application.CHAINE_INDICATEUR_INACTIF;
                    }
                    else {
                        return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                    }
                };
                /**
                 *
                 * @param code
                 */
                DataUtils.setStrToSansContrat = function (code) {
                    if (code && code !== " ") {
                        return code === Portefeuille.Constantes.Rest.CODE_O_TRUE ? Portefeuille.Constantes.Application.CHAINE_OUI : Portefeuille.Constantes.Application.CHAINE_NON;
                    }
                    else {
                        return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                    }
                };
                /**
                 *
                 * @param code
                 */
                DataUtils.setStrToLeader = function (code) {
                    if (code && code !== " ") {
                        return code === Portefeuille.Constantes.Rest.CODE_O_TRUE ? Portefeuille.Constantes.Application.CHAINE_OUI : Portefeuille.Constantes.Application.CHAINE_NON;
                    }
                    else {
                        return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                    }
                };
                /**
                 *
                 * @param code
                 */
                DataUtils.setStrToClientProspectVide = function (code) {
                    switch (code) {
                        case Portefeuille.Constantes.Rest.CODE_TYPE_PERSONNE_CLIENT:
                            return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_CLIENT;
                        case Portefeuille.Constantes.Rest.CODE_TYPE_PERSONNE_TIERS:
                            return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_TIERS;
                        case Portefeuille.Constantes.Rest.CODE_TYPE_PERSONNE_PROPECT_RESTREINT:
                        case Portefeuille.Constantes.Rest.CODE_TYPE_PERSONNE_PROPECT_ENRICHI:
                            return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_PROSPECT;
                        default:
                            return Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                    }
                };
                /**
                 *
                 * @param num
                 * @param size
                 */
                DataUtils.lPad = function (num, size) {
                    return _.padLeft("" + num, size, "0");
                };
                /**
                 *
                 * @param val
                 */
                DataUtils.booleanToOuiNon = function (val) {
                    return val ? Portefeuille.Constantes.Application.CHAINE_OUI : Portefeuille.Constantes.Application.CHAINE_NON;
                };
                /**
                 *
                 * @param val
                 */
                DataUtils.formatDateIhm = function (val) {
                    return moment(val, Portefeuille.Constantes.Application.FORMAT_DATE_REST).format(Portefeuille.Constantes.Application.FORMAT_DATE_IHM);
                };
                /**
                 *
                 * @param val
                 * @param unite
                 */
                DataUtils.formatMontant = function (val) {
                    return val.toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, String.fromCharCode(160));
                };
                /**
                 * utilisé pour afficher le filtre
                 * @param val
                 */
                DataUtils.formatPourcent = function (val) {
                    var texte;
                    texte = val.toFixed(2);
                    texte = texte.replace(/\B(?=(\d{3})+(?!\d))/g, String.fromCharCode(160));
                    // supprime le .00
                    var pos;
                    if ((pos = texte.indexOf(".00")) > -1) {
                        texte = texte.substring(0, pos);
                    }
                    texte = texte.replace(".", ",");
                    return texte;
                };
                /**
                 * retitue un nombre entier au format du pays locale
                 * @param val Valeur à affiché
                 */
                DataUtils.formatNombre = function (val) {
                    return val.toLocaleString();
                };
                /**
                 *
                 * @param dateRest
                 */
                DataUtils.strDateRestToDate = function (dateRest) {
                    var dateMonent;
                    var dateFormater;
                    dateFormater = null;
                    if (dateRest && dateRest.length > 0) {
                        dateMonent = (dateRest.length > 15) ?
                            moment(dateRest.substr(0, 16), "YYYY-MM-DD-HH.mm") :
                            moment(dateRest, "YYYY-MM-DD");
                        if (dateMonent.isValid()) {
                            dateFormater = dateMonent.toDate();
                        }
                    }
                    return dateFormater;
                };
                /**
                 *
                 * @param codeCivilite
                 */
                DataUtils.determinerLibelleCivilite = function (codeCivilite) {
                    return (codeCivilite === "1" || codeCivilite === "2") ?
                        "ME" : (codeCivilite === "3" ? "MR" : "");
                };
                /**
                 *
                 * @param dateFormatString
                 */
                DataUtils.formaterDateValide = function (dateFormatString) {
                    return moment(dateFormatString, "MM/YYYY").isValid() ?
                        moment(dateFormatString, "MM/YYYY").toDate() : null;
                };
                DataUtils.getTexteCA = function (client, code) {
                    var texte = "";
                    var listeIndic = _.where(client.listeIndicateurs, { "code": code });
                    if (listeIndic && listeIndic.length > 0) {
                        var indic = listeIndic[0];
                        if (indic.valeurNumber !== undefined &&
                            indic.valeurNumber !== null &&
                            indic.valeurNumber !== Number.POSITIVE_INFINITY &&
                            indic.valeurNumber !== Number.NEGATIVE_INFINITY) {
                            texte = indic.valeurNumber.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ") + " k\u20AC";
                        }
                        else {
                            texte = Portefeuille.Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;
                        }
                    }
                    return texte;
                };
                /**
                 *
                 * @param client
                 * @param code
                 */
                DataUtils.getTexteDate = function (client, code) {
                    var texte = "";
                    var listeIndic = _.where(client.listeIndicateurs, { "code": code });
                    if (listeIndic && listeIndic.length > 0) {
                        var indic = listeIndic[0];
                        if (indic.valeurNumber !== undefined &&
                            indic.valeurNumber !== null &&
                            indic.dateMaj !== null) {
                            texte = moment(indic.dateMaj).format("MM/YYYY");
                        }
                    }
                    return texte;
                };
                /**
                 *
                 * @param nombre
                 */
                DataUtils.formaterMontantkiloText = function (nombre) {
                    return nombre.toString().replace(/\B(?=(\d{3})+(?!\d))/g, String.fromCharCode(160)) + " k\u20AC";
                };
                return DataUtils;
            }());
            Utils.DataUtils = DataUtils;
        })(Utils = Services.Utils || (Services.Utils = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

;

;

"use strict";
var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var Tableaux;
        (function (Tableaux) {
            var Comparator;
            (function (Comparator) {
                var ClientComparator = (function () {
                    function ClientComparator($filter, $parse) {
                        this.$filter = $filter;
                        this.$parse = $parse;
                    }
                    ClientComparator.prototype.comparatorFn = function (item, criterion, columnDescriptor) {
                        var client = item;
                        if (client) {
                            // on construit une chaine de caracteres afin de retranscrire ce qui est présent dans la colonne
                            var texteCompare = "";
                            texteCompare += client.nom;
                            //texteCompare += clientTest.nomRelationEconomique; // Inutile, le filtre existe déja au travers d'une liste box
                            //if (client.estClient != undefined && !client.estClient) {
                            //    texteCompare += Constantes.Application.CHAINE_INDICATEUR_PROSPECT;
                            //}
                            //if (client.estActifRenseigne && client.estActif) {
                            //    texteCompare += Constantes.Application.CHAINE_INDICATEUR_ACTIF;
                            //}
                            //if (client.estActifRenseigne && !client.estActif) {
                            //    texteCompare += Constantes.Application.CHAINE_INDICATEUR_INACTIF;
                            //}
                            return (texteCompare.toString().toLowerCase().indexOf(criterion.toLowerCase()) !== -1);
                        }
                        else {
                            return false;
                        }
                    };
                    return ClientComparator;
                }());
                Comparator.ClientComparator = ClientComparator;
            })(Comparator = Tableaux.Comparator || (Tableaux.Comparator = {}));
        })(Tableaux = Modeles.Tableaux || (Modeles.Tableaux = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

"use strict";
var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var Tableaux;
        (function (Tableaux) {
            var Comparator;
            (function (Comparator) {
                var DateComparator = (function () {
                    function DateComparator($filter, $parse) {
                        this.$filter = $filter;
                        this.$parse = $parse;
                    }
                    DateComparator.prototype.comparatorFn = function (item, criterion, columnDescriptor) {
                        var getter = this.$parse(columnDescriptor.bind);
                        var value = getter(item);
                        if (!angular.isDate(value)) {
                            return false;
                        }
                        var valueFormated = this.$filter("date")(value, "dd/MM/yyyy");
                        return (valueFormated.toString().toLowerCase().indexOf(criterion) !== -1);
                    };
                    return DateComparator;
                }());
                Comparator.DateComparator = DateComparator;
            })(Comparator = Tableaux.Comparator || (Tableaux.Comparator = {}));
        })(Tableaux = Modeles.Tableaux || (Modeles.Tableaux = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

"use strict";
var Portefeuille;
(function (Portefeuille) {
    var Modeles;
    (function (Modeles) {
        var Tableaux;
        (function (Tableaux) {
            var Comparator;
            (function (Comparator) {
                var RelationComparator = (function () {
                    function RelationComparator($filter, $parse) {
                        this.$filter = $filter;
                        this.$parse = $parse;
                    }
                    RelationComparator.prototype.comparatorFn = function (item, criterion, columnDescriptor) {
                        var relationTest = item;
                        if (relationTest) {
                            // on construit une chaine de caracteres afin de retranscrire ce qui est présent dans la colonne
                            var texteCompare = "";
                            texteCompare += relationTest.nom;
                            texteCompare += relationTest.id;
                            texteCompare += relationTest.relationEconomique;
                            return (texteCompare.toString().toLowerCase().indexOf(criterion.toLowerCase()) !== -1);
                        }
                        else {
                            return false;
                        }
                    };
                    return RelationComparator;
                }());
                Comparator.RelationComparator = RelationComparator;
            })(Comparator = Tableaux.Comparator || (Tableaux.Comparator = {}));
        })(Tableaux = Modeles.Tableaux || (Modeles.Tableaux = {}));
    })(Modeles = Portefeuille.Modeles || (Portefeuille.Modeles = {}));
})(Portefeuille || (Portefeuille = {}));

;

;

;

;

;

;

;

;

;

;

;

;



/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var RechercheRevue;
            (function (RechercheRevue) {
                "use strict";
                var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                /**
                 * Service permettant de récupérer les informations sur la revue
                 */
                var RechercheRevueService = (function () {
                    //constructeur
                    function RechercheRevueService(serviceAgentExtended) {
                        this.serviceAgentExtended = serviceAgentExtended;
                    }
                    /**
                     * Méthode de récupération de la liste des données d'une revue
                     * @param query
                     */
                    RechercheRevueService.prototype.postRechercheRevue = function (query) {
                        RechercheRevueService.logger.info(">>> Appel de la méthode : RechercheRevueService.getRevue <<<");
                        var requete = {
                            url: Portefeuille.Constantes.urlsRest.URL_REST_PROPOSITIONCORPORATEV1_RECHERCHE_REVUE,
                            method: MyWay.Services.MethodEnum.POST,
                            withHeaders: true,
                            data: query,
                            responseType: MyWay.Services.ResponseTypeEnum.JSON
                        };
                        return this.serviceAgentExtended.sendRequest(requete);
                    };
                    RechercheRevueService.CLASS_NAME = "RechercheRevueService";
                    RechercheRevueService.logger = loggerClass(RechercheRevueService.CLASS_NAME);
                    //Injection des dépendances
                    RechercheRevueService.$inject = [
                        Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended
                    ];
                    return RechercheRevueService;
                }());
                Portefeuille.app.service(RechercheRevueService.CLASS_NAME, RechercheRevueService);
            })(RechercheRevue = Rest.RechercheRevue || (Rest.RechercheRevue = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var StatFluxMouvementFinancier;
            (function (StatFluxMouvementFinancier) {
                "use strict";
                var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                /**
                 * Ce service permet de récupérer les flux créditeurs + débiteurs.
                 */
                var StatFluxMouvementFinancierService = (function () {
                    //constructeur
                    function StatFluxMouvementFinancierService(serviceAgentExtended) {
                        this.serviceAgentExtended = serviceAgentExtended;
                    }
                    /**
                     * Méthode de récupération de la liste des données statistiques de rentabilite sur une liste de client ou relation ou portefeuilles
                     * @param query
                     */
                    StatFluxMouvementFinancierService.prototype.postStatFluxMvtFinancier = function (query) {
                        StatFluxMouvementFinancierService.logger.info(">>> Appel de la méthode : StatFluxMouvementFinancierService.postStatFluxMvtFinancier <<<");
                        var requete = {
                            url: Portefeuille.Constantes.urlsRest.URL_REST_PORTEFEUILLECORPORATEV1_STATFLUXMOUVEMENTFINANCIER,
                            method: MyWay.Services.MethodEnum.POST,
                            withHeaders: true,
                            data: query,
                            responseType: MyWay.Services.ResponseTypeEnum.JSON
                        };
                        return this.serviceAgentExtended.sendRequest(requete);
                    };
                    StatFluxMouvementFinancierService.CLASS_NAME = "StatFluxMouvementFinancierService";
                    StatFluxMouvementFinancierService.logger = loggerClass(StatFluxMouvementFinancierService.CLASS_NAME);
                    //Injection des dépendances
                    StatFluxMouvementFinancierService.$inject = [
                        Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended
                    ];
                    return StatFluxMouvementFinancierService;
                }());
                Portefeuille.app.service(StatFluxMouvementFinancierService.CLASS_NAME, StatFluxMouvementFinancierService);
            })(StatFluxMouvementFinancier = Rest.StatFluxMouvementFinancier || (Rest.StatFluxMouvementFinancier = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var StatPortefeuille;
            (function (StatPortefeuille) {
                "use strict";
                var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                /**
                 * Service permettant de récupérer les information sur les statistiques de rentabilite
                 */
                var StatPortefeuilleService = (function () {
                    //constructeur
                    function StatPortefeuilleService(serviceAgentExtended) {
                        this.serviceAgentExtended = serviceAgentExtended;
                    }
                    /**
                     * Méthode de récupération de la liste des données statistiques de rentabilite sur une liste de client
                     * ou relation ou portefeuilles
                     * @param query
                     */
                    StatPortefeuilleService.prototype.getStats = function (query) {
                        StatPortefeuilleService.logger.info(">>> Appel de la méthode : StatRevueService.getStats <<<");
                        var requete = {
                            url: Portefeuille.Constantes.urlsRest.URL_REST_PORTEFEUILLECORPORATEV1_STATPTF,
                            method: MyWay.Services.MethodEnum.POST,
                            withHeaders: true,
                            data: query,
                            responseType: MyWay.Services.ResponseTypeEnum.JSON
                        };
                        return this.serviceAgentExtended.sendRequest(requete);
                    };
                    StatPortefeuilleService.CLASS_NAME = "StatPortefeuilleService";
                    StatPortefeuilleService.logger = loggerClass(StatPortefeuilleService.CLASS_NAME);
                    //Injection des dépendances
                    StatPortefeuilleService.$inject = [
                        Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended
                    ];
                    return StatPortefeuilleService;
                }());
                Portefeuille.app.service(StatPortefeuilleService.CLASS_NAME, StatPortefeuilleService);
            })(StatPortefeuille = Rest.StatPortefeuille || (Rest.StatPortefeuille = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var StatRentabilite;
            (function (StatRentabilite) {
                "use strict";
                var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                /**
                 * Service permettant de récupérer les information sur les statistiques de rentabilite
                 */
                var StatRentabiliteService = (function () {
                    //constructeur
                    function StatRentabiliteService(serviceAgentExtended) {
                        this.serviceAgentExtended = serviceAgentExtended;
                    }
                    /**
                     * Méthode de récupération de la liste des données statistiques de rentabilite sur une liste de client ou relation ou portefeuilles
                     * @param query
                     */
                    StatRentabiliteService.prototype.getStatsRentab = function (query) {
                        StatRentabiliteService.logger.info(">>> Appel de la méthode : StatRentabiliteService.getStatsRentab <<<");
                        var requete = {
                            url: Portefeuille.Constantes.urlsRest.URL_REST_PORTEFEUILLECORPORATEV1_STATRENTABILITE,
                            method: MyWay.Services.MethodEnum.POST,
                            withHeaders: true,
                            data: query,
                            responseType: MyWay.Services.ResponseTypeEnum.JSON
                        };
                        return this.serviceAgentExtended.sendRequest(requete);
                    };
                    StatRentabiliteService.CLASS_NAME = "StatRentabiliteService";
                    StatRentabiliteService.logger = loggerClass(StatRentabiliteService.CLASS_NAME);
                    //Injection des dépendances
                    StatRentabiliteService.$inject = [
                        Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended
                    ];
                    return StatRentabiliteService;
                }());
                Portefeuille.app.service(StatRentabiliteService.CLASS_NAME, StatRentabiliteService);
            })(StatRentabilite = Rest.StatRentabilite || (Rest.StatRentabilite = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var StatRevue;
            (function (StatRevue) {
                "use strict";
                var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                /**
                 * Service permettant de récupérer les information sur les statistiques de rentabilite
                 */
                var StatRevueService = (function () {
                    //constructeur
                    function StatRevueService(serviceAgentExtended) {
                        this.serviceAgentExtended = serviceAgentExtended;
                    }
                    /**
                     * Méthode de récupération de la liste des données statistiques de rentabilite sur une liste de client ou relation ou portefeuilles
                     * @param query
                     */
                    StatRevueService.prototype.getStats = function (query) {
                        StatRevueService.logger.info(">>> Appel de la méthode : StatRevueService.getStats <<<");
                        var requete = {
                            url: Portefeuille.Constantes.urlsRest.URL_REST_PROPOSITIONCORPORATEV1_STATREVUE,
                            method: MyWay.Services.MethodEnum.POST,
                            withHeaders: true,
                            data: query,
                            responseType: MyWay.Services.ResponseTypeEnum.JSON
                        };
                        return this.serviceAgentExtended.sendRequest(requete);
                    };
                    StatRevueService.CLASS_NAME = "StatRevueService";
                    StatRevueService.logger = loggerClass(StatRevueService.CLASS_NAME);
                    //Injection des dépendances
                    StatRevueService.$inject = [
                        Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended
                    ];
                    return StatRevueService;
                }());
                Portefeuille.app.service(StatRevueService.CLASS_NAME, StatRevueService);
            })(StatRevue = Rest.StatRevue || (Rest.StatRevue = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var AgentV2;
            (function (AgentV2) {
                var gestionAffectation;
                (function (gestionAffectation) {
                    "use strict";
                    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                    /**
                     * Service permettant de récupérer les information du corporate
                     */
                    var GestionAffectationService = (function () {
                        //constructeur
                        function GestionAffectationService(serviceAgentExtended) {
                            this.serviceAgentExtended = serviceAgentExtended;
                        }
                        /**
                         * Méthode permettant de de visualiser le détail de l'affectation d'un agent
                         * @param query
                         */
                        GestionAffectationService.prototype.getGestionAffectation = function (query) {
                            GestionAffectationService.logger.info(">>> Appel de la méthode : GestionAffectationService.getGestionAffectation <<<");
                            var requete = {
                                url: Portefeuille.Constantes.urlsRest.URL_REST_AGENTV2_GESTION_AFFECTATION,
                                method: MyWay.Services.MethodEnum.GET,
                                withHeaders: true,
                                params: query,
                                responseType: MyWay.Services.ResponseTypeEnum.JSON
                            };
                            return this.serviceAgentExtended.sendRequest(requete);
                        };
                        GestionAffectationService.CLASS_NAME = "GestionAffectationService";
                        GestionAffectationService.logger = loggerClass(GestionAffectationService.CLASS_NAME);
                        //Injection des dépendances
                        GestionAffectationService.$inject = [
                            Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended
                        ];
                        return GestionAffectationService;
                    }());
                    Portefeuille.app.service("GestionAffectationService", GestionAffectationService);
                })(gestionAffectation = AgentV2.gestionAffectation || (AgentV2.gestionAffectation = {}));
            })(AgentV2 = Rest.AgentV2 || (Rest.AgentV2 = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var AgentV2;
            (function (AgentV2) {
                var recherche;
                (function (recherche) {
                    "use strict";
                    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                    /**
                     * Service permettant de récupérer les information du corporate
                     */
                    var RechercheAgentService = (function () {
                        //constructeur
                        function RechercheAgentService(serviceAgentExtended) {
                            this.serviceAgentExtended = serviceAgentExtended;
                        }
                        RechercheAgentService.prototype.getListeCaracteristiquesAgent = function (query) {
                            RechercheAgentService.logger.info(">>> Appel de la méthode : RechercheAgentService.getListeCaracteristiquesAgent <<<");
                            var requete = {
                                url: Portefeuille.Constantes.urlsRest.URL_REST_AGENTV2_RECHERCHE,
                                method: MyWay.Services.MethodEnum.GET,
                                withHeaders: true,
                                params: query,
                                responseType: MyWay.Services.ResponseTypeEnum.JSON
                            };
                            return this.serviceAgentExtended.sendRequest(requete);
                        };
                        RechercheAgentService.CLASS_NAME = "RechercheAgentService";
                        RechercheAgentService.logger = loggerClass(RechercheAgentService.CLASS_NAME);
                        //Injection des dépendances
                        RechercheAgentService.$inject = [
                            Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended
                        ];
                        return RechercheAgentService;
                    }());
                    Portefeuille.app.service("RechercheAgentService", RechercheAgentService);
                })(recherche = AgentV2.recherche || (AgentV2.recherche = {}));
            })(AgentV2 = Rest.AgentV2 || (Rest.AgentV2 = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var PreferenceUtilisateur;
            (function (PreferenceUtilisateur) {
                "use strict";
                var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                /**
                 * Service permettant de récupérer les information du corporate
                 */
                var PreferenceUtilisateurService = (function () {
                    //constructeur
                    function PreferenceUtilisateurService(serviceAgentExtended) {
                        this.serviceAgentExtended = serviceAgentExtended;
                    }
                    PreferenceUtilisateurService.prototype.getListePreferences = function (query) {
                        PreferenceUtilisateurService.logger.info(">>> Appel de la méthode : PreferenceUtilisateurService.getListeCaracteristiquesAgent <<<");
                        var requete = {
                            url: Portefeuille.Constantes.urlsRest.URL_REST_PREFERENCE_UTILISATEUR,
                            method: MyWay.Services.MethodEnum.GET,
                            withHeaders: true,
                            params: query,
                            responseType: MyWay.Services.ResponseTypeEnum.JSON
                        };
                        return this.serviceAgentExtended.sendRequest(requete);
                    };
                    PreferenceUtilisateurService.CLASS_NAME = "RechercheAgentService";
                    PreferenceUtilisateurService.logger = loggerClass(PreferenceUtilisateurService.CLASS_NAME);
                    //Injection des dépendances
                    PreferenceUtilisateurService.$inject = [
                        Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended
                    ];
                    return PreferenceUtilisateurService;
                }());
                Portefeuille.app.service("PreferenceUtilisateurService", PreferenceUtilisateurService);
            })(PreferenceUtilisateur = Rest.PreferenceUtilisateur || (Rest.PreferenceUtilisateur = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var Client;
            (function (Client) {
                "use strict";
                var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                /**
                 * Service permettant de récupérer une liste de clients avec certains indicateurs
                 */
                var ClientService = (function () {
                    //constructeur
                    function ClientService(serviceAgentExtended, $q) {
                        this.serviceAgentExtended = serviceAgentExtended;
                        this.$q = $q;
                    }
                    /**
                     * Méthode de récupération de la liste des clients avec certains indicateurs (/portefeuille/v1/client)
                     * @param query
                     */
                    ClientService.prototype.getClientsIndicateurs = function (query) {
                        ClientService.logger.info(">>> Appel de la méthode : ClientService.getClientsIndicateurs <<<");
                        var requete = {
                            url: Portefeuille.Constantes.urlsRest.URL_REST_PORTEFEUILLEV1_CLIENT,
                            method: MyWay.Services.MethodEnum.POST,
                            withHeaders: true,
                            data: query,
                            responseType: MyWay.Services.ResponseTypeEnum.JSON
                        };
                        return this.serviceAgentExtended.sendRequest(requete);
                    };
                    ClientService.CLASS_NAME = "ClientService";
                    ClientService.logger = loggerClass(ClientService.CLASS_NAME);
                    //Injection des dépendances
                    ClientService.$inject = [
                        Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                        Portefeuille.Constantes.Inject.Angular.$q
                    ];
                    return ClientService;
                }());
                Portefeuille.app.service(ClientService.CLASS_NAME, ClientService);
            })(Client = Rest.Client || (Rest.Client = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var RecherchePortefeuille;
            (function (RecherchePortefeuille) {
                "use strict";
                var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                /**
                 * Service permettant de récupérer les information du corporate
                 */
                var RecherchePortefeuilleService = (function () {
                    //constructeur
                    function RecherchePortefeuilleService(serviceAgentExtended) {
                        this.serviceAgentExtended = serviceAgentExtended;
                    }
                    /**
                     * Méthode de récupération de la liste des portefeuilles pour un élément de structure donné d'un agent (/portefeuille/v1/recherche)
                     * @param query
                     */
                    RecherchePortefeuilleService.prototype.getPortefeuilles = function (query) {
                        RecherchePortefeuilleService.logger.info(">>> Appel de la méthode : RecherchePortefeuilleService.getPortefeuilles <<<");
                        var requete = {
                            url: Portefeuille.Constantes.urlsRest.URL_REST_PORTEFEUILLEV1_RECHERCHE,
                            method: MyWay.Services.MethodEnum.GET,
                            withHeaders: true,
                            params: query,
                            responseType: MyWay.Services.ResponseTypeEnum.JSON
                        };
                        return this.serviceAgentExtended.sendRequest(requete);
                    };
                    /**
                     * Méthode de récupération de la liste des portefeuilles pour un pour un élément de structure donné (agence, centre, etc)  (/portefeuille/v1/recherche/getListe)
                     * @param query
                     */
                    RecherchePortefeuilleService.prototype.getlistePortefeuillesParEds = function (query) {
                        RecherchePortefeuilleService.logger.info(">>> Appel de la méthode : RecherchePortefeuilleService.getPortefeuilles <<<");
                        var requete = {
                            url: Portefeuille.Constantes.urlsRest.URL_REST_PORTEFEUILLEV1_RECHERCHE_LISTE,
                            method: MyWay.Services.MethodEnum.GET,
                            withHeaders: true,
                            params: query,
                            responseType: MyWay.Services.ResponseTypeEnum.JSON
                        };
                        return this.serviceAgentExtended.sendRequest(requete);
                    };
                    RecherchePortefeuilleService.CLASS_NAME = "RecherchePortefeuilleService";
                    RecherchePortefeuilleService.logger = loggerClass(RecherchePortefeuilleService.CLASS_NAME);
                    //Injection des dépendances
                    RecherchePortefeuilleService.$inject = [
                        Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended
                    ];
                    return RecherchePortefeuilleService;
                }());
                Portefeuille.app.service("RecherchePortefeuilleService", RecherchePortefeuilleService);
            })(RecherchePortefeuille = Rest.RecherchePortefeuille || (Rest.RecherchePortefeuille = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var RelationCommerciale;
            (function (RelationCommerciale) {
                "use strict";
                var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                /**
                 * Service permettant de récupérer les information du corporate
                 */
                var RelationCommercialeService = (function () {
                    //constructeur
                    function RelationCommercialeService(serviceAgentExtended) {
                        this.serviceAgentExtended = serviceAgentExtended;
                    }
                    /**
                     * Méthode de récupération de la liste des relation eco et des clients avec certains indicateurs (/portefeuille/v1/relationCommerciale)
                     * @param query
                     */
                    RelationCommercialeService.prototype.getRelationCommerciale = function (query) {
                        RelationCommercialeService.logger.info(">>> Appel de la méthode : RelationCommercialeService.getRelationCommerciale <<<");
                        var requete = {
                            url: Portefeuille.Constantes.urlsRest.URL_REST_PORTEFEUILLEV1_RELATION_COMMERCIALE,
                            method: MyWay.Services.MethodEnum.POST,
                            withHeaders: true,
                            data: query,
                            responseType: MyWay.Services.ResponseTypeEnum.JSON
                        };
                        return this.serviceAgentExtended.sendRequest(requete);
                    };
                    RelationCommercialeService.CLASS_NAME = "RelationCommercialeService";
                    RelationCommercialeService.logger = loggerClass(RelationCommercialeService.CLASS_NAME);
                    //Injection des dépendances
                    RelationCommercialeService.$inject = [
                        Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended
                    ];
                    return RelationCommercialeService;
                }());
                Portefeuille.app.service(RelationCommercialeService.CLASS_NAME, RelationCommercialeService);
            })(RelationCommerciale = Rest.RelationCommerciale || (Rest.RelationCommerciale = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var SuiviComplementaire;
            (function (SuiviComplementaire) {
                "use strict";
                var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                /**
                 * Service permettant de récupérer les client expertise
                 */
                var SuiviComplementaireService = (function () {
                    //constructeur
                    function SuiviComplementaireService(serviceAgentExtended) {
                        this.serviceAgentExtended = serviceAgentExtended;
                    }
                    /**
                     * Méthode de récupération de la liste des relation eco et des clients avec certains indicateurs (/portefeuille/v1/relationCommerciale)
                     * @param query
                     */
                    SuiviComplementaireService.prototype.getClientsSuiviComplementaire = function (query) {
                        SuiviComplementaireService.logger.info(">>> Appel de la méthode : SuiviComplementaireService.getClientsSuiviComplementaire <<<");
                        var requete = {
                            url: Portefeuille.Constantes.urlsRest.URL_REST_PORTEFEUILLEV1_SUIVI_COMPLEMENTAIRE,
                            method: MyWay.Services.MethodEnum.POST,
                            withHeaders: true,
                            data: query,
                            responseType: MyWay.Services.ResponseTypeEnum.JSON
                        };
                        return this.serviceAgentExtended.sendRequest(requete);
                    };
                    SuiviComplementaireService.CLASS_NAME = "SuiviComplementaireService";
                    SuiviComplementaireService.logger = loggerClass(SuiviComplementaireService.CLASS_NAME);
                    //Injection des dépendances
                    SuiviComplementaireService.$inject = [
                        Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended
                    ];
                    return SuiviComplementaireService;
                }());
                Portefeuille.app.service(SuiviComplementaireService.CLASS_NAME, SuiviComplementaireService);
            })(SuiviComplementaire = Rest.SuiviComplementaire || (Rest.SuiviComplementaire = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
/**
 *
 */
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var PropositioncorporateV1;
            (function (PropositioncorporateV1) {
                var StatPortefeuilleEds;
                (function (StatPortefeuilleEds) {
                    "use strict";
                    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                    /**
                     *
                     */
                    var StatPortefeuilleEdsService = (function () {
                        /**
                         * Constructeur
                         * @param serviceAgentExtended
                         */
                        function StatPortefeuilleEdsService(serviceAgentExtended) {
                            this.serviceAgentExtended = serviceAgentExtended;
                        }
                        /**
                         * obtiens les données
                         * @param query
                         */
                        StatPortefeuilleEdsService.prototype.getStatPortefeuilleEds = function (query) {
                            StatPortefeuilleEdsService.logger.info(">>> Appel de la méthode : StatPortefeuilleEdsService.getStatPortefeuilleEds <<<");
                            var requete = {
                                url: Portefeuille.Constantes.urlsRest.URL_REST_PROPOSITIONCORPORATEV1_STAT_PORTEFEUILLE_EDS,
                                method: MyWay.Services.MethodEnum.POST,
                                withHeaders: true,
                                data: query,
                                responseType: MyWay.Services.ResponseTypeEnum.JSON
                            };
                            return this.serviceAgentExtended.sendRequest(requete);
                        };
                        StatPortefeuilleEdsService.CLASS_NAME = "StatPortefeuilleEdsService";
                        StatPortefeuilleEdsService.logger = loggerClass(StatPortefeuilleEdsService.CLASS_NAME);
                        //Injection des dépendances
                        StatPortefeuilleEdsService.$inject = [
                            Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended
                        ];
                        return StatPortefeuilleEdsService;
                    }());
                    Portefeuille.app.service("StatPortefeuilleEdsService", StatPortefeuilleEdsService);
                })(StatPortefeuilleEds = PropositioncorporateV1.StatPortefeuilleEds || (PropositioncorporateV1.StatPortefeuilleEds = {}));
            })(PropositioncorporateV1 = Rest.PropositioncorporateV1 || (Rest.PropositioncorporateV1 = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var Flux;
            (function (Flux) {
                "use strict";
                var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                /**
                 * Service permettant de récupérer une liste donnees flux
                 */
                var FluxService = (function () {
                    //constructeur
                    function FluxService(serviceAgentExtended, $q) {
                        this.serviceAgentExtended = serviceAgentExtended;
                        this.$q = $q;
                    }
                    /**
                     * Méthode de récupération de la liste des donnees flux
                     * @param query
                     */
                    FluxService.prototype.getFlux = function (query) {
                        FluxService.logger.info(">>> Appel de la méthode : FluxService.getFlux <<<");
                        var requete = {
                            url: Portefeuille.Constantes.urlsRest.URL_REST_PORTEFEUILLEV1_CLIENT,
                            method: MyWay.Services.MethodEnum.POST,
                            withHeaders: true,
                            data: query,
                            responseType: MyWay.Services.ResponseTypeEnum.JSON
                        };
                        return this.serviceAgentExtended.sendRequest(requete);
                    };
                    FluxService.CLASS_NAME = "FluxService";
                    FluxService.logger = loggerClass(FluxService.CLASS_NAME);
                    //Injection des dépendances
                    FluxService.$inject = [
                        Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended,
                        Portefeuille.Constantes.Inject.Angular.$q
                    ];
                    return FluxService;
                }());
                Portefeuille.app.service(FluxService.CLASS_NAME, FluxService);
            })(Flux = Rest.Flux || (Rest.Flux = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

/// <reference path="../../../constantes/inject-constantes.ts" />
var Portefeuille;
(function (Portefeuille) {
    var Services;
    (function (Services) {
        var Rest;
        (function (Rest) {
            var StructureV2;
            (function (StructureV2) {
                var edsNiveauInferieur;
                (function (edsNiveauInferieur) {
                    "use strict";
                    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;
                    var EdsNiveauInferieurService = (function () {
                        //constructeur
                        function EdsNiveauInferieurService(serviceAgentExtended) {
                            this.serviceAgentExtended = serviceAgentExtended;
                        }
                        EdsNiveauInferieurService.prototype.getEdsNiveauInferieur = function (query) {
                            EdsNiveauInferieurService.logger.info(">>> Appel de la méthode : EdsNiveauInferieurService.getEdsNiveauInferieur <<<");
                            var requete = {
                                url: Portefeuille.Constantes.urlsRest.URL_REST_STRUCTUREV2_EDS_NIVEAU_INFERIEURE,
                                method: MyWay.Services.MethodEnum.GET,
                                withHeaders: true,
                                params: query,
                                responseType: MyWay.Services.ResponseTypeEnum.JSON
                            };
                            return this.serviceAgentExtended.sendRequest(requete);
                        };
                        EdsNiveauInferieurService.CLASS_NAME = "EdsNiveauInferieurService";
                        EdsNiveauInferieurService.logger = loggerClass(EdsNiveauInferieurService.CLASS_NAME);
                        //Injection des dépendances
                        EdsNiveauInferieurService.$inject = [
                            Portefeuille.Constantes.Inject.MyWay.serviceAgentExtended
                        ];
                        return EdsNiveauInferieurService;
                    }());
                    Portefeuille.app.service("EdsNiveauInferieurService", EdsNiveauInferieurService);
                })(edsNiveauInferieur = StructureV2.edsNiveauInferieur || (StructureV2.edsNiveauInferieur = {}));
            })(StructureV2 = Rest.StructureV2 || (Rest.StructureV2 = {}));
        })(Rest = Services.Rest || (Services.Rest = {}));
    })(Services = Portefeuille.Services || (Portefeuille.Services = {}));
})(Portefeuille || (Portefeuille = {}));

angular.module("portefeuille").run(["$templateCache", function($templateCache) {$templateCache.put("vues/bilan-revue-vue.html","<p>Vue Bilan Revue</p>");
$templateCache.put("vues/bilan-revues-portefeuille-vue.html","<p>Vue Bilan Revues Portefeuille</p>");
$templateCache.put("vues/clients-vue.html","<!-- Contenu de la page -->\r\n<section class=\"container-fluid\" id=\"contenu\">\r\n    <br>\r\n    <div class=\"col-lg-12 col-md-12 mw-bloc-contenu\" id=\"bloc-contenu-message-choix-ptf\" ng-if=\"!clientsCtrl.portefeuilleService.aPortefeuillesAffiche() && clientsCtrl.portefeuilleService.aPortefeuille()\">\r\n        <span id=\"sp-message-choix-ptf\" ng-bind=\"clientsCtrl.messageChoixPtf\"></span>\r\n    </div>\r\n    <div class=\"col-lg-12 col-md-12 mw-bloc-contenu\" id=\"bloc-contenu-message-aucun-ptf\" ng-if=\"!clientsCtrl.portefeuilleService.aPortefeuille()\">\r\n        <span id=\"sp-message-aucun-ptf\" ng-bind=\"clientsCtrl.messageAucunPtf\"></span>\r\n    </div>\r\n\r\n    <div ng-if=\"clientsCtrl.portefeuilleService.aPortefeuillesAffiche()\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"col-md-6\">\r\n                <div class=\"alert alert-warning\" ng-show=\"clientsCtrl.isAfficherMessageLimiteClientAtteinte\">\r\n                    <span class=\"icon itce-information-circle alert-warning\" aria-hidden=\"true\"></span>\r\n                    <span aria-hidden=\"false\" ng-bind=\"clientsCtrl.messageLimiteClientsAtteinte\"></span>\r\n                    <a id=\"ancre-ouvrir-forcage\" href=\"javascript:;\" ng-click=\"clientsCtrl.ouvrirChoixForcage()\" ng-show=\"clientsCtrl.afficherModifierChoix()\">Modifier mon choix.</a>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-md-6\">\r\n                <ul class=\"list-inline pull-right\">\r\n                    <li class=\"mw-radio-btn\">\r\n                        <input type=\"radio\" id=\"radio-btn-vue-relation-eco\" name=\"radio-btn-vue-relation-eco\" value=\"VRE\" ng-model=\"clientsCtrl.radioBoutonEstVueClient\" ng-change=\"clientsCtrl.affichageVueRelationEco()\" ng-disabled=\"clientsCtrl.estEnForcageTypeClientsOuProspects()\">\r\n                        <label for=\"radio-btn-vue-relation-eco\" title=\"Accéder à la vue relations économiques\">Relations économiques</label>\r\n                    </li>\r\n                    <li class=\"mw-radio-btn no-padding-right\">\r\n                        <input type=\"radio\" id=\"radio-btn-vue-clients\" name=\"radio-btn-vue-clients\" value=\"VC\" ng-model=\"clientsCtrl.radioBoutonEstVueClient\" ng-change=\"clientsCtrl.affichageVueClient()\">\r\n                        <label for=\"radio-btn-vue-clients\" title=\"Accéder à la vue clients\">Clients / Prospects</label>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-md-12\">\r\n            <!-- BLOC DE CONTENU -->\r\n            <div class=\"bloc col-sm-12\">\r\n                <div class=\"titre-bloc\">\r\n                    <span class=\"col-sm-6 mw-troncature\">\r\n                        <span ng-hide=\"clientsCtrl.isAccesDepuisBlocRevue\" ng-bind=\"clientsCtrl.getNomPanier()\"></span>\r\n                        <span ng-show=\"clientsCtrl.isAccesDepuisBlocRevue\">Ma sélection d\'indicateurs: \"Revue\"</span>\r\n                    </span>\r\n                    <div ng-hide=\"clientsCtrl.isAccesDepuisBlocRevue\" class=\"col-md-3 pull-right\">\r\n                        <button class=\"btn btn-block btn-contextuel mw-troncature\" id=\"bouton-indicateurs-v2\" ng-click=\"clientsCtrl.accederAuxIndicateursV2()\" ng-disabled=\"clientsCtrl.estEnForcageTypeTout()\">\r\n                            Personnaliser les indicateurs\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"clearfix contenu\">\r\n                    <mw-chargement-long id=\"id-chargement-long\" etat=\"clientsCtrl.etatChargementLong\" visible=\"clientsCtrl.chargementEnCours\">\r\n                        <div class=\"panel-body\">\r\n                            <div class=\"col-md-12 form-group\">\r\n                                <form class=\"form-horizontal\" name=\"form\">\r\n                                    <div class=\"col-md-2\">\r\n                                        <button class=\"btn btn-block btn-default mw-troncature no-padding-left\" id=\"bouton-filtrer\" ng-click=\"clientsCtrl.accederAuxFiltres()\" ng-show=\"clientsCtrl.listeRelationEco.length !== 0\">\r\n                                            <span ng-show=\"clientsCtrl.afficherFiltreActif()\" class=\"icon itce-fa-check icon-avec-filtre-bouton\" aria-hidden=\"true\"></span>\r\n                                            <span class=\"icon itce-filter\" aria-hidden=\"true\"></span>\r\n                                            Filtrer\r\n                                        </button>\r\n                                    </div>\r\n                                    <div class=\"col-md-10\">\r\n                                        <mw-pf-detail-filtre liste-filtres=\"clientsCtrl.listeFiltres\" ng-if=\"clientsCtrl.afficherFiltreActif()\" id=\"id-detail-filtre\"></mw-pf-detail-filtre>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                            <mw-pf-ligne-relation-eco relation-economique=\"clientsCtrl.choixRelationEco\" liste-indicateurs-tableau=\"clientsCtrl.listeIndicateursTableau\" ng-attr-id=\"pf-ligne-relation-eco\" ng-if=\"clientsCtrl.afficherLigneRelationEco()\"></mw-pf-ligne-relation-eco>\r\n                            <div class=\"col-md-12 form-group\" ng-show=\"clientsCtrl.afficherLigneStatsEtTableau()\">\r\n                                <div class=\"col-md-7\">\r\n                                    <span class=\"lbl-nb-clients\" ng-bind=\"clientsCtrl.getTxtRatioFiltrage()\"></span>\r\n                                </div>\r\n                                <div class=\"col-md-4 pull-right\">\r\n                                    <span class=\"lbl-pagination\" ng-bind=\"clientsCtrl.getTxtEtatPagination()\"></span>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-md-12 form-group\" ng-show=\"!clientsCtrl.afficherLigneStatsEtTableau()\">&nbsp;</div>\r\n                            <mw-table-opefi id=\"tab-relation\" class=\"tab-relations\" options=\"clientsCtrl.tableauRelations\" ng-if=\"clientsCtrl.afficherTableauRelation()\"></mw-table-opefi>\r\n                            <mw-table-opefi id=\"tab-client\" class=\"tab-clients\" options=\"clientsCtrl.tableauClients\" ng-if=\"clientsCtrl.afficherTableauClients()\"></mw-table-opefi>\r\n                        </div>\r\n                    </mw-chargement-long>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n\r\n</section>\r\n\r\n<footer class=\"row mw-footer-fixed-bottom\">\r\n    <div class=\"overlay-footer\" ng-class=\"{\'display-block\':(indexCtrl.ouvertureVoletChoixPortefeuille)}\"></div>\r\n    <div class=\"col-md-12\">\r\n        <div class=\"col-md-2 col-sm-3\" ng-show=\"!clientsCtrl.afficherLigneRelationEco()\">\r\n            <button class=\"btn btn-block btn-zone mw-troncature\" aria-label=\"Retour Accueil\" ng-click=\"clientsCtrl.retourAccueil()\" id=\"bouton-retour-accueil\">\r\n                <span class=\"icon itce-chevron-left\" aria-hidden=\"true\"></span>\r\n                <span>Retour Accueil</span>\r\n            </button>\r\n        </div>\r\n        <div class=\"col-md-2\" ng-show=\"clientsCtrl.estAfficheBtnRetour()\">\r\n            <button class=\"btn btn-block btn-zone mw-troncature\" aria-label=\"Retour\" ng-click=\"clientsCtrl.retourVueRelEco()\" id=\"bouton-retour\">\r\n                <span class=\"icon itce-chevron-left\" aria-hidden=\"true\"></span>\r\n                <span>Retour</span>\r\n            </button>\r\n        </div>\r\n        <div class=\"col-md-2 pull-right\" ng-show=\"clientsCtrl.estAfficherBoutonSynthese()\">\r\n            <button class=\"btn btn-block btn-zone mw-troncature\" aria-label=\"Synthèse client\" ng-click=\"clientsCtrl.accederSyntheseClient()\" id=\"bouton-acces-synthese-cli\" ng-disabled=\"clientsCtrl.estDisabledBtnEffectuerRevue()\">\r\n                <span class=\"icon itce-share-square\" aria-hidden=\"true\"></span>\r\n                <span>Synthèse client</span>\r\n            </button>\r\n        </div>\r\n        <div class=\"col-md-2 pull-right\" ng-show=\"clientsCtrl.estAfficheBtnEffectuerRevue()\">\r\n            <button class=\"btn btn-block btn-zone mw-troncature\" aria-label=\"Effectuer la revue\" ng-click=\"clientsCtrl.effectuerRevue()\" id=\"bouton-effectuer-revue\" ng-disabled=\"clientsCtrl.estDisabledBtnEffectuerRevue()\">\r\n                <span>Effectuer la revue</span>\r\n            </button>\r\n        </div>\r\n        <div class=\"col-md-2 pull-right\" ng-show=\"clientsCtrl.estAfficheBtnVoirProduits()\">\r\n            <button class=\"btn btn-block btn-zone mw-troncature\" aria-label=\"Voir les produits\" ng-click=\"clientsCtrl.consulterProduits()\" id=\"bouton-consulter-produits\" ng-disabled=\"clientsCtrl.estDisabledBoutonVoirProduits()\">\r\n                <span>Voir les produits</span>\r\n            </button>\r\n        </div>\r\n        <div class=\"col-md-2 pull-right\" ng-show=\"clientsCtrl.estAfficheBtnExporter()\">\r\n            <button class=\"btn btn-block btn-zone mw-troncature\" aria-label=\"Exporter la sélection\" ng-click=\"clientsCtrl.exporter()\" id=\"exporter-produits\">\r\n                <span>Exporter la sélection</span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</footer>");
$templateCache.put("vues/detail-client-vue.html","<p>Vue détail client</p>");
$templateCache.put("vues/page-non-trouvee.html","<h1>Cette application n\'est pas encore accessible, elle sera disponible dans une prochaine version.</h1>");
$templateCache.put("vues/portefeuille-vue.html","<!-- Contenu de la page -->\r\n<section class=\"container-fluid portefeuille-vue\" id=\"contenu\">\r\n    <br>\r\n    <div ng-show=\"!portefeuilleCtrl.portefeuilleService.aPortefeuille() || !portefeuilleCtrl.portefeuilleService.aPortefeuillesAffiche()\">\r\n        <div class=\"overlay-info\"></div>\r\n        <div class=\"overlay-message\">\r\n            <div ng-if=\"!portefeuilleCtrl.portefeuilleService.aPortefeuillesAffiche() && portefeuilleCtrl.portefeuilleService.aPortefeuille()\">\r\n                <span id=\"sp-message-choix-ptf\" ng-bind=\"portefeuilleCtrl.messageChoixPtf\"></span>\r\n            </div>\r\n            <div ng-if=\"!portefeuilleCtrl.portefeuilleService.aPortefeuille()\">\r\n                <span class=\"icon itce-warning\" aria-hidden=\"true\">\r\n                </span>\r\n                &nbsp;\r\n                <span id=\"sp-message-aucun-ptf\" ng-bind=\"portefeuilleCtrl.messageAucunPtf\">\r\n                </span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"ligne-panel-2\" ng-show=\"portefeuilleCtrl.portefeuilleService.aPortefeuilleExpertAffiche()\">\r\n        <mw-pf-panel-niveau-2 id=\"panel-portefeuille\" class=\"panel-portefeuille col-md-12 col-sm-12 content-mw-pf-panel-niveau-2\" titre=\"Portefeuille - Domaine d\'expertise\" icone=\"itce-folder\" config-bouton=\"portefeuilleCtrl.configBoutonDetailsPortefeuilleExpert\">\r\n            <div class=\"col-sm-12\">\r\n                <div class=\"col-sm-12 mw-bloc-contenu\">\r\n                    <span ng-bind=\"portefeuilleCtrl.messageChoixPtfExpert\"></span><br>\r\n                    <ul class=\"liste-ptf-expert\">\r\n                        <li ng-repeat=\"lib in portefeuilleCtrl.portefeuilleService.getListeLibelleSuiviParComplementairePortefeuillesExpertVisu() track by $index\" ng-bind=\"lib\"></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </mw-pf-panel-niveau-2>\r\n    </div>\r\n    <div class=\"ligne-panel-2\" ng-show=\"!portefeuilleCtrl.portefeuilleService.aPortefeuilleExpertAffiche()\">\r\n        <!-- Panel Portefeuille -->\r\n        <mw-pf-panel-niveau-2 id=\"panel-portefeuille-expert\" class=\"panel-portefeuille col-md-8 col-sm-12 content-mw-pf-panel-niveau-2\" titre=\"Portefeuille(s)\" icone=\"itce-folder\" config-bouton=\"portefeuilleCtrl.configBoutonDetailsPortefeuille\">\r\n            <div class=\"col-sm-12\" mw-chargement=\"portefeuilleCtrl.chargementPtfEnCours\">\r\n                <div class=\"col-sm-12 mw-bloc-contenu\" ng-if=\"!portefeuilleCtrl.isInitPtf\">\r\n                    <span ng-bind=\"portefeuilleCtrl.messageInitPtf\"></span>\r\n                </div>\r\n                <div ng-if=\"portefeuilleCtrl.isInitPtf\">\r\n                    <div class=\"col-sm-12 container-badge\" ng-class=\"{\'col-md-12\': portefeuilleCtrl.estVueMultiSuiviPar, \'col-md-6\': !portefeuilleCtrl.estVueMultiSuiviPar}\">\r\n                        <div class=\"bloc-graphique bas-du-bloc\">\r\n                            <mw-pf-diagramme-colonne id=\"colonne-rel\" svg-id=\"\'svg-colonne-rel\'\" config=\"portefeuilleCtrl.configDiagrammeColonnePortefeuille\"></mw-pf-diagramme-colonne>\r\n                            <div class=\"bloc-legende bloc-portefeuille\">\r\n                                <mw-pf-puce-legende ng-repeat=\"config in portefeuilleCtrl.configDiagrammeColonnePortefeuille track by $index\" class=\"legende legende-portefeuille\" ng-attr-id=\"puce-diagramme-bar-{{$index}}\" intitule=\"{{config.intitule}}\" couleur=\"{{config.couleur}}\" sous-couleur=\"{{config.couleurSousValeur}}\" sous-intitule=\"{{config.sousIntitule}}\">\r\n                                </mw-pf-puce-legende>\r\n                            </div>\r\n                            <div class=\"text-align-right\">\r\n                                <span class=\"margin-right-1-rem\">\r\n                                    <a role=\"button\" id=\"action-details-portfeuille\" href=\"javascript:;\" ng-click=\"portefeuilleCtrl.debrancherVersDetailsPorteuille()\" ng-show=\"portefeuilleCtrl.estVueMultiSuiviPar\">\r\n                                        Voir détails\r\n                                    </a>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-colonne-nb-prospects\" intitule=\"portefeuilleCtrl.dataIndicateurClientsPmeEsi.intitule\" valeur=\"portefeuilleCtrl.dataIndicateurClientsPmeEsi.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-colonne-nb-clients-pe-et-pees\" intitule=\"portefeuilleCtrl.dataIndicateurClientsPEetPEES.intitule\" is-sous-intitule=\"portefeuilleCtrl.dataIndicateurClientsPEetPEES.isSousIntitule\" valeur=\"portefeuilleCtrl.dataIndicateurClientsPEetPEES.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-colonne-nb-clients-me-et-mees\" intitule=\"portefeuilleCtrl.dataIndicateurClientsMEetMEES.intitule\" is-sous-intitule=\"portefeuilleCtrl.dataIndicateurClientsMEetMEES.isSousIntitule\" valeur=\"portefeuilleCtrl.dataIndicateurClientsMEetMEES.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-colonne-nb-clients-ge-et-gees\" intitule=\"portefeuilleCtrl.dataIndicateurClientsGEetGEES.intitule\" is-sous-intitule=\"portefeuilleCtrl.dataIndicateurClientsGEetGEES.isSousIntitule\" valeur=\"portefeuilleCtrl.dataIndicateurClientsGEetGEES.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-badge-nb-entrees-rel-annee\" intitule=\"portefeuilleCtrl.dataIndicateurClientsPro.intitule\" valeur=\"portefeuilleCtrl.dataIndicateurClientsPro.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-badge-nb-relations\" intitule=\"portefeuilleCtrl.dataIndicateurAutres.intitule\" valeur=\"portefeuilleCtrl.dataIndicateurAutres.valeur | number\"></mw-pf-indicateur-badge>\r\n                    </div>\r\n                    <div class=\"col-md-6 col-sm-12 container-badge\" ng-if=\"!portefeuilleCtrl.estVueMultiSuiviPar\">\r\n                        <div class=\"bloc-graphique height-100-pourcent\">\r\n                            <mw-pf-diagramme-donut id=\"donut-seg-rel\" svg-id=\"\'svg-donut-seg-rel\'\" config=\"portefeuilleCtrl.configDonutSegRel\"></mw-pf-diagramme-donut>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </mw-pf-panel-niveau-2>\r\n        <!-- Panel Rendez-vous -->\r\n        <mw-pf-panel-niveau-2 id=\"panel-rendez-vous\" class=\"panel-rendez-vous col-md-4 col-sm-12 content-mw-pf-panel-niveau-2\" titre=\"{{::portefeuilleCtrl.titrePanelRdv}}\" titre2=\"{{::portefeuilleCtrl.titrePanelRdv2}}\" icone=\"itce-calendar pull-left\">\r\n            <div class=\"col-sm-12\" mw-chargement=\"portefeuilleCtrl.chargementRdvEnCours\">\r\n                <div class=\"col-sm-12 mw-bloc-contenu\" ng-show=\"!portefeuilleCtrl.isInitRdv\">\r\n                    <span ng-bind=\"portefeuilleCtrl.messageInitRdv\"></span>\r\n                </div>\r\n                <div ng-if=\"portefeuilleCtrl.isInitRdv\">\r\n                    <div class=\"col-md-12 col-sm-12 container-badge\">\r\n                        <mw-pf-indicateur-badge id=\"indicateur-badge-nb-rdv-annee-en-cours\" intitule=\"portefeuilleCtrl.dataIndicateurNbRdvRealisesAnneeEnCours.intitule\" valeur=\"portefeuilleCtrl.dataIndicateurNbRdvRealisesAnneeEnCours.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-badge-nb-clients-annee-en-cours\" intitule=\"portefeuilleCtrl.dataIndicateurNbRdvClientsRealisesAnneeEnCours.intitule\" is-sous-intitule=\"portefeuilleCtrl.dataIndicateurNbRdvClientsRealisesAnneeEnCours.isSousIntitule\" valeur=\"portefeuilleCtrl.dataIndicateurNbRdvClientsRealisesAnneeEnCours.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-badge-nb-prospects-realises-annee-en-cours\" intitule=\"portefeuilleCtrl.dataIndicateurNbRdvProspectsRealisesAnneeEnCours.intitule\" is-sous-intitule=\"portefeuilleCtrl.dataIndicateurNbRdvProspectsRealisesAnneeEnCours.isSousIntitule\" valeur=\"portefeuilleCtrl.dataIndicateurNbRdvProspectsRealisesAnneeEnCours.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-badge-nb-relations-economiques-annee-en-cours\" intitule=\"portefeuilleCtrl.dataIndicateurNbRelationsEconomiquesAnneeEnCours.intitule\" valeur=\"portefeuilleCtrl.dataIndicateurNbRelationsEconomiquesAnneeEnCours.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-badge-nb-prospects-vus-annee-en-cours\" intitule=\"portefeuilleCtrl.dataIndicateurNbRdvProspectsVusAnneeEnCours.intitule\" valeur=\"portefeuilleCtrl.dataIndicateurNbRdvProspectsVusAnneeEnCours.valeur | number\"></mw-pf-indicateur-badge>\r\n                    </div>\r\n                    <div class=\"col-md-12 col-sm-12 container-badge\">\r\n                        <div class=\"bloc-graphique height-100-pourcent text-align-right\">\r\n                            <div class=\"bloc-en-tete\">\r\n                                <p class=\"titre\" id=\"titre-taux-visite\" ng-bind=\"portefeuilleCtrl.configPourcentageVisites.titre\"></p>\r\n                            </div>\r\n                            <div class=\"conteneur-pourcentage\">\r\n                                <mw-percent-display id=\"pourcent-revue-ptf\" percent=\"{{portefeuilleCtrl.configPourcentageVisites.pourcentageUn}}\" font-size-percent=\"70\">\r\n                                </mw-percent-display>\r\n                            </div>\r\n                            <span class=\"margin-right-1-rem\">\r\n                                <a role=\"button\" id=\"action-details-taux-visite\" href=\"javascript:;\" ng-click=\"portefeuilleCtrl.debrancherVersDetailsTauxVisite()\" ng-show=\"portefeuilleCtrl.estVueMultiSuiviPar\">\r\n                                    Voir détails\r\n                                </a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </mw-pf-panel-niveau-2>\r\n    </div>\r\n\r\n    <div class=\"ligne-panel-2\" ng-class=\"{\'ordre-bloc-inverse\': !portefeuilleCtrl.estHabiliteBlocRentabilite && portefeuilleCtrl.estHabiliteBlocRevue}\" ng-show=\"!portefeuilleCtrl.portefeuilleService.aPortefeuilleExpertAffiche()\">\r\n        <!-- Panel Rentabilité -->\r\n        <mw-pf-panel-niveau-2 id=\"panel-rentabilite\" class=\"panel-rentabilite col-md-8 col-sm-12 content-mw-pf-panel-niveau-2\" titre=\"Rentabilité\" icone=\"itce-eur\" ng-show=\"portefeuilleCtrl.estHabiliteBlocRentabilite\">\r\n            <div class=\"col-md-12\" mw-chargement=\"portefeuilleCtrl.chargementRentabEnCours\">\r\n                <div class=\"col-md-12 mw-bloc-contenu\" ng-if=\"!portefeuilleCtrl.isInitRentab\">\r\n                    <span ng-bind=\"portefeuilleCtrl.messageInitRentab\"></span>\r\n                </div>\r\n                <div class=\"bloc-wrap-stretch\" ng-if=\"portefeuilleCtrl.isInitRentab\">\r\n                    <div class=\"container-badge\" ng-class=\"{\'col-md-12\': portefeuilleCtrl.estVueMultiSuiviPar, \'col-md-6\': !portefeuilleCtrl.estVueMultiSuiviPar}\">\r\n                        <div class=\"bloc-graphique height-100-pourcent bas-du-bloc\">\r\n                            <div class=\"bloc-en-tete\">\r\n                                <p class=\"titre\">PNB (IPADE)</p>\r\n                                <mw-pf-indicateur-fleche id=\"indicateur-fleche-pnb\" class=\"margin-left-auto\" config=\"portefeuilleCtrl.configFlecheRentabilite\"></mw-pf-indicateur-fleche>\r\n                            </div>\r\n                            <mw-pf-diagramme-colonne id=\"colonne-rent\" svg-id=\"\'svg-colonne-rent\'\" config=\"portefeuilleCtrl.configDiagrammeColonneRentabilite\"></mw-pf-diagramme-colonne>\r\n                            <div class=\"bloc-legende bloc-pnb\">\r\n                                <mw-pf-puce-legende ng-repeat=\"config in portefeuilleCtrl.configDiagrammeColonneRentabilite track by $index\" class=\"legende legende-pnb\" ng-attr-id=\"puce-{{$index}}\" intitule=\"{{config.intitule}}\" couleur=\"{{config.couleur}}\" affichage-puce-legende-actif=\"true\"></mw-pf-puce-legende>\r\n                            </div>\r\n                            <div class=\"text-align-right align-bas-droite\">\r\n                                <span class=\"margin-right-1-rem\">\r\n                                    <a role=\"button\" id=\"action-details-rentabilite-pnb\" href=\"javascript:;\" ng-click=\"portefeuilleCtrl.debrancherVersDetailsRentabilitePNB()\" ng-show=\"portefeuilleCtrl.estVueMultiSuiviPar\">\r\n                                        Voir détails\r\n                                    </a>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-md-6 container-badge\" ng-if=\"!portefeuilleCtrl.estVueMultiSuiviPar\">\r\n                        <div class=\"bloc-graphique height-100-pourcent\">\r\n                            <div class=\"bloc-en-tete\">\r\n                                <p class=\"titre\" ng-bind=\"portefeuilleCtrl.configPourcentageRentabilite.titre\"></p>\r\n                            </div>\r\n                            <div class=\"conteneur-pourcentage\" ng-if=\"!portefeuilleCtrl.afficheErreurPoidsPNB\">\r\n                                <mw-percent-display id=\"pourcentage-rentabilite\" percent=\"{{::portefeuilleCtrl.configPourcentageRentabilite.pourcentageUn}}\" font-size-percent=\"70\">\r\n                                </mw-percent-display>\r\n                            </div>\r\n                            <div class=\"text-center\" ng-if=\"portefeuilleCtrl.afficheErreurPoidsPNB\">\r\n                                <p>\r\n                                    <span class=\"icon itce-warning\" aria-hidden=\"true\">\r\n                                    </span> Calcul non pertinent, PNB total négatif\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </mw-pf-panel-niveau-2>\r\n        <!-- Panel Revue Portefeuille -->\r\n        <mw-pf-panel-niveau-2 id=\"panel-revue-portefeuille\" class=\"panel-revue-portefeuille col-md-4 col-sm-12 content-mw-pf-panel-niveau-2\" titre=\"Revue Portefeuille\" icone=\"itce-pencil\" ng-show=\"portefeuilleCtrl.estHabiliteBlocRevue\" config-bouton=\"portefeuilleCtrl.configBoutonAccederRevuePortefeuille\">\r\n            <div class=\"col-md-12\" mw-chargement=\"portefeuilleCtrl.chargementRevuePtfEnCours\">\r\n                <div class=\"col-md-12 mw-bloc-contenu\" ng-if=\"!portefeuilleCtrl.isInitRevuePtf\">\r\n                    <span ng-bind=\"portefeuilleCtrl.messageInitRevuePtf\"></span>\r\n                </div>\r\n                <div ng-if=\"portefeuilleCtrl.isInitRevuePtf\">\r\n                    <div class=\"col-md-12 container-badge\">\r\n                        <mw-pf-indicateur-badge id=\"indicateur-badge-nb-produits-a-equiper\" intitule=\"portefeuilleCtrl.dataIndicateurNbProduitsAEquiper.intitule\" debranchement-lisa=\"portefeuilleCtrl.dataIndicateurNbProduitsAEquiper.debranchementLisa\" debranchement-local=\"portefeuilleCtrl.dataIndicateurNbProduitsAEquiper.debranchementLocal\" show-zero=\"false\" valeur=\"portefeuilleCtrl.dataIndicateurNbProduitsAEquiper.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-badge-nb-produits-appetences\" ng-show=\"portefeuilleCtrl.afficheAppetencesProduits\" intitule=\"portefeuilleCtrl.dataIndicateurNbProduitsAppetence.intitule\" show-zero=\"false\" debranchement-lisa=\"portefeuilleCtrl.dataIndicateurNbProduitsAppetence.debranchementLisa\" debranchement-local=\"portefeuilleCtrl.dataIndicateurNbProduitsAppetence.debranchementLocal\" valeur=\"portefeuilleCtrl.dataIndicateurNbProduitsAppetence.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-badge-nb-affaires-en-cours\" ng-show=\"portefeuilleCtrl.estHabiliteConsultAffaires\" intitule=\"portefeuilleCtrl.dataIndicateurNbAffairesEnCours.intitule\" debranchement-lisa=\"portefeuilleCtrl.dataIndicateurNbAffairesEnCours.debranchementLisa\" debranchement-local=\"portefeuilleCtrl.dataIndicateurNbAffairesEnCours.debranchementLocal\" show-zero=\"true\" valeur=\"portefeuilleCtrl.dataIndicateurNbAffairesEnCours.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-badge-nb-proposition-en-cours\" ng-show=\"portefeuilleCtrl.estHabiliteConsultPropositions\" intitule=\"portefeuilleCtrl.dataIndicateurNbPropositionsEnCours.intitule\" debranchement-lisa=\"portefeuilleCtrl.dataIndicateurNbPropositionsEnCours.debranchementLisa\" debranchement-local=\"portefeuilleCtrl.dataIndicateurNbPropositionsEnCours.debranchementLocal\" show-zero=\"true\" valeur=\"portefeuilleCtrl.dataIndicateurNbPropositionsEnCours.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-badge-nb-clients-a-activer\" intitule=\"portefeuilleCtrl.dataIndicateurNbClientsAActiver.intitule\" debranchement-lisa=\"portefeuilleCtrl.dataIndicateurNbClientsAActiver.debranchementLisa\" show-zero=\"false\" valeur=\"portefeuilleCtrl.dataIndicateurNbClientsAActiver.valeur | number\"></mw-pf-indicateur-badge>\r\n                        <mw-pf-indicateur-badge id=\"indicateur-badge-nb-clients-a-renegocier\" intitule=\"portefeuilleCtrl.dataIndicateurNbClientsARenegocier.intitule\" debranchement-lisa=\"portefeuilleCtrl.dataIndicateurNbClientsARenegocier.debranchementLisa\" show-zero=\"false\" valeur=\"portefeuilleCtrl.dataIndicateurNbClientsARenegocier.valeur | number\"></mw-pf-indicateur-badge>\r\n\r\n\r\n\r\n\r\n                    </div>\r\n                    <div class=\"col-md-12 container-badge\">\r\n                        <div class=\"bloc-graphique height-100-pourcent text-align-right\">\r\n                            <div class=\"bloc-en-tete\">\r\n                                <p class=\"titre\" ng-bind=\"portefeuilleCtrl.configPourcentagePortefeuilleRealise.titre\"></p>\r\n                            </div>\r\n                            <div class=\"conteneur-pourcentage\">\r\n                                <mw-percent-display id=\"pourcentage-portefeuille-realise\" percent=\"{{portefeuilleCtrl.configPourcentagePortefeuilleRealise.pourcentageUn}}\" font-size-percent=\"70\">\r\n                                </mw-percent-display>\r\n                            </div>\r\n                            <span class=\"margin-right-1-rem\">\r\n                                <a role=\"button\" id=\"action-details-revue-portefeuille\" href=\"javascript:;\" ng-click=\"portefeuilleCtrl.debrancherVersDetailsRevuePortfeuille()\" ng-show=\"portefeuilleCtrl.estVueMultiSuiviPar\">\r\n                                    Voir détails\r\n                                </a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </mw-pf-panel-niveau-2>\r\n        <!-- Panel Flux -->\r\n        <mw-pf-panel-niveau-2 id=\"panel-flux\" class=\"panel-flux col-md-8 col-sm-12 content-mw-pf-panel-niveau-2\" titre=\"Flux commerciaux\" icone=\"itce-eur\" ng-show=\"portefeuilleCtrl.estActifBlocFlux\">\r\n            <div class=\"col-md-12\" mw-chargement=\"portefeuilleCtrl.chargementFluxEnCours\">\r\n\r\n                <div class=\"col-md-12 mw-bloc-contenu\" ng-if=\"!portefeuilleCtrl.isInitFlux\">\r\n                    <span ng-bind=\"portefeuilleCtrl.messageInitFlux\"></span>\r\n                </div>\r\n\r\n                <div class=\"bloc-wrap-stretch\" ng-if=\"portefeuilleCtrl.isInitFlux\">\r\n                    <div class=\"col-md-6 container-badge\">\r\n                        <div class=\"bloc-graphique height-100-pourcent bas-du-bloc text-align-right\">\r\n                            <div class=\"bloc-en-tete\">\r\n                                <p class=\"titre\">Flux commerciaux créditeurs</p>\r\n                                <mw-pf-indicateur-fleche id=\"indicateur-fleche-flux-crediteurs\" class=\"margin-left-auto\" config=\"portefeuilleCtrl.configFlecheFluxCrediteurs\"></mw-pf-indicateur-fleche>\r\n                            </div>\r\n\r\n                            <mw-pf-diagramme-colonne id=\"colonne-flux-crediteurs\" svg-id=\"\'svg-colonne-flux-crediteurs\'\" config=\"portefeuilleCtrl.configDiagrammeColonneFluxCrediteurs\"></mw-pf-diagramme-colonne>\r\n                            <div class=\"bloc-legende bloc-flux\">\r\n                                <mw-pf-puce-legende ng-repeat=\"configFluxCrediteurs in portefeuilleCtrl.configDiagrammeColonneFluxCrediteurs track by $index\" class=\"legende legende-flux\" ng-attr-id=\"puce-{{$index}}-crediteurs\" intitule=\"{{configFluxCrediteurs.intitule}}\" couleur=\"{{configFluxCrediteurs.couleur}}\" affichage-puce-legende-actif=\"true\"></mw-pf-puce-legende>\r\n                            </div>\r\n                            <span class=\"margin-right-1-rem\">\r\n                                <a role=\"button\" id=\"action-details-flux-crediteur\" href=\"javascript:;\" ng-click=\"portefeuilleCtrl.debrancherVersDetailsFluxCrediteur()\" ng-show=\"portefeuilleCtrl.estVueMultiSuiviPar\">\r\n                                    Voir détails\r\n                                </a>\r\n                            </span>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"col-md-6 container-badge\">\r\n                        <div class=\"bloc-graphique height-100-pourcent bas-du-bloc text-align-right\">\r\n                            <div class=\"bloc-en-tete\">\r\n                                <p class=\"titre\">Flux commerciaux débiteurs</p>\r\n                                <mw-pf-indicateur-fleche id=\"indicateur-fleche-flux-debiteurs\" class=\"margin-left-auto\" config=\"portefeuilleCtrl.configFlecheFluxDebiteurs\"></mw-pf-indicateur-fleche>\r\n                            </div>\r\n\r\n                            <mw-pf-diagramme-colonne id=\"colonne-flux-debiteurs\" svg-id=\"\'svg-colonne-flux-debiteurs\'\" config=\"portefeuilleCtrl.configDiagrammeColonneFluxDebiteurs\"></mw-pf-diagramme-colonne>\r\n                            <div class=\"bloc-legende bloc-flux\">\r\n                                <mw-pf-puce-legende ng-repeat=\"configFluxDebiteurs in portefeuilleCtrl.configDiagrammeColonneFluxDebiteurs track by $index\" class=\"legende legende-flux\" ng-attr-id=\"puce-{{$index}}-debiteurs\" intitule=\"{{configFluxDebiteurs.intitule}}\" couleur=\"{{configFluxDebiteurs.couleur}}\" affichage-puce-legende-actif=\"true\"></mw-pf-puce-legende>\r\n                            </div>\r\n                            <span class=\"margin-right-1-rem\">\r\n                                <a role=\"button\" id=\"action-details-flux-debiteur\" href=\"javascript:;\" ng-click=\"portefeuilleCtrl.debrancherVersDetailsFluxDebiteur()\" ng-show=\"portefeuilleCtrl.estVueMultiSuiviPar\">\r\n                                    Voir détails\r\n                                </a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </mw-pf-panel-niveau-2>\r\n    </div>\r\n</section>\r\n<footer class=\"row mw-footer-fixed-bottom\">\r\n    <div class=\"overlay-footer\" ng-class=\"{\'display-block\':(indexCtrl.ouvertureVoletChoixPortefeuille)}\">\r\n    </div>\r\n    <div class=\"col-md-12\">\r\n        <div class=\"col-md-2\" ng-show=\"indexCtrl.estHabiliteChoixAgent\">\r\n            <button class=\"btn btn-block btn-default mw-troncature\" aria-label=\"Changer d\'agent\" ng-click=\"indexCtrl.afficherPopupChoixAgent()\" id=\"bouton-changer-agent\">\r\n                Changer d\'agent\r\n            </button>\r\n        </div>\r\n        <div class=\"col-md-2\" ng-show=\"indexCtrl.estHabiliteChoixEDS\">\r\n            <button class=\"btn btn-block btn-default mw-troncature\" aria-label=\"Choisir EDS\" ng-click=\"indexCtrl.afficherPopupChoixEds()\" id=\"bouton-choix-eds\">\r\n                Choisir l\'EDS\r\n            </button>\r\n        </div>\r\n    </div>\r\n</footer>");
$templateCache.put("vues/saisie-revue-vue.html","<p>Vue Saisie Revue</p>");
$templateCache.put("vues/selection-indicateurs-vue.html","<!-- Contenu de la page -->\r\n<section class=\"container-fluid\" id=\"contenu\">\r\n    <div id=\"modale-panier-body\" class=\"modale-panier-body modal-body\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"col-md-12 selection-indicateurs\">\r\n                <form class=\"form-horizontal\" role=\"form\" name=\"selectionIndicateursCtrl.myForm\" novalidate>\r\n                    <div ng-if=\"!selectionIndicateursCtrl.estEnEditionPanier\">\r\n                        <div class=\"col-md-8 form-group\">\r\n                            <label class=\"col-md-4 control-label\" for=\"choix-selection\">Liste des sélections d\'indicateurs</label>\r\n                            <div class=\"form-group has-feedback\">\r\n                                <div class=\"col-md-7\" ng-class=\"{\'has-error\': selectionIndicateursCtrl.erreurSelection}\">\r\n                                    <input type=\"text\" mw-clear-button id=\"choix-selection\" class=\"form-control\" name=\"choix-panier\" ng-model=\"selectionIndicateursCtrl.panierEnCours\" placeholder=\"Séléctionner un panier\" mw-combobox=\"panier as panier.nom for panier in selectionIndicateursCtrl.listePaniers\" mw-combobox-on-select=\"selectionIndicateursCtrl.changePanier($item)\">\r\n                                    <span class=\"error-msg col-md-12\" ng-class=\"{\'hide-a11y\' : !selectionIndicateursCtrl.erreurSelection }\" aria-hidden=\"{{!selectionIndicateursCtrl.erreurSelection}}\" ng-attr-role=\"selectionIndicateursCtrl.getRoleIndicateurNom()\">Veuillez sélectionner une sélection</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-3\">\r\n                            <button class=\"btn btn-block btn-default mw-troncature\" aria-label=\"Gérer la sélection\" ng-click=\"selectionIndicateursCtrl.gererSelection()\" id=\"bouton-gerer\" tooltip-id=\"tooltip-bouton-gerer-selection\" aria-describedby=\"tooltip-bouton-gerer-selection\" tooltip-trigger=\"focus blur mouseenter mouseleave\" tooltip-placement=\"bottom\" tooltip=\"Ce bouton permet d\'ajouter, supprimer, ordonner les indicateurs et de modifier le nom de la sélection.\">\r\n                                Gérer la sélection\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div ng-if=\"selectionIndicateursCtrl.estEnEditionPanier\">\r\n                        <div class=\"form-group has-feedback col-md-8\">\r\n                            <label class=\"col-md-4 control-label\" for=\"id-nom\">Nom de la sélection</label>\r\n                            <div class=\"col-md-7\" ng-class=\"{\'has-error\': !selectionIndicateursCtrl.estFormulaireValide() || selectionIndicateursCtrl.estNomAChanger()}\">\r\n                                <input type=\"text\" mw-clear-button required placeholder=\"\" id=\"id-nom\" class=\"form-control\" name=\"nom\" ng-model=\"selectionIndicateursCtrl.panierEnCours.nom\" maxlength=\"32\">\r\n                                <span class=\"error-msg col-md-12\" ng-if=\"!selectionIndicateursCtrl.estFormulaireValide()\" ng-bind=\"selectionIndicateursCtrl.messageErreurNomSelection\"></span>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-2 pull-right\">\r\n                            <button class=\"btn btn-block btn-primary mw-troncature\" aria-label=\"Enregistrer la sélection\" ng-click=\"selectionIndicateursCtrl.enregistrerSelection()\" id=\"bouton-enregistrer\" ng-disabled=\"!selectionIndicateursCtrl.estFormulaireValide()\">\r\n                                <span>Enregistrer la sélection</span>\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"col-md-2 pull-right\">\r\n                            <button class=\"btn btn-block btn-default mw-troncature\" aria-label=\"Annuler la modification de la sélection\" ng-click=\"selectionIndicateursCtrl.annulerModifSelection()\" id=\"bouton-annuler\">\r\n                                <span>Annuler</span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <div class=\"col-md-12 no-padding-left\">\r\n                    <p class=\"col-md-3 label-nb-indicateur\"><span class=\"label-nb-indicateur\" ng-bind=\"selectionIndicateursCtrl.getEtatNbIndicateurs()\"></span></p>\r\n                </div>\r\n                <div class=\"row drop-content-panier-global pf-drop-target-element\" mw-pf-core-drop-target drop-settings=\"selectionIndicateursCtrl.panierDropSettings\" ng-show=\"selectionIndicateursCtrl.panierEnCours\" mw-chargement=\"selectionIndicateursCtrl.chargementEnCours\" ng-if=\"selectionIndicateursCtrl.panierDropSettings\">\r\n                    <ul class=\"nav col-md-12 no-padding-left no-padding-right\">\r\n                        <mw-pf-tuile-panier ng-repeat=\"tuilePanierSettings in selectionIndicateursCtrl.listeTuilePanierSettings track by tuilePanierSettings.id\" tuile-panier-settings=\"tuilePanierSettings\" liste-tuile-catalogue-settings=\"selectionIndicateursCtrl.listeTuileCatalogueSettings\" liste-tuile-panier-settings=\"selectionIndicateursCtrl.listeTuilePanierSettings\" liste-filtres-clients=\"selectionIndicateursCtrl.listeFiltresClients\" liste-filtres-relation-eco=\"selectionIndicateursCtrl.listeFiltresRelationEco\" ng-attr-id=\"pf-tuile-panier-{{$index}}\"></mw-pf-tuile-panier>\r\n                        <li class=\"bloc-content-panier\" ng-if=\"selectionIndicateursCtrl.afficherTuileEmplacementVide()\">\r\n                            <div class=\"drop-content-panier pf-drop-target-element\"></div>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div mw-chargement=\"selectionIndicateursCtrl.chargementEnCours\">\r\n            <mw-panel niveau=\"2\" titre=\"Liste des indicateurs\" id=\"panel-catalogue-indicateur\" ng-show=\"selectionIndicateursCtrl.panierEnCours\">\r\n                <div class=\"row drop-content-poubelle pf-drop-target-element\" mw-pf-core-drop-target drop-settings=\"selectionIndicateursCtrl.poubelleDropSettings\" ng-if=\"selectionIndicateursCtrl.poubelleDropSettings\">\r\n                    <ul class=\"nav col-md-12\">\r\n                        <mw-pf-tuile-catalogue ng-hide=\"tuileCatalogueSettings.indicateur.choisi\" ng-repeat=\"tuileCatalogueSettings in selectionIndicateursCtrl.listeTuileCatalogueSettings track by tuileCatalogueSettings.id\" mw-combobox-select-on-exact=\"true\" tuile-catalogue-settings=\"tuileCatalogueSettings\" liste-tuile-catalogue-settings=\"selectionIndicateursCtrl.listeTuileCatalogueSettings\" liste-tuile-panier-settings=\"selectionIndicateursCtrl.listeTuilePanierSettings\" liste-filtres-clients=\"selectionIndicateursCtrl.listeFiltresClients\" liste-filtres-relation-eco=\"selectionIndicateursCtrl.listeFiltresRelationEco\" ng-attr-id=\"pf-tuile-catalogue-{{$index}}\"></mw-pf-tuile-catalogue>\r\n                    </ul>\r\n                </div>\r\n            </mw-panel>\r\n        </div>\r\n    </div>\r\n</section>\r\n<footer class=\"row mw-footer-fixed-bottom\">\r\n    <div class=\"overlay-footer\" ng-class=\"{\'display-block\':(indexCtrl.ouvertureVoletChoixPortefeuille)}\"></div>\r\n    <div class=\"col-md-12\">\r\n        <div class=\"col-md-2 pull-right\">\r\n            <button class=\"btn btn-block btn-primary mw-troncature\" aria-label=\"Appliquer\" ng-click=\"selectionIndicateursCtrl.appliquer()\" id=\"bouton-appliquer\" ng-disabled=\"selectionIndicateursCtrl.estEnEditionPanier\">\r\n                <span>Appliquer la sélection</span>\r\n            </button>\r\n        </div>\r\n        <div class=\"col-md-2\">\r\n            <button class=\"btn btn-block btn-default mw-troncature\" aria-label=\"Annuler\" ng-click=\"selectionIndicateursCtrl.retour()\" id=\"bouton-retour\" ng-disabled=\"selectionIndicateursCtrl.estEnEditionPanier\">\r\n                <span class=\"icon itce-chevron-left\" aria-hidden=\"true\"></span>\r\n                <span>Retour</span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</footer>");
$templateCache.put("vues/template-modale/modale-avertissement-choix-portefeuille-vue.html","<div class=\"modal-header\">\r\n    <button type=\"button\" id=\"bouton-modale-fermer\" ng-click=\"popupCtrl.fermer()\" class=\"close\">\r\n        <span class=\"icon itce-times\" aria-hidden=\"true\"></span>\r\n        <span class=\"adobe-blank\">Fermer la modale</span>\r\n    </button>\r\n    <h1 class=\"modal-title\">\r\n        <span>Total clients / prospects de votre choix &gt; <span ng-bind=\"popupCtrl.nbMaxPortefeuilles\"></span></span>\r\n    </h1>\r\n</div>\r\n<div class=\"modal-body row\" id=\"mw-modal-corps\" role=\"document\">\r\n    <div class=\"col-md-12 message-modale-gros-volume\">\r\n        <strong>Détail de votre sélection :</strong>\r\n        <div class=\"col-md-12\">\r\n            <article ng-repeat=\"ptf in popupCtrl.listePortefeuilles track by $index\">\r\n                <span ng-bind=\"ptf.libelle + \' - \' + ptf.id + \' : \'\"></span>\r\n                <strong><span ng-bind=\"ptf.nombreTotalClients\"></span></strong>\r\n                <span> clients (y compris sans contrat) / </span>\r\n                <strong><span ng-bind=\"ptf.nombreTotalProspectsTiers\"></span></strong>\r\n                <span> prospects</span>\r\n                <br>\r\n            </article>\r\n        </div>\r\n    </div>\r\n    <!--<div class=\"col-md-12 message-modale-gros-volume\" ng-show=\"popupCtrl.listeMessageAction.length > 0\">\r\n        <strong>Vous pouvez :</strong>\r\n        <div class=\"col-md-12\">\r\n            <article ng-repeat=\"mess in popupCtrl.listeMessageAction track by $index\">\r\n                <span ng-bind=\"mess\"></span>\r\n            </article>\r\n        </div>\r\n    </div>-->\r\n</div>\r\n\r\n<div class=\"modal-footer modal-footer-custom\">\r\n    <div class=\"col-md-4 pull-right\" ng-show=\"popupCtrl.estEnMultiPortefeuille\">\r\n        <button type=\"button\" id=\"bouton-modale-nouvelle-selection\" class=\"btn btn-primary\" ng-click=\"popupCtrl.nouvelleSelection()\">Nouvelle SELECTION</button>\r\n    </div>\r\n    <div class=\"col-md-4 pull-right\" ng-hide=\"popupCtrl.estEnMultiPortefeuille\">\r\n        <button type=\"button\" id=\"bouton-modale-afficher\" class=\"btn btn-primary\" ng-click=\"popupCtrl.afficherTout()\">Afficher TOUT</button>\r\n    </div>\r\n    <div class=\"col-md-4 pull-right\" ng-show=\"popupCtrl.estAfficherBtnClients\">\r\n        <button type=\"button\" id=\"bouton-modale-afficher-clients\" class=\"btn btn-zone\" ng-click=\"popupCtrl.afficherClients()\">Afficher CLIENTS</button>\r\n    </div>\r\n    <div class=\"col-md-4 pull-right\" ng-show=\"popupCtrl.estAfficherBtnProspects\">\r\n        <button type=\"button\" id=\"bouton-modale-afficher-prospects\" class=\"btn btn-zone\" ng-click=\"popupCtrl.afficherProspects()\">Afficher PROSPECTS</button>\r\n    </div>\r\n</div>");
$templateCache.put("vues/template-modale/modale-choix-eds-vue.html","<div class=\"modal-header\">\r\n    <button type=\"button\" id=\"bouton-modale-fermer\" ng-click=\"popupCtrl.fermer()\" class=\"close\">\r\n        <span class=\"icon itce-times\" aria-hidden=\"true\"></span>\r\n        <span class=\"adobe-blank\">Fermer la modale</span>\r\n    </button>\r\n    <h1 class=\"modal-title\" ng-bind=\"popupCtrl.titre\">Changer d\'agent</h1>\r\n</div>\r\n\r\n<div class=\"modal-body texte-gros row\" role=\"document\">\r\n    <form class=\"form-horizontal\" role=\"form\">\r\n        <div class=\"form-group\">\r\n            <label class=\"col-md-3 control-label\" for=\"recherche-agent\">Rechercher agent</label>\r\n            <div class=\"col-sm-12 col-md-8\">\r\n                <mwsf-saisie-agent id=\"recherche-agent\" ng-model=\"popupCtrl.agentChoisi\" on-select=\"popupCtrl.changeAgent(selectedItem)\" required=\"false\" code-action=\"1\">\r\n                </mwsf-saisie-agent>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group\" ng-if=\"popupCtrl.estVueEDS\">\r\n            <label class=\"col-md-3 control-label\" for=\"choix-agence\">EDS de rattachement</label>\r\n            <div class=\"col-sm-12 col-md-8\" mw-chargement=\"popupCtrl.chargementAgences\" ng-show=\"popupCtrl.afficheListeEdsRattachement\">\r\n                <input type=\"text\" mw-clear-button required id=\"choix-agence\" class=\"form-control\" name=\"choix-agence\" ng-model=\"popupCtrl.agenceChoisi\" placeholder=\"Sélectionner EDS de rattachement\" mw-combobox=\"agence as agence.nomEds for agence in popupCtrl.listeAgences\" mw-combobox-on-select=\"popupCtrl.changementAgence(popupCtrl.agenceChoisi, null)\">\r\n            </div>\r\n            <div class=\"col-sm-12 col-md-8 libelle-eds\" mw-chargement=\"popupCtrl.chargementAgences\" ng-show=\"popupCtrl.afficheLibelleEdsRattachement\">\r\n                <span>\r\n                    <strong ng-bind=\"popupCtrl.nomEdsRattachement\"></strong>\r\n                </span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\" ng-if=\"popupCtrl.estVueEDS\">\r\n            <label class=\"col-md-3 control-label\" for=\"agence-selection\">EDS sélectionné</label>\r\n            <input id=\"agence-selection\" required hidden>\r\n            <div class=\"col-sm-12 col-md-8 libelle-eds\">\r\n                <span>\r\n                    <strong ng-bind=\"popupCtrl.nomEdsSelectionne\"></strong>\r\n                </span>\r\n            </div>\r\n        </div>\r\n        <mw-panel niveau=\"1\" titre=\"\" id=\"groupe\" header-sticky=\"body\" css-panel=\"\" ng-if=\"popupCtrl.estVueEDS\">\r\n            <div class=\"col-md-12 mw-bloc-contenu bloc-eds\">\r\n                <section ng-style=\"{\'margin-bottom\':\'2em\', \'margin-left\':\'2em\'}\">\r\n                    <span class=\"icon itce-information-circle\" aria-hidden=\"true\">\r\n                    </span>\r\n                    <span>Choisir l\'EDS auquel sont rattachés les portefeuilles à agréger.</span>\r\n                </section>\r\n                <div class=\"form-group\" ng-if=\"popupCtrl.afficheBlocEds\">\r\n                    <mw-pf-element-eds id=\"root\" eds=\"popupCtrl.agenceChoisi\">\r\n                        <div class=\"entree-eds\">\r\n                            <a class=\"lien-eds\" ng-class=\"{\'eds-est-vide\': popupCtrl.estVide}\" ng-attr-id=\"\'liens-\'+popupCtrl.eds.id\" ng-click=\"popupCtrl.ouvrir()\" href=\"javascript:;\">\r\n                                <span class=\"icon chevron-eds\" aria-hidden=\"true\" ng-class=\"{\'itce-chevron-right\': popupCtrl.estfermer, \'itce-chevron-down\': popupCtrl.estOuvert}\">\r\n                                </span>\r\n                            </a>\r\n                            <a class=\"lien-eds\" ng-attr-id=\"\'liens-select-\'+popupCtrl.eds.id\" ng-click=\"popupCtrl.selectionnerEDS()\" href=\"javascript:;\">\r\n                                <div class=\"entree-eds\">\r\n                                    <div ng-class=\"{\'check-eds\': popupCtrl.estCoche, \'no-check-eds\': !popupCtrl.estCoche}\"></div>\r\n                                    <span ng-style=\"{\'color\':\'black\'}\" ng-bind=\"popupCtrl.nomEds\"></span>\r\n                                </div>\r\n                            </a>\r\n                        </div>\r\n                    </mw-pf-element-eds>\r\n                </div>\r\n            </div>\r\n        </mw-panel>\r\n    </form>\r\n</div>\r\n\r\n<div class=\"modal-footer modal-footer-custom col-md-12 col-lg-12\">\r\n    <div ng-class=\"{\'col-md-2\': popupCtrl.estVueEDS, \'col-lg-2\': popupCtrl.estVueEDS, \'col-md-6\': !popupCtrl.estVueEDS, \'col-lg-6\': !popupCtrl.estVueEDS}\">\r\n        <button type=\"button\" id=\"bouton-modale-annuler-eds\" class=\"btn btn-default\" ng-click=\"popupCtrl.fermer()\">\r\n            Annuler\r\n        </button>\r\n    </div>\r\n    <div ng-class=\"{\'col-md-2\': popupCtrl.estVueEDS, \'col-lg-2\': popupCtrl.estVueEDS, \'col-md-6\': !popupCtrl.estVueEDS, \'col-lg-6\': !popupCtrl.estVueEDS}\">\r\n        <button type=\"button\" id=\"bouton-modale-valider-eds\" class=\"btn btn-primary\" ng-click=\"popupCtrl.valider()\" ng-disabled=\"!popupCtrl.estChoisiEDSvalide\">\r\n            Valider\r\n        </button>\r\n    </div>\r\n</div>");
$templateCache.put("vues/template-modale/modale-clients-activer-vue.html","<div class=\"modal-header\">\r\n    <button type=\"button\" id=\"bouton-modale-fermer\" ng-click=\"popupCtrl.fermer()\" class=\"close\">\r\n        <span class=\"icon itce-times\" aria-hidden=\"true\"></span>\r\n        <span class=\"adobe-blank\">Fermer la modale</span>\r\n    </button>\r\n    <h1 class=\"modal-title\" ng-bind=\"popupCtrl.titreModale\"></h1>\r\n</div>\r\n\r\n<div id=\"modale-panier-body\" class=\"modale-panier-body modal-body texte-gros row\" role=\"document\" mw-chargement=\"popupCtrl.chargementEnCours\">\r\n    <div class=\"panel panel-primary col-md-12\">\r\n        <mw-table options=\"popupCtrl.tableauRaisonsSociales\" id=\"tableau-raisons-sociales\"></mw-table>\r\n    </div>\r\n</div>");
$templateCache.put("vues/template-modale/modale-details-flux-crediteur-vue.html","<!-- Header -->\r\n<div class=\"modal-header\">\r\n    <button type=\"button\" id=\"bouton-modale-fermer\" ng-click=\"popupCtrl.fermer()\" class=\"close\">\r\n        <span class=\"icon itce-times\" aria-hidden=\"true\"></span>\r\n        <span class=\"adobe-blank\">Fermer la modale</span>\r\n    </button>\r\n    <h1 class=\"modal-title\" ng-bind=\"popupCtrl.titreModale\"></h1>\r\n</div>\r\n\r\n<!-- Body -->\r\n<div id=\"modale-panier-body\" class=\"modale-panier-body modal-body texte-gros row\" ng-style=\"{\'padding\': \'0\'}\" role=\"document\" mw-chargement=\"popupCtrl.chargementEnCours\">\r\n    <div class=\"panel panel-primary panel-detail col-md-12\" ng-style=\"{\'padding\': \'0\', \'margin\' : \'0\'}\">\r\n        <div class=\"bloc-graphique bas-du-bloc\" ng-style=\"{\'text-align\':\'right\', \'overflow\': \'auto\'}\">\r\n            <mw-pf-diagramme-multi-colonne id=\"colonne-detail-flux-crediteur\" config=\"popupCtrl.configDiagrammeColonneFluxCrediteur\">\r\n            </mw-pf-diagramme-multi-colonne>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- footer -->\r\n<div class=\"modal-footer modal-footer-custom\">\r\n    <div class=\"bloc-legende\">\r\n\r\n        <div class=\"bloc-legende\" ng-style=\"{\'width\': \'33%\'}\">\r\n            <mw-pf-puce-legende class=\"legende\" ng-style=\"{\'width\': \'100%\', \'margin\': \'0\'}\" ng-attr-id=\"puce-diagramme-bar1\" intitule=\"{{popupCtrl.legendeColonne1}}\" couleur=\"{{popupCtrl.couleurColonne1}}\">\r\n            </mw-pf-puce-legende>\r\n            <mw-pf-puce-legende class=\"legende\" ng-style=\"{\'width\': \'100%\', \'margin\': \'0\'}\" ng-attr-id=\"puce-diagramme-bar2\" intitule=\"{{popupCtrl.legendeColonne2}}\" couleur=\"{{popupCtrl.couleurColonne2}}\">\r\n            </mw-pf-puce-legende>\r\n        </div>\r\n        <div class=\"bloc-legende\" ng-style=\"{\'width\': \'33%\'}\">\r\n            <div class=\"pf-puce-legende\" ng-style=\"{\'width\': \'100%\', \'margin\': \'0\'}\">\r\n                &nbsp;\r\n                <span class=\"intitule\" ng-bind=\"popupCtrl.libelle1Total\"></span>\r\n            </div>\r\n            <div class=\"pf-puce-legende\" ng-style=\"{\'width\': \'100%\', \'margin\': \'0\'}\">\r\n                &nbsp;\r\n                <span class=\"intitule\" ng-bind=\"popupCtrl.libelle2Total\"></span>\r\n            </div>\r\n        </div>\r\n        <div class=\"bloc-legende\" ng-style=\"{\'width\': \'33%\'}\">\r\n            <div class=\"pf-puce-legende\">\r\n                &nbsp;\r\n                <mw-pf-indicateur-fleche id=\"indicateur-fleche-pnb\" class=\"margin-left-auto\" ng-style=\"{\'margin-top\': \'20%\'}\" config=\"popupCtrl.configTendenceFluxCrediteurTotal\">\r\n                </mw-pf-indicateur-fleche>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n");
$templateCache.put("vues/template-modale/modale-details-flux-debiteur-vue.html","<!-- Header -->\r\n<div class=\"modal-header\">\r\n    <button type=\"button\" id=\"bouton-modale-fermer\" ng-click=\"popupCtrl.fermer()\" class=\"close\">\r\n        <span class=\"icon itce-times\" aria-hidden=\"true\"></span>\r\n        <span class=\"adobe-blank\">Fermer la modale</span>\r\n    </button>\r\n    <h1 class=\"modal-title\" ng-bind=\"popupCtrl.titreModale\"></h1>\r\n</div>\r\n\r\n<!-- Body -->\r\n<div id=\"modale-panier-body\" class=\"modale-panier-body modal-body texte-gros row\" ng-style=\"{\'padding\': \'0\'}\" role=\"document\" mw-chargement=\"popupCtrl.chargementEnCours\">\r\n    <div class=\"panel panel-primary panel-detail col-md-12\" ng-style=\"{\'padding\': \'0\', \'margin\' : \'0\'}\">\r\n        <div class=\"bloc-graphique bas-du-bloc\" ng-style=\"{\'text-align\':\'right\', \'overflow\': \'auto\'}\">\r\n            <mw-pf-diagramme-multi-colonne id=\"colonne-detail-flux-debiteur\" config=\"popupCtrl.configDiagrammeColonneFluxDebiteur\">\r\n            </mw-pf-diagramme-multi-colonne>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- footer -->\r\n<div class=\"modal-footer modal-footer-custom\">\r\n    <div class=\"bloc-legende\">\r\n\r\n        <div class=\"bloc-legende\" ng-style=\"{\'width\': \'33%\'}\">\r\n            <mw-pf-puce-legende class=\"legende\" ng-style=\"{\'width\': \'100%\', \'margin\': \'0\'}\" ng-attr-id=\"puce-diagramme-bar1\" intitule=\"{{popupCtrl.legendeColonne1}}\" couleur=\"{{popupCtrl.couleurColonne1}}\">\r\n            </mw-pf-puce-legende>\r\n            <mw-pf-puce-legende class=\"legende\" ng-style=\"{\'width\': \'100%\', \'margin\': \'0\'}\" ng-attr-id=\"puce-diagramme-bar2\" intitule=\"{{popupCtrl.legendeColonne2}}\" couleur=\"{{popupCtrl.couleurColonne2}}\">\r\n            </mw-pf-puce-legende>\r\n        </div>\r\n        <div class=\"bloc-legende\" ng-style=\"{\'width\': \'33%\'}\">\r\n            <div class=\"pf-puce-legende\" ng-style=\"{\'width\': \'100%\', \'margin\': \'0\'}\">\r\n                &nbsp;\r\n                <span class=\"intitule\" ng-bind=\"popupCtrl.libelle1Total\"></span>\r\n            </div>\r\n            <div class=\"pf-puce-legende\" ng-style=\"{\'width\': \'100%\', \'margin\': \'0\'}\">\r\n                &nbsp;\r\n                <span class=\"intitule\" ng-bind=\"popupCtrl.libelle2Total\"></span>\r\n            </div>\r\n        </div>\r\n        <div class=\"bloc-legende\" ng-style=\"{\'width\': \'33%\'}\">\r\n            <div class=\"pf-puce-legende\">\r\n                &nbsp;\r\n                <mw-pf-indicateur-fleche id=\"indicateur-fleche-pnb\" class=\"margin-left-auto\" ng-style=\"{\'margin-top\': \'20%\'}\" config=\"popupCtrl.configTendenceFluxDebiteurTotal\">\r\n                </mw-pf-indicateur-fleche>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n");
$templateCache.put("vues/template-modale/modale-details-portefeuille-vue.html","<!-- Header -->\r\n<div class=\"modal-header\">\r\n    <button type=\"button\" id=\"bouton-modale-fermer\" ng-click=\"popupCtrl.fermer()\" class=\"close\">\r\n        <span class=\"icon itce-times\" aria-hidden=\"true\"></span>\r\n        <span class=\"adobe-blank\">Fermer la modale</span>\r\n    </button>\r\n    <h1 class=\"modal-title\" ng-bind=\"popupCtrl.titreModale\"></h1>\r\n</div>\r\n\r\n<!-- Body -->\r\n<div id=\"modale-panier-body\" class=\"modale-panier-body modal-body texte-gros row\" ng-style=\"{\'padding\': \'0\'}\" role=\"document\" mw-chargement=\"popupCtrl.chargementEnCours\">\r\n    <div class=\"panel panel-primary panel-detail col-md-12\" ng-style=\"{\'padding\': \'0\', \'margin\' : \'0\'}\">\r\n        <div class=\"bloc-graphique bas-du-bloc text-align-right\">\r\n            <mw-pf-diagramme-colonne id=\"colonne-detail-ptf\" svg-id=\"\'svg-colonne-detail-ptf\'\" config=\"popupCtrl.configDiagrammeColonnePortefeuille\" type-diagramme=\"popupCtrl.typeDiagramme\">\r\n            </mw-pf-diagramme-colonne>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- footer -->\r\n<div class=\"modal-footer modal-footer-custom\">\r\n    <div class=\"bloc-legende\">\r\n        <mw-pf-puce-legende class=\"legende\" ng-style=\"{\'width\': \'30%\'}\" ng-attr-id=\"puce-diagramme-bar1\" intitule=\"{{popupCtrl.configDiagrammeColonnePortefeuille[0].intitule}}\" couleur=\"{{popupCtrl.configDiagrammeColonnePortefeuille[0].couleur}}\">\r\n        </mw-pf-puce-legende>\r\n        <mw-pf-puce-legende class=\"legende\" ng-style=\"{\'width\': \'30%\'}\" ng-attr-id=\"puce-diagramme-bar2\" intitule=\"{{popupCtrl.configDiagrammeColonnePortefeuille[0].sousIntitule}}\" couleur=\"{{popupCtrl.configDiagrammeColonnePortefeuille[0].couleurSousValeur}}\">\r\n        </mw-pf-puce-legende>\r\n        <mw-pf-puce-legende class=\"legende\" ng-style=\"{\'width\': \'30%\'}\" ng-attr-id=\"puce-diagramme-bar3\" intitule=\"{{popupCtrl.libelleTotal}}\" couleur=\"\'#FFFFFF\'\">\r\n        </mw-pf-puce-legende>\r\n    </div>\r\n</div>");
$templateCache.put("vues/template-modale/modale-details-rentabilite-pnb-vue.html","<!-- Header -->\r\n<div class=\"modal-header\">\r\n    <button type=\"button\" id=\"bouton-modale-fermer\" ng-click=\"popupCtrl.fermer()\" class=\"close\">\r\n        <span class=\"icon itce-times\" aria-hidden=\"true\"></span>\r\n        <span class=\"adobe-blank\">Fermer la modale</span>\r\n    </button>\r\n    <h1 class=\"modal-title\" ng-bind=\"popupCtrl.titreModale\"></h1>\r\n</div>\r\n\r\n<!-- Body -->\r\n<div id=\"modale-panier-body\" class=\"modale-panier-body modal-body texte-gros row\" ng-style=\"{\'padding\': \'0\'}\" role=\"document\" mw-chargement=\"popupCtrl.chargementEnCours\">\r\n    <div class=\"panel panel-primary panel-detail col-md-12\" ng-style=\"{\'padding\': \'0\', \'margin\' : \'0\'}\">\r\n         <div class=\"bloc-graphique bas-du-bloc\" ng-style=\"{\'text-align\':\'right\', \'overflow\': \'auto\'}\">\r\n             <mw-pf-diagramme-multi-colonne id=\"colonne-detail-pnb\" config=\"popupCtrl.configDiagrammeColonnePnb\">\r\n             </mw-pf-diagramme-multi-colonne>\r\n         </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- footer -->\r\n<div class=\"modal-footer modal-footer-custom\">\r\n    <div class=\"bloc-legende\">\r\n\r\n        <div class=\"bloc-legende\" ng-style=\"{\'width\': \'33%\'}\">\r\n            <mw-pf-puce-legende class=\"legende\" ng-style=\"{\'width\': \'100%\', \'margin\': \'0\'}\" ng-attr-id=\"puce-diagramme-bar1\" intitule=\"{{popupCtrl.legendeColonne1}}\" couleur=\"{{popupCtrl.couleurColonne1}}\">\r\n            </mw-pf-puce-legende>\r\n            <mw-pf-puce-legende class=\"legende\" ng-style=\"{\'width\': \'100%\', \'margin\': \'0\'}\" ng-attr-id=\"puce-diagramme-bar2\" intitule=\"{{popupCtrl.legendeColonne2}}\" couleur=\"{{popupCtrl.couleurColonne2}}\">\r\n            </mw-pf-puce-legende>\r\n        </div>\r\n        <div class=\"bloc-legende\" ng-style=\"{\'width\': \'33%\'}\">\r\n            <div class=\"pf-puce-legende\" ng-style=\"{\'width\': \'100%\', \'margin\': \'0\'}\">\r\n                &nbsp;\r\n                <span class=\"intitule\" ng-bind=\"popupCtrl.libelle1Total\"></span>\r\n            </div>\r\n            <div class=\"pf-puce-legende\" ng-style=\"{\'width\': \'100%\', \'margin\': \'0\'}\">\r\n                &nbsp;\r\n                <span class=\"intitule\" ng-bind=\"popupCtrl.libelle2Total\"></span>\r\n            </div>\r\n        </div>\r\n        <div class=\"bloc-legende\" ng-style=\"{\'width\': \'33%\'}\">\r\n            <div class=\"pf-puce-legende\">\r\n                &nbsp;\r\n                <mw-pf-indicateur-fleche id=\"indicateur-fleche-pnb\" class=\"margin-left-auto\" ng-style=\"{\'margin-top\': \'20%\'}\" config=\"popupCtrl.configTendencePNBTotal\">\r\n                </mw-pf-indicateur-fleche>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n");
$templateCache.put("vues/template-modale/modale-details-revue-portefeuille-vue.html","<!-- Header -->\r\n<div class=\"modal-header\">\r\n    <button type=\"button\" id=\"bouton-modale-fermer\" ng-click=\"popupCtrl.fermer()\" class=\"close\">\r\n        <span class=\"icon itce-times\" aria-hidden=\"true\"></span>\r\n        <span class=\"adobe-blank\">Fermer la modale</span>\r\n    </button>\r\n    <h1 class=\"modal-title\" ng-bind=\"popupCtrl.titreModale\"></h1>\r\n</div>\r\n\r\n<!-- Body -->\r\n<div id=\"modale-detail-taux-visite-body\" class=\"modale-panier-body modal-body texte-gros row\" ng-style=\"{\'padding\': \'0\'}\" role=\"document\" mw-chargement=\"popupCtrl.chargementEnCours\">\r\n    <div class=\"panel panel-primary panel-detail col-md-12\" ng-style=\"{\'padding\': \'0\', \'margin\' : \'0\'}\">\r\n        <div class=\"bloc-graphique height-100-pourcent\">\r\n            <mw-pf-diagramme-pourcentage id=\"pourcentage-detail-taux-revue\" config=\"popupCtrl.configDiagrammePourcentageTauxRevue\">\r\n            </mw-pf-diagramme-pourcentage>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- footer -->\r\n<div class=\"modal-footer modal-footer-custom\">\r\n    <div class=\"bloc-legende\">\r\n        <div class=\"pf-puce-legende\">\r\n            &nbsp;\r\n            <span class=\"intitule\">Total taux de revues :&nbsp;</span>\r\n            <span class=\"intitule\" ng-bind=\"popupCtrl.pourcentageTauxTotal\"></span>\r\n            <span class=\"intitule\">%</span>\r\n        </div>\r\n    </div>\r\n</div>");
$templateCache.put("vues/template-modale/modale-details-taux-visite-vue.html","<!-- Header -->\r\n<div class=\"modal-header\">\r\n    <button type=\"button\" id=\"bouton-modale-fermer\" ng-click=\"popupCtrl.fermer()\" class=\"close\">\r\n        <span class=\"icon itce-times\" aria-hidden=\"true\"></span>\r\n        <span class=\"adobe-blank\">Fermer la modale</span>\r\n    </button>\r\n    <h1 class=\"modal-title\" ng-bind=\"popupCtrl.titreModale\"></h1>\r\n</div>\r\n\r\n<!-- Body -->\r\n<div id=\"modale-detail-taux-visite-body\" class=\"modale-panier-body modal-body texte-gros row\" ng-style=\"{\'padding\': \'0\'}\" role=\"document\" mw-chargement=\"popupCtrl.chargementEnCours\">\r\n    <div class=\"panel panel-primary panel-detail col-md-12\" ng-style=\"{\'padding\': \'0\', \'margin\' : \'0\'}\">\r\n        <div class=\"bloc-graphique height-100-pourcent\">\r\n            <mw-pf-diagramme-pourcentage id=\"pourcentage-detail-taux-visite\" config=\"popupCtrl.configDiagrammePourcentageTauxVisite\">\r\n            </mw-pf-diagramme-pourcentage>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- footer -->\r\n<div class=\"modal-footer modal-footer-custom\">\r\n    <div class=\"bloc-legende\">\r\n        <div class=\"pf-puce-legende\">\r\n            &nbsp;\r\n            <span class=\"intitule\">Total taux de visites :&nbsp;</span>\r\n            <span class=\"intitule\" ng-bind=\"popupCtrl.pourcentageTauxTotal\"></span>\r\n            <span class=\"intitule\">%</span>\r\n        </div>\r\n    </div>\r\n</div>");
$templateCache.put("vues/template-modale/modale-filtre-vue.html","<div class=\"modal-header\">\r\n    <button type=\"button\" id=\"bouton-modale-fermer\" ng-click=\"popupCtrl.fermer()\" class=\"close\">\r\n        <span class=\"icon itce-times\" aria-hidden=\"true\"></span>\r\n        <span class=\"adobe-blank\">Fermer la modale</span>\r\n    </button>\r\n    <h1 class=\"modal-title\">Filtres</h1>\r\n</div>\r\n\r\n<div class=\"modal-body texte-gros row modal-body-select-produits\" role=\"document\" ng-keypress=\"popupCtrl.appuiToucheEntrer($event)\">\r\n\r\n    <mw-pf-bloc-condition-filtre ng-repeat=\"filtre in popupCtrl.listeFiltres track by filtre.id\" ng-attr-id=\"mw-bloc-condition-filtre-{{$index}}\" liste-indicateurs=\"popupCtrl.listeIndicateursFiltreDisponible\" liste-filtres=\"popupCtrl.listeFiltres\" no-index=\"$index\" filtre=\"filtre\" afficher-operateur=\"$index !== 0\" est-vue-client=\"popupCtrl.estVueClient\"></mw-pf-bloc-condition-filtre>\r\n\r\n    <!-- Bouton Ajouter condition -->\r\n    <div ng-show=\"popupCtrl.afficherBoutonAjouter()\" class=\"col-md-3\">\r\n        <br>\r\n        <button class=\"btn btn-block btn-zone\" id=\"bouton-ajouter-condition-interne\" ng-click=\"popupCtrl.ajouterCondition(true)\" ng-disabled=\"popupCtrl.pasDeFiltreDisponible\">+ Ajouter</button>\r\n    </div>\r\n\r\n    <div class=\"col-md-9\" ng-show=\"popupCtrl.pasDeFiltreDisponible\">\r\n        <br>\r\n        <br>\r\n        <p>Pas de filtre disponible pour les indicateurs sélectionnés</p>\r\n    </div>\r\n\r\n</div>\r\n\r\n<div class=\"modal-footer modal-footer-custom\">\r\n    <div class=\"col-lg-offset-6 col-lg-3 col-md-offset-6 col-md-3 col-sm-offset-6 col-sm-3\">\r\n    </div>\r\n    <div class=\"col-lg-3 col-md-3 col-sm-3\">\r\n        <button type=\"button\" id=\"bouton-modale-valider\" class=\"btn btn-primary\" ng-click=\"popupCtrl.appliquer()\" ng-disabled=\"popupCtrl.desactiverBoutonAppliquer()\">Appliquer</button>\r\n    </div>\r\n</div>\r\n");
$templateCache.put("vues/template-modale/modale-paniers-vue.html","<div class=\"modal-header\">\r\n    <button type=\"button\" id=\"bouton-modale-fermer\" ng-click=\"popupCtrl.fermer()\" class=\"close\">\r\n        <span class=\"icon itce-times\" aria-hidden=\"true\"></span>\r\n        <span class=\"adobe-blank\">Fermer la modale</span>\r\n    </button>\r\n    <h1 class=\"modal-title\">Personnaliser les indicateurs</h1>\r\n</div>\r\n\r\n<div id=\"modale-panier-body\" class=\"modale-panier-body modal-body texte-gros row\" role=\"document\" mw-chargement=\"popupCtrl.chargementEnCours\">\r\n    <mw-synthese-erreurs id=\"id-erreur-form\">\r\n        <ul>\r\n            <li ng-repeat=\"e in popupCtrl.listeErreurs track by e.champs\">\r\n                <span ng-if=\"e.message == \'\'\">\r\n                    <a href=\"javascript:void(0)\" ng-click=\"popupCtrl.goToAnchor(e.ancre)\" ng-bind=\"e.champs\" id=\"id-erreur\" title=\"Libellé de l\'erreur\"></a> est incorrect\r\n                </span>\r\n                <a ng-if=\"e.message != \'\'\" href=\"javascript:void(0)\" ng-click=\"popupCtrl.goToAnchor(e.ancre)\" ng-bind=\"e.message\" id=\"id-erreur-lien\" title=\"Libellé de l\'erreur\"></a>\r\n            </li>\r\n        </ul>\r\n    </mw-synthese-erreurs>\r\n    <div class=\"panel panel-primary col-md-12\">\r\n        <div class=\"panel-body no-padding-bottom\">\r\n            <div class=\"row\">\r\n                <form class=\"form-horizontal\" role=\"form\" name=\"popupCtrl.myForm\" novalidate>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"col-md-4\">\r\n                            <input type=\"text\" mw-clear-button id=\"choix-panier\" class=\"form-control\" name=\"choix-panier\" ng-model=\"popupCtrl.panierEnCours\" placeholder=\"Séléctionner un panier\" mw-combobox=\"panier as panier.nom for panier in popupCtrl.listePaniers\" mw-combobox-on-select=\"popupCtrl.changePanier($item)\" ng-disabled=\"popupCtrl.estEnEditionCatalogue || !popupCtrl.estChangementPanierDisponible()\">\r\n                        </div>\r\n                        <div class=\"col-md-8\">\r\n                            <div class=\"form-group has-feedback\">\r\n                                <label class=\"col-md-3 control-label\" for=\"id-nom\">Nom</label>\r\n                                <div class=\"col-md-9\" ng-class=\"{\'has-error\': popupCtrl.myForm.nom.$invalid}\">\r\n                                    <input type=\"text\" mw-clear-button id=\"id-nom\" name=\"nom\" class=\"form-control\" required placeholder=\"\" ng-model=\"popupCtrl.panierEnCours.nom\" maxlength=\"32\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div class=\"row\" ng-show=\"popupCtrl.panierEnCours\">\r\n                <div class=\"col-md-3 no-padding-left\">\r\n                    <p class=\"col-md-12 no-padding-left label-nb-indicateur\">Nombre d\'indicateurs: <span class=\"label-nb-indicateur\" ng-bind=\"popupCtrl.getNombreIndicateurPanier()\"></span>/6</p>\r\n                </div>\r\n                <div class=\"col-md-2 pull-right\" ng-show=\"popupCtrl.estEnEditionPanier\">\r\n                    <button id=\"bouton-mode-edition-panier-enregistrer\" class=\"btn btn-block btn-primary\" ng-click=\"popupCtrl.enregistrerEditionPanier()\">\r\n                        Valider\r\n                    </button>\r\n                </div>\r\n                <div class=\"col-md-2 pull-right\" ng-show=\"popupCtrl.estEnEditionPanier\">\r\n                    <button id=\"bouton-mode-edition-panier-annuler\" class=\"btn btn-block btn-zone\" ng-click=\"popupCtrl.annulerEditionPanier()\">\r\n                        Annuler\r\n                    </button>\r\n                </div>\r\n                <div class=\"col-md-3 pull-right\" ng-show=\"popupCtrl.estAfficheBtnGererLaSelection()\">\r\n                    <button id=\"bouton-mode-edition-panier\" class=\"btn btn-block btn-contextuel\" ng-click=\"popupCtrl.activerModeEditionPanier()\">\r\n                        Gérer la sélection\r\n                    </button>\r\n                </div>\r\n                <div class=\"col-md-3 pull-right\" ng-show=\"popupCtrl.estAfficheBtnSupprimerLaSelection()\">\r\n                    <button id=\"bouton-supprimer-selection\" class=\"btn btn-block btn-contextuel\" ng-click=\"popupCtrl.supprimerTousLesIndicateurs()\">\r\n                        Supprimer la sélection\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div class=\"row drop-content-panier-global pf-drop-target-element\" mw-pf-core-drop-target drop-settings=\"popupCtrl.panierDropSettings\" ng-show=\"popupCtrl.panierEnCours\">\r\n                <ul class=\"nav col-md-12 no-padding-left no-padding-right\">\r\n                    <mw-pf-tuile-panier ng-repeat=\"tuilePanierSettings in popupCtrl.listeTuilePanierSettings track by tuilePanierSettings.id\" tuile-panier-settings=\"tuilePanierSettings\" liste-tuile-catalogue-settings=\"popupCtrl.listeTuileCatalogueSettings\" liste-tuile-panier-settings=\"popupCtrl.listeTuilePanierSettings\" liste-filtres-clients=\"popupCtrl.listeFiltresClients\" liste-filtres-relation-eco=\"popupCtrl.listeFiltresRelationEco\" ng-attr-id=\"pf-tuile-panier-{{$index}}\"></mw-pf-tuile-panier>\r\n                    <li class=\"bloc-content-panier\" ng-show=\"popupCtrl.estAfficherDropPanier\">\r\n                        <div class=\"drop-content-panier pf-drop-target-element\"></div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div class=\"row\">\r\n                <p class=\"col-md-12 text-color-rouge no-padding-left\">\r\n                    <span ng-show=\"popupCtrl.nomFiltre1 || popupCtrl.nomFiltre3\">Attention ! Cette nouvelle configuration supprimera :</span>\r\n\r\n                    <span ng-show=\"popupCtrl.nomFiltre1\"><br>- le filtre <span class=\"texte-gras\">\"<span ng-bind=\"popupCtrl.nomFiltre1\"></span>\"</span></span>\r\n                    <span ng-show=\"popupCtrl.nomFiltre2\"> et le filtre <span class=\"texte-gras\">\"<span ng-bind=\"popupCtrl.nomFiltre2\"></span>\"</span></span>\r\n                    <span ng-show=\"popupCtrl.nomFiltre1\"> de la vue relation économique</span>\r\n\r\n                    <span ng-show=\"popupCtrl.nomFiltre3\"><br>- le filtre <span class=\"texte-gras\">\"<span ng-bind=\"popupCtrl.nomFiltre3\"></span>\"</span></span>\r\n                    <span ng-show=\"popupCtrl.nomFiltre4\"> et le filtre <span class=\"texte-gras\">\"<span ng-bind=\"popupCtrl.nomFiltre4\"></span>\"</span></span>\r\n                    <span ng-show=\"popupCtrl.nomFiltre3\"> de la vue clients</span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <mw-panel niveau=\"2\" titre=\"Les indicateurs\" id=\"panel-catalogue-indicateur\" ng-show=\"popupCtrl.panierEnCours\">\r\n        <div class=\"row drop-content-poubelle pf-drop-target-element\" mw-pf-core-drop-target drop-settings=\"popupCtrl.poubelleDropSettings\">\r\n            <ul class=\"nav col-md-12\">\r\n                <mw-pf-tuile-catalogue ng-repeat=\"tuileCatalogueSettings in popupCtrl.listeTuileCatalogueSettings track by tuileCatalogueSettings.id\" mw-combobox-select-on-exact=\"true\" tuile-catalogue-settings=\"tuileCatalogueSettings\" liste-tuile-catalogue-settings=\"popupCtrl.listeTuileCatalogueSettings\" liste-tuile-panier-settings=\"popupCtrl.listeTuilePanierSettings\" liste-filtres-clients=\"popupCtrl.listeFiltresClients\" liste-filtres-relation-eco=\"popupCtrl.listeFiltresRelationEco\" ng-attr-id=\"pf-tuile-catalogue-{{$index}}\">\r\n                </mw-pf-tuile-catalogue>\r\n            </ul>\r\n        </div>\r\n    </mw-panel>\r\n\r\n</div>\r\n\r\n<div class=\"modal-footer modal-footer-custom\">\r\n    <div class=\"col-md-offset-6 col-md-3\">\r\n        <button type=\"button\" id=\"bouton-modale-annuler\" class=\"btn btn-default\" ng-click=\"popupCtrl.fermer()\">Annuler</button>\r\n    </div>\r\n    <div class=\"col-md-3\">\r\n        <button type=\"button\" id=\"bouton-modale-valider\" class=\"btn btn-primary\" ng-click=\"popupCtrl.valider()\" ng-disabled=\"popupCtrl.estValidable()\">\r\n            Enregistrer la sélection\r\n        </button>\r\n    </div>\r\n</div>\r\n");
$templateCache.put("vues/templates-tableau/colonne-date-derniere-revue-rel.html","<div class=\"col-md-12 colonne-tableau-data-client\" ng-controller=\"ColonneDataDerniereRevueRelControleur as templateControleur\">\r\n    <span ng-class=\"{\'ancienne-revue texte-gras\' : templateControleur.ancienneRevue(mwTableRow)}\" ng-bind=\"templateControleur.valoriserDateRevue(mwTableRow)\"></span>\r\n</div>");
$templateCache.put("vues/templates-tableau/colonne-date-derniere-revue.html","<div class=\"col-md-12 colonne-tableau-data-client\" ng-controller=\"ColonneDataDerniereRevueControleur as templateControleur\">\r\n    <span ng-class=\"{\'ancienne-revue texte-gras\' : templateControleur.ancienneRevue(mwTableRow)}\" ng-bind=\"templateControleur.valoriserDateRevue(mwTableRow)\"></span>\r\n</div>");
$templateCache.put("vues/templates-tableau/colonne-objectif-flux.html","<span>\r\n    <span ng-bind=\"mwTableRow.tauxObjectifFlux\"></span>%\r\n</span>");
$templateCache.put("vues/templates-tableau/colonne-potentiel-prospect.html","<div class=\"col-md-12 colonne-tableau-data-client\" ng-controller=\"ColonnePotentielProspectControleur as templateControleur\">\r\n    <div class=\"row vertical-align-top\">\r\n            <span class=\"pull-right\" ng-bind=\"templateControleur.valoriserPotentielProspect(mwTableRow)\"></span>\r\n    </div>\r\n</div>");
$templateCache.put("vues/templates-tableau/colonne-tableau-data-ca-n-1.html","<div class=\"colonne-tableau-data-client\" ng-controller=\"ColonneDataCAN1Controleur as templateControleur\">\r\n    <!--<div class=\"row template-colonne\">-->\r\n    <div class=\"row\">\r\n        <span ng-bind=\"templateControleur.getTexteCA(mwTableRow)\"></span><br>\r\n        <span ng-bind=\"templateControleur.getTexteDate(mwTableRow)\" ng-if=\"templateControleur.afficherDate\"></span>\r\n    </div>\r\n</div>");
$templateCache.put("vues/templates-tableau/colonne-tableau-data-ca-n.html","<div class=\"colonne-tableau-data-client\" ng-controller=\"ColonneDataCANControleur as templateControleur\">\r\n    <!--<div class=\"row template-colonne\">-->\r\n    <div class=\"row\">\r\n        <span ng-bind=\"templateControleur.getTexteCA(mwTableRow)\"></span>&nbsp;\r\n        <!--  /* A supprimer quand les images seront intégrées au framework  */ -->\r\n        <img id=\"fleche-montante\" alt=\"tendance positive\" ng-show=\"templateControleur.getTendance(mwTableRow) > 0 \" src=\"images/fleche-montante.png\">\r\n        <img id=\"fleche-descendante\" alt=\"tendance négative\" ng-show=\"templateControleur.getTendance(mwTableRow) < 0\" src=\"images/fleche-descendante.png\">\r\n        <img id=\"fleche-neutre\" alt=\"tendance neutre\" ng-show=\"templateControleur.getTendance(mwTableRow) == 0\" src=\"images/fleche-neutre.png\">\r\n        <br>\r\n        <span ng-bind=\"templateControleur.getTexteDate(mwTableRow)\" ng-if=\"templateControleur.afficherDate\"></span>\r\n\r\n    </div>\r\n</div>");
$templateCache.put("vues/templates-tableau/colonne-tableau-data-client.html","<div class=\"col-md-12 colonne-tableau-data-client\" ng-controller=\"ColonneDataClientControleur as templateControleur\">\r\n    <!--<div class=\"row template-colonne\">-->\r\n    <div class=\"row\">\r\n        <span class=\"vertical-align-top\">\r\n            <span class=\"label label-success\" aria-hidden=\"true\" ng-if=\"templateControleur.isActif(mwTableRow)\" ng-bind=\"templateControleur.indicateurActif\">\r\n            </span>\r\n            <span class=\"label label-primary\" aria-hidden=\"true\" ng-if=\"templateControleur.isInactif(mwTableRow)\" ng-bind=\"templateControleur.indicateurInactif\">\r\n            </span>\r\n            <span class=\"label label-warning label-sans-contrat\" aria-hidden=\"true\" ng-show=\"templateControleur.isPremierEquipement(mwTableRow)\">\r\n                <span aria-hidden=\"true\" class=\"icon itce-contact\"></span>\r\n                <span ng-bind=\"templateControleur.indicateurPremierEquipement\"></span>\r\n            </span>\r\n\r\n            <span class=\"label label-warning label-prospet\" aria-hidden=\"true\" ng-if=\"templateControleur.isProspect(mwTableRow)\">\r\n                Prospect\r\n                <span aria-hidden=\"true\" class=\"icon itce-star\" ng-if=\"templateControleur.afficherEtoile(mwTableRow, 1)\">\r\n                </span>\r\n                <span aria-hidden=\"true\" class=\"icon itce-star\" ng-if=\"templateControleur.afficherEtoile(mwTableRow, 2)\">\r\n                </span>\r\n                <span aria-hidden=\"true\" class=\"icon itce-star\" ng-if=\"templateControleur.afficherEtoile(mwTableRow, 3)\">\r\n                </span>\r\n            </span>\r\n            <span class=\"label label-warning label-sans-contrat\" aria-hidden=\"true\" ng-show=\"templateControleur.isSansContrat(mwTableRow)\">Sans contrat</span>\r\n            <span ng-bind=\"mwTableRow.nom\"></span> (<span ng-bind=\"mwTableRow.id\"></span>)<br>\r\n            <span class=\"label label-default\" aria-hidden=\"true\" ng-if=\"mwTableRow.estLeader\" ng-bind=\"templateControleur.indicateurLeader\">\r\n            </span>\r\n            <span ng-bind=\"mwTableRow.nomRelationEconomique\" class=\"texte-relation-eco\">\r\n            </span><br>\r\n        </span>\r\n    </div>\r\n</div>");
$templateCache.put("vues/templates-tableau/colonne-tableau-data-number.html","<div class=\"pf-tuile-indicateur\">\r\n    <div ng-attr-class=\"cadre color-bleu\">\r\n        <div class=\"pf-corps\">\r\n            <p class=\"valeur\" ng-bind=\"mwTableRow.listeIndicateurs[4].valeurNumber\"></p>\r\n        </div>\r\n    </div>\r\n</div>");
$templateCache.put("vues/templates-tableau/colonne-tableau-data-relation.html","<div class=\"col-md-12\" ng-controller=\"ColonneDataRelationControleur as templateControleur\">\r\n    <div class=\"row\">\r\n        <span class=\"vertical-align-top\">\r\n            <span class=\"label label-warning\" aria-hidden=\"true\" ng-if=\"templateControleur.isProspect(mwTableRow)\" ng-bind=\"templateControleur.indicateurProspect\"></span>\r\n            <span ng-bind=\"mwTableRow.nom\"></span>\r\n        </span>\r\n    </div>\r\n</div>");
$templateCache.put("vues/templates-tableau/colonne-tableau-flux-crediteur.html","<div class=\"colonne-tableau-data-client\" ng-controller=\"ColonneFluxCrediteurControleur as templateControleur\">\r\n    <!--<div class=\"row template-colonne\">-->\r\n    <div class=\"row\">\r\n        <span ng-bind=\"templateControleur.getMontant(mwTableRow)\"></span>&nbsp;\r\n        <!--  /* A supprimer quand les images seront intégrées au framework  */ -->\r\n        <img id=\"fleche-montante\" alt=\"tendance positive\" ng-show=\"templateControleur.getTendance(mwTableRow) > 0 \" src=\"images/fleche-montante.png\">\r\n        <img id=\"fleche-descendante\" alt=\"tendance négative\" ng-show=\"templateControleur.getTendance(mwTableRow) < 0\" src=\"images/fleche-descendante.png\">\r\n        <img id=\"fleche-neutre\" alt=\"tendance neutre\" ng-show=\"templateControleur.getTendance(mwTableRow) == 0\" src=\"images/fleche-neutre.png\">\r\n    </div>\r\n</div>");
$templateCache.put("vues/templates-tableau/colonne-tableau-flux-debiteur.html","<div class=\"colonne-tableau-data-client\" ng-controller=\"ColonneFluxDebiteurControleur as templateControleur\">\r\n    <!--<div class=\"row template-colonne\">-->\r\n    <div class=\"row\">\r\n        <span ng-bind=\"templateControleur.getMontant(mwTableRow)\"></span>&nbsp;\r\n        <!--  /* A supprimer quand les images seront intégrées au framework  */ -->\r\n        <img id=\"fleche-montante\" alt=\"tendance positive\" ng-show=\"templateControleur.getTendance(mwTableRow) > 0 \" src=\"images/fleche-montante.png\">\r\n        <img id=\"fleche-descendante\" alt=\"tendance négative\" ng-show=\"templateControleur.getTendance(mwTableRow) < 0\" src=\"images/fleche-descendante.png\">\r\n        <img id=\"fleche-neutre\" alt=\"tendance neutre\" ng-show=\"templateControleur.getTendance(mwTableRow) == 0\" src=\"images/fleche-neutre.png\">\r\n    </div>\r\n</div>");
$templateCache.put("vues/templates-tableau/colonne-tableau-indicateurs.html","<div class=\"col-md-12\">\r\n    <div class=\"row\">\r\n        <mw-pf-tuile-indicateur ng-repeat=\"indicateur in mwTableRow.listeIndicateurs track by $index\" couleur=\"indicateur.couleur\" intitule=\"indicateur.intitule\" icone=\"indicateur.icone\" valeur=\"indicateur.valeur\" ng-attr-id=\"pf-tuile-indicateur-{{$index}}\"></mw-pf-tuile-indicateur>\r\n    </div>\r\n</div>");
$templateCache.put("vues/templates-tableau/colonne-tableau-pnb-n.html","<div class=\"colonne-tableau-data-client\" ng-controller=\"ColonnePnbAnneeNControleur as templateControleur\">\r\n    <!--<div class=\"row template-colonne\">-->\r\n    <div class=\"row\">\r\n        <span ng-bind=\"templateControleur.getMontant(mwTableRow) | montantFiltre: true\"></span>&nbsp;\r\n        <!--  /* A supprimer quand les images seront intégrées au framework  */ -->\r\n        <img id=\"fleche-montante\" alt=\"tendance positive\" ng-show=\"templateControleur.getTendance(mwTableRow) > 0 \" src=\"images/fleche-montante.png\">\r\n        <img id=\"fleche-descendante\" alt=\"tendance négative\" ng-show=\"templateControleur.getTendance(mwTableRow) < 0\" src=\"images/fleche-descendante.png\">\r\n        <img id=\"fleche-neutre\" alt=\"tendance neutre\" ng-show=\"templateControleur.getTendance(mwTableRow) == 0\" src=\"images/fleche-neutre.png\">\r\n    </div>\r\n</div>");
$templateCache.put("vues/templates-tableau/colonne-tableau-statut.html","<span ng-show=\"mwTableRow.listeIndicateurs\" ng-controller=\"ColonneStatutControleur as ctrl\">\r\n    <span ng-show=\"ctrl.isActif(mwTableRow)\" class=\"label label-success\" ng-bind=\"ctrl.indicateurActif\"></span>\r\n    <span ng-show=\"ctrl.isInactif(mwTableRow)\" class=\"label label-primary\" ng-bind=\"ctrl.indicateurInactif\"></span>\r\n    <span ng-show=\"ctrl.isProspect(mwTableRow)\" class=\"label label-default\" ng-bind=\"ctrl.indicateurProspect\"></span>\r\n</span>");
$templateCache.put("vues/templates-tableau/colonne-tableau-top-cc.html","<div class=\"col-md-12 colonne-tableau-data-client\" ng-controller=\"ColonneTopCCControleur as templateControleur\">\r\n    <div class=\"row\">\r\n        <span ng-class=\"{\'Vert\':\'pastille-verte-md\', \'Rouge\':\'pastille-rouge-md\', Orange:\'pastille-orange-md\', \'Blanc\':\'pastille-blanche-md\'}[templateControleur.valoriserTopCC(mwTableRow)]\"></span>\r\n    </div>\r\n</div>");
$templateCache.put("typescript/directives/pf-bloc-condition-filtre/pf-bloc-condition-filtre-vue.html","<form class=\"form-horizontal col-md-12 pf-bloc-condition-filtre\" name=\"form\">\r\n    <div class=\"col-md-12\" ng-show=\"pfBlocConditionFiltreCtrl.afficherOperateur\">\r\n        <!-- Opérateur booléen -->\r\n        <br>\r\n        <div class=\"col-md-4\">\r\n            <input type=\"text\" mw-clear-button id=\"choix-operateur\" class=\"form-control\" name=\"choix-operateur\" ng-model=\"pfBlocConditionFiltreCtrl.filtre.operateur\" placeholder=\"ET / OU\" mw-combobox=\"operateur for operateur in pfBlocConditionFiltreCtrl.listeOperateurs\">\r\n            <br>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-md-12 mw-bloc-contenu\" id=\"bloc-contenu-condition\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <input type=\"text\" mw-clear-button id=\"choix-indicateur\" class=\"form-control\" name=\"choix-indicateur\" ng-model=\"pfBlocConditionFiltreCtrl.filtre.indicateur\" placeholder=\"Sélectionner un indicateur\" mw-combobox=\"indicateur as indicateur.indicateur.intitule for indicateur in pfBlocConditionFiltreCtrl.getListeIndicateurs(pfBlocConditionFiltreCtrl.noIndex)\" mw-combobox-on-select=\"pfBlocConditionFiltreCtrl.selectionIndicateur()\" mw-combobox-open=\"pfBlocConditionFiltreCtrl.isOpen\" mw-combobox-focus-first=\"true\" ng-change=\"pfBlocConditionFiltreCtrl.selectionIndicateur()\">\r\n            </div>\r\n            <!--| sansIndicateurDateFiltre\"-->\r\n            <div class=\"col-md-offset-5 col-md-3\">\r\n                <button class=\"btn btn-block btn-default\" id=\"bouton-supprimer-condition\" ng-click=\"pfBlocConditionFiltreCtrl.supprimerCondition()\" type=\"button\">Supprimer</button>\r\n            </div>\r\n        </div>\r\n        <br>\r\n        <div class=\"row\">\r\n            <!-- Label -->\r\n            <label ng-show=\"pfBlocConditionFiltreCtrl.filtre.indicateur\" class=\"control-label col-md-2 label-valeurs\" for=\"choix-comparateur\">Afficher</label>\r\n\r\n            <!-- Type Nombre ou Montant ou Pourcent -->\r\n            <div ng-show=\"pfBlocConditionFiltreCtrl.estIndicateurNumerique\">\r\n                <!-- Choix du comparateur -->\r\n                <div class=\"col-md-4\">\r\n                    <input type=\"text\" mw-clear-button id=\"choix-comparateur\" class=\"form-control\" name=\"choix-comparateur\" required ng-model=\"pfBlocConditionFiltreCtrl.filtre.comparateur\" placeholder=\"Sens de comparaison\" mw-combobox=\"comparateur for comparateur in pfBlocConditionFiltreCtrl.listeComparateurs\">\r\n                </div>\r\n                <div ng-hide=\"pfBlocConditionFiltreCtrl.estComparateurDeTypeNC\">\r\n                    <!-- Comparaison simple -->\r\n                    <div ng-hide=\"pfBlocConditionFiltreCtrl.comparateurUniqueInactif\" class=\"col-md-5 form-group\">\r\n                        <div class=\"col-md-5\">\r\n                            <input type=\"number\" mw-clear-button class=\"form-control\" id=\"valeur-unique\" ng-model=\"pfBlocConditionFiltreCtrl.filtre.valeurUnique\">\r\n                        </div>\r\n                        <span class=\"col-md-2 control-label label-valeurs\" ng-bind=\"pfBlocConditionFiltreCtrl.uniteMax\">\r\n                        </span>\r\n                    </div>\r\n                    <!-- Comparaison multiple -->\r\n                    <div ng-show=\"pfBlocConditionFiltreCtrl.estComparateurDeTypeEntre\" class=\"col-md-5 form-group\">\r\n                        <div class=\"col-md-4\">\r\n                            <input type=\"number\" mw-clear-button class=\"form-control\" id=\"valeur-multiple-1\" ng-model=\"pfBlocConditionFiltreCtrl.filtre.valeurMultiple1\">\r\n                        </div>\r\n                        <span class=\"col-md-1 control-label\" ng-show=\"pfBlocConditionFiltreCtrl.estUniteMin\" ng-bind=\"pfBlocConditionFiltreCtrl.uniteMin\">\r\n                        </span>\r\n                        <div class=\"col-md-2\">\r\n                            <p class=\"centrer-aligner-text\">et</p>\r\n                        </div>\r\n                        <div class=\"col-md-4\">\r\n                            <input type=\"number\" mw-clear-button class=\"form-control\" id=\"valeur-multiple-2\" ng-model=\"pfBlocConditionFiltreCtrl.filtre.valeurMultiple2\">\r\n                        </div>\r\n                        <span class=\"col-md-1 control-label\" ng-bind=\"pfBlocConditionFiltreCtrl.uniteMax\">\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- Type Texte -->\r\n            <div ng-show=\"pfBlocConditionFiltreCtrl.estIndicateurTexte\">\r\n                <div class=\"form-group col-md-8\">\r\n                    <section ng-repeat=\"valeur in pfBlocConditionFiltreCtrl.listeValeurs track by $index\" class=\"mw-input-check vertical-alignement col-md-12\">\r\n                        <label ng-attr-for=\"id-check-{{pfBlocConditionFiltreCtrl.codeIndicateur}}-{{valeur.libelle}}\" ng-attr-id=\"id-label-check-{{pfBlocConditionFiltreCtrl.codeIndicateur}}-{{valeur.libelle}}\" class=\"col-md-5\">\r\n                            <input ng-attr-id=\"id-check-{{pfBlocConditionFiltreCtrl.codeIndicateur}}-{{valeur.libelle}}\" type=\"checkbox\" ng-model=\"valeur.actif\" ng-attr-aria-checked=\"valeur.actif\" ng-attr-aria-labelledby=\"id-check-{{pfBlocConditionFiltreCtrl.codeIndicateur}}-{{valeur.libelle}}\">\r\n                            <span aria-hidden=\"true\" class=\"icon\" ng-class=\"{\'itce-fa-check\':valeur.actif}\"></span>\r\n                            <span ng-bind=\"valeur.libelle\"></span>\r\n                        </label>\r\n                    </section>\r\n                </div>\r\n            </div>\r\n\r\n                <!-- Type Begacli -->\r\n                <div ng-show=\"pfBlocConditionFiltreCtrl.estIndicateurBegacli\" class=\"col-md-12\">\r\n\r\n                    <div class=\"form-group col-md-12 cadre-begacli\">\r\n                        <div class=\"col-md-12 vertical-alignement\">\r\n                            <span class=\"col-md-6 a-gauche-titre\">Univers</span>\r\n                            <span class=\"col-md-2\">Equipé</span>\r\n                            <span class=\"col-md-2\">Non Equipé</span>\r\n\r\n                        </div>\r\n\r\n                        <section ng-repeat=\"lettreBegacli in pfBlocConditionFiltreCtrl.filtreBegacli.listeLettres track by $index\" class=\"mw-input-check vertical-alignement col-md-12\">\r\n\r\n                            <span class=\"col-md-6 control-label a-gauche-text\" ng-bind=\"lettreBegacli.univers\">\r\n                            </span>\r\n                            <label ng-attr-for=\"id-check-begacli-maj-{{$index}}\" ng-attr-id=\"id-label-begacli-maj-{{$index}}\" class=\"col-md-2 cadrer-coche\">\r\n                                <input ng-attr-id=\"id-check-begacli-maj-{{$index}}\" type=\"checkbox\" ng-model=\"lettreBegacli.choisiMaj\" ng-change=\"pfBlocConditionFiltreCtrl.begacliChangeMaj(lettreBegacli)\" ng-attr-aria-checked=\"lettreBegacli.choisiMaj\" ng-attr-aria-labelledby=\"id-check-begacli-maj-{{$index}}\">\r\n                                <span aria-hidden=\"true\" class=\"icon\" ng-class=\"{\'itce-fa-check\':lettreBegacli.choisiMaj}\"></span>\r\n                                <span ng-bind=\"lettreBegacli.lettreMaj\"></span>\r\n                            </label>\r\n\r\n                            <label ng-attr-for=\"id-check-begacli-min-{{$index}}\" ng-attr-id=\"id-label-begacli-min-{{$index}}\" class=\"col-md-2 cadrer-coche\">\r\n                                <input ng-attr-id=\"id-check-begacli-min-{{$index}}\" type=\"checkbox\" ng-model=\"lettreBegacli.choisiMin\" ng-change=\"pfBlocConditionFiltreCtrl.begacliChangeMin(lettreBegacli)\" ng-attr-aria-checked=\"lettreBegacli.choisiMin\" ng-attr-aria-labelledby=\"id-check-begacli-min-{{$index}}\">\r\n                                <span aria-hidden=\"true\" class=\"icon\" ng-class=\"{\'itce-fa-check\':lettreBegacli.choisiMin}\"></span>\r\n                                <span ng-bind=\"lettreBegacli.lettreMin\"></span>\r\n                            </label>\r\n\r\n                        </section>\r\n                    </div>\r\n\r\n\r\n                    <div class=\"form-group col-md-offset-2 col-md-9 cadre-begacli\">\r\n                        <div class=\"col-md-12\">\r\n                            <span class=\"col-md-6 a-gauche-titre\">Nombre d\'univers équipés</span>\r\n                        </div>\r\n                        <section ng-repeat=\"nombreBegacli in pfBlocConditionFiltreCtrl.filtreBegacli.listeNombres track by $index\" class=\"mw-input-check col-md-2\">\r\n\r\n                            <label ng-attr-for=\"id-check-begacli-nombre-{{$index}}\" ng-attr-id=\"id-label-begacli-nombre-{{$index}}\" class=\"col-md-2\">\r\n                                <input ng-attr-id=\"id-check-begacli-nombre-{{$index}}\" type=\"checkbox\" ng-model=\"nombreBegacli.choisi\" ng-attr-aria-checked=\"nombreBegacli.choisi\" ng-attr-aria-labelledby=\"id-check-begacli-nombre-{{$index}}\">\r\n                                <span aria-hidden=\"true\" class=\"icon\" ng-class=\"{\'itce-fa-check\':nombreBegacli.choisi}\"></span>\r\n                                <span ng-bind=\"nombreBegacli.nombre\"></span>\r\n                            </label>\r\n                        </section>\r\n                    </div>\r\n\r\n\r\n                    <!--<div class=\"form-group col-md-12\">     \r\n                        <span class=\"col-md-2 control-label a-gauche-text\">\r\n                            Afficher les valeurs NC\r\n                        </span>\r\n\r\n                        <section class=\"mw-input-check  col-md-2  \">\r\n                            <label ng-attr-for=\"id-check-begacli-nc\"\r\n                                   ng-attr-id=\"id-label-begacli-nc\"\r\n                                   class=\"col-md-12 cadrer-coche-nc\">\r\n                                <input ng-attr-id=\"id-check-begacli-nc\"\r\n                                       type=\"checkbox\"\r\n                                       ng-model=\"pfBlocConditionFiltreCtrl.filtreBegacli.choisiNC\"\r\n                                       ng-attr-aria-checked=\"pfBlocConditionFiltreCtrl.filtreBegacli.choisiNC\"\r\n                                       ng-attr-aria-labelledby=\"id-check-begacli-nc\" />\r\n                                <span aria-hidden=\"true\" class=\"icon \"\r\n                                      ng-class=\"{\'itce-fa-check\':pfBlocConditionFiltreCtrl.filtreBegacli.choisiNC}\"></span>\r\n                            </label>\r\n                            </section>\r\n\r\n                    </div>-->\r\n\r\n                </div>\r\n\r\n                <!-- Type Date -->\r\n                <div ng-show=\"pfBlocConditionFiltreCtrl.estIndicateurDeTypeDate\">\r\n                    <!-- Choix du comparateur -->\r\n                    <div class=\"col-md-4\">\r\n                        <input type=\"text\" mw-clear-button id=\"choix-comparateur-date\" class=\"form-control\" name=\"choix-comparateur\" required ng-model=\"pfBlocConditionFiltreCtrl.filtre.comparateur\" placeholder=\"Sens de comparaison\" mw-combobox=\"comparateur for comparateur in pfBlocConditionFiltreCtrl.listeComparateurs\">\r\n                    </div>\r\n                    <div ng-hide=\"pfBlocConditionFiltreCtrl.cacheChampsSaisieDate\">\r\n                        <!-- Comparaison simple -->\r\n                        <div ng-hide=\"pfBlocConditionFiltreCtrl.cacheChampSaisieDateSimple\" class=\"col-md-5 form-group\">\r\n                            <div class=\"col-sm-6 has-feedback\">\r\n                                <input type=\"text\" class=\"form-control ng-pristine ng-valid ng-isolate-scope ng-valid-date ng-valid-required ng-touched\" id=\"date-comparaison-simple\" name=\"dateRelance\" ng-model=\"pfBlocConditionFiltreCtrl.filtre.valeurUnique\" mw-date-legere uib-datepicker-popup=\"dd/MM/yyyy\" datepicker-options=\"{ showWeeks: false, startingDay:1}\" is-open=\"champsLibres.valeurUnique\" show-button-bar=\"true\" date-disabled=\"champsLibres.dateDisabled(date,mode)\">\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Comparaison multiple -->\r\n                        <div ng-show=\"pfBlocConditionFiltreCtrl.estComparateurDeTypeEntre\" class=\"col-md-6 form-group\">\r\n                            <div class=\"col-sm-5 has-feedback\">\r\n                                <input type=\"text\" class=\"form-control ng-pristine ng-valid ng-isolate-scope ng-valid-date ng-valid-required ng-touched\" id=\"date-comparaison-multiple-1\" name=\"dateComparaisonMultiple1\" ng-model=\"pfBlocConditionFiltreCtrl.filtre.valeurMultiple1\" mw-date-legere=\"\" uib-datepicker-popup=\"dd/MM/yyyy\" datepicker-options=\"{ showWeeks: false, startingDay:1}\" is-open=\"champsLibres.valeurMultiple1\" show-button-bar=\"true\" date-disabled=\"champsLibres.dateDisabled(date,mode)\">\r\n                            </div>\r\n                            <div class=\"col-md-1\">\r\n                                <p class=\"centrer-aligner-text\">et</p>\r\n                            </div>\r\n                            <div class=\"col-sm-5 has-feedback\">\r\n                                <input type=\"text\" class=\"form-control ng-pristine ng-valid ng-isolate-scope ng-valid-date ng-valid-required ng-touched\" id=\"date-comparaison-multiple-2\" name=\"dateComparaisonMultiple2\" ng-model=\"pfBlocConditionFiltreCtrl.filtre.valeurMultiple2\" mw-date-legere=\"\" uib-datepicker-popup=\"dd/MM/yyyy\" datepicker-options=\"{ showWeeks: false, startingDay:1}\" show-button-bar=\"true\" is-open=\"champsLibres.valeurMultiple2\" date-disabled=\"champsLibres.dateDisabled(date,mode)\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    </div>\r\n</form>");
$templateCache.put("typescript/directives/pf-diagramme-grande-barre/pf-diagramme-grande-barre-vue.html","<div class=\"pf-diagramme-grande-barre\">\r\n    <p class=\"intitule\" ng-bind=\"pfDiagrammeGrandeBarreCtrl.config.intitule\"></p>\r\n    <div class=\"barre\" ng-style=\"{\'background-color\': pfDiagrammeGrandeBarreCtrl.config.couleur, \'width\': pfDiagrammeGrandeBarreCtrl.pourcentage + \'%\'}\">\r\n        <span class=\"valeur\" ng-bind=\"(pfDiagrammeGrandeBarreCtrl.config.valeur | number) + \' k€\'\"></span>\r\n    </div>\r\n</div>");
$templateCache.put("typescript/directives/pf-diagramme-colonne/pf-diagramme-colonne-vue.html","<div>\r\n    <div ng-class=\"{0:\'pf-diagramme-colonne\', 1:\'pf-diagramme-colonne-detail\'}[pfDiagrammeColonneCtrl.typeDiagramme]\" ng-style=\"{\'max-height\': \'30em\'}\">\r\n        <mw-pf-indicateur-colonne class=\"colonne-indicateur\" ng-repeat=\"config in pfDiagrammeColonneCtrl.config track by $index\" ng-attr-id=\"config.id\" data=\"config\">\r\n        </mw-pf-indicateur-colonne>\r\n    </div>\r\n</div>");
$templateCache.put("typescript/directives/pf-diagramme-donut/pf-diagramme-donut-vue.html","<div class=\"form-horizontal pf-diagramme-donut\">\r\n    <div class=\"bloc-en-tete form-group\">\r\n        <p class=\"titre col-lg-8 col-md-6\" ng-bind=\"pfDiagrammeDonutCtrl.config.titre\"></p>\r\n        <div class=\"col-lg-5 col-md-6\">\r\n            <input type=\"text\" mw-clear-button id=\"id-donut\" class=\"form-control\" name=\"idMedia\" ng-change=\"pfDiagrammeDonutCtrl.echangerDonuts()\" ng-model=\"pfDiagrammeDonutCtrl.config.donutChoisi\" mw-combobox=\"nomDonut as nomDonut for nomDonut in pfDiagrammeDonutCtrl.listeDonuts\" mw-combobox-on-select=\"pfDiagrammeDonutCtrl.echangerDonuts($item, $model, $label, $event)\">\r\n        </div>\r\n    </div>\r\n    <div ng-attr-id=\"{{::pfDiagrammeDonutCtrl.svgId}}\" class=\"svg-container\"></div>\r\n    <div class=\"bloc-legende\">\r\n        <mw-pf-puce-legende ng-repeat=\"config in pfDiagrammeDonutCtrl.listeConfigPuceLegende track by $index\" ng-show=\"config.affichagePuceLegendeActif\" class=\"legende\" ng-attr-id=\"puce-donut-{{$index}}\" intitule=\"{{config.intitule}}\" couleur=\"{{config.couleur}}\"></mw-pf-puce-legende>\r\n    </div>\r\n</div>");
$templateCache.put("typescript/directives/pf-detail-filtre/pf-detail-filtre-vue.html","<section class=\"pf-detail-filtre\">\r\n    <span class=\"btn-supprimer icon itce-times\" aria-hidden=\"true\" ng-click=\"pfDetailFiltreCtrl.supprimerFiltres()\" role=\"button\" title=\"Supprimer tous les filtres\"></span>\r\n    <article class=\"filtre\" ng-repeat=\"filtre in pfDetailFiltreCtrl.listeFiltres track by $index\">\r\n        <span ng-if=\"filtre.operateur\" ng-bind=\"filtre.operateur\"></span>\r\n        <span ng-bind=\"pfDetailFiltreCtrl.getTxtFiltre(filtre)\"></span>\r\n    </article>\r\n</section>");
$templateCache.put("typescript/directives/pf-diagramme-pourcentage/pf-diagramme-pourcentage-vue.html","<div>\r\n    <div class=\"pf-diagramme-colonne-detail ie-test\">\r\n        <mw-pf-indicateur-pourcentage class=\"colonne-indicateur\" ng-repeat=\"config in pfDiagrammePourcentageCtrl.config track by $index\" ng-attr-id=\"config.id\" config=\"config\">\r\n        </mw-pf-indicateur-pourcentage>\r\n    </div>\r\n</div>");
$templateCache.put("typescript/directives/pf-choix-portefeuille/pf-choix-portefeuille-vue.html","<div class=\"col-md-4 col-lg-4 pull-right content-choix-portefeuille\" ng-if=\"PfChoixPortefeuilleCtrl.aPortefeuille()\">\r\n    <mw-bouton-volet id=\"btn-volet-portefeuille\" modele=\"zone\" texte=\"{{PfChoixPortefeuilleCtrl.getTxtChoixPortefeuille()}}\" fermeture-auto=\"non\" ng-show=\"PfChoixPortefeuilleCtrl.estDesignation()\" ng-click=\"PfChoixPortefeuilleCtrl.ouvrirFermerChoixPortefeuille()\" ouvert=\"PfChoixPortefeuilleCtrl.ouvertureVoletChoixPortefeuille\" role=\"button\" class=\"col-md-12 col-lg-10 pull-right no-padding-right\">\r\n        <div class=\"form-group dv-choix-portefeuille\" ng-click=\"PfChoixPortefeuilleCtrl.stopPropagation($event)\" role=\"button\" ng-class=\"{\'display-block\':(PfChoixPortefeuilleCtrl.finInit)}\">\r\n            <div>\r\n                <ul class=\"list-group\">\r\n                    <li class=\"list-group-item\" ng-show=\"PfChoixPortefeuilleCtrl.estVueGlobalConsolide\">\r\n                        <div class=\"mw-input-check vertical-alignement\">\r\n                            <label for=\"id-checkbox-multi\" id=\"id-label-multi\" ng-click=\"PfChoixPortefeuilleCtrl.forceMultiSelection($event)\" ng-keydown=\"PfChoixPortefeuilleCtrl.keyDownTroisEtat($event)\" role=\"button\">\r\n                                <input type=\"checkbox\" id=\"id-checkbox-multi\" ng-model=\"PfChoixPortefeuilleCtrl.tousPortfeuillesSelectionnes\" indeterminate=\"{{PfChoixPortefeuilleCtrl.setIndetermine()}}\" aria-checked=\"{{PfChoixPortefeuilleCtrl.aTousPortefeuillesCoches()}}\" aria-labelledby=\"id-label-multi\" mw-indeterminate-trois-etats>\r\n                                <span aria-hidden=\"true\" class=\"icon\" ng-class=\"{\'itce-fa-check\':(PfChoixPortefeuilleCtrl.isCheckedGlobal()), \'itce-minus\':(PfChoixPortefeuilleCtrl.setIndetermine())}\">\r\n                                </span>\r\n                                <span ng-bind=\"PfChoixPortefeuilleCtrl.getLabelTroisEtats()\"></span>\r\n                            </label>\r\n                        </div>\r\n                    </li>\r\n                    <li ng-repeat=\"ptf in PfChoixPortefeuilleCtrl.listePortefeuillesDropDown track by $index\" ng-init=\"indexAgent = $index\" class=\"list-group-item\">\r\n                        <div class=\"mw-input-check vertical-alignement\">\r\n                            <label ng-attr-for=\"id-agent-portefeuille-{{indexAgent}}\" ng-attr-id=\"id-agent-label-portefeuille-{{indexAgent}}\" ng-click=\"PfChoixPortefeuilleCtrl.forceMultiSelection($event, indexAgent)\" ng-keydown=\"PfChoixPortefeuilleCtrl.keyDownTroisEtat($event, indexAgent)\" ng-show=\"PfChoixPortefeuilleCtrl.estVueGlobalConsolide\" role=\"button\">\r\n                                <input type=\"checkbox\" ng-attr-id=\"id-agent-portefeuille-{{indexAgent}}\" ng-model=\"PfChoixPortefeuilleCtrl.listePortefeuillesDropDown[indexAgent].estAffiche\" indeterminate=\"{{PfChoixPortefeuilleCtrl.setIndetermine(indexAgent)}}\" aria-checked=\"{{PfChoixPortefeuilleCtrl.aTousPortefeuillesCoches(indexAgent)}}\" ng-attr-aria-labelledby=\"id-agent-label-portefeuille-{{indexAgent}}\" mw-indeterminate-trois-etats>\r\n                                <span aria-hidden=\"true\" class=\"icon\" ng-class=\"{\'itce-fa-check\':(PfChoixPortefeuilleCtrl.isCheckedGlobal(indexAgent)), \'itce-minus\':(PfChoixPortefeuilleCtrl.setIndetermine(indexAgent))}\">\r\n                                </span>\r\n                                <span ng-bind=\"PfChoixPortefeuilleCtrl.getLibelleAgent(indexAgent)\"></span><br><br>\r\n                            </label>\r\n                            <div ng-class=\"{\'bloc-choix-ptf\': PfChoixPortefeuilleCtrl.aPortefeuilleReel() && PfChoixPortefeuilleCtrl.aSuiviParComplementaire() }\" ng-show=\"PfChoixPortefeuilleCtrl.aPortefeuilleReel()\">\r\n                                <span ng-show=\"PfChoixPortefeuilleCtrl.aPortefeuilleReel() && !PfChoixPortefeuilleCtrl.estVueGlobalConsolide\">Choisir un ou plusieurs portefeuilles</span>\r\n                                <ul class=\"bloc-liste-portefeuille\">\r\n                                    <li class=\"list-group-item\" ng-show=\"PfChoixPortefeuilleCtrl.aPortefeuilleReel() && PfChoixPortefeuilleCtrl.nbPortefeuilleReel() > 1 && !PfChoixPortefeuilleCtrl.estVueGlobalConsolide\">\r\n                                        <div class=\"mw-input-check vertical-alignement\">\r\n                                            <label for=\"id-checkbox-multi\" id=\"id-label-multi-portefeuille\" ng-click=\"PfChoixPortefeuilleCtrl.forceMultiSelection($event, indexAgent, false)\" ng-keydown=\"PfChoixPortefeuilleCtrl.keyDownTroisEtat($event, indexAgent)\" role=\"button\">\r\n                                                <input type=\"checkbox\" id=\"id-checkbox-multi\" ng-model=\"PfChoixPortefeuilleCtrl.listePortefeuillesDropDown[indexAgent].estAffiche\" indeterminate=\"{{PfChoixPortefeuilleCtrl.setIndetermine(indexAgent, false)}}\" aria-checked=\"{{PfChoixPortefeuilleCtrl.aTousPortefeuillesCoches(indexAgent, false)}}\" aria-labelledby=\"id-label-multi-portefeuille\" mw-indeterminate-trois-etats>\r\n                                                <span aria-hidden=\"true\" class=\"icon\" ng-class=\"{\'itce-fa-check\':(PfChoixPortefeuilleCtrl.aTousPortefeuillesCoches(indexAgent, false)), \'itce-minus\':(PfChoixPortefeuilleCtrl.setIndetermine(indexAgent, false))}\">\r\n                                                </span>\r\n                                                <span ng-bind=\"PfChoixPortefeuilleCtrl.getLabelTroisEtats(indexAgent, false)\"></span>\r\n                                            </label>\r\n                                        </div>\r\n                                    </li>\r\n                                    <li ng-repeat=\"ptf in PfChoixPortefeuilleCtrl.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent track by $index\" ng-init=\"indexPortfeuille = $index\" class=\"list-group-item\" ng-show=\"PfChoixPortefeuilleCtrl.getEstPortefeuille(indexPortfeuille, indexAgent)\">\r\n                                        <div class=\"mw-input-check vertical-alignement\">\r\n                                            <label ng-attr-for=\"id-portefeuille-{{indexAgent}}-{{indexPortfeuille}}\" ng-attr-id=\"id-label-portefeuille-{{indexAgent}}-{{indexPortfeuille}}\">\r\n                                                <input type=\"checkbox\" ng-attr-id=\"id-portefeuille-{{indexAgent}}-{{indexPortfeuille}}\" ng-model=\"PfChoixPortefeuilleCtrl.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].estAffiche\" ng-attr-aria-checked=\"PfChoixPortefeuilleCtrl.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].isVisu\" ng-attr-aria-labelledby=\"id-label-portefeuille-{{indexAgent}}-{{indexPortfeuille}}\" ng-change=\"PfChoixPortefeuilleCtrl.majSelection(indexPortfeuille, indexAgent)\">\r\n                                                <span aria-hidden=\"true\" class=\"icon\" ng-class=\"{\'itce-fa-check\':PfChoixPortefeuilleCtrl.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].estAffiche}\">\r\n                                                </span>\r\n                                                <span ng-bind=\"PfChoixPortefeuilleCtrl.getLibelleEtIdPortefeuille(indexPortfeuille, indexAgent)\"></span><br>\r\n                                            </label>\r\n                                        </div>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                            <div ng-if=\"PfChoixPortefeuilleCtrl.aPortefeuilleReel() && PfChoixPortefeuilleCtrl.aSuiviParComplementaire()\" class=\"separateur\">Ou</div>\r\n                            <div ng-class=\"{\'bloc-choix-ptf\': PfChoixPortefeuilleCtrl.aPortefeuilleReel() && PfChoixPortefeuilleCtrl.aSuiviParComplementaire() }\" ng-show=\"PfChoixPortefeuilleCtrl.aSuiviParComplementaire()\">\r\n                                <span ng-if=\"PfChoixPortefeuilleCtrl.aSuiviParComplementaire()\">Choisir un portefeuille complémentaire</span>\r\n                                <ul class=\"bloc-liste-portefeuille\" ng-show=\"PfChoixPortefeuilleCtrl.aSuiviParComplementaire()\">\r\n                                    <li ng-repeat=\"ptf in PfChoixPortefeuilleCtrl.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent track by $index\" ng-init=\"indexPortfeuille = $index\" class=\"list-group-item\" ng-show=\"PfChoixPortefeuilleCtrl.getEstSuiviParComplementaire(indexPortfeuille, indexAgent)\">\r\n                                        <div class=\"mw-input-check vertical-alignement\">\r\n                                            <label ng-attr-for=\"id-portefeuille-{{indexAgent}}-{{indexPortfeuille}}\" ng-attr-id=\"id-label-portefeuille-{{indexAgent}}-{{indexPortfeuille}}\">\r\n                                                <input type=\"checkbox\" ng-attr-id=\"id-portefeuille-{{indexAgent}}-{{indexPortfeuille}}\" ng-model=\"PfChoixPortefeuilleCtrl.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].estAffiche\" ng-attr-aria-checked=\"PfChoixPortefeuilleCtrl.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].isVisu\" ng-attr-aria-labelledby=\"id-label-portefeuille-{{indexAgent}}-{{indexPortfeuille}}\" ng-change=\"PfChoixPortefeuilleCtrl.majSelection(indexPortfeuille, indexAgent)\">\r\n                                                <span aria-hidden=\"true\" class=\"icon\" ng-class=\"{\'itce-fa-check\':PfChoixPortefeuilleCtrl.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].estAffiche}\">\r\n                                                </span>\r\n                                                <span ng-bind=\"PfChoixPortefeuilleCtrl.getLibelleEtIdPortefeuille(indexPortfeuille, indexAgent)\"></span><br>\r\n                                            </label>\r\n                                        </div>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div>\r\n                <div class=\"col-md-6\">\r\n                    <button class=\"btn btn-block btn-default margin-bottom-1-rem\" aria-label=\"Annuler\" ng-click=\"PfChoixPortefeuilleCtrl.annulerChoixPortefeuille()\" id=\"bouton-annuler\">\r\n                        <span>Annuler</span>\r\n                    </button>\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                    <button class=\"btn btn-block btn-primary margin-bottom-1-rem\" aria-label=\"Valider\" ng-click=\"PfChoixPortefeuilleCtrl.validerChoixPortefeuille()\" id=\"bouton-valider\" ng-disabled=\"!PfChoixPortefeuilleCtrl.aPortefeuilleCoche()\">\r\n                        <span>Valider</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </mw-bouton-volet>\r\n</div>\r\n");
$templateCache.put("typescript/directives/pf-diagramme-petite-barre/pf-diagramme-petite-barre-vue.html","<div class=\"pf-diagramme-petite-barre\">\r\n    <p class=\"intitule\" ng-bind=\"pfDiagrammePetiteBarreCtrl.config.intitule\"></p>\r\n    <div class=\"barre\" ng-style=\"{\'background-color\': pfDiagrammePetiteBarreCtrl.config.couleur, \'width\': pfDiagrammePetiteBarreCtrl.pourcentage + \'%\'}\">\r\n        <span class=\"valeur\" ng-bind=\"pfDiagrammePetiteBarreCtrl.config.valeur\"></span>\r\n    </div>\r\n    <hr class=\"separateur\">\r\n</div>");
$templateCache.put("typescript/directives/pf-diagramme-multi-colonne/pf-diagramme-multi-colonne-vue.html","<div class=\"pf-diagramme-multi-colonne-detail\" ng-style=\"{\'max-height\': \'30em\'}\">\r\n        <section ng-repeat=\"config in pfDiagrammeMultiColonneCtrl.config track by $index\" class=\"colonne-indicateur\" ng-class=\"{\'padding\': \'0.5rem 0.6rem\', \'margin\': \'0.5rem\', \'border-style\': \'outset\', \'border-color\': \'gray\', \'max-height\': \'17em\'}\">\r\n            <mw-pf-indicateur-fleche ng-attr-id=\"\'indicateur-fleche-pnb\'+config.id\" class=\"margin-left-auto\" ng-style=\"{\'margin-top\': \'20%\', \'text-align\': \'center\', \'justify-content\': \'center\'}\" config=\"config.tendence\">\r\n            </mw-pf-indicateur-fleche>\r\n            <mw-pf-diagramme-colonne ng-attr-id=\"config.id\" config=\"config.dataIndicateurMutliColonne\" typediagramme=\"0\">\r\n            </mw-pf-diagramme-colonne>\r\n            <span ng-bind=\"config.intitule\" mw-truncate ng-style=\"{\'text-align\': \'center\', \'font-weight\': \'bold\', \'display\': \'flex\', \'justify-content\': \'center\'}\"></span>\r\n        </section>\r\n</div>");
$templateCache.put("typescript/directives/pf-indicateur-badge/pf-indicateur-badge-vue.html","<div class=\"pf-indicateur-badge\" mw-chargement=\"pfIndicateurBadgeCtrl.chargementIndicateurBadgeEnCours\">\r\n    <p class=\"intitule\" ng-class=\"{\'sous-intitule\': pfIndicateurBadgeCtrl.isSousIntitule}\">\r\n        <span ng-bind=\"::pfIndicateurBadgeCtrl.intitule\"></span>\r\n        <span class=\"detail-line\">\r\n            <a class=\"debranchement\" role=\"button\" id=\"action-details\" href=\"javascript:;\" ng-click=\"pfIndicateurBadgeCtrl.debrancherVers()\" ng-show=\"pfIndicateurBadgeCtrl.show()\">\r\n                Voir détails\r\n            </a>\r\n        </span>\r\n    </p>\r\n\r\n    <span class=\"badge badge-primary pull-right\" ng-style=\"{\'width\': \'5vw\'}\" ng-bind=\"pfIndicateurBadgeCtrl.valeur\"></span> \r\n</div> ");
$templateCache.put("typescript/directives/pf-indicateur-colonne/pf-indicateur-colonne-vue.html","<div class=\"pf-indicateur-colonne\">\r\n    <span ng-hide=\"pfIndicateurColonneCtrl.data.estMontant\" ng-bind=\"pfIndicateurColonneCtrl.data.valeur | number\"></span>\r\n    <span ng-style=\"{\'color\': (pfIndicateurColonneCtrl.data.valeur < 0) ? \'red\' : \'none\'}\" ng-show=\"pfIndicateurColonneCtrl.data.estMontant\" ng-bind=\"pfIndicateurColonneCtrl.data.valeur | montantFiltre\"></span>\r\n    <span class=\"colonne\" ng-style=\"{\'background-color\': GREY, \'height\': (100 - (pfIndicateurColonneCtrl.data.hauteur + pfIndicateurColonneCtrl.data.sousHauteur)) + \'%\'}\">\r\n        <span></span>\r\n    </span>\r\n    <span class=\"colonne\" ng-style=\"{\'background-color\': pfIndicateurColonneCtrl.data.couleur, \'height\': pfIndicateurColonneCtrl.data.hauteur + \'%\', \'align-items\' : (pfIndicateurColonneCtrl.data.sousHauteur >  pfIndicateurColonneCtrl.data.hauteur) ? \'center\' : \'flex-end\' }\">\r\n    </span>\r\n    <span class=\"colonne\" ng-show=\"pfIndicateurColonneCtrl.estVisibleSousValeur()\" ng-style=\"{\'background-color\': pfIndicateurColonneCtrl.data.couleurSousValeur, \'height\': pfIndicateurColonneCtrl.data.sousHauteur + \'%\', \'position\': \'relative\'}\">\r\n        <span class=\"sous-valeur-colonne shadow\" ng-show=\"pfIndicateurColonneCtrl.estSousValeurEnNombre\" ng-bind=\"pfIndicateurColonneCtrl.data.sousValeur | number\"></span>\r\n    </span>\r\n    <span class=\"intitule mw-troncature\" ng-style=\"{\'width\':\'10rem\', \'text-align\': \'center\'}\" ng-hide=\"!pfIndicateurColonneCtrl.estVisibleSuiviPar\" ng-bind=\"pfIndicateurColonneCtrl.data.nomSuiviPar\">\r\n    </span>\r\n</div>\r\n\r\n");
$templateCache.put("typescript/directives/pf-indicateur-fleche/pf-indicateur-fleche-vue.html","<span class=\"pf-indicateur-fleche\">\r\n\r\n    <!--  A réactiver quand les images seront intégrées au framework via les icone -->\r\n    <!--<span aria-hidden=\"true\" class=\"icon\" ng-class=\"[pfIndicateurFlecheCtrl.config.icone, pfIndicateurFlecheCtrl.config.couleur]\"></span>-->\r\n\r\n    <!--  /* A supprimer quand les images seront intégrées au framework  */ -->\r\n    <img id=\"fleche-montante\" alt=\"évolution des flux positive\" ng-show=\"pfIndicateurFlecheCtrl.isPositif\" src=\"images/fleche-montante.png\">\r\n    <img id=\"fleche-descendante\" alt=\"évolution des flux négative\" ng-show=\"pfIndicateurFlecheCtrl.isNegatif\" src=\"images/fleche-descendante.png\">\r\n    <img id=\"fleche-neutre\" alt=\"évolution des flux neutre\" ng-show=\"pfIndicateurFlecheCtrl.isNeutre\" src=\"images/fleche-neutre.png\">\r\n\r\n    <span class=\"valeur\" ng-bind=\"pfIndicateurFlecheCtrl.config.valeurFormate\"></span>\r\n</span>");
$templateCache.put("typescript/directives/pf-element-eds/pf-element-eds-vue.html","<ul class=\"bloc-lien-eds\">\r\n    <li class=\"list-group-item-eds\" ng-transclude></li>\r\n    <li class=\"list-group-item-eds\" ng-if=\"popupCtrl.eds.affiche\" ng-repeat=\"child in popupCtrl.eds.agencesInferieur track by $index\">\r\n        <mw-pf-element-eds ng-attr-id=\"child.id\" eds=\"child\">\r\n            <div ng-transclude></div>\r\n        </mw-pf-element-eds>\r\n    </li>\r\n</ul>");
$templateCache.put("typescript/directives/pf-ligne-relation-eco/pf-ligne-relation-eco-vue.html","<div class=\"col-md-12 pf-ligne-relation-eco\">\r\n    <div class=\"col-md-12 relation-info\">\r\n        <span class=\"icon itce-business font-size-2-rem\" aria-hidden=\"true\"></span>\r\n        <span class=\"nom\" ng-bind=\"pfLigneRelationEcoCtrl.relationEconomique.nom\"></span>\r\n    </div>\r\n    <div class=\"col-md-12 relation-indicateurs\">\r\n        <mw-pf-tuile-indicateur ng-repeat=\"indicateur in pfLigneRelationEcoCtrl.listeIndicateursAAfficher track by $index\" type=\"indicateur.typeIndicateur\" intitule=\"indicateur.intitule\" icone=\"indicateur.icone\" valeur=\"indicateur.valeur\" valeur-number=\"indicateur.valeurNumber\" ng-attr-id=\"pf-tuile-indicateur-{{$index}}\"></mw-pf-tuile-indicateur>\r\n    </div>\r\n</div>");
$templateCache.put("typescript/directives/pf-panel-niveau-2/pf-panel-niveau-2-vue.html","<div class=\"mw-pf-panel-niveau-2\">\r\n    <div class=\"titre-bloc\">\r\n        <span class=\"mw-troncature\" ng-class=\"{\'col-sm-8\':pfPanelNiveau2Ctrl.configBouton, \'col-sm-12\':!pfPanelNiveau2Ctrl.configBouton}\">\r\n            <span class=\"icon\" ng-class=\"pfPanelNiveau2Ctrl.icone\" ng-show=\"pfPanelNiveau2Ctrl.icone\" aria-hidden=\"true\"></span>\r\n            <span ng-bind=\"pfPanelNiveau2Ctrl.titre\" title=\"{{::pfPanelNiveau2Ctrl.titre}}\"></span>\r\n            <br>\r\n            <span ng-bind=\"pfPanelNiveau2Ctrl.titre2\" title2=\"{{::pfPanelNiveau2Ctrl.titre2}}\"></span>\r\n        </span>\r\n        <span class=\"col-sm-4\" ng-show=\"pfPanelNiveau2Ctrl.configBouton\">\r\n            <button class=\"btn btn-block btn-zone mw-troncature\" ng-click=\"pfPanelNiveau2Ctrl.configBouton.action()\" id=\"bouton-details\">\r\n                <span ng-bind=\"pfPanelNiveau2Ctrl.configBouton.label\"></span>\r\n            </button>\r\n        </span>\r\n    </div>\r\n    <div class=\"clearfix contenu\">\r\n        <ng-transclude></ng-transclude>\r\n    </div>\r\n</div>");
$templateCache.put("typescript/directives/pf-indicateur-pourcentage/pf-indicateur-pourcentage-vue.html","<!-- Code spécifique pour Chromium -->\r\n<div class=\"conteneur-petit-pourcentage\" ng-if=\"!pfIndicateurPourcentageCtrl.isIE\">\r\n    <div ng-attr-id=\"{{pfIndicateurPourcentageCtrl.id}}\" class=\"svg-container\"></div>\r\n</div>\r\n<!-- Code spécifique pour IE11 -->\r\n<div class=\"scaling-svg-container\" ng-if=\"pfIndicateurPourcentageCtrl.isIE\">\r\n    <div ng-attr-id=\"{{pfIndicateurPourcentageCtrl.id}}\" class=\"scaling-svg\"></div>\r\n</div>\r\n");
$templateCache.put("typescript/directives/pf-tuile-panier/pf-tuile-panier-vue.html","<li class=\"pf-tuile-panier\" ng-class=\"{\'tuile-mode-edition\':pfTuilePanierCtrl.tuilePanierSettings.estEnEdition}\">\r\n    <div class=\"drop-content-tuile-panier pf-drop-target-element\" mw-pf-core-drop-target drop-settings=\"pfTuilePanierCtrl.tuilePanierSettings.dropSettings\">\r\n        <div class=\"container-pf-tuile-panier\" mw-pf-core-draggable drag-settings=\"pfTuilePanierCtrl.tuilePanierSettings.dragSettings\">\r\n            <mw-tuile-standard ng-attr-id=\"indicateur-{{pfTuilePanierCtrl.tuilePanierSettings.indicateur.indicateur.code}}\" avec-marquage=\"pfTuilePanierCtrl.afficherMarquage()\" texte-marquage=\"pfTuilePanierCtrl.nomMarquage()\" titre=\"pfTuilePanierCtrl.tuilePanierSettings.indicateur.indicateur.intitule\" ligne1=\"pfTuilePanierCtrl.famille\" object=\"pfTuilePanierCtrl.tuilePanierSettings.indicateur\" couleur=\"{{pfTuilePanierCtrl.couleur()}}\" config=\"pfTuilePanierCtrl.configTuile\">\r\n            </mw-tuile-standard>\r\n            <button ng-show=\"pfTuilePanierCtrl.tuilePanierSettings.estEnEdition\" class=\"mw-tuile-action bouton-poubelle\" id=\"bouton-poubelle\" ng-click=\"pfTuilePanierCtrl.supprimer()\">\r\n                <span class=\"icon itce-trash\" aria-hidden=\"true\">\r\n                </span>\r\n            </button>\r\n            <button ng-show=\"pfTuilePanierCtrl.afficherFlecheDroite()\" class=\"mw-tuile-action bouton-droit\" id=\"bouton-droit\" ng-click=\"pfTuilePanierCtrl.deplacerADroite()\">\r\n                <span class=\"icon itce-arrow-right\" aria-hidden=\"true\">\r\n                </span>\r\n            </button>\r\n            <button ng-show=\"pfTuilePanierCtrl.afficherFlecheGauche()\" class=\"mw-tuile-action bouton-gauche\" id=\"bouton-gauche\" ng-click=\"pfTuilePanierCtrl.deplacerAGauche()\">\r\n                <span class=\"icon itce-arrow-left\" aria-hidden=\"true\">\r\n                </span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</li>");
$templateCache.put("typescript/directives/pf-tuile-indicateur/pf-tuile-indicateur-vue.html","<div class=\"pf-tuile-indicateur\">\r\n    <div class=\"cadre\" ng-class=\"{green:(pfTuileIndicateurCtrl.isGreen()), orange:(pfTuileIndicateurCtrl.isOrange())}\">\r\n        <div class=\"pf-corps\">\r\n            <div class=\"en-tete\">\r\n                <p class=\"text intitule\" ng-bind=\"pfTuileIndicateurCtrl.intitule\"></p>\r\n            </div>\r\n            <div>\r\n                <p class=\"valeur\" ng-show=\"pfTuileIndicateurCtrl.isTypeDate()\" ng-bind=\"pfTuileIndicateurCtrl.valeur | date: \'dd/MM/yyyy\'\">\r\n                </p>\r\n                <p class=\"valeur\" ng-show=\"pfTuileIndicateurCtrl.isTypeNombre()\">\r\n                    <span ng-bind=\"pfTuileIndicateurCtrl.valeurNumber | nombreFiltre\"></span>\r\n                </p>\r\n                <p class=\"valeur\" ng-show=\"pfTuileIndicateurCtrl.isTypeMontant()\">\r\n                    <span ng-bind=\"pfTuileIndicateurCtrl.valeurNumber | montantFiltre: pfTuileIndicateurCtrl.isEuro\"></span>\r\n                </p>\r\n                <p class=\"valeur\" ng-show=\"pfTuileIndicateurCtrl.isTypePourcent()\">\r\n                    <span ng-bind=\"pfTuileIndicateurCtrl.valeurNumber | pourcentFiltre\"></span>\r\n                </p>\r\n                <p class=\"valeur\" ng-show=\"pfTuileIndicateurCtrl.isTypeTexte()\">\r\n                    <span ng-bind=\"pfTuileIndicateurCtrl.valeur\"></span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>");
$templateCache.put("typescript/directives/pf-tuile-catalogue/pf-tuile-catalogue-vue.html","<li class=\"pf-tuile-catalogue\"> \r\n    <!--<div class=\"container-pf-tuile-catalogue\" mw-pf-core-draggable drag-settings=\"pfTuileCatalogueCtrl.tuileCatalogueSettings.dragSettings\">-->\r\n    <div class=\"container-pf-tuile-catalogue\" mw-pf-core-draggable drag-settings=\"pfTuileCatalogueCtrl.tuileCatalogueSettings.dragSettings\">\r\n            <mw-tuile-standard ng-attr-id=\"indicateur-{{pfTuileCatalogueCtrl.tuileCatalogueSettings.indicateur.indicateur.code}}\" avec-marquage=\"pfTuileCatalogueCtrl.afficherMarquage()\" texte-marquage=\"pfTuileCatalogueCtrl.nomMarquage()\" titre=\"pfTuileCatalogueCtrl.tuileCatalogueSettings.indicateur.indicateur.intitule\" ligne1=\"pfTuileCatalogueCtrl.tuileCatalogueSettings.indicateur.indicateur.famille\" object=\"pfTuileCatalogueCtrl.tuileCatalogueSettings.indicateur\" couleur=\"{{pfTuileCatalogueCtrl.couleur()}}\" config=\"pfTuileCatalogueCtrl.configTuile\">\r\n            </mw-tuile-standard>\r\n            <button ng-show=\"pfTuileCatalogueCtrl.tuileCatalogueSettings.estEnEdition\" class=\"mw-tuile-action bouton-ajout\" id=\"bouton-ajout\" ng-click=\"pfTuileCatalogueCtrl.ajouter()\">\r\n                <span class=\"icon itce-plus\" aria-hidden=\"true\"></span>\r\n            </button>\r\n        </div>\r\n</li>");
$templateCache.put("typescript/directives/pf-puce-legende/pf-puce-legende-vue.html"," <div class=\"pf-puce-legende\">\r\n    <span class=\"circle\" ng-style=\"{\'background-color\': pfPuceLegendeCtrl.couleur}\"></span>\r\n    <span class=\"intitule\" ng-bind-html=\"pfPuceLegendeCtrl.intitule\"></span>\r\n</div>\r\n<div class=\"pf-puce-legende\" ng-show=\"pfPuceLegendeCtrl.sousIntitule\">\r\n    <br>\r\n    <span class=\"circle\" ng-style=\"{\'background-color\': pfPuceLegendeCtrl.sousCouleur}\"></span>\r\n    <span class=\"intitule\" ng-bind=\"pfPuceLegendeCtrl.sousIntitule\"></span>\r\n</div>\r\n");}]);
//# sourceMappingURL=myway.c03.20.portefeuille.js.map
