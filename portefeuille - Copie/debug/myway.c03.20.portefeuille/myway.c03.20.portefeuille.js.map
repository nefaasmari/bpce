{"version":3,"sources":["reference.ts","app.ts","enums/application-enums.ts","constantes/inject-constantes.ts","controleurs/clients-controleur.ts","controleurs/detail-client-controleur.ts","controleurs/index-controleur.ts","controleurs/portefeuille-controleur.ts","controleurs/selection-indicateurs-controleur.ts","constantes/actions-remarquables.ts","constantes/service-constantes.ts","constantes/application-constantes.ts","constantes/contexte-constantes.ts","constantes/indicateur-constantes.ts","constantes/lisa-constantes.ts","constantes/messages-constantes.ts","constantes/modale-paniers-constantes.ts","constantes/popup-constantes.ts","constantes/preferences-constantes.ts","constantes/rest-constantes.ts","constantes/tableau-constantes.ts","constantes/token-constantes.ts","constantes/url-constantes.ts","constantes/urls-rest-constantes.ts","filtres/application-filtre.ts","mocks/application-mocks.ts","controleurs/template-modale/modale-avertissement-choix-portefeuille-controleur.ts","controleurs/template-modale/modale-choix-eds-controleur.ts","controleurs/template-modale/modale-clients-activer-controleur.ts","controleurs/template-modale/modale-clients-renegocier-controleur.ts","controleurs/template-modale/modale-details-flux-crediteur-controleur.ts","controleurs/template-modale/modale-details-flux-debiteur-controleur.ts","controleurs/template-modale/modale-details-portefeuille-controleur.ts","controleurs/template-modale/modale-details-rentabilite-pnb-controleur.ts","controleurs/template-modale/modale-details-revue-portefeuille-controleur.ts","controleurs/template-modale/modale-details-taux-visite-controleur.ts","controleurs/template-modale/modale-filtre-controleur.ts","controleurs/template-modale/modale-paniers-controleur.ts","controleurs/template-tableau/colonne-data-ca-n-1-controleur.ts","controleurs/template-tableau/colonne-data-ca-n-controleur.ts","controleurs/template-tableau/colonne-data-client-controleur.ts","controleurs/template-tableau/colonne-data-derniere-revue-controleur.ts","controleurs/template-tableau/colonne-data-derniere-revue-rel-controleur.ts","controleurs/template-tableau/colonne-data-flux-crediteur-controleur.ts","controleurs/template-tableau/colonne-data-flux-debiteur-controleur.ts","controleurs/template-tableau/colonne-data-pnb-n-controleur.ts","controleurs/template-tableau/colonne-data-relation-controleur.ts","controleurs/template-tableau/colonne-potentiel-prospect-controleur.ts","controleurs/template-tableau/colonne-statut-controleur.ts","controleurs/template-tableau/colonne-top-cc-controleur.ts","modeles/application/application-modele.ts","modeles/application/application-stats-modele.ts","modeles/application/contexte-modele.ts","modeles/application/modale-panier-modele.ts","modeles/application/popup-modele.ts","modeles/application/preferences-modele.ts","modeles/tableau/tableau-client-eco.ts","modeles/tableau/tableau-client.ts","modeles/tableau/tableau-raison-sociale.ts","modeles/tableau/tableau-relation.ts","modeles/mwCsv/mw-csv-config.ts","directives/pf-bloc-condition-filtre/pf-bloc-condition-filtre-controleur.ts","directives/pf-bloc-condition-filtre/pf-bloc-condition-filtre-directive.ts","directives/pf-choix-portefeuille/pf-choix-portefeuille-controleur.ts","directives/pf-choix-portefeuille/pf-choix-portefeuille-directive.ts","directives/pf-diagramme-colonne/pf-diagramme-colonne-controleur.ts","directives/pf-diagramme-colonne/pf-diagramme-colonne-directive.ts","directives/pf-detail-filtre/pf-detail-filtre-controleur.ts","directives/pf-detail-filtre/pf-detail-filtre-directive.ts","directives/pf-diagramme-grande-barre/pf-diagramme-grande-barre-controleur.ts","directives/pf-diagramme-grande-barre/pf-diagramme-grande-barre-directive.ts","directives/pf-diagramme-donut/pf-diagramme-donut-controleur.ts","directives/pf-diagramme-donut/pf-diagramme-donut-directive.ts","directives/pf-diagramme-petite-barre/pf-diagramme-petite-barre-controleur.ts","directives/pf-diagramme-petite-barre/pf-diagramme-petite-barre-directive.ts","directives/pf-drag-and-drop/pf-core-draggable-controleur.ts","directives/pf-drag-and-drop/pf-core-draggable-directive.ts","directives/pf-drag-and-drop/pf-core-drop-target-controleur.ts","directives/pf-drag-and-drop/pf-core-drop-target-directive.ts","directives/pf-drag-and-drop/pf-drag-and-drop-constantes.ts","directives/pf-drag-and-drop/pf-drag-and-drop-modele.ts","directives/pf-drag-and-drop/pf-drag-and-drop-service.ts","directives/pf-diagramme-pourcentage/pf-diagramme-pourcentage-controleur.ts","directives/pf-diagramme-pourcentage/pf-diagramme-pourcentage-directive.ts","directives/pf-diagramme-multi-colonne/pf-diagramme-multi-colonne-controleur.ts","directives/pf-diagramme-multi-colonne/pf-diagramme-multi-colonne-directive.ts","directives/pf-indicateur-badge/pf-indicateur-badge-controleur.ts","directives/pf-indicateur-badge/pf-indicateur-badge-directive.ts","directives/pf-indicateur-fleche/pf-indicateur-fleche-controleur.ts","directives/pf-indicateur-fleche/pf-indicateur-fleche-directive.ts","directives/pf-element-eds/pf-element-eds-controleur.ts","directives/pf-element-eds/pf-element-eds-directive.ts","directives/pf-indicateur-colonne/pf-indicateur-colonne-controleur.ts","directives/pf-indicateur-colonne/pf-indicateur-colonne-directive.ts","directives/pf-indicateur-pourcentage/pf-indicateur-pourcentage-controleur.ts","directives/pf-indicateur-pourcentage/pf-indicateur-pourcentage-directive.ts","directives/pf-ligne-relation-eco/pf-ligne-relation-eco-controleur.ts","directives/pf-ligne-relation-eco/pf-ligne-relation-eco-directive.ts","directives/pf-puce-legende/pf-puce-legende-controleur.ts","directives/pf-puce-legende/pf-puce-legende-directive.ts","directives/pf-tuile-catalogue/pf-tuile-catalogue-controleur.ts","directives/pf-tuile-catalogue/pf-tuile-catalogue-directive.ts","directives/pf-panel-niveau-2/pf-panel-niveau-2-controleur.ts","directives/pf-panel-niveau-2/pf-panel-niveau-2-directive.ts","directives/pf-tuile-indicateur/pf-tuile-indicateur-controleur.ts","directives/pf-tuile-indicateur/pf-tuile-indicateur-directive.ts","services/application/begacli-service.ts","services/application/choix-eds-service.ts","services/application/choix-utilisateur-service.ts","services/application/contexte-service.ts","services/application/event-service.ts","services/application/export-service.ts","services/application/filtre-service.ts","services/application/habilitation-service.ts","services/application/ihm-service.ts","services/application/indicateur-fleche-service.ts","services/application/indicateur-service.ts","services/application/initialisation-application-service.ts","services/application/lisa-application-service.ts","services/application/liste-clients-service.ts","services/application/mock-service.ts","services/application/modale-paniers-service.ts","services/application/mw-csv-service.ts","services/application/popup-application-service.ts","services/application/portefeuille-service.ts","services/application/preferences-service.ts","services/application/stats-service.ts","services/d3/creation-donut-service.ts","services/d3/creation-pourcentage-service.ts","directives/pf-tuile-panier/pf-tuile-panier-controleur.ts","directives/pf-tuile-panier/pf-tuile-panier-directive.ts","services/utils/application-utils.ts","services/utils/data-utils.ts","modeles/rest/agentV2/gestion-affectation-modele.ts","modeles/rest/agentV2/recherche-agent-modele.ts","modeles/tableau/comparator/clients-comparator.ts","modeles/tableau/comparator/date-comparator.ts","modeles/tableau/comparator/relations-comparator.ts","modeles/rest/portefeuillcorporateV1/stat-flux-mouvement-financier-modele.ts","modeles/rest/portefeuillcorporateV1/stat-portefeuille-modele.ts","modeles/rest/portefeuillcorporateV1/stat-rentabilite-modele.ts","modeles/rest/preferenceUtilisateurV1/preference-utilisateur-modele.ts","modeles/rest/portefeuilleV1/client-modele.ts","modeles/rest/portefeuilleV1/recherche-portefeuille-modele.ts","modeles/rest/portefeuilleV1/relation-commerciale-modele.ts","modeles/rest/portefeuilleV1/suivi-complementaire-modele.ts","modeles/rest/propositioncorporateV1/recherche-revue-modele.ts","modeles/rest/propositioncorporateV1/stat-portefeuille-eds-modele.ts","modeles/rest/propositioncorporateV1/stat-revue-modele.ts","modeles/rest/structureV2/eds-niveau-inferieur-modele.ts","modeles/rest/synthesecorporate/donnee-flux-modele.js","services/rest/portefeuillcorporateV1/recherche-revue-service.ts","services/rest/portefeuillcorporateV1/stat-flux-mouvement-financier-service.ts","services/rest/portefeuillcorporateV1/stat-portefeuille-service.ts","services/rest/portefeuillcorporateV1/stat-rentabilite-service.ts","services/rest/portefeuillcorporateV1/stat-revue-service.ts","services/rest/agentV2/gestion-affectation-service.ts","services/rest/agentV2/recherche-agent-service.ts","services/rest/preferenceUtilisateurV1/preference-utilisateur-service.ts","services/rest/portefeuilleV1/client-service.ts","services/rest/portefeuilleV1/recherche-portefeuille-service.ts","services/rest/portefeuilleV1/relation-commerciale-service.ts","services/rest/portefeuilleV1/suivi-complementaire-service.ts","services/rest/propositioncorporateV1/stat-portefeuille-eds-service.ts","services/rest/synthesecorporate/donnee-flux-service.ts","services/rest/structureV2/eds-niveau-inferieur-service.ts","angular-templates.js"],"names":[],"mappings":"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","file":"myway.c03.20.portefeuille.js","sourcesContent":["// Technique\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\com-interdomaine.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\com-eds.d.ts\" />\r\n\r\n/// <reference path=\"..\\..\\_dependances\\typings\\reference.commun.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\third-party\\d3\\d3.d.ts\" />\r\n\r\n// déclarations portail service ----------------\r\n/// <reference path=\"..\\..\\_dependances\\typings\\socle-fonctionnel\\portail\\19.05\\myway.portail.lib-portail.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\19.05\\myway-core-api.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\socle-fonctionnel\\libSynchroSynthese\\18.03\\myway.lib-synchro-synthese-cc.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\portail\\framework-client-portal.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\portail\\framework-client-tech.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\tables-delocalisees.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\entitetitulaire\\v1\\recherche.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\entitetitulaire\\v2\\informationEntiteTitulaire.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\tiers\\v1\\tiers-identification.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\tiers\\v3\\tiers-media.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\tiers\\v2\\tiers-identification.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\tiers\\v2\\tiers-portefeuille.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\structure\\v2\\caracteristique-eds.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\structure\\v2\\poste-fonctionnel-agent.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\structure\\v2\\etablissement-mysys.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\rechercheapplication.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\application.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\regleApplication.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\elementconfportail.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\elementconfzone.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\recherchefamille.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\recherchesousfamille.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\recherchefavori.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\widget.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\recherchewidget.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\recherchewidgetjourneefo.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\zoneportail.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\sousfamille.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\portailmyway\\v1\\famille.d.ts\" />\r\n/// <reference path=\"..\\..\\_dependances\\typings\\services\\ressources\\encaisseagenceservice\\v1\\ctrlDebutJournee.d.ts\" />\r\n\r\n/// <reference path=\"..\\..\\_dependances\\typings\\socle-fonctionnel\\19.11\\myway.trans-pdt-entreprise.pdt-entreprise.d.ts\" />\r\n","module Portefeuille {\r\n\t\"use strict\";\r\n\r\n\texport let app: any = angular.module(\"##NOM-MODULE##\", [\"ngRoute\",\r\n\t\t\"myway.ui\", \"ui.bootstrap\", \"ngAnimate\", \"moduleAgent\", \"myway.composantAide\",\r\n\t\t\"myway.comInterdomaine\", \"myway.comEds\", \"libPortail\", \"PdtEntreprise\"]);\r\n\r\n\tlet routeResolve = {\r\n\t\tinitialisationApplication: [\"InitialisationApplicationService\",\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\tfunction (initialisationApplicationService: Services.Application.InitialisationApplicationService) {\r\n\t\t\t\treturn initialisationApplicationService.initialisation();\r\n\t\t\t}\r\n\t\t]\r\n\t};\r\n\t\r\n\t app.config(\r\n\t\t[\r\n\t\t\t\"$routeProvider\",\r\n\t\t\t function ($routeProvider: ng.route.IRouteProvider): void {\r\n\t\t\t\t \r\n\t\t\t\t $routeProvider.when(Constantes.Url.CLIENTS, {\r\n\t\t\t\t\tcontroller: \"ClientsControleur\",\r\n\t\t\t\t\ttemplateUrl: \"vues/clients-vue.html\",\r\n\t\t\t\t\tcontrollerAs: \"clientsCtrl\",\r\n\t\t\t\t\tresolve: routeResolve\r\n\t\t\t\t });\r\n\r\n\t\t\t\t $routeProvider.when(Constantes.Url.PORTEFEUILLE, {\r\n\t\t\t\t\t controller: \"PortefeuilleControleur\",\r\n\t\t\t\t\t templateUrl: \"vues/portefeuille-vue.html\",\r\n\t\t\t\t\t controllerAs: \"portefeuilleCtrl\",\r\n\t\t\t\t\t resolve: routeResolve\r\n\t\t\t\t });\r\n\r\n\t\t\t\t $routeProvider.when(Constantes.Url.SELECTION_INDICATEURS, {\r\n\t\t\t\t\t controller: \"SelectionIndicateursControleur\",\r\n\t\t\t\t\t templateUrl: \"vues/selection-indicateurs-vue.html\",\r\n\t\t\t\t\t controllerAs: \"selectionIndicateursCtrl\",\r\n\t\t\t\t\t resolve: routeResolve\r\n\t\t\t\t });\r\n\r\n\t\t\t\t $routeProvider.when(Constantes.Url.BILAN_REVUE, {\r\n\t\t\t\t\t controller: \"BilanRevueControleur\",\r\n\t\t\t\t\t templateUrl: \"vues/bilan-revue-vue.html\",\r\n\t\t\t\t\t controllerAs: \"bilanRevueCtrl\",\r\n\t\t\t\t\t resolve: routeResolve\r\n\t\t\t\t });\r\n\r\n\t\t\t\t $routeProvider.when(Constantes.Url.SAISIE_REVUE, {\r\n\t\t\t\t\t controller: \"SaisieRevueControleur\",\r\n\t\t\t\t\t templateUrl: \"vues/saisie-revue-vue.html\",\r\n\t\t\t\t\t controllerAs: \"saisieRevueCtrl\",\r\n\t\t\t\t\t resolve: routeResolve\r\n                 });\r\n\r\n                 $routeProvider.when(Constantes.Url.BILAN_REVUES_PORTEFEUILLE, {\r\n                     controller: \"BilanRevuesPortefeuilleControleur\",\r\n                     templateUrl: \"vues/bilan-revues-portefeuille-vue.html\",\r\n                     controllerAs: \"bilanRevuesPortefeuilleCtrl\",\r\n                     resolve: routeResolve\r\n                 });\r\n\r\n\t\t\t\t $routeProvider.otherwise({\r\n\t\t\t\t\t templateUrl: \"vues/page-non-trouvee.html\",\r\n\t\t\t\t\t resolve: routeResolve\r\n\t\t\t\t });\r\n\r\n\t\t\t\t \r\n\t\t\t\t \r\n\t\t\t\t // Non utilisé pour le moment\r\n\t\t\t\t //$routeProvider.when(Constantes.Url.DETAIL_CLIENT, {\r\n\t\t\t\t //    controller: \"DetailClientControleur\",\r\n\t\t\t\t //    templateUrl: \"vues/detail-client-vue.html\",\r\n\t\t\t\t //    controllerAs: \"detailClientCtrl\",\r\n\t\t\t\t //    resolve: routeResolve\r\n\t\t\t\t //});\r\n\t\t\t\t \r\n\t\t\t }\r\n\t\t ]);\r\n\r\n\tMyWay.Services.AppServiceParameters.Instance().PortalDomain = \"##DOMAINE-PORTAIL##\";\r\n}","/**\r\n * Enumeartions applicatives\r\n * @module Portefeuille.Enum\r\n * @author S0078068 (Yannis VESSEREAU)\r\n */\r\nmodule Portefeuille.Enum {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Enumeration lièe à la page clients\r\n     */\r\n    export module PageClients {\r\n        export enum TYPE_VUE {\r\n            VUE_RELATION_ECONOMIQUE = <any>\"VRE\",\r\n            VUE_CLIENTS = <any>\"VC\"\r\n        };\r\n\r\n        export enum TYPE_FORCAGE {\r\n            SANS = <any>0,\r\n            CLIENTS = <any>1,\r\n            PROSPECTS = <any>2,\r\n            TOUT = <any>3\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Enumeration lièe à la directive pf-tuile-indicateur\r\n     */\r\n    export module PfTuileIndicateur {\r\n        export enum COULEUR {\r\n            AGENDA = <any>\"rouge\",\r\n            PNB = <any>\"orange\",\r\n            CA = <any>\"vert\",\r\n            EQUIPEMENTS = <any>\"bleu\",\r\n            COLLECT = <any>\"noir\",\r\n            BALE2 = <any>\"jaune\"\r\n        };\r\n    }\r\n\r\n    export module FiltrageRelationCommerciale {\r\n        export enum FILTRECLIENTPROSPECT {\r\n            TOUS = <any>\"00\",\r\n            CLIENT = <any>\"01\",\r\n            PROSPECTTIERS = <any>\"02\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Enumeration concernant le type de valeur d'indicateur\r\n     */\r\n    export module Indicateur {\r\n        export enum TYPE {\r\n            DATE = <any>\"Date\",\r\n            NOMBRE = <any>\"Nombre\",\r\n            MONTANT = <any>\"Montant\",\r\n            POURCENT = <any>\"Pourcent\",\r\n            TEXTE = <any>\"Texte\",\r\n            BEGACLI = <any>\"Begacli\"\r\n        };\r\n\r\n        export enum CODE {\r\n            CLIENTPROSPECT = <any>\"codeTypePersonne\",\r\n            ACTIF = <any>\"actif\",\r\n            EQUIPE = <any>\"equipe\",\r\n            LEADER = <any>\"leader\",\r\n            CA_N = <any>\"chiffreAffaireN\",\r\n            CA_N_MOINS_1 = <any>\"chiffreAffaireN-1\",\r\n\r\n            MARCHE = <any>\"libelleCourtSegmentMarche\",\r\n            POTENTIEL_PROSPECT = <any>\"potentielProspect\",\r\n            SEG_RELATIONNELLE = <any>\"libelleLongSegmentationRel\",\r\n            SEG_RELATIONNELLE_GROUPE = <any>\"SEG_REL_GRP\",\r\n\r\n            DATE_DERNIER_ENTRETIEN = <any>\"DateDernierEntretien\",\r\n            DATE_DERNIER_RDV = <any>\"DateDernierRdv\",\r\n            NB_RDV_ANNEE_EN_COURS = <any>\"NbRdvAnneeEncours\",\r\n            NB_RDV_12_MOIS_GLISSANTS = <any>\"NbRdvSur12moisGliss\",\r\n            DATE_PROCHAIN_RDV = <any>\"DateProchainRdv\",\r\n\r\n            NOTE_BALE2 = <any>\"noteBale2\",\r\n            PART_ENGAG = <any>\"PART_ENGAG\",\r\n            PROCHAINE_REVISION = <any>\"revision\",\r\n\r\n            PNB_3112 = <any>\"pnb3112\",\r\n            PNB_N = <any>\"pnbN\",\r\n            PNB_N_MOINS_1 = <any>\"pnbN-1\",\r\n\r\n            REV_DATE_DERNIERE_REVUE = <any>\"DateDerniereRevue\",\r\n            REV_NB_SSFAMILLES_PROPOSE = <any>\"NbSousFamilleAProposer\",\r\n            REV_VALIDEE_PAR = <any>\"NomAgentRevue\",\r\n\r\n            FLUX_CREDITEURS_N = <any>\"CREDITEUR_N\",\r\n            FLUX_CREDITEURS_N_MOINS_1 = <any>\"CREDITEUR_N-1\",\r\n            FLUX_DEBITEURS_N = <any>\"DEBITEUR_N\",\r\n            FLUX_DEBITEURS_N_MOINS_1 = <any>\"DEBITEUR_N-1\",\r\n\r\n            NB_AFFAIRES_EN_COURS = <any>\"AFF_EC\",\r\n            NB_PROPOSITIONS_EN_COURS = <any>\"PROP_EC\",\r\n            NB_APPETENCES = <any>\"APP_PROD\",\r\n            // NOUVEL INDICATEUR enum code score\r\n            SCORE_ACTIVATION = <any>\"SCORE_ACTI\",\r\n            SCORE_DEFAILLANCE = <any>\"SCORE_DEFA\",\r\n            SCORE_APPETENCE = <any>\"SCORE_APPE\",\r\n            TOP_CC = <any>\"TOP_CC\",\r\n            PART_FLUX_CONFIES_CRED = <any>\"PART_FLUX_CONFIES_CRED\",\r\n            PART_FLUX_CONFIES_DEB = <any>\"PART_FLUX_CONFIES_DEB\",\r\n            PREMIER_EQUIPEMENT = <any>\"PREMIER_EQUIPEMENT_INDIC\",\r\n            PREMIER_EQUIPEMENT_TAG = <any>\"PREMIER_EQUIPEMENT\",\r\n            PREMIER_EQUIPEMENT_TEXTE = <any>\"PREMIER_EQUIPEMENT_TEXTE\",\r\n            OBJECTIF_FLUX = <any>\"OBJECTIF_FLUX\",\r\n            ENCOURS_BDF = <any>\"ENCOURS_BDF\",\r\n            BEGACLI = <any>\"BEGACLI\"\r\n        };\r\n        export enum CODEPREF {  // ATTENTION ! NE SURTOUT PAS CHANGER LES LETTRES EXISTANTES, CAR CE SONT LES CLES UTILISEES DANS LE PANIER DS LES PREFS !!! \r\n            // Pour changer l'ordre, il faut modifier la config dans indicateur-service.ts\r\n            CLIENTPROSPECT = <any>\"A\",\r\n            ACTIF = <any>\"B\",\r\n            LEADER = <any>\"ZE\",\r\n            CA_N = <any>\"C\",\r\n            CA_N_MOINS_1 = <any>\"D\",\r\n\r\n            MARCHE = <any>\"E\",\r\n            POTENTIEL_PROSPECT = <any>\"Z\",\r\n            SEG_RELATIONNELLE = <any>\"F\",\r\n            SEG_RELATIONNELLE_GROUPE = <any>\"ZA\",\r\n\r\n            DATE_DERNIER_ENTRETIEN = <any>\"G\",\r\n            DATE_DERNIER_RDV = <any>\"H\",\r\n            NB_RDV_ANNEE_EN_COURS = <any>\"J\",\r\n            NB_RDV_12_MOIS_GLISSANTS = <any>\"K\",\r\n            DATE_PROCHAIN_RDV = <any>\"I\",\r\n\r\n            NOTE_BALE2 = <any>\"M\",\r\n            PART_ENGAG = <any>\"ZD\",\r\n            PROCHAINE_REVISION = <any>\"L\",\r\n\r\n            PNB_N = <any>\"N\",\r\n            PNB_N_MOINS_1 = <any>\"O\",\r\n\r\n            REV_DATE_DERNIERE_REVUE = <any>\"Q\",\r\n            REV_NB_SSFAMILLES_PROPOSE = <any>\"R\",\r\n            REV_VALIDEE_PAR = <any>\"P\",\r\n\r\n            FLUX_CREDITEURS_N = <any>\"S\",\r\n            FLUX_CREDITEURS_N_MOINS_1 = <any>\"T\",\r\n            FLUX_DEBITEURS_N = <any>\"U\",\r\n            FLUX_DEBITEURS_N_MOINS_1 = <any>\"V\",\r\n\r\n            SANS_CONTRAT = <any>\"W\",\r\n            PNB_3112 = <any>\"X\",\r\n\r\n            NB_AFFAIRES_EN_COURS = <any>\"Y\",\r\n            NB_APPETENCES = <any>\"ZC\",\r\n            NB_PROPOSITIONS_EN_COURS = <any>\"ZB\",\r\n\r\n            // NOUVEL INDICATEUR enum codepref score\r\n            SCORE_ACTIVATION = <any>\"ZF\",\r\n            SCORE_DEFAILLANCE = <any>\"ZG\",\r\n            SCORE_APPETENCE = <any>\"ZH\",\r\n            TOP_CC = <any>\"ZI\",\r\n            PART_FLUX_CONFIES_CRED = <any>\"ZJ\",\r\n            PART_FLUX_CONFIES_DEB = <any>\"ZK\",\r\n            PREMIER_EQUIPEMENT = <any>\"ZL\",\r\n            PREMIER_EQUIPEMENT_TAG = <any>\"ZM\",\r\n            OBJECTIF_FLUX = <any>\"ZN\",\r\n            ENCOURS_BDF = <any>\"ZO\",\r\n            BEGACLI = <any>\"ZP\",\r\n            PREMIER_EQUIPEMENT_TEXTE = <any>\"ZQ\",\r\n        }\r\n        export enum CODEREST {\r\n            ACTIF = <any>\"ACTIF\",\r\n            PERSONNE_PROTEGEE = <any>\"PP\",\r\n            CA_N = <any>\"CA_N\",\r\n            CA_N_MOINS_1 = <any>\"CA_N-1\",\r\n            PNB12MOISGLISSANT = <any>\"PNB\",\r\n            PROCHAINE_REVISION = <any>\"REVISION\",\r\n            NOTE_BALE2 = <any>\"BAL2\",\r\n            PNB_3112 = <any>\"PNB_3112\",\r\n            PNB_N = <any>\"PNB_N\",\r\n            PNB_N_MOINS_1 = <any>\"PNB_N-1\",\r\n            REVUE = <any>\"REVUE\",\r\n            FLUX = <any>\"FLUX\",\r\n            POT_PROS = <any>\"POT_PROS\",\r\n            AFFAIRES_EN_COURS = <any>\"AFF_EC\",\r\n            SEG_RELATIONNELLE_GROUPE = <any>\"SEG_REL_GRP\",\r\n            PROPOSITIONS_EN_COURS = <any>\"PROP_EC\",\r\n            NB_APPETENCES = <any>\"APP_PROD\",\r\n            PART_ENGAG = <any>\"PART_ENGAG\",\r\n            // NOUVEL INDICATEUR enum coderest score\r\n            SCORE_ACTIVATION = <any>\"SCORE_ACTI\",\r\n            SCORE_DEFAILLANCE = <any>\"SCORE_DEFA\",\r\n            SCORE_APPETENCE = <any>\"SCORE_APPE\",\r\n            TOP_CC = <any>\"TOP_CC\",\r\n            PART_FLUX_CONFIES_CRED = <any>\"PART_FLUX_CONFIES_CRED\",\r\n            PART_FLUX_CONFIES_DEB = <any>\"PART_FLUX_CONFIES_DEB\",\r\n            PREMIER_EQUIPEMENT = <any>\"PREMIER_EQUIPEMENT_INDIC\",\r\n            PREMIER_EQUIPEMENT_TAG = <any>\"PREMIER_EQUIPEMENT\",\r\n            PREMIER_EQUIPEMENT_TEXTE = <any>\"PREMIER_EQUIPEMENT_TEXTE\",\r\n            OBJECTIF_FLUX = <any>\"OBJECTIF_FLUX\",\r\n            ENCOURS_BDF = <any>\"ENCOURS_BDF\",\r\n            BEGACLI = <any>\"BEGACLI\"\r\n        }\r\n        export enum CODEREL {\r\n            CLIENTPROSPECT = <any>\"codeTypePersonneRel\",\r\n            DATE_DERNIER_ENTRETIEN = <any>\"DateDernierEntretienRel\",\r\n            DATE_DERNIER_RDV = <any>\"DateDernierRdvRealiseRel\",\r\n            DATE_PROCHAIN_RDV = <any>\"DateProchainRdvRel\",\r\n            NB_RDV_ANNEE_EN_COURS = <any>\"NbRdvAnneeEncoursRel\",\r\n            NB_RDV_12_MOIS_GLISSANTS = <any>\"NbRdvSur12moisGlissRel\",\r\n            REV_NB_SSFAMILLES_PROPOSE = <any>\"NbSousFamilleAProposerRel\",\r\n            PNB_3112 = <any>\"pnb3112Rel\",\r\n            PNB_N = <any>\"pnbNRel\",\r\n            PNB_N_MOINS_1 = <any>\"pnbNMoins1Rel\",\r\n            POTENTIEL_PROSPECT = <any>\"potentielProspect\",\r\n            NB_AFFAIRES_EN_COURS = <any>\"NbAffairesEnCoursRel\",\r\n            SEG_RELATIONNELLE_GROUPE = <any>\"SEG_REL_GRP\",\r\n            NB_PROPOSITIONS_EN_COURS = <any>\"NbPropositionsEnCoursRel\",\r\n            NB_APPETENCES = <any>\"APP_PROD_REL\",\r\n            PART_ENGAG = <any>\"PART_ENGAG\",\r\n            REV_DATE_DERNIERE_REVUE = <any>\"DateDerniereRevueRel\",\r\n            ENCOURS_BDF = <any>\"ENCOURS_BDF\",\r\n            BEGACLI = <any>\"BEGACLI\"\r\n        };\r\n        export enum INTITULE {\r\n            CLIENTPROSPECT = <any>\"Client/Prospect\",\r\n            ACTIF = <any>\"Top Actif\",\r\n            NON_EQUIPE = <any>\"Avec contrat\",\r\n            CA_N = <any>\"Dernier CA\",\r\n            CA_N_MOINS_1 = <any>\"Avant dernier CA\",\r\n            LEADER = <any>\"Leader\",\r\n            MARCHE = <any>\"Marché\",\r\n            POTENTIEL_PROSPECT = <any>\"Potentiel prospect\",\r\n            SEG_RELATIONNELLE = <any>\"Seg. relationnelle client\",\r\n            SEG_RELATIONNELLE_GROUPE = <any>\"Seg. relationnelle groupe\",\r\n           // SEG_RELATIONNELLE_GROUPE_TUILE = <any>\"Seg. rel. groupe\",\r\n            DATE_DERNIER_ENTRETIEN = <any>\"Dernier CR\",\r\n            DATE_DERNIER_RDV = <any>\"Dernier RDV\",\r\n            NB_RDV_ANNEE_EN_COURS = <any> \"Nb RDV \",\r\n            NB_RDV_12_MOIS_GLISSANTS = <any>\"Nb RDV 12 derniers M\",\r\n            DATE_PROCHAIN_RDV = <any>\"Prochain RDV\",\r\n            NOTE_BALE2 = <any>\"Note Bâle II\",\r\n            PART_ENGAG = <any>\"Part en engagement\",\r\n            PROCHAINE_REVISION = <any>\"Prochaine révision\",\r\n            PNB_3112 = <any>\"PNB 31/12/\", // 31/12, ajouté par le code\r\n            PNB_N = <any>\"PNB N\",\r\n            PNB_N_MOINS_1 = <any>\"PNB N-1\",\r\n\r\n            REV_DATE_DERNIERE_REVUE = <any>\"Dernière revue\",\r\n            REV_NB_SSFAMILLES_PROPOSE = <any>\"Nb produits à proposer\",\r\n            REV_VALIDEE_PAR = <any>\"Validé par\",\r\n\r\n            FLUX_CREDITEURS_N = <any>\"Flux créditeurs N\",\r\n            FLUX_CREDITEURS_N_MOINS_1 = <any>\"Flux créditeurs N-1\",\r\n            FLUX_DEBITEURS_N = <any>\"Flux débiteurs N\",\r\n            FLUX_DEBITEURS_N_MOINS_1 = <any>\"Flux débiteurs N-1\",\r\n            NB_AFFAIRES_EN_COURS = <any>\"Nb affaires en cours\",\r\n\r\n            NB_APPETENCES = <any>\"Nb appétences produits\",\r\n            NB_PROPOSITIONS_EN_COURS = <any>\"Nb propositions en cours\",\r\n\r\n            // NOUVEL INDICATEUR enum intitule score\r\n            SCORE_ACTIVATION = <any>\"Score activation\",\r\n            SCORE_DEFAILLANCE = <any>\"Score défaillance\",\r\n            SCORE_APPETENCE = <any>\"Score appétence\",\r\n            TOP_CC = <any>\"Top CC\",\r\n            PART_FLUX_CONFIES_CRED = <any>\"Part de flux créditeurs\",\r\n            PART_FLUX_CONFIES_DEB = <any>\"Part de flux débiteurs\",\r\n            PREMIER_EQUIPEMENT = <any>\"1er équipement\",\r\n            PREMIER_EQUIPEMENT_TAG = <any>\"1er équipement tag\",\r\n            PREMIER_EQUIPEMENT_TEXTE = <any>\"1er équipement\", // affiché dans la liste des filtres\r\n            OBJECTIF_FLUX = <any>\"Objectif de flux\",\r\n            ENCOURS_BDF = <any>\"Encours BDF\",\r\n            BEGACLI = <any>\"BEGACLI\"\r\n        };\r\n        export enum FAMILLE {\r\n            CA = <any>\"CA/Budget\",\r\n            SEGMENTATION = <any>\"Segmentation\",\r\n            RENDEZ_VOUS = <any>\"Rendez vous\",\r\n            RISQUE = <any>\"Risque\",\r\n            NC = <any>\"NC\",\r\n            PNB = <any>\"PNB\",\r\n            REVUE = <any>\"Revue de portefeuille\",\r\n            FLUX = <any>\"Flux\",\r\n            PROSPECT = <any>\"Segmentation\",\r\n            OPPORTUNITES = <any>\"Opportunités\",\r\n            // NOUVEL INDICATEUR nouvelle famille\r\n            PROSPECTION = <any>\"Prospection\"\r\n        };\r\n        export enum ICONE {\r\n            DATE_DERNIER_RDV = <any>\"itce-calendar\",\r\n            DATE_PROCHAIN_RDV = <any>\"itce-calendar\",\r\n            DATE_DERNIER_ENTRETIEN = <any>\"itce-pencil\",\r\n            NB_RDV_ANNEE_EN_COURS = <any>\"itce-calendar-o\",\r\n            NB_RDV_12_MOIS_GLISSANTS = <any>\"itce-calendar-o\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Enumeration lièe aux filtres\r\n     */\r\n    export module Filtre {\r\n        export enum COMPARATEUR {\r\n            SUPERIEUR = <any>\">\",\r\n            INFERIEUR = <any>\"<\",\r\n            EGALE = <any>\"=\",\r\n            ENTRE = <any>\"Entre\",\r\n            NC = <any>\"= NC\",\r\n            ECHUE = <any>\"= Echue (plus d'un an)\",\r\n            ENCOURS = <any>\"= En cours (moins d'un an)\",\r\n            NONREALISEE = <any>\"= Non réalisée\"\r\n        };\r\n        export enum OPERATEUR {\r\n            ET = <any>\"ET\",\r\n            OU = <any>\"OU\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Enumération liée à la Revue\r\n     */\r\n    export module Revue {\r\n        export enum POPUP_REVUE {\r\n            POPUP_CLIENTS_PRODUIT_A_PROPOSER = 0,\r\n            POPUP_CLIENTS_APPETENCE_PRODUIT = 0,\r\n            POPUP_CLIENTS_A_ACTIVER = Number.MAX_VALUE,\r\n            POPUP_CLIENTS_TARIFICATION = 99977,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Enumération type de vue dans la ressource statPortfeuilleEds\r\n     */\r\n    export module Rest {\r\n        export enum TYPE_VUE_STAT_GLOBAL {\r\n            VUE_GLOBAL = <any>\"0\",\r\n            VUE_DETAILLE = <any>\"1\",\r\n            VUE_GLOBAL_ET_DETAILLE = <any>\"2\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    export module Vue {\r\n        export enum TYPE_VUE {\r\n            VUE_AGENT = <any>\"0\",\r\n            VUE_EDS = <any>\"1\",\r\n        };\r\n    }\r\n}","module Portefeuille.Constantes.Inject {\r\n    \"use strict\";\r\n\r\n    export module Angular {\r\n        export const $q: string = \"$q\";\r\n        export const $modalInstance: string = \"$modalInstance\";\r\n        export const $scope: string = \"$scope\";\r\n        export const $location: string = \"$location\";\r\n        export const $filter: string = \"$filter\"; \r\n        export const $parse: string = \"$parse\";\r\n        export const $window: string = \"$window\";\r\n        export const $rootScope: string = \"$rootScope\";\r\n        export const $element: string = \"$element\";\r\n        export const $anchorScroll: string = \"$anchorScroll\";\r\n    }\r\n\r\n    export module MyWay {\r\n        export const serviceAgentExtended: string = \"serviceAgentExtended\";\r\n        export const serviceAgent: string = \"serviceAgent\";\r\n        export const tableServiceOpefi: string = \"tableServiceOpefi\";\r\n        export const mwsfRechercheEdsGlobaleService: string = \"mwsfRechercheEdsGlobaleService\";\r\n        export const data: string = \"data\";\r\n        export const mwEvents: string = \"MW_EVENTS\";\r\n\r\n        export const portailService: string = \"portailService-libPortail\";\r\n    }\r\n\r\n    export module Services {\r\n        export const suiviParComplementaireRestService: string = \"SuiviComplementaireService\";\r\n        export const choixEdsService: string = \"ChoixEdsService\";\r\n        export const contexteService: string = \"ContexteService\";\r\n        export const eventService: string = \"EventService\";\r\n        export const filtreService: string = \"FiltreService\";\r\n        export const begacliService: string = \"BegacliService\";\r\n        export const indicateurService: string = \"IndicateurService\";\r\n        export const lisaApplication: string = \"LisaApplication\";\r\n        export const listeClientsService: string = \"ListeClientsService\";\r\n        export const popupService: string = \"PopupService\";\r\n        export const portefeuilleService: string = \"PortefeuilleService\";\r\n        export const preferencesService: string = \"PreferencesService\";\r\n        export const rechercheAgentRestService: string = \"RechercheAgentService\";\r\n        export const recherchePortefeuilleRestService: string = \"RecherchePortefeuilleService\";\r\n        export const indicateursRestService: string = \"IndicateursService\";\r\n        export const rechercheCommercialRestService: string = \"RechercheCommercialeService\";\r\n        export const corporateInformationRestService: string = \"CorporateFamilleLienService\";\r\n        export const relationCommercialeRestService: string = \"RelationCommercialeService\";\r\n        export const clientRestService: string = \"ClientService\";\r\n        export const habilitationService: string = \"HabilitationService\";\r\n        export const gestionAffectationRestService: string = \"GestionAffectationService\";\r\n        export const choixUtilisateurService: string = \"ChoixUtilisateurService\";\r\n        export const modalePaniersService: string = \"ModalePaniersService\";\r\n        export const pfDragAndDropService: string = \"PfDragAndDropService\";\r\n        export const mwNotificationService: string = \"MwNotificationService\";\r\n        export const modalService: string = \"modalService\";\r\n        export const applicationUtils: string = \"ApplicationUtils\";\r\n        export const preferenceUtilisateurRestService: string = \"PreferenceUtilisateurService\";\r\n        export const restStatRentabiliteService: string = \"StatRentabiliteService\";\r\n        export const restStatRevueService: string = \"StatRevueService\";\r\n        export const restStatPortefeuilleService: string = \"StatPortefeuilleService\";\r\n        export const restStatFluxMouvementFinancierService: string = \"StatFluxMouvementFinancierService\";\r\n        export const statService: string = \"StatsService\";\r\n        export const ihmService: string = \"IhmService\";\r\n        export const rechercheRevueService: string = \"RechercheRevueService\";\r\n        export const indicateurFlecheService: string = \"IndicateurFlecheService\";\r\n        export const creationPourcentageService: string = \"CreationPourcentageService\";\r\n        export const restStatPortefeuilleEdsService: string = \"StatPortefeuilleEdsService\";\r\n        export const mwCsvService: string = \"mwCsvService\";\r\n        export const edsNiveauInferieurService: string = \"EdsNiveauInferieurService\";\r\n        export const mockService: string = \"MockService\";\r\n    }\r\n\r\n    export module LibrairieD3 {\r\n        export const creationDonutService: string = \"CreationDonutService\";\r\n        export const creationPourcentageService: string = \"CreationPourcentageService\";\r\n    }\r\n\r\n    export module Autres {\r\n        export const dataModale: string = \"data\";\r\n    }\r\n}","/// <reference path=\"../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur de la page Clients\r\n * @module Portefeuille.Controleurs\r\n * @author S0078068 (Yannis VESSEREAU)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    let loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Controleur de l'index\r\n     */\r\n    export class ClientsControleur implements MyWay.UI.ISelectionChangeHandler, MyWay.UI.IMwTableHandler {\r\n        public static CLASS_NAME = \"ClientsControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(ClientsControleur.CLASS_NAME);\r\n\r\n        // Proprietés\r\n        public listeClients: Array<Modeles.Application.IClient>;\r\n        public listeClientsFiltre: Array<Modeles.Application.IClient>;\r\n        public listeClientsAAfficher: Array<Modeles.Application.IClient>;\r\n        public listeRelationEcoAAfficher: Array<Modeles.Application.IRelationEconomique>;\r\n        public listeRelationEco: Array<Modeles.Application.IRelationEconomique>;\r\n        public listeRelationEcoFiltre: Array<Modeles.Application.IRelationEconomique>;\r\n        public choixRelationEco: Modeles.Application.IRelationEconomique;\r\n        public typeVue: Enum.PageClients.TYPE_VUE;\r\n        public chargementEnCours: boolean = false;\r\n        public tableauClients: Modeles.Tableaux.TableauClient;\r\n        public tableauRelations: Modeles.Tableaux.TableauRelation;\r\n        public messageChoixPtf: string;\r\n        public messageAucunPtf: string;\r\n        public listeFiltresClients: Array<Modeles.Application.IFiltre>;\r\n        public listeFiltresRelationEco: Array<Modeles.Application.IFiltre>;\r\n        public listeFiltres: Array<Modeles.Application.IFiltre>;\r\n        public listeIndicateursFiltre: Array<Modeles.Application.IIndicateurFiltre>;\r\n        public listeIndicateursRelationEcoFiltre: Array<Modeles.Application.IIndicateurFiltre>;\r\n        public listeTotaleIndicateurs: Array<Modeles.Application.IIndicateurType>;\r\n        public listeIndicateursTableau: Array<Modeles.Application.IIndicateurChoix>;\r\n        public pageActuelle: number;\r\n        public estAvecFiltreColonne: boolean;\r\n        //public typeForcageEnCours: Enum.PageClients.TYPE_FORCAGE;\r\n        public radioBoutonEstVueClient: Enum.PageClients.TYPE_VUE;\r\n        public messageLimiteClientsAtteinte: string;\r\n        public estHabiliteConsultRevue: boolean;\r\n        public estHabiliteMajRevue: boolean;\r\n        public panierDefaut: Modeles.Application.IPanier;\r\n\r\n        private contexteGererRelation = <Modeles.Application.IContexteGererRelation>{};\r\n        private nombreAppelInitialiserTableaux: number; //Nombre d'appels à l'initialisation des tableaux afin de piloter chragementEnCours\r\n        private etatChargementLong: number;\r\n\r\n        private accessibiliteBoutonVoirProduitsPourClient: boolean;\r\n        private relationEcoPourConsultationProduits: Portefeuille.Modeles.Application.IRelationEconomique;\r\n\r\n        private isAfficherMessageLimiteClientAtteinte: boolean;\r\n        private isAccesDepuisBlocRevue: boolean;\r\n\r\n        //Gestion des NC pour les placer systématiquement en fin de tableau quelque soit le tri effectué sur les colonnes\r\n        private chaineMaxPourComparaison: string;\r\n        private dateMin: Date;\r\n        private dateMax: Date;\r\n\r\n        // export excel\r\n        private formatDate: string = \"DD/MM/YYYY\";\r\n        private exportCSVEnCours: boolean;\r\n\r\n        // création du fichier CSV\r\n        private nomFichierExport: string = \"Export portefeuilles\";\r\n\r\n        // Injection de dépendances \r\n        public static $inject: string[] = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Angular.$q,\r\n            Constantes.Inject.Angular.$location,\r\n            Constantes.Inject.Angular.$window,\r\n            Constantes.Inject.Services.listeClientsService,\r\n            Constantes.Inject.Angular.$filter,\r\n            Constantes.Inject.Services.popupService,\r\n            Constantes.Inject.Angular.$parse,\r\n            Constantes.Inject.MyWay.tableServiceOpefi,\r\n            Constantes.Inject.Services.eventService,\r\n            Constantes.Inject.Services.lisaApplication,\r\n            Constantes.Inject.Services.contexteService,\r\n            Constantes.Inject.Services.indicateurService,\r\n            Constantes.Inject.Services.filtreService,\r\n            Constantes.Inject.Services.portefeuilleService,\r\n            Constantes.Inject.Services.preferencesService,\r\n            Constantes.Inject.Services.ihmService,\r\n            Constantes.Inject.MyWay.portailService,\r\n            Constantes.Inject.Services.habilitationService,\r\n            Constantes.Inject.Services.mwCsvService,\r\n            \"ExportService\",\r\n            \"$timeout\"\r\n        ];\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $scope: ng.IScope,\r\n            private $q: ng.IQService,\r\n            private $location: ng.ILocationService,\r\n            private $window: ng.IWindowService,\r\n            private listeClientsService: Services.Application.IListeClientsService,\r\n            private $filter: ng.IFilterService,\r\n            private popupService: Services.Application.IPopupService,\r\n            private $parse: ng.IParseService,\r\n            private tableService: MyWay.UI.IMwTableServiceOpefi,\r\n            private eventService: Services.Application.IEventService,\r\n            private lisaApplication: Portefeuille.Services.Application.ILisaApplication,\r\n            private contexteService: Services.Application.IContexteService,\r\n            private indicateurService: Services.Application.IIndicateurService,\r\n            private filtreService: Services.Application.IFiltreService,\r\n            private portefeuilleService: Services.Application.IPortefeuilleService,\r\n            private preferencesService: Services.Application.IPreferencesService,\r\n            private ihmService: Services.Application.IIhmService,\r\n            private portailService: myway.portail.api.PortailService,\r\n            private habilitationService: Services.Application.IHabilitationService,\r\n            private mwCsvService: Services.Application.CsvService,\r\n            private exportService: Services.Application.ExportService,\r\n            private $timeout: ng.ITimeoutService\r\n        ) {\r\n            this.nombreAppelInitialiserTableaux = 0;\r\n            this.etatChargementLong = -1;\r\n            this.accessibiliteBoutonVoirProduitsPourClient = false;\r\n\r\n            if (this.portefeuilleService.getTypeForcage()) {\r\n                this.initialiser(this.portefeuilleService.getTypeForcage());\r\n            } else {\r\n                this.initialiser(Enum.PageClients.TYPE_FORCAGE.SANS);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        public initialiser(typeForcage: Enum.PageClients.TYPE_FORCAGE): ng.IPromise<void> {\r\n            ClientsControleur.logger.info(\">>> Appel de la méthode : ClientsControleur.initialiser <<<\");\r\n            console.log(\"--> ClientsControleur.initialiser typeForcage : \", typeForcage);\r\n            //this.typeForcageEnCours = typeForcage;\r\n            this.estHabiliteConsultRevue = this.habilitationService.estHabiliteConsultRevue();\r\n            this.estHabiliteMajRevue = this.habilitationService.estHabiliteMajRevue();\r\n            this.messageChoixPtf = Constantes.Messages.MESSAGE_CHOIX_PORTEFEUILLE;\r\n            this.messageAucunPtf = Constantes.Messages.MESSAGE_AUCUN_PORTEFEUILLE;\r\n            this.chargementEnCours = true;\r\n            this.listeFiltresClients = [];\r\n            this.listeFiltresRelationEco = [];\r\n            this.listeFiltres = [];\r\n            this.listeIndicateursFiltre = [];\r\n            this.listeIndicateursRelationEcoFiltre = [];\r\n            this.listeClients = [];\r\n            this.listeClientsAAfficher = [];\r\n            this.listeRelationEco = [];\r\n            this.listeRelationEcoAAfficher = [];\r\n            this.listeIndicateursTableau = [];\r\n            this.eventService.setClientsControleur(this);\r\n\r\n            this.messageLimiteClientsAtteinte = this.valoriserMessageLimiteClientsAtteinte(this.portefeuilleService.getTypeForcage());\r\n            this.dateMin = moment(Constantes.Application.DATE_MIN).toDate();\r\n            this.dateMax = moment(Constantes.Application.DATE_MAX).toDate();\r\n            console.log(\"--> ClientsControleur.initialiser portefeuilleService.aPortefeuilles() : \", this.portefeuilleService.aPortefeuille());\r\n            console.log(\"--> ClientsControleur.initialiser portefeuilleService.aPortefeuillesAffiche() : \", this.portefeuilleService.aPortefeuillesAffiche());\r\n            console.log(\"--> ClientsControleur.initialiser portefeuilleService.aPortefeuillesReelAffiche() : \", this.portefeuilleService.aPortefeuillesReelAffiche());\r\n            console.log(\"--> ClientsControleur.initialiser portefeuilleService.aPortefeuilleExpertAffiche() : \", this.portefeuilleService.aPortefeuilleExpertAffiche());\r\n            // On vérifie qu'un choix de portefeuille a bien été fait\r\n            if (this.portefeuilleService.aPortefeuillesAffiche()) {\r\n                // Determination de la vue affichée par défaut\r\n                if (this.estEnForcageTypeClientsOuProspects()) {\r\n                    this.typeVue = Enum.PageClients.TYPE_VUE.VUE_CLIENTS;\r\n                } else {\r\n                    this.typeVue = this.ihmService.getTypeVue();\r\n                }\r\n                this.radioBoutonEstVueClient = this.typeVue;\r\n\r\n                if (this.portefeuilleService.getCaracteristiquesAgent()) {\r\n                    this.nombreAppelInitialiserTableaux = this.nombreAppelInitialiserTableaux + 1;\r\n                    return this.initApplication(typeForcage);\r\n                } else {\r\n                    this.contexteService.getAuthentification()\r\n                        .then((authentification: MyWay.Services.Context.AuthentificationInfo) => {\r\n                            let caracteristiquesAgent = <Modeles.Application.ICaracteristiquesAgent>{};\r\n                            caracteristiquesAgent.codeEtablissement = authentification.codeEtablissement;\r\n                            caracteristiquesAgent.designationAgent = authentification.agentConnecte.designationLongueAgent;\r\n                            caracteristiquesAgent.identifiantElementStructure = +authentification.agentConnecte.numeroInterneEds;\r\n                            caracteristiquesAgent.libelleFonction = authentification.agentConnecte.designationPosteFonctionnel;\r\n                            this.portefeuilleService.setCaracteristiquesAgent(caracteristiquesAgent);\r\n                            this.nombreAppelInitialiserTableaux = this.nombreAppelInitialiserTableaux + 1;\r\n\r\n                            //return this.initTableaux(typeForcage);\r\n                            return this.initApplication(typeForcage);\r\n                        });\r\n                }\r\n            } else {\r\n                this.chargementEnCours = false;\r\n                return this.$q.when();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param typeForcage\r\n         */\r\n        private initApplication(typeForcage: Enum.PageClients.TYPE_FORCAGE): ng.IPromise<any> {\r\n            return this.contexteService.getContexte().then((contexte: Modeles.Application.IContexte) => {\r\n                return this.serviceAgentExtended.DonneesDelocalisees.getDonneesDelocalisees(contexte.codeEtablissement, Constantes.Application.TABLE_DELOC_SEGMENTATIONS).then((resultat: any) => {\r\n                    // récupère les libellés segmentation BDR\r\n                    if (resultat.donnees) {\r\n                        resultat.donnees.forEach((donnee: any) => {\r\n                            if (donnee.CODLTS === \"BM\") {   // segmentations BDR : BM; segmentations PRO : BP\r\n                                // on ajout edans Utils qui fera la transformation direct à la récupération des indicateurs (évite un traitement en plus)\r\n                                Portefeuille.Services.Utils.ApplicationUtils.segmentationsBDR.push(donnee);\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    // puis initialise les relations ecos et indicateurs clients\r\n                    return this.initTableaux(typeForcage);\r\n                });\r\n             });\r\n        }\r\n\r\n        // récupère les relations éco et la liste des clients puis les indicateurs clients\r\n        private initTableaux(typeForcage: Enum.PageClients.TYPE_FORCAGE): ng.IPromise<any> {\r\n            // Si on est en train de regarder les client d'un portefeuille expert (SPC), on n'affiche pas la conlonne \"nb personnes relation\"\r\n            const avecColonneNbClientRelation = this.portefeuilleService.aPortefeuilleExpertAffiche() ? false : true;\r\n            this.tableauClients = new Modeles.Tableaux.TableauClient(this, this, this.$filter, this.$parse, this.listeClients, this.listeIndicateursTableau, avecColonneNbClientRelation);\r\n            this.tableauRelations = new Modeles.Tableaux.TableauRelation(this, this, this.$filter, this.$parse, this.listeRelationEco, this.listeIndicateursTableau);\r\n            this.listeTotaleIndicateurs = this.indicateurService.getListeTotaleIndicateursType();\r\n            this.pageActuelle = 1;\r\n            \r\n            // Si on arrive du bloc \"Revue de portefeuille\" on ne cherche pas dans les preferences car les indicateurs revues sont fixés à l'avance, sinon on cherche dans le panier\r\n            return this.serviceAgentExtended.getFromContext(Constantes.Contexte.ACCES_DEPUIS_BLOC_REVUE).then((accesDepuisBlocRevue : string) => {\r\n                let isAccesDepuisBlocRevue: boolean = accesDepuisBlocRevue === \"O\";\r\n                this.isAccesDepuisBlocRevue = isAccesDepuisBlocRevue;\r\n                this.isAfficherMessageLimiteClientAtteinte = this.controlerLimiteClientAtteinte(isAccesDepuisBlocRevue);\r\n                \r\n                if (isAccesDepuisBlocRevue) {\r\n                    // si on est passé par le bloc Revue (typeForcage = TOUS) et qu'on a débranché vers la revue, au retour il faut qu'on check ce qu'on dans le context\r\n                    // pour appeler la liste des relations éco enb 9999 pour avoir les clients\r\n                    typeForcage = Enum.PageClients.TYPE_FORCAGE.TOUT;\r\n\r\n                    this.listeIndicateursTableau = this.indicateurService.getListeIndicateursRevue();\r\n                    return this.getRelationEconomiques(typeForcage);\r\n                } else {\r\n                    return this.preferencesService.lirePanierDefaut(this.listeTotaleIndicateurs)\r\n                        .then((panierDefautPref: Modeles.Application.IPanier) => {\r\n                            this.panierDefaut = panierDefautPref;\r\n\r\n                            // Determination de la liste des indicateurs choisis\r\n                            if (typeForcage === Enum.PageClients.TYPE_FORCAGE.TOUT) {\r\n                                this.panierDefaut = this.preferencesService.convertirPanierPreferenceEnApplicatif(\r\n                                    this.indicateurService.getPanierDeForcage(),\r\n                                    this.listeTotaleIndicateurs, Constantes.Application.NOM_PANIER_FORCAGE, false);\r\n                                this.listeIndicateursTableau = this.panierDefaut.listeChoixIndicateurs;\r\n                            } else {\r\n                                this.listeIndicateursTableau = panierDefautPref ? panierDefautPref.listeChoixIndicateurs : [];\r\n                            }\r\n                            return this.getRelationEconomiques(typeForcage);\r\n                        });\r\n                }\r\n            });\r\n        }\r\n\r\n        private getRelationEconomiques(typeForcage: Enum.PageClients.TYPE_FORCAGE): ng.IPromise<any> {\r\n            return this.listeClientsService.getListeRelationsEconomiques(\r\n                this.portefeuilleService.getCaracteristiquesAgent().identifiantElementStructure,\r\n                this.portefeuilleService.getListePortefeuillesVisu(),\r\n                typeForcage, this.listeIndicateursTableau,\r\n                this.isAccesDepuisBlocRevue,\r\n                this.portefeuilleService.getListeCodeSuiviParComplementairePortefeuillesExpertVisu()\r\n            )\r\n                .then((listeRelationsEco: Array<Modeles.Application.IRelationEconomique>) => {\r\n                this.listeRelationEco = listeRelationsEco.sort((a: Modeles.Application.IRelationEconomique, b: Modeles.Application.IRelationEconomique) => (a.nom > b.nom) ? 1 : ((b.nom > a.nom) ? -1 : 0));\r\n                this.listeRelationEcoFiltre = angular.copy(this.listeRelationEco);\r\n                this.listeRelationEcoFiltre.unshift(this.getRelationEcoToutes());\r\n                this.choixRelationEco = _.where(this.listeRelationEcoFiltre, { \"id\": \"\" })[0];\r\n\r\n                this.listeRelationEcoAAfficher = this.listeRelationEco;\r\n                this.tableauRelations = new Modeles.Tableaux.TableauRelation(this, this, this.$filter, this.$parse, this.listeRelationEco, this.listeIndicateursTableau);\r\n                this.listeIndicateursRelationEcoFiltre = this.listeClientsService.getListeIndicateursRelationEcoFiltre();\r\n\r\n                _.forEach(this.listeRelationEco, (relationEco: Modeles.Application.IRelationEconomique) => {\r\n                    relationEco.listeClients = this.listeClientsService.ordonnerListeClientsAvecLeader(relationEco.listeClients);\r\n                    // ici, on ajoute pour chaque client de la liste , le nombre de clients dans la relation.\r\n                    let nb = relationEco.listeClients.length;\r\n                    for (var itemClient of relationEco.listeClients) {\r\n                        itemClient.nbPersonneRelation = nb;\r\n                    }\r\n\r\n                    this.listeClients = this.listeClients.concat(relationEco.listeClients);\r\n                });\r\n                    this.listeClientsAAfficher = this.listeClients;\r\n\r\n                this.tableauClients = new Modeles.Tableaux.TableauClient(this, this, this.$filter, this.$parse, this.listeClients, this.listeIndicateursTableau, true);\r\n\r\n                this.majFiltres();\r\n\r\n                this.relationEcoPourConsultationProduits = angular.copy(this.choixRelationEco);\r\n            })\r\n            .catch((erreur: MyWay.Services.Erreur) => {\r\n                return this.serviceAgentExtended.getFromContext(Constantes.Contexte.ACCES_DEPUIS_BLOC_REVUE).then((accesDepuisBlocRevue: string) => {\r\n                    if (erreur.codeLibelle === Constantes.Service.RELATION_COMMERCIALE_CODE_MAX_CLIENT_ATTEINT && accesDepuisBlocRevue !== \"O\") {\r\n                        // si on revient directement de la revue, on vérifie si un forcage est déja présent\r\n                        return this.contexteService.recupererRetourDebranchement()\r\n                            .then((contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille) => {\r\n\r\n                                if (contexteGererPortefeuille\r\n                                    && contexteGererPortefeuille.objetEdsVisu\r\n                                    && contexteGererPortefeuille.objetEdsVisu.typeForcage\r\n                                    && contexteGererPortefeuille.objetEdsVisu.typeForcage !== Enum.PageClients.TYPE_FORCAGE.SANS) {\r\n                                    this.portefeuilleService.setTypeForcage(contexteGererPortefeuille.objetEdsVisu.typeForcage);\r\n                                    this.listeClientsService.setAffichageModificationChoix(contexteGererPortefeuille.objetEdsVisu.affichageModificationChoix);\r\n                                    return this.initialiser(contexteGererPortefeuille.objetEdsVisu.typeForcage);\r\n                                } else {\r\n                                    return this.accederForcage();\r\n                                }\r\n                            });\r\n                    } else {\r\n                        ClientsControleur.logger.error(\"Erreur de récupération du portefeuille\", erreur.codeLibelle, erreur.libelle);\r\n                        return this.popupService.showErreur(erreur);\r\n                    }\r\n                });\r\n            })\r\n            .finally(() => {\r\n                this.nombreAppelInitialiserTableaux = this.nombreAppelInitialiserTableaux - 1;\r\n                this.chargementEnCours = !(this.nombreAppelInitialiserTableaux === 0);\r\n\r\n                // si on revient directement de la revue, on a un filtrage sur la relation\r\n                return this.contexteService.recupererRetourDebranchement()\r\n                    .then((contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille) => {\r\n                        if (contexteGererPortefeuille\r\n                            && contexteGererPortefeuille.objetEdsVisu\r\n                            && contexteGererPortefeuille.identifiantRelation) {\r\n                            this.portefeuilleService.setTypeForcage(contexteGererPortefeuille.objetEdsVisu.typeForcage);\r\n\r\n                            if (contexteGererPortefeuille.objetEdsVisu.typeForcage === Enum.PageClients.TYPE_FORCAGE.CLIENTS ||\r\n                                contexteGererPortefeuille.objetEdsVisu.typeForcage === Enum.PageClients.TYPE_FORCAGE.PROSPECTS) {\r\n                                this.affichageVueClient();\r\n                            } else {\r\n                                \r\n                                // applique les filtres relation et clients sans changer la vue\r\n                                // si on est en vue relation éco, il faut appliquer en priorité le filtre client qui s'applique aussi en vue relation, car on va etre dans le détail\r\n                                let filtresRelations: boolean = this.appliquerFiltresRelationApresDebranchement(contexteGererPortefeuille.filtresRelation);\r\n                                let filtresClients: boolean = this.appliquerFiltresApresDebranchement(contexteGererPortefeuille.filtres);\r\n                                \r\n                                // maintenant on se positionne au bon endroit: en vue relation éco ou clients\r\n                                if (contexteGererPortefeuille.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {\r\n                                    // force en vue clients\r\n                                    this.radioBoutonEstVueClient = contexteGererPortefeuille.typeVue;\r\n                                    this.affichageVueClient();\r\n\r\n                                    if (filtresClients) {\r\n                                        this.majFiltres();\r\n                                    }\r\n                                } else {\r\n                                    // force en vue relation economique\r\n                                    this.radioBoutonEstVueClient = contexteGererPortefeuille.typeVue;\r\n                                    this.affichageVueRelationEco();\r\n                                    this.typeVue = Enum.PageClients.TYPE_VUE.VUE_CLIENTS;   // met en mode clients pour afficher les filtres clients\r\n\r\n                                    if (filtresClients) {\r\n                                        this.listeFiltres = contexteGererPortefeuille.filtres;\r\n                                        this.majFiltres();\r\n                                    } else if (filtresRelations) {\r\n                                        this.majFiltres();\r\n                                    }\r\n\r\n                                    // on se met en vue relation éco. En vue relation éco on se positionne tjs sur le détail de la dernière relation éco vue\r\n                                    // (pour débrancher on était forcement dans le détail d'une relation eco)\r\n                                    this.filtrageTableauClient(contexteGererPortefeuille.identifiantRelation.toString());\r\n                                }\r\n                            }\r\n\r\n                            //Remise en place des filtre et du positionnement dans le tableau\r\n                            this.miseAJourTableauAvecContexte(contexteGererPortefeuille);\r\n\r\n                            // suppression du contexte\r\n                            let listeContextesASupprimer: Array<string> = [Constantes.Contexte.CONTEXTE_VERS_REVUE, Constantes.Contexte.CONTEXTE_GERR_PORTF];\r\n                            return this.contexteService.supprimerContexteDevenuInutile(listeContextesASupprimer);\r\n                        } else {\r\n                            if (this.ihmService.getTypeVue() === Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {\r\n                                this.affichageVueClient();\r\n                            }\r\n                        }\r\n                        this.$scope.$applyAsync();\r\n                    });\r\n            });\r\n        }\r\n\r\n        // lorsqu'on revient d'un débranchement, si des filtres avaient été positonnés on va les réappliquer\r\n        private appliquerFiltresApresDebranchement(filtres: Array<Modeles.Application.IFiltre>): boolean {\r\n            if (filtres && filtres.length > 0) {\r\n                this.filtreService.setFiltresClients(filtres);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        private appliquerFiltresRelationApresDebranchement(filtres: Array<Modeles.Application.IFiltre>): boolean {\r\n            if (filtres && filtres.length > 0) {\r\n                this.filtreService.setFiltresRelationsEco(filtres);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        private majFiltres(): void {\r\n            if (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {\r\n                this.listeIndicateursFiltre = this.listeClientsService.getListeIndicateursFiltre();\r\n                this.listeFiltresClients = this.filtreService.getFiltresClients();\r\n                this.listeFiltres = this.listeFiltresClients;\r\n\r\n                if (this.listeFiltresClients && this.listeFiltresClients.length > 0) {\r\n                    // Maj liste filtre selon dispo indicateur\r\n                    this.listeFiltresClients = this.filtreService.majAndGetFiltresClientsAvecListeIndicateursDispo(this.listeIndicateursTableau);\r\n                }\r\n            } else {\r\n                this.listeIndicateursFiltre = this.listeClientsService.getListeIndicateursRelationEcoFiltre();\r\n                this.listeFiltresRelationEco = this.filtreService.getFiltresRelationsEco();\r\n                this.listeFiltres = this.listeFiltresRelationEco;\r\n                if (this.listeFiltresRelationEco && this.listeFiltresRelationEco.length > 0) {\r\n                    // Maj liste filtre selon dispo indicateur\r\n                    this.listeFiltresRelationEco = this.filtreService.majAndGetFiltresRelationsEcoAvecListeIndicateursDispo(this.listeIndicateursTableau);\r\n                }\r\n                //console.log(\">>>> listeFiltresRelationEco >>>>\", this.listeFiltresRelationEco);\r\n            }\r\n            //console.log(\">>>> listeIndicateursFiltre >>>>\", this.listeIndicateursFiltre);\r\n            this.majTableauSuiteModificationFiltre(this.listeIndicateursFiltre);\r\n        }\r\n\r\n        private getRelationEcoToutes(): Modeles.Application.IRelationEconomique {\r\n            let toutesRelation: Modeles.Application.IRelationEconomique = <Modeles.Application.IRelationEconomique>{};\r\n            toutesRelation.id = \"\";\r\n            toutesRelation.nom = \"Toutes les relations\";\r\n            toutesRelation.listeClients = [];\r\n            toutesRelation.listeIndicateurs = [];\r\n            return toutesRelation;\r\n        }\r\n\r\n        public filtrageTableauClient(filtreRelationEco: string): void {\r\n            // AAAA, ici, on a cliqué sur la ligne en vue relation.\r\n            this.typeVue = Enum.PageClients.TYPE_VUE.VUE_CLIENTS;\r\n            if (filtreRelationEco) {\r\n                this.choixRelationEco = _.where(this.listeRelationEcoFiltre, { \"id\": filtreRelationEco })[0];\r\n                this.listeClientsFiltre = _.where(this.listeClients, { \"idRelationEconomique\": +filtreRelationEco });\r\n                this.listeClientsAAfficher = this.filtreService.filtrerListeClients(this.listeClientsFiltre, this.listeFiltresClients);\r\n                this.tableauClients = new Modeles.Tableaux.TableauClient(this, this, this.$filter, this.$parse, this.listeClientsAAfficher, this.listeIndicateursTableau, false);\r\n            } else {\r\n                this.choixRelationEco = _.where(this.listeRelationEcoFiltre, { \"id\": \"\" })[0];\r\n                this.listeClientsAAfficher = this.filtreService.filtrerListeClients(this.listeClients, this.listeFiltresClients);\r\n                this.tableauClients = new Modeles.Tableaux.TableauClient(this, this, this.$filter, this.$parse, this.listeClientsAAfficher, this.listeIndicateursTableau, false);\r\n            }\r\n\r\n            this.relationEcoPourConsultationProduits = angular.copy(this.choixRelationEco);\r\n        }\r\n\r\n        /**\r\n         * Méthode appelé lors de l'action de sélection d'un client dans le tableau\r\n         * @param {Modeles.Application.IRelation} relation ou {Modeles.Application.IClient} client\r\n         * @returns {void}\r\n         */\r\n        public onSelectionChange(selectedObjet: Portefeuille.Modeles.Application.IRelationEconomique | Portefeuille.Modeles.Application.IClient): void {\r\n            ClientsControleur.logger.info(\">>> Appel de la méthode : ClientsControleur.onSelectionChange <<<\");\r\n\r\n            let relationEcoDuClientSelectionne: Portefeuille.Modeles.Application.IRelationEconomique = null;\r\n\r\n            //Ici selectedObjet est de type ICLient\r\n            if (this.estVueClients()) {\r\n                this.accessibiliteBoutonVoirProduitsPourClient = selectedObjet.checked;\r\n\r\n                if (selectedObjet.checked && (<Portefeuille.Modeles.Application.IClient>selectedObjet).idRelationEconomique) {\r\n                    relationEcoDuClientSelectionne = _.find(this.listeRelationEco, (relationEcoLue: Portefeuille.Modeles.Application.IRelationEconomique) => {\r\n                        if (relationEcoLue && relationEcoLue.id === (<Portefeuille.Modeles.Application.IClient>selectedObjet).idRelationEconomique.toString()) {\r\n                            return true;\r\n                        }\r\n                    });\r\n\r\n                    this.relationEcoPourConsultationProduits = angular.copy(relationEcoDuClientSelectionne);\r\n                }\r\n            }\r\n\r\n            //Ici selectedObjet est de type IRelationEconomique\r\n            if (this.estVueRelationEco()) {\r\n                this.estAvecFiltreColonne = false;\r\n                this.listeFiltres = this.listeFiltresClients;\r\n                if (selectedObjet.checked) {\r\n                    this.construireContexteRel();\r\n                    //this.tableauRelations.selectedItems = []; // deselection de la ligne\r\n                    this.filtrageTableauClient(selectedObjet.id);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet d'ouvrir la modale de filtrage\r\n         * @returns {void}\r\n         */\r\n        public accederAuxFiltres(): void {\r\n\r\n            let data = <Modeles.Application.IDonneesEntreeSortiePopupFiltres>{};\r\n            data.listeIndicateursTableau = angular.copy(this.listeIndicateursTableau);\r\n            \r\n            if (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {\r\n                data.listeFiltres = angular.copy(this.listeFiltresClients);\r\n                data.listeIndicateursFiltre = angular.copy(this.listeIndicateursFiltre);\r\n                data.estVueClient = true;\r\n            } else {\r\n                data.listeFiltres = angular.copy(this.listeFiltresRelationEco);\r\n                data.listeIndicateursFiltre = angular.copy(this.listeIndicateursRelationEcoFiltre);\r\n                data.estVueClient = false;\r\n            }\r\n\r\n            let templateDatas = <Modeles.Application.IPopupData<any>>{};\r\n            templateDatas.model = data;\r\n\r\n            this.popupService.showModalFull(\r\n                \"vues/template-modale/modale-filtre-vue.html\",\r\n                \"ModaleFiltreControleur\",\r\n                templateDatas)\r\n                .then((donneesDeSortie: Modeles.Application.IDonneesEntreeSortiePopupFiltres) => {\r\n                if (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {\r\n                    this.filtreService.setFiltresClients(donneesDeSortie.listeFiltres);\r\n                } else {\r\n                    this.filtreService.setFiltresRelationsEco(donneesDeSortie.listeFiltres);\r\n                }\r\n                // ajoute une action remarquable\r\n                this.contexteService.tracerSuiviAction(ClientsControleur.logger, Constantes.ActionsRemarquables.BTN_FILTRES);\r\n                this.majFiltres();\r\n            });\r\n\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de mettre à jour un tableau suite à une modification de filtre\r\n         * @param {Array<Modeles.Application.IIndicateurFiltre>} listeIndicateursFiltre\r\n         * @returns {void}\r\n         */\r\n        //private majTableauSuiteModificationFiltre(listeFiltres: Array<Modeles.Application.IFiltre>, listeIndicateursFiltre: Array<Modeles.Application.IIndicateurFiltre>): void {\r\n        private majTableauSuiteModificationFiltre(listeIndicateursFiltre: Array<Modeles.Application.IIndicateurFiltre>): void {\r\n            this.chargementEnCours = true;\r\n            \r\n            if (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS) { // traitement vue clients\r\n                //this.listeFiltresClients = listeFiltres;\r\n                this.listeIndicateursFiltre = listeIndicateursFiltre;\r\n                this.listeClientsAAfficher = this.listeClients;\r\n                if (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS && (this.choixRelationEco && this.choixRelationEco.id !== \"\")) {\r\n                    this.listeClientsAAfficher = this.listeClientsFiltre;\r\n                }\r\n\r\n                if (this.listeFiltresClients.length > 0) {\r\n                    this.listeClientsAAfficher = this.filtreService.filtrerListeClients(this.listeClientsAAfficher, this.listeFiltresClients);\r\n                }\r\n                // Si on est en train de regarder les client d'un portefeuille expert (SPC), on n'affiche pas la conlonne \"nb personnes relation\"\r\n                const avecColonneNbClientRelation = this.portefeuilleService.aPortefeuilleExpertAffiche() ? false : true;\r\n                this.tableauClients = new Modeles.Tableaux.TableauClient(this, this, this.$filter, this.$parse, this.listeClientsAAfficher, this.listeIndicateursTableau, avecColonneNbClientRelation);\r\n\r\n            } else { // traitement vue relations eco\r\n                //this.listeFiltresRelationEco = listeFiltres;\r\n                this.listeIndicateursRelationEcoFiltre = listeIndicateursFiltre;\r\n                this.listeRelationEcoAAfficher = this.listeRelationEco;\r\n                if (this.listeFiltresRelationEco.length > 0) {\r\n                    this.listeRelationEcoAAfficher = this.filtreService.filtrerListeRelationsEco(this.listeRelationEcoAAfficher, this.listeFiltresRelationEco);\r\n                }\r\n                this.tableauRelations = new Modeles.Tableaux.TableauRelation(this, this, this.$filter, this.$parse, this.listeRelationEcoAAfficher, this.listeIndicateursTableau);\r\n            }\r\n\r\n            angular.element(document.querySelector(\"#\" + this.definirIndentifiantTableauEnCours())).ready(() => {\r\n                this.chargementEnCours = false;\r\n                this.$scope.$applyAsync();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet d'aller à la page de gestion des indicateurs\r\n         * @returns {void}\r\n         */\r\n        public accederAuxIndicateursV2(): void {\r\n            // ajoute une action remarquable\r\n            this.contexteService.tracerSuiviAction(ClientsControleur.logger, Constantes.ActionsRemarquables.BTN_PANIER);\r\n\r\n            this.$location.path(Constantes.Url.SELECTION_INDICATEURS);\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet d'ouvrir la modale de forcage\r\n         * @returns {void}\r\n         */\r\n        private accederForcage(): ng.IPromise<void> {\r\n            return this.popupService.showModalMd(\"vues/template-modale/modale-avertissement-choix-portefeuille-vue.html\", \"ModaleAvertissementChoixPortefeuilleControleur\", null\r\n            ).then((retourPopup: Portefeuille.Controleurs.IRetourModaleAvertissement) => {\r\n                if (retourPopup) {\r\n                    this.listeClientsService.setAffichageModificationChoix(retourPopup.nombreBoutonsAffiches > 1);\r\n\r\n                    if (retourPopup.typeForcage !== Enum.PageClients.TYPE_FORCAGE.SANS) {\r\n                        //La limite du nombre de clients pour un portefeuille est atteinte (350 max à ce jour)\r\n                        if (this.listeClientsService.getEstLimiteClientsAtteinte()) {\r\n                            this.messageLimiteClientsAtteinte = this.valoriserMessageLimiteClientsAtteinte(retourPopup.typeForcage);\r\n                        }\r\n\r\n                        if (this.portefeuilleService.getTypeForcage() !== retourPopup.typeForcage) {\r\n                            this.listeClientsService.razRelations();\r\n                        }\r\n\r\n                        this.portefeuilleService.setTypeForcage(retourPopup.typeForcage);\r\n                        return this.initialiser(retourPopup.typeForcage);\r\n                    } else {\r\n                        return this.eventService.ouvrirVoletChoixPortefeuilleIndexControleur();\r\n                    }\r\n                } else {\r\n                    this.listeClientsService.initialiserEstLimiteClientsAtteinte(null);\r\n                    return this.eventService.ouvrirVoletChoixPortefeuilleIndexControleur();\r\n                }\r\n            });\r\n        }\r\n\r\n        public afficherLigneRelationEco(): boolean {\r\n            return (!this.chargementEnCours && this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS && (this.choixRelationEco && this.choixRelationEco.id !== \"\"));\r\n        }\r\n\r\n        public afficherTableauRelation(): boolean {\r\n            return (!this.chargementEnCours && this.typeVue === Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE);\r\n        }\r\n\r\n        public afficherTableauClients(): boolean {\r\n            return (!this.chargementEnCours && this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS);\r\n        }\r\n\r\n        public estVueClients(): boolean {\r\n            return this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS;\r\n        }\r\n\r\n        public estVueRelationEco(): boolean {\r\n            return this.typeVue === Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE;\r\n        }\r\n\r\n        public estAfficheBtnRetour(): boolean {\r\n            return this.choixRelationEco && this.choixRelationEco.id !== \"\";\r\n        }\r\n\r\n        /** Indique si le bouton \"Effectuer la revue\" est visible ou non (true => visible) */\r\n        public estAfficheBtnEffectuerRevue(): boolean {\r\n            //Le bouton \"Effectuer la revue\" n'est visible que sur les vues clients et si l'habilitation est ok\r\n            return this.typeVue !== Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE && this.estHabiliteMajRevue && this.estHabiliteConsultRevue && this.portefeuilleService.aPortefeuillesReelAffiche();\r\n        }\r\n\r\n        /**\r\n         * Indique si le bouton consulter les produit est visible\r\n         */\r\n        public estAfficheBtnVoirProduits(): boolean {\r\n            //Le bouton \"Consulter les produits\" n'est visible que sur les vues relation eco detail et si l'habilitation est ok\r\n            // Ajout limitation si on est en train de regarder de portefeuilles Expert (SPC)\r\n            return (this.afficherLigneRelationEco() && this.estHabiliteConsultRevue) || (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS);\r\n        }\r\n\r\n        // le bouton Exporter n'est visible que en Vue Clients (pas en Relations éco ni en détail de relation éco)\r\n        public estAfficheBtnExporter(): boolean {\r\n            return this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS ||\r\n                    (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE && (this.choixRelationEco && this.choixRelationEco.id !== \"\"));\r\n        }\r\n\r\n        public estAfficherBoutonSynthese(): boolean {\r\n            return this.typeVue !== Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE;\r\n        }\r\n\r\n        public estDisabledBoutonVoirProduits(): boolean {\r\n            if (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {\r\n                if (this.choixRelationEco && this.choixRelationEco.id) {\r\n                    return false;\r\n                } else {\r\n                    return !this.accessibiliteBoutonVoirProduitsPourClient;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        /** Indique si le bouton \"Effectuer la revue\" est actif ou non (true => inactif) */\r\n        public estDisabledBtnEffectuerRevue(): boolean {\r\n            let resultat: boolean = true; //Par défaut le bouton est inactif.\r\n\r\n            if (this.tableauClients && this.tableauClients.selectedItems && this.tableauClients.selectedItems.length > 0) {\r\n                //Une ligne doit être sélectionnée pour que l'on envisage d'activer le bouton \"Effectuer la revue\"\r\n                resultat = this.typeVue !== Enum.PageClients.TYPE_VUE.VUE_CLIENTS;\r\n            }\r\n\r\n            return resultat;\r\n        }\r\n\r\n        public getTitreVue(): string {\r\n            if (this.estVueClients()) {\r\n                return Constantes.Application.TITRE_VUE_CLIENT;\r\n            } else {\r\n                return Constantes.Application.TITRE_VUE_RELATION;\r\n            }\r\n        }\r\n\r\n        public getNomPanier(): string {\r\n            if (this.panierDefaut) {\r\n                return this.panierDefaut.nom ? `${Constantes.Application.CHAINE_NOM_PANIER_INDICATEUR}: \"${this.panierDefaut.nom}\"` : Constantes.Application.CHAINE_NOM_PANIER_INDICATEUR;\r\n            } else {\r\n                return \"\";\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode pour récupérer le texte sur le ratio client ou relation disponible suite à filtrage\r\n         * @returns {string}\r\n         */\r\n        public getTxtRatioFiltrage(): string {\r\n            if (this.estVueClients()) {\r\n                let typeForcage = this.portefeuilleService.getTypeForcage();\r\n                if (typeForcage && typeForcage === Enum.PageClients.TYPE_FORCAGE.CLIENTS) {\r\n                    return `Nb clients / prospects: ${this.nbClientsRelationsFiltre()}/${this.nbClientsRelationsTotal()}`;\r\n                }\r\n\r\n                if (typeForcage && typeForcage === Enum.PageClients.TYPE_FORCAGE.PROSPECTS) {\r\n                    return `Nb prospects: ${this.nbClientsRelationsFiltre()}/${this.nbClientsRelationsTotal()}`;\r\n                }\r\n\r\n                return `Nb clients / prospects: ${this.nbClientsRelationsFiltre()}/${this.nbClientsRelationsTotal()}`;\r\n            } else {\r\n                return `Nb relations: ${this.nbClientsRelationsFiltre()}/${this.nbClientsRelationsTotal()}`;\r\n            }\r\n        }\r\n\r\n        public afficherLigneStatsEtTableau(): boolean {\r\n            if (!this.chargementEnCours && ((this.estVueClients() && this.tableauClients.data.length > 0) || (this.estVueRelationEco() && this.tableauRelations.data.length > 0))) {\r\n                if (this.estAvecFiltreColonne) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode pour récupérer le texte sur les index des éléments visibles sur la page du tableau client ou relation\r\n         * @returns {string}\r\n         */\r\n        public getTxtEtatPagination(): string {\r\n            if (!this.chargementEnCours && this.tableauClients) {\r\n                let indexDebut: number;\r\n                let indexFin: number;\r\n                if (this.estVueClients()) {\r\n                    let typeForcage = this.portefeuilleService.getTypeForcage();\r\n                    indexDebut = (this.tableauClients.perPage * this.pageActuelle) - this.tableauClients.perPage + 1;\r\n                    indexFin = this.tableauClients.perPage * this.pageActuelle;\r\n                    if (indexFin > this.tableauClients.data.length) {\r\n                        indexFin = this.tableauClients.data.length;\r\n                    }\r\n\r\n                    if (typeForcage && typeForcage === Enum.PageClients.TYPE_FORCAGE.CLIENTS) {\r\n                        return `Clients ${indexDebut} à ${indexFin} sur ${this.tableauClients.data.length}`;\r\n                    }\r\n\r\n                    if (typeForcage && typeForcage === Enum.PageClients.TYPE_FORCAGE.PROSPECTS) {\r\n                        return `Prospects ${indexDebut} à ${indexFin} sur ${this.tableauClients.data.length}`;\r\n                    }\r\n\r\n                    return `Clients / Prospects ${indexDebut} à ${indexFin} sur ${this.tableauClients.data.length}`;\r\n                } else {\r\n                    indexDebut = (this.tableauRelations.perPage * this.pageActuelle) - this.tableauRelations.perPage + 1;\r\n                    indexFin = this.tableauRelations.perPage * this.pageActuelle;\r\n                    if (indexFin > this.tableauRelations.data.length) {\r\n                        indexFin = this.tableauRelations.data.length;\r\n                    }\r\n                    return `Relations ${indexDebut} à ${indexFin} sur ${this.tableauRelations.data.length}`;\r\n                }\r\n            } else {\r\n                return \"\";\r\n            }\r\n        }\r\n\r\n        /**\r\n         * récupération de la page courante depuis IMwTableHandler \r\n         * @param currentPage\r\n         */\r\n        public onPageChange(currentPage: number): void {\r\n            this.pageActuelle = currentPage;\r\n            this.$window.scrollTo(0, 0);   \r\n        }\r\n\r\n        /**\r\n         * Fonction appelé lors du changement du filtre tableau\r\n         * @param search\r\n         */\r\n        //public onFilterChange(search: any): void {\r\n        //    if (search.nom !== \"\") {\r\n        //        this.estAvecFiltreColonne = true;\r\n        //    } else {\r\n        //        this.estAvecFiltreColonne = false;\r\n        //    }\r\n        //}\r\n\r\n        /**\r\n         * Fonction appelé lors de l'affichage de la vue relation eco\r\n         */\r\n        public affichageVueRelationEco(): void {\r\n            this.accessibiliteBoutonVoirProduitsPourClient = false;\r\n\r\n            this.typeVue = Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE;\r\n            this.ihmService.setTypeVue(Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE);\r\n            this.estAvecFiltreColonne = false;\r\n            //this.listeFiltres = this.listeFiltresRelationEco;\r\n            this.tableauRelations = new Modeles.Tableaux.TableauRelation(this, this, this.$filter, this.$parse, this.listeRelationEcoAAfficher, this.listeIndicateursTableau);\r\n            this.majFiltres();\r\n        }\r\n\r\n        /**\r\n         * Fonction appelé lors de l'affichage de la vue clients\r\n         */\r\n        public affichageVueClient(): void {\r\n            this.accessibiliteBoutonVoirProduitsPourClient = false;\r\n\r\n            this.typeVue = Enum.PageClients.TYPE_VUE.VUE_CLIENTS;\r\n            this.ihmService.setTypeVue(Enum.PageClients.TYPE_VUE.VUE_CLIENTS);\r\n            this.estAvecFiltreColonne = false;\r\n            //this.listeFiltres = this.listeFiltresClients;\r\n            this.filtrageTableauClient(\"\");\r\n            this.majFiltres();\r\n        }\r\n\r\n        /**\r\n         * Methode qui retourne le nombre de clients/relations totales affichés\r\n         * @returns {number}\r\n         */\r\n        public nbClientsRelationsTotal(): number {\r\n            if (!this.chargementEnCours) {\r\n                if (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {\r\n                    return this.afficherLigneRelationEco() ? this.listeClientsFiltre.length : this.listeClients.length;\r\n                } else {\r\n                    return this.listeRelationEco.length;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Methode qui retourne le nombre de clients/relations filtres\r\n         * @returns {number}\r\n         */\r\n        public nbClientsRelationsFiltre(): number {\r\n            if (!this.chargementEnCours) {\r\n                if (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {\r\n                    return this.listeClientsAAfficher.length;\r\n                } else {\r\n                    return this.listeRelationEcoAAfficher.length;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de savoir si on affiche ou non l'icone de filtre actif\r\n         * @returns {boolean}\r\n         */\r\n        public afficherFiltreActif(): boolean {\r\n            if (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {\r\n                return this.listeFiltresClients ? this.listeFiltresClients.length > 0 : false;\r\n            } else {\r\n                return this.listeFiltresRelationEco ? this.listeFiltresRelationEco.length > 0 : false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de savoir si on est en forcage clients ou prospects\r\n         * @returns {boolean}\r\n         */\r\n        public estEnForcageTypeClientsOuProspects(): boolean {\r\n            return this.portefeuilleService.getTypeForcage() === Enum.PageClients.TYPE_FORCAGE.CLIENTS\r\n                || this.portefeuilleService.getTypeForcage() === Enum.PageClients.TYPE_FORCAGE.PROSPECTS;\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de savoir si on est en forcage tout\r\n         * @returns {boolean}\r\n         */\r\n        public estEnForcageTypeTout(): boolean {\r\n            return this.portefeuilleService.getTypeForcage() === Enum.PageClients.TYPE_FORCAGE.TOUT;\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de revenir sur la vue relation économique\r\n         * @returns {void}\r\n         */\r\n        public retourVueRelEco(): void {\r\n            this.choixRelationEco = null;\r\n            this.affichageVueRelationEco();\r\n            this.miseAJourTableauAvecContexteRel();\r\n        }\r\n\r\n        /** Méthode permettant de retourner à la page d'accueil (càd page des stats, des graphes,...) */\r\n        public retourAccueil(): void {\r\n            this.contexteService.recupererRetourDebranchement(\r\n            ).then((resultatPromesse: Modeles.Application.IContexteGererPortefeuille) => {\r\n\r\n                if (resultatPromesse) {\r\n                    let contexteMisAJour: Modeles.Application.IContexteGererPortefeuille;\r\n\r\n                    //1°) On ne conserve que objeVisu s'il est valorisé\r\n                    if (resultatPromesse.objetEdsVisu) {\r\n                        contexteMisAJour = <Modeles.Application.IContexteGererPortefeuille>{};\r\n                        contexteMisAJour.objetEdsVisu = angular.copy(resultatPromesse.objetEdsVisu);\r\n                        contexteMisAJour.objetEdsVisu.locationPath = Constantes.Url.PORTEFEUILLE;\r\n                    }\r\n\r\n                    //2°) On supprime les données contextuelles, puis on valorise les données contextuelles nécessaires à la gestion des portefeuilles\r\n                    this.contexteService.supprimerContexteDevenuInutile([Constantes.Contexte.CONTEXTE_VERS_REVUE, Constantes.Contexte.CONTEXTE_GERR_PORTF]\r\n                    ).then(() => {\r\n                        //this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteMisAJour\r\n                        this.serviceAgentExtended.addToContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteMisAJour\r\n                        ).catch((erreur: MyWay.Services.Erreur) => {\r\n                            ClientsControleur.logger.info(JSON.stringify(\">>retourAccueil<< Erreur lors de l'écriture du contexte de gestion des portefeuilles: \" + JSON.stringify(erreur)));\r\n                        });\r\n                    }).catch((erreur: MyWay.Services.Erreur) => {\r\n                        ClientsControleur.logger.info(JSON.stringify(\">>retourAccueil<< Erreur lors de la suppression du contexte de gestion des portefeuilles: \" + JSON.stringify(erreur)));\r\n                    });\r\n                } else {\r\n                    // On supprime les données contextuelles liée à la Revue\r\n                    this.contexteService.supprimerContexteDevenuInutile([Constantes.Contexte.CONTEXTE_VERS_REVUE]);\r\n                }\r\n            }).catch((erreur: MyWay.Services.Erreur) => {\r\n                ClientsControleur.logger.info(\">>retourAccueil<< Erreur lors de la récupération du contexte de gestion des portefeuilles: \" + JSON.stringify(erreur));\r\n            }).finally(() => {\r\n                // On va vers l'écran d'accueil\r\n                this.$location.path(Constantes.Url.PORTEFEUILLE);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'effectuer la revue (=> en fait on se débranche vers la saisie de la revue).\r\n         */\r\n        public effectuerRevue(): ng.IPromise<void> {\r\n            ClientsControleur.logger.info(\">>> Appel de la méthode : ClientsControleur.effectuerRevue <<<\");\r\n\r\n            let contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille = <Modeles.Application.IContexteGererPortefeuille>{};\r\n            contexteGererPortefeuille = this.construireContexte(true);\r\n            \r\n            return this.contexteService.ajouterDonneesDebranchementRevueClient(contexteGererPortefeuille)\r\n                .then(() => {\r\n                    // Gestion en vue du retour\r\n                    // ajoute une action remarquable\r\n                    this.contexteService.tracerSuiviAction(ClientsControleur.logger, Constantes.ActionsRemarquables.BTN_EFFC_REVUE);\r\n                    return this.lisaApplication.next(Constantes.CodeProcessusLisa.CODE_LISA_SAISIE_REVUE, null)\r\n                        .then(() => {\r\n                            // attention, en myway v2 on supprime trop tot ! c'est executé avant mm que la revue ne soit lancée !\r\n                            // il ne faut donc pas le faire ici\r\n                          //  this.contexteService.supprimerContexteDevenuInutile([Constantes.Contexte.CONTEXTE_VERS_REVUE]);\r\n\r\n                        })\r\n                        .catch((erreur: MyWay.Services.Erreur) => {\r\n                            ClientsControleur.logger.debug(\">>> Echec sur lisa.next de la méthode : ClientsControleur.effectuerRevue <<<\");\r\n                            this.popupService.showErreur(erreur);\r\n                        });\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Défini l'identifiant du tableau en cours d'utilisation\r\n         */\r\n        private definirIndentifiantTableauEnCours(): string {\r\n            let idTable: string = \"\";\r\n\r\n            // Récupère les selection utilisateur en identifiant la vue en cours\r\n            if (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS) {\r\n                idTable = Constantes.Tableau.ID_TABLE_CLIENT;\r\n            } else if (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE) {\r\n                idTable = Constantes.Tableau.ID_TABLE_RELATION;\r\n            }\r\n            return idTable;\r\n        }\r\n\r\n        /**\r\n         * Récuperation des information sur le tableau en cours pour les mettre en contexte\r\n         * @param contexteGererPortefeuille\r\n         */\r\n        private miseAJourContexteAvecTableau(contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille) {\r\n            let idTable: string = this.definirIndentifiantTableauEnCours();\r\n\r\n            if (idTable && idTable !== \"\") {\r\n                contexteGererPortefeuille.pagination = angular.copy(this.tableService.getPaginationState(idTable));\r\n                contexteGererPortefeuille.colonneTriee = angular.copy(this.tableService.getSortedColumn(idTable));\r\n                contexteGererPortefeuille.colonneFiltre = angular.copy(this.tableService.getFilterCriteria(idTable));\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Récuperation du contexte pour les appliquer au tableau en cours\r\n         * @param contexteGererPortefeuille\r\n         */\r\n        private miseAJourTableauAvecContexte(contexte: Modeles.Application.IContexteGererPortefeuille) {\r\n\r\n            // console.log(\"<<<< ClientsControleur miseAJourTableauAvecContexte : \", contexte);\r\n            let idTable: string = this.definirIndentifiantTableauEnCours();\r\n            let contexteGererPortefeuille = angular.copy(contexte);\r\n\r\n            if (idTable &&\r\n                idTable !== \"\") {\r\n                angular.element(document.querySelector(Constantes.Application.ID_TABLE_CLIENT)).ready(() => {\r\n                    this.$timeout(() => { \r\n                    this.tableService.setSortedColumn(idTable, contexteGererPortefeuille.colonneTriee);\r\n                    this.tableService.setFilterCriteria(idTable, contexteGererPortefeuille.colonneFiltre);\r\n                    this.tableService.setPaginationState(idTable, contexteGererPortefeuille.pagination);\r\n\r\n                    if (contexteGererPortefeuille.identifiantPersonneSelection) {\r\n                        if (idTable === Constantes.Tableau.ID_TABLE_RELATION) {\r\n                            this.tableService.setSelectedLines(idTable,\r\n                                _.filter(this.listeRelationEcoAAfficher,\r\n                                    (item: Modeles.Application.IRelationEconomique) =>\r\n                                        item.id === contexteGererPortefeuille.identifiantPersonneSelection.toString()));\r\n                        } else {\r\n                            this.tableService.setSelectedLines(idTable,\r\n                                _.filter(this.listeClientsAAfficher,\r\n                                    (item: Modeles.Application.IClient) =>\r\n                                        item.id === contexteGererPortefeuille.identifiantPersonneSelection.toString()));\r\n                        }\r\n                    }\r\n                        this.tableService.apply(idTable);\r\n                    }, 0);\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Contruire le contexte\r\n         * @param priseEnCompteSelection Permet de prendre en compte la selection dans le tableau client si celle-ci est selectionne\r\n         */\r\n        private construireContexte(priseEnCompteSelection: boolean): Modeles.Application.IContexteGererPortefeuille {\r\n            let contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille = <Modeles.Application.IContexteGererPortefeuille>{};\r\n           \r\n            // Garde la personne selectionné\r\n            if (this.tableauClients.selectedItems &&\r\n                this.tableauClients.selectedItems.length > 0 &&\r\n                this.tableauClients.selectedItems[0] &&\r\n                this.tableauClients.selectedItems[0].id) {\r\n                contexteGererPortefeuille.identifiantPersonneSelection = Number(this.tableauClients.selectedItems[0].id);\r\n            }\r\n\r\n            if (priseEnCompteSelection &&\r\n                contexteGererPortefeuille.identifiantPersonneSelection) {\r\n                //Selection d'un client et de la relation économique\r\n                contexteGererPortefeuille.identifiantPersonne = contexteGererPortefeuille.identifiantPersonneSelection;\r\n                contexteGererPortefeuille.estClient = this.tableauClients.selectedItems[0].estClient;\r\n                contexteGererPortefeuille.raisonSociale = this.tableauClients.selectedItems[0].nom;\r\n                contexteGererPortefeuille.siren = this.tableauClients.selectedItems[0].siren;\r\n\r\n                contexteGererPortefeuille.identifiantRelation = this.tableauClients.selectedItems[0].idRelationEconomique;\r\n                contexteGererPortefeuille.libelleRelation = this.tableauClients.selectedItems[0].nomRelationEconomique;\r\n            } else {\r\n                // Gestion cas portefeuille expert\r\n                if (this.portefeuilleService.aPortefeuilleExpertAffiche()) {\r\n                    contexteGererPortefeuille.identifiantRelation = Number(this.tableauClients.selectedItems[0].idRelationEconomique);\r\n                    contexteGererPortefeuille.libelleRelation = this.tableauClients.selectedItems[0].nomRelationEconomique;\r\n                } else {\r\n                    //Selection seulement la relation économique\r\n                    if (this.relationEcoPourConsultationProduits.id) {\r\n                        contexteGererPortefeuille.identifiantRelation = Number(this.relationEcoPourConsultationProduits.id);\r\n                    }\r\n                    contexteGererPortefeuille.libelleRelation = this.relationEcoPourConsultationProduits.nom;\r\n                }\r\n                \r\n            } \r\n\r\n            contexteGererPortefeuille.typeForcage = this.portefeuilleService.getTypeForcage().toString();\r\n            contexteGererPortefeuille.typeVue = this.radioBoutonEstVueClient;\r\n            // ajoute les données des filtres et de tri\r\n            contexteGererPortefeuille.filtres = this.listeFiltres;\r\n            contexteGererPortefeuille.filtresRelation = this.listeFiltresRelationEco;\r\n            contexteGererPortefeuille.objetEdsVisu = this.alimenterObjetEds();\r\n\r\n            let idTable: string = this.definirIndentifiantTableauEnCours();\r\n            // console.log(\"idTable : \", idTable);\r\n            let tableObserver = <MyWay.UI.MwTableControllerv1710>this.tableService.getMwTableObserver(idTable);\r\n            // récupère la liste des clients affichés ( avec filtres, tri etc ... )\r\n            // va être récupérée pour le popup de revue\r\n            if (tableObserver && tableObserver.sortedModel) {\r\n                // console.log(\"sortedModel : \", tableObserver.sortedModel);\r\n                contexteGererPortefeuille.listeClientAffiches = <Modeles.Application.IClient[]>tableObserver.sortedModel;\r\n            }\r\n            this.miseAJourContexteAvecTableau(contexteGererPortefeuille);\r\n            console.log(\"<<<< ClientsControleur construireContexte : \", contexteGererPortefeuille);\r\n            return contexteGererPortefeuille;\r\n        }\r\n\r\n        /**\r\n         * Contruire le contexte de relation : Ajout 11/07/2022\r\n         */\r\n        public construireContexteRel() {\r\n            this.contexteGererRelation = <Modeles.Application.IContexteGererRelation>{};\r\n            let idTable: string = Constantes.Tableau.ID_TABLE_RELATION;\r\n            this.contexteGererRelation.pagination = angular.copy(this.tableService.getPaginationState(idTable));\r\n            this.contexteGererRelation.colonneTriee = angular.copy(this.tableService.getSortedColumn(idTable));\r\n            this.contexteGererRelation.colonneFiltre = angular.copy(this.tableService.getFilterCriteria(idTable));\r\n            this.contexteGererRelation.selectedItems = this.tableauRelations.selectedItems;\r\n        }\r\n\r\n        /**\r\n         * Récuperation du contexte pour les appliquer au tableau relation\r\n         * @param contexteGererRelation\r\n         */\r\n        public miseAJourTableauAvecContexteRel() {\r\n            let idTable: string = Constantes.Tableau.ID_TABLE_RELATION;\r\n            if (this.contexteGererRelation.selectedItems) {\r\n                angular.element(document.querySelector(\"#\" + Constantes.Tableau.ID_TABLE_RELATION)).ready(() => {\r\n                    this.$timeout(() => {\r\n                        this.tableService.setSortedColumn(idTable, this.contexteGererRelation.colonneTriee);\r\n                        this.tableService.setFilterCriteria(idTable, this.contexteGererRelation.colonneFiltre);\r\n                        this.tableService.setPaginationState(idTable, this.contexteGererRelation.pagination);\r\n                        let selections: Modeles.Application.IRelationEconomique[] = angular.copy(this.contexteGererRelation.selectedItems);\r\n                        this.tableService.setSelectedLines(Constantes.Tableau.ID_TABLE_RELATION, selections);\r\n                        this.tableService.apply(idTable);\r\n                    }, 0);\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * typeSynthese : \r\n         * 1 – pour la synthèse part\r\n         * 2 – pour la synthèse PM\r\n         * 3 – pour la synthèse EI\r\n         * ici, pas de particulier\r\n         */\r\n        private getTypeSynthese(codePersonnaliteJuridique: string): string {\r\n            if (codePersonnaliteJuridique === Constantes.Rest.CODE_PERSONNALITE_JURIDIQUE_EI) {\r\n                return \"3\"; // pour synthese EI\r\n            }\r\n            if (codePersonnaliteJuridique === Constantes.Rest.CODE_PERSONNALITE_JURIDIQUE_PM) {\r\n                return \"2\"; // pour synthese PM\r\n            }\r\n            return null;\r\n        }\r\n\r\n        public accederSyntheseClient(): ng.IPromise<void> {\r\n            ClientsControleur.logger.info(\">>> Appel de la méthode : ClientsControleur.accederSyntheseClient <<<\");\r\n\r\n            let idPersonne: string = this.tableauClients.selectedItems[0].id;\r\n            let codePersonnaliteJuridique: string = null;\r\n            \r\n            for (var itemRelEco of this.listeRelationEco) {\r\n                for (var itemClient of itemRelEco.listeClients) {\r\n                    if (itemClient.id === idPersonne) {\r\n                        codePersonnaliteJuridique = itemClient.codePersonnaliteJuridique;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let typeSynthese: string;\r\n            typeSynthese = this.getTypeSynthese(codePersonnaliteJuridique);\r\n\r\n            return this.contexteService.ajoutPourDebranchementSyntheseClient(idPersonne, typeSynthese)\r\n                .then(() => {\r\n                    return this.contexteService.isPCM().then((isPCM: boolean) => {\r\n                    let sessionStore: Storage = sessionStorage;\r\n                    if (sessionStore.getItem(\"myway-portal-id\") !== null) {\r\n                        // portail Mysys (v2)\r\n                        console.log(\"--> XXXX portail Mysys: typeSynthese = \" + typeSynthese);\r\n\r\n                        //this.serviceAgentExtended.Interop.AfficherSynthese(this.tableauClients.selectedItems[0].id).then(() => {\r\n                        //    return this.$q.when(true);\r\n                        //});\r\n                        let contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille = <Modeles.Application.IContexteGererPortefeuille>{};\r\n                        contexteGererPortefeuille = this.construireContexte(true);\r\n\r\n                        return this.contexteService.ajouterDonneesDebranchementSyntheseClient(contexteGererPortefeuille, typeSynthese)\r\n                            .then(() => {\r\n                                // ajoute une action remarquable\r\n                                this.contexteService.tracerSuiviAction(ClientsControleur.logger, Constantes.ActionsRemarquables.BTN_SYNTH_PM);\r\n                                return this.lisaApplication.next(Constantes.CodeProcessusLisa.CODE_LISA_SYNTHESE_PM, \"\")\r\n                                    .then(() => { })\r\n                                    .catch((erreur: MyWay.Services.Erreur) => {\r\n                                        ClientsControleur.logger.debug(\">>> Echec sur lisa.next de la méthode : ClientsControleur.accederSyntheseClient <<<\");\r\n                                        this.popupService.showErreur(erreur);\r\n                                    });\r\n                            });\r\n                    } else if (isPCM) {\r\n                        console.log(\"--> XXXX PCM\");\r\n                        // PCM: débranche vers la synthèse mobilité via le LISA\r\n                        let contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille = <Modeles.Application.IContexteGererPortefeuille>{};\r\n                        contexteGererPortefeuille = this.construireContexte(true);\r\n\r\n                        return this.contexteService.ajouterDonneesDebranchementSyntheseClient(contexteGererPortefeuille, typeSynthese)\r\n                            .then(() => {\r\n                                // ajoute une action remarquable\r\n                                this.contexteService.tracerSuiviAction(ClientsControleur.logger, Constantes.ActionsRemarquables.BTN_SYNTH_PM);\r\n                                return this.lisaApplication.next(Constantes.CodeProcessusLisa.CODE_LISA_SYNTHESE_PM, \"\")\r\n                                    .then(() => {})\r\n                                    .catch((erreur: MyWay.Services.Erreur) => {\r\n                                        ClientsControleur.logger.debug(\">>> Echec sur lisa.next de la méthode : ClientsControleur.accederSyntheseClient <<<\");\r\n                                        this.popupService.showErreur(erreur);\r\n                                    });\r\n                            });\r\n                    } else {\r\n                        // portail Myway (v1)\r\n                        console.log(\"--> XXXX portail Myway\");\r\n                        return this.portailService.lancerSyntheseClient(Number(this.tableauClients.selectedItems[0].id));\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        \r\n        public exporter(): ng.IPromise<void> {\r\n            // on vérifie dans un premier temps qu'une génération n'est pas en cours\r\n            if (this.exportCSVEnCours === true) {\r\n                return;\r\n            }\r\n            this.exportCSVEnCours = true;\r\n            let columns: Array<any> = this.getColonnesExport(); \r\n            let colonnesReferencesBrut: Array<string> = _.pluck(columns, \"bind\");\r\n            let colonnesReferencesExport: Array<string> = this.getColonnesReferences(colonnesReferencesBrut);\r\n            let colonnesLibelles: Array<string> = _.pluck(columns, \"title\");\r\n\r\n            // ajoute la date du jour au nom du fichier\r\n            let dateJour = moment(new Date()).format(\"DDMMYYYY\");\r\n\r\n            // ajoute aussi le nom de l'eds das le nom du fichier \r\n            let objetEdsChoisi: Modeles.Application.IObjetEdsChoisi = this.alimenterObjetEds();\r\n            let nomAgent = (objetEdsChoisi && objetEdsChoisi.objCaractAgent) ? objetEdsChoisi.objCaractAgent.designationAgent : this.contexteService.getDesignation();\r\n\r\n            return this.getDonneesExport(nomAgent).then((donnees: Array<Object>) => {\r\n                let options: Services.Application.ICsvOptions = {\r\n                    header: colonnesLibelles,\r\n                    columnOrder: colonnesReferencesExport,\r\n                    filename: `${this.nomFichierExport} ${nomAgent} ${dateJour}`\r\n                };\r\n                console.log(\"donnees : \", donnees);\r\n                // Ancienne version de génération CSV\r\n                //let promiseDownloadCsv: ng.IPromise<any> = this.mwCsvService.downloadCsv(null, donnees, options);\r\n                let promiseDownloadCsv: ng.IPromise<void> = this.exportService.genererFichierExport(options.header, donnees, options.filename);\r\n                return promiseDownloadCsv.then(() => {\r\n                    this.exportCSVEnCours = false;\r\n                    // ajoute une action remarquable\r\n                    this.contexteService.tracerSuiviAction(ClientsControleur.logger, Constantes.ActionsRemarquables.BTN_EXPORT);\r\n                });\r\n            });\r\n        }\r\n\r\n        private colonneCsvClient: Array<any> = [\r\n            {\r\n                \"title\": \"Suivi Par\",\r\n                \"bind\": \"nomAgent\",\r\n                \"cssClass\": \"\"\r\n            }, {\r\n                \"title\": \"Identifiant Portefeuille\",\r\n                \"bind\": \"identifiantPortefeuille\",\r\n                \"cssClass\": \"\"\r\n            }, {\r\n                \"title\": \"Libellé Portefeuille\",\r\n                \"bind\": \"libellePortefeuille\",\r\n                \"cssClass\": \"\"\r\n            }, {\r\n                \"title\": \"Relation économique\",\r\n                \"bind\": \"nomRelationEconomique\",\r\n                \"cssClass\": \"\"\r\n            }, {\r\n                \"title\": \"Identifiant Personne\",\r\n                \"bind\": \"id\",\r\n                \"cssClass\": \"\"\r\n            }, {\r\n                \"title\": \"Raison Sociale\",\r\n                \"bind\": \"nom\",\r\n                \"cssClass\": \"\"\r\n            }, {\r\n                \"title\": \"Leader\",\r\n                \"bind\": \"estLeader\",\r\n                \"cssClass\": \"\"\r\n            }, {\r\n                \"title\": \"Prospect\",\r\n                \"bind\": \"estClient\",\r\n                \"cssClass\": \"\"\r\n            }, {\r\n                \"title\": \"Sans Contrat\",\r\n                \"bind\": \"estSansContrat\",\r\n                \"cssClass\": \"\"\r\n            }, {\r\n                \"title\": \"Actif\",\r\n                \"bind\": \"estActif\",\r\n                \"cssClass\": \"\"\r\n            }, {\r\n                \"title\": \"1er Équipement\",\r\n                \"bind\": \"premierEquipement\",\r\n                \"cssClass\": \"\"\r\n            }, {\r\n                \"title\": \"Nb Personnes Relation\",\r\n                \"bind\": \"nbPersonneRelation\",\r\n                \"cssClass\": \"\"\r\n            }];\r\n\r\n        /**\r\n         * \r\n         */\r\n        private getColonnesExport(): Array<any> {\r\n            let columns: Array<any> = angular.copy(this.colonneCsvClient);\r\n            this.tableauClients.columns.forEach((column: any) => {\r\n                // on ne prend pas en compte le premier equipement en tant qu'indicateur car il est déjà en tant que tag\r\n\r\n\r\n                if (column.bind !== \"nom\"\r\n                    && column.title.indexOf(Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT) === -1) {\r\n                    // transforme listeIndicateurs[14].valeurNumber en 14_valeurNumber\r\n                    let index = column.bind.substring(17, column.bind.indexOf(\"]\"));\r\n                    let props = column.bind.split(\".\");\r\n\r\n                    if (props.length > 1) {\r\n\r\n                        // pour les flux et le CA on ajoute en prefix \"k€\"\r\n                        // pour les Part en engagement on ajoue en prefix \"%\"\r\n                        let prefix: string = \"\";\r\n                        if (column.title.indexOf(\"Part de flux\") > -1) {\r\n                            prefix = \" (%)\";\r\n                        } else if (column.title.indexOf(\"Flux\") > -1) {\r\n                            prefix = \" (k€)\";\r\n                        } else if (column.title.indexOf(\"PNB \") > -1) {\r\n                            prefix = \" (€)\";\r\n                        } else if (column.title.indexOf(\"CA\") > -1) {\r\n                            prefix = \" (k€)\";\r\n                        } else if (column.title.indexOf(\"Encours BDF\") > -1) {\r\n                            prefix = \" (k€)\";\r\n                        } else if (column.title.indexOf(\"Part en engagement\") > -1) {\r\n                            prefix = \" (%)\";\r\n                        } else if (column.title.indexOf(\"Top CC\") > -1) {\r\n                            // pour Top CC : Le fichier exoprt doit afficher la valeur en texte \"Vert\", \"Rouge\"..... (bind par valeur)\r\n                            props[1] = \"valeur\";\r\n                        } else if (column.title.indexOf(\"Objectif de flux\") > -1) {\r\n                            prefix = \" (%)\";\r\n                        } \r\n\r\n                        columns.push({\r\n                            \"title\": column.title + prefix,\r\n                            \"bind\": index + \"_\" + props[1],\r\n                            \"cssClass\": \"\"\r\n                        });\r\n                        // ajout indicateur fictif pour CA  et CA-1 ( date de maj ). qui servira pour export excel.\r\n                        if (column.title.indexOf(\"CA\") > -1) {\r\n                            columns.push({\r\n                                \"title\": \"Date \" + column.title,\r\n                                \"bind\": index + \"_\" + \"dateMaj\",\r\n                                \"cssClass\": \"\"\r\n                            });\r\n                        }\r\n\r\n                    }\r\n                }\r\n            });           \r\n            console.log(\"columns : \", columns);\r\n\r\n            return columns;\r\n        }\r\n\r\n        private getColonnesReferences(colonnesReferencesNonTraitees: Array<string>): Array<string> {\r\n            let colonnesReferences: Array<string> = [];\r\n            _.forEach(colonnesReferencesNonTraitees, (colonne: string) => {\r\n                let detailsColonneComplexe: Array<string> = colonne.split(\".\");\r\n                colonnesReferences.push(detailsColonneComplexe[detailsColonneComplexe.length - 1]);\r\n            });\r\n            return colonnesReferences;\r\n        }\r\n\r\n        // permet de formater le tableau a utilisé pour exporter les donnees\r\n        // vers un fichier excel\r\n        private getDonneesExport(nomAgent: string): ng.IPromise<Array<Object>> {\r\n            let _tab: any[] = [];\r\n            \r\n            // recupérere les colonnes affichées et créé le format avec ca\r\n            let columns: Array<any> = this.getColonnesExport();\r\n            let _this = this;\r\n            \r\n            // parcours les clients, puis pour chaque client récupère chaque indicateur\r\n            this.listeClientsAAfficher.forEach(function (client: Modeles.Application.IClient) {\r\n                if (client) {\r\n\r\n                    console.log(\"--> export client : \",  client);\r\n\r\n                    let obj: any = {};\r\n\r\n                    // les 8 premieres infos sont sur le client\r\n                    obj.nomAgent = nomAgent;\r\n                    obj.identifiantPortefeuille = client.identifiantPortefeuille;\r\n                    obj.libellePortefeuille = client.libellePortefeuille;\r\n                    obj.nomRelationEconomique = client.nomRelationEconomique;\r\n                    obj.id = client.id;\r\n                    obj.nom = client.nom;\r\n                    obj.estLeader = _this.formatBoolean(client.estLeader);\r\n                    obj.estClient = _this.formatBoolean(!client.estClient);\r\n                    obj.estSansContrat = _this.formatBoolean(client.estSansContrat);\r\n                    obj.estActif = _this.formatBoolean(client.estActif);\r\n\r\n                    let indicateurPremierEquipement = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG });\r\n\r\n                    console.log(\"indicateurPremierEquipement : \", indicateurPremierEquipement);\r\n\r\n                    obj.premierEquipement = _this.gereTriHack(\"valeurDate\", indicateurPremierEquipement ? indicateurPremierEquipement.valeurDate : null);\r\n\r\n                    obj.nbPersonneRelation = client.nbPersonneRelation;\r\n\r\n                    // maintenant on va recupérer les indicateurs pour ce client\r\n                    let i = 0;\r\n                    let indiceIndicateurClient = 11; //this.colonneCsvClient.length - 1;\r\n                    columns.forEach(function (column: any) {\r\n                        // on exclut les indicateurs de type client\r\n                        if (i > indiceIndicateurClient) {\r\n                            // attention, ici le 10 correspond au nombre de colonnes.\r\n                            // y avait 9. avec nbPersonneRelation en plus : +1 --> 10\r\n                            let ps = column.bind.split(\"_\");\r\n                            if (ps.length > 0) {\r\n                                obj[column.bind] = _this.gereTriHack(ps[1], client.listeIndicateurs[ps[0]][ps[1]]);\r\n                                // cas particulier ajouté d'une colone dateMaj, sinon , c'est \"valeurNumber\"\r\n                                // bidouille\r\n                                if (ps[1] === \"dateMaj\") {\r\n                                    // la date est le champ dateMaj,le montant esst le champ valeurNumber\r\n                                    let valeur: any = client.listeIndicateurs[ps[0]][\"valeurNumber\"];\r\n                                    console.log(\"valeur : \", valeur);\r\n\r\n                                    if (valeur === null) { // si la valeur n'est pas renseignée, idem pour la date.\r\n                                        obj[column.bind] = \"NC\";\r\n                                    } else {\r\n                                        let maDate: Date = obj[column.bind];\r\n                                        // console.log(\"maDate : \", maDate);\r\n                                        let texte: string = moment(maDate).format(\"MM/YYYY\");\r\n                                        if (texte === \"Invalid date\") {\r\n                                            texte = \"NC\";\r\n                                        }\r\n                                        obj[column.bind] = \" \" + texte; // si on laisse MM/AAAAA, excel reforme à la lecture.\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        i++;\r\n                    });\r\n                    _tab.push(obj);\r\n                }\r\n            });\r\n            return this.$q.when(_tab);\r\n        }\r\n\r\n        // gère le hack du tri pour reformatter proprement la valeur (valueur Infinity pour les number etc)\r\n        private gereTriHack(type: string, valeur: any): any {\r\n            if (type === \"valeur\") {          // texte\r\n                let chaineTravail: string = <string>valeur;\r\n\r\n                if (chaineTravail.search(Constantes.Application.FIN_CHAINE_MAX) !== -1) {\r\n                    return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                }\r\n                return (valeur !== undefined && valeur !== null && valeur !== \"\") ? valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n\r\n            } else if (type === \"valeurDate\") {      // date @note on n'arrivera jamais en date car on passe par formatterDate()\r\n                const dateMin: Date = moment(Constantes.Application.DATE_MIN).toDate();\r\n                const dateMax: Date = moment(Constantes.Application.DATE_MAX).toDate();\r\n\r\n                if (valeur) {\r\n                    if (moment(valeur).isSame(dateMax)) {\r\n                        return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    }\r\n                    if (moment(valeur).isSame(dateMin)) {\r\n                        return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    }\r\n                    return moment(valeur).format(\"DD/MM/YYYY\");\r\n                } else {\r\n                    return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                }\r\n            } else if (type === \"valeurNumber\") {      // number\r\n                const nombreMin: number = Number.NEGATIVE_INFINITY;\r\n                const nombreMax: number = Number.POSITIVE_INFINITY;\r\n\r\n                if (valeur !== null\r\n                    && valeur !== undefined) {\r\n                    if (valeur === nombreMin\r\n                        || valeur === nombreMax) {\r\n                        return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    }\r\n                    // ici, remplacer le . par ,\r\n                    let texte: string = valeur.toString();\r\n                    texte = texte.replace(\".\", \",\");\r\n                    return texte;\r\n                } else {\r\n                    return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                }\r\n            }\r\n            \r\n            return valeur;\r\n        }\r\n\r\n        private formatBoolean(val: boolean): string {\r\n            return (val) ? \"Oui\" : \"\";\r\n        }\r\n\r\n        public formaterDate(date: any) {\r\n            let formatDate: any = \"\";\r\n            if (date !== null && angular.isDefined(date)\r\n                && date !== \"0001-01-01\"\r\n                && date !== \"9999-12-31\"\r\n                && date !== \"1970-01-01\") {\r\n                formatDate = moment(date).format(this.formatDate);\r\n            }\r\n            return formatDate;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de consulter les produits (=> en fait on se débranche vers l'affichage de la revue).\r\n         */\r\n        public consulterProduits(): ng.IPromise<void> {\r\n            ClientsControleur.logger.info(\">>> Appel de la méthode : ClientsControleur.consulterProduits <<<\");\r\n\r\n            let contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille = <Modeles.Application.IContexteGererPortefeuille>{};\r\n            contexteGererPortefeuille = this.construireContexte(false);\r\n\r\n            return this.contexteService.ajouterDonneesDebranchementBilanRevueRelationEco(contexteGererPortefeuille)\r\n                .then(() => {\r\n                    //Gestion en vue du retour\r\n                    // ajoute une action remarquable\r\n                    this.contexteService.tracerSuiviAction(ClientsControleur.logger, Constantes.ActionsRemarquables.BTN_CONS_PROD);\r\n\r\n                    return this.lisaApplication.next(Constantes.CodeProcessusLisa.CODE_LISA_BILAN_REVUE, Constantes.Url.BILAN_REVUE)\r\n                        .then(() => {})\r\n                        .catch((erreur: MyWay.Services.Erreur) => {\r\n                            ClientsControleur.logger.debug(\">>> Echec sur lisa.next de la méthode : ClientsControleur.consulterProduits <<<\");\r\n                            this.popupService.showErreur(erreur);\r\n                        });\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de supprimer tous les filtres\r\n         * @returns {void}\r\n         */\r\n        public supprimerTousLesFiltres(): void {\r\n            if (this.typeVue === Enum.PageClients.TYPE_VUE.VUE_CLIENTS) { // traitement vue clients\r\n                this.filtreService.razFiltresClient();\r\n            } else {\r\n                this.filtreService.razFiltresRelationEco();\r\n            }\r\n            this.majFiltres();\r\n        }\r\n\r\n        public controlerLimiteClientAtteinte(accesDepuisBlocRevue?: boolean): boolean {\r\n            let resultat: boolean = false;\r\n            resultat = this.portefeuilleService.getTypeForcage() !== Enum.PageClients.TYPE_FORCAGE.SANS\r\n                && this.messageLimiteClientsAtteinte\r\n                && this.listeClientsService.getEstLimiteClientsAtteinte()\r\n                && (\r\n                    (this.tableauClients && this.tableauClients.data && this.tableauClients.data.length > 0)\r\n                    || (this.tableauRelations && this.tableauRelations.data && this.tableauRelations.data.length > 0)\r\n                )\r\n                && !accesDepuisBlocRevue;\r\n            return resultat;\r\n        }\r\n\r\n        public ouvrirChoixForcage(): ng.IPromise<void> {\r\n            return this.accederForcage();\r\n        }\r\n\r\n        private valoriserMessageLimiteClientsAtteinte(typeForcage: Enum.PageClients.TYPE_FORCAGE): string {\r\n            let resultat: string = \"\";\r\n\r\n            if (typeForcage) {\r\n                switch (typeForcage) {\r\n                    case Enum.PageClients.TYPE_FORCAGE.CLIENTS:\r\n                        resultat = (this.portefeuilleService.getListePortefeuillesActifs().length === 1) ?\r\n                            Portefeuille.Constantes.Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_CLIENTS_SINGULIER : Portefeuille.Constantes.Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_CLIENTS_PLURIEL;\r\n                        resultat = resultat + \" \" + Portefeuille.Constantes.Application.LISTE_RELATIONS_ECONOMIQUES_INACCESSIBLE;\r\n                        break;\r\n                    case Enum.PageClients.TYPE_FORCAGE.PROSPECTS:\r\n                        resultat = (this.portefeuilleService.getListePortefeuillesActifs().length === 1) ?\r\n                            Portefeuille.Constantes.Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_PROSPECTS_SINGULIER : Portefeuille.Constantes.Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_PROSPECTS_PLURIEL;\r\n                        resultat = resultat + \" \" + Portefeuille.Constantes.Application.LISTE_RELATIONS_ECONOMIQUES_INACCESSIBLE;\r\n                        break;\r\n                    default:\r\n                        resultat = (this.portefeuilleService.getListePortefeuillesActifs().length === 1) ?\r\n                            Portefeuille.Constantes.Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_TOUT_SINGULIER : Portefeuille.Constantes.Application.LIMITE_CLIENTS_ATTEINTE_CHOIX_TOUT_PLURIEL;\r\n                        resultat = resultat + \" \" + Portefeuille.Constantes.Application.INDICATEURS_PREDEFINIS_NON_MODIFIABLES;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return resultat;\r\n        }\r\n\r\n        public afficherModifierChoix(): boolean {\r\n            return (this.listeClientsService.getAffichageModificationChoix());\r\n        }\r\n\r\n        private alimenterObjetEds(): Modeles.Application.IObjetEdsChoisi {\r\n            let resultat: Modeles.Application.IObjetEdsChoisi = <Modeles.Application.IObjetEdsChoisi>{};\r\n\r\n            resultat.objCaractAgent = this.portefeuilleService.getCaracteristiquesAgent();\r\n            resultat.listePtfVisu = _.pluck(this.portefeuilleService.getListePortefeuillesActifs(), \"id\");\r\n            resultat.typeForcage = this.portefeuilleService.getTypeForcage();\r\n            resultat.affichageModificationChoix = this.listeClientsService.getAffichageModificationChoix();\r\n            resultat.locationPath = Constantes.Url.CLIENTS;\r\n\r\n            return resultat;\r\n        }\r\n\r\n        /**\r\n         * Méthode appelée à chaque fois qu'un tri est demandé sur une des colonnes d'un tableau\r\n         * @param predicate\r\n         * @param reserve\r\n         */\r\n        public onSortChange(predicate: any, reserve: any): any {\r\n            let proprietes: string;\r\n\r\n            if (predicate) {\r\n                proprietes = predicate;\r\n                proprietes = proprietes.replace(\"[\", \".\");\r\n                proprietes = proprietes.replace(\"]\", \"\");\r\n\r\n                if (this.afficherTableauRelation() && this.tableauRelations && this.tableauRelations.data && this.tableauRelations.data.length > 0) {\r\n                    this.traiterTriDonneesListeTableaux(this.tableauRelations.data, proprietes, reserve);\r\n                }\r\n\r\n                if (this.afficherTableauClients() && this.tableauClients && this.tableauClients.data && this.tableauClients.data.length > 0) {\r\n                    this.traiterTriDonneesListeTableaux(this.tableauClients.data, proprietes, reserve);\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Gère le tri des données listeTableaux transmise en paramètre en appliquant systématiquement toute valeur à 'NC' en fin de tri.\r\n         * @param listeTableaux\r\n         * @param proprietes\r\n         * @param triEstDecroissant\r\n         */\r\n        private traiterTriDonneesListeTableaux(listeTableaux: Array<Object>, proprietes: string, triEstDecroissant: any): void {\r\n            let listeProprietesTri: Array<string>;\r\n            let sousObjet: any;\r\n            \r\n            if (proprietes && proprietes.length > 0 && listeTableaux && listeTableaux.length > 0) {\r\n                listeProprietesTri = proprietes.split(\".\");\r\n                sousObjet = angular.copy(listeTableaux[0]);\r\n                \r\n                _.forEach(listeProprietesTri, (proprieteLue: string) => {\r\n                    sousObjet = sousObjet[proprieteLue];\r\n\r\n                    if (proprieteLue === listeProprietesTri[listeProprietesTri.length - 1]) {\r\n                        if (typeof sousObjet === Constantes.Application.DONNEE_STRING) {\r\n                            //Détermination de la chaîne max\r\n                            this.valoriserChaineMaxPourComparaison(listeTableaux, proprietes);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                listeTableaux.sort((a: Object, b: Object) => {\r\n                    return this.analyserRecursifPourTriUnCritere(a, b, listeProprietesTri, 0, triEstDecroissant);\r\n                });\r\n\r\n                // resultat du tri :\r\n             //   console.log(listeTableaux);\r\n\r\n                // TODO le tri du tableau est OK mais il n'est pas pris en compte dans le tri. Voir comment on peut faire appliquer le tri sur valeur_sort\r\n                // voir si un comparator peut etre utilisé sur chaque colonne de type data, qui va comparer sa valeur en \"_sort\" au lieu de l'autre, et comparer la dessus\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Détermine la valeur de la plus grande chaîne (en termes de croissant - décroissant)\r\n         * @param listeDonnees\r\n         * @param proprietes\r\n         */\r\n        private valoriserChaineMaxPourComparaison(listeDonnees: Array<Object>, proprietes: string): void {\r\n            let chaineMaxTravail: string;\r\n            this.chaineMaxPourComparaison = \"\";\r\n\r\n            _.forEach(listeDonnees, (itemLu: Object) => {\r\n                this.determinerChaineMaxRecursif(itemLu, proprietes);\r\n            });\r\n\r\n            chaineMaxTravail = this.chaineMaxPourComparaison;\r\n            if (chaineMaxTravail.search(Constantes.Application.FIN_CHAINE_MAX) === -1) {\r\n                this.chaineMaxPourComparaison = chaineMaxTravail + Constantes.Application.FIN_CHAINE_MAX;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Balaye les propriétés d'un objet de façon récursive jusqu'à atteindre la dernière propriété (càd la plus profonde) indiquée dans le paramètre proprietesAExplorer\r\n         * @param objet\r\n         * @param proprietesAExplorer\r\n         */\r\n        private determinerChaineMaxRecursif(objet: Object, proprietesAExplorer: string): void {\r\n            if (proprietesAExplorer.search(\"\\\\.\") !== -1) {\r\n                this.determinerChaineMaxRecursif(objet[proprietesAExplorer.split(\".\")[0]], proprietesAExplorer.substr(proprietesAExplorer.search(\"\\\\.\") + 1));\r\n            } else if (!this.chaineMaxPourComparaison || objet[proprietesAExplorer] > this.chaineMaxPourComparaison) {\r\n                        this.chaineMaxPourComparaison = objet[proprietesAExplorer];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Tri récursif en se basant sur les propriétés données de 2 objets, et le sens du tri demandé.\r\n         * @param objetA\r\n         * @param objetB\r\n         * @param listeProprietes\r\n         * @param indicePropriete\r\n         * @param triEstDecroissant\r\n         */\r\n        private analyserRecursifPourTriUnCritere(objetA: Object, objetB: Object, listeProprietes: Array<string>, indicePropriete: number, triEstDecroissant: boolean): number {\r\n            const resultatAEgalB: number = 0;\r\n            const resultatASuperieurB: number = 1;\r\n            const resultatAInferieurB: number = -1;\r\n            let resultatComparaison: number = resultatAEgalB;\r\n            //Cas ou au moins un des deux objets passés en paramètre est null (ou undefined) => l'objet non défini sera considéré supérieur\r\n            if (!objetA || !objetB) {\r\n                if (!objetA && objetB) {\r\n                    resultatComparaison = resultatASuperieurB;\r\n                }\r\n\r\n                if (objetA && !objetB) {\r\n                    resultatComparaison = resultatAInferieurB;\r\n                }\r\n\r\n                //On ajuste la valeur du résultat à retourner selon le sens réel du tri.\r\n                resultatComparaison = (triEstDecroissant === false) ? resultatComparaison : resultatComparaison * (-1);\r\n\r\n                return resultatComparaison;\r\n            }\r\n\r\n            //Cas où tous les paramètres sont renseignés\r\n            if (objetA && objetB && listeProprietes && listeProprietes.length > 0 && indicePropriete >= 0) {\r\n\r\n                //On examine la dernière propriété qui est celle de plus bas niveau (bref, celle sur laquelle s'applique le tri) (valeur, valeurNumber, etc)\r\n                if (indicePropriete === listeProprietes.length - 1) {\r\n\r\n                    let propertyName: string = listeProprietes[indicePropriete];\r\n                    let propertyNameSort: string = propertyName; // + \"_sort\";\r\n                    \r\n                    if (typeof objetA[propertyName] === Constantes.Application.DONNEE_NUMBER || propertyName === Constantes.Application.DONNEE_VALEUR_NUMBER) {\r\n                        let nombreNC: number = this.valoriserNombreNCSelonSensTri(triEstDecroissant);\r\n\r\n                        // au début on se base sur la valeur existante, puis on ne travaillera ensuite que sur la valeur _sort\r\n                        var propACompare = (typeof objetA[propertyNameSort] !== \"undefined\") ? objetA[propertyNameSort] : objetA[propertyName];\r\n                        var propBCompare = (typeof objetB[propertyNameSort] !== \"undefined\") ? objetB[propertyNameSort] : objetB[propertyName];\r\n                        \r\n                        objetA[propertyNameSort] = this.valoriserProprieteNombreViaEquivalentNC(propACompare, nombreNC);\r\n                        objetB[propertyNameSort] = this.valoriserProprieteNombreViaEquivalentNC(propBCompare, nombreNC);\r\n                        \r\n                        resultatComparaison = this.comparerNumberANumberB(objetA[propertyNameSort], objetB[propertyNameSort], nombreNC);\r\n\r\n                    } else if (propertyName === Constantes.Application.DONNEE_VALEUR_DATE) {\r\n                        let dateNC: Date = this.valoriserDateNCSelonSensTri(triEstDecroissant);\r\n\r\n                        var propACompare = (typeof objetA[propertyNameSort] !== \"undefined\") ? objetA[propertyNameSort] : objetA[propertyName];\r\n                        var propBCompare = (typeof objetB[propertyNameSort] !== \"undefined\") ? objetB[propertyNameSort] : objetB[propertyName];\r\n\r\n                        objetA[propertyNameSort] = this.valoriserProprieteDateViaEquivalentNC(propACompare, dateNC);\r\n                        objetB[propertyNameSort] = this.valoriserProprieteDateViaEquivalentNC(propBCompare, dateNC);\r\n\r\n                        resultatComparaison = this.comparerDateADateB(objetA[propertyNameSort], objetB[propertyNameSort], dateNC);\r\n                    } else {\r\n                        let chaineNC: string = this.valoriserChaineNCSelonSensTri(triEstDecroissant);\r\n\r\n                        var propACompare = (typeof objetA[propertyNameSort] !== \"undefined\") ? objetA[propertyNameSort] : objetA[propertyName];\r\n                        var propBCompare = (typeof objetB[propertyNameSort] !== \"undefined\") ? objetB[propertyNameSort] : objetB[propertyName];\r\n\r\n                        objetA[propertyNameSort] = this.valoriserProprieteChaineViaEquivalentNC(propACompare, chaineNC);\r\n                        objetB[propertyNameSort] = this.valoriserProprieteChaineViaEquivalentNC(propBCompare, chaineNC);\r\n\r\n                        resultatComparaison = this.comparerStringAStringB(objetA[propertyNameSort], objetB[propertyNameSort]);\r\n                    }\r\n\r\n                    //On ajuste la valeur du résultat à retourner selon le sens réel du tri.\r\n                    resultatComparaison = (triEstDecroissant === false) ? resultatComparaison : resultatComparaison * (-1);\r\n\r\n                    return resultatComparaison;\r\n                }\r\n\r\n                return this.analyserRecursifPourTriUnCritere(objetA[listeProprietes[indicePropriete]], objetB[listeProprietes[indicePropriete]], listeProprietes, indicePropriete + 1, triEstDecroissant);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Détermine la valeur correspondant à l'affichage NC pour une chaîne selon le sens du tri \r\n         * (ex pour un tri croissant la valeur retournée correspondra à la plus petite chaîne possible; à savoir \"\")\r\n         * @param triEstDecroissant\r\n         */\r\n        private valoriserChaineNCSelonSensTri(triEstDecroissant: boolean): string {\r\n            const chaineMin: string = \"\";\r\n            const chaineMax: string = this.chaineMaxPourComparaison;\r\n            return (triEstDecroissant === false) ?\r\n                angular.copy(chaineMax) :\r\n                angular.copy(chaineMin);\r\n        }\r\n\r\n        /**\r\n         * Détermine la valeur correspondant à l'affichage NC pour un nombre selon le sens du tri \r\n         * (ex pour un tri croissant la valeur retournée correspondra à la plus petite valeur numérique possible; à savoir NEGATIVE_INFINITY)\r\n         * @param triEstDecroissant\r\n         */\r\n        private valoriserNombreNCSelonSensTri(triEstDecroissant: boolean): number {\r\n            return (triEstDecroissant === false) ?\r\n                Number.POSITIVE_INFINITY :\r\n                Number.NEGATIVE_INFINITY;\r\n        }\r\n\r\n        /**\r\n         * Détermine la valeur correspondant à l'affichage NC pour une date selon le sens du tri \r\n         * (ex pour un tri croissant la valeur retournée correspondra à la plus petite date possible; à savoir 01/01/1970)\r\n         * @param triEstDecroissant\r\n         */\r\n        private valoriserDateNCSelonSensTri(triEstDecroissant: boolean): Date {\r\n            return (triEstDecroissant === false) ?\r\n                angular.copy(this.dateMax) :\r\n                angular.copy(this.dateMin);\r\n        }\r\n\r\n        /**\r\n         * Détermine si la valeur initiale de la propriété de type chaîne doit être écrasée par la valeur correspondant à un affichage NC\r\n         * @param valeurInitialePropriete\r\n         * @param chaineNC\r\n         */\r\n        private valoriserProprieteChaineViaEquivalentNC(valeurInitialePropriete: string, chaineNC: string): string {\r\n            return (!valeurInitialePropriete ||\r\n                valeurInitialePropriete === Constantes.Application.CHAINE_INDICATEUR_NON_CONNU ||\r\n                valeurInitialePropriete === \"\" ||\r\n                valeurInitialePropriete === this.chaineMaxPourComparaison) ?\r\n                chaineNC :\r\n                valeurInitialePropriete;\r\n        }\r\n\r\n        /**\r\n         * Détermine si la valeur initiale de la propriété de type nombre doit être écrasée par la valeur correspondant à un affichage NC\r\n         * @param valeurInitialePropriete\r\n         * @param nombreNC\r\n         */\r\n        private valoriserProprieteNombreViaEquivalentNC(valeurInitialePropriete: number, nombreNC: number): number {\r\n            return (nombreNC !== null &&\r\n                nombreNC !== undefined &&\r\n                (valeurInitialePropriete === null ||\r\n                 valeurInitialePropriete === undefined ||\r\n                 valeurInitialePropriete === Number.NEGATIVE_INFINITY ||\r\n                 valeurInitialePropriete === Number.POSITIVE_INFINITY)) ?\r\n                nombreNC :\r\n                valeurInitialePropriete;\r\n        }\r\n\r\n        /**\r\n         * Détermine si la valeur initiale de la propriété de type date doit être écrasée par la valeur correspondant à un affichage NC\r\n         * @param valeurInitialePropriete\r\n         * @param dateNC\r\n         */\r\n        private valoriserProprieteDateViaEquivalentNC(valeurInitialePropriete: Date, dateNC: Date): Date {\r\n            return (dateNC &&\r\n                (!valeurInitialePropriete ||\r\n                moment(valeurInitialePropriete).isSame(this.dateMin) ||\r\n                moment(valeurInitialePropriete).isSame(this.dateMax))) ?\r\n                dateNC :\r\n                valeurInitialePropriete;\r\n        }\r\n\r\n        /**\r\n         * Compare 2 nombres et restitue le résultat de cette comparaison (0: A égal à B, 1: A supérieur à B, -1: A inférieur à B)\r\n         * @param nombreA\r\n         * @param nombreB\r\n         * @param nombreComparaison\r\n         */\r\n        private comparerNumberANumberB(nombreA: number, nombreB: number, nombreComparaison: number): number {\r\n            const resultatAEgalB: number = 0;\r\n            const resultatASuperieurB: number = 1;\r\n            const resultatAInferieurB: number = -1;\r\n\r\n            if (nombreA === undefined && nombreB === null) {\r\n                return resultatASuperieurB;\r\n            }\r\n\r\n            if (nombreA === null && nombreB === undefined) {\r\n                return resultatAInferieurB;\r\n            }\r\n\r\n            if (nombreA === null) {\r\n                nombreA = nombreComparaison;\r\n            }\r\n\r\n            if (nombreB === null) {\r\n                nombreB = nombreComparaison;\r\n            }\r\n\r\n            if (nombreA > nombreB) {\r\n                return resultatASuperieurB;\r\n            } else if (nombreA < nombreB) {\r\n                return resultatAInferieurB;\r\n            } else {\r\n                return resultatAEgalB;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Compare 2 dates et restitue le résultat de cette comparaison (0: A égal à B, 1: A supérieur à B, -1: A inférieur à B)\r\n         * @param dateA\r\n         * @param dateB\r\n         * @param dateComparaison\r\n         */\r\n        private comparerDateADateB(dateA: Date, dateB: Date, dateComparaison: Date): number {\r\n            const resultatAEgalB: number = 0;\r\n            const resultatASuperieurB: number = 1;\r\n            const resultatAInferieurB: number = -1;\r\n\r\n            if (dateA === undefined && dateB === null) {\r\n                return resultatASuperieurB;\r\n            }\r\n\r\n            if (dateA === null && dateB === undefined) {\r\n                return resultatAInferieurB;\r\n            }\r\n\r\n            if (!dateA) {\r\n                dateA = dateComparaison;\r\n            }\r\n\r\n            if (!dateB) {\r\n                dateB = dateComparaison;\r\n            }\r\n\r\n            if (moment(dateA).isAfter(dateB)) {\r\n                return resultatASuperieurB;\r\n            } else if (moment(dateA).isBefore(dateB)) {\r\n                return resultatAInferieurB;\r\n            } else {\r\n                return resultatAEgalB;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Compare 2 chaînes et restitue le résultat de cette comparaison (0: A égal à B, 1: A supérieur à B, -1: A inférieur à B)\r\n         * @param chaineA\r\n         * @param chaineB\r\n         */\r\n        private comparerStringAStringB(chaineA: string, chaineB: string): number {\r\n            const resultatAEgalB: number = 0;\r\n            const resultatASuperieurB: number = 1;\r\n            const resultatAInferieurB: number = -1;\r\n            let resultatComparaison: number = resultatAEgalB;\r\n\r\n            if (chaineA > chaineB) {\r\n                resultatComparaison = resultatASuperieurB;\r\n            } else if (chaineA < chaineB) {\r\n                resultatComparaison = resultatAInferieurB;\r\n            } \r\n            return resultatComparaison;\r\n        }\r\n\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(ClientsControleur.CLASS_NAME, ClientsControleur);\r\n}","/// <reference path=\"../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur de la page détail client\r\n * @module Portefeuille.Controleurs\r\n * @author S0078068 (Yannis VESSEREAU)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Controleur de l'index\r\n     */\r\n    export class DetailClientControleur {\r\n        public static CLASS_NAME = \"DetailClientControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(DetailClientControleur.CLASS_NAME);\r\n\r\n        // Proprietées\r\n\r\n        // Injection de dépendances \r\n        public static $inject: string[] = [];\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() {}\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"DetailClientControleur\", DetailClientControleur);\r\n}","/// <reference path=\"../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur de l'index\r\n * @module Portefeuille.Controleurs\r\n * @author S0078068 (Yannis VESSEREAU)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    let loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Controleur de l'index\r\n     */\r\n    export class IndexControleur {\r\n        public static CLASS_NAME = \"IndexControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(IndexControleur.CLASS_NAME);\r\n\r\n        // Proprietées\r\n        public edsChoisi: Modeles.Application.ICaracteristiquesAgent;\r\n        public titrePage: string;\r\n        public afficherHeader: boolean = false;\r\n        public messageAucunPortefeuille: string;\r\n        public chargementEnCours: boolean;\r\n        public estHabiliteChoixAgent: boolean;\r\n        public estHabiliteChoixEDS: boolean;\r\n        public messageErreurTechnique: string;\r\n        public aErreurTechnique: boolean;\r\n\r\n        public ouvertureVoletChoixPortefeuille: boolean;\r\n        public listePortefeuillesDropDown: Modeles.Application.IAgent[];\r\n        public listePortefeuilles: Modeles.Application.IPortefeuille[];\r\n        public estVueGlobalConsolide: boolean;\r\n        \r\n        // Injection de dépendances \r\n        public static $inject: string[] = [\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Angular.$location,\r\n            Constantes.Inject.Angular.$window,\r\n            Constantes.Inject.Services.lisaApplication,\r\n            Constantes.Inject.Services.contexteService,\r\n            Constantes.Inject.Services.portefeuilleService,\r\n            Constantes.Inject.Services.eventService,\r\n            Constantes.Inject.Services.popupService,\r\n            Constantes.Inject.Angular.$q,\r\n            Constantes.Inject.Services.listeClientsService,\r\n            Constantes.Inject.Services.choixUtilisateurService\r\n        ];\r\n\r\n        /**\r\n         * Constructeur\r\n         * @param $scope\r\n         * @param serviceAgentExtended\r\n         * @param $location\r\n         * @param lisaApplication\r\n         */\r\n        constructor(\r\n            private $scope: ng.IScope,\r\n            private $location: ng.ILocationService,\r\n            private $window: ng.IWindowService,\r\n            private lisaApplication: Portefeuille.Services.Application.ILisaApplication,\r\n            private contexteService: Services.Application.IContexteService,\r\n            private portefeuilleService: Services.Application.IPortefeuilleService,\r\n            private eventService: Services.Application.IEventService,\r\n            private popupService: Services.Application.IPopupService,\r\n            private $q: ng.IQService,\r\n            private listeClientsService: Services.Application.IListeClientsService,\r\n            private choixUtilisateurService: Services.Application.IChoixUtilisateurService\r\n        ) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        private initialiser(): void {\r\n            this.eventService.setIndexControleur(this);\r\n            this.chargementEnCours = true;\r\n            this.estHabiliteChoixAgent = false;\r\n            this.estHabiliteChoixEDS = false;\r\n            this.titrePage = Constantes.Application.TITRE_APPLICATION;\r\n            this.afficherHeader = true;\r\n            this.messageAucunPortefeuille = Constantes.Messages.MESSAGE_AUCUN_PORTEFEUILLE;\r\n            this.chargementEnCours = false;\r\n            this.aErreurTechnique = false;\r\n            this.messageErreurTechnique = Constantes.Messages.MESSAGE_ERREUR_TECHNIQUE;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param habilitation\r\n         */\r\n        public initialiserHabilitationChoixAgent(habilitation: boolean): void {\r\n            this.estHabiliteChoixAgent = habilitation;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param habilitation\r\n         */\r\n        public initialiserHabilitationChoixEDS(habilitation: boolean): void {\r\n            this.estHabiliteChoixEDS = habilitation;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public estVueMultiSuiviPar(): boolean {\r\n            return this.estVueGlobalConsolide;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public afficherPopupChoixAgent(): void {\r\n            this.afficherPopupEDS(<Portefeuille.Modeles.Application.IPopupData<string>>{\r\n                actionButtonText: null,\r\n                closeButtonText: null,\r\n                headerText: \"Changer d'agent\",\r\n                bodyText: null,\r\n                iconName: null,\r\n                model: Enum.Vue.TYPE_VUE.VUE_AGENT.toString()\r\n            });\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public afficherPopupChoixEds(): void {\r\n            this.afficherPopupEDS(<Portefeuille.Modeles.Application.IPopupData<string>>{\r\n                    actionButtonText: null,\r\n                    closeButtonText: null,\r\n                    headerText: \"Choisir l'EDS\",\r\n                    bodyText: null,\r\n                    iconName: null,\r\n                    model: Enum.Vue.TYPE_VUE.VUE_EDS.toString()\r\n            });\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param data\r\n         */\r\n        private afficherPopupEDS(data: Portefeuille.Modeles.Application.IPopupData<string>): void {\r\n            const templateChoixEds: string = \"vues/template-modale/modale-choix-eds-vue.html\";\r\n            const controleurChoixEds: string = \"ModaleChoixEdsControleur\";\r\n            let contexte: Modeles.Application.IContexte = <Modeles.Application.IContexte>{};\r\n            this.contexteService.getContexte().then((contexteRecu: Modeles.Application.IContexte) => {\r\n                let modalChoixEds: ng.IPromise<any> = (data.model === Enum.Vue.TYPE_VUE.VUE_EDS.toString()) ?\r\n                    this.popupService.showModalFull(templateChoixEds, controleurChoixEds, data) :\r\n                    this.popupService.showModalMd(templateChoixEds, controleurChoixEds, data);\r\n                return modalChoixEds.then((edsChoisi: Modeles.Application.ICaracteristiquesAgent) => {\r\n                    // ajoute une action remarquable\r\n                    this.contexteService.tracerSuiviAction(IndexControleur.logger, Constantes.ActionsRemarquables.BTN_CHANGER_AGENT);\r\n                    this.estVueGlobalConsolide = (data.model === Enum.Vue.TYPE_VUE.VUE_EDS.toString());\r\n                    this.eventService.setEstVueMultiGererPar(this.estVueGlobalConsolide);\r\n                    this.chargementEnCours = true;\r\n                    this.$window.scrollTo(0, 0);\r\n                    return this.majDonneesDonneesEds(edsChoisi, contexte, null).then(() => {\r\n                        this.$location.path(Constantes.Url.PORTEFEUILLE);\r\n                        this.chargementEnCours = false;\r\n                        return this.$q.when();\r\n                    });\r\n                });\r\n            }).catch((erreur: MyWay.Services.Erreur) => {\r\n                if (erreur) {\r\n                    IndexControleur.logger.error(\"Erreur de recherche de l'EDS\", erreur.codeLibelle, erreur.libelle);\r\n                    this.popupService.showErreur(erreur);\r\n                } else {\r\n                    IndexControleur.logger.error(\"Erreur de recherche de l'EDS\");\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param edsChoisi\r\n         * @param contexte\r\n         * @param listePtfActifs\r\n         */\r\n        public majDonneesDonneesEds(\r\n            edsChoisi: Modeles.Application.ICaracteristiquesAgent,\r\n            contexte: Modeles.Application.IContexte,\r\n            listePtfActifs: Array<number>): ng.IPromise<void> {\r\n            this.edsChoisi = edsChoisi;\r\n            //Defini si un changement de contexte à été effectue soit par :\r\n            //  - changement d'agent\r\n            //  - choix d'un EDS\r\n            if (edsChoisi &&\r\n                (edsChoisi.identifiantElementStructure !== contexte.edsVisu ||\r\n                this.estVueGlobalConsolide !== contexte.estVueMultiSuiviPar)) {\r\n                this.contexteService.setEdsVisu(edsChoisi.identifiantElementStructure);\r\n                this.contexteService.setestVueMultiSuiviPar(this.estVueGlobalConsolide);\r\n                this.listeClientsService.razRelations();\r\n                this.portefeuilleService.setCaracteristiquesAgent(edsChoisi);\r\n                this.portefeuilleService.setTypeForcage(Enum.PageClients.TYPE_FORCAGE.SANS);\r\n\r\n                if (this.estVueMultiSuiviPar()) {\r\n                    return this.portefeuilleService.\r\n                        getListePortefeuilleEDSChoisi(contexte.codeEtablissement, this.choixUtilisateurService.edsSelectionne.id).\r\n                        then((portefeuille: Modeles.Application.IPortefeuille[]) => {\r\n                        return this.integrerPortefeuilleActifs(portefeuille, listePtfActifs);\r\n                    });\r\n                } else {\r\n                    return this.portefeuilleService.\r\n                        getListePortefeuilleAgentChoisi(edsChoisi).\r\n                        then((portefeuille: Modeles.Application.IPortefeuille[]) => {\r\n                        return this.integrerPortefeuilleActifs(portefeuille, listePtfActifs);\r\n                    });\r\n                }\r\n            } else {\r\n                return this.$q.when();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param portefeuille\r\n         * @param listePtfActifs\r\n         */\r\n        private integrerPortefeuilleActifs(\r\n            portefeuille: Modeles.Application.IPortefeuille[],\r\n            listePtfActifs: Array<number>): ng.IPromise<void> {\r\n            console.log(\"indexControleur integrerPortefeuilleActifs listePtfActifs\", listePtfActifs);\r\n            this.listePortefeuilles = angular.copy(portefeuille);\r\n            this.$scope.$apply();\r\n            if (this.portefeuilleService.aPortefeuille()) {\r\n                if (listePtfActifs && listePtfActifs.length > 0) {\r\n                    this.portefeuilleService.setListePortefeuillesActifs(listePtfActifs);\r\n                    this.listePortefeuilles = this.portefeuilleService.getListePortefeuillesVisu();\r\n                }\r\n                if (this.portefeuilleService.aPortefeuille() && \r\n                    (!this.portefeuilleService.aPortefeuillesAffiche() ||\r\n                    this.estVueGlobalConsolide)) {\r\n                    // si on l'agent a des portefeuilles mais qu'aucun n'est coché, \r\n                    // on ouvre automatiquement le volet pour choisir les portefeuilles à afficher\r\n                    // ou que nous somme en vue EDS\r\n                    this.chargerListePortefeilleDropDown();\r\n                    this.ouvertureVoletChoixPortefeuille = true;\r\n                    this.eventService.reinitInitStatsVueGlobale();\r\n                }\r\n                if (this.portefeuilleService.aPortefeuillesAffiche()) {\r\n                    this.chargerListePortefeilleDropDown();\r\n                    this.eventService.reinitInitStatsVueGlobale(); \r\n                    return this.eventService.initialiserVueGlobale();\r\n                }\r\n                return this.$q.when();\r\n            } else {\r\n                this.eventService.reinitInitStatsVueGlobale();\r\n            }\r\n            return this.$q.when();\r\n        }\r\n\r\n        /**\r\n         * Permet de retourner le sous-titre\r\n         * @return {string}\r\n         */\r\n        public getSousTitrePage(): string {\r\n            let listePortefeuilles: Array<Modeles.Application.IPortefeuille> = this.portefeuilleService.getListePortefeuillesVisu();\r\n            let listePortefeuillesActifs = this.portefeuilleService.getListePortefeuillesActifs();\r\n            let libellePortefeuille = \"\";\r\n\r\n            if (this.estVueGlobalConsolide) {\r\n                let nblisteAgent: number = _.uniq(listePortefeuillesActifs, \"idAgent\").length;\r\n                let nblisteAgentTotal: number = _.uniq(listePortefeuilles, \"idAgent\").length;\r\n                let pluriel = (nblisteAgent > 1) ? \"s\" : \"\"; \r\n                let nomEds = (this.choixUtilisateurService &&\r\n                    this.choixUtilisateurService.edsSelectionne &&\r\n                    this.choixUtilisateurService.edsSelectionne.nomEds) ?\r\n                    this.choixUtilisateurService.edsSelectionne.nomEds : \"\";\r\n                libellePortefeuille = ` / ${nblisteAgent} collaborateur${pluriel} selectionné${pluriel} sur ${nblisteAgentTotal}`;\r\n                return nomEds + libellePortefeuille;\r\n            } else {\r\n                let designationAgent = this.edsChoisi ? this.edsChoisi.designationAgent : this.contexteService.getDesignation();\r\n                if (listePortefeuilles.length > 0) {\r\n                    let pluriel = (listePortefeuillesActifs.length > 1) ? \"s\" : \"\";\r\n                    libellePortefeuille = ` / ${listePortefeuillesActifs.length} portefeuille${pluriel} sélectionné${pluriel} sur ${listePortefeuilles.length}`;\r\n                    if (listePortefeuillesActifs.length === 1) {\r\n                        libellePortefeuille = libellePortefeuille + ` (${listePortefeuillesActifs[0].libelle})`;\r\n                    }\r\n                }\r\n                return \"SUIVI PAR \" + designationAgent + libellePortefeuille;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Charger la listePorteFeuilleDropDown\r\n         */\r\n        public chargerListePortefeilleDropDown(): void {\r\n            this.listePortefeuillesDropDown = this.portefeuilleService.regrouperPortfeuilleParAgent(this.listePortefeuilles);\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public initListePortefeuilles(): ng.IPromise<void> {\r\n            this.chargementEnCours = true;\r\n            let defer = this.$q.defer();\r\n            if (!this.listePortefeuilles) {\r\n                return this.portefeuilleService.getListePortefeuilleAgentConnecte().then((res: Modeles.Application.IPortefeuille[]) => {\r\n                    this.listePortefeuilles = angular.copy(res);\r\n                    this.chargerListePortefeilleDropDown();\r\n                    this.chargementEnCours = false;\r\n                    if (this.portefeuilleService.aPortefeuillesAffiche()) {\r\n                        this.$location.path(Constantes.Url.PORTEFEUILLE);\r\n                    } else {\r\n                    }\r\n                }).catch((error: MyWay.Services.Erreur) => {\r\n                    defer.reject();\r\n                    this.popupService.showErreur(error);\r\n                    this.aErreurTechnique = true;\r\n                    this.chargementEnCours = false;\r\n                });\r\n            } else {\r\n                this.chargerListePortefeilleDropDown();\r\n                this.chargementEnCours = false;\r\n                return this.$q.when();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Permet d'ouvrir le choix de portefeuille\r\n         * @return {void}\r\n         */\r\n        public ouvrirChoixPortefeuille(): void {\r\n            this.ouvertureVoletChoixPortefeuille = true;\r\n        }\r\n\r\n        /**\r\n         * Fermeture de l'application\r\n         */\r\n        public quitter(): void {\r\n            IndexControleur.logger.info(\">>> Appel de la méthode : IndexControleur.quitter() <<<\");\r\n\r\n            let listeContexteASupprimer: Array<string> = [Constantes.Contexte.CONTEXTE_GERR_PORTF];\r\n            this.contexteService.supprimerContexteDevenuInutile(listeContexteASupprimer).then(() => {\r\n                IndexControleur.logger.info(\"Suppression du contexte => OK\");\r\n            }).catch(() => {\r\n                IndexControleur.logger.error(\"Suppression du contexte => KO\");\r\n            }).finally(() => {\r\n                this.lisaApplication.next(Constantes.CodeProcessusLisa.CODE_LISA_SORTIE, \"\");\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe IndexControleur\r\n     */\r\n    export interface IIndexControleur {\r\n        chargerListePortefeilleDropDown(): void;\r\n        initListePortefeuilles(): ng.IPromise<void>;\r\n    }\r\n\r\n    app.controller(IndexControleur.CLASS_NAME, IndexControleur);\r\n}","/// <reference path=\"../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur de la page portefeuille\r\n * @module Portefeuille.Controleurs\r\n * @author S0078068 (Yannis VESSEREAU)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Controleur de l'index\r\n     */\r\n    export class PortefeuilleControleur {\r\n        public static CLASS_NAME = \"PortefeuilleControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PortefeuilleControleur.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject: string[] = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$q,\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Angular.$location,\r\n            Constantes.Inject.Services.portefeuilleService,\r\n            Constantes.Inject.Services.eventService,\r\n            Constantes.Inject.Services.statService,\r\n            Constantes.Inject.Services.ihmService,\r\n            Constantes.Inject.Services.contexteService,\r\n            Constantes.Inject.Services.habilitationService,\r\n            Constantes.Inject.LibrairieD3.creationDonutService,\r\n            Constantes.Inject.Services.indicateurFlecheService,\r\n            Constantes.Inject.Services.popupService\r\n        ];\r\n\r\n\r\n        public chargementEnCours: boolean;\r\n        public estVueMultiSuiviPar: boolean = false;\r\n        public anneeEnCours: number = moment().year();\r\n\r\n        public messageChoixPtf: string;\r\n        public messageAucunPtf: string;\r\n        public messageChoixPtfExpert: string;\r\n        public estHabiliteBlocRentabilite: boolean;\r\n        public estHabiliteBlocRevue: boolean;\r\n        public estHabiliteConsultAffaires: boolean;\r\n        public estHabiliteConsultPropositions: boolean;\r\n\r\n        // chargements pour chaque panel\r\n        public chargementRentabEnCours: boolean = false;\r\n        public chargementRdvEnCours: boolean = false;\r\n        public chargementPtfEnCours: boolean = false;\r\n        public chargementRevuePtfEnCours: boolean = false;\r\n\r\n        public isInitRentab: boolean = false;\r\n        public messageInitRentab: string;\r\n        public isInitRevuePtf: boolean = false;\r\n        public messageInitRevuePtf: string;\r\n        public isInitPtf: boolean = false;\r\n        public messageInitPtf: string;\r\n        public isInitRdv: boolean = false;\r\n        public messageInitRdv: string;\r\n\r\n        // Variables bloc Portefeuille\r\n        public configBoutonDetailsPortefeuille: IConfigBoutonPanelNiv2;\r\n        public configBoutonDetailsPortefeuilleExpert: IConfigBoutonPanelNiv2;\r\n        public configDonutSegRel: Services.LibrairieD3.IConfigDonutD3;\r\n        public dataIndicateurClientsPmeEsi: IDataIndicateurBadge;\r\n        public dataIndicateurClientsPEetPEES: IDataIndicateurBadge;\r\n        public dataIndicateurClientsMEetMEES: IDataIndicateurBadge;\r\n        public dataIndicateurClientsGEetGEES: IDataIndicateurBadge;\r\n        public dataIndicateurClientsPro: IDataIndicateurBadge;\r\n        public dataIndicateurAutres: IDataIndicateurBadge;\r\n\r\n        // Variables bloc Rendez-vous\r\n        public titrePanelRdv: string;\r\n        public titrePanelRdv2: string;\r\n        public configPourcentageVisites: Services.LibrairieD3.IConfigPourcentageD3;\r\n        public dataIndicateurNbRdvProspectsRealisesAnneeEnCours: IDataIndicateurBadge;\r\n        public dataIndicateurNbRdvProspectsVusAnneeEnCours: IDataIndicateurBadge;\r\n        public dataIndicateurNbRelationsEconomiquesAnneeEnCours: IDataIndicateurBadge;\r\n        public dataIndicateurNbRdvClientsRealisesAnneeEnCours: IDataIndicateurBadge;\r\n        public dataIndicateurNbRdvRealisesAnneeEnCours: IDataIndicateurBadge;\r\n\r\n\r\n        // Variables bloc Revue Portefeuille\r\n        public configBoutonAccederRevuePortefeuille: IConfigBoutonPanelNiv2;\r\n        public configPourcentagePortefeuilleRealise: Services.LibrairieD3.IConfigPourcentageD3;\r\n        public dataIndicateurNbProduitsAEquiper: IDataIndicateurBadge;\r\n        public dataIndicateurNbProduitsAppetence: IDataIndicateurBadge;\r\n        public dataIndicateurNbProduitsEquipes: IDataIndicateurBadge;\r\n        public dataIndicateurNbClientsAActiver: IDataIndicateurBadge;\r\n        public dataIndicateurNbClientsARenegocier: IDataIndicateurBadge;\r\n\r\n        public dataIndicateurNbPropositionsEnCours: IDataIndicateurBadge;\r\n        public dataIndicateurNbAffairesEnCours: IDataIndicateurBadge;\r\n\r\n        public configDiagrammeColonnePortefeuille: Array<Modeles.Application.IDataIndicateurColonne>;\r\n        public afficheAppetencesProduits: boolean = true;  // masque la ligne appetences pour Crédit Coop et BTP (pas d'appétences chez eux)\r\n\r\n\r\n        // Variables bloc Rentabilité\r\n        public dataIndicateurAnneePrecedente: IDataIndicateurBadge;\r\n        public configDiagrammeColonneRentabilite: Array<Modeles.Application.IDataIndicateurColonne>;\r\n        public configPourcentageRentabilite: Services.LibrairieD3.IConfigPourcentageD3;\r\n        public configFlecheRentabilite: Modeles.Application.IConfigIndicateurFleche;\r\n        public afficheErreurPoidsPNB: boolean = false;\r\n\r\n\r\n        // Variables bloc Flux\r\n        public estActifBlocFlux: boolean = true;\r\n        private isInitFlux: boolean;\r\n        private messageInitFlux: string;\r\n        private chargementFluxEnCours: boolean = false;\r\n        private configFlecheFluxCrediteurs: Modeles.Application.IConfigIndicateurFleche;\r\n        private configFlecheFluxDebiteurs: Modeles.Application.IConfigIndicateurFleche;\r\n        private configDiagrammeColonneFluxCrediteurs: Array<Modeles.Application.IDataIndicateurColonne>;\r\n        private configDiagrammeColonneFluxDebiteurs: Array<Modeles.Application.IDataIndicateurColonne>;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $q: ng.IQService,\r\n            private $scope: ng.IScope,\r\n            private $location: ng.ILocationService,\r\n            private portefeuilleService: Services.Application.IPortefeuilleService,\r\n            private eventService: Services.Application.IEventService,\r\n            private statService: Services.Application.IStatsService,\r\n            private ihmService: Services.Application.IIhmService,\r\n            private contexteService: Services.Application.IContexteService,\r\n            private habilitationService: Services.Application.IHabilitationService,\r\n            private creationDonutService: Services.LibrairieD3.ICreationDonutService,\r\n            private indicateurFlecheService: Services.Application.IIndicateurFlecheService,\r\n            private popupService: Services.Application.IPopupService\r\n        ) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): ng.IPromise<void> {\r\n            PortefeuilleControleur.logger.info(\">>> Appel de la méthode : PortefeuilleControleur.initialiser <<<\");\r\n            this.reinitInitStats();\r\n\r\n            this.messageChoixPtf = Constantes.Messages.MESSAGE_CHOIX_PORTEFEUILLE;\r\n            this.messageChoixPtfExpert = Constantes.Messages.MESSAGE_CHOIX_PORTEFEUILLE_EXPERT;\r\n            this.messageAucunPtf = Constantes.Messages.MESSAGE_AUCUN_PORTEFEUILLE;\r\n            this.estHabiliteBlocRentabilite = this.habilitationService.estHabiliteAccesPNB();\r\n            this.estHabiliteBlocRevue = this.habilitationService.estHabiliteConsultRevue();\r\n            this.estHabiliteConsultAffaires = this.habilitationService.estHabiliteConsultAffaires();\r\n            this.estHabiliteConsultPropositions = this.habilitationService.estHabiliteConsultPropositions();\r\n\r\n            this.eventService.setPortefeuilleControleur(this);\r\n\r\n            //Titre du panel RDV\r\n            this.titrePanelRdv = Portefeuille.Constantes.Application.TITRE_PANEL_RDV + this.anneeEnCours.toString();\r\n            this.titrePanelRdv2 = Portefeuille.Constantes.Application.TITRE_PANEL_RDV_AVEC_CRE;\r\n\r\n            // mise à vide du donut pour qu'il soit recréé\r\n            this.creationDonutService.viderDonut();\r\n            // Configs du bloc Portefeuille\r\n            this.creerConfigBoutonDetailsPortefeuille();\r\n            // Configs du bloc Portefeuille Expert\r\n            this.creerConfigBoutonDetailsPortefeuilleExpert();\r\n\r\n            // Configs du bloc Revue Portefeuille\r\n            this.creerConfigBoutonAccederRevuePortefeuille();\r\n\r\n            if (this.portefeuilleService.aPortefeuillesAffiche() && this.portefeuilleService.aPortefeuillesReelAffiche()) {\r\n                return this.initialiserStatistiques();\r\n            } else {\r\n                return this.$q.when();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param etat\r\n         */\r\n        public setEstVueMultiSuiviPar(etat: boolean): void {\r\n            if (this.estVueMultiSuiviPar !== etat) {\r\n                this.estVueMultiSuiviPar = etat;\r\n                this.creerConfigBoutonDetailsPortefeuille();\r\n                this.creerConfigBoutonAccederRevuePortefeuille();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode pour initialiser les blocs de statistiques\r\n         */\r\n        public initialiserStatistiques(): ng.IPromise<void> {\r\n            if (this.portefeuilleService.aPortefeuillesAffiche() && this.portefeuilleService.aPortefeuillesReelAffiche()) {\r\n                this.chargementRentabEnCours = true;\r\n                this.chargementPtfEnCours = true;\r\n                this.chargementRdvEnCours = true;\r\n                this.chargementRevuePtfEnCours = true;\r\n                this.chargementFluxEnCours = true;\r\n\r\n                // Charger les données stat globale on creer une promesse vide\r\n                let promesse: ng.IPromise<void> =\r\n                    (this.estVueMultiSuiviPar) ?\r\n                        this.statService.getStatsListeEds() :\r\n                        this.$q.when();\r\n                promesse.then(() => {\r\n                    // initialisation bloc Rentabilité\r\n                    this.initBlocRentabilite();\r\n                    // initialisation bloc Rdv et Portefeuille\r\n                    this.initStatsRdvEtPortefeuille();\r\n                    // initialisation bloc Revue Portefeuille\r\n                    this.initStatsRevuePortefeuille();\r\n                    // initialisation bloc Flux\r\n                    this.initStatsFluxMouvementFinancier();\r\n                    return this.$q.when();\r\n                });\r\n            }\r\n            if (!this.portefeuilleService.aPortefeuillesReelAffiche()) {\r\n                this.reinitInitStats();\r\n            }\r\n            return this.$q.when();\r\n        }\r\n\r\n        /**\r\n         * initialisation bloc Rentabilité\r\n         */\r\n        private initBlocRentabilite() {\r\n            if (this.estHabiliteBlocRentabilite) {\r\n                let statRentabilite = (this.estVueMultiSuiviPar) ?\r\n                    this.statService.getStatsRentabiliteEds() :\r\n                    this.statService.getStatsRentabilite();\r\n                statRentabilite.then((statsRentab: Modeles.ApplicationStats.IRentabilite) => {\r\n                    if (statsRentab) {\r\n                        this.creerBlocRentab(statsRentab);\r\n                        this.isInitRentab = true;\r\n                    } else {\r\n                        this.initStatRentab();\r\n                    }\r\n                }).catch((erreur: MyWay.Services.Erreur) => {\r\n                    this.isInitRentab = false;\r\n                    this.messageInitRentab = `Un problème technique empêche la récupération des données: ${erreur.libelle}`;\r\n                }).finally(() => {\r\n                    this.chargementRentabEnCours = false;\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * initialisation bloc Rdv et Portefeuille\r\n         */\r\n        private initStatsRdvEtPortefeuille() {\r\n            let statsRdvEtPortefeuille = (this.estVueMultiSuiviPar) ?\r\n                this.statService.getStatsRdvEtPortefeuilleEds() :\r\n                this.statService.getStatsRdvEtPortefeuille();\r\n            statsRdvEtPortefeuille.then((statsRdvEtPtf: Modeles.ApplicationStats.IRdvPtf) => {\r\n                this.creerBlocPtf(statsRdvEtPtf);\r\n                this.creerBlocRdv(statsRdvEtPtf);\r\n                this.isInitRdv = true;\r\n                this.isInitPtf = true;\r\n            }).catch((erreur: MyWay.Services.Erreur) => {\r\n                this.isInitRdv = false;\r\n                this.isInitPtf = false;\r\n                this.messageInitPtf = `Un problème technique empêche la récupération des données: ${erreur.libelle}`;\r\n                this.messageInitRdv = `Un problème technique empêche la récupération des données: ${erreur.libelle}`;\r\n                this.creationDonutService.viderDonut();\r\n            }).finally(() => {\r\n                this.chargementPtfEnCours = false;\r\n                this.chargementRdvEnCours = false;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * initialisation bloc Revue Portefeuille\r\n         */\r\n        private initStatsRevuePortefeuille() {\r\n            if (this.estHabiliteBlocRevue) {\r\n                let statsRevuePortefeuille = (this.estVueMultiSuiviPar) ?\r\n                    this.statService.getStatsRevuePortefeuilleEds() :\r\n                    this.statService.getStatsRevuePortefeuille();\r\n                statsRevuePortefeuille.then((statsRevuePtf: Modeles.ApplicationStats.IRevuePortefeuille) => {\r\n                    this.creerBlocRevuePortefeuille(statsRevuePtf);\r\n                    this.isInitRevuePtf = true;\r\n                }).catch((erreur: MyWay.Services.Erreur) => {\r\n                    this.isInitRevuePtf = false;\r\n                    this.messageInitRevuePtf = `Un problème technique empêche la récupération des données: ${erreur.libelle}`;\r\n                }).finally(() => {\r\n                    this.chargementRevuePtfEnCours = false;\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        private initStatsFluxMouvementFinancier() {\r\n            let statsFluxMouvementFinancier: ng.IPromise<Array<Modeles.ApplicationStats.IFlux>>;\r\n            this.chargementFluxEnCours = true;\r\n            if (this.estVueMultiSuiviPar) {\r\n                statsFluxMouvementFinancier = this.statService.getStatsFluxMouvementFinancierEds();\r\n            } else {\r\n                // initialisation bloc Flux\r\n                let listeIdsPortefeuilles: Array<number> =\r\n                    _.pluck(_.where(this.portefeuilleService.getListePortefeuillesVisu(), { \"estAffiche\": true }), \"id\");\r\n                statsFluxMouvementFinancier = this.statService.getStatsFluxMouvementFinancier(listeIdsPortefeuilles, null);\r\n            }\r\n            statsFluxMouvementFinancier.then((statsFlux: Array<Modeles.ApplicationStats.IFlux>) => {\r\n                if (statsFlux &&\r\n                    statsFlux.length === 2) {\r\n                    this.creerBlocFluxCrediteurs(statsFlux[0]);\r\n                    this.creerBlocFluxDebiteurs(statsFlux[1]);\r\n                    this.isInitFlux = true;\r\n                } else {\r\n                    this.initStatFlux();\r\n                }\r\n            }).catch((erreur: MyWay.Services.Erreur) => {\r\n                this.isInitFlux = false;\r\n                this.messageInitFlux = `Un problème technique empêche la récupération des données: ${erreur.libelle}`;\r\n            }).finally(() => {\r\n                this.chargementFluxEnCours = false;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode pour mettre à false les booléen d'init des stats + maj des messages stats\r\n         */\r\n        public reinitInitStats(): void {\r\n            this.initStatPtf();\r\n            this.initStatRdv();\r\n            this.initStatRevuePtf();\r\n            this.initStatRentab();\r\n            this.initStatFlux();\r\n            //On vide le donut => utile lorsque l'on change d'agent pour un agent qui possède plusieurs portefeuilles\r\n            this.creationDonutService.viderDonut();\r\n        }\r\n\r\n        /**\r\n         *  ouvre la popin détail des portefeuilles en vue multi-conseiller\r\n         */\r\n        public debrancherVersDetailsPorteuille(): void {\r\n            this.popupService.showModalFull(\r\n                \"vues/template-modale/modale-details-portefeuille-vue.html\",\r\n                \"ModaleDetailsPortefeuilleControleur\",\r\n                <any>this.statService.getStatsDetail()).then((data: any) => {\r\n                });\r\n        }\r\n\r\n        /**\r\n         *  ouvre la popin détail des taux de visite en vue multi-conseiller\r\n         */\r\n        public debrancherVersDetailsTauxVisite(): void {\r\n            this.popupService.showModalFull(\r\n                \"vues/template-modale/modale-details-taux-visite-vue.html\",\r\n                \"ModaleDetailsTauxVisiteControleur\",\r\n                <any>this.statService.getStatsDetail()).then((data: any) => {\r\n                });\r\n        }\r\n\r\n        /**\r\n         *  ouvre la popin détail de la rentablité PNB en vue multi-conseiller\r\n         */\r\n        public debrancherVersDetailsRentabilitePNB(): void {\r\n            this.popupService.showModalFull(\r\n                \"vues/template-modale/modale-details-rentabilite-pnb-vue.html\",\r\n                \"ModaleDetailsRentabilitePNBControleur\",\r\n                <any>this.statService.getStatsDetail()).then((data: any) => {\r\n                });\r\n        }\r\n\r\n        /**\r\n         *  ouvre la popin détail des revue portfeuille en vue multi-conseiller\r\n         */\r\n        public debrancherVersDetailsRevuePortfeuille(): void {\r\n            this.popupService.showModalFull(\r\n                \"vues/template-modale/modale-details-revue-portefeuille-vue.html\",\r\n                \"ModaleDetailsRevuePortefeuilleControleur\",\r\n                <any>this.statService.getStatsDetail()).then((data: any) => {\r\n                });\r\n        }\r\n\r\n        /**\r\n         *  ouvre la popin détail du flux créditeur en vue multi-conseiller\r\n         */\r\n        public debrancherVersDetailsFluxCrediteur(): void {\r\n            this.popupService.showModalFull(\r\n                \"vues/template-modale/modale-details-flux-crediteur-vue.html\",\r\n                \"ModaleDetailsFluxCrediteurControleur\",\r\n                <any>this.statService.getStatsDetail()).then((data: any) => {\r\n                });\r\n        }\r\n\r\n        /**\r\n         *  ouvre la popin détail du flux débiteur en vue multi-conseiller\r\n         */\r\n        public debrancherVersDetailsFluxDebiteur(): void {\r\n            this.popupService.showModalFull(\r\n                \"vues/template-modale/modale-details-flux-debiteur-vue.html\",\r\n                \"ModaleDetailsFluxDebiteurControleur\",\r\n                <any>this.statService.getStatsDetail()).then((data: any) => {\r\n                });\r\n        }\r\n\r\n        /**\r\n         *\r\n         */\r\n        private initStatRdv(): void {\r\n            this.messageInitRdv = Constantes.Messages.MESSAGE_NO_DATA_STATS;\r\n            this.isInitRdv = false;\r\n        }\r\n\r\n        /**\r\n         *\r\n         */\r\n        private initStatPtf(): void {\r\n            this.messageInitPtf = Constantes.Messages.MESSAGE_NO_DATA_STATS;\r\n            this.isInitPtf = false;\r\n        }\r\n\r\n        /**\r\n         *\r\n         */\r\n        private initStatRevuePtf(): void {\r\n            this.messageInitRevuePtf = Constantes.Messages.MESSAGE_NO_DATA_STATS;\r\n            this.isInitRevuePtf = false;\r\n        }\r\n\r\n        /**\r\n         *\r\n         */\r\n        private initStatRentab(): void {\r\n            this.messageInitRentab = Constantes.Messages.MESSAGE_NO_DATA_STATS;\r\n            this.isInitRentab = false;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        private initStatFlux(): void {\r\n            this.messageInitFlux = Constantes.Messages.MESSAGE_NO_DATA_STATS;\r\n            this.isInitFlux = false;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de créer la config du bouton de détails portefeuille\r\n         * @returns {void}\r\n         */\r\n        private creerConfigBoutonDetailsPortefeuille(): void {\r\n            if (this.estVueMultiSuiviPar) {\r\n                this.configBoutonDetailsPortefeuille = null;\r\n            } else {\r\n                this.configBoutonDetailsPortefeuille = <IConfigBoutonPanelNiv2>{};\r\n                this.configBoutonDetailsPortefeuille.label = \"Accéder\";\r\n                this.configBoutonDetailsPortefeuille.action = this.accederGestionPortefeuilles;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de créer la config du bouton de détails portefeuille Expert\r\n         * @returns {void}\r\n         */\r\n        private creerConfigBoutonDetailsPortefeuilleExpert(): void {\r\n            \r\n                this.configBoutonDetailsPortefeuilleExpert = <IConfigBoutonPanelNiv2>{};\r\n            this.configBoutonDetailsPortefeuilleExpert.label = \"Accéder\";\r\n            this.configBoutonDetailsPortefeuilleExpert.action = this.accederGestionPortefeuillesExpert;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsRdvEtPortefeuille\r\n         */\r\n        private creerBlocPtf(statsRdvEtPortefeuille: Modeles.ApplicationStats.IRdvPtf): void {\r\n            this.dataIndicateurClientsPmeEsi = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurClientsPmeEsi.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_PME_ESI;\r\n            this.dataIndicateurClientsPmeEsi.valeur = statsRdvEtPortefeuille.nombreClientsPMEESI.toString();\r\n\r\n            this.dataIndicateurClientsPEetPEES = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurClientsPEetPEES.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_PE_ET_PEES;\r\n            this.dataIndicateurClientsPEetPEES.valeur = statsRdvEtPortefeuille.nombreClientsPEetPEES.toString();\r\n            this.dataIndicateurClientsPEetPEES.isSousIntitule = true;\r\n\r\n            this.dataIndicateurClientsMEetMEES = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurClientsMEetMEES.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_ME_ET_MEES;\r\n            this.dataIndicateurClientsMEetMEES.valeur = statsRdvEtPortefeuille.nombreClientsMEetMEES.toString();\r\n            this.dataIndicateurClientsMEetMEES.isSousIntitule = true;\r\n\r\n            this.dataIndicateurClientsGEetGEES = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurClientsGEetGEES.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_GE_ET_GEES;\r\n            this.dataIndicateurClientsGEetGEES.valeur = statsRdvEtPortefeuille.nombreClientsGEetGEES.toString();\r\n            this.dataIndicateurClientsGEetGEES.isSousIntitule = true;\r\n\r\n            this.dataIndicateurClientsPro = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurClientsPro.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_PRO;\r\n            this.dataIndicateurClientsPro.valeur = statsRdvEtPortefeuille.nombreClientsPro.toString();\r\n\r\n            this.dataIndicateurAutres = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurAutres.intitule = Portefeuille.Constantes.Application.BADGE_AUTRES_CLIENTS;\r\n            this.dataIndicateurAutres.valeur = statsRdvEtPortefeuille.nombreClientsAutres.toString();\r\n\r\n            this.creerConfigDonutSegRel(statsRdvEtPortefeuille);\r\n            this.creerConfigDiagrammeColonnePortefeuille(statsRdvEtPortefeuille);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsRdvEtPortefeuille\r\n         */\r\n        private creerBlocRdv(statsRdvEtPortefeuille: Modeles.ApplicationStats.IRdvPtf): void {\r\n            //RDV Clients réalisés année en cours\r\n            this.dataIndicateurNbRdvClientsRealisesAnneeEnCours = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurNbRdvClientsRealisesAnneeEnCours.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_REALISES_ANNEE_EN_COURS;\r\n            this.dataIndicateurNbRdvClientsRealisesAnneeEnCours.valeur = statsRdvEtPortefeuille.nombreRdvClientAnneeEnCours.toString();\r\n            this.dataIndicateurNbRdvClientsRealisesAnneeEnCours.isSousIntitule = true;\r\n\r\n            //RDV Prospects réalisés année en cours\r\n            this.dataIndicateurNbRdvProspectsRealisesAnneeEnCours = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurNbRdvProspectsRealisesAnneeEnCours.intitule = Portefeuille.Constantes.Application.BADGE_PROSPECTS_REALISES_ANNEE_EN_COURS;\r\n            this.dataIndicateurNbRdvProspectsRealisesAnneeEnCours.valeur = statsRdvEtPortefeuille.nombreRdvProspectAnneeCivile.toString();\r\n            this.dataIndicateurNbRdvProspectsRealisesAnneeEnCours.isSousIntitule = true;\r\n\r\n            //RDV Clients + Prospects réalisés année en cours\r\n            this.dataIndicateurNbRdvRealisesAnneeEnCours = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurNbRdvRealisesAnneeEnCours.intitule = Portefeuille.Constantes.Application.BADGE_RDV_REALISES_ANNEE_EN_COURS;\r\n            this.dataIndicateurNbRdvRealisesAnneeEnCours.valeur = (statsRdvEtPortefeuille.nombreRdvClientAnneeEnCours + statsRdvEtPortefeuille.nombreRdvProspectAnneeCivile).toString();\r\n\r\n            this.dataIndicateurNbRdvProspectsVusAnneeEnCours = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurNbRdvProspectsVusAnneeEnCours.intitule = Portefeuille.Constantes.Application.BADGE_PROSPECTS_VUS_ANNEE_EN_COURS;\r\n            this.dataIndicateurNbRdvProspectsVusAnneeEnCours.valeur = statsRdvEtPortefeuille.nombreRdvProspectAnneeEnCours.toString();\r\n\r\n            this.dataIndicateurNbRelationsEconomiquesAnneeEnCours = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurNbRelationsEconomiquesAnneeEnCours.intitule = Portefeuille.Constantes.Application.BADGE_RELATION_ECONOMIQUE_ANNEE_EN_COURS;\r\n            this.dataIndicateurNbRelationsEconomiquesAnneeEnCours.valeur = statsRdvEtPortefeuille.nombreRdvRelationEcoClient.toString();\r\n\r\n            this.configPourcentageVisites = <Services.LibrairieD3.IConfigPourcentageD3>{};\r\n            this.configPourcentageVisites.titre = \"Taux de visites (relations économiques)\";\r\n            this.configPourcentageVisites.pourcentageUn = statsRdvEtPortefeuille.rdvTauxVisite;\r\n            this.configPourcentageVisites.degrade = Services.LibrairieD3.DEGRADE_POURCENTAGE.BLEU;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de créer la config du donut segmentation Relationnelle\r\n         * @returns {void}\r\n         */\r\n        private creerConfigDonutSegRel(statsRdvEtPortefeuille: Modeles.ApplicationStats.IRdvPtf): void {\r\n            this.configDonutSegRel = <Services.LibrairieD3.IConfigDonutD3>{};\r\n            this.configDonutSegRel.titre = Constantes.Application.GRAPHE_SEGMENTATION_TITRE_GROUPE;\r\n            this.configDonutSegRel.degrade = Services.LibrairieD3.DEGRADE_DONUT.ROSE;\r\n\r\n            let listeDonnees: Array<Services.LibrairieD3.IDonneeFluxD3> = [];\r\n\r\n            if (statsRdvEtPortefeuille.nombreClientsPMEESI > statsRdvEtPortefeuille.nombreClientsPro) {\r\n                this.configDonutSegRel.donutChoisi = Constantes.Application.DONUT_PME_ESI;\r\n                this.configDonutSegRel.nombreClients = statsRdvEtPortefeuille.nombreClientsPMEESI.toString();\r\n                _.forEach(statsRdvEtPortefeuille.listeSegmentationsPMEESI, (seg: Modeles.ApplicationStats.ISegmentationRelationnelle) => {\r\n                    let section = <Services.LibrairieD3.IDonneeFluxD3>{};\r\n                    section.nom = seg.libelle;\r\n                    section.pourcentage = seg.pourcentage;\r\n                    listeDonnees.push(section);\r\n                });\r\n\r\n            } else {\r\n                this.configDonutSegRel.donutChoisi = Constantes.Application.DONUT_PRO;\r\n                this.configDonutSegRel.nombreClients = statsRdvEtPortefeuille.nombreClientsPro.toString();\r\n                _.forEach(statsRdvEtPortefeuille.listeSegmentationsPro, (seg: Modeles.ApplicationStats.ISegmentationRelationnelle) => {\r\n                    let section = <Services.LibrairieD3.IDonneeFluxD3>{};\r\n                    section.nom = seg.libelle;\r\n                    section.pourcentage = seg.pourcentage;\r\n                    listeDonnees.push(section);\r\n                });\r\n            }\r\n\r\n            this.configDonutSegRel.listeDonnees = listeDonnees;\r\n            this.eventService.initialiserPfDiagrammeDonutControleur();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de créer les données d'entrée du diagramme présenté en colonnes.\r\n         * @returns {void}\r\n         */\r\n        private creerConfigDiagrammeColonnePortefeuille(statsRdvEtPortefeuille: Modeles.ApplicationStats.IRdvPtf): void {\r\n            this.configDiagrammeColonnePortefeuille = [];\r\n            let valeurMax: number = Math.max(\r\n                statsRdvEtPortefeuille.nombreRelations,\r\n                statsRdvEtPortefeuille.nombreClientsAvecProduitService,\r\n                statsRdvEtPortefeuille.nombreClientsSansContratEtProspect\r\n            );\r\n            this.configDiagrammeColonnePortefeuille.push(<Modeles.Application.IDataIndicateurColonne>{\r\n                id: \"colonne-relations\",\r\n                intitule: Portefeuille.Constantes.Application.DIAGRAMME_COLONNE_RELATIONS,\r\n                valeur: statsRdvEtPortefeuille.nombreRelations,\r\n                couleur: Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_RELATIONS,\r\n                hauteur: Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRdvEtPortefeuille.nombreRelations),\r\n                estMontant: false\r\n\r\n            });\r\n            this.configDiagrammeColonnePortefeuille.push(<Modeles.Application.IDataIndicateurColonne>{\r\n                id: \"colonne-clients\",\r\n                intitule: Portefeuille.Constantes.Application.DIAGRAMME_COLONNE_CLIENTS,\r\n                sousIntitule: Portefeuille.Constantes.Application.DIAGRAMME_COLONNE_CLIENTS_ACTIFS,\r\n                valeur: statsRdvEtPortefeuille.nombreClientsAvecProduitService,\r\n                sousValeur: statsRdvEtPortefeuille.nombreClientsActifs,\r\n                couleur: Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_CLIENT,\r\n                couleurSousValeur: Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_ACTIF,\r\n                hauteur: Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRdvEtPortefeuille.nombreClientsAvecProduitService - statsRdvEtPortefeuille.nombreClientsActifs),\r\n                sousHauteur: Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRdvEtPortefeuille.nombreClientsActifs),\r\n                estMontant: false\r\n            });\r\n            this.configDiagrammeColonnePortefeuille.push(<Modeles.Application.IDataIndicateurColonne>{\r\n                id: \"colonne-prospects\",\r\n                intitule: Portefeuille.Constantes.Application.DIAGRAMME_COLONNE_PROSPECTS,\r\n                valeur: statsRdvEtPortefeuille.nombreClientsSansContratEtProspect,\r\n                couleur: Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_SANS_CONTRAT,\r\n                hauteur: Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRdvEtPortefeuille.nombreClientsSansContratEtProspect),\r\n                estMontant: false\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de créer la config du bouton de accéder portefeuille\r\n         * @returns {void}\r\n         */\r\n        private creerConfigBoutonAccederRevuePortefeuille(): void {\r\n            if (this.estVueMultiSuiviPar) {\r\n                this.configBoutonAccederRevuePortefeuille = null;\r\n            } else {\r\n                this.configBoutonAccederRevuePortefeuille = <IConfigBoutonPanelNiv2>{};\r\n                this.configBoutonAccederRevuePortefeuille.label = \"Accéder\";\r\n                this.configBoutonAccederRevuePortefeuille.action = this.accederRevuePortefeuilles;\r\n            }\r\n        }\r\n\r\n        private creerBlocRevuePortefeuille(statsRevuePtf: Modeles.ApplicationStats.IRevuePortefeuille): void {\r\n            this.configPourcentagePortefeuilleRealise = <Services.LibrairieD3.IConfigPourcentageD3>{};\r\n            this.configPourcentagePortefeuilleRealise.titre = Portefeuille.Constantes.Application.GRAPHE_REVUE_PORTEFEUILLE;\r\n            this.configPourcentagePortefeuilleRealise.pourcentageUn = statsRevuePtf.pourcentageRevuePtfRealisee;\r\n            this.configPourcentagePortefeuilleRealise.degrade = Services.LibrairieD3.DEGRADE_POURCENTAGE.BLEU;\r\n\r\n            this.dataIndicateurNbProduitsAEquiper = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurNbProduitsAEquiper.intitule = Portefeuille.Constantes.Application.BADGE_PRODUITS_PROPOSER;\r\n            if (this.estVueMultiSuiviPar) {\r\n                this.dataIndicateurNbProduitsAEquiper.debranchementLisa = Portefeuille.Enum.Revue.POPUP_REVUE.POPUP_CLIENTS_PRODUIT_A_PROPOSER;\r\n                this.dataIndicateurNbProduitsAEquiper.debranchementLocal = null;\r\n            } else {\r\n                this.dataIndicateurNbProduitsAEquiper.debranchementLisa = Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_BILAN_REVUES_PORTEFEUILLE;\r\n                this.dataIndicateurNbProduitsAEquiper.debranchementLocal = Portefeuille.Constantes.Url.BILAN_REVUES_PORTEFEUILLE;\r\n            }\r\n            this.dataIndicateurNbProduitsAEquiper.valeur = statsRevuePtf.nombreDeProduitsAProposer.toString();\r\n\r\n            this.dataIndicateurNbProduitsAppetence = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurNbProduitsAppetence.intitule = Portefeuille.Constantes.Application.BADGE_APPETENCE_PRODUITS;\r\n            if (this.estVueMultiSuiviPar) {\r\n                this.dataIndicateurNbProduitsAEquiper.debranchementLisa = Portefeuille.Enum.Revue.POPUP_REVUE.POPUP_CLIENTS_APPETENCE_PRODUIT;\r\n                this.dataIndicateurNbProduitsAEquiper.debranchementLocal = null;\r\n            } else {\r\n                this.dataIndicateurNbProduitsAppetence.debranchementLisa = Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_BILAN_APPETENCES_PORTEFEUILLE;\r\n                this.dataIndicateurNbProduitsAppetence.debranchementLocal = Portefeuille.Constantes.Url.BILAN_APPETENCES_PORTEFEUILLE;\r\n            }\r\n            this.dataIndicateurNbProduitsAppetence.valeur = (statsRevuePtf.nombreDeClientsAAppetence) ? statsRevuePtf.nombreDeClientsAAppetence.toString() : \"0\";\r\n\r\n            // EPIPTF-104 si il n'y a aucune appétence on n'affiche pas du tout la ligne pour ne pas perturber les marchés qui n'ont pas d'appétences\r\n            this.afficheAppetencesProduits = (!statsRevuePtf.nombreDeClientsAAppetence || statsRevuePtf.nombreDeClientsAAppetence === 0) ? false : true;\r\n\r\n            this.dataIndicateurNbClientsAActiver = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurNbClientsAActiver.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_ACTIVER;\r\n            this.dataIndicateurNbClientsAActiver.debranchementLisa = (this.estVueMultiSuiviPar) ? 0 : Portefeuille.Enum.Revue.POPUP_REVUE.POPUP_CLIENTS_A_ACTIVER;\r\n            this.dataIndicateurNbClientsAActiver.valeur = statsRevuePtf.nombreDeClientsAActiver.toString();\r\n\r\n            this.dataIndicateurNbClientsARenegocier = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurNbClientsARenegocier.intitule = Portefeuille.Constantes.Application.BADGE_CLIENTS_RENEGOCIER;\r\n            this.dataIndicateurNbClientsARenegocier.debranchementLisa = (this.estVueMultiSuiviPar) ? 0 : Portefeuille.Enum.Revue.POPUP_REVUE.POPUP_CLIENTS_TARIFICATION;\r\n            this.dataIndicateurNbClientsARenegocier.valeur = (statsRevuePtf.nombreDeClientsARenegocier) ? statsRevuePtf.nombreDeClientsARenegocier.toString() : \"0\";\r\n\r\n            this.dataIndicateurNbPropositionsEnCours = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurNbPropositionsEnCours.intitule = Portefeuille.Constantes.Application.BADGE_PROPOSITIONS_EN_COURS;\r\n            this.dataIndicateurNbPropositionsEnCours.debranchementLisa = (this.estVueMultiSuiviPar) ? 0 : Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_PROPOSITONS;\r\n            // this.dataIndicateurNbPropositionsEnCours.debranchementLisa = 0;\r\n            this.dataIndicateurNbPropositionsEnCours.debranchementLocal = null;\r\n            this.dataIndicateurNbPropositionsEnCours.valeur = statsRevuePtf.nombreDePropositionsEnCours.toString();\r\n\r\n            this.dataIndicateurNbAffairesEnCours = <IDataIndicateurBadge>{};\r\n            this.dataIndicateurNbAffairesEnCours.intitule = Portefeuille.Constantes.Application.BADGE_AFFAIRES_EN_COURS;\r\n            this.dataIndicateurNbAffairesEnCours.debranchementLisa = (this.estVueMultiSuiviPar) ? 0 : Portefeuille.Constantes.CodeProcessusLisa.CODE_LISA_GESTION_AFFAIRES;\r\n            this.dataIndicateurNbAffairesEnCours.debranchementLocal = null;\r\n            this.dataIndicateurNbAffairesEnCours.valeur = statsRevuePtf.nombreDeAffairesEnCours.toString();\r\n        }\r\n\r\n        /**\r\n         * Méthode d'alimentation du bloc stats rentabilité\r\n         * @param statsRentab\r\n         */\r\n        private creerBlocRentab(statsRentab: Modeles.ApplicationStats.IRentabilite): void {\r\n            this.creerConfigPourcentageRentabilite(statsRentab);\r\n            this.configFlecheRentabilite = this.indicateurFlecheService.getConfigIndicateurFleche(statsRentab.tauxEvolutionPnb);\r\n            this.creerConfigDiagrammeColonneRentabilite(statsRentab);\r\n        }\r\n\r\n        /**\r\n         * Méthode d'alimentation du bloc flux créditeurs\r\n         * @param statsFlux\r\n         */\r\n        private creerBlocFluxCrediteurs(statsFlux: Modeles.ApplicationStats.IFlux): void {\r\n            this.configFlecheFluxCrediteurs = this.indicateurFlecheService.getConfigIndicateurFleche(statsFlux.tauxEvolutionFlux);\r\n            this.creerConfigDiagrammeColonneFluxCrediteurs(statsFlux);\r\n        }\r\n\r\n        /**\r\n         * Méthode d'alimentation du bloc flux débiteurs\r\n         * @param statsFlux\r\n         */\r\n        private creerBlocFluxDebiteurs(statsFlux: Modeles.ApplicationStats.IFlux): void {\r\n            this.configFlecheFluxDebiteurs = this.indicateurFlecheService.getConfigIndicateurFleche(statsFlux.tauxEvolutionFlux);\r\n            this.creerConfigDiagrammeColonneFluxDebiteurs(statsFlux);\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de créer la liste des configs grande barre Flux Créditeurs\r\n         * @returns {void}\r\n         */\r\n        private creerConfigDiagrammeColonneFluxCrediteurs(statsFlux: Modeles.ApplicationStats.IFlux): void {\r\n            this.configDiagrammeColonneFluxCrediteurs = [];\r\n\r\n            let valeurMax: number = Math.max(statsFlux.flux12DerniersMoisGlissantN, statsFlux.flux12DerniersMoisGlissNMoins1);\r\n\r\n            let configGrandeBarrePeriode1 = <Modeles.Application.IDataIndicateurColonne>{};\r\n            configGrandeBarrePeriode1.intitule = statsFlux ? `${moment(statsFlux.dateDebFlux12DerMoisGlissNMoins1).format(\"MM/YYYY\")} à ${moment(statsFlux.dateFinFlux12DerMoisGlissNMoins1).format(\"MM/YYYY\")}` : \"\";\r\n            configGrandeBarrePeriode1.valeur = statsFlux ? statsFlux.flux12DerniersMoisGlissNMoins1 : 0;\r\n            configGrandeBarrePeriode1.couleur = Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2;\r\n            configGrandeBarrePeriode1.estMontant = true;\r\n            configGrandeBarrePeriode1.hauteur = Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsFlux.flux12DerniersMoisGlissNMoins1);\r\n            configGrandeBarrePeriode1.nePasAfficherIntitule = true;\r\n            this.configDiagrammeColonneFluxCrediteurs.push(configGrandeBarrePeriode1);\r\n\r\n            let configGrandeBarrePeriode2 = <Modeles.Application.IDataIndicateurColonne>{};\r\n            configGrandeBarrePeriode2.intitule = statsFlux ? `${moment(statsFlux.dateDebFlux12DerMoisGlissN).format(\"MM/YYYY\")} à ${moment(statsFlux.dateFinFlux12DerMoisGlissN).format(\"MM/YYYY\")}` : \"\";\r\n            configGrandeBarrePeriode2.valeur = statsFlux ? statsFlux.flux12DerniersMoisGlissantN : 0;\r\n            configGrandeBarrePeriode2.couleur = Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1;\r\n            configGrandeBarrePeriode2.estMontant = true;\r\n            configGrandeBarrePeriode2.hauteur = Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsFlux.flux12DerniersMoisGlissantN);\r\n            configGrandeBarrePeriode2.nePasAfficherIntitule = true;\r\n            this.configDiagrammeColonneFluxCrediteurs.push(configGrandeBarrePeriode2);\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de créer la liste des configs grande barre Flux Débiteurs\r\n         * @returns {void}\r\n         */\r\n        private creerConfigDiagrammeColonneFluxDebiteurs(statsFlux: Modeles.ApplicationStats.IFlux): void {\r\n            this.configDiagrammeColonneFluxDebiteurs = [];\r\n\r\n            let valeurMax: number = Math.max(statsFlux.flux12DerniersMoisGlissantN, statsFlux.flux12DerniersMoisGlissNMoins1);\r\n\r\n            let configGrandeBarrePeriode1 = <Modeles.Application.IDataIndicateurColonne>{};\r\n            configGrandeBarrePeriode1.intitule = statsFlux ? `${moment(statsFlux.dateDebFlux12DerMoisGlissNMoins1).format(\"MM/YYYY\")} à ${moment(statsFlux.dateFinFlux12DerMoisGlissNMoins1).format(\"MM/YYYY\")}` : \"\";\r\n            configGrandeBarrePeriode1.valeur = statsFlux ? statsFlux.flux12DerniersMoisGlissNMoins1 : 0;\r\n            configGrandeBarrePeriode1.couleur = Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2;\r\n            configGrandeBarrePeriode1.estMontant = true;\r\n            configGrandeBarrePeriode1.hauteur = Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsFlux.flux12DerniersMoisGlissNMoins1);\r\n            configGrandeBarrePeriode1.nePasAfficherIntitule = true;\r\n            this.configDiagrammeColonneFluxDebiteurs.push(configGrandeBarrePeriode1);\r\n\r\n            let configGrandeBarrePeriode2 = <Modeles.Application.IDataIndicateurColonne>{};\r\n            configGrandeBarrePeriode2.intitule = statsFlux ? `${moment(statsFlux.dateDebFlux12DerMoisGlissN).format(\"MM/YYYY\")} à ${moment(statsFlux.dateFinFlux12DerMoisGlissN).format(\"MM/YYYY\")}` : \"\";\r\n            configGrandeBarrePeriode2.valeur = statsFlux ? statsFlux.flux12DerniersMoisGlissantN : 0;\r\n            configGrandeBarrePeriode2.couleur = Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1;\r\n            configGrandeBarrePeriode2.estMontant = true;\r\n            configGrandeBarrePeriode2.hauteur = Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsFlux.flux12DerniersMoisGlissantN);\r\n            configGrandeBarrePeriode2.nePasAfficherIntitule = true;\r\n            this.configDiagrammeColonneFluxDebiteurs.push(configGrandeBarrePeriode2);\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de créer la liste des configs grande barre PNB\r\n         * @returns {void}\r\n         */\r\n        private creerConfigDiagrammeColonneRentabilite(statsRentab: Modeles.ApplicationStats.IRentabilite): void {\r\n            this.configDiagrammeColonneRentabilite = [];\r\n\r\n            let valeurMax: number = Math.max(statsRentab.pnb12DerniersMoisGlissantN, statsRentab.pnb12DerniersMoisGlissNMoins1, statsRentab.pnb3112AnneeNMoins1);\r\n\r\n            let configGrandeBarrePeriode3 = <Modeles.Application.IDataIndicateurColonne>{};\r\n            configGrandeBarrePeriode3.intitule = (statsRentab.dateDebPnb3112AnneeNMoins1 && moment(statsRentab.dateDebPnb3112AnneeNMoins1).isValid()) ?\r\n                \"31/12/\" + statsRentab.dateDebPnb3112AnneeNMoins1.getFullYear().toString() : \"Année précédente\";\r\n            configGrandeBarrePeriode3.valeur = statsRentab ? statsRentab.pnb3112AnneeNMoins1 : 0;\r\n            configGrandeBarrePeriode3.couleur = Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE3;\r\n            configGrandeBarrePeriode3.estMontant = true;\r\n            configGrandeBarrePeriode3.nePasAfficherIntitule = true;\r\n            configGrandeBarrePeriode3.hauteur = Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRentab.pnb3112AnneeNMoins1);\r\n            this.configDiagrammeColonneRentabilite.push(configGrandeBarrePeriode3);\r\n\r\n            let configGrandeBarrePeriode1 = <Modeles.Application.IDataIndicateurColonne>{};\r\n            configGrandeBarrePeriode1.intitule = statsRentab ? `${moment(statsRentab.dateDebPnb12DerMoisGlissNMoins1).format(\"DD/MM/YYYY\")} à ${moment(statsRentab.dateFinPnb12DerMoisGlissNMoins1).format(\"DD/MM/YYYY\")}` : \"\";\r\n            configGrandeBarrePeriode1.valeur = statsRentab ? statsRentab.pnb12DerniersMoisGlissNMoins1 : 0;\r\n            configGrandeBarrePeriode1.couleur = Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2;\r\n            configGrandeBarrePeriode1.estMontant = true;\r\n            configGrandeBarrePeriode1.nePasAfficherIntitule = true;\r\n            configGrandeBarrePeriode1.hauteur = Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRentab.pnb12DerniersMoisGlissNMoins1);\r\n\r\n            this.configDiagrammeColonneRentabilite.push(configGrandeBarrePeriode1);\r\n\r\n            let configGrandeBarrePeriode2 = <Modeles.Application.IDataIndicateurColonne>{};\r\n            configGrandeBarrePeriode2.intitule = statsRentab ? `${moment(statsRentab.dateDebPnb12DerMoisGlissN).format(\"DD/MM/YYYY\")} à ${moment(statsRentab.dateFinPnb12DerMoisGlissN).format(\"DD/MM/YYYY\")}` : \"\";\r\n            configGrandeBarrePeriode2.valeur = statsRentab ? statsRentab.pnb12DerniersMoisGlissantN : 0;\r\n            configGrandeBarrePeriode2.couleur = Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1;\r\n            configGrandeBarrePeriode2.estMontant = true;\r\n            configGrandeBarrePeriode2.nePasAfficherIntitule = true;\r\n            configGrandeBarrePeriode2.hauteur = Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, statsRentab.pnb12DerniersMoisGlissantN);\r\n            this.configDiagrammeColonneRentabilite.push(configGrandeBarrePeriode2);\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de créer la config du pourcentage Rentabilité\r\n         * @returns {void}\r\n         */\r\n        private creerConfigPourcentageRentabilite(statsRentab: Modeles.ApplicationStats.IRentabilite): void {\r\n            this.configPourcentageRentabilite = <Services.LibrairieD3.IConfigPourcentageD3>{};\r\n            this.configPourcentageRentabilite.titre = Portefeuille.Constantes.Application.GRAPHE_POIDS_PNB;\r\n            this.configPourcentageRentabilite.pourcentageUn = statsRentab ? statsRentab.ratioPNBImportants : 0;\r\n            this.configPourcentageRentabilite.degrade = Services.LibrairieD3.DEGRADE_POURCENTAGE.BLEU;\r\n        }\r\n\r\n        /**\r\n         * Variable contenant la méthode permettant d'acceder à la gestion des portefeuilles Expert\r\n         * @returns {void}\r\n         */\r\n        accederGestionPortefeuillesExpert = () => {\r\n            this.ihmService.setTypeVue(Enum.PageClients.TYPE_VUE.VUE_CLIENTS); // demande vue client\r\n            this.portefeuilleService.setTypeForcage(Enum.PageClients.TYPE_FORCAGE.CLIENTS);  // forçage client\r\n            //On indique qu'on ne vient pas du bouton \"accéder\" du bloc revue portefeuille\r\n            this.serviceAgentExtended.addToContext(Constantes.Contexte.ACCES_DEPUIS_BLOC_REVUE, \"N\").then(() => {\r\n                // ajoute une action remarquable\r\n                this.contexteService.tracerSuiviAction(PortefeuilleControleur.logger, Constantes.ActionsRemarquables.BTN_ACCES_LISTE_CLIENTS);\r\n                this.$location.path(Constantes.Url.CLIENTS);\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Variable contenant la méthode permettant d'acceder à la gestion des portefeuilles\r\n         * @returns {void}\r\n         */\r\n        private accederGestionPortefeuilles = () => {\r\n            this.contexteService.recupererRetourDebranchement(\r\n            ).then((resultatPromesse: Modeles.Application.IContexteGererPortefeuille) => {\r\n                if (resultatPromesse) {\r\n                    let contexteMisAJour: Modeles.Application.IContexteGererPortefeuille;\r\n                    //1°) On ne conserve que objeVisu s'il est valorisé\r\n                    if (resultatPromesse.objetEdsVisu) {\r\n                        contexteMisAJour = <Modeles.Application.IContexteGererPortefeuille>{};\r\n                        contexteMisAJour = <Modeles.Application.IContexteGererPortefeuille>{};\r\n                        contexteMisAJour.objetEdsVisu = angular.copy(resultatPromesse.objetEdsVisu);\r\n                    }\r\n\r\n                    //2°) On supprime les données contextuelles, puis on valorise les données contextuelles nécessaires à la gestion des portefeuilles\r\n                    this.contexteService.supprimerContexteDevenuInutile([Constantes.Contexte.CONTEXTE_VERS_REVUE, Constantes.Contexte.CONTEXTE_GERR_PORTF]\r\n                    ).then(() => {\r\n                        //this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteMisAJour\r\n                        this.serviceAgentExtended.addToContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteMisAJour\r\n                        ).catch((erreur: MyWay.Services.Erreur) => {\r\n                            PortefeuilleControleur.logger.info(JSON.stringify(\">>accederGestionPortefeuilles<< Erreur lors de l'écriture du contexte de gestion des portefeuilles: \" + JSON.stringify(erreur)));\r\n                        });\r\n                    }).catch((erreur: MyWay.Services.Erreur) => {\r\n                        PortefeuilleControleur.logger.info(JSON.stringify(\">>accederGestionPortefeuilles<< Erreur lors de la suppression du contexte de gestion des portefeuilles: \" + JSON.stringify(erreur)));\r\n                    });\r\n                } else {\r\n                    // On supprime les données contextuelles liée à la Revue\r\n                    this.contexteService.supprimerContexteDevenuInutile([Constantes.Contexte.CONTEXTE_VERS_REVUE]);\r\n                }\r\n            }).catch((erreur: MyWay.Services.Erreur) => {\r\n                PortefeuilleControleur.logger.info(\">>accederGestionPortefeuilles<< Erreur lors de la récupération du contexte de gestion des portefeuilles: \" + JSON.stringify(erreur));\r\n            }).finally(() => {\r\n                // On change va vers la liste des relations éco\r\n                this.ihmService.setTypeVue(Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE);\r\n                this.portefeuilleService.setTypeForcage(Enum.PageClients.TYPE_FORCAGE.SANS);  // ICI, je remets\r\n                //On indique qu'on ne vient pas du bouton \"accéder\" du bloc revue portefeuille\r\n                this.serviceAgentExtended.addToContext(Constantes.Contexte.ACCES_DEPUIS_BLOC_REVUE, \"N\").then(() => {\r\n                    // ajoute une action remarquable\r\n                    this.contexteService.tracerSuiviAction(PortefeuilleControleur.logger, Constantes.ActionsRemarquables.BTN_ACCES_LISTE_CLIENTS);\r\n                    this.$location.path(Constantes.Url.CLIENTS);\r\n                });\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Variable contenant la méthode permettant d'acceder à la revue portefeuille\r\n         * @returns {void}\r\n         */\r\n        private accederRevuePortefeuilles = () => {\r\n            this.contexteService.recupererRetourDebranchement(\r\n            ).then((resultatPromesse: Modeles.Application.IContexteGererPortefeuille) => {\r\n                if (resultatPromesse) {\r\n                    let contexteMisAJour: Modeles.Application.IContexteGererPortefeuille;\r\n                    //1°) On ne conserve que objeVisu s'il est valorisé\r\n                    if (resultatPromesse.objetEdsVisu) {\r\n                        contexteMisAJour = <Modeles.Application.IContexteGererPortefeuille>{};\r\n                        contexteMisAJour.objetEdsVisu = angular.copy(resultatPromesse.objetEdsVisu);\r\n                    }\r\n\r\n                    //2°) On supprime les données contextuelles, puis on valorise les données contextuelles nécessaires à la gestion des portefeuilles\r\n                    this.contexteService.supprimerContexteDevenuInutile([Constantes.Contexte.CONTEXTE_VERS_REVUE, Constantes.Contexte.CONTEXTE_GERR_PORTF]\r\n                    ).then(() => {\r\n                        //this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteMisAJour\r\n                        this.serviceAgentExtended.addToContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteMisAJour\r\n                        ).catch((erreur: MyWay.Services.Erreur) => {\r\n                            PortefeuilleControleur.logger.info(JSON.stringify(\">>accederRevuePortefeuilles<< Erreur lors de l'écriture du contexte de gestion des portefeuilles: \" + JSON.stringify(erreur)));\r\n                        });\r\n                    }).catch((erreur: MyWay.Services.Erreur) => {\r\n                        PortefeuilleControleur.logger.info(JSON.stringify(\">>accederRevuePortefeuilles<< Erreur lors de la suppression du contexte de gestion des portefeuilles: \" + JSON.stringify(erreur)));\r\n                    });\r\n                } else {\r\n                    // On supprime les données contextuelles liée à la Revue\r\n                    this.contexteService.supprimerContexteDevenuInutile([Constantes.Contexte.CONTEXTE_VERS_REVUE]);\r\n                }\r\n            }).catch((erreur: MyWay.Services.Erreur) => {\r\n                PortefeuilleControleur.logger.info(\">>accederRevuePortefeuilles<< Erreur lors de la récupération du contexte de gestion des portefeuilles: \" + JSON.stringify(erreur));\r\n            }).finally(() => {\r\n                // On change va vers la liste des clients\r\n                this.ihmService.setTypeVue(Enum.PageClients.TYPE_VUE.VUE_CLIENTS);\r\n                //on impose aucune limite du nombre de client a rechercher dans le cas d'un acces aux indicateurs de revue\r\n                this.portefeuilleService.setTypeForcage(Enum.PageClients.TYPE_FORCAGE.TOUT);\r\n                //On indique qu'on vient du bouton \"accéder\" du bloc revue portefeuille\r\n                this.serviceAgentExtended.addToContext(Constantes.Contexte.ACCES_DEPUIS_BLOC_REVUE, \"O\").then(() => {\r\n                    // ajoute une action remarquable\r\n                    this.contexteService.tracerSuiviAction(PortefeuilleControleur.logger, Constantes.ActionsRemarquables.BTN_ACCES_LISTE_CLIENTS_REVUE);\r\n                    this.$location.path(Constantes.Url.CLIENTS);\r\n                });\r\n            });\r\n        };\r\n    }\r\n    app.controller(\"PortefeuilleControleur\", PortefeuilleControleur);\r\n}","/// <reference path=\"../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur de la page selection indicateurs\r\n * @module Portefeuille.Controleurs\r\n * @author S0005354 (JM FOLLETTI)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Controleur de l'index\r\n     */\r\n    export class SelectionIndicateursControleur {\r\n        public static CLASS_NAME = \"SelectionIndicateursControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(SelectionIndicateursControleur.CLASS_NAME);\r\n\r\n        // Proprietés\r\n        public strFilArianePageActuelle: string;\r\n        public strFilArianePageOrigine: string;\r\n        public listePaniers: Array<Modeles.Application.IPanier>;\r\n        public listeTotaleIndicateurs: Array<Modeles.Application.IIndicateurType>;\r\n        public panierEnCours: Modeles.Application.IPanier;\r\n        public panierDefaut: Modeles.Application.IPanier;\r\n\r\n        public messageErreurNomSelection: string;\r\n        public listeTuileCatalogueSettings: Array<Modeles.Application.ITuileCatalogueSettings>;\r\n        public listeTuilePanierSettings: Array<Modeles.Application.ITuilePanierSettings>;\r\n        public listeCodesIndicateursPanierInit: Array<string>;\r\n        public panierDropSettings: Modeles.Application.IDropSettings;\r\n        public poubelleDropSettings: Modeles.Application.IDropSettings;\r\n        public estAfficherDropPanier: boolean;\r\n        public estEnEditionPanier: boolean;\r\n        public nomFiltre1: string;\r\n        public nomFiltre2: string;\r\n        public nomFiltre3: string;\r\n        public nomFiltre4: string;\r\n        public estDispoAjoutSelection: boolean;\r\n        public chargementEnCours: boolean;\r\n        public erreurSelection: boolean;\r\n        public myForm: ng.IFormController;\r\n        public txtTooltip: string;\r\n\r\n        private nomSelTemp: string;\r\n        private estCreationSelection: boolean;\r\n\r\n        // Injection de dépendances \r\n        public static $inject: string[] = [\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$q,\r\n            Constantes.Inject.Angular.$location,\r\n            Constantes.Inject.Services.ihmService,\r\n            Constantes.Inject.Services.preferencesService,\r\n            Constantes.Inject.Services.indicateurService,\r\n            Constantes.Inject.Services.modalePaniersService,\r\n            Constantes.Inject.Services.listeClientsService,\r\n            Constantes.Inject.Services.filtreService,\r\n            Constantes.Inject.Services.eventService,\r\n            Constantes.Inject.Services.contexteService\r\n        ];\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $scope: ng.IScope,\r\n            private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $q: ng.IQService,\r\n            private $location: ng.ILocationService,\r\n            //private $element: ng.IAugmentedJQuery,\r\n            private ihmService: Services.Application.IIhmService,\r\n            private preferencesService: Services.Application.IPreferencesService,\r\n            private indicateurService: Services.Application.IIndicateurService,\r\n            private modalePaniersService: Services.Application.IModalePaniersService,\r\n            private listeClientsService: Services.Application.IListeClientsService,\r\n            private filtreService: Services.Application.IFiltreService, \r\n            private eventService: Services.Application.IEventService,\r\n            private contexteService: Services.Application.IContexteService\r\n        ) {\r\n            this.txtTooltip = \"Le bouton \\\"Gérer la sélection\\\" permet de :\\n -Ajouter, supprimer et ordonner les indicateurs.\\n -Modifier le nom de la sélection.\";\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): ng.IPromise<void> {\r\n            SelectionIndicateursControleur.logger.info(\">>> Appel de la méthode : SelectionIndicateursControleur.initialiser <<<\");\r\n            this.erreurSelection = false;\r\n            this.estDispoAjoutSelection = false;\r\n            this.modalePaniersService.setSelectionIndicateursControleur(this);\r\n\r\n            // Fil Ariane\r\n            this.strFilArianePageActuelle = Constantes.Application.FIL_ARIANE_PAGE_SELECTION_INDICATEURS;\r\n            this.strFilArianePageOrigine = this.ihmService.getTypeVue() === Enum.PageClients.TYPE_VUE.VUE_CLIENTS ? \"Clients\" : \"Relations économiques\";\r\n\r\n            if (!this.estEnEditionPanier) {\r\n                this.estEnEditionPanier = false;\r\n            }\r\n\r\n            this.listeTotaleIndicateurs = this.indicateurService.getListeTotaleIndicateursType();\r\n            return this.preferencesService.lirePaniers(this.listeTotaleIndicateurs, true).then((lstPaniers: Array<Modeles.Application.IPanier>) => {\r\n                if (!this.listePaniers) {\r\n                    this.listePaniers = lstPaniers ? lstPaniers : [];\r\n                }\r\n                this.estDispoAjoutSelection = !this.listePaniers || this.listePaniers.length < Constantes.Application.LIMITE_NB_PANIERS;\r\n                if (!this.panierEnCours) { // premier passage dans l'initialisation\r\n                    this.panierEnCours = Services.Utils.ApplicationUtils.recupererPanierDefaut(this.listePaniers);\r\n                    if (!this.panierDefaut) {\r\n                        this.panierDefaut = this.panierEnCours;\r\n                    }\r\n                }\r\n                \r\n                // Creation de listeTuileCatalogueSettings\r\n                this.creationListeCatalogueSettings();\r\n\r\n                // Création de listeTuilePanierSettings\r\n                this.creationListePanierSettings();\r\n\r\n                //this.listeFiltresClients = this.filtreService.getListeFiltresClients();\r\n                //this.listeFiltresRelationEco = this.filtreService.getListeFiltresRelationsEco();\r\n\r\n                // Création des paramètres du drop du panier\r\n                this.panierDropSettings = this.panierDropSettings ? this.panierDropSettings : this.modalePaniersService.creerDropSettings(this.panierDeposeEvent);\r\n\r\n                // Création des paramètres du drop de la poubelle\r\n                this.poubelleDropSettings = this.poubelleDropSettings ? this.poubelleDropSettings : this.modalePaniersService.creerDropSettings(this.poubelleDeposeEvent);\r\n\r\n                this.setEstActiverDropPanier(this.estEnEditionPanier);\r\n                this.setEstAfficherDropPoubelle(this.estEnEditionPanier);\r\n\r\n                // BDRL-1616: si aucune sélection, on passe directement en mode saisie de nouvelle sélection\r\n                if (this.listePaniers.length === 0) {\r\n                    return this.ajouterSelection();\r\n                } else {\r\n                    return this.$q.when();\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        /**\r\n         * Méthode permettant de rafraichir listeTuileCatalogueSettings\r\n         * @return {void}\r\n         */\r\n        public rafraichirListeTuileCatalogueSettings(): void {\r\n           \r\n            if (this.estEnEditionPanier) {\r\n                _.forEach(this.listeTuilePanierSettings, (tuile: Modeles.Application.ITuilePanierSettings) => {\r\n                    tuile.estEnEdition = true;\r\n                    //if (!tuile.dragSettings) {\r\n                    //    tuile.dragSettings = this.eventService.getDefautDragSettingsPfCoreDraggableControleur();\r\n                    //}\r\n                });\r\n\r\n                _.forEach(this.listeTuileCatalogueSettings, (tuile: Modeles.Application.ITuileCatalogueSettings) => {\r\n                    // gestion du nombre max atteint\r\n                    if (this.listeTuilePanierSettings.length >= Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {\r\n                        tuile.estEnEdition = false;\r\n                        tuile.dragSettings.desactiverDrag();\r\n                    } else {\r\n                        let indicateurExistant = _.find(this.listeTuilePanierSettings, (tuilePanier: Modeles.Application.ITuilePanierSettings) => {\r\n                            return tuile.indicateur.indicateur.code === tuilePanier.indicateur.indicateur.code;\r\n                        });\r\n                        if (indicateurExistant) {\r\n                            tuile.estEnEdition = false;\r\n                            tuile.indicateur.choisi = true;\r\n                            tuile.dragSettings.desactiverDrag();\r\n                        } else {\r\n                            tuile.estEnEdition = true;\r\n                            tuile.dragSettings.activerDrag();\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        ///**\r\n        // * Variable contenant la méthode a appelé lorsqu'un indicateur est déposé dans le panier\r\n        // */\r\n        public panierDeposeEvent = (tuileCatalogueSettings: Modeles.Application.ITuileCatalogueSettings) => {\r\n\r\n            // Changement de l'état de l'indicateur\r\n            tuileCatalogueSettings.indicateur.choisi = true;\r\n\r\n            // Création de la nouvelle tuile panier\r\n            let tuilePanierSettings = <Modeles.Application.ITuilePanierSettings>{};\r\n            tuilePanierSettings.id = this.modalePaniersService.genererIdentifiantAleatoire();\r\n            tuilePanierSettings.indicateur = tuileCatalogueSettings.indicateur;\r\n            this.listeTuilePanierSettings.push(tuilePanierSettings);\r\n\r\n            // On desactive les drops du panier\r\n            this.setEstActiverDropPanier(false);\r\n            this.modalePaniersService.desactiverDropTuilesPanier(this.listeTuilePanierSettings);\r\n\r\n            // Rafraichir listeTuileCatalogueSettings\r\n            this.rafraichirListeTuileCatalogueSettings();\r\n\r\n            // si le nombre d'indicateur max est atteint\r\n            if (this.getNombreIndicateurPanier() === Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {\r\n\r\n                // Desactivation du drag sur les tuiles du catalogue\r\n                _.forEach(this.listeTuileCatalogueSettings, (tuile: Modeles.Application.ITuileCatalogueSettings) => {\r\n                    tuile.dragSettings.desactiverDrag();\r\n                });\r\n\r\n                // On cache le bouton ajouter\r\n                //this.setEstAfficherBoutonAjouter(false); \r\n            }\r\n\r\n        //    // Mise à jour du message d'avertissement de modification de filtre\r\n        //    this.modalePaniersService.afficherMessageAvertissementFiltre(\r\n        //        this.listeFiltresRelationEco,\r\n        //        this.listeFiltresClients,\r\n        //        _.pluck(this.listeTuilePanierSettings, \"indicateur\"));\r\n\r\n            this.$scope.$applyAsync();\r\n            //this.$scope.$apply();\r\n        };\r\n\r\n        /**\r\n         * Méthode permettant de retourner le nombre d'indicateur présent dans le panier en cours\r\n         * @return {void}\r\n         */\r\n        public getNombreIndicateurPanier(): number {\r\n            return this.listeTuilePanierSettings.length;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'état du drop panier\r\n         * @param {boolean} estAfficher\r\n         * @returns {void}\r\n         */\r\n        public setEstActiverDropPanier(estAfficher: boolean): void {\r\n            if (estAfficher) {\r\n                this.estAfficherDropPanier = true;\r\n                if (this.panierDropSettings.activerDragOver) {\r\n                    this.panierDropSettings.activerDragOver();\r\n                }\r\n            } else {\r\n                this.estAfficherDropPanier = false;\r\n                if (this.panierDropSettings.desactiverDragOver) {\r\n                    this.panierDropSettings.desactiverDragOver();\r\n                }\r\n            }\r\n            this.$scope.$applyAsync();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'état du drop poubelle\r\n         * @param {boolean} estAfficher\r\n         * @returns {void}\r\n         */\r\n        public setEstAfficherDropPoubelle(estAfficher: boolean): void {\r\n            if (estAfficher) {\r\n                if (this.poubelleDropSettings.activerDragOver) {\r\n                    this.poubelleDropSettings.activerDragOver();\r\n                }\r\n            } else {\r\n                if (this.poubelleDropSettings.desactiverDragOver) {\r\n                    this.poubelleDropSettings.desactiverDragOver();\r\n                }\r\n            }\r\n            this.$scope.$applyAsync(); \r\n        }\r\n\r\n        /**\r\n         * Variable contenant la méthode a appelé lorsqu'un indicateur est déposé dans la poubelle\r\n         */\r\n        public poubelleDeposeEvent = (tuilePanierSettings: Modeles.Application.ITuilePanierSettings) => {\r\n\r\n            // Récupération de la tuile catalogue\r\n            let tuileCatalogue = _.find(this.listeTuileCatalogueSettings, (tuile: Modeles.Application.ITuileCatalogueSettings) => {\r\n                return tuile.indicateur.indicateur.code === tuilePanierSettings.indicateur.indicateur.code;\r\n            });\r\n\r\n            tuileCatalogue.estEnEdition = true;\r\n\r\n            this.modalePaniersService.supprimerIndicateurPanier(\r\n                tuilePanierSettings,\r\n                this.listeTuileCatalogueSettings,\r\n                this.listeTuilePanierSettings,\r\n                undefined,\r\n                undefined);\r\n\r\n            // On cache le drop poubelle\r\n            this.setEstAfficherDropPoubelle(false);\r\n\r\n            // On desactive les drops des tuiles du panier\r\n            this.modalePaniersService.desactiverDropTuilesPanier(this.listeTuilePanierSettings);\r\n        };\r\n\r\n        private creationListePanierSettings(): void {\r\n            this.listeTuilePanierSettings = [];\r\n            if (this.panierEnCours) {\r\n                _.forEach(this.panierEnCours.listeChoixIndicateurs, (indicateur: Modeles.Application.IIndicateurChoix) => {\r\n                    let tuilePanierSettings = <Modeles.Application.ITuilePanierSettings>{};\r\n                    tuilePanierSettings.id = this.modalePaniersService.genererIdentifiantAleatoire();\r\n                    tuilePanierSettings.indicateur = indicateur;\r\n                    tuilePanierSettings.estEnEdition = this.estEnEditionPanier;\r\n\r\n                    this.listeTuilePanierSettings.push(tuilePanierSettings);\r\n                });\r\n            }\r\n        }\r\n\r\n        private creationListeCatalogueSettings(): void {\r\n            this.listeTuileCatalogueSettings = [];\r\n            _.forEach(this.listeTotaleIndicateurs, (indicateur: Modeles.Application.IIndicateurType) => {\r\n\r\n                if (indicateur.estVisibleColonne) {\r\n\r\n                    let tuileCatalogueSettings = <Modeles.Application.ITuileCatalogueSettings>{};\r\n                    tuileCatalogueSettings.id = this.modalePaniersService.genererIdentifiantAleatoire();\r\n                    tuileCatalogueSettings.estEnEdition = this.estEnEditionPanier && this.panierEnCours.listeChoixIndicateurs.length < Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX;\r\n\r\n                    // Récupération de l'indicateur\r\n                    let indicateurExistant: Modeles.Application.IIndicateurChoix;\r\n                    if (this.panierEnCours) {\r\n                        indicateurExistant = _.find(this.panierEnCours.listeChoixIndicateurs, (indicateurChoix: Modeles.Application.IIndicateurChoix) => {\r\n                            return indicateurChoix.indicateur.code === indicateur.code;\r\n                        });\r\n                    }\r\n\r\n                    if (indicateurExistant) {\r\n                        tuileCatalogueSettings.indicateur = indicateurExistant;\r\n                        tuileCatalogueSettings.estEnEdition = false;\r\n                    } else {\r\n                        let indicateurCatalogue = <Modeles.Application.IIndicateurChoix>{};\r\n                        indicateurCatalogue.indicateur = indicateur;\r\n                        indicateurCatalogue.choisi = false;\r\n                        tuileCatalogueSettings.indicateur = indicateurCatalogue;\r\n                    }\r\n\r\n                    this.listeTuileCatalogueSettings.push(tuileCatalogueSettings);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet d'afficher ou non le message d'avertissement filtre\r\n         * @param {string} nomFiltre1\r\n         * @param {string} nomFiltre2\r\n         * @param {string} nomFiltre3\r\n         * @param {string} nomFiltre4\r\n         * @return {void}\r\n         */\r\n        public afficherMessageAvertissementFiltre(nomFiltre1: string, nomFiltre2: string, nomFiltre3: string, nomFiltre4: string): void {\r\n            this.nomFiltre1 = nomFiltre1;\r\n            this.nomFiltre2 = nomFiltre2;\r\n            this.nomFiltre3 = nomFiltre3;\r\n            this.nomFiltre4 = nomFiltre4;\r\n        } \r\n\r\n        public getEtatNbIndicateurs(): string {\r\n            if (!this.panierEnCours) {\r\n                return \"\";\r\n            }\r\n            return `Nombre d'indicateurs: ${this.listeTuilePanierSettings.length}/${Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX}`; \r\n        }\r\n\r\n        public getEtatNbSelections(): string {\r\n            if (!this.listePaniers) {\r\n                return \"\";\r\n            }\r\n            return `${this.listePaniers.length}/${Constantes.Application.LIMITE_NB_PANIERS}`;\r\n        }\r\n\r\n\r\n        public getRoleIndicateurSelection(): string {\r\n            if (this.erreurSelection) {\r\n                return \"alert\";\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        public getRoleIndicateurNom(): string {\r\n            if (this.myForm[\"nom\"].$invalid) {\r\n                return \"alert\";\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode pour passer en mode édition sur le panier en cours\r\n         */\r\n        public gererSelection(): ng.IPromise<void> {\r\n            \r\n            // ajoute une action remarquable\r\n            this.contexteService.tracerSuiviAction(SelectionIndicateursControleur.logger, Constantes.ActionsRemarquables.BTN_PERSO_INDIC);\r\n        \r\n            if (this.panierEnCours) {\r\n                this.estEnEditionPanier = true;\r\n                this.modalePaniersService.majEstEditionPanier(true);\r\n                // On sauve le nom de la selection qui va être modifier en cas d'annulation\r\n                this.nomSelTemp = this.panierEnCours.nom;\r\n                this.chargementEnCours = true;\r\n                return this.initialiser().then(() => {\r\n                    this.chargementEnCours = false;\r\n                });\r\n            } else {\r\n                this.erreurSelection = true;\r\n                return this.$q.when();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode de changement de selection dans la combo de la liste des sélections\r\n         * @param $item\r\n         */\r\n        public changePanier($item: Modeles.Application.IPanier): ng.IPromise<void> {\r\n            this.panierEnCours = $item;\r\n            this.erreurSelection = false;\r\n            // on initialise\r\n            return this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode pour passer en mode édition sur une nouvelle sélection\r\n         */\r\n        public ajouterSelection(): ng.IPromise<void> {\r\n            this.panierEnCours = Services.Utils.ApplicationUtils.recupererNouvelleSelection();\r\n            this.listePaniers.push(this.panierEnCours);\r\n            this.estEnEditionPanier = true;\r\n            this.modalePaniersService.majEstEditionPanier(true);\r\n            this.estCreationSelection = true;\r\n            return this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode de mise à jour du panier par défaut et de retour à la page précédente\r\n         */\r\n        public appliquer(): ng.IPromise<void> {\r\n            if (this.panierEnCours) {\r\n                this.chargementEnCours = true;\r\n                _.forEach(this.listePaniers, (panier: Modeles.Application.IPanier) => {\r\n                    if (panier.numero === this.panierEnCours.numero) {\r\n                        panier.estDefaut = true;\r\n                    } else {\r\n                        panier.estDefaut = false;\r\n                    }\r\n                });\r\n                return this.majIndicateursClientsPanierEnCours().then(() => {\r\n                    return this.preferencesService.ecrirePaniers(this.listePaniers).then(() => {\r\n                        this.$location.path(Constantes.Url.CLIENTS);\r\n                        return this.$q.when();\r\n                    });\r\n                });\r\n            } else {\r\n                this.erreurSelection = true;\r\n                return this.$q.when();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de mettre à jour les indicateurs clients pour le panier en cours \r\n         * @returns {ng.IPromise<void>}\r\n         */\r\n        private majIndicateursClientsPanierEnCours(): ng.IPromise<void> {\r\n            return this.majIndicateursClientsPanier(this.panierEnCours.listeChoixIndicateurs);\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de mettre à jour les indicateurs clients pour le panier par defaut \r\n         * @returns {ng.IPromise<void>}\r\n         */\r\n        private majIndicateursClientsPanierDefaut(): ng.IPromise<void> {\r\n            return this.majIndicateursClientsPanier(this.panierDefaut.listeChoixIndicateurs);\r\n        }\r\n\r\n        private majIndicateursClientsPanier(listeChoixIndicateurs: Array<Modeles.Application.IIndicateurChoix>): ng.IPromise<void> {\r\n            // on va mettre à jour la liste relation avec les nouveaux indicateurs paramétrables si nécéssaire\r\n            let listeEcartIndicateursParametrables: Array<Modeles.Application.IIndicateurType> =\r\n                this.indicateurService.getListeEcartIndicateurParametrable(listeChoixIndicateurs);\r\n            this.indicateurService.setListeIndicateurChoix(listeChoixIndicateurs);\r\n            if (listeEcartIndicateursParametrables.length > 0) {\r\n                return this.listeClientsService.majClientsIndicateurs(listeEcartIndicateursParametrables);\r\n            } else {\r\n                return this.$q.when();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode de retour à la page client sans modification du panier par défaut: il faut cependant prendre en compte les modifications faites sur le panier par defaut initial\r\n         */\r\n        public retour(): ng.IPromise<void> {\r\n            this.chargementEnCours = true;\r\n            if (this.panierDefaut) {\r\n                return this.majIndicateursClientsPanierDefaut().then(() => {\r\n                    this.$location.path(Constantes.Url.CLIENTS);\r\n                    return this.$q.when();\r\n                });\r\n            } else {\r\n                this.$location.path(Constantes.Url.CLIENTS);\r\n                return this.$q.when();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * méthode de retour à l'état initial de la page\r\n         */\r\n        public annulerModifSelection(): ng.IPromise<void> {\r\n            this.chargementEnCours = true;\r\n            // On remet le nom initial de la selection\r\n            if (!this.estCreationSelection) {\r\n                this.panierEnCours.nom = this.nomSelTemp;\r\n            } else {\r\n                // on supprime la selection en cours de creation\r\n                _.remove(this.listePaniers, (panier: Modeles.Application.IPanier) => {\r\n                    return !panier.numero;\r\n                });\r\n                // on remet en panierEncours le panier par defaut\r\n                this.panierEnCours = Services.Utils.ApplicationUtils.recupererPanierDefaut(this.listePaniers);\r\n            }\r\n            this.estEnEditionPanier = false;\r\n            this.modalePaniersService.majEstEditionPanier(false);\r\n            return this.initialiser().then(() => {\r\n                this.chargementEnCours = false;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode d'enregistrement de de la sélection\r\n         */\r\n        public enregistrerSelection(): ng.IPromise<void> {\r\n            this.chargementEnCours = true;\r\n            if (this.estFormulaireValide()) {\r\n                this.majPanierEnCoursAvecListeTuilesPanierSettings();\r\n                if (!this.panierDefaut) { // Cas ou on n'a pas de panier \r\n                    this.panierDefaut = this.panierEnCours;\r\n                }\r\n                return this.preferencesService.ecrirePaniers(this.listePaniers).then(() => {\r\n                    this.estEnEditionPanier = false;\r\n                    this.modalePaniersService.majEstEditionPanier(false);\r\n                    return this.initialiser().then(() => {\r\n                        this.chargementEnCours = false;\r\n                    });\r\n                });\r\n                \r\n            } else {\r\n                this.chargementEnCours = false;\r\n                return this.$q.reject();\r\n            }\r\n        }\r\n\r\n        public estNomAChanger(): boolean {\r\n            if (!Services.Utils.ApplicationUtils.estOkNomSelection(this.panierEnCours.nom)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        public estFormulaireValide(): boolean {\r\n            if (!this.panierEnCours.nom) {\r\n                this.messageErreurNomSelection = \"Le nom de la sélection est obligatoire\";\r\n                return false;\r\n            } else {\r\n                let rep: boolean = true;\r\n                // on vérifie si on n'a pas deja une autre sélection avec ce nom\r\n                _.find(this.listePaniers, (selection: Modeles.Application.IPanier) => {\r\n                    \r\n                    if (selection.nom.toLowerCase() === this.panierEnCours.nom.toLowerCase() && selection.numero !== this.panierEnCours.numero) {\r\n                        this.messageErreurNomSelection = \"Nom de sélection déja utilisé\";\r\n                        rep = false;\r\n                    };\r\n                });\r\n                if (rep) {\r\n                    this.messageErreurNomSelection = \"\";\r\n                }\r\n                return rep;\r\n            }\r\n        }\r\n\r\n        public afficherTuileEmplacementVide(): boolean {\r\n            return this.listeTuilePanierSettings.length < Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX;\r\n        }\r\n\r\n        /**\r\n         * Méthode de mise à jour du panier en cours avec listeTuilePanierSettings\r\n         */\r\n        private majPanierEnCoursAvecListeTuilesPanierSettings(): void {\r\n            this.panierEnCours.listeChoixIndicateurs = [];\r\n            _.forEach(this.listeTuilePanierSettings, (tuilePanierSettings: Modeles.Application.ITuilePanierSettings) => {\r\n                let indic: Modeles.Application.IIndicateurChoix = tuilePanierSettings.indicateur;\r\n                this.panierEnCours.listeChoixIndicateurs.push(indic);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(SelectionIndicateursControleur.CLASS_NAME, SelectionIndicateursControleur);\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";\r\n       \r\n    export module ActionsRemarquables {\r\n        export const BTN_CHANGER_AGENT: string = \"BTN_AGNT\";\r\n        export const BTN_ACCES_LISTE_CLIENTS: string = \"LST_PTF\";\r\n        export const BTN_ACCES_LISTE_CLIENTS_REVUE: string = \"LST_REV\";\r\n        export const BTN_PANIER: string = \"BTN_PANIER\";\r\n        export const BTN_PERSO_INDIC: string = \"BTN_INDIC\";\r\n        export const BTN_FILTRES: string = \"BTN_FILTRES\";\r\n        export const BTN_EXPORT: string = \"BTN_EXPORT\";\r\n        export const BTN_CONS_PROD: string = \"BTN_CONS_PROD\";\r\n        export const BTN_EFFC_REVUE: string = \"BTN_EFFC_REVUE\";\r\n        export const BTN_SYNTH_PM: string = \"BTN_SYNTH_PM\";\r\n    }\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";\r\n\r\n    export module Service {\r\n        export let EDS_RECH_GLBL_PARAM_CODE_RELATION: string = \"002\";\r\n        export let EDS_RECH_GLBL_PARAM_PRES_PM_PAR_FCT: boolean = true;\r\n        export let RELATION_COMMERCIALE_NB_MAX_RES: number = 350;   \r\n        export let RELATION_COMMERCIALE_NB_MAX_NO_LIMIT: number = 9999;\r\n        export let RELATION_COMMERCIALE_CODE_MAX_CLIENT_ATTEINT: string = \"MAX_CLIENTS_ATTEINT\";\r\n    }\r\n}","/* Fichier pré-requis pour utiliser c'est constantes\r\n * sans cela une erreur est produite lors de l'execution */\r\n/// <reference path=\"./service-constantes.ts\" />\r\n\r\n\r\nmodule Portefeuille.Constantes {\r\n    \"use strict\";\r\n\r\n    export module Application {\r\n        export let TITRE_APPLICATION: string = \"Animer les portefeuilles PM et EI\";\r\n        export let TITRE_VUE_CLIENT: string = \"Liste des clients\";\r\n        export let TITRE_VUE_RELATION: string = \"Liste des relations économiques\";\r\n        export let CHAINE_INDICATEUR_ACTIF: string = \"Actif\";\r\n        export let CHAINE_INDICATEUR_INACTIF: string = \"Inactif\";\r\n        export let CHAINE_INDICATEUR_CLIENT: string = \"Client\";\r\n        export let CHAINE_INDICATEUR_TIERS: string = \"Tiers\";\r\n        export let CHAINE_INDICATEUR_PROSPECT: string = \"Prospect\";\r\n        export let CHAINE_INDICATEUR_LEADER: string = \"Leader\";\r\n        export let CHAINE_INDICATEUR_NON_CONNU: string = \"NC\";\r\n        export let CHAINE_AJOUT_PERSONNALISATION: string = \"Ajouter nouvelle personnalisation\";\r\n        export let CHAINE_OUI: string = \"Oui\";\r\n        export let CHAINE_NON: string = \"Non\";\r\n        export let FORMAT_DATE_IHM: string = \"DD/MM/YYYY\";\r\n        export let FORMAT_DATE_REST: string = \"YYYY-MM-DD\";\r\n\r\n        export let CODE_HABILITATION_CHOIX_EDS: string = \"SHDC23\";\r\n        export let CODE_HABILITATION_AGENCE_NIVEAU_2: string = \"SHDC23\";\r\n        export let CODE_HABILITATION_ACCES_PNB: string = \"SHDC26\";\r\n        export let CODE_HABILITATION_CONSULT_REVUE: string = \"SHDC24\";\r\n        export let CODE_HABILITATION_CONSULT_AFFAIRES: string = \"SHP6AF\";\r\n        export let CODE_HABILITATION_CONSULT_PROPOSITIONS: string = \"SHPI04\";\r\n        export let CODE_HABILITATION_MAJ_REVUE: string = \"SHDC25\";\r\n        export let CODE_HABILITATION_CONSULT_POT_PROSPECT: string = \"SHPIQ1\";\r\n        export let CODE_HABILITATION_MAJ_POT_PROSPECT: string = \"SHPIQ2\";\r\n        export let CODE_HABILITATION_CONSULT_SEGMENTATIONS: string = \"SHDL01\";\r\n        export let CODE_HABILITATION_CHOIX_AGENT: string = \"SHDC22\";\r\n\r\n        export let TXT_SELECTIONNER_TOUT: string = \"Sélectionner tout\";\r\n        export let TXT_DESELECTIONNER_TOUT: string = \"Désélectionner tout\";\r\n        export let NB_LIGNE_TABLEAU: number = 20;\r\n        export let CODE_LEADER_RELATION: string = \"L\";\r\n        export let CHAINE_NOM_PANIER_INDICATEUR: string = \"Ma sélection d'indicateurs\";\r\n        export let TXT_CHOIX_PORTEFEUILLE: string = \"Choix de portefeuille\";\r\n        export let CLASSE_COLONNE_CLIENTS: string = \".colonne-clients\";\r\n        export let CLASSE_COLONNE_RELATIONS: string = \".colonne-relations\";\r\n        export let CLASSE_BTN_FILTRE: string = \".btn-filtre\";\r\n        export let ID_TABLE_CLIENT: string = \"#tab-client\";\r\n        export let CLASSE_ACTIF: string = \"actif\";\r\n        export let LIMITE_CLIENTS_ATTEINTE_CHOIX_CLIENTS_SINGULIER: string = \"Votre portefeuille est filtré, seuls les clients sont affichés.\";\r\n        export let LIMITE_CLIENTS_ATTEINTE_CHOIX_PROSPECTS_SINGULIER: string = \"Votre portefeuille est filtré, seuls les prospects sont affichés.\";\r\n        export let LIMITE_CLIENTS_ATTEINTE_CHOIX_CLIENTS_PLURIEL: string = \"Vos portefeuilles sont filtrés, seuls les clients sont affichés.\";\r\n        export let LIMITE_CLIENTS_ATTEINTE_CHOIX_PROSPECTS_PLURIEL: string = \"Vos portefeuilles sont filtrés, seuls les prospects sont affichés.\";\r\n        export let LIMITE_CLIENTS_ATTEINTE_CHOIX_TOUT_SINGULIER: string = `Votre portefeuille comporte plus de ${Constantes.Service.RELATION_COMMERCIALE_NB_MAX_RES} clients/prospects.`;\r\n        export let LIMITE_CLIENTS_ATTEINTE_CHOIX_TOUT_PLURIEL: string = `Vos portefeuilles comportent plus de ${Constantes.Service.RELATION_COMMERCIALE_NB_MAX_RES} clients/prospects.`;\r\n        export let LISTE_RELATIONS_ECONOMIQUES_INACCESSIBLE: string = \"La liste des relations économiques n'est pas accessible.\";\r\n        export let INDICATEURS_PREDEFINIS_NON_MODIFIABLES: string = \"Les indicateurs sont prédéfinis et non modifiables.\";\r\n        export let NOM_PANIER_FORCAGE: string = \"Indicateurs prédéfinis\";\r\n        export let NOM_PANIER_DEFAUT: string = \"Ma sélection d'indicateurs\";\r\n        export let NOM_PANIER_CREATION: string = \"Sélection d'indicateurs\";\r\n        export let LIMITE_NB_PANIERS: number = 3;\r\n        export let FIL_ARIANE_PAGE_SELECTION_INDICATEURS: string = \"Personnaliser les indicateurs\";\r\n\r\n        //Vue Globale => Partie \"Portefeuille\"\r\n        export let DIAGRAMME_COLONNE_CLIENTS: string = \"Clients\";\r\n        export let DIAGRAMME_COLONNE_CLIENTS_ACTIFS: string = \"Dont actifs\";\r\n        export let DIAGRAMME_COLONNE_SANS_CONTRAT: string = \"Dont clients sans contrat\";\r\n        export let DIAGRAMME_COLONNE_PROSPECTS: string = \"Prospects et<br>clients sans contrat\";\r\n        export let DIAGRAMME_COLONNE_RELATIONS: string = \"Relations\";\r\n        export let BADGE_CLIENTS_PME_ESI: string = \"Clients PME et ESI\";\r\n        export let BADGE_CLIENTS_PE_ET_PEES: string = \"Dont clients PE et PEES\";\r\n        export let BADGE_CLIENTS_ME_ET_MEES: string = \"Dont clients ME et MEES\";\r\n        export let BADGE_CLIENTS_GE_ET_GEES: string = \"Dont clients GE et GEES\";\r\n        export let BADGE_CLIENTS_PRO: string = \"Clients Pro\";\r\n        export let BADGE_AUTRES_CLIENTS: string = \"Clients autres marchés\";\r\n        export let GRAPHE_SEGMENTATION_TITRE: string = \"Segmentation relationnelle\";\r\n        export let GRAPHE_SEGMENTATION_TITRE_GROUPE: string = \"Segmentation relationnelle groupe\";\r\n        export let GRAPHE_SEGMENTATION_TITRE_CLIENT: string = \"Segmentation relationnelle client\";\r\n        export let PUCE_SEGMENTATION_FIDELISER: string = \"A fidéliser\";\r\n        export let PUCE_SEGMENTATION_SURVEILLER: string = \"A surveiller\";\r\n        export let PUCE_SEGMENTATION_DEVELOPPER: string = \"A développer\";\r\n        export let PUCE_SEGMENTATION_ACQUERIR: string = \"A acquérir\";\r\n        export let PUCE_SEGMENTATION_GERER: string = \"A gérer\";\r\n        export let PUCE_SEGMENTATION_PRESERVER: string = \"A préserver\";\r\n        export let PUCE_SEGMENTATION_NON_SEGMENTE: string = \"Non segmenté\";\r\n        export const DONUT_PRO: string = \"PRO\";\r\n        export const DONUT_PME_ESI: string = \"PME/ESI\";\r\n        export const TABLE_DELOC_SEGMENTATIONS: string = \"DU2L\";\r\n\r\n        //Vue Globale => Partie \"Rentabilité\"\r\n        export let GRAPHE_POIDS_PNB: string = \"Poids du PNB des 10 relations économiques les plus importantes\";\r\n\r\n        // SPC identifiant maximum de portefeuille qui ne sont pas des id portfeuille mais des type de suivi par complémentaires\r\n        // Pour le moment 13/06/2024, les type de suivi par complémentaire vont de 001 à 009.\r\n        // Les id portefeuille en production commencent à 1 mais les 20 premiers sont des portefeuilles collectifs ou reservoire\r\n        export const ID_PORTEFEUILLE_MAX_SPC = 20;\r\n\r\n        //Vue Globale => Partie \"Revue Portefeuille\"\r\n        export let BADGE_PRODUITS_PROPOSER: string = \"Produits à proposer\";\r\n        export let BADGE_APPETENCE_PRODUITS: string = \"Appétence produits\";\r\n        export let BADGE_CLIENTS_ACTIVER: string = \"Clients à activer\";\r\n        export let BADGE_CLIENTS_RENEGOCIER: string = \"Tarifications à renégocier\";\r\n\r\n        export let BADGE_PROPOSITIONS_EN_COURS: string = \"Propositions en cours\";\r\n        export let BADGE_AFFAIRES_EN_COURS: string = \"Affaires en cours\";\r\n\r\n        export let GRAPHE_REVUE_PORTEFEUILLE: string = \"Taux de revues\";\r\n\r\n        //Vue Globale => Partie \"Rendez-vous\"\r\n        export let TITRE_PANEL_RDV: string = \"Activité commerciale depuis le 1er janvier \"; //Suivi de l'année en cours\r\n        export let TITRE_PANEL_RDV_AVEC_CRE: string = \"(RDV avec CRE)\";\r\n        export let BADGE_RDV_REALISES_ANNEE_EN_COURS: string = \"RDV réalisés\";\r\n        export let BADGE_CLIENTS_REALISES_ANNEE_EN_COURS: string = \"Dont RDV Clients\";\r\n        export let BADGE_PROSPECTS_REALISES_ANNEE_EN_COURS: string = \"Dont RDV Prospects et clients sans contrat\";\r\n        export let BADGE_PROSPECTS_VUS_ANNEE_EN_COURS: string = \"Prospects rencontrés\";\r\n        export let BADGE_RELATION_ECONOMIQUE_ANNEE_EN_COURS: string = \"Relations économiques rencontrées\";\r\n\r\n        //Libellés IHM associés aux codes segmentation Pro\r\n        export const LIBELLE_AGGLOMERAT_ENTREE_RELATION: string = \"Entrée en relation\";\r\n        export const LIBELLE_AGGLOMERAT_RISQUE: string = \"Risqué\";\r\n        export const LIBELLE_AGGLOMERAT_PRO_NON_CAPTE: string = \"Faiblement/Non capté\";\r\n        export const LIBELLE_AGGLOMERAT_PRO_PARTIELLEMENT_CAPTE: string = \"Partiellement capté\";\r\n        export const LIBELLE_AGGLOMERAT_PRO_LARGEMENT_CAPTE: string = \"Largement capté\";\r\n        export const LIBELLE_AGGLOMERAT_AUTRES: string = \"Non concerné/calculé\";\r\n\r\n        //Fin de chaîne pour la chaîne max utilisée lors des tris dans tableau relations éco et clients\r\n        export const FIN_CHAINE_MAX: string = new Date().toDateString();\r\n        export const DATE_MIN: string = \"1970/01/01\";\r\n        export const DATE_MAX: string = \"9999/12/31\";\r\n        export const DONNEE_NUMBER: string = \"number\";\r\n        export const DONNEE_STRING: string = \"string\";\r\n        export const DONNEE_VALEUR_NUMBER: string = \"valeurNumber\";\r\n        export const DONNEE_VALEUR_DATE: string = \"valeurDate\";\r\n\r\n        export const LIBELLE_NOTE_PROSPECT: string[] = [\"0\", \"1 étoile\", \"2 étoiles\", \"3 étoiles\"];\r\n\r\n        export const LIBELLE_TOP_CC_BLANC: string = \"Blanc\";\r\n    }\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";       \r\n    export module Contexte {\r\n        export const CONTEXTE_GERR_PORTF: string = \"contexteProcessusGererPortefeuille\";\r\n        export const CONTEXTE_VERS_REVUE: string = \"contexteVersRevue\";\r\n        export const CONTEXTE_EDS_PORTEFEUILLES: string = \"contexteEdsPortefeuilles\";\r\n        export const IDENTIFIANT_PERSONNE: string = \"identifiantPersonne\";\r\n        export const ACCES_DEPUIS_BLOC_REVUE: string = \"accesDepuisBlocRevue\";\r\n        export const TYPE_SYNTHESE: string = \"typeSynthese\";\r\n    };\r\n}","/* Fichier pré-requis pour utiliser c'est constantes \r\n * sans cela une erreur est produite lors de l'execution */\r\n/// <reference path=\"../enums/application-enums.ts\" />\r\n    \r\n\r\nmodule Portefeuille.Constantes {\r\n    \"use strict\";\r\n       \r\n    export module Indicateur {\r\n        export const ORDRE_INDICATEUR: Array<string> = [\r\n            Enum.Indicateur.CODE.CA_N_MOINS_1.toString(),\r\n            Enum.Indicateur.CODE.CA_N.toString(),\r\n            Enum.Indicateur.CODE.CLIENTPROSPECT.toString(),\r\n            Enum.Indicateur.CODE.ACTIF.toString(),\r\n            Enum.Indicateur.CODE.EQUIPE.toString(),\r\n            Enum.Indicateur.CODE.LEADER.toString(),\r\n            Enum.Indicateur.CODE.FLUX_CREDITEURS_N.toString(),\r\n            Enum.Indicateur.CODE.FLUX_CREDITEURS_N_MOINS_1.toString(),\r\n            Enum.Indicateur.CODE.FLUX_DEBITEURS_N.toString(),\r\n            Enum.Indicateur.CODE.FLUX_DEBITEURS_N_MOINS_1.toString(),\r\n            Enum.Indicateur.CODE.OBJECTIF_FLUX.toString(),\r\n            Enum.Indicateur.CODE.NB_AFFAIRES_EN_COURS.toString(),\r\n            Enum.Indicateur.CODE.NB_APPETENCES.toString(),\r\n            Enum.Indicateur.CODE.NB_PROPOSITIONS_EN_COURS.toString(),\r\n            Enum.Indicateur.CODE.PNB_3112.toString(),\r\n            Enum.Indicateur.CODE.PNB_N.toString(),\r\n            Enum.Indicateur.CODE.PNB_N_MOINS_1.toString(),\r\n            Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString(),\r\n            Enum.Indicateur.CODE.SCORE_ACTIVATION.toString(),\r\n            Enum.Indicateur.CODE.SCORE_APPETENCE.toString(),\r\n            Enum.Indicateur.CODE.SCORE_DEFAILLANCE.toString(),\r\n            Enum.Indicateur.CODE.DATE_DERNIER_ENTRETIEN.toString(),\r\n            Enum.Indicateur.CODE.DATE_DERNIER_RDV.toString(),\r\n            Enum.Indicateur.CODE.NB_RDV_12_MOIS_GLISSANTS.toString(),\r\n            Enum.Indicateur.CODE.NB_RDV_ANNEE_EN_COURS.toString(),\r\n            Enum.Indicateur.CODE.DATE_PROCHAIN_RDV.toString(),\r\n            Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString(),\r\n            Enum.Indicateur.CODE.REV_NB_SSFAMILLES_PROPOSE.toString(),\r\n            Enum.Indicateur.CODE.REV_VALIDEE_PAR.toString(),\r\n            Enum.Indicateur.CODE.NOTE_BALE2.toString(),\r\n            Enum.Indicateur.CODE.PART_ENGAG.toString(),\r\n            Enum.Indicateur.CODE.PROCHAINE_REVISION.toString(),\r\n            Enum.Indicateur.CODE.MARCHE.toString(),\r\n            Enum.Indicateur.CODE.SEG_RELATIONNELLE.toString(),\r\n            Enum.Indicateur.CODE.SEG_RELATIONNELLE_GROUPE.toString(),\r\n            Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString(),\r\n            Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG.toString(),\r\n            Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TEXTE.toString(),\r\n            Enum.Indicateur.CODE.ENCOURS_BDF.toString(),\r\n            Enum.Indicateur.CODE.BEGACLI.toString()\r\n        ];\r\n\r\n        export const ORDRE_INDICATEUR_REVUE: Array<string> = [\r\n            Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString(),\r\n            Enum.Indicateur.CODE.REV_VALIDEE_PAR.toString(),\r\n            Enum.Indicateur.CODE.NB_APPETENCES.toString(),\r\n            Enum.Indicateur.CODE.REV_NB_SSFAMILLES_PROPOSE.toString(),\r\n            Enum.Indicateur.CODE.NB_AFFAIRES_EN_COURS.toString(),\r\n            Enum.Indicateur.CODE.NB_PROPOSITIONS_EN_COURS.toString(),\r\n            Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString()];\r\n\r\n        export const INDICATEUR_PANIER_FORCAGE: Array<string> = [\r\n            Enum.Indicateur.CODE.SEG_RELATIONNELLE.toString(),\r\n            Enum.Indicateur.CODE.DATE_DERNIER_ENTRETIEN.toString(),\r\n            Enum.Indicateur.CODE.DATE_DERNIER_RDV.toString(),\r\n            Enum.Indicateur.CODE.DATE_PROCHAIN_RDV.toString(),\r\n            Enum.Indicateur.CODE.NB_RDV_ANNEE_EN_COURS.toString(),\r\n            Enum.Indicateur.CODE.NB_RDV_12_MOIS_GLISSANTS.toString()];\r\n\r\n        export const INDICATEUR_EN_EURO: Array<string> = [\r\n            Enum.Indicateur.CODE.PNB_3112.toString(),\r\n            Enum.Indicateur.CODE.PNB_N.toString(),\r\n            Enum.Indicateur.CODE.PNB_N_MOINS_1.toString(),\r\n            Enum.Indicateur.CODEREL.PNB_3112.toString(),\r\n            Enum.Indicateur.CODEREL.PNB_N.toString(),\r\n            Enum.Indicateur.CODEREL.PNB_N_MOINS_1.toString()\r\n        ];\r\n\r\n        export const INDICATEUR_TAG: Array<string> = [\r\n            Enum.Indicateur.CODE.CLIENTPROSPECT.toString(),\r\n            Enum.Indicateur.CODE.ACTIF.toString(),\r\n            Enum.Indicateur.CODE.EQUIPE.toString(),\r\n            Enum.Indicateur.CODE.LEADER.toString(),\r\n            Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TEXTE.toString()\r\n            //    Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG.toString()\r\n        ];\r\n\r\n        export const INDICATEUR_CEER_MANUELLEMENT: Array<string> = [\r\n            Enum.Indicateur.CODEREL.REV_NB_SSFAMILLES_PROPOSE.toString(),\r\n            Enum.Indicateur.CODEREL.PNB_3112.toString(),\r\n            Enum.Indicateur.CODEREL.PNB_N.toString(),\r\n            Enum.Indicateur.CODEREL.PNB_N_MOINS_1.toString(),\r\n            Enum.Indicateur.CODEREL.PNB_N_MOINS_1.toString(),\r\n            Enum.Indicateur.CODEREL.NB_AFFAIRES_EN_COURS.toString(),\r\n            Enum.Indicateur.CODEREL.NB_PROPOSITIONS_EN_COURS.toString(),\r\n            Enum.Indicateur.CODEREL.NB_APPETENCES.toString(),\r\n            Enum.Indicateur.CODEREL.SEG_RELATIONNELLE_GROUPE.toString(),\r\n            Enum.Indicateur.CODEREL.REV_DATE_DERNIERE_REVUE.toString(),\r\n            Enum.Indicateur.CODEREL.ENCOURS_BDF.toString()\r\n        ];\r\n\r\n        export const LISTE_COMPARATEUR_COMMUNE: Array<Enum.Filtre.COMPARATEUR> = [\r\n            Enum.Filtre.COMPARATEUR.SUPERIEUR,\r\n            Enum.Filtre.COMPARATEUR.INFERIEUR,\r\n            Enum.Filtre.COMPARATEUR.EGALE,\r\n            Enum.Filtre.COMPARATEUR.ENTRE,\r\n            Enum.Filtre.COMPARATEUR.NC\r\n        ];\r\n\r\n        export const LISTE_COMPARATEUR_INTERVAL: Array<Enum.Filtre.COMPARATEUR> = [\r\n            Enum.Filtre.COMPARATEUR.SUPERIEUR,\r\n            Enum.Filtre.COMPARATEUR.INFERIEUR,\r\n            Enum.Filtre.COMPARATEUR.ENTRE,\r\n            Enum.Filtre.COMPARATEUR.NC\r\n        ];\r\n\r\n        export const LISTE_COMPARATEUR_DERNIERE_REVUE: Array<Enum.Filtre.COMPARATEUR> = [\r\n            Enum.Filtre.COMPARATEUR.ECHUE,\r\n            Enum.Filtre.COMPARATEUR.ENCOURS,\r\n            Enum.Filtre.COMPARATEUR.NONREALISEE\r\n        ];\r\n\r\n        export const LISTE_COMPARATEUR: Array<Enum.Filtre.COMPARATEUR> = [\r\n            Enum.Filtre.COMPARATEUR.ECHUE,\r\n            Enum.Filtre.COMPARATEUR.EGALE,\r\n            Enum.Filtre.COMPARATEUR.ENCOURS,\r\n            Enum.Filtre.COMPARATEUR.ENTRE,\r\n            Enum.Filtre.COMPARATEUR.INFERIEUR,\r\n            Enum.Filtre.COMPARATEUR.NC,\r\n            Enum.Filtre.COMPARATEUR.NONREALISEE,\r\n            Enum.Filtre.COMPARATEUR.SUPERIEUR\r\n        ];\r\n\r\n        export const LISTE_INDICATEUR_NUMERIQUE: Array<Enum.Indicateur.TYPE> = [\r\n            Enum.Indicateur.TYPE.NOMBRE,\r\n            Enum.Indicateur.TYPE.MONTANT,\r\n            Enum.Indicateur.TYPE.POURCENT\r\n        ];\r\n\r\n        export const LISTE_OPERATEURS_FILTRE: Array<Enum.Filtre.OPERATEUR> = [\r\n            Enum.Filtre.OPERATEUR.ET,\r\n            Enum.Filtre.OPERATEUR.OU\r\n        ];\r\n\r\n        export const LISTE_TOTAL_INDICATEUR: Array<Modeles.Application.IIndicateurType> = [\r\n            {\r\n                \"code\": Enum.Indicateur.CODE.CA_N_MOINS_1.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.CA_N_MOINS_1.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.MONTANT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.CA_N_MOINS_1.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.CA,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.CA_N_MOINS_1.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.CA_N.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.CA_N.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.MONTANT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.CA_N.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.CA,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.CA_N.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.CLIENTPROSPECT.toString(),\r\n                \"codeRest\": \"\",\r\n                \"codeRel\": Enum.Indicateur.CODEREL.CLIENTPROSPECT.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.TEXTE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.CLIENTPROSPECT.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": false,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.CLIENTPROSPECT.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.ACTIF.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.ACTIF.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.TEXTE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.ACTIF.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": false,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.ACTIF.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.EQUIPE.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.ACTIF.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.TEXTE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.NON_EQUIPE.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": false,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.SANS_CONTRAT.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.LEADER.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.ACTIF.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.TEXTE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.LEADER.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": false,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.LEADER.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.FLUX_CREDITEURS_N.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.FLUX.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.MONTANT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.FLUX_CREDITEURS_N.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.FLUX,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.FLUX_CREDITEURS_N.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.FLUX_CREDITEURS_N_MOINS_1.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.FLUX.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.MONTANT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.FLUX_CREDITEURS_N_MOINS_1.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.FLUX,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.FLUX_CREDITEURS_N_MOINS_1.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.FLUX_DEBITEURS_N.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.FLUX.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.MONTANT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.FLUX_DEBITEURS_N.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.FLUX,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.FLUX_DEBITEURS_N.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.FLUX_DEBITEURS_N_MOINS_1.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.FLUX.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.MONTANT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.FLUX_DEBITEURS_N_MOINS_1.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.FLUX,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.FLUX_DEBITEURS_N_MOINS_1.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.OBJECTIF_FLUX.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.OBJECTIF_FLUX.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.POURCENT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.OBJECTIF_FLUX.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.FLUX,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.OBJECTIF_FLUX.toString()\r\n            },\r\n            {\r\n                \"code\": Enum.Indicateur.CODE.PART_FLUX_CONFIES_CRED.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.PART_FLUX_CONFIES_CRED.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.POURCENT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.PART_FLUX_CONFIES_CRED.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.FLUX,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.PART_FLUX_CONFIES_CRED.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.PART_FLUX_CONFIES_DEB.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.PART_FLUX_CONFIES_DEB.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.POURCENT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.PART_FLUX_CONFIES_DEB.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.FLUX,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.PART_FLUX_CONFIES_DEB.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.DATE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.OPPORTUNITES,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.PREMIER_EQUIPEMENT.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.BEGACLI.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.BEGACLI.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.BEGACLI,\r\n                \"intitule\": Enum.Indicateur.INTITULE.BEGACLI.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.OPPORTUNITES,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.BEGACLI.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.NB_AFFAIRES_EN_COURS.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.AFFAIRES_EN_COURS.toString(),\r\n                \"codeRel\": Enum.Indicateur.CODEREL.NB_AFFAIRES_EN_COURS.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.NB_AFFAIRES_EN_COURS.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.OPPORTUNITES,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.NB_AFFAIRES_EN_COURS.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.NB_APPETENCES.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.NB_APPETENCES.toString(),\r\n                \"codeRel\": Enum.Indicateur.CODEREL.NB_APPETENCES.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.NB_APPETENCES.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.OPPORTUNITES,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.NB_APPETENCES.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.NB_PROPOSITIONS_EN_COURS.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.PROPOSITIONS_EN_COURS.toString(),\r\n                \"codeRel\": Enum.Indicateur.CODEREL.NB_PROPOSITIONS_EN_COURS.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.NB_PROPOSITIONS_EN_COURS.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.OPPORTUNITES,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.NB_PROPOSITIONS_EN_COURS.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.PNB_3112.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.PNB_3112.toString(),\r\n                \"codeRel\": Enum.Indicateur.CODEREL.PNB_3112.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.MONTANT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.PNB_3112.toString() + moment().subtract(1, \"year\").format(\"YYYY\"),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.PNB,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.PNB_3112.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.PNB_N.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.PNB_N.toString(),\r\n                \"codeRel\": Enum.Indicateur.CODEREL.PNB_N.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.MONTANT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.PNB_N.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.PNB,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.PNB_N.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.PNB_N_MOINS_1.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.PNB_N_MOINS_1.toString(),\r\n                \"codeRel\": Enum.Indicateur.CODEREL.PNB_N_MOINS_1.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.MONTANT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.PNB_N_MOINS_1.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.PNB,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.PNB_N_MOINS_1.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.POT_PROS.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.TEXTE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.POTENTIEL_PROSPECT.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.PROSPECTION,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.POTENTIEL_PROSPECT.toString()\r\n            }, {\r\n                // NOUVEL INDICATEUR score activation\r\n                \"code\": Enum.Indicateur.CODE.SCORE_ACTIVATION.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.SCORE_ACTIVATION.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.SCORE_ACTIVATION.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.PROSPECTION,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.SCORE_ACTIVATION.toString()\r\n            }, {\r\n                // NOUVEL INDICATEUR score appétence\r\n                \"code\": Enum.Indicateur.CODE.SCORE_APPETENCE.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.SCORE_APPETENCE.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.SCORE_APPETENCE.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.PROSPECTION,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.SCORE_APPETENCE.toString()\r\n            }, {\r\n                // NOUVEL INDICATEUR score défaillance\r\n                \"code\": Enum.Indicateur.CODE.SCORE_DEFAILLANCE.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.SCORE_DEFAILLANCE.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.SCORE_DEFAILLANCE.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.PROSPECTION,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.SCORE_DEFAILLANCE.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.DATE_DERNIER_ENTRETIEN.toString(),\r\n                \"codeRest\": \"\",\r\n                \"codeRel\": Enum.Indicateur.CODEREL.DATE_DERNIER_ENTRETIEN.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.DATE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.DATE_DERNIER_ENTRETIEN.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.RENDEZ_VOUS,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.DATE_DERNIER_ENTRETIEN.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.DATE_DERNIER_RDV.toString(),\r\n                \"codeRest\": \"\",\r\n                \"codeRel\": Enum.Indicateur.CODEREL.DATE_DERNIER_RDV.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.DATE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.DATE_DERNIER_RDV.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.RENDEZ_VOUS,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.DATE_DERNIER_RDV.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.NB_RDV_12_MOIS_GLISSANTS.toString(),\r\n                \"codeRest\": \"\",\r\n                \"codeRel\": Enum.Indicateur.CODEREL.NB_RDV_12_MOIS_GLISSANTS.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.NB_RDV_12_MOIS_GLISSANTS.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.RENDEZ_VOUS,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.NB_RDV_12_MOIS_GLISSANTS.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.NB_RDV_ANNEE_EN_COURS.toString(),\r\n                \"codeRest\": \"\",\r\n                \"codeRel\": Enum.Indicateur.CODEREL.NB_RDV_ANNEE_EN_COURS.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.NB_RDV_ANNEE_EN_COURS.toString() + moment().format(\"YYYY\"),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.RENDEZ_VOUS,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.NB_RDV_ANNEE_EN_COURS.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.DATE_PROCHAIN_RDV.toString(),\r\n                \"codeRest\": \"\",\r\n                \"codeRel\": Enum.Indicateur.CODEREL.DATE_PROCHAIN_RDV.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.DATE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.DATE_PROCHAIN_RDV.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.RENDEZ_VOUS,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.DATE_PROCHAIN_RDV.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.REVUE.toString(),\r\n                \"codeRel\": Enum.Indicateur.CODEREL.REV_DATE_DERNIERE_REVUE.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.DATE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.REV_DATE_DERNIERE_REVUE.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.REVUE,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.REV_DATE_DERNIERE_REVUE.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.REV_NB_SSFAMILLES_PROPOSE.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.REVUE.toString(),\r\n                \"codeRel\": Enum.Indicateur.CODEREL.REV_NB_SSFAMILLES_PROPOSE.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.REV_NB_SSFAMILLES_PROPOSE.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.REVUE,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.REV_NB_SSFAMILLES_PROPOSE.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.REV_VALIDEE_PAR.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.REVUE.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.TEXTE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.REV_VALIDEE_PAR.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.REVUE,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.REV_VALIDEE_PAR.toString()\r\n            },\r\n            { // XXXXXX ENCOURS_BDF supprimé en attendant le budget\r\n                \"code\": Enum.Indicateur.CODE.ENCOURS_BDF.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.ENCOURS_BDF.toString(),\r\n                \"codeRel\": Enum.Indicateur.CODEREL.ENCOURS_BDF.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.MONTANT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.ENCOURS_BDF.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.RISQUE,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.ENCOURS_BDF.toString()\r\n            },\r\n            {\r\n                \"code\": Enum.Indicateur.CODE.NOTE_BALE2.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.NOTE_BALE2.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.TEXTE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.NOTE_BALE2.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.RISQUE,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.NOTE_BALE2.toString()\r\n            },\r\n            {\r\n                \"code\": Enum.Indicateur.CODE.PART_ENGAG.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.PART_ENGAG.toString(),\r\n                \"codeRel\": Enum.Indicateur.CODEREL.PART_ENGAG.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.POURCENT,\r\n                \"intitule\": Enum.Indicateur.INTITULE.PART_ENGAG.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.RISQUE,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.PART_ENGAG.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.PROCHAINE_REVISION.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.PROCHAINE_REVISION.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.DATE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.PROCHAINE_REVISION.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.RISQUE,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.PROCHAINE_REVISION.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.TOP_CC.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.TOP_CC.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.TEXTE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.TOP_CC.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.RISQUE,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.TOP_CC.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.MARCHE.toString(),\r\n                \"codeRest\": \"\",\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.TEXTE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.MARCHE.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.SEGMENTATION,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.MARCHE.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.SEG_RELATIONNELLE.toString(),\r\n                \"codeRest\": \"\",\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.TEXTE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.SEG_RELATIONNELLE.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.SEGMENTATION,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.SEG_RELATIONNELLE.toString()\r\n            }, {\r\n                \"code\": Enum.Indicateur.CODE.SEG_RELATIONNELLE_GROUPE.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.SEG_RELATIONNELLE_GROUPE.toString(),\r\n                \"codeRel\": Enum.Indicateur.CODEREL.SEG_RELATIONNELLE_GROUPE.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.TEXTE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.SEG_RELATIONNELLE_GROUPE.toString(),\r\n                \"estUniquementVueClients\": false,\r\n                \"estVisibleColonne\": true,\r\n                \"famille\": Enum.Indicateur.FAMILLE.SEGMENTATION,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.SEG_RELATIONNELLE_GROUPE.toString()\r\n            }, { \r\n                \"code\": Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.DATE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT_TAG.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": false,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.PREMIER_EQUIPEMENT_TAG.toString()\r\n            }, {\r\n                // indicateur équivalent à PREMIER_EQUIPEMENT_TAG de type date\r\n                // PREMIER_EQUIPEMENT_TAG contient une date ou NC\r\n                // PREMIER_EQUIPEMENT_TEXTE contient Oui si une date est présente, Non si NC\r\n                \"code\": Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TEXTE.toString(),\r\n                \"codeRest\": Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TEXTE.toString(),\r\n                \"typeIndicateur\": Enum.Indicateur.TYPE.TEXTE,\r\n                \"intitule\": Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT_TEXTE.toString(),\r\n                \"estUniquementVueClients\": true,\r\n                \"estVisibleColonne\": false,\r\n                \"codePreference\": Enum.Indicateur.CODEPREF.PREMIER_EQUIPEMENT_TEXTE.toString()\r\n            }\r\n        ];\r\n    }\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";\r\n\r\n    export module CodeProcessusLisa {\r\n        export let CODE_LISA_SORTIE: number = 1;\r\n        export let CODE_LISA_ACCES_CLIENTS: number = 2;\r\n        export let CODE_LISA_SAISIE_REVUE: number = 11;\r\n        export let CODE_LISA_BILAN_REVUE: number = 12;\r\n        export let CODE_LISA_SYNTHESE_PM: number = 10;\r\n        export let CODE_LISA_BILAN_REVUES_PORTEFEUILLE: number = 13;\r\n        export let CODE_LISA_BILAN_APPETENCES_PORTEFEUILLE: number = 15;\r\n\r\n        export let CODE_LISA_GESTION_AFFAIRES: number = 16;\r\n        export let CODE_LISA_PROPOSITONS: number = 17;\r\n    }\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";\r\n\r\n    export module Messages {\r\n        export let MESSAGE_CHOIX_PORTEFEUILLE: string = \"Merci de choisir le ou les portefeuilles à interroger\";\r\n        export let MESSAGE_AUCUN_PORTEFEUILLE: string = \"Aucun portefeuille en gestion\";\r\n        export let MESSAGE_ERREUR_TECHNIQUE: string = \"Une erreur technique empêche le bon fonctionnement de l'application\";\r\n        export let MESSAGE_NO_DATA_STATS: string = \"Aucune donnée\";\r\n        export let MESSAGE_CHOIX_PORTEFEUILLE_EXPERT: string = \"Vous avez choisi le portefeuille d'expertise suivant :\";\r\n    }\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";\r\n\r\n    export module ModalePaniers {\r\n        export let ID_HTML_MODALE_PANIERS_BODY: string = \"modale-panier-body\";\r\n        export let CLASS_HTML_BOUTON_TUILE_STANDARD: string = \"mw-tuile-bloc\";\r\n        export let ATTRIBUT_HTML_DISABLED: string = \"disabled\";\r\n        export let ATTRIBUT_HTML_STYLE: string = \"style\";\r\n        export let STRING_VALUE_TRUE: string = \"true\";\r\n        export let STRING_VALUE_CURSOR_POINTER_IMPORTANT: string = \"cursor:move !important;\";\r\n        export let NOMBRE_INDICATEUR_MAX: number = 6;\r\n        export let TUILE_CATALOGUE_TAILLE: string = \"md\";\r\n        export let TUILE_CATALOGUE_PICTO_MARQUAGE: string = \"itce-star\";\r\n        export let TUILE_TYPE_MARQUAGE_TEXTE: string = \"texte\";\r\n        export let TUILE_CATALOGUE_TYPE_MARQUAGE_PICTO: string = \"picto\";\r\n        export let TUILE_CATALOGUE_TYPE_MARQUAGE_AUCUN: string = \"none\";\r\n        export let TUILE_NOM_MARQUAGE_VIDE: string = \"\";\r\n        export let TUILE_NOM_MARQUAGE_CLIENT: string = \"Client\";\r\n        export let TUILE_NOM_MARQUAGE_CLIENT_PROSPECT: string = \"Client/Prospect\";\r\n        export let TUILE_COULEUR_JAUNE: string = \"couleur-jaune\";\r\n        export let TUILE_COULEUR_ROUGE: string = \"couleur-rouge\"; // couleur du liseret vertical dans une tuile --> css --> rouge\r\n        export let TUILE_COULEUR_SOMBRE: string = \"couleur-sombre\"; // utilisé pour couleur blanche, afin d'avoir un alignement horizontal\r\n        export let TUILE_PANIER_TAILLE: string = \"md\";\r\n    }\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";\r\n\r\n    export module Popup {\r\n        export let BOUTON_FERMER: string = \"Fermer\";\r\n        export let LIBELLE_ERREUR_CHARGEMENT: string = \"Erreur de chargement du service\";\r\n        export let LIBELLE_ERREUR_DEFAULT: string = \"Erreur inconnue\";\r\n    }\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";\r\n\r\n    export module Preferences {\r\n        export let CODE_PANIER: string = \"GERR_PORTF_CLNT_PM-PANIER\";\r\n        export let CODE_EDS: string = \"GERR_PORTF_CLNT_PM-EDS\";\r\n        export let CODE_PORTEFEUILLE: string = \"GERR_PORTF_CLNT_PM-PORTEFEUILLE\";\r\n    }\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";\r\n\r\n    export module Rest {\r\n        export let AGENT_V2_CODE_ACTION_1: string = \"1\";\r\n        export let AGENT_V2_TYPE_RECHERCHE_NOM: number = 1;\r\n        export let AGENT_V2_TYPE_RECHERCHE_GROUPE_FONCTION: number = 4;\r\n        export let AGENT_V2_TYPE_RECHERCHE_MATRICULE: number = 5;\r\n        export let AGENT_V2_TYPE_RECHERCHE_AGENCE_RATTACHEMENT: number = 21;\r\n        export let AGENT_V2_RECHERCHE_GROUPE_FONCTION_BDR: string = \"009\";\r\n        export let CODE_PERSONNALITE_JURIDIQUE_EI: string = \"1\";\r\n        export let CODE_PERSONNALITE_JURIDIQUE_PM: string = \"2\";\r\n        export let CODE_TYPE_PERSONNE_CLIENT: string = \"0\";\r\n        export let CODE_TYPE_PERSONNE_TIERS: string = \"1\";\r\n        export let CODE_TYPE_PERSONNE_PROPECT_RESTREINT: string = \"2\";\r\n        export let CODE_TYPE_PERSONNE_PROPECT_ENRICHI: string = \"3\";\r\n        export let CODE_O_TRUE: string = \"O\";\r\n        export let CODE_STRING_ACTIF: string = \"O\";\r\n\r\n        export const CODE_ENTREE_EN_RELATION: string = \"EER\";\r\n        export const CODE_RISQUE: string = \"RSK\";\r\n        export const CODE_PRO_NON_CAPTE: string = \"NCP\";\r\n        export const CODE_PRO_PARTIELLEMENT_CAPTE: string = \"PCP\";\r\n        export const CODE_PRO_LARGEMENT_CAPTE: string = \"LCP\";\r\n        export const CODE_AUTRES: string = \"AUT\";\r\n\r\n        export const ENTREE_EN_RELATION: string = \"_ER\";\r\n        export const PRO_RISQUE: string = \"_RK\";\r\n        export const NON_CALCULE_NON_CONCERNE: string = \"NON\";\r\n\r\n    }\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";\r\n\r\n    export module Tableau {\r\n        export let TAB_LISTE_CLIENTS_CAPTION: string = \"Liste clients\";\r\n        export let TAB_LISTE_CLIENTS_NO_ELEMENT: string = \"Aucun client\";\r\n        export let TAB_LISTE_CLIENTS_COLONNE_NOM: string = \"Nom\";\r\n        export let TAB_LISTE_CLIENTS_COLONNE_DETAIL: string = \"Détail\";\r\n        export let TAB_NO_ELEMENT_CLIENT: string = \"Aucun client\";\r\n        export let TAB_NO_ELEMENT_RELATION: string = \"Aucune relation\";\r\n        export let TAB_LISTE_CLIENTS_COLONNE_ID: string = \"N° de personne\";\r\n        export let TAB_LISTE_CLIENTS_COLONNE_RAISON_SOCIALE: string = \"Raison sociale\";\r\n        export let TAB_LISTE_CLIENTS_COLONNE_MARCHE: string = \"Marché\";\r\n        export let TAB_LISTE_CLIENTS_COLONNE_OBJECTIF_DE_FLUX: string = \"Objectif de flux\";\r\n\r\n        export let VALEUR_POSSIBLE_POTENTIEL_PROSPECT: Array<string> = [\"1 étoile\", \"2 étoiles\", \"3 étoiles\"];\r\n        export let VALEUR_POSSIBLE_TOP_CC: Array<string> = [\"Vert\", \"Orange\", \"Rouge\", \"Blanc\"];\r\n\r\n        export let ID_TABLE_CLIENT: string = \"tab-client\";\r\n        export let ID_TABLE_RELATION: string = \"tab-relation\";\r\n    }\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";\r\n\r\n    export module Token {\r\n        export let TOKEN_ENVIRONNEMENT: string = \"##ENVIRONNEMENT##\";\r\n        export let TOKEN_ENVIRONNEMENT_VALEUR_DUA: string = \"DUA\";\r\n        export let TOKEN_ENVIRONNEMENT_VALEUR_VFO: string = \"VFO\";\r\n    }\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";\r\n\r\n    export module Url {\r\n        export let PORTEFEUILLE: string = \"/\";\r\n        export let CLIENTS: string = \"/clients\";\r\n        export let DETAIL_CLIENT: string = \"/client-detail\";\r\n        export let BILAN_REVUE: string = \"/revue-visu\";\r\n        export let SAISIE_REVUE: string = \"/revue-client\";\r\n        export let BILAN_REVUES_PORTEFEUILLE: string = \"/bilan-revues-portefeuille\";\r\n        export let BILAN_APPETENCES_PORTEFEUILLE: string = \"/bilan-appetences-portefeuille\";\r\n        export let SELECTION_INDICATEURS: string = \"/selection-indicateurs\";\r\n    }\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";\r\n\r\n    export module urlsRest {\r\n        export const URL_REST: string = \"##URL-REST##\";\r\n        export const URL_REST_TIERSCORPORATEV1_CORPORATE_INFORMATION: string =\r\n            URL_REST + \"/tierscorporate/v1/corporateInformation\";\r\n\r\n        export const URL_REST_TIERSCORPORATESERVICV1_RECHERCHE_COMMERCIALE:\r\n            string = URL_REST + \"/tierscorporateservic/v1/rechercheCommerciale\";\r\n\r\n        export const URL_REST_PORTEFEUILLEV1_RECHERCHE: string =\r\n            URL_REST + \"/portefeuille/v1/recherche\";\r\n        export const URL_REST_PORTEFEUILLEV1_RECHERCHE_LISTE: string =\r\n            URL_REST + \"/portefeuille/v1/recherche/getListe\";\r\n        export const URL_REST_PORTEFEUILLEV1_RELATION_COMMERCIALE: string =\r\n            URL_REST + \"/portefeuille/v1/relationCommerciale\";\r\n        export const URL_REST_PORTEFEUILLEV1_SUIVI_COMPLEMENTAIRE: string =\r\n            URL_REST + \"/portefeuille/v1/suiviComplementaire\";\r\n        export const URL_REST_PORTEFEUILLEV1_CLIENT: string =\r\n            URL_REST + \"/portefeuille/v1/client\";\r\n\r\n        export const URL_REST_AGENTV2_RECHERCHE: string =\r\n            URL_REST + \"/agent/v2/recherche\";\r\n        export const URL_REST_AGENTV2_GESTION_AFFECTATION: string =\r\n            URL_REST + \"/agent/v2/gestionAffectation\";\r\n\r\n        export const URL_REST_STRUCTUREV2_EDS_NIVEAU_INFERIEURE: string =\r\n            URL_REST + \"/structure/v2/edsNiveauInferieur\";\r\n\r\n        export const URL_REST_PREFERENCE_UTILISATEUR: string =\r\n            URL_REST + \"/preferenceUtilisateur/v1/\";\r\n\r\n        export const URL_REST_PORTEFEUILLECORPORATEV1_STATRENTABILITE: string =\r\n            URL_REST + \"/portefeuillcorporate/v1/statRentabilite\";\r\n        export const URL_REST_PORTEFEUILLECORPORATEV1_STATFLUXMOUVEMENTFINANCIER: string =\r\n            URL_REST + \"/portefeuillcorporate/v1/statFluxMvtFinancier\";\r\n        export const URL_REST_PORTEFEUILLECORPORATEV1_STATPTF: string =\r\n            URL_REST + \"/portefeuillcorporate/v1/statPortefeuille\";\r\n\r\n        export const URL_REST_PROPOSITIONCORPORATEV1_STATREVUE: string =\r\n            URL_REST + \"/propositioncorporate/v1/statRevue\";\r\n        export const URL_REST_PROPOSITIONCORPORATEV1_RECHERCHE_REVUE:\r\n            string = URL_REST + \"/propositioncorporate/v1/rechercheRevue\";\r\n        export const URL_REST_PROPOSITIONCORPORATEV1_STAT_PORTEFEUILLE_EDS: string =\r\n            URL_REST + \"/propositioncorporate/v1/statPortefeuilleEds\";\r\n       \r\n    }\r\n} ","/**\r\n * Filtres utiles à l'application\r\n * @module Portefeuille.Filtres\r\n * @author S0078068 (Yannis VESSEREAU)\r\n */\r\nmodule Portefeuille.Filtres {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Filtre la liste des indicateurs qui sont utilisés\r\n     * @param {ng.IFilterService} $filter\r\n     * @return {Function} La fonction du filtre\r\n     */\r\n    export function indicateurUtilisantPasFiltre($filter: ng.IFilterService): Function {\r\n        return (listeIndicateurs: Array<Modeles.Application.IIndicateurFiltre>, estVueClient: boolean): Array<Modeles.Application.IIndicateurFiltre> => {\r\n            if (estVueClient) {\r\n                return _.where(listeIndicateurs, { \"utilise\": false });\r\n            } else {\r\n                return _.where(listeIndicateurs, { \"utiliseRelationEco\": false });\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Filtre la liste des nombre qui sont utilisés\r\n     * @param {ng.IFilterService} $filter\r\n     * @return {Function} La fonction du filtre\r\n     */\r\n    export function nombreFiltre($filter: ng.IFilterService): Function {\r\n        return (valeur: any): any => {\r\n            //Si le montant n'existe pas, ou s'il est fixé à une des valeurs extrèmes, alors il convient d'afficher NC\r\n            return (valeur !== undefined\r\n                && valeur !== null\r\n                && valeur !== \"\"\r\n                && valeur !== Number.POSITIVE_INFINITY\r\n                && valeur !== Number.NEGATIVE_INFINITY) ?\r\n                Services.Utils.DataUtils.formatNombre(valeur) :\r\n                Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Formate le montant à afficher en foncntion de la valeur\r\n     * @param $filter\r\n     */\r\n    export function montantFiltre($filter: ng.IFilterService): Function {\r\n        return (valeur: any, isEuros?: boolean): any => {\r\n            const devise: string = isEuros ? \"€\" : \"k€\";\r\n\r\n            //Si le montant n'existe pas, ou s'il est fixé à une des valeurs extrèmes, alors il convient d'afficher NC\r\n            return (valeur !== undefined\r\n                && valeur !== null\r\n                && valeur !== \"\"\r\n                && valeur !== Number.POSITIVE_INFINITY\r\n                && valeur !== Number.NEGATIVE_INFINITY) ?\r\n                `${valeur.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, String.fromCharCode(160))} ${devise}` : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n        };\r\n    }\r\n\r\n    export function pourcentFiltre($filter: ng.IFilterService): Function {\r\n        return (valeur: any): any => {\r\n            //Si le montant n'existe pas, ou s'il est fixé à une des valeurs extrèmes, alors il convient d'afficher NC\r\n            return (\r\n                valeur !== undefined\r\n                && valeur !== null\r\n                && valeur !== \"\"\r\n                && valeur !== Number.POSITIVE_INFINITY\r\n                && valeur !== Number.NEGATIVE_INFINITY) ?\r\n                `${Services.Utils.DataUtils.formatPourcent(valeur)} %` : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * Filtre la liste des indicateurs qui sont de type Date\r\n     * @param {ng.IFilterService} $filter\r\n     * @return {Function} La fonction du filtre\r\n     */\r\n    export function sansIndicateurDateFiltre($filter: ng.IFilterService): Function {\r\n        return (listeIndicateurs: Array<Modeles.Application.IIndicateurFiltre>): Array<Modeles.Application.IIndicateurFiltre> => {\r\n            let listeIndicateurFitre = _.filter(listeIndicateurs, function (indicateur: Modeles.Application.IIndicateurFiltre) {\r\n                return indicateur.indicateur.typeIndicateur !== Enum.Indicateur.TYPE.DATE;\r\n            });\r\n\r\n            return listeIndicateurFitre;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Filtre les valeurs null est indefinis\r\n     * @param {ng.IFilterService} $filter\r\n     * @return {Function} La fonction du filtre\r\n     */\r\n    export function valeurNonConnuFiltre($filter: ng.IFilterService): Function {\r\n        return (valeur: any): any => {\r\n            //chaineTravail est utilisée afin de vérifer si valeur correspond à la chaine Max utilisée lors des comparaisons sur les tris\r\n            let chaineTravail: string = <string>valeur; \r\n            return (valeur === undefined ||\r\n                valeur === null ||\r\n                valeur === \"\" ||\r\n                chaineTravail.search(Constantes.Application.FIN_CHAINE_MAX) !== -1) ?\r\n                Constantes.Application.CHAINE_INDICATEUR_NON_CONNU : \r\n                valeur;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Affichage de date NC (Selon la valeur transmise, on affiche ou pas NC)\r\n     */\r\n    export function dateNC() {\r\n\r\n        const dateMin: Date = moment(Constantes.Application.DATE_MIN).toDate();\r\n        const dateMax: Date = moment(Constantes.Application.DATE_MAX).toDate();\r\n\r\n        return function (valeur: Date): string {\r\n            if (valeur) {\r\n                if (moment(valeur).isSame(dateMax)) {\r\n                    return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                }\r\n\r\n                if (moment(valeur).isSame(dateMin)) {\r\n                    return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                }\r\n\r\n                return moment(valeur).format(\"DD/MM/YYYY\");\r\n\r\n            } else {\r\n                return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Affichage de nombre NC (Selon la valeur transmise, on affiche ou pas NC)\r\n     */\r\n    export function nombreNC() {\r\n        const nombreMin: number = Number.NEGATIVE_INFINITY;\r\n        const nombreMax: number = Number.POSITIVE_INFINITY;\r\n        return function (valeur: number): string {\r\n            if (valeur !== null\r\n                && valeur !== undefined) {\r\n                return valeur === nombreMin || valeur === nombreMax ? Constantes.Application.CHAINE_INDICATEUR_NON_CONNU : valeur.toString();\r\n            } else {\r\n                return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration des filtres\r\n    app.filter(\"indicateurUtilisantPasFiltre\", [\"$filter\", indicateurUtilisantPasFiltre]);\r\n    app.filter(\"sansIndicateurDateFiltre\", [\"$filter\", sansIndicateurDateFiltre]);\r\n    app.filter(\"valeurNonConnuFiltre\", [\"$filter\", valeurNonConnuFiltre]);\r\n    app.filter(\"montantFiltre\", [\"$filter\", montantFiltre]);\r\n    app.filter(\"pourcentFiltre\", [\"$filter\", pourcentFiltre]);\r\n    app.filter(\"nombreFiltre\", [\"$filter\", nombreFiltre]);\r\n    app.filter(\"nombreNC\", [\"$filter\", nombreNC]);\r\n    app.filter(\"dateNC\", [\"$filter\", dateNC]);\r\n}","module Portefeuille.Mocks {\r\n    \"use strict\";\r\n\r\n    export function getClient(index?: string) {\r\n        if (!index) {\r\n            index = \"\";\r\n        }\r\n\r\n        return {\r\n            \"id\": \"123456789\" + index,\r\n            \"nom\": \"GYEC\" + index,\r\n            \"siren\": \"02547841002596\" + index,\r\n            \"relationEconomique\": \"Relation Economique \" + index,\r\n            \"listeIndicateurs\": [\r\n                {\r\n                    \"intitule\": \"PNB N-1 civile\",\r\n                    \"valeur\": \"32 254 k€\",\r\n                    \"couleur\": Enum.PfTuileIndicateur.COULEUR.PNB,\r\n                    \"icone\": \"\",\r\n                    \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                    \"code\": \"\",\r\n                    \"famille\": Enum.Indicateur.FAMILLE.PNB\r\n                },\r\n                {\r\n                    \"intitule\": \"PNB N glissante\",\r\n                    \"valeur\": \"35 326 k€\",\r\n                    \"couleur\": Enum.PfTuileIndicateur.COULEUR.PNB,\r\n                    \"icone\": \"globe\",\r\n                    \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                    \"code\": \"\",\r\n                    \"famille\": Enum.Indicateur.FAMILLE.PNB\r\n                },\r\n                {\r\n                    \"intitule\": \"Dernier RDV\",\r\n                    \"valeur\": \"25/06/2018\",\r\n                    \"couleur\": Enum.PfTuileIndicateur.COULEUR.AGENDA,\r\n                    \"icone\": \"calendar\",\r\n                    \"typeIndicateur\": Enum.Indicateur.TYPE.DATE,\r\n                    \"code\": \"\",\r\n                    \"famille\": Enum.Indicateur.FAMILLE.RENDEZ_VOUS\r\n                },\r\n                {\r\n                    \"intitule\": \"Volume engagement utilisé N-1 civile\",\r\n                    \"valeur\": \"5 356 k€\",\r\n                    \"couleur\": Enum.PfTuileIndicateur.COULEUR.EQUIPEMENTS,\r\n                    \"icone\": \"product-category-circle\",\r\n                    \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                    \"code\": \"\",\r\n                    \"famille\": Enum.Indicateur.FAMILLE.CA\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    export function getRelationEco(index?: string) {\r\n        if (!index) {\r\n            index = \"\";\r\n        }\r\n\r\n        let listeClients = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            listeClients.push(Mocks.getClient(i.toString()));\n        }\r\n\r\n        return {\r\n            \"nom\": \"GEDECO \" + index,\r\n            \"id\": \"41100125\" + index,\r\n            \"siren\": \"123456789123456\" + index,\r\n            \"relationEconomique\": \"Nom Relation economique \" + index,\r\n            \"listeClients\": listeClients,\r\n            \"listeIndicateurs\": [\r\n                {\r\n                    \"intitule\": \"Chiffre d'affaire\",\r\n                    \"valeur\": \"100 000 254 k€\",\r\n                    \"couleur\": Enum.PfTuileIndicateur.COULEUR.CA,\r\n                    \"icone\": \"money\",\r\n                    \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                    \"code\": \"\",\r\n                    \"famille\": Enum.Indicateur.FAMILLE.CA\r\n                },\r\n                {\r\n                    \"intitule\": \"PNB N glissante\",\r\n                    \"valeur\": \"35 326 k€\",\r\n                    \"couleur\": Enum.PfTuileIndicateur.COULEUR.PNB,\r\n                    \"icone\": \"globe\",\r\n                    \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                    \"code\": \"\",\r\n                    \"famille\": Enum.Indicateur.FAMILLE.PNB\r\n                },\r\n                {\r\n                    \"intitule\": \"Dernier RDV\",\r\n                    \"valeur\": \"25/06/2018\",\r\n                    \"couleur\": Enum.PfTuileIndicateur.COULEUR.AGENDA,\r\n                    \"icone\": \"calendar\",\r\n                    \"typeIndicateur\": Enum.Indicateur.TYPE.DATE,\r\n                    \"code\": \"\",\r\n                    \"famille\": Enum.Indicateur.FAMILLE.RENDEZ_VOUS\r\n                },\r\n                {\r\n                    \"intitule\": \"Prochain RDV\",\r\n                    \"valeur\": \"25/10/2018\",\r\n                    \"couleur\": Enum.PfTuileIndicateur.COULEUR.AGENDA,\r\n                    \"icone\": \"calendar\",\r\n                    \"typeIndicateur\": Enum.Indicateur.TYPE.DATE,\r\n                    \"code\": \"\",\r\n                    \"famille\": Enum.Indicateur.FAMILLE.RENDEZ_VOUS\r\n                },\r\n                {\r\n                    \"intitule\": \"Volume engagement utilisé N-1 civile\",\r\n                    \"valeur\": \"5 356 k€\",\r\n                    \"couleur\": Enum.PfTuileIndicateur.COULEUR.EQUIPEMENTS,\r\n                    \"icone\": \"product-category-circle\",\r\n                    \"typeIndicateur\": Enum.Indicateur.TYPE.NOMBRE,\r\n                    \"code\": \"\",\r\n                    \"famille\": Enum.Indicateur.FAMILLE.CA\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur de la modale d'avertissement du choix de portefeuille\r\n * @module Portefeuille.Controleurs\r\n * @author S0078068 (Yannis VESSEREAU)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n\r\n    export interface IRetourModaleAvertissement {\r\n        typeForcage: Enum.PageClients.TYPE_FORCAGE;\r\n        nombreBoutonsAffiches: number;\r\n    }\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class ModaleAvertissementChoixPortefeuilleControleur {\r\n        public static CLASS_NAME: string = \"ModaleAvertissementChoixPortefeuilleControleur\";\r\n        private static logger: MyWay.Services.Loggers.ILogger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleAvertissementChoixPortefeuilleControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        static $inject: string[] = [\r\n            Constantes.Inject.Angular.$modalInstance,\r\n            Constantes.Inject.Services.listeClientsService\r\n        ];\r\n\r\n        // Variables d'entrée\r\n\r\n        // Variables utiles\r\n        public nbMaxPortefeuilles: number = Constantes.Service.RELATION_COMMERCIALE_NB_MAX_RES;\r\n        public estEnMultiPortefeuille: boolean;\r\n        public estAfficherBtnProspects: boolean;\r\n        public estAfficherBtnClients: boolean;\r\n        public listePortefeuilles: Array<Modeles.Application.IPortefeuille>;\r\n        public listeMessageAction: Array<string>;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $modalInstance: angular.ui.bootstrap.IModalServiceInstance,\r\n            private listeClientsService: Services.Application.IListeClientsService) {\r\n\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            ModaleAvertissementChoixPortefeuilleControleur.logger.info(\">>> Appel de la méthode : ModaleAvertissementChoixPortefeuilleControleur.initialiser <<<\");\r\n\r\n            this.listePortefeuilles = this.listeClientsService.getListePortefeuillesAvecLimite();\r\n            this.estEnMultiPortefeuille = this.listePortefeuilles.length > 1;\r\n            this.determinerAffichageBtnClientsEtProspects();\r\n            this.determinerMessagesAction();\r\n        }\r\n\r\n        /**\r\n         * Permet de déterminer l'affichage ou non des boutons Clients et Prospects\r\n         * @returns {void}\r\n         */\r\n        private determinerAffichageBtnClientsEtProspects(): void {\r\n            let nbTotalClients = 0;\r\n            let nbTotalProspects = 0;\r\n            _.forEach(this.listePortefeuilles, (portefeuille: Modeles.Application.IPortefeuille) => {\r\n                nbTotalClients += portefeuille.nombreTotalClients;\r\n                nbTotalProspects += portefeuille.nombreTotalProspectsTiers;\r\n            });\r\n            this.estAfficherBtnClients = nbTotalClients <= Constantes.Service.RELATION_COMMERCIALE_NB_MAX_RES && nbTotalClients > 0;\r\n            this.estAfficherBtnProspects = nbTotalProspects <= Constantes.Service.RELATION_COMMERCIALE_NB_MAX_RES && nbTotalProspects > 0;\r\n        }\r\n\r\n        private determinerMessagesAction(): void {\r\n            this.listeMessageAction = [];\r\n\r\n            if (this.estAfficherBtnProspects) {\r\n                this.listeMessageAction.push(`- \"Afficher les prospects\" : la liste des \"Relations économiques\" de votre séléction ne sera pas accessible.`);\r\n            }\r\n            if (this.estAfficherBtnClients) {\r\n                this.listeMessageAction.push(`- \"Afficher les clients\" : la liste des \"Relations économiques\" de votre séléction ne sera pas accessible.`);\r\n            } \r\n            if (this.estEnMultiPortefeuille) {\r\n                this.listeMessageAction.push(`- \"Nouvelle sélection\" : modifier votre sélection de portefeuilles.`);\r\n            } else {\r\n                this.listeMessageAction.push(`- \"Afficher\" : les indicateurs seront prédéfinis et non modifiables.`);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Fermer\"\r\n         * @returns {void}\r\n         */\r\n        public fermer(): void {\r\n            this.$modalInstance.dismiss();\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Afficher les clients\"\r\n         * @returns {void}\r\n         */\r\n        public afficherClients(): void {\r\n            this.$modalInstance.close(this.setRetourPopup(Enum.PageClients.TYPE_FORCAGE.CLIENTS));\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Afficher les prospects\"\r\n         * @returns {void}\r\n         */\r\n        public afficherProspects(): void {\r\n            this.$modalInstance.close(this.setRetourPopup(Enum.PageClients.TYPE_FORCAGE.PROSPECTS));\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Afficher les prospects\"\r\n         * @returns {void}\r\n         */\r\n        public afficherTout(): void {\r\n            this.$modalInstance.close(this.setRetourPopup(Enum.PageClients.TYPE_FORCAGE.TOUT));\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Nouvelle sélection\"\r\n         * @returns {void}\r\n         */\r\n        public nouvelleSelection(): void {\r\n            this.$modalInstance.close(this.setRetourPopup(Enum.PageClients.TYPE_FORCAGE.SANS));\r\n        }\r\n\r\n        private setRetourPopup(typeForcage: Enum.PageClients.TYPE_FORCAGE): IRetourModaleAvertissement {\r\n            let resultat: IRetourModaleAvertissement = <IRetourModaleAvertissement>{};\r\n            let nombreBoutonsAffiches: number;\r\n\r\n            resultat.typeForcage = typeForcage;\r\n\r\n            switch (typeForcage) {\r\n                case Enum.PageClients.TYPE_FORCAGE.CLIENTS:\r\n                    nombreBoutonsAffiches = 2 + ((this.estAfficherBtnProspects === true) ? 1 : 0); //A minima 2 boutons affichés\r\n                    break;\r\n                case Enum.PageClients.TYPE_FORCAGE.PROSPECTS:\r\n                    nombreBoutonsAffiches = 2 + ((this.estAfficherBtnClients === true) ? 1 : 0); //A minima 2 boutons affichés\r\n                    break;\r\n                case Enum.PageClients.TYPE_FORCAGE.TOUT:\r\n                    nombreBoutonsAffiches = 1 + ((this.estAfficherBtnClients === true) ? 1 : 0) + ((this.estAfficherBtnProspects === true) ? 1 : 0); //A minima 1 bouton affiché\r\n                    break;\r\n                case Enum.PageClients.TYPE_FORCAGE.SANS:\r\n                    nombreBoutonsAffiches = 1 + ((this.estAfficherBtnClients === true) ? 1 : 0) + ((this.estAfficherBtnProspects === true) ? 1 : 0); //A minima 1 bouton affiché\r\n                    break;\r\n                default:\r\n                    nombreBoutonsAffiches = 1;\r\n                    break;\r\n            }\r\n\r\n            resultat.nombreBoutonsAffiches = nombreBoutonsAffiches;\r\n\r\n            return resultat;\r\n        }\r\n    }\r\n\r\n    // Déclaration du controlleur\r\n    app.controller(ModaleAvertissementChoixPortefeuilleControleur.CLASS_NAME, ModaleAvertissementChoixPortefeuilleControleur);\r\n}\r\n","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur de la modale de choix EDS\r\n * @module Portefeuille.Controleurs\r\n * @author S0078068 (Yannis VESSEREAU)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class ModaleChoixEdsControleur {\r\n        public static CLASS_NAME: string = \"ModaleChoixEdsControleur\";\r\n        private static logger: MyWay.Services.Loggers.ILogger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleChoixEdsControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        static $inject: string[] = [\r\n            //Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Angular.$q,\r\n            Constantes.Inject.MyWay.data,\r\n            Constantes.Inject.Angular.$modalInstance,\r\n            Constantes.Inject.Services.choixEdsService,\r\n            Constantes.Inject.Services.popupService,\r\n            Constantes.Inject.Services.choixUtilisateurService,\r\n            Constantes.Inject.Services.contexteService\r\n        ];\r\n\r\n        // Variables d'entrée\r\n\r\n        // Variables utiles\r\n        public agentChoisi: MyWay.Model.Agent;\r\n        public titre: string;\r\n\r\n        // Variables utiles (Ajouter)\r\n        public chargementAgences: boolean;\r\n        public chargementAgents: boolean;\r\n\r\n        public listeAgences: Array<Modeles.Application.IAgenceEds>;\r\n        public agenceChoisi: Modeles.Application.IAgenceEds;\r\n        //    si on a une valeur on va permettre de remonter a ce niveau\r\n        public ancienNiveauEds: number = 0; \r\n        public agenceReadOnly: boolean = false;\r\n        public edsAncien: Modeles.Application.IAgenceEds;\r\n        public sauveAgentRechercher: MyWay.Model.Agent;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            //private $scope: ng.IScope,\r\n            private $q: ng.IQService,\r\n            private data: Portefeuille.Modeles.Application.IPopupData<string>,\r\n            private $modalInstance: angular.ui.bootstrap.IModalServiceInstance,\r\n            private choixEdsService: Services.Application.IChoixEdsService,\r\n            private popupService: Services.Application.IPopupService,\r\n            private choixUtilisateurService: Services.Application.IChoixUtilisateurService,\r\n            private contexteService: Services.Application.IContexteService) {\r\n\r\n            // Récupération des données transmises\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            ModaleChoixEdsControleur.logger.info(\">>> Appel de la méthode : ModaleChoixEdsControleur.initialiser <<<\");\r\n            this.titre = this.data.headerText;    \r\n            this.edsAncien = this.choixUtilisateurService.edsSelectionne;\r\n\r\n            if (this.estVueEDS) {\r\n                this.choixUtilisateurService.edsSelectionne = null;\r\n                // par défaut on se positionne sur l'agent qui est connecté : on le met dans le modèle pour qu'il soit affiché dans la dropdown,\r\n                // puis on va charger ses N+1/N+2\r\n                if (!this.sauveAgentRechercher) {\r\n\r\n                    this.contexteService.getAuthentification().then((resultat: any) => {\r\n                        // converti dans le modèle cible => A TRANSFORMER PAR UNE METHODE DANS UTILS !\r\n                        this.agentChoisi = <MyWay.Model.Agent>{};\r\n                        this.agentChoisi.id = resultat.agentConnecte.referenceExterneAgent;      // important, c'est ce qu'on utilisera par la suite ! \r\n                        this.agentChoisi.designation = resultat.agentConnecte.designationLongueAgent;\r\n                        this.agentChoisi.idEds = resultat.agentConnecte.numeroInterneEds;\r\n                        this.agentChoisi.idEdsHierarchique = resultat.agentConnecte.numeroEdsSuperieur;\r\n                        this.agentChoisi.libelle = resultat.agentConnecte.libelleEds;\r\n                        this.agentChoisi.refEDS = resultat.agentConnecte.numeroInterneEds;\r\n                        this.agentChoisi.typeEdsHierarchique = resultat.agentConnecte.typeEdsRattachement;\r\n                        this.agentChoisi.typeFonction = resultat.agentConnecte.typeFonction;\r\n                        this.agentChoisi.dateDebutValidite = new Date(resultat.agentConnecte.dateDebutValidite);      // format: 2004-04-01\r\n                        this.agentChoisi.dateFinValidite = new Date(resultat.agentConnecte.dateFinValidite);\r\n\r\n                        // récupère les N+1/+2 de cet agent\r\n                        this.changeAgent(this.agentChoisi);\r\n                    });\r\n                } else {\r\n                    this.changeAgent(this.sauveAgentRechercher);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Recherche les agents par le nom qui est tapé dans la liste\r\n         * @param agent\r\n         */\r\n        public changeAgent(agent: MyWay.Model.Agent): ng.IPromise<void> {\r\n            // 1ère chose, on récupère l'agent connecté et on le met dans la 1ère liste. Au change on va maj la 2ème liste\r\n            // @note On n'a pas de filtre ici\r\n            this.chargementAgences = true;\r\n            this.choixUtilisateurService.edsSelectionne = null;\r\n            this.agenceChoisi = null;\r\n            this.sauveAgentRechercher = agent;\r\n            // attention, c'est l'identifiantAgent qu'il faut donner a cette ressource !\r\n            return this.choixUtilisateurService.\r\n                rechercherListeAgence(+agent.id).\r\n                then((listeAgences: Array<Modeles.Application.IAgenceEds>) => {\r\n                    this.listeAgences = listeAgences;\r\n                    if (this.listeAgences &&\r\n                        this.listeAgences.length === 1) {\r\n                        this.agenceChoisi = listeAgences[0];\r\n                        // Ouvre le premier niveau  si une seul EDS de ratachement\r\n                        this.changementAgence(this.agenceChoisi, null);\r\n                        this.agenceReadOnly = true;\r\n                    } else {\r\n                        this.agenceReadOnly = false;\r\n                    }\r\n                    this.chargementAgences = false;\r\n                }).catch(/* istanbul ignore next */\r\n                    (erreur: MyWay.Services.Erreur) => {\r\n                        ModaleChoixEdsControleur.logger.error(\"Erreur de recherche de la liste des agences\", erreur.codeLibelle, erreur.libelle);\r\n                        this.popupService.showErreur(erreur);\r\n                        // ne bloque pas la liste\r\n                        this.chargementAgences = false;\r\n                    });\r\n        }\r\n\r\n        /**\r\n         * Méthode appelé lors du changement d'agence\r\n         * @returns {void}\r\n         */\r\n        public changementAgence(EDS: Modeles.Application.IAgenceEds, ancienEDS: Modeles.Application.IAgenceEds): ng.IPromise<void> {\r\n            //this.listeAgencesInferieures = [];\r\n            this.chargementAgents = true;\r\n            this.choixUtilisateurService.edsSelectionne = null;\r\n\r\n            return this.choixUtilisateurService.rechercherEdsInferieurs(EDS)\r\n                .then((caracteristiquesEDS: Modeles.Application.IAgenceEds) => {\r\n                    // Si c'est le premier noeud EDS (identifier par ancienEds à null) on charge les EDS et on l'affiche\r\n                    if (!ancienEDS) {\r\n                        this.changementAgence(this.agenceChoisi, EDS);\r\n                        this.agenceChoisi.affiche = true;\r\n                    }                       \r\n                    this.chargementAgents = false;\r\n                    return this.$q.when();\r\n            }).catch(/* istanbul ignore next */\r\n                (erreur: MyWay.Services.Erreur) => {\r\n                    ModaleChoixEdsControleur.logger.error(\"Erreur de recherche de la liste des agents\", erreur.codeLibelle, erreur.libelle);\r\n                    return this.popupService.showErreur(erreur);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Valider\"\r\n         * @returns {void}\r\n         */\r\n        public valider(): void {\r\n            this.choixEdsService.getCaracteristiquesAgent(this.agentChoisi).\r\n                then((edsChoisi: Modeles.Application.ICaracteristiquesAgent) => {\r\n                if (!this.estVueEDS) {\r\n                    this.choixUtilisateurService.edsSelectionne = null;\r\n                }\r\n                this.$modalInstance.close(edsChoisi);\r\n            }).catch((erreur: MyWay.Services.Erreur) => {\r\n                ModaleChoixEdsControleur.logger.error(\"Erreur de recherche de l'EDS\", erreur.codeLibelle, erreur.libelle);\r\n                this.popupService.showErreur(erreur);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get estVueEDS(): boolean {\r\n            return this.data.model === Enum.Vue.TYPE_VUE.VUE_EDS.toString();\r\n        }\r\n\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get estChoisiEDS(): boolean {\r\n            return (this.agentChoisi && this.agentChoisi.id) ? true : false;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get estChoisiEDSvalide(): boolean {\r\n            if ((!this.estVueEDS &&\r\n                 this.estChoisiEDS) ||\r\n                (this.estVueEDS &&\r\n                 this.estChoisiEDS &&\r\n                 this.agenceChoisi &&\r\n                 this.edsSelectionne)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         *\r\n         */\r\n        public get edsRattachement(): Modeles.Application.IAgenceEds {\r\n            return (this.estVueEDS && this.agenceChoisi) ? this.agenceChoisi : <Modeles.Application.IAgenceEds>{};\r\n        }\r\n\r\n        /**\r\n         *\r\n         */\r\n        public get afficheListeEdsRattachement(): boolean {\r\n            return (!this.agenceReadOnly && this.agentChoisi && this.agentChoisi.id) ? true : false;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get afficheLibelleEdsRattachement(): boolean {\r\n            return (this.agenceReadOnly && this.agentChoisi && this.agentChoisi.id) ? true : false;\r\n        }\r\n\r\n        /**\r\n         *\r\n         */\r\n        public get nomEdsRattachement(): string {\r\n            return (this.agenceChoisi && this.agenceChoisi.nomEds) ? this.agenceChoisi.nomEds : \"\";\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get afficheEdsSelectionne(): boolean {\r\n            return this.estVueEDS;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get nomEdsSelectionne(): string {\r\n            return (this.choixUtilisateurService.edsSelectionne) ? this.choixUtilisateurService.edsSelectionne.nomEds : \"\";\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get edsSelectionne(): Modeles.Application.IAgenceEds {\r\n            return this.choixUtilisateurService.edsSelectionne;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get afficheBlocEds(): boolean {\r\n            return this.estVueEDS && this.estChoisiEDS && this.agenceChoisi != null;\r\n        }\r\n               \r\n        /**\r\n         * Action du bouton \"Fermer\"\r\n         * @returns {void}\r\n         */\r\n        public fermer(): void {\r\n            this.choixUtilisateurService.edsSelectionne = this.edsAncien;\r\n            this.$modalInstance.dismiss();\r\n        }\r\n    }\r\n    // Déclaration du controlleur\r\n    app.controller(ModaleChoixEdsControleur.CLASS_NAME, ModaleChoixEdsControleur);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class ModaleClientsActiverControleur {\r\n        public static CLASS_NAME: string = \"ModaleClientsActiverControleur\";\r\n        private static logger: MyWay.Services.Loggers.ILogger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleClientsActiverControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        static $inject: string[] = [\r\n            Constantes.Inject.Angular.$modalInstance,\r\n            Constantes.Inject.Autres.dataModale\r\n        ];\r\n\r\n        // Variables d'entrée\r\n        private clientsAActiver: Array<Modeles.ApplicationStats.IClientSimplifie>;\r\n\r\n        // Variables utiles\r\n        private tableauRaisonsSociales: Modeles.Tableaux.TableauRaisonsSociales;\r\n        private titreModale: string;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $modalInstance: angular.ui.bootstrap.IModalServiceInstance,\r\n            private data: Array<Modeles.ApplicationStats.IClientSimplifie>\r\n        ) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            ModaleClientsActiverControleur.logger.info(\">>> Appel de la méthode : ModaleClientsActiverControleur.initialiser <<<\");\r\n\r\n            this.clientsAActiver = angular.copy(this.data);\r\n            \r\n            this.tableauRaisonsSociales = new Modeles.Tableaux.TableauRaisonsSociales(true);\r\n\r\n            this.titreModale = \"Clients à activer\";\r\n\r\n            if (this.clientsAActiver) {\r\n                this.tableauRaisonsSociales.data = this.clientsAActiver;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Fermer\"\r\n         * @returns {void}\r\n         */\r\n        public fermer(): void {\r\n            this.$modalInstance.dismiss();\r\n        }\r\n    }\r\n\r\n    // Déclaration du controlleur\r\n    app.controller(ModaleClientsActiverControleur.CLASS_NAME, ModaleClientsActiverControleur);\r\n}\r\n","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class ModaleClientsRenegocierControleur {\r\n        public static CLASS_NAME: string = \"ModaleClientsRenegocierControleur\";\r\n        private static logger: MyWay.Services.Loggers.ILogger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleClientsRenegocierControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        static $inject: string[] = [\r\n            Constantes.Inject.Angular.$modalInstance,\r\n            Constantes.Inject.Autres.dataModale\r\n        ];\r\n\r\n        // Variables d'entrée\r\n        private clientsARenegocier: Array<Modeles.ApplicationStats.IClientSimplifie>;\r\n\r\n        // Variables utiles\r\n        private tableauRaisonsSociales: Modeles.Tableaux.TableauRaisonsSociales;\r\n        private titreModale: string;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $modalInstance: angular.ui.bootstrap.IModalServiceInstance,\r\n            private data: Array<Modeles.ApplicationStats.IClientSimplifie>\r\n        ) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            ModaleClientsRenegocierControleur.logger.info(\">>> Appel de la méthode : ModaleClientsRenegocierControleur.initialiser <<<\");\r\n\r\n            this.clientsARenegocier = angular.copy(this.data);\r\n\r\n            this.tableauRaisonsSociales = new Modeles.Tableaux.TableauRaisonsSociales(false);\r\n\r\n            this.titreModale = \"Tarifications à renégocier\";\r\n\r\n            if (this.clientsARenegocier) {\r\n                this.tableauRaisonsSociales.data = this.clientsARenegocier;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Fermer\"\r\n         * @returns {void}\r\n         */\r\n        public fermer(): void {\r\n            this.$modalInstance.dismiss();\r\n        }\r\n    }\r\n\r\n    // Déclaration du controlleur\r\n    app.controller(ModaleClientsRenegocierControleur.CLASS_NAME, ModaleClientsRenegocierControleur);\r\n}\r\n","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class ModaleDetailsFluxCrediteurControleur {\r\n        public static CLASS_NAME: string = \"ModaleDetailsFluxCrediteurControleur\";\r\n        private static logger: MyWay.Services.Loggers.ILogger =\r\n            MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleDetailsFluxCrediteurControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        static $inject: string[] = [\r\n            Constantes.Inject.Angular.$modalInstance,\r\n            Constantes.Inject.MyWay.data,\r\n            Constantes.Inject.Services.indicateurFlecheService\r\n        ];\r\n\r\n        private titreModale: string;\r\n        public configDiagrammeColonneFluxCrediteur: Array<Modeles.Application.IDataIndicateurMutliColonne>;\r\n\r\n        public legendeColonne1: string;\r\n        public couleurColonne1: Modeles.Application.COULEUR_GRANDE_COLONNE;\r\n        public legendeColonne2: string;\r\n        public couleurColonne2: Modeles.Application.COULEUR_GRANDE_COLONNE;\r\n        public configTendenceFluxCrediteurTotal: Modeles.Application.IConfigIndicateurFleche;\r\n        public typeDiagramme: number;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $modalInstance: angular.ui.bootstrap.IModalServiceInstance,\r\n            private data: Portefeuille.Modeles.ApplicationStats.IDetailPtf,\r\n            private indicateurFlecheService: Services.Application.IIndicateurFlecheService) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            ModaleDetailsFluxCrediteurControleur.logger.info(\">>> Appel de la méthode : ModaleDetailsFluxCrediteurControleur.initialiser <<<\");\r\n\r\n            this.titreModale = \"Flux commerciaux créditeurs\";\r\n            this.creerConfigDiagrammeColonneDetailPtfParSuviPar(this.data);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsDetailPtfParSuviPar\r\n         */\r\n        private creerConfigDiagrammeColonneDetailPtfParSuviPar(statsDetailPtf: Modeles.ApplicationStats.IDetailPtf): void {\r\n            let configDiagrammeColonnePnbParAgent: Modeles.Application.IDataIndicateurMutliColonne;\r\n            let index = 0;\r\n\r\n            this.configDiagrammeColonneFluxCrediteur = [];\r\n\r\n            //récupère l'ensemble des PNB et identifie le plus gros\r\n            let valeurMax: number = Math.max(\r\n                ..._.pluck(statsDetailPtf.detailParSuviPar, \"fluxCrediteursNMoins1\").\r\n                    concat(..._.pluck(statsDetailPtf.detailParSuviPar, \"fluxCrediteursAnneeN\")));\r\n\r\n            statsDetailPtf.detailParSuviPar.forEach((parSuiviPar: Modeles.ApplicationStats.IDetailPtfParSuviPar) => {\r\n                configDiagrammeColonnePnbParAgent = <Modeles.Application.IDataIndicateurMutliColonne>{};\r\n                configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne = [];\r\n\r\n                configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne.push(<Modeles.Application.IDataIndicateurColonne>{\r\n                    id: \"colonne-flux-cred-\" + index,\r\n                    intitule: \"\",\r\n                    valeur: parSuiviPar.fluxCrediteursNMoins1,\r\n                    couleur: Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2,\r\n                    hauteur: Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.fluxCrediteursNMoins1),\r\n                    estMontant: true\r\n                });\r\n                index = index + 1;\r\n\r\n                configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne.push(<Modeles.Application.IDataIndicateurColonne>{\r\n                    id: \"colonne-flux-cred-\" + index,\r\n                    intitule: \"\",\r\n                    valeur: parSuiviPar.fluxCrediteursAnneeN,\r\n                    couleur: Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1,\r\n                    hauteur: Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.fluxCrediteursAnneeN),\r\n                    estMontant: true\r\n                });\r\n                index = index + 1;\r\n\r\n                configDiagrammeColonnePnbParAgent.id = \"pnb-detail-agent-\" + index;\r\n                configDiagrammeColonnePnbParAgent.intitule = parSuiviPar.nomSuiviPar;\r\n                configDiagrammeColonnePnbParAgent.tendence = this.indicateurFlecheService.getConfigIndicateurFleche(parSuiviPar.tauxEvolutionFluxCrediteurs);\r\n                this.configDiagrammeColonneFluxCrediteur.push(configDiagrammeColonnePnbParAgent);\r\n            });\r\n\r\n\r\n            this.legendeColonne1 =\r\n                `${moment(statsDetailPtf.dateDebFluxAnneeNMoins1).format(\"MM/YYYY\")} à ` +\r\n                `${moment(statsDetailPtf.dateFinFluxAnneeNMoins1).format(\"MM/YYYY\")}`;\r\n            this.couleurColonne1 = Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2;\r\n            this.legendeColonne2 =\r\n                `${moment(statsDetailPtf.dateDebFluxAnneeN).format(\"MM/YYYY\")} à ` +\r\n                `${moment(statsDetailPtf.dateFinFluxAnneeN).format(\"MM/YYYY\")}`;\r\n            this.couleurColonne2 = Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1;\r\n            this.configTendenceFluxCrediteurTotal = this.indicateurFlecheService.getConfigIndicateurFleche(statsDetailPtf.tauxEvolutionFluxCrediteurs);\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get libelle1Total(): string {\r\n            return `Total flux créditeurs N-1 : ${Services.Utils.DataUtils.formaterMontantkiloText(this.data.fluxCrediteursNMoins1)}`;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get libelle2Total(): string {\r\n            return `Total flux créditeurs N : ${Services.Utils.DataUtils.formaterMontantkiloText(this.data.fluxCrediteursAnneeN)}`;\r\n        }\r\n               \r\n        /**\r\n         * Action du bouton \"Fermer\"\r\n         * @returns {void}\r\n         */\r\n        public fermer(): void {\r\n            this.$modalInstance.dismiss();\r\n        }\r\n    }\r\n\r\n    // Déclaration du controlleur\r\n    app.controller(ModaleDetailsFluxCrediteurControleur.CLASS_NAME, ModaleDetailsFluxCrediteurControleur);\r\n}\r\n","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class ModaleDetailsFluxDebiteurControleur {\r\n        public static CLASS_NAME: string = \"ModaleDetailsFluxDebiteurControleur\";\r\n        private static logger: MyWay.Services.Loggers.ILogger =\r\n            MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleDetailsFluxDebiteurControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        static $inject: string[] = [\r\n            Constantes.Inject.Angular.$modalInstance,\r\n            Constantes.Inject.MyWay.data,\r\n            Constantes.Inject.Services.indicateurFlecheService\r\n        ];\r\n\r\n        private titreModale: string;\r\n        public configDiagrammeColonneFluxDebiteur: Array<Modeles.Application.IDataIndicateurMutliColonne>;\r\n\r\n        public legendeColonne1: string;\r\n        public couleurColonne1: Modeles.Application.COULEUR_GRANDE_COLONNE;\r\n        public legendeColonne2: string;\r\n        public couleurColonne2: Modeles.Application.COULEUR_GRANDE_COLONNE;\r\n        public configTendenceFluxDebiteurTotal: Modeles.Application.IConfigIndicateurFleche;\r\n        public typeDiagramme: number;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $modalInstance: angular.ui.bootstrap.IModalServiceInstance,\r\n            private data: Portefeuille.Modeles.ApplicationStats.IDetailPtf,\r\n            private indicateurFlecheService: Services.Application.IIndicateurFlecheService) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            ModaleDetailsFluxDebiteurControleur.logger.info(\">>> Appel de la méthode : ModaleDetailsFluxDebiteurControleur.initialiser <<<\");\r\n\r\n            this.titreModale = \"Flux commerciaux débiteurs\";\r\n            this.creerConfigDiagrammeColonneDetailPtfParSuviPar(this.data);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsDetailPtfParSuviPar\r\n         */\r\n        private creerConfigDiagrammeColonneDetailPtfParSuviPar(statsDetailPtf: Modeles.ApplicationStats.IDetailPtf): void {\r\n            let configDiagrammeColonnePnbParAgent: Modeles.Application.IDataIndicateurMutliColonne;\r\n            let index = 0;\r\n\r\n            this.configDiagrammeColonneFluxDebiteur = [];\r\n\r\n            //récupère l'ensemble des PNB et identifie le plus gros\r\n            let valeurMax: number = Math.max(\r\n                ..._.pluck(statsDetailPtf.detailParSuviPar, \"fluxDebiteursNMoins1\").\r\n                    concat(..._.pluck(statsDetailPtf.detailParSuviPar, \"fluxDebiteursAnneeN\")));\r\n\r\n            statsDetailPtf.detailParSuviPar.forEach((parSuiviPar: Modeles.ApplicationStats.IDetailPtfParSuviPar) => {\r\n                configDiagrammeColonnePnbParAgent = <Modeles.Application.IDataIndicateurMutliColonne>{};\r\n                configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne = [];\r\n\r\n                configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne.push(<Modeles.Application.IDataIndicateurColonne>{\r\n                    id: \"colonne-flux-debit-\" + index,\r\n                    intitule: \"\",\r\n                    valeur: parSuiviPar.fluxDebiteursNMoins1,\r\n                    couleur: Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2,\r\n                    hauteur: Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.fluxDebiteursNMoins1),\r\n                    estMontant: true\r\n                });\r\n                index = index + 1;\r\n\r\n                configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne.push(<Modeles.Application.IDataIndicateurColonne>{\r\n                    id: \"colonne-flux-debit-\" + index,\r\n                    intitule: \"\",\r\n                    valeur: parSuiviPar.fluxDebiteursAnneeN,\r\n                    couleur: Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1,\r\n                    hauteur: Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.fluxDebiteursAnneeN),\r\n                    estMontant: true\r\n                });\r\n                index = index + 1;\r\n\r\n                configDiagrammeColonnePnbParAgent.id = \"pnb-detail-agent-\" + index;\r\n                configDiagrammeColonnePnbParAgent.intitule = parSuiviPar.nomSuiviPar;\r\n                configDiagrammeColonnePnbParAgent.tendence = this.indicateurFlecheService.getConfigIndicateurFleche(parSuiviPar.tauxEvolutionFluxDebiteurs);\r\n                this.configDiagrammeColonneFluxDebiteur.push(configDiagrammeColonnePnbParAgent);\r\n            });\r\n\r\n\r\n            this.legendeColonne1 =\r\n                `${moment(statsDetailPtf.dateDebFluxAnneeNMoins1).format(\"MM/YYYY\")} à ` +\r\n                `${moment(statsDetailPtf.dateFinFluxAnneeNMoins1).format(\"MM/YYYY\")}`;\r\n            this.couleurColonne1 = Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2;\r\n            this.legendeColonne2 =\r\n                `${moment(statsDetailPtf.dateDebFluxAnneeN).format(\"MM/YYYY\")} à ` +\r\n                `${moment(statsDetailPtf.dateFinFluxAnneeN).format(\"MM/YYYY\")}`;\r\n            this.couleurColonne2 = Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1;\r\n            this.configTendenceFluxDebiteurTotal = this.indicateurFlecheService.getConfigIndicateurFleche(statsDetailPtf.tauxEvolutionFluxDebiteurs);\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get libelle1Total(): string {\r\n            return `Total flux débiteurs N-1 : ${Services.Utils.DataUtils.formaterMontantkiloText(this.data.fluxDebiteursNMoins1)}`;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get libelle2Total(): string {\r\n            return `Total flux débiteurs N : ${Services.Utils.DataUtils.formaterMontantkiloText(this.data.fluxDebiteursAnneeN)}`;\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Fermer\"\r\n         * @returns {void}\r\n         */\r\n        public fermer(): void {\r\n            this.$modalInstance.dismiss();\r\n        }\r\n    }\r\n\r\n    // Déclaration du controlleur\r\n    app.controller(ModaleDetailsFluxDebiteurControleur.CLASS_NAME, ModaleDetailsFluxDebiteurControleur);\r\n}\r\n","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class ModaleDetailsPortefeuilleControleur {\r\n        public static CLASS_NAME: string = \"ModaleDetailsPortefeuilleControleur\";\r\n        private static logger: MyWay.Services.Loggers.ILogger =\r\n            MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleDetailsPortefeuilleControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        static $inject: string[] = [\r\n            Constantes.Inject.Angular.$modalInstance,\r\n            Constantes.Inject.MyWay.data\r\n        ];\r\n\r\n        private titreModale: string;\r\n        public configDiagrammeColonnePortefeuille: Array<Modeles.Application.IDataIndicateurColonne>;\r\n        public nombreTotalClient: number;\r\n        public nombreTotalDontActif: number;\r\n        public typeDiagramme: number;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $modalInstance: angular.ui.bootstrap.IModalServiceInstance,\r\n            private data: Portefeuille.Modeles.ApplicationStats.IDetailPtf\r\n        ) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            ModaleDetailsPortefeuilleControleur.logger.info(\">>> Appel de la méthode : ModaleDetailsPortefeuilleControleur.initialiser <<<\");\r\n\r\n            this.titreModale = \"Portefeuille(s)\";\r\n            this.creerConfigDiagrammeColonneDetailPtfParSuviPar(this.data.detailParSuviPar);\r\n            this.typeDiagramme = 1;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsDetailPtfParSuviPar\r\n         */\r\n        private creerConfigDiagrammeColonneDetailPtfParSuviPar(statsDetailPtfParSuviPar: Array<Modeles.ApplicationStats.IDetailPtfParSuviPar>): void {\r\n            this.configDiagrammeColonnePortefeuille = [];\r\n\r\n            //récupère l'ensemble clients et identifie le plus gros (on utilise ... pour faire passé un tableau en tableau liste d'élément)\r\n            let valeurMax: number = Math.max(..._.pluck(statsDetailPtfParSuviPar, \"nbClientsAvecProduitService\"));\r\n\r\n            this.nombreTotalClient = _.pluck(statsDetailPtfParSuviPar, \"nbClientsAvecProduitService\").reduce((a: number, b: number) => {\r\n                return a + b;\r\n            });\r\n            this.nombreTotalDontActif = _.pluck(statsDetailPtfParSuviPar, \"nombreClientsActifs\").reduce((a: number, b: number) => {\r\n                return a + b;\r\n            });\r\n\r\n            statsDetailPtfParSuviPar.forEach((parSuiviPar: Modeles.ApplicationStats.IDetailPtfParSuviPar) => {\r\n                this.configDiagrammeColonnePortefeuille.push(<Modeles.Application.IDataIndicateurColonne>{\r\n                    id: \"colonne-clients\" + parSuiviPar.nomSuiviPar,\r\n                    intitule: Portefeuille.Constantes.Application.DIAGRAMME_COLONNE_CLIENTS,\r\n                    sousIntitule: Portefeuille.Constantes.Application.DIAGRAMME_COLONNE_CLIENTS_ACTIFS,\r\n                    valeur: parSuiviPar.nbClientsAvecProduitService,\r\n                    sousValeur: parSuiviPar.nombreClientsActifs,\r\n                    couleur: Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_CLIENT,\r\n                    couleurSousValeur: Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_ACTIF,\r\n                    hauteur: Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, Math.abs(parSuiviPar.nbClientsAvecProduitService - parSuiviPar.nombreClientsActifs)),\r\n                    sousHauteur: Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.nombreClientsActifs),\r\n                    estMontant: false,\r\n                    nomSuiviPar: parSuiviPar.nomSuiviPar\r\n                });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get libelleTotal(): string {\r\n            return `Total clients : ${this.nombreTotalClient} dont ${this.nombreTotalDontActif} actifs`;\r\n        }\r\n               \r\n        /**\r\n         * Action du bouton \"Fermer\"\r\n         * @returns {void}\r\n         */\r\n        public fermer(): void {\r\n            this.$modalInstance.dismiss();\r\n        }\r\n    }\r\n\r\n    // Déclaration du controlleur\r\n    app.controller(ModaleDetailsPortefeuilleControleur.CLASS_NAME, ModaleDetailsPortefeuilleControleur);\r\n}\r\n","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class ModaleDetailsRentabilitePNBControleur {\r\n        public static CLASS_NAME: string = \"ModaleDetailsRentabilitePNBControleur\";\r\n        private static logger: MyWay.Services.Loggers.ILogger =\r\n            MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleDetailsRentabilitePNBControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        static $inject: string[] = [\r\n            Constantes.Inject.Angular.$modalInstance,\r\n            Constantes.Inject.MyWay.data,\r\n            Constantes.Inject.Services.indicateurFlecheService\r\n        ];\r\n\r\n        private titreModale: string;\r\n        public configDiagrammeColonnePnb: Array<Modeles.Application.IDataIndicateurMutliColonne>;\r\n\r\n        public legendeColonne1: string;\r\n        public couleurColonne1: Modeles.Application.COULEUR_GRANDE_COLONNE;\r\n        public legendeColonne2: string; \r\n        public couleurColonne2: Modeles.Application.COULEUR_GRANDE_COLONNE;\r\n        public configTendencePNBTotal: Modeles.Application.IConfigIndicateurFleche;\r\n        public typeDiagramme: number;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $modalInstance: angular.ui.bootstrap.IModalServiceInstance,\r\n            private data: Portefeuille.Modeles.ApplicationStats.IDetailPtf,\r\n            private indicateurFlecheService: Services.Application.IIndicateurFlecheService) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            ModaleDetailsRentabilitePNBControleur.logger.info(\">>> Appel de la méthode : ModaleDetailsRentabilitePNBControleur.initialiser <<<\");\r\n\r\n            this.titreModale = \"PNB (IPADE)\";\r\n            this.creerConfigDiagrammeColonneDetailPtfParSuviPar(this.data);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsDetailPtfParSuviPar\r\n         */\r\n        private creerConfigDiagrammeColonneDetailPtfParSuviPar(statsDetailPtf: Modeles.ApplicationStats.IDetailPtf): void {\r\n            let configDiagrammeColonnePnbParAgent: Modeles.Application.IDataIndicateurMutliColonne;\r\n            let index = 0;\r\n\r\n            this.configDiagrammeColonnePnb = [];\r\n\r\n            //récupère l'ensemble des PNB et identifie le plus gros\r\n            let valeurMax: number = Math.max(\r\n                ..._.pluck(statsDetailPtf.detailParSuviPar, \"pnb12DerniersMoisGlissNMoins1\").\r\n                concat(..._.pluck(statsDetailPtf.detailParSuviPar, \"pnb12DerniersMoisGlissantN\")));\r\n\r\n            statsDetailPtf.detailParSuviPar.forEach((parSuiviPar: Modeles.ApplicationStats.IDetailPtfParSuviPar) => {\r\n                configDiagrammeColonnePnbParAgent = <Modeles.Application.IDataIndicateurMutliColonne>{};\r\n                configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne = [];\r\n                \r\n                configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne.push(<Modeles.Application.IDataIndicateurColonne>{\r\n                    id: \"colonne-pnb-\" + index,\r\n                    intitule: \"\",\r\n                    valeur: parSuiviPar.pnb12DerniersMoisGlissNMoins1,\r\n                    couleur: Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2,\r\n                    hauteur: Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.pnb12DerniersMoisGlissNMoins1),\r\n                    estMontant: true\r\n                });\r\n                index = index + 1;\r\n\r\n                configDiagrammeColonnePnbParAgent.dataIndicateurMutliColonne.push(<Modeles.Application.IDataIndicateurColonne>{\r\n                    id: \"colonne-pnb-\" + index,\r\n                    intitule: \"\",\r\n                    valeur: parSuiviPar.pnb12DerniersMoisGlissantN,\r\n                    couleur: Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1,\r\n                    hauteur: Services.Utils.ApplicationUtils.calculerHauteurRelativeColonne(valeurMax, parSuiviPar.pnb12DerniersMoisGlissantN),\r\n                    estMontant: true\r\n                });\r\n                index = index + 1;\r\n\r\n                configDiagrammeColonnePnbParAgent.id = \"pnb-detail-agent-\" + index;\r\n                configDiagrammeColonnePnbParAgent.intitule = parSuiviPar.nomSuiviPar;\r\n                configDiagrammeColonnePnbParAgent.tendence = this.indicateurFlecheService.getConfigIndicateurFleche(parSuiviPar.tauxEvolutionPnb);\r\n                this.configDiagrammeColonnePnb.push(configDiagrammeColonnePnbParAgent);\r\n            });\r\n\r\n            \r\n            this.legendeColonne1 =\r\n                `${moment(statsDetailPtf.dateDebPnb12DerMoisGlissNMoins1).format(\"DD/MM/YYYY\")} à ` +\r\n                `${moment(statsDetailPtf.dateFinPnb12DerMoisGlissNMoins1).format(\"DD/MM/YYYY\")}`;\r\n            this.couleurColonne1 = Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE2;\r\n            this.legendeColonne2 =\r\n                `${moment(statsDetailPtf.dateDebPnb12DerMoisGlissN).format(\"DD/MM/YYYY\")} à ` +\r\n                `${moment(statsDetailPtf.dateFinPnb12DerMoisGlissN).format(\"DD/MM/YYYY\")}`;\r\n            this.couleurColonne2 = Modeles.Application.COULEUR_GRANDE_COLONNE.COULEUR_PERIODE1;\r\n            this.configTendencePNBTotal = this.indicateurFlecheService.getConfigIndicateurFleche(statsDetailPtf.tauxEvolutionPnb);\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get libelle1Total(): string {\r\n            return `Total PNB N-1 : ${Services.Utils.DataUtils.formaterMontantkiloText(this.data.pnb12DerniersMoisGlissNMoins1)}`;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get libelle2Total(): string {\r\n            return `Total PNB N : ${Services.Utils.DataUtils.formaterMontantkiloText(this.data.pnb12DerniersMoisGlissantN)}`;\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Fermer\"\r\n         * @returns {void}\r\n         */\r\n        public fermer(): void {\r\n            this.$modalInstance.dismiss();\r\n        }\r\n    }\r\n\r\n    // Déclaration du controlleur\r\n    app.controller(ModaleDetailsRentabilitePNBControleur.CLASS_NAME, ModaleDetailsRentabilitePNBControleur);\r\n}\r\n","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class ModaleDetailsRevuePortefeuilleControleur {\r\n        public static CLASS_NAME: string = \"ModaleDetailsRevuePortefeuilleControleur\";\r\n        private static logger: MyWay.Services.Loggers.ILogger =\r\n            MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleDetailsRevuePortefeuilleControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        static $inject: string[] = [\r\n            Constantes.Inject.Angular.$modalInstance,\r\n            Constantes.Inject.MyWay.data\r\n        ];\r\n\r\n        //\r\n        private titreModale: string;\r\n        public configDiagrammePourcentageTauxRevue: Array<Services.LibrairieD3.IConfigPourcentageD3>;\r\n\r\n\r\n        public pourcentageTauxTotal: number;\r\n        public configIndicateurPourcentage: Services.LibrairieD3.IConfigPourcentageD3;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $modalInstance: angular.ui.bootstrap.IModalServiceInstance,\r\n            private data: Portefeuille.Modeles.ApplicationStats.IDetailPtf\r\n        ) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            ModaleDetailsRevuePortefeuilleControleur.logger.info(\">>> Appel de la méthode : ModaleDetailsRevuePortefeuilleControleur.initialiser <<<\");\r\n\r\n            this.titreModale = \"Taux de revues\";\r\n            this.creerConfigDiagrammePourcentageDetailTauxRevueParSuviPar(this.data);\r\n\r\n            //Chargement de la la liste détail\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsDetailPtfParSuviPar\r\n         */\r\n        private creerConfigDiagrammePourcentageDetailTauxRevueParSuviPar(statsDetailPtf: Modeles.ApplicationStats.IDetailPtf): void {\r\n            this.configDiagrammePourcentageTauxRevue = [];\r\n            let index = 0;\r\n            statsDetailPtf.detailParSuviPar.forEach((parSuiviPar: Modeles.ApplicationStats.IDetailPtfParSuviPar) => {\r\n                this.configDiagrammePourcentageTauxRevue.push(<Services.LibrairieD3.IConfigPourcentageD3>{\r\n                    titre: \"\",\r\n                    id: \"pourcentage-clients-revue\" + index,\r\n                    degrade: Services.LibrairieD3.DEGRADE_POURCENTAGE.BLEU,\r\n                    pourcentageUn: parSuiviPar.tauxDeRevue,\r\n                    nombreUn: parSuiviPar.tauxDeRevue,\r\n                    legende: parSuiviPar.nomSuiviPar\r\n                });\r\n                index = index + 1;\r\n            });\r\n            this.pourcentageTauxTotal = this.data.tauxDeRevueTotal;\r\n        }\r\n               \r\n        /**\r\n         * Action du bouton \"Fermer\"\r\n         * @returns {void}\r\n         */\r\n        public fermer(): void {\r\n            this.$modalInstance.dismiss();\r\n        }\r\n    }\r\n\r\n    // Déclaration du controlleur\r\n    app.controller(ModaleDetailsRevuePortefeuilleControleur.CLASS_NAME, ModaleDetailsRevuePortefeuilleControleur);\r\n}\r\n","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class ModaleDetailsTauxVisiteControleur {\r\n        public static CLASS_NAME: string = \"ModaleDetailsTauxVisiteControleur\";\r\n        private static logger: MyWay.Services.Loggers.ILogger =\r\n            MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleDetailsTauxVisiteControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        static $inject: string[] = [\r\n            Constantes.Inject.Angular.$modalInstance,\r\n            Constantes.Inject.MyWay.data\r\n        ];\r\n\r\n        //\r\n        private titreModale: string;\r\n        public configDiagrammePourcentageTauxVisite: Array<Services.LibrairieD3.IConfigPourcentageD3>;\r\n\r\n\r\n        public pourcentageTauxTotal: number;\r\n        public configIndicateurPourcentage: Services.LibrairieD3.IConfigPourcentageD3;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $modalInstance: angular.ui.bootstrap.IModalServiceInstance,\r\n            private data: Portefeuille.Modeles.ApplicationStats.IDetailPtf\r\n        ) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            ModaleDetailsTauxVisiteControleur.logger.info(\">>> Appel de la méthode : ModaleDetailsPortefeuilleControleur.initialiser <<<\");\r\n\r\n            this.titreModale = \"Taux de visites (Relations économiques)\";\r\n            this.creerConfigDiagrammePourcentageDetailTauxVisiteParSuviPar(this.data);\r\n\r\n            //Chargement de la la liste détail\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsDetailPtfParSuviPar\r\n         */\r\n        private creerConfigDiagrammePourcentageDetailTauxVisiteParSuviPar(statsDetailPtf: Modeles.ApplicationStats.IDetailPtf): void {\r\n            this.configDiagrammePourcentageTauxVisite = [];\r\n            let index = 0;\r\n            statsDetailPtf.detailParSuviPar.forEach((parSuiviPar: Modeles.ApplicationStats.IDetailPtfParSuviPar) => {\r\n                this.configDiagrammePourcentageTauxVisite.push(<Services.LibrairieD3.IConfigPourcentageD3>{\r\n                    titre: \"\",\r\n                    id: \"pourcentage-clients-visite\" + index,\r\n                    degrade: Services.LibrairieD3.DEGRADE_POURCENTAGE.BLEU,\r\n                    pourcentageUn: parSuiviPar.tauxDeVisite,\r\n                    nombreUn: parSuiviPar.tauxDeVisite,\r\n                    legende: parSuiviPar.nomSuiviPar\r\n                });\r\n                index = index + 1;\r\n            });\r\n            this.pourcentageTauxTotal = this.data.tauxDeVisiteTotal;\r\n        }\r\n               \r\n        /**\r\n         * Action du bouton \"Fermer\"\r\n         * @returns {void}\r\n         */\r\n        public fermer(): void {\r\n            this.$modalInstance.dismiss();\r\n        }\r\n    }\r\n\r\n    // Déclaration du controlleur\r\n    app.controller(ModaleDetailsTauxVisiteControleur.CLASS_NAME, ModaleDetailsTauxVisiteControleur);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur de la modale de filtre\r\n * @module Portefeuille.Controleurs\r\n * @author S0078068 (Yannis VESSEREAU)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class ModaleFiltreControleur {\r\n        private static CLASS_NAME: string = \"ModaleFiltreControleur\";\r\n        private static logger: MyWay.Services.Loggers.ILogger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModaleFiltreControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        static $inject: string[] = [\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Angular.$modalInstance,\r\n            Constantes.Inject.MyWay.data,\r\n            Constantes.Inject.Angular.$filter,\r\n            Constantes.Inject.Services.indicateurService,\r\n            Constantes.Inject.Services.filtreService,\r\n            Constantes.Inject.Services.begacliService\r\n        ];\r\n\r\n        // Variables d'entrée\r\n        public listeIndicateurs: Array<Modeles.Application.IIndicateurFiltre>;\r\n        public listeIndicateursTableau: Array<Modeles.Application.IIndicateurChoix>;\r\n        public listeFiltres: Array<Modeles.Application.IFiltre>;\r\n        public estVueClient: boolean;\r\n\r\n        // Variables utiles\r\n        public listeIndicateursFiltreDisponible: Array<Modeles.Application.IIndicateurFiltre>;\r\n        public pasDeFiltreDisponible: boolean;\r\n        public unSeulFiltreDisponible: boolean;\r\n        public sansFiltreActif: boolean;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $scope: ng.IScope,\r\n            private $modalInstance: angular.ui.bootstrap.IModalServiceInstance,\r\n            private data: Modeles.Application.IPopupData<any>,\r\n            private $filter: ng.IFilterService,\r\n            private indicateurService: Services.Application.IIndicateurService,\r\n            private filtreService: Services.Application.IFiltreService,\r\n            private begacliService: Services.Application.IBegacliService) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            ModaleFiltreControleur.logger.info(\">>> Appel de la méthode : ModaleFiltreControleur.initialiser <<<\");\r\n\r\n            console.log(\"--> filtre Begacli\", this.begacliService.getFiltreBegacli());\r\n\r\n            // Récupération des données transmises\r\n            this.listeIndicateurs = this.data.model.listeIndicateursFiltre;\r\n            this.listeIndicateursTableau = this.data.model.listeIndicateursTableau;\r\n            this.listeFiltres = this.data.model.listeFiltres;\r\n            this.estVueClient = this.data.model.estVueClient;\r\n\r\n            // Initialisation du boolean filtre actif ou non\r\n            this.sansFiltreActif = this.listeFiltres.length === 0;\r\n\r\n            // Création de la liste des indicateurs disponibles\r\n            this.listeIndicateursFiltreDisponible = [];\r\n\r\n            _.forEach(this.listeIndicateursTableau, (indicateurChoix: Modeles.Application.IIndicateurChoix) => {\r\n                // n'affiche pas premier_Equipement car il est déjà géré en premier_Equipement TAG\r\n                if (indicateurChoix.indicateur.code !== Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {\r\n                    if (this.estVueClient) {\r\n                        this.ajouterFiltreDisponible(indicateurChoix.indicateur.code);\r\n                    } else if (!indicateurChoix.indicateur.estUniquementVueClients) {\r\n                        this.ajouterFiltreDisponible(indicateurChoix.indicateur.codeRel);\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Ajout des indicateurs non visibles\r\n            // Et n'affiche pas premier_Equipement car il est déjà géré en premier_Equipement TAG\r\n            _.forEach(this.indicateurService.getListeTotaleIndicateursType(), (indicateurType: Modeles.Application.IIndicateurType) => {\r\n                if (!indicateurType.estVisibleColonne\r\n                    && indicateurType.code !== Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {\r\n                    if (this.estVueClient) {\r\n                        this.ajouterFiltreDisponible(indicateurType.code);\r\n                    } else if (!indicateurType.estUniquementVueClients) {\r\n                        this.ajouterFiltreDisponible(indicateurType.codeRel);\r\n                    }\r\n                }\r\n            });\r\n\r\n            let listeIndicateurFiltered = this.$filter(\"sansIndicateurDateFiltre\")(this.listeIndicateursFiltreDisponible);\r\n            this.pasDeFiltreDisponible = listeIndicateurFiltered.length === 0;\r\n            this.unSeulFiltreDisponible = listeIndicateurFiltered.length === 1;\r\n\r\n            if (this.sansFiltreActif) {\r\n                this.ajouterCondition(false);\r\n            }\r\n        }\r\n\r\n        private ajouterFiltreDisponible(code: string) {\r\n            let indicateurFiltreExistant = _.find(this.listeIndicateurs, (indicateurFiltre: Modeles.Application.IIndicateurFiltre) => {\r\n                return code === indicateurFiltre.indicateur.code;\r\n            });\r\n\r\n            // console.log(\"--> indicateurFiltreExistant.indicateur.code : \", indicateurFiltreExistant.indicateur.code);\r\n            if (indicateurFiltreExistant) {\r\n                if (indicateurFiltreExistant.indicateur.code !== Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG.toString()) {\r\n                    // on ignore le PREMIER_EQUIPEMENT_TAG qui a été remplacé par PREMIER_EQUIPEMENT_TEXTE\r\n                    this.listeIndicateursFiltreDisponible.push(indicateurFiltreExistant);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'ajouter une condition interne au bloc\r\n         * @returns {void}\r\n         */\r\n        public ajouterCondition(setDefaultEt: boolean): void {\r\n            this.filtreService.ajouterFiltre(this.listeFiltres, setDefaultEt);\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Appliquer\"\r\n         * @returns {void}\r\n         */\r\n        public appliquer(): void {\r\n            let donneesDeSortie = <Modeles.Application.IDonneesEntreeSortiePopupFiltres>{};\r\n            donneesDeSortie.listeFiltres = this.listeFiltres;\r\n            donneesDeSortie.listeIndicateursFiltre = this.listeIndicateurs;\r\n            console.log(\"--> appliquer : \", this.listeFiltres);\r\n            // on fait le ménage pour BEGACLI...\r\n            if (this.listeFiltres.length === 0) {\r\n                this.begacliService.setCasesDecochees();\r\n            }\r\n\r\n            this.$modalInstance.close(donneesDeSortie);\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Fermer\"\r\n         * @returns {void}\r\n         */\r\n        public fermer(): void {\r\n            this.$modalInstance.dismiss();\r\n        }\r\n\r\n        /**\r\n         * Action de l'appui de la touche \"Entrer\"\r\n         * @returns {void}\r\n         */\r\n        public appuiToucheEntrer($event: any): void {\r\n            if ($event.keyCode === 13 && !this.desactiverBoutonAppliquer()) {\r\n                $event.preventDefault();\r\n                this.appliquer();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Ajouter +\"\r\n         * @returns {void}\r\n         */\r\n        public afficherBoutonAjouter(): boolean {\r\n            return (this.listeFiltres.length === 1\r\n                && this.unSeulFiltreDisponible) ?\r\n                false :\r\n                !(this.listeFiltres.length >= 2);\r\n        }\r\n\r\n        /**\r\n         * Desactiver ou non le bouton \"Annuler\"\r\n         * @returns {void}\r\n         */\r\n        public desactiverBoutonAnnuler(): boolean {\r\n            return this.pasDeFiltreDisponible\r\n                || (this.sansFiltreActif\r\n                    && this.listeFiltres.length === 0);\r\n        }\r\n\r\n        /**\r\n         * Descativer ou non le bouton \"Appliquer\"\r\n         * @returns {void}\r\n         */\r\n        public desactiverBoutonAppliquer(): boolean {\r\n            let estMalRempli = false;\r\n            _.forEach(this.listeFiltres, (filtre: Modeles.Application.IFiltre, index: number) => {\r\n                // Test de l'indicateur\r\n                if (filtre.indicateur) {\r\n                    switch (filtre.indicateur.indicateur.typeIndicateur) {\r\n                        case Enum.Indicateur.TYPE.TEXTE:\r\n                            if (!_.find(filtre.indicateur.listeValeurs, (valeur: Modeles.Application.IValeurFiltre) => {\r\n                                return valeur.actif;\r\n                            })) {\r\n                                estMalRempli = true;\r\n                                return false;\r\n                            }\r\n                            break;\r\n                        case Enum.Indicateur.TYPE.BEGACLI:\r\n                            if (!this.begacliService.getCasesCochees()) {\r\n                                estMalRempli = true;\r\n                                return false;\r\n                            }\r\n                            break;\r\n                        case Enum.Indicateur.TYPE.NOMBRE:\r\n                        case Enum.Indicateur.TYPE.DATE:\r\n                        case Enum.Indicateur.TYPE.MONTANT:\r\n                        case Enum.Indicateur.TYPE.POURCENT:\r\n                            // Test du comparateur\r\n                            if (this.controllerComparateurKo(filtre)) {\r\n                                estMalRempli = true;\r\n                                return false;\r\n                            }\r\n                            break;\r\n\r\n                        default:\r\n                            estMalRempli = true;\r\n                            return false;\r\n                    }\r\n\r\n                    // Test de l'opérateur\r\n                    if (!filtre.operateur && index > 0) {\r\n                        estMalRempli = true;\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    estMalRempli = true;\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            return estMalRempli\r\n                || this.pasDeFiltreDisponible\r\n                || (this.sansFiltreActif && this.listeFiltres.length === 0);\r\n        }\r\n\r\n        /**\r\n         * Controle si un nombre est : \r\n         *  - non null\r\n         *  - non defini\r\n         *  - non négatif\r\n         * @param valeur valeur à controler\r\n         */\r\n        private estVide(valeur: number): boolean {\r\n            return valeur === null ||\r\n                valeur === undefined ||\r\n                valeur < 0;\r\n        }\r\n\r\n  \r\n        /**\r\n         * Controle le la validité du comparateur\r\n         * @param filtre\r\n         */\r\n        private controllerComparateurKo(filtre: Modeles.Application.IFiltre): boolean {\r\n            let retour: boolean = false;\r\n            if (filtre.comparateur) {\r\n                if (filtre.comparateur === Enum.Filtre.COMPARATEUR.NC\r\n                    || filtre.comparateur === Enum.Filtre.COMPARATEUR.NONREALISEE\r\n                    || filtre.comparateur === Enum.Filtre.COMPARATEUR.ECHUE\r\n                    || filtre.comparateur === Enum.Filtre.COMPARATEUR.ENCOURS) {\r\n                    retour = false;\r\n                } else if (filtre.comparateur === Enum.Filtre.COMPARATEUR.ENTRE) {\r\n                    if (this.estVide(filtre.valeurMultiple1)\r\n                        || this.estVide(filtre.valeurMultiple2)) {\r\n                        // On intérdit toute saisie partielle\r\n                        retour = true;\r\n                    } else if (filtre.valeurMultiple1 > filtre.valeurMultiple2) {\r\n                        // On intérdit toute saisie inverse sur un interval de date ou de nombre\r\n                        retour = true;\r\n                    }; \r\n                } else if (this.estVide(filtre.valeurUnique)) {\r\n                    retour = true;\r\n                }\r\n            } else {\r\n                retour = true;\r\n            }\r\n            return retour;\r\n        }\r\n    }\r\n\r\n    // Déclaration du controlleur\r\n    app.controller(\"ModaleFiltreControleur\", ModaleFiltreControleur);\r\n}\r\n","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur de la modale des paniers\r\n * @module Portefeuille.Controleurs\r\n * @author S0078068 (Yannis VESSEREAU)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class ModalePaniersControleur {\r\n        public static CLASS_NAME: string = \"ModalePaniersControleur\";\r\n        private static logger: MyWay.Services.Loggers.ILogger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(ModalePaniersControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        static $inject: string[] = [\r\n            Constantes.Inject.Angular.$rootScope,\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Services.modalePaniersService,\r\n            Constantes.Inject.Angular.$modalInstance,\r\n            Constantes.Inject.MyWay.data,\r\n            Constantes.Inject.Services.preferencesService,\r\n            Constantes.Inject.Services.popupService,\r\n            Constantes.Inject.Services.indicateurService,\r\n            Constantes.Inject.Services.listeClientsService,\r\n            Constantes.Inject.Angular.$q,\r\n            Constantes.Inject.MyWay.mwEvents,\r\n            Constantes.Inject.Angular.$location,\r\n            Constantes.Inject.Angular.$anchorScroll\r\n        ];\r\n\r\n        // Variables d'entrée\r\n        public listeTotaleIndicateurs: Array<Modeles.Application.IIndicateurType>;\r\n        public listePaniers: Array<Modeles.Application.IPanier>;\r\n        public listeFiltresClients: Array<Modeles.Application.IFiltre>;\r\n        public listeFiltresRelationEco: Array<Modeles.Application.IFiltre>;\r\n\r\n        // Variables utiles\r\n        public panierEnCours: Modeles.Application.IPanier;\r\n        public listeTuileCatalogueSettings: Array<Modeles.Application.ITuileCatalogueSettings>;\r\n        public listeTuilePanierSettings: Array<Modeles.Application.ITuilePanierSettings>;\r\n        public listeCodesIndicateursPanierInit: Array<string>;\r\n        public panierDropSettings: Modeles.Application.IDropSettings;\r\n        public poubelleDropSettings: Modeles.Application.IDropSettings;\r\n        public estAfficherDropPanier: boolean;\r\n        public estAfficherBoutonAjouter: boolean;\r\n        public estEnEditionPanier: boolean;\r\n        public estEnEditionCatalogue: boolean;\r\n        public nomFiltre1: string;\r\n        public nomFiltre2: string;\r\n        public nomFiltre3: string;\r\n        public nomFiltre4: string;\r\n        public chargementEnCours: boolean;\r\n        public listeErreurs: Modeles.Application.IMessageErreurIHM[];\r\n        public txtAjoutPerso: string;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $rootScope: ng.IRootScopeService,\r\n            private $scope: ng.IScope,\r\n            private modalePaniersService: Services.Application.IModalePaniersService,\r\n            private $modalInstance: angular.ui.bootstrap.IModalServiceInstance,\r\n            private data: Modeles.Application.IPopupData<any>,\r\n            private preferencesService: Services.Application.IPreferencesService,\r\n            private popupService: Services.Application.IPopupService,\r\n            private indicateurService: Services.Application.IIndicateurService,\r\n            private listeClientsService: Services.Application.IListeClientsService,\r\n            private $q: ng.IQService,\r\n            private mwEvents: MyWay.UI.IMwEvents,\r\n            private $location: ng.ILocationService,\r\n            private scroll: ng.IAnchorScrollService\r\n        ) {\r\n            // Récupération des données transmises\r\n            this.listeTotaleIndicateurs = data.model.listeTotaleIndicateurs;\r\n            this.listePaniers = data.model.listePaniers ? data.model.listePaniers : [];\r\n            this.listeFiltresClients = data.model.listeFiltresClients;\r\n            this.listeFiltresRelationEco = data.model.listeFiltresRelationEco;\r\n            this.txtAjoutPerso = Constantes.Application.CHAINE_AJOUT_PERSONNALISATION;\r\n            this.listeErreurs = [];\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le controleur\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            this.chargementEnCours = false;\r\n            ModalePaniersControleur.logger.info(\">>> Appel de la méthode : ModalePaniersControleur.initialiser <<<\");\r\n            \r\n            this.modalePaniersService.setModalePaniersControleur(this);\r\n\r\n            // Initialisation variables\r\n            this.estAfficherDropPanier = false;\r\n            this.estEnEditionPanier = false;\r\n\r\n            // Récupération du premier panier\r\n            //this.panierEnCours = this.listePaniers[0];\r\n\r\n            // Gestion de panier vide: on créer une nouvelle selection\r\n            if (this.listePaniers.length === 0) {\r\n                this.ajouterSelection();\r\n            }\r\n\r\n            // Récupération du premier defaut\r\n            let lstPanierDefaut = _.where(this.listePaniers, { \"estDefaut\": true });\r\n            this.panierEnCours = lstPanierDefaut.length > 0 ? lstPanierDefaut[0] : this.listePaniers[0];\r\n\r\n            // Nouvelle selection\r\n            if (this.listePaniers.length < Constantes.Application.LIMITE_NB_PANIERS\r\n                && this.panierEnCours.nom) {\r\n                this.listePaniers.push(this.recupererPanierFacticeAjoutSelection());\r\n            }\r\n\r\n            // Gestion erreur si on arrive avec un panier sans nom\r\n            if (this.panierEnCours.numero) {\r\n                this.estFormulaireValide();\r\n            }\r\n\r\n            // Creation de listeTuileCatalogueSettings\r\n            this.listeTuileCatalogueSettings = [];\r\n            _.forEach(this.listeTotaleIndicateurs, (indicateur: Modeles.Application.IIndicateurType) => {\r\n\r\n                if (indicateur.estVisibleColonne) {\r\n\r\n                    let tuileCatalogueSettings = <Modeles.Application.ITuileCatalogueSettings>{};\r\n                    tuileCatalogueSettings.id = this.modalePaniersService.genererIdentifiantAleatoire();\r\n                    tuileCatalogueSettings.estEnEdition = false;\r\n\r\n                    // Récupération de l'indicateur\r\n                    let indicateurExistant = _.find(this.panierEnCours.listeChoixIndicateurs, (indicateurChoix: Modeles.Application.IIndicateurChoix) => {\r\n                        return indicateurChoix.indicateur.code === indicateur.code;\r\n                    });\r\n\r\n                    if (indicateurExistant) {\r\n                        tuileCatalogueSettings.indicateur = indicateurExistant;\r\n                    } else {\r\n                        let indicateurCatalogue = <Modeles.Application.IIndicateurChoix>{};\r\n                        indicateurCatalogue.indicateur = indicateur;\r\n                        indicateurCatalogue.choisi = false;\r\n                        tuileCatalogueSettings.indicateur = indicateurCatalogue;\r\n                    }\r\n\r\n                    this.listeTuileCatalogueSettings.push(tuileCatalogueSettings); \r\n                }\r\n            });\r\n\r\n            // Création de listeTuilePanierSettings\r\n            this.listeTuilePanierSettings = [];\r\n            _.forEach(this.panierEnCours.listeChoixIndicateurs, (indicateur: Modeles.Application.IIndicateurChoix) => {\r\n\r\n                let tuilePanierSettings = <Modeles.Application.ITuilePanierSettings>{};\r\n                tuilePanierSettings.id = this.modalePaniersService.genererIdentifiantAleatoire();\r\n                tuilePanierSettings.indicateur = indicateur;\r\n                tuilePanierSettings.estEnEdition = false;\r\n\r\n                this.listeTuilePanierSettings.push(tuilePanierSettings); \r\n            });\r\n\r\n            //// Init affichage ou non du bouton Ajouter\r\n            //if (this.listeTuilePanierSettings.length < Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {\r\n            //    this.setEstAfficherBoutonAjouter(true);\r\n            //} else {\r\n            //    this.setEstAfficherBoutonAjouter(false);\r\n            //}\r\n\r\n            // Création des paramètres du drop du panier\r\n            this.panierDropSettings = this.modalePaniersService.creerDropSettings(this.panierDeposeEvent);\r\n\r\n            // Création des paramètres du drop de la poubelle\r\n            this.poubelleDropSettings = this.modalePaniersService.creerDropSettings(this.poubelleDeposeEvent);\r\n        }\r\n\r\n        private recupererPanierFacticeAjoutSelection(): Modeles.Application.IPanier {\r\n            let panierFactice: Modeles.Application.IPanier = <Modeles.Application.IPanier>{\r\n                numero: 0, estDefaut: false, listeChoixIndicateurs: null, nom: Constantes.Application.CHAINE_AJOUT_PERSONNALISATION\r\n            };\r\n            return panierFactice;\r\n        }\r\n\r\n        /**\r\n         * Variable contenant la méthode a appelé lorsqu'un indicateur est déposé dans le panier\r\n         */\r\n        public panierDeposeEvent = (tuileCatalogueSettings: Modeles.Application.ITuileCatalogueSettings) => {\r\n\r\n            // Changement de l'état de l'indicateur\r\n            tuileCatalogueSettings.indicateur.choisi = true;\r\n\r\n            // Création de la nouvelle tuile panier\r\n            let tuilePanierSettings = <Modeles.Application.ITuilePanierSettings>{};\r\n            tuilePanierSettings.id = this.modalePaniersService.genererIdentifiantAleatoire();\r\n            tuilePanierSettings.indicateur = tuileCatalogueSettings.indicateur;\r\n            this.listeTuilePanierSettings.push(tuilePanierSettings);\r\n\r\n            // On desactive les drops du panier\r\n            this.setEstActiverDropPanier(false);\r\n            this.modalePaniersService.desactiverDropTuilesPanier(this.listeTuilePanierSettings);\r\n\r\n            // Rafraichir listeTuileCatalogueSettings\r\n            this.rafraichirListeTuileCatalogueSettings();\r\n\r\n            // si le nombre d'indicateur max est atteint\r\n            if (this.getNombreIndicateurPanier() === Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {\r\n                // Desactivation du drag sur les tuiles du catalogue\r\n                _.forEach(this.listeTuileCatalogueSettings, (tuile: Modeles.Application.ITuileCatalogueSettings) => {\r\n                    tuile.dragSettings.desactiverDrag();\r\n                });\r\n            }\r\n\r\n            // Mise à jour du message d'avertissement de modification de filtre\r\n            this.modalePaniersService.afficherMessageAvertissementFiltre(\r\n                this.listeFiltresRelationEco,\r\n                this.listeFiltresClients,\r\n                _.pluck(this.listeTuilePanierSettings, \"indicateur\"));\r\n\r\n            //this.$scope.$applyAsync();\r\n            this.$scope.$apply();\r\n        };\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'état du drop panier\r\n         * @param {boolean} estAfficher\r\n         * @returns {void}\r\n         */\r\n        public setEstActiverDropPanier(estAfficher: boolean): void { \r\n            this.estAfficherDropPanier = estAfficher;\r\n\r\n            if (estAfficher) {\r\n                this.panierDropSettings.activerDragOver();\r\n            } else {\r\n                this.panierDropSettings.desactiverDragOver();\r\n            }\r\n\r\n            //this.$scope.$applyAsync();\r\n            this.$scope.$apply();\r\n        }\r\n\r\n        /**\r\n         * Variable contenant la méthode a appelé lorsqu'un indicateur est déposé dans la poubelle\r\n         */\r\n        public poubelleDeposeEvent = (tuilePanierSettings: Modeles.Application.ITuilePanierSettings) => {\r\n\r\n            // Si Mode édtion catalogue\r\n            if (this.estEnEditionCatalogue) {\r\n                // Récupération de la tuile catalogue\r\n                let tuileCatalogue = _.find(this.listeTuileCatalogueSettings, (tuile: Modeles.Application.ITuileCatalogueSettings) => {\r\n                    return tuile.indicateur.indicateur.code === tuilePanierSettings.indicateur.indicateur.code;\r\n                });\r\n\r\n                tuileCatalogue.estEnEdition = true;\r\n            }\r\n\r\n            this.modalePaniersService.supprimerIndicateurPanier(\r\n                tuilePanierSettings,\r\n                this.listeTuileCatalogueSettings,\r\n                this.listeTuilePanierSettings,\r\n                this.listeFiltresClients,\r\n                this.listeFiltresRelationEco);\r\n\r\n            // On cache le drop poubelle\r\n            this.setEstAfficherDropPoubelle(false);\r\n\r\n            // On desactive les drops des tuiles du panier\r\n            this.modalePaniersService.desactiverDropTuilesPanier(this.listeTuilePanierSettings);\r\n        };\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'état du drop poubelle\r\n         * @param {boolean} estAfficher\r\n         * @returns {void}\r\n         */\r\n        public setEstAfficherDropPoubelle(estAfficher: boolean): void {\r\n            if (estAfficher) {\r\n                this.poubelleDropSettings.activerDragOver();\r\n            } else {\r\n                this.poubelleDropSettings.desactiverDragOver();\r\n            }\r\n            //this.$scope.$applyAsync(); \r\n            this.$scope.$apply(); \r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'état du bouton ajouter\r\n         * @param {boolean} estAfficher\r\n         * @returns {void}\r\n         */\r\n        public setEstAfficherBoutonAjouter(estAfficher: boolean): void {\r\n            this.estAfficherBoutonAjouter = estAfficher;\r\n            //this.$scope.$applyAsync();\r\n            this.$scope.$apply();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de rafraichir listeTuileCatalogueSettings\r\n         * @return {void}\r\n         */\r\n        public rafraichirListeTuileCatalogueSettings(): void {\r\n            let listeTemp = this.listeTuileCatalogueSettings;\r\n            this.listeTuileCatalogueSettings = [];\r\n            //this.$scope.$applyAsync();\r\n            this.$scope.$apply();\r\n            this.listeTuileCatalogueSettings = listeTemp;\r\n            //this.$scope.$applyAsync();\r\n            if (this.estEnEditionCatalogue) {\r\n                _.forEach(this.listeTuileCatalogueSettings, (tuile: Modeles.Application.ITuileCatalogueSettings) => {\r\n                    if (!tuile.indicateur.choisi) {\r\n                        if (this.getNombreIndicateurPanier() < Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {\r\n                            tuile.estEnEdition = true;\r\n                        }\r\n                        if (tuile && tuile.dragSettings) {\r\n                            tuile.dragSettings.desactiverDrag();\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (this.estEnEditionPanier) {\r\n                _.forEach(this.listeTuilePanierSettings, (tuile: Modeles.Application.ITuilePanierSettings) => {\r\n                    tuile.estEnEdition = true;\r\n                    if (tuile && tuile.dragSettings) {\r\n                        tuile.dragSettings.desactiverDrag();\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.$scope.$apply();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de retourner le nombre d'indicateur présent dans le panier en cours\r\n         * @return {void}\r\n         */\r\n        public getNombreIndicateurPanier(): number {\r\n            return this.listeTuilePanierSettings.length;\r\n        }\r\n\r\n        public ajouterSelection(): void {\r\n            // on met \"estDefaut\" à false pour les paniers existants\r\n            _.forEach(this.listePaniers, (panierTemp: Modeles.Application.IPanier) => {\r\n                panierTemp.estDefaut = false;\r\n            });\r\n            // on ajoute un panier vide\r\n            this.listePaniers.push(<Modeles.Application.IPanier>{ nom: \"\", listeChoixIndicateurs: [], estDefaut: true, numero: undefined });\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Ajouter\"\r\n         * @returns {void}\r\n         */\r\n        public ajouterIndicateur(): void {\r\n            this.estEnEditionCatalogue = true;\r\n\r\n            // Modification des paramètres des tuiles catalogues\r\n            _.forEach(this.listeTuileCatalogueSettings, (tuile: Modeles.Application.ITuileCatalogueSettings) => {\r\n                if (!tuile.indicateur.choisi) {\r\n                    tuile.estEnEdition = true;\r\n                    tuile.dragSettings.desactiverDrag();\r\n                }\r\n            });\r\n\r\n            // Enregistrement de la liste du panier\r\n            this.listeCodesIndicateursPanierInit = _.pluck(this.listeTuilePanierSettings, \"indicateur.indicateur.code\");\r\n        } \r\n\r\n        /**\r\n         * Action du bouton \"Mode édition\"\r\n         * @returns {void}\r\n         */\r\n        public activerModeEditionPanier(): void {\r\n            this.estEnEditionPanier = true;\r\n\r\n            // Modification des paramètres des tuiles panier\r\n            _.forEach(this.listeTuilePanierSettings, (tuile: Modeles.Application.ITuilePanierSettings) => {\r\n                tuile.estEnEdition = true;\r\n                tuile.dragSettings.desactiverDrag();\r\n            });\r\n\r\n            // Partie ajout indicateurs\r\n            this.estEnEditionCatalogue = true;\r\n            // Modification des paramètres des tuiles catalogues\r\n            _.forEach(this.listeTuileCatalogueSettings, (tuile: Modeles.Application.ITuileCatalogueSettings) => {\r\n                if (!tuile.indicateur.choisi) {\r\n                    if (this.getNombreIndicateurPanier() < Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {\r\n                        tuile.estEnEdition = true;\r\n                    }\r\n                    tuile.dragSettings.desactiverDrag();\r\n                }\r\n            });\r\n\r\n            // Enregistrement de la liste du panier\r\n            this.listeCodesIndicateursPanierInit = _.pluck(this.listeTuilePanierSettings, \"indicateur.indicateur.code\");\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Supprimer la selection\"\r\n         * @returns {void}\r\n         */\r\n        public supprimerTousLesIndicateurs(): void {\r\n            let listeTemp = [];\r\n            _.forEach(this.listeTuilePanierSettings, (tuilePanierSettings: Modeles.Application.ITuilePanierSettings) => {\r\n                listeTemp.push(tuilePanierSettings);\r\n            });\r\n\r\n            _.forEach(listeTemp, (tuilePanierSettings: Modeles.Application.ITuilePanierSettings) => {\r\n                this.modalePaniersService.supprimerIndicateurPanier(\r\n                    tuilePanierSettings,\r\n                    this.listeTuileCatalogueSettings,\r\n                    this.listeTuilePanierSettings,\r\n                    this.listeFiltresClients,\r\n                    this.listeFiltresRelationEco);\r\n            });\r\n\r\n            //this.setEstAfficherBoutonAjouter(true);\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Enregistrer\" en édition panier\r\n         * @returns {void}\r\n         */\r\n        public enregistrerEditionPanier(): void {\r\n            this.initFinEditionPanier();\r\n            this.enregistrerEditionCatalogue();\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Annuler\" en édition panier\r\n         * @returns {void}\r\n         */\r\n        public annulerEditionPanier(): void {\r\n            this.initFinEditionPanier();\r\n            this.remettrePanierInitial();\r\n            this.annulerEditionCatalogue();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser la modale lors de la fin de l'édition Panier\r\n         * @returns {void}\r\n         */\r\n        private initFinEditionPanier(): void {\r\n            this.estEnEditionPanier = false;\r\n\r\n            //if (this.getNombreIndicateurPanier() < Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {\r\n            //    this.setEstAfficherBoutonAjouter(true);\r\n            //}\r\n\r\n            // Modification des paramètres des tuiles panier\r\n            _.forEach(this.listeTuilePanierSettings, (tuile: Modeles.Application.ITuilePanierSettings) => {\r\n                tuile.estEnEdition = false;\r\n                tuile.dragSettings.activerDrag();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Enregistrer\" en édition catalogue\r\n         * @returns {void}\r\n         */\r\n        public enregistrerEditionCatalogue(): void {\r\n            this.initFinEditionCatalogue();\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Annuler\" en édition catalogue\r\n         * @returns {void}\r\n         */\r\n        public annulerEditionCatalogue(): void {\r\n            this.initFinEditionCatalogue();\r\n            this.remettrePanierInitial();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser la modale lors de la fin de l'édition Catalogue\r\n         * @returns {void}\r\n         */\r\n        private initFinEditionCatalogue(): void {\r\n            this.estEnEditionCatalogue = false;\r\n\r\n            // Modification des paramètres des tuiles catalogue\r\n            _.forEach(this.listeTuileCatalogueSettings, (tuile: Modeles.Application.ITuileCatalogueSettings) => {\r\n                tuile.estEnEdition = false;\r\n\r\n                if (this.getNombreIndicateurPanier() === Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {\r\n                    tuile.dragSettings.desactiverDrag();\r\n                } else if (tuile.indicateur.choisi) {\r\n                    tuile.dragSettings.desactiverDrag();\r\n                } else {\r\n                    tuile.dragSettings.activerDrag();\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de remettre le panier initial\r\n         * @returns {void}\r\n         */\r\n        private remettrePanierInitial(): void {\r\n            // RAZ de la liste des tuiles du panier\r\n            this.listeTuilePanierSettings = [];\r\n\r\n            // Remise en place de l'ancien panier\r\n            _.forEach(this.listeCodesIndicateursPanierInit, (code: string) => {\r\n\r\n                let tuileCatalogue = _.find(this.listeTuileCatalogueSettings, (tuile: Modeles.Application.ITuileCatalogueSettings) => {\r\n                    return tuile.indicateur.indicateur.code === code;\r\n                });\r\n\r\n                let tuilePanierSettings = <Modeles.Application.ITuilePanierSettings>{};\r\n                tuilePanierSettings.id = this.modalePaniersService.genererIdentifiantAleatoire();\r\n                tuilePanierSettings.indicateur = tuileCatalogue.indicateur;\r\n                tuilePanierSettings.indicateur.choisi = true;\r\n                tuilePanierSettings.estEnEdition = false;\r\n\r\n                this.listeTuilePanierSettings.push(tuilePanierSettings);\r\n            });\r\n\r\n            // Remise en place de l'ancien catalogue\r\n            _.forEach(this.listeTuileCatalogueSettings, (tuile: Modeles.Application.ITuileCatalogueSettings) => {\r\n\r\n                let tuileCatalogue = _.find(this.listeCodesIndicateursPanierInit, (code: string) => {\r\n                    return tuile.indicateur.indicateur.code === code;\r\n                });\r\n\r\n                if (!tuileCatalogue) {\r\n                    tuile.indicateur.choisi = false;\r\n                }\r\n            });\r\n\r\n            if (this.listeTuilePanierSettings.length === Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {\r\n                this.modalePaniersService.cacherBoutonValider();\r\n            } else {\r\n                this.modalePaniersService.afficherBoutonValider();\r\n            }\r\n\r\n            // Mise à jour du message d'avertissement de modification de filtre\r\n            this.modalePaniersService.afficherMessageAvertissementFiltre(\r\n                this.listeFiltresRelationEco,\r\n                this.listeFiltresClients,\r\n                _.pluck(this.listeTuilePanierSettings, \"indicateur\"));\r\n\r\n            // Rafraichir listeTuileCatalogueSettings\r\n            this.rafraichirListeTuileCatalogueSettings();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de mettre à jour les indicateurs clients\r\n         * @returns {ng.IPromise<void>}\r\n         */\r\n        private majIndicateursClients(): ng.IPromise<void> {\r\n            // on va mettre à jour la liste relation avec les nouveaux indicateurs paramétrables si nécéssaire\r\n            let listeEcartIndicateursParametrables: Array<Modeles.Application.IIndicateurType> = this.indicateurService.getListeEcartIndicateurParametrable(this.panierEnCours.listeChoixIndicateurs);\r\n            this.indicateurService.setListeIndicateurChoix(this.panierEnCours.listeChoixIndicateurs);\r\n            if (listeEcartIndicateursParametrables.length > 0) {\r\n                return this.listeClientsService.majClientsIndicateurs(listeEcartIndicateursParametrables);\r\n            } else {\r\n                return this.$q.when();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode appelé lors de la selection d'un panier\r\n         * @returns {void}\r\n         */\r\n        public changePanier($item: Modeles.Application.IPanier): void {\r\n            if ($item.numero === 0) {\r\n                this.ajouterSelection();\r\n            } else {\r\n                // on met à defaut le panier choisi\r\n                _.forEach(this.listePaniers, (panier: Modeles.Application.IPanier) => {\r\n                    if (panier.nom === $item.nom) {\r\n                        panier.estDefaut = true;\r\n                    } else {\r\n                        panier.estDefaut = false;\r\n                    }\r\n                });\r\n            }\r\n            // supression du panier factice d'ajout de selection\r\n            _.remove(this.listePaniers, (panier: Modeles.Application.IPanier) => {\r\n                return panier.numero === 0;\r\n            });\r\n            // on initialise\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet d'afficher ou non le message d'avertissement filtre\r\n         * @param {string} nomFiltre1\r\n         * @param {string} nomFiltre2\r\n         * @param {string} nomFiltre3\r\n         * @param {string} nomFiltre4\r\n         * @return {void}\r\n         */\r\n        public afficherMessageAvertissementFiltre(nomFiltre1: string, nomFiltre2: string, nomFiltre3: string, nomFiltre4: string): void {\r\n            this.nomFiltre1 = nomFiltre1;\r\n            this.nomFiltre2 = nomFiltre2;\r\n            this.nomFiltre3 = nomFiltre3;\r\n            this.nomFiltre4 = nomFiltre4;\r\n        } \r\n\r\n        /**\r\n         * Méthode de vérification que le formaulaire est valide\r\n         */\r\n        private estFormulaireValide(): boolean {\r\n            if (!this.panierEnCours.nom) {\r\n                //this.myForm[\"nom\"].$invalid = true;\r\n                this.listeErreurs.push({ message: \"Le champ Nom est obligatoire\", champs: \"Nom\", ancre: \"id-nom\" });\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        public goToAnchor(ancre: string): void {\r\n            this.$location.hash(ancre);\r\n            this.scroll.yOffset = 100;\r\n            this.scroll();\r\n        } \r\n\r\n        /**\r\n         * Action du bouton \"Valider\"\r\n         * @returns {ng.IPromise<void>}\r\n         */\r\n        public valider(): ng.IPromise<void> {\r\n            this.goToAnchor(\"id-erreur-form\");\r\n            if (this.estFormulaireValide()) {\r\n                this.chargementEnCours = true;\r\n                this.panierEnCours.listeChoixIndicateurs = _.pluck(this.listeTuilePanierSettings, \"indicateur\");\r\n                return this.majIndicateursClients()\r\n                    .then(() => {\r\n                        return this.preferencesService.ecrirePaniers(this.listePaniers);\r\n                    })\r\n                    .then(() => {\r\n                        let donneesDeSortie = <Modeles.Application.IDonneesEntreeSortiePopupIndicateurs>{};\r\n                        donneesDeSortie.panier = this.panierEnCours;\r\n                        this.chargementEnCours = false;\r\n                        this.$modalInstance.close(donneesDeSortie);\r\n                    }).catch((erreur: MyWay.Services.Erreur) => {\r\n                        ModalePaniersControleur.logger.error(\"Erreur lors de l'enregistrement du panier dans les préférences\", erreur.codeLibelle, erreur.libelle);\r\n                        this.chargementEnCours = false;\r\n                        this.popupService.showErreur(erreur);\r\n                    });\r\n            } else {\r\n                return this.$q.when();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode pour savoir s'il faut afficher ou non le bouton gérer la selection\r\n         * @returns {boolean}\r\n         */\r\n        public estAfficheBtnGererLaSelection(): boolean {\r\n            //return !this.estEnEditionPanier && this.getNombreIndicateurPanier() > 0;\r\n            return !this.estEnEditionPanier;\r\n        }\r\n\r\n        /**\r\n         * Méthode pour savoir s'il faut afficher ou non le bouton supprimer la selection\r\n         * @returns {boolean}\r\n         */\r\n        public estAfficheBtnSupprimerLaSelection(): boolean {\r\n            return this.getNombreIndicateurPanier() > 0;\r\n        }\r\n\r\n        /**\r\n         * Méthode pour savoir s'il faut afficher ou non le bouton valider\r\n         * @returns {boolean}\r\n         */\r\n        public estValidable(): boolean {\r\n            return this.estEnEditionPanier || this.estEnEditionCatalogue || !this.panierEnCours;\r\n        }\r\n\r\n        public estChangementPanierDisponible(): boolean {\r\n            if (this.panierEnCours.nom) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Action du bouton \"Fermer\"\r\n         * @returns {void}\r\n         */\r\n        public fermer(): void {\r\n            this.$modalInstance.dismiss();\r\n        }\r\n    }\r\n\r\n    // Déclaration du controlleur\r\n    app.controller(ModalePaniersControleur.CLASS_NAME, ModalePaniersControleur);\r\n}\r\n","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs.TemplateTableau {\r\n    \"use strict\";\r\n\r\n    export class ColonneDataCAN1Controleur {\r\n        public static $inject: string[] = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Services.eventService\r\n        ];\r\n\r\n        public afficherDate: boolean;\r\n\r\n        constructor(\r\n            private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $scope: ng.IScope,\r\n            private eventService: Services.Application.IEventService\r\n        ) {\r\n            this.afficherDate = true;\r\n        }\r\n\r\n        /**\r\n         * Méthode qui renvoie le texte à afficher pour la colonne dernier CA\r\n         * @param client\r\n         */\r\n        public getTexteCA(client: Modeles.Application.IClient): string {\r\n            let texte: string = Services.Utils.DataUtils.getTexteCA(client, Enum.Indicateur.CODE.CA_N_MOINS_1.toString());\r\n            this.afficherDate = (texte === Constantes.Application.CHAINE_INDICATEUR_NON_CONNU) ? false : true;\r\n            return texte;\r\n        }\r\n\r\n        public getTexteDate(client: Modeles.Application.IClient): string {\r\n            let texte: string = Services.Utils.DataUtils.getTexteDate(client, Enum.Indicateur.CODE.CA_N_MOINS_1.toString());\r\n            return texte;\r\n        }\r\n    }\r\n\r\n    app.controller(\"ColonneDataCAN1Controleur\", ColonneDataCAN1Controleur);\r\n} ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs.TemplateTableau {\r\n    \"use strict\";\r\n\r\n    export class ColonneDataCANControleur {\r\n        public static $inject: string[] = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Services.eventService\r\n        ];\r\n\r\n        public afficherDate: boolean;\r\n        public tendance: number;\r\n\r\n        constructor(\r\n            private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $scope: ng.IScope,\r\n            private eventService: Services.Application.IEventService\r\n        ) {\r\n            this.afficherDate = true;\r\n        }\r\n\r\n        /**\r\n         * Méthode qui renvoie le texte à afficher pour la colonne dernier CA\r\n         * @param client\r\n         */\r\n        public getTexteCA(client: Modeles.Application.IClient): string {\r\n            let texte: string = Services.Utils.DataUtils.getTexteCA(client, Enum.Indicateur.CODE.CA_N.toString());\r\n            this.afficherDate = (texte === Constantes.Application.CHAINE_INDICATEUR_NON_CONNU) ? false : true;\r\n            return texte;\r\n        }\r\n\r\n        public getTexteDate(client: Modeles.Application.IClient): string {\r\n            let texte: string = Services.Utils.DataUtils.getTexteDate(client, Enum.Indicateur.CODE.CA_N.toString());\r\n            return texte;\r\n        }\r\n        public getTendance(client: Modeles.Application.IClient): number {\r\n            let indic: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.CA_N });\r\n            return indic.tendance;\r\n        }\r\n    }\r\n\r\n    app.controller(\"ColonneDataCANControleur\", ColonneDataCANControleur);\r\n} ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs.TemplateTableau {\r\n    \"use strict\";\r\n\r\n    export class ColonneDataClientControleur {\r\n        public static $inject: string[] = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Services.eventService\r\n        ];\r\n\r\n        public indicateurActif: string;\r\n        public indicateurInactif: string;\r\n        public indicateurLeader: string;\r\n        public indicateurProspect: string;\r\n        public indicateurPremierEquipement: string;\r\n\r\n        \r\n        constructor(\r\n            private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $scope: ng.IScope,\r\n            private eventService: Services.Application.IEventService\r\n        ) {\r\n            this.indicateurActif = Constantes.Application.CHAINE_INDICATEUR_ACTIF;\r\n            this.indicateurInactif = Constantes.Application.CHAINE_INDICATEUR_INACTIF;\r\n            this.indicateurProspect = Constantes.Application.CHAINE_INDICATEUR_PROSPECT;\r\n            this.indicateurLeader = Constantes.Application.CHAINE_INDICATEUR_LEADER;\r\n        }\r\n\r\n        /**\r\n         * Méthode qui permet de récupérer la valueur de la note du prospect\r\n         * @param client\r\n         */\r\n        public getNoteProspect(client: Modeles.Application.IClient): number {\r\n            // Recherche de l'indicateur potentiel prospect (La liste peux ne renvoyer aucun indicateur ou 1 indicateur)\r\n            let indicateur: Modeles.Application.IIndicateur =\r\n                _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.POTENTIEL_PROSPECT });\r\n            // Retourne l'indexe ou 0 si pas d'indicateur ou valeur null\r\n            return (indicateur && indicateur.valeur) ?\r\n                _.indexOf(Constantes.Application.LIBELLE_NOTE_PROSPECT, indicateur.valeur) : 0;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param client\r\n         * @param numero\r\n         */\r\n        public afficherEtoile(client: Modeles.Application.IClient, numeroEtoile: number) {\r\n            let noteProspect = this.getNoteProspect(client);\r\n            return noteProspect\r\n                && noteProspect > 0\r\n                && noteProspect >= numeroEtoile; \r\n        }\r\n\r\n        /**\r\n         * Méthode qui renvoie true si l'indicateur codeTypePersonne = 'prospect'\r\n         * @param client\r\n         */\r\n        public isProspect(client: Modeles.Application.IClient): boolean {\r\n            return !client.estClient;\r\n        }\r\n\r\n        /**\r\n         * Méthode qui renvoie true si l'indicateur ActifInactif = 'Actif'\r\n         * @param client\r\n         */\r\n        public isActif(client: Modeles.Application.IClient): boolean {\r\n            return !this.isProspect(client)\r\n                && client.estActifRenseigne\r\n                && client.estActif;\r\n        }\r\n\r\n        /**\r\n         * Méthode qui renvoie true si l'indicateur ActifInactif = 'Inactif'\r\n         * @param client\r\n         */\r\n        public isInactif(client: Modeles.Application.IClient): boolean {\r\n            return !this.isProspect(client)\r\n                && client.estActifRenseigne\r\n                && !client.estActif\r\n                && !this.isSansContrat(client);\r\n        }\r\n\r\n        /**\r\n         * Méthode qui renvoie true si le client est sans contrat (et qu'il n'est pas prospect)\r\n         * @param client\r\n         */\r\n        public isSansContrat(client: Modeles.Application.IClient): boolean {\r\n            return client.estSansContrat\r\n                && client.estClient;\r\n        }\r\n\r\n        public isPremierEquipement(client: Modeles.Application.IClient): boolean {\r\n            let indicateur: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG });\r\n            // Retourne l'indexe ou 0 si pas d'indicateur ou valeur null\r\n            if (indicateur\r\n                && indicateur.valeur\r\n                && indicateur.valeur !== \"\"\r\n                && indicateur.valeur !== Constantes.Application.CHAINE_INDICATEUR_NON_CONNU) {\r\n                this.indicateurPremierEquipement = `: ${indicateur.valeur}`;\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    app.controller(\"ColonneDataClientControleur\", ColonneDataClientControleur);\r\n} ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs.TemplateTableau {\r\n    \"use strict\";\r\n    let loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     *\r\n     */\r\n    export class ColonneDataDerniereRevueControleur {\r\n        public static CLASS_NAME = \"ColonneDataDerniereRevueControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(ColonneDataDerniereRevueControleur.CLASS_NAME);\r\n        // la periode limite est positionné à 1 an\r\n        public static dateLimite: Date = moment(new Date()).subtract(1, \"year\").toDate();\r\n        public static $inject: string[] = [];\r\n\r\n        constructor(\r\n        ) {\r\n        }\r\n\r\n        /**\r\n         * Restitue l'indicateur \"dernière revue\"\r\n         * @param client\r\n         */\r\n        private recupererDerniereRevue(client: Modeles.Application.IClient): Modeles.Application.IIndicateur {\r\n            let indicateur: Modeles.Application.IIndicateur;\r\n            // Recherche l'indicateur  date de dernière revue\r\n            indicateur = _.find(client.listeIndicateurs, (indicateur: Modeles.Application.IIndicateur) => {\r\n                return indicateur &&\r\n                    indicateur.code === Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString();\r\n            });\r\n            return indicateur;\r\n        }\r\n\r\n        /**\r\n         * Valorise la date de dernière revue\r\n         * @param client\r\n         */\r\n        public valoriserDateRevue(client: Modeles.Application.IClient): string {\r\n            let indicateur: Modeles.Application.IIndicateur;\r\n            indicateur = this.recupererDerniereRevue(client);\r\n            // Renvoi la date de dernière revue si elle est présente, sinon renvoi non connu\r\n            return indicateur &&\r\n                indicateur.valeurDate &&\r\n                moment(indicateur.valeurDate).isValid() &&\r\n                !moment(indicateur.valeurDate).isSame(Constantes.Application.DATE_MIN) &&\r\n                !moment(indicateur.valeurDate).isSame(Constantes.Application.DATE_MAX)\r\n                ? moment(indicateur.valeurDate).format(\"DD/MM/YYYY\") :\r\n                Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n        }\r\n\r\n        /**\r\n         * Indique si le client à une revue ancienne\r\n         * @param client\r\n         */\r\n        public ancienneRevue(client: Modeles.Application.IClient): boolean {\r\n            let indicateur: Modeles.Application.IIndicateur;\r\n            indicateur = this.recupererDerniereRevue(client);\r\n            return indicateur &&\r\n                indicateur.valeurDate &&\r\n                moment(indicateur.valeurDate).isValid() &&\r\n                !moment(indicateur.valeurDate).isSame(Constantes.Application.DATE_MIN) &&\r\n                !moment(indicateur.valeurDate).isSame(Constantes.Application.DATE_MAX) &&\r\n                moment(indicateur.valeurDate).isBefore(ColonneDataDerniereRevueControleur.dateLimite);\r\n        }\r\n    }\r\n\r\n    app.controller(ColonneDataDerniereRevueControleur.CLASS_NAME, ColonneDataDerniereRevueControleur);\r\n} ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs.TemplateTableau {\r\n    \"use strict\";\r\n    let loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     *\r\n     */\r\n    export class ColonneDataDerniereRevueRelControleur {\r\n        public static CLASS_NAME = \"ColonneDataDerniereRevueRelControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(ColonneDataDerniereRevueRelControleur.CLASS_NAME);\r\n        // la periode limite est positionné à 1 an\r\n        public static dateLimite: Date = moment(new Date()).subtract(1, \"year\").toDate();\r\n        public static $inject: string[] = [];\r\n\r\n        constructor(\r\n        ) {\r\n        }\r\n\r\n        /**\r\n         * Restitue l'indicateur \"dernière revue\"\r\n         * @param relation\r\n         */\r\n        private recupererDerniereRevue(relation: Modeles.Application.IRelationEconomique): Modeles.Application.IIndicateur {\r\n            let indicateur: Modeles.Application.IIndicateur;\r\n            // Recherche l'indicateur  date de dernière revue\r\n            indicateur = _.find(relation.listeIndicateurs, (indicateur: Modeles.Application.IIndicateur) => {\r\n                return indicateur &&\r\n                    indicateur.code === Enum.Indicateur.CODEREL.REV_DATE_DERNIERE_REVUE.toString();\r\n            });\r\n            return indicateur;\r\n        }\r\n\r\n        /**\r\n         * Valorise la date de dernière revue\r\n         * @param relation\r\n         */\r\n        public valoriserDateRevue(relation: Modeles.Application.IRelationEconomique): string {\r\n            let indicateur: Modeles.Application.IIndicateur;\r\n            indicateur = this.recupererDerniereRevue(relation);\r\n            // Renvoi la date de dernière revue si elle est présente, sinon renvoi non connu\r\n            return indicateur &&\r\n                indicateur.valeurDate &&\r\n                moment(indicateur.valeurDate).isValid() &&\r\n                !moment(indicateur.valeurDate).isSame(Constantes.Application.DATE_MIN) &&\r\n                !moment(indicateur.valeurDate).isSame(Constantes.Application.DATE_MAX)\r\n                ? moment(indicateur.valeurDate).format(\"DD/MM/YYYY\") :\r\n                Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n        }\r\n\r\n        /**\r\n         * Indique si le client à une revue ancienne\r\n         * @param relation\r\n         */\r\n        public ancienneRevue(relation: Modeles.Application.IRelationEconomique): boolean {\r\n            let indicateur: Modeles.Application.IIndicateur;\r\n            indicateur = this.recupererDerniereRevue(relation);\r\n            return indicateur &&\r\n                indicateur.valeurDate &&\r\n                moment(indicateur.valeurDate).isValid() &&\r\n                !moment(indicateur.valeurDate).isSame(Constantes.Application.DATE_MIN) &&\r\n                !moment(indicateur.valeurDate).isSame(Constantes.Application.DATE_MAX) &&\r\n                moment(indicateur.valeurDate).isBefore(ColonneDataDerniereRevueControleur.dateLimite);\r\n        }\r\n    }\r\n\r\n    app.controller(ColonneDataDerniereRevueRelControleur.CLASS_NAME, ColonneDataDerniereRevueRelControleur);\r\n} ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs.TemplateTableau {\r\n    \"use strict\";\r\n\r\n    export class ColonneFluxCrediteurControleur {\r\n        public static $inject: string[] = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Services.eventService\r\n        ];\r\n\r\n        public tendance: number;\r\n\r\n        constructor() {\r\n        }\r\n\r\n        public getMontant(client: Modeles.Application.IClient): string {\r\n            let texte: string = \"\";\r\n            let indic: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.FLUX_CREDITEURS_N });\r\n            if (indic) {\r\n                if (indic.valeurNumber !== undefined &&\r\n                    indic.valeurNumber != null &&\r\n                    indic.valeurNumber !== Number.POSITIVE_INFINITY &&\r\n                    indic.valeurNumber !== Number.NEGATIVE_INFINITY) {\r\n                    texte = `${indic.valeurNumber.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, String.fromCharCode(160))} k€`;\r\n                } else {\r\n                    texte = Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                }\r\n            }\r\n            return texte;\r\n        }\r\n\r\n        public getTendance(client: Modeles.Application.IClient): number {\r\n            let indic: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.FLUX_CREDITEURS_N });\r\n            return indic.tendance;\r\n        }\r\n    }\r\n\r\n    app.controller(\"ColonneFluxCrediteurControleur\", ColonneFluxCrediteurControleur);\r\n} ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs.TemplateTableau {\r\n    \"use strict\";\r\n\r\n    export class ColonneFluxDebiteurControleur {\r\n        public static $inject: string[] = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Services.eventService\r\n        ];\r\n\r\n        public tendance: number;\r\n\r\n        constructor() {\r\n        }\r\n\r\n        public getMontant(client: Modeles.Application.IClient): string {\r\n            let texte: string = \"\";\r\n            let indic: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.FLUX_DEBITEURS_N });\r\n            if (indic) {\r\n                if (indic.valeurNumber !== undefined && indic.valeurNumber != null && indic.valeurNumber !== Number.POSITIVE_INFINITY && indic.valeurNumber !== Number.NEGATIVE_INFINITY) {\r\n                    texte = `${indic.valeurNumber.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, String.fromCharCode(160))} k€`;\r\n                } else {\r\n                    texte = Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                }\r\n            }\r\n            return texte;\r\n        }\r\n\r\n        public getTendance(client: Modeles.Application.IClient): number {\r\n            let indic: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.FLUX_DEBITEURS_N });\r\n            return indic.tendance;\r\n        }\r\n    }\r\n\r\n    app.controller(\"ColonneFluxDebiteurControleur\", ColonneFluxDebiteurControleur);\r\n} ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs.TemplateTableau {\r\n    \"use strict\";\r\n\r\n    export class ColonnePnbAnneeNControleur {\r\n        public static $inject: string[] = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Services.eventService\r\n        ];\r\n\r\n        public tendance: number;\r\n\r\n        constructor() {\r\n        }\r\n\r\n        public getMontant(client: Modeles.Application.IClient): string {\r\n            let texte: string = \"\";\r\n            let indic: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.PNB_N });\r\n            if (indic) {\r\n                if (indic.valeurNumber !== undefined && indic.valeurNumber != null && indic.valeurNumber !== Number.POSITIVE_INFINITY && indic.valeurNumber !== Number.NEGATIVE_INFINITY) {\r\n                    texte = indic.valeurNumber.toString();\r\n                }\r\n            }\r\n            return texte;\r\n        }\r\n\r\n        public getTendance(client: Modeles.Application.IClient): number {\r\n            let indic: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.PNB_N });\r\n            return indic.tendance;\r\n        }\r\n    }\r\n\r\n    app.controller(\"ColonnePnbAnneeNControleur\", ColonnePnbAnneeNControleur);\r\n} ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs.TemplateTableau {\r\n    \"use strict\";\r\n\r\n    export class ColonneDataRelationControleur {\r\n        public static $inject: string[] = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Services.eventService\r\n        ];\r\n\r\n        public indicateurProspect: string;\r\n\r\n        constructor(\r\n            private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $scope: ng.IScope,\r\n            private eventService: Services.Application.IEventService\r\n        ) {\r\n            this.indicateurProspect = Constantes.Application.CHAINE_INDICATEUR_PROSPECT;\r\n        }\r\n\r\n        /**\r\n         * Appel à la fonction de filtrage du tableau client du controleur ClientsControleur via EventSErvice\r\n         * @param idRelationFiltre\r\n         */\r\n        public filtrerTableauClients(idRelationFiltre: string): void {\r\n            this.eventService.filtrageTableauClientClientsControleur(idRelationFiltre);\r\n        }\r\n\r\n        /**\r\n         * Méthode qui renvoie true si l'indicateur codeTypePersonneRel = 'prospect'\r\n         * @param client\r\n         */\r\n        public isProspect(relationEco: Modeles.Application.IRelationEconomique): boolean {\r\n            return (relationEco.estClient !== undefined && !relationEco.estClient);\r\n        }\r\n    }\r\n\r\n    app.controller(\"ColonneDataRelationControleur\", ColonneDataRelationControleur);\r\n} ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs.TemplateTableau {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    export class ColonnePotentielProspectControleur {\r\n        public static CLASS_NAME = \"ColonnePotentielProspectControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(ColonnePotentielProspectControleur.CLASS_NAME);\r\n\r\n        public static $inject: string[] = [];\r\n\r\n        constructor(\r\n        ) {\r\n        }\r\n\r\n        /**\r\n         * Valorise la note du potentiel prospect\r\n         * Paquet mep 27/03\r\n         * @param client\r\n         */\r\n        public valoriserPotentielProspect(client: Modeles.Application.IClient): string {\r\n            let indicateur: Modeles.Application.IIndicateur;\r\n            // Recherche l'indicateur  potentiel prospect contenant une note\r\n            indicateur = _.find(client.listeIndicateurs, (indicateur: Modeles.Application.IIndicateur) => {\r\n                return indicateur &&\r\n                    indicateur.code === Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString() &&\r\n                    ~Constantes.Tableau.VALEUR_POSSIBLE_POTENTIEL_PROSPECT.indexOf(indicateur.valeur);\r\n            });\r\n\r\n            // Renvoi la note si elle est présente, sinon renvoi non connu\r\n            return indicateur ? indicateur.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n        }\r\n    }\r\n\r\n    app.controller(ColonnePotentielProspectControleur.CLASS_NAME, ColonnePotentielProspectControleur);\r\n} ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs.TemplateTableau {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    export class ColonneStatutControleur {\r\n        public static CLASS_NAME = \"ColonneStatutControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(ColonneStatutControleur.CLASS_NAME);\r\n\r\n        private indicateurProspect: string;\r\n        private indicateurActif: string;\r\n        private indicateurInactif: string;\r\n\r\n        public static $inject: string[] = [\r\n            \r\n        ];\r\n\r\n        constructor(\r\n            \r\n        ) {\r\n            this.indicateurActif = Constantes.Application.CHAINE_INDICATEUR_ACTIF;\r\n            this.indicateurInactif = Constantes.Application.CHAINE_INDICATEUR_INACTIF;\r\n            this.indicateurProspect = Constantes.Application.CHAINE_INDICATEUR_PROSPECT;\r\n        }\r\n\r\n        /**\r\n         * Méthode qui renvoie true si l'indicateur codeTypePersonne = 'prospect'\r\n         * @param client\r\n         */\r\n        public isProspect(client: Modeles.Application.IClient): boolean {\r\n            return (client.estClient !== undefined && !client.estClient);\r\n        }\r\n\r\n        /**\r\n         * Méthode qui renvoie true si l'indicateur ActifInactif = 'Actif'\r\n         * @param client\r\n         */\r\n        public isActif(client: Modeles.Application.IClient): boolean {\r\n            return (client.estActifRenseigne && client.estActif);\r\n        }\r\n\r\n        /**\r\n         * Méthode qui renvoie true si l'indicateur ActifInactif = 'Inactif'\r\n         * @param client\r\n         */\r\n        public isInactif(client: Modeles.Application.IClient): boolean {\r\n            return (client.estActifRenseigne && !client.estActif);\r\n        }\r\n\r\n    }\r\n\r\n    app.controller(ColonneStatutControleur.CLASS_NAME, ColonneStatutControleur);\r\n} ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Controleurs.TemplateTableau {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    export class ColonneTopCCControleur {\r\n        public static CLASS_NAME = \"ColonneTopCCControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(ColonneTopCCControleur.CLASS_NAME);\r\n\r\n        public static $inject: string[] = [];\r\n\r\n        constructor(\r\n        ) {\r\n\r\n        }\r\n\r\n        /**\r\n         * Valorise la couleur Top CC\r\n         * 24/01/2022\r\n         * @param client\r\n         */\r\n        public valoriserTopCC(client: Modeles.Application.IClient): string {\r\n            let indicateur: Modeles.Application.IIndicateur;\r\n            // Recherche le Top CC\r\n            indicateur = _.find(client.listeIndicateurs, (indicateur: Modeles.Application.IIndicateur) => {\r\n                return indicateur &&\r\n                    indicateur.code === Enum.Indicateur.CODE.TOP_CC.toString() &&\r\n                    ~Constantes.Tableau.VALEUR_POSSIBLE_TOP_CC.indexOf(indicateur.valeur);\r\n            });\r\n\r\n            // Renvoi la valeur si elle est présente, sinon renvoi blanc\r\n            return indicateur ? indicateur.valeur : Constantes.Tableau.VALEUR_POSSIBLE_TOP_CC[3];\r\n        }\r\n\r\n    }\r\n\r\n    app.controller(ColonneTopCCControleur.CLASS_NAME, ColonneTopCCControleur);\r\n} ","/**\r\n * Ensemble d'interfaces de modèles applicatifs\r\n * @module Portefeuille.Modeles.Application\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Modeles.Application {\r\n    \"use strict\";\r\n\r\n    export interface IContexteVersRevue {\r\n        idEds: number;\r\n        designationAgent: string;\r\n        listeIdsPortefeuille: Array<number>;\r\n        nombreTotalPortefeuilles: number;\r\n        identifiantPersonne: number;\r\n        raisonSociale: string;\r\n        siren: string;\r\n        identifiantRelation: number;\r\n        libelleRelation: string;\r\n        listeClientAffiches: Array<Modeles.Application.IClient>;\r\n        estClient: boolean;\r\n        typeForcage: string;\r\n    }\r\n\r\n    export interface IContexteVersSyntheseClient {\r\n        identifiantPersonne: number;\r\n    }\r\n\r\n    export interface IContexteVersEdsPortefeuilles {\r\n        idEds: number;\r\n        listeIdsPortefeuille: Array<number>;\r\n    }\r\n\r\n\r\n\r\n    export interface IContexteGererPortefeuille {\r\n        identifiantPersonne: number;\r\n        raisonSociale: string;\r\n        siren: string;\r\n        identifiantRelation: number;\r\n        libelleRelation: string;\r\n        objetEdsVisu: IObjetEdsChoisi;\r\n\r\n        pagination: MyWay.UI.IMwPaginationState;\r\n        colonneTriee: MyWay.UI.IMwSortedColumn;\r\n        colonneFiltre: Array<MyWay.UI.IMwColumnCriterion>;\r\n        identifiantPersonneSelection: number;\r\n\r\n        typeVue: Enum.PageClients.TYPE_VUE;\r\n        filtres: Array<Modeles.Application.IFiltre>;\r\n        filtresRelation: Array<Modeles.Application.IFiltre>;\r\n        listeClientAffiches: Array<Modeles.Application.IClient>;\r\n        estClient: boolean;\r\n        typeForcage: string;\r\n    }\r\n\r\n    export interface IContexteGererRelation {\r\n        pagination: MyWay.UI.IMwPaginationState;\r\n        colonneTriee: MyWay.UI.IMwSortedColumn;\r\n        colonneFiltre: Array<MyWay.UI.IMwColumnCriterion>;\r\n        selectedItems: Array<IRelationEconomique>;\r\n        typeVue: Enum.PageClients.TYPE_VUE;\r\n    }\r\n\r\n    export interface IElementTableau {\r\n        checked?: boolean;\r\n    }\r\n\r\n    /**\r\n     * Modèle d'agent ayant des portfeuille\r\n     */\r\n    export interface IAgentPortefeuille {\r\n        id: number;\r\n        libelle: string;\r\n        estAffiche: boolean;\r\n        listePortfeuille: Array<IPortefeuille>;\r\n    }\r\n\r\n    /**\r\n     * Modèle de portfeuille\r\n     */\r\n    export interface IPortefeuille {\r\n        id: number;\r\n        libelle: string;\r\n        estAffiche: boolean;\r\n        listeRelations: Array<IRelationEconomique>;\r\n        idAgent?: number;\r\n        nomAgent?: string;\r\n        prenomAgent?: string;\r\n        nomPrenonAgent?: string;\r\n        fonctionAgent?: string;\r\n        nombreTotalClients?: number;\r\n        nombreTotalProspectsTiers?: number;\r\n        idAgentString?: string;\r\n        listPortefeuilleParAgent?: IPortefeuille[];\r\n        codeSuiviParComplementaire?: string; \r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    export interface ICaracteristiquesEDS {\r\n        agences: Array<Modeles.Application.IAgenceEds>;\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    export interface IAgenceEds {\r\n        id: number;\r\n        nomEds: string;\r\n        agencesInferieur: Array<IAgenceEds>;\r\n        agencesSuperieur: IAgenceEds;\r\n        typeEDS: string;\r\n        libelleTypeEDS: string;\r\n        affiche: boolean;\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    export interface IAgent {\r\n        id: number;\r\n        nomPrenonAgent: string;\r\n        estAffiche: boolean;\r\n        isVisu: boolean;\r\n        listPortefeuilleParAgent: IPortefeuille[];\r\n    }\r\n\r\n    /**\r\n     * Modèle de caractéristiques agent\r\n     */\r\n    export interface ICaracteristiquesAgent {\r\n        designationAgent: string;\r\n        libelleFonction: string;\r\n        identifiantElementStructure: number;\r\n        codeEtablissement: string;\r\n        identifiantAgent?: string;\r\n    }\r\n\r\n    export interface IObjetEdsChoisi {\r\n        objCaractAgent: ICaracteristiquesAgent;\r\n        nombrePortefeuilleTotalAgent: number;\r\n        listePtfVisu: Array<number>;\r\n        typeForcage: Enum.PageClients.TYPE_FORCAGE;\r\n        affichageModificationChoix: boolean;\r\n        locationPath: string; //Permet de se positionner sur la page souhaitée en retour d'un débranchement\r\n    }\r\n\r\n    /**\r\n     * Modèle d'un indicateur\r\n     */\r\n    export interface IIndicateur {\r\n        intitule: string;\r\n        code: string;\r\n        valeur: string;\r\n        valeurNumber: number;\r\n        valeurDate: Date;\r\n        typeIndicateur: Enum.Indicateur.TYPE; // NOMBRE, DATE, MONTANT\r\n        dateMaj: Date;\r\n        icone: string;\r\n        tendance?: number;\r\n    }\r\n\r\n    export interface IIndicateurType {\r\n        code: string;\r\n        codeRel?: string;\r\n        codeRest: string;\r\n        typeIndicateur: Enum.Indicateur.TYPE;\r\n        intitule: string;\r\n        estUniquementVueClients: boolean;\r\n        estVisibleColonne: boolean;\r\n        famille?: Enum.Indicateur.FAMILLE;\r\n        codePreference: string;\r\n    }\r\n\r\n    /**\r\n     * Position des indicateurs\r\n     */\r\n    export interface IPositionIndicateur {\r\n        code: string;\r\n        index: number;\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    export interface IListeIndicateur {\r\n        positionIndicateur: Array<IPositionIndicateur>;\r\n        listeIndicateurs: Array<IIndicateur>;\r\n    }\r\n\r\n    /**\r\n     * Modèle d'un client\r\n     */\r\n    export interface IClient extends IElementTableau, IListeIndicateur {\r\n        nom: string;\r\n        id: string;\r\n        siren: string;\r\n        estClient: boolean;\r\n        estActif: boolean;\r\n        estActifRenseigne: boolean;\r\n        nomRelationEconomique: string;\r\n        idRelationEconomique: number;\r\n        estLeader: boolean;\r\n        estSansContrat: boolean;\r\n        datePremierEquipement: Date;\r\n        libellePortefeuille: string;\r\n        identifiantPortefeuille: number;\r\n        nbPersonneRelation: number;\r\n        codePersonnaliteJuridique: string;\r\n    }\r\n\r\n    /**\r\n     * Modèle d'une relation economique\r\n     */\r\n    export interface IRelationEconomique extends IElementTableau, IListeIndicateur {\r\n        idPortefeuille: number;\r\n        nom: string;\r\n        id: string;\r\n        idLeader: number;\r\n        relationEconomique: string;\r\n        listeClients: Array<IClient>;\r\n        estClient: boolean;\r\n        libellePortefeuille: string;\r\n        identifiantPortefeuille: number;\r\n    }\r\n\r\n    /**\r\n     * Modèle de filtre sur indicateur\r\n     */\r\n    export interface IIndicateurFiltre {\r\n        indicateur: IIndicateurType;\r\n        listeValeurs: Array<IValeurFiltre>;\r\n        utilise: boolean;\r\n        utiliseRelationEco: boolean;\r\n        estPanier: boolean;\r\n    }\r\n\r\n    /**\r\n     * Modèle de valeur de filtre : 23/02 ajout ordreAffichage pour afficher dans l'ordre qu'on veut. Ex : Top CC\r\n     */\r\n    export interface IValeurFiltre {\r\n        libelle: string;\r\n        actif: boolean;\r\n        ordreAffichage: number;\r\n    }\r\n\r\n    /**\r\n     * Modèle d'un filtre\r\n     */\r\n    export interface IFiltre {\r\n        id: number;\r\n        indicateur: IIndicateurFiltre;\r\n        comparateur?: Enum.Filtre.COMPARATEUR;\r\n        operateur?: Enum.Filtre.OPERATEUR;\r\n        valeurUnique?: number;\r\n        valeurMultiple1?: number;\r\n        valeurMultiple2?: number;\r\n    }\r\n\r\n    /**\r\n     * Modèle d'entree/sortie de la popup de filtres \r\n     */\r\n    export interface IDonneesEntreeSortiePopupFiltres {\r\n        listeIndicateursFiltre: Array<IIndicateurFiltre>;\r\n        listeIndicateursTableau: Array<Modeles.Application.IIndicateurChoix>;\r\n        listeFiltres: Array<IFiltre>;\r\n        estVueClient?: boolean;\r\n    }\r\n\r\n    /**\r\n     * Modèle d'entree/sortie de la popup de indicateurs\r\n     */\r\n    export interface IDonneesEntreeSortiePopupIndicateurs {\r\n        listeTotaleIndicateurs: Array<Modeles.Application.IIndicateurType>;\r\n        listeFiltresClients: Array<IFiltre>;\r\n        listeFiltresRelationEco: Array<IFiltre>;\r\n        listePaniers?: Array<Modeles.Application.IPanier>;\r\n        panier?: Modeles.Application.IPanier;\r\n    }\r\n\r\n    /**\r\n     * Modèle d'un indicateur de la popup choix indicateur\r\n     */\r\n    export interface IIndicateurChoix {\r\n        indicateur: IIndicateurType;\r\n        choisi: boolean;\r\n        desactive: boolean;\r\n        position?: number;\r\n    }\r\n\r\n    /**\r\n     * Modèle d'un panier\r\n     */\r\n    export interface IPanier {\r\n        nom: string;\r\n        listeChoixIndicateurs: Array<Modeles.Application.IIndicateurChoix>;\r\n        estDefaut: boolean;\r\n        numero: number;\r\n    }\r\n\r\n    /**\r\n     * Modèle d'une agence\r\n     */\r\n    export interface IAgence {\r\n        identifiantEDS: number;\r\n        libelle: string;\r\n    }\r\n\r\n    /**\r\n     * Modèle d'indicateur colonne\r\n     */\r\n    export interface IDataIndicateurColonne {\r\n        id: string;\r\n        intitule: string;\r\n        sousIntitule?: string;\r\n        valeur: number;\r\n        couleur: COULEUR_GRANDE_COLONNE;\r\n        couleurSousValeur?: COULEUR_GRANDE_COLONNE;\r\n        couleurIntitule?: COULEUR_GRANDE_COLONNE;\r\n        hauteur: number;\r\n        hauteurSousValeur?: number;\r\n        estMontant: boolean;\r\n        sousValeur?: number;\r\n        nePasAfficherIntitule?: boolean;\r\n        nomSuiviPar?: string;\r\n    }\r\n\r\n    /**\r\n     * Modèle d'indicateur colonne\r\n     */\r\n    export interface IDataIndicateurMutliColonne {\r\n        id: string;\r\n        tendence: IConfigIndicateurFleche;\r\n        intitule?: string;\r\n        dataIndicateurMutliColonne: Array<Modeles.Application.IDataIndicateurColonne>;\r\n    }\r\n\r\n    export enum COULEUR_GRANDE_COLONNE {\r\n        COULEUR_CLIENT = <any>\"#007399\",\r\n        COULEUR_SANS_CONTRAT = <any>\"#D7BDE2\",\r\n        COULEUR_ACTIF = <any>\"#27BAE9\",\r\n        COULEUR_PROSPECT = <any>\"#545494\",\r\n        COULEUR_RELATIONS = <any>\"#cc6666\",\r\n        COULEUR_PERIODE1 = <any>\"#545494\",\r\n        COULEUR_PERIODE2 = <any>\"#00cccc\",\r\n        COULEUR_PERIODE3 = <any>\"#E6A016\",\r\n        COULEUR_MT_NEGATIF = <any>\"#FF0000\",\r\n    };\r\n\r\n    export interface IConfigIndicateurFleche {\r\n        valeurFormate: string;\r\n        couleur: string;\r\n        icone: string;\r\n    }\r\n\r\n    export interface ILettreBegacli {\r\n        univers: string;\r\n        lettreMaj: string;\r\n        choisiMaj: boolean;\r\n        lettreMin: string;\r\n        choisiMin: boolean;\r\n    }\r\n\r\n    export interface INombreBegacli {\r\n        nombre: string;\r\n        choisi: boolean;\r\n    }\r\n\r\n    export interface IFiltreBegacli {\r\n        listeLettres: Array<ILettreBegacli>;\r\n        listeNombres: Array<INombreBegacli>;\r\n        choisiNC: boolean;\r\n    }\r\n\r\n\r\n\r\n}","/**\r\n * Ensemble d'interfaces de modèles applicatifs pour les statistiques\r\n * @module Portefeuille.Modeles.Application\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Modeles.ApplicationStats {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Modèle de rentabilite\r\n     */\r\n    export interface IRentabilite {\r\n        ratioPNBImportants: number;\r\n        tauxEvolutionPnb: number;\r\n        pnb12DerniersMoisGlissNMoins1: number;\r\n        dateDebPnb12DerMoisGlissNMoins1: Date;\r\n        dateFinPnb12DerMoisGlissNMoins1: Date;\r\n        pnb12DerniersMoisGlissantN: number;\r\n        dateDebPnb12DerMoisGlissN: Date;\r\n        dateFinPnb12DerMoisGlissN: Date;\r\n        pnb3112AnneeNMoins1: number;\r\n        dateDebPnb3112AnneeNMoins1: Date;\r\n        dateFinPnb3112AnneeNMoins1: Date;\r\n    }\r\n\r\n    /**\r\n     * Modèle de Flux\r\n     */\r\n    export interface IFlux {\r\n        tauxEvolutionFlux: number;\r\n\r\n        flux12DerniersMoisGlissNMoins1: number;\r\n        flux12DerniersMoisGlissantN: number;\r\n\r\n        dateDebFlux12DerMoisGlissN: Date;\r\n        dateDebFlux12DerMoisGlissNMoins1: Date;\r\n\r\n        dateFinFlux12DerMoisGlissNMoins1: Date;\r\n        dateFinFlux12DerMoisGlissN: Date;\r\n    }\r\n\r\n\r\n    /**\r\n     * Modèle de rdv et portefeuille\r\n     */\r\n    export interface IRdvPtf {\r\n        nombreClients: number;\r\n        nombreClientsActifs: number;\r\n        nombreProspects: number;\r\n        nombreRelations: number;\r\n        nombreClientsPMEESI: number;\r\n        nombreClientsPEetPEES: number;\r\n        nombreClientsMEetMEES: number;\r\n        nombreClientsGEetGEES: number;\r\n        nombreClientsPro: number;\r\n        nombreClientsAutres: number;\r\n        listeSegmentationsPMEESI: Array<ISegmentationRelationnelle>;\r\n        listeSegmentationsPro: Array<ISegmentationRelationnelle>;   //BDRL-1648 : Ajout Segmentation Pro\r\n        nombreRdvProspectAnneeCivile: number;\r\n        nombreRdvProspectAnneeEnCours: number;\r\n        nombreRdvRelationEcoClient: number;\r\n        rdvTauxVisite: number;\r\n        nombreRdvClientAnneeEnCours: number; //BDRL-1636\r\n        nombreClientsNonEquipe: number;\r\n        nombreClientsAvecProduitService: number;\r\n        nombreClientsSansContratEtProspect: number;\r\n    }\r\n\r\n    export interface ISegmentationRelationnelle {\r\n        code: string;\r\n        libelle: string;\r\n        pourcentage: number;\r\n    }\r\n\r\n    /**\r\n     * Modèle de revue portefeuille\r\n     */\r\n    export interface IRevuePortefeuille {\r\n        pourcentageRevuePtfRealisee: number;\r\n        nombreDeProduitsAProposer: number;\r\n        nombreDeClientsAActiver: number;\r\n        nombreDeClientsARenegocier: number;\r\n        nombreDeClientsAAppetence: number;\r\n        nombreDePropositionsEnCours: number;\r\n        nombreDeAffairesEnCours: number;\r\n    }\r\n\r\n    export interface IClientSimplifie {\r\n        raisonSociale: string;\r\n        identifiantPersonne: number;\r\n        tauxObjectifFlux: number;\r\n        libelleSegment: string;\r\n    }\r\n\r\n    /**\r\n     * détail pour les details\r\n     */\r\n    export interface IDetailPtf {\r\n        detailParSuviPar: Array<IDetailPtfParSuviPar>;\r\n        tauxDeRevueTotal: number;\r\n        tauxDeVisiteTotal: number;\r\n\r\n        dateDebPnb12DerMoisGlissNMoins1: Date;\r\n        dateFinPnb12DerMoisGlissNMoins1: Date;\r\n        dateDebPnb12DerMoisGlissN: Date;\r\n        dateFinPnb12DerMoisGlissN: Date;\r\n        pnb12DerniersMoisGlissNMoins1: number;\r\n        pnb12DerniersMoisGlissantN: number;\r\n        tauxEvolutionPnb: number;\r\n\r\n        dateDebFluxAnneeNMoins1: Date;\r\n        dateFinFluxAnneeNMoins1: Date;\r\n        dateDebFluxAnneeN: Date;\r\n        dateFinFluxAnneeN: Date;\r\n\r\n        fluxCrediteursNMoins1: number;\r\n        fluxCrediteursAnneeN: number;\r\n        tauxEvolutionFluxCrediteurs: number;\r\n\r\n        fluxDebiteursNMoins1: number;\r\n        fluxDebiteursAnneeN: number;\r\n        tauxEvolutionFluxDebiteurs: number;\r\n    }\r\n\r\n    /**\r\n     * Modèle détail portefeuille par suivi par\r\n     */\r\n    export interface IDetailPtfParSuviPar {\r\n        codeCiviliteSuiviPar: string;\r\n        nomSuiviPar: string;\r\n        prenomSuiviPar: string;\r\n\r\n        nombreClients: number;\r\n        nbClientsAvecProduitService: number;\r\n        nombreClientsActifs: number;\r\n        tauxDeVisite: number;\r\n        tauxDeRevue: number;\r\n\r\n        pnb12DerniersMoisGlissNMoins1: number;\r\n        pnb12DerniersMoisGlissantN: number;\r\n        tauxEvolutionPnb: number;\r\n\r\n        fluxCrediteursNMoins1: number;\r\n        fluxCrediteursAnneeN: number;\r\n        tauxEvolutionFluxCrediteurs: number;\r\n\r\n        fluxDebiteursNMoins1: number;\r\n        fluxDebiteursAnneeN: number;\r\n        tauxEvolutionFluxDebiteurs: number;\r\n    }\r\n}","module Portefeuille.Modeles.Application {\r\n    \"use strict\";\r\n\r\n    export interface IContexte {\r\n        identifiantUser: string;\r\n        codeEtablissement: string;\r\n        designation: string;\r\n        edsUser: number;\r\n        edsVisu: number;\r\n        estVueMultiSuiviPar: boolean;\r\n        edsSuperieurUser: number;\r\n    }\r\n} ","/**\r\n * Ensemble d'interfaces de modèles lié à la modale panier\r\n * @module Portefeuille.Modeles.Application\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Modeles.Application {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Modèle des paramètres d'une tuile catalogue\r\n     */\r\n    export interface ITuileCatalogueSettings {\r\n        id: number;\r\n        dragSettings: IDragSettings;\r\n        indicateur: IIndicateurChoix;\r\n        estEnEdition: boolean;\r\n    }\r\n\r\n    /**\r\n     * Modèle des paramètres d'une tuile panier\r\n     */\r\n    export interface ITuilePanierSettings {\r\n        id: number;\r\n        dropSettings: IDropSettings;\r\n        dragSettings: IDragSettings;\r\n        indicateur: IIndicateurChoix;\r\n        estEnEdition: boolean;\r\n    }\r\n} ","module Portefeuille.Modeles.Application {\r\n    \"use strict\";\r\n\r\n    export interface IPopupData<T> {\r\n        closeButtonText: string;\r\n        actionButtonText: string;\r\n        headerText: string;\r\n        iconName: string;\r\n        bodyText: string;\r\n        model?: T;\r\n    }\r\n\r\n    export interface IMessageErreurIHM {\r\n        message: string;\r\n        champs: string;\r\n        ancre: string;\r\n    }\r\n}","module Portefeuille.Modeles.Application {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Modèle d'un panier pour les préférences utilisateurs\r\n     */\r\n    export interface IPanierPreferences {\r\n        numero: number;\r\n        listeCodesIndicateurs: Array<string>;\r\n        // Evolution multi panier\r\n        nom: string;\r\n        estDefaut: boolean;\r\n        // fin Evolution multi panier\r\n    }\r\n\r\n\r\n} ","module Portefeuille.Modeles.Tableaux {\r\n    export class TableauClientEco implements MyWay.UI.ImwTableOptions {\r\n\r\n        public tableauColonneDataClient: MyWay.UI.ImwTableColumnOptions = {\r\n            title: \"Client\",\r\n            bind: \"nom\",\r\n            cssClass: \"col-md-2 col-lg-2\",\r\n            disableFilter: false,\r\n            template: \"vues/templates-tableau/colonne-tableau-data-client.html\"\r\n        };\r\n\r\n        public width: string = \"col-md-12 col-lg-12\";\r\n        //public orderBy = \"nom\";\r\n        public orderBy = \"\";\r\n        public reserve = false;\r\n        public perPage = 20;\r\n        public multiSelect = false;\r\n        public filterEnable = true;\r\n        public sortEnable = true;\r\n        public moreEnable = false;\r\n        public caption = \"Liste des clients\";\r\n        public theadSticky = \"mw-zone-travail\";\r\n        public readOnly = false;\r\n        public templateUrl: string = \"\";\r\n        public data: Modeles.Application.IClient[] = [];\r\n        public selectedItems: Modeles.Application.IClient[] = [];\r\n        public disabledItems: Modeles.Application.IClient[] = [];\r\n        public columns: MyWay.UI.ImwTableColumnOptions[] = [this.tableauColonneDataClient];\r\n        public selectionChangeHandler: MyWay.UI.ISelectionChangeHandler;\r\n\r\n        constructor(handler: MyWay.UI.ISelectionChangeHandler, $filter: ng.IFilterService, $parse: ng.IParseService,\r\n            data: Modeles.Application.IClient[]) {\r\n            this.selectionChangeHandler = handler;\r\n            this.tableauColonneDataClient.comparator = new Comparator.ClientComparator($filter, $parse);\r\n            this.initialiser(data);\r\n        }\r\n\r\n        private initialiser(data: Modeles.Application.IClient[]): void {\r\n            if (!_.isEmpty(data)) {\r\n                let indicateurs = data[0].listeIndicateurs;\r\n                if (!_.isEmpty(indicateurs)) {\r\n                    let listeColonnes = indicateurs.map((indic: Application.IIndicateur, index: number) => {\r\n                        let colonne: MyWay.UI.ImwTableColumnOptions;\r\n                        if (indic.valeurNumber) {\r\n                            colonne = {\r\n                                title: indic.intitule,\r\n                                bind: \"listeIndicateurs[\" + index + \"].valeurNumber\",\r\n                                cssClass: \"col-md-2 col-lg-2\",\r\n                                disableFilter: true\r\n                            };\r\n                        } else {\r\n                            colonne = {\r\n                                title: indic.intitule,\r\n                                bind: \"listeIndicateurs[\" + index + \"].valeur\",\r\n                                cssClass: \"col-md-2 col-lg-2\",\r\n                                disableFilter: true\r\n                            };\r\n                        }\r\n                        switch (indic.typeIndicateur) {\r\n                            case Enum.Indicateur.TYPE.DATE:\r\n                                colonne.filter = \" | date: 'dd/MM/yyyy'\";\r\n                                break;\r\n                            case Enum.Indicateur.TYPE.MONTANT:\r\n                                colonne.filter = \" | currency\";\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                        return colonne;\r\n                    });\r\n                    this.columns = this.columns.concat(listeColonnes);\r\n                }\r\n            }\r\n            this.data = data;\r\n        }\r\n    }\r\n}   ","module Portefeuille.Modeles.Tableaux {\r\n    export class TableauClient implements MyWay.UI.ImwTableOptions {\r\n\r\n        public tableauColonneDataClient: MyWay.UI.ImwTableColumnOptions = {\r\n            title: \"Clients / Prospects\",\r\n            bind: \"nom\",\r\n            cssClass: \"col-md-2 colonne-clients\",\r\n            disableFilter: false,\r\n            template: \"vues/templates-tableau/colonne-tableau-data-client.html\"\r\n        };\r\n\r\n        public tableauColonneDataNbPersonnes: MyWay.UI.ImwTableColumnOptions = {\r\n            title: \"Nb personnes / relation\",\r\n            bind: \"nbPersonneRelation\",\r\n            cssClass: \"col-md-2 text-align-right\",\r\n            disableFilter: true\r\n        };\r\n\r\n\r\n        public width: string = \"col-md-12 col-lg-12\";\r\n        public reserve = false;\r\n        public perPage = Constantes.Application.NB_LIGNE_TABLEAU;\r\n        public multiSelect = false;\r\n        public filterEnable = true;\r\n        public sortEnable = true;\r\n        public moreEnable = false;\r\n        public caption = \"Liste des clients\";\r\n        public theadSticky = \"mw-zone-travail\";\r\n        public readOnly = false;\r\n        public templateUrl: string = \"\";\r\n        public data: Modeles.Application.IClient[] = [];\r\n        public selectedItems: Modeles.Application.IClient[] = [];\r\n        public disabledItems: Modeles.Application.IClient[] = [];\r\n        public columns: MyWay.UI.ImwTableColumnOptions[] = [this.tableauColonneDataClient, this.tableauColonneDataNbPersonnes];\r\n        public selectionChangeHandler: MyWay.UI.ISelectionChangeHandler;\r\n        public tableHandler: MyWay.UI.IMwTableHandler;\r\n        public choixIndicateurs: Array<Modeles.Application.IIndicateurChoix>;\r\n        public hasNoneElements = Constantes.Tableau.TAB_NO_ELEMENT_CLIENT;\r\n\r\n        constructor(handler: MyWay.UI.ISelectionChangeHandler,\r\n            handlerTable: MyWay.UI.IMwTableHandler,\r\n            $filter: ng.IFilterService,\r\n            $parse: ng.IParseService,\r\n            data: Modeles.Application.IClient[],\r\n            choixIndicateurs: Array<Modeles.Application.IIndicateurChoix>,\r\n            voirNbPersonne: boolean) {\r\n            if (voirNbPersonne === true) {\r\n                this.columns = [this.tableauColonneDataClient, this.tableauColonneDataNbPersonnes];\r\n            } else {\r\n                this.columns = [this.tableauColonneDataClient];\r\n            }\r\n\r\n            this.selectionChangeHandler = handler;\r\n            this.tableHandler = handlerTable;\r\n            this.tableauColonneDataClient.comparator = new Comparator.ClientComparator($filter, $parse);\r\n            this.choixIndicateurs = choixIndicateurs;\r\n            this.initEtatFiltre(<any> handler);\r\n            this.initialiser(data, $filter, $parse);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param data\r\n         * @param $filter\r\n         * @param $parse\r\n         */\r\n        private initialiser(data: Modeles.Application.IClient[], $filter: ng.IFilterService, $parse: ng.IParseService): void {\r\n            if (!_.isEmpty(data)) {\r\n                if (!_.isEmpty(this.choixIndicateurs)) {\r\n                    let listeColonnes = [];\r\n                    _.forEach(this.choixIndicateurs, (indicateurChoix: Modeles.Application.IIndicateurChoix) => {\r\n\r\n                        // v2 @nwo : certains cas peuvent avoir le premier client avec un indicateur manquant mais les autres OK, \r\n                        // donc on va tester sur tous les clients disponibles si jamais le 1er n'était pas entier\r\n                        let indexIndicateur = -1;\r\n                        _.find(data, (personne: Modeles.Application.IClient) => {\r\n                            return indexIndicateur = _.findIndex(personne.listeIndicateurs, (indicateurData: Modeles.Application.IIndicateur) => {\r\n                                return indicateurData.code === indicateurChoix.indicateur.code;\r\n                            });\r\n                        });\r\n                        if (indexIndicateur !== -1 && indicateurChoix.indicateur.estVisibleColonne) {\r\n                            let colonne: MyWay.UI.ImwTableColumnOptions;\r\n                            if (indicateurChoix.indicateur.typeIndicateur === Enum.Indicateur.TYPE.MONTANT\r\n                                || indicateurChoix.indicateur.typeIndicateur === Enum.Indicateur.TYPE.NOMBRE\r\n                                || indicateurChoix.indicateur.typeIndicateur === Enum.Indicateur.TYPE.POURCENT) {\r\n                                colonne = {\r\n                                    title: indicateurChoix.indicateur.intitule,\r\n                                    bind: \"listeIndicateurs[\" + indexIndicateur + \"].valeurNumber\",\r\n                                    cssClass: \"col-md-1\",\r\n                                    disableFilter: true\r\n                                };\r\n                            } else if (indicateurChoix.indicateur.typeIndicateur === Enum.Indicateur.TYPE.DATE) {\r\n                                colonne = {\r\n                                    title: indicateurChoix.indicateur.intitule,\r\n                                    bind: \"listeIndicateurs[\" + indexIndicateur + \"].valeurDate\",\r\n                                    cssClass: \"col-md-1\",\r\n                                    disableFilter: true\r\n                                };\r\n                            } else {\r\n                                colonne = {\r\n                                    title: indicateurChoix.indicateur.intitule,\r\n                                    bind: \"listeIndicateurs[\" + indexIndicateur + \"].valeur\",\r\n                                    cssClass: \"col-md-1\",\r\n                                    disableFilter: true\r\n                                };\r\n                            }\r\n                            \r\n                            // gère le filter\r\n                            colonne.filter = \"\";\r\n                            let isEuros: boolean = false;\r\n                            if (indicateurChoix.indicateur.code === Enum.Indicateur.CODE.PNB_3112.toString()\r\n                                || indicateurChoix.indicateur.code === Enum.Indicateur.CODE.PNB_N.toString()\r\n                                || indicateurChoix.indicateur.code === Enum.Indicateur.CODE.PNB_N_MOINS_1.toString()) {\r\n                                isEuros = true;\r\n                            }\r\n                            switch (indicateurChoix.indicateur.typeIndicateur) {\r\n                                case Enum.Indicateur.TYPE.DATE:\r\n                                    colonne.filter = \" | dateNC\";\r\n                                    break;\r\n                                case Enum.Indicateur.TYPE.MONTANT:\r\n                                    colonne.filter = ` | montantFiltre: ${isEuros}`;\r\n                                    colonne.cssClass = `${colonne.cssClass} text-align-right`;\r\n                                    break;\r\n                                case Enum.Indicateur.TYPE.POURCENT:\r\n                                    colonne.filter = \" | pourcentFiltre\";\r\n                                    colonne.cssClass = `${colonne.cssClass} text-align-right`;\r\n                                    break;\r\n                                case Enum.Indicateur.TYPE.NOMBRE:\r\n                                    colonne.filter = \" | nombreNC\";\r\n                                    colonne.cssClass = `${colonne.cssClass} text-align-right`;\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            // Gestion colonne CA\r\n                            if (indicateurChoix.indicateur.famille === Enum.Indicateur.FAMILLE.CA) {\r\n                                if (indicateurChoix.indicateur.codeRest === Enum.Indicateur.CODEREST.CA_N.toString()) {\r\n                                    colonne.template = \"vues/templates-tableau/colonne-tableau-data-ca-n.html\";\r\n                                }\r\n                                if (indicateurChoix.indicateur.codeRest === Enum.Indicateur.CODEREST.CA_N_MOINS_1.toString()) {\r\n                                    colonne.template = \"vues/templates-tableau/colonne-tableau-data-ca-n-1.html\";\r\n                                }\r\n                            }\r\n                            if (indicateurChoix.indicateur.code === Enum.Indicateur.CODE.PNB_N.toString()) {\r\n                                colonne.template = \"vues/templates-tableau/colonne-tableau-pnb-n.html\";\r\n                            }\r\n                            if (indicateurChoix.indicateur.code === Enum.Indicateur.CODE.FLUX_CREDITEURS_N.toString()) {\r\n                                colonne.template = \"vues/templates-tableau/colonne-tableau-flux-crediteur.html\";\r\n                            }\r\n                            if (indicateurChoix.indicateur.code === Enum.Indicateur.CODE.FLUX_DEBITEURS_N.toString()) {\r\n                                colonne.template = \"vues/templates-tableau/colonne-tableau-flux-debiteur.html\";\r\n                            }\r\n                            if (indicateurChoix.indicateur.code === Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString()) {\r\n                                colonne.template = \"vues/templates-tableau/colonne-potentiel-prospect.html\";\r\n                            }\r\n                            if (indicateurChoix.indicateur.code === Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString()) {\r\n                                colonne.template = \"vues/templates-tableau/colonne-date-derniere-revue.html\";\r\n                            }\r\n                            if (indicateurChoix.indicateur.code === Enum.Indicateur.CODE.TOP_CC.toString()) {\r\n                                // pour Top CC : Trié par valeurNumber (Chaque pastille est associée à une valeur numérique pour pouvoir trier dans l'ordre : 1 = \"Vert\", 2=\"Orange\")\r\n                                colonne.bind = \"listeIndicateurs[\" + indexIndicateur + \"].valeurNumber\";\r\n                                colonne.template = \"vues/templates-tableau/colonne-tableau-top-cc.html\";\r\n                            }\r\n\r\n                            colonne.filter += \" | valeurNonConnuFiltre\";\r\n\r\n                            // NOUVEL INDICATEUR, titre pour score\r\n                            let codeRest: string = indicateurChoix.indicateur.codeRest;\r\n                            if (codeRest === Enum.Indicateur.CODEREST.SCORE_ACTIVATION.toString() ||\r\n                                codeRest === Enum.Indicateur.CODEREST.SCORE_APPETENCE.toString()) {\r\n                                colonne.title = colonne.title + \" (/100)\";\r\n                            }\r\n                            if (codeRest === Enum.Indicateur.CODEREST.SCORE_DEFAILLANCE.toString()) {\r\n                                colonne.title = colonne.title + \" (/20)\";\r\n                            }\r\n\r\n                            listeColonnes.push(colonne);\r\n                        }\r\n                    });\r\n\r\n                    this.columns = this.columns.concat(listeColonnes);\r\n                }\r\n            }\r\n            this.data = data;\r\n        }\r\n\r\n        private initEtatFiltre(clientsControleur: Portefeuille.Controleurs.ClientsControleur): void {\r\n            angular.element(document.querySelector(Constantes.Application.CLASSE_COLONNE_RELATIONS)).ready(function () {\r\n                if (document.querySelector(Constantes.Application.CLASSE_COLONNE_CLIENTS)) {\r\n                    // Récupération de l'élément bouton filtre clients\r\n                    let boutonFiltreClients = angular.element(document.querySelector(Constantes.Application.CLASSE_COLONNE_CLIENTS).querySelector(Constantes.Application.CLASSE_BTN_FILTRE));\r\n                    // Initialisation\r\n                    clientsControleur.estAvecFiltreColonne = boutonFiltreClients.hasClass(Constantes.Application.CLASSE_ACTIF);\r\n\r\n                    // Evenement de clique sur le bouton\r\n                    boutonFiltreClients.on(\"click\", () => {\r\n                        clientsControleur.estAvecFiltreColonne = boutonFiltreClients.hasClass(Constantes.Application.CLASSE_ACTIF);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}   ","module Portefeuille.Modeles.Tableaux {\r\n\r\n    /* istanbul ignore next */\r\n    export class TableauRaisonsSociales implements MyWay.UI.ImwTableOptions {\r\n\r\n        private tableauColonneId: MyWay.UI.ImwTableColumnOptions = {\r\n            title: Constantes.Tableau.TAB_LISTE_CLIENTS_COLONNE_ID,\r\n            bind: \"identifiantPersonne\",\r\n            cssClass: \"col-md-3\"\r\n        };\r\n\r\n        private tableauColonneRaisonSociale: MyWay.UI.ImwTableColumnOptions = {\r\n            title: Constantes.Tableau.TAB_LISTE_CLIENTS_COLONNE_RAISON_SOCIALE,\r\n            bind: \"raisonSociale\",\r\n            cssClass: \"col-md-3\"\r\n        };\r\n\r\n        private tableauColonneMarche: MyWay.UI.ImwTableColumnOptions = {\r\n            title: Constantes.Tableau.TAB_LISTE_CLIENTS_COLONNE_MARCHE,\r\n            bind: \"libelleSegment\",\r\n            cssClass: \"col-md-3\"\r\n        };\r\n\r\n\r\n        private tableauColonneObjectifDeFlux: MyWay.UI.ImwTableColumnOptions = {\r\n            title: Constantes.Tableau.TAB_LISTE_CLIENTS_COLONNE_OBJECTIF_DE_FLUX,\r\n            bind: \"\",\r\n            cssClass: \"col-md-3\",\r\n            template: \"vues/templates-tableau/colonne-objectif-flux.html\"\r\n        };\r\n\r\n        public width: string = \"col-md-12 col-lg-12\";\r\n        public orderBy = \"raisonSociale\";\r\n        public reserve = false;\r\n        public perPage = 10;\r\n        public multiSelect = false;\r\n        public filterEnable = false;\r\n        public sortEnable = false;\r\n        public moreEnable = false;\r\n        public caption = \"Infos clients\";\r\n        public readOnly = false;\r\n        public theadSticky = \"mw-zone-travail\";\r\n        public templateUrl: string = \"\";\r\n        public data: Modeles.ApplicationStats.IClientSimplifie[] = [];\r\n        public selectedItems: Modeles.ApplicationStats.IClientSimplifie[] = [];\r\n        public disabledItems: Modeles.ApplicationStats.IClientSimplifie[] = [];\r\n        public columns: MyWay.UI.ImwTableColumnOptions[] = [\r\n            this.tableauColonneRaisonSociale,\r\n            this.tableauColonneId,\r\n            this.tableauColonneMarche\r\n        ];\r\n        public selectionChangeHandler: MyWay.UI.ISelectionChangeHandler;\r\n        public tableHandler: MyWay.UI.IMwTableHandler;\r\n        public hasNoneElements = Constantes.Tableau.TAB_LISTE_CLIENTS_NO_ELEMENT;\r\n\r\n        constructor(colonneObjectif: boolean) {\r\n            if (colonneObjectif) {\r\n                this.columns = [\r\n                    this.tableauColonneRaisonSociale,\r\n                    this.tableauColonneId,\r\n                    this.tableauColonneMarche,\r\n                    this.tableauColonneObjectifDeFlux   // affiche l'objectif de flux\r\n                ];\r\n            }\r\n        }\r\n    }\r\n}   ","module Portefeuille.Modeles.Tableaux {\r\n    export class TableauRelation implements MyWay.UI.ImwTableOptions {\r\n\r\n        public tableauColonneDataRelation: MyWay.UI.ImwTableColumnOptions = {\r\n            title: \"Relations\",\r\n            bind: \"nom\",\r\n            cssClass: \"col-md-2 col-lg-2 colonne-relations\",\r\n            disableFilter: false,\r\n            template: \"vues/templates-tableau/colonne-tableau-data-relation.html\"\r\n        };\r\n\r\n        public tableauColonneDataNbClients: MyWay.UI.ImwTableColumnOptions = {\r\n            title: \"Nb clients / prospects\",\r\n            bind: \"listeClients.length\",\r\n            cssClass: \"col-md-1 col-lg-1 text-align-right\",\r\n            disableFilter: true\r\n        };\r\n        public width: string = \"col-md-12 col-lg-12\";\r\n        public orderBy = \"nom\";\r\n        public reserve = false;\r\n        public perPage = Constantes.Application.NB_LIGNE_TABLEAU;\r\n        public multiSelect = false;\r\n        public filterEnable = true;\r\n        public sortEnable = true;\r\n        public moreEnable = false;\r\n        public caption = \"Liste des relations économiques\";\r\n        public theadSticky = \"mw-zone-travail\";\r\n        public readOnly = false;\r\n        public templateUrl: string = \"\";\r\n        public data: Modeles.Application.IRelationEconomique[] = [];\r\n        public selectedItems: Modeles.Application.IRelationEconomique[] = [];\r\n        public disabledItems: Modeles.Application.IRelationEconomique[] = [];\r\n        public columns: MyWay.UI.ImwTableColumnOptions[] = [this.tableauColonneDataRelation, this.tableauColonneDataNbClients];\r\n        public selectionChangeHandler: MyWay.UI.ISelectionChangeHandler;\r\n        public tableHandler: MyWay.UI.IMwTableHandler;\r\n        public choixIndicateurs: Array<Modeles.Application.IIndicateurChoix>;\r\n        public hasNoneElements = Constantes.Tableau.TAB_NO_ELEMENT_RELATION;\r\n\r\n        constructor(handler: MyWay.UI.ISelectionChangeHandler, handlerTable: MyWay.UI.IMwTableHandler, $filter: ng.IFilterService, $parse: ng.IParseService,\r\n            data: Modeles.Application.IRelationEconomique[], choixIndicateurs: Array<Modeles.Application.IIndicateurChoix>) {\r\n            this.selectionChangeHandler = handler;\r\n            this.tableHandler = handlerTable;\r\n            this.tableauColonneDataRelation.comparator = new Comparator.RelationComparator($filter, $parse);\r\n            this.choixIndicateurs = choixIndicateurs;\r\n            this.initEtatFiltre(<any>handler);\r\n            this.initialiser(data);\r\n        }\r\n\r\n        private initialiser(data: Modeles.Application.IRelationEconomique[]): void {\r\n            if (!_.isEmpty(data)) {\r\n                if (!_.isEmpty(this.choixIndicateurs)) {\r\n                    let listeColonnes = [];\r\n\r\n                    _.forEach(this.choixIndicateurs, (indicateurChoix: Modeles.Application.IIndicateurChoix) => {\r\n                       \r\n                        let indexIndicateur = _.findIndex(data[0].listeIndicateurs, (indicateurData: Modeles.Application.IIndicateur) => {\r\n                            return indicateurData.code === indicateurChoix.indicateur.codeRel;\r\n                        });\r\n\r\n                        if (indexIndicateur !== -1 && indicateurChoix.indicateur.estVisibleColonne) {\r\n                            let colonne: MyWay.UI.ImwTableColumnOptions;\r\n                            if (indicateurChoix.indicateur.typeIndicateur === Enum.Indicateur.TYPE.MONTANT\r\n                                || indicateurChoix.indicateur.typeIndicateur === Enum.Indicateur.TYPE.NOMBRE\r\n                                || indicateurChoix.indicateur.typeIndicateur === Enum.Indicateur.TYPE.POURCENT) {\r\n                                colonne = {\r\n                                    title: indicateurChoix.indicateur.intitule,\r\n                                    bind: \"listeIndicateurs[\" + indexIndicateur + \"].valeurNumber\",\r\n                                    cssClass: \"col-md-1\",\r\n                                    disableFilter: true\r\n                                    //,template: \"vues/templates-tableau/colonne-tableau-data-number.html\"\r\n                                };\r\n                            } else if (indicateurChoix.indicateur.typeIndicateur === Enum.Indicateur.TYPE.DATE) {\r\n                                colonne = {\r\n                                    title: indicateurChoix.indicateur.intitule,\r\n                                    bind: \"listeIndicateurs[\" + indexIndicateur + \"].valeurDate\",\r\n                                    cssClass: \"col-md-1\",\r\n                                    disableFilter: true\r\n                                };\r\n                            } else {\r\n                                colonne = {\r\n                                    title: indicateurChoix.indicateur.intitule,\r\n                                    bind: \"listeIndicateurs[\" + indexIndicateur + \"].valeur\",\r\n                                    cssClass: \"col-md-1\",\r\n                                    disableFilter: true\r\n                                };\r\n                            }\r\n                            colonne.filter = \"\";\r\n                            let isEuros: boolean = false;\r\n                            if (indicateurChoix.indicateur.code === Enum.Indicateur.CODE.PNB_3112.toString()\r\n                                || indicateurChoix.indicateur.code === Enum.Indicateur.CODE.PNB_N.toString()\r\n                                || indicateurChoix.indicateur.code === Enum.Indicateur.CODE.PNB_N_MOINS_1.toString()) {\r\n                                isEuros = true;\r\n                            }\r\n                            if (indicateurChoix.indicateur.code === Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString()) {\r\n                                colonne.template = \"vues/templates-tableau/colonne-date-derniere-revue-rel.html\";\r\n                            }\r\n\r\n                            switch (indicateurChoix.indicateur.typeIndicateur) {\r\n                                case Enum.Indicateur.TYPE.DATE:\r\n                                    colonne.filter = \" | dateNC\";\r\n                                    break;\r\n                                case Enum.Indicateur.TYPE.MONTANT:\r\n                                    colonne.filter = ` | montantFiltre: ${isEuros}`;\r\n                                    colonne.cssClass = `${colonne.cssClass} text-align-right`;\r\n                                    break;\r\n                                case Enum.Indicateur.TYPE.POURCENT:\r\n                                    colonne.filter = \" | pourcentFiltre\";\r\n                                    colonne.cssClass = `${colonne.cssClass} text-align-right`;\r\n                                    break;\r\n\r\n                                case Enum.Indicateur.TYPE.NOMBRE:\r\n                                    colonne.filter = \" | nombreNC\";\r\n                                    colonne.cssClass = `${colonne.cssClass} text-align-right`;\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            colonne.filter += \" | valeurNonConnuFiltre\";\r\n                            listeColonnes.push(colonne);\r\n                        }\r\n\r\n                    });\r\n\r\n                    this.columns = this.columns.concat(listeColonnes);\r\n                }\r\n            }\r\n            this.data = data;\r\n        }\r\n\r\n        private initEtatFiltre(clientsControleur: Portefeuille.Controleurs.ClientsControleur): void {\r\n            angular.element(document.querySelector(Constantes.Application.CLASSE_COLONNE_RELATIONS)).ready(function () {\r\n                if (document.querySelector(Constantes.Application.CLASSE_COLONNE_RELATIONS)) {\r\n                    // Récupération de l'élément bouton filtre relations\r\n                    let boutonFiltreRelations = angular.element(document.querySelector(Constantes.Application.CLASSE_COLONNE_RELATIONS).querySelector(Constantes.Application.CLASSE_BTN_FILTRE));\r\n\r\n                    // Initialisation\r\n                    clientsControleur.estAvecFiltreColonne = boutonFiltreRelations.hasClass(Constantes.Application.CLASSE_ACTIF);\r\n\r\n                    // Evenement de clique sur le bouton\r\n                    boutonFiltreRelations.on(\"click\", () => {\r\n                        clientsControleur.estAvecFiltreColonne = boutonFiltreRelations.hasClass(Constantes.Application.CLASSE_ACTIF);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}   ","// Code récupéré depuis Connaissance Client / Ancienne version des liens\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Configuration du fichier CSV (utilisé par le service mwCsvService).\r\n     */\r\n    export interface ICsvOptions {\r\n        /**\r\n         * Use this characters to \"escape\" fields, otherwise will use double quotes as deafult\r\n         */\r\n        txtDelimiter?: string;\r\n        /**\r\n         * Defines the decimal separator character (default is ,). If set to \"locale\", it uses the language sensitive representation of the number.\r\n         */\r\n        decimalSeparator?: string;\r\n        /**\r\n         * Will force escaping of every string field. (it should always true)\r\n         */\r\n        quoteStrings?: boolean;\r\n        /**\r\n         * Add the Byte Order Mark, use this option if you are getting an unexpected char when opening the file on any windows App (default is true).\r\n         */\r\n        addByteOrderMarker?: boolean;\r\n        /**\r\n         * Defines the field separator character (default is ;)\r\n         */\r\n        fieldSeparator?: any;\r\n        /**\r\n         * charset encoding\r\n         */\r\n        charset?: string;\r\n        /**\r\n         * output filename (default is export.csv)\r\n         */\r\n        filename?: string;\r\n        /**\r\n         * Defines whether or not using keys as csv column value (default is false).\r\n         */\r\n        label?: boolean;\r\n        /**\r\n         * If provided, would use this attribute to create a header row. This property should be used along with columnOrder because natural order can eventually change.\r\n         */\r\n        header?: string[];\r\n        /**\r\n         * Defines the column order to be set when creating the body of the CSV (may be according to the csv-headers).\r\n         * It can also be used to filter properties in csv.\r\n         */\r\n        columnOrder?: any;\r\n    }\r\n\r\n    // uncomment if necessary (doesn't seem to be right now)\r\n    //app.config([\"$compileProvider\", function ($compileProvider : ng.ICompileProvider) {\r\n    //    // add data prefix to ahref white list\r\n    //    $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|ftp|mailto|tel|file|data):/);\r\n    //}]);\r\n\r\n} ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-bloc-condition-filtre\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfBlocConditionFiltreControleur {\r\n        public static CLASS_NAME = \"PfBlocConditionFiltreControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfBlocConditionFiltreControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n            Constantes.Inject.Services.filtreService,\r\n            Constantes.Inject.Services.begacliService\r\n        ];\r\n\r\n        // Variables d'entrée\r\n        public listeIndicateurs: Array<Modeles.Application.IIndicateurFiltre>;\r\n        public listeFiltres: Array<Modeles.Application.IFiltre>;\r\n        public noIndex: number;\r\n        public filtre: Modeles.Application.IFiltre;\r\n        public filtreBegacli: Modeles.Application.IFiltreBegacli;\r\n        public afficherOperateur: boolean;\r\n        public estVueClient: boolean;\r\n\r\n        // Variables utiles\r\n        public listeComparateurs: Array<Enum.Filtre.COMPARATEUR>;\r\n        public listeOperateurs: Array<Enum.Filtre.OPERATEUR> = Constantes.Indicateur.LISTE_OPERATEURS_FILTRE;\r\n        private dernierIndicateurSelect: Modeles.Application.IIndicateurFiltre;\r\n        private sauvegardeIndicateur: Modeles.Application.IIndicateurFiltre;\r\n        public isOpen: boolean = true;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private filtreService: Services.Application.IFiltreService,\r\n            private begacliService: Services.Application.IBegacliService\r\n        ) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfBlocConditionFiltreControleur.logger.info(\">>> Appel de la méthode : PfBlocConditionFiltreControleur.initialiser <<<\");\r\n            //console.log(\"->no index : \", this.noIndex);\r\n            //console.log(\"-> listeFiltres : \", this.listeFiltres);\r\n            //console.log(\"-> listeIndicateurs : \", this.listeIndicateurs);\r\n\r\n            this.sauvegardeIndicateur = null;\r\n            this.filtreBegacli = this.begacliService.getFiltreBegacli();\r\n\r\n            // Initialisation de l'indicateur\r\n            if (this.filtre.indicateur) {\r\n                // on va garder les valeurs filtrées pour les indicateurs type texte et begacli ????\r\n                let listeValeursActives: string[] = _.pluck(_.where(this.filtre.indicateur.listeValeurs, { \"actif\": true }), \"libelle\");\r\n                let indicateurTrouve: Modeles.Application.IIndicateurFiltre =\r\n                    _.find(this.listeIndicateurs, (indicateur: Modeles.Application.IIndicateurFiltre) => {\r\n                        if (this.filtre.indicateur.indicateur.code === indicateur.indicateur.code) {\r\n                            this.filtre.indicateur = indicateur;\r\n                            this.dernierIndicateurSelect = indicateur;\r\n                            return true;\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                    });\r\n                // remise en place des valeurs actives dans listeValeurs\r\n                if (indicateurTrouve &&\r\n                    this.filtre.indicateur.listeValeurs &&\r\n                    this.filtre.indicateur.listeValeurs.length > 0) {\r\n                    _.forEach(indicateurTrouve.listeValeurs, (valeur: Modeles.Application.IValeurFiltre) => {\r\n                        if (listeValeursActives.indexOf(valeur.libelle) >= 0) {\r\n                            valeur.actif = true;\r\n                        }\r\n                    });\r\n                }\r\n                this.selectionnerListeFiltre();\r\n            }\r\n        }\r\n\r\n        // dans HTML, listeIndicateurs remplacé par getListeIndicateurs(noIndex)\r\n        // ce qui permet de filtrer BEGACLI dans le 1er ou 2ème filtre, si présent dans l'autre.\r\n        public getListeIndicateurs(noIndex: number): Array<Modeles.Application.IIndicateurFiltre> {\r\n            // 2 filtres max. donc noIndex vaut 0 ou 1\r\n            let liste: Array<Modeles.Application.IIndicateurFiltre>;\r\n            let presenceBegacli: boolean = this.presenceBegacliAutreIndex(noIndex);\r\n            liste = [];\r\n            _.forEach(this.listeIndicateurs, (unIndicateur: Modeles.Application.IIndicateurFiltre) => {\r\n                if (presenceBegacli === true) {\r\n                    if (unIndicateur.indicateur.code !== Enum.Indicateur.CODE.BEGACLI.toString()) {\r\n                        liste.push(unIndicateur);\r\n                    }\r\n                } else {\r\n                    liste.push(unIndicateur);\r\n                }\r\n            });\r\n            //console.log(\"-> getListeIndicateurs noIndex : \", noIndex);\r\n            //console.log(\"-> getListeIndicateurs liste : \", liste);\r\n            return liste;\r\n        }\r\n\r\n        public presenceBegacliAutreIndex(noIndex: number): boolean {\r\n            if (this.listeFiltres.length === 1) {\r\n                // pas d'autre filtre car 1 seul\r\n                return false;\r\n            };\r\n            // l'autre index\r\n            let index: number = 0;\r\n            if (noIndex === 0) {\r\n                index = 1;\r\n            };\r\n            // l'autre filtre\r\n            let filtre: Modeles.Application.IFiltre = this.listeFiltres[index];\r\n            if (filtre && filtre.indicateur && filtre.indicateur.indicateur && filtre.indicateur.indicateur.code === Enum.Indicateur.CODE.BEGACLI.toString()) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public begacliChangeMaj(lettreBegacli: Modeles.Application.ILettreBegacli) {\r\n            // console.log(\"--> lettreBegacli Maj : \", lettreBegacli);\r\n            if (lettreBegacli.choisiMaj === true) {\r\n                lettreBegacli.choisiMin = false;\r\n            }\r\n\r\n        }\r\n\r\n        public begacliChangeMin(lettreBegacli: Modeles.Application.ILettreBegacli) {\r\n            // console.log(\"--> lettreBegacli Min : \", lettreBegacli);\r\n            if (lettreBegacli.choisiMin === true) {\r\n                lettreBegacli.choisiMaj = false;\r\n            }\r\n        }\r\n\r\n\r\n        public selectionnerListeFiltre(): void {\r\n            // Initialisation de la liste \r\n            type listeFiltreParIndicateur = {\r\n                [key: string]: Array<Enum.Filtre.COMPARATEUR>;\r\n            }\r\n\r\n            const listeDeListeComparateur: listeFiltreParIndicateur = {\r\n                \"DateDerniereRevue\": Constantes.Indicateur.LISTE_COMPARATEUR_DERNIERE_REVUE,\r\n                \"DateDerniereRevueRel\": Constantes.Indicateur.LISTE_COMPARATEUR_DERNIERE_REVUE\r\n                // \"PREMIER_EQUIPEMENT\": Constantes.Indicateur.LISTE_COMPARATEUR_INTERVAL // ici virer cette ligne....\r\n            };\r\n\r\n            this.listeComparateurs = listeDeListeComparateur[this.filtre.indicateur.indicateur.code] ?\r\n                listeDeListeComparateur[this.filtre.indicateur.indicateur.code] :\r\n                Constantes.Indicateur.LISTE_COMPARATEUR_COMMUNE;\r\n\r\n            // Si on selectionne un indicateur n'ayant pas le comparateur selection reinitalise le comparateur\r\n            if (_.indexOf(this.listeComparateurs, this.filtre.comparateur) === -1) {\r\n                this.filtre.comparateur = null;\r\n            }\r\n            // Si on selectionne un indicateur différent on reinitalise les valeurs \r\n            // (si on ne valide pas le filtre les valeurs précédentes sont restitué)\r\n            if (this.sauvegardeIndicateur\r\n                && this.sauvegardeIndicateur.indicateur.code !== this.filtre.indicateur.indicateur.code) {\r\n                this.filtre.valeurUnique = undefined;\r\n                this.filtre.valeurMultiple1 = undefined;\r\n                this.filtre.valeurMultiple2 = undefined;\r\n            }\r\n            this.sauvegardeIndicateur = this.filtre.indicateur;\r\n        }\r\n        /**\r\n         * Méthode appelée lors du clique sur le bouton Supprimer de la condition\r\n         * @returns {void}\r\n         */\r\n        public supprimerCondition(): void {\r\n            // Initialisation de l'utilisation de l'indicateur à faux\r\n            if (this.filtre.indicateur) {\r\n                if (this.estVueClient) {\r\n                    this.filtre.indicateur.utilise = false;\r\n                } else {\r\n                    this.filtre.indicateur.utiliseRelationEco = false;\r\n                }\r\n            }\r\n\r\n            // Suppression du filtre de la liste des filtres\r\n            this.listeFiltres.splice(this.listeFiltres.indexOf(this.filtre), 1);\r\n\r\n            //S'il ne reste plus qu'un filtre\r\n            if (this.listeFiltres.length === 1) {\r\n                // on supprime l'opérateur\r\n                this.listeFiltres[0].operateur = null;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode appelée lors de la selection d'un indicateur\r\n         * @returns {void}\r\n         */\r\n        public selectionIndicateur(): void {\r\n            this.selectionnerListeFiltre();\r\n           \r\n            if (this.dernierIndicateurSelect) {\r\n                if (this.estVueClient) {\r\n                    this.dernierIndicateurSelect.utilise = false;\r\n                } else {\r\n                    this.dernierIndicateurSelect.utiliseRelationEco = false;\r\n                }\r\n            }\r\n\r\n            if (this.filtre.indicateur) {\r\n                if (this.estVueClient) {\r\n                    this.filtre.indicateur.utilise = true;\r\n                } else {\r\n                    this.filtre.indicateur.utiliseRelationEco = true;\r\n                }\r\n                this.dernierIndicateurSelect = this.filtre.indicateur;\r\n            }\r\n        }\r\n        public get comparateurUniqueInactif(): boolean {\r\n            return this.estComparateurDeTypeEntre\r\n                || (_.indexOf(Constantes.Indicateur.LISTE_COMPARATEUR, this.filtre.comparateur) === -1);\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de savoir si un comparateur est du type Entre\r\n         * @param {Enum.Filtre.COMPARATEUR} comparateur\r\n         * @returns {boolean}\r\n         */\r\n        public comparateurEstDeTypeEntre(comparateur: Enum.Filtre.COMPARATEUR): boolean {\r\n            return comparateur === Enum.Filtre.COMPARATEUR.ENTRE;\r\n        }\r\n        /**\r\n         * Méthode permettant de savoir si un comparateur est du type = NC\r\n         * @param {Enum.Filtre.COMPARATEUR} comparateur\r\n         * @returns {boolean}\r\n         */\r\n        public comparateurEstDeTypeNC(comparateur: Enum.Filtre.COMPARATEUR): boolean {\r\n            return comparateur === Enum.Filtre.COMPARATEUR.NC;\r\n        }\r\n        /**\r\n         * Méthode permettant de savoir si un comparateur est du type = Null (PlaceHolder)\r\n         * @param {Enum.Filtre.COMPARATEUR} comparateur\r\n         * @returns {boolean}\r\n         */\r\n        public comparateurNonRenseigne(comparateur: Enum.Filtre.COMPARATEUR): boolean {\r\n            return !comparateur;\r\n        }\r\n        /**\r\n         * Propriété récupérent le type d'indicateur\r\n         */\r\n        public get estComparateurDeTypeEntre(): boolean {\r\n            return this.comparateurEstDeTypeEntre(this.filtre.comparateur);\r\n        }\r\n        /**\r\n         * Propriété récupérent le type d'indicateur\r\n         */\r\n        public get typeIndicateur(): Enum.Indicateur.TYPE {\r\n            return this.estIndicateur ? this.filtre.indicateur.indicateur.typeIndicateur : null;\r\n        }\r\n        /**\r\n         * Propriété retourne le code de l'indicateur\r\n         */\r\n        public get codeIndicateur(): string {\r\n            return this.estIndicateur ? this.filtre.indicateur.indicateur.code : null;\r\n        }\r\n\r\n        public get estIndicateur(): boolean {\r\n            return (this.filtre\r\n                && this.filtre.indicateur\r\n                && this.filtre.indicateur.indicateur) ? true : false;\r\n        }\r\n        /**\r\n         * Propriété retournant la liste des valeur possible\r\n         */\r\n        public get listeValeurs(): Modeles.Application.IValeurFiltre[] {\r\n            return (this.filtre\r\n                && this.filtre.indicateur) ?\r\n                this.filtre.indicateur.listeValeurs : null;\r\n        }\r\n        /**\r\n         * Propriété indiquant de cacher le champ saisie date simple\r\n         */\r\n        public get cacheChampSaisieDateSimple(): boolean {\r\n            return this.comparateurEstDeTypeEntre(this.filtre.comparateur)\r\n                || this.comparateurNonRenseigne(this.filtre.comparateur);\r\n        }\r\n        /**\r\n         * Propriété indiquant de cacher le champ saisie date\r\n         */\r\n        public get cacheChampsSaisieDate(): boolean {\r\n            return (_.indexOf(Constantes.Indicateur.LISTE_COMPARATEUR_DERNIERE_REVUE, this.filtre.comparateur) !== -1) ||\r\n                this.comparateurEstDeTypeNC(this.filtre.comparateur);\r\n        }\r\n        /**\r\n         * Propriété indiquant si c'est l'indicateur de type date\r\n         */\r\n        public get estIndicateurDeTypeDate(): boolean {\r\n            return this.typeIndicateur === Enum.Indicateur.TYPE.DATE;\r\n        }\r\n\r\n        /**\r\n         * Propriété indiquant si c'est l'indicateur de type numérique\r\n         */\r\n        public get estIndicateurNumerique(): boolean {\r\n            return _.indexOf(Constantes.Indicateur.LISTE_INDICATEUR_NUMERIQUE, this.typeIndicateur) !== -1;\r\n        }\r\n\r\n        /**\r\n         * Propriété indiquant le comparateur de type NC\r\n         */\r\n        public get estComparateurDeTypeNC(): boolean {\r\n            return this.comparateurEstDeTypeNC(this.filtre.comparateur);\r\n        }\r\n\r\n        /**\r\n         * Propriété retournant l'unité borne min de l'indicateur\r\n         */\r\n        public get uniteMin(): string {\r\n            return this.getUnite(\"\");\r\n        }\r\n\r\n        /**\r\n         * Propriété retournant l'unité borne max de l'indicateur\r\n         */\r\n        public get uniteMax(): string {\r\n            return this.getUnite(this.codeIndicateur === Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG.toString() ? \"mois\" : \"\");\r\n        }\r\n\r\n        public get estUniteMin(): boolean {\r\n            return this.uniteMin\r\n                && this.uniteMin.length !== 0;\r\n        }\r\n\r\n        private getUnite(chaineMois: string): string {\r\n            return this.estIndicateurMontant ? this.devise :\r\n                (this.estIndicateurPourcent ? \"%\" :\r\n                (!this.estIndicateurDeTypeDate ? chaineMois : \"\"));\r\n        }\r\n\r\n        /**\r\n         * Propriété retournant la devise de l'indicateur\r\n         */\r\n        public get devise(): string {\r\n            return (_.indexOf(Constantes.Indicateur.INDICATEUR_EN_EURO, this.codeIndicateur) !== -1) ? \"€\" : \"k€\";\r\n        }\r\n        /**\r\n         * Propriété indiquant l'indicateur de type montant\r\n         */\r\n        public get estIndicateurMontant(): boolean {\r\n            return this.typeIndicateur === Enum.Indicateur.TYPE.MONTANT;\r\n        }\r\n        /**\r\n         * Propriété indiquant l'indicateur de type pourcentage\r\n         */\r\n        public get estIndicateurPourcent(): boolean {\r\n            return this.typeIndicateur === Enum.Indicateur.TYPE.POURCENT;\r\n        }\r\n        /**\r\n         * Propriété indiquant l'indicateur de type texte\r\n         */\r\n        public get estIndicateurTexte(): boolean {\r\n            return this.typeIndicateur === Enum.Indicateur.TYPE.TEXTE;\r\n        }\r\n\r\n        public get estIndicateurBegacli(): boolean {\r\n            return this.typeIndicateur === Enum.Indicateur.TYPE.BEGACLI;\r\n        }\r\n\r\n    }\r\n    // Déclaration du controleur\r\n    app.controller(\"PfBlocConditionFiltreControleur\", PfBlocConditionFiltreControleur);\r\n} ","/**\r\n * Directive pf-bloc-condition-filtre\r\n * @module portefeuille.Directives\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfBlocConditionFiltre(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-bloc-condition-filtre/pf-bloc-condition-filtre-vue.html\",\r\n            controller: \"PfBlocConditionFiltreControleur\",\r\n            controllerAs: \"pfBlocConditionFiltreCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                listeIndicateurs: \"=\",\r\n                listeFiltres: \"=\",\r\n                noIndex: \"=\",\r\n                filtre: \"=\",\r\n                afficherOperateur: \"=\",\r\n                estVueClient: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfBlocConditionFiltre\", mwPfBlocConditionFiltre);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-choix-portefeuille\r\n * @module portefeuille.Controleurs\r\n * @author S00053555 (Eric ALBERT)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    let loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfChoixPortefeuilleControleur {\r\n        public static CLASS_NAME = \"PfChoixPortefeuilleControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfChoixPortefeuilleControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n            Constantes.Inject.Angular.$location,\r\n            Constantes.Inject.Services.contexteService,\r\n            Constantes.Inject.Services.portefeuilleService,\r\n            Constantes.Inject.Services.eventService,\r\n            Constantes.Inject.Services.listeClientsService\r\n        ];\r\n\r\n        // Variables d'entrée\r\n        public listePortefeuillesDropDown: Modeles.Application.IAgent[];\r\n        public listePortefeuilles: Modeles.Application.IPortefeuille[];\r\n        public ouvertureVoletChoixPortefeuille: boolean;\r\n        public estVueGlobalConsolide: boolean;\r\n\r\n        // Variables utiles\r\n        public tousPortfeuillesSelectionnes: any;\r\n        public finInit: boolean = false;\r\n        public sauveListePortefeuille: Modeles.Application.IPortefeuille[];\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $location: ng.ILocationService,\r\n            private contexteService: Services.Application.IContexteService,\r\n            private portefeuilleService: Services.Application.IPortefeuilleService,\r\n            private eventService: Services.Application.IEventService,\r\n            private listeClientsService: Services.Application.IListeClientsService) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfChoixPortefeuilleControleur.logger.info(\">>> Appel de la méthode : PfChoixPortefeuilleControleur.initialiser <<<\");\r\n\r\n            this.eventService.setChoixPortfeuilleControleur(this);\r\n            this.listePortefeuilles = null;\r\n            this.ouvertureVoletChoixPortefeuille = false;\r\n            this.listePortefeuillesDropDown = null;\r\n            this.tousPortfeuillesSelectionnes = this.aTousPortefeuillesCoches();\r\n        }\r\n\r\n        /**\r\n         * Annuler le choix du portefeuille\r\n         */\r\n        public annulerChoixPortefeuille(): void {\r\n            //recharge l'ancien portefeuille\r\n            this.restaurerPoretefeuille();\r\n\r\n            this.ouvertureVoletChoixPortefeuille = false;\r\n            this.eventService.chargerListePortefeilleDropDown();\r\n            this.finInit = true;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param indexAgent\r\n         */\r\n        private selectionnerListe(indexAgent?: number): Modeles.Application.IPortefeuille[] {\r\n            return (indexAgent !== null &&\r\n                indexAgent !== undefined) ?\r\n                this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent :\r\n                this.listePortefeuilles;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param indexAgent\r\n         * @param estSuiviPar\r\n         */\r\n        public aPortefeuillesNonCoches(indexAgent?: number, estSuiviPar?: boolean): boolean {\r\n            if (estSuiviPar === undefined) {\r\n                return (_.filter(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>\r\n                    item.estAffiche === false || item.estAffiche === undefined\r\n                ).length > 0);\r\n            } else if (estSuiviPar) {\r\n                // return (_.where(this.selectionnerListe(indexAgent), { \"estAffiche\": false, \"id\": 0 }).length > 0);\r\n                return (_.where(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>\r\n                    item.id <= Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && !item.estAffiche\r\n                ).length > 0);\r\n            } else {\r\n                //return (_.filter(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>\r\n                //    item.id > 0 && !item.estAffiche\r\n                //).length > 0);\r\n                return (_.filter(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>\r\n                    item.id > Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && !item.estAffiche\r\n                ).length > 0);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param indexAgent\r\n         * @param estSuiviPar\r\n         */\r\n        public aPortefeuilleCoche(indexAgent?: number, estSuiviPar?: boolean): boolean {\r\n            if (estSuiviPar === undefined) {\r\n                return (_.where(this.selectionnerListe(indexAgent), { \"estAffiche\": true }).length > 0);\r\n            } else if (estSuiviPar) {\r\n                // return (_.where(this.selectionnerListe(indexAgent), { \"estAffiche\": true, \"id\": 0 }).length > 0);\r\n                return (_.where(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>\r\n                    item.id <= Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && item.estAffiche\r\n                ).length > 0);\r\n            } else {\r\n                //return (_.filter(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>\r\n                //    item.id > 0 && item.estAffiche\r\n                //).length > 0);\r\n                return (_.filter(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>\r\n                    item.id > Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && item.estAffiche\r\n                ).length > 0);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param indexAgent\r\n         * @param estSuiviPar\r\n         */\r\n        public aTousPortefeuillesCoches(indexAgent?: number, estSuiviPar?: boolean): boolean {\r\n            if (estSuiviPar === undefined) {\r\n                return (_.where(this.selectionnerListe(indexAgent), { \"estAffiche\": false }).length === 0);\r\n            } else if (estSuiviPar) {\r\n                //return (_.filter(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>\r\n                //    item.id === 0 && !item.estAffiche\r\n                //).length === 0);\r\n                return (_.filter(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>\r\n                    item.id <= Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && !item.estAffiche\r\n                ).length === 0);\r\n            } else {\r\n                //return (_.filter(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>\r\n                //    item.id > 0 && !item.estAffiche\r\n                //).length === 0);\r\n                return (_.filter(this.selectionnerListe(indexAgent), (item: Modeles.Application.IPortefeuille) =>\r\n                    item.id > Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && !item.estAffiche\r\n                ).length === 0);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Appelé lorsqu'on actionne une touche et que la case à cocher globale (3 états) a le focus.\r\n         * @param $event\r\n         * @param indexAgent\r\n         */\r\n        public keyDownTroisEtat($event: KeyboardEvent, indexAgent?: number) {\r\n            if ($event.keyCode === MyWay.UI.Constants.CLAVIER_KEYCODE.ESPACE) {\r\n                this.forceMultiSelection(undefined, indexAgent);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Appelé lorsqu'on clique sur la case à cocher globale (3 états).\r\n         * @param $event\r\n         * @param indexAgent\r\n         */\r\n        public forceMultiSelection($event?: ng.IAngularEvent, indexAgent?: number, estSuiviPar?: boolean): void {\r\n            let target: boolean;\r\n            if (this.setIndetermine(indexAgent, estSuiviPar)) {\r\n                target = false;\r\n            }\r\n            if (!this.aPortefeuilleCoche(indexAgent, estSuiviPar)) {\r\n                target = true;\r\n            }\r\n            if (indexAgent !== null &&\r\n                indexAgent !== undefined) {\r\n                angular.forEach(this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent,\r\n                    (item: Modeles.Application.IPortefeuille) => {\r\n                        if (estSuiviPar === undefined) {\r\n                            item.estAffiche = target;\r\n                        } else if (estSuiviPar) {\r\n                            // if (item.id === 0) { item.estAffiche = target; }\r\n                            // if (item.id > 0 && target) { item.estAffiche = !target; }\r\n                            if (item.id <= Constantes.Application.ID_PORTEFEUILLE_MAX_SPC) { item.estAffiche = target; }\r\n                            if (item.id > Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && target) { item.estAffiche = !target; }\r\n                        } else {\r\n                            //if (item.id > 0) { item.estAffiche = target; }\r\n                            //if (item.id === 0 && target) { item.estAffiche = !target; }\r\n                            if (item.id > Constantes.Application.ID_PORTEFEUILLE_MAX_SPC) { item.estAffiche = target; }\r\n                            if (item.id <= Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && target) { item.estAffiche = !target; }\r\n                        }\r\n                    });\r\n                this.listePortefeuillesDropDown[indexAgent].estAffiche = target;\r\n            } else {\r\n                angular.forEach(this.listePortefeuilles, (item: Modeles.Application.IPortefeuille) => {\r\n                    item.estAffiche = target;\r\n                });\r\n                angular.forEach(this.listePortefeuillesDropDown, (item: Modeles.Application.IAgent) => {\r\n                    item.estAffiche = target;\r\n                });\r\n            }\r\n            if ($event !== undefined) {\r\n                $event.preventDefault();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public getLabelTroisEtats(indexAgent?: number, estSuiviPar?: boolean): string {\r\n            return this.aPortefeuilleCoche(indexAgent, estSuiviPar) ?\r\n                Constantes.Application.TXT_DESELECTIONNER_TOUT :\r\n                Constantes.Application.TXT_SELECTIONNER_TOUT;\r\n        }\r\n\r\n        /**\r\n         * Permet de retourner le nom et l'ID du portefeuille\r\n         * @param indexPortfeuille position dans la liste de l'agent du portfeuille\r\n         * @param indexAgent position dans la liste d'agent\r\n         * @return {string}\r\n         */\r\n        public getLibelleEtIdPortefeuille(indexPortfeuille: number, indexAgent: number): string {\r\n            if (this.listePortefeuillesDropDown &&\r\n                this.listePortefeuillesDropDown.length > 0 &&\r\n                this.listePortefeuillesDropDown[indexAgent] &&\r\n                this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent &&\r\n                this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent.length > 0 &&\r\n                this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille]) {\r\n                if (this.getEstPortefeuille(indexPortfeuille, indexAgent)) {\r\n                    return this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].libelle + \" - \" +\r\n                        this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].id;\r\n                } else {\r\n                    return this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].libelle;\r\n                }\r\n            } else {\r\n                return \"\";\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Permet de vérifier si on est sur un portefeuille : id <> 0\r\n         * @param indexPortfeuille\r\n         * @param indexAgent\r\n         * @return {boolean}\r\n         */\r\n        public getEstPortefeuille(indexPortfeuille: number, indexAgent: number): boolean {\r\n            if (this.listePortefeuillesDropDown &&\r\n                this.listePortefeuillesDropDown.length > 0 &&\r\n                this.listePortefeuillesDropDown[indexAgent] &&\r\n                this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent &&\r\n                this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent.length > 0 &&\r\n                this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille]) {\r\n                return this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].id > Constantes.Application.ID_PORTEFEUILLE_MAX_SPC - 1;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Permet de vérifier si on est sur un suivi par complémenataire : id = 0\r\n         * @param indexPortfeuille\r\n         * @param indexAgent\r\n         * @return {boolean}\r\n         */\r\n        public getEstSuiviParComplementaire(indexPortfeuille: number, indexAgent: number): boolean {\r\n            if (this.listePortefeuillesDropDown &&\r\n                this.listePortefeuillesDropDown.length > 0 &&\r\n                this.listePortefeuillesDropDown[indexAgent] &&\r\n                this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent &&\r\n                this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent.length > 0 &&\r\n                this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille]) {\r\n                return this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent[indexPortfeuille].id < Constantes.Application.ID_PORTEFEUILLE_MAX_SPC;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Permet de retourner le nom d'un agent\r\n         * @param {number} index position dans la liste d'agent\r\n         * @return {string} Nom de l'agent\r\n         */\r\n        public getLibelleAgent(index: number): string {\r\n            if (this.listePortefeuillesDropDown &&\r\n                this.listePortefeuillesDropDown.length > 0 &&\r\n                this.listePortefeuillesDropDown[index]) {\r\n                return this.listePortefeuillesDropDown[index].nomPrenonAgent;\r\n            } else {\r\n                return \"\";\r\n            }\r\n        }\r\n\r\n        /**\r\n         * obtenir le texte affiché sur le bouton du choix portfeuille\r\n         */\r\n        public getTxtChoixPortefeuille(): string {\r\n            if (this.listePortefeuilles &&\r\n                this.listePortefeuillesDropDown) {\r\n                let nbPortefeuillesSelectionne: number =\r\n                    _.where(\r\n                        this.portefeuilleService.regrouperToutPortfeuille(this.listePortefeuillesDropDown),\r\n                        { \"estAffiche\": true }).length;\r\n                return `${Constantes.Application.TXT_CHOIX_PORTEFEUILLE} ` +\r\n                    `(${nbPortefeuillesSelectionne}/${this.listePortefeuilles.length})`;\r\n            } else {\r\n                return `${Constantes.Application.TXT_CHOIX_PORTEFEUILLE} (???/???)`;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode pour deselectionner les choix portefeuille si selection de suivi par complémentaire ou deselectionner les choix suivi par complémentaire si selection de portefeuille\r\n         * @param indexPortfeuille\r\n         * @param indexAgent\r\n         */\r\n        public majSelection(indexPortfeuille: number, indexAgent: number): void {\r\n            if (this.getEstSuiviParComplementaire(indexPortfeuille, indexAgent)) {\r\n                this.deselectChoixPortefeuille();\r\n                this.deselectAutresChoixSuiviParComplementaire(indexPortfeuille, indexAgent);\r\n            } else {\r\n                this.deselectChoixSuiviParComplementaire();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Methode pour deselectionner les autres choix de domaine de suivi par complémentaire car un seul choix est possible\r\n         * @param indexPortfeuille\r\n         * @param indexAgent\r\n         */\r\n        private deselectAutresChoixSuiviParComplementaire(indexPortfeuille: number, indexAgent: number): void {\r\n            let index = 0;\r\n            this.listePortefeuillesDropDown[indexAgent].listPortefeuilleParAgent.forEach((ptf: Modeles.Application.IPortefeuille) => {\r\n                if (index !== indexPortfeuille && (ptf.id < Constantes.Application.ID_PORTEFEUILLE_MAX_SPC)) {\r\n                    ptf.estAffiche = false;\r\n                }\r\n                index++;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Deselectionner tous les choix typés portefeuille réél\r\n         */\r\n        private deselectChoixPortefeuille(): void {\r\n            this.listePortefeuillesDropDown.forEach((agent: Modeles.Application.IAgent) => {\r\n                agent.listPortefeuilleParAgent.forEach((ptf: Modeles.Application.IPortefeuille) => {\r\n                    if (ptf.id > Constantes.Application.ID_PORTEFEUILLE_MAX_SPC - 1) {\r\n                        // console.log(ptf);\r\n                        ptf.estAffiche = false;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Deselectionner tous les choix typés Suivi par complémentaire SPC\r\n         */\r\n        private deselectChoixSuiviParComplementaire(): void {\r\n            this.listePortefeuillesDropDown.forEach((agent: Modeles.Application.IAgent) => {\r\n                agent.listPortefeuilleParAgent.forEach((ptf: Modeles.Application.IPortefeuille) => {\r\n                    if (ptf.id < Constantes.Application.ID_PORTEFEUILLE_MAX_SPC) {\r\n                        ptf.estAffiche = false;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Appelé lorsqu'on ouvre/ferme le dropdown de choix de portefeuille\r\n         */\r\n        public ouvrirFermerChoixPortefeuille() {\r\n            this.sauvegarderPoretefeuille();\r\n        }\r\n\r\n        /**\r\n         *  Sauvegarder le Poretefeuille\r\n         */\r\n        private sauvegarderPoretefeuille(): void {\r\n            this.sauveListePortefeuille = [];\r\n            this.listePortefeuilles.forEach((item: Modeles.Application.IPortefeuille) => {\r\n                this.sauveListePortefeuille.push(angular.copy(item));\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Restaurer Poretefeuille via la sauvegarde ou sans \r\n         */\r\n        private restaurerPoretefeuille(): void {\r\n            if (this.sauveListePortefeuille) {\r\n                // vide la liste de portefeuille\r\n                this.listePortefeuilles.length = 0;\r\n                // Recharge la liste de portefeuille avec la sauvegarde\r\n                this.sauveListePortefeuille.forEach((item: Modeles.Application.IPortefeuille) => {\r\n                    this.listePortefeuilles.push(item);\r\n                });\r\n                this.viderSauvagardePortefeuille();\r\n            } else {\r\n                // Si pas de sauvegarde cela veux dire que c'est la première fois que le \r\n                // choix portefeuille est ouvert. Donc on réinitalise la liste sans aucune selection.\r\n                this.listePortefeuilles.forEach((item: Modeles.Application.IPortefeuille) => {\r\n                    item.estAffiche = false;\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Vider sauvagarde Portefeuille\r\n         */\r\n        private viderSauvagardePortefeuille(): void {\r\n            // Reinitalise la liste de la sauvegarde des portefeuille\r\n            this.sauveListePortefeuille = null;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param indexAgent\r\n         */\r\n        public setIndetermine(indexAgent?: number, estSuiviPar?: boolean): boolean {\r\n            return (this.aPortefeuilleCoche(indexAgent, estSuiviPar) && this.aPortefeuillesNonCoches(indexAgent, estSuiviPar));\r\n        }\r\n\r\n\r\n        /**\r\n         * \r\n         */\r\n        public validerChoixPortefeuille(): ng.IPromise<void> {\r\n            this.viderSauvagardePortefeuille();\r\n            if (this.sauveListePortefeuille) {\r\n                // vide la liste sauvegardé des portefeuilles\r\n                this.sauveListePortefeuille.length = 0;\r\n                this.sauveListePortefeuille = null;\r\n            }\r\n            this.listePortefeuilles = this.portefeuilleService.regrouperToutPortfeuille(this.listePortefeuillesDropDown);\r\n            return this.portefeuilleService.setListePortfeuillesVisu(this.listePortefeuilles).then(() => {\r\n                this.ouvertureVoletChoixPortefeuille = false;\r\n                // on vide la liste des relations afin de la reconstruire\r\n                this.listeClientsService.razRelations();\r\n                if (this.$location.path() === Constantes.Url.CLIENTS) {\r\n                    this.listeClientsService.initialiserEstLimiteClientsAtteinte(null);\r\n                    // Si on est sur la page de liste client/relations, on doit réinitialiser\r\n                    // la liste sans tenir compte du forçage en place car la liste de portefeuille peut avoir changé\r\n                    // SPC si on passe d'une visu \r\n                    let typeForcageAAppliquer = this.portefeuilleService.aPortefeuillesReelAffiche() ?\r\n                        Enum.PageClients.TYPE_FORCAGE.TOUT : this.portefeuilleService.aPortefeuilleExpertAffiche() ?\r\n                            Enum.PageClients.TYPE_FORCAGE.CLIENTS : undefined;\r\n                    this.portefeuilleService.setTypeForcage(typeForcageAAppliquer);\r\n                    return this.eventService.initialiserListeRelationEtClient(typeForcageAAppliquer);\r\n                } else {\r\n                    return this.eventService.initialiserVueGlobale();\r\n                }\r\n            });\r\n        }\r\n\r\n        public nbPortefeuilleReel(): number {\r\n            return this.portefeuilleService.nbPortefeuilleReel();\r\n        }\r\n\r\n        public aSuiviParComplementaire(): boolean {\r\n            return this.portefeuilleService.aSuiviParComplementaire();\r\n        }\r\n\r\n        public aPortefeuilleReel(): boolean {\r\n            return this.portefeuilleService.aPortefeuilleReel();\r\n        }\r\n\r\n        public aPortefeuille(): boolean {\r\n            return this.portefeuilleService.aPortefeuille();\r\n        }\r\n\r\n        /**\r\n         * il y a-t-il une designation dans le contexte ?\r\n         */\r\n        public estDesignation(): boolean {\r\n            return this.contexteService.getDesignation() !== \"\";\r\n        }\r\n\r\n        /**\r\n         * Stop la propagation d'un evenement (emit)\r\n         * @param $event\r\n         */\r\n        public stopPropagation($event: ng.IAngularEvent): void {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param indexAgent\r\n         */\r\n        public isCheckedGlobal(indexAgent?: number): boolean {\r\n            return !this.aPortefeuillesNonCoches(indexAgent) && !this.setIndetermine(indexAgent);\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfChoixPortefeuilleControleur\", PfChoixPortefeuilleControleur);\r\n} ","/**\r\n * Directive pf-choix-portefeuille\r\n * @module portefeuille.Directives\r\n * @author S0005355 (Eric ALBERT)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfChoixPortefeuille(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-choix-portefeuille/pf-choix-portefeuille-vue.html\",\r\n            controller: \"PfChoixPortefeuilleControleur\",\r\n            controllerAs: \"PfChoixPortefeuilleCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                listePortefeuillesDropDown: \"=\",\r\n                listePortefeuilles: \"=\",\r\n                ouvertureVoletChoixPortefeuille: \"=\",\r\n                estVueGlobalConsolide: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfChoixPortefeuille\", mwPfChoixPortefeuille);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-diagramme-colonne\r\n * @module portefeuille.Controleurs\r\n * @author S0005410 (Eric Jacquot)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfDiagrammeColonneControleur {\r\n        public static CLASS_NAME = \"PfDiagrammeColonneControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfDiagrammeColonneControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n        ];\r\n\r\n        // Variables d'entrées\r\n        public svgId: string;\r\n        public config: Array<Modeles.Application.IDataIndicateurColonne>;\r\n        public typeDiagramme: number;\r\n\r\n        // Variables utiles\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n        ) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        public initialiser(): void {\r\n            PfDiagrammeColonneControleur.logger.info(\">>> Appel de la méthode : PfDiagrammeColonneControleur.initialiser <<<\");\r\n            if (!this.typeDiagramme) {\r\n                this.typeDiagramme = 0;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfDiagrammeColonneControleur\", PfDiagrammeColonneControleur);\r\n} ","/**\r\n * Directive pf-diagramme-colonne\r\n * @module portefeuille.Directives\r\n * @author S0005410 (Eric Jacquot)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfDiagrammeColonne(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-diagramme-colonne/pf-diagramme-colonne-vue.html\",\r\n            controller: \"PfDiagrammeColonneControleur\",\r\n            controllerAs: \"pfDiagrammeColonneCtrl\",\r\n            bindToController: true,\r\n            transclude: true,\r\n            scope: {\r\n                svgId: \"=\",\r\n                config: \"=\",\r\n                typeDiagramme: \"=?\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfDiagrammeColonne\", mwPfDiagrammeColonne);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-detail-filtre\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfDetailFiltreControleur {\r\n        public static CLASS_NAME = \"PfDetailFiltreControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfDetailFiltreControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n            Constantes.Inject.Services.eventService,\r\n            Constantes.Inject.Services.begacliService\r\n        ];\r\n\r\n        // Variables d'entrée\r\n        public listeFiltres: Array<Modeles.Application.IFiltre>;\r\n\r\n        // Variables utiles\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private eventService: Services.Application.IEventService,\r\n            private begacliService: Services.Application.IBegacliService) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfDetailFiltreControleur.logger.info(\">>> Appel de la méthode : PfDetailFiltreControleur.initialiser <<<\");\r\n        }\r\n\r\n\r\n        public supprimerFiltres(): void {\r\n            this.begacliService.setCasesDecochees();\r\n            this.eventService.supprimerTousLesFiltresClientsControleur();\r\n        }\r\n\r\n        public getTxtFiltre(filtre: Modeles.Application.IFiltre): string {\r\n            let txt: string;\r\n            switch (filtre.indicateur.indicateur.typeIndicateur) {\r\n                case Enum.Indicateur.TYPE.TEXTE:\r\n                    txt = this.getTxtListeValeurs(filtre);\r\n                    break;\r\n                case Enum.Indicateur.TYPE.BEGACLI:\r\n                    txt = this.begacliService.getFiltreBegacliTexte(filtre);\r\n                    break;\r\n                default:\r\n                    switch (filtre.comparateur) {\r\n                        case Enum.Filtre.COMPARATEUR.SUPERIEUR:\r\n                            txt = this.getTxtValUnique(filtre);\r\n                            break;\r\n                        case Enum.Filtre.COMPARATEUR.INFERIEUR:\r\n                            txt = this.getTxtValUnique(filtre);\r\n                            break;\r\n                        case Enum.Filtre.COMPARATEUR.EGALE:\r\n                            txt = this.getTxtValUnique(filtre);\r\n                            break;\r\n                        case Enum.Filtre.COMPARATEUR.ENTRE:\r\n                            txt = this.getTxtValMultiple(filtre);\r\n                            break;\r\n                        case Enum.Filtre.COMPARATEUR.NC:\r\n                            txt = this.getTxtValNC(filtre);\r\n                            break;\r\n                        case Enum.Filtre.COMPARATEUR.ECHUE:\r\n                            txt = this.getTxtValDerniereRevue(filtre);\r\n                            break;\r\n                        case Enum.Filtre.COMPARATEUR.ENCOURS:\r\n                            txt = this.getTxtValDerniereRevue(filtre);\r\n                            break;\r\n                        case Enum.Filtre.COMPARATEUR.NONREALISEE:\r\n                            txt = this.getTxtValDerniereRevue(filtre);\r\n                            break;\r\n\r\n                        default:\r\n                            txt = \"\";\r\n                    }\r\n            }\r\n            return txt;\r\n        }\r\n\r\n        private getTxtListeValeurs(filtre: Modeles.Application.IFiltre): string {\r\n            let intitule = filtre.indicateur.indicateur.intitule;\r\n            // regardderici ... le changement de nom , pas cool si sans contrat choisi en plus....\r\n            //if (filtre.indicateur.indicateur.code === Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TEXTE.toString()) {\r\n            //    intitule = \"Avec contrat\";\r\n            //}\r\n            // console.log(\"--> filtre.indicateur.indicateur.code : \", filtre.indicateur.indicateur.code);\r\n            let listeVal: string[] = _.pluck(_.where(filtre.indicateur.listeValeurs, { \"actif\": true }), \"libelle\");\r\n            return `${intitule} = [${listeVal.join(\", \")}]`;\r\n        }\r\n\r\n        public getDevise(code: string): string {\r\n            return _.indexOf(Constantes.Indicateur.INDICATEUR_EN_EURO, code) !== -1 ? \"€\" : \"k€\";\r\n        }\r\n\r\n        private getTxtValUnique(filtre: Modeles.Application.IFiltre): string {\r\n            return this.getTexteValeurs(filtre, false);\r\n        }\r\n\r\n        private getTxtValMultiple(filtre: Modeles.Application.IFiltre): string {\r\n            return this.getTexteValeurs(filtre, true);\r\n        }\r\n\r\n        private getTexteValeurs(filtre: Modeles.Application.IFiltre, multiple: boolean): string {\r\n            let uniteMin: string = \"\";\r\n            let uniteMax: string = \"\";\r\n            let valeurNumMin: number = multiple ? filtre.valeurMultiple1 : filtre.valeurUnique;\r\n            let valeurMin: string = valeurNumMin.toString();\r\n            let valeurNumMax: number = multiple ? filtre.valeurMultiple2 : null;\r\n            let valeurMax: string = multiple ? valeurNumMax.toString() : null;\r\n            let indicateur: Modeles.Application.IIndicateurType = filtre.indicateur.indicateur; \r\n\r\n            if (indicateur.typeIndicateur === Enum.Indicateur.TYPE.MONTANT) {\r\n                valeurMin = Services.Utils.DataUtils.formatMontant(valeurNumMin);\r\n                valeurMax = valeurNumMax ? Services.Utils.DataUtils.formatMontant(valeurNumMax) : null;\r\n                uniteMin = ` ${this.getDevise(indicateur.code)}`;\r\n                uniteMax = uniteMin;\r\n            }\r\n            if (indicateur.typeIndicateur === Enum.Indicateur.TYPE.POURCENT) {\r\n                valeurMin = Services.Utils.DataUtils.formatPourcent(valeurNumMin);\r\n                valeurMax = valeurNumMax ? Services.Utils.DataUtils.formatPourcent(valeurNumMax) : null;\r\n                uniteMin = \" %\";\r\n                uniteMax = uniteMin;\r\n            }\r\n            if (indicateur.typeIndicateur === Enum.Indicateur.TYPE.DATE) {\r\n                    valeurMin = moment(valeurMin).format(\"DD/MM/YYYY\");\r\n                    valeurMax = valeurNumMax ? moment(valeurMax).format(\"DD/MM/YYYY\") : null;\r\n                    uniteMin = \"\";\r\n                    uniteMax = uniteMin;\r\n            }\r\n            return `${indicateur.intitule} ${filtre.comparateur.toString()} ${valeurMin}${uniteMin}` +\r\n                (valeurMax ? ` et ${valeurMax}${uniteMax}` : ``);\r\n        }\r\n\r\n        /**\r\n         * Renvoi un text pour les valeurs NC\r\n         * @param filtre pour fournir l'intitulé\r\n         */\r\n        private getTxtValNC(filtre: Modeles.Application.IFiltre): string {\r\n            return `${filtre.indicateur.indicateur.intitule} ${filtre.comparateur.toString()}`;\r\n        }\r\n\r\n        /**\r\n         * Renvoi un text pour indicateur derniere revue : les valeurs Echue, En cours, Non réalisé\r\n         * @param filtre pour fournir l'intitulé\r\n         */\r\n        private getTxtValDerniereRevue(filtre: Modeles.Application.IFiltre): string {\r\n            return `${filtre.indicateur.indicateur.intitule} ${filtre.comparateur.toString()}`;\r\n        }\r\n\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(PfDetailFiltreControleur.CLASS_NAME, PfDetailFiltreControleur);\r\n} ","/**\r\n * Directive pf-detail-filtre\r\n * @module portefeuille.Directives\r\n * @author S0005354 (JM FOLLETTI)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfDetailFiltre(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-detail-filtre/pf-detail-filtre-vue.html\",\r\n            controller: \"PfDetailFiltreControleur\",\r\n            controllerAs: \"pfDetailFiltreCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                listeFiltres: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfDetailFiltre\", mwPfDetailFiltre);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-diagramme-grande-barre\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    export interface IConfigDiagrammeGrandeBarre {\r\n        intitule: string;\r\n        couleur: COULEUR_GRANDE_BARRE;\r\n        valeur: number;\r\n        listeValeurs: Array<number>;\r\n    }\r\n\r\n    export enum COULEUR_GRANDE_BARRE {\r\n        VIOLET_NIV1 = <any>\"#D955AC\",\r\n        VIOLET_NIV2 = <any>\"#B84F6B\",\r\n        VIOLET_NIV3 = <any>\"#66334A\"\r\n    };\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfDiagrammeGrandeBarreControleur {\r\n        public static CLASS_NAME = \"PfDiagrammeGrandeBarreControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfDiagrammeGrandeBarreControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n            Constantes.Inject.Angular.$element,\r\n        ];\r\n\r\n        // Variables d'entrées\r\n        public config: IConfigDiagrammeGrandeBarre;\r\n        public listeConfig: Array<IConfigDiagrammeGrandeBarre>;\r\n\r\n        // Variables utiles\r\n        private valeurMax: number;\r\n        public pourcentage: number;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $element: ng.IAugmentedJQuery) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfDiagrammeGrandeBarreControleur.logger.info(\">>> Appel de la méthode : PfDiagrammeGrandeBarreControleur.initialiser <<<\");\r\n\r\n            this.valeurMax = this.recupererValeurMax();\r\n            this.pourcentage = this.calculerRapportValeur();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de récupérer la plus grande valeur\r\n         * @returns {void}\r\n         */\r\n        private recupererValeurMax(): number {\r\n            return Math.max(...<Array<number>>_.pluck<IConfigDiagrammeGrandeBarre>(this.listeConfig, \"valeur\"));\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de calculer le rapport de la valeur\r\n         * @returns {void}\r\n         */\r\n        private calculerRapportValeur(): number {\r\n            return (this.config.valeur * 80) / this.valeurMax;\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfDiagrammeGrandeBarreControleur\", PfDiagrammeGrandeBarreControleur);\r\n} ","/**\r\n * Directive pf-diagramme-grande-barre\r\n * @module portefeuille.Directives\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfDiagrammeGrandeBarre(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-diagramme-grande-barre/pf-diagramme-grande-barre-vue.html\",\r\n            controller: \"PfDiagrammeGrandeBarreControleur\",\r\n            controllerAs: \"pfDiagrammeGrandeBarreCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                config: \"=\",\r\n                listeConfig: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfDiagrammeGrandeBarre\", mwPfDiagrammeGrandeBarre);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-diagramme-donut\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfDiagrammeDonutControleur {\r\n        public static CLASS_NAME = \"PfDiagrammeDonutControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfDiagrammeDonutControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n            Constantes.Inject.Angular.$element,\r\n            Constantes.Inject.LibrairieD3.creationDonutService,\r\n            Constantes.Inject.Services.eventService,\r\n            Constantes.Inject.Services.statService,\r\n            Constantes.Inject.Angular.$scope\r\n        ];\r\n\r\n        // Variables d'entrées\r\n        public svgId: string;\r\n        public config: Services.LibrairieD3.IConfigDonutD3;\r\n        public listeDonuts: Array<string> = [Constantes.Application.DONUT_PME_ESI, Constantes.Application.DONUT_PRO];\r\n\r\n        // Variables utiles\r\n        public listeConfigPuceLegende: Array<Portefeuille.Controleurs.IConfigPuceLegende>;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $element: ng.IAugmentedJQuery,\r\n            private creationDonutService: Services.LibrairieD3.ICreationDonutService,\r\n            private eventService: Services.Application.IEventService,\r\n            private statService: Services.Application.IStatsService,\r\n            private scope: ng.IScope\r\n        ) {\r\n            this.eventService.setPfDiagrammeDonutControleur(this);\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        public initialiser(): void {\r\n            PfDiagrammeDonutControleur.logger.info(\">>> Appel de la méthode : PfDiagrammeDonutControleur.initialiser <<<\");\r\n            \r\n            this.$element.ready(() => {\r\n                let existeDonneePertinente: number = -1; //-1 indique non trouvée\r\n\r\n                //On cherche une donnée > 0; càd pertinente pour afficher un donut à pourcentages\r\n                existeDonneePertinente = _.findIndex(this.config.listeDonnees, (donneeLue: Services.LibrairieD3.IDonneeFluxD3) => {\r\n                    if (donneeLue && donneeLue.pourcentage > 0) {\r\n                        return true;\r\n                    }\r\n                });\r\n                // Gestion du cas avec aucun client \r\n                if (this.config.nombreClients === \"0\") {\r\n                    existeDonneePertinente = -1;\r\n                }\r\n\r\n                if (existeDonneePertinente === -1) {\r\n                    //Aucune donnée pertinente trouvée => affichage d'un donut Gris sans chiffre, ni légende\r\n                    let configDonutGris: Services.LibrairieD3.IConfigDonutD3 = <Services.LibrairieD3.IConfigDonutD3>{\r\n                        titre: this.config.titre,\r\n                        degrade: Services.LibrairieD3.DEGRADE_DONUT.GRIS,\r\n                        nombreClients: this.config.nombreClients,\r\n                        listeDonnees: []\r\n                    };\r\n\r\n                    configDonutGris.listeDonnees.push(<Services.LibrairieD3.IDonneeFluxD3>{\r\n                        nom: \"Donut Gris\",\r\n                        pourcentage: Number.MAX_VALUE\r\n                    });\r\n\r\n                    this.creationDonutService.creerDonut(configDonutGris, this.svgId);\r\n\r\n                    this.listeConfigPuceLegende = [];\r\n                } else {\r\n                    // Au moins un pourcentage est différent de 0, donc significatif => on affiche un donut coloré et la(les) légende(s) qui l'accompagne(nt)\r\n                    this.creationDonutService.creerDonut(this.config, this.svgId);\r\n\r\n                    if (this.config && this.config.listeDonnees) {\r\n                        this.listeConfigPuceLegende = [];\r\n\r\n                        let echelle = this.creationDonutService.getCouleurDegrade(this.config.degrade);\r\n\r\n                        _.forEach(this.config.listeDonnees, (donneeLue: Services.LibrairieD3.IDonneeFluxD3) => {\r\n                            let configPuceLegende: Portefeuille.Controleurs.IConfigPuceLegende = <Portefeuille.Controleurs.IConfigPuceLegende>{};\r\n\r\n                            configPuceLegende.intitule = donneeLue.nom;\r\n\r\n                            configPuceLegende.couleur = echelle(donneeLue.nom);\r\n                            configPuceLegende.affichagePuceLegendeActif = (donneeLue.pourcentage && donneeLue.pourcentage > 0) ? true : false;\r\n\r\n                            this.listeConfigPuceLegende.push(configPuceLegende);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                this.scope.$applyAsync();\r\n            });\r\n        }\r\n\r\n        public echangerDonuts(item: string, model: any, label: any, evt: any): void {\r\n            this.statService.getStatsRdvEtPortefeuille().then((statsRdvEtPortefeuille: Modeles.ApplicationStats.IRdvPtf) => {\r\n                if (statsRdvEtPortefeuille) {\r\n                    this.config = Services.Utils.ApplicationUtils.getConfigDonutSelonType(item, statsRdvEtPortefeuille);\r\n\r\n                    this.initialiser();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfDiagrammeDonutControleur\", PfDiagrammeDonutControleur);\r\n} ","/**\r\n * Directive pf-diagramme-donut\r\n * @module portefeuille.Directives\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfDiagrammeDonut(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-diagramme-donut/pf-diagramme-donut-vue.html\",\r\n            controller: \"PfDiagrammeDonutControleur\",\r\n            controllerAs: \"pfDiagrammeDonutCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                svgId: \"=\",\r\n                config: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfDiagrammeDonut\", mwPfDiagrammeDonut);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-diagramme-petite-barre\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    export interface IConfigDiagrammePetiteBarre {\r\n        intitule: string;\r\n        couleur: COULEUR_PETITE_BARRE;\r\n        valeur: number;\r\n        listeValeurs: Array<number>;\r\n    }\r\n\r\n    export enum COULEUR_PETITE_BARRE {\r\n        BLEU_NIV1 = <any>\"#76DDFB\",\r\n        BLEU_NIV2 = <any>\"#53A8E2\",\r\n        BLEU_NIV3 = <any>\"#CFE3F0\"\r\n    };\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfDiagrammePetiteBarreControleur {\r\n        public static CLASS_NAME = \"PfDiagrammePetiteBarreControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfDiagrammePetiteBarreControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [];\r\n\r\n        // Variables d'entrées\r\n        public config: IConfigDiagrammePetiteBarre;\r\n        public listeConfig: Array<IConfigDiagrammePetiteBarre>;\r\n\r\n        // Variables utiles\r\n        private valeurMax: number;\r\n        public pourcentage: number;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfDiagrammePetiteBarreControleur.logger.info(\">>> Appel de la méthode : PfDiagrammePetiteBarreControleur.initialiser <<<\");\r\n\r\n            this.valeurMax = this.recupererValeurMax();\r\n            this.pourcentage = this.calculerRapportValeur();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de récupérer la plus grande valeur\r\n         * @returns {void}\r\n         */\r\n        private recupererValeurMax(): number {\r\n            return Math.max(...<Array<number>>_.pluck<IConfigDiagrammePetiteBarre>(this.listeConfig, \"valeur\"));\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de calculer le rapport de la valeur\r\n         * @returns {void}\r\n         */\r\n        private calculerRapportValeur(): number {\r\n            return (this.config.valeur * 80) / this.valeurMax;\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfDiagrammePetiteBarreControleur\", PfDiagrammePetiteBarreControleur);\r\n} ","/**\r\n * Directive pf-diagramme-petite-barre\r\n * @module portefeuille.Directives\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfDiagrammePetiteBarre(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-diagramme-petite-barre/pf-diagramme-petite-barre-vue.html\",\r\n            controller: \"PfDiagrammePetiteBarreControleur\",\r\n            controllerAs: \"pfDiagrammePetiteBarreCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                config: \"=\",\r\n                listeConfig: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfDiagrammePetiteBarre\", mwPfDiagrammePetiteBarre);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-core-draggable\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    let loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfCoreDraggableControleur {\r\n        public static CLASS_NAME = \"PfCoreDraggableControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfCoreDraggableControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Angular.$element,\r\n            Constantes.Inject.Services.pfDragAndDropService\r\n        ];\r\n\r\n        // Variable d'entrée\r\n        public dragSettings: Modeles.Application.IDragSettings;\r\n\r\n        // Variables utiles\r\n        \r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $scope: any,\r\n            private $element: ng.IAugmentedJQuery,\r\n            private pfDragAndDropService: Services.Application.IPfDragAndDropService) {\r\n\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            this.dragSettings = this.$scope.dragSettings;\r\n            this.dragSettings.activerDrag = this.activerDrag;\r\n            this.dragSettings.desactiverDrag = this.desactiverDrag;\r\n\r\n            if (this.dragSettings.estActiver) {\r\n                this.activerDrag();\r\n            } else {\r\n                this.desactiverDrag();\r\n            }\r\n            \r\n            this.$element.bind(Constantes.DragAndDrop.EVENT_LISTENER_DRAGSTART, this.dragStart); // Gestion du dragstart\r\n            this.$element.bind(Constantes.DragAndDrop.EVENT_LISTENER_DRAGEND, this.dragEnd); // Gestion du dragend\r\n        }\r\n\r\n        /**\r\n         * Variable contenant la méthode permettant de gérer l'événement dragStart\r\n         * @param {JQueryEventObject} event\r\n         */\r\n        /* istanbul ignore next */\r\n        private dragStart = (event: JQueryEventObject) => {\r\n            if (this.dragSettings.dragStartBeforeEvent) {\r\n                this.dragSettings.dragStartBeforeEvent();\r\n            }\r\n\r\n            let listeDropTargetElements = document.getElementById(this.dragSettings.idHTMLElementConteneur).getElementsByClassName(Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ELEMENT);\r\n            _.forEach(listeDropTargetElements, (dropTargetElement: Element) => {\r\n                dropTargetElement.classList.add(Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ON_DRAG);\r\n            });\r\n\r\n            this.pfDragAndDropService.setDonnees(this.dragSettings.donneesATransmettre);\r\n        };\r\n\r\n        /**\r\n         * Variable contenant la méthode permettant de gérer l'événement dragEnd\r\n         * @param {JQueryEventObject} event\r\n         */\r\n        /* istanbul ignore next */\r\n        private dragEnd = (event: JQueryEventObject) => {\r\n            if (this.dragSettings.dragEndBeforeEvent) {\r\n                this.dragSettings.dragEndBeforeEvent();\r\n            }\r\n\r\n            let listeDropTargetElements = document.getElementById(this.dragSettings.idHTMLElementConteneur).getElementsByClassName(Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ELEMENT);\r\n            _.forEach(listeDropTargetElements, (dropTargetElement: Element) => {\r\n                dropTargetElement.classList.remove(Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ON_DRAG);\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Variable contenant la méthode permettant d'activer le drag\r\n         */\r\n        private activerDrag = () => {\r\n            this.dragSettings.estActiver = true;\r\n            this.$element.attr(Constantes.DragAndDrop.ATTRIBUT_DRAGGABLE, Constantes.DragAndDrop.STRING_VALUE_TRUE);\r\n        };\r\n\r\n        /**\r\n         * Variable contenant la méthode permettant de desactiver le drag\r\n         */\r\n        private desactiverDrag = () => {\r\n            this.dragSettings.estActiver = false; \r\n            this.$element.attr(Constantes.DragAndDrop.ATTRIBUT_DRAGGABLE, Constantes.DragAndDrop.STRING_VALUE_FALSE);\r\n        };\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(PfCoreDraggableControleur.CLASS_NAME, PfCoreDraggableControleur);\r\n} ","/**\r\n * Directive pf-core-draggable\r\n * @module portefeuille.Directives\r\n * @author S0078068 (Yannis VESSEREAU)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfCoreDraggable(): ng.IDirective {\r\n        return {\r\n            restrict: \"A\",\r\n            controller: \"PfCoreDraggableControleur\",\r\n            bindToController: true,\r\n            scope: {\r\n                dragSettings: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfCoreDraggable\", mwPfCoreDraggable);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-core-drop-target\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfCoreDropTargetControleur {\r\n        public static CLASS_NAME = \"PfCoreDropTargetControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfCoreDropTargetControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Angular.$element,\r\n            Constantes.Inject.Services.pfDragAndDropService\r\n        ];\r\n\r\n        // Variable d'entrée\r\n        public dropSettings: Modeles.Application.IDropSettings;\r\n\r\n        // Variables utiles\r\n\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $scope: any,\r\n            private $element: ng.IAugmentedJQuery,\r\n            private pfDragAndDropService: Services.Application.IPfDragAndDropService) {\r\n\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            this.dropSettings = this.$scope.dropSettings;\r\n            this.dropSettings.activerDragOver = this.activerDragOver;\r\n            this.dropSettings.desactiverDragOver = this.desactiverDragOver;\r\n\r\n            if (this.dropSettings.estActiver) {\r\n                this.activerDragOver();\r\n            } else {\r\n                this.desactiverDragOver();\r\n            }\r\n            \r\n            this.$element.bind(Constantes.DragAndDrop.EVENT_LISTENER_DROP, this.onDrop); // Gestion du drop\r\n            //this.$element.bind(\"dragenter\", this.onDragEnter); // Gestion du dragenter\r\n            //this.$element.bind(\"dragleave\", this.onDragLeave); // Gestion du dragleave\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de gérer l'événement dragover\r\n         * @param {JQueryEventObject} event\r\n         */\r\n        /* istanbul ignore next */\r\n        private onDragOver = (event: JQueryEventObject) => {\r\n            event.preventDefault();\r\n        };\r\n\r\n        /**\r\n         * Méthode permettant de gérer l'événement drop\r\n         * @param {JQueryEventObject} event\r\n         */\r\n        /* istanbul ignore next */\r\n        private onDrop = (event: JQueryEventObject) => {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            \r\n            let listeDropTargetElements = document.\r\n                getElementById(this.dropSettings.idHTMLElementConteneur).\r\n                getElementsByClassName(Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ELEMENT);\r\n            _.forEach(listeDropTargetElements, (dropTargetElement: Element) => {\r\n                dropTargetElement.classList.remove(Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ON_DRAG);\r\n            });\r\n\r\n            let donnees = this.pfDragAndDropService.getDonnees();\r\n            this.dropSettings.dropEventAction(donnees);\r\n        };\r\n\r\n        /**\r\n         * Méthode permettant de gérer l'événement dragenter\r\n         * @param {JQueryEventObject} event\r\n         */\r\n        //private onDragEnter = (event: JQueryEventObject) => {\r\n        //    event.preventDefault();\r\n        //};\r\n\r\n        /**\r\n         * Méthode permettant de gérer l'événement dragleave\r\n         * @param {JQueryEventObject} event\r\n         */\r\n        //private onDragLeave = (event: JQueryEventObject) => {\r\n        //    event.preventDefault();\r\n        //};\r\n\r\n        /**\r\n         * Variable contenant la méthode permettant d'activer le dragover\r\n         */\r\n        private activerDragOver = () => {\r\n            this.dropSettings.estActiver = true;\r\n            this.$element.bind(Constantes.DragAndDrop.EVENT_LISTENER_DRAGOVER, this.onDragOver);\r\n            this.$element.addClass(Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ELEMENT);\r\n        };\r\n\r\n        /**\r\n         * Variable contenant la méthode permettant de desactiver le dragover\r\n         */\r\n        private desactiverDragOver = () => {\r\n            this.dropSettings.estActiver = false;\r\n            this.$element.unbind(Constantes.DragAndDrop.EVENT_LISTENER_DRAGOVER, this.onDragOver);\r\n            this.$element.removeClass(Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ELEMENT);\r\n            this.$element.removeClass(Constantes.DragAndDrop.HTML_CLASS_NAME_PF_DROP_TARGET_ON_DRAG);\r\n        };\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(PfCoreDropTargetControleur.CLASS_NAME, PfCoreDropTargetControleur);\r\n} ","/**\r\n * Directive pf-core-drop-target\r\n * @module portefeuille.Directives\r\n * @author S0078068 (Yannis VESSEREAU)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfCoreDropTarget(): ng.IDirective {\r\n        return {\r\n            restrict: \"A\",\r\n            controller: \"PfCoreDropTargetControleur\",\r\n            bindToController: true,\r\n            scope: {\r\n                dropSettings: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfCoreDropTarget\", mwPfCoreDropTarget);\r\n}","module Portefeuille.Constantes {\r\n    \"use strict\";\r\n\r\n    export module DragAndDrop {\r\n        export var EVENT_LISTENER_DRAGSTART: string = \"dragstart\";\r\n        export var EVENT_LISTENER_DRAGEND: string = \"dragend\";\r\n        export var EVENT_LISTENER_DRAGOVER: string = \"dragover\";\r\n        export var EVENT_LISTENER_DROP: string = \"drop\";\r\n        export var ATTRIBUT_DRAGGABLE: string = \"draggable\";\r\n        export var STRING_VALUE_TRUE: string = \"true\";\r\n        export var STRING_VALUE_FALSE: string = \"false\";\r\n        export var HTML_CLASS_NAME_PF_DROP_TARGET_ELEMENT: string = \"pf-drop-target-element\";\r\n        export var HTML_CLASS_NAME_PF_DROP_TARGET_ON_DRAG: string = \"pf-drop-target-on-drag\";\r\n    }\r\n}","/**\r\n * Ensemble d'interfaces de modèles drag and drop\r\n * @module Portefeuille.Modeles.Application\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Modeles.Application {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Modèle des paramètres d'élément glissable (draggable)\r\n     */\r\n    export interface IDragSettings {\r\n        donneesATransmettre: any;\r\n        idHTMLElementConteneur: string;\r\n        estActiver: boolean;\r\n        activerDrag?: () => void;\r\n        desactiverDrag?: () => void;\r\n        dragStartBeforeEvent?: () => void;\r\n        dragEndBeforeEvent?: () => void;\r\n    }\r\n\r\n    /**\r\n     * Modèle des paramètres d'élément drop\r\n     */\r\n    export interface IDropSettings {\r\n        idHTMLElementConteneur: string;\r\n        estActiver: boolean;\r\n        dropEventAction: (donnees: any) => void;\r\n        activerDragOver?: () => void;\r\n        desactiverDragOver?: () => void;\r\n    }\r\n\r\n}","/**\r\n * Service applicatif de gestion du drag and drop\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de gerer le choix EDS\r\n     */\r\n    class PfDragAndDropService implements IPfDragAndDropService {\r\n        public static CLASS_NAME = \"PfDragAndDropService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfDragAndDropService.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [];\r\n\r\n        // Variables utiles\r\n        private donnees: any;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() { }\r\n\r\n        /**\r\n         * Methode permetant de récupérer les données du drag and drop\r\n         * @return {any}\r\n         */\r\n        public getDonnees(): any {\r\n            return this.donnees;\r\n        }\r\n\r\n        /**\r\n         * Methode permetant de modifier les données du drag and drop\r\n         * @param {any} donnees\r\n         * @return {void}\r\n         */\r\n        public setDonnees(donnees: any): void {\r\n            this.donnees = donnees;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe PfDragAndDropService\r\n     */\r\n    export interface IPfDragAndDropService {\r\n        getDonnees(): any;\r\n        setDonnees(donnees: any): void;\r\n    }\r\n\r\n    // Déclaration du service\r\n    app.service(\"PfDragAndDropService\", PfDragAndDropService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-diagramme-pourcentage\r\n * @module portefeuille.Controleurs\r\n * @author S0005355 (Eric ALBERT)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfDiagrammePourcentageControleur {\r\n        public static CLASS_NAME = \"PfDiagrammePourcentageControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfDiagrammePourcentageControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [];\r\n\r\n        // Variables d'entrées\r\n        public config: Array<Services.LibrairieD3.IConfigPourcentageD3>;\r\n\r\n        // Variables utiles\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n        ) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        public initialiser(): void {\r\n            PfDiagrammeColonneControleur.logger.info(\">>> Appel de la méthode : PfDiagrammePourcentageControleur.initialiser <<<\");\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfDiagrammePourcentageControleur\", PfDiagrammePourcentageControleur);\r\n} ","/**\r\n * Directive pf-diagramme-liste-donut\r\n * @module portefeuille.Directives\r\n * @author S0005355 (Eric ALBERT)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfDiagrammePourcentage(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-diagramme-pourcentage/pf-diagramme-pourcentage-vue.html\",\r\n            controller: \"PfDiagrammePourcentageControleur\",\r\n            controllerAs: \"pfDiagrammePourcentageCtrl\",\r\n            bindToController: true,\r\n            transclude: true,\r\n            scope: {\r\n                config: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfDiagrammePourcentage\", mwPfDiagrammePourcentage);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-diagramme-colonne\r\n * @module portefeuille.Controleurs\r\n * @author S0005410 (Eric Jacquot)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfDiagrammeMultiColonneControleur {\r\n        public static CLASS_NAME = \"PfDiagrammeMultiColonneControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfDiagrammeMultiColonneControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [];\r\n\r\n        // Variables d'entrées\r\n        public config: Array<Modeles.Application.IDataIndicateurMutliColonne>;\r\n\r\n        // Variables utiles\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        public initialiser(): void {\r\n            PfDiagrammeColonneControleur.logger.info(\">>> Appel de la méthode : PfDiagrammeMultiColonneControleur.initialiser <<<\");\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfDiagrammeMultiColonneControleur\", PfDiagrammeMultiColonneControleur);\r\n} ","/**\r\n * Directive pf-diagramme-colonne\r\n * @module portefeuille.Directives\r\n * @author S0005410 (Eric Jacquot)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfDiagrammeMultiColonne(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-diagramme-multi-colonne/pf-diagramme-multi-colonne-vue.html\",\r\n            controller: \"PfDiagrammeMultiColonneControleur\",\r\n            controllerAs: \"pfDiagrammeMultiColonneCtrl\",\r\n            bindToController: true,\r\n            transclude: true,\r\n            scope: {\r\n                config: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfDiagrammeMultiColonne\", mwPfDiagrammeMultiColonne);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-indicateur-badge\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    export interface IDataIndicateurBadge {\r\n        intitule: string;\r\n        valeur: string;\r\n        isSousIntitule: boolean;\r\n        debranchementLisa: number;\r\n        debranchementLocal: string;\r\n        showZero: boolean;  // le lien est quand même affiché si zéro : 0\r\n    }\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfIndicateurBadgeControleur {\r\n        public static CLASS_NAME = \"PfIndicateurBadgeControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfIndicateurBadgeControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n            Constantes.Inject.Services.portefeuilleService,\r\n            Constantes.Inject.Services.contexteService,\r\n            Constantes.Inject.Services.statService,\r\n            PdtEntreprise.Constantes.Inject.Services.LISA_SERVICE,\r\n            PdtEntreprise.Constantes.Inject.Services.POPUP_SERVICE\r\n        ];\r\n\r\n        // Variables d'entrées\r\n        public intitule: string;\r\n        public valeur: string;\r\n        public isSousIntitule: boolean;\r\n        public debranchementLisa: number;\r\n        public debranchementLocal: string;\r\n        public showZero: boolean;\r\n\r\n        // Variables utiles\r\n        public chargementIndicateurBadgeEnCours: boolean;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private portefeuilleService: Services.Application.IPortefeuilleService,\r\n            private contexteService: Services.Application.IContexteService,\r\n            private statsService: Services.Application.IStatsService,\r\n            private lisaService: PdtEntreprise.Services.ILisaService,\r\n            private popupService: PdtEntreprise.Services.IPopupService\r\n        ) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfIndicateurBadgeControleur.logger.info(\">>> Appel de la méthode : PfIndicateurBadgeControleur.initialiser <<<\");\r\n            this.chargementIndicateurBadgeEnCours = false;\r\n        }\r\n\r\n        public show(): boolean {\r\n            return (this.debranchementLisa > 0\r\n                && (this.valeur > \"0\"\r\n                    || this.showZero === true))\r\n                ? true : false;\r\n        }\r\n\r\n        public debrancherVers() {\r\n            PfIndicateurBadgeControleur.logger.info(\">>> Appel de la méthode : PfIndicateurBadgeControleur.debrancherVers <<<\");\r\n            if (!this.portefeuilleService.getCaracteristiquesAgent()) {\r\n                this.portefeuilleService.getCaracteristiquesAgentConnecte().then((retour: Modeles.Application.ICaracteristiquesAgent) => {\r\n                    this.portefeuilleService.setCaracteristiquesAgent(retour);\r\n                    this.debrancherVersSuite();\r\n                });\r\n            } else {\r\n                this.debrancherVersSuite();\r\n            }\r\n        }\r\n\r\n        public debrancherVersSuite(): ng.IPromise<void> {\r\n            PfIndicateurBadgeControleur.logger.info(\">>> Appel de la méthode : PfIndicateurBadgeControleur.debrancherVersSuite <<<\");\r\n\r\n            if (this.debranchementLisa === Constantes.CodeProcessusLisa.CODE_LISA_BILAN_REVUES_PORTEFEUILLE ||\r\n                this.debranchementLisa === Constantes.CodeProcessusLisa.CODE_LISA_BILAN_APPETENCES_PORTEFEUILLE ||\r\n                this.debranchementLisa === Constantes.CodeProcessusLisa.CODE_LISA_GESTION_AFFAIRES ||\r\n                this.debranchementLisa === Constantes.CodeProcessusLisa.CODE_LISA_PROPOSITONS) {\r\n\r\n                let contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille = <Modeles.Application.IContexteGererPortefeuille>{};\r\n\r\n                let objetEdsChoisi: Modeles.Application.IObjetEdsChoisi = <Modeles.Application.IObjetEdsChoisi>{};\r\n                objetEdsChoisi.objCaractAgent = this.portefeuilleService.getCaracteristiquesAgent();\r\n                objetEdsChoisi.listePtfVisu = _.pluck(_.where(this.portefeuilleService.getListePortefeuillesVisu(), { \"estAffiche\": true }), \"id\");\r\n                objetEdsChoisi.nombrePortefeuilleTotalAgent = this.portefeuilleService.getListePortefeuillesVisu().length;\r\n                objetEdsChoisi.locationPath = Constantes.Url.PORTEFEUILLE;\r\n                contexteGererPortefeuille.objetEdsVisu = objetEdsChoisi;\r\n\r\n                return this.contexteService.ajouterDonneesDebranchementBilanRevuePortefeuille(contexteGererPortefeuille)\r\n                    .then(() => {\r\n                        return this.lisaService.next(this.debranchementLisa, this.debranchementLocal)\r\n                            .then(() => {\r\n                         //       this.contexteService.supprimerContexteDevenuInutile([Constantes.Contexte.CONTEXTE_VERS_REVUE]);\r\n                            })\r\n                            .catch((erreur: MyWay.Services.Erreur) => {\r\n                                ClientsControleur.logger.debug(\">>> Echec sur lisa.next de la méthode : PfIndicateurBadgeControleur.debrancherVers <<<\");\r\n                                this.popupService.showErreur(erreur);\r\n                            });\r\n                    });\r\n            } else if (this.debranchementLisa === Portefeuille.Enum.Revue.POPUP_REVUE.POPUP_CLIENTS_A_ACTIVER) {\r\n                let caracteristiquesAgent: Modeles.Application.ICaracteristiquesAgent;\r\n                let listeIdsPortefeuilles: Array<number>;\r\n\r\n                if (this.portefeuilleService) {\r\n                    caracteristiquesAgent = this.portefeuilleService.getCaracteristiquesAgent();\r\n                    listeIdsPortefeuilles = _.pluck(_.where(this.portefeuilleService.getListePortefeuillesVisu(), { \"estAffiche\": true }), \"id\");\r\n\r\n                    if (caracteristiquesAgent && listeIdsPortefeuilles && listeIdsPortefeuilles.length > 0) {\r\n                        this.chargementIndicateurBadgeEnCours = true;\r\n\r\n                        this.statsService.getClientsAActiver(caracteristiquesAgent.codeEtablissement, caracteristiquesAgent.identifiantElementStructure, listeIdsPortefeuilles\r\n                        ).then((resultatPromesse: Array<Modeles.ApplicationStats.IClientSimplifie>) => {\r\n                            if (resultatPromesse && resultatPromesse.length > 0) {\r\n                                this.popupService.showModal(\"vues/template-modale/modale-clients-activer-vue.html\", \"ModaleClientsActiverControleur\", resultatPromesse);\r\n                            }\r\n                        }).catch((erreur: MyWay.Services.Erreur) => {\r\n                            ClientsControleur.logger.debug(\">>> Echec sur l'ouverture de la popup des clients à activer: PfIndicateurBadgeControleur.debrancherVers <<<\");\r\n                            this.popupService.showErreur(erreur);\r\n                        }).finally(() => {\r\n                        this.chargementIndicateurBadgeEnCours = false;\r\n                        });\r\n                    }\r\n                }\r\n            } else if (this.debranchementLisa === Portefeuille.Enum.Revue.POPUP_REVUE.POPUP_CLIENTS_TARIFICATION) {\r\n                let caracteristiquesAgent: Modeles.Application.ICaracteristiquesAgent;\r\n                let listeIdsPortefeuilles: Array<number>;\r\n\r\n                if (this.portefeuilleService) {\r\n                    caracteristiquesAgent = this.portefeuilleService.getCaracteristiquesAgent();\r\n                    listeIdsPortefeuilles = _.pluck(_.where(this.portefeuilleService.getListePortefeuillesVisu(), { \"estAffiche\": true }), \"id\");\r\n\r\n                    if (caracteristiquesAgent && listeIdsPortefeuilles && listeIdsPortefeuilles.length > 0) {\r\n                        this.chargementIndicateurBadgeEnCours = true;\r\n\r\n                        this.statsService.getClientsARenegocier(caracteristiquesAgent.codeEtablissement, caracteristiquesAgent.identifiantElementStructure, listeIdsPortefeuilles\r\n                        ).then((resultatPromesse: Array<Modeles.ApplicationStats.IClientSimplifie>) => {\r\n                            if (resultatPromesse && resultatPromesse.length > 0) { // @note la modale est la mm pr les A activer et les A renégocier\r\n                                this.popupService.showModal(\"vues/template-modale/modale-clients-activer-vue.html\", \"ModaleClientsRenegocierControleur\", resultatPromesse);\r\n                            }\r\n                        }).catch((erreur: MyWay.Services.Erreur) => {\r\n                            ClientsControleur.logger.debug(\">>> Echec sur l'ouverture de la popup des clients à activer: PfIndicateurBadgeControleur.debrancherVers <<<\");\r\n                            this.popupService.showErreur(erreur);\r\n                        }).finally(() => {\r\n                            this.chargementIndicateurBadgeEnCours = false;\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                return this.lisaService.next(this.debranchementLisa, this.debranchementLocal)\r\n                    .catch((erreur: MyWay.Services.Erreur) => {\r\n                        ClientsControleur.logger.debug(\">>> Echec sur lisa.next de la méthode : PfIndicateurBadgeControleur.debrancherVers <<<\");\r\n                        this.popupService.showErreur(erreur);\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfIndicateurBadgeControleur\", PfIndicateurBadgeControleur);\r\n} ","/**\r\n * Directive pf-indicateur-badge\r\n * @module portefeuille.Directives\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfIndicateurBadge(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-indicateur-badge/pf-indicateur-badge-vue.html\",\r\n            controller: \"PfIndicateurBadgeControleur\",\r\n            controllerAs: \"pfIndicateurBadgeCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                intitule: \"=\",\r\n                valeur: \"=\",\r\n                isSousIntitule: \"=\",\r\n                debranchementLisa: \"=\",\r\n                debranchementLocal: \"=\",\r\n                showZero: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfIndicateurBadge\", mwPfIndicateurBadge);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-indicateur-fleche\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    export enum COULEUR_INDICATEUR_FLECHE {\r\n        VERT = <any>\"couleur-verte\",\r\n        ORANGE = <any>\"couleur-orange\",\r\n        ROUGE = <any>\"couleur-rouge\"\r\n    };\r\n\r\n    export enum ICONE_INDICATEUR_FLECHE {\r\n        HAUT = <any>\"itce-arrow-up-circle\",\r\n        BAS = <any>\"itce-arrow-down-circle\",\r\n        DROITE = <any>\"itce-arrow-right-circle\"\r\n    };\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfIndicateurFlecheControleur {\r\n        public static CLASS_NAME = \"PfIndicateurFlecheControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfIndicateurFlecheControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [];\r\n\r\n        // Variables d'entrées\r\n        public config: Modeles.Application.IConfigIndicateurFleche;\r\n\r\n        // Variables utiles\r\n        public valeurFormate: string;\r\n        public couleur: string;\r\n        public icone: string;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfIndicateurFlecheControleur.logger.info(\">>> Appel de la méthode : PfIndicateurFlecheControleur.initialiser <<<\");\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get isPositif(): boolean {\r\n            return this.config.icone === \"itce-arrow-up-circle\";\r\n        }\r\n        /**\r\n         * \r\n         */\r\n        public get isNeutre(): boolean {\r\n            return this.config.icone === \"itce-arrow-right-circle\";\r\n        }\r\n        /**\r\n         * \r\n         */\r\n        public get isNegatif(): boolean {\r\n            return this.config.icone === \"itce-arrow-down-circle\";\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfIndicateurFlecheControleur\", PfIndicateurFlecheControleur);\r\n} ","/**\r\n * Directive pf-indicateur-badge\r\n * @module portefeuille.Directives\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfIndicateurFleche(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-indicateur-fleche/pf-indicateur-fleche-vue.html\",\r\n            controller: \"PfIndicateurFlecheControleur\",\r\n            controllerAs: \"pfIndicateurFlecheCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                config: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfIndicateurFleche\", mwPfIndicateurFleche);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-element-eds\r\n * @module portefeuille.Controleurs\r\n * @author S0005355 (Eric ALBERT)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfElementEdsControleur {\r\n        public static CLASS_NAME = \"PfElementEdsControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfElementEdsControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n            \"$compile\",\r\n            Constantes.Inject.Services.choixUtilisateurService];\r\n\r\n        // Variables d'entrées\r\n        public eds: Modeles.Application.IAgenceEds;\r\n\r\n        // Variables utiles\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $compile: ng.ICompileService,\r\n            private choixUtilisateurService: Services.Application.IChoixUtilisateurService) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfTuileIndicateurControleur.logger.info(\">>> Appel de la méthode : PfTuileIndicateurControleur.initialiser <<<\");\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        private get nomEds(): string {\r\n            return (this.eds &&\r\n                 this.eds.nomEds &&\r\n                 this.eds.nomEds.length > 0) ?\r\n                this.eds.nomEds :\r\n                \"-x-\";\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public set edsSelectionne(edsItem: Modeles.Application.IAgenceEds) {\r\n            this.choixUtilisateurService.edsSelectionne = edsItem;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public ouvrir(): ng.IPromise<void> {\r\n            if (!this.eds.agencesInferieur) {\r\n                return this.choixUtilisateurService.rechercherEdsInferieurs(this.eds).then(() => {\r\n                    this.eds.affiche = true;\r\n                    return;\r\n                });\r\n            } else {\r\n                this.eds.affiche = !this.eds.affiche;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get estfermer(): boolean {\r\n            return !(this.eds && this.eds.affiche);\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get estOuvert(): boolean {\r\n            return (this.eds && this.eds.affiche);\r\n        }\r\n\r\n        public get estCoche(): boolean {\r\n            return this.choixUtilisateurService.edsSelectionne === this.eds;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public selectionnerEDS() {\r\n            return this.choixUtilisateurService.edsSelectionne = this.eds;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get estVide(): boolean { \r\n            return (this.eds && this.eds.agencesInferieur && this.eds.agencesInferieur.length === 0);\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfElementEdsControleur\", PfElementEdsControleur);\r\n} ","/**\r\n * Directive pf-element-eds\r\n * @module portefeuille.Directives\r\n * @author S0005355 (Eric ALBERT)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfElementEds($compile: ng.ICompileService): ng.IDirective {\r\n        return <ng.IDirective> {\r\n            restrict: \"EA\",\r\n            templateUrl: \"typescript/directives/pf-element-eds/pf-element-eds-vue.html\",\r\n            controller: \"PfElementEdsControleur\",\r\n            controllerAs: \"popupCtrl\",\r\n            bindToController: true,\r\n            //replace: true,\r\n            transclude: true,\r\n            scope: {\r\n                eds: \"=\"\r\n            },\r\n            compile: (tElement: JQuery, tAttr: ng.IAttributes, trantransclude: ng.ITranscludeFunction) => {\r\n                let contents: JQuery = tElement.contents().remove();\r\n                let compiledContents: ng.ITemplateLinkingFunction;\r\n                return (scope: ng.IScope, element: JQuery, attrs: ng.IAttributes, ctrl: any, transclude: ng.ITranscludeFunction) => {\r\n                    if (!compiledContents) {\r\n                        compiledContents = $compile(contents, trantransclude);\r\n                    }\r\n                    return compiledContents(scope, (clone: ng.IAugmentedJQuery) => {\r\n                        element.append(clone);\r\n                    });\r\n                };\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    // Attention !!! mettre l'injection de la compile en paramètre (Sans en DUA ok mais en VFO ko)\r\n    app.directive(\"mwPfElementEds\", [\"$compile\", mwPfElementEds]);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-indicateur-colonne\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfIndicateurColonneControleur {\r\n        public static CLASS_NAME = \"PfIndicateurColonneControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfIndicateurColonneControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [];\r\n\r\n        // Variables d'entrées\r\n        public data: Modeles.Application.IDataIndicateurColonne;\r\n\r\n        // Variables utiles\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfIndicateurColonneControleur.logger.info(\">>> Appel de la méthode : PfIndicateurColonneControleur.initialiser <<<\");\r\n        }\r\n\r\n        /**\r\n         * Sous Valeur visible\r\n         */\r\n        public estVisibleSousValeur(): boolean {\r\n            return this.data.sousValeur !== undefined;\r\n        }\r\n\r\n        /**\r\n         * Intitulé Sous Valeur visible\r\n         */\r\n        public estVisibleIntituleSousValeur(): boolean {\r\n            return this.data.sousValeur !== 0;\r\n        }\r\n\r\n        /**\r\n         * suivi par visible\r\n         */\r\n        public get estVisibleSuiviPar(): boolean {\r\n            return this.data.nomSuiviPar !== undefined && this.data.nomSuiviPar !== null;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get estSousValeurEnNombre(): boolean {\r\n            return !this.data.estMontant && this.estVisibleIntituleSousValeur();\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfIndicateurColonneControleur\", PfIndicateurColonneControleur);\r\n} ","/**\r\n * Directive pf-indicateur-colonne\r\n * @module portefeuille.Directives\r\n * @author S0005410 (Eric Jacquot)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfIndicateurColonne(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-indicateur-colonne/pf-indicateur-colonne-vue.html\",\r\n            controller: \"PfIndicateurColonneControleur\",\r\n            controllerAs: \"pfIndicateurColonneCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                data: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfIndicateurColonne\", mwPfIndicateurColonne);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-indicateur-pourcentage\r\n * @module portefeuille.Controleurs\r\n * @author S0005355 (Eric ALBERT)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfIndicateurPourcentageControleur {\r\n        public static CLASS_NAME = \"PfIndicateurPourcentageControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfIndicateurPourcentageControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n            Constantes.Inject.Services.creationPourcentageService\r\n        ];\r\n\r\n        // Variables d'entrées\r\n        public config: Services.LibrairieD3.IConfigPourcentageD3;\r\n\r\n        // Variables utiles\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(private creationPourcentageService: Portefeuille.Services.LibrairieD3.ICreationPourcentageService) {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfIndicateurColonneControleur.logger.info(\">>> Appel de la méthode : PfIndicateurPourcentageControleur.initialiser <<<\");\r\n\r\n            angular.element(document.querySelector(\"#\" + this.config.id)).ready(() => {\r\n                this.creationPourcentageService.creerPourcentage(this.config, this.config.id);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get id(): string {\r\n            return this.config.id;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get isIE(): boolean {\r\n            return Services.Utils.ApplicationUtils.isIE();\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfIndicateurPourcentageControleur\", PfIndicateurPourcentageControleur);\r\n} ","/**\r\n * Directive pf-indicateur-Pourcentage\r\n * @module portefeuille.Directives\r\n * @author S0005355 (Eric ALBERT)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfIndicateurPourcentage(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-indicateur-pourcentage/pf-indicateur-pourcentage-vue.html\",\r\n            controller: \"PfIndicateurPourcentageControleur\",\r\n            controllerAs: \"pfIndicateurPourcentageCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                config: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfIndicateurPourcentage\", mwPfIndicateurPourcentage);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-ligne-relation-eco\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfLigneRelationEcoControleur {\r\n        public static CLASS_NAME = \"PfLigneRelationEcoControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfLigneRelationEcoControleur.CLASS_NAME);\r\n        //public tableauClientEconomique: Modeles.Tableaux.TableauClientEco;\r\n\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n            Constantes.Inject.Angular.$filter,\r\n            Constantes.Inject.Angular.$parse,\r\n            Constantes.Inject.Services.eventService\r\n        ];\r\n\r\n        // Variables d'entrées\r\n        public relationEconomique: Modeles.Application.IRelationEconomique;\r\n        public listeIndicateursTableau: Array<Modeles.Application.IIndicateurChoix>;\r\n\r\n        // Variables utiles\r\n        public estOuvert: boolean;\r\n        public listeIndicateursAAfficher: Array<Modeles.Application.IIndicateur>;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $filter: ng.IFilterService,\r\n            private $parse: ng.IParseService,\r\n            private eventService: Services.Application.IEventService) {\r\n            this.eventService.setPfLigneRelationEcoControleur(this);\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant avec une liste d'indicateurs définis\r\n         * @returns {void}\r\n         */\r\n        public reInitialiser(listeIndicateurs: Array<Modeles.Application.IIndicateurChoix>): void {\r\n            PfLigneRelationEcoControleur.logger.info(\">>> Appel de la méthode : PfLigneRelationEcoControleur.initialiser <<<\");\r\n            this.estOuvert = false;\r\n\r\n            this.listeIndicateursAAfficher = [];\r\n\r\n            _.forEach(listeIndicateurs, (indicateurChoix: Modeles.Application.IIndicateurChoix) => {\r\n\r\n                let indexIndicateur = _.findIndex(this.relationEconomique.listeIndicateurs, (indicateurData: Modeles.Application.IIndicateur) => {\r\n                    return indicateurData.code === indicateurChoix.indicateur.codeRel;\r\n                });\r\n\r\n                if (indexIndicateur !== -1 && indicateurChoix.indicateur.estVisibleColonne) {\r\n                    this.listeIndicateursAAfficher.push(this.relationEconomique.listeIndicateurs[indexIndicateur]);\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfLigneRelationEcoControleur.logger.info(\">>> Appel de la méthode : PfLigneRelationEcoControleur.initialiser <<<\");\r\n            this.estOuvert = false;\r\n\r\n            this.listeIndicateursAAfficher = [];\r\n\r\n            _.forEach(this.listeIndicateursTableau, (indicateurChoix: Modeles.Application.IIndicateurChoix) => {\r\n\r\n                let indexIndicateur = _.findIndex(this.relationEconomique.listeIndicateurs, (indicateurData: Modeles.Application.IIndicateur) => {\r\n                    return indicateurData.code === indicateurChoix.indicateur.codeRel;\r\n                });\r\n\r\n                if (indexIndicateur !== -1 && indicateurChoix.indicateur.estVisibleColonne) {\r\n                    this.listeIndicateursAAfficher.push(this.relationEconomique.listeIndicateurs[indexIndicateur]);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'ouvrir ou fermer le détail de la ligne\r\n         * @returns {void}\r\n         */\r\n        public afficherMoinsPlus(): void {\r\n            PfLigneRelationEcoControleur.logger.info(\">>> Appel de la méthode : PfLigneRelationEcoControleur.afficherMoinsPlus <<<\");\r\n            this.estOuvert = !this.estOuvert;\r\n        }\r\n\r\n        public onSelectionChange(selectedObject: Modeles.Application.IClient) {\r\n\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfLigneRelationEcoControleur\", PfLigneRelationEcoControleur);\r\n} ","/**\r\n * Directive pf-ligne-relation-eco\r\n * @module portefeuille.Directives\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfLigneRelationEco(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-ligne-relation-eco/pf-ligne-relation-eco-vue.html\",\r\n            controller: \"PfLigneRelationEcoControleur\",\r\n            controllerAs: \"pfLigneRelationEcoCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                relationEconomique: \"=\",\r\n                listeIndicateursTableau: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfLigneRelationEco\", mwPfLigneRelationEco);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-diagramme-donut\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    export interface IConfigPuceLegende {\r\n        intitule: string;\r\n        couleur: any;\r\n        affichagePuceLegendeActif: boolean;\r\n    }\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfPuceLegendeControleur {\r\n        public static CLASS_NAME = \"PfPuceLegendeControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfPuceLegendeControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [];\r\n\r\n        // Variables d'entrées\r\n        public intitule: string;\r\n        public couleur: string;\r\n        public affichagePuceLegendeActif: boolean;\r\n\r\n        // Variables utiles\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfDiagrammeDonutControleur.logger.info(\">>> Appel de la méthode : PfPuceLegendeControleur.initialiser <<<\");\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfPuceLegendeControleur\", PfPuceLegendeControleur);\r\n} ","/**\r\n * Directive pf-puce-legende\r\n * @module portefeuille.Directives\r\n * @author S0005410 (Eric Jacquot)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfPuceLegende(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-puce-legende/pf-puce-legende-vue.html\",\r\n            controller: \"PfPuceLegendeControleur\",\r\n            controllerAs: \"pfPuceLegendeCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                intitule: \"@\",\r\n                couleur: \"@\",\r\n                affichagePuceLegendeActif: \"=\",\r\n                sousIntitule: \"@\",\r\n                sousCouleur: \"@\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfPuceLegende\", mwPfPuceLegende);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-tuile-catalogue\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfTuileCatalogueControleur {\r\n        public static CLASS_NAME = \"PfTuileCatalogueControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfTuileCatalogueControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n            Constantes.Inject.Angular.$element,\r\n            Constantes.Inject.Services.modalePaniersService\r\n        ];\r\n\r\n        // Variables d'entrées\r\n        public tuileCatalogueSettings: Modeles.Application.ITuileCatalogueSettings;\r\n        public listeTuileCatalogueSettings: Array<Modeles.Application.ITuileCatalogueSettings>;\r\n        public listeTuilePanierSettings: Array<Modeles.Application.ITuilePanierSettings>;\r\n        public listeFiltresClients: Array<Modeles.Application.IFiltre>;\r\n        public listeFiltresRelationEco: Array<Modeles.Application.IFiltre>;\r\n\r\n        // Variables utiles\r\n        public configTuile: MyWay.UI.iMwConfigTuile;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $element: ng.IAugmentedJQuery,\r\n            private modalePaniersService: Services.Application.IModalePaniersService) {\r\n\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfTuileCatalogueControleur.logger.info(\">>> Appel de la méthode : PfTuileCatalogueControleur.initialiser <<<\");\r\n\r\n            // Initialisation configuration tuile\r\n            this.configTuile = this.getConfigTuile();\r\n\r\n            // Initialisation dragSettings\r\n            this.tuileCatalogueSettings.dragSettings = this.modalePaniersService.creerDragSettings(this.tuileCatalogueSettings);\r\n            //this.tuileCatalogueSettings.dragSettings.estActiver = true;\r\n            this.tuileCatalogueSettings.dragSettings.estActiver = this.modalePaniersService.getEstEditionPanier();\r\n            if (this.tuileCatalogueSettings.indicateur.choisi) {\r\n                this.tuileCatalogueSettings.dragSettings.estActiver = false;\r\n            } else if (this.listeTuilePanierSettings.length === Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {\r\n                this.tuileCatalogueSettings.dragSettings.estActiver = false;\r\n            }\r\n\r\n            // Ajout des fonctions des événements drag\r\n            this.tuileCatalogueSettings.dragSettings.dragStartBeforeEvent = this.dragStartBeforeEvent;\r\n            this.tuileCatalogueSettings.dragSettings.dragEndBeforeEvent = this.dragEndBeforeEvent;\r\n\r\n            this.$element.ready(this.modalePaniersService.rendreCompatibleTuilesAvecDragAndDrop); \r\n        }\r\n\r\n        /**\r\n         * Variable contenant la méthode a appelé avant que le dragStart commence\r\n         */\r\n        private dragStartBeforeEvent = () => {\r\n            this.modalePaniersService.activerDropPanier();\r\n            this.modalePaniersService.activerDropTuilesPanier(this.listeTuilePanierSettings);\r\n\r\n            if (this.listeTuilePanierSettings.length === Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX - 1) {\r\n                this.modalePaniersService.cacherBoutonValider();\r\n            }\r\n        };\r\n         \r\n        /**\r\n         * Variable contenant la méthode a appelé avant que le dragEnd commence\r\n         */\r\n        private dragEndBeforeEvent = () => {\r\n            this.modalePaniersService.desactiverDropPanier();\r\n            this.modalePaniersService.desactiverDropTuilesPanier(this.listeTuilePanierSettings);\r\n\r\n            if (this.listeTuilePanierSettings.length === Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX - 1) {\r\n                this.modalePaniersService.afficherBoutonValider();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Récupération de la configuration de la tuile\r\n         */\r\n        public getConfigTuile(): MyWay.UI.iMwConfigTuile {\r\n            let config: MyWay.UI.iMwConfigTuile = <MyWay.UI.iMwConfigTuile>{};\r\n            config.taille = Constantes.ModalePaniers.TUILE_CATALOGUE_TAILLE;\r\n            config.typeMarquage = Constantes.ModalePaniers.TUILE_TYPE_MARQUAGE_TEXTE;\r\n            if (!this.tuileCatalogueSettings.indicateur.indicateur.estUniquementVueClients) {\r\n                config.typeMarquage = Constantes.ModalePaniers.TUILE_CATALOGUE_TYPE_MARQUAGE_AUCUN;\r\n                this.tuileCatalogueSettings.indicateur.indicateur.intitule = this.modifIntitule(this.tuileCatalogueSettings.indicateur.indicateur.intitule);\r\n            }\r\n            return config;\r\n        }\r\n\r\n        // la 1ere fois, on ajoute un mot \"composé de blancs insécables\" et d'un blanc\r\n        // moyen détourné d'aller à la ligne\r\n        // car on est dans un composant myway : mw-tuile-standard...\r\n        // aller à la ligne permet de rester aligner avec les tuiles où il y a un TAG...(CLIENT/PROSPECT)\r\n        public modifIntitule(texte: string): string {\r\n            let ligneVide: string = _.padLeft(\"\", 40, String.fromCharCode(160));\r\n            if (texte.indexOf(ligneVide) === -1) {\r\n                texte = ligneVide + \" \" + texte;\r\n            }\r\n            return texte;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de gérer l'affichage ou non du marquage de la tuile\r\n         * @returns {boolean}\r\n         */\r\n        public afficherMarquage(): boolean {\r\n            if (this.tuileCatalogueSettings.indicateur.choisi) {\r\n                return true;\r\n            } else if (this.tuileCatalogueSettings.indicateur.indicateur.estUniquementVueClients) {\r\n                return true;\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de gérer le nom du marquage de la tuile\r\n         * @returns {string}\r\n         */\r\n        public nomMarquage(): string {\r\n            if (this.tuileCatalogueSettings.indicateur.indicateur.estUniquementVueClients) {\r\n                return Constantes.ModalePaniers.TUILE_NOM_MARQUAGE_CLIENT_PROSPECT;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de gérer la couleur de la tuile\r\n         * @returns {string}\r\n         */\r\n        public couleur(): string {\r\n            if (this.tuileCatalogueSettings.indicateur.choisi) {\r\n                return Constantes.ModalePaniers.TUILE_COULEUR_JAUNE;\r\n            } else if (this.tuileCatalogueSettings.indicateur.indicateur.estUniquementVueClients) {\r\n                return Constantes.ModalePaniers.TUILE_COULEUR_ROUGE;\r\n            } else {\r\n                return Constantes.ModalePaniers.TUILE_COULEUR_SOMBRE; \r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de gérer le click sur le plus d'une tuile\r\n         * @returns {void}\r\n         */\r\n        public ajouter(): void {\r\n            // On cache le bouton ajouter si on ajoute le sixième indicateur\r\n            if (this.listeTuilePanierSettings.length === Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX - 1) {\r\n                this.modalePaniersService.cacherBoutonValider();\r\n                \r\n                // Modification des paramètres des tuiles catalogue\r\n                _.forEach(this.listeTuileCatalogueSettings, (tuile: Modeles.Application.ITuileCatalogueSettings) => {\r\n                    tuile.estEnEdition = false;\r\n                });\r\n            }\r\n\r\n            // Changement de l'état de l'indicateur\r\n            this.tuileCatalogueSettings.indicateur.choisi = true;\r\n            this.tuileCatalogueSettings.estEnEdition = false;\r\n            //this.configTuile.typeMarquage = Constantes.ModalePaniers.TUILE_CATALOGUE_TYPE_MARQUAGE_PICTO;\r\n\r\n            // Création de la nouvelle tuile panier\r\n            let tuilePanierSettings = <Modeles.Application.ITuilePanierSettings>{};\r\n            tuilePanierSettings.id = this.modalePaniersService.genererIdentifiantAleatoire();\r\n            tuilePanierSettings.indicateur = this.tuileCatalogueSettings.indicateur;\r\n            this.listeTuilePanierSettings.push(tuilePanierSettings);\r\n\r\n            // Mise à jour du message d'avertissement de modification de filtre\r\n            this.modalePaniersService.afficherMessageAvertissementFiltre(\r\n                this.listeFiltresRelationEco,\r\n                this.listeFiltresClients,\r\n                _.pluck(this.listeTuilePanierSettings, \"indicateur\"));\r\n\r\n            // Rafraichir listeTuileCatalogueSettings\r\n            this.modalePaniersService.rafraichirListeTuileCatalogueSettings();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de savoir si l'indicateur est uniquement client et choisi\r\n         * @returns {boolean}\r\n         */\r\n        public estClientEtChoisi(): boolean {\r\n            return this.tuileCatalogueSettings.indicateur.indicateur.estUniquementVueClients && this.tuileCatalogueSettings.indicateur.choisi;\r\n        } \r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfTuileCatalogueControleur\", PfTuileCatalogueControleur);\r\n} ","/**\r\n * Directive pf-tuile-catalogue\r\n * @module portefeuille.Directives\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfTuileCatalogue(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-tuile-catalogue/pf-tuile-catalogue-vue.html\",\r\n            controller: \"PfTuileCatalogueControleur\",\r\n            controllerAs: \"pfTuileCatalogueCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                tuileCatalogueSettings: \"=\",\r\n                listeTuileCatalogueSettings: \"=\",\r\n                listeTuilePanierSettings: \"=\",\r\n                listeFiltresClients: \"=\",\r\n                listeFiltresRelationEco: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfTuileCatalogue\", mwPfTuileCatalogue);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-panel-niveau-2\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    export interface IConfigBoutonPanelNiv2 {\r\n        label: string;\r\n        action: Function;\r\n    }\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfPanelNiveau2Controleur {\r\n        public static CLASS_NAME = \"PfPanelNiveau2Controleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfPanelNiveau2Controleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [];\r\n\r\n        // Variables d'entrées\r\n        public configBouton: IConfigBoutonPanelNiv2;\r\n\r\n        // Variables utiles\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfPanelNiveau2Controleur.logger.info(\">>> Appel de la méthode : PfPanelNiveau2Controleur.initialiser <<<\");\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfPanelNiveau2Controleur\", PfPanelNiveau2Controleur);\r\n} ","/**\r\n * Directive pf-panel-niveau-2\r\n * @module portefeuille.Directives\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfPanelNiveau2(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-panel-niveau-2/pf-panel-niveau-2-vue.html\",\r\n            controller: \"PfPanelNiveau2Controleur\",\r\n            controllerAs: \"pfPanelNiveau2Ctrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                id: \"@\",\r\n                titre: \"@\",\r\n                titre2: \"@\",\r\n                icone: \"@?\",\r\n                configBouton: \"=\"\r\n            },\r\n            transclude: true\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfPanelNiveau2\", mwPfPanelNiveau2);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-tuile-indicateur\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfTuileIndicateurControleur {\r\n        public static CLASS_NAME = \"PfTuileIndicateurControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfTuileIndicateurControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [];\r\n\r\n        // Variables d'entrées\r\n        public type: Enum.Indicateur.TYPE;\r\n        public intitule: string;\r\n        public valeur: string;\r\n        public valeurNumber: number;\r\n        public isEuro: boolean;\r\n        public icone: string;\r\n\r\n        // Variables utiles\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() {\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfTuileIndicateurControleur.logger.info(\">>> Appel de la méthode : PfTuileIndicateurControleur.initialiser <<<\");\r\n\r\n            this.isEuro = true;\r\n\r\n            // @hack modifie l'intitulé Segm. relationnelle groupe en Seg. rel. groupe\r\n            if (this.intitule === Enum.Indicateur.INTITULE.SEG_RELATIONNELLE_GROUPE.toString()) {\r\n                this.intitule = \"Seg. rel. groupe\";\r\n            }\r\n\r\n            console.log(\"--> tuile indicateur controleur , intitule : \", this.intitule);\r\n            if (this.intitule === Enum.Indicateur.INTITULE.ENCOURS_BDF.toString()) {\r\n                this.isEuro = false; // pas euro, donc k€ pour le filtre\r\n                console.log(\"--> encours BDF en k€ \");\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de savoir si valeurNumber est defini\r\n         * utilisé par l'IHM\r\n         * @returns {void}\r\n         */\r\n        public valeurNumberDefini(): boolean {\r\n            return this.valeurNumber !== null && this.valeurNumber !== undefined;\r\n        }\r\n\r\n        public isGreen(): boolean {\r\n            return (this.type !== Enum.Indicateur.TYPE.DATE && this.valeurNumber > 0);\r\n        }\r\n\r\n        public isOrange(): boolean {\r\n            return (this.type !== Enum.Indicateur.TYPE.DATE && this.valeurNumber === 0);\r\n        }\r\n\r\n        public isTypeDate(): boolean {\r\n            return this.type === Enum.Indicateur.TYPE.DATE;\r\n        }\r\n\r\n        public isTypeMontant(): boolean {\r\n            return this.valeurNumberDefini() && this.type === Enum.Indicateur.TYPE.MONTANT;\r\n        }\r\n\r\n        public isTypeNombre(): boolean {\r\n            return this.valeurNumberDefini() && this.type === Enum.Indicateur.TYPE.NOMBRE;\r\n        }\r\n\r\n\r\n        public isTypePourcent(): boolean {\r\n            return this.valeurNumberDefini() && this.type === Enum.Indicateur.TYPE.POURCENT;\r\n        }\r\n\r\n\r\n        public isTypeTexte(): boolean {\r\n            return this.type === Enum.Indicateur.TYPE.TEXTE;\r\n        }\r\n\r\n        public isTypeBegacli(): boolean {\r\n            return this.type === Enum.Indicateur.TYPE.BEGACLI;\r\n        }\r\n\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfTuileIndicateurControleur\", PfTuileIndicateurControleur);\r\n} ","/**\r\n * Directive pf-tuile-indicateur\r\n * @module portefeuille.Directives\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfTuileIndicateur(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-tuile-indicateur/pf-tuile-indicateur-vue.html\",\r\n            controller: \"PfTuileIndicateurControleur\",\r\n            controllerAs: \"pfTuileIndicateurCtrl\",\r\n            bindToController: true,\r\n            replace: true,\r\n            scope: {\r\n                type: \"=\",\r\n                intitule: \"=\",\r\n                valeur: \"=\",\r\n                valeurNumber: \"=\",\r\n                icone: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfTuileIndicateur\", mwPfTuileIndicateur);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service de gestion des indicateurs\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    let loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service de gestion des indicateurs\r\n     */\r\n    class BegacliService implements IBegacliService {\r\n        public static CLASS_NAME = Constantes.Inject.Services.begacliService;\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(BegacliService.CLASS_NAME);\r\n\r\n        // Proprietés\r\n        private filtreBegacli: Modeles.Application.IFiltreBegacli;\r\n        private expReguliere: string = null;\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [\r\n            \r\n        ];\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() {\r\n            this.initialiser();\r\n        }\r\n\r\n        private initialiser() {\r\n            this.filtreBegacli = <Modeles.Application.IFiltreBegacli>{};\r\n            this.filtreBegacli.listeLettres = [];\r\n            this.filtreBegacli.listeNombres = [];\r\n            this.ajouterUniversLettre(\"Banque au quotidien\", \"b\");\r\n            this.ajouterUniversLettre(\"Epargne\", \"e\");\r\n            this.ajouterUniversLettre(\"Gestion des flux\", \"g\");\r\n            this.ajouterUniversLettre(\"Assurance prévoyance\", \"a\");\r\n            this.ajouterUniversLettre(\"Financement Court terme\", \"c\");\r\n            this.ajouterUniversLettre(\"Financement moyen Long terme\", \"l\");\r\n            this.ajouterUniversLettre(\"Ingénierie sociale\", \"i\");\r\n            // this.ajouterUniversLettre(\"Univers en trop\", \"x\");\r\n            let nb : number = this.filtreBegacli.listeLettres.length;\r\n            for (let i = 0; i <= nb; i++) {\r\n                this.AjouterNombre(i.toString());\r\n            }\r\n            this.filtreBegacli.choisiNC = false;\r\n        }\r\n\r\n        private ajouterUniversLettre(univers: string, lettre: string) {\r\n            let lettreBegacli = <Modeles.Application.ILettreBegacli>{};\r\n            lettreBegacli.univers = univers;\r\n            lettreBegacli.lettreMin = lettre.toLocaleLowerCase();\r\n            lettreBegacli.choisiMin = false;\r\n            lettreBegacli.lettreMaj = lettre.toLocaleUpperCase();\r\n            lettreBegacli.choisiMaj = false;\r\n            this.filtreBegacli.listeLettres.push(lettreBegacli);\r\n        }\r\n\r\n        private AjouterNombre(nombre: string) {\r\n            let nombreBegacli = <Modeles.Application.INombreBegacli>{};\r\n            nombreBegacli.nombre = nombre;\r\n            nombreBegacli.choisi = false;\r\n            this.filtreBegacli.listeNombres.push(nombreBegacli);\r\n        }\r\n\r\n\r\n        /**\r\n         *  décoche toutes les cases du filtre begacli\r\n         */\r\n        public setCasesDecochees() {\r\n            _.forEach(this.filtreBegacli.listeLettres, (lettreBegacli: Modeles.Application.ILettreBegacli) => {\r\n                lettreBegacli.choisiMaj = false;\r\n                lettreBegacli.choisiMin = false;\r\n            });\r\n            _.forEach(this.filtreBegacli.listeNombres, (nombreBegacli: Modeles.Application.INombreBegacli) => {\r\n                nombreBegacli.choisi = false;\r\n            });\r\n            this.filtreBegacli.choisiNC = false;\r\n            this.expReguliere = null;\r\n        }\r\n\r\n        /**\r\n         *  si aucune case cochée , retour false\r\n         *  si au mmoins 1 case cochée, retour true\r\n         */\r\n        public getCasesCochees(): boolean {\r\n            let nb: number = 0;\r\n            _.forEach(this.filtreBegacli.listeLettres, (lettreBegacli: Modeles.Application.ILettreBegacli) => {\r\n                if (lettreBegacli.choisiMaj === true || lettreBegacli.choisiMin === true) {\r\n                    nb++;\r\n                }\r\n            });\r\n            _.forEach(this.filtreBegacli.listeNombres, (nombreBegacli: Modeles.Application.INombreBegacli) => {\r\n                if (nombreBegacli.choisi === true ) {\r\n                    nb++;\r\n                }\r\n            });\r\n            if (this.filtreBegacli.choisiNC === true) {\r\n                nb++;\r\n            }\r\n\r\n            if (nb > 0) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * completer bagacli avec le nombre d'univers\r\n         * recherche dans la relation les BEGACLI...\r\n         * calcule le nombre de majuscules dans le texte et l'ajoute au début sous forme x-.....\r\n         * @param relationCommerciale\r\n         */\r\n        public completerUniversBegacli(relationCommerciale: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale):\r\n            Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale {\r\n            let indicateurBegacli: Modeles.Rest.PortefeuilleV1.client.IIndicateur;\r\n            for (let itemPortefeuille of relationCommerciale.listePortefeuilles) {\r\n                for (let itemRelation of itemPortefeuille.listeRelation) {\r\n                    for (let itemClient of itemRelation.listeClient) {\r\n                        console.log(\" ==> itemClient : \", itemClient);\r\n                        indicateurBegacli = _.find(itemClient.listeIndicateurClient, { code: Enum.Indicateur.CODE.BEGACLI.toString() });\r\n                        if (indicateurBegacli) {\r\n                            indicateurBegacli.valeur = this.completerNombreMajuscules(indicateurBegacli.valeur);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return relationCommerciale;\r\n        }\r\n\r\n        /**\r\n         * completer bagacli avec le nombre d'univers\r\n         * recherche dans le client les indicagteurs BEGACLI...\r\n         * calcule le nombre de majuscules dans le texte et l'ajoute au début sous forme x-.....\r\n         * @param clients\r\n         */\r\n        public completerUniversBegacliClient(client: Modeles.Rest.PortefeuilleV1.client.IClient):\r\n            Modeles.Rest.PortefeuilleV1.client.IClient {\r\n            let indicateurBegacli: Modeles.Rest.PortefeuilleV1.client.IIndicateur;\r\n            for (let unClient of client.listeClientIndicateur) {\r\n                    indicateurBegacli = _.find(unClient.listeIndicateurClient, { code: Enum.Indicateur.CODE.BEGACLI.toString() });\r\n                    if (indicateurBegacli) {\r\n                        indicateurBegacli.valeur = this.completerNombreMajuscules(indicateurBegacli.valeur);\r\n                    }\r\n            }\r\n            return client;\r\n        }\r\n\r\n\r\n        private completerNombreMajuscules(texte: string): string {\r\n            if (texte === null) {\r\n                return null;\r\n            }\r\n            // mets devant le texte, le nombre de majuscules trouvées.\r\n            let cpt: number = 0;\r\n            let nb: number;\r\n            nb = texte.length;\r\n            for (let i = 0; i < nb; i++) {\r\n                if (texte[i] >= \"A\" && texte[i] <= \"Z\") {\r\n                    cpt = cpt + 1;\r\n                }\r\n            }\r\n            return cpt + \"-\" + texte;\r\n        }\r\n\r\n        public getFiltreBegacliTexte(filtre: Modeles.Application.IFiltre) {\r\n            let texte: string;\r\n            // console.log(\"--> getFiltreBegacliTexte filtre : \", filtre);\r\n            texte = filtre.indicateur.indicateur.intitule + \" = \";\r\n            let txtUnivers: string = this.texteUnivers();\r\n            let txtNombre: string = this.texteNombre();\r\n            let txtNC: string = this.texteNC();\r\n\r\n            if (txtUnivers !== \"\" || txtNombre !== \"\") {\r\n                texte = texte + \"[\";\r\n            }\r\n\r\n            texte = texte + txtUnivers;\r\n            if (txtUnivers !== \"\" && txtNombre !== \"\") {\r\n                texte = texte + \" et \";\r\n            }\r\n            texte = texte + txtNombre;\r\n\r\n            if (txtUnivers !== \"\" || txtNombre !== \"\") {\r\n                texte = texte + \"]\";\r\n            }\r\n\r\n            if (txtUnivers !== \"\" || txtNombre !== \"\") {\r\n                if (txtNC !== \"\") {\r\n                    texte = texte + \" ou \";\r\n                }\r\n            }\r\n            texte = texte + txtNC;\r\n\r\n            texte = texte; // + \" - exp régulière : \" + this.getExpReguliere();\r\n\r\n           return texte;\r\n        }\r\n\r\n        private texteNC() : string {\r\n            let texte: string = \"\";\r\n            if (this.filtreBegacli.choisiNC === true) {\r\n                texte = \"NC\";\r\n            } \r\n            return texte;\r\n        }\r\n\r\n        private texteNombre(): string {\r\n            // si rien de coché, renvoie \"\"\r\n            // si au moins 1 case cochée, envoie le texte complet des nombres cochés\r\n            let texte: string = \"\";\r\n            _.forEach(this.filtreBegacli.listeNombres, (nombreBegacli: Modeles.Application.INombreBegacli) => {\r\n                if (nombreBegacli.choisi === true) {\r\n                    texte = this.ajoutercaractere(texte, nombreBegacli.nombre);\r\n                }\r\n            });\r\n            if (texte !== \"\") {\r\n                texte = \"Nbr Univers équipés= [\" + texte + \"]\";\r\n            }\r\n            return texte;\r\n        }\r\n\r\n        private texteUnivers(): string {\r\n            // si rien de coché, renvoie \"\"\r\n            // si au moins 1 case cochée, envoie le texte complet des univers\r\n            let texte: string = \"\";\r\n            _.forEach(this.filtreBegacli.listeLettres, (lettreBegacli: Modeles.Application.ILettreBegacli) => {\r\n                if (lettreBegacli.choisiMaj === true) {\r\n                    texte = this.ajoutercaractere(texte, lettreBegacli.lettreMaj);\r\n                }\r\n                if (lettreBegacli.choisiMin === true) {\r\n                    texte = this.ajoutercaractere(texte, lettreBegacli.lettreMin);\r\n                }\r\n            });\r\n            if (texte !== \"\") {\r\n                texte = \"Univers = [\" + texte + \"]\";\r\n            }\r\n            return texte;\r\n        }\r\n\r\n        private ajoutercaractere(texte: string, caractere: string): string {\r\n            if (texte === \"\") {\r\n                return caractere;\r\n            } else {\r\n                return texte + \",\" + caractere;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Récupération du filtre begacli\r\n         */\r\n        public getFiltreBegacli(): Modeles.Application.IFiltreBegacli {\r\n            return this.filtreBegacli;\r\n        }\r\n\r\n        /**\r\n         * conversion du filtre Begacli en expression régulière en fonction des cases cochées ...\r\n         */\r\n        private calculerExpReguliere(): string {\r\n            let texte: string = \"\";\r\n            let cpt: number = 0;\r\n\r\n            _.forEach(this.filtreBegacli.listeNombres, (nombreBegacli: Modeles.Application.INombreBegacli) => {\r\n                if (nombreBegacli.choisi === true) {\r\n                    texte = texte + nombreBegacli.nombre;\r\n                    cpt++;\r\n                }\r\n            });\r\n\r\n            if (texte === \"\") {\r\n                texte = \"..\";\r\n            } else {\r\n                texte = \"[\" + texte + \"].\";\r\n            }\r\n\r\n            _.forEach(this.filtreBegacli.listeLettres, (lettreBegacli: Modeles.Application.ILettreBegacli) => {\r\n                if (lettreBegacli.choisiMaj === true) {\r\n                    cpt++;\r\n                    texte = texte + lettreBegacli.lettreMaj;\r\n                } else if (lettreBegacli.choisiMin === true) {\r\n                    cpt++;\r\n                    texte = texte + lettreBegacli.lettreMin;\r\n                } else {\r\n                    texte = texte + \".\";\r\n                }\r\n            });\r\n\r\n            if (cpt === 0) {\r\n                texte = \"\";\r\n            }\r\n            return texte;\r\n        }\r\n\r\n        public getExpReguliere(): string {\r\n            this.expReguliere = this.calculerExpReguliere();\r\n            return this.expReguliere;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Interface de la classe IndicateurService\r\n     */\r\n    export interface IBegacliService {\r\n        getExpReguliere(): string;\r\n        getFiltreBegacli(): Modeles.Application.IFiltreBegacli;\r\n        getFiltreBegacliTexte(filtre: Modeles.Application.IFiltre);\r\n        getCasesCochees(): boolean;\r\n        setCasesDecochees();\r\n        completerUniversBegacli(relationCommerciale: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale):\r\n            Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale;\r\n        completerUniversBegacliClient(client: Modeles.Rest.PortefeuilleV1.client.IClient): Modeles.Rest.PortefeuilleV1.client.IClient;\r\n    }\r\n\r\n    app.service(BegacliService.CLASS_NAME, BegacliService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service applicatif de choix EDS\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de gerer le choix EDS\r\n     */\r\n    class ChoixEdsService implements IChoixEdsService {\r\n        public static CLASS_NAME = \"EventService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(ChoixEdsService.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [\r\n            Constantes.Inject.Services.contexteService,\r\n            Constantes.Inject.Angular.$q\r\n        ];\r\n\r\n        // Variables utiles\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private contexteService: Services.Application.IContexteService,\r\n            private $q: ng.IQService\r\n        ) { }\r\n\r\n        /**\r\n         * Methode permetant de récupérer les caractéristiques agent à partir du modèle MyWay.Model.Agent\r\n         * @param {MyWay.Model.Agent} agent\r\n         * @return {ng.IPromise<Modeles.Application.ICaracteristiquesAgent>}\r\n         */\r\n        public getCaracteristiquesAgent(agent: MyWay.Model.Agent): ng.IPromise<Modeles.Application.ICaracteristiquesAgent> {\r\n            let deferred = this.$q.defer<Modeles.Application.ICaracteristiquesAgent>();\r\n\r\n            this.contexteService.getContexte()\r\n                .then((contexte: Modeles.Application.IContexte) => {\r\n                    let caracteristiquesAgent = <Modeles.Application.ICaracteristiquesAgent>{};\r\n                    caracteristiquesAgent.designationAgent = agent.designation;\r\n                    caracteristiquesAgent.identifiantElementStructure = agent.idEds;\r\n                    caracteristiquesAgent.libelleFonction = agent.libelleFonction;\r\n                    caracteristiquesAgent.codeEtablissement = contexte.codeEtablissement;\r\n\r\n                    deferred.resolve(caracteristiquesAgent);\r\n                })\r\n                .catch((error: MyWay.Services.Erreur) => {\r\n                    deferred.reject(error);\r\n                });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe EventService\r\n     */\r\n    export interface IChoixEdsService {\r\n        getCaracteristiquesAgent(agent: MyWay.Model.Agent): ng.IPromise<Modeles.Application.ICaracteristiquesAgent>;\r\n    }\r\n\r\n    // Déclaration du service\r\n    app.service(\"ChoixEdsService\", ChoixEdsService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service applicatif de choix Utilisateur\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de gerer le choix utilisateur\r\n     */\r\n    class ChoixUtilisateurService implements IChoixUtilisateurService {\r\n        public static CLASS_NAME = \"ChoixUtilisateurService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(ChoixUtilisateurService.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [\r\n            Constantes.Inject.Services.gestionAffectationRestService,\r\n            Constantes.Inject.Services.rechercheAgentRestService,\r\n            Constantes.Inject.Services.edsNiveauInferieurService,\r\n            Constantes.Inject.Services.contexteService,\r\n            Constantes.Inject.Angular.$q\r\n        ];\r\n\r\n        // Variables utiles\r\n        private _edsSelectionne: Modeles.Application.IAgenceEds;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private gestionAffectationService: Services.Rest.AgentV2.gestionAffectation.IGestionAffectationService,\r\n            private rechercheAgentService: Services.Rest.AgentV2.recherche.IRechercheAgentService,\r\n            private edsNiveauInferieurService: Services.Rest.StructureV2.edsNiveauInferieur.IEdsNiveauInferieurService,\r\n            private contexteService: Services.Application.IContexteService,\r\n            private $q: ng.IQService\r\n        ) { }\r\n\r\n        /**\r\n         * Methode permetant de récupérer la liste des agences\r\n         * @param identifiantEds\r\n         * @return {MyWay.Services.IPromesse<Array<Modeles.Application.IAgence>>}\r\n         */\r\n        public rechercherListeAgence(identifiantEds: number): ng.IPromise<Array<Modeles.Application.IAgenceEds>> {\r\n            return this.contexteService.getContexte()\r\n                .then((contexte: Modeles.Application.IContexte) => {\r\n                    let query = <Modeles.Rest.AgentV2.gestionAffectation.IGestionAffectationQuery>{};\r\n                    query.codeEtablissement = contexte.codeEtablissement;\r\n                    query.codeAgentAffectation = identifiantEds;\r\n                    query.dateDebutPeriodeAffectation = moment().format(Constantes.Application.FORMAT_DATE_REST);\r\n                    //  query.niveau2 = \"1\";  // pas besoin\r\n\r\n                    return this.gestionAffectationService.getGestionAffectation(query);\r\n                }).then((gestionAffectation: Modeles.Rest.AgentV2.gestionAffectation.IGestionAffectation) => {\r\n                    let listeAgences = [];\r\n\r\n                    _.forEach(gestionAffectation.listeGestionAffectationAgent, (affectation: Modeles.Rest.AgentV2.gestionAffectation.IGestionAffectationAgent) => {\r\n                        let agence = <Modeles.Application.IAgenceEds>{};\r\n                        agence.id = affectation.identifiantEDSRattachement; // ou identifiantEDSAffectation\r\n                        agence.nomEds = affectation.libelleEDSRattachement;\r\n                        agence.affiche = false;\r\n                        listeAgences.push(agence);\r\n                    });\r\n                    return listeAgences;\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Methode permetant de récupérer la liste des agents\r\n         * @return {MyWay.Services.IPromesse<Array<Modeles.Application.ICaracteristiquesAgent>>}\r\n         */\r\n        public rechercherAgent(identifiantEdsAgence: number): ng.IPromise<Array<Modeles.Application.ICaracteristiquesAgent>> {\r\n            let deferred = this.$q.defer<Array<Modeles.Application.ICaracteristiquesAgent>>();\r\n\r\n            this.contexteService.getContexte()\r\n                .then((contexte: Modeles.Application.IContexte) => {\r\n                    let query = <Modeles.Rest.AgentV2.recherche.IRechercheAgentQuery>{};\r\n                    query.codeEtablissement = contexte.codeEtablissement;\r\n                    query.codeAction = Constantes.Rest.AGENT_V2_CODE_ACTION_1;\r\n                    //query.typeRecherche = Constantes.Rest.AGENT_V2_TYPE_RECHERCHE_AGENCE_RATTACHEMENT;\r\n                    query.typeRecherche = Constantes.Rest.AGENT_V2_TYPE_RECHERCHE_GROUPE_FONCTION;\r\n                    query.identifiantEDSRattachement = identifiantEdsAgence;\r\n                    query.groupeFonction = Constantes.Rest.AGENT_V2_RECHERCHE_GROUPE_FONCTION_BDR;\r\n\r\n                    return this.rechercheAgentService.getListeCaracteristiquesAgent(query);\r\n                })\r\n                .then((rechercheAgent: Modeles.Rest.AgentV2.recherche.IRechercheAgent) => {\r\n                    let listeEds: Array<Modeles.Application.ICaracteristiquesAgent> = [];\r\n\r\n                    _.forEach(rechercheAgent.listeAgents, (agent: Modeles.Rest.AgentV2.recherche.IAgent) => {\r\n                        if (agent.identifiantEDSHierarchique === identifiantEdsAgence) {\r\n                            let caracteristiquesAgent = <Modeles.Application.ICaracteristiquesAgent>{};\r\n                            caracteristiquesAgent.designationAgent = agent.designationAgent;\r\n                            caracteristiquesAgent.identifiantElementStructure = agent.identifiantElementStructure;\r\n                            caracteristiquesAgent.libelleFonction = agent.libelleFonction;\r\n                            caracteristiquesAgent.codeEtablissement = agent.codeEtablissement;\r\n                            caracteristiquesAgent.identifiantAgent = agent.identifiantAgent;\r\n                            listeEds.push(caracteristiquesAgent);\r\n                        }\r\n                    });\r\n\r\n                    deferred.resolve(listeEds);\r\n                })\r\n                .catch((error: MyWay.Services.Erreur) => {\r\n                    deferred.reject(error);\r\n                });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        // récupère tous les EDS de niveaux inférieurs\r\n        // on va retourner les postes fonctionnels dans .infoPosteFonctionnel et les autres dans .infoEDS qui seront affichés comme des dossiers pour descendre d'un niveau\r\n        public rechercherEdsInferieurs(edsAgence: Modeles.Application.IAgenceEds): ng.IPromise<Modeles.Application.IAgenceEds> {\r\n            let deferred = this.$q.defer<Modeles.Application.IAgenceEds>();\r\n\r\n            this.contexteService.getContexte()\r\n                .then((contexte: Modeles.Application.IContexte) => {\r\n                    let query = <Modeles.Rest.StructureV2.edsniveauinferieur.IEdsniveauinferieurQuery>{};\r\n                    query.codeEtablissement = contexte.codeEtablissement;\r\n                    query.identifiantInterneEDS = edsAgence.id;\r\n\r\n                    return this.edsNiveauInferieurService.getEdsNiveauInferieur(query);\r\n                })\r\n                .then((resultat: Modeles.Rest.StructureV2.edsniveauinferieur.IEdsNiveauInferieur) => {\r\n                    let listeEds: Modeles.Application.IAgenceEds[] = <Modeles.Application.IAgenceEds[]> [];\r\n\r\n                    // récupère aussi les autres éléments de structure dans .infoEDS et les afficher dans des dossiers. \r\n                    // Au clic on ira recharger la vue de sélection des PTFS avec cette nouvelle réponse.\r\n                    _.forEach(resultat.infoEDS, (infoEDS: Modeles.Rest.StructureV2.edsniveauinferieur.IInfoEDS) => {\r\n                        let caracteristiquesAgence = <Modeles.Application.IAgenceEds>{};\r\n                        caracteristiquesAgence.id = infoEDS.identifiantInterneEDS;\r\n                        caracteristiquesAgence.nomEds = infoEDS.libelleEDS;\r\n                        caracteristiquesAgence.agencesSuperieur = edsAgence;\r\n                        caracteristiquesAgence.agencesInferieur = null;\r\n                        caracteristiquesAgence.typeEDS = infoEDS.typeEDS;\r\n                        caracteristiquesAgence.libelleTypeEDS = infoEDS.libelleTypeEDS;\r\n                        caracteristiquesAgence.affiche = false;\r\n\r\n                        listeEds.push(caracteristiquesAgence);\r\n                    });\r\n                    edsAgence.agencesInferieur = listeEds;\r\n                    deferred.resolve(edsAgence);\r\n                })\r\n                .catch((error: MyWay.Services.Erreur) => {\r\n                    deferred.reject(error);\r\n                });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public get edsSelectionne(): Modeles.Application.IAgenceEds {\r\n            return this._edsSelectionne;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public set edsSelectionne(eds: Modeles.Application.IAgenceEds) {\r\n            this._edsSelectionne = eds;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe ChoixUtilisateurService\r\n     */\r\n    export interface IChoixUtilisateurService {\r\n        rechercherListeAgence(identifiantEds: number): ng.IPromise<Array<Modeles.Application.IAgenceEds>>;\r\n        rechercherAgent(identifiantEdsAgence: number): ng.IPromise<Array<Modeles.Application.ICaracteristiquesAgent>>;\r\n        rechercherEdsInferieurs(edsAgence: Modeles.Application.IAgenceEds): ng.IPromise<Modeles.Application.IAgenceEds>;\r\n        edsSelectionne: Modeles.Application.IAgenceEds;\r\n    }\r\n\r\n\r\n    // Déclaration du service\r\n    app.service(\"ChoixUtilisateurService\", ChoixUtilisateurService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Implémentation du service gérant le contexte de l'application\r\n     * @author: S0077481\r\n     */\r\n    class ContexteService implements IContexteService {\r\n        public static $inject: string[] = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$q,\r\n            Constantes.Inject.Angular.$location,\r\n            Constantes.Inject.Services.eventService\r\n        ];\r\n\r\n        public static CLASS_NAME: string = \"ContexteService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(ContexteService.CLASS_NAME);\r\n        private contexte: Modeles.Application.IContexte;\r\n        private authentificationInfo: MyWay.Services.Context.AuthentificationInfo;\r\n\r\n        constructor(\r\n            private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $q: ng.IQService,\r\n            private $location: ng.ILocationService,\r\n            private eventService: Services.Application.IEventService\r\n        ) {\r\n            \r\n        }\r\n\r\n        /**\r\n         * Retourne l'objet Authentification\r\n         */\r\n        public getAuthentification(): ng.IPromise<MyWay.Services.Context.AuthentificationInfo> {\r\n            ContexteService.logger.info(\">>> Appel de la méthode : ContexteService.getAuthentification <<<\");\r\n\r\n            if (this.authentificationInfo) {\r\n                return this.$q.when(this.authentificationInfo);\r\n            } else {\r\n                return this.setAuthentification().then(() => {\r\n                    return this.authentificationInfo;\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Methode permettant de recuperer les informations d'authentification\r\n         */\r\n        private setAuthentification(): ng.IPromise<MyWay.Services.Context.AuthentificationInfo> {\r\n            ContexteService.logger.info(\">>> Appel de la méthode : ContexteService.setAuthentification <<<\");\r\n            return this.serviceAgentExtended.getAuthentificationInfo().then((result: MyWay.Services.Context.AuthentificationInfo) => {\r\n                return this.authentificationInfo = result;\r\n            });\r\n\r\n        }\r\n\r\n        /**\r\n         * Mise en place du contexte LISA\r\n         * @author: S0005354\r\n         */\r\n        public setContexte(): ng.IPromise<Modeles.Application.IContexte> {\r\n            ContexteService.logger.debug(\">>> Appel de la méthode : ContexteService.setContexte <<<\");\r\n            let contexteRetour: Modeles.Application.IContexte = null;\r\n            if (this.contexte) {\r\n                contexteRetour = this.contexte;\r\n            } else if (this.authentificationInfo &&\r\n                this.authentificationInfo.agentConnecte) {\r\n                contexteRetour = <Modeles.Application.IContexte>{};\r\n                contexteRetour.identifiantUser = this.authentificationInfo.agentConnecte.referenceExterneAgent;\r\n                contexteRetour.codeEtablissement = this.authentificationInfo.codeEtablissement;\r\n                contexteRetour.designation = this.authentificationInfo.agentConnecte.designationLongueAgent;\r\n                contexteRetour.edsUser = +this.authentificationInfo.agentConnecte.numeroInterneEds;\r\n                contexteRetour.edsVisu = +this.authentificationInfo.agentConnecte.numeroInterneEds;\r\n                contexteRetour.edsSuperieurUser = +this.authentificationInfo.agentConnecte.numeroEdsSuperieur;\r\n                this.contexte = contexteRetour;\r\n            }\r\n            return this.$q.when(contexteRetour);\r\n        }\r\n\r\n        /**\r\n         * Récupération de l'objet IContexte\r\n         */\r\n        public getContexte(): ng.IPromise<Modeles.Application.IContexte> {\r\n            ContexteService.logger.debug(\">>> Appel de la méthode : ContexteApplication.getContexte <<<\");\r\n            if (this.contexte) {\r\n                return this.$q.when(this.contexte);\r\n            } else {\r\n                return this.setContexte().then(() => {\r\n                    return this.$q.when(this.contexte);\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public getDesignation(): string {\r\n            return (this.contexte) ? this.contexte.designation : \"\";\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param edsVisu\r\n         */\r\n        public setEdsVisu(edsVisu: number): void {\r\n            this.contexte.edsVisu = edsVisu;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param edsVisu\r\n         */\r\n        public setestVueMultiSuiviPar(estVueMultiSuiviPar: boolean): void {\r\n            this.contexte.estVueMultiSuiviPar = estVueMultiSuiviPar;\r\n        }\r\n\r\n        public ajoutPourDebranchementSyntheseClient(identifiantPersonne: string, typeSynthese: string): ng.IPromise<any> {\r\n            var tabPromesses = [];\r\n\r\n            let listeClesContexteAEffacer: Array<string> = [\r\n                Constantes.Contexte.IDENTIFIANT_PERSONNE,\r\n                Constantes.Contexte.TYPE_SYNTHESE];\r\n\r\n            return this.viderContexteDebranchement(listeClesContexteAEffacer)\r\n                .then(() => {\r\n                    //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.IDENTIFIANT_PERSONNE, identifiantPersonne));\r\n                    //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.TYPE_SYNTHESE, typeSynthese));\r\n                    tabPromesses.push(this.serviceAgentExtended.addToContext(Constantes.Contexte.IDENTIFIANT_PERSONNE, identifiantPersonne));\r\n                    tabPromesses.push(this.serviceAgentExtended.addToContext(Constantes.Contexte.TYPE_SYNTHESE, typeSynthese));\r\n                    return this.$q.all(tabPromesses)\r\n                        .catch((erreur: MyWay.Services.Erreur) => {\r\n                            ContexteService.logger.error(\"Erreur lors de l'ajout dans le contexte pour l'appel de synthèse client\", erreur);\r\n                            throw erreur;\r\n                        });\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Methode permetant d'ajouter les données utiles au débranchement vers Synthèse client\r\n         * @param {string} identifiantPersonne\r\n         * @returns {ng.IPromise<any>}\r\n         */\r\n        public ajouterDonneesDebranchementSyntheseClient(contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille, typeSynthese: string): ng.IPromise<any> {\r\n            var tabPromesses = [];\r\n\r\n            if (!contexteGererPortefeuille) {\r\n                return this.$q.reject(\r\n                    new MyWay.Services.Erreur(\"Paramètre contexteGererPortefeuille absent à tort => Débranchement vers Synthèse Client impossible.\")\r\n                );\r\n            }\r\n\r\n            let listeClesContexteAEffacer: Array<string> = [\r\n                Constantes.Contexte.CONTEXTE_GERR_PORTF,\r\n                Constantes.Contexte.IDENTIFIANT_PERSONNE,\r\n                Constantes.Contexte.TYPE_SYNTHESE];\r\n\r\n            return this.viderContexteDebranchement(listeClesContexteAEffacer)\r\n                .then(() => {\r\n                    //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));\r\n                    //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.IDENTIFIANT_PERSONNE, contexteGererPortefeuille.identifiantPersonne));\r\n                    //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.TYPE_SYNTHESE, typeSynthese));\r\n                    tabPromesses.push(this.serviceAgentExtended.addToContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));\r\n                    tabPromesses.push(this.serviceAgentExtended.addToContext(Constantes.Contexte.IDENTIFIANT_PERSONNE, contexteGererPortefeuille.identifiantPersonne));\r\n                    tabPromesses.push(this.serviceAgentExtended.addToContext(Constantes.Contexte.TYPE_SYNTHESE, typeSynthese));\r\n\r\n                    return this.$q.all(tabPromesses)\r\n                        .catch((erreur: MyWay.Services.Erreur) => {\r\n                            ContexteService.logger.error(\"Erreur lors de l'ajout dans le contexte du contrat d'entrée de synthése client\", erreur);\r\n                            throw erreur;\r\n                        });\r\n                });\r\n        }\r\n                        \r\n        /**\r\n         * Methode permettant d'ajouter les données utiles au débranchement vers la revue de portefeuille d'un client\r\n         * @param contexteGererPortefeuille\r\n         */\r\n        public ajouterDonneesDebranchementRevueClient(contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille): ng.IPromise<void> {\r\n            var tabPromesses = [];\r\n\r\n            if (!contexteGererPortefeuille) {\r\n                return this.$q.reject(new MyWay.Services.Erreur(\"Paramètre contexteGererPortefeuille absent à tort => Débranchement vers Revue Client impossible.\"));\r\n            }\r\n\r\n            let listeClesContexteAEffacer: Array<string> = [\r\n                Constantes.Contexte.CONTEXTE_GERR_PORTF,\r\n                Constantes.Contexte.CONTEXTE_VERS_REVUE\r\n            ];\r\n\r\n            return this.viderContexteDebranchement(listeClesContexteAEffacer)\r\n                .then(() => {\r\n                    let contextePourRevue: Modeles.Application.IContexteVersRevue = this.alimenterContexteVersRevue(contexteGererPortefeuille);\r\n                    //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));\r\n                    //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_VERS_REVUE, contextePourRevue));\r\n                    tabPromesses.push(this.serviceAgentExtended.addToContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));\r\n                    tabPromesses.push(this.serviceAgentExtended.addToContext(Constantes.Contexte.CONTEXTE_VERS_REVUE, contextePourRevue));\r\n\r\n                    return this.$q.all(tabPromesses)\r\n                        .catch((erreur: MyWay.Services.Erreur) => {\r\n                            ContexteService.logger.error(\"Erreur lors de l'ajout dans le contexte du contrat d'entrée de la revue client\", erreur);\r\n                            throw erreur;\r\n                        });\r\n                });\r\n        }\r\n        \r\n\r\n        /**\r\n         * Methode permettant d'ajouter les données utiles au débranchement vers le bilan revue de portefeuille d'une relation économique\r\n         * @param contexteGererPortefeuille\r\n         */\r\n        public ajouterDonneesDebranchementBilanRevueRelationEco(contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille): ng.IPromise<void> {\r\n            var tabPromesses = [];\r\n\r\n            if (!contexteGererPortefeuille) {\r\n                return this.$q.reject(new MyWay.Services.Erreur(\"Paramètre contexteGererPortefeuille absent à tort => Débranchement vers Bilan Revue Relation éco impossible.\"));\r\n            }\r\n\r\n            let listeClesContexteAEffacer: Array<string> = [\r\n                Constantes.Contexte.CONTEXTE_GERR_PORTF,\r\n                Constantes.Contexte.CONTEXTE_VERS_REVUE\r\n            ];\r\n\r\n            return this.viderContexteDebranchement(listeClesContexteAEffacer)\r\n                .then(() => {\r\n                    let contextePourRevue: Modeles.Application.IContexteVersRevue = this.alimenterContexteVersRevue(contexteGererPortefeuille);\r\n\r\n                    //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));\r\n                    //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_VERS_REVUE, contextePourRevue));\r\n                    tabPromesses.push(this.serviceAgentExtended.addToContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));\r\n                    tabPromesses.push(this.serviceAgentExtended.addToContext(Constantes.Contexte.CONTEXTE_VERS_REVUE, contextePourRevue));\r\n\r\n                    return this.$q.all(tabPromesses)\r\n                        .catch((erreur: MyWay.Services.Erreur) => {\r\n                            ContexteService.logger.error(\"Erreur lors de l'ajout dans le contexte du contrat d'entrée du bilan de revues d'une relation économique\", erreur);\r\n                            throw erreur;\r\n                        });\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Methode permettant d'ajouter les données utiles au débranchement vers le bilan revue de portefeuille\r\n         * @param contexteGererPortefeuille\r\n         */\r\n        public ajouterDonneesDebranchementBilanRevuePortefeuille(contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille): ng.IPromise<void> {\r\n            var tabPromesses = [];\r\n\r\n            if (!contexteGererPortefeuille) {\r\n                return this.$q.reject(new MyWay.Services.Erreur(\"Paramètre contexteGererPortefeuille absent à tort => Débranchement vers Bilan Revue Portefeuille impossible.\"));\r\n            }\r\n\r\n            let listeClesContexteAEffacer: Array<string> = [\r\n                Constantes.Contexte.CONTEXTE_GERR_PORTF,\r\n                Constantes.Contexte.CONTEXTE_VERS_REVUE,\r\n                Constantes.Contexte.CONTEXTE_EDS_PORTEFEUILLES\r\n            ];\r\n\r\n            return this.viderContexteDebranchement(listeClesContexteAEffacer)\r\n                .then(() => {\r\n                    let contextePourRevue: Modeles.Application.IContexteVersRevue = this.alimenterContexteVersRevue(contexteGererPortefeuille);\r\n                    let contextePourEdsPortefeuilles: Modeles.Application.IContexteVersEdsPortefeuilles = this.alimenterContexteVersEsdPortefeuilles(contexteGererPortefeuille);\r\n                    //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));\r\n                    //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_VERS_REVUE, contextePourRevue));\r\n                    //tabPromesses.push(this.serviceAgentExtended.addToSharedContext(Constantes.Contexte.CONTEXTE_EDS_PORTEFEUILLES, JSON.stringify(contextePourEdsPortefeuilles)));\r\n                    tabPromesses.push(this.serviceAgentExtended.addToContext(Constantes.Contexte.CONTEXTE_GERR_PORTF, contexteGererPortefeuille));\r\n                    tabPromesses.push(this.serviceAgentExtended.addToContext(Constantes.Contexte.CONTEXTE_VERS_REVUE, contextePourRevue));\r\n                    tabPromesses.push(this.serviceAgentExtended.addToContext(Constantes.Contexte.CONTEXTE_EDS_PORTEFEUILLES, JSON.stringify(contextePourEdsPortefeuilles)));\r\n\r\n                    return this.$q.all(tabPromesses)\r\n                        .catch((erreur: MyWay.Services.Erreur) => {\r\n                            ContexteService.logger.error(\"Erreur lors de l'ajout dans le contexte du contrat d'entrée du bilan de revues d'une liste de portefeuilles\", erreur);\r\n                            throw erreur;\r\n                        });\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Supprime le(s) contexte(s) dont l'application n'a plus besoin.\r\n         * @param listeClesAEffacer\r\n         */\r\n        public supprimerContexteDevenuInutile(listeClesAEffacer: Array<string>): ng.IPromise<void> {\r\n            return this.viderContexteDebranchement(listeClesAEffacer)\r\n                .then(() => {\r\n                    ContexteService.logger.info(\"Suppression du contexte réalisée avec succès.\");\r\n                })\r\n                .catch((erreur: MyWay.Services.Erreur) => {\r\n                    ContexteService.logger.error(\"Erreur lors de la suppression du contexte\", erreur);\r\n                    throw erreur;\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Methode permettant de récupérer du contexte de gestion du retour\r\n         * @returns {ng.IPromise<Modeles.Application.IObjetEdsChoisi>}\r\n         */\r\n        public recupererRetourDebranchement(): ng.IPromise<Modeles.Application.IContexteGererPortefeuille> {\r\n            return this.serviceAgentExtended.getFromContext(Constantes.Contexte.CONTEXTE_GERR_PORTF).then((contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille) => {\r\n                return this.$q.when(contexteGererPortefeuille);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de vérifier si on est dans un contexte PCM\r\n         * @returns {ng.IPromise<boolean>}\r\n         */\r\n        public isPCM(): ng.IPromise<boolean> {\r\n            ContexteService.logger.info(\"Vérification intéropérabilité application bancaire\");\r\n            return <ng.IPromise<boolean>>this.serviceAgentExtended.Capacites.getCapacite(MyWay.Services.Capacites.REGLE.INTEROP_APPLI_BANCAIRE);\r\n        }\r\n\r\n        /**\r\n         * Supprime du contexte toutes les clés passées en paramètre\r\n         * @param listeClesAEffacer\r\n         */\r\n        private viderContexteDebranchement(listeClesAEffacer: Array<string>): ng.IPromise<void> {\r\n            var tabPromesses: ng.IPromise<void>[] = [];\r\n\r\n            _.forEach(listeClesAEffacer, (cleLue: string) => {\r\n                if (cleLue) {\r\n                    //tabPromesses.push(this.serviceAgentExtended.removeFromSharedContext(cleLue));\r\n                    // on ne mets plus rien dans le shared contexte. Il n'y a pas de méthode equivalente au remove shared context donc on met \"null\" dans la valeur\r\n                    tabPromesses.push(this.serviceAgentExtended.addToContext(cleLue, null));\r\n                }\r\n            });\r\n\r\n            return this.$q.all(tabPromesses).then((resultats: string[]) => {\r\n                return this.$q.when();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Alimente le contexte nécessaire au fonctionnement de l'application Revue de Portefeuilles à partir de celui de l'application Animer les Portefeuilles\r\n         * @param contexteGererPortefeuille\r\n         */\r\n        private alimenterContexteVersRevue(contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille): Modeles.Application.IContexteVersRevue {\r\n            let resultat: Modeles.Application.IContexteVersRevue;\r\n\r\n            if (contexteGererPortefeuille) {\r\n                resultat = <Modeles.Application.IContexteVersRevue>{};\r\n\r\n                //On ne crée les propriétés que si la source est renseignée.\r\n                if (contexteGererPortefeuille.identifiantPersonne) {\r\n                    resultat.identifiantPersonne = contexteGererPortefeuille.identifiantPersonne;\r\n                }\r\n\r\n                resultat.estClient = contexteGererPortefeuille.estClient;\r\n\r\n                if (contexteGererPortefeuille.raisonSociale) {\r\n                    resultat.raisonSociale = contexteGererPortefeuille.raisonSociale;\r\n                }\r\n\r\n                if (contexteGererPortefeuille.identifiantRelation) {\r\n                    resultat.identifiantRelation = contexteGererPortefeuille.identifiantRelation;\r\n                }\r\n\r\n                if (contexteGererPortefeuille.libelleRelation) {\r\n                    resultat.libelleRelation = contexteGererPortefeuille.libelleRelation;\r\n                }\r\n\r\n                if (contexteGererPortefeuille.siren) {\r\n                    resultat.siren = contexteGererPortefeuille.siren;\r\n                }\r\n                if (contexteGererPortefeuille.objetEdsVisu) {\r\n                    if (contexteGererPortefeuille.objetEdsVisu.objCaractAgent) {\r\n                        resultat.idEds = contexteGererPortefeuille.objetEdsVisu.objCaractAgent.identifiantElementStructure;\r\n                        resultat.designationAgent = contexteGererPortefeuille.objetEdsVisu.objCaractAgent.designationAgent;\r\n                    }\r\n                    resultat.nombreTotalPortefeuilles = contexteGererPortefeuille.objetEdsVisu.nombrePortefeuilleTotalAgent;\r\n                    resultat.listeIdsPortefeuille = contexteGererPortefeuille.objetEdsVisu.listePtfVisu;\r\n                }\r\n                resultat.typeForcage = contexteGererPortefeuille.typeForcage;\r\n\r\n                resultat.listeClientAffiches = contexteGererPortefeuille.listeClientAffiches;\r\n            }\r\n\r\n            return resultat;\r\n        }\r\n\r\n        /**\r\n         * Alimente le contexte nécessaire au fonctionnement de l'application Revue de Portefeuilles à partir de celui de l'application Animer les Portefeuilles\r\n         * @param contexteGererPortefeuille\r\n         */\r\n        private alimenterContexteVersEsdPortefeuilles(contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille): Modeles.Application.IContexteVersEdsPortefeuilles {\r\n            let resultat: Modeles.Application.IContexteVersEdsPortefeuilles;\r\n            resultat = <Modeles.Application.IContexteVersEdsPortefeuilles>{};\r\n            if (contexteGererPortefeuille) {\r\n                if (contexteGererPortefeuille.objetEdsVisu) {\r\n                    if (contexteGererPortefeuille.objetEdsVisu.objCaractAgent) {\r\n                        resultat.idEds = contexteGererPortefeuille.objetEdsVisu.objCaractAgent.identifiantElementStructure;\r\n                    }\r\n                    resultat.listeIdsPortefeuille = contexteGererPortefeuille.objetEdsVisu.listePtfVisu;\r\n                }\r\n            }\r\n            return resultat;\r\n        }\r\n\r\n        public tracerSuiviAction(logger: MyWay.Services.Loggers.ILogger, action: string): void {\r\n            logger.warn(\"ActionBouton \" + action);\r\n        }\r\n\r\n\r\n        /*\r\n         * Trace le suivi d'une action remarquable\r\n         * @param action {string} action associée\r\n         */\r\n        public tracerSuiviActionPromise(action: string): ng.IPromise<number> {\r\n            var traceSuivi: MyWay.Services.TraceSuivi.TraceSuiviModel = {\r\n                action: action,\r\n                agentCode: null,\r\n                agentEdsCode: null,\r\n                agentEdsInternalRef: null,\r\n                agentEdsType: null,\r\n                computerEdsInternalId: null,\r\n                computerSi: null,\r\n                data: null,\r\n                dateUse: null,\r\n                deviceId: null,\r\n                deviceType: null,\r\n                establishment: null,\r\n                processIdBusiness: null,\r\n                processIdCurrent: null,\r\n                processIdMaster: null,\r\n                resultStep: null,\r\n                state: null,\r\n                stepIdCurrent: null,\r\n                timezone: null\r\n            };\r\n            return <ng.IPromise<number>>this.serviceAgentExtended.TraceSuivi.tracer(traceSuivi);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n    /**\r\n     * Service contenant des méthodes utiles pour gérer le contexte applicatif\r\n     * @author: S0005354\r\n     */\r\n    export interface IContexteService {\r\n        /**\r\n         * Chargement contexte habilitation\r\n         *  -> données d'authentification\r\n         *  -> Habilitations\r\n         *  -> Données délocalisées\r\n         */\r\n        getContexte(): ng.IPromise<Modeles.Application.IContexte>;\r\n        getAuthentification(): ng.IPromise<MyWay.Services.Context.AuthentificationInfo>;\r\n        getDesignation(): string;\r\n        ajoutPourDebranchementSyntheseClient(identifiantPersonne: string, typeSynthese: string): ng.IPromise<any>;\r\n        ajouterDonneesDebranchementSyntheseClient(contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille, typeSynthese : string): ng.IPromise<any>;\r\n        ajouterDonneesDebranchementRevueClient(contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille): ng.IPromise<void>;\r\n        recupererRetourDebranchement(): ng.IPromise<Modeles.Application.IContexteGererPortefeuille>;\r\n        supprimerContexteDevenuInutile(listeClesAEffacer: Array<string>): ng.IPromise<void>;\r\n        ajouterDonneesDebranchementBilanRevueRelationEco(contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille): ng.IPromise<void>;\r\n        ajouterDonneesDebranchementBilanRevuePortefeuille(contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille): ng.IPromise<void>;\r\n        setEdsVisu(edsVisu: number): void;\r\n        setestVueMultiSuiviPar(estVueMultiSuiviPar: boolean): void;\r\n        isPCM(): ng.IPromise<boolean>;\r\n        tracerSuiviAction(logger: MyWay.Services.Loggers.ILogger, action: string): void;\r\n        tracerSuiviActionPromise(action: string): ng.IPromise<number>;\r\n    }\r\n    app.service(ContexteService.CLASS_NAME, ContexteService);\r\n}\r\n","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service applicatif de gestion d'événement\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    let loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant d'exposer tout ou partie de fonctions de certains controleurs\r\n     */\r\n    class EventService implements IEventService {\r\n        public static CLASS_NAME = \"EventService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(EventService.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [\r\n            Constantes.Inject.Angular.$q\r\n        ];\r\n\r\n        // Variables utiles\r\n        private clientsControleur: Controleurs.ClientsControleur;\r\n        private indexControleur: Controleurs.IndexControleur;\r\n        private portefeuilleControleur: Controleurs.PortefeuilleControleur;\r\n        private pfLigneRelationEcoControleur: Controleurs.PfLigneRelationEcoControleur;\r\n        private pfDiagrammeDonutControleur: Controleurs.PfDiagrammeDonutControleur;\r\n        private pfChoixPortefeuilleControleur: Controleurs.PfChoixPortefeuilleControleur;\r\n        \r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $q: ng.IQService) {\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier le PfDiagrammeDonutControleur\r\n         * @param PfDiagrammeDonutControleur\r\n         * @return {void}\r\n         */\r\n        public setPfDiagrammeDonutControleur(pfDiagrammeDonutControleur: Controleurs.PfDiagrammeDonutControleur): void {\r\n            this.pfDiagrammeDonutControleur = pfDiagrammeDonutControleur;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public initialiserPfDiagrammeDonutControleur(): void {\r\n            if (this.pfDiagrammeDonutControleur) {\r\n                this.pfDiagrammeDonutControleur.initialiser();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier le portefeuilleControleur\r\n         * @param portefeuilleControleur\r\n         * @return {void}\r\n         */\r\n        public setPortefeuilleControleur(portefeuilleControleur: Controleurs.PortefeuilleControleur): void {\r\n            this.portefeuilleControleur = portefeuilleControleur;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier le pfLigneRelationEcoControleur\r\n         * @param pfLigneRelationEcoControleur\r\n         * @return {void}\r\n         */\r\n        public setPfLigneRelationEcoControleur(pfLigneRelationEcoControleur: Controleurs.PfLigneRelationEcoControleur): void {\r\n            this.pfLigneRelationEcoControleur = pfLigneRelationEcoControleur;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param listeIndicateurs\r\n         */\r\n        public reInitialiserLigneRelationEcoPfLigneRelationEcoControleur(listeIndicateurs: Array<Modeles.Application.IIndicateurChoix>): void {\r\n            if (this.pfLigneRelationEcoControleur) {\r\n                this.pfLigneRelationEcoControleur.reInitialiser(listeIndicateurs);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier le clientControleur\r\n         * @param clientsControleur\r\n         * @return {void}\r\n         */\r\n        public setClientsControleur(clientsControleur: Controleurs.ClientsControleur): void {\r\n            this.clientsControleur = clientsControleur;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'indexControleur\r\n         * @param indexControleur\r\n         * @return {void}\r\n         */\r\n        public setIndexControleur(indexControleur: Controleurs.IndexControleur): void {\r\n            this.indexControleur = indexControleur;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'indexControleur\r\n         * @param indexControleur\r\n         * @return {void}\r\n         */\r\n        public setChoixPortfeuilleControleur(choixPortfeilleControleur: Controleurs.PfChoixPortefeuilleControleur): void {\r\n            this.pfChoixPortefeuilleControleur = choixPortfeilleControleur;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public initialiserListePortfeuilleIndexControleur(): ng.IPromise<void> {\r\n            if (this.pfChoixPortefeuilleControleur) {\r\n                return this.indexControleur.initListePortefeuilles();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param edsChoisi\r\n         * @param contexte\r\n         * @param listePtfActifs\r\n         */\r\n        public majDonneesDonneesEdsIndexControleur(edsChoisi: Modeles.Application.ICaracteristiquesAgent,\r\n            contexte: Modeles.Application.IContexte, listePtfActifs: Array<number>): ng.IPromise<void> {\r\n            if (this.indexControleur) {\r\n                return this.indexControleur.majDonneesDonneesEds(edsChoisi, contexte, listePtfActifs);\r\n            } else {\r\n                return this.$q.when();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param estHabilite\r\n         */\r\n        public initialiserHabilitationChoixAgentIndexControleur(estHabilite: boolean): void {\r\n            if (this.indexControleur) {\r\n                this.indexControleur.initialiserHabilitationChoixAgent(estHabilite);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param estHabilite\r\n         */\r\n        public initialiserHabilitationChoixEDSIndexControleur(estHabilite: boolean): void {\r\n            if (this.indexControleur) {\r\n                this.indexControleur.initialiserHabilitationChoixEDS(estHabilite);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'ouvrir le volet de choix de portefeuille via l'indexControleur\r\n         * @param indexControleur\r\n         * @return {void}\r\n         */\r\n        public ouvrirVoletChoixPortefeuilleIndexControleur(): void {\r\n            if (this.indexControleur) {\r\n                this.indexControleur.ouvrirChoixPortefeuille();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Permet d'effectuer le filtrage relation economique sur le tableau client\r\n         * @param idRelationFiltre\r\n         * @returns {void}\r\n         */\r\n        public filtrageTableauClientClientsControleur(idRelationFiltre: string): void {\r\n            if (this.clientsControleur) {\r\n                this.clientsControleur.filtrageTableauClient(idRelationFiltre);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param typeForcage\r\n         */\r\n        public initialiserListeRelationEtClient(typeForcage: Enum.PageClients.TYPE_FORCAGE): ng.IPromise<void> {\r\n            if (this.clientsControleur) {\r\n                return this.clientsControleur.initialiser(typeForcage);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public initialiserVueGlobale(): ng.IPromise<void> {\r\n            if (this.portefeuilleControleur) {\r\n                return this.portefeuilleControleur.initialiserStatistiques();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Permet de supprimer tous les filtres d'un tableau via le clients controleur\r\n         * @returns {void}\r\n         */\r\n        public supprimerTousLesFiltresClientsControleur(): void {\r\n            if (this.clientsControleur) {\r\n                this.clientsControleur.supprimerTousLesFiltres();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public reinitInitStatsVueGlobale(): void {\r\n            if (this.portefeuilleControleur) {\r\n                this.portefeuilleControleur.reinitInitStats();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public initListePortefeuilles(): ng.IPromise<void> {\r\n            if (this.indexControleur) {\r\n                return this.indexControleur.initListePortefeuilles();\r\n            } else {\r\n                return this.$q.when();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public chargerListePortefeilleDropDown(): void {\r\n            if (this.indexControleur) {\r\n                this.indexControleur.chargerListePortefeilleDropDown();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public setEstVueMultiGererPar(etat: boolean): void {\r\n            if (this.portefeuilleControleur) {\r\n                this.portefeuilleControleur.setEstVueMultiSuiviPar(etat);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe EventService\r\n     */\r\n    export interface IEventService {\r\n        setPfDiagrammeDonutControleur(pfDiagrammeDonutControleur: Controleurs.PfDiagrammeDonutControleur): void;\r\n        initialiserPfDiagrammeDonutControleur(): void;\r\n        setPfLigneRelationEcoControleur(pfLigneRelationEcoControleur: Controleurs.PfLigneRelationEcoControleur): void;\r\n        reInitialiserLigneRelationEcoPfLigneRelationEcoControleur(listeIndicateurs: Array<Modeles.Application.IIndicateurChoix>): void;\r\n        setClientsControleur(clientsControleur: Controleurs.ClientsControleur): void;\r\n        filtrageTableauClientClientsControleur(idRelationFiltre: string): void;\r\n        setIndexControleur(indexControleur: Controleurs.IndexControleur): void;\r\n        setChoixPortfeuilleControleur(choixPortfeilleControleur: Controleurs.PfChoixPortefeuilleControleur): void;\r\n        initialiserListePortfeuilleIndexControleur(): ng.IPromise<void>;\r\n        initialiserHabilitationChoixAgentIndexControleur(estHabilite: boolean): void;\r\n        initialiserHabilitationChoixEDSIndexControleur(estHabilite: boolean): void;\r\n        ouvrirVoletChoixPortefeuilleIndexControleur(): void;\r\n        initialiserListeRelationEtClient(typeForcage: Enum.PageClients.TYPE_FORCAGE): ng.IPromise<void>;\r\n        supprimerTousLesFiltresClientsControleur(): void;\r\n        setPortefeuilleControleur(portefeuilleControleur: Controleurs.PortefeuilleControleur): void;\r\n        initialiserVueGlobale(): ng.IPromise<void>;\r\n        reinitInitStatsVueGlobale(): void;\r\n        majDonneesDonneesEdsIndexControleur(edsChoisi: Modeles.Application.ICaracteristiquesAgent, contexte: Modeles.Application.IContexte, listePtfActifs: Array<number>): ng.IPromise<void>;\r\n        initListePortefeuilles(): ng.IPromise<void>;\r\n        chargerListePortefeilleDropDown(): void;\r\n        setEstVueMultiGererPar(etat: boolean): void;\r\n    }\r\n\r\n    // Déclaration du service\r\n    app.service(EventService.CLASS_NAME, EventService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service applicatif de choix EDS\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de gerer le choix EDS\r\n     */\r\n    export class ExportService {\r\n        public static CLASS_NAME = \"ExportService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(ExportService.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject: string[] = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            \"MwNotificationService\"\r\n        ];\r\n\r\n        constructor(\r\n            private serviceAgent: MyWay.Services.ServiceAgentExtended,\r\n            private mwNotificationService: MyWay.UI.IMwNotificationService) {\r\n        }\r\n\r\n        /**\r\n         * Export du tableau affiché dans un fichier CSV\r\n         * @param tableauExport Le tableau à exporter\r\n         * @param nomFichier Le nom du fichier d'export (la date sera ajoutée à la fin du nom indiqué)\r\n         */\r\n        private exporterCSV(tableauExport: MyWay.Services.Export.IDonneesAExporter, nomFichier: string): ng.IPromise<void> {\r\n            let optionSup: MyWay.Services.Export.IOptionsExportFichier = {\r\n                nomFichier: nomFichier\r\n            };\r\n\r\n            /** Création du fichier .csv (format Excel) */\r\n            return <ng.IPromise<void>>this.serviceAgent.Export.exporterFichier(\r\n                tableauExport, MyWay.Services.Export.FORMAT_FICHIER.CSV, optionSup).then(() => {\r\n                this.mwNotificationService.showNotification(\"Export du tableau réussi\");\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Formatage CSV\r\n         * @param pContenu\r\n         */\r\n        private chargerDonneesTableau(pContenu: Array<Array<string | number> | Object>): Array<MyWay.Services.Export.ILigne> {\r\n            let ligneDonnees: Array<MyWay.Services.Export.ILigne> = [];\r\n            _.forEach(pContenu, (ligneTableauJson: Array<string | number> | Object) => {\r\n                let maLigne: MyWay.Services.Export.ILigne = { ligne: [] };\r\n                for (let i in ligneTableauJson) {\r\n                    let cell: MyWay.Services.Export.ICellule = <MyWay.Services.Export.ICellule>{};\r\n                    cell.cellule = ligneTableauJson[i];\r\n                    maLigne.ligne.push(cell);\r\n                }\r\n                ligneDonnees.push(maLigne);\r\n            });\r\n            return ligneDonnees;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param listeEntetes\r\n         * @param donneesExport\r\n         * @param fichierExport\r\n         */\r\n        public genererFichierExport(\r\n            listeEntetes: Array<string>,\r\n            donneesExport: Array<Array<string | number> | Object>,\r\n            fichierExport: string): ng.IPromise<void> {\r\n            let tableauExport: MyWay.Services.Export.IDonneesAExporter;\r\n            tableauExport = {\r\n                entetes: listeEntetes,\r\n                contenu: this.chargerDonneesTableau(donneesExport)\r\n            };\r\n            return this.exporterCSV(tableauExport, fichierExport);\r\n        }\r\n    }\r\n    app.service(ExportService.CLASS_NAME, ExportService);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service de gestion des filtres\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service de gestion de la liste des clients\r\n     */\r\n    class FiltreService implements IFiltreService {\r\n        public static CLASS_NAME = \"IndicateurService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(FiltreService.CLASS_NAME);\r\n\r\n        private filtresClients: Modeles.Application.IFiltre[];\r\n        private filtresRelationsEco: Modeles.Application.IFiltre[];\r\n\r\n        // Proprietés\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [\r\n            Constantes.Inject.Services.eventService,\r\n            Constantes.Inject.Services.begacliService\r\n        ];\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private eventService: Services.Application.IEventService,\r\n            private begacliService: Services.Application.IBegacliService\r\n        ) {\r\n            this.filtresClients = [];\r\n            this.filtresRelationsEco = [];\r\n        } \r\n\r\n        /**\r\n         * Methode qui permet de filtrer une liste de client à partir d'une liste de filtre\r\n         * @param {Array<Modeles.Application.IClient>} listeDeClient\r\n         * @param {Array<Modeles.Application.IFiltre>} listeFiltres\r\n         * @returns {Array<Modeles.Application.IClient>}\r\n         */\r\n        public filtrerListeClients(\r\n            listeDeClient: Array<Modeles.Application.IClient>,\r\n            listeFiltres: Array<Modeles.Application.IFiltre>): Array<Modeles.Application.IClient> {\r\n            if (listeFiltres.length > 0) {\r\n                return _.filter(listeDeClient, (client: Modeles.Application.IClient) => {\r\n                    return this.estConformeAuxCriteres(this.creerTableauResultatsFiltre(client.listeIndicateurs, listeFiltres, true), listeFiltres);\r\n                });\r\n            } else {\r\n                return listeDeClient;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de filtrer une liste de relation économique à partir d'une liste de filtre\r\n         * @param {Array<Modeles.Application.IRelationEconomique>} listeRelationsEco\r\n         * @param {Array<Modeles.Application.IFiltre>} listeFiltres\r\n         * @returns {Array<Modeles.Application.IRelationEconomique>}\r\n         */\r\n        public filtrerListeRelationsEco(\r\n            listeRelationsEco: Array<Modeles.Application.IRelationEconomique>,\r\n            listeFiltres: Array<Modeles.Application.IFiltre>): Array<Modeles.Application.IRelationEconomique> {\r\n            if (listeFiltres.length > 0) {\r\n                return _.filter(listeRelationsEco, (relationEco: Modeles.Application.IRelationEconomique) => {\r\n                    return this.estConformeAuxCriteres(this.creerTableauResultatsFiltre(relationEco.listeIndicateurs, listeFiltres, false), listeFiltres);\r\n                });\r\n            } else {\r\n                return listeRelationsEco;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de savoir si une liste de resultats de filtre d'un client est conforme ou non\r\n         * @param {Array<boolean>} listeResultatsFiltre\r\n         * @returns {boolean}\r\n         */\r\n        private estConformeAuxCriteres(listeResultatsFiltre: Array<boolean>, listeFiltres: Array<Modeles.Application.IFiltre>): boolean {\r\n            if (listeFiltres.length === 1) {\r\n                return listeResultatsFiltre[0];\r\n            } else {\r\n                switch (listeFiltres[1].operateur) {\r\n                    case Enum.Filtre.OPERATEUR.ET:\r\n                        // Faux s'il y a au moins un resultat faux dans la liste des resultats\r\n                        let trouveResultatFaux = _.find(listeResultatsFiltre, (resultat: boolean) => {\r\n                            return resultat === false;\r\n                        });\r\n                        return trouveResultatFaux === false ? false : true;\r\n                    case Enum.Filtre.OPERATEUR.OU:\r\n                        // Vrai s'il y a au moins un resultat vrai dans la liste des resultats\r\n                        let trouveResultatVrai = _.find(listeResultatsFiltre, (resultat: boolean) => {\r\n                            return resultat === true;\r\n                        });\r\n                        return trouveResultatVrai ? true : false;\r\n                    default:\r\n                        return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de creer le tableau de resultats des filtres sur un client\r\n         * @param {Array<Modeles.Application.IIndicateur>} listeIndicateursClient\r\n         * @returns {Array<boolean>}\r\n         */\r\n        private creerTableauResultatsFiltre(\r\n            listeIndicateurs: Array<Modeles.Application.IIndicateur>,\r\n            listeFiltres: Array<Modeles.Application.IFiltre>,\r\n            estVueClient: boolean): Array<boolean> {\r\n            let listeResultats = [];\r\n\r\n            _.forEach(listeFiltres, (filtre: Modeles.Application.IFiltre) => {\r\n                let indicateurClient = _.find(listeIndicateurs, { code: filtre.indicateur.indicateur.code });\r\n                switch (filtre.indicateur.indicateur.typeIndicateur) {\r\n                    case Enum.Indicateur.TYPE.TEXTE:\r\n                        listeResultats.push(this.traiterFiltreTypeTexte(indicateurClient.valeur, filtre.indicateur.listeValeurs));\r\n                        break;\r\n                    case Enum.Indicateur.TYPE.BEGACLI:\r\n                        listeResultats.push(this.traiterFiltreTypeBegacli(indicateurClient.valeur, filtre.indicateur.listeValeurs));\r\n                        break;\r\n                    case Enum.Indicateur.TYPE.DATE:\r\n                        listeResultats.push(this.traiterFiltreTypeDate(indicateurClient.valeurDate, filtre));\r\n                        break;\r\n                    case Enum.Indicateur.TYPE.NOMBRE:\r\n                    case Enum.Indicateur.TYPE.POURCENT:\r\n                    case Enum.Indicateur.TYPE.MONTANT:\r\n                        listeResultats.push(this.traiterFiltreTypeNombre(indicateurClient.valeurNumber, filtre));\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n            return listeResultats;\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de traiter un filtre de type texte\r\n         * @param {string} valeurClient\r\n         * @param {Array<Modeles.Application.IValeurFiltre>} listeValeursFiltre\r\n         * @returns {boolean}\r\n         */\r\n        private traiterFiltreTypeTexte(valeurClient: string, listeValeursFiltre: Array<Modeles.Application.IValeurFiltre>): boolean {\r\n            let trouve = _.find(listeValeursFiltre, (valeur: Modeles.Application.IValeurFiltre) => {\r\n\r\n                // gère les NC avec un tri: la valeur dans ce cas est xxxxDate_du_jour pour les forcer a la fin\r\n                let estNCTrie: boolean = (valeur.libelle === \"NC\" && valeurClient.indexOf(Constantes.Application.FIN_CHAINE_MAX) !== -1);\r\n\r\n                return valeur.actif && (valeur.libelle === valeurClient || estNCTrie);\r\n            });\r\n\r\n            if (valeurClient === null || valeurClient === undefined) {\r\n                trouve = null;\r\n            }\r\n            \r\n            return trouve ? true : false;\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de traiter un filtre de type texte\r\n         * @param {string} valeurClient\r\n         * @param {Array<Modeles.Application.IValeurFiltre>} listeValeursFiltre\r\n         * @returns {boolean}\r\n         */\r\n        private traiterFiltreTypeBegacli(valeurClient: string, listeValeursFiltre: Array<Modeles.Application.IValeurFiltre>): boolean {\r\n            let expReg: string = this.begacliService.getExpReguliere();\r\n            //console.log(\"===> ici filtre begacli appliqué\");\r\n            //console.log(\"===> valeurClient : \", valeurClient);\r\n            //console.log(\"===> listeValeursFiltre : \", listeValeursFiltre);\r\n            //console.log(\"===> expReg : \", expReg);\r\n\r\n            let trouve: boolean = false;\r\n\r\n            if (this.begacliService.getFiltreBegacli().choisiNC) {\r\n                if (valeurClient === \"NC\") {\r\n                    trouve = true;\r\n                    return trouve;\r\n                };\r\n            }\r\n\r\n            if (expReg !== \"\") {\r\n                let leTest: RegExp = new RegExp(expReg);\r\n                if (leTest.test(valeurClient)) {\r\n                    trouve = true;\r\n                }\r\n            }\r\n            // console.log(\"--> trouve : \", trouve);\r\n            return trouve;\r\n        }\r\n\r\n\r\n        /**\r\n         * Methode qui permet de traiter un filtre de type nombre\r\n         * @param {number} valeurClient\r\n         * @param {Modeles.Application.IFiltre} filtre\r\n         * @returns {boolean}\r\n         */\r\n        private traiterFiltreTypeNombre(valeurClient: number, filtre: Modeles.Application.IFiltre): boolean {\r\n            // le NC est par défaut null ou undefined\r\n            // sauf que si on tri la colonne, il se tranforme en -infinity ou +infinity\r\n            // ce cas est à prendre en compte pour ignorer les NC si filtre.\r\n            // et les prendre si filtre = NC\r\n\r\n            // si filtre, les NC sont ignorés dans tous les cas\r\n            if (valeurClient === null ||\r\n                valeurClient === undefined ||\r\n                valeurClient === Number.POSITIVE_INFINITY ||\r\n                valeurClient === Number.NEGATIVE_INFINITY) {\r\n                return filtre.comparateur === Enum.Filtre.COMPARATEUR.NC ? true : false;\r\n            }\r\n\r\n            switch (filtre.comparateur) {\r\n                case Enum.Filtre.COMPARATEUR.SUPERIEUR:\r\n                    return valeurClient > filtre.valeurUnique;\r\n                case Enum.Filtre.COMPARATEUR.INFERIEUR:\r\n                    return valeurClient < filtre.valeurUnique;\r\n                case Enum.Filtre.COMPARATEUR.EGALE:\r\n                    return valeurClient === filtre.valeurUnique;\r\n                case Enum.Filtre.COMPARATEUR.ENTRE:\r\n                    return valeurClient >= filtre.valeurMultiple1 && valeurClient <= filtre.valeurMultiple2;\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de traiter un filtre de type Date\r\n         * @param {number} valeurClient\r\n         * @param {Modeles.Application.IFiltre} filtre\r\n         * @returns {boolean}\r\n         */\r\n        private traiterFiltreTypeDate(valeurClient: any, filtre: Modeles.Application.IFiltre): boolean {\r\n            // le NC est par défaut null ou undefined\r\n            // sauf que si on tri la colonne, il se tranforme en 01.01.1970 ou 31.12.9999\r\n            // ce cas est à prendre en compte pour ignorer les NC si filtre.--> erreur dans code existant\r\n            // et les prendre si filtre = NC\r\n\r\n            let valeurDate: Date = valeurClient;\r\n\r\n            if (valeurClient === null \r\n                || valeurClient === undefined\r\n                || moment(valeurDate).isSame(Constantes.Application.DATE_MIN)\r\n                || moment(valeurDate).isSame(Constantes.Application.DATE_MAX)) {\r\n                return (filtre.comparateur === Enum.Filtre.COMPARATEUR.NC\r\n                    || filtre.comparateur === Enum.Filtre.COMPARATEUR.NONREALISEE) ?\r\n                    true :\r\n                    false;\r\n            }\r\n\r\n            switch (filtre.comparateur) {\r\n                case Enum.Filtre.COMPARATEUR.SUPERIEUR:\r\n                    return valeurClient > filtre.valeurUnique;\r\n                case Enum.Filtre.COMPARATEUR.INFERIEUR:\r\n                    return valeurClient < filtre.valeurUnique;\r\n                case Enum.Filtre.COMPARATEUR.EGALE:\r\n                    return moment(valeurClient).format(\"MMM Do YY\") === moment(filtre.valeurUnique.toString()).format(\"MMM Do YY\");\r\n                case Enum.Filtre.COMPARATEUR.ENTRE:\r\n                    return (valeurClient >= filtre.valeurMultiple1 && valeurClient <= filtre.valeurMultiple2);\r\n                case Enum.Filtre.COMPARATEUR.ECHUE:\r\n                    return valeurClient < moment().subtract(1, \"year\").toDate();\r\n                case Enum.Filtre.COMPARATEUR.ENCOURS:\r\n                    return valeurClient >= moment().subtract(1, \"year\").toDate();\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de maj les filtres client par rapport à la nouvelle configuration des indicateurs\r\n         * @param {Array<Modeles.Application.IFiltre>} listeFiltres\r\n         * @param {Array<Modeles.Application.IIndicateurChoix>} listeChoixIndicateurs\r\n         * @param {Array<Modeles.Application.IIndicateurFiltre>} listeIndicateursFiltre\r\n         * @param {Array<Modeles.Application.IClient>} listeClients\r\n         * @return {void}\r\n         */\r\n        public majFiltresClientNouveauxIndicateurs(\r\n            listeFiltres: Array<Modeles.Application.IFiltre>,\r\n            listeChoixIndicateurs: Array<Modeles.Application.IIndicateurChoix>,\r\n            listeIndicateursFiltre: Array<Modeles.Application.IIndicateurFiltre>,\r\n            listeClients: Array<Modeles.Application.IClient>): void {\r\n\r\n            // Suppression des filtres des indicateurs supprimés\r\n            this.supprimerFiltres(listeFiltres, listeChoixIndicateurs, listeIndicateursFiltre);\r\n\r\n            // Ajout des nouveaux indicateurs filtre\r\n            _.forEach(listeChoixIndicateurs, (choixIndicateur: Modeles.Application.IIndicateurChoix) => {\r\n                let indicateurFiltreExistant = _.find(listeIndicateursFiltre, (indicateurFiltre: Modeles.Application.IIndicateurFiltre) => {\r\n                    return indicateurFiltre.indicateur.code === choixIndicateur.indicateur.code;\r\n                });\r\n\r\n                // Si l'indicateur filtre n'est pas présent dans la liste, on l'ajoute\r\n                if (!indicateurFiltreExistant) {\r\n                    let nouvelIndicateurFiltre = <Modeles.Application.IIndicateurFiltre>{};\r\n                    nouvelIndicateurFiltre.indicateur = choixIndicateur.indicateur;\r\n                    nouvelIndicateurFiltre.utilise = false;\r\n                    nouvelIndicateurFiltre.utiliseRelationEco = false;\r\n                    nouvelIndicateurFiltre.listeValeurs = [];\r\n\r\n                    if (nouvelIndicateurFiltre.indicateur.typeIndicateur === Enum.Indicateur.TYPE.TEXTE) {\r\n                        _.forEach(listeClients, (client: Modeles.Application.IClient) => {\r\n\r\n                            let indicateurClient = _.find(client.listeIndicateurs, (indicateur: Modeles.Application.IIndicateur) => {\r\n                                return indicateur.code === nouvelIndicateurFiltre.indicateur.code;\r\n                            });\r\n\r\n                            let valeurFiltre = <Modeles.Application.IValeurFiltre>{};\r\n                            valeurFiltre.libelle = indicateurClient.valeur;\r\n                            valeurFiltre.actif = false;\r\n                            if (indicateurClient.code === Enum.Indicateur.CODE.TOP_CC.toString()) {\r\n                                valeurFiltre.ordreAffichage = Services.Utils.ApplicationUtils.ValeurNumberTopCC(indicateurClient.valeur);\r\n                            }\r\n                            nouvelIndicateurFiltre.listeValeurs.push(valeurFiltre);\r\n                            nouvelIndicateurFiltre.listeValeurs = _.uniq(nouvelIndicateurFiltre.listeValeurs, \"libelle\");\r\n                        });\r\n                    }\r\n\r\n                    listeIndicateursFiltre.push(nouvelIndicateurFiltre);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de maj les filtres client par rapport à la nouvelle configuration des indicateurs\r\n         * @param {Array<Modeles.Application.IFiltre>} listeFiltres\r\n         * @param {Array<Modeles.Application.IIndicateurChoix>} listeChoixIndicateurs\r\n         * @param {Array<Modeles.Application.IIndicateurFiltre>} listeIndicateursFiltre\r\n         * @param {Array<Modeles.Application.IRelationEconomique>} listeRelationEco\r\n         * @return {void}\r\n         */\r\n        public majFiltresRelationEcoNouveauxIndicateurs(\r\n            listeFiltres: Array<Modeles.Application.IFiltre>,\r\n            listeChoixIndicateurs: Array<Modeles.Application.IIndicateurChoix>,\r\n            listeIndicateursFiltre: Array<Modeles.Application.IIndicateurFiltre>,\r\n            listeRelationEco: Array<Modeles.Application.IRelationEconomique>): void {\r\n\r\n            // Suppression des filtres des indicateurs supprimés\r\n            this.supprimerFiltres(listeFiltres, listeChoixIndicateurs, listeIndicateursFiltre);\r\n\r\n            // Ajout des nouveaux indicateurs filtre\r\n            _.forEach(listeChoixIndicateurs, (choixIndicateur: Modeles.Application.IIndicateurChoix) => {\r\n                let indicateurFiltreExistant = _.find(listeIndicateursFiltre, (indicateurFiltre: Modeles.Application.IIndicateurFiltre) => {\r\n                    return indicateurFiltre.indicateur.code === choixIndicateur.indicateur.code;\r\n                });\r\n\r\n                // Si l'indicateur filtre n'est pas présent dans la liste, on l'ajoute\r\n                if (!indicateurFiltreExistant) {\r\n                    let nouvelIndicateurFiltre = <Modeles.Application.IIndicateurFiltre>{};\r\n                    nouvelIndicateurFiltre.indicateur = choixIndicateur.indicateur;\r\n                    nouvelIndicateurFiltre.utilise = false;\r\n                    nouvelIndicateurFiltre.utiliseRelationEco = false;\r\n                    nouvelIndicateurFiltre.listeValeurs = [];\r\n\r\n                    if (nouvelIndicateurFiltre.indicateur.typeIndicateur === Enum.Indicateur.TYPE.TEXTE) {\r\n                        _.forEach(listeRelationEco, (relationEco: Modeles.Application.IRelationEconomique) => {\r\n\r\n                            let indicateurRelationEco = _.find(relationEco.listeIndicateurs, (indicateur: Modeles.Application.IIndicateur) => {\r\n                                return indicateur.code === nouvelIndicateurFiltre.indicateur.codeRel;\r\n                            });\r\n\r\n                            if (indicateurRelationEco) {\r\n                                let valeurFiltre = <Modeles.Application.IValeurFiltre>{};\r\n                                valeurFiltre.libelle = indicateurRelationEco.valeur;\r\n                                valeurFiltre.actif = false;\r\n                                nouvelIndicateurFiltre.listeValeurs.push(valeurFiltre);\r\n                                nouvelIndicateurFiltre.listeValeurs = _.uniq(nouvelIndicateurFiltre.listeValeurs, \"libelle\");\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    listeIndicateursFiltre.push(nouvelIndicateurFiltre);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet de supprimer les filtres par rapport à la nouvelle configuration des indicateurs\r\n         * @param {Array<Modeles.Application.IFiltre>} listeFiltres\r\n         * @param {Array<Modeles.Application.IIndicateurChoix>} listeChoixIndicateurs\r\n         * @return {void}\r\n         */\r\n        private supprimerFiltres(\r\n            listeFiltres: Array<Modeles.Application.IFiltre>,\r\n            listeChoixIndicateurs: Array<Modeles.Application.IIndicateurChoix>,\r\n            listeIndicateursFiltre: Array<Modeles.Application.IIndicateurFiltre>\r\n        ): void {\r\n            // Suppression des filtres dont l'indicateur n'est plus présent\r\n            _.forEach(angular.copy(listeFiltres), (filtre: Modeles.Application.IFiltre) => {\r\n                let indicateurChoixExistant = _.find(listeChoixIndicateurs, (indicateurChoix: Modeles.Application.IIndicateurChoix) => {\r\n                    return indicateurChoix.indicateur.code === filtre.indicateur.indicateur.code;\r\n                });\r\n                // Si le filtre n'est pas présent dans la liste des indicateurs, on le supprime\r\n                if (!indicateurChoixExistant) {\r\n                    // Récupération de l'indicateur filtre pour le mettre à faux\r\n                    let indicateurFiltreExistant = _.find(listeIndicateursFiltre, (indicateurFiltre: Modeles.Application.IIndicateurFiltre) => {\r\n                        return indicateurFiltre.indicateur.code === filtre.indicateur.indicateur.code;\r\n                    });\r\n                    indicateurFiltreExistant.utilise = false;\r\n                    indicateurFiltreExistant.utiliseRelationEco = false;\r\n\r\n                    // Suppression du filtre\r\n                    _.remove(listeFiltres, (vraiFiltre: Modeles.Application.IFiltre) => {\r\n                        return vraiFiltre.indicateur.indicateur.code === filtre.indicateur.indicateur.code;\r\n                    });\r\n                }\r\n            });\r\n\r\n            //S'il ne reste plus qu'un filtre, on supprime l'opérateur\r\n            if (listeFiltres.length === 1) {\r\n                listeFiltres[0].operateur = null;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Vidage des filtres relation eco\r\n         */\r\n        public razFiltresRelationEco(): void {\r\n            this.filtresRelationsEco = [];\r\n        }\r\n\r\n        /**\r\n         * Vidage des filtres client\r\n         */\r\n        public razFiltresClient(): void {\r\n            this.filtresClients = [];\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'ajouter un filtre\r\n         * @returns {void}\r\n         */\r\n        public ajouterFiltre(listeFiltres: Array<Modeles.Application.IFiltre>, setDefaultEt: boolean): void {\r\n            let filtre = <Modeles.Application.IFiltre>{};\r\n            filtre.id = Services.Utils.ApplicationUtils.genererIdentifiantAleatoire();\r\n            \r\n            // positionne par défaut sur ET\r\n            if (setDefaultEt) {\r\n                filtre.operateur = Enum.Filtre.OPERATEUR.ET;\r\n            }\r\n\r\n            listeFiltres.push(filtre);\r\n        }\r\n\r\n        /**\r\n         * mise à jour de la liste des filtres relation éco\r\n         * @param inListe\r\n         */\r\n        public setFiltresRelationsEco(inListe: Modeles.Application.IFiltre[]) {\r\n            this.filtresRelationsEco = inListe;\r\n        }\r\n\r\n        /**\r\n         * mise à jour de la liste des filtres client\r\n         * @param inListe\r\n         */\r\n        public setFiltresClients(inListe: Modeles.Application.IFiltre[]) {\r\n            this.filtresClients = inListe;\r\n        }\r\n\r\n        /**\r\n         * Récupération de la liste des filtres relation éco\r\n         */\r\n        public getFiltresRelationsEco() {\r\n            return this.filtresRelationsEco;\r\n        }\r\n\r\n        /**\r\n         * Récupération de la liste des filtres client\r\n         */\r\n        public getFiltresClients() {\r\n            return this.filtresClients;\r\n        }\r\n\r\n        /**\r\n         * Méthode de mise à jour des filtres client en fonction des indicateurs choisis pour le tableau client\r\n         * @param listeIndicateursChoix Liste des indicateurs du tableau client\r\n         * @returns {Modeles.Application.IFiltre[]} Retourne la liste des filtres clients à jour\r\n         */\r\n        public majAndGetFiltresClientsAvecListeIndicateursDispo(listeIndicateursChoix: Modeles.Application.IIndicateurChoix[]): Modeles.Application.IFiltre[] {\r\n            let listeFiltre: Modeles.Application.IFiltre[] = angular.copy(this.filtresClients);\r\n            _.forEach(listeFiltre, (filtre: Modeles.Application.IFiltre) => {\r\n                if (_.findIndex(_.pluck(listeIndicateursChoix, \"indicateur\"), {\r\n                    \"code\": filtre.indicateur.indicateur.code\r\n                    }) < 0) {\r\n                    _.remove(this.filtresClients, (filtreI: Modeles.Application.IFiltre) => {\r\n                        // XXXX\r\n                        // si filtre typePersonne (Client/Prospect), top actif ou sans contrat, \r\n                        // ou leader on ne supprime pas car ce n'est pas un indicateur (gestion exception)\r\n                        \r\n                        if (filtreI.indicateur &&\r\n                            filtreI.indicateur.indicateur &&\r\n                            _.indexOf(Constantes.Indicateur.INDICATEUR_TAG, filtreI.indicateur.indicateur.code) === -1) {\r\n                            return filtreI.id === filtre.id;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            // on verifie s'il n'en reste qu'un: si c'est le cas, ou supprime l'operateur présent\r\n            if (this.filtresClients &&\r\n                this.filtresClients.length === 1) {\r\n                this.filtresClients[0].operateur = undefined;\r\n            }\r\n            return this.filtresClients;\r\n        }\r\n\r\n        /**\r\n         * Méthode de mise à jour des filtres relation économique en fonction des indicateurs choisis pour le tableau relation économique\r\n         * @param listeIndicateursChoix Liste des indicateurs du tableau relation économique\r\n         * @returns {Modeles.Application.IFiltre[]} Retourne la liste des filtres relation économique à jour\r\n         */\r\n        public majAndGetFiltresRelationsEcoAvecListeIndicateursDispo(listeIndicateursChoix: Modeles.Application.IIndicateurChoix[]): Modeles.Application.IFiltre[] {\r\n            let listeFiltre: Modeles.Application.IFiltre[] = angular.copy(this.filtresRelationsEco);\r\n            _.forEach(listeFiltre, (filtre: Modeles.Application.IFiltre) => {\r\n                if (_.findIndex(_.pluck(listeIndicateursChoix, \"indicateur\"), {\r\n                    \"codeRel\": filtre.indicateur.indicateur.code\r\n                }) < 0) {\r\n                    _.remove(this.filtresRelationsEco, (filtreI: Modeles.Application.IFiltre) => {\r\n                        // si filtre typePersonne (Client/Prospect), on ne supprime pas car ce n'est pas un indicateur (gestion exception)\r\n                        if (filtreI.indicateur\r\n                            && filtreI.indicateur.indicateur\r\n                            && filtreI.indicateur.indicateur.code !== Enum.Indicateur.CODEREL.CLIENTPROSPECT.toString()) {\r\n                            return filtreI.id === filtre.id;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            // on verifie s'il n'en reste qu'un: si c'est le cas, ou supprime l'operateur présent\r\n            if (this.filtresRelationsEco && this.filtresRelationsEco.length === 1) {\r\n                this.filtresRelationsEco[0].operateur = undefined;\r\n            }\r\n            return this.filtresRelationsEco;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe FiltreService\r\n     */\r\n    export interface IFiltreService {\r\n        filtrerListeClients(listeDeClient: Array<Modeles.Application.IClient>, listeFiltres: Array<Modeles.Application.IFiltre>): Array<Modeles.Application.IClient>;\r\n        filtrerListeRelationsEco(listeRelationsEco: Array<Modeles.Application.IRelationEconomique>, listeFiltres: Array<Modeles.Application.IFiltre>): Array<Modeles.Application.IRelationEconomique>;\r\n        majFiltresClientNouveauxIndicateurs(\r\n            listeFiltres: Array<Modeles.Application.IFiltre>,\r\n            listeChoixIndicateurs: Array<Modeles.Application.IIndicateurChoix>,\r\n            listeIndicateursFiltre: Array<Modeles.Application.IIndicateurFiltre>,\r\n            listeClients: Array<Modeles.Application.IClient>): void;\r\n        majFiltresRelationEcoNouveauxIndicateurs(\r\n            listeFiltres: Array<Modeles.Application.IFiltre>,\r\n            listeChoixIndicateurs: Array<Modeles.Application.IIndicateurChoix>,\r\n            listeIndicateursFiltre: Array<Modeles.Application.IIndicateurFiltre>,\r\n            listeRelationEco: Array<Modeles.Application.IRelationEconomique>): void;\r\n        razFiltresRelationEco(): void;\r\n        razFiltresClient(): void;\r\n        ajouterFiltre(listeFiltres: Array<Modeles.Application.IFiltre>, setDefaultEt: boolean): void;\r\n        setFiltresRelationsEco(listeFiltresRelationsEco: Modeles.Application.IFiltre[]): void;\r\n        setFiltresClients(listeFiltresClients: Modeles.Application.IFiltre[]): void;\r\n        getFiltresRelationsEco(): Modeles.Application.IFiltre[];\r\n        getFiltresClients(): Modeles.Application.IFiltre[];\r\n        majAndGetFiltresClientsAvecListeIndicateursDispo(listeIndicateursChoix: Modeles.Application.IIndicateurChoix[]): Modeles.Application.IFiltre[];\r\n        majAndGetFiltresRelationsEcoAvecListeIndicateursDispo(listeIndicateursChoix: Modeles.Application.IIndicateurChoix[]): Modeles.Application.IFiltre[];\r\n    }\r\n\r\n    app.service(\"FiltreService\", FiltreService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service applicatif des habilitations\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de gerer le choix EDS\r\n     */\r\n    class HabilitationService implements IHabilitationService {\r\n        public static CLASS_NAME = \"EventService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(HabilitationService.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [];\r\n\r\n        // Variables utiles\r\n        private habiliteAgenceNiveau2: boolean;\r\n        private habiliteAccesPNB: boolean;\r\n        private habiliteConsultREVUE: boolean;\r\n        private habiliteMajREVUE: boolean;\r\n        private habiliteConsultAFFAIRES: boolean;\r\n        private habiliteConsultPropositions: boolean;\r\n        private habiliteConsultPotProspect: boolean;\r\n        private habiliteConsultSegmentations: boolean;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() { }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'habilitation niveau 2\r\n         * @param {boolean} estHabilite\r\n         * @return {void}\r\n         */\r\n        public setHabiliteAgenceNiveau2(estHabilite: boolean): void {\r\n            this.habiliteAgenceNiveau2 = estHabilite;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de savoir si l'utilisateur est habilité agence niveau 2\r\n         * @return {boolean}\r\n         */\r\n        public estHabiliteAgenceNiveau2(): boolean {\r\n            return this.habiliteAgenceNiveau2;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'habilitation d'acces aux donnnees PNB\r\n         * @param {boolean} estHabilite\r\n         * @return {void}\r\n         */\r\n        public setHabiliteAccesPNB(estHabilite: boolean): void {\r\n            this.habiliteAccesPNB = estHabilite;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de savoir si l'utilisateur est habilité acces aux donnnees PNB\r\n         * @return {boolean}\r\n         */\r\n        public estHabiliteAccesPNB(): boolean {\r\n            return this.habiliteAccesPNB;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'habilitation d'acces a la consultation revue de portefeuille\r\n         * @param {boolean} estHabilite\r\n         * @return {void}\r\n         */\r\n        public setHabiliteConsultRevue(estHabilite: boolean): void {\r\n            this.habiliteConsultREVUE = estHabilite;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de savoir si l'utilisateur est habilité a la consultation revue de portefeuille\r\n         * @return {boolean}\r\n         */\r\n        public estHabiliteConsultRevue(): boolean {\r\n            return this.habiliteConsultREVUE;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'habilitation d'acces a la mise à jour revue de portefeuille\r\n         * @param {boolean} estHabilite\r\n         * @return {void}\r\n         */\r\n        public setHabiliteMajRevue(estHabilite: boolean): void {\r\n            this.habiliteMajREVUE = estHabilite;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de savoir si l'utilisateur est habilité a la mise à jour revue de portefeuille\r\n         * @return {boolean}\r\n         */\r\n        public estHabiliteMajRevue(): boolean {\r\n            return this.habiliteMajREVUE;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'habilitation d'acces a la consultation des affaires\r\n         * @param {boolean} estHabilite\r\n         * @return {void}\r\n         */\r\n        public setHabiliteConsultAffaires(estHabilite: boolean): void {\r\n            this.habiliteConsultAFFAIRES = estHabilite;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'habilitation d'acces a la consultation des propositions\r\n         * @param {boolean} estHabilite\r\n         * @return {void}\r\n         */\r\n        public setHabiliteConsultPropositions(estHabilite: boolean): void {\r\n            this.habiliteConsultPropositions = estHabilite;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de savoir si l'utilisateur est habilité a la consultation des affaires\r\n         * @return {boolean}\r\n         */\r\n        public estHabiliteConsultAffaires(): boolean {\r\n            return this.habiliteConsultAFFAIRES;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de savoir si l'utilisateur est habilité a la consultation des propositions en cours\r\n         * @return {boolean}\r\n         */\r\n        public estHabiliteConsultPropositions(): boolean {\r\n            return this.habiliteConsultPropositions;\r\n        }\r\n\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'habilitation d'acces a la consultation des affaires\r\n         * @param {boolean} estHabilite\r\n         * @return {void}\r\n         */\r\n        public setHabiliteConsultPotentielProspect(estHabilite: boolean): void {\r\n            this.habiliteConsultPotProspect = estHabilite;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de savoir si l'utilisateur est habilité a la consultation du potentiel prospect\r\n         * @return {boolean}\r\n         */\r\n        public estHabiliteConsultPotentielProspect(): boolean {\r\n            return this.habiliteConsultPotProspect;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'habilitation d'acces a la consultation des segmentations\r\n         * @param {boolean} estHabilite\r\n         * @return {void}\r\n         */\r\n        public setHabiliteConsultSegmentations(estHabilite: boolean): void {\r\n            this.habiliteConsultSegmentations = estHabilite;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de savoir si l'utilisateur est habilité a la consultation des segmentations\r\n         * @return {boolean}\r\n         */\r\n        public estHabiliteConsultSegmentations(): boolean {\r\n            return this.habiliteConsultSegmentations;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe HabilitationService\r\n     */\r\n    export interface IHabilitationService {\r\n        setHabiliteAgenceNiveau2(estHabilite: boolean): void;\r\n        estHabiliteAgenceNiveau2(): boolean;\r\n        setHabiliteAccesPNB(estHabilite: boolean): void;\r\n        estHabiliteAccesPNB(): boolean;\r\n        setHabiliteConsultRevue(estHabilite: boolean): void;\r\n        estHabiliteConsultRevue(): boolean;\r\n        setHabiliteMajRevue(estHabilite: boolean): void;\r\n        estHabiliteMajRevue(): boolean;\r\n        setHabiliteConsultAffaires(estHabilite: boolean): void;\r\n        estHabiliteConsultAffaires(): boolean;\r\n        setHabiliteConsultPropositions(estHabilite: boolean): void;\r\n        estHabiliteConsultPropositions(): boolean;\r\n        setHabiliteConsultPotentielProspect(estHabilite: boolean): void;\r\n        estHabiliteConsultPotentielProspect(): boolean;\r\n        setHabiliteConsultSegmentations(estHabilite: boolean): void;\r\n        estHabiliteConsultSegmentations(): boolean;\r\n    }\r\n\r\n    // Déclaration du service\r\n    app.service(\"HabilitationService\", HabilitationService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service applicatif de gestion de l'ihm\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de gerer certains choix de l'ihm\r\n     */\r\n    class IhmService implements IIhmService {\r\n        public static CLASS_NAME = \"IhmService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(IhmService.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [\r\n            Constantes.Inject.Angular.$q\r\n        ];\r\n\r\n        // Variables utiles\r\n        private typeVue: Enum.PageClients.TYPE_VUE;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $q: ng.IQService\r\n        ) { }\r\n\r\n        public getTypeVue(): Enum.PageClients.TYPE_VUE {\r\n            if (this.typeVue) {\r\n                return this.typeVue;\r\n            } else {\r\n                return Enum.PageClients.TYPE_VUE.VUE_RELATION_ECONOMIQUE;\r\n            }\r\n        }\r\n\r\n        public setTypeVue(type: Enum.PageClients.TYPE_VUE): void {\r\n            if (type) {\r\n                this.typeVue = type;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe EventService\r\n     */\r\n    export interface IIhmService {\r\n        getTypeVue(): Enum.PageClients.TYPE_VUE;\r\n        setTypeVue(type: Enum.PageClients.TYPE_VUE): void;\r\n    }\r\n\r\n    // Déclaration du service\r\n    app.service(IhmService.CLASS_NAME, IhmService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service applicatif de gestion de l'indicateur fleche\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de gerer l'indicateur Fleche\r\n     */\r\n    class IndicateurFlecheService implements IIndicateurFlecheService {\r\n        public static CLASS_NAME = \"IndicateurFlecheService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(IndicateurFlecheService.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [];\r\n\r\n        // Variables utiles\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() { }\r\n\r\n        /**\r\n         * Retourne la config utile à la dierctive indicateur fleche en fonction de la valeur transmise en paramètre\r\n         * @param valeur\r\n         */\r\n        public getConfigIndicateurFleche(valeur: number): Portefeuille.Modeles.Application.IConfigIndicateurFleche {\r\n            let configResultat: Portefeuille.Modeles.Application.IConfigIndicateurFleche = <Portefeuille.Modeles.Application.IConfigIndicateurFleche>{};\r\n\r\n            if (valeur > 0) {\r\n                configResultat.valeurFormate = \"+\" + valeur.toLocaleString() + \"%\";\r\n                configResultat.couleur = Portefeuille.Controleurs.COULEUR_INDICATEUR_FLECHE.VERT.toString();\r\n                configResultat.icone = Portefeuille.Controleurs.ICONE_INDICATEUR_FLECHE.HAUT.toString();\r\n\r\n                return configResultat;\r\n            }\r\n\r\n            if (valeur < 0) {\r\n                configResultat.valeurFormate = valeur.toLocaleString() + \"%\";\r\n                configResultat.couleur = Portefeuille.Controleurs.COULEUR_INDICATEUR_FLECHE.ROUGE.toString();\r\n                configResultat.icone = Portefeuille.Controleurs.ICONE_INDICATEUR_FLECHE.BAS.toString();\r\n\r\n                return configResultat;\r\n            }\r\n\r\n            configResultat.valeurFormate = \"0%\";\r\n            configResultat.couleur = Portefeuille.Controleurs.COULEUR_INDICATEUR_FLECHE.ORANGE.toString();\r\n            configResultat.icone = Portefeuille.Controleurs.ICONE_INDICATEUR_FLECHE.DROITE.toString();\r\n\r\n            return configResultat;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe IndicateurFlecheService\r\n     */\r\n    export interface IIndicateurFlecheService {\r\n        getConfigIndicateurFleche(valeur: number): Portefeuille.Modeles.Application.IConfigIndicateurFleche;\r\n    }\r\n\r\n    // Déclaration du service\r\n    app.service(\"IndicateurFlecheService\", IndicateurFlecheService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service de gestion des indicateurs\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    let loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service de gestion des indicateurs\r\n     */\r\n    class IndicateurService implements IIndicateurService {\r\n        public static CLASS_NAME = \"IndicateurService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(IndicateurService.CLASS_NAME);\r\n\r\n        // Proprietés\r\n        private listeIndicateursChoix: Array<Modeles.Application.IIndicateurChoix>;\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [\r\n            Constantes.Inject.Services.habilitationService\r\n        ];\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private habilitationService: Services.Application.IHabilitationService\r\n        ) {\r\n            this.listeIndicateursChoix = [];\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public getListeIndicateurChoix(): Array<Modeles.Application.IIndicateurChoix> {\r\n            return this.listeIndicateursChoix;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param liste\r\n         */\r\n        public setListeIndicateurChoix(liste: Array<Modeles.Application.IIndicateurChoix>): void {\r\n            this.listeIndicateursChoix = liste;\r\n        }\r\n\r\n        /**\r\n         * Méthode qui retourne la liste des nouveaux indicateurs choisis nécéssitant un appel REST\r\n         * @param liste\r\n         */\r\n        public getListeEcartIndicateurParametrable(liste: Array<Modeles.Application.IIndicateurChoix>): Array<Modeles.Application.IIndicateurType> {\r\n            let reponse: Array<Modeles.Application.IIndicateurType> = [];\r\n            if (this.listeIndicateursChoix) {\r\n                let listeIndicateurNew: Array<string> = _.pluck(liste, \"indicateur.code\");\r\n                let listeIndicateurOld: Array<string> = _.pluck(this.listeIndicateursChoix, \"indicateur.code\");\r\n                let ecarts: Array<string> = listeIndicateurNew.filter((item: string) => listeIndicateurOld.indexOf(item) < 0);\r\n                if (ecarts) {\r\n                    _.forEach(this.getListeTotalIndicateursParametrables(), (indic: Modeles.Application.IIndicateurType) => {\r\n                        if (ecarts.indexOf(indic.code) > -1) {\r\n                            reponse.push(indic);\r\n                        }\r\n                    });\r\n                }\r\n            } \r\n            return reponse;\r\n        }\r\n\r\n        /**\r\n         * Méthode de récupération des indicateurType pour lesquels la propriété codeRest est non vide\r\n         */\r\n        private getListeTotalIndicateursParametrables(): Array<Modeles.Application.IIndicateurType> {\r\n            let listeIndicateursParametrables: Array<Modeles.Application.IIndicateurType> = this.getListeTotaleIndicateursType();\r\n            _.remove(listeIndicateursParametrables, (indic: Modeles.Application.IIndicateurType) => {\r\n                return indic.codeRest === \"\";\r\n            });\r\n            return listeIndicateursParametrables;\r\n        }\r\n\r\n        /**\r\n         * Recuperation de liste de tous les type d'indicateurs\r\n         * @returns {Array<Modeles.Application.IIndicateurType>}\r\n         */\r\n        public getListeTotaleIndicateursType(): Array<Modeles.Application.IIndicateurType> {\r\n            let reponse: Array<Modeles.Application.IIndicateurType> = angular.copy(Constantes.Indicateur.LISTE_TOTAL_INDICATEUR);\r\n            let isNotHabiliteFamillePNB: boolean = !this.habilitationService.estHabiliteAccesPNB();\r\n            let isNotHabiliteRevue: boolean = !this.habilitationService.estHabiliteConsultRevue();\r\n            let isNotHabiliteAffaireOuRevue: boolean = !this.habilitationService.estHabiliteConsultAffaires() || !this.habilitationService.estHabiliteConsultRevue();\r\n            let isNotHabilitePotentielProspect: boolean = !this.habilitationService.estHabiliteConsultPotentielProspect();\r\n\r\n            if (isNotHabiliteFamillePNB ||\r\n                isNotHabiliteRevue ||\r\n                isNotHabiliteAffaireOuRevue ||\r\n                isNotHabilitePotentielProspect) {\r\n                reponse = _.filter(reponse, (indic: Modeles.Application.IIndicateurType) => {\r\n                        // on supprime les indicateurs de la famille PNB\r\n                    return ((isNotHabiliteFamillePNB) ? (indic.famille !== Enum.Indicateur.FAMILLE.PNB) : true) &&\r\n                        // on supprime les indicateurs de la famille Revue (ca comprend le score d'appétence)\r\n                        ((isNotHabiliteRevue) ? (indic.famille !== Enum.Indicateur.FAMILLE.REVUE) : true) &&\r\n                        // on supprime les indicateurs de la famille Affaires\r\n                        ((isNotHabiliteAffaireOuRevue) ? (indic.famille !== Enum.Indicateur.FAMILLE.OPPORTUNITES &&\r\n                            indic.code !== Enum.Indicateur.CODE.NB_PROPOSITIONS_EN_COURS.toString()) : true) &&\r\n                        // on supprime les indicateurs de la famille Revue\r\n                        // il faut seulement retirer cet indicateur, pas la famille !\r\n                        ((isNotHabilitePotentielProspect) ? (indic.code !== Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString()) : true);\r\n                });\r\n            }\r\n            return reponse;\r\n        }\r\n\r\n        /**\r\n         * Retourne le panier de forcage\r\n         * @returns {Array<Modeles.Application.IIndicateurType>}\r\n         */\r\n        public getPanierDeForcage(): Modeles.Application.IPanierPreferences {\r\n            let panierPreference = <Modeles.Application.IPanierPreferences>{};\r\n            panierPreference.listeCodesIndicateurs = [];\r\n            panierPreference.listeCodesIndicateurs.push(...Constantes.Indicateur.INDICATEUR_PANIER_FORCAGE);\r\n            // Evolution multi panier\r\n            panierPreference.estDefaut = false;\r\n            panierPreference.nom = Constantes.Application.NOM_PANIER_FORCAGE;\r\n            // fin Evolution multi panier\r\n            return panierPreference;\r\n        }\r\n\r\n        /**\r\n         * Retourne la liste des indicateurs spécifiques à la revue\r\n         */\r\n        public getListeIndicateursRevue(): Array<Modeles.Application.IIndicateurChoix> {\r\n            let listeIndicateursRevue: Array<Modeles.Application.IIndicateurChoix> = [];\r\n            let indicateurRevue: Modeles.Application.IIndicateurChoix;\r\n            let position: number;\r\n            _.forEach(this.getListeTotaleIndicateursType(), (indicateurType: Modeles.Application.IIndicateurType) => {\r\n                position = _.indexOf(Constantes.Indicateur.ORDRE_INDICATEUR_REVUE, indicateurType.code);\r\n                if (position !== -1) {\r\n                    indicateurRevue = <Modeles.Application.IIndicateurChoix>{};\r\n                    indicateurRevue.indicateur = indicateurType;\r\n                    indicateurRevue.choisi = true;\r\n                    indicateurRevue.position = position;\r\n                    listeIndicateursRevue.push(indicateurRevue);\r\n                }\r\n            });\r\n            return _.sortByOrder(listeIndicateursRevue, [\"position\"]);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param objet\r\n         * @param codeIndicateur\r\n         */\r\n        public getIndicateurIListeIndicateur(\r\n            objet: Modeles.Application.IListeIndicateur,\r\n            codeIndicateur: Enum.Indicateur.CODE): Modeles.Application.IIndicateur {\r\n            return this.getIndicateur(objet.listeIndicateurs, codeIndicateur);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param listeIndicateurs\r\n         * @param codeIndicateur\r\n         */\r\n        public getIndicateur(\r\n            listeIndicateurs: Array<Modeles.Application.IIndicateur>,\r\n            codeIndicateur: Enum.Indicateur.CODE): Modeles.Application.IIndicateur {\r\n            return _.find(listeIndicateurs, { \"code\": codeIndicateur });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe IndicateurService\r\n     */\r\n    export interface IIndicateurService {\r\n        getListeTotaleIndicateursType(): Array<Modeles.Application.IIndicateurType>;\r\n        getListeIndicateurChoix(): Array<Modeles.Application.IIndicateurChoix>;\r\n        setListeIndicateurChoix(liste: Array<Modeles.Application.IIndicateurChoix>): void;\r\n        getListeEcartIndicateurParametrable(liste: Array<Modeles.Application.IIndicateurChoix>): Array<Modeles.Application.IIndicateurType>;\r\n        getPanierDeForcage(): Modeles.Application.IPanierPreferences;\r\n        getListeIndicateursRevue(): Array<Modeles.Application.IIndicateurChoix>;\r\n        getIndicateurIListeIndicateur(\r\n            objet: Modeles.Application.IListeIndicateur,\r\n            codeIndicateur: Enum.Indicateur.CODE): Modeles.Application.IIndicateur;\r\n        getIndicateur(\r\n            listeIndicateurs: Array<Modeles.Application.IIndicateur>,\r\n            codeIndicateur: Enum.Indicateur.CODE): Modeles.Application.IIndicateur;\r\n    }\r\n\r\n    app.service(IndicateurService.CLASS_NAME, IndicateurService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    let loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * service d'initialisation de l'application\r\n     */\r\n    export class InitialisationApplicationService {\r\n        public static CLASS_NAME = \"InitialisationApplicationService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(InitialisationApplicationService.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject: string[] = [\r\n            Constantes.Inject.Angular.$rootScope,\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$q,\r\n            Constantes.Inject.Angular.$location,\r\n            Constantes.Inject.Services.contexteService,\r\n            Constantes.Inject.Services.popupService,\r\n            Constantes.Inject.Services.eventService,\r\n            Constantes.Inject.Services.habilitationService,\r\n            Constantes.Inject.Services.preferencesService\r\n        ];\r\n\r\n        public promesseInitialisation: boolean = false;\r\n\r\n        private static LISTE_HABILITATION: string[] = [\r\n            Constantes.Application.CODE_HABILITATION_CHOIX_AGENT, // 0\r\n            Constantes.Application.CODE_HABILITATION_AGENCE_NIVEAU_2, // 1\r\n            Constantes.Application.CODE_HABILITATION_ACCES_PNB, // 2\r\n            Constantes.Application.CODE_HABILITATION_CONSULT_REVUE, // 3\r\n            Constantes.Application.CODE_HABILITATION_MAJ_REVUE, // 4\r\n            Constantes.Application.CODE_HABILITATION_CONSULT_AFFAIRES, //5 \r\n            Constantes.Application.CODE_HABILITATION_CONSULT_POT_PROSPECT, //6 \r\n            Constantes.Application.CODE_HABILITATION_CONSULT_SEGMENTATIONS, // 7\r\n            Constantes.Application.CODE_HABILITATION_CHOIX_EDS, // 8\r\n            Constantes.Application.CODE_HABILITATION_CONSULT_PROPOSITIONS //9\r\n\r\n        ];\r\n\r\n        private static SERVICE_AGENT_INIT: MyWay.Services.IServiceAgentInitialisation = {\r\n            codeApplication: \"portefeuille\",\r\n            disableScopeSave: false,\r\n            scopeType: MyWay.Services.Context.ScopeType.Service,\r\n            donneesScopeASauvegarder: [\"portefeuille\"]\r\n        };\r\n\r\n        // Constructeur\r\n        constructor(\r\n            private $rootScope: ng.IRootScopeService,\r\n            private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $q: ng.IQService,\r\n            private $location: ng.ILocationService,\r\n            private contexteService: Services.Application.IContexteService,\r\n            private popupService: Services.Application.IPopupService,\r\n            private eventService: Services.Application.IEventService,\r\n            private habilitationService: Services.Application.IHabilitationService,\r\n            private preferencesService: Services.Application.IPreferencesService) {\r\n        }\r\n\r\n        /**\r\n         * Initialisation des services\r\n         */\r\n        public initialisation(): ng.IPromise<void> {\r\n            let defer = this.$q.defer();\r\n            if (!this.promesseInitialisation) {\r\n                return <ng.IPromise<void>>this.serviceAgentExtended.init(\r\n                    InitialisationApplicationService.SERVICE_AGENT_INIT).then(() => {\r\n                    return this.contexteService.getAuthentification();\r\n                }).then(() => {\r\n                    let promises: ng.IPromise<any>[] = [];\r\n                    promises.push(this.contexteService.getContexte());\r\n                    promises.push(this.preferencesService.completerCreationPaniers());\r\n                    InitialisationApplicationService.logger.info(\">>> Appel de la méthode : InitialisationApplicationService.initialisation <<<\");\r\n                    return MyWay.Services.CoreCommon.ServiceDePromesse.all(promises).then((resultat: any) => {\r\n                        return this.eventService.initialiserListePortfeuilleIndexControleur().then(() => {\r\n                            return this.serviceAgentExtended.Habilitation.EstHabilite(InitialisationApplicationService.LISTE_HABILITATION).\r\n                                then((habilitations: Array<boolean>) => {\r\n                                // a laisser car utile pr débugger les habilitations meme en prod\r\n                                console.log(\"--> habilitations : \", habilitations); \r\n\r\n                                let estHabiliteChoixAgent = habilitations[0];\r\n                                let estHabiliteAgenceNiv2 = habilitations[1];\r\n                                this.habilitationService.setHabiliteAgenceNiveau2(estHabiliteAgenceNiv2);\r\n                                this.habilitationService.setHabiliteAccesPNB(habilitations[2]);\r\n                                this.habilitationService.setHabiliteConsultRevue(habilitations[3]);\r\n                                this.habilitationService.setHabiliteMajRevue(habilitations[4]);\r\n                                this.habilitationService.setHabiliteConsultAffaires(habilitations[5]);\r\n                                this.habilitationService.setHabiliteConsultPotentielProspect(habilitations[6]);\r\n                                this.habilitationService.setHabiliteConsultSegmentations(habilitations[7]);\r\n                                let estHabiliteChoixEds = habilitations[8];\r\n                                this.habilitationService.setHabiliteConsultPropositions(habilitations[9]);\r\n                                \r\n                                this.eventService.initialiserHabilitationChoixAgentIndexControleur(estHabiliteChoixAgent);\r\n                                this.eventService.initialiserHabilitationChoixEDSIndexControleur(estHabiliteChoixEds);\r\n\r\n                                // Dans le cas d'un retour de debranchement, on vérifie si l'eds visualisée est dans le contexte LISA\r\n                                return this.serviceAgentExtended.getFromContext(Constantes.Contexte.CONTEXTE_GERR_PORTF).\r\n                                    then((contexteGererPortefeuille: Modeles.Application.IContexteGererPortefeuille) => {\r\n                                        console.log(\"=>>>>> Retour débranchement contexteGererPortefeuille\", contexteGererPortefeuille);\r\n                                        if (contexteGererPortefeuille &&\r\n                                            contexteGererPortefeuille.objetEdsVisu) {\r\n                                            return this.contexteService.getContexte().then((ctx: Modeles.Application.IContexte) => {\r\n                                                console.log(\"=>>>>> Retour débranchement getContexte\", ctx);\r\n                                                return this.eventService.majDonneesDonneesEdsIndexControleur(\r\n                                                    contexteGererPortefeuille.objetEdsVisu.objCaractAgent,\r\n                                                    ctx,\r\n                                                    contexteGererPortefeuille.objetEdsVisu.listePtfVisu).then(() => {\r\n                                                        this.promesseInitialisation = true;\r\n                                                        this.$location.path(contexteGererPortefeuille.objetEdsVisu.locationPath);\r\n                                                        return this.$q.when();\r\n                                                    });\r\n                                                });\r\n                                        } else {\r\n                                            this.promesseInitialisation = true;\r\n                                            return this.$q.when();\r\n                                        }\r\n                                    });\r\n                                });\r\n                            });\r\n                        }).catch((error: MyWay.Services.Erreur) => {\r\n                        defer.reject();\r\n                        this.popupService.showErreur(error);\r\n                    });\r\n                }).catch((error: MyWay.Services.Erreur) => {\r\n                    defer.reject();\r\n                    this.popupService.showErreur(error);\r\n                });\r\n            } else {\r\n                return this.$q.when();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe InitialisationService\r\n     */\r\n    export interface IInitialisationService {\r\n        initialisation(): ng.IPromise<void>;\r\n    }\r\n\r\n    app.service(InitialisationApplicationService.CLASS_NAME, InitialisationApplicationService);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de gerer LISA en LOCALHOST/DUA\r\n     */\r\n    class LisaApplication implements ILisaApplication {\r\n        public static CLASS_NAME = \"LisaApplication\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(LisaApplication.CLASS_NAME);\r\n        // Injection de dépendances \r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$location,\r\n            Constantes.Inject.Angular.$window,\r\n            Constantes.Inject.Angular.$q\r\n        ];\r\n\r\n        /**\r\n         * Constructeur\r\n         * @param serviceAgentExtended\r\n         * @param $location\r\n         * @param $window\r\n         * @param $q\r\n         */\r\n        constructor(\r\n            private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $location: ng.ILocationService,\r\n            private $window: ng.IWindowService,\r\n            private $q: ng.IQService) {\r\n        }\r\n\r\n        /**\r\n         * Gestion du routage LISA\r\n         * @param valeurSortie\r\n         * @param urlLocal\r\n         */\r\n        /* istanbul ignore next */\r\n        public next(valeurSortie: number, urlLocal: string): ng.IPromise<void> {\r\n            if (this.$location.host() === \"localhost\") {\r\n                // En local\r\n                return <ng.IPromise<void>>this.naviguerHorsLisa(urlLocal);\r\n            } else {\r\n                return <ng.IPromise<void>>this.serviceAgentExtended.Lisa.Next(valeurSortie).catch((erreur: MyWay.Services.Erreur) => {\r\n                    if (Constantes.Token.TOKEN_ENVIRONNEMENT === Constantes.Token.TOKEN_ENVIRONNEMENT_VALEUR_DUA) {\r\n                        LisaApplication.logger.debug(\"Pas de LISA et en DUA\");\r\n                        // Revient à naviguer en local\r\n                        return this.naviguerHorsLisa(urlLocal);\r\n                    } else {\r\n                        LisaApplication.logger.debug(\"Pas de LISA et pas en DUA\");\r\n                        //Lisa KO ET pas en local => Erreur à remonter\r\n                        return this.$q.reject(erreur);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Gestion du routage Hors LISA\r\n         * @param urlLocal\r\n         */\r\n        /* istanbul ignore next */\r\n        private naviguerHorsLisa(urlLocal: string): ng.IPromise<void> {\r\n            if (urlLocal && urlLocal.length > 0) {\r\n                if (urlLocal.length > 4 && urlLocal.substr(0, 5) === \"http:\") {\r\n                    return this.$q.when().then(() => {\r\n                        this.$window.location.href = urlLocal;\r\n                    });\r\n                } else {\r\n                    return this.$q.when().then(() => {\r\n                        this.$location.path(urlLocal);\r\n                    });\r\n                }\r\n            } else {\r\n                return this.$q.reject(new MyWay.Services.Erreur(\": Navigation locale impossible. Vérifier le paramétrage LISA.\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe LisaApplication\r\n     */\r\n    export interface ILisaApplication {\r\n        next(valeurSortie: number, urlLocal: string): ng.IPromise<void>;\r\n    }\r\n\r\n    app.service(\"LisaApplication\", LisaApplication);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service de gestion de la liste des clients\r\n     */\r\n    class ListeClientsService implements IListeClientsService {\r\n        public static CLASS_NAME = \"ListeClientsService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(ListeClientsService.CLASS_NAME);\r\n\r\n        // Proprietés\r\n        private listeRelationsEconomiques: Modeles.Application.IRelationEconomique[];\r\n        private listeIndicateursFiltre: Modeles.Application.IIndicateurFiltre[];\r\n        private listeTotalIdSirenClients: Array<Modeles.Rest.PortefeuilleV1.client.IClients>;\r\n        private listePortefeuillesAvecLimite: Array<Modeles.Application.IPortefeuille>;\r\n\r\n        private estLimiteClientsAtteinte: boolean;  //Indique que l'affichage concerne un Apporteur d'affaires avec un gros volume de clients\r\n        private identifiantEds: number;             //identifiant EDS transmis lors de l'appel à la méthode getListeRelationsEconomiques\r\n\r\n        private affichageModificationChoix: boolean;\r\n\r\n        //Booléen qui indique si on vient du bloc revue ou non\r\n        private isAccesDepuisBlocRevue: boolean;\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$location,\r\n            Constantes.Inject.Angular.$window,\r\n            Constantes.Inject.Angular.$q,\r\n            Constantes.Inject.Services.recherchePortefeuilleRestService,\r\n            Constantes.Inject.Services.relationCommercialeRestService,\r\n            Constantes.Inject.Services.clientRestService,\r\n            Constantes.Inject.Services.contexteService,\r\n            Constantes.Inject.Services.indicateurService,\r\n            Constantes.Inject.Services.ihmService,\r\n            Constantes.Inject.Services.habilitationService,\r\n            Constantes.Inject.Services.begacliService,\r\n            Constantes.Inject.Services.mockService, //NOUVEL_INDICATEUR\r\n            Constantes.Inject.Services.suiviParComplementaireRestService\r\n        ];\r\n\r\n        /**\r\n         * Constructeur\r\n         * @param serviceAgentExtended\r\n         * @param $location\r\n         */\r\n        constructor(\r\n            private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $location: ng.ILocationService,\r\n            private $window: ng.IWindowService,\r\n            private $q: ng.IQService,\r\n            private recherchePortefeuilleService: Services.Rest.RecherchePortefeuille.IRecherchePortefeuilleService,\r\n            private relationCommercialeRestService: Services.Rest.RelationCommerciale.IRechercheCommercialeService,\r\n            private clientRestService: Services.Rest.Client.IClientService,\r\n            private contexteService: Services.Application.IContexteService,\r\n            private indicateurService: Services.Application.IIndicateurService,\r\n            private ihmService: Services.Application.IIhmService,\r\n            private habilitationService: Services.Application.IHabilitationService,\r\n            private begacliService: Services.Application.IBegacliService,\r\n            private mockService: Services.Application.IMockService,\r\n            private suiviParComplementaireRestService: Services.Rest.SuiviComplementaire.ISuiviComplementaireService\r\n        ) {\r\n\r\n            this.listeRelationsEconomiques = [];\r\n            this.listeIndicateursFiltre = [];\r\n        }\r\n\r\n        public getListeRelationsEconomiquesCache(): Array<Modeles.Application.IRelationEconomique> {\r\n            return this.listeRelationsEconomiques;\r\n        }\r\n\r\n        private clonerIndicateurClient(\r\n            codeOrigine: string,\r\n            codeCible: string,\r\n            client: Modeles.Rest.PortefeuilleV1.client.IClient): Modeles.Rest.PortefeuilleV1.client.IClient {\r\n            let indicateurOrigine: Modeles.Rest.PortefeuilleV1.client.IIndicateur;\r\n            let indicateurCible: Modeles.Rest.PortefeuilleV1.client.IIndicateur;\r\n            for (let itemClientIndicateur of client.listeClientIndicateur) {\r\n                indicateurOrigine = _.find(itemClientIndicateur.listeIndicateurClient, { code: codeOrigine });\r\n                indicateurCible = <Modeles.Rest.PortefeuilleV1.client.IIndicateur>{};\r\n                indicateurCible.code = codeCible;\r\n\r\n                if (indicateurOrigine) {\r\n\r\n                    if (codeCible === Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TEXTE.toString()) {\r\n                        // on converti au passage\r\n                        // date remplie --> Oui\r\n                        // date non remplie --> Non\r\n                        let texte: string;\r\n                        if (indicateurOrigine.valeur) {\r\n                            texte = Constantes.Application.CHAINE_OUI;\r\n                        } else {\r\n                            texte = Constantes.Application.CHAINE_NON;\r\n                        };\r\n                        indicateurCible.valeur = texte;\r\n                    } else {\r\n                        indicateurCible.valeur = indicateurOrigine.valeur;\r\n                    }\r\n                    indicateurCible.dateMaj = indicateurOrigine.dateMaj;\r\n                    indicateurCible.tendance = indicateurOrigine.tendance;\r\n\r\n                }\r\n                // Pour la 1ère fois qu'on ajoute l'indicateur dans la liste\r\n                if (!itemClientIndicateur.listeIndicateurClient) {\r\n                    itemClientIndicateur.listeIndicateurClient = Array<Modeles.Rest.PortefeuilleV1.client.IIndicateur>();\r\n                }\r\n                itemClientIndicateur.listeIndicateurClient.push(indicateurCible);\r\n            }\r\n            return client;\r\n        }\r\n\r\n        public getListeRelationsEconomiques(\r\n            identifiantEds: number,\r\n            listePortefeuilles: Array<Modeles.Application.IPortefeuille>,\r\n            typeForcage: Enum.PageClients.TYPE_FORCAGE,\r\n            listeIndicateursTableau: Array<Modeles.Application.IIndicateurChoix>,\r\n            isAccesDepuisBlocRevue: boolean,\r\n            listeCodeSuiviParComplementaire?: string[]\r\n        ): ng.IPromise<Array<Modeles.Application.IRelationEconomique>> {\r\n            let queryCli = <Modeles.Rest.PortefeuilleV1.client.IParametresEntree>{};\r\n            let queryCliExpert = <Modeles.Rest.PortefeuilleV1.suiviComplementaire.ISuiviComplementaire>{};\r\n\r\n            //Si l'on appelle la méthode avec un nouvel identifiantEds, on initialise estLimiteClientsAtteinte.\r\n            this.initialiserEstLimiteClientsAtteinte(identifiantEds);\r\n\r\n            if (!this.listeRelationsEconomiques || this.listeRelationsEconomiques.length === 0\r\n                || this.isAccesDepuisBlocRevue !== isAccesDepuisBlocRevue\r\n                || typeForcage === Enum.PageClients.TYPE_FORCAGE.SANS) {\r\n                this.isAccesDepuisBlocRevue = isAccesDepuisBlocRevue;\r\n                this.indicateurService.setListeIndicateurChoix(listeIndicateursTableau);\r\n                let listeClientsIdSirenTotal: Array<Modeles.Rest.PortefeuilleV1.client.IClients> = [];\r\n                if (listeCodeSuiviParComplementaire.length > 0) { // Cas Portefeuille Expert SPC\r\n                    return this.contexteService.getContexte()\r\n                        .then((contexte: Modeles.Application.IContexte) => {\r\n                            queryCli.codeEtablissement = contexte.codeEtablissement;\r\n                            queryCliExpert.listeSuivi = [];\r\n                            queryCliExpert.suiviComplementaireModifie = null;\r\n                            listeCodeSuiviParComplementaire.forEach((code: string) => {\r\n                                queryCliExpert.listeSuivi.push(\r\n                                    {\r\n                                        codeEtablissement: contexte.codeEtablissement,\r\n                                        codeTypeSuiviComplementaire: code,\r\n                                        idEdsInterne: contexte.edsVisu,\r\n                                        designationLongueEds: null,\r\n                                        libelleSuiviComplementaire: null,\r\n                                        libelleSuiviComplementClient: null,\r\n                                        numeroPersonne: null,\r\n                                        dateMajEnregistrement: null,\r\n                                        typeElementStructure: null,\r\n                                        indicateurRestitutionClient: null,\r\n                                        indicateurRestitutionClientRMP: null,\r\n                                        informationAnimation: null\r\n                                    });\r\n                            });\r\n                            console.log(\"Recup client Expert query >>>> \", queryCliExpert);\r\n                            return this.suiviParComplementaireRestService.getClientsSuiviComplementaire(queryCliExpert);\r\n                        })\r\n                        .then((listeSuiviComplementaire: Modeles.Rest.PortefeuilleV1.suiviComplementaire.ISuiviComplementaire) => {\r\n                            let listeRelationsEcoApp: Array<Modeles.Application.IRelationEconomique> = [];\r\n\r\n                            // Initialisation de la liste des valeurs de chaque indicateurs filtres existant\r\n                            _.forEach(this.listeIndicateursFiltre, (indicFiltre: Modeles.Application.IIndicateurFiltre) => {\r\n                                indicFiltre.listeValeurs = [];\r\n                            });\r\n                            let relationEcoApp = <Modeles.Application.IRelationEconomique>{};\r\n\r\n                            relationEcoApp.identifiantPortefeuille = 0;\r\n                            relationEcoApp.libellePortefeuille = \"Portefeuille expertise\";\r\n\r\n                            relationEcoApp.id = \"0\";\r\n                            relationEcoApp.nom = Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                            this.ajouterListeClientsExpertIdSirenTotal(listeSuiviComplementaire.listeSuivi, listeClientsIdSirenTotal);\r\n                            relationEcoApp.listeClients = this.listeClientsRestToAppExpert(\r\n                                listeSuiviComplementaire.listeSuivi);\r\n\r\n                            relationEcoApp.listeIndicateurs = [];\r\n\r\n                            // Récupération du type de personne (client/prospect)\r\n                            relationEcoApp.estClient = true;\r\n\r\n                            // A jout de la relation économique à la liste\r\n                            if (relationEcoApp.listeClients.length !== 0) {\r\n                                listeRelationsEcoApp.push(relationEcoApp);\r\n                            }\r\n                            this.listeRelationsEconomiques = listeRelationsEcoApp;\r\n                            this.listeTotalIdSirenClients = listeClientsIdSirenTotal;\r\n                            // Appel au service portefeuille/client pour les autres indicateurs\r\n                            queryCli.listeClients = listeClientsIdSirenTotal;\r\n                            queryCli.listeIndicateurs = [];\r\n\r\n                            // On ajoute l'indicateur ACTIF/INACTIF par défaut + Potentiel prospect + Premier Equipement\r\n                            // (car affichés en tant que marqueurs)\r\n                            queryCli.listeIndicateurs.push(Enum.Indicateur.CODEREST.ACTIF.toString());\r\n\r\n                            // on ne met le potentiel prospect que si habilité à la SHPIQ1\r\n                            if (this.habilitationService.estHabiliteConsultPotentielProspect()) {\r\n                                queryCli.listeIndicateurs.push(Enum.Indicateur.CODEREST.POT_PROS.toString());\r\n                            }\r\n                            queryCli.listeIndicateurs.push(Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString());\r\n\r\n                            // On ajoute les indicateurs choisis si ils ont un codeRest\r\n                            let premierEquipementAAjouter = false;\r\n                            _.forEach(this.indicateurService.getListeIndicateurChoix(), (indicChoix: Modeles.Application.IIndicateurChoix) => {\r\n                                if (indicChoix.choisi) {\r\n                                    if (indicChoix.indicateur.codeRest\r\n                                        && indicChoix.indicateur.code !== Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {\r\n                                        queryCli.listeIndicateurs.push(indicChoix.indicateur.codeRest);\r\n                                    } else if (indicChoix.indicateur.code === Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {\r\n                                        // et On verifie si l'indicateur Premier équipement est ajouté si c'est le cas on utilisera \r\n                                        // cette information pour dupliquer l'indicateur tag Premier équipement\r\n                                        premierEquipementAAjouter = true;\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            // suppression des doublons dans la liste\r\n                            queryCli.listeIndicateurs = _.uniq(queryCli.listeIndicateurs);\r\n                            return this.getResultatListeRelations(queryCli, premierEquipementAAjouter);\r\n                            // return this.$q.when([]);\r\n                        });\r\n\r\n                } else { // Cas Portefeuille Agent\r\n                    console.log(\"Recup client Portefeuille\");\r\n                    return this.contexteService.getContexte()\r\n                        .then((contexte: Modeles.Application.IContexte) => {\r\n                            queryCli.codeEtablissement = contexte.codeEtablissement;\r\n\r\n                            let queryRCV2 = <Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommercialeParametres>{};\r\n                            queryRCV2.codeEtablissement = contexte.codeEtablissement;\r\n                            queryRCV2.identifiantEds = identifiantEds;\r\n                            queryRCV2.listeIdentifiantPortefeuille = this.listePortefeuillesToListeId(listePortefeuilles);\r\n                            queryRCV2.nombreLimiteMaxClient = Constantes.Service.RELATION_COMMERCIALE_NB_MAX_RES;\r\n\r\n                            switch (typeForcage) {\r\n                                case Enum.PageClients.TYPE_FORCAGE.CLIENTS:\r\n                                    queryRCV2.filtrageClientProspect = Enum.FiltrageRelationCommerciale.FILTRECLIENTPROSPECT.CLIENT.toString();\r\n                                    break;\r\n                                case Enum.PageClients.TYPE_FORCAGE.PROSPECTS:\r\n                                    queryRCV2.filtrageClientProspect = Enum.FiltrageRelationCommerciale.FILTRECLIENTPROSPECT.PROSPECTTIERS.toString();\r\n                                    break;\r\n                                default:\r\n                                    queryRCV2.filtrageClientProspect = Enum.FiltrageRelationCommerciale.FILTRECLIENTPROSPECT.TOUS.toString();\r\n                                    if (typeForcage === Enum.PageClients.TYPE_FORCAGE.TOUT) {\r\n                                        queryRCV2.nombreLimiteMaxClient = Constantes.Service.RELATION_COMMERCIALE_NB_MAX_NO_LIMIT;\r\n                                    }\r\n                            }\r\n\r\n                            return this.relationCommercialeRestService.getRelationCommerciale(queryRCV2);\r\n                        }).then((relationCommerciale: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale) => {\r\n                            // NOUVEL_INDICATEUR c'est ici qu'on peut surcharger un indicateur avant qu'il n'arrive.\r\n                            // relationCommerciale = this.mockService.ajouterLeader(relationCommerciale);\r\n                            // relationCommerciale = this.mockService.ajouterObjectif(relationCommerciale);\r\n                            // relationCommerciale = this.mockService.ajouterEncoursBDF(relationCommerciale);  \r\n                            // relationCommerciale = this.mockService.ajouterBegacli(relationCommerciale);\r\n                            // relationCommerciale = this.begacliService.completerUniversBegacli(relationCommerciale);\r\n\r\n                            return this.serviceAgentExtended.getFromContext(Constantes.Contexte.ACCES_DEPUIS_BLOC_REVUE).then((accesDepuisBlocRevue: string) => {\r\n                                if (relationCommerciale.messageInformation\r\n                                    && relationCommerciale.messageInformation.code === Constantes.Service.RELATION_COMMERCIALE_CODE_MAX_CLIENT_ATTEINT\r\n                                    && accesDepuisBlocRevue !== \"O\") {\r\n                                    this.estLimiteClientsAtteinte = true; //On indique que la limite max des clients est atteinte\r\n\r\n                                    // Création de la liste des portefeuilles\r\n                                    this.listePortefeuillesAvecLimite = [];\r\n                                    _.forEach(relationCommerciale.listePortefeuilles, (portefeuilleRC: Modeles.Rest.PortefeuilleV1.relationCommerciale.IPortefeuille) => {\r\n                                        let portefeuille = <Modeles.Application.IPortefeuille>{};\r\n                                        portefeuille.id = portefeuilleRC.identifiantPortefeuille;\r\n                                        portefeuille.libelle = portefeuilleRC.libellePortefeuille;\r\n                                        portefeuille.nombreTotalClients = portefeuilleRC.nombreTotalClients;\r\n                                        portefeuille.nombreTotalProspectsTiers = portefeuilleRC.nombreTotalProspectsTiers;\r\n                                        this.listePortefeuillesAvecLimite.push(portefeuille);\r\n                                    });\r\n\r\n                                    // Création de l'erreur\r\n                                    let erreur = <MyWay.Services.Erreur>{};\r\n                                    erreur.codeLibelle = relationCommerciale.messageInformation.code;\r\n                                    erreur.libelle = relationCommerciale.messageInformation.libelle;\r\n\r\n                                    return this.$q.reject(erreur);\r\n                                } else { // Cas Nominal\r\n                                    let listeRelationsEcoApp: Array<Modeles.Application.IRelationEconomique> = [];\r\n\r\n                                    // Initialisation de la liste des valeurs de chaque indicateurs filtres existant\r\n                                    _.forEach(this.listeIndicateursFiltre, (indicFiltre: Modeles.Application.IIndicateurFiltre) => {\r\n                                        indicFiltre.listeValeurs = [];\r\n                                    });\r\n\r\n                                    // Concaténation des listes clients de chaque portefeuille reçus et création \r\n                                    _.forEach(relationCommerciale.listePortefeuilles, (portefeuilleRC: Modeles.Rest.PortefeuilleV1.relationCommerciale.IPortefeuille) => {\r\n\r\n                                        // Création de la liste des relations économiques\r\n                                        _.forEach(portefeuilleRC.listeRelation, (relationRest: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelation) => {\r\n                                            let relationEcoApp = <Modeles.Application.IRelationEconomique>{};\r\n\r\n                                            relationEcoApp.identifiantPortefeuille = portefeuilleRC.identifiantPortefeuille;\r\n                                            relationEcoApp.libellePortefeuille = portefeuilleRC.libellePortefeuille;\r\n\r\n                                            relationEcoApp.id = relationRest.identifiantRelationEco.toString();\r\n                                            relationEcoApp.nom = relationRest.libelleRelationEco ? relationRest.libelleRelationEco : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                                            this.ajouterListeClientsIdSirenTotal(relationRest.listeClient, listeClientsIdSirenTotal);\r\n                                            relationEcoApp.listeClients = this.listeClientsRestToApp(\r\n                                                relationRest.listeClient,\r\n                                                relationEcoApp.nom,\r\n                                                relationRest.identifiantRelationEco,\r\n                                                relationEcoApp.identifiantPortefeuille,\r\n                                                relationEcoApp.libellePortefeuille);\r\n\r\n                                            // On ajout une liste d'indicateur manuellemenent au niveau relation commerciale \r\n                                            // car non renvoyé par la ressource relationCommerciale mais par la ressource client.\r\n                                            for (let code of Constantes.Indicateur.INDICATEUR_CEER_MANUELLEMENT) {\r\n                                                relationRest.listeIndicateurRelation.push(this.creerIndcateur(code));\r\n                                            }\r\n\r\n                                            relationEcoApp.listeIndicateurs = this.getIndicateursPourRelation(relationRest.listeIndicateurRelation);\r\n\r\n                                            // Récupération du type de personne (client/prospect)\r\n                                            relationEcoApp.estClient = undefined;\r\n                                            let indicProspect: Modeles.Application.IIndicateur[] =\r\n                                                _.where(relationEcoApp.listeIndicateurs, { \"code\": Enum.Indicateur.CODEREL.CLIENTPROSPECT.toString() });\r\n                                            if (indicProspect) {\r\n                                                relationEcoApp.estClient = Utils.DataUtils.getEstClientDepuisIndicateur(indicProspect[0]);\r\n                                            }\r\n\r\n                                            // A jout de la relation économique à la liste\r\n                                            if (relationEcoApp.listeClients.length !== 0) {\r\n                                                listeRelationsEcoApp.push(relationEcoApp);\r\n                                            }\r\n                                        });\r\n                                    });\r\n\r\n                                    this.listeRelationsEconomiques = listeRelationsEcoApp;\r\n                                    this.listeTotalIdSirenClients = listeClientsIdSirenTotal;\r\n\r\n                                    // Appel au service portefeuille/client pour les autres indicateurs\r\n                                    queryCli.listeClients = listeClientsIdSirenTotal;\r\n                                    queryCli.listeIndicateurs = [];\r\n\r\n                                    // On ajoute l'indicateur ACTIF/INACTIF par défaut + Potentiel prospect + Premier Equipement\r\n                                    // (car affichés en tant que marqueurs)\r\n                                    queryCli.listeIndicateurs.push(Enum.Indicateur.CODEREST.ACTIF.toString());\r\n\r\n                                    // on ne met le potentiel prospect que si habilité à la SHPIQ1\r\n                                    if (this.habilitationService.estHabiliteConsultPotentielProspect()) {\r\n                                        queryCli.listeIndicateurs.push(Enum.Indicateur.CODEREST.POT_PROS.toString());\r\n                                    }\r\n                                    queryCli.listeIndicateurs.push(Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString());\r\n\r\n                                    // On ajoute les indicateurs choisis si ils ont un codeRest\r\n                                    let premierEquipementAAjouter = false;\r\n                                    _.forEach(this.indicateurService.getListeIndicateurChoix(), (indicChoix: Modeles.Application.IIndicateurChoix) => {\r\n                                        if (indicChoix.choisi) {\r\n                                            if (indicChoix.indicateur.codeRest\r\n                                                && indicChoix.indicateur.code !== Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {\r\n                                                queryCli.listeIndicateurs.push(indicChoix.indicateur.codeRest);\r\n                                            } else if (indicChoix.indicateur.code === Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {\r\n                                                // et On verifie si l'indicateur Premier équipement est ajouté si c'est le cas on utilisera \r\n                                                // cette information pour dupliquer l'indicateur tag Premier équipement\r\n                                                premierEquipementAAjouter = true;\r\n                                            }\r\n                                        }\r\n                                    });\r\n\r\n                                    // suppression des doublons dans la liste\r\n                                    queryCli.listeIndicateurs = _.uniq(queryCli.listeIndicateurs);\r\n                                    //if (queryCli.listeIndicateurs.length > 0 && queryCli.listeClients.length > 0) {\r\n                                    //    return this.clientRestService.getClientsIndicateurs(queryCli)\r\n                                    //        .then((client: Modeles.Rest.PortefeuilleV1.client.IClient) => {\r\n\r\n                                    //            // NOUVEL_INDICATEUR ajouterBouchonIndicateurClient\r\n                                    //            //client = this.mockService.ajouterBouchonIndicateurClient(queryCli, Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(), client);\r\n\r\n                                    //            client = this.begacliService.completerUniversBegacliClient(client);\r\n\r\n                                    //            console.log(\"==> client2 : \", client);\r\n\r\n                                    //            // Si l'indicateur premier équipement est ajouté au panier on recopie les indicateurs premier equipement tag\r\n                                    //            // pour créer premier équipement.\r\n                                    //            client = this.clonerIndicateurClient(\r\n                                    //                Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(),\r\n                                    //                Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TEXTE.toString(), client);\r\n\r\n                                    //            if (premierEquipementAAjouter) {\r\n                                    //                client = this.clonerIndicateurClient(\r\n                                    //                    Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(),\r\n                                    //                    Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT.toString(), client);\r\n                                    //            }\r\n\r\n\r\n\r\n                                    //            _.forEach(client.listeClientIndicateur, (clientIndicateur: Modeles.Rest.PortefeuilleV1.client.IClientIndicateur) => {\r\n                                    //                //On trie la liste avant de la restituer afin que tous les clients aient des listes d'indicateurs identiques.\r\n                                    //                if (clientIndicateur.listeIndicateurClient) {\r\n                                    //                    clientIndicateur.listeIndicateurClient = clientIndicateur.listeIndicateurClient.sort(\r\n                                    //                        (a: Portefeuille.Modeles.Rest.PortefeuilleV1.client.IIndicateur,\r\n                                    //                            b: Portefeuille.Modeles.Rest.PortefeuilleV1.client.IIndicateur) =>\r\n                                    //                            (a.code > b.code) ? 1 : ((b.code > a.code) ? -1 : 0)\r\n                                    //                    );\r\n                                    //                }\r\n                                    //                this.ajouterIndicateurPourClient(clientIndicateur.identifiantPersonne, clientIndicateur.listeIndicateurClient);\r\n                                    //            });\r\n                                    //            return this.listeRelationsEconomiques;\r\n                                    //        });\r\n                                    //} else {\r\n                                    //    return this.$q.when(this.listeRelationsEconomiques);\r\n                                    //}\r\n                                    return this.getResultatListeRelations(queryCli, premierEquipementAAjouter);\r\n                                }\r\n                            });\r\n\r\n                        });\r\n                }\r\n            } else {\r\n                //Mis a jour uniquement des indicateurs clients\r\n                console.log(\"--> else uniquement , que indicateurs\");\r\n                let listeEcartIndicateursParametrables: Array<Modeles.Application.IIndicateurType> =\r\n                    this.indicateurService.getListeEcartIndicateurParametrable(listeIndicateursTableau);\r\n                this.indicateurService.setListeIndicateurChoix(listeIndicateursTableau);\r\n                if (listeEcartIndicateursParametrables.length > 0) {\r\n                    return this.majClientsIndicateurs(listeEcartIndicateursParametrables).then(() => this.$q.when(this.listeRelationsEconomiques));\r\n                } else {\r\n                    return this.$q.when(this.listeRelationsEconomiques);\r\n                }\r\n            }\r\n        }\r\n\r\n        private getResultatListeRelations(query: Modeles.Rest.PortefeuilleV1.client.IParametresEntree, premierEquipementAAjouter: boolean): ng.IPromise<Modeles.Application.IRelationEconomique[]> {\r\n            if (query && query.listeIndicateurs.length > 0 && query.listeClients.length > 0) {\r\n                return this.clientRestService.getClientsIndicateurs(query)\r\n                    .then((client: Modeles.Rest.PortefeuilleV1.client.IClient) => {\r\n\r\n                        // NOUVEL_INDICATEUR ajouterBouchonIndicateurClient\r\n                        //client = this.mockService.ajouterBouchonIndicateurClient(queryCli, Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(), client);\r\n\r\n                        client = this.begacliService.completerUniversBegacliClient(client);\r\n\r\n                        console.log(\"==> client : \", client);\r\n\r\n                        // Si l'indicateur premier équipement est ajouté au panier on recopie les indicateurs premier equipement tag\r\n                        // pour créer premier équipement.\r\n                        client = this.clonerIndicateurClient(\r\n                            Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(),\r\n                            Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TEXTE.toString(), client);\r\n\r\n                        if (premierEquipementAAjouter) {\r\n                            client = this.clonerIndicateurClient(\r\n                                Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(),\r\n                                Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT.toString(), client);\r\n                        }\r\n\r\n\r\n\r\n                        _.forEach(client.listeClientIndicateur, (clientIndicateur: Modeles.Rest.PortefeuilleV1.client.IClientIndicateur) => {\r\n                            //On trie la liste avant de la restituer afin que tous les clients aient des listes d'indicateurs identiques.\r\n                            if (clientIndicateur.listeIndicateurClient) {\r\n                                clientIndicateur.listeIndicateurClient = clientIndicateur.listeIndicateurClient.sort(\r\n                                    (a: Portefeuille.Modeles.Rest.PortefeuilleV1.client.IIndicateur,\r\n                                        b: Portefeuille.Modeles.Rest.PortefeuilleV1.client.IIndicateur) =>\r\n                                        (a.code > b.code) ? 1 : ((b.code > a.code) ? -1 : 0)\r\n                                );\r\n                            }\r\n                            this.ajouterIndicateurPourClient(clientIndicateur.identifiantPersonne, clientIndicateur.listeIndicateurClient);\r\n                        });\r\n                        return this.listeRelationsEconomiques;\r\n                    });\r\n            } else {\r\n                return this.$q.when(this.listeRelationsEconomiques);\r\n            }\r\n        }\r\n\r\n        private creerIndcateur(code: string) {\r\n            let indicateur = <Modeles.Rest.PortefeuilleV1.client.IIndicateur>{};\r\n            indicateur.code = code;\r\n            return indicateur;\r\n        };\r\n\r\n        public majClientsIndicateurs(listeIndicateurARecuperer: Array<Modeles.Application.IIndicateurType>): ng.IPromise<void> {\r\n            console.log(\"--> majClientsIndicateurs\");\r\n            let listeIndicateursADemander: Array<Modeles.Application.IIndicateurType> = [];\r\n            // on vérifie que chaque indicateur n'est pas déja présent: on ne test que le premier client \r\n            // présent car ils ont tous les mêmes indicateurs\r\n            _.forEach(listeIndicateurARecuperer, (indic: Modeles.Application.IIndicateurType) => {\r\n                if (this.listeRelationsEconomiques\r\n                    && this.listeRelationsEconomiques.length > 0\r\n                    && this.listeRelationsEconomiques[0].listeClients\r\n                    && this.listeRelationsEconomiques[0].listeClients.length > 0) {\r\n                    let listecodeIndicateursDejaRecuperes: Array<string> =\r\n                        _.pluck(this.listeRelationsEconomiques[0].listeClients[0].listeIndicateurs, \"code\");\r\n                    if (listecodeIndicateursDejaRecuperes.indexOf(indic.code) < 0) {\r\n                        listeIndicateursADemander.push(indic);\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (listeIndicateursADemander.length > 0) {\r\n                let queryCli = <Modeles.Rest.PortefeuilleV1.client.IParametresEntree>{};\r\n                return this.contexteService.getContexte().then((contexte: Modeles.Application.IContexte) => {\r\n                    queryCli.codeEtablissement = contexte.codeEtablissement;\r\n                    queryCli.listeIndicateurs = _.pluck(listeIndicateursADemander, \"codeRest\");\r\n                    queryCli.listeIndicateurs = _.uniq(queryCli.listeIndicateurs);\r\n                    queryCli.listeClients = this.listeTotalIdSirenClients;\r\n                    // On ajoute les indicateurs choisis si ils ont un codeRest\r\n                    let premierEquipementAAjouter = false;\r\n                    _.forEach(this.indicateurService.getListeIndicateurChoix(), (indicChoix: Modeles.Application.IIndicateurChoix) => {\r\n                        if (indicChoix.choisi) {\r\n                            if (indicChoix.indicateur.codeRest\r\n                                && indicChoix.indicateur.code !== Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {\r\n                                queryCli.listeIndicateurs.push(indicChoix.indicateur.codeRest);\r\n                            } else if (indicChoix.indicateur.code === Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString()) {\r\n                                // et On verifie si l'indicateur Premier équipement est ajouté si c'est le cas on utilisera \r\n                                // cette information pour dupliquer l'indicateur tag Premier équipement\r\n                                premierEquipementAAjouter = true;\r\n                            }\r\n                        }\r\n                    });\r\n                    return this.clientRestService.getClientsIndicateurs(queryCli)\r\n                        .then((client: Modeles.Rest.PortefeuilleV1.client.IClient) => {\r\n                            // NOUVEL INDICATEUR ajouterBouchonIndicateurClient - Bouchon pour 1ere fois qu'on ajoute dans la liste\r\n                            //client = this.mockService.ajouterBouchonIndicateurClient(queryCli, Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(), client);\r\n\r\n                            client = this.begacliService.completerUniversBegacliClient(client);\r\n\r\n                            console.log(\"==> client1 : \", client);\r\n\r\n                            client = this.clonerIndicateurClient(\r\n                                Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(),\r\n                                Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TEXTE.toString(), client);\r\n\r\n                            if (premierEquipementAAjouter) {\r\n                                client = this.clonerIndicateurClient(\r\n                                    Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT_TAG.toString(),\r\n                                    Enum.Indicateur.CODEREST.PREMIER_EQUIPEMENT.toString(), client);\r\n                            }\r\n\r\n                            _.forEach(client.listeClientIndicateur, (clientIndicateur: Modeles.Rest.PortefeuilleV1.client.IClientIndicateur) => {\r\n                                //On trie la liste avant de la restituer afin que tous les clients aient des listes d'indicateurs identiques.\r\n                                if (clientIndicateur.listeIndicateurClient) {\r\n                                    clientIndicateur.listeIndicateurClient = clientIndicateur.listeIndicateurClient.sort(\r\n                                        (a: Portefeuille.Modeles.Rest.PortefeuilleV1.client.IIndicateur,\r\n                                            b: Portefeuille.Modeles.Rest.PortefeuilleV1.client.IIndicateur) =>\r\n                                            (a.code > b.code) ? 1 : ((b.code > a.code) ? -1 : 0)\r\n                                    );\r\n                                }\r\n                                // attention, dans ce cas il faut reinitiliaser les indicateurs de relations qui sont calculés sinon ils vont être doublés\r\n                                // jpdut : erreur , on mets à 0 à chaque fois.\r\n                                // du coup incomptatible avec ajouterIndicateurPourClient\r\n                                // il faut séparer le cumul.\r\n                                this.reinitIndicateursCalculesRelations(clientIndicateur.identifiantPersonne);\r\n                            });\r\n\r\n                            // Ajout séparé dans un comptage indépendant.\r\n                            _.forEach(client.listeClientIndicateur, (clientIndicateur: Modeles.Rest.PortefeuilleV1.client.IClientIndicateur) => {\r\n                                // ajout eles indicateurs\r\n                                this.ajouterIndicateurPourClient(clientIndicateur.identifiantPersonne, clientIndicateur.listeIndicateurClient);\r\n                            });\r\n                        });\r\n                });\r\n            } else {\r\n                return this.$q.when();\r\n            }\r\n        }\r\n\r\n        // remet les compteurs des indicateurs calculés sur la relation éco à 0\r\n        private reinitIndicateursCalculesRelations(clientId: number) {\r\n            _.forEach(this.listeRelationsEconomiques, (relation: Modeles.Application.IRelationEconomique) => {\r\n                _.forEach(relation.listeClients, (client: Modeles.Application.IClient) => {\r\n                    if (client.id === clientId.toString()) {\r\n                        this.initIndicateurNombre(relation, Enum.Indicateur.CODEREL.REV_NB_SSFAMILLES_PROPOSE);\r\n                        this.initIndicateurNombre(relation, Enum.Indicateur.CODEREL.PNB_3112);\r\n                        this.initIndicateurNombre(relation, Enum.Indicateur.CODEREL.PNB_N);\r\n                        this.initIndicateurNombre(relation, Enum.Indicateur.CODEREL.PNB_N_MOINS_1);\r\n                        this.initIndicateurNombre(relation, Enum.Indicateur.CODEREL.NB_AFFAIRES_EN_COURS);\r\n                        this.initIndicateurNombre(relation, Enum.Indicateur.CODEREL.NB_PROPOSITIONS_EN_COURS);\r\n                        this.initIndicateurNombre(relation, Enum.Indicateur.CODEREL.NB_APPETENCES);\r\n                        this.initIndicateurNombre(relation, Enum.Indicateur.CODEREL.ENCOURS_BDF);\r\n\r\n                        //gestion indicateur seg rel groupe : on somme le nombre de produit a proposer de tous les client\r\n                        let indicateurSegRelGroupe: Modeles.Application.IIndicateur =\r\n                            _.find(relation.listeIndicateurs, { \"code\": Enum.Indicateur.CODEREL.SEG_RELATIONNELLE_GROUPE });\r\n                        if (indicateurSegRelGroupe) {\r\n                            indicateurSegRelGroupe.valeur = \"NC\";\r\n                            indicateurSegRelGroupe.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                        }\r\n\r\n                        //gestion indicateur date dernière revue  : on récupère la date dernière revue le plus récent\r\n                        let dateDerniereRevueRel: Modeles.Application.IIndicateur =\r\n                            _.find(relation.listeIndicateurs, { \"code\": Enum.Indicateur.CODEREL.REV_DATE_DERNIERE_REVUE });\r\n                        if (dateDerniereRevueRel) {\r\n                            dateDerniereRevueRel.valeur = \"NC\";\r\n                            dateDerniereRevueRel.valeurDate = undefined;\r\n                            dateDerniereRevueRel.typeIndicateur = Enum.Indicateur.TYPE.DATE;\r\n                        }\r\n                        return false;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        private initIndicateurNombre(relation: Modeles.Application.IRelationEconomique, code: Enum.Indicateur.CODEREL) {\r\n            let indicateurNombre: Modeles.Application.IIndicateur = _.find(relation.listeIndicateurs, { \"code\": code });\r\n            if (indicateurNombre) {\r\n                indicateurNombre.valeurNumber = 0;\r\n            }\r\n        }\r\n\r\n        private ajouterIndicateurPourClient(clientId: number, indicateurs: Modeles.Rest.PortefeuilleV1.client.IIndicateur[]): void {\r\n            // on parcours la liste des relation pour se placer sur le bon client\r\n            _.forEach(this.listeRelationsEconomiques, (relation: Modeles.Application.IRelationEconomique) => {\r\n                _.forEach(relation.listeClients, (client: Modeles.Application.IClient) => {\r\n                    if (client.id === clientId.toString()) {\r\n                        client.listeIndicateurs = client.listeIndicateurs.concat(this.getIndicateursPourClient(indicateurs));\r\n\r\n                        // Gestion de l'indicateur particulier Top Actif\r\n                        let indicActif: Modeles.Application.IIndicateur[] = _.where(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.ACTIF.toString() });\r\n                        if (indicActif && indicActif.length > 0) {\r\n                            client.estActif = Utils.DataUtils.getEstActifDepuisIndicateur(indicActif[0]);\r\n                            if (indicActif[0].valeur !== Constantes.Application.CHAINE_INDICATEUR_NON_CONNU) {\r\n                                client.estActifRenseigne = true;\r\n                            }\r\n                        }\r\n\r\n                        // gestion indicateur \"equipe\"\r\n                        // BDRPTF-316 : ne s'applique que aux clients ! Un prospect ne peut pas être \"Client sans contrat\"\r\n                        let indicateurEquipe: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.EQUIPE });\r\n                        if (indicateurEquipe\r\n                            && client.estClient) {\r\n                            client.estSansContrat = indicateurEquipe.valeur === Constantes.Application.CHAINE_NON;\r\n                        }\r\n\r\n                        // BDRL-2285 : si le client est un prospect ou est sans contrat on va forcer le inactif en NC afin de pas les sortir dans les filtres\r\n                        if (!client.estClient) {\r\n                            client.estActif = null;\r\n                            client.estActifRenseigne = false;\r\n\r\n                            // faut aussi maj l'indicateur dans .listeIndicateurs[code=actif] = NC\r\n                            let indicateurActif: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.ACTIF });\r\n                            indicateurActif.valeur = \"NC\";\r\n\r\n                            // idem pour les sans contrats\r\n                            client.estSansContrat = null;\r\n                            let indicateurSansContrat: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.EQUIPE });\r\n                            indicateurSansContrat.valeur = \"NC\";\r\n                        }\r\n\r\n                        //Pour la liste suivante on somme le nombre de tous les client de la relation et on la met à jour sur la relation\r\n                        this.cumulerNombre(client, relation, Enum.Indicateur.CODE.REV_NB_SSFAMILLES_PROPOSE, Enum.Indicateur.CODEREL.REV_NB_SSFAMILLES_PROPOSE);\r\n                        this.cumulerNombre(client, relation, Enum.Indicateur.CODE.PNB_3112, Enum.Indicateur.CODEREL.PNB_3112);\r\n                        this.cumulerNombre(client, relation, Enum.Indicateur.CODE.PNB_N, Enum.Indicateur.CODEREL.PNB_N);\r\n                        this.cumulerNombre(client, relation, Enum.Indicateur.CODE.PNB_N_MOINS_1, Enum.Indicateur.CODEREL.PNB_N_MOINS_1);\r\n                        this.cumulerNombre(client, relation, Enum.Indicateur.CODE.NB_AFFAIRES_EN_COURS, Enum.Indicateur.CODEREL.NB_AFFAIRES_EN_COURS);\r\n                        this.cumulerNombre(client, relation, Enum.Indicateur.CODE.NB_PROPOSITIONS_EN_COURS, Enum.Indicateur.CODEREL.NB_PROPOSITIONS_EN_COURS);\r\n                        this.cumulerNombre(client, relation, Enum.Indicateur.CODE.NB_APPETENCES, Enum.Indicateur.CODEREL.NB_APPETENCES);\r\n\r\n                        this.cumulerNombre(client, relation, Enum.Indicateur.CODE.ENCOURS_BDF, Enum.Indicateur.CODEREL.ENCOURS_BDF);\r\n\r\n\r\n                        // seg rel groupe : on prend celle envoyée par la ressource client (pas de calcul à faire)\r\n                        // On l'effectue qu'une fois par relation\r\n                        let indicateurSegRelGroupeRel: Modeles.Application.IIndicateur = _.find(relation.listeIndicateurs, { \"code\": Enum.Indicateur.CODEREL.SEG_RELATIONNELLE_GROUPE });\r\n                        if (indicateurSegRelGroupeRel && indicateurSegRelGroupeRel.valeur !== undefined) {\r\n                            let indicateurSegRelGroupe: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.SEG_RELATIONNELLE_GROUPE });\r\n                            if (indicateurSegRelGroupe) {\r\n                                indicateurSegRelGroupeRel.valeur = indicateurSegRelGroupe.valeur;\r\n                            }\r\n                        }\r\n\r\n                        // Top_CC : recupérer la valeur index du top CC du tableau constant pour mettre dans valeurNumber\r\n                        let indicateurTopCC: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.TOP_CC });\r\n                        if (indicateurTopCC) {\r\n                            indicateurTopCC.valeurNumber = Services.Utils.ApplicationUtils.ValeurNumberTopCC(indicateurTopCC.valeur);\r\n                        }\r\n\r\n                        //gestion indicateur date dernière revue : on récupère la date la plus récente de tous les clients\r\n                        let indicateurDateDerniereRevue: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE });\r\n                        let indicateurDateDerniereRevueRel: Modeles.Application.IIndicateur = _.find(relation.listeIndicateurs, { \"code\": Enum.Indicateur.CODEREL.REV_DATE_DERNIERE_REVUE });\r\n\r\n                        if (indicateurDateDerniereRevue\r\n                            && indicateurDateDerniereRevueRel\r\n                            && this.comparerDateADateB(indicateurDateDerniereRevue.valeurDate, indicateurDateDerniereRevueRel.valeurDate) === 1) {\r\n                            indicateurDateDerniereRevueRel.valeur = indicateurDateDerniereRevue.valeur;\r\n                            indicateurDateDerniereRevueRel.valeurDate = indicateurDateDerniereRevue.valeurDate;\r\n                        }\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        private cumulerNombre(client: Modeles.Application.IClient,\r\n            relation: Modeles.Application.IRelationEconomique,\r\n            codeClient: Enum.Indicateur.CODE,\r\n            codeRelation: Enum.Indicateur.CODEREL): void {\r\n            let indicateurNbClient: Modeles.Application.IIndicateur = _.find(client.listeIndicateurs, { \"code\": codeClient });\r\n            let indicateurNbRelation: Modeles.Application.IIndicateur = _.find(relation.listeIndicateurs, { \"code\": codeRelation });\r\n\r\n            if (indicateurNbRelation\r\n                && indicateurNbClient) {\r\n                indicateurNbRelation.valeurNumber += this.gererInfinity(indicateurNbClient.valeurNumber);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * supprime les valeur -infinity + infinity par 0\r\n         * @param nombre nombre à corrigé\r\n         */\r\n        private gererInfinity(nombre: number): number {\r\n            return (nombre === -Infinity || nombre === Infinity) ? 0 : nombre;\r\n        }\r\n\r\n        private listePortefeuillesToListeId(listePortefeuilles: Array<Modeles.Application.IPortefeuille>): Array<number> {\r\n            let listeId = [];\r\n            _.forEach(listePortefeuilles, (portefeuille: Modeles.Application.IPortefeuille) => {\r\n                if (portefeuille.estAffiche) {\r\n                    listeId.push(portefeuille.id);\r\n                }\r\n            });\r\n            return listeId;\r\n        }\r\n\r\n        private listeClientsRestToApp(\r\n            listeClientsRest: Array<Modeles.Rest.PortefeuilleV1.relationCommerciale.IClient>,\r\n            nomRelationEconomique: string,\r\n            idRelationEconomique: number,\r\n            identifiantPortefeuille: number,\r\n            libellePortefeuille: string\r\n        ): Array<Modeles.Application.IClient> {\r\n            let listeClientsApp = [];\r\n\r\n            _.forEach(listeClientsRest, (clientRest: Modeles.Rest.PortefeuilleV1.relationCommerciale.IClient) => {\r\n\r\n                let clientApp = <Modeles.Application.IClient>{};\r\n                clientApp.nom = clientRest.raisonSociale ? clientRest.raisonSociale : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                clientApp.nomRelationEconomique = nomRelationEconomique;\r\n                clientApp.idRelationEconomique = idRelationEconomique;\r\n                // XXXX\r\n                clientApp.codePersonnaliteJuridique = clientRest.codePersonnaliteJuridique;\r\n\r\n                // pour export\r\n                clientApp.identifiantPortefeuille = identifiantPortefeuille;\r\n                clientApp.libellePortefeuille = libellePortefeuille;\r\n                clientApp.id = clientRest.identifiantPersonne.toString();\r\n                clientApp.siren = clientRest.numeroSiren;\r\n                clientApp.estActifRenseigne = false;\r\n                clientApp.listeIndicateurs = this.getIndicateursPourClient(clientRest.listeIndicateurClient);\r\n                clientApp.estLeader = Utils.DataUtils.getEstLeaderDepuisCodeLeader(clientRest.codeLeaderEspaceEntreprise);\r\n\r\n                // Gestion de l'indicateur particulier Client/Prospect\r\n                clientApp.estClient = undefined;\r\n                let indicClientProspect: Modeles.Application.IIndicateur[] = _.where(clientApp.listeIndicateurs, { \"code\": Enum.Indicateur.CODE.CLIENTPROSPECT.toString() });\r\n                if (indicClientProspect) {\r\n                    clientApp.estClient = Utils.DataUtils.getEstClientDepuisIndicateur(indicClientProspect[0]);\r\n                }\r\n                listeClientsApp.push(clientApp);\r\n            });\r\n            return listeClientsApp;\r\n        }\r\n\r\n        private listeClientsRestToAppExpert(\r\n            listeClientsRest: Array<Modeles.Rest.PortefeuilleV1.suiviComplementaire.ISuivi>\r\n        ): Array<Modeles.Application.IClient> {\r\n            let listeClientsApp = [];\r\n\r\n            _.forEach(listeClientsRest, (clientRest: Modeles.Rest.PortefeuilleV1.suiviComplementaire.ISuivi) => {\r\n                let clientApp = <Modeles.Application.IClient>{};\r\n                clientApp.estSansContrat = null;\r\n                clientApp.identifiantPortefeuille = 0;\r\n                clientApp.libellePortefeuille = \"\";\r\n                clientApp.id = clientRest.numeroPersonne.toString();\r\n                clientApp.estActifRenseigne = false;\r\n                if (clientRest.informationAnimation) {\r\n                    clientApp.estClient = clientRest.informationAnimation.codeTypeRelationPersonne === \"0\" || clientRest.informationAnimation.codeTypeRelationPersonne === null;\r\n                    clientApp.estLeader = clientRest.informationAnimation.typeRoleRelation === \"2\";\r\n                    clientApp.nom = clientRest.informationAnimation.raisonSociale;\r\n                    clientApp.nomRelationEconomique = clientRest.informationAnimation.intituleRelation;\r\n                    clientApp.idRelationEconomique = clientRest.informationAnimation.identifiantRelationEconomique;\r\n                    clientApp.codePersonnaliteJuridique = clientRest.informationAnimation.codePersonaliteJuridique;\r\n                    clientApp.siren = clientRest.informationAnimation.numeroSiren;\r\n                    clientApp.listeIndicateurs = this.getIndicateursPourClientExpert(clientRest);\r\n                    clientApp.nbPersonneRelation = clientRest.informationAnimation.nombrePersonneMenage;\r\n                }\r\n                clientApp.listeIndicateurs = this.getIndicateursPourClientExpert(clientRest);\r\n                listeClientsApp.push(clientApp);\r\n            });\r\n            // return listeClientsApp;\r\n            return _.uniq(listeClientsApp, \"id\");\r\n        }\r\n\r\n        public razRelations(): void {\r\n            this.listeRelationsEconomiques = [];\r\n        }\r\n\r\n        /**\r\n         * Récupération des filtres des indicateurs textes pour la Relation Eco.\r\n         * @param listeIndicateurs\r\n         */\r\n        private getIndicateursPourRelation(listeIndicateurs: Array<Modeles.Rest.PortefeuilleV1.relationCommerciale.IIndicateur>): Modeles.Application.IIndicateur[] {\r\n            let reponse: Modeles.Application.IIndicateur[] = [];\r\n\r\n            if (listeIndicateurs) {\r\n                _.forEach(listeIndicateurs, (indicRest: Modeles.Rest.PortefeuilleV1.relationCommerciale.IIndicateur) => {\r\n                    let indicateur: Modeles.Application.IIndicateur = Utils.ApplicationUtils.getIndicateur(indicRest);\r\n                    reponse.push(indicateur);\r\n\r\n                    let indicateurType: Modeles.Application.IIndicateurType = <Modeles.Application.IIndicateurType>{};\r\n                    let indicateurFiltre: Modeles.Application.IIndicateurFiltre = <Modeles.Application.IIndicateurFiltre>{};\r\n                    indicateurType.code = indicateur.code;\r\n                    indicateurType.typeIndicateur = indicateur.typeIndicateur;\r\n                    indicateurType.intitule = indicateur.intitule;\r\n                    indicateurFiltre.indicateur = indicateurType;\r\n                    indicateurFiltre.utilise = false;\r\n                    indicateurFiltre.utiliseRelationEco = false;\r\n                    indicateurFiltre.listeValeurs = [];\r\n\r\n                    let listeCodeIndicateurRelationDejaAjoutes: string[] = _.pluck(this.listeIndicateursFiltre, \"indicateur.code\");\r\n                    if (indicateur.intitule && listeCodeIndicateurRelationDejaAjoutes.indexOf(indicateur.code) < 0) {\r\n                        this.listeIndicateursFiltre.push(indicateurFiltre);\r\n                    }\r\n\r\n                    if (indicateur.typeIndicateur === Enum.Indicateur.TYPE.TEXTE) {\r\n                        _.forEach(this.listeIndicateursFiltre, (indicFiltre: Modeles.Application.IIndicateurFiltre) => {\r\n                            if (indicFiltre.indicateur.code === indicRest.code) {\r\n                                let valeurFiltre: Modeles.Application.IValeurFiltre = <Modeles.Application.IValeurFiltre>{};\r\n                                valeurFiltre.libelle = (indicateur.valeur) ? indicateur.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                                valeurFiltre.actif = false;\r\n                                indicFiltre.listeValeurs.push(valeurFiltre);\r\n                                indicFiltre.listeValeurs = _.uniq(indicFiltre.listeValeurs, \"libelle\");\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            return reponse;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param listeIndicateurs\r\n         */\r\n        private getIndicateursPourClient(listeIndicateurs: Array<Modeles.Rest.PortefeuilleV1.client.IIndicateur>): Modeles.Application.IIndicateur[] {\r\n            let reponse: Modeles.Application.IIndicateur[] = [];\r\n            if (listeIndicateurs) {\r\n                _.forEach(listeIndicateurs, (indicRest: Modeles.Rest.PortefeuilleV1.client.IIndicateur) => {\r\n                    let indicateur: Modeles.Application.IIndicateur = Utils.ApplicationUtils.getIndicateur(indicRest);\r\n                    reponse.push(indicateur);\r\n\r\n                    //if (!this.listIndicateursDefinie) {\r\n                    let indicateurType: Modeles.Application.IIndicateurType = <Modeles.Application.IIndicateurType>{};\r\n                    let indicateurFiltre: Modeles.Application.IIndicateurFiltre = <Modeles.Application.IIndicateurFiltre>{};\r\n                    indicateurType.code = indicateur.code;\r\n                    indicateurType.typeIndicateur = indicateur.typeIndicateur;\r\n                    indicateurType.intitule = indicateur.intitule;\r\n                    indicateurFiltre.indicateur = indicateurType;\r\n                    indicateurFiltre.utilise = false;\r\n                    indicateurFiltre.utiliseRelationEco = false;\r\n                    indicateurFiltre.listeValeurs = [];\r\n                    let listeCodeIndicateurDejaAjoutes: string[] = _.pluck(this.listeIndicateursFiltre, \"indicateur.code\");\r\n\r\n                    if (indicateur.intitule && listeCodeIndicateurDejaAjoutes.indexOf(indicateur.code) < 0) {\r\n\r\n                        this.listeIndicateursFiltre.push(indicateurFiltre);\r\n\r\n                    }\r\n                    //}\r\n                    if (indicateur.typeIndicateur === Enum.Indicateur.TYPE.TEXTE) {\r\n\r\n                        _.forEach(this.listeIndicateursFiltre, (indicFiltre: Modeles.Application.IIndicateurFiltre) => {\r\n\r\n                            if (indicFiltre.indicateur.code === indicRest.code) {\r\n                                let valeurFiltre: Modeles.Application.IValeurFiltre = <Modeles.Application.IValeurFiltre>{};\r\n                                valeurFiltre.libelle = (indicateur.valeur) ? indicateur.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                                valeurFiltre.actif = false;\r\n                                if (indicateur.code === Enum.Indicateur.CODE.TOP_CC.toString()) {\r\n                                    valeurFiltre.ordreAffichage = Services.Utils.ApplicationUtils.ValeurNumberTopCC(indicateur.valeur);\r\n                                }\r\n                                indicFiltre.listeValeurs.push(valeurFiltre);\r\n                                indicFiltre.listeValeurs = _.uniq(indicFiltre.listeValeurs, \"libelle\");\r\n                            }\r\n                        });\r\n                    }\r\n\r\n\r\n                    if (indicateur.typeIndicateur === Enum.Indicateur.TYPE.BEGACLI) {\r\n                        _.forEach(this.listeIndicateursFiltre, (indicFiltre: Modeles.Application.IIndicateurFiltre) => {\r\n\r\n                            if (indicFiltre.indicateur.code === indicRest.code) {\r\n                                let valeurFiltre: Modeles.Application.IValeurFiltre = <Modeles.Application.IValeurFiltre>{};\r\n\r\n                                valeurFiltre.libelle = (indicateur.valeur) ? indicateur.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                                valeurFiltre.actif = false;\r\n                                indicFiltre.listeValeurs.push(valeurFiltre);\r\n                                indicFiltre.listeValeurs = _.uniq(indicFiltre.listeValeurs, \"libelle\");\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                });\r\n            }\r\n            return reponse;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param listeIndicateurs pour suivi par complémentaire SPC\r\n         */\r\n        private getIndicateursPourClientExpert(clientRest: Modeles.Rest.PortefeuilleV1.suiviComplementaire.ISuivi): Modeles.Application.IIndicateur[] {\r\n            let reponse: Modeles.Application.IIndicateur[] = [];\r\n            if (clientRest.informationAnimation) {\r\n                /* Indicateur Date dernier RDV */\r\n                let date: Date = clientRest.informationAnimation.dateDernierRdvRealise && clientRest.informationAnimation.dateDernierRdvRealise.substring(0, 4) !== \"0001\" ?\r\n                    new Date(clientRest.informationAnimation.dateDernierRdvRealise) : null;\r\n                reponse.push(this.getIndicateurPourCodeIndicateur(date, Enum.Indicateur.CODE.DATE_DERNIER_RDV.toString(), Enum.Indicateur.TYPE.DATE));\r\n                /* Indicateur nombre RDV année en cours */\r\n                reponse.push(this.getIndicateurPourCodeIndicateur(clientRest.informationAnimation.nombreRdvAnneeEnCours, Enum.Indicateur.CODE.NB_RDV_ANNEE_EN_COURS.toString(), Enum.Indicateur.TYPE.NOMBRE));\r\n                /* Indicateur nombre RDV 12 derniers mois */\r\n                reponse.push(this.getIndicateurPourCodeIndicateur(clientRest.informationAnimation.nombreRdv12Mois, Enum.Indicateur.CODE.NB_RDV_12_MOIS_GLISSANTS.toString(), Enum.Indicateur.TYPE.NOMBRE));\r\n                /* Indicateur Marché */\r\n                reponse.push(this.getIndicateurPourCodeIndicateur(clientRest.informationAnimation.libelleCourtSegmentation, Enum.Indicateur.CODE.MARCHE.toString(), Enum.Indicateur.TYPE.TEXTE));\r\n                /* Indicateur Segmentation relationnelle client */\r\n                reponse.push(this.getIndicateurPourCodeIndicateur(clientRest.informationAnimation.libelleSegmentClientele2, Enum.Indicateur.CODE.SEG_RELATIONNELLE.toString(), Enum.Indicateur.TYPE.TEXTE));\r\n                /* Date dernier CR */\r\n                date = clientRest.informationAnimation.dateDernierEntretien && clientRest.informationAnimation.dateDernierEntretien.substring(0, 4) !== \"0001\" ?\r\n                    new Date(clientRest.informationAnimation.dateDernierEntretien) : null;\r\n                reponse.push(this.getIndicateurPourCodeIndicateur(date, Enum.Indicateur.CODE.DATE_DERNIER_ENTRETIEN.toString(), Enum.Indicateur.TYPE.DATE));\r\n                /* Date prochain RDV */\r\n                date = clientRest.informationAnimation.dateProchainRdv && clientRest.informationAnimation.dateProchainRdv.substring(0, 4) !== \"0001\" ?\r\n                    new Date(clientRest.informationAnimation.dateProchainRdv) : null;\r\n                reponse.push(this.getIndicateurPourCodeIndicateur(date, Enum.Indicateur.CODE.DATE_PROCHAIN_RDV.toString(), Enum.Indicateur.TYPE.DATE));\r\n            }\r\n\r\n            return reponse;\r\n        }\r\n\r\n        private getIndicateurPourCodeIndicateur(valeur: any, codeIndicateur: string, type: Enum.Indicateur.TYPE): Modeles.Application.IIndicateur {\r\n            return {\r\n                code: codeIndicateur,\r\n                dateMaj: null,\r\n                icone: null,\r\n                intitule: \"\",\r\n                typeIndicateur: type,\r\n                valeur: type === Enum.Indicateur.TYPE.TEXTE ? valeur : null,\r\n                valeurDate: type === Enum.Indicateur.TYPE.DATE ? valeur : null,\r\n                valeurNumber: type === Enum.Indicateur.TYPE.NOMBRE ? valeur : null,\r\n                tendance: null\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'ajouter les clients à la liste total des id et siren clients\r\n         * @param {Array<Modeles.Rest.PortefeuilleV1.relationCommerciale.IClient>} listeClient\r\n         * @returns {void}\r\n         */\r\n        private ajouterListeClientsIdSirenTotal(\r\n            listeClient: Array<Modeles.Rest.PortefeuilleV1.relationCommerciale.IClient>,\r\n            listeClientsIdSirenTotal: Array<Modeles.Rest.PortefeuilleV1.client.IClients>): void {\r\n            _.forEach(listeClient, (client: Modeles.Rest.PortefeuilleV1.relationCommerciale.IClient) => {\r\n                let clientRest = <Modeles.Rest.PortefeuilleV1.client.IClients>{};\r\n                clientRest.idClient = client.identifiantPersonne;\r\n                clientRest.sirenClient = client.numeroSiren;\r\n                listeClientsIdSirenTotal.push(clientRest);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'ajouter les clients à la liste total des id et siren clients\r\n         * @param {Array<Modeles.Rest.PortefeuilleV1.relationCommerciale.IClient>} listeClient\r\n         * @returns {void}\r\n         */\r\n        private ajouterListeClientsExpertIdSirenTotal(\r\n            listeClient: Array<Modeles.Rest.PortefeuilleV1.suiviComplementaire.ISuivi>,\r\n            listeClientsIdSirenTotal: Array<Modeles.Rest.PortefeuilleV1.client.IClients>): void {\r\n            _.forEach(listeClient, (client: Modeles.Rest.PortefeuilleV1.suiviComplementaire.ISuivi) => {\r\n                let clientRest = <Modeles.Rest.PortefeuilleV1.client.IClients>{};\r\n                clientRest.idClient = client.numeroPersonne;\r\n                clientRest.sirenClient = client.informationAnimation.numeroSiren;\r\n                listeClientsIdSirenTotal.push(clientRest);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de recuperer la liste des indicateurs filtre\r\n         * @returns {Array<Modeles.Application.IIndicateurFiltre>}\r\n         */\r\n        public getListeIndicateursFiltre(): Array<Modeles.Application.IIndicateurFiltre> {\r\n            this.ordonnerValeurListeFiltre(this.listeIndicateursFiltre);\r\n            return this.listeIndicateursFiltre;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de recuperer la liste des indicateurs filtre\r\n         * @returns {Array<Modeles.Application.IIndicateurFiltre>}\r\n         */\r\n        public getListeIndicateursRelationEcoFiltre(): Array<Modeles.Application.IIndicateurFiltre> {\r\n            this.ordonnerValeurListeFiltre(this.listeIndicateursFiltre);\r\n            return this.listeIndicateursFiltre;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de recuperer la liste des portefeuilles avec limite\r\n         * @returns {Array<Modeles.Application.IIndicateurFiltre>}\r\n         */\r\n        public getListePortefeuillesAvecLimite(): Array<Modeles.Application.IPortefeuille> {\r\n            return this.listePortefeuillesAvecLimite;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'ordonner les valeurs d'une liste de filtre\r\n         * @param {Array<Modeles.Application.IIndicateurFiltre>} listeFiltre\r\n         * @returns {void}\r\n         */\r\n        private ordonnerValeurListeFiltre(listeFiltre: Array<Modeles.Application.IIndicateurFiltre>): void {\r\n            _.forEach(listeFiltre, (filtre: Modeles.Application.IIndicateurFiltre) => {\r\n                // console.log(\"--> avant tri : \", filtre.indicateur.code + \" - \" + filtre.listeValeurs.length);\r\n                // sort ne s'active que si plus de 1 élément, sinon ne fait rien.\r\n                filtre.listeValeurs = filtre.listeValeurs.sort((a: Modeles.Application.IValeurFiltre, b: Modeles.Application.IValeurFiltre) => {\r\n                    if (filtre.indicateur.code === Enum.Indicateur.CODE.TOP_CC.toString()) {\r\n                        return ListeClientsService.compareInterne(a.ordreAffichage, b.ordreAffichage, null);\r\n                    } if (filtre.indicateur.code === Enum.Indicateur.CODE.LEADER.toString()  // leader\r\n                        || filtre.indicateur.code === Enum.Indicateur.CODE.EQUIPE.toString() // avec contrat\r\n                        || filtre.indicateur.code === Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TEXTE.toString()) {\r\n                        // console.log(\"--> on inverse le tri pour : \", filtre.indicateur.code);\r\n                        return ListeClientsService.compareInterneOuiNon(a.libelle, b.libelle, Constantes.Application.CHAINE_INDICATEUR_NON_CONNU);\r\n                    } else {\r\n                        return ListeClientsService.compareInterne(a.libelle, b.libelle, Constantes.Application.CHAINE_INDICATEUR_NON_CONNU);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'ordonner une liste de clients avec le leader en premier\r\n         * @param {Array<Modeles.Application.IClient>} listeClients\r\n         * @returns {Array<Modeles.Application.IClient>}\r\n         */\r\n        public ordonnerListeClientsAvecLeader(listeClients: Array<Modeles.Application.IClient>): Array<Modeles.Application.IClient> {\r\n            return listeClients.sort((a: Modeles.Application.IClient, b: Modeles.Application.IClient) => {\r\n                return ListeClientsService.compareInterne(a.estLeader, b.estLeader, false);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Compare avec gestion du null non typé\r\n         * @param a\r\n         * @param b\r\n         * @param valNull\r\n         */\r\n        public static compareInterne<T>(a: T, b: T, valeurNull: T) {\r\n            if (a === valeurNull) {\r\n                return 1;\r\n            } else if (b === valeurNull) {\r\n                return -1;\r\n            } else {\r\n                return (a > b) ? 1 : ((a < b) ? -1 : 0);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Compare avec gestion du null non typé. inversé, en 1er Oui , puis Non, puis NC ( valeurNull ) ....\r\n         * @param a\r\n         * @param b\r\n         * @param valNull\r\n         */\r\n        public static compareInterneOuiNon<T>(a: T, b: T, valeurNull: T) {\r\n            if (a === valeurNull) {\r\n                return 1;\r\n            } else if (b === valeurNull) {\r\n                return -1;\r\n            } else {\r\n                return (a > b) ? -1 : ((a < b) ? 1 : 0);\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Compare 2 dates et restitue le résultat de cette comparaison (0: A égal à B, 1: A supérieur à B, -1: A inférieur à B)\r\n         * @param dateA\r\n         * @param dateB\r\n         */\r\n        private comparerDateADateB(dateA: Date, dateB: Date): number {\r\n            const resultatAEgalB: number = 0;\r\n            const resultatASuperieurB: number = 1;\r\n            const resultatAInferieurB: number = -1;\r\n\r\n            if ((dateA === undefined && dateB === null) || (dateB === undefined)) {\r\n                return resultatASuperieurB;\r\n            }\r\n\r\n            if ((dateA === null && dateB === undefined) || (dateA === undefined)) {\r\n                return resultatAInferieurB;\r\n            }\r\n\r\n            if (moment(dateA).isAfter(dateB)) {\r\n                return resultatASuperieurB;\r\n            } else if (moment(dateA).isBefore(dateB)) {\r\n                return resultatAInferieurB;\r\n            } else {\r\n                return resultatAEgalB;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param identifiantEds\r\n         */\r\n        public initialiserEstLimiteClientsAtteinte(identifiantEds: number): void {\r\n            if (this.identifiantEds !== identifiantEds) {\r\n                this.estLimiteClientsAtteinte = false;\r\n                this.identifiantEds = identifiantEds;\r\n            }\r\n        }\r\n\r\n        /**\r\n         *\r\n         */\r\n        public getEstLimiteClientsAtteinte(): boolean {\r\n            return this.estLimiteClientsAtteinte;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public getAffichageModificationChoix(): boolean {\r\n            return this.affichageModificationChoix;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param valeur\r\n         */\r\n        public setAffichageModificationChoix(valeur: boolean): void {\r\n            this.affichageModificationChoix = valeur;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe ListeClientsService\r\n     */\r\n    export interface IListeClientsService {\r\n        getListeRelationsEconomiques(\r\n            identifiantEds: number,\r\n            listePortefeuilles: Array<Modeles.Application.IPortefeuille>,\r\n            typeForcage: Enum.PageClients.TYPE_FORCAGE,\r\n            listeIndicateursTableau: Array<Modeles.Application.IIndicateurChoix>,\r\n            isAccesDepuisBlocRevue: boolean,\r\n            listeCodeSuiviParComplementaire?: string[]\r\n        ): ng.IPromise<Array<Modeles.Application.IRelationEconomique>>;\r\n        getListeIndicateursFiltre(): Array<Modeles.Application.IIndicateurFiltre>;\r\n        getListeIndicateursRelationEcoFiltre(): Array<Modeles.Application.IIndicateurFiltre>;\r\n        getListePortefeuillesAvecLimite(): Array<Modeles.Application.IPortefeuille>;\r\n        razRelations(): void;\r\n        majClientsIndicateurs(listeIndicateurARecuperer: Array<Modeles.Application.IIndicateurType>): ng.IPromise<void>;\r\n        getListeRelationsEconomiquesCache(): Array<Modeles.Application.IRelationEconomique>;\r\n        ordonnerListeClientsAvecLeader(listeClients: Array<Modeles.Application.IClient>): Array<Modeles.Application.IClient>;\r\n        getEstLimiteClientsAtteinte(): boolean;\r\n        initialiserEstLimiteClientsAtteinte(identifiantEds: number): void;\r\n        getAffichageModificationChoix(): boolean;\r\n        setAffichageModificationChoix(valeur: boolean): void;\r\n    }\r\n\r\n    app.service(ListeClientsService.CLASS_NAME, ListeClientsService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service Permettant l'usage d'un mock\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant l'usage d'un mock pour injecté des nouveau indicateur\r\n     */\r\n    class MockService implements IMockService {\r\n        public static CLASS_NAME = \"MockService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(MockService.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [];\r\n\r\n        // Variables utiles\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() { }\r\n\r\n        /**\r\n         * ajouter un Leader\r\n         * pour simuler l'indicateur leader en attendant l'évolution du service REST\r\n         * @param relationCommerciale\r\n         */\r\n        public ajouterLeader(\r\n            relationCommerciale: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale):\r\n            Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale {\r\n            for (let itemPortefeuille of relationCommerciale.listePortefeuilles) {\r\n                for (let itemRelation of itemPortefeuille.listeRelation) {\r\n                    for (let itemClient of itemRelation.listeClient) {\r\n                        let indicateur = <Modeles.Rest.PortefeuilleV1.relationCommerciale.IIndicateur>{};\r\n                        indicateur.code = \"leader\";\r\n                        indicateur.valeur = itemClient.codeLeaderEspaceEntreprise === \"L\" ? \"O\" : \"N\";\r\n                        indicateur.dateMaj = \"31/12/2100\";\r\n                        itemClient.listeIndicateurClient.push(indicateur);\r\n                    }\r\n                }\r\n            }\r\n            console.log(\"--> XXXX relationCommerciale avec leader : \", relationCommerciale);\r\n            return relationCommerciale;\r\n        }\r\n\r\n        /**\r\n         * ajouter un Leader\r\n         * pour simuler l'indicateur leader en attendant l'évolution du service REST\r\n         * @param relationCommerciale\r\n         */\r\n        public ajouterObjectif(\r\n            relationCommerciale: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale):\r\n            Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale {\r\n            for (let itemPortefeuille of relationCommerciale.listePortefeuilles) {\r\n                for (let itemRelation of itemPortefeuille.listeRelation) {\r\n                    for (let itemClient of itemRelation.listeClient) {\r\n                        let indicateur = <Modeles.Rest.PortefeuilleV1.relationCommerciale.IIndicateur>{};\r\n                        indicateur.code = \"OBJECTIF_FLUX\";\r\n                        indicateur.valeur = this.getRandomInt(100);\r\n                        indicateur.dateMaj = \"31/12/2100\";\r\n                        itemClient.listeIndicateurClient.push(indicateur);\r\n                    }\r\n                }\r\n            }\r\n            console.log(\"--> XXXX relationCommerciale avec leader : \", relationCommerciale);\r\n            return relationCommerciale;\r\n        }\r\n\r\n        /**\r\n         * ajouter un encours BDF\r\n         * pour simuler l'indicateur leader en attendant l'évolution du service REST\r\n         * @param relationCommerciale\r\n         */\r\n        public ajouterEncoursBDF(\r\n            relationCommerciale: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale):\r\n            Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale {\r\n            for (let itemPortefeuille of relationCommerciale.listePortefeuilles) {\r\n                for (let itemRelation of itemPortefeuille.listeRelation) {\r\n                    for (let itemClient of itemRelation.listeClient) {\r\n                        let indicateur = <Modeles.Rest.PortefeuilleV1.relationCommerciale.IIndicateur>{};\r\n                        indicateur.code = \"ENCOURS_BDF\";\r\n                        indicateur.valeur = this.getRandomInt(100);\r\n                        indicateur.dateMaj = \"31/12/2100\";\r\n                        itemClient.listeIndicateurClient.push(indicateur);\r\n                    }\r\n                }\r\n            }\r\n            // console.log(\"--> XXXX relationCommerciale avec encours BDF : \", relationCommerciale);\r\n            return relationCommerciale;\r\n        }\r\n\r\n        /**\r\n         * ajouter un bagacli\r\n         * pour simuler l'indicateur begacli en attendant l'évolution du service REST\r\n         * @param relationCommerciale\r\n         */\r\n        public ajouterBegacli(\r\n            relationCommerciale: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale):\r\n            Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale {\r\n            for (let itemPortefeuille of relationCommerciale.listePortefeuilles) {\r\n                for (let itemRelation of itemPortefeuille.listeRelation) {\r\n                    for (let itemClient of itemRelation.listeClient) {\r\n                        let indicateur = <Modeles.Rest.PortefeuilleV1.relationCommerciale.IIndicateur>{};\r\n                        indicateur.code = \"BEGACLI\";\r\n                        indicateur.valeur = this.getRandomBegacli();\r\n                        indicateur.dateMaj = \"31/12/2100\";\r\n                        itemClient.listeIndicateurClient.push(indicateur);\r\n                    }\r\n                }\r\n            }\r\n            // console.log(\"--> XXXX relationCommerciale avec begacli : \", relationCommerciale);\r\n            return relationCommerciale;\r\n        }\r\n\r\n        /**\r\n         * NOUVEL INDICATEUR, ajouterBouchonIndicateurClient\r\n         * ajout indicateur client par bouchon dynamique.\r\n         * @param query\r\n         * @param code\r\n         * @param client\r\n         */\r\n        public ajouterBouchonIndicateurClient(\r\n            query: Modeles.Rest.PortefeuilleV1.client.IParametresEntree,\r\n            code: string,\r\n            client: Modeles.Rest.PortefeuilleV1.client.IClient): Modeles.Rest.PortefeuilleV1.client.IClient {\r\n            console.log(\"--> ajouterBouchonIndicateurClient recherche : \", code);\r\n            let indicateurRevue: Modeles.Rest.PortefeuilleV1.client.IIndicateur;\r\n            let indicateur: Modeles.Rest.PortefeuilleV1.client.IIndicateur;\r\n            if (_.indexOf(query.listeIndicateurs, code) < 0) {\r\n                console.log(\"--> ajouterBouchonIndicateurClient trouve !\");\r\n                for (let itemClientIndicateur of client.listeClientIndicateur) {\r\n                    indicateurRevue = _.find(itemClientIndicateur.listeIndicateurClient, { code : \"DateDerniereRevue\" });\r\n                    //console.log(\"--> ajouterBouchonIndicateurClient itemClientIndicateur : \", itemClientIndicateur, code);\r\n                    indicateur = <Modeles.Rest.PortefeuilleV1.client.IIndicateur>{};\r\n                    indicateur.code = code;\r\n                    indicateur.valeur = indicateurRevue ? indicateurRevue.valeur : \"\";\r\n                    indicateur.dateMaj = \"31/12/2100\";\r\n                    // Pour la 1ère fois qu'on ajoute l'indicateur dans la liste\r\n                    if (!itemClientIndicateur.listeIndicateurClient) {\r\n                        itemClientIndicateur.listeIndicateurClient = Array<Modeles.Rest.PortefeuilleV1.client.IIndicateur>();\r\n                    }\r\n                    itemClientIndicateur.listeIndicateurClient.push(indicateur);\r\n                }\r\n            }\r\n            return client;\r\n        }\r\n\r\n        /**\r\n         * NOUVEL INDICATEUR, pour bouchon en attedant service REST\r\n         * @param max\r\n         */\r\n        private getRandomInt(max: number): string {\r\n            let i: number = Math.floor(Math.random() * max);\r\n            // console.log(\"-->  random i : \", i);\r\n            if (i === 0) {\r\n                return null;\r\n            } else {\r\n                return (i - 1).toString();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * NOUVEL INDICATEUR, pour bouchon en attedant service REST\r\n         */\r\n        private getRandomBegacli(): string {\r\n            // onajoute en 1er le nombre de majuscules dans le texte begacli\r\n            let i: number = Math.floor(Math.random() * 4);\r\n            if (i === 0) {\r\n                return null;\r\n            } else {\r\n                return this.getRandom(\"B\", \"b\") + this.getRandom(\"E\", \"e\") + this.getRandom(\"G\", \"g\")\r\n                    + this.getRandom(\"A\", \"a\") + this.getRandom(\"C\", \"c\") + this.getRandom(\"L\", \"l\") + this.getRandom(\"I\", \"i\");\r\n            }\r\n        }\r\n\r\n        private getRandom(a: string, b: string): string {\r\n            let i: number = Math.floor(Math.random() * 2);\r\n            if (i === 0) {\r\n                return a;\r\n            } else {\r\n                return b;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Interface de la classe EventService\r\n     */\r\n    export interface IMockService {\r\n        ajouterLeader(\r\n            relationCommerciale: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale):\r\n            Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale;\r\n\r\n        ajouterObjectif(\r\n            relationCommerciale: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale):\r\n            Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale;\r\n\r\n        ajouterEncoursBDF(\r\n            relationCommerciale: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale):\r\n            Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale;\r\n\r\n        ajouterBegacli(\r\n            relationCommerciale: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale):\r\n            Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale;\r\n\r\n        ajouterBouchonIndicateurClient(\r\n            query: Modeles.Rest.PortefeuilleV1.client.IParametresEntree,\r\n            code: string,\r\n            client: Modeles.Rest.PortefeuilleV1.client.IClient): Modeles.Rest.PortefeuilleV1.client.IClient;\r\n    }\r\n\r\n    // Déclaration du service\r\n    app.service(Constantes.Inject.Services.mockService, MockService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service applicatif de gestion du drag and drop\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de gerer le choix EDS\r\n     */\r\n    class ModalePaniersService implements IModalePaniersService {\r\n        public static CLASS_NAME = \"ModalePaniersService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(ModalePaniersService.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [];\r\n\r\n        // Variables utiles\r\n        private modalePaniersControleur: Controleurs.ModalePaniersControleur;\r\n        private selectionIndicateursControleur: Controleurs.SelectionIndicateursControleur;\r\n        private estEditionPanier: boolean;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() { }\r\n\r\n        /**\r\n         * Méthode permettant de modifier modalePaniersControleur\r\n         * @param clientsControleur\r\n         * @return {void}\r\n         */\r\n        public setModalePaniersControleur(modalePaniersControleur: Controleurs.ModalePaniersControleur): void {\r\n            this.modalePaniersControleur = modalePaniersControleur;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier modalePaniersControleur\r\n         * @param clientsControleur\r\n         * @return {void}\r\n         */\r\n        public setSelectionIndicateursControleur(selectionIndicateursControleur: Controleurs.SelectionIndicateursControleur): void {\r\n            this.selectionIndicateursControleur = selectionIndicateursControleur;\r\n        }\r\n\r\n        /**\r\n         * Méthode pour mettre à jour la valeur de estEditionPanier\r\n         * @param val\r\n         */\r\n        public majEstEditionPanier(val: boolean): void {\r\n            this.estEditionPanier = val;\r\n        }\r\n\r\n        public getEstEditionPanier(): boolean {\r\n            return this.estEditionPanier ? this.estEditionPanier : false;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'état du drop panier à vrai\r\n         * @returns {void}\r\n         */\r\n        public activerDropPanier(): void {\r\n            if (this.modalePaniersControleur) {\r\n                this.modalePaniersControleur.setEstActiverDropPanier(true);\r\n            }\r\n            if (this.selectionIndicateursControleur) {\r\n                this.selectionIndicateursControleur.setEstActiverDropPanier(true);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'état du drop panier à faux\r\n         * @returns {void}\r\n         */\r\n        public desactiverDropPanier(): void {\r\n            if (this.modalePaniersControleur) {\r\n                this.modalePaniersControleur.setEstActiverDropPanier(false);\r\n            }\r\n            if (this.selectionIndicateursControleur) {\r\n                this.selectionIndicateursControleur.setEstActiverDropPanier(false);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'état du drop des tuiles du panier à vrai\r\n         * @param {Array<Modeles.Application.ITuilePanierSettings>} listeTuilePanierSettings\r\n         * @returns {void}\r\n         */\r\n        public activerDropTuilesPanier(listeTuilePanierSettings: Array<Modeles.Application.ITuilePanierSettings>): void {\r\n            _.forEach(listeTuilePanierSettings, (tuile: Modeles.Application.ITuilePanierSettings) => {\r\n                tuile.dropSettings.activerDragOver();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'état du drop des tuiles du panier à faux\r\n         * @param {Array<Modeles.Application.ITuilePanierSettings>} listeTuilePanierSettings\r\n         * @returns {void}\r\n         */\r\n        public desactiverDropTuilesPanier(listeTuilePanierSettings: Array<Modeles.Application.ITuilePanierSettings>): void {\r\n            _.forEach(listeTuilePanierSettings, (tuile: Modeles.Application.ITuilePanierSettings) => {\r\n                if (tuile.dropSettings) {\r\n                    tuile.dropSettings.desactiverDragOver();\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'état du drop poubelle à vrai\r\n         * @returns {void}\r\n         */\r\n        public afficherDropPoubelle(): void {\r\n            if (this.modalePaniersControleur) {\r\n                this.modalePaniersControleur.setEstAfficherDropPoubelle(true);\r\n            }\r\n            if (this.selectionIndicateursControleur) {\r\n                this.selectionIndicateursControleur.setEstAfficherDropPoubelle(true);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'état du drop poubelle à faux\r\n         * @returns {void}\r\n         */\r\n        public cacherDropPoubelle(): void {\r\n            if (this.modalePaniersControleur) {\r\n                this.modalePaniersControleur.setEstAfficherDropPoubelle(false);\r\n            }\r\n            if (this.selectionIndicateursControleur) {\r\n                this.selectionIndicateursControleur.setEstAfficherDropPoubelle(false);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'état du bouton valider à vrai\r\n         * @returns {void}\r\n         */\r\n        public afficherBoutonValider(): void {\r\n            if (this.modalePaniersControleur) {\r\n                this.modalePaniersControleur.setEstAfficherBoutonAjouter(true);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de modifier l'état du bouton valider à faux\r\n         * @returns {void}\r\n         */\r\n        public cacherBoutonValider(): void {\r\n            if (this.modalePaniersControleur) {\r\n                this.modalePaniersControleur.setEstAfficherBoutonAjouter(false);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de rafraichir listeTuileCatalogueSettings\r\n         * @return {void}\r\n         */\r\n        public rafraichirListeTuileCatalogueSettings(): void {\r\n            if (this.modalePaniersControleur) {\r\n                this.modalePaniersControleur.rafraichirListeTuileCatalogueSettings();\r\n            }\r\n            if (this.selectionIndicateursControleur) {\r\n                this.selectionIndicateursControleur.rafraichirListeTuileCatalogueSettings();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Methode permetant de rendre compatible les tuiles avec le drag and drop\r\n         * @return {void}\r\n         */\r\n        public rendreCompatibleTuilesAvecDragAndDrop(): void {\r\n            let boutons = document.getElementById(Constantes.ModalePaniers.ID_HTML_MODALE_PANIERS_BODY).getElementsByClassName(Constantes.ModalePaniers.CLASS_HTML_BOUTON_TUILE_STANDARD);\r\n\r\n            _.forEach(boutons, (bouton: Element) => {\r\n                bouton.setAttribute(Constantes.ModalePaniers.ATTRIBUT_HTML_DISABLED, Constantes.ModalePaniers.STRING_VALUE_TRUE);\r\n                bouton.setAttribute(Constantes.ModalePaniers.ATTRIBUT_HTML_STYLE, Constantes.ModalePaniers.STRING_VALUE_CURSOR_POINTER_IMPORTANT);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de créer un dragSettings\r\n         * @param {Modeles.Application.ITuileCatalogueSettings} tuileCatalogueSettings\r\n         * @return {Modeles.Application.IDragSettings}\r\n         */\r\n        public creerDragSettings(tuileCatalogueSettings: Modeles.Application.ITuileCatalogueSettings): Modeles.Application.IDragSettings {\r\n            let dragSettings = <Modeles.Application.IDragSettings>{};\r\n            dragSettings.idHTMLElementConteneur = Constantes.ModalePaniers.ID_HTML_MODALE_PANIERS_BODY;\r\n            dragSettings.donneesATransmettre = tuileCatalogueSettings;\r\n            dragSettings.estActiver = this.estEditionPanier ? this.estEditionPanier : false;\r\n            return dragSettings;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de créer un dropSettings\r\n         * @param {string} codeIndicateur\r\n         * @return {Modeles.Application.IDropSettings}\r\n         */\r\n        public creerDropSettings(event: (donnees: any) => void): Modeles.Application.IDropSettings {\r\n            let dropSettings = <Modeles.Application.IDropSettings>{};\r\n            dropSettings.idHTMLElementConteneur = Constantes.ModalePaniers.ID_HTML_MODALE_PANIERS_BODY;\r\n            dropSettings.estActiver = this.estEditionPanier ? this.estEditionPanier : false;\r\n            dropSettings.dropEventAction = event;\r\n            return dropSettings;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de supprimer un indicateur du panier\r\n         * @param {Modeles.Application.ITuilePanierSettings} tuilePanierSettings\r\n         * @param {Array<Modeles.Application.ITuileCatalogueSettings>} listeTuileCatalogueSettings\r\n         * @param {Array<Modeles.Application.ITuilePanierSettings>} listeTuilePanierSettings\r\n         * @param {Array<Modeles.Application.IFiltre>} listeFiltresClients\r\n         * @param {Array<Modeles.Application.IFiltre>} listeFiltresRelationEco\r\n         * @return {void}\r\n         */\r\n        public supprimerIndicateurPanier(\r\n            tuilePanierSettings: Modeles.Application.ITuilePanierSettings,\r\n            listeTuileCatalogueSettings: Array<Modeles.Application.ITuileCatalogueSettings>,\r\n            listeTuilePanierSettings: Array<Modeles.Application.ITuilePanierSettings>,\r\n            listeFiltresClients: Array<Modeles.Application.IFiltre>,\r\n            listeFiltresRelationEco: Array<Modeles.Application.IFiltre>): void {\r\n\r\n            // Récupération de la tuile catalogue settings\r\n            let tuileCatalogueSettings = _.find(listeTuileCatalogueSettings, (tuileCatalogue: Modeles.Application.ITuileCatalogueSettings) => {\r\n                return tuileCatalogue.indicateur.indicateur.code === tuilePanierSettings.indicateur.indicateur.code;\r\n            });\r\n\r\n            // Changement de l'état de l'indicateur\r\n            tuileCatalogueSettings.indicateur.choisi = false;\r\n\r\n            // Suppression de la tuile panier\r\n            _.remove(listeTuilePanierSettings, (tuilePanier: Modeles.Application.ITuilePanierSettings) => {\r\n                return tuilePanier.indicateur.indicateur.code === tuilePanierSettings.indicateur.indicateur.code;\r\n            });\r\n\r\n            // Mise à jour du message d'avertissement de modification de filtre\r\n            this.afficherMessageAvertissementFiltre(\r\n                listeFiltresRelationEco,\r\n                listeFiltresClients,\r\n                _.pluck(listeTuilePanierSettings, \"indicateur\")); \r\n\r\n            // Rafraichir listeTuileCatalogueSettings\r\n            this.rafraichirListeTuileCatalogueSettings();\r\n        }\r\n\r\n        /**\r\n         * Fonction permettant de copier une liste sans copier les items\r\n         * @param {Array<any>} liste\r\n         * @returns {Array<any>}\r\n         */\r\n        public copierListe(liste: Array<any>): Array<any> {\r\n            let copieListe = [];\r\n\r\n            _.forEach(liste, (item: any) => {\r\n                copieListe.push(item);\r\n            });\r\n\r\n            return copieListe;\r\n        }\r\n\r\n        /**\r\n         * Methode qui permet d'afficher ou non le message d'avertissement filtre\r\n         * @param {Array<Modeles.Application.IFiltre>} listeFiltresRelationEco\r\n         * @param {Array<Modeles.Application.IFiltre>} listeFiltresClients\r\n         * @param {Array<Modeles.Application.IIndicateurChoix>} listeChoixIndicateurs\r\n         * @return {void}\r\n         */\r\n        public afficherMessageAvertissementFiltre(\r\n            listeFiltresRelationEco: Array<Modeles.Application.IFiltre>,\r\n            listeFiltresClients: Array<Modeles.Application.IFiltre>,\r\n            listeChoixIndicateurs: Array<Modeles.Application.IIndicateurChoix>): void {\r\n            let nomFiltre1 = null;\r\n            let nomFiltre2 = null;\r\n            let nomFiltre3 = null;\r\n            let nomFiltre4 = null;\r\n\r\n            // Recuperation du nom des filtres relation eco\r\n            _.forEach(listeFiltresRelationEco, (filtre: Modeles.Application.IFiltre) => {\r\n                let indicateurChoixExistant = _.find(listeChoixIndicateurs, (indicateurChoix: Modeles.Application.IIndicateurChoix) => {\r\n                    return indicateurChoix.indicateur.codeRel === filtre.indicateur.indicateur.code;\r\n                });\r\n\r\n                if (!indicateurChoixExistant) {\r\n                    if (nomFiltre1) {\r\n                        nomFiltre2 = filtre.indicateur.indicateur.intitule;\r\n                    } else {\r\n                        nomFiltre1 = filtre.indicateur.indicateur.intitule;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Recuperation du nom des filtres client\r\n            _.forEach(listeFiltresClients, (filtre: Modeles.Application.IFiltre) => {\r\n                let indicateurChoixExistant = _.find(listeChoixIndicateurs, (indicateurChoix: Modeles.Application.IIndicateurChoix) => {\r\n                    return indicateurChoix.indicateur.code === filtre.indicateur.indicateur.code;\r\n                });\r\n\r\n                if (!indicateurChoixExistant) {\r\n                    if (nomFiltre3) {\r\n                        nomFiltre4 = filtre.indicateur.indicateur.intitule;\r\n                    } else {\r\n                        nomFiltre3 = filtre.indicateur.indicateur.intitule;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (this.modalePaniersControleur) {\r\n                this.modalePaniersControleur.afficherMessageAvertissementFiltre(nomFiltre1, nomFiltre2, nomFiltre3, nomFiltre4);\r\n            }\r\n            if (this.selectionIndicateursControleur) {\r\n                this.selectionIndicateursControleur.afficherMessageAvertissementFiltre(nomFiltre1, nomFiltre2, nomFiltre3, nomFiltre4);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Fonction permettant de generer un identifiant aléatoire\r\n         * @returns {number}\r\n         */\r\n        public genererIdentifiantAleatoire(): number {\r\n            return Math.floor(new Date().valueOf() * Math.random());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe ModalePaniersService\r\n     */\r\n    export interface IModalePaniersService {\r\n        setModalePaniersControleur(modalePaniersControleur: Controleurs.ModalePaniersControleur): void;\r\n        setSelectionIndicateursControleur(selectionIndicateursControleur: Controleurs.SelectionIndicateursControleur): void;\r\n        activerDropPanier(): void;\r\n        desactiverDropPanier(): void;\r\n        activerDropTuilesPanier(listeTuilePanierSettings: Array<Modeles.Application.ITuilePanierSettings>): void;\r\n        desactiverDropTuilesPanier(listeTuilePanierSettings: Array<Modeles.Application.ITuilePanierSettings>): void;\r\n        afficherDropPoubelle(): void;\r\n        cacherDropPoubelle(): void;\r\n        afficherBoutonValider(): void;\r\n        cacherBoutonValider(): void;\r\n        rafraichirListeTuileCatalogueSettings(): void;\r\n        rendreCompatibleTuilesAvecDragAndDrop(): void;\r\n        creerDragSettings(tuileCatalogueSettings: Modeles.Application.ITuileCatalogueSettings): Modeles.Application.IDragSettings;\r\n        creerDropSettings(event: (donnees: any) => void): Modeles.Application.IDropSettings;\r\n        supprimerIndicateurPanier(\r\n            tuilePanierSettings: Modeles.Application.ITuilePanierSettings,\r\n            listeTuileCatalogueSettings: Array<Modeles.Application.ITuileCatalogueSettings>,\r\n            listeTuilePanierSettings: Array<Modeles.Application.ITuilePanierSettings>,\r\n            listeFiltresClients: Array<Modeles.Application.IFiltre>,\r\n            listeFiltresRelationEco: Array<Modeles.Application.IFiltre>): void;\r\n        copierListe(liste: Array<any>): Array<any>;\r\n        afficherMessageAvertissementFiltre(\r\n            listeFiltresRelationEco: Array<Modeles.Application.IFiltre>,\r\n            listeFiltresClients: Array<Modeles.Application.IFiltre>,\r\n            listeChoixIndicateurs: Array<Modeles.Application.IIndicateurChoix>): void;\r\n        genererIdentifiantAleatoire(): number;\r\n        majEstEditionPanier(val: boolean): void;\r\n        getEstEditionPanier(): boolean;\r\n    }\r\n\r\n    // Déclaration du service\r\n    app.service(\"ModalePaniersService\", ModalePaniersService);\r\n}  ","// Code récupéré depuis Connaissance Client / Ancienne version des liens\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Service de génération d'un fichier CSV à partir d'un tableau\r\n     */\r\n    export class CsvService {\r\n        static EOL = \"\\r\\n\";\r\n        static BOM = \"\\ufeff\";\r\n        static SPECIAL_CHARS = {\r\n            \"\\\\t\": \"\\t\",\r\n            \"\\\\b\": \"\\b\",\r\n            \"\\\\v\": \"\\v\",\r\n            \"\\\\f\": \"\\f\",\r\n            \"\\\\r\": \"\\r\"\r\n        };\r\n        static DEFAULT_OPTIONS: ICsvOptions = {\r\n            txtDelimiter: \"\\\"\",\r\n            decimalSeparator: \",\",\r\n            quoteStrings: true,\r\n            addByteOrderMarker: true,\r\n            fieldSeparator: \";\",\r\n            charset: \"utf-8\",\r\n            label: false,\r\n            filename: \"export.csv\"\r\n        };\r\n\r\n        static $inject: string[] = [\r\n            \"$q\",\r\n            \"$parse\",\r\n            \"$window\",\r\n            \"$document\",\r\n            \"$timeout\"\r\n        ];\r\n\r\n        constructor(private $q: ng.IQService,\r\n            private $parse: ng.IParseService,\r\n            private $window: ng.IWindowService,\r\n            private $document: ng.IDocumentService,\r\n            private $timeout: ng.ITimeoutService) {\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name myway.tools.service:mwsfAdresseService#downloadCsv\r\n         * @methodOf myway.tools.service:mwCsvService\r\n         * @param {any[]} data Tableau de données\r\n         * @param {Myway.Tools.ICsvOptions} options Configuration du fichier csv\r\n         * @description\r\n         * Création et téléchargement d'un fichier csv à partir du tableau passé en paramètre.\r\n         * Le tableau doit être un objet simple sans sous-objets puisque ces derniers ne sont pas gérés.\r\n         * Les options sont toutes détaillées dans l'interface dédiée.\r\n         * \r\n         * #Configuration\r\n         * La configuration fonctionne par surcharge, il faut donc indiquer ce qui diffère de la configuration par défaut.\r\n         * <pre class=\"prettyprint\">\r\n         *   header: [ \"Nom\", \"Prénom\", \"Age\" ],\r\n         *   columnOrder: [\"nom\", \"prenom\", \"age\" ],\r\n         *   filename: \"personnes.csv\"\r\n         * </pre>\r\n         * \r\n         * ##Configuration par défaut du fichier csv:\r\n         * <pre class=\"prettyprint\">\r\n         *   txtDelimiter: \"\\\"\",\r\n         *   decimalSeparator: \",\",\r\n         *   quoteStrings: true,\r\n         *   addByteOrderMarker: true,\r\n         *   fieldSeparator: \";\",\r\n         *   charset: \"utf-8\",\r\n         *   label: false,\r\n         *   filename: \"export.csv\"\r\n         * </pre>\r\n         * @returns {Promise<any>} Promesse résolue lorsque le téléchargement est lancé ou rejetée en cas d'erreur.\r\n         */\r\n        public downloadCsv(header?: any[], data?: any[], options?: ICsvOptions): ng.IPromise<any> {\r\n            var deferred = this.$q.defer<any>();\r\n            options = this.getOptions(options);\r\n            var csv = this.stringify(header, data, options);\r\n            var blob = new Blob([csv], {\r\n                type: \"text/csv;charset=\" + options.charset + \";\"\r\n            });\r\n            if (window.navigator.msSaveOrOpenBlob) { // IE\r\n                if (navigator.msSaveBlob(blob, options.filename)) {\r\n                    deferred.resolve(null);\r\n                } else {\r\n                    deferred.reject(null);\r\n                }\r\n            } else { // other browsers\r\n                var objectURL = this.$window[\"URL\"].createObjectURL(blob);\r\n                var downloadLink = angular.element(\"<a></a>\");\r\n                downloadLink.attr(\"href\", objectURL);\r\n                downloadLink.attr(\"download\", options.filename);\r\n                downloadLink.attr(\"target\", \"_blank\");\r\n                this.$document.find(\"body\").append(downloadLink);\r\n                this.$timeout(() => {\r\n                    downloadLink[0].click();\r\n                    downloadLink.remove();\r\n                    this.$window[\"URL\"].revokeObjectURL(objectURL);\r\n                    deferred.resolve(null);\r\n                });\r\n            }\r\n            return deferred.promise;\r\n        }\r\n\r\n        /**\r\n         * Get options\r\n         */\r\n        private getOptions(options?: ICsvOptions): ICsvOptions {\r\n            var result: ICsvOptions = angular.extend({}, CsvService.DEFAULT_OPTIONS, options || {});\r\n            // Replaces any badly formatted special character string with correct special character\r\n            if (this.isSpecialChar(result.fieldSeparator)) {\r\n                result.fieldSeparator = this.getSpecialChar(result.fieldSeparator);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * Creates a csv from a data array\r\n         */\r\n        private stringify(header: any[], data: any[], options?: ICsvOptions): string {\r\n            var lines: string[] = [];\r\n\r\n            // Create the header of the file if it is provided\r\n            if (header) {\r\n                angular.forEach(header, (row: any, index: number) => {\r\n                    var infoArray: string[] = [];\r\n                    for (var i = 0; i < row.length; i++) {\r\n                        infoArray.push(this.stringifyField(row[i], options));\r\n                    }\r\n                    lines.push(infoArray.join(options.fieldSeparator));\r\n                });\r\n            }\r\n\r\n            if (options.header) { // Check if there's a provided header array\r\n                var encodingArray: string[] = [];\r\n                angular.forEach(options.header, (title: string) => {\r\n                    encodingArray.push(this.stringifyField(title, options));\r\n                });\r\n                lines.push(encodingArray.join(options.fieldSeparator));\r\n            } else if (options.label && data && data.length) { // Check if using keys as labels\r\n                var labelArray: string[] = [];\r\n                var iterator = options.columnOrder || data[0];\r\n                angular.forEach(iterator, (value: string, label: string) => {\r\n                    var val = options.columnOrder ? value : label;\r\n                    labelArray.push(this.stringifyField(val, options));\r\n                });\r\n                lines.push(labelArray.join(options.fieldSeparator));\r\n            }\r\n\r\n            angular.forEach(data, (row: any, index: number) => {\r\n                var infoArray: string[] = [];\r\n                var iterator = options.columnOrder || row;\r\n                angular.forEach(iterator, (field: any) => {\r\n                    var val = options.columnOrder ? row[field] : field;\r\n                    infoArray.push(this.stringifyField(val, options));\r\n                });\r\n                lines.push(infoArray.join(options.fieldSeparator));\r\n            });\r\n\r\n            var csv = lines.join(CsvService.EOL);\r\n\r\n            // Add BOM if needed\r\n            if (options.addByteOrderMarker) {\r\n                csv = CsvService.BOM + csv;\r\n            }\r\n\r\n            return csv;\r\n        }\r\n\r\n        /**\r\n         * Helper function to check if input is really a special character\r\n         */\r\n        public isSpecialChar(input: string): boolean {\r\n            return CsvService.SPECIAL_CHARS[input] !== undefined;\r\n        }\r\n\r\n        /**\r\n         * Helper function to get what the special character was supposed to be since Angular escapes the first backslash\r\n         */\r\n        public getSpecialChar(input: string): string {\r\n            return CsvService.SPECIAL_CHARS[input];\r\n        }\r\n\r\n        /**\r\n         * Stringify one field\r\n         */\r\n        private stringifyField(data: any, options: ICsvOptions) {\r\n            var result: any = data;\r\n            if (this.isFloat(data)) {\r\n                if (options.decimalSeparator === \"locale\") {\r\n                    result = data.toLocaleString();\r\n                } else if (options.decimalSeparator !== \".\") {\r\n                    result = data.toString().replace(\".\", options.decimalSeparator);\r\n                }\r\n            } else if (typeof data === \"string\") {\r\n                result = data.replace(/\"/g, \"\\\"\\\"\"); // Escape double quotes\r\n                if (options.quoteStrings || data.indexOf(options.fieldSeparator) !== -1 || data.indexOf(\"\\n\") !== -1 || data.indexOf(\"\\r\") !== -1) {\r\n                    result = options.txtDelimiter + result + options.txtDelimiter;\r\n                }\r\n            } else if (typeof data === \"boolean\") {\r\n                result = data ? \"TRUE\" : \"FALSE\";\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * Helper function to check if input is float\r\n         */\r\n        private isFloat(input: any): boolean {\r\n            return +input === input && (!isFinite(input) || Boolean(input % 1));\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name myway.tools.service:mwCsvService\r\n     * @requires $q\r\n     * @requires $parse\r\n     * @requires $window\r\n     * @requires $document\r\n     * @requires $timeout\r\n     * @description\r\n     * Service de génération d'un fichier CSV à partir d'un tableau\r\n     */\r\n    app.service(\"mwCsvService\", CsvService);\r\n}\r\n","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Implémentation du service d'ouverture des popups\r\n     */\r\n    class PopupService implements IPopupService {\r\n\r\n        // Injection de dépendances \r\n        public static $inject: string[] = [\r\n            Constantes.Inject.Services.modalService,\r\n            Constantes.Inject.Services.lisaApplication\r\n        ];\r\n\r\n        /**\r\n         * Constructeur\r\n         * @param modalService: MyWay.UI.IModalService\r\n         * @param lisaApplication: assisynt.Services.Application.ILisaApplication\r\n         */\r\n        constructor(\r\n            private modalService: MyWay.UI.IModalService,\r\n            private lisaApplication: Portefeuille.Services.Application.ILisaApplication) {\r\n        }\r\n\r\n        /**\r\n         * Permet d'ouvrir une popup simple d'informations\r\n         */\r\n        public showInfos(titre: string, texte: string): ng.IPromise<any> {\r\n            var popupOptions = {\r\n                closeButtonText: Constantes.Popup.BOUTON_FERMER,\r\n                headerText: titre,\r\n                bodyText: texte,\r\n                iconName: \"itce-warning\",\r\n                size: \"md\"\r\n            };\r\n            return this.modalService.showPopup(popupOptions);\r\n        }\r\n\r\n        /**\r\n         * Permet d'ouvrir une popup simple affichant un message d'erreur\r\n         * @param {MyWay.Services.Erreur} erreur\r\n         */\r\n        public showErreur(erreur: MyWay.Services.Erreur): ng.IPromise<any> {\r\n            if (!erreur.libelle) {\r\n                erreur.libelle = Constantes.Popup.LIBELLE_ERREUR_CHARGEMENT;\r\n            }\r\n            return this.modalService.showErreur(MyWay.UI.TYPE_POPUP_ERREUR.BLOQUANT, erreur.codeLibelle, erreur.libelle);\r\n        }\r\n\r\n        /**\r\n         * Ouverture d'une popup demandant la confirmation d'une action\r\n         * @param {string} titre\r\n         * @param {string} texte\r\n         * @param {string} validerTexte\r\n         * @param {string} closeTexte\r\n         */\r\n        public showConfirmations(titre: string, texte: string, validerTexte: string, closeTexte: string): ng.IPromise<any> {\r\n            var confirmOptions = {\r\n                actionButtonText: validerTexte,\r\n                closeButtonText: closeTexte,\r\n                headerText: titre,\r\n                bodyText: texte,\r\n                //iconName: \"itce-question\",\r\n                size: \"md\"\r\n            };\r\n            return this.modalService.showConfirm(confirmOptions);\r\n        }\r\n\r\n        /**\r\n         * Permet d'ouvrir une fenêtre modale large. Le template est donné par templateUrl\r\n         * @param {string} templateUrl\r\n         * @param {string} controllerName\r\n         * @param {Modeles.Application.IPopupData<any>} templateDatas\r\n         */\r\n        public showModal(templateUrl: string, controllerName: string, templateDatas: Modeles.Application.IPopupData<any>): ng.IPromise<any> {\r\n            var modalOptions: ng.ui.bootstrap.IModalSettings = {\r\n                templateUrl: templateUrl,\r\n                controller: controllerName,\r\n                controllerAs: \"popupCtrl\",\r\n                windowClass: \"app-modal-window-MEG\",\r\n                backdrop: \"static\",\r\n                keyboard: true,\r\n                size: \"lg\",\r\n                resolve: {\r\n                    callback: /* istanbul ignore next */ function () {\r\n                    },\r\n                    data: /* istanbul ignore next */ function () {\r\n                        return templateDatas;\r\n                    }\r\n                }\r\n            };\r\n            return this.modalService.showModal(modalOptions);\r\n        }\r\n\r\n        /**\r\n         * Permet d'ouvrir une fenêtre modale medium. Le template est donné par templateUrl\r\n         * @param {string} templateUrl\r\n         * @param {string} controllerName\r\n         * @param {Modeles.Application.IPopupData<any>} templateDatas\r\n         */\r\n        public showModalMd(templateUrl: string, controllerName: string, templateDatas: Modeles.Application.IPopupData<any>): ng.IPromise<any> {\r\n            var modalOptions: ng.ui.bootstrap.IModalSettings = {\r\n                templateUrl: templateUrl,\r\n                controller: controllerName,\r\n                controllerAs: \"popupCtrl\",\r\n                windowClass: \"app-modal-window-MEG\",\r\n                backdrop: \"static\",\r\n                keyboard: true,\r\n                size: \"md\",\r\n                resolve: {\r\n                    callback: /* istanbul ignore next */ function () {\r\n                    },\r\n                    data: /* istanbul ignore next */ function () {\r\n                        return templateDatas;\r\n                    }\r\n                }\r\n            };\r\n            return this.modalService.showModal(modalOptions);\r\n        }\r\n\r\n        /**\r\n         * Permet d'ouvrir une fenêtre modale large. Le template est donné par templateUrl\r\n         * @param {string} templateUrl\r\n         * @param {string} controllerName\r\n         * @param {Modeles.Application.IPopupData<any>} templateDatas\r\n         */\r\n        public showModalLg(templateUrl: string, controllerName: string, templateDatas: Modeles.Application.IPopupData<any>): ng.IPromise<any> {\r\n            var modalOptions: ng.ui.bootstrap.IModalSettings = {\r\n                templateUrl: templateUrl,\r\n                controller: controllerName,\r\n                controllerAs: \"popupCtrl\",\r\n                windowClass: \"app-modal-window-MEG\",\r\n                backdrop: \"static\",\r\n                keyboard: true,\r\n                size: \"lg\",\r\n                resolve: {\r\n                    callback: /* istanbul ignore next */ function () {\r\n                    },\r\n                    data: /* istanbul ignore next */ function () {\r\n                        return templateDatas;\r\n                    }\r\n                }\r\n            };\r\n            return this.modalService.showModal(modalOptions);\r\n        }\r\n\r\n        /**\r\n         * Permet d'ouvrir une fenêtre modale large. Le template est donné par templateUrl\r\n         * @param {string} templateUrl\r\n         * @param {string} controllerName\r\n         * @param {Modeles.Application.IPopupData<any>} templateDatas\r\n         */\r\n        public showModalFull(templateUrl: string, controllerName: string, templateDatas: Modeles.Application.IPopupData<any>): ng.IPromise<any> {\r\n            var modalOptions: ng.ui.bootstrap.IModalSettings = {\r\n                templateUrl: templateUrl,\r\n                controller: controllerName,\r\n                controllerAs: \"popupCtrl\",\r\n                windowClass: \"app-modal-window-MEG\",\r\n                backdrop: \"static\",\r\n                keyboard: true,\r\n                size: \"full\",\r\n                resolve: {\r\n                    callback: /* istanbul ignore next */ function () {\r\n                    },\r\n                    data: /* istanbul ignore next */ function () {\r\n                        return templateDatas;\r\n                    }\r\n                }\r\n            };\r\n            return this.modalService.showModal(modalOptions);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Service d'ouverture des popup\r\n     * @author Kevin GARRIDO S0077481\r\n     */\r\n    export interface IPopupService {\r\n        /**\r\n         * Permet d'ouvrir une popup simple d'informations\r\n         * @param {titre} Titre de la popup\r\n         * @param {texte} Texte de la popup\r\n         */\r\n        showInfos(titre: string, texte: string): ng.IPromise<any>;\r\n\r\n        /**\r\n         * Permet d'ouvrir une popup simple affichant un message d'erreur\r\n         * @param {erreur} Erreur à afficher      \r\n         */\r\n        showErreur(erreur: MyWay.Services.Erreur): ng.IPromise<any>;\r\n\r\n        /**\r\n         * Ouverture d'une popup demandant la confirmation d'une action \r\n         * @param {titre} Titre de la popup\r\n         * @param {texte} Texte de la popup\r\n         * @param {validerTexte} Texte du bouton de validation\r\n         * @param {closeTexte} Texte du bouton de fermeture\r\n         */\r\n        showConfirmations(titre: string, texte: string, validerTexte: string, closeTexte: string): ng.IPromise<any>;\r\n\r\n        /**\r\n         * Permet d'ouvrir une fenêtre modale. Le template est donné par templateUrl\r\n         * et le controleur de la modale par controllerName, les données exploités par la modale sont transmis via templateDatas\r\n         */\r\n        showModal(templateUrl: string, controllerName: string, templateDatas: Modeles.Application.IPopupData<any>): ng.IPromise<any>;\r\n        showModalMd(templateUrl: string, controllerName: string, templateDatas: Modeles.Application.IPopupData<any>): ng.IPromise<any>;\r\n        showModalLg(templateUrl: string, controllerName: string, templateDatas: Modeles.Application.IPopupData<any>): ng.IPromise<any>;\r\n        showModalFull(templateUrl: string, controllerName: string, templateDatas: Modeles.Application.IPopupData<any>): ng.IPromise<any>;\r\n    }\r\n\r\n    app.service(\"PopupService\", PopupService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    let loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service de gestion de la liste des portefeuilles\r\n     */\r\n    class PortefeuilleService implements IPortefeuilleService {\r\n        public static CLASS_NAME = \"PortefeuilleService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PortefeuilleService.CLASS_NAME);\r\n\r\n        // Proprietés\r\n        private listePortefeuilles: Modeles.Application.IPortefeuille[];\r\n        private portefeuilleInitialise: boolean;\r\n        private caracteristiquesAgent: Modeles.Application.ICaracteristiquesAgent;\r\n        private typeForcage: Enum.PageClients.TYPE_FORCAGE;\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$location,\r\n            Constantes.Inject.Angular.$window,\r\n            Constantes.Inject.Angular.$q,\r\n            Constantes.Inject.Services.recherchePortefeuilleRestService,\r\n            Constantes.Inject.Services.contexteService,\r\n            Constantes.Inject.Services.eventService,\r\n            Constantes.Inject.Services.preferencesService\r\n        ];\r\n\r\n        /**\r\n         * Constructeur\r\n         * @param serviceAgentExtended\r\n         * @param $location\r\n         */\r\n        constructor(\r\n            private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $location: ng.ILocationService,\r\n            private $window: ng.IWindowService,\r\n            private $q: ng.IQService,\r\n            private recherchePortefeuilleService: Services.Rest.RecherchePortefeuille.IRecherchePortefeuilleService,\r\n            private contexteService: Services.Application.IContexteService,\r\n            private eventService: Services.Application.IEventService,\r\n            private preferencesService: Services.Application.IPreferencesService) {\r\n\r\n            this.listePortefeuilles = [];\r\n            this.portefeuilleInitialise = false;\r\n        }\r\n\r\n\r\n        /**\r\n         * Méthode de mise à jour des portefeuilles selectionnés dans les préférences\r\n         * @param {Modeles.Application.IPortefeuille[]} portefeuilles\r\n         */\r\n        public setListePortfeuillesVisu(portefeuilles: Modeles.Application.IPortefeuille[]): ng.IPromise<void> {\r\n            this.listePortefeuilles = portefeuilles;\r\n            return this.contexteService.getContexte().then((ctx: Modeles.Application.IContexte) => {\r\n                // On enregistre les choix de portefeuille que si l'on est sur l'eds de l'agent connecté\r\n                return (ctx.edsUser === ctx.edsVisu) ?\r\n                    <ng.IPromise<void>>this.preferencesService.ecrireChoixPortefeuilles(portefeuilles) :\r\n                    this.$q.when();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Methode permetant de récupérer la liste des portefeuilles selectionnées \r\n         * @return {Array<Modeles.Application.IPortefeuille>}\r\n         */\r\n        public getListePortefeuillesVisu(): Array<Modeles.Application.IPortefeuille> {\r\n            return this.listePortefeuilles;\r\n        }\r\n\r\n        public getListeCodeSuiviParComplementairePortefeuillesExpertVisu(): string[] {\r\n            return _.filter(this.listePortefeuilles, (item: Modeles.Application.IPortefeuille) =>\r\n                item.id < Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && item.estAffiche\r\n            ).map((ptf: Modeles.Application.IPortefeuille) => {\r\n                return ptf.codeSuiviParComplementaire;\r\n            });\r\n        }\r\n\r\n        public getListeLibelleSuiviParComplementairePortefeuillesExpertVisu(): string[] {\r\n            return _.filter(this.listePortefeuilles, (item: Modeles.Application.IPortefeuille) =>\r\n                item.id < Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && item.estAffiche\r\n            ).map((ptf: Modeles.Application.IPortefeuille) => {\r\n                return ptf.libelle;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'indiquer si au moins 1 portefeuille est séléctionné pour affichage\r\n         */\r\n        public aPortefeuillesAffiche(): boolean {\r\n            return (_.where(this.listePortefeuilles, { \"estAffiche\": true }).length > 0);\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'indiquer si au moins 1 portefeuille est séléctionné pour affichage\r\n         */\r\n        public aPortefeuillesReelAffiche(): boolean {\r\n            return (_.filter(this.listePortefeuilles, (item: Modeles.Application.IPortefeuille) =>\r\n                item.id > (Constantes.Application.ID_PORTEFEUILLE_MAX_SPC - 1) && item.estAffiche\r\n            ).length > 0);\r\n        }\r\n\r\n        /**\r\n         * Methode permetant de récupérer la liste des portefeuilles de l'agent connecté\r\n         * @return {ng.IPromise<Modeles.Application.IPortefeuille[]>}\r\n         */\r\n        getListePortefeuilleAgentConnecte(): ng.IPromise<Modeles.Application.IPortefeuille[]> {\r\n            if (this.portefeuilleInitialise) {\r\n                return this.$q.when(this.listePortefeuilles);\r\n            } else {\r\n                this.portefeuilleInitialise = true;\r\n                return this.contexteService.getAuthentification().\r\n                    then((contexte: MyWay.Services.Context.AuthentificationInfo) => {\r\n                        let query: Services.Rest.RecherchePortefeuille.IRecherchePortefeuilleQuery =\r\n                            <Services.Rest.RecherchePortefeuille.IRecherchePortefeuilleQuery>{};\r\n                        query.codeEtablissement = contexte.codeEtablissement;\r\n                        query.IdentifianElementStructure = +contexte.agentConnecte.numeroInterneEds;\r\n                        query.typeRecherche = \"C\"; // recherche en incluant le suiviPar complémentaire 'SPC'\r\n                        return this.getListePortefeuilleQuery(query);\r\n                    });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Récupèrer le caracterisitque de l'agent connecté\r\n         */\r\n        public getCaracteristiquesAgentConnecte(): ng.IPromise<Modeles.Application.ICaracteristiquesAgent> {\r\n            return this.contexteService.getAuthentification().then((contexte: MyWay.Services.Context.AuthentificationInfo) => {\r\n                let caracteristiquesAgent = <Modeles.Application.ICaracteristiquesAgent>{};\r\n                caracteristiquesAgent.codeEtablissement = contexte.codeEtablissement;\r\n                caracteristiquesAgent.designationAgent = contexte.agentConnecte.designationLongueAgent;\r\n                caracteristiquesAgent.identifiantElementStructure = +contexte.agentConnecte.numeroInterneEds;\r\n                caracteristiquesAgent.libelleFonction = contexte.agentConnecte.designationPosteFonctionnel;\r\n                this.setCaracteristiquesAgent(caracteristiquesAgent);\r\n                return this.caracteristiquesAgent;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Methode permetant de récupérer la liste des portefeuilles d'un agent choisi\r\n         * @param {Modeles.Application.ICaracteristiquesAgent} edsChoisi\r\n         * @return {ng.IPromise<Modeles.Application.IPortefeuille[]>}\r\n         */\r\n        public getListePortefeuilleAgentChoisi(edsChoisi: Modeles.Application.ICaracteristiquesAgent): ng.IPromise<Modeles.Application.IPortefeuille[]> {\r\n            let query = <Services.Rest.RecherchePortefeuille.IRecherchePortefeuilleQuery>{};\r\n            query.codeEtablissement = edsChoisi.codeEtablissement;\r\n            query.IdentifianElementStructure = edsChoisi.identifiantElementStructure;\r\n            query.typeRecherche = \"C\"; // recherche en incluant le suiviPar complémentaire 'SPC'\r\n            return this.getListePortefeuilleQuery(query);\r\n        }\r\n\r\n        /**\r\n         * Methode permetant de récupérer la liste des portefeuilles d'une structure qui contient des agents\r\n         * @param {Modeles.Application.ICaracteristiquesAgent} edsChoisi\r\n         * @return {ng.IPromise<Modeles.Application.IPortefeuille[]>}\r\n         */\r\n        public getListePortefeuilleEDSChoisi(codeEtablissement: string, edsChoisi: number): ng.IPromise<Modeles.Application.IPortefeuille[]> {\r\n            let query = <Services.Rest.RecherchePortefeuille.IListeRecherchePortefeuilleQuery>{};\r\n            query.codeEtablissement = codeEtablissement;\r\n            query.IdentifianElementStructure = edsChoisi;\r\n            return this.getListePortefeuilleParEdsQuery(query);\r\n        }\r\n\r\n        /**\r\n         * Methode permetant de récupérer la liste des portefeuilles multi suivi par à partir d'un query\r\n         * @param {Services.Rest.RecherchePortefeuille.IRecherchePortefeuilleQuery} query\r\n         * @return {ng.IPromise<Modeles.Application.IPortefeuille[]>}\r\n         */\r\n        private getListePortefeuilleQuery(query: Services.Rest.RecherchePortefeuille.IRecherchePortefeuilleQuery): ng.IPromise<Modeles.Application.IPortefeuille[]> {\r\n            let listPromesse: Array<ng.IPromise<number[] | Modeles.Rest.PortefeuilleV1.recherche.IPortefeuilleRecherche>> = [];\r\n            listPromesse.push(<ng.IPromise<number[]>>this.preferencesService.lireChoixPortefeuilles().\r\n                then((listePreferences: Array<number>) => {\r\n                    return listePreferences;\r\n                })\r\n            );\r\n            listPromesse.push(this.recherchePortefeuilleService.getPortefeuilles(query).\r\n                then((listePortefeilleRest: Modeles.Rest.PortefeuilleV1.recherche.IPortefeuilleRecherche) => {\r\n                    return listePortefeilleRest;\r\n                })\r\n            );\r\n            return this.$q.all(listPromesse).then((resultat: Array<Array<number> | Modeles.Rest.PortefeuilleV1.recherche.IPortefeuilleRecherche>) => {\r\n                let listePreferences: Array<number> = <Array<number>>resultat[0];\r\n                let listePortefeilleRest: Modeles.Rest.PortefeuilleV1.recherche.IPortefeuilleRecherche = <Modeles.Rest.PortefeuilleV1.recherche.IPortefeuilleRecherche>resultat[1];\r\n\r\n                this.listePortefeuilles = [];\r\n                if (listePortefeilleRest && listePortefeilleRest.DonneeSignifiante) {\r\n                    _.forEach(listePortefeilleRest.DonneeSignifiante, ((portefeuilleAgent: Modeles.Rest.PortefeuilleV1.recherche.IDonneeSignifiante) => {\r\n                        let portefeuille: Modeles.Application.IPortefeuille = Utils.ApplicationUtils.getPortefeuilleDepuisDonneeSignifiante(portefeuilleAgent);\r\n                        // on verifie si le portefeuille traite est dans les preferences\r\n                        if (listePreferences && listePreferences.indexOf(portefeuille.id) >= 0) {\r\n                            portefeuille.estAffiche = true;\r\n                        }\r\n                        this.listePortefeuilles.push(portefeuille);\r\n                    }));\r\n                }\r\n                // Forçage de l'affichage si 1 seul portefeuille\r\n                if (this.listePortefeuilles.length === 1) {\r\n                    this.listePortefeuilles[0].estAffiche = true;\r\n                }\r\n                this.portefeuilleInitialise = true;\r\n                // console.log('getListePortefeuilleQuery', this.listePortefeuilles);\r\n                return this.$q.when(this.listePortefeuilles);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Methode permetant de récupérer la liste des portefeuilles pour un EDS à partir d'un query\r\n         * @param {Services.Rest.RecherchePortefeuille.IRecherchePortefeuilleQuery} query\r\n         * @return {ng.IPromise<Modeles.Application.IPortefeuille[]>}\r\n         */\r\n        private getListePortefeuilleParEdsQuery(\r\n            query: Services.Rest.RecherchePortefeuille.IListeRecherchePortefeuilleQuery): ng.IPromise<Modeles.Application.IPortefeuille[]> {\r\n            return this.recherchePortefeuilleService.getlistePortefeuillesParEds(query).\r\n                then((listePortefeilleRest: Modeles.Rest.PortefeuilleV1.recherche.IListePortefeuille) => {\r\n                    this.listePortefeuilles = [];\r\n                    if (listePortefeilleRest &&\r\n                        listePortefeilleRest.donneePortefeuille) {\r\n                        _.forEach(\r\n                            listePortefeilleRest.donneePortefeuille,\r\n                            ((portefeuilleAgent: Modeles.Rest.PortefeuilleV1.recherche.IPortefeuilleInfo) => {\r\n                                if (portefeuilleAgent.codeTypePortefeuille === \"C\" ||\r\n                                    portefeuilleAgent.codeTypePortefeuille === \"R\" ||\r\n                                    (portefeuilleAgent.codeTypePortefeuille === \"N\" &&\r\n                                        portefeuilleAgent.indicateurAffectation === \"N\")) {\r\n                                    // on ne prend pas les portefeuille reservoir, collectif et principal non affecté\r\n                                } else {\r\n                                    // Si le libelle court EDS est null on met une un libelle avec le numéro EDS du suivi Par\r\n                                    if (!portefeuilleAgent.libelleCourtEDS) {\r\n                                        portefeuilleAgent.libelleCourtEDS = \"AGENT-\" + portefeuilleAgent.identifiantEdsSuiviPortefeuille;\r\n                                    }\r\n\r\n                                    let portefeuille: Modeles.Application.IPortefeuille =\r\n                                        Utils.ApplicationUtils.getPortefeuilleDepuisListePortefeuille(portefeuilleAgent);\r\n                                    this.listePortefeuilles.push(portefeuille);\r\n                                }\r\n                            }));\r\n                    }\r\n                    // Forçage de l'affichage si 1 seul portefeuille\r\n                    if (this.listePortefeuilles.length === 1) {\r\n                        this.listePortefeuilles[0].estAffiche = true;\r\n                    }\r\n                    this.portefeuilleInitialise = true;\r\n                    return this.$q.when(this.listePortefeuilles);\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Méthode de récupération des caractéristiques Agent\r\n         *  @return {Modeles.Application.ICaracteristiquesAgent}\r\n         */\r\n        public getCaracteristiquesAgent(): Modeles.Application.ICaracteristiquesAgent {\r\n            return this.caracteristiquesAgent;\r\n        }\r\n\r\n        /**\r\n         * Méthode de Mise à jour des caractéristiques Agent\r\n         * @param {Modeles.Application.ICaracteristiquesAgent} caracteristiquesAgent\r\n         */\r\n        public setCaracteristiquesAgent(caracteristiquesAgent: Modeles.Application.ICaracteristiquesAgent): void {\r\n            this.caracteristiquesAgent = caracteristiquesAgent;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de voir si l'eds en cours a au moins un portefeuille\r\n         */\r\n        public aPortefeuille(): boolean {\r\n            return (this.listePortefeuilles.length > 0);\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de savoir si l'eds en cours à au moins un portefeuille de type portefeuille\r\n         */\r\n        public aPortefeuilleReel(): boolean {\r\n            return (_.filter(this.listePortefeuilles, (item: Modeles.Application.IPortefeuille) =>\r\n                item.id > Constantes.Application.ID_PORTEFEUILLE_MAX_SPC - 1\r\n            ).length > 0);\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public aPortefeuilleExpertAffiche(): boolean {\r\n            return (_.filter(this.listePortefeuilles, (item: Modeles.Application.IPortefeuille) =>\r\n                item.id < Constantes.Application.ID_PORTEFEUILLE_MAX_SPC && item.estAffiche\r\n            ).length > 0);\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de savoir si l'eds en cours à au moins un suivi par complémentaire\r\n         */\r\n        public aSuiviParComplementaire(): boolean {\r\n            // return (_.where(this.listePortefeuilles, { \"id\": 0 }).length > 0);\r\n            return (_.filter(this.listePortefeuilles, (item: Modeles.Application.IPortefeuille) =>\r\n                item.id < Constantes.Application.ID_PORTEFEUILLE_MAX_SPC\r\n            ).length > 0);\r\n        }\r\n\r\n        public nbPortefeuilleReel(): number {\r\n            return _.filter(this.listePortefeuilles, (item: Modeles.Application.IPortefeuille) =>\r\n                item.id > Constantes.Application.ID_PORTEFEUILLE_MAX_SPC - 1\r\n            ).length;\r\n        }\r\n\r\n        /**\r\n         * Méthode retournant les portefeuilles sélectionnés\r\n         */\r\n        public getListePortefeuillesActifs(): Array<Modeles.Application.IPortefeuille> {\r\n            return _.where(this.listePortefeuilles, { \"estAffiche\": true });\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param listePtfActifs\r\n         */\r\n        public setListePortefeuillesActifs(listePtfActifs: Array<number>): void {\r\n            _.forEach(listePtfActifs, (ptfId: number) => {\r\n                let ptfTemp: Array<Modeles.Application.IPortefeuille> = _.where(this.listePortefeuilles, { \"id\": ptfId });\r\n                if (ptfTemp && ptfTemp.length > 0) {\r\n                    ptfTemp[0].estAffiche = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param typeForcage\r\n         */\r\n        public setTypeForcage(typeForcage: Enum.PageClients.TYPE_FORCAGE): void {\r\n            this.typeForcage = typeForcage;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public getTypeForcage(): Enum.PageClients.TYPE_FORCAGE {\r\n            return this.typeForcage;\r\n        }\r\n\r\n        /**\r\n         * Grouper les portefeuille par agent\r\n         * @param listePortefeuilles\r\n         */\r\n        public regrouperPortfeuilleParAgent(\r\n            listePortefeuilles: Array<Modeles.Application.IPortefeuille>): Array<Modeles.Application.IAgent> {\r\n            _.forEach(listePortefeuilles, (item: Modeles.Application.IPortefeuille) => {\r\n                if (!item.idAgent) {\r\n                    item.idAgent = 0;\r\n                    item.nomPrenonAgent = \"\";\r\n                }\r\n                item.idAgentString = \"\" + item.idAgent;\r\n            });\r\n            let listPortfeuilleParAgent: Array<Modeles.Application.IAgent>;\r\n            if (listePortefeuilles) {\r\n                listPortfeuilleParAgent = _.chain(listePortefeuilles).\r\n                    groupBy(\"idAgentString\").\r\n                    map((value: Modeles.Application.IPortefeuille[]) => {\r\n                        return <Modeles.Application.IAgent>{\r\n                            \"id\": value[0].idAgent,\r\n                            \"nomPrenonAgent\": value[0].nomPrenonAgent,\r\n                            \"listPortefeuilleParAgent\": value,\r\n                            \"estAffiche\": true,\r\n                            \"isVisu\": true\r\n                        };\r\n                    }).value();\r\n                listPortfeuilleParAgent = _.sortBy(\r\n                    listPortfeuilleParAgent,\r\n                    (obj: Modeles.Application.IAgent) => {\r\n                        return obj.nomPrenonAgent.replace(\"MR \", \"\").replace(\"ME \", \"\");\r\n                    });\r\n            } else {\r\n                listPortfeuilleParAgent = [];\r\n            }\r\n            return listPortfeuilleParAgent;\r\n        }\r\n\r\n        /**\r\n         * degrouper la liste des portefeuilles (contraire du regroupement des portefeuilles par agent)\r\n         * @param listPortfeuilleParAgent\r\n         */\r\n        public regrouperToutPortfeuille(\r\n            listPortfeuilleParAgent: Array<Modeles.Application.IAgent>): Array<Modeles.Application.IPortefeuille> {\r\n            let listetRegrouper: Modeles.Application.IPortefeuille[];\r\n            if (listPortfeuilleParAgent) {\r\n                listetRegrouper =\r\n                    _.reduce(listPortfeuilleParAgent,\r\n                        (resultat: Array<Modeles.Application.IPortefeuille>,\r\n                            value: Modeles.Application.IAgent) => {\r\n                            return resultat.concat(value.listPortefeuilleParAgent);\r\n                        },\r\n                        <Array<Modeles.Application.IPortefeuille>>[]);\r\n                listetRegrouper = _.sortBy(listetRegrouper, (item: Modeles.Application.IPortefeuille) => {\r\n                    return item.nomPrenonAgent;\r\n                });\r\n            }\r\n            return listetRegrouper;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe PortefeuilleService\r\n     */\r\n    export interface IPortefeuilleService {\r\n        getListePortefeuilleAgentConnecte(): ng.IPromise<Modeles.Application.IPortefeuille[]>;\r\n        getListePortefeuilleAgentChoisi(edsChoisi: Modeles.Application.ICaracteristiquesAgent): ng.IPromise<Modeles.Application.IPortefeuille[]>;\r\n        getListePortefeuilleEDSChoisi(codeEtablissement: string, edsChoisi: number): ng.IPromise<Modeles.Application.IPortefeuille[]>;\r\n        setListePortfeuillesVisu(portfeuilles: Modeles.Application.IPortefeuille[]): ng.IPromise<void>;\r\n        getListePortefeuillesVisu(): Array<Modeles.Application.IPortefeuille>;\r\n        getListeCodeSuiviParComplementairePortefeuillesExpertVisu(): string[];\r\n        getListeLibelleSuiviParComplementairePortefeuillesExpertVisu(): string[];\r\n        aPortefeuillesAffiche(): boolean;\r\n        aPortefeuillesReelAffiche(): boolean;\r\n        getCaracteristiquesAgent(): Modeles.Application.ICaracteristiquesAgent;\r\n        setCaracteristiquesAgent(caracteristiquesAgent: Modeles.Application.ICaracteristiquesAgent): void;\r\n        getCaracteristiquesAgentConnecte(): ng.IPromise<Modeles.Application.ICaracteristiquesAgent>;\r\n        aPortefeuille(): boolean;\r\n        getListePortefeuillesActifs(): Array<Modeles.Application.IPortefeuille>;\r\n        setListePortefeuillesActifs(listePtfActifs: Array<number>): void;\r\n        setTypeForcage(typeForcage: Enum.PageClients.TYPE_FORCAGE): void;\r\n        getTypeForcage(): Enum.PageClients.TYPE_FORCAGE;\r\n        regrouperPortfeuilleParAgent(\r\n            listePortefeuilles: Array<Modeles.Application.IPortefeuille>): Array<Modeles.Application.IAgent>;\r\n        regrouperToutPortfeuille(\r\n            listPortfeuilleParAgent: Array<Modeles.Application.IAgent>): Array<Modeles.Application.IPortefeuille>;\r\n        aSuiviParComplementaire(): boolean;\r\n        aPortefeuilleReel(): boolean;\r\n        aPortefeuilleExpertAffiche(): boolean;\r\n        nbPortefeuilleReel(): number;\r\n    }\r\n\r\n    app.service(PortefeuilleService.CLASS_NAME, PortefeuilleService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service applicatif de gestion d'événement\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service de gestion des préférences IHM MyWay via le service serviceAgent.Preferences\r\n     */\r\n    export class PreferencesService implements IPreferencesService {\r\n        public static CLASS_NAME = \"PreferencesService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PreferencesService.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgent,\r\n            Constantes.Inject.Services.indicateurService,\r\n            Constantes.Inject.Services.preferenceUtilisateurRestService,\r\n            Constantes.Inject.Services.contexteService,\r\n            Constantes.Inject.Angular.$q\r\n        ];\r\n\r\n        public listePaniersPreference: Array<Modeles.Application.IPanier>;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private serviceAgent: MyWay.Services.ServiceAgent,\r\n            private indicateurService: Services.Application.IIndicateurService,\r\n            private preferenceUtilisateurRestService: Services.Rest.PreferenceUtilisateur.IPreferenceUtilisateurService,\r\n            private contexteService: Services.Application.IContexteService,\r\n            private $q: ng.IQService\r\n        ) {\r\n        }\r\n\r\n        /**\r\n         * Permet de completer les paniers manquants\r\n         */\r\n        public completerCreationPaniers(): ng.IPromise<void> {\r\n            let panierTemp: Modeles.Application.IPanier;\r\n            let listeTotaleIndicateurs: Modeles.Application.IIndicateurType[] = this.indicateurService.getListeTotaleIndicateursType();\r\n            let listePanier: Modeles.Application.IPanier[] = [];\r\n            return this.lirePreference(Constantes.Preferences.CODE_PANIER)\r\n                .then((valeur: string) => {\r\n                    if (valeur) {\r\n                        let paniers: Array<string> = valeur.split(\"|\");\r\n                        if (paniers.length < Constantes.Application.LIMITE_NB_PANIERS) {\r\n                            // Traitement du premier panier car il lui manque potentiellement les \r\n                            // proprétés \"estDefaut\" et \"nom\"(versions précédententes de l'applicatif)\r\n                            _.forEach(paniers, (panierString: string) => {\r\n                                panierTemp = this.convertirPanierPreferenceEnApplicatif(JSON.parse(panierString), listeTotaleIndicateurs);\r\n                                panierTemp.nom = panierTemp.nom ? panierTemp.nom : Constantes.Application.NOM_PANIER_DEFAUT;\r\n                                panierTemp.estDefaut = panierTemp.estDefaut !== undefined ? panierTemp.estDefaut : true;\r\n                                listePanier.push(panierTemp);\r\n                            });\r\n                            // Ajout paniers vides pour compléter                   \r\n                            for (let _i = paniers.length; _i < Constantes.Application.LIMITE_NB_PANIERS; _i++) {\r\n                                let panierNom: string = `${Constantes.Application.NOM_PANIER_CREATION} ${_i + 1}`;\r\n                                let dataPanier: Modeles.Application.IPanierPreferences = this.convertirPanierApplicatifEnPreference([], _i + 1, panierNom, false);\r\n                                valeur = valeur + \"|\" + JSON.stringify(dataPanier);\r\n                                panierTemp = this.convertirPanierPreferenceEnApplicatif(dataPanier, listeTotaleIndicateurs);\r\n                                listePanier.push(panierTemp);\r\n                            }\r\n                            return this.ecrirePaniers(listePanier);\r\n                        } else {\r\n                            return this.$q.when();\r\n                        }\r\n                    } else {\r\n                        // creation des X paniers vides\r\n                        let pref: string = \"\";\r\n                        for (let _i = 0; _i < Constantes.Application.LIMITE_NB_PANIERS; _i++) {\r\n                            let panierNom: string = `${Constantes.Application.NOM_PANIER_CREATION} ${_i + 1}`;\r\n                            pref = ((_i === 0) ? \"\" : pref + \"|\") +\r\n                                JSON.stringify(this.convertirPanierApplicatifEnPreference([], _i + 1, panierNom, (_i === 0)));\r\n                        }\r\n                        return <ng.IPromise<void>>this.serviceAgent.Preferences.EcrirePreference(Constantes.Preferences.CODE_PANIER, pref);\r\n                    }                    \r\n                });\r\n        }\r\n\r\n        /**\r\n         * Permet d'ecrire les preferences de portefeuilles affiches\r\n         * @param {Array<Modeles.Application.IPortefeuille>} portefeuilles\r\n         * @returns {MyWay.Services.IPromesse<void>}\r\n         */\r\n        public ecrireChoixPortefeuilles(\r\n            portefeuilles: Array<Modeles.Application.IPortefeuille>): ng.IPromise<void> {\r\n            let valeur = JSON.stringify(this.convertirListePortefeuilleEnPreference(portefeuilles));\r\n            return <ng.IPromise<void>>this.serviceAgent.Preferences.EcrirePreference(Constantes.Preferences.CODE_PORTEFEUILLE, valeur);\r\n        }\r\n\r\n        /**\r\n         * Permet de lire une liste d'identifiants portefeuilles selectionnes provenant des préférences \r\n         * @returns {Array<number>}\r\n         */\r\n        public lireChoixPortefeuilles(): ng.IPromise<Array<number>> {\r\n            return this.lirePreference(Constantes.Preferences.CODE_PORTEFEUILLE).then((valeur: any) => {\r\n                return valeur ? <Array<number>>JSON.parse(valeur) : null;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Permet de convertir la liste des portefeuilles en liste d'identifiants correspondant aux portefeuilles selectionnes\r\n         * @param {Array<Modeles.Application.IPortefeuille>} portefeuilles\r\n         * @returns {Array<number>}\r\n         */\r\n        public convertirListePortefeuilleEnPreference(\r\n            portefeuilles: Array<Modeles.Application.IPortefeuille>): Array<number> {\r\n            return <Array<number>>_.pluck(_.where(portefeuilles, { \"estAffiche\": true }), \"id\").filter((num: number) => num !== 0);\r\n        }\r\n        \r\n        /**\r\n         * Permet d'écrire un panier dans les préférences \r\n         * @param {Array<Modeles.Application.IPanier>} liste des paniers\r\n         * @returns {MyWay.Services.IPromesse<void>}\r\n         */\r\n        public ecrirePaniers(paniers: Array<Modeles.Application.IPanier>): ng.IPromise<void> {\r\n            let valeurs: string = \"\";\r\n            let i: number = 1;\r\n            _.forEach(paniers, (panier: Modeles.Application.IPanier) => {\r\n                let valeur =\r\n                    JSON.stringify(\r\n                        this.convertirPanierApplicatifEnPreference(\r\n                            panier.listeChoixIndicateurs, i, panier.nom, panier.estDefaut));\r\n                // \"|\" est le séparateur de paniers\r\n                valeurs = valeurs ? `${valeurs}|${valeur}` : valeur; \r\n                i++;\r\n            });\r\n            return <ng.IPromise<void>>this.serviceAgent.Preferences.EcrirePreference(\r\n                Constantes.Preferences.CODE_PANIER, valeurs).then(() => {\r\n                    this.listePaniersPreference = paniers;\r\n                    return <MyWay.Services.IPromesse<void>>this.$q.when();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * permet de récupérer la liste des paniers provenant des préférence\r\n         * @param {Array<Modeles.Application.IIndicateurType>} listeTotaleIndicateurs\r\n         * @return {Array<Modeles.Application.IPanier>} liste des paniers en préférence\r\n         */\r\n        public lirePaniers(\r\n            listeTotaleIndicateurs: Array<Modeles.Application.IIndicateurType>,\r\n            sansMajListeIndicateursChoix?: boolean): ng.IPromise<Array<Modeles.Application.IPanier>> {\r\n            return this.lirePreference(Constantes.Preferences.CODE_PANIER)\r\n                .then((valeur: string) => {\r\n                    if (valeur) {\r\n                        let paniers: Array<string> = valeur.split(\"|\");\r\n                        let listePaniers: Array<Modeles.Application.IPanier> = [];\r\n                        _.forEach(paniers, (panierString: string) => {\r\n                            let panierTemp: Modeles.Application.IPanier =\r\n                                this.convertirPanierPreferenceEnApplicatif(JSON.parse(panierString), listeTotaleIndicateurs);\r\n                            // gestion initiale pour la version avec 1 seul panier sans estDefaut\r\n                            if (panierTemp.estDefaut || paniers.length === 1) { \r\n                                // si on ne souhaite pas mettre à jour la liste d'indicateurs. Si non renseigné, on met à jour\r\n                                if (!sansMajListeIndicateursChoix) { \r\n                                    this.indicateurService.setListeIndicateurChoix(panierTemp.listeChoixIndicateurs);\r\n                                }\r\n                                panierTemp.estDefaut = true;\r\n                            }\r\n                            if (!panierTemp.nom) {\r\n                                panierTemp.nom = Constantes.Application.NOM_PANIER_DEFAUT;\r\n                            }\r\n                            listePaniers.push(panierTemp);\r\n                        });\r\n                        return listePaniers;\r\n                    } else {\r\n                        return undefined;\r\n                    }\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Permet de lire un panier provenant des préférences \r\n         * @param {Array<Modeles.Application.IIndicateurType>} listeTotaleIndicateurs\r\n         * @returns {Modeles.Application.IPanier}\r\n         */\r\n        public lirePanierDefaut(listeTotaleIndicateurs: Array<Modeles.Application.IIndicateurType>): ng.IPromise<Modeles.Application.IPanier> {\r\n            return this.lirePreference(Constantes.Preferences.CODE_PANIER)\r\n                .then((valeur: string) => {\r\n                    if (valeur) {\r\n                        let paniers: Array<string> = valeur.split(\"|\");\r\n                        let panierDef: Modeles.Application.IPanier;\r\n                        _.forEach(paniers, (panierString: string) => {\r\n                            let panierTemp: Modeles.Application.IPanier =\r\n                                this.convertirPanierPreferenceEnApplicatif(JSON.parse(panierString), listeTotaleIndicateurs);\r\n                            // gestion initiale pour la version avec 1 seul panier sans estDefaut\r\n                            if (panierTemp.estDefaut ||\r\n                                paniers.length === 1) {\r\n                                panierTemp.estDefaut = true;\r\n                                if (!panierTemp.nom) {\r\n                                    panierTemp.nom = Constantes.Application.NOM_PANIER_DEFAUT;\r\n                                }\r\n                                panierDef = panierTemp;\r\n                            }\r\n                        });\r\n                        return panierDef;\r\n                    } else {\r\n                        return undefined;\r\n                    }\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Permet de convertir un panier applicatif en panier pour les préférences\r\n         * @param {Array<Modeles.Application.IIndicateurChoix>} listeIndicateursChoix\r\n         * @param {number} numeroPanier\r\n         * @returns {Modeles.Application.IPanierPreferences}\r\n         */\r\n        public convertirPanierApplicatifEnPreference(\r\n            listeIndicateursChoix: Array<Modeles.Application.IIndicateurChoix>,\r\n            numeroPanier: number,\r\n            nomPanier: string,\r\n            estDefautPanier: boolean): Modeles.Application.IPanierPreferences {\r\n            let panierPreferenceVMin = <Modeles.Application.IPanierPreferences>{};\r\n            panierPreferenceVMin.listeCodesIndicateurs = [];\r\n            panierPreferenceVMin.numero = numeroPanier;\r\n            panierPreferenceVMin.nom = nomPanier;\r\n            panierPreferenceVMin.estDefaut = estDefautPanier;\r\n            _.forEach(listeIndicateursChoix, (indicateurChoix: Modeles.Application.IIndicateurChoix) => {\r\n                if (indicateurChoix.choisi) {\r\n                    panierPreferenceVMin.listeCodesIndicateurs.push(indicateurChoix.indicateur.codePreference);\r\n                }\r\n            });\r\n            return panierPreferenceVMin;\r\n        }\r\n\r\n        /**\r\n         * Permet de convertir un panier provenant des préférences en panier applicatif\r\n         * @param {Modeles.Application.IPanierPreferences} panierPreference\r\n         * @returns {Modeles.Application.IPanier}\r\n         */\r\n        public convertirPanierPreferenceEnApplicatif(\r\n            panierPreference: Modeles.Application.IPanierPreferences,\r\n            listeTotaleIndicateurs: Array<Modeles.Application.IIndicateurType>): Modeles.Application.IPanier {\r\n            let listeIndicateursChoix = [];\r\n            let panier: Modeles.Application.IPanier;\r\n\r\n            if (panierPreference) {\r\n                _.forEach(panierPreference.listeCodesIndicateurs, (codeIndicateur: string) => {\r\n                    let indicateurChoix = <Modeles.Application.IIndicateurChoix>{};\r\n                    indicateurChoix.choisi = true;\r\n                    indicateurChoix.desactive = null;\r\n                    indicateurChoix.indicateur = _.find(listeTotaleIndicateurs, (indicateurType: Modeles.Application.IIndicateurType) => {\r\n                        // gestion du passage de l'ancienne gestion des preference avec code, à la nouvelle avec codePreference\r\n                        return indicateurType.code === codeIndicateur || indicateurType.codePreference === codeIndicateur; \r\n                    });\r\n                    if (indicateurChoix.indicateur) {\r\n                        listeIndicateursChoix.push(indicateurChoix);\r\n                    }\r\n                });\r\n                panier = <Modeles.Application.IPanier>{};\r\n                panier.listeChoixIndicateurs = listeIndicateursChoix;\r\n                panier.nom = panierPreference.nom ? panierPreference.nom : \"\";\r\n                panier.estDefaut = panierPreference.estDefaut;\r\n                panier.numero = panierPreference.numero;\r\n            }\r\n            return panier;\r\n        }\r\n\r\n        /**\r\n         * Permet de recupérer une préférence\r\n         * @param {string} cle\r\n         * @returns {ng.IPromise<any>}\r\n         */\r\n        private lirePreference(cle: string): ng.IPromise<Array<Modeles.Rest.PreferenceUtilisateur.IPreference>|boolean|string> {\r\n            return this.contexteService.getContexte()\r\n                .then((contexteRecu: Modeles.Application.IContexte) => {\r\n                    let query = <Modeles.Rest.PreferenceUtilisateur.IParametresEntree>{};\r\n                    query.codeAgent = contexteRecu.identifiantUser;\r\n                    return this.preferenceUtilisateurRestService.getListePreferences(query);\r\n                }).then((listePreferences: Array<Modeles.Rest.PreferenceUtilisateur.IPreference>) => {\r\n                    let maPreference = _.find(listePreferences, (preference: Modeles.Rest.PreferenceUtilisateur.IPreference) => {\r\n                        return preference.cle === cle;\r\n                    });\r\n                    return maPreference ? maPreference.valeur : null;\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe PreferencesService\r\n     */\r\n    export interface IPreferencesService {\r\n        ecrirePaniers(\r\n            paniers: Array<Modeles.Application.IPanier>): ng.IPromise<void>;\r\n        lirePanierDefaut(\r\n            listeTotaleIndicateurs: Array<Modeles.Application.IIndicateurType>): ng.IPromise<Modeles.Application.IPanier>;\r\n        lirePaniers(\r\n            listeTotaleIndicateurs: Array<Modeles.Application.IIndicateurType>,\r\n            sansMajListeIndicateursChoix?: boolean): ng.IPromise<Array<Modeles.Application.IPanier>>;\r\n        ecrireChoixPortefeuilles(\r\n            portefeuilles: Array<Modeles.Application.IPortefeuille>): ng.IPromise<void>;\r\n        lireChoixPortefeuilles(): ng.IPromise<Array<number>>;\r\n        convertirPanierPreferenceEnApplicatif(\r\n            panierPreference: Modeles.Application.IPanierPreferences,\r\n            listeTotaleIndicateurs: Array<Modeles.Application.IIndicateurType>,\r\n            nomPanier: string, estDefautPanier: boolean): Modeles.Application.IPanier;\r\n        completerCreationPaniers(): ng.IPromise<void>;\r\n    }\r\n\r\n    // Déclaration du service\r\n    app.service(PreferencesService.CLASS_NAME, PreferencesService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Service applicatif de gestion des donnees de la vue globale présentant les statistiques des portefeuilles selectionnes\r\n * @module Portefeuille.Services.Application\r\n */\r\nmodule Portefeuille.Services.Application {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant d'exposer tout ou partie de fonctions de certains controleurs\r\n     */\r\n    class StatsService implements IStatsService {\r\n        public static CLASS_NAME = \"StatsService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(StatsService.CLASS_NAME);\r\n\r\n        // Injection de dépendances \r\n        public static $inject = [\r\n            Constantes.Inject.Angular.$q,\r\n            Constantes.Inject.Services.contexteService,\r\n            Constantes.Inject.Services.portefeuilleService,\r\n            Constantes.Inject.Services.restStatRentabiliteService,\r\n            Constantes.Inject.Services.restStatRevueService,\r\n            Constantes.Inject.Services.rechercheRevueService,\r\n            Constantes.Inject.Services.restStatPortefeuilleService,\r\n            Constantes.Inject.Services.restStatFluxMouvementFinancierService,\r\n            Constantes.Inject.Services.restStatPortefeuilleEdsService\r\n        ];\r\n\r\n        // Variables utiles\r\n        public statsRentab: Modeles.ApplicationStats.IRentabilite;\r\n        public statsRdvPtf: Modeles.ApplicationStats.IRdvPtf;\r\n        public statsRevuePtf: Modeles.ApplicationStats.IRevuePortefeuille;\r\n        public statsFluxFinancier: Array<Modeles.ApplicationStats.IFlux>;\r\n        public statsDetail: Modeles.ApplicationStats.IDetailPtf;\r\n        public queryStatsRentab: Modeles.Rest.PortefeuillCorporateV1.statRentabilite.IStatRentabiliteParametres;\r\n        public queryStatsRevue: Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevueParametres;\r\n        public queryStatsPortefeuille: Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.IStatPortefeuilleParametres;\r\n        public queryStatsPortefeuilleEds: Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $q: ng.IQService,\r\n            private contexteService: Services.Application.IContexteService,\r\n            private portefeuilleService: Services.Application.IPortefeuilleService,\r\n            private restStatRentabiliteService: Services.Rest.StatRentabilite.IStatRentabiliteService,\r\n            private restStatRevueService: Services.Rest.StatRevue.IStatRevueService,\r\n            private rechercheRevueService: Services.Rest.RechercheRevue.IRechercheRevueService,\r\n            private restStatPortefeuilleService: Services.Rest.StatPortefeuille.IStatPortefeuilleService,\r\n            private restStatFluxMouvementFinancierService: Services.Rest.StatFluxMouvementFinancier.IStatFluxMouvementFinancierService,\r\n            private restStatPortefeuilleEdsService: Services.Rest.PropositioncorporateV1.StatPortefeuilleEds.IStatPortefeuilleEdsService) {\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de récupérer les statistiques de la rentabilite\r\n         * @param \r\n         * @return {Modeles.ApplicationStats.IRentabilite}\r\n         */\r\n        public getStatsRentabilite(): ng.IPromise<Modeles.ApplicationStats.IRentabilite> {\r\n\r\n            return this.contexteService.getContexte().then((ctx: Modeles.Application.IContexte) => {\r\n                let query: Modeles.Rest.PortefeuillCorporateV1.statRentabilite.IStatRentabiliteParametres =\r\n                    <Modeles.Rest.PortefeuillCorporateV1.statRentabilite.IStatRentabiliteParametres>{};\r\n                query.codeEtablissement = ctx.codeEtablissement;\r\n                query.identifiantElementStructure = ctx.edsVisu;\r\n                query.listeIdentifiantPortefeuille = _.pluck(this.portefeuilleService.getListePortefeuillesActifs(), \"id\");\r\n                if (!this.statsRentab ||\r\n                    this.isQueryStatsRentabDifferent(query)) {\r\n                    return this.restStatRentabiliteService.getStatsRentab(query).\r\n                        then((statsRentab: Modeles.Rest.PortefeuillCorporateV1.statRentabilite.IStatRentabilite) => {\r\n                            this.queryStatsRentab = query;\r\n                            this.statsRentab = statsRentab ?\r\n                                Utils.ApplicationUtils.getStatsRentabiliteAppDepuisRest(statsRentab.infoPnb) :\r\n                                this.statsRentab;\r\n\r\n                            if (this.statsRentab &&\r\n                                !this.statsRentab.pnb12DerniersMoisGlissantN &&\r\n                                !this.statsRentab.pnb12DerniersMoisGlissNMoins1 &&\r\n                                !this.statsRentab.pnb3112AnneeNMoins1 &&\r\n                                !this.statsRentab.ratioPNBImportants &&\r\n                                !this.statsRentab.tauxEvolutionPnb) {\r\n                                this.statsRentab = undefined;\r\n                            }\r\n                            return this.statsRentab;\r\n                        });\r\n                } else {\r\n                    return this.$q.when(this.statsRentab);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public getStatsRdvEtPortefeuille(): ng.IPromise<Modeles.ApplicationStats.IRdvPtf> {\r\n\r\n            return this.contexteService.getContexte().then((ctx: Modeles.Application.IContexte) => {\r\n                let query: Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.IStatPortefeuilleParametres =\r\n                    <Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.IStatPortefeuilleParametres>{};\r\n                query.codeEtablissement = ctx.codeEtablissement;\r\n                query.identifiantEds = ctx.edsVisu;\r\n                query.listeIdentifiantPortefeuille = _.pluck(this.portefeuilleService.getListePortefeuillesActifs(), \"id\");\r\n                if (!this.statsRdvPtf ||\r\n                    this.isQueryStatsPortefeuilleDifferent(query)) {\r\n                    return this.restStatPortefeuilleService.getStats(query).\r\n                        then((statsPtf: Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.IStatPortefeuille) => {\r\n                        this.queryStatsPortefeuille = query;\r\n                        this.statsRdvPtf = Utils.ApplicationUtils.getStatsPortefeuilleAppDepuisRest(statsPtf);\r\n                        return this.statsRdvPtf;\r\n                    });\r\n                } else {\r\n                    return this.$q.when(this.statsRdvPtf);\r\n                }\r\n            });\r\n        }\r\n\r\n        //public getStatsRevuePortefeuille(): ng.IPromise<Modeles.ApplicationStats.IRevuePortefeuille> {\r\n        //    return this.contexteService.getContexte().then((ctx: Modeles.Application.IContexte) => {\r\n        //        let query: Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevueParametres =\r\n        //            <Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevueParametres>{};\r\n        //        query.codeEtablissement = ctx.codeEtablissement;\r\n        //        query.identifiantElementStructure = ctx.edsVisu;\r\n        //        query.listeIdentifiantPortefeuille = _.pluck(this.portefeuilleService.getListePortefeuillesActifs(), \"id\");\r\n        //        if (!this.statsRevuePtf ||\r\n        //            this.isQueryStatsRevueDifferent(query)) {\r\n        //            return this.restStatRevueService.getStats(query).\r\n        //                then((statsRevue: Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevue) => {\r\n        //                this.queryStatsRevue = query;\r\n        //                this.statsRevuePtf = Utils.ApplicationUtils.getStatsRevueAppDepuisRest(statsRevue);\r\n        //                return this.statsRevuePtf;\r\n        //            });\r\n        //        } else {\r\n        //            return this.$q.when(this.statsRevuePtf);\r\n        //        }\r\n        //    });\r\n        //}\r\n\r\n        /**\r\n         * \r\n         */\r\n        public getStatsRevuePortefeuille(): ng.IPromise<Modeles.ApplicationStats.IRevuePortefeuille> {\r\n            return this.contexteService.getContexte().then((ctx: Modeles.Application.IContexte) => {\r\n                let query: Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevueParametres =\r\n                    <Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevueParametres>{};\r\n                query.codeEtablissement = ctx.codeEtablissement;\r\n                query.identifiantElementStructure = ctx.edsVisu;\r\n                query.listeIdentifiantPortefeuille = _.pluck(this.portefeuilleService.getListePortefeuillesActifs(), \"id\");\r\n                return this.restStatRevueService.getStats(query).\r\n                    then((statsRevue: Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevue) => {\r\n                        this.queryStatsRevue = query;\r\n                        this.statsRevuePtf = Utils.ApplicationUtils.getStatsRevueAppDepuisRest(statsRevue);\r\n                        return this.statsRevuePtf;\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public getStatsListeEds(): ng.IPromise<void> {\r\n            return this.contexteService.getContexte().then((ctx: Modeles.Application.IContexte) => {\r\n                let query: Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds;\r\n                query = <Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds>{};\r\n                query.parametres = <Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IParametres>{};\r\n                query.parametres.codeEtablissement = ctx.codeEtablissement;\r\n\r\n                // Creer la liste des portefeuilles à partir de la liste selectionné pour charger la vue EDS\r\n                query.parametres.listePortefeuilleEds = _.map(\r\n                    this.portefeuilleService.getListePortefeuillesActifs(),\r\n                    (value: Modeles.Application.IPortefeuille) => {\r\n                        return <Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IPortefeuilleEds> {\r\n                            \"identifiantEds\": value.idAgent,\r\n                            \"identifiantPortefeuille\": value.id\r\n                        };\r\n                    });\r\n                query.parametres.typeVue = Enum.Rest.TYPE_VUE_STAT_GLOBAL.VUE_GLOBAL_ET_DETAILLE.toString();\r\n                if (!this.statsRevuePtf ||\r\n                    this.isQueryStatsPortefeuilleEdsDifferent(query)) {\r\n                    return this.restStatPortefeuilleEdsService.getStatPortefeuilleEds(query).\r\n                        then((statsPortfeuilleEds: Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds) => {\r\n                        this.queryStatsPortefeuilleEds = query;\r\n                        this.statsRevuePtf = Utils.ApplicationUtils.getStatsRevueAppDepuisRestGlobal(statsPortfeuilleEds);\r\n                        this.statsRentab = Utils.ApplicationUtils.getStatsRentabiliteAppDepuisRestGlobal(statsPortfeuilleEds);\r\n                        this.statsRdvPtf = Utils.ApplicationUtils.getStatsPortefeuilleAppDepuisRestGlobal(statsPortfeuilleEds);\r\n                        this.statsFluxFinancier = Utils.ApplicationUtils.getStatsFluxFinancierPortefeuilleAppDepuisRestGlobal(statsPortfeuilleEds);\r\n                        this.statsDetail = Utils.ApplicationUtils.getStatsDetailPortefeuilleAppDepuisRestGlobal(statsPortfeuilleEds);\r\n                        if (this.statsRentab &&\r\n                            !this.statsRentab.pnb12DerniersMoisGlissantN &&\r\n                            !this.statsRentab.pnb12DerniersMoisGlissNMoins1 &&\r\n                            !this.statsRentab.pnb3112AnneeNMoins1 &&\r\n                            !this.statsRentab.ratioPNBImportants &&\r\n                            !this.statsRentab.tauxEvolutionPnb) {\r\n                            this.statsRentab = undefined;\r\n                        }\r\n                        return this.$q.when();\r\n                    });\r\n                } else {\r\n                    return this.$q.when();\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Restitue la liste des clinets à activer à partir d'une liste de portefeuilles\r\n         * @param codeEtablissement\r\n         * @param identifiantElementStructure\r\n         * @param listeIdentifiantPortefeuille\r\n         */\r\n        public getClientsAActiver(\r\n            codeEtablissement: string,\r\n            identifiantElementStructure: number,\r\n            listeIdentifiantPortefeuille: Array<number>): ng.IPromise<Array<Modeles.ApplicationStats.IClientSimplifie>> {\r\n\r\n            if (codeEtablissement &&\r\n                (identifiantElementStructure > 0) &&\r\n                (listeIdentifiantPortefeuille &&\r\n                    listeIdentifiantPortefeuille.length > 0)) {\r\n                return this.getRevue(codeEtablissement, identifiantElementStructure, listeIdentifiantPortefeuille).\r\n                    then((resultatPromesse: Modeles.Rest.PropositionCorporateV1.rechercheRevue.IRechercheRevue) => {\r\n                    let listeClientsAActiver: Array<Modeles.ApplicationStats.IClientSimplifie>;\r\n                    if (resultatPromesse) {\r\n                        listeClientsAActiver = this.extraireClientsAActiverDepuisRevue(resultatPromesse);\r\n                    }\r\n                    return listeClientsAActiver;\r\n                });\r\n            }\r\n            return this.$q.reject(new MyWay.Services.Erreur(\"Paramètres insuffisamment renseignés => recherche de revue impossible\"));\r\n        }\r\n\r\n        /**\r\n         * Restitue la liste des clinets à renégocier à partir d'une liste de portefeuilles\r\n         * @param codeEtablissement\r\n         * @param identifiantElementStructure\r\n         * @param listeIdentifiantPortefeuille\r\n         */\r\n        public getClientsARenegocier(\r\n            codeEtablissement: string,\r\n            identifiantElementStructure: number,\r\n            listeIdentifiantPortefeuille: Array<number>): ng.IPromise<Array<Modeles.ApplicationStats.IClientSimplifie>> {\r\n\r\n            if (codeEtablissement &&\r\n                (identifiantElementStructure > 0) &&\r\n                (listeIdentifiantPortefeuille &&\r\n                    listeIdentifiantPortefeuille.length > 0)) {\r\n                return this.getRevue(codeEtablissement, identifiantElementStructure, listeIdentifiantPortefeuille).\r\n                    then((resultatPromesse: Modeles.Rest.PropositionCorporateV1.rechercheRevue.IRechercheRevue) => {\r\n                    let listeClientsAActiver: Array<Modeles.ApplicationStats.IClientSimplifie>;\r\n                    if (resultatPromesse) {\r\n                        listeClientsAActiver = this.extraireClientsARenegocierDepuisRevue(resultatPromesse);\r\n                    }\r\n                    return listeClientsAActiver;\r\n                });\r\n            }\r\n            return this.$q.reject(new MyWay.Services.Erreur(\"Paramètres insuffisamment renseignés => recherche de revue impossible\"));\r\n        }\r\n\r\n        /**\r\n         * Restitue une liste de clients à renégocier à partir des données de la revue.\r\n         * @param revue\r\n         */\r\n        private extraireClientsARenegocierDepuisRevue(\r\n            revue: Modeles.Rest.PropositionCorporateV1.rechercheRevue.IRechercheRevue): Array<Modeles.ApplicationStats.IClientSimplifie> {\r\n            let resultat: Array<Modeles.ApplicationStats.IClientSimplifie>;\r\n            if (revue &&\r\n                revue.listeBilanRevue) {\r\n                resultat = [];\r\n                if (revue.listeBilanRevue.length > 0) {\r\n                    resultat = _.where(revue.listeBilanRevue, { \"indicateurTarifARenegocier\": \"O\" });\r\n                }\r\n            }\r\n            return resultat;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param listeIdentifiantPortefeuille\r\n         * @param listeIdentifiantRelationEco\r\n         */\r\n        public getStatsFluxMouvementFinancier(\r\n            listeIdentifiantPortefeuille: Array<number>,\r\n            listeIdentifiantRelationEco: Array<number>): ng.IPromise<Array<Modeles.ApplicationStats.IFlux>> {\r\n            return this.contexteService.getContexte().then((ctx: Modeles.Application.IContexte) => {\r\n                let parametresRenseignes: boolean = \r\n                    ctx.codeEtablissement &&\r\n                    (ctx.edsVisu > 0) &&\r\n                    ((listeIdentifiantPortefeuille && listeIdentifiantPortefeuille.length > 0) ||\r\n                    (listeIdentifiantRelationEco && listeIdentifiantRelationEco.length > 0));\r\n\r\n                if (parametresRenseignes) {\r\n                    let queryFlux: Modeles.Rest.PortefeuillCorporateV1.statFluxMouvementFinancier.IStatFluxMvtFinancierParametres;\r\n                    queryFlux = <Modeles.Rest.PortefeuillCorporateV1.statFluxMouvementFinancier.IStatFluxMvtFinancierParametres>{};\r\n                    queryFlux.codeEtablissement = ctx.codeEtablissement;\r\n                    queryFlux.identifiantElementStructure = ctx.edsVisu;\r\n                    queryFlux.listeIdentifiantPortefeuille =\r\n                        (listeIdentifiantPortefeuille && listeIdentifiantPortefeuille.length > 0) ?\r\n                        listeIdentifiantPortefeuille : null;\r\n                    queryFlux.listeIdentifiantRelationEco =\r\n                        (listeIdentifiantRelationEco && listeIdentifiantRelationEco.length > 0) ?\r\n                            listeIdentifiantRelationEco : null;\r\n                    return this.restStatFluxMouvementFinancierService.postStatFluxMvtFinancier(queryFlux).\r\n                        then((resultatPromesse: Modeles.Rest.PortefeuillCorporateV1.statFluxMouvementFinancier.IStatFluxMvtFinancier) => {\r\n                        if (resultatPromesse && resultatPromesse.infoFluxMvtFinancier) {\r\n                            this.statsFluxFinancier = this.definirFluxFinancier(resultatPromesse.infoFluxMvtFinancier);\r\n                        }\r\n                        return this.statsFluxFinancier;\r\n                    });\r\n                }\r\n                return this.$q.reject(new MyWay.Services.Erreur(\"Paramètres insuffisamment renseignés => recherche de stats mouvement financier impossible\"));\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Contrôle les paramètres en entrée puis sollicite le service REST pour obtenir les données de la revue.\r\n         * @param codeEtablissement\r\n         * @param identifiantElementStructure\r\n         * @param listeIdentifiantPortefeuille\r\n         * @param listeIdentifiantRelationEco\r\n         * @param listeIdentifiantPersonne\r\n         */\r\n        private getRevue(\r\n            codeEtablissement: string,\r\n            identifiantElementStructure: number,\r\n            listeIdentifiantPortefeuille?: Array<number>,\r\n            listeIdentifiantRelationEco?: Array<number>, listeIdentifiantPersonne?: Array<number>\r\n            ): ng.IPromise<Modeles.Rest.PropositionCorporateV1.rechercheRevue.IRechercheRevue> {\r\n\r\n            if (codeEtablissement &&\r\n                (identifiantElementStructure > 0) &&\r\n                ((listeIdentifiantPortefeuille && listeIdentifiantPortefeuille.length > 0) ||\r\n                    (listeIdentifiantRelationEco && listeIdentifiantRelationEco.length > 0) ||\r\n                    (listeIdentifiantPersonne && listeIdentifiantPersonne.length > 0))) {\r\n                let queryRechercheRevue: Modeles.Rest.PropositionCorporateV1.rechercheRevue.IRechercheRevueParametres;\r\n                queryRechercheRevue = <Modeles.Rest.PropositionCorporateV1.rechercheRevue.IRechercheRevueParametres>{};\r\n                queryRechercheRevue.codeEtablissement = codeEtablissement;\r\n                queryRechercheRevue.identifiantElementStructure = identifiantElementStructure;\r\n                queryRechercheRevue.codeActionEquipement = \"A\";\r\n                queryRechercheRevue.listeIdentifiantPersonne = this.alimenterListeNombre(listeIdentifiantPersonne);\r\n                queryRechercheRevue.listeIdentifiantPortefeuille = this.alimenterListeNombre(listeIdentifiantPortefeuille);\r\n                queryRechercheRevue.listeIdentifiantRelationEco = this.alimenterListeNombre(listeIdentifiantRelationEco);\r\n\r\n                return this.rechercheRevueService.postRechercheRevue(queryRechercheRevue).\r\n                    then((resultatPromesseRest: Modeles.Rest.PropositionCorporateV1.rechercheRevue.IRechercheRevue) => {\r\n                    return resultatPromesseRest;\r\n                });\r\n            }\r\n            return this.$q.reject(new MyWay.Services.Erreur(\"Aucun paramètre renseigné => recherche de revue impossible\"));\r\n        }\r\n\r\n        /**\r\n         * alimente la liste\r\n         * @param liste\r\n         */\r\n        private alimenterListeNombre(liste: Array<number>): Array<number> {\r\n            return (liste && liste.length > 0) ? liste : null;        \r\n        }\r\n\r\n        /**\r\n         * Restitue une liste de clients à activer à partir des données de la revue.\r\n         * @param revue\r\n         */\r\n        private extraireClientsAActiverDepuisRevue(\r\n            revue: Modeles.Rest.PropositionCorporateV1.rechercheRevue.IRechercheRevue): Array<Modeles.ApplicationStats.IClientSimplifie> {\r\n            let resultat: Array<Modeles.ApplicationStats.IClientSimplifie>;\r\n            if (revue &&\r\n                revue.listeBilanRevue) {\r\n                resultat = (revue.listeBilanRevue.length > 0) ? _.where(revue.listeBilanRevue, { \"indicateurClientAActiver\": \"O\" }) : [];\r\n            } else {\r\n                resultat = null;\r\n            }\r\n            return resultat;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param infoFluxFinancierRest\r\n         */\r\n        private definirFluxFinancier(\r\n            infoFluxFinancierRest: Modeles.Rest.PortefeuillCorporateV1.statFluxMouvementFinancier.IInfoFluxMvtFinancier\r\n        ): Array<Modeles.ApplicationStats.IFlux> {\r\n\r\n            let resultat: Array<Modeles.ApplicationStats.IFlux>;\r\n            if (infoFluxFinancierRest) {\r\n                let fluxTravail: Modeles.ApplicationStats.IFlux;\r\n                resultat = [];\r\n\r\n                //Flux créditeurs\r\n                fluxTravail = <Modeles.ApplicationStats.IFlux>{};\r\n                //Traitement des dates\r\n                fluxTravail.dateDebFlux12DerMoisGlissN = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateDebFluxAnneeN);\r\n                fluxTravail.dateDebFlux12DerMoisGlissNMoins1 = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateDebFluxAnneeNMoins1);\r\n                fluxTravail.dateFinFlux12DerMoisGlissN = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateFinFluxAnneeN);\r\n                fluxTravail.dateFinFlux12DerMoisGlissNMoins1 = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateFinFluxAnneeNMoins1);\r\n                //Traitement des chiffres\r\n                fluxTravail.flux12DerniersMoisGlissantN = infoFluxFinancierRest.fluxCrediteursAnneeN;\r\n                fluxTravail.flux12DerniersMoisGlissNMoins1 = infoFluxFinancierRest.fluxCrediteursNMoins1;\r\n                fluxTravail.tauxEvolutionFlux = infoFluxFinancierRest.tauxEvolutionFluxCrediteurs;\r\n\r\n                resultat.push(fluxTravail);\r\n\r\n                //Flux débiteurs\r\n                fluxTravail = <Modeles.ApplicationStats.IFlux>{};\r\n                //Traitement des dates\r\n                fluxTravail.dateDebFlux12DerMoisGlissN = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateDebFluxAnneeN);\r\n                fluxTravail.dateDebFlux12DerMoisGlissNMoins1 = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateDebFluxAnneeNMoins1);\r\n                fluxTravail.dateFinFlux12DerMoisGlissN = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateFinFluxAnneeN);\r\n                fluxTravail.dateFinFlux12DerMoisGlissNMoins1 = Services.Utils.DataUtils.formaterDateValide(infoFluxFinancierRest.dateFinFluxAnneeNMoins1);\r\n                //Traitement des chiffres\r\n                fluxTravail.flux12DerniersMoisGlissantN = infoFluxFinancierRest.fluxDebiteursAnneeN;\r\n                fluxTravail.flux12DerniersMoisGlissNMoins1 = infoFluxFinancierRest.fluxDebiteursNMoins1;\r\n                fluxTravail.tauxEvolutionFlux = infoFluxFinancierRest.tauxEvolutionFluxDebiteurs;\r\n\r\n                resultat.push(fluxTravail);\r\n            }\r\n            return resultat;\r\n        }\r\n\r\n        /**\r\n         * Méthode de comparaison de query pour appel restStatRentabiliteService.getStatsRentab:\r\n         * renvoie Vrai si duery différentes, Faux sinon\r\n         * @param query\r\n         */\r\n        private isQueryStatsRentabDifferent(\r\n            query: Modeles.Rest.PortefeuillCorporateV1.statRentabilite.IStatRentabiliteParametres): boolean {\r\n            this.queryStatsPortefeuilleEds = null;\r\n            return (!this.queryStatsRentab ||\r\n                query.identifiantElementStructure !== this.queryStatsRentab.identifiantElementStructure ||\r\n                !_.isEqual(query.listeIdentifiantPortefeuille, this.queryStatsRentab.listeIdentifiantPortefeuille)) ? true : false;\r\n        }\r\n\r\n        /**\r\n         * Méthode de comparaison de query pour appel restStatRevueService.getStats:\r\n         * renvoie Vrai si duery différentes, Faux sinon\r\n         * @param query\r\n         */\r\n        //private isQueryStatsRevueDifferent(\r\n        //    query: Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevueParametres): boolean {\r\n        //    this.queryStatsPortefeuilleEds = null;\r\n        //    return (!this.queryStatsRevue ||\r\n        //        query.identifiantElementStructure !== this.queryStatsRevue.identifiantElementStructure ||\r\n        //        !_.isEqual(query.listeIdentifiantPortefeuille, this.queryStatsRevue.listeIdentifiantPortefeuille)) ? true : false;\r\n        //}\r\n\r\n        /**\r\n         * Méthode de comparaison de query pour appel restStatPortefeuilleService.getStats:\r\n         * renvoie Vrai si query différentes, Faux sinon\r\n         * @param query\r\n         */\r\n        private isQueryStatsPortefeuilleDifferent(\r\n            query: Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.IStatPortefeuilleParametres): boolean {\r\n            this.queryStatsPortefeuilleEds = null;\r\n            return (!this.queryStatsPortefeuille ||\r\n                query.identifiantEds !== this.queryStatsPortefeuille.identifiantEds ||\r\n                !_.isEqual(query.listeIdentifiantPortefeuille, this.queryStatsPortefeuille.listeIdentifiantPortefeuille)) ? true : false;\r\n        }\r\n\r\n        /**\r\n         * Méthode de comparaison de query pour appel :\r\n         * renvoie Vrai si query différentes, Faux sinon\r\n         * @param query\r\n         */\r\n        private isQueryStatsPortefeuilleEdsDifferent(\r\n            query: Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds): boolean {\r\n            this.queryStatsPortefeuille = null;\r\n            return (!this.queryStatsPortefeuilleEds ||\r\n                !_.isEqual(query.parametres.listePortefeuilleEds,\r\n                    this.queryStatsPortefeuilleEds.parametres.listePortefeuilleEds)) ? true : false;\r\n        }\r\n\r\n        /**\r\n         *\r\n         */\r\n        public getStatsRevuePortefeuilleEds(): ng.IPromise<Modeles.ApplicationStats.IRevuePortefeuille> {\r\n            this.queryStatsRevue = undefined;\r\n            return this.$q.when(this.statsRevuePtf);\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public getStatsRentabiliteEds(): ng.IPromise<Modeles.ApplicationStats.IRentabilite> {\r\n            this.queryStatsRentab = undefined;\r\n            return this.$q.when(this.statsRentab);\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public getStatsRdvEtPortefeuilleEds(): ng.IPromise<Modeles.ApplicationStats.IRdvPtf> {\r\n            this.queryStatsPortefeuille = undefined;\r\n            return this.$q.when(this.statsRdvPtf);\r\n        }\r\n        \r\n        /**\r\n         * \r\n         */\r\n        public getStatsFluxMouvementFinancierEds(): ng.IPromise<Array<Modeles.ApplicationStats.IFlux>> {\r\n            return this.$q.when(this.statsFluxFinancier);\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public getStatsDetail(): Modeles.ApplicationStats.IDetailPtf {\r\n            return this.statsDetail;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe StatsService\r\n     */\r\n    export interface IStatsService {\r\n        getStatsRentabilite(): ng.IPromise<Modeles.ApplicationStats.IRentabilite>;\r\n        getStatsRdvEtPortefeuille(): ng.IPromise<Modeles.ApplicationStats.IRdvPtf>;\r\n        getStatsRevuePortefeuille(): ng.IPromise<Modeles.ApplicationStats.IRevuePortefeuille>;\r\n        getStatsListeEds(): ng.IPromise<void>;\r\n        getClientsAActiver(\r\n            codeEtablissement: string,\r\n            identifiantElementStructure: number,\r\n            listeIdentifiantPortefeuille?: Array<number>): ng.IPromise<Array<Modeles.ApplicationStats.IClientSimplifie>>;\r\n        getClientsARenegocier(\r\n            codeEtablissement: string,\r\n            identifiantElementStructure: number,\r\n            listeIdentifiantPortefeuille?: Array<number>): ng.IPromise<Array<Modeles.ApplicationStats.IClientSimplifie>>;\r\n        getStatsFluxMouvementFinancier(\r\n            listeIdentifiantPortefeuille: Array<number>,\r\n            listeIdentifiantRelationEco: Array<number>): ng.IPromise<Array<Modeles.ApplicationStats.IFlux>>;\r\n        getStatsRentabiliteEds(): ng.IPromise<Modeles.ApplicationStats.IRentabilite>;\r\n        getStatsRdvEtPortefeuilleEds(): ng.IPromise<Modeles.ApplicationStats.IRdvPtf>;\r\n        getStatsRevuePortefeuilleEds(): ng.IPromise<Modeles.ApplicationStats.IRevuePortefeuille>;\r\n        getStatsFluxMouvementFinancierEds(): ng.IPromise<Array<Modeles.ApplicationStats.IFlux>>;\r\n        getStatsDetail(): Modeles.ApplicationStats.IDetailPtf;\r\n\r\n    }\r\n\r\n    // Déclaration du service\r\n    app.service(StatsService.CLASS_NAME, StatsService);\r\n}  ","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.LibrairieD3 {\r\n    \"use strict\";\r\n\r\n    export interface IConfigDonutD3 {\r\n        titre: string;\r\n        donutChoisi: string;\r\n        degrade: DEGRADE_DONUT;\r\n        nombreClients: string;\r\n        listeDonnees: Array<IDonneeFluxD3>;\r\n    }\r\n\r\n    export interface IDonneeFluxD3 {\r\n        nom: string;\r\n        pourcentage: number;\r\n    }\r\n\r\n    export enum DEGRADE_DONUT {\r\n        BLEU = <any>\"BLEU\",\r\n        ROSE = <any>\"ROSE\",\r\n        GRIS = <any>\"GRIS\"\r\n    };\r\n\r\n    class CreationDonutService implements ICreationDonutService {\r\n        public static CLASS_NAME: string = \"CreationDonutService\";\r\n        private static logger: MyWay.Services.Loggers.ILogger = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass(CreationDonutService.CLASS_NAME);\r\n\r\n        private margin;\r\n        private width: number;\r\n        private height: number;\r\n        private donut: D3._Selection<any>;\r\n\r\n        constructor() {\r\n            CreationDonutService.logger.debug(\"----------- Constructeur  ------------\");\r\n            this.margin = { top: 0, right: 0, bottom: 0, left: 0 };\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param id\r\n         */\r\n        private setWidthHeight(id: string): void {\r\n            this.margin = { top: 10, right: 10, bottom: 10, left: 10 };\r\n            if (d3.select(\"#\" + id).node()) {\r\n                this.width = d3.select(\"#\" + id).node().getBoundingClientRect().width;\r\n            }\r\n            this.height = 250; // Hauteur max: a l'init, pas de hauteur \r\n            if (this.width > this.height) {\r\n                this.width = this.height;\r\n            } else {\r\n                this.height = this.width; \r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param config\r\n         * @param id\r\n         */\r\n        public creerDonut(config: IConfigDonutD3, id: string): void {\r\n            if (!d3.select(\"#\" + id).empty()) {\r\n                d3.select(\"#\" + id).selectAll(\"svg\").remove();\r\n                this.viderDonut();\r\n            }\r\n            this.setWidthHeight(id);\r\n            let color: D3.Scale.OrdinalScale = this.getCouleurDegrade(config.degrade);\r\n            let pie = d3.layout.pie()\r\n                .value((data: IDonneeFluxD3) => { return data.pourcentage; })\r\n                .sort(null);\r\n\r\n            let arc = (<any>d3.svg.arc())\r\n                .innerRadius(60)\r\n                .padRadius(125);\r\n\r\n            if (!this.donut) {\r\n                // creation du donut\r\n                this.donut = d3.select(\"#\" + id).append(\"svg\")\r\n                    .attr(\"viewBox\", \"0 0 \" + (this.width) + \" \" + (this.height))\r\n                    .attr(\"height\", this.height)\r\n                    .classed(\"svg-content\", true)\r\n                    .append(\"g\")\r\n                    .attr(\"transform\", this.getTranslateText(0, 0));\r\n            } else {\r\n                // vidage du donut\r\n                this.donut.selectAll(\"g.part\").remove();\r\n                this.donut.selectAll(\"text.chiffre-central\").remove();\r\n            }\r\n\r\n            let partDeTarte = this.donut.selectAll(\"g.part\")\r\n                .data(pie(config.listeDonnees))\r\n                .enter()\r\n                .append(\"g\")\r\n                .attr(\"transform\", this.getTranslateText(this.width / 2, this.height / 2))\r\n                .each((arcDescriptor: any) => {\r\n                    arcDescriptor.outerRadius = 100;\r\n                })\r\n                .attr(\"class\", \"part\");\r\n\r\n            partDeTarte.append(\"path\")\r\n                .attr({\r\n                    d: arc,\r\n                    fill: (data: D3.Layout.ArcDescriptor) => {\r\n                        return color(data.data.nom);\r\n                    }\r\n                })\r\n                .on(\"mouseover\", this.arcTween(105, 0, arc))\r\n                .on(\"mouseout\", this.arcTween(100, 75, arc));\r\n\r\n            partDeTarte.append(\"text\")\r\n                .transition()\r\n                .duration(200)\r\n                .attr(\"transform\", (data: any) => {\r\n                    return this.getTranslateText(\r\n                        (data.value <= 4) ?\r\n                            arc.centroid(data).map((valeur: number) => valeur * 3 / 2) :\r\n                            arc.centroid(data)\r\n                    );\r\n                })\r\n                .attr(\"class\", \"donut-text\")\r\n                .attr(\"dy\", \".4em\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .style(\"fill\", (data: any) => {\r\n                    return (data.value <= 4) ? \"black\" : \"white\";\r\n                })\r\n                .style(\"display\", (data: any) => {\r\n                    //Pour ne pas afficher de pourcentage avec le donut Gris\r\n                    if (data.value === Number.MAX_VALUE) {\r\n                        return \"none\";\r\n                    }\r\n                })\r\n                .text((data: any) => {\r\n                    return data.data.pourcentage ? data.data.pourcentage + \"%\" : \"\";\r\n                });\r\n\r\n            this.donut\r\n                .append(\"text\")\r\n                .attr(\"transform\", this.getTranslateText(this.width / 2, this.height / 2))\r\n                .style(\"fill\", \"#4F5563\")\r\n                .attr(\"class\", \"chiffre-central\")\r\n                .style(\"text-anchor\", \"middle\")\r\n                .style(\"font-size\", \"3rem\")\r\n                .append(\"tspan\")\r\n                .attr(\"dy\", \"0.5ex\")\r\n                .text(config.nombreClients);\r\n        }\r\n\r\n        /**\r\n         * @param valeurs\r\n         */\r\n        private getTranslateText(...valeurs: Array<any>): string {\r\n            return `translate(${valeurs.join(\",\")})`;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param outerRadius\r\n         * @param delay\r\n         * @param arc\r\n         */\r\n        private arcTween(outerRadius: number, delay: number, arc: any) {\r\n            return function () {\r\n                d3.select(this).transition().delay(delay).attrTween(\"d\", (datum: any) => {\r\n                    var i = d3.interpolate(datum.outerRadius, outerRadius);\r\n                    return (t: any) => {\r\n                        datum.outerRadius = i(t);\r\n                        return arc(datum);\r\n                    };\r\n                });\r\n            };\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param degrade\r\n         */\r\n        public getCouleurDegrade(degrade: DEGRADE_DONUT): any {\r\n            switch (degrade) {\r\n                case DEGRADE_DONUT.BLEU:\r\n                    return d3.scale.ordinal().range([\"#3182bd\", \"#6baed6\", \"#9ecae1\", \"#c6dbef\", \"#007399\", \"#00cccc\", \"#545494\"]);\r\n                case DEGRADE_DONUT.ROSE:\r\n                    return d3.scale.ordinal().range([\"#c34f73\", \"#d4d110\", \"#63ccc4\", \"#e45fd2\", \"#5870d2\", \"#e6a016\", \"#5fa262\"]); //Couleurs fournies par N.W BDRL-1691\r\n                case DEGRADE_DONUT.GRIS:\r\n                    return d3.scale.ordinal().range([\"#cccccc\"]);\r\n                default:\r\n                    return d3.scale.category10();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public viderDonut(): void {\r\n            this.donut = undefined;\r\n        }\r\n    }\r\n\r\n    export interface ICreationDonutService {\r\n        creerDonut(config: IConfigDonutD3, id: string): void;\r\n        getCouleurDegrade(degrade: DEGRADE_DONUT): any;\r\n        viderDonut(): void;\r\n    }\r\n\r\n    app.service(CreationDonutService.CLASS_NAME, CreationDonutService);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.LibrairieD3 {\r\n    \"use strict\";\r\n\r\n    export interface IConfigPourcentageD3 {\r\n        titre: string;\r\n        pourcentageUn: number;\r\n        degrade: DEGRADE_POURCENTAGE;\r\n        pourcentageDeux?: number;\r\n        nombreUn?: number;\r\n        nombreDeux?: number;\r\n        legende?: string;\r\n        id?: string;\r\n    }\r\n\r\n    export enum DEGRADE_POURCENTAGE {\r\n        ORANGE = <any>\"ORANGE\",\r\n        VERT = <any>\"VERT\",\r\n        VIOLET = <any>\"VIOLET\",\r\n        BLEU = <any>\"BLEU\"\r\n    };\r\n\r\n    class CreationPourcentageService implements ICreationPourcentageService {\r\n        public static CLASS_NAME: string = \"CreationPourcentageService\";\r\n\r\n        private width: number;\r\n        private height: number;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor() {\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param id\r\n         */\r\n        private setWidthHeight(id: string): void {\r\n            let element: D3._Selection<any> = d3.select(\"#\" + id);\r\n            if (element.node()) {\r\n                this.width = element.node().getBoundingClientRect().width;\r\n                this.height = this.width;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param data\r\n         * @param id\r\n         */\r\n        public creerPourcentage(data: IConfigPourcentageD3, id: string) {\r\n            this.setWidthHeight(id);\r\n            let listeCouleurs: string[] = this.getCouleurDegrade(data.degrade);\r\n            let valAngle: number = (data.nombreUn * 360) / 100;\r\n            let current: number = data.nombreUn;\r\n\r\n            let arc: D3.Svg.Arc = this.creerArc((this.width - 40) / 2, ((this.width - 40) / 10), 0);\r\n\r\n            // Definir l'emplacement du SVG\r\n            let svg: D3._Selection<any> = this.initialiserSvg(id, this.width, this.height);\r\n\r\n            // Definir le fond graphique initiale du donut\r\n            let arrierePlan: D3._Selection<any> = this.CreerCheminPlein(svg, 0, \"#e6f7ff\", arc);\r\n\r\n            // Definir la valeur graphique du initiale donut\r\n            let visuelValeur: D3._Selection<any> = this.CreerCheminPlein(svg, 0, listeCouleurs[0], arc);\r\n\r\n            // Affichage de la valeur % au centre\r\n            let texteValeur: D3._Selection<any> = svg.append(\"text\").\r\n                attr(\"dy\", \"0.5ex\").\r\n                attr(\"text-anchor\", \"middle\").\r\n                // TODO EA remplacer les sytles par des class\r\n                //attr(\"class\", \"xxxxxx\").\r\n                style(\"font-size\", \"3rem\").\r\n                style(\"font-weight\", \"bold\").\r\n                style(\"fill\", \"#ffffff\").\r\n                text(current + \"%\");\r\n\r\n            if (data.legende && data.legende.length > 0) {\r\n                let texteInititule: D3._Selection<any> = svg.append(\"text\").\r\n                    attr(\"dy\", \"0.5ex\").\r\n                    attr(\"y\", this.height / 2 - 10).\r\n                    attr(\"text-anchor\", \"middle\").\r\n                    // TODO EA remplacer les sytles par  des class\r\n                    //attr(\"class\", \"xxxxxx\").\r\n                    style(\"font-size\", \"1rem\").\r\n                    style(\"font-weight\", \"bold\").\r\n                    style(\"fill\", \"#ffffff\").\r\n                    style(\"width\", \"auto\").\r\n                    style(\"white-space\", \"nowrap\").\r\n                    style(\"overflow\", \"hidden\").\r\n                    style(\"text-overflow\", \"ellipsis\").\r\n                    text(data.legende);\r\n                this.tronquerText(texteInititule);\r\n                this.genererTransitionCouleur(texteInititule, 1750, \"#ffffff\", \"#000000\");\r\n            }\r\n\r\n            this.AjouterMouvementArc(this.genererTransitionCouleur(arrierePlan, 1750, \"#ffffff\", \"#e6f7ff\"), 360, arc);\r\n            this.AjouterMouvementArc(this.genererTransitionCouleur(visuelValeur, 1750, \"#ffffff\", listeCouleurs[0]), valAngle, arc);\r\n            this.genererTransitionCouleur(texteValeur, 1750, \"#ffffff\", \"#000000\");\r\n        }\r\n\r\n        /**\r\n         * Convertir des degrées en radian\r\n         * @param degree\r\n         */\r\n        private static convertirRadian(degree: number): number {\r\n            return degree * (Math.PI / 180);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param rayonExterne\r\n         * @param epaisseur\r\n         * @param angleInitial\r\n         */\r\n        private creerArc(rayonExterne: number, epaisseur: number, angleInitial: number): D3.Svg.Arc {\r\n            return d3.svg.arc().\r\n                innerRadius(rayonExterne).\r\n                outerRadius(rayonExterne - epaisseur).\r\n                startAngle(CreationPourcentageService.convertirRadian(angleInitial)); \r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param id\r\n         * @param largeur\r\n         * @param hauteur\r\n         */\r\n        private initialiserSvg(id: string, largeur: number, hauteur: number): D3._Selection<any> {\r\n            return d3.select(\"#\" + id).\r\n                append(\"svg:svg\").\r\n                attr(\"viewBox\", \"0 0 \" + largeur + \" \" + hauteur).\r\n                classed(\"svg-content\", true).\r\n                append(\"g\").\r\n                attr(\"transform\", \"translate(\" + largeur / 2 + \",\" + hauteur / 2 + \")\");\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param svg\r\n         * @param degree\r\n         * @param couleur\r\n         * @param arcModel\r\n         */\r\n        private CreerCheminPlein(svg: D3._Selection<any>, degree: number, couleur: string, arcModel: D3.Svg.Arc): D3._Selection<any> {\r\n            return svg.append(\"path\").\r\n                datum({\r\n                    endAngle: CreationPourcentageService.convertirRadian(degree)\r\n                }).\r\n                style(\"fill\", couleur).\r\n                attr(\"d\", arcModel); \r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param svg\r\n         * @param duree\r\n         * @param couleurInit\r\n         * @param couleurFin\r\n         */\r\n        private genererTransitionCouleur(svg: D3._Selection<any>, duree: number, couleurInit: string, couleurFin: string): D3.Transition.Transition {\r\n            return svg.transition().duration(duree).styleTween(\"fill\", () => {\r\n                return d3.interpolate(couleurInit, couleurFin);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param transition\r\n         * @param degree\r\n         * @param arcModel\r\n         */\r\n        private AjouterMouvementArc(transition: D3.Transition.Transition, degree: number, arcModel: D3.Svg.Arc): D3.Transition.Transition {\r\n            return transition.call(this.arcTween, arcModel, CreationPourcentageService.convertirRadian(degree));\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param transition\r\n         * @param arc\r\n         * @param newAngle\r\n         */\r\n        private arcTween(transition: D3.Transition.Transition, arc: D3.Svg.Arc, newAngle: number): void {\r\n            transition.attrTween(\"d\", (d: any) => {\r\n                let interpolate: D3.Transition.BaseInterpolate = d3.interpolate(d.endAngle, newAngle);\r\n                return (t: number) => {\r\n                    d.endAngle = interpolate(t);\r\n                    return arc(d);\r\n                };\r\n            });\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param pourcent\r\n         * @param listeCouleurs\r\n         * @param id\r\n         */\r\n        public addGradient(pourcent: D3._Selection<any>, listeCouleurs: Array<String>, id: string): void {\r\n            var gradient = pourcent\r\n                .append(\"linearGradient\")\r\n                .attr(\"id\", \"gradient\" + id)\r\n                .attr(\"x1\", \"0%\")\r\n                .attr(\"y1\", \"0%\")\r\n                .attr(\"x2\", \"100%\")\r\n                .attr(\"y2\", \"100%\")\r\n                .attr(\"spreadMethod\", \"pad\");\r\n\r\n            gradient.append(\"stop\")\r\n                .attr(\"offset\", \"0%\")\r\n                .attr(\"stop-color\", listeCouleurs[0])\r\n                .attr(\"stop-opacity\", 1);\r\n\r\n            gradient.append(\"stop\")\r\n                .attr(\"offset\", \"100%\")\r\n                .attr(\"stop-color\", listeCouleurs[1])\r\n                .attr(\"stop-opacity\", 1);\r\n        }\r\n\r\n        /**\r\n         * Permet de tronquer le texte en D3 en ajoutant ...\r\n         */\r\n        public tronquerText(self: D3._Selection<any>): void {\r\n            self.each(() => {\r\n                let node: SVGTSpanElement = <SVGTSpanElement>self.node();\r\n                let textLength = node.getComputedTextLength();\r\n                let text: string = self.text();\r\n                let padding: number = 0;\r\n                while (textLength > (this.width - 2 * padding) && text.length > 0) {\r\n                    text = text.slice(0, -1);\r\n                    self.text(text + \"...\");\r\n                    textLength = node.getComputedTextLength();\r\n                }\r\n            });\r\n        } \r\n\r\n        /**\r\n         * \r\n         * @param degrade\r\n         */\r\n        private getCouleurDegrade(degrade: DEGRADE_POURCENTAGE): Array<string> {\r\n            switch (degrade) {\r\n                case DEGRADE_POURCENTAGE.BLEU:\r\n                    return [\"#0077b3\", \"#0077b3\"];\r\n                case DEGRADE_POURCENTAGE.VERT:\r\n                    return [\"#4DDBDB\", \"#5BEE81\"];\r\n                case DEGRADE_POURCENTAGE.VIOLET:\r\n                    return [\"#7670DB\", \"#AE58B8\"];\r\n                default: // Orange\r\n                    return [\"#FF37BB\", \"#FF9A23\"];\r\n            }\r\n        }\r\n    }\r\n\r\n    export interface ICreationPourcentageService {\r\n        creerPourcentage(data: IConfigPourcentageD3, id: string);\r\n    }\r\n\r\n    app.service(CreationPourcentageService.CLASS_NAME, CreationPourcentageService);\r\n}","/// <reference path=\"../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * Controleur pour la directive pf-tuile-panier\r\n * @module portefeuille.Controleurs\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Controleurs {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Classe du controleur\r\n     */\r\n    export class PfTuilePanierControleur {\r\n        public static CLASS_NAME = \"PfTuilePanierControleur\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PfTuilePanierControleur.CLASS_NAME);\r\n\r\n        //Injection des dependances\r\n        public static $inject = [\r\n            Constantes.Inject.Angular.$scope,\r\n            Constantes.Inject.Angular.$element,\r\n            Constantes.Inject.Services.modalePaniersService\r\n        ];\r\n\r\n        // Variables d'entrées\r\n        public tuilePanierSettings: Modeles.Application.ITuilePanierSettings;\r\n        public listeTuileCatalogueSettings: Array<Modeles.Application.ITuileCatalogueSettings>;\r\n        public listeTuilePanierSettings: Array<Modeles.Application.ITuilePanierSettings>;\r\n        public listeFiltresClients: Array<Modeles.Application.IFiltre>;\r\n        public listeFiltresRelationEco: Array<Modeles.Application.IFiltre>;\r\n        \r\n        // Variables utiles\r\n        public configTuile: MyWay.UI.iMwConfigTuile;\r\n\r\n        /**\r\n         * Constructeur\r\n         */\r\n        constructor(\r\n            private $scope: ng.IScope,\r\n            private $element: ng.IAugmentedJQuery,\r\n            private modalePaniersService: Services.Application.IModalePaniersService) {\r\n\r\n            this.initialiser();\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'initialiser le composant\r\n         * @returns {void}\r\n         */\r\n        private initialiser(): void {\r\n            PfTuilePanierControleur.logger.info(\">>> Appel de la méthode : PfTuilePanierControleur.initialiser <<<\");\r\n\r\n            this.configTuile = <MyWay.UI.iMwConfigTuile>{};\r\n            //this.configTuile.tuileHandler = null;\r\n            this.configTuile.taille = Constantes.ModalePaniers.TUILE_PANIER_TAILLE;\r\n            this.configTuile.typeMarquage = Constantes.ModalePaniers.TUILE_TYPE_MARQUAGE_TEXTE;\r\n            // si marquage, on a le TAG en haut.\r\n            // si non parquage, on a pas le TAG, mais le texte remonte d'une ligne\r\n            if (!this.tuilePanierSettings.indicateur.indicateur.estUniquementVueClients) {\r\n                this.configTuile.typeMarquage = Constantes.ModalePaniers.TUILE_CATALOGUE_TYPE_MARQUAGE_AUCUN;\r\n            }\r\n            // Initialisation du dragSettings et dropSettings\r\n            this.tuilePanierSettings.dragSettings = this.modalePaniersService.creerDragSettings(this.tuilePanierSettings);\r\n            this.tuilePanierSettings.dropSettings = this.modalePaniersService.creerDropSettings(this.indicateurPanierDeposeEvent);\r\n\r\n            // Ajout des fonctions des événements drag\r\n            this.tuilePanierSettings.dragSettings.dragStartBeforeEvent = this.dragStartBeforeEvent;\r\n            this.tuilePanierSettings.dragSettings.dragEndBeforeEvent = this.dragEndBeforeEvent;\r\n\r\n            this.$element.ready(this.modalePaniersService.rendreCompatibleTuilesAvecDragAndDrop); \r\n        } \r\n\r\n        /**\r\n         * Variable contenant la méthode a appelé avant que le dragStart commence\r\n         */\r\n        private dragStartBeforeEvent = () => {\r\n            this.modalePaniersService.desactiverDropPanier(); // on ne peut pas dropper une tuile panier dans le panier global\r\n            //if (!this.tuilePanierSettings.estEnEdition) {\r\n            if (!this.tuilePanierSettings.estEnEdition || this.modalePaniersService.getEstEditionPanier()) {\r\n                this.modalePaniersService.afficherDropPoubelle();\r\n                this.modalePaniersService.activerDropTuilesPanier(this.listeTuilePanierSettings);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Variable contenant la méthode a appelé avant que le dragEnd commence\r\n         */\r\n        private dragEndBeforeEvent = () => {\r\n            this.modalePaniersService.cacherDropPoubelle();\r\n            this.modalePaniersService.desactiverDropTuilesPanier(this.listeTuilePanierSettings);\r\n        };\r\n\r\n        /**\r\n         * Variable contenant la méthode a appelé lorsqu'un indicateur est déposé sur un indicateur du panier\r\n         */\r\n        public indicateurPanierDeposeEvent = (tuileSettings: any) => {\r\n\r\n            // On desactive les drops des tuiles du panier\r\n            this.modalePaniersService.desactiverDropTuilesPanier(this.listeTuilePanierSettings);\r\n\r\n            if (tuileSettings !== this.tuilePanierSettings) {\r\n\r\n                // Récupération de l'index de la tuile de drop\r\n                let indexIndicateurDrop =\r\n                    _.findIndex(this.listeTuilePanierSettings, (tuilePanier: Modeles.Application.ITuilePanierSettings) => {\r\n                    return tuilePanier.indicateur.indicateur.code === this.tuilePanierSettings.indicateur.indicateur.code;\r\n                });\r\n\r\n                if (tuileSettings.dropSettings) { // Cas déplacement d'une TuilePanier\r\n\r\n                    // Récupération de l'index de la tuile à déplacer\r\n                    let indexIndicateurADeplacer =\r\n                        _.findIndex(this.listeTuilePanierSettings, (tuilePanier: Modeles.Application.ITuilePanierSettings) => {\r\n                        return tuilePanier.indicateur.indicateur.code === tuileSettings.indicateur.indicateur.code;\r\n                    });\r\n\r\n                    // Interchangement des tuiles\r\n                    this.listeTuilePanierSettings[indexIndicateurDrop] = tuileSettings;\r\n                    this.listeTuilePanierSettings[indexIndicateurADeplacer] = this.tuilePanierSettings;\r\n\r\n                    //this.$scope.$applyAsync(); \r\n                    this.$scope.$apply(); \r\n\r\n                } else { // Cas ajout d'une TuileCatalogue\r\n\r\n                    // Changement de l'état de l'indicateur\r\n                    tuileSettings.indicateur.choisi = true;\r\n\r\n                    // Création de la nouvelle tuile panier\r\n                    let tuilePanierSettings = <Modeles.Application.ITuilePanierSettings>{};\r\n                    tuilePanierSettings.id = this.modalePaniersService.genererIdentifiantAleatoire();\r\n                    tuilePanierSettings.indicateur = tuileSettings.indicateur;\r\n                    this.listeTuilePanierSettings.splice(indexIndicateurDrop, 0, tuilePanierSettings);\r\n\r\n                    // On desactive le drop panier\r\n                    this.modalePaniersService.desactiverDropPanier();\r\n\r\n                    // Mise à jour du message d'avertissement de modification de filtre\r\n                    this.modalePaniersService.afficherMessageAvertissementFiltre(\r\n                        this.listeFiltresRelationEco,\r\n                        this.listeFiltresClients,\r\n                        _.pluck(this.listeTuilePanierSettings, \"indicateur\"));\r\n\r\n                    // Desactivation du drag sur les tuiles du catalogue si le nombre d'indicateur max est atteint\r\n                    if (this.listeTuilePanierSettings.length === Constantes.ModalePaniers.NOMBRE_INDICATEUR_MAX) {\r\n                        _.forEach(this.listeTuileCatalogueSettings, (tuile: Modeles.Application.ITuileCatalogueSettings) => {\r\n                            tuile.dragSettings.desactiverDrag();\r\n                        });\r\n                    } \r\n\r\n                    // Rafraichir listeTuileCatalogueSettings\r\n                    this.modalePaniersService.rafraichirListeTuileCatalogueSettings();\r\n                } \r\n            } \r\n        };\r\n\r\n        /**\r\n         * Méthode permettant de gérer l'affichage ou non du marquage de la tuile\r\n         * @returns {boolean}\r\n         */\r\n        public afficherMarquage(): boolean {\r\n            // poue avoiur la ligne verticale tout le temps, il faut afficher le marquage\r\n            // donc toujours true\r\n            return this.tuilePanierSettings.indicateur.indicateur.estUniquementVueClients ? true : true;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de gérer le nom du marquage de la tuile\r\n         * @returns {string}\r\n         */\r\n        public nomMarquage(): string {\r\n            return this.tuilePanierSettings.indicateur.indicateur.estUniquementVueClients ?\r\n                Constantes.ModalePaniers.TUILE_NOM_MARQUAGE_CLIENT_PROSPECT :\r\n                Constantes.ModalePaniers.TUILE_NOM_MARQUAGE_VIDE;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de gérer la couleur de la tuile\r\n         * @returns {string}\r\n         */\r\n        public couleur(): string {\r\n            return this.tuilePanierSettings.indicateur.indicateur.estUniquementVueClients ?\r\n                Constantes.ModalePaniers.TUILE_COULEUR_ROUGE :\r\n                Constantes.ModalePaniers.TUILE_COULEUR_SOMBRE;\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de gérer le click sur la poubelle d'une tuile\r\n         * @returns {void}\r\n         */\r\n        public supprimer(): void {\r\n            this.modalePaniersService.supprimerIndicateurPanier(\r\n                this.tuilePanierSettings,\r\n                this.listeTuileCatalogueSettings,\r\n                this.listeTuilePanierSettings,\r\n                this.listeFiltresClients,\r\n                this.listeFiltresRelationEco);\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de gérer le click sur la flèche gauche d'une tuile\r\n         * @returns {void}\r\n         */\r\n        public deplacerAGauche(): void {\r\n            let oldIndex = this.listeTuilePanierSettings.indexOf(this.tuilePanierSettings);\r\n            let newIndex = oldIndex - 1;\r\n            if (newIndex > -1) {\r\n                let item = this.listeTuilePanierSettings.splice(oldIndex, 1)[0];\r\n                this.listeTuilePanierSettings.splice(newIndex, 0, item);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant de gérer le click sur la flèche droite d'une tuile\r\n         * @returns {void}\r\n         */\r\n        public deplacerADroite(): void {\r\n            let oldIndex = this.listeTuilePanierSettings.indexOf(this.tuilePanierSettings);\r\n            let newIndex = oldIndex + 1;\r\n            if (newIndex < this.listeTuilePanierSettings.length) {\r\n                let item = this.listeTuilePanierSettings.splice(oldIndex, 1)[0];\r\n                this.listeTuilePanierSettings.splice(newIndex, 0, item);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'afficher ou non la fléche gauche\r\n         * @returns {boolean}\r\n         */\r\n        public afficherFlecheGauche(): boolean {\r\n            if (this.tuilePanierSettings &&\r\n                this.tuilePanierSettings.estEnEdition &&\r\n                this.listeTuilePanierSettings) {\r\n                return (this.listeTuilePanierSettings.indexOf(this.tuilePanierSettings) === 0) ? false : true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Méthode permettant d'afficher ou non la fléche droite\r\n         * @returns {boolean}\r\n         */\r\n        public afficherFlecheDroite(): boolean {\r\n            if (this.tuilePanierSettings &&\r\n                this.tuilePanierSettings.estEnEdition &&\r\n                this.listeTuilePanierSettings) {\r\n                let listeTuile = this.listeTuilePanierSettings;\r\n                return (listeTuile.indexOf(this.tuilePanierSettings) === listeTuile.length - 1) ? false : true;\r\n            } else {\r\n                return false;\r\n            } \r\n        }\r\n\r\n        /**\r\n         * Retour le libelle famille sur de la tuile\r\n         * @return {string} libelle de la famille\r\n         */\r\n        public get famille(): string {\r\n            return String.fromCharCode(160, 160, 160) +\r\n                this.tuilePanierSettings.indicateur.indicateur.famille.toString();\r\n        }\r\n    }\r\n\r\n    // Déclaration du controleur\r\n    app.controller(\"PfTuilePanierControleur\", PfTuilePanierControleur);\r\n} ","/**\r\n * Directive pf-tuile-panier\r\n * @module portefeuille.Directives\r\n * @author S0078068 (Yannis Vessereau)\r\n */\r\nmodule Portefeuille.Directives {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Méthode permettant de déclarer la directive\r\n     * @return {ng.IDirective} La directive créée\r\n     */\r\n    export function mwPfTuilePanier(): ng.IDirective {\r\n        return {\r\n            restrict: \"E\",\r\n            templateUrl: \"typescript/directives/pf-tuile-panier/pf-tuile-panier-vue.html\",\r\n            controller: \"PfTuilePanierControleur\",\r\n            controllerAs: \"pfTuilePanierCtrl\",\r\n            bindToController: true,\r\n            scope: {\r\n                tuilePanierSettings: \"=\",\r\n                listeTuileCatalogueSettings: \"=\",\r\n                listeTuilePanierSettings: \"=\",\r\n                listeFiltresClients: \"=\",\r\n                listeFiltresRelationEco: \"=\"\r\n            }\r\n        };\r\n    }\r\n\r\n    // Déclaration de la directive\r\n    app.directive(\"mwPfTuilePanier\", mwPfTuilePanier);\r\n}","module Portefeuille.Services.Utils {\r\n    \"use strict\";\r\n\r\n    export class ApplicationUtils {\r\n\r\n        /**\r\n         * \r\n         */\r\n        public static recupererNouvelleSelection(): Modeles.Application.IPanier {\r\n            return <Modeles.Application.IPanier>{\r\n                \"estDefaut\": false,\r\n                \"nom\": \"\",\r\n                listeChoixIndicateurs: []\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Méthode de vérification sur une string pour voir si celle ci correspond à un nom par défaut de création de sélection\r\n         * @param nomSelection\r\n         */\r\n        public static estOkNomSelection(nomSelection: string): boolean {\r\n            for (var _i = 1; _i <= Constantes.Application.LIMITE_NB_PANIERS; _i++) {\r\n                let nomTest = `${Constantes.Application.NOM_PANIER_CREATION} ${_i}`;\r\n                if (nomSelection.indexOf(nomTest) === 0) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        public static recupererPanierDefaut(listePanier: Array<Modeles.Application.IPanier>): Modeles.Application.IPanier {\r\n            let panierReponse: Modeles.Application.IPanier;\r\n            if (listePanier.length === 1) {\r\n                panierReponse = listePanier[0];\r\n                panierReponse.estDefaut = true;\r\n            } else {\r\n                _.find(listePanier, (panier: Modeles.Application.IPanier) => {\r\n                    if (panier.estDefaut) {\r\n                        panierReponse = panier;\r\n                        return;\r\n                    }\r\n                });\r\n            }\r\n            return panierReponse;\r\n        }\r\n\r\n        /**\r\n         * Méthode retournant le pourcentage représenté par \"valeur\" par rapport à \"valeurMax\".\r\n         * @param valeurMax\r\n         * @param valeur\r\n         * @returns {number}\r\n         */\r\n        public static calculerHauteurRelativeColonne(valeurMax: number, valeur: number, isPresenceSousValeur?: boolean): number {\r\n            const hauteurMin: number = 1;\r\n            let hauteur: number;\r\n            hauteur = (valeurMax && valeurMax > 0 && valeur) ? 100 * valeur / valeurMax : hauteurMin;\r\n            return (hauteur < hauteurMin) ? hauteurMin : hauteur;\r\n        }\r\n\r\n        /**\r\n         * Méthode retournant le pourcentage représenté par \"valeur\" par rapport à \"valeurMax\".\r\n         * @param valeurMax\r\n         * @param valeur\r\n         * @returns {number}\r\n         */\r\n        public static calculerHauteurRelativeColonneSousValeur(valeurMax: number, valeur: number, sousValeur: number): number {\r\n            const hauteurMin: number = 15;\r\n            const hauteurMax: number = 85;\r\n\r\n            let hauteurCalculee: number = hauteurMin;\r\n            valeur = sousValeur;\r\n            if (valeurMax && valeurMax > 0 && valeur) {\r\n                hauteurCalculee = 100 * valeur / valeurMax;\r\n\r\n                //on verifie que la hauteur de la colonne client soit au maximum et au minimum\r\n                if (hauteurCalculee < hauteurMin) {\r\n                    hauteurCalculee = hauteurMin;\r\n                } else if (hauteurCalculee > hauteurMax) {\r\n                    hauteurCalculee = hauteurMax;\r\n                }\r\n            }\r\n\r\n            return hauteurCalculee;\r\n        }\r\n\r\n        /**\r\n         * Méthode retournant le pourcentage représenté par \"valeur\" par rapport à \"valeurMax\".\r\n         * @param valeurMax\r\n         * @param valeur\r\n         * @returns {number}\r\n         */\r\n        public static calculerHauteurRelativeColonneValeur(valeurMax: number, valeur: number, sousValeur: number): number {\r\n            const hauteurMin: number = 1;\r\n            const hauteurMax: number = 85;\r\n\r\n            valeur = valeur - sousValeur;\r\n            let hauteurCalculee: number = hauteurMin;\r\n\r\n            if (!sousValeur) {\r\n                sousValeur = 0;\r\n            }\r\n\r\n            if (valeurMax && valeurMax > 0 && valeur) {\r\n                hauteurCalculee = 100 * valeur / valeurMax;\r\n\r\n                //on verifie que la hauteur de la colonne client soit au maximum et au minimum\r\n                if (hauteurCalculee < hauteurMin) {\r\n                    hauteurCalculee = hauteurMin;\r\n                } else if (hauteurCalculee > hauteurMax) {\r\n                    hauteurCalculee = hauteurMax;\r\n                }\r\n            }\r\n\r\n            return hauteurCalculee;\r\n        }\r\n\r\n\r\n        /**\r\n         * Permet de calculer la hauteur de la colonne client actif (par rapport au nombre de client actif)\r\n         * @param valeurMax\r\n         * @param nombreClient\r\n         * @param nombreClientActif\r\n         */\r\n        public static calculerHauteurRelativeColonneClient(valeurMax: number, nombreClient: number, nombreClientActif: number): number {\r\n            const hauteurMin: number = 1;\r\n            const hauteurMax: number = 100;\r\n\r\n            let hauteurCalculee: number = hauteurMin;\r\n\r\n            if (valeurMax && valeurMax > 0 && nombreClient) {\r\n                hauteurCalculee = 100 * nombreClient / valeurMax;\r\n\r\n                //on verifie que la hauteur de la colonne client soit au mmaximum a 95% et au minimum a 5%\r\n                if (nombreClientActif >= nombreClient && hauteurCalculee > hauteurMin) {\r\n                    hauteurCalculee = hauteurMin;\r\n                } else if (hauteurCalculee > hauteurMax) {\r\n                    hauteurCalculee = hauteurMax;\r\n                }\r\n            }\r\n            return hauteurCalculee;\r\n        }\r\n\r\n        /**\r\n         * Permet de calculer la hauteur de la colonne client actif (par rapport au nombre de client total)\r\n         * @param valeurMax\r\n         * @param nombreClientActif\r\n         * @param nombreClient\r\n         */\r\n        public static calculerHauteurRelativeColonneClientActif(valeurMax: number, nombreClientActif: number, nombreClient: number): number {\r\n            const hauteurMin: number = 0;\r\n            const hauteurMax: number = 100;\r\n\r\n            let hauteurCalculee: number = hauteurMin;\r\n\r\n            if (valeurMax && valeurMax > 0 && nombreClientActif) {\r\n                hauteurCalculee = 100 * nombreClientActif / valeurMax;\r\n\r\n                //on verifie que la hauteur de la colonne client actif soit au mmaximum a 95% et au minimum a 5%\r\n                if (hauteurCalculee > hauteurMax) {\r\n                    hauteurCalculee = hauteurMax;\r\n                }\r\n            }\r\n            return hauteurCalculee;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param data\r\n         */\r\n        public static getPortefeuilleDepuisDonneeSignifiante(data: Modeles.Rest.PortefeuilleV1.recherche.IDonneeSignifiante): Modeles.Application.IPortefeuille {\r\n            if (data) {\r\n                let reponse: Modeles.Application.IPortefeuille = <Modeles.Application.IPortefeuille>{};\r\n                if (data.identifiantPortefeuille) { // cas Portefeuille\r\n                    reponse.id = data.identifiantPortefeuille;\r\n                    reponse.libelle = data.libellePortefeuille;\r\n                } else { // cas SuiviPar Complémentaire 'SPC' \r\n                    // reponse.id = 0;\r\n                    reponse.id = +data.codeSuiviComplementaire;\r\n                    reponse.libelle = data.libelleSuiviComplementaire ? data.libelleSuiviComplementaire : data.codeSuiviComplementaire + \" *pb lib*\";\r\n                    reponse.codeSuiviParComplementaire = data.codeSuiviComplementaire;\r\n                }\r\n                reponse.estAffiche = false;\r\n                reponse.listeRelations = [];\r\n                return reponse;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param data\r\n         */\r\n        public static getPortefeuilleDepuisListePortefeuille(data: Modeles.Rest.PortefeuilleV1.recherche.IPortefeuilleInfo): Modeles.Application.IPortefeuille {\r\n            if (data) {\r\n                let reponse: Modeles.Application.IPortefeuille = <Modeles.Application.IPortefeuille>{};\r\n                reponse.id = data.identifiantPortefeuille;\r\n                reponse.libelle = data.libellePortefeuille;\r\n                reponse.estAffiche = false;\r\n                reponse.idAgent = data.identifiantEdsSuiviPortefeuille;\r\n                reponse.fonctionAgent = data.libelleFonction;\r\n                reponse.nomPrenonAgent = data.libelleCourtEDS;\r\n                reponse.listeRelations = [];\r\n                return reponse;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param indicRest\r\n         */\r\n        public static getIndicateur(indicRest: Modeles.Rest.PortefeuilleV1.client.IIndicateur): Modeles.Application.IIndicateur {\r\n            let reponse: Modeles.Application.IIndicateur = <Modeles.Application.IIndicateur>{};\r\n            reponse.code = indicRest.code;\r\n            reponse.dateMaj = moment(indicRest.dateMaj, \"DD/MM/YYYY\").toDate();\r\n            reponse.tendance = indicRest.tendance;\r\n            // console.log(\"---> code : \", reponse.code);\r\n            switch (reponse.code) {\r\n                case Enum.Indicateur.CODE.CLIENTPROSPECT.toString():\r\n                case Enum.Indicateur.CODEREL.CLIENTPROSPECT.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.CLIENTPROSPECT.toString();\r\n                    reponse.valeur = Utils.DataUtils.setStrToClientProspectVide(indicRest.valeur);\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.ACTIF.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.ACTIF.toString();\r\n                    reponse.valeur = Utils.DataUtils.setStrToActifInactif(indicRest.valeur);\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.EQUIPE.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.NON_EQUIPE.toString();\r\n                    reponse.valeur = Utils.DataUtils.setStrToSansContrat(indicRest.valeur);\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.LEADER.toString():\r\n                    // XXXX\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.LEADER.toString();\r\n                    reponse.valeur = Utils.DataUtils.setStrToLeader(indicRest.valeur);\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.CA_N.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.CA_N.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.MONTANT;\r\n                    break;\r\n                case Enum.Indicateur.CODE.CA_N_MOINS_1.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.CA_N_MOINS_1.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.MONTANT;\r\n                    break;\r\n                case Enum.Indicateur.CODE.MARCHE.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.MARCHE.toString();\r\n                    reponse.valeur = indicRest.valeur ? indicRest.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.SEG_RELATIONNELLE.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.SEG_RELATIONNELLE.toString();\r\n                    reponse.valeur = indicRest.valeur ? indicRest.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.DATE_DERNIER_ENTRETIEN.toString():\r\n                case Enum.Indicateur.CODEREL.DATE_DERNIER_ENTRETIEN.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.DATE_DERNIER_ENTRETIEN.toString();\r\n                    reponse.valeur = indicRest.valeur ? indicRest.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, \"DD/MM/YYYY\").toDate() : undefined;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.DATE;\r\n                    reponse.icone = Enum.Indicateur.ICONE.DATE_DERNIER_ENTRETIEN.toString();\r\n                    break;\r\n                case Enum.Indicateur.CODE.DATE_DERNIER_RDV.toString():\r\n                case Enum.Indicateur.CODEREL.DATE_DERNIER_RDV.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.DATE_DERNIER_RDV.toString();\r\n                    reponse.valeur = indicRest.valeur ? indicRest.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, \"DD/MM/YYYY\").toDate() : undefined;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.DATE;\r\n                    reponse.icone = Enum.Indicateur.ICONE.DATE_DERNIER_RDV.toString();\r\n                    break;\r\n                case Enum.Indicateur.CODE.DATE_PROCHAIN_RDV.toString():\r\n                case Enum.Indicateur.CODEREL.DATE_PROCHAIN_RDV.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.DATE_PROCHAIN_RDV.toString();\r\n                    reponse.valeur = indicRest.valeur ? indicRest.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, \"DD/MM/YYYY\").toDate() : undefined;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.DATE;\r\n                    reponse.icone = Enum.Indicateur.ICONE.DATE_PROCHAIN_RDV.toString();\r\n                    break;\r\n                case Enum.Indicateur.CODE.NB_RDV_ANNEE_EN_COURS.toString():\r\n                case Enum.Indicateur.CODEREL.NB_RDV_ANNEE_EN_COURS.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.NB_RDV_ANNEE_EN_COURS.toString() + moment().format(\"YYYY\");\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.NOMBRE;\r\n                    reponse.icone = Enum.Indicateur.ICONE.NB_RDV_ANNEE_EN_COURS.toString();\r\n                    break;\r\n                case Enum.Indicateur.CODE.NB_RDV_12_MOIS_GLISSANTS.toString():\r\n                case Enum.Indicateur.CODEREL.NB_RDV_12_MOIS_GLISSANTS.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.NB_RDV_12_MOIS_GLISSANTS.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.NOMBRE;\r\n                    reponse.icone = Enum.Indicateur.ICONE.NB_RDV_12_MOIS_GLISSANTS.toString();\r\n                    break;\r\n                case Enum.Indicateur.CODE.PROCHAINE_REVISION.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.PROCHAINE_REVISION.toString();\r\n                    reponse.valeur = indicRest.valeur ? indicRest.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, \"DD/MM/YYYY\").toDate() : undefined;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.DATE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.NOTE_BALE2.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.NOTE_BALE2.toString();\r\n                    reponse.valeur = indicRest.valeur ? indicRest.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.PNB_3112.toString():\r\n                case Enum.Indicateur.CODEREL.PNB_3112.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.PNB_3112.toString() + moment().subtract(1, \"year\").format(\"YYYY\");\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.MONTANT;\r\n                    break;\r\n                case Enum.Indicateur.CODE.PNB_N.toString():\r\n                case Enum.Indicateur.CODEREL.PNB_N.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.PNB_N.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.MONTANT;\r\n                    break;\r\n                case Enum.Indicateur.CODE.PNB_N_MOINS_1.toString():\r\n                case Enum.Indicateur.CODEREL.PNB_N_MOINS_1.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.PNB_N_MOINS_1.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.MONTANT;\r\n                    break;\r\n                case Enum.Indicateur.CODE.REV_DATE_DERNIERE_REVUE.toString():\r\n                case Enum.Indicateur.CODEREL.REV_DATE_DERNIERE_REVUE.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.REV_DATE_DERNIERE_REVUE.toString();\r\n                    reponse.valeur = indicRest.valeur ? indicRest.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, \"DD/MM/YYYY\").toDate() : undefined;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.DATE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.REV_NB_SSFAMILLES_PROPOSE.toString():\r\n                case Enum.Indicateur.CODEREL.REV_NB_SSFAMILLES_PROPOSE.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.REV_NB_SSFAMILLES_PROPOSE.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.NOMBRE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.REV_VALIDEE_PAR.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.REV_VALIDEE_PAR.toString();\r\n                    reponse.valeur = indicRest.valeur ? Utils.DataUtils.formatterPascaleCase(indicRest.valeur) : null;\r\n                    reponse.valeur = reponse.valeur ? reponse.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.FLUX_CREDITEURS_N.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.FLUX_CREDITEURS_N.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.MONTANT;\r\n                    break;\r\n                case Enum.Indicateur.CODE.FLUX_CREDITEURS_N_MOINS_1.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.FLUX_CREDITEURS_N_MOINS_1.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.MONTANT;\r\n                    break;\r\n                case Enum.Indicateur.CODE.FLUX_DEBITEURS_N.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.FLUX_DEBITEURS_N.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.MONTANT;\r\n                    break;\r\n                case Enum.Indicateur.CODE.FLUX_DEBITEURS_N_MOINS_1.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.FLUX_DEBITEURS_N_MOINS_1.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.MONTANT;\r\n                    break;\r\n                case Enum.Indicateur.CODE.POTENTIEL_PROSPECT.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.POTENTIEL_PROSPECT.toString();\r\n                    reponse.valeur = ApplicationUtils.formaterPotentielProspect(indicRest.valeur);\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.NB_AFFAIRES_EN_COURS.toString():\r\n                case Enum.Indicateur.CODEREL.NB_AFFAIRES_EN_COURS.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.NB_AFFAIRES_EN_COURS.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.NOMBRE;\r\n                    break;\r\n                case Enum.Indicateur.CODEREL.SEG_RELATIONNELLE_GROUPE.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.SEG_RELATIONNELLE_GROUPE.toString();\r\n                    reponse.valeur = indicRest.valeur ? this.getLibelleSegmentationRelationnelle(indicRest.valeur) : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.NB_APPETENCES.toString():\r\n                case Enum.Indicateur.CODEREL.NB_APPETENCES.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.NB_APPETENCES.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.NOMBRE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.NB_PROPOSITIONS_EN_COURS.toString():\r\n                case Enum.Indicateur.CODEREL.NB_PROPOSITIONS_EN_COURS.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.NB_PROPOSITIONS_EN_COURS.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.NOMBRE;\r\n                    break;\r\n                case Enum.Indicateur.CODEREL.PART_ENGAG.toString():\r\n                case Enum.Indicateur.CODE.PART_ENGAG.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.PART_ENGAG.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.POURCENT;\r\n                    break;\r\n                // NOUVEL INDICATEUR conversion indicateur REST en Modeles.Application.IIndicateur\r\n                case Enum.Indicateur.CODE.SCORE_ACTIVATION.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.SCORE_ACTIVATION.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.NOMBRE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.SCORE_APPETENCE.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.SCORE_APPETENCE.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.NOMBRE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.SCORE_DEFAILLANCE.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.SCORE_DEFAILLANCE.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.NOMBRE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.TOP_CC.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.TOP_CC.toString();\r\n                    reponse.valeurNumber = ApplicationUtils.ValeurNumberTopCC(indicRest.valeur);\r\n                    reponse.valeur = ApplicationUtils.formaterTopCC(indicRest.valeur);\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                    break;\r\n                case Enum.Indicateur.CODE.PART_FLUX_CONFIES_CRED.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.PART_FLUX_CONFIES_CRED.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.POURCENT;\r\n                    break;\r\n                case Enum.Indicateur.CODE.PART_FLUX_CONFIES_DEB.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.PART_FLUX_CONFIES_DEB.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.POURCENT;\r\n                    break;\r\n                case Enum.Indicateur.CODE.PREMIER_EQUIPEMENT.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT.toString();\r\n                    reponse.valeur = indicRest.valeur ? indicRest.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, \"DD/MM/YYYY\").toDate() : undefined;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.DATE;\r\n                    break;\r\n\r\n                // PREMIER_EQUIPEMENT_TAG ne doit plus être proposé dansles filtres.\r\n                case Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TAG.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT_TAG.toString();\r\n                    reponse.valeur = indicRest.valeur ? indicRest.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.valeurDate = indicRest.valeur ? moment(indicRest.valeur, \"DD/MM/YYYY\").toDate() : undefined;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.DATE;\r\n                    break;\r\n\r\n                case Enum.Indicateur.CODE.PREMIER_EQUIPEMENT_TEXTE.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.PREMIER_EQUIPEMENT_TEXTE.toString();\r\n                    reponse.valeur = indicRest.valeur ? indicRest.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                    break;\r\n\r\n                case Enum.Indicateur.CODE.OBJECTIF_FLUX.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.OBJECTIF_FLUX.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.POURCENT;\r\n                    break;\r\n\r\n                case Enum.Indicateur.CODE.ENCOURS_BDF.toString():\r\n                case Enum.Indicateur.CODEREL.ENCOURS_BDF.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.ENCOURS_BDF.toString();\r\n                    reponse.valeurNumber = indicRest.valeur ? +indicRest.valeur : null;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.MONTANT;\r\n                    // console.log(\"---> encours BDF reponse : \", reponse);\r\n                    break;\r\n\r\n                case Enum.Indicateur.CODE.BEGACLI.toString():\r\n                    reponse.intitule = Enum.Indicateur.INTITULE.BEGACLI.toString();\r\n                    reponse.valeur = indicRest.valeur ? indicRest.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.BEGACLI;\r\n                    // console.log(\"---> begacli reponse : \", reponse);\r\n                    break;\r\n\r\n                default:\r\n                    reponse.intitule = \"\";\r\n                    reponse.valeur = indicRest.valeur ? indicRest.valeur : Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                    reponse.typeIndicateur = Enum.Indicateur.TYPE.TEXTE;\r\n                    break;\r\n            }\r\n            return reponse;\r\n        }\r\n\r\n        /**\r\n         * \r\n         */\r\n        public static formaterPotentielProspect(valeur: string): string {\r\n            let valeurFormater: string;\r\n            if (valeur === undefined || valeur === null || valeur === \"0\") {\r\n                valeurFormater = Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n            } else {\r\n                valeurFormater = valeur + \" \" + \"étoile\" + ((valeur !== \"1\") ? \"s\" : \"\");\r\n            }\r\n            return valeurFormater;\r\n        }\r\n\r\n        /**\r\n         * 23/02/2022 Top_CC\r\n         */\r\n        public static formaterTopCC(valeur: string): string {\r\n            // Valeur par défaut = Blanc\r\n            let valeurFormater: string = Constantes.Application.LIBELLE_TOP_CC_BLANC;\r\n\r\n            _.forEach(Constantes.Tableau.VALEUR_POSSIBLE_TOP_CC, (libelle: string) => {\r\n                if (valeur[0] === libelle[0]) {\r\n                    valeurFormater = libelle;\r\n                }\r\n            });\r\n            return valeurFormater;\r\n        }\r\n\r\n        /**\r\n         * 23/02/2022 : Mettre dans valeurNumber l'index de la valeur TOP CC du tableau constant\r\n         */\r\n        public static ValeurNumberTopCC(valeur: string): number {\r\n            let valeurNumber: number = Constantes.Tableau.VALEUR_POSSIBLE_TOP_CC.indexOf(Constantes.Application.LIBELLE_TOP_CC_BLANC);\r\n\r\n            _.forEach(Constantes.Tableau.VALEUR_POSSIBLE_TOP_CC, (libelle: string) => {\r\n                if (valeur[0] === libelle[0]) {\r\n                    valeurNumber = Constantes.Tableau.VALEUR_POSSIBLE_TOP_CC.indexOf(libelle);\r\n                }\r\n            });\r\n            return valeurNumber;\r\n        }\r\n\r\n        // transforme un code segmentation BDR en libellé (données récupérées depuis la table délocalisée DU2L chargée à l'init du clients-controller)\r\n        public static segmentationsBDR: Array<any> = [];\r\n        public static getLibelleSegmentationRelationnelle(codeSeg: string): string {\r\n            this.segmentationsBDR.forEach((donnee: any) => {\r\n                if (donnee.CODLTS === \"BM\" &&\r\n                    donnee.CODLST === codeSeg) {   // segmentations BDR : BM; segmentations PRO : BP\r\n                    codeSeg = donnee.LIDLSG;\r\n                }\r\n            });\r\n            return codeSeg;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsPtf\r\n         */\r\n        public static getStatsPortefeuilleAppDepuisRest(\r\n            statsPtf: Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.IStatPortefeuille): Modeles.ApplicationStats.IRdvPtf {\r\n            let statsApp: Modeles.ApplicationStats.IRdvPtf = <Modeles.ApplicationStats.IRdvPtf>{};\r\n            if (!statsPtf) {\r\n                return undefined;\r\n            }\r\n            if (statsPtf.portefeuilleRdv) {\r\n                statsApp.nombreClients = statsPtf.portefeuilleRdv.nombreClients;\r\n                statsApp.nombreClientsActifs = statsPtf.portefeuilleRdv.nombreClientsActifs;\r\n                statsApp.nombreClientsPMEESI = statsPtf.portefeuilleRdv.nombreClientsTypePmeEsi;\r\n                statsApp.nombreClientsPEetPEES = statsPtf.portefeuilleRdv.nbClientsPePees;\r\n                statsApp.nombreClientsMEetMEES = statsPtf.portefeuilleRdv.nbClientsMeMees;\r\n                statsApp.nombreClientsGEetGEES = statsPtf.portefeuilleRdv.nbClientsGeGees;\r\n                statsApp.nombreClientsPro = statsPtf.portefeuilleRdv.nombreClientsTypeProEi;\r\n                statsApp.nombreClientsAutres = statsPtf.portefeuilleRdv.nombreClientsTypeAutre;\r\n                statsApp.nombreProspects = statsPtf.portefeuilleRdv.nombreProspects;\r\n                statsApp.nombreClientsAvecProduitService = statsPtf.portefeuilleRdv.nbClientsAvecProduitService;\r\n                statsApp.nombreClientsSansContratEtProspect = statsPtf.portefeuilleRdv.nbClientsSansContratEtProspect;\r\n                statsApp.nombreRelations = statsPtf.portefeuilleRdv.nombreRelationsEconomiques;\r\n                statsApp.nombreRdvProspectAnneeCivile = statsPtf.portefeuilleRdv.nbRdvProspectRealiseAnneeCivile;\r\n                statsApp.nombreRdvProspectAnneeEnCours = statsPtf.portefeuilleRdv.nbProspectsVusAnneeEncours;\r\n                statsApp.nombreRdvRelationEcoClient = statsPtf.portefeuilleRdv.nbRelEcoClientVuesAnneeEncours;\r\n                statsApp.rdvTauxVisite = statsPtf.portefeuilleRdv.tauxDeVisite;\r\n                statsApp.nombreRdvClientAnneeEnCours = statsPtf.portefeuilleRdv.nbRdvClient; //BDRL-1636\r\n\r\n                statsApp.nombreClientsNonEquipe = statsPtf.portefeuilleRdv.nbClientsNonEquipe;\r\n            }\r\n\r\n            if (statsPtf.listeSegmentationRelationnellePmeEsi && statsPtf.listeSegmentationRelationnellePmeEsi.length > 0) {\r\n                statsApp.listeSegmentationsPMEESI = [];\r\n                _.forEach(statsPtf.listeSegmentationRelationnellePmeEsi, (seg: Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.ISegmentationRelationnellePmeEsi) => {\r\n                    let segApp: Modeles.ApplicationStats.ISegmentationRelationnelle = <Modeles.ApplicationStats.ISegmentationRelationnelle>{};\r\n                    segApp.code = seg.codeSegmentation;\r\n                    segApp.libelle = seg.libelleSegmentation;\r\n                    segApp.pourcentage = seg.pourcentageNombreDeClients;\r\n                    statsApp.listeSegmentationsPMEESI.push(segApp);\r\n                });\r\n            }\r\n\r\n            //BDRL-1648 : Ajout Segmentation Pro\r\n            if (statsPtf.listeSegmentationRelationnellePro && statsPtf.listeSegmentationRelationnellePro.length > 0) {\r\n                statsApp.listeSegmentationsPro = this.agglomererSegmentationPro(statsPtf.listeSegmentationRelationnellePro);\r\n            }\r\n            return statsApp;\r\n        }\r\n\r\n        public static getStatsRentabiliteAppDepuisRest(statsRest: Modeles.Rest.PortefeuillCorporateV1.statRentabilite.IInfoPnb)\r\n            : Modeles.ApplicationStats.IRentabilite {\r\n            let statsApp: Modeles.ApplicationStats.IRentabilite;\r\n            if (statsRest) {\r\n                statsApp = <Modeles.ApplicationStats.IRentabilite>{};\r\n                statsApp.dateDebPnb12DerMoisGlissN = Utils.DataUtils.strDateRestToDate(statsRest.dateDebPnb12DerMoisGlissN);\r\n                statsApp.dateDebPnb12DerMoisGlissNMoins1 = Utils.DataUtils.strDateRestToDate(statsRest.dateDebPnb12DerMoisGlissNMoins1);\r\n                statsApp.dateDebPnb3112AnneeNMoins1 = Utils.DataUtils.strDateRestToDate(statsRest.dateDebPnb3112AnneeNMoins1);\r\n                statsApp.dateFinPnb12DerMoisGlissN = Utils.DataUtils.strDateRestToDate(statsRest.dateFinPnb12DerMoisGlissN);\r\n                statsApp.dateFinPnb12DerMoisGlissNMoins1 = Utils.DataUtils.strDateRestToDate(statsRest.dateFinPnb12DerMoisGlissNMoins1);\r\n                statsApp.dateFinPnb3112AnneeNMoins1 = Utils.DataUtils.strDateRestToDate(statsRest.dateFinPnb3112AnneeNMoins1);\r\n                statsApp.pnb12DerniersMoisGlissantN = statsRest.pnb12DerniersMoisGlissantN;\r\n                statsApp.pnb12DerniersMoisGlissNMoins1 = statsRest.pnb12DerniersMoisGlissNMoins1;\r\n                statsApp.pnb3112AnneeNMoins1 = statsRest.pnb3112AnneeNMoins1;\r\n                statsApp.ratioPNBImportants = statsRest.ratioPnbClient;\r\n                statsApp.tauxEvolutionPnb = statsRest.tauxEvolutionPnb;\r\n            } else {\r\n                statsApp = undefined;\r\n            }\r\n            return statsApp;\r\n        }\r\n\r\n        public static getStatsRevueAppDepuisRest(\r\n            statsRest: Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevue): Modeles.ApplicationStats.IRevuePortefeuille {\r\n            let statsApp: Modeles.ApplicationStats.IRevuePortefeuille;\r\n            if (statsRest) {\r\n                statsApp = <Modeles.ApplicationStats.IRevuePortefeuille>{};\r\n                statsApp.nombreDeClientsAActiver = statsRest.nombreDeClientsAActiver;\r\n                statsApp.nombreDeProduitsAProposer = statsRest.nombreDeProduitsAProposer;\r\n                statsApp.nombreDeClientsAAppetence = statsRest.nombreDeClientsAAppetence;\r\n                statsApp.pourcentageRevuePtfRealisee = statsRest.pourcentageRevuePtfRealisee;\r\n                statsApp.nombreDeClientsARenegocier = statsRest.nombreDeClientsARenegocier;\r\n                statsApp.nombreDePropositionsEnCours = statsRest.cumulPropositionCommerciale;\r\n                statsApp.nombreDeAffairesEnCours = statsRest.cumulNombreAffaires;\r\n                statsApp.nombreDePropositionsEnCours = statsRest.cumulPropositionCommerciale; // bouchon temporaire\r\n                statsApp.nombreDeAffairesEnCours = statsRest.cumulNombreAffaires; // bouchon temporaire\r\n            } else {\r\n                statsApp = undefined;\r\n            }\r\n            return statsApp;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsRest\r\n         */\r\n        public static getStatsRevueAppDepuisRestGlobal(\r\n            statsRest: Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds\r\n        ): Modeles.ApplicationStats.IRevuePortefeuille {\r\n            let statsApp: Modeles.ApplicationStats.IRevuePortefeuille;\r\n            if (statsRest && statsRest.vueGlobaleStatPtfEds) {\r\n                statsApp = <Modeles.ApplicationStats.IRevuePortefeuille>{};\r\n                statsApp.nombreDeClientsAActiver = statsRest.vueGlobaleStatPtfEds.nombreDeClientsAActiver;\r\n                statsApp.nombreDeProduitsAProposer = statsRest.vueGlobaleStatPtfEds.nombreDeProduitsAProposer;\r\n                statsApp.nombreDeClientsAAppetence = statsRest.vueGlobaleStatPtfEds.nombreDeClientsAAppetence;\r\n                statsApp.pourcentageRevuePtfRealisee = statsRest.vueGlobaleStatPtfEds.pourcentageRevuePtfRealisee;\r\n                statsApp.nombreDeClientsARenegocier = statsRest.vueGlobaleStatPtfEds.nombreDeClientsTarifARenegocier;\r\n                statsApp.nombreDePropositionsEnCours = statsRest.vueGlobaleStatPtfEds.cumulPropositionCommerciale; // bouchon temporaire\r\n                statsApp.nombreDeAffairesEnCours = statsRest.vueGlobaleStatPtfEds.cumulNombreAffaires; // bouchon temporaire\r\n\r\n            } else {\r\n                statsApp = undefined;\r\n            }\r\n            return statsApp;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsRest\r\n         */\r\n        public static getStatsRentabiliteAppDepuisRestGlobal(statsRest: Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds)\r\n            : Modeles.ApplicationStats.IRentabilite {\r\n            let statsApp: Modeles.ApplicationStats.IRentabilite = <Modeles.ApplicationStats.IRentabilite>{};\r\n            if (!statsRest || !statsRest.vueGlobaleStatPtfEds) {\r\n                return undefined;\r\n            }\r\n            statsApp.dateDebPnb12DerMoisGlissN =\r\n                Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateDebPnb12DerMoisGlissN);\r\n            statsApp.dateDebPnb12DerMoisGlissNMoins1 =\r\n                Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateDebPnb12DerMoisGlissNMoins1);\r\n            statsApp.dateDebPnb3112AnneeNMoins1 =\r\n                Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateDebPnb3112AnneeNMoins1);\r\n            statsApp.dateFinPnb12DerMoisGlissN =\r\n                Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateFinPnb12DerMoisGlissN);\r\n            statsApp.dateFinPnb12DerMoisGlissNMoins1 =\r\n                Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateFinPnb12DerMoisGlissNMoins1);\r\n            statsApp.dateFinPnb3112AnneeNMoins1 =\r\n                Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateFinPnb3112AnneeNMoins1);\r\n            statsApp.pnb12DerniersMoisGlissantN = statsRest.vueGlobaleStatPtfEds.pnb12DerniersMoisGlissantN;\r\n            statsApp.pnb12DerniersMoisGlissNMoins1 = statsRest.vueGlobaleStatPtfEds.pnb12DerniersMoisGlissNMoins1;\r\n            statsApp.pnb3112AnneeNMoins1 = statsRest.vueGlobaleStatPtfEds.pnb3112AnneeNMoins1;\r\n            /*statsApp.ratioPNBImportants = statsRest.vueGlobaleStatPtfEds.ratioPnbClient;     TODO EA a ne pas mappé qu cadre de la version vue DCA */\r\n            statsApp.tauxEvolutionPnb = statsRest.vueGlobaleStatPtfEds.tauxEvolutionPnb;\r\n\r\n            return statsApp;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsRest\r\n         */\r\n        public static getStatsPortefeuilleAppDepuisRestGlobal(\r\n            statsRest: Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds): Modeles.ApplicationStats.IRdvPtf {\r\n            let statsApp: Modeles.ApplicationStats.IRdvPtf = <Modeles.ApplicationStats.IRdvPtf>{};\r\n            if (!statsRest || !statsRest.vueGlobaleStatPtfEds) {\r\n                return undefined;\r\n            }\r\n            if (statsRest.vueGlobaleStatPtfEds) {\r\n                statsApp.nombreClients = statsRest.vueGlobaleStatPtfEds.nombreClients;\r\n                statsApp.nombreClientsActifs = statsRest.vueGlobaleStatPtfEds.nombreClientsActifs;\r\n                statsApp.nombreClientsPMEESI = statsRest.vueGlobaleStatPtfEds.nombreClientsTypePmeEsi;\r\n                statsApp.nombreClientsPEetPEES = statsRest.vueGlobaleStatPtfEds.nbClientsPePees;\r\n                statsApp.nombreClientsMEetMEES = statsRest.vueGlobaleStatPtfEds.nbClientsMeMees;\r\n                statsApp.nombreClientsGEetGEES = statsRest.vueGlobaleStatPtfEds.nbClientsGeGees;\r\n                statsApp.nombreClientsPro = statsRest.vueGlobaleStatPtfEds.nombreClientsTypeProEi;\r\n                statsApp.nombreClientsAutres = statsRest.vueGlobaleStatPtfEds.nombreClientsTypeAutre;\r\n                statsApp.nombreProspects = statsRest.vueGlobaleStatPtfEds.nombreProspects;\r\n                statsApp.nombreClientsAvecProduitService = statsRest.vueGlobaleStatPtfEds.nbClientsAvecProduitService;\r\n                statsApp.nombreClientsSansContratEtProspect = statsRest.vueGlobaleStatPtfEds.nbClientsSansContratEtProspect;\r\n                statsApp.nombreRelations = statsRest.vueGlobaleStatPtfEds.nombreRelationsEconomiques;\r\n                statsApp.nombreRdvProspectAnneeCivile = statsRest.vueGlobaleStatPtfEds.nbRdvProspectRealiseAnneeCivile;\r\n                statsApp.nombreRdvProspectAnneeEnCours = statsRest.vueGlobaleStatPtfEds.nbProspectsVusAnneeEncours;\r\n                statsApp.nombreRdvRelationEcoClient = statsRest.vueGlobaleStatPtfEds.nbRelEcoClientVuesAnneeEncours;\r\n                statsApp.rdvTauxVisite = statsRest.vueGlobaleStatPtfEds.tauxDeVisite;\r\n                statsApp.nombreRdvClientAnneeEnCours = statsRest.vueGlobaleStatPtfEds.nbRdvClient; //BDRL-1636\r\n\r\n                statsApp.nombreClientsNonEquipe = statsRest.vueGlobaleStatPtfEds.nbClientsNonEquipe;\r\n            }\r\n\r\n            /* TODO EA a remettre en place mais il n'y a pas de sortie sur la ressource dans le lot 1 vue DCA\r\n            if (statsRest.listeSegmentationRelationnellePmeEsi && statsRest.listeSegmentationRelationnellePmeEsi.length > 0) {\r\n                statsApp.listeSegmentationsPMEESI = [];\r\n                _.forEach(\r\n                    statsRest.listeSegmentationRelationnellePmeEsi,\r\n                    (seg: Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.ISegmentationRelationnellePmeEsi) => {\r\n                    let segApp: Modeles.ApplicationStats.ISegmentationRelationnelle = <Modeles.ApplicationStats.ISegmentationRelationnelle>{};\r\n                    segApp.code = seg.codeSegmentation;\r\n                    segApp.libelle = seg.libelleSegmentation;\r\n                    segApp.pourcentage = seg.pourcentageNombreDeClients;\r\n                    statsApp.listeSegmentationsPMEESI.push(segApp);\r\n                });\r\n            }\r\n            //BDRL-1648 : Ajout Segmentation Pro\r\n            if (statsRest.listeSegmentationRelationnellePro && statsRest.listeSegmentationRelationnellePro.length > 0) {\r\n                statsApp.listeSegmentationsPro = this.agglomererSegmentationPro(statsRest.listeSegmentationRelationnellePro);\r\n            }\r\n            */\r\n            return statsApp;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsRest\r\n         */\r\n        public static getStatsFluxFinancierPortefeuilleAppDepuisRestGlobal(\r\n            statsRest: Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds): Array<Modeles.ApplicationStats.IFlux> {\r\n            let listFlux: Array<Modeles.ApplicationStats.IFlux> = [];\r\n            let fluxTravail: Modeles.ApplicationStats.IFlux;\r\n\r\n            //Flux créditeurs\r\n            fluxTravail = <Modeles.ApplicationStats.IFlux>{};\r\n            //Traitement des dates\r\n            fluxTravail.dateDebFlux12DerMoisGlissN = DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateDebFluxAnneeN);\r\n            fluxTravail.dateDebFlux12DerMoisGlissNMoins1 = DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateDebFluxAnneeNMoins1);\r\n            fluxTravail.dateFinFlux12DerMoisGlissN = DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateFinFluxAnneeN);\r\n            fluxTravail.dateFinFlux12DerMoisGlissNMoins1 = DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateFinFluxAnneeNMoins1);\r\n            //Traitement des chiffres\r\n            fluxTravail.flux12DerniersMoisGlissantN = statsRest.vueGlobaleStatPtfEds.fluxCrediteursAnneeN;\r\n            fluxTravail.flux12DerniersMoisGlissNMoins1 = statsRest.vueGlobaleStatPtfEds.fluxCrediteursNMoins1;\r\n            fluxTravail.tauxEvolutionFlux = statsRest.vueGlobaleStatPtfEds.tauxEvolutionFluxCrediteurs;\r\n\r\n            listFlux.push(fluxTravail);\r\n\r\n            //Flux débiteurs\r\n            fluxTravail = <Modeles.ApplicationStats.IFlux>{};\r\n            //Traitement des dates\r\n            fluxTravail.dateDebFlux12DerMoisGlissN = DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateDebFluxAnneeN);\r\n            fluxTravail.dateDebFlux12DerMoisGlissNMoins1 = DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateDebFluxAnneeNMoins1);\r\n            fluxTravail.dateFinFlux12DerMoisGlissN = DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateFinFluxAnneeN);\r\n            fluxTravail.dateFinFlux12DerMoisGlissNMoins1 = DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateFinFluxAnneeNMoins1);\r\n            //Traitement des chiffres\r\n            fluxTravail.flux12DerniersMoisGlissantN = statsRest.vueGlobaleStatPtfEds.fluxDebiteursAnneeN;\r\n            fluxTravail.flux12DerniersMoisGlissNMoins1 = statsRest.vueGlobaleStatPtfEds.fluxDebiteursNMoins1;\r\n            fluxTravail.tauxEvolutionFlux = statsRest.vueGlobaleStatPtfEds.tauxEvolutionFluxDebiteurs;\r\n\r\n            listFlux.push(fluxTravail);\r\n            return listFlux;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param statsRest\r\n         */\r\n        public static getStatsDetailPortefeuilleAppDepuisRestGlobal(\r\n            statsRest: Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds): Modeles.ApplicationStats.IDetailPtf {\r\n            let listDetail: Modeles.ApplicationStats.IDetailPtf = <Modeles.ApplicationStats.IDetailPtf>{};\r\n            listDetail.detailParSuviPar = [];\r\n            if (statsRest &&\r\n                statsRest.vueDetailleeStatPtfEds &&\r\n                statsRest.vueDetailleeStatPtfEds.length > 0) {\r\n                _.forEach(statsRest.vueDetailleeStatPtfEds, (statDetailRest: Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPtfEdsStandard) => {\r\n                    let statDetailApplication: Modeles.ApplicationStats.IDetailPtfParSuviPar = <Modeles.ApplicationStats.IDetailPtfParSuviPar>{};\r\n\r\n                    // Detail données général\r\n                    statDetailApplication.codeCiviliteSuiviPar = DataUtils.determinerLibelleCivilite(statDetailRest.codeCiviliteChargeAffaire);\r\n                    // dans certain cas le nom est à vide car aucun poste fonctionnel\r\n                    if (!statDetailRest.nomFamilleChargeAffaire) {\r\n                        statDetailApplication.nomSuiviPar = \"AGENT-\" + statDetailRest.identifiantEds;\r\n                        statDetailApplication.prenomSuiviPar = \"\";\r\n                    } else {\r\n                        statDetailApplication.nomSuiviPar =\r\n                            (statDetailRest.nomUsageChargeAffaire &&\r\n                                statDetailRest.nomUsageChargeAffaire !== \"\")\r\n                                ? statDetailRest.nomUsageChargeAffaire\r\n                                : statDetailRest.nomFamilleChargeAffaire;\r\n                        statDetailApplication.prenomSuiviPar = statDetailRest.prenomChargeAffaire;\r\n                    }\r\n\r\n                    // Détail pour le porfeuille\r\n                    statDetailApplication.nbClientsAvecProduitService = statDetailRest.nbClientsAvecProduitService;\r\n                    statDetailApplication.nombreClientsActifs = statDetailRest.nombreClientsActifs;\r\n                    statDetailApplication.nombreClients = statDetailRest.nombreClients;\r\n\r\n                    // Détail pour l'activité\r\n                    statDetailApplication.tauxDeVisite = statDetailRest.tauxDeVisite;\r\n\r\n                    // Détail pour rentabilité\r\n                    statDetailApplication.pnb12DerniersMoisGlissNMoins1 = statDetailRest.pnb12DerniersMoisGlissNMoins1;\r\n                    statDetailApplication.pnb12DerniersMoisGlissantN = statDetailRest.pnb12DerniersMoisGlissantN;\r\n                    statDetailApplication.tauxEvolutionPnb = statDetailRest.tauxEvolutionPnb;\r\n\r\n                    // Détail pour la revue portefeuille\r\n                    statDetailApplication.tauxDeRevue = statDetailRest.pourcentageRevuePtfRealisee;\r\n\r\n                    // Détail pour les flux commericaux\r\n                    statDetailApplication.fluxCrediteursNMoins1 = statDetailRest.fluxCrediteursNMoins1;\r\n                    statDetailApplication.fluxCrediteursAnneeN = statDetailRest.fluxCrediteursAnneeN;\r\n                    statDetailApplication.tauxEvolutionFluxCrediteurs = statDetailRest.tauxEvolutionFluxCrediteurs;\r\n\r\n                    statDetailApplication.fluxDebiteursNMoins1 = statDetailRest.fluxDebiteursNMoins1;\r\n                    statDetailApplication.fluxDebiteursAnneeN = statDetailRest.fluxDebiteursAnneeN;\r\n                    statDetailApplication.tauxEvolutionFluxDebiteurs = statDetailRest.tauxEvolutionFluxDebiteurs;\r\n\r\n                    listDetail.detailParSuviPar.push(statDetailApplication);\r\n                });\r\n                listDetail.detailParSuviPar = _.sortBy(listDetail.detailParSuviPar, (item: Modeles.ApplicationStats.IDetailPtfParSuviPar) => {\r\n                    return item.nomSuiviPar;\r\n                });\r\n            }\r\n\r\n            // Total pour chaque détail\r\n            if (statsRest && statsRest.vueGlobaleStatPtfEds) {\r\n                listDetail.tauxDeVisiteTotal = statsRest.vueGlobaleStatPtfEds.tauxDeVisite;\r\n                listDetail.tauxDeRevueTotal = statsRest.vueGlobaleStatPtfEds.pourcentageRevuePtfRealisee;\r\n\r\n                //PNB\r\n                listDetail.dateDebPnb12DerMoisGlissNMoins1 = Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateDebPnb12DerMoisGlissNMoins1);\r\n                listDetail.dateFinPnb12DerMoisGlissNMoins1 = Utils.DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateFinPnb12DerMoisGlissNMoins1);\r\n                listDetail.dateDebPnb12DerMoisGlissN = DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateDebPnb12DerMoisGlissN);\r\n                listDetail.dateFinPnb12DerMoisGlissN = DataUtils.strDateRestToDate(statsRest.vueGlobaleStatPtfEds.dateFinPnb12DerMoisGlissN);\r\n\r\n                listDetail.pnb12DerniersMoisGlissNMoins1 = statsRest.vueGlobaleStatPtfEds.pnb12DerniersMoisGlissNMoins1;\r\n                listDetail.pnb12DerniersMoisGlissantN = statsRest.vueGlobaleStatPtfEds.pnb12DerniersMoisGlissantN;\r\n                listDetail.tauxEvolutionPnb = statsRest.vueGlobaleStatPtfEds.tauxEvolutionPnb;\r\n\r\n                //Flux\r\n                listDetail.dateDebFluxAnneeNMoins1 = DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateDebFluxAnneeNMoins1);\r\n                listDetail.dateFinFluxAnneeNMoins1 = DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateFinFluxAnneeNMoins1);\r\n                listDetail.dateDebFluxAnneeN = DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateDebFluxAnneeN);\r\n                listDetail.dateFinFluxAnneeN = DataUtils.formaterDateValide(statsRest.vueGlobaleStatPtfEds.dateFinFluxAnneeN);\r\n\r\n                listDetail.fluxCrediteursNMoins1 = statsRest.vueGlobaleStatPtfEds.fluxCrediteursNMoins1;\r\n                listDetail.fluxCrediteursAnneeN = statsRest.vueGlobaleStatPtfEds.fluxCrediteursAnneeN;\r\n                listDetail.tauxEvolutionFluxCrediteurs = statsRest.vueGlobaleStatPtfEds.tauxEvolutionFluxCrediteurs;\r\n\r\n                listDetail.fluxDebiteursNMoins1 = statsRest.vueGlobaleStatPtfEds.fluxDebiteursNMoins1;\r\n                listDetail.fluxDebiteursAnneeN = statsRest.vueGlobaleStatPtfEds.fluxDebiteursAnneeN;\r\n                listDetail.tauxEvolutionFluxDebiteurs = statsRest.vueGlobaleStatPtfEds.tauxEvolutionFluxDebiteurs;\r\n            }\r\n            return listDetail;\r\n        }\r\n\r\n        /**\r\n         * Fonction permettant de generer un identifiant aléatoire\r\n         * @returns {number}\r\n         */\r\n        public static genererIdentifiantAleatoire(): number {\r\n            return Math.floor(new Date().valueOf() * Math.random());\r\n        }\r\n\r\n        /**\r\n         * Agglomère les segmentations Pro reçues du service Rest en fonction des codes segmentation\r\n         * @param listeSegmentationProRest\r\n         */\r\n        public static agglomererSegmentationPro(\r\n            listeSegmentationProRest: Array<Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.ISegmentationRelationnellePro>): Array<Modeles.ApplicationStats.ISegmentationRelationnelle> {\r\n            let listeSegmentationResultat: Array<Modeles.ApplicationStats.ISegmentationRelationnelle>;\r\n\r\n            if (listeSegmentationProRest) {\r\n                listeSegmentationResultat = [];\r\n\r\n                //La caractère recherché est *\r\n                let expressionReguliereRecherchee: RegExp = /\\*/;\r\n\r\n                _.forEach(listeSegmentationProRest, (segmentationProLue: Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.ISegmentationRelationnellePro) => {\r\n                    if (segmentationProLue) {\r\n                        let segmentationTravail: Modeles.ApplicationStats.ISegmentationRelationnelle = <Modeles.ApplicationStats.ISegmentationRelationnelle>{};\r\n\r\n                        let nombreEtoiles: number = 0;\r\n                        let tableauAvecEtoiles: Array<string>;\r\n\r\n                        if (segmentationProLue.codeSegmentation) {\r\n                            tableauAvecEtoiles = segmentationProLue.codeSegmentation.split(expressionReguliereRecherchee);\r\n\r\n                            if (tableauAvecEtoiles) {\r\n                                nombreEtoiles = tableauAvecEtoiles.length - 1;\r\n                            }\r\n                        }\r\n\r\n                        //On valorise les propriétés de segmentationTravail en fonction de celles de segmentationProLue\r\n                        switch (nombreEtoiles) {\r\n                            case 0:\r\n                                if (segmentationProLue.codeSegmentation.indexOf(Portefeuille.Constantes.Rest.ENTREE_EN_RELATION) !== -1) {\r\n                                    //Cas \"Entrée en relation\"\r\n                                    segmentationTravail.code = Portefeuille.Constantes.Rest.CODE_ENTREE_EN_RELATION;\r\n                                    segmentationTravail.libelle = Portefeuille.Constantes.Application.LIBELLE_AGGLOMERAT_ENTREE_RELATION;\r\n                                    segmentationTravail.pourcentage = segmentationProLue.pourcentageNombreDeClients;\r\n                                } else if (segmentationProLue.codeSegmentation.indexOf(Portefeuille.Constantes.Rest.PRO_RISQUE) !== -1) {\r\n                                    //Cas \"Risqué\"\r\n                                    segmentationTravail.code = Portefeuille.Constantes.Rest.CODE_RISQUE;\r\n                                    segmentationTravail.libelle = Portefeuille.Constantes.Application.LIBELLE_AGGLOMERAT_RISQUE;\r\n                                    segmentationTravail.pourcentage = segmentationProLue.pourcentageNombreDeClients;\r\n                                } else {\r\n                                    if (segmentationProLue.codeSegmentation.toUpperCase().substr(0, 3) === Portefeuille.Constantes.Rest.NON_CALCULE_NON_CONCERNE) {\r\n                                        //Autres cas traités\r\n                                        segmentationTravail.code = Portefeuille.Constantes.Rest.CODE_AUTRES;\r\n                                        segmentationTravail.libelle = Portefeuille.Constantes.Application.LIBELLE_AGGLOMERAT_AUTRES;\r\n                                        segmentationTravail.pourcentage = segmentationProLue.pourcentageNombreDeClients;\r\n                                    } else {\r\n                                        //Autres cas non ignorés (ex SCI)\r\n                                        segmentationTravail = null;\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case 1:\r\n                                segmentationTravail.code = Portefeuille.Constantes.Rest.CODE_PRO_NON_CAPTE;\r\n                                segmentationTravail.libelle = Portefeuille.Constantes.Application.LIBELLE_AGGLOMERAT_PRO_NON_CAPTE;\r\n                                segmentationTravail.pourcentage = segmentationProLue.pourcentageNombreDeClients;\r\n                                break;\r\n                            case 2:\r\n                                segmentationTravail.code = Portefeuille.Constantes.Rest.CODE_PRO_PARTIELLEMENT_CAPTE;\r\n                                segmentationTravail.libelle = Portefeuille.Constantes.Application.LIBELLE_AGGLOMERAT_PRO_PARTIELLEMENT_CAPTE;\r\n                                segmentationTravail.pourcentage = segmentationProLue.pourcentageNombreDeClients;\r\n                                break;\r\n                            case 3:\r\n                                segmentationTravail.code = Portefeuille.Constantes.Rest.CODE_PRO_LARGEMENT_CAPTE;\r\n                                segmentationTravail.libelle = Portefeuille.Constantes.Application.LIBELLE_AGGLOMERAT_PRO_LARGEMENT_CAPTE;\r\n                                segmentationTravail.pourcentage = segmentationProLue.pourcentageNombreDeClients;\r\n                                break;\r\n                            default:\r\n                                segmentationTravail = null;\r\n                                break;\r\n                        }\r\n\r\n                        if (segmentationTravail) {\r\n                            //Recherche de ce type de segmentation dans la liste à retourner: Si trouvé => mise à jour pourcentage; Sinon => ajout\r\n                            let indexTrouve: number = -1; //Par défaut on considère la recherche infructueuse\r\n                            indexTrouve = _.findIndex(listeSegmentationResultat, (segmentationTestee: Modeles.ApplicationStats.ISegmentationRelationnelle) => {\r\n                                if (segmentationTestee.code === segmentationTravail.code) {\r\n                                    return true;\r\n                                }\r\n                            });\r\n\r\n                            //Exploitation du résultat de la recherche\r\n                            if (indexTrouve === -1) {\r\n                                //Ce type de segmentation n'est pas encore présent dans la liste résultat => on l'ajoute\r\n                                listeSegmentationResultat.push(segmentationTravail);\r\n                            } else {\r\n                                //Ce type de segmentation est déjà présent dans la liste résultat => on met le pourcentage à jour\r\n                                listeSegmentationResultat[indexTrouve].pourcentage = listeSegmentationResultat[indexTrouve].pourcentage + segmentationTravail.pourcentage;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            return listeSegmentationResultat;\r\n        }\r\n\r\n        /**\r\n         * Retourne une config de donut selon le type de donut souhaité et les stats passés en paramètre\r\n         * @param typeDonutSouhaite\r\n         * @param statsRdvEtPortefeuille\r\n         */\r\n        public static getConfigDonutSelonType(typeDonutSouhaite: string, statsRdvEtPortefeuille: Modeles.ApplicationStats.IRdvPtf): Services.LibrairieD3.IConfigDonutD3 {\r\n            let configResultat: Services.LibrairieD3.IConfigDonutD3;\r\n\r\n            if (typeDonutSouhaite && statsRdvEtPortefeuille) {\r\n                switch (typeDonutSouhaite) {\r\n                    case Constantes.Application.DONUT_PME_ESI:\r\n                        //Segmentation Donut PME\r\n                        configResultat = ApplicationUtils.getConfigDonutD3(typeDonutSouhaite);\r\n                        configResultat.titre = Constantes.Application.GRAPHE_SEGMENTATION_TITRE_GROUPE;\r\n                        configResultat.nombreClients = statsRdvEtPortefeuille.nombreClientsPMEESI.toString();\r\n                        configResultat.listeDonnees = this.alimenterListeDonneesConfigDonut(statsRdvEtPortefeuille.listeSegmentationsPMEESI);\r\n                        break;\r\n                    case Constantes.Application.DONUT_PRO:\r\n                        //Segmentation Donut PRO\r\n                        configResultat = ApplicationUtils.getConfigDonutD3(typeDonutSouhaite);\r\n                        configResultat.titre = Constantes.Application.GRAPHE_SEGMENTATION_TITRE_CLIENT;\r\n                        configResultat.nombreClients = statsRdvEtPortefeuille.nombreClientsPro.toString();\r\n                        configResultat.listeDonnees = this.alimenterListeDonneesConfigDonut(statsRdvEtPortefeuille.listeSegmentationsPro);\r\n                        break;\r\n                    default:\r\n                    //Type de segmentation donut non prise en charge\r\n                }\r\n            }\r\n            return configResultat;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param typeDonutSouhaite\r\n         */\r\n        public static getConfigDonutD3(typeDonutSouhaite: string): Services.LibrairieD3.IConfigDonutD3 {\r\n            let configResultat: Services.LibrairieD3.IConfigDonutD3;\r\n            configResultat = <Services.LibrairieD3.IConfigDonutD3>{};\r\n            configResultat.donutChoisi = typeDonutSouhaite;\r\n            configResultat.degrade = Services.LibrairieD3.DEGRADE_DONUT.ROSE;\r\n            return configResultat;\r\n        }\r\n\r\n        /**\r\n         * Retourne les données affichées dans un donut à partir d'une liste de segmentation relationnelle\r\n         * @param listeSegmentation\r\n         */\r\n        public static alimenterListeDonneesConfigDonut(listeSegmentation: Array<Modeles.ApplicationStats.ISegmentationRelationnelle>): Array<LibrairieD3.IDonneeFluxD3> {\r\n            let listeDonneesResultat: Array<LibrairieD3.IDonneeFluxD3>;\r\n            if (listeSegmentation) {\r\n                listeDonneesResultat = [];\r\n                _.forEach(listeSegmentation, (seg: Modeles.ApplicationStats.ISegmentationRelationnelle) => {\r\n                    let section = <Services.LibrairieD3.IDonneeFluxD3>{};\r\n                    section.nom = seg.libelle;\r\n                    section.pourcentage = seg.pourcentage;\r\n                    listeDonneesResultat.push(section);\r\n                });\r\n            }\r\n            return listeDonneesResultat;\r\n        }\r\n\r\n        /**\r\n         *  Déduit si le navigateur est un Internet Explorer\r\n         */\r\n        public static isIE(): boolean {\r\n            return navigator.userAgent.indexOf(\"Trident\") !== -1;\r\n        }\r\n    }\r\n}","module Portefeuille.Services.Utils {\r\n    \"use strict\";\r\n    /**\r\n     * \r\n     */\r\n    export class DataUtils {\r\n\r\n        /**\r\n         * \r\n         * @param inStr\r\n         */\r\n        public static formatterPascaleCase(inStr: string): string {\r\n            return inStr.replace(/\\w+/g,\r\n                function (w: string) { return w[0].toUpperCase() + w.slice(1).toLowerCase(); });\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param code\r\n         */ \r\n        public static setONToBoolean(code: string): boolean {\r\n            return code === Constantes.Rest.CODE_O_TRUE;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param code\r\n         */\r\n        public static getEstLeaderDepuisCodeLeader(code: string) {\r\n            return code === Constantes.Application.CODE_LEADER_RELATION;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param indicClientProspect\r\n         */\r\n        public static getEstClientDepuisIndicateur(indicClientProspect: Modeles.Application.IIndicateur): boolean {\r\n            return indicClientProspect ? indicClientProspect.valeur === Constantes.Application.CHAINE_INDICATEUR_CLIENT : undefined;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param indicClientActif\r\n         */\r\n        public static getEstActifDepuisIndicateur(indicClientActif: Modeles.Application.IIndicateur): boolean {\r\n            return indicClientActif.valeur === Constantes.Application.CHAINE_INDICATEUR_ACTIF;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param code\r\n         */\r\n        public static setStrToActifInactif(code: string): string {\r\n            if (code && code !== \" \") {\r\n                return code === Constantes.Rest.CODE_STRING_ACTIF ? Constantes.Application.CHAINE_INDICATEUR_ACTIF : Constantes.Application.CHAINE_INDICATEUR_INACTIF;\r\n            } else {\r\n                return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param code\r\n         */\r\n        public static setStrToSansContrat(code: string): string {\r\n            if (code && code !== \" \") {\r\n                return code === Constantes.Rest.CODE_O_TRUE ? Constantes.Application.CHAINE_OUI : Constantes.Application.CHAINE_NON;\r\n            } else {\r\n                return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param code\r\n         */\r\n        public static setStrToLeader(code: string): string {\r\n            if (code && code !== \" \") {\r\n                return code === Constantes.Rest.CODE_O_TRUE ? Constantes.Application.CHAINE_OUI : Constantes.Application.CHAINE_NON;\r\n            } else {\r\n                return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param code\r\n         */\r\n        public static setStrToClientProspectVide(code: string): string {\r\n            switch (code) {\r\n                case Constantes.Rest.CODE_TYPE_PERSONNE_CLIENT:\r\n                    return Constantes.Application.CHAINE_INDICATEUR_CLIENT;\r\n                case Constantes.Rest.CODE_TYPE_PERSONNE_TIERS:\r\n                    return Constantes.Application.CHAINE_INDICATEUR_TIERS;\r\n                case Constantes.Rest.CODE_TYPE_PERSONNE_PROPECT_RESTREINT:\r\n                case Constantes.Rest.CODE_TYPE_PERSONNE_PROPECT_ENRICHI:\r\n                    return Constantes.Application.CHAINE_INDICATEUR_PROSPECT;\r\n                default:\r\n                    return Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n            }\r\n        }\r\n        \r\n        /**\r\n         * \r\n         * @param num\r\n         * @param size\r\n         */\r\n        public static lPad(num: number, size: number): string {\r\n            return _.padLeft(\"\" + num, size, \"0\");\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param val\r\n         */\r\n        public static booleanToOuiNon(val: boolean): string {\r\n            return val ? Constantes.Application.CHAINE_OUI : Constantes.Application.CHAINE_NON;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param val\r\n         */\r\n        public static formatDateIhm(val: string): string {\r\n            return moment(val, Constantes.Application.FORMAT_DATE_REST).format(Constantes.Application.FORMAT_DATE_IHM);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param val\r\n         * @param unite\r\n         */\r\n        public static formatMontant(val: number): string {\r\n            return val.toLocaleString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, String.fromCharCode(160));\r\n        }\r\n\r\n        /**\r\n         * utilisé pour afficher le filtre\r\n         * @param val\r\n         */\r\n        public static formatPourcent(val: number): string {\r\n            let texte: string;\r\n            texte = val.toFixed(2);\r\n            texte = texte.replace(/\\B(?=(\\d{3})+(?!\\d))/g, String.fromCharCode(160));\r\n            // supprime le .00\r\n            let pos: number;\r\n            if ((pos = texte.indexOf(\".00\")) > -1) {\r\n                texte = texte.substring(0, pos);\r\n            }\r\n            texte = texte.replace(\".\", \",\");\r\n            return texte;\r\n        }\r\n\r\n        /**\r\n         * retitue un nombre entier au format du pays locale\r\n         * @param val Valeur à affiché\r\n         */\r\n        public static formatNombre(val: number): string {\r\n            return val.toLocaleString();\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param dateRest\r\n         */\r\n        public static strDateRestToDate(dateRest: string): Date {\r\n            let dateMonent: moment.Moment;\r\n            let dateFormater: Date;\r\n            dateFormater = null;\r\n            if (dateRest && dateRest.length > 0) {\r\n                dateMonent = (dateRest.length > 15) ?\r\n                    moment(dateRest.substr(0, 16), \"YYYY-MM-DD-HH.mm\") :\r\n                    moment(dateRest, \"YYYY-MM-DD\");\r\n                if (dateMonent.isValid()) {\r\n                    dateFormater = dateMonent.toDate();\r\n                }\r\n            }\r\n            return dateFormater;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param codeCivilite\r\n         */\r\n        public static determinerLibelleCivilite(codeCivilite: string): string {\r\n            return (codeCivilite === \"1\" || codeCivilite === \"2\") ?\r\n                \"ME\" : (codeCivilite === \"3\" ? \"MR\" : \"\");\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param dateFormatString\r\n         */\r\n        public static formaterDateValide(dateFormatString: string): Date {\r\n            return moment(dateFormatString, \"MM/YYYY\").isValid() ?\r\n                moment(dateFormatString, \"MM/YYYY\").toDate() : null;\r\n        }\r\n\r\n\r\n        public static getTexteCA(client: Modeles.Application.IClient, code: String): string {\r\n            let texte: string = \"\";\r\n            let listeIndic: Array<Modeles.Application.IIndicateur> = _.where(client.listeIndicateurs, { \"code\": code });\r\n            if (listeIndic && listeIndic.length > 0) {\r\n                let indic: Modeles.Application.IIndicateur = listeIndic[0];\r\n                if (indic.valeurNumber !== undefined &&\r\n                    indic.valeurNumber !== null &&\r\n                    indic.valeurNumber !== Number.POSITIVE_INFINITY &&\r\n                    indic.valeurNumber !== Number.NEGATIVE_INFINITY) {\r\n                    texte = `${indic.valeurNumber.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")} k€`;\r\n                } else {\r\n                    texte = Constantes.Application.CHAINE_INDICATEUR_NON_CONNU;\r\n                }\r\n            }\r\n            return texte;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param client\r\n         * @param code\r\n         */\r\n        public static getTexteDate(client: Modeles.Application.IClient, code: string): string {\r\n            let texte: string = \"\";\r\n            let listeIndic: Array<Modeles.Application.IIndicateur> = _.where(client.listeIndicateurs, { \"code\": code });\r\n            if (listeIndic && listeIndic.length > 0) {\r\n                let indic: Modeles.Application.IIndicateur = listeIndic[0];\r\n                if (indic.valeurNumber !== undefined &&\r\n                    indic.valeurNumber !== null &&\r\n                    indic.dateMaj !== null) {\r\n                    texte = moment(indic.dateMaj).format(\"MM/YYYY\");\r\n                }\r\n            }\r\n            return texte;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param nombre\r\n         */\r\n        public static formaterMontantkiloText(nombre: number): string {\r\n            return `${nombre.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, String.fromCharCode(160))} k€`;\r\n        }\r\n    }\r\n}","declare module Portefeuille.Modeles.Rest.AgentV2.gestionAffectation {\r\n    export interface IGestionAffectation {\r\n        /**\r\n         * Code Etablissement de l’agent connecté.\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * Code de l'agent connecté.\r\n         */\r\n        codeAgent: string;\r\n        /**\r\n         * Identifiant Elément de Structure de l’agent connecté.\r\n         */\r\n        identifiantEDS: number;\r\n        /**\r\n         * Code de l'agent à affecter.\r\n         */\r\n        codeAgentAffectation: number;\r\n        listeGestionAffectationAgent: Array<IGestionAffectationAgent>;\r\n        listeGestionAffectationAgentAvM: Array<IGestionAffectationAgentAvM>;\r\n    }\r\n\r\n    export interface IGestionAffectationAgent {\r\n        /**\r\n         * Identifiant interne du Poste Fonctionnel de l'agent affecté.\r\n         */\r\n        identifiantEDSAffectation: number;\r\n        /**\r\n         * Identifiant interne de l'EDS de rattachement temporaire de l'agent\r\n         */\r\n        identifiantEDSRattachement: number;\r\n        /**\r\n         * Libellé de l'EDS de rattachement temporaire de l'agent\r\n         */\r\n        libelleEDSRattachement: string;\r\n        /**\r\n         * Il détermine le type d'affectation d'un agent à un Elément de Structure. Cette typologie spécifique à chaque Etablissement.\r\n         * Valeurs :\r\n         * - 'AG' : AFFECTATION GEOGRAPHIQUE\r\n         * - 'MA' : MULTI AFFECTATION\r\n         * - 'MN' : MANAGEMENT\r\n         * - 'R1' : RENFORT COMMERCIAL\r\n         * - 'R2' : REMPLACEMENT FORMATION\r\n         * - 'R3' : REMPLACEMENT CONGES\r\n         * - 'R4' : REMPLACEMENT MALADIE\r\n         */\r\n        typeAffectation: string;\r\n        /**\r\n         * Il détermine la fonction (métier) associée au poste fonctionnel. Cette typologie est spécifique à chaque Etablissement.   \r\n         * Exemples :\r\n         * - 072 : CHARGE DE CLIENTELE DE NIVEAU 2\r\n         * - 081 : AGENT COMMERCIAL\r\n         * - 082 : RESPONSABLE DEPARTEMENT ORGANISATION\r\n         * etc ...\r\n         */\r\n        typeFonctionAgentAffectation: string;\r\n        /**\r\n         * Permet d'indiquer si l'agent affecté occupe un poste fonctionnel en qualité de titulaire, remplaçant, suppléant ou au titre d'une affectation temporaire.\r\n         * Valeurs :\r\n         * - 'T' : Titulaire\r\n         * - 'R' : Remplaçant\r\n         * - 'S' : Suppléant\r\n         * - 'A' : Affectation temporaire\r\n         */\r\n        codeQualiteAgentAffectation: string;\r\n        /**\r\n         * Libellé de désignation de la fonction (métier) associée à un poste fonctionnel.\r\n         * ATTENTION : il ne doit pas y avoir dans ce libellé de caractères spéciaux (é,à,ç,ô, etc...).\r\n         */\r\n        libFonctionAgentAffectation: string;\r\n        /**\r\n         * Il détermine le rang du jour dans la semaine.\r\n         * Valeurs :\r\n         * - ' '\r\n         * - '1' : Lundi\r\n         * - '2' : Mardi\r\n         * - '3' : Mercredi\r\n         * - '4' : Jeudi\r\n         * - '5' : Vendredi\r\n         * - '6' : Samedi\r\n         * - '7' : Dimanche\r\n         */\r\n        numeroJourSemaine: string;\r\n        /**\r\n         * Il détermine la plage horaire d'une journée pour l'agent affecté à un poste fonctionnel donné. Ce type est associé au début de la journée ou période. \r\n         * Valeurs :\r\n         * - 'J' : Journée\r\n         * - 'M' : Matin\r\n         * - 'A' : Après-midi\r\n         */\r\n        typeHoraireDebutPeriode: string;\r\n        /**\r\n         * Il détermine la plage horaire d'une journée pour l'agent affecté à un poste fonctionnel donné. Ce type est associé à la fin de la journée ou période. \r\n         * Valeurs :\r\n         * - 'J' : Journée\r\n         * - 'M' : Matin\r\n         * - 'A' : Après-midi\r\n         */\r\n        typeHoraireFinPeriode: string;\r\n        /**\r\n         * Date de début d'affectation de l'agent sur un lieu de travail, un poste fonctionnel ...\r\n         * Date au format JJMMAAAA\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateDebutPeriodeAffectation: string;\r\n        /**\r\n         * Date de fin d'affectation de l'agent sur un lieu de travail, un poste fonctionnel ...\r\n         * Date au format JJMMAAAA\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateFinPeriodeAffectation: string;\r\n        /**\r\n         * Libellé décrivant le motif de l'affectation de l'agent.\r\n         */\r\n        libelleMotifAffectation: string;\r\n        /**\r\n         * Date de modification de l'affectation au format JJMMAAAA\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateModificationAffectation: string;\r\n        /**\r\n         * Code civilité de l'agent affecté.\r\n         * Valeurs :\r\n         * - '1' : MME\r\n         * - '2' : MLLE\r\n         * - '3' : M\r\n         */\r\n        codeCiviliteAgentAffectation: string;\r\n        /**\r\n         * Nom de famille (ou patronymique) de l'agent affecté.\r\n         */\r\n        nomFamilleAgentAffectation: string;\r\n        /**\r\n         * Prénom de l'agent affecté.\r\n         */\r\n        prenomAgentAffectation: string;\r\n        /**\r\n         * Libellé de désignation du type d'affectation de l'agent.\r\n         */\r\n        libelleTypeAffectation: string;\r\n        /**\r\n         * Code Agent à l'origine de la création de l'affectation.\r\n         */\r\n        codeAgentCreation: string;\r\n        /**\r\n         * Code civilité de l'agent à l'origine de la création de l'affectation.\r\n         * Valeurs :\r\n         * - '1' : MME\r\n         * - '2' : MLLE\r\n         * - '3' : M\r\n         */\r\n        codeCiviliteAgentCreation: string;\r\n        /**\r\n         * Nom de famille (ou patronymique) de l'agent à l'origine de la création de l'affectation.\r\n         */\r\n        nomFamilleAgentCreation: string;\r\n        /**\r\n         * Prénom de l'agent à l'origine de la création de l'affectation.\r\n         */\r\n        prenomAgentCreation: string;\r\n        /**\r\n         * Numéro de téléphone associé à une adresse, et concernant un particulier ou un lieu d'activité pour un professionnel.\r\n         * Pour un particulier, il s'agit dans la plupart des cas, du numéro de téléphone du domicile.\r\n         */\r\n        numeroTelephoneAdresse: string;\r\n        /**\r\n         * Date de création de l'affectation au format JJMMAAAA\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateCreationAffectation: string;\r\n        /**\r\n         * Numéro de fax du particulier ou du lieu d'activité pour un professionnel.\r\n         * Pour un particulier, il s'agit dans la plupart des cas, du numéro de fax du domicile.\r\n         */\r\n        numeroFax: string;\r\n        /**\r\n         * La ligne 4 permet d'identifier la voie de destination : NUMERO-LIBELLE DE LA VOIE\r\n         * Elle peut comprendre :\r\n         *  - Le numéro dans la voie, type et nom de voie\r\n         *  - Le nom d'une résidence ou d'un ensemble immobilier qui ne peut être assimilé à une commune ou à un lieu-dit\r\n         *  - Un service X\r\n         *  - Une boîte postale\r\n         *  - Un numéro de CEDEX\r\n         */\r\n        ligne4Adresse: string;\r\n        /**\r\n         * La ligne 6 permet d'identifier la destination : CODE POSTAL et LOCALITE DE DESTINATION ou CODE CEDEX et LIBELLE CEDEX\r\n         * Elle peut comprendre :\r\n         * - Le numéro de code postal et nom de la localité\r\n         * - Le numéro de code spécifique et nom de la localité complétés éventuellement par la mention CEDEX\r\n         */\r\n        ligne6Adresse: string;\r\n        /**\r\n         * Heures et minutes correspondant à l'heure d'ouverture de l'EDS le matin.\r\n         */\r\n        heureOuvertureMatinEDS: number;\r\n        /**\r\n         * Heures et minutes correspondant à l'heure d'ouverture de l'EDS l'après-midi. Non renseigné si pas de fermeture le midi.\r\n         */\r\n        heureOuvertureApresMidiEDS: number;\r\n        /**\r\n         * Heures et minutes correspondant à l'heure de fermeture de l'EDS le matin. Non renseigné si pas de fermeture le midi.\r\n         */\r\n        heureFermetureMatinEDS: number;\r\n        /**\r\n         * Heures et minutes correspondant à l'heure de fermeture de l'EDS le soir.\r\n         */\r\n        heureFermetureApresMidiEDS: number;\r\n        /**\r\n         * Dénomination courte du type de l'élément de structure de rattachement.\r\n         */\r\n        libelleCourtTypeEDSRattachement: string;\r\n    }\r\n\r\n    export interface IGestionAffectationAgentAvM {\r\n        /**\r\n         * Identifiant interne du Poste Fonctionnel affecté à l'agent.\r\n         */\r\n        identifiantEDSAffectationAvM: number;\r\n        /**\r\n         * Identifiant interne de l'EDS de rattachement du Poste Fonctionnel affecté à l’agent.\r\n         */\r\n        identifiantEDSRattachementAvM: number;\r\n        /**\r\n         * Il détermine le rang du jour dans la semaine.\r\n         * Valeurs :\r\n         * - '0'\r\n         * - '1' : Lundi\r\n         * - '2' : Mardi\r\n         * - '3' : Mercredi\r\n         * - '4' : Jeudi\r\n         * - '5' : Vendredi\r\n         * - '6' : Samedi\r\n         * - '7' : Dimanche\r\n         */\r\n        numeroJourSemaineAvM: string;\r\n        /**\r\n         * Il détermine la plage horaire d'une journée pour l'agent affecté à un poste fonctionnel donné. Ce type est associé au début de la journée ou période. \r\n         * Valeurs :\r\n         * - 'J' : Journée\r\n         * - 'M' : Matin\r\n         * - 'A' : Après-midi\r\n         */\r\n        typeHoraireDebutPeriodeAvM: string;\r\n        /**\r\n         * Il détermine la plage horaire d'une journée pour l'agent affecté à un poste fonctionnel donné. Ce type est associé à la fin de la journée ou période. \r\n         * Valeurs :\r\n         * - 'J' : Journée\r\n         * - 'M' : Matin\r\n         * - 'A' : Après-midi\r\n         */\r\n        typeHoraireFinPeriodeAvM: string;\r\n        /**\r\n         * Date de début d'affectation de l'agent sur un lieu de travail, un poste fonctionnel ...\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateDebutPeriodeAffectationAvM: string;\r\n        /**\r\n         * Date de fin d'affectation de l'agent sur un lieu de travail, un poste fonctionnel ...\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateFinPeriodeAffectationAvM: string;\r\n        /**\r\n         * Libellé décrivant le motif de l'affectation de l'agent.\r\n         */\r\n        libelleMotifAffectationAvM: string;\r\n        /**\r\n         * Date de modification de l'affectation.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateModificationAffectationAvM: string;\r\n        /**\r\n         * Il détermine le type d'affectation d'un agent à un Elément de Structure. Cette typologie spécifique à chaque Etablissement.\r\n         * Valeurs :\r\n         * - 'AG' : AFFECTATION GEOGRAPHIQUE\r\n         * - 'MA' : MULTI AFFECTATION\r\n         * - 'MN' : MANAGEMENT\r\n         * - 'R1' : RENFORT COMMERCIAL\r\n         * - 'R2' : REMPLACEMENT FORMATION\r\n         * - 'R3' : REMPLACEMENT CONGES\r\n         * - 'R4' : REMPLACEMENT MALADIE\r\n         */\r\n        typeAffectationAvM: string;\r\n        /**\r\n         * Date de création de l'affectation au format JJMMAAAA\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateCreationAffectationAvM: string;\r\n        /**\r\n         * Heures et minutes correspondant à l'heure d'ouverture de l'EDS le matin.\r\n         */\r\n        heureOuvertureMatinEDSAvM: number;\r\n        /**\r\n         * Heures et minutes correspondant à l'heure d'ouverture de l'EDS l'après-midi. Non renseigné si pas de fermeture le midi.\r\n         */\r\n        heureOuvertureApresMidiEDSAvM: number;\r\n        /**\r\n         * Heures et minutes correspondant à l'heure de fermeture de l'EDS le matin. Non renseigné si pas de fermeture le midi.\r\n         */\r\n        heureFermetureMatinEDSAvM: number;\r\n        /**\r\n         * Heures et minutes correspondant à l'heure de fermeture de l'EDS le soir.\r\n         */\r\n        heureFermetureApresMidiEDSAvM: number;\r\n    }\r\n\r\n    /**\r\n     * Interface représentant un objet pour la méthode GET\r\n     */\r\n    export interface IGestionAffectationQuery {\r\n        codeEtablissement: string;\r\n        codeAgentAffectation: number;\r\n        dateDebutPeriodeAffectation: string;\r\n    }\r\n};","declare module Portefeuille.Modeles.Rest.AgentV2.recherche {\r\n    export interface IRechercheAgent {\r\n        listeAgents: Array<IAgent>;\r\n    }\r\n\r\n    export interface IAgent {\r\n        /**\r\n         * Identifiant d'un Etablissement du GCE.\r\n         * Correspond au code Banque sous lequel une Caisse ou un Etablissement du réseau CE est répertoriée par la Banque de France.\r\n         * \r\n         * Exemples :\r\n         * 17515 = CE Ile de France\r\n         * 16275 = CE Nord France Europe\r\n         * 43199 = Crédit Foncier de France (CFF)\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * Numéro d'identification interne d'un élément de structure d'un Etablissement du GCE.\r\n         * Numéro chronologique attribué par le système : référence unique dans MYSYS (identifiant interne).\r\n         */\r\n        identifiantElementStructure: number;\r\n        /**\r\n         * Référence externe d'un élément de structure dans un Etablissement du GCE.\r\n         * Référence connue de l'Etablissement.\r\n         * Identifiant défini en fonction du type d'élément de structure.\r\n         */\r\n        referenceElementStructure: number;\r\n        /**\r\n         * Désignation décrivant l'élément de structure.   \r\n         * Cette désignation est construite par concaténation du libellé long du type d'EDS et de la désignation de l'EDS.              \r\n         * Sauf si l'EDS est un poste fonctionnel (c'est le cas pour rechercheAgent),  on trouve alors le Nom+Prénom de l'Agent titulaire du PF précédé de la civilité (Mr...)\r\n         */\r\n        designationAgent: string;\r\n        /**\r\n         * Cette rubrique décrit la date de début de validité d'un Elément de Structure.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateDebutValiditeAgent: string;\r\n        /**\r\n         * Cette rubrique décrit la date de fin de validité d'un Elément de Structure.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateFinValiditeAgent: string;\r\n        /**\r\n         * Détermine la fonction (métier) associée au poste fonctionnel.\r\n         * Typologie spécifique à chaque Etablissement.\r\n         * \r\n         * Exemples :\r\n         * 072 / CHARGE DE CLIENTELE DE NIVEAU 2\r\n         * 081 / AGENT COMMERCIAL\r\n         * 082 / RESPONSABLE DEPARTEMENT ORGANISATION\r\n         */\r\n        typeFonction: string;\r\n        /**\r\n         * Libellé de désignation d'une fonction (métier) associée à un poste fonctionnel.\r\n         */\r\n        libelleFonction: string;\r\n        /**\r\n         * Numéro d'identification de l'élément de structure hiérarchiquement supérieur à un élément donné.\r\n         */\r\n        identifiantEDSHierarchique: number;\r\n        /**\r\n         * Référence externe de l'EDS hiérarchiquement supérieur.\r\n         */\r\n        referenceEDSHierarchique: number;\r\n        /**\r\n         * Indique le type organisationnel de l'EDS hiérarchiquement supérieur.\r\n         * Typologie propre à chaque Etablissement du GCE.\r\n         * Certains types d'EDS sont INVARIANTS dans le SI et sont communs à tous les Etablissements :\r\n         * '008' Siège\r\n         * '003' Agence (Point de vente)\r\n         * '010' GAB\r\n         * '020' Guichet (au sens arrêté de caisse)\r\n         * '001' Poste fonctionnel\r\n         * '002' Service\r\n         * '009' Entité Administrative (Guichet interbancaire)\r\n         * Attention : un type d'EDS invariant peut avoir un libellé spécifique par Etablissement.\r\n         * Exemple : type '003' = agence / point de vente\r\n         */\r\n        typeEDSHierarchique: string;\r\n        /**\r\n         * Dénomination du type de l'élément de structure.\r\n         */\r\n        libelleTypeEDSHierarchique: string;\r\n        /**\r\n         * Désignation décrivant l'élément de structure de rattachement (niveau \"hiérarchique\" supérieur).\r\n         */\r\n        libelleEDSHierarchique: string;\r\n        /**\r\n         * Numéro d'identification d'un agent au sein d'un Etablissement du réseau GCE.\r\n         * Correspond à un individu ou à un acteur générique.\r\n         * Référence unique dans MYSYS.\r\n         */\r\n        identifiantAgent: string;\r\n        /**\r\n         * Détermine si l'agent est générique ou nominatif.\r\n         * Exemple d'agent générique : stagiaire, dépannage, ...\r\n         * \r\n         * Valeurs possibles :\r\n         * - 'O' : Agent générique\r\n         * - 'N' : Agent nominatif\r\n         * - ' ' : Agent générique et Agent nominatif\r\n         */\r\n        indicateurAgentNonNominatif: string;\r\n        /**\r\n         * Indique si l'agent possède le profil de façon personnalisée.\r\n         * \r\n         * Valeurs possibles :\r\n         * - 'F' : ?\r\n         * - 'P' : ?\r\n         */\r\n        typePersonnalisation: string;\r\n        /**\r\n         * Indicateur existence affectation temporaire.\r\n         */\r\n        indicateurAffectationTemporaire: string;\r\n        /**\r\n         * Indicateur non éligibilité prise RDV.\r\n         */\r\n        indicateurNonElligibiliteRDV: string;\r\n    }\r\n\r\n    export interface IZoneDeTravail {\r\n        /**\r\n         * Code indiquant si d'autres résultats sont disponibles (cas des Qr avec pagination).\r\n         */\r\n        codeSuiteListe: string;\r\n    }\r\n\r\n    /**\r\n     * Interface représentant un objet pour la méthode GET\r\n     */\r\n    export interface IRechercheAgentQuery {\r\n        codeEtablissement: string;\r\n        typeRecherche: number;\r\n        codeAction: string;\r\n        nomAgentDebutPlage?: string;\r\n        identifiantAgent?: string;\r\n        identifiantEDSRattachement?: number;\r\n        groupeFonction?: string;\r\n    }\r\n};","\"use strict\";\r\nmodule Portefeuille.Modeles.Tableaux.Comparator {\r\n\r\n    export class ClientComparator implements MyWay.UI.IMwTableComparator {\r\n\r\n        constructor(private $filter: ng.IFilterService, private $parse: ng.IParseService) {\r\n        }\r\n\r\n        public comparatorFn(item: Object, criterion: string, columnDescriptor: MyWay.UI.ImwTableColumnOptions): boolean {\r\n            let client: Modeles.Application.IClient = <Modeles.Application.IClient>item;\r\n            if (client) {\r\n                // on construit une chaine de caracteres afin de retranscrire ce qui est présent dans la colonne\r\n                let texteCompare: string = \"\";\r\n                texteCompare += client.nom;\r\n                //texteCompare += clientTest.nomRelationEconomique; // Inutile, le filtre existe déja au travers d'une liste box\r\n                //if (client.estClient != undefined && !client.estClient) {\r\n                //    texteCompare += Constantes.Application.CHAINE_INDICATEUR_PROSPECT;\r\n                //}\r\n                //if (client.estActifRenseigne && client.estActif) {\r\n                //    texteCompare += Constantes.Application.CHAINE_INDICATEUR_ACTIF;\r\n                //}\r\n                //if (client.estActifRenseigne && !client.estActif) {\r\n                //    texteCompare += Constantes.Application.CHAINE_INDICATEUR_INACTIF;\r\n                //}\r\n                return (texteCompare.toString().toLowerCase().indexOf(criterion.toLowerCase()) !== -1);\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}","\"use strict\";\r\nmodule Portefeuille.Modeles.Tableaux.Comparator {\r\n\r\n    export class DateComparator implements MyWay.UI.IMwTableComparator {\r\n\r\n        constructor(private $filter: ng.IFilterService, private $parse: ng.IParseService) {\r\n        }\r\n\r\n        public comparatorFn(item: Object, criterion: string, columnDescriptor: MyWay.UI.ImwTableColumnOptions): boolean {\r\n            var getter = this.$parse(columnDescriptor.bind);\r\n            var value = getter(item);\r\n            if (!angular.isDate(value)) {\r\n                return false;\r\n            }\r\n            var valueFormated = this.$filter(\"date\")(value, \"dd/MM/yyyy\");\r\n            return (valueFormated.toString().toLowerCase().indexOf(criterion) !== -1);\r\n        }\r\n    }\r\n}","\"use strict\";\r\nmodule Portefeuille.Modeles.Tableaux.Comparator {\r\n\r\n    export class RelationComparator implements MyWay.UI.IMwTableComparator {\r\n\r\n        constructor(private $filter: ng.IFilterService, private $parse: ng.IParseService) {\r\n        }\r\n\r\n        public comparatorFn(item: Object, criterion: string, columnDescriptor: MyWay.UI.ImwTableColumnOptions): boolean {\r\n            let relationTest: Modeles.Application.IRelationEconomique = <Modeles.Application.IRelationEconomique>item;\r\n            if (relationTest) {\r\n                // on construit une chaine de caracteres afin de retranscrire ce qui est présent dans la colonne\r\n                let texteCompare: string = \"\";\r\n                texteCompare += relationTest.nom;\r\n                texteCompare += relationTest.id;\r\n                texteCompare += relationTest.relationEconomique;\r\n                return (texteCompare.toString().toLowerCase().indexOf(criterion.toLowerCase()) !== -1);\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}","declare module Portefeuille.Modeles.Rest.PortefeuillCorporateV1.statFluxMouvementFinancier {\r\n    export interface IStatFluxMvtFinancier {\r\n        infoFluxMvtFinancier: IInfoFluxMvtFinancier;\r\n    }\r\n\r\n    export interface IStatFluxMvtFinancierParametres {\r\n        /**\r\n         * Code Banque sous lequel l'établissement est répertorié par la Banque de France.\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * Numéro d'identification de l'élément de structure.\r\n         */\r\n        identifiantElementStructure: number;\r\n        /**\r\n         * Liste numéro de portefeuille.\r\n         */\r\n        listeIdentifiantPortefeuille: Array<number>;\r\n        /**\r\n         * Liste identifiant de la relation économique.\r\n         */\r\n        listeIdentifiantRelationEco: Array<number>;\r\n    }\r\n\r\n    export interface IInfoFluxMvtFinancier {\r\n        /**\r\n         * Code Banque sous lequel l'établissement est répertorié par la Banque de France.\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * Numéro d'identification de l'élément de structure.\r\n         */\r\n        identifiantElementStructure: number;\r\n        /**\r\n         * Somme des flux crediteurs des clients de l'année N.\r\n         */\r\n        fluxCrediteursAnneeN: number;\r\n        /**\r\n         * Somme des flux débiiteurs des clients de l'année N.\r\n         */\r\n        fluxDebiteursAnneeN: number;\r\n        /**\r\n         * Date début de calcul flux année N.\r\n         */\r\n        dateDebFluxAnneeN: string;\r\n        /**\r\n         * Date fin de calcul flux année N.\r\n         */\r\n        dateFinFluxAnneeN: string;\r\n        /**\r\n         * Somme des flux crediteurs des clients de l'année N-1.\r\n         */\r\n        fluxCrediteursNMoins1: number;\r\n        /**\r\n         * Somme des flux debiiteurs des clients de l'année N-1.\r\n         */\r\n        fluxDebiteursNMoins1: number;\r\n        /**\r\n         * Date début de calcul flux année N-1.\r\n         */\r\n        dateDebFluxAnneeNMoins1: string;\r\n        /**\r\n         * Date fin de calcul flux année N-1.\r\n         */\r\n        dateFinFluxAnneeNMoins1: string;\r\n        /**\r\n         * Taux évolution flux créditeurs\r\n         */\r\n        tauxEvolutionFluxCrediteurs: number;\r\n        /**\r\n         * Taux évolution flux débiteurs\r\n         */\r\n        tauxEvolutionFluxDebiteurs: number;\r\n    }\r\n\r\n};","declare module Portefeuille.Modeles.Rest.PortefeuillCorporateV1.statPortefeuille {\r\n    export interface IStatPortefeuilleParametres {\r\n        /**\r\n         * Code Banque sous lequel l'établissement est répertorié par la Banque de France.\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * Numéro d'identification de l'élément de structure Suivi Par.\r\n         */\r\n        identifiantEds: number;\r\n        /**\r\n         * Liste numéro de portefeuille.\r\n         */\r\n        listeIdentifiantPortefeuille: Array<number>;\r\n    }\r\n\r\n    export interface IPortefeuilleRdv {\r\n        /**\r\n         * Nombre de clients total (non prospects).\r\n         */\r\n        nombreClients: number;\r\n        /**\r\n         * Nombre de cliens actifs.\r\n         */\r\n        nombreClientsActifs: number;\r\n        /**\r\n         * Nombre de prospects.\r\n         */\r\n        nombreProspects: number;\r\n        /**\r\n         * Nombre de relations économiques (toutes catégories confondues).\r\n         */\r\n        nombreRelationsEconomiques: number;\r\n        /**\r\n         * Nombre de clients de type Entreprises - ESI.\r\n         */\r\n        nombreClientsTypePmeEsi: number;\r\n        /**\r\n         * Nombre de clients de type Entreprises - ESI. Dont clients PE et PEES\r\n         */\r\n        nombreClientsTypePEetPEES: number;\r\n        /**\r\n         * Nombre de clients de type Entreprises - ESI. Dont clients ME et MEES\r\n         */\r\n        nombreClientsTypeMEetMEES: number;\r\n        /**\r\n         * Nombre de clients de type Entreprises - ESI. Dont clients GE et GEES\r\n         */\r\n        nombreClientsTypeGEetGEES: number;\r\n        /**\r\n         * Nombre de clients de type PRO (EI inclus).\r\n         */\r\n        nombreClientsTypeProEi: number;\r\n        /**\r\n         * Nombre de clients de type Autres (ni Entreprise - ESI, PRO, EI).\r\n         */\r\n        nombreClientsTypeAutre: number;\r\n        /**\r\n         * Nombre de rendez vous réalisés pour des prospects depuis le 1er janvier de l'année en cours.\r\n         */\r\n        nbRdvProspectRealiseAnneeCivile: number;\r\n        /**\r\n         * Nombre de prospects qui ont un RDV réalisé (donc avec un CRE) depuis le 1er janvier de l'année en cours.\r\n         */\r\n        nbProspectsVusAnneeEncours: number;\r\n        /**\r\n         * Nombre de relations éco dont le leader est client (non prospect) qui ont un RDV validé (donc avec un CRE) depuis le 1er janvier de l'année en cours.\r\n         */\r\n        nbRelEcoClientVuesAnneeEncours: number;\r\n        /**\r\n         * Nombre de rendez-vous réalisés sur l'année en cours (depuis le 1er janvier) pour\r\n         * les relations économiques de type \"clients\" (dont le leader est client) / nb de relations  économiques de type \"clients\" (dont le leader est client) au jour J.\r\n         */\r\n        tauxDeVisite: number;\r\n        /**\r\n         * Le nombre total de clients qui ont une segmentation calculée dans le(s) portefeuille(s).\r\n         */\r\n        nombreTotalClientsSegmentation: number;\r\n        /**\r\n         * Nombre de rendez-vous client.\r\n         */\r\n        nbRdvClient: number;\r\n        /**\r\n         * Nombre de client vus.\r\n         */\r\n        nbClientsVus: number;\r\n        /**\r\n         * Nombre de Clients non équipés\r\n         */\r\n        nbClientsNonEquipe: number;\r\n        /**\r\n         * Nombre Clients PE et PEES\r\n         */\r\n        nbClientsPePees: number;\r\n        /**\r\n         * Nombre Clients ME et MEES\r\n         */\r\n        nbClientsMeMees: number;\r\n        /**\r\n         * Nombre Clients GE et GEES\r\n         */\r\n        nbClientsGeGees: number;\r\n        /**\r\n         * Nombre de Clients avec Produit Service\r\n         */\r\n        nbClientsAvecProduitService: number;\r\n        /**\r\n         * Nombre de Clients sans contrat et prospect.\r\n         */\r\n        nbClientsSansContratEtProspect: number;\r\n    }\r\n\r\n    export interface ISegmentationRelationnellePmeEsi {\r\n        /**\r\n         * Valeurs : \r\n         * - A_ACQU : A Acquérir  \r\n         * - A_DEVP : A Développer\r\n         * - A_FIDE  : A Fidéliser \r\n         * - A_GERE : A Gérer     \r\n         * - A_PRES : A Préserver \r\n         * - A_SURV : A Surveiller\r\n         * - NONAFF : Non concerné\r\n         */\r\n        codeSegmentation: string;\r\n        /**\r\n         * Libellé segmentation.\r\n         * Valeurs : A Acquérir, A Développer, A Fidéliser, A Gérer, A Préserver, A Surveiller, Non Concerné.\r\n         */\r\n        libelleSegmentation: string;\r\n        /**\r\n         * Pourcentage nombre de clients des portefeuilles dans segmentation.\r\n         */\r\n        pourcentageNombreDeClients: number;\r\n    }\r\n\r\n    export interface IStatPortefeuille {\r\n        portefeuilleRdv: IPortefeuilleRdv;\r\n        listeSegmentationRelationnellePmeEsi: Array<ISegmentationRelationnellePmeEsi>;\r\n        listeSegmentationRelationnellePro: Array<ISegmentationRelationnellePro>;\r\n    }\r\n\r\n    export interface ISegmentationRelationnellePro {\r\n        /**\r\n         * Valeurs :\r\n         * - SCI : Société Civile Immobilière\r\n         * - MED* : Médium PRO Faiblement ou non Capté\r\n         * - MED** : Médium PRO Partiellement Capté\r\n         * - MED*** : Médium PRO Fortement Capté\r\n         * - LRG* : Large PRO Faiblement ou non Capté\r\n         * - LRG** : Large PRO Partiellement Capté \r\n         * - LRG*** : Large PRO Fortement Capté\r\n         * - MED_ER : Médium PRO Entrée en Relation\r\n         * - MED_RK : Médium PRO Risqué\r\n         * - LRG_ER : Large PRO Entrée en Relation\r\n         * - RG_RK : Large PRO Risqué\r\n         * - SML* : Small PRO Faiblement ou non Capté\r\n         * - SML** : Small PRO Partiellement Capté\r\n         * - SML*** : Small PRO Fortement Capté\r\n         * - PLR_ER : PLR Entrée en Relation\r\n         * - PLR_RK : PLR Risqué\r\n         * - SML_ER : Small PRO Entrée en Relation \r\n         * - SML_RK : Small PRO Risqué\r\n         * - PLR* : PLR Faiblement ou non Capté\r\n         * - PLR** : PLR Partiellement Capté\r\n         * - PLR*** : PLR Fortement Capté \r\n         * - noncalNon : Calculé \r\n         * - NONAFF : Non Concerné\r\n         */\r\n        codeSegmentation: string;\r\n        /**\r\n         * Libellé segmentation.\r\n         * Valeurs :\r\n         * Société Civile Immobilière, Médium PRO Faiblement ou non Capté, Médium PRO Fortement Capté ...\r\n         */\r\n        libelleSegmentation: string;\r\n        /**\r\n         * Pourcentage nombre de clients des portefeuilles dans segmentation.\r\n         */\r\n        pourcentageNombreDeClients: number;\r\n    }\r\n};","declare module Portefeuille.Modeles.Rest.PortefeuillCorporateV1.statRentabilite {\r\n    export interface IStatRentabiliteParametres {\r\n        /**\r\n         * Code Banque sous lequel l'établissement est répertorié par la Banque de France.\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * Numéro d'identification de l'élément de structure.\r\n         */\r\n        identifiantElementStructure: number;\r\n        /**\r\n         * Liste numéro de portefeuille.\r\n         */\r\n        listeIdentifiantPortefeuille: Array<number>;\r\n        /**\r\n         * Liste identifiant de la relation économique.\r\n         */\r\n        listeIdentifiantRelationEco: Array<number>;\r\n        /**\r\n         * Liste numéro de personne.\r\n         */\r\n        listeIdentifiantPersonne: Array<number>;\r\n    }\r\n\r\n    export interface IStatRentabilite {\r\n        infoPnb: IInfoPnb;\r\n    }\r\n\r\n    export interface IInfoPnb {\r\n        /**\r\n         * Code Banque sous lequel l'établissement est répertorié par la Banque de France.\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * Numéro d'identification de l'élément de structure.\r\n         */\r\n        identifiantElementStructure: number;\r\n        /**\r\n         * Somme de tous les PNB des clients des portefeuilles au 31/12 de l'année N-1\r\n         */\r\n        pnb3112AnneeNMoins1: number;\r\n        /**\r\n         * Date début de calcul du PNB au 31/12 de l'année N-1.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateDebPnb3112AnneeNMoins1: string;\r\n        /**\r\n         * Date arrêtée de calcul du PNB au 31/12 de l'année N-1.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateFinPnb3112AnneeNMoins1: string;\r\n        /**\r\n         * Somme de tous les PNB des clients des portefeuilles des 12 mois glissants de l'année N-1.\r\n         */\r\n        pnb12DerniersMoisGlissNMoins1: number;\r\n        /**\r\n         * Date début de calcul PNB de 12 derniers mois glissants de l'année N-1.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateDebPnb12DerMoisGlissNMoins1: string;\r\n        /**\r\n         * Date arrêtée de calcul du PNB de 12 derniers mois glissants de l'année N-1.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateFinPnb12DerMoisGlissNMoins1: string;\r\n        /**\r\n         * Somme de tous les PNB des clients des portefeuilles des 12 mois glissants de l'année N.\r\n         */\r\n        pnb12DerniersMoisGlissantN: number;\r\n        /**\r\n         * Date début de calcul du PNB de 12 derniers mois glissants de l'année N.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateDebPnb12DerMoisGlissN: string;\r\n        /**\r\n         * Date arrêtée de calcul du PNB de 12 derniers mois glissants de l'année N.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateFinPnb12DerMoisGlissN: string;\r\n        /**\r\n         * % d'évolution du PNB entre les 12 M glissants N-1 et N.\r\n         */\r\n        tauxEvolutionPnb: number;\r\n        /**\r\n         * Ratio = Poids = Somme des 10 PNB les plus importants, sur 12 mois glissants,  des clients (relations économiques) de tous les portefeuilles sélectionnés / Somme de\r\n         * tous les PNB sur 12 mois glissants de tous les portefeuilles sélectionnés.\r\n         */\r\n        ratioPnbClient: number;\r\n    }\r\n    \r\n};","declare module Portefeuille.Modeles.Rest.PreferenceUtilisateur {\r\n    export interface IPreference {\r\n        /**\r\n         * Clé\r\n         */\r\n        cle: string;\r\n\r\n        /**\r\n         * Valeur\r\n         */\r\n        valeur: string;\r\n    }\r\n\r\n    export interface IParametresEntree {\r\n        /**\r\n         * Code agent\r\n         */\r\n        codeAgent: string;\r\n    }\r\n};","declare module Portefeuille.Modeles.Rest.PortefeuilleV1.client {\r\n    export interface IClient {\r\n        listeClientIndicateur: Array<IClientIndicateur>;\r\n    }\r\n\r\n    export interface IIndicateur {\r\n        /**\r\n         * Le libellé de l'inducateur : \r\n         * Exemple: \"PersonnesProtegees\" ....\r\n         */\r\n        code: string;\r\n        /**\r\n         * Le nombre de personnes protégées pour un identifiant de client.\r\n         */\r\n        valeur: string;\r\n        /**\r\n         * La date de dernière mise à jour.\r\n         */\r\n        dateMaj: string;\r\n        /**\r\n         * Pourcentage d'évolution valorisé pour les indicateurs PNB ,  CA, Flux créditeurs et débiteurs de l'année N.\r\n         */\r\n        tendance?: number;\r\n    }\r\n\r\n    export interface IParametresEntree {\r\n        /**\r\n         * Code Banque sous lequel l'établissement est répertorié par la Banque de France.\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * La liste des identifiants des clients.\r\n         */\r\n        listeClients: Array<IClients>;\r\n        /**\r\n         * Liste des indicateurs : \r\n         * \r\n         * * Exemple de valeurs possibles:\r\n         *       PP : Personne Protégée.\r\n         *       PNB ....\r\n         */\r\n        listeIndicateurs: Array<string>;\r\n    }\r\n\r\n    export interface IClients {\r\n        /**\r\n         * L'identifiant du client\r\n         */\r\n        idClient: number;\r\n        /**\r\n         * Le SIREN du client\r\n         */\r\n        sirenClient: string;\r\n    }\r\n\r\n    export interface IClientIndicateur {\r\n        /**\r\n         * Numéro d'identification de la personne morale.\r\n         */\r\n        identifiantPersonne: number;\r\n        listeIndicateurClient: Array<IIndicateur>;\r\n    }\r\n};","declare module Portefeuille.Modeles.Rest.PortefeuilleV1.recherche {\r\n    export interface IPortefeuilleRecherche {\r\n        /**\r\n         * Code Banque sous lequel une Caisse ou un établissement du réseau CE est répertoriée par la Banque de France\r\n         */\r\n        CodeEtablissement: string;\r\n        /**\r\n         * Numéro d'identification interne de l'élément de structure pouvant être  \r\n         *    - de type agence (type3) \r\n         *    - de type poste fonctionnel (type1)\r\n         */\r\n        IdentifiantElementStructure: number;\r\n        DonneeSignifiante: Array<IDonneeSignifiante>;\r\n    }\r\n\r\n    export interface IDonneeSignifiante {\r\n        /**\r\n         * Numéro d'identification d'un portefeuille de suivi clientèle\r\n         */\r\n        identifiantPortefeuille: number;\r\n        /**\r\n         * indique le type de portefeuille de suivi clientèle, à pour valeur :\r\n         * •H : hors portefeuille\r\n         * •R : portefeuille réservoir\r\n         * •C : portefeuille collectif\r\n         * •N: portefeuille nominatif\r\n         */\r\n        codeTypePortefeuille: string;\r\n        /**\r\n         * indique si le portefeuille est affecté :\r\n         *  - O : oui\r\n         *  - N : non\r\n         */\r\n        indicateurAffectation: string;\r\n        /**\r\n         * Numéro d'identification interne de l'élément de structure de type agence (type3) propriétaire du portefeuille de suivi clientèle.\r\n         */\r\n        identifiantElementStructurePortefeuille: number;\r\n        /**\r\n         * Libellé de l'élément de structure propriétaire du portefeuille de suivi de clientèle\r\n         */\r\n        libelleElementStructurePortefeuille: string;\r\n        /**\r\n         * numéro d'identification interne de l'élément de structure assurant le suivi du portefeuille clientèle, correspond à :\r\n         *  - un poste fonctionnel pour un portefeuille nominatif affecté\r\n         */\r\n        identifiantElementStructureSuiviPortefeuille: number;\r\n        /**\r\n         * Libellé de l'élément de structure assurant le suivi du portefeuille clientèle\r\n         */\r\n        libelleElementStructureSuiviPortefeuille: string;\r\n        /**\r\n         * libellé du portefeuille de suivi clientèle\r\n         */\r\n        libellePortefeuille: string;\r\n        /**\r\n         * code du SuiviPar Complémentaire 'SPC'\r\n         */\r\n        codeSuiviComplementaire?: string;\r\n        /**\r\n         * libellé du SuiviPar Complémentaire 'SPC'\r\n         */\r\n        libelleSuiviComplementaire?: string;\r\n    }\r\n\r\n    export interface IPortefeuilleInfo {\r\n        /**\r\n         * Code retour Echanges\r\n         */\r\n        codeRetour: number;\r\n        /**\r\n         * Numéro portefeuille\r\n         */\r\n        identifiantPortefeuille: number;\r\n        /**\r\n         * Libellé portefeuille\r\n         */\r\n        libellePortefeuille: string;\r\n        /**\r\n         * Type portefeuille\r\n         */\r\n        codeTypePortefeuille: string;\r\n        /**\r\n         * Code origine mise en portefeuille\r\n         */\r\n        codeMotifPortefeuille: string;\r\n        /**\r\n         * Indicateur d'affectation\r\n         */\r\n        indicateurAffectation: string;\r\n        /**\r\n         * Type de transfert de portefeuille\r\n         */\r\n        typeTransfertPortefeuille: string;\r\n        /**\r\n         * Nombre relations en PTF\r\n         */\r\n        nombreRelationsEnPtf: number;\r\n        /**\r\n         * Date modification enregistrement\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateModification: string;\r\n        /**\r\n         * Référence externe agent\r\n         */\r\n        codeAgent: number;\r\n        /**\r\n         * Libellé calculé court EDS\r\n         */\r\n        libelleCalculeCourtEds: string;\r\n        /**\r\n         * Libellé fonction poste fonctionnel\r\n         */\r\n        libelleFonctionPosteFonctionnel: string;\r\n        /**\r\n         * Libellé Elément Structure\r\n         */\r\n        libelleElementStructure: string;\r\n        /**\r\n         * Idt EDS propriétaire portefeuille\r\n         */\r\n        identifiantEdsPortefeuille: number;\r\n        /**\r\n         * Type élément structure\r\n         */\r\n        typeElementStructure: string;\r\n        /**\r\n         * Libellé calculé court EDS\r\n         */\r\n        libelleEdsPortefeuille: string;\r\n        /**\r\n         * EDS d'affectation du portefeuille\r\n         */\r\n        identifiantEdsSuiviPortefeuille: number;\r\n        /**\r\n         * Référence externe EDS\r\n         */\r\n        edsDomiciliation: number;\r\n        /**\r\n         * Libellé calculé court EDS\r\n         */\r\n        libelleCourtEDS: string;\r\n        /**\r\n         * Type élément structure\r\n         */\r\n        typeEDS: string;\r\n        /**\r\n         * Libellé fonction poste fonctionnel\r\n         */\r\n        libelleFonction: string;\r\n        /**\r\n         * Libellé Elément Structure\r\n         */\r\n        libelleEDS: string;\r\n        /**\r\n         * Numéro de portefeuille cible\r\n         */\r\n        identifiantPtfTransfert: number;\r\n        /**\r\n         * Libellé du portefeuille cible\r\n         */\r\n        libellePortefeuilleCible: string;\r\n        /**\r\n         * Indicateur d'affectation cible\r\n         */\r\n        indicateurAffectationCible: string;\r\n        /**\r\n         * Type de portefeuille cible\r\n         */\r\n        typePortefeuilleCible: string;\r\n        /**\r\n         * Origine de mise en PTF cible\r\n         */\r\n        codeTypeMotifTransfert: string;\r\n        /**\r\n         * EDS d'affectation cible du portefeui\r\n         */\r\n        identifiantEdsPtfTransfert: number;\r\n        /**\r\n         * Référence externe EDS\r\n         */\r\n        referenceExterneEDSNiveau2: number;\r\n        /**\r\n         * Libellé calculé court EDS\r\n         */\r\n        libelleCalculeCourtEds1: string;\r\n        /**\r\n         * Type élément structure\r\n         */\r\n        typeElementStructure1: string;\r\n        /**\r\n         * Libellé fonction poste fonctionnel\r\n         */\r\n        libelleFonctionPf1: string;\r\n        /**\r\n         * Libellé Elément Structure\r\n         */\r\n        libelleEDSDomEntiteTitulaire: string;\r\n        /**\r\n         * EDS propriétaire du port cible\r\n         */\r\n        edsProprietairePortCible: number;\r\n        /**\r\n         * Type élément structure\r\n         */\r\n        typeElementStructure2: string;\r\n        /**\r\n         * Libellé calculé court EDS\r\n         */\r\n        libelleCalculeCourtEds2: string;\r\n        /**\r\n         * Code professionnel relation\r\n         */\r\n        codeProfessionnelRelation: string;\r\n        /**\r\n         * Groupe de fonctions\r\n         */\r\n        groupeFonctions: string;\r\n    }\r\n\r\n    export interface IListePortefeuille {\r\n        /**\r\n         * le code banque\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * l'identifiant eds\r\n         */\r\n        identifiantElementStructure: number;\r\n        donneePortefeuille: Array<IPortefeuilleInfo>;\r\n    }\r\n};","declare module Portefeuille.Modeles.Rest.PortefeuilleV1.relationCommerciale {\r\n    export interface IClient {\r\n        /**\r\n         * Numéro d'identification de la personne morale.\r\n         */\r\n        identifiantPersonne: number;\r\n        /**\r\n         * Détermine le type de personnalité juridique de la personne.\r\n         * Valeurs :\r\n         * \"1\" : Entrepreneur individuel\r\n         * \"2\" : Personne morale ou assimilée morale\r\n         */\r\n        codePersonnaliteJuridique: string;\r\n        /**\r\n         * La raison sociale est un nom ou une dénomination attribuée à une société. Elle est pour la personne morale ce que le nom patronymique est pour la Personne Physique. Par contre, elle doit être unique.\r\n         */\r\n        raisonSociale: string;\r\n        /**\r\n         * Numéro SIREN professionnel\r\n         */\r\n        numeroSiren: string;\r\n        /**\r\n         * Code leader espace entreprise\r\n         * Définition : Détermine si la personne de la relation est leader de l'espace entreprise\r\n         * Valeurs : 'L' Leader 'N' Personne sans spécificité\r\n         */\r\n        codeLeaderEspaceEntreprise: string;\r\n        /**\r\n         * Nom Leader de la Relation Economique.\r\n         */\r\n        nomLeaderRelationEco: string;\r\n        /**\r\n         * Détermine la typologie de segmentation clientèle.\r\n         * \r\n         * Correspond au 2 premiers caractères du code\r\n         * EX : MN : Marché national\r\n         */\r\n        codeTypeSegmentMarche: string;\r\n        /**\r\n         * Détermine un segment de clientèle dans une typologie donnée : MN : Marché national\r\n         */\r\n        codeSegmentMarche: string;\r\n        listeIndicateurClient: Array<IIndicateur>;\r\n    }\r\n\r\n    export interface IMessageFonctionnel {\r\n        /**\r\n         * Avec le code Domaine, ce code Message Erreur compose l'identifiant réduit pour le poste PETRA d'un Message d'erreur.\r\n         * \r\n         * Valeurs : La composition de ce code se déduit de l'identifiant complet d'un Message d'Erreur en reprenant :\r\n         * \r\n         * la partie utile du code entité (sur 4 car.) :\r\n         * pour une entité programme ou dialogue, cela correspond aux 4 derniers caractères du code sachant que les 2 premiers sont connus dans le code bibliothèque (première composante de la clé)\r\n         * pour un segment, elle correspond aux 4 carac. codifiant le segment.\r\n         * le rang de la rubrique (sur 3 car.)\r\n         * le type de l'erreur (sur 1 car.)\r\n         */\r\n        code: string;\r\n        /**\r\n         * Libellé de description d'une anomalie / erreur associé à un code erreur. Correspond à une erreur de traitement, de contenu de données reçues via un interface (écran de saisie, PTMS, autre Q/R, fichier séquentiel, ...).\r\n         */\r\n        libelle: string;\r\n    }\r\n\r\n    export interface IRelationCommercialeParametres {\r\n        /**\r\n         * Code Banque sous lequel l'établissement est répertorié par la Banque de France.\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * Numéro d'identification de l'élément de structure Suivi Par.\r\n         */\r\n        identifiantEds: number;\r\n        /**\r\n         * Liste numéro de portefeuille.\r\n         */\r\n        listeIdentifiantPortefeuille: Array<number>;\r\n        /**\r\n         * Permet de filtrer la réponse et de n’inclure que des clients, des prospects (enrichis ou restreints) ou les 2).\r\n         * Valeurs :\r\n         * \"00\" : Client + Prospect + Tiers.\r\n         * \"01\" : Client.\r\n         * \"02\" : Prospect (enrichis/restreints) + Tiers\r\n         * Par défaut \"01\" : Clients (si non fourni, forcé à \"01\")\r\n         */\r\n        filtrageClientProspect: string;\r\n        /**\r\n         * En Entrée :\r\n         * - nombreLimiteMaxClient : Nombre de clients maximun à retourner. \r\n         *  Si non fourni, la ressource va initialiser = 0L, et la QR va prendre la valeur par défaut = 350. \r\n         *  Si la valeur = 0L : limite = 350. \r\n         *  Si la valeur = 9999 : aucune limite ne devra être \r\n         *  appliquée.\r\n         */\r\n        nombreLimiteMaxClient: number;\r\n    }\r\n\r\n    export interface IRelationCommerciale {\r\n        /**\r\n         * Numéro d'identification d'un portefeuille de suivi clientèle.\r\n         */\r\n        listePortefeuilles: Array<IPortefeuille>;\r\n        messageInformation: IMessageFonctionnel;\r\n    }\r\n\r\n    export interface IRelation {\r\n        /**\r\n         * Numéro d'identification de la relation économique.\r\n         */\r\n        identifiantRelationEco: number;\r\n        /**\r\n         * Désignation courte de la relation Economique.\r\n         */\r\n        libelleRelationEco: string;\r\n        listeIndicateurRelation: Array<IIndicateur>;\r\n        listeClient: Array<IClient>;\r\n    }\r\n\r\n    export interface IIndicateur {\r\n        /**\r\n         * Le code indicateur :\r\n         * Valeurs :\r\n         * \"dateDernierRdv\", \"dateProchaineRdv\", \"pnb\", codeTypePersonne\".....\r\n         */\r\n        code: string;\r\n        /**\r\n         * Valeur du code indicateur :\r\n         * \"codeTypePersonne\" (CTDAPR)\r\n         * 0 : Personne connue comme client\r\n         * 1 : Personne connue comme Tiers\r\n         * 2 : Personne connue comme prospect\r\n         * 3 : Personne connue comme Prospect enrichi\r\n         */\r\n        valeur: string;\r\n        /**\r\n         * Date de Maj.\r\n         */\r\n        dateMaj: string;\r\n    }\r\n\r\n    export interface IPortefeuille {\r\n        /**\r\n         * Numéro d'identification d'un portefeuille de suivi clientèle.\r\n         */\r\n        identifiantPortefeuille: number;\r\n        /**\r\n         * Libellé du portefeuille de suivi clientèle.\r\n         */\r\n        libellePortefeuille: string;\r\n        /**\r\n         * Nombre total de clients (de type Personne Morale et EI) dans le protefeuille.\r\n         */\r\n        nombreTotalClients: number;\r\n        /**\r\n         * Nombre total de Prospect + Tiers (de type Personne Morale et EI) dans le portefeuille.\r\n         */\r\n        nombreTotalProspectsTiers: number;\r\n        listeRelation: Array<IRelation>;\r\n        listeMessageFonctionnel: Array<IMessageFonctionnel>;\r\n    }\r\n\r\n    //export interface IClient {\r\n    //    /**\r\n    //     * Numéro d'identification de la personne morale.\r\n    //     */\r\n    //    identifiantPersonne: number;\r\n    //    /**\r\n    //     * Détermine le type de personnalité juridique de la personne.\r\n    //     * Valeurs :\r\n    //     * \"1\" : Entrepreneur individuel\r\n    //     * \"2\" : Personne morale ou assimilée morale\r\n    //     */\r\n    //    codePersonnaliteJuridique: string;\r\n    //    /**\r\n    //     * La raison sociale est un nom ou une dénomination attribuée à une société. Elle est pour la personne morale ce que le nom patronymique est pour la Personne Physique. Par contre, elle doit être unique.\r\n    //     */\r\n    //    raisonSociale: string;\r\n    //    /**\r\n    //     * Numéro SIREN professionnel\r\n    //     */\r\n    //    numeroSiren: string;\r\n    //    /**\r\n    //     * Code leader espace entreprise\r\n    //     * Définition : Détermine si la personne de la relation est leader de l'espace entreprise\r\n    //     * Valeurs : 'L' Leader 'N' Personne sans spécificité\r\n    //     */\r\n    //    codeLeaderEspaceEntreprise: string;\r\n    //    /**\r\n    //     * Nom Leader de la Relation Economique.\r\n    //     */\r\n    //    nomLeaderRelationEco: string;\r\n    //    /**\r\n    //     * Détermine la typologie de segmentation clientèle.\r\n    //     * \r\n    //     * Correspond au 2 premiers caractères du code\r\n    //     * EX : MN : Marché national\r\n    //     */\r\n    //    codeTypeSegmentMarche: string;\r\n    //    /**\r\n    //     * Détermine un segment de clientèle dans une typologie donnée : MN : Marché national\r\n    //     */\r\n    //    codeSegmentMarche: string;\r\n    //    listeIndicateurClient: Array<IIndicateur>;\r\n    //}\r\n\r\n    //export interface IMessageFonctionnel {\r\n    //    /**\r\n    //     * Avec le code Domaine, ce code Message Erreur compose l'identifiant réduit pour le poste PETRA d'un Message d'erreur.\r\n    //     * \r\n    //     * Valeurs : La composition de ce code se déduit de l'identifiant complet d'un Message d'Erreur en reprenant :\r\n    //     * \r\n    //     * la partie utile du code entité (sur 4 car.) :\r\n    //     * pour une entité programme ou dialogue, cela correspond aux 4 derniers caractères du code sachant que les 2 premiers sont connus dans le code bibliothèque (première composante de la clé)\r\n    //     * pour un segment, elle correspond aux 4 carac. codifiant le segment.\r\n    //     * le rang de la rubrique (sur 3 car.)\r\n    //     * le type de l'erreur (sur 1 car.)\r\n    //     */\r\n    //    code: string;\r\n    //    /**\r\n    //     * Libellé de description d'une anomalie / erreur associé à un code erreur. Correspond à une erreur de traitement, de contenu de données reçues via un interface (écran de saisie, PTMS, autre Q/R, fichier séquentiel, ...).\r\n    //     */\r\n    //    libelle: string;\r\n    //}\r\n\r\n    //export interface IRelationCommercialeParametres {\r\n    //    /**\r\n    //     * Code Banque sous lequel l'établissement est répertorié par la Banque de France.\r\n    //     */\r\n    //    codeEtablissement: string;\r\n    //    /**\r\n    //     * Numéro d'identification de l'élément de structure Suivi Par.\r\n    //     */\r\n    //    identifiantEds: number;\r\n    //    /**\r\n    //     * Liste numéro de portefeuille.\r\n    //     */\r\n    //    listeIdentifiantPortefeuille: Array<number>;\r\n    //    /**\r\n    //     * Permet de filtrer la réponse et de n’inclure que des clients, des prospects (enrichis ou restreints) ou les 2).\r\n    //     * Valeurs :\r\n    //     * \"00\" : Client + Prospect + Tiers.\r\n    //     * \"01\" : Client.\r\n    //     * \"02\" : Prospect (enrichis/restreints) + Tiers\r\n    //     * Par défaut \"01\" : Clients (si non fourni, forcé à \"01\")\r\n    //     */\r\n    //    filtrageClientProspect: string;\r\n    //    /**\r\n    //     * Nombre de clients maximun à retourner. Par défaut : 350 (si non fourni). Si la valeur est  0  aucune limite ne devra être appliquée.\r\n    //     */\r\n    //    nombreLimiteMaxClient: number;\r\n    //}\r\n\r\n    //export interface IRelationCommerciale {\r\n    //    /**\r\n    //     * Numéro d'identification d'un portefeuille de suivi clientèle.\r\n    //     */\r\n    //    identifiantPortefeuille: number;\r\n    //    /**\r\n    //     * Libellé du portefeuille de suivi clientèle.\r\n    //     */\r\n    //    libellePortefeuille: string;\r\n    //    /**\r\n    //     * Nombre total de clients (de type Personne Morale et EI) dans le protefeuille.\r\n    //     */\r\n    //    nombreTotalClients: number;\r\n    //    /**\r\n    //     * Nombre total de Prospect + Tiers (de type Personne Morale et EI) dans le portefeuille.\r\n    //     */\r\n    //    nombreTotalProspectsTiers: number;\r\n    //    listeRelation: Array<IRelation>;\r\n    //    listeMessageFonctionnel: Array<IMessageFonctionnel>;\r\n    //}\r\n\r\n    //export interface IRelation {\r\n    //    /**\r\n    //     * Numéro d'identification de la relation économique.\r\n    //     */\r\n    //    identifiantRelationEco: number;\r\n    //    /**\r\n    //     * Désignation courte de la relation Economique.\r\n    //     */\r\n    //    libelleRelationEco: string;\r\n    //    listeIndicateurRelation: Array<IIndicateur>;\r\n    //    listeClient: Array<IClient>;\r\n    //}\r\n\r\n    //export interface IIndicateur {\r\n    //    /**\r\n    //     * Le code indicateur :\r\n    //     * Valeurs :\r\n    //     * \"dateDernierRdv\", \"dateProchaineRdv\", \"pnb\", codeTypePersonne\".....\r\n    //     */\r\n    //    code: string;\r\n    //    /**\r\n    //     * Valeur du code indicateur :\r\n    //     * \"codeTypePersonne\" (CTDAPR)\r\n    //     * 0 : Personne connue comme client\r\n    //     * 1 : Personne connue comme Tiers\r\n    //     * 2 : Personne connue comme prospect\r\n    //     * 3 : Personne connue comme Prospect enrichi\r\n    //     */\r\n    //    valeur: string;\r\n    //    /**\r\n    //     * Date de Maj.\r\n    //     */\r\n    //    dateMaj: string;\r\n    //}\r\n};","declare module Portefeuille.Modeles.Rest.PortefeuilleV1.suiviComplementaire {\r\n    export interface ISuiviComplementaire {\r\n        listeSuivi: Array<ISuivi>;\r\n        suiviComplementaireModifie: ISuiviComplementaireModifie;\r\n    }\r\n\r\n    export interface ISuiviComplementaireModifie {\r\n        /**\r\n         * Code Etab Banque Entité Juridique\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * Identifiant personne\r\n         */\r\n        numeroPersonne: number;\r\n        /**\r\n         * Code type suivi complémentaire\r\n         */\r\n        codeTypeSuiviComplementaire: string;\r\n        /**\r\n         * Code action\r\n         */\r\n        codeAction: string;\r\n        /**\r\n         * Identifiant Elément structure\r\n         */\r\n        idEdsInterne: number;\r\n        /**\r\n         * Identifiant élément structure\r\n         */\r\n        identifiantElementStructure: number;\r\n        /**\r\n         * Référence externe agent\r\n         */\r\n        identifiantAgent: number;\r\n    }\r\n\r\n    export interface ISuivi {\r\n        /**\r\n         * code banque\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * numéro de la personne\r\n         */\r\n        numeroPersonne: number;\r\n        /**\r\n         * Code type :\r\n         * '001'      MIDDLE          \r\n         * '002'      INTERNATIONAL   \r\n         * '003'      NEO BUSINESS    \r\n         * '004'      SANTE           \r\n         * '005'      GRANDS COMPTES  \r\n         * '006'      FLUX            \r\n         * '007'      BANQUE DE L'ORNE\r\n         */\r\n        codeTypeSuiviComplementaire: string;\r\n        /**\r\n         * Exemples de valeurs :    \r\n         *            ---------------------    \r\n         * '001'      MIDDLE                   \r\n         * '002'      INTERNATIONAL            \r\n         * '003'      NEO BUSINESS             \r\n         * '004'      SANTE                    \r\n         * '005'      GRANDS COMPTES           \r\n         * '006'      FLUX                     \r\n         * '007'      BANQUE DE L'ORNE\r\n         */\r\n        libelleSuiviComplementaire: string;\r\n        /**\r\n         * Exemples de valeurs :       \r\n         *            ---------------------       \r\n         * '001'      MIDDLE                      \r\n         * '002'      Conseiller International    \r\n         * '004'      Expert SANTE\r\n         */\r\n        libelleSuiviComplementClient: string;\r\n        /**\r\n         * identifiant de l'element de structure interne\r\n         */\r\n        idEdsInterne: number;\r\n        /**\r\n         * designation longue de l'element de structure\r\n         */\r\n        designationLongueEds: string;\r\n        informationAnimation: IInformationAnimation;\r\n        /**\r\n         * Valeurs :            \r\n         *            ---------            \r\n         * 'O'        Oui à restituer      \r\n         * 'N'        Non ne pas restituer\r\n         */\r\n        indicateurRestitutionClient: string;\r\n        /**\r\n         * Valeurs :            \r\n         *            ---------            \r\n         * 'O'        Oui à restituer      \r\n         * 'N'        Non ne pas restituer\r\n         */\r\n        indicateurRestitutionClientRMP: string;\r\n        dateMajEnregistrement: string;\r\n        /**\r\n         * exemple :\r\n         */\r\n        typeElementStructure: string;\r\n    }\r\n\r\n    export interface IInformationAnimation {\r\n        /**\r\n         * '1' Personne physique \r\n         * '2' Personne morale ou assimilée morale\r\n         */\r\n        codePersonaliteJuridique: string;\r\n        /**\r\n         * exemple de formulation : \"civilité pers 1\" et \"civilité pers2\" et \"désignat p1\" \"désignation pers. 1\" et \"désignat pers. 2\" \"désignation pers. 1\" et \"désignat pers. 2\" \"et leurs enfants\" \"Groupe\" \r\n         * raison sociale personne morale leader \"Famille\" nom leader pp + \"& Entp\" raison sociale leader pm\r\n         */\r\n        intituleRelation: string;\r\n        /**\r\n         * Numéro d'identification de la relation économique\r\n         */\r\n        identifiantRelationEconomique: number;\r\n        /**\r\n         * Nombre de personne appartenant a un ménage économique\r\n         */\r\n        nombrePersonneMenage: number;\r\n        /**\r\n         * Correspond au 2 premiers caractères du code segmentation sur 8 car : voir CODLSH.\r\n         * Valeurs : 'AC' Activation Clientèle Particulier 'AP' Activation Clientèle Professionnel 'BM' Segmentation relationelle BDR 'BR' Segmentation relation économique BDR 'FC' Fréquence Client 'FP' \r\n         * Fréquence PRO 'FR' Fréquence Relation 'MN' Marché national 'SL' Spécifique VAO pour progiciel Norkom / LAB 'SA' Activation Clientèle V2 'SU' Univers de détention\r\n         */\r\n        codeTypeSegmentClientele: string;\r\n        /**\r\n         * Nouveau code segmentation nationale CENCEP 1994 Ce code passe de 2 à 6 positions 1er caractére : le code maxi groupe J jeune, I inactif, B bancarisé, M monodétenteur D diversifié, \r\n         * N nouveau client 2éme caractére : le maxi groupe c'est un découpage qui intervient pour certain maxi groupe 3éme au 5éme caractéres : codes segments comportemen- tal 6éme caractére : potentiel client '+' ou ' '\r\n         */\r\n        codeSegmentClientele: string;\r\n        /**\r\n         * Libellé court de la segmentation clientèle pour affichage sur le poste de travail libellé à caractère confidentiel pour ne pas être interprété par la clientèle\r\n         */\r\n        libelleCourtSegmentation: string;\r\n        /**\r\n         * Correspond au 2 premiers caractères du code segmentation\r\n         */\r\n        typeSegmentation: string;\r\n        /**\r\n         * Ce code passe de 2 à 6 positions 1er caractére : le code maxi groupe J jeune, I inactif, B bancarisé, M monodétenteur D diversifié, N nouveau client 2éme caractére : \r\n         * le maxi groupe c'est un découpage qui intervient pour certain maxi groupe 3éme au 5éme caractéres : codes segments comportemen- tal 6éme caractére : potentiel client '+' ou '\r\n         */\r\n        codeSegmentClientele2: string;\r\n        /**\r\n         * Libellé contenant la désignation d'un segment clientèle, associé au code segment / CODLSH. Etabli dans la table de typologie DU2L\r\n         */\r\n        libelleSegmentClientele2: string;\r\n        /**\r\n         * Détermine le rôle d'une personne dans une relation Permet de déterminer si la personne est leader valeurs : '1' personne '2' personne leader d'un ménage '3' autre personne d'un ménage\r\n         */\r\n        typeRoleRelation: string;\r\n        /**\r\n         * Date du dernier rendez-vous réalisé pour une personne.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateDernierRdvRealise: string;\r\n        /**\r\n         * Nombre de rendez-vous sur 12 mois glissants\r\n         */\r\n        nombreRdv12Mois: number;\r\n        /**\r\n         * Nombre de rendez-vous planifiés pour une personne\r\n         */\r\n        nombreRdvPlanifies: number;\r\n        /**\r\n         * Nombre de rendez-vous sur l'année en cours pour une personne\r\n         */\r\n        nombreRdvAnneeEnCours: number;\r\n        /**\r\n         * Numéro SIREN entreprise\r\n         */\r\n        numeroSiren: string;\r\n        /**\r\n         * Désignation de la personne morale\r\n         */\r\n        raisonSociale: string;\r\n        /**\r\n         * Valeurs possibles : \r\n         * '0' Personne connue comme client \r\n         * '1' Personne connue comme tiers \r\n         * '2' Personne connue comme prospect \r\n         * '3' Personne connue comme prospect enrichi\r\n         */\r\n        codeTypeRelationPersonne: string;\r\n        /**\r\n         * Date du prochain rendez-vous pour une personne.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateProchainRdv: string;\r\n        /**\r\n         * Date du dernier entretien réalisé pour une personne.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateDernierEntretien: string;\r\n    }\r\n\r\n};","declare module Portefeuille.Modeles.Rest.PropositionCorporateV1.rechercheRevue {\r\n    export interface IRechercheRevueParametres {\r\n        /**\r\n         * Code Banque sous lequel l'établissement est répertorié par la Banque de France.\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * Numéro d'identification de l'élément de structure.\r\n         */\r\n        identifiantElementStructure: number;\r\n        /**\r\n         * Liste numéro de portefeuille.\r\n         */\r\n        listeIdentifiantPortefeuille: Array<number>;\r\n        /**\r\n         * Liste identifiant de la relation économique.\r\n         */\r\n        listeIdentifiantRelationEco: Array<number>;\r\n        /**\r\n         * Liste numéro de personne.\r\n         */\r\n        listeIdentifiantPersonne: Array<number>;\r\n        /**\r\n         * Indique si il faut récupérer l'équipement.\r\n         */\r\n        codeActionEquipement: string;\r\n    }\r\n\r\n    export interface IRechercheRevue {\r\n        listeBilanRevue: Array<IBilanRevue>;\r\n        messageInformation: IMessageFonctionnel;\r\n    }\r\n\r\n    export interface IBilanRevue {\r\n        /**\r\n         * Code Banque sous lequel l'établissement est répertorié par la Banque de France.\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * Numéro d'identification de l'élément de structure.\r\n         */\r\n        identifiantElementStructure: number;\r\n        /**\r\n         * Code Famille produit porteFeuille BDR.\r\n         */\r\n        codeFamilleProduitPtf: string;\r\n        /**\r\n         * Code sous famille produit portefeuille BDR.\r\n         */\r\n        codeSousFamilleProduitPtf: string;\r\n        /**\r\n         * Numéro d'identification d'un portefeuille.\r\n         */\r\n        identifiantPortefeuille: number;\r\n        /**\r\n         * Numéro d'identification de la relation économique.\r\n         */\r\n        identifiantRelationEco: number;\r\n        /**\r\n         * Numéro d'identification de la personne morale ou EI.\r\n         */\r\n        identifiantPersonne: number;\r\n        /**\r\n         * Raison Sociale.\r\n         */\r\n        raisonSociale: string;\r\n        /**\r\n         * Indicateur client équipé sous famille produit. Valeurs : O/N.\r\n         */\r\n        indicateurClientEquipe: string;\r\n        /**\r\n         * Indicateur sous-famille produit BDR à proposer. Valeurs : O/N.\r\n         */\r\n        indicateurClientAEquiper: string;\r\n        /**\r\n         * Taux objectif flux.\r\n         */\r\n        tauxObjectifFlux: number;\r\n        /**\r\n         * Indicateur client à activer. Valeurs : O/N.\r\n         */\r\n        indicateurClientAActiver: string;\r\n        /**\r\n         * Indicateur tarif à renégocier. Valeurs : O/N.\r\n         */\r\n        indicateurTarifARenegocier: string;\r\n        /**\r\n         * Indicateur client équipé à la concurrence.\r\n         * Valeurs : O/N.\r\n         */\r\n        indicateurClientEquipeConcurren: string;\r\n        /**\r\n         * Indicateur client non intéressé produit.\r\n         * Valeur : O/N\r\n         */\r\n        indicateurClientNonInteresse: string;\r\n        /**\r\n         * Code type segment clientèle.\r\n         */\r\n        codeTypeSegment: string;\r\n        /**\r\n         * Code segment clientèle.\r\n         */\r\n        codeSegment: string;\r\n        /**\r\n         * Libellé segment clientèle.\r\n         */\r\n        libelleSegment: string;\r\n    }\r\n\r\n    export interface IMessageFonctionnel {\r\n        /**\r\n         * Avec le code Domaine, ce code Message Erreur compose l'identifiant réduit pour le poste PETRA d'un Message d'erreur.\r\n         * \r\n         * Valeurs : La composition de ce code se déduit de l'identifiant complet d'un Message d'Erreur en reprenant :\r\n         * \r\n         * la partie utile du code entité (sur 4 car.) :\r\n         * - pour une entité programme ou dialogue, cela correspond aux 4 derniers caractères du code sachant que les 2 premiers sont connus dans le code bibliothèque (première composante de la clé)\r\n         * - pour un segment, elle correspond aux 4 carac. codifiant le segment. le rang de la rubrique (sur 3 car.) le type de l'erreur (sur 1 car.)\r\n         */\r\n        code: string;\r\n        /**\r\n         * Libellé de description d'une anomalie / erreur associé à un code erreur. Correspond à une erreur de traitement, de contenu de données reçues via un interface (écran de saisie, PTMS, autre Q/R, fichier séquentiel, ...).\r\n         */\r\n        libelle: string;\r\n    }\r\n};","declare module Portefeuille.Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds {\r\n    export interface IStatPortefeuilleEds {\r\n        parametres: IParametres;\r\n        vueGlobaleStatPtfEds: IStatPtfEdsStandard;\r\n        vueDetailleeStatPtfEds: Array<IStatPtfEdsStandard>;\r\n    }\r\n\r\n    export interface IParametres {\r\n        /**\r\n         * Code Banque sous lequel l'établissement est répertorié par la Banque de France.\r\n         */\r\n        codeEtablissement: string;\r\n        listePortefeuilleEds: Array<IPortefeuilleEds>;\r\n        /**\r\n         * Valeur :\r\n         * '0' : vue globale\r\n         * '1' : vue détaillée\r\n         * '2' : vue globale + vue détaillée\r\n         */\r\n        typeVue: string;\r\n    }\r\n\r\n    export interface IPortefeuilleEds {\r\n        /**\r\n         * Numéro d'identification de l'élément de structure Suivi Par.\r\n         */\r\n        identifiantEds: number;\r\n        /**\r\n         * Numéro de portefeuille.\r\n         */\r\n        identifiantPortefeuille: number;\r\n    }\r\n\r\n    export interface IStatPtfEdsStandard {\r\n        /**\r\n         * Numéro d'identification de l'élément de structure Suivi Par.\r\n         */\r\n        identifiantEds: number;\r\n        /**\r\n         * Code civilité du chargé d'affaire.\r\n         */\r\n        codeCiviliteChargeAffaire: string;\r\n        /**\r\n         * Nom famille du chargé d'affaire\r\n         */\r\n        nomFamilleChargeAffaire: string;\r\n        /**\r\n         * Premier prénom état civil du chargé d'affaire.\r\n         */\r\n        prenomChargeAffaire: string;\r\n        /**\r\n         * Nom usage du chargé d'affaire.\r\n         */\r\n        nomUsageChargeAffaire: string;\r\n        /**\r\n         * Nombre de clients total.\r\n         */\r\n        nombreClients: number;\r\n        /**\r\n         * Nombre de prospects.\r\n         */\r\n        nombreProspects: number;\r\n        /**\r\n         * Nombre de relations économiques (toutes catégories confondues).\r\n         */\r\n        nombreRelationsEconomiques: number;\r\n        /**\r\n         * Nombre de clients de type Entreprises - ESI.\r\n         */\r\n        nombreClientsTypePmeEsi: number;\r\n        /**\r\n         * Nombre de clients de type PRO (EI inclus).\r\n         */\r\n        nombreClientsTypeProEi: number;\r\n        /**\r\n         * Nombre de clients de type Autres (ni Entreprise - ESI, PRO, EI).\r\n         */\r\n        nombreClientsTypeAutre: number;\r\n        /**\r\n         * Nombre de rendez vous réalisés pour des prospects depuis le 1er janvier de l'année en cours.\r\n         */\r\n        nbRdvProspectRealiseAnneeCivile: number;\r\n        /**\r\n         * Nombre de prospects qui ont un RDV réalisé (donc avec un CRE) depuis le 1er janvier de l'année en cours.\r\n         */\r\n        nbProspectsVusAnneeEncours: number;\r\n        /**\r\n         * Nombre de relations éco dont le leader est client (non prospect) qui ont un RDV validé (donc avec un CRE) depuis le 1er janvier de l'année en cours.\r\n         */\r\n        nbRelEcoClientVuesAnneeEncours: number;\r\n        /**\r\n         * Nombre de rendez-vous réalisés sur l'année en cours (depuis le 1er janvier) pour les relations économiques de type \"clients\" \r\n         * (dont le leader est client) / nb de relations économiques de type \"clients\" (dont le leader est client) au jour J.\r\n         */\r\n        tauxDeVisite: number;\r\n        /**\r\n         * Le nombre total de clients qui ont une segmentation calculée dans le(s) portefeuille(s).\r\n         */\r\n        nombreTotalClientsSegmentation: number;\r\n        /**\r\n         * Nombre de rendez-vous client.\r\n         */\r\n        nbRdvClient: number;\r\n        /**\r\n         * Nombre de client vus.\r\n         */\r\n        nbClientsVus: number;\r\n        /**\r\n         * Nombre Clients PE et PEES\r\n         */\r\n        nbClientsPePees: number;\r\n        /**\r\n         * Nombre Clients ME et MEES\r\n         */\r\n        nbClientsMeMees: number;\r\n        /**\r\n         * Nombre Clients GE et GEES\r\n         */\r\n        nbClientsGeGees: number;\r\n        /**\r\n         * Date début de calcul flux année N.\r\n         */\r\n        dateDebFluxAnneeN: string;\r\n        /**\r\n         * Date fin de calcul flux année N.\r\n         */\r\n        dateFinFluxAnneeN: string;\r\n        /**\r\n         * Somme des flux créditeurs des clients de l'année N.\r\n         */\r\n        fluxCrediteursAnneeN: number;\r\n        /**\r\n         * Somme des flux débiteurs des clients de l'année N.\r\n         */\r\n        fluxDebiteursAnneeN: number;\r\n        /**\r\n         * Date début de calcul flux année N-1.\r\n         */\r\n        dateDebFluxAnneeNMoins1: string;\r\n        /**\r\n         * Date fin de calcul flux année N-1.\r\n         */\r\n        dateFinFluxAnneeNMoins1: string;\r\n        /**\r\n         * Somme des flux créditeurs des clients de l'année N-1.\r\n         */\r\n        fluxCrediteursNMoins1: number;\r\n        /**\r\n         * Somme des flux débiteurs des clients de l'année N-1.\r\n         */\r\n        fluxDebiteursNMoins1: number;\r\n        /**\r\n         * Taux évolution flux créditeurs\r\n         */\r\n        tauxEvolutionFluxCrediteurs: number;\r\n        /**\r\n         * Taux évolution flux débiteurs\r\n         */\r\n        tauxEvolutionFluxDebiteurs: number;\r\n        /**\r\n         * Somme de tous les PNB des clients des portefeuilles des 12 mois glissants de l'année N.\r\n         */\r\n        pnb12DerniersMoisGlissantN: number;\r\n        /**\r\n         * Date début de calcul du PNB de 12 derniers mois glissants de l'année N.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateDebPnb12DerMoisGlissN: string;\r\n        /**\r\n         * Date arrêtée de calcul du PNB de 12 derniers mois glissants de l'année N.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateFinPnb12DerMoisGlissN: string;\r\n        /**\r\n         * Somme de tous les PNB des clients des portefeuilles au 31/12 de l'année N-1\r\n         */\r\n        pnb3112AnneeNMoins1: number;\r\n        /**\r\n         * Date début de calcul du PNB au 31/12 de l'année N-1.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateDebPnb3112AnneeNMoins1: string;\r\n        /**\r\n         * Date arrêtée de calcul du PNB au 31/12 de l'année N-1.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateFinPnb3112AnneeNMoins1: string;\r\n        /**\r\n         * Somme de tous les PNB des clients des portefeuilles des 12 mois glissants de l'année N-1.\r\n         */\r\n        pnb12DerniersMoisGlissNMoins1: number;\r\n        /**\r\n         * Date début de calcul PNB de 12 derniers mois glissants de l'année N-1.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateDebPnb12DerMoisGlissNMoins1: string;\r\n        /**\r\n         * Date arrêtée de calcul du PNB de 12 derniers mois glissants de l'année N-1.\r\n         * Type date au format yyyy-MM-dd\r\n         */\r\n        dateFinPnb12DerMoisGlissNMoins1: string;\r\n        /**\r\n         * % d'évolution du PNB entre les 12 M glissants N-1 et N.\r\n         */\r\n        tauxEvolutionPnb: number;\r\n        /**\r\n         * Nombre de clients actifs.\r\n         */\r\n        nombreClientsActifs: number;\r\n        /**\r\n         * Nombre de Clients non équipés\r\n         */\r\n        nbClientsNonEquipe: number;\r\n        /**\r\n         * Pourcentage de revue portefeuille réalisée.\r\n         */\r\n        pourcentageRevuePtfRealisee: number;\r\n        /**\r\n         * Nombre de clients revus.\r\n         */\r\n        nombreDeClientsRevus: number;\r\n        /**\r\n         * Nombre de produits à proposer.\r\n         */\r\n        nombreDeProduitsAProposer: number;\r\n        /**\r\n         * Nombre de clients à activer.\r\n         */\r\n        nombreDeClientsAActiver: number;\r\n        /**\r\n         * Nombre de clients tarif à renégocier.\r\n         */\r\n        nombreDeClientsTarifARenegocier: number;\r\n        /**\r\n         * Nombre de clients avec Appétence.\r\n         */\r\n        nombreDeClientsAAppetence: number;\r\n        /**\r\n         * Nombre de Clients avec Produit Service\r\n         */\r\n        nbClientsAvecProduitService: number;\r\n        /**\r\n         * Nombre de Clients sans contrat et prospect.\r\n         */\r\n        nbClientsSansContratEtProspect: number;\r\n        /**\r\n         * Cumul nombre des affaires.\r\n         */\r\n        cumulNombreAffaires: number;\r\n        /**\r\n         * Cumul Proposition Commerciale BDR.\r\n         */\r\n        cumulPropositionCommerciale: number;\r\n    }\r\n\r\n};","declare module Portefeuille.Modeles.Rest.PropositionCorporateV1.statRevue {\r\n    export interface IStatRevueParametres {\r\n        /**\r\n         * Code Banque sous lequel l'établissement est répertorié par la Banque de France.\r\n         */\r\n        codeEtablissement: string;\r\n        identifiantElementStructure: number;\r\n        /**\r\n         * Liste numéro de portefeuille.\r\n         */\r\n        listeIdentifiantPortefeuille: Array<number>;\r\n    }\r\n\r\n    export interface IStatRevue {\r\n        /**\r\n         * Code Banque sous lequel l'établissement est répertorié par la Banque de France.\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * Numéro d'identification de l'élément de structure.\r\n         */\r\n        identifiantElementStructure: string;\r\n        /**\r\n         * Pourcentage de revue portefeuille réalisée.\r\n         */\r\n        pourcentageRevuePtfRealisee: number;\r\n        /**\r\n         * Nombre de clients revus.\r\n         */\r\n        nombreDeClientsRevus: number;\r\n        /**\r\n         * Nombre de clients total.\r\n         */\r\n        nombreDeClientsTotal: number;\r\n        /**\r\n         * Nombre de produits à proposer.\r\n         */\r\n        nombreDeProduitsAProposer: number;\r\n        /**\r\n         * Nombre de clients à activer.\r\n         */\r\n        nombreDeClientsAActiver: number;\r\n        /**\r\n         * Nombre de clients à renégocier (tarification).\r\n         */\r\n        nombreDeClientsARenegocier: number;\r\n        /**\r\n         * Nombre de clients avec Appétence.\r\n         */\r\n        nombreDeClientsAAppetence: number;\r\n        /**\r\n         * Cumul nombre des affaires.\r\n         */\r\n        cumulNombreAffaires: number;\r\n        /**\r\n         * Cumul Proposition Commerciale BDR.\r\n         */\r\n        cumulPropositionCommerciale: number;\r\n    }\r\n\r\n};","declare module Portefeuille.Modeles.Rest.StructureV2.edsniveauinferieur {\r\n    export interface IEdsniveauinferieurQuery {\r\n        /**\r\n         * Identifiant interne de l'EDS de rattachement de l'EDS identifié\r\n         */\r\n        codeEtablissement: string;\r\n        /**\r\n         * Référence externe de l'EDS de rattachement de l'EDS identifié\r\n         */\r\n        identifiantInterneEDS: number;\r\n    }\r\n\r\n    export interface IInfoRattachementEDS {\r\n        /**\r\n         * Identifiant interne de l'EDS de rattachement de l'EDS identifié\r\n         */\r\n        identifiantEDSRattachement: number;\r\n        /**\r\n         * Référence externe de l'EDS de rattachement de l'EDS identifié\r\n         */\r\n        referenceEDSRattachement: number;\r\n        /**\r\n         * Libellé de l'EDS de rattachement de l'EDS identifié\r\n         */\r\n        libelleEDSRattachement: string;\r\n        /**\r\n         * Type de l'EDS de rattachement de l'EDS identifié\r\n         */\r\n        typeEDSRattachement: string;\r\n        /**\r\n         * Libellé long type de l'EDS de rattachement\r\n         */\r\n        libelleTypeEDSRattachement: string;\r\n    }\r\n\r\n    export interface IInfoEDS {\r\n        /**\r\n         * Identifiant interne de l'élément de structure\r\n         */\r\n        identifiantInterneEDS: number;\r\n        /**\r\n         * Référence externe de l'élément de structure\r\n         */\r\n        referenceExterneEDS: number;\r\n        /**\r\n         * Libellé de l'élément de structure\r\n         */\r\n        libelleEDS: string;\r\n        /**\r\n         * Type de l'élément structure\r\n         */\r\n        typeEDS: string;\r\n        /**\r\n         * Libellé long type de l'EDS\r\n         */\r\n        libelleTypeEDS: string;\r\n    }\r\n\r\n    export interface IInfoPosteFonctionnel {\r\n        /**\r\n         * Identifiant interne du poste fonctionnel\r\n         */\r\n        identifiantPosteFonctionnel: number;\r\n        /**\r\n         * Référence externe du poste fonctionnel\r\n         */\r\n        referencePosteFonctionnel: number;\r\n        /**\r\n         * Libellé du poste fonctionnel\r\n         */\r\n        libellePosteFonctionnel: string;\r\n        /**\r\n         * Type de l'élément structure\r\n         */\r\n        typeEDS: string;\r\n        /**\r\n         * Libellé long type de l'EDS\r\n         */\r\n        libelleTypeEDS: string;\r\n        /**\r\n         * Référence externe de l'agent\r\n         */\r\n        codeAgent: number;\r\n        /**\r\n         * Désignation longue de l'agent Elle est utilisée pour la constitution de la ligne 1 de l'adresse. \r\n         * Elle est constituée en concaténant la civilité, le nom d'usage et le prénom de l'agent.\r\n         */\r\n        designationAgent: string;\r\n        /**\r\n         * Type de fonction de l'agent\r\n         */\r\n        typeFonction: string;\r\n        /**\r\n         * Libellé de fonction de l'agent\r\n         */\r\n        libelleFonction: string;\r\n        /**\r\n         * Code civilité de l'agent\r\n         */\r\n        civiliteAgent: string;\r\n        /**\r\n         * Nom de filiation de la personne physique, correspond :\r\n         * \r\n         * soit au nom du père\r\n         * soit au nom de la mère\r\n         * soit aux 2 noms accolés (ordre quelconque, dans la limite d'un nom de famille par parent) \r\n         * C'est le seul nom mentionné sur les actes d'état civil (acte de naissance, de mariage, livret de famille....). \r\n         * Figure sur toute pièce officielle d'identité. Appelé auparavant nom patronymique.\r\n         */\r\n        nomFamilleAgent: string;\r\n        /**\r\n         * Premier prénom de l'état civil de la personne physique.\r\n         */\r\n        prenomAgent: string;\r\n        /**\r\n         * Dénomination de la personne autre que le nom de famille, correspond :\r\n         * \r\n         * soit au nom de famille de l'époux(se) (conjoint)\r\n         * soit au nom composé de son nom de famille et de celui de l'époux(se) dans un ordre quelconque Dénomination \r\n         * utilisable dans la vie quotidienne, totalement facultative et sans caractère automatique. \r\n         * Il n'est pas possible d'utiliser comme nom d'usage le nom du concubin ou du partenaire de Pacs. \r\n         * C'est une information pouvant figurer sur toute pièce officielle d'identité à la suite du nom de famille. \r\n         * Appelé auparavant nom marital.\r\n         */\r\n        nomUsageAgent: string;\r\n    }\r\n\r\n    export interface IEdsNiveauInferieur {\r\n        infoRattachementEDS: IInfoRattachementEDS;\r\n        infoEDS: Array<IInfoEDS>;\r\n        infoPosteFonctionnel: Array<IInfoPosteFonctionnel>;\r\n    }\r\n\r\n};",null,"/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.RechercheRevue {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de récupérer les informations sur la revue\r\n     */\r\n    class RechercheRevueService implements IRechercheRevueService {\r\n        public static CLASS_NAME = \"RechercheRevueService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(RechercheRevueService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended\r\n        ];\r\n\r\n        //constructeur\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended) {\r\n        }\r\n\r\n        /**\r\n         * Méthode de récupération de la liste des données d'une revue\r\n         * @param query\r\n         */\r\n        public postRechercheRevue(query: Modeles.Rest.PropositionCorporateV1.rechercheRevue.IRechercheRevueParametres): ng.IPromise<Modeles.Rest.PropositionCorporateV1.rechercheRevue.IRechercheRevue> {\r\n            RechercheRevueService.logger.info(\">>> Appel de la méthode : RechercheRevueService.getRevue <<<\");\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_PROPOSITIONCORPORATEV1_RECHERCHE_REVUE,\r\n                method: MyWay.Services.MethodEnum.POST,\r\n                withHeaders: true,\r\n                data: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe StatRevueService\r\n     */\r\n    export interface IRechercheRevueService {\r\n        postRechercheRevue(query: Modeles.Rest.PropositionCorporateV1.rechercheRevue.IRechercheRevueParametres): ng.IPromise<Modeles.Rest.PropositionCorporateV1.rechercheRevue.IRechercheRevue>;\r\n    }\r\n\r\n    app.service(RechercheRevueService.CLASS_NAME, RechercheRevueService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.StatFluxMouvementFinancier {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Ce service permet de récupérer les flux créditeurs + débiteurs.\r\n     */\r\n\r\n    class StatFluxMouvementFinancierService implements IStatFluxMouvementFinancierService {\r\n        public static CLASS_NAME = \"StatFluxMouvementFinancierService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(StatFluxMouvementFinancierService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended\r\n        ];\r\n\r\n        //constructeur\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended) {\r\n        }\r\n\r\n        /**\r\n         * Méthode de récupération de la liste des données statistiques de rentabilite sur une liste de client ou relation ou portefeuilles\r\n         * @param query\r\n         */\r\n        public postStatFluxMvtFinancier(query: Modeles.Rest.PortefeuillCorporateV1.statFluxMouvementFinancier.IStatFluxMvtFinancierParametres):\r\n            ng.IPromise<Modeles.Rest.PortefeuillCorporateV1.statFluxMouvementFinancier.IStatFluxMvtFinancier> {\r\n            StatFluxMouvementFinancierService.logger.info(\">>> Appel de la méthode : StatFluxMouvementFinancierService.postStatFluxMvtFinancier <<<\");\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_PORTEFEUILLECORPORATEV1_STATFLUXMOUVEMENTFINANCIER,\r\n                method: MyWay.Services.MethodEnum.POST,\r\n                withHeaders: true,\r\n                data: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe StatRentabiliteService\r\n     */\r\n    export interface IStatFluxMouvementFinancierService {\r\n        postStatFluxMvtFinancier(query: Modeles.Rest.PortefeuillCorporateV1.statFluxMouvementFinancier.IStatFluxMvtFinancierParametres): ng.IPromise<Modeles.Rest.PortefeuillCorporateV1.statFluxMouvementFinancier.IStatFluxMvtFinancier>;\r\n    }\r\n\r\n    app.service(StatFluxMouvementFinancierService.CLASS_NAME, StatFluxMouvementFinancierService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.StatPortefeuille {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de récupérer les information sur les statistiques de rentabilite\r\n     */\r\n\r\n    class StatPortefeuilleService implements IStatPortefeuilleService {\r\n        public static CLASS_NAME = \"StatPortefeuilleService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(StatPortefeuilleService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended\r\n        ];\r\n\r\n        //constructeur\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended) {\r\n        }\r\n\r\n        /**\r\n         * Méthode de récupération de la liste des données statistiques de rentabilite sur une liste de client \r\n         * ou relation ou portefeuilles\r\n         * @param query\r\n         */\r\n        public getStats(query: Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.IStatPortefeuilleParametres):\r\n            ng.IPromise<Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.IStatPortefeuille> {\r\n            StatPortefeuilleService.logger.info(\">>> Appel de la méthode : StatRevueService.getStats <<<\");\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_PORTEFEUILLECORPORATEV1_STATPTF,\r\n                method: MyWay.Services.MethodEnum.POST,\r\n                withHeaders: true,\r\n                data: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe StatRevueService\r\n     */\r\n    export interface IStatPortefeuilleService {\r\n        getStats(query: Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.IStatPortefeuilleParametres):\r\n            ng.IPromise<Modeles.Rest.PortefeuillCorporateV1.statPortefeuille.IStatPortefeuille>;\r\n    }\r\n\r\n    app.service(StatPortefeuilleService.CLASS_NAME, StatPortefeuilleService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.StatRentabilite {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de récupérer les information sur les statistiques de rentabilite\r\n     */\r\n\r\n    class StatRentabiliteService implements IStatRentabiliteService {\r\n        public static CLASS_NAME = \"StatRentabiliteService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(StatRentabiliteService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended\r\n        ];\r\n\r\n        //constructeur\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended) {\r\n        }\r\n\r\n        /**\r\n         * Méthode de récupération de la liste des données statistiques de rentabilite sur une liste de client ou relation ou portefeuilles\r\n         * @param query\r\n         */\r\n        public getStatsRentab(query: Modeles.Rest.PortefeuillCorporateV1.statRentabilite.IStatRentabiliteParametres): ng.IPromise<Modeles.Rest.PortefeuillCorporateV1.statRentabilite.IStatRentabilite> {\r\n            StatRentabiliteService.logger.info(\">>> Appel de la méthode : StatRentabiliteService.getStatsRentab <<<\");\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_PORTEFEUILLECORPORATEV1_STATRENTABILITE,\r\n                method: MyWay.Services.MethodEnum.POST,\r\n                withHeaders: true,\r\n                data: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe StatRentabiliteService\r\n     */\r\n    export interface IStatRentabiliteService {\r\n        getStatsRentab(query: Modeles.Rest.PortefeuillCorporateV1.statRentabilite.IStatRentabiliteParametres): ng.IPromise<Modeles.Rest.PortefeuillCorporateV1.statRentabilite.IStatRentabilite>;\r\n    }\r\n\r\n    app.service(StatRentabiliteService.CLASS_NAME, StatRentabiliteService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.StatRevue {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de récupérer les information sur les statistiques de rentabilite\r\n     */\r\n\r\n    class StatRevueService implements IStatRevueService {\r\n        public static CLASS_NAME = \"StatRevueService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(StatRevueService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended\r\n        ];\r\n\r\n        //constructeur\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended) {\r\n        }\r\n\r\n        /**\r\n         * Méthode de récupération de la liste des données statistiques de rentabilite sur une liste de client ou relation ou portefeuilles\r\n         * @param query\r\n         */\r\n        public getStats(query: Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevueParametres): ng.IPromise<Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevue> {\r\n            StatRevueService.logger.info(\">>> Appel de la méthode : StatRevueService.getStats <<<\");\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_PROPOSITIONCORPORATEV1_STATREVUE,\r\n                method: MyWay.Services.MethodEnum.POST,\r\n                withHeaders: true,\r\n                data: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe StatRevueService\r\n     */\r\n    export interface IStatRevueService {\r\n        getStats(query: Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevueParametres): ng.IPromise<Modeles.Rest.PropositionCorporateV1.statRevue.IStatRevue>;\r\n    }\r\n\r\n    app.service(StatRevueService.CLASS_NAME, StatRevueService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.AgentV2.gestionAffectation {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de récupérer les information du corporate\r\n     */\r\n    class GestionAffectationService implements IGestionAffectationService {\r\n        public static CLASS_NAME = \"GestionAffectationService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(GestionAffectationService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended\r\n        ]; \r\n\r\n        //constructeur\r\n        constructor(\r\n            private serviceAgentExtended: MyWay.Services.ServiceAgentExtended\r\n        ) { }\r\n\r\n        /**\r\n         * Méthode permettant de de visualiser le détail de l'affectation d'un agent\r\n         * @param query\r\n         */\r\n        public getGestionAffectation(query: Modeles.Rest.AgentV2.gestionAffectation.IGestionAffectationQuery): ng.IPromise<Modeles.Rest.AgentV2.gestionAffectation.IGestionAffectation> {\r\n            GestionAffectationService.logger.info(\">>> Appel de la méthode : GestionAffectationService.getGestionAffectation <<<\");\r\n\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_AGENTV2_GESTION_AFFECTATION,\r\n                method: MyWay.Services.MethodEnum.GET,\r\n                withHeaders: true,\r\n                params: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe GestionAffectationService\r\n     */\r\n    export interface IGestionAffectationService {\r\n        getGestionAffectation(query: Modeles.Rest.AgentV2.gestionAffectation.IGestionAffectationQuery): ng.IPromise<Modeles.Rest.AgentV2.gestionAffectation.IGestionAffectation>;\r\n    }\r\n\r\n    app.service(\"GestionAffectationService\", GestionAffectationService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.AgentV2.recherche {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de récupérer les information du corporate\r\n     */\r\n    class RechercheAgentService implements IRechercheAgentService {\r\n        public static CLASS_NAME = \"RechercheAgentService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(RechercheAgentService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended\r\n        ];\r\n\r\n        //constructeur\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended) {}\r\n\r\n        public getListeCaracteristiquesAgent(query: Modeles.Rest.AgentV2.recherche.IRechercheAgentQuery): ng.IPromise<Modeles.Rest.AgentV2.recherche.IRechercheAgent> {\r\n            RechercheAgentService.logger.info(\">>> Appel de la méthode : RechercheAgentService.getListeCaracteristiquesAgent <<<\");\r\n\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_AGENTV2_RECHERCHE,\r\n                method: MyWay.Services.MethodEnum.GET,\r\n                withHeaders: true,\r\n                params: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe CorporateTiersLiesService\r\n     */\r\n    export interface IRechercheAgentService {\r\n        getListeCaracteristiquesAgent(query: Modeles.Rest.AgentV2.recherche.IRechercheAgentQuery): ng.IPromise<Modeles.Rest.AgentV2.recherche.IRechercheAgent>;\r\n    }\r\n\r\n    app.service(\"RechercheAgentService\", RechercheAgentService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.PreferenceUtilisateur {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de récupérer les information du corporate\r\n     */\r\n    class PreferenceUtilisateurService implements IPreferenceUtilisateurService {\r\n        public static CLASS_NAME = \"RechercheAgentService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(PreferenceUtilisateurService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended\r\n        ];\r\n\r\n        //constructeur\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended) { }\r\n\r\n        public getListePreferences(query: Modeles.Rest.PreferenceUtilisateur.IParametresEntree): ng.IPromise<Array<Modeles.Rest.PreferenceUtilisateur.IPreference>> {\r\n            PreferenceUtilisateurService.logger.info(\">>> Appel de la méthode : PreferenceUtilisateurService.getListeCaracteristiquesAgent <<<\");\r\n\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_PREFERENCE_UTILISATEUR,\r\n                method: MyWay.Services.MethodEnum.GET,\r\n                withHeaders: true,\r\n                params: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe CorporateTiersLiesService\r\n     */\r\n    export interface IPreferenceUtilisateurService {\r\n        getListePreferences(query: Modeles.Rest.PreferenceUtilisateur.IParametresEntree): ng.IPromise<Array<Modeles.Rest.PreferenceUtilisateur.IPreference>>;\r\n    }\r\n\r\n    app.service(\"PreferenceUtilisateurService\", PreferenceUtilisateurService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.Client {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de récupérer une liste de clients avec certains indicateurs\r\n     */\r\n\r\n    class ClientService implements IClientService {\r\n        public static CLASS_NAME = \"ClientService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(ClientService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$q\r\n        ];\r\n\r\n        //constructeur\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $q: ng.IQService) {\r\n        }\r\n\r\n        /**\r\n         * Méthode de récupération de la liste des clients avec certains indicateurs (/portefeuille/v1/client)\r\n         * @param query\r\n         */\r\n        public getClientsIndicateurs(query: Modeles.Rest.PortefeuilleV1.client.IParametresEntree): ng.IPromise<Modeles.Rest.PortefeuilleV1.client.IClient> {\r\n            ClientService.logger.info(\">>> Appel de la méthode : ClientService.getClientsIndicateurs <<<\");\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_PORTEFEUILLEV1_CLIENT,\r\n                method: MyWay.Services.MethodEnum.POST,\r\n                withHeaders: true,\r\n                data: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe ClientService\r\n     */\r\n    export interface IClientService {\r\n        getClientsIndicateurs(query: Modeles.Rest.PortefeuilleV1.client.IParametresEntree): ng.IPromise<Modeles.Rest.PortefeuilleV1.client.IClient>;\r\n    }\r\n\r\n    app.service(ClientService.CLASS_NAME, ClientService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.RecherchePortefeuille {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de récupérer les information du corporate\r\n     */\r\n\r\n    class RecherchePortefeuilleService implements IRecherchePortefeuilleService {\r\n        public static CLASS_NAME = \"RecherchePortefeuilleService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(RecherchePortefeuilleService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended\r\n        ];\r\n\r\n        //constructeur\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended) {}\r\n\r\n        /**\r\n         * Méthode de récupération de la liste des portefeuilles pour un élément de structure donné d'un agent (/portefeuille/v1/recherche)\r\n         * @param query\r\n         */\r\n        public getPortefeuilles(query: IRecherchePortefeuilleQuery): ng.IPromise<Modeles.Rest.PortefeuilleV1.recherche.IPortefeuilleRecherche> {\r\n            RecherchePortefeuilleService.logger.info(\">>> Appel de la méthode : RecherchePortefeuilleService.getPortefeuilles <<<\");\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_PORTEFEUILLEV1_RECHERCHE,\r\n                method: MyWay.Services.MethodEnum.GET,\r\n                withHeaders: true,\r\n                params: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n\r\n        /**\r\n         * Méthode de récupération de la liste des portefeuilles pour un pour un élément de structure donné (agence, centre, etc)  (/portefeuille/v1/recherche/getListe)\r\n         * @param query\r\n         */\r\n        public getlistePortefeuillesParEds(query: IRecherchePortefeuilleQuery): ng.IPromise<Modeles.Rest.PortefeuilleV1.recherche.IListePortefeuille> {\r\n            RecherchePortefeuilleService.logger.info(\">>> Appel de la méthode : RecherchePortefeuilleService.getPortefeuilles <<<\");\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_PORTEFEUILLEV1_RECHERCHE_LISTE,\r\n                method: MyWay.Services.MethodEnum.GET,\r\n                withHeaders: true,\r\n                params: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Interface représentant un objet pour la méthode GET\r\n     */\r\n    export interface IRecherchePortefeuilleQuery {\r\n        codeEtablissement: string;\r\n        IdentifianElementStructure: number;\r\n        typeRecherche: string;\r\n    }\r\n\r\n    /**\r\n     * Interface représentant un objet pour la méthode GET\r\n     */\r\n    export interface IListeRecherchePortefeuilleQuery {\r\n        codeEtablissement: string;\r\n        IdentifianElementStructure: number;\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe CorporateTiersLiesService\r\n     */\r\n    export interface IRecherchePortefeuilleService {\r\n        getPortefeuilles(\r\n            query: IRecherchePortefeuilleQuery): ng.IPromise<Modeles.Rest.PortefeuilleV1.recherche.IPortefeuilleRecherche>;\r\n        getlistePortefeuillesParEds(\r\n            query: IListeRecherchePortefeuilleQuery): ng.IPromise<Modeles.Rest.PortefeuilleV1.recherche.IListePortefeuille>;\r\n    }\r\n\r\n    app.service(\"RecherchePortefeuilleService\", RecherchePortefeuilleService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.RelationCommerciale {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de récupérer les information du corporate\r\n     */\r\n\r\n    class RelationCommercialeService implements IRechercheCommercialeService {\r\n        public static CLASS_NAME = \"RelationCommercialeService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(RelationCommercialeService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended\r\n        ];\r\n\r\n        //constructeur\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended) {\r\n        }\r\n\r\n        /**\r\n         * Méthode de récupération de la liste des relation eco et des clients avec certains indicateurs (/portefeuille/v1/relationCommerciale)\r\n         * @param query\r\n         */\r\n        public getRelationCommerciale(query: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommercialeParametres): ng.IPromise<Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale> {\r\n            RelationCommercialeService.logger.info(\">>> Appel de la méthode : RelationCommercialeService.getRelationCommerciale <<<\");\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_PORTEFEUILLEV1_RELATION_COMMERCIALE,\r\n                method: MyWay.Services.MethodEnum.POST,\r\n                withHeaders: true,\r\n                data: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe CorporateTiersLiesService\r\n     */\r\n    export interface IRechercheCommercialeService {\r\n        getRelationCommerciale(query: Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommercialeParametres): ng.IPromise<Modeles.Rest.PortefeuilleV1.relationCommerciale.IRelationCommerciale>;\r\n    }\r\n\r\n    app.service(RelationCommercialeService.CLASS_NAME, RelationCommercialeService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.SuiviComplementaire {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de récupérer les client expertise\r\n     */\r\n\r\n    class SuiviComplementaireService implements ISuiviComplementaireService {\r\n        public static CLASS_NAME = \"SuiviComplementaireService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(SuiviComplementaireService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended\r\n        ];\r\n\r\n        //constructeur\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended) {\r\n        }\r\n\r\n        /**\r\n         * Méthode de récupération de la liste des relation eco et des clients avec certains indicateurs (/portefeuille/v1/relationCommerciale)\r\n         * @param query\r\n         */\r\n        public getClientsSuiviComplementaire(query: Portefeuille.Modeles.Rest.PortefeuilleV1.suiviComplementaire.ISuiviComplementaire): ng.IPromise<Modeles.Rest.PortefeuilleV1.suiviComplementaire.ISuiviComplementaire> {\r\n            SuiviComplementaireService.logger.info(\">>> Appel de la méthode : SuiviComplementaireService.getClientsSuiviComplementaire <<<\");\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_PORTEFEUILLEV1_SUIVI_COMPLEMENTAIRE,\r\n                method: MyWay.Services.MethodEnum.POST,\r\n                withHeaders: true,\r\n                data: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe CorporateTiersLiesService\r\n     */\r\n    export interface ISuiviComplementaireService {\r\n        getClientsSuiviComplementaire(query: Portefeuille.Modeles.Rest.PortefeuilleV1.suiviComplementaire.ISuiviComplementaire): ng.IPromise<Modeles.Rest.PortefeuilleV1.suiviComplementaire.ISuiviComplementaire>;\r\n    }\r\n\r\n    app.service(SuiviComplementaireService.CLASS_NAME, SuiviComplementaireService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\n/**\r\n * \r\n */\r\nmodule Portefeuille.Services.Rest.PropositioncorporateV1.StatPortefeuilleEds {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * \r\n     */\r\n    class StatPortefeuilleEdsService implements IStatPortefeuilleEdsService {\r\n        public static CLASS_NAME = \"StatPortefeuilleEdsService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(StatPortefeuilleEdsService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended\r\n        ];\r\n\r\n        /**\r\n         * Constructeur\r\n         * @param serviceAgentExtended\r\n         */\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended) {\r\n        }\r\n\r\n        /**\r\n         * obtiens les données \r\n         * @param query\r\n         */\r\n        public getStatPortefeuilleEds(query: Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds):\r\n            ng.IPromise<Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds> {\r\n\r\n            StatPortefeuilleEdsService.logger.info(\">>> Appel de la méthode : StatPortefeuilleEdsService.getStatPortefeuilleEds <<<\");\r\n            let requete = {\r\n                url: Constantes.urlsRest.URL_REST_PROPOSITIONCORPORATEV1_STAT_PORTEFEUILLE_EDS,\r\n                method: MyWay.Services.MethodEnum.POST,\r\n                withHeaders: true,\r\n                data: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface IStatPortefeuilleEdsService\r\n     */\r\n    export interface IStatPortefeuilleEdsService {\r\n        getStatPortefeuilleEds(query: Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds):\r\n            ng.IPromise<Modeles.Rest.PropositionCorporateV1.statPortefeuilleEds.IStatPortefeuilleEds>;\r\n    }\r\n    app.service(\"StatPortefeuilleEdsService\", StatPortefeuilleEdsService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.Flux {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    /**\r\n     * Service permettant de récupérer une liste donnees flux\r\n     */\r\n\r\n    class FluxService implements IFluxService {\r\n        public static CLASS_NAME = \"FluxService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(FluxService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended,\r\n            Constantes.Inject.Angular.$q\r\n        ];\r\n\r\n        //constructeur\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended,\r\n            private $q: ng.IQService) {\r\n        }\r\n\r\n        /**\r\n         * Méthode de récupération de la liste des donnees flux\r\n         * @param query\r\n         */\r\n        public getFlux(query: any): ng.IPromise<Array<Modeles.Rest.SyntheseCorporateV1.flux.IInfosFlux>> {\r\n            FluxService.logger.info(\">>> Appel de la méthode : FluxService.getFlux <<<\");\r\n            var requete = {\r\n                url: Constantes.urlsRest.URL_REST_PORTEFEUILLEV1_CLIENT,\r\n                method: MyWay.Services.MethodEnum.POST,\r\n                withHeaders: true,\r\n                data: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface de la classe FluxService\r\n     */\r\n    export interface IFluxService {\r\n        getFlux(query: any): ng.IPromise<Array<Modeles.Rest.SyntheseCorporateV1.flux.IInfosFlux>>;\r\n    }\r\n\r\n    app.service(FluxService.CLASS_NAME, FluxService);\r\n}  ","/// <reference path=\"../../../constantes/inject-constantes.ts\" />\r\n\r\nmodule Portefeuille.Services.Rest.StructureV2.edsNiveauInferieur {\r\n    \"use strict\";\r\n    var loggerClass = MyWay.Services.Loggers.LoggerFactory.INSTANCE.getClass;\r\n\r\n    class EdsNiveauInferieurService implements IEdsNiveauInferieurService {\r\n        public static CLASS_NAME = \"EdsNiveauInferieurService\";\r\n        public static logger: MyWay.Services.Loggers.ILogger = loggerClass(EdsNiveauInferieurService.CLASS_NAME);\r\n\r\n        //Injection des dépendances\r\n        public static $inject = [\r\n            Constantes.Inject.MyWay.serviceAgentExtended\r\n        ];\r\n\r\n        //constructeur\r\n        constructor(private serviceAgentExtended: MyWay.Services.ServiceAgentExtended) { }\r\n\r\n        public getEdsNiveauInferieur(query: Modeles.Rest.StructureV2.edsniveauinferieur.IEdsniveauinferieurQuery):\r\n            ng.IPromise<Modeles.Rest.StructureV2.edsniveauinferieur.IEdsNiveauInferieur> {\r\n            EdsNiveauInferieurService.logger.info(\">>> Appel de la méthode : EdsNiveauInferieurService.getEdsNiveauInferieur <<<\");\r\n\r\n            let requete = {\r\n                url: Constantes.urlsRest.URL_REST_STRUCTUREV2_EDS_NIVEAU_INFERIEURE,\r\n                method: MyWay.Services.MethodEnum.GET,\r\n                withHeaders: true,\r\n                params: query,\r\n                responseType: MyWay.Services.ResponseTypeEnum.JSON\r\n            };\r\n\r\n            return this.serviceAgentExtended.sendRequest(requete);\r\n        }\r\n    }\r\n\r\n    export interface IEdsNiveauInferieurService {\r\n        getEdsNiveauInferieur(query: Modeles.Rest.StructureV2.edsniveauinferieur.IEdsniveauinferieurQuery):\r\n            ng.IPromise<Modeles.Rest.StructureV2.edsniveauinferieur.IEdsNiveauInferieur>;\r\n    }\r\n\r\n    app.service(\"EdsNiveauInferieurService\", EdsNiveauInferieurService);\r\n}  ",null],"sourceRoot":"/source/"}