"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        'use strict';
        /*
        * Classe globale d'erreur pour renvoyer dans les callback d'erreur ou lever des exceptions
        */
        var Erreur = /** @class */ (function () {
            function Erreur(codeLibelle, valeurs, causes) {
                this.codeLibelle = codeLibelle;
                this.valeurs = valeurs;
                this.causes = causes;
            }
            return Erreur;
        }());
        Services.Erreur = Erreur;
        var MonServiceDePromesse = /** @class */ (function () {
            function MonServiceDePromesse(innerService) {
                this.innerService = innerService;
            }
            MonServiceDePromesse.prototype.all = function (param) {
                return this.innerService.all(param);
            };
            MonServiceDePromesse.prototype.defer = function (erreurCallback) {
                return new MonDeferred(this.innerService.defer(), function (erreur) {
                    if (erreurCallback)
                        erreurCallback(erreur);
                });
            };
            MonServiceDePromesse.prototype.reject = function (reason) {
                return this.innerService.reject(reason);
            };
            MonServiceDePromesse.prototype.when = function (value) {
                return this.innerService.when(value);
            };
            return MonServiceDePromesse;
        }());
        Services.MonServiceDePromesse = MonServiceDePromesse;
        var MaPromesse = /** @class */ (function () {
            function MaPromesse(innerPromesse, erreurCallback) {
                this.innerPromesse = innerPromesse;
                this.erreurCallback = erreurCallback;
                this._catchHappened = false;
            }
            MaPromesse.prototype.then = function (onFulfill, onReject, onProgress) {
                return this.innerPromesse.then(onFulfill, onReject, onProgress);
            };
            MaPromesse.prototype.catch = function (onRejected) {
                this._catchHappened = true;
                return this.innerPromesse.catch(onRejected);
            };
            MaPromesse.prototype.finally = function (finallyCallback) {
                if (!this._catchHappened && this.erreurCallback)
                    this.erreurCallback(this.lastReason);
                return this.innerPromesse.finally(finallyCallback);
            };
            return MaPromesse;
        }());
        Services.MaPromesse = MaPromesse;
        var MonDeferred = /** @class */ (function () {
            function MonDeferred(innerDeferred, erreurCallback) {
                var _this = this;
                this.innerDeferred = innerDeferred;
                this.erreurCallback = erreurCallback;
                this.resolve = function (value) {
                    return _this.innerDeferred.resolve(value);
                };
                this.reject = function (reason) {
                    _this.promesse.lastReason = reason;
                    return _this.innerDeferred.reject(reason);
                };
                this.notify = function (state) {
                    return _this.innerDeferred.notify(state);
                };
                this.promesse = new MaPromesse(this.innerDeferred.promise, this.erreurCallback);
            }
            Object.defineProperty(MonDeferred.prototype, "promise", {
                get: function () {
                    return this.promesse;
                },
                enumerable: true,
                configurable: true
            });
            return MonDeferred;
        }());
        Services.MonDeferred = MonDeferred;
        var Promesses = /** @class */ (function () {
            function Promesses() {
            }
            Promesses.getServiceDePromesse = function () {
                if (!Promesses.ServiceDePromesse) {
                    // promesses
                    if (typeof angular != 'undefined') {
                        Promesses.ServiceDePromesse = new MonServiceDePromesse(angular.injector(['ng']).get('$q'));
                    }
                    else {
                        console.debug("[Framework Technique MyWay - Promesses - init] Angular n'est pas disponible");
                        Promesses.ServiceDePromesse = new MonServiceDePromesse(Q);
                    }
                }
                return Promesses.ServiceDePromesse;
            };
            Promesses.getPromesseSelfResoved = function () {
                if (!Promesses.promesseSelfResolved) {
                    var lDefered = Promesses.getServiceDePromesse().defer();
                    lDefered.resolve();
                    Promesses.promesseSelfResolved = lDefered.promise;
                }
                return Promesses.promesseSelfResolved;
            };
            Promesses.createPromiseSelfResolved = function (pValue) {
                var lDefered = Promesses.getServiceDePromesse().defer();
                lDefered.resolve(pValue);
                return lDefered.promise;
            };
            Promesses.createPromiseSelfError = function (pError) {
                var lDefered = Promesses.getServiceDePromesse().defer();
                lDefered.reject(pError);
                return lDefered.promise;
            };
            Promesses.promesseTryCatch = function (pCallback, pCallbackErreur) {
                var lDefer = Promesses.getServiceDePromesse().defer();
                try {
                    pCallback(lDefer);
                }
                catch (e) {
                    if (pCallbackErreur) {
                        pCallbackErreur(e, lDefer);
                    }
                    else {
                        lDefer.reject(e);
                    }
                }
                return lDefer.promise;
            };
            Promesses.prototype.promesseTryCatch = function (pCallback, pCallbackErreur) {
                return Promesses.promesseTryCatch(pCallback, pCallbackErreur);
            };
            Promesses.executePromisesSequentially = function (pPromises) {
                return Promesses.promesseTryCatch(function (pDefer) {
                    var lCallback = function (pIndex) {
                        try {
                            if (pPromises.length <= pIndex) {
                                pDefer.resolve();
                                return;
                            }
                            pPromises[pIndex]().then(function () {
                                lCallback(pIndex + 1);
                            }, function (pError) {
                                pDefer.reject(pError);
                            });
                        }
                        catch (e) {
                            pDefer.reject(new Erreur(e));
                        }
                    };
                    lCallback(0);
                });
            };
            Promesses.executePromisesSimultaneous = function (pPromises) {
                return Promesses.promesseTryCatch(function (pDefer) {
                    Promesses.getServiceDePromesse().all(pPromises).then(function () { pDefer.resolve(); }, pDefer.reject);
                });
            };
            Promesses.all = function (pPromises) {
                return Promesses.getServiceDePromesse().all(pPromises);
            };
            Promesses.executePromisesSimultaneousAndWaitAllResolves = function (pPromises) {
                var lPromisesAAttendre = [];
                pPromises.forEach(function (pPromise) {
                    lPromisesAAttendre.push(Promesses.promesseTryCatch(function (pPromiseFinally) {
                        pPromise.then(function (result) {
                            pPromiseFinally.resolve({
                                result: result,
                                isError: false
                            });
                        }, function (e) {
                            pPromiseFinally.resolve({
                                result: e,
                                isError: true
                            });
                        });
                    }));
                });
                return Promesses.getServiceDePromesse().all(lPromisesAAttendre).then(function (pResults) {
                    pResults.forEach(function (pPromiseResult) {
                        if (pPromiseResult.isError) {
                            throw pPromiseResult.result;
                        }
                    });
                });
            };
            Promesses.promesseSelfResolved = null;
            return Promesses;
        }());
        Services.Promesses = Promesses;
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var LEVEL;
            (function (LEVEL) {
                LEVEL[LEVEL["DEBUG"] = 'DEBUG'] = "DEBUG";
                LEVEL[LEVEL["INFO"] = 'INFO'] = "INFO";
                LEVEL[LEVEL["WARN"] = 'WARN'] = "WARN";
                LEVEL[LEVEL["ERROR"] = 'ERROR'] = "ERROR";
                LEVEL[LEVEL["NONE"] = 'NONE'] = "NONE";
            })(LEVEL = Loggers.LEVEL || (Loggers.LEVEL = {}));
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var LoggerFactory = /** @class */ (function () {
                function LoggerFactory() {
                    this.isInit = false;
                    this.LOGGER_ACTUEL = null;
                    this.appenders = {};
                    this.waitingAppenders = {};
                }
                Object.defineProperty(LoggerFactory, "INSTANCE", {
                    get: function () {
                        if (!LoggerFactory._INSTANCE) {
                            LoggerFactory._INSTANCE = new LoggerFactory();
                        }
                        return LoggerFactory._INSTANCE;
                    },
                    enumerable: true,
                    configurable: true
                });
                LoggerFactory.prototype.declareAppender = function (pClassPath, appenderClass) {
                    this.appenders[pClassPath] = appenderClass;
                    if (this.waitingAppenders[pClassPath]) {
                        this.waitingAppenders[pClassPath].forEach(function (pWaitingAppender) {
                            pWaitingAppender.setInternalAppender(appenderClass);
                        });
                        delete this.waitingAppenders[pClassPath];
                    }
                };
                LoggerFactory.prototype.getClassByName = function (pName) {
                    var lResult = window;
                    var lNames = pName.split('.');
                    lNames.forEach(function (pSubName) {
                        lResult = lResult[pSubName];
                    });
                    return lResult;
                };
                LoggerFactory.prototype.getClass = function (pClass) {
                    if (!Loggers.loggersParNom[pClass]) {
                        return new Loggers.Logger(pClass);
                    }
                    return Loggers.loggersParNom[pClass];
                };
                LoggerFactory.prototype.addAppender = function (pAppender) {
                    var lClass = this.appenders[pAppender.class];
                    if (!lClass) {
                        //L'appender n'est pas encore disponible, mets de côté les messages qui lui sont destinés
                        var lWaitingAppender = new Loggers.WaitingAppender(pAppender.type, pAppender.level, pAppender.config);
                        if (!this.waitingAppenders[pAppender.class]) {
                            this.waitingAppenders[pAppender.class] = [];
                        }
                        this.waitingAppenders[pAppender.class].push(lWaitingAppender);
                        Loggers.appenders.push(lWaitingAppender);
                    }
                    else {
                        var lAppender = new lClass(pAppender.type, pAppender.level, pAppender.config);
                        Loggers.appenders.push(lAppender);
                    }
                };
                LoggerFactory.prototype.addLogger = function (pLogger) {
                    var lLogger = {
                        name: pLogger.name,
                        level: pLogger.level,
                        appenders: []
                    };
                    pLogger.appenders.forEach(function (pAppenderName) {
                        Loggers.appenders.forEach(function (pAppender) {
                            if (pAppender.name === pAppenderName) {
                                lLogger.appenders.push(pAppender);
                            }
                        });
                    });
                    Loggers.categories.push(lLogger);
                };
                LoggerFactory.prototype.appenderToConfigAppender = function (pAppender) {
                    return {
                        class: pAppender.class,
                        config: pAppender.getConfig(),
                        level: pAppender.level,
                        type: pAppender.name
                    };
                };
                LoggerFactory.prototype.loggerToConfigLogger = function (pLogger) {
                    var lAppenders = [];
                    pLogger.appenders.forEach(function (pAppender) {
                        lAppenders.push(pAppender.name);
                    });
                    return {
                        appenders: lAppenders,
                        level: pLogger.level,
                        name: pLogger.name
                    };
                };
                LoggerFactory.prototype.rechargerConfigurationsLoggers = function () {
                    for (var lNom in Loggers.loggersParNom) {
                        Loggers.loggersParNom[lNom].verifierNiveauMinimum();
                    }
                };
                LoggerFactory.prototype.setConfigActual = function (pConfig) {
                    var _this = this;
                    Loggers.appenders = [];
                    Loggers.categories = [];
                    pConfig.appenders.forEach(function (pAppender) {
                        _this.addAppender(pAppender);
                    });
                    pConfig.loggers.forEach(function (pLogger) {
                        _this.addLogger(pLogger);
                    });
                    this.isInit = true;
                    this.rechargerConfigurationsLoggers();
                };
                LoggerFactory.prototype.setConfigDB = function (pNom, pConfig) {
                    localStorage.setItem('logger.' + pNom + '.config', JSON.stringify(pConfig));
                };
                LoggerFactory.prototype.getConfigurationActual = function () {
                    var _this = this;
                    var lResultat = {
                        appenders: [],
                        loggers: []
                    };
                    Loggers.appenders.forEach(function (pAppender) {
                        lResultat.appenders.push(_this.appenderToConfigAppender(pAppender));
                    });
                    Loggers.categories.forEach(function (pCategory) {
                        lResultat.loggers.push(_this.loggerToConfigLogger(pCategory));
                    });
                    return lResultat;
                };
                LoggerFactory.prototype.getConfigurationDB = function (pNom) {
                    var lResultat = JSON.parse(localStorage.getItem('logger.' + pNom + '.config'));
                    return lResultat;
                };
                LoggerFactory.prototype.saveConfiguration = function (pNom) {
                    var lConfig = this.getConfigurationActual();
                    localStorage.setItem('logger.' + pNom + '.config', JSON.stringify(lConfig));
                    localStorage.setItem('logger.' + pNom + '.version', '1');
                    this.LOGGER_ACTUEL = pNom;
                };
                LoggerFactory.prototype.loadConfiguration = function (pNom) {
                    var lPrefixName = "";
                    if (Loggers.DEFAULT_CONFIGURATION_PORTAIL) {
                        lPrefixName = "portail_";
                    }
                    else {
                        lPrefixName = "agent_";
                    }
                    if (!pNom) {
                        if (localStorage.getItem(lPrefixName + 'loggerActuel.name')) {
                            pNom = localStorage.getItem(lPrefixName + 'loggerActuel.name');
                        }
                        else if (Loggers.DEFAULT_CONFIGURATION_PORTAIL) {
                            pNom = LoggerFactory.LOGGER_PORTAIL;
                        }
                        else if (Loggers.DEFAULT_CONFIGURATION_AGENTS) {
                            pNom = LoggerFactory.LOGGER_AGENTS;
                        }
                        else {
                            throw 'Aucune configuration de LOG trouvée';
                        }
                    }
                    var lConfigString = localStorage.getItem('logger.' + pNom + '.config');
                    if (lConfigString) {
                        var lVersion = localStorage.getItem('logger.' + pNom + '.version');
                        if (lVersion !== '1') {
                            //Ne peut pas charger la configuration car version non reconnue!
                            //Charge la config par défaut sans écraser celle en base
                            switch (pNom) {
                                case LoggerFactory.LOGGER_PORTAIL:
                                    this.setConfigActual(Loggers.DEFAULT_CONFIGURATION_PORTAIL);
                                    this.LOGGER_ACTUEL = LoggerFactory.LOGGER_PORTAIL;
                                    pNom = LoggerFactory.LOGGER_PORTAIL;
                                    break;
                                case LoggerFactory.LOGGER_AGENTS:
                                    this.setConfigActual(Loggers.DEFAULT_CONFIGURATION_AGENTS);
                                    this.LOGGER_ACTUEL = LoggerFactory.LOGGER_AGENTS;
                                    pNom = LoggerFactory.LOGGER_AGENTS;
                                    break;
                                default:
                                    throw 'La configuration ' + pNom + ' est en version ' + lVersion + ' alors que les logs sont en version 1 maximum';
                            }
                        }
                        else {
                            var lConfig = JSON.parse(lConfigString);
                            this.setConfigActual(lConfig);
                            this.LOGGER_ACTUEL = pNom;
                        }
                    }
                    else {
                        //Pas de configuration enregistrée en DB
                        //Charge donc la config par défaut
                        switch (pNom) {
                            case LoggerFactory.LOGGER_PORTAIL:
                                this.setConfigActual(Loggers.DEFAULT_CONFIGURATION_PORTAIL);
                                this.LOGGER_ACTUEL = LoggerFactory.LOGGER_PORTAIL;
                                pNom = LoggerFactory.LOGGER_PORTAIL;
                                break;
                            case LoggerFactory.LOGGER_AGENTS:
                                this.setConfigActual(Loggers.DEFAULT_CONFIGURATION_AGENTS);
                                this.LOGGER_ACTUEL = LoggerFactory.LOGGER_AGENTS;
                                pNom = LoggerFactory.LOGGER_AGENTS;
                                break;
                            default:
                                if (Loggers.DEFAULT_CONFIGURATION_PORTAIL) {
                                    this.setConfigActual(Loggers.DEFAULT_CONFIGURATION_PORTAIL);
                                    this.LOGGER_ACTUEL = LoggerFactory.LOGGER_PORTAIL;
                                    pNom = LoggerFactory.LOGGER_PORTAIL;
                                }
                                else if (Loggers.DEFAULT_CONFIGURATION_AGENTS) {
                                    this.setConfigActual(Loggers.DEFAULT_CONFIGURATION_AGENTS);
                                    this.LOGGER_ACTUEL = LoggerFactory.LOGGER_AGENTS;
                                    pNom = LoggerFactory.LOGGER_AGENTS;
                                }
                                else {
                                    throw 'Impossible de charger une configuration de log';
                                }
                        }
                    }
                    localStorage.setItem(lPrefixName + 'loggerActuel.name', pNom);
                };
                LoggerFactory.prototype.getNomConfigActuelle = function () {
                    return this.LOGGER_ACTUEL;
                };
                LoggerFactory.prototype.getAllLogggersNames = function () {
                    var lLoggers = [];
                    lLoggers.push(LoggerFactory.LOGGER_PORTAIL);
                    lLoggers.push(LoggerFactory.LOGGER_AGENTS);
                    for (var i = localStorage.length; i--;) {
                        var lKey = localStorage.key(i);
                        var lKeyTab = /^logger\.([^.]+)\.config$/.exec(lKey);
                        if (!lKeyTab) {
                            continue;
                        }
                        var lLoggerName = lKeyTab[1];
                        if (lLoggerName === LoggerFactory.LOGGER_PORTAIL) {
                            continue;
                        }
                        if (lLoggerName === LoggerFactory.LOGGER_AGENTS) {
                            continue;
                        }
                        lLoggers.push(lLoggerName);
                    }
                    return lLoggers;
                };
                LoggerFactory.prototype.supprimerConfiguration = function (pNom) {
                    localStorage.removeItem('logger.' + pNom + '.config');
                    localStorage.removeItem('logger.' + pNom + '.version');
                };
                LoggerFactory.prototype.clearConfigurations = function () {
                    var _this = this;
                    localStorage.removeItem('portail_loggerActuel.name');
                    localStorage.removeItem('agent_loggerActuel.name');
                    this.getAllLogggersNames().forEach(function (pNom) {
                        _this.supprimerConfiguration(pNom);
                    });
                };
                LoggerFactory.LOGGER_PORTAIL = 'portail';
                LoggerFactory.LOGGER_AGENTS = 'agent';
                LoggerFactory._INSTANCE = null;
                return LoggerFactory;
            }());
            Loggers.LoggerFactory = LoggerFactory;
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            Loggers.appenders = [];
            Loggers.categories = [];
            Loggers.loggers = [];
            Loggers.loggersParNom = {};
            var LoggerHelper = /** @class */ (function () {
                function LoggerHelper() {
                }
                Object.defineProperty(LoggerHelper, "INSTANCE", {
                    get: function () {
                        if (!LoggerHelper._INSTANCE) {
                            LoggerHelper._INSTANCE = new LoggerHelper();
                        }
                        return LoggerHelper._INSTANCE;
                    },
                    enumerable: true,
                    configurable: true
                });
                LoggerHelper.prototype.testLevel = function (pLevelMessage, pLevelSortie) {
                    if (Services.PrivatePortalServiceParameters
                        && Services.PrivatePortalServiceParameters.Instance()
                        && Services.PrivatePortalServiceParameters.Instance().ModeDebug)
                        return true;
                    switch (pLevelSortie) {
                        case Loggers.LEVEL.DEBUG:
                            if (pLevelMessage === Loggers.LEVEL.DEBUG) {
                                return true;
                            }
                        case Loggers.LEVEL.INFO:
                            if (pLevelMessage === Loggers.LEVEL.INFO) {
                                return true;
                            }
                        case Loggers.LEVEL.WARN:
                            if (pLevelMessage === Loggers.LEVEL.WARN) {
                                return true;
                            }
                        case Loggers.LEVEL.ERROR:
                            if (pLevelMessage === Loggers.LEVEL.ERROR) {
                                return true;
                            }
                    }
                    return false;
                };
                LoggerHelper.prototype.getAppenders = function (pPackageName) {
                    var lResultats = [];
                    var lResultatsParAppender = {};
                    for (var i = Loggers.categories.length; i--;) {
                        var lCategorie = Loggers.categories[i];
                        lCategorie.appenders.forEach(function (pAppender) {
                            if ('*' !== lCategorie.name && !new RegExp('^' + lCategorie.name.replace('.', '\\.')).test(pPackageName)) {
                                return;
                            }
                            if (lResultatsParAppender[pAppender.name]) {
                                if (lResultatsParAppender[pAppender.name].packagename.length > lCategorie.name.length) {
                                    //Appender déjà enregistré avec un nom plus précis
                                    //ex : 'MyWay.Service' est moins précis que 'MyWay.Service.Loggers'
                                    return;
                                }
                                else {
                                    lResultatsParAppender[pAppender.name].levelMin = lCategorie.level;
                                    lResultatsParAppender[pAppender.name].packagename = lCategorie.name;
                                }
                            }
                            else {
                                var lDef = {
                                    appender: pAppender,
                                    levelMin: lCategorie.level,
                                    packagename: lCategorie.name
                                };
                                lResultatsParAppender[pAppender.name] = lDef;
                                lResultats.push(lDef);
                            }
                        });
                    }
                    return lResultats;
                };
                LoggerHelper.prototype.getContext = function () {
                    var lContext = Loggers.MDC.INSTANCE.getAll();
                    var lContextFlash = Loggers.FLASH.INSTANCE.getAll();
                    for (var lKey in lContextFlash) {
                        lContext[lKey] = lContextFlash[lKey];
                    }
                    return lContext;
                };
                LoggerHelper._INSTANCE = null;
                return LoggerHelper;
            }());
            Loggers.LoggerHelper = LoggerHelper;
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var Logger = /** @class */ (function () {
                function Logger(classe) {
                    this.packageName = null;
                    this.levelMinimum = Loggers.LEVEL.DEBUG;
                    this.appenders = [];
                    this._cache = [];
                    this.packageName = classe;
                    Loggers.loggers.push(this);
                    Loggers.loggersParNom[classe] = this;
                    this.verifierNiveauMinimum();
                }
                Logger.prototype.internalLog = function (pLevel, pMessage, args) {
                    var lDate = Loggers.FLASH.INSTANCE.getValue('dateLog');
                    if (!lDate) {
                        lDate = new Date();
                    }
                    var lTrace = {
                        arguments: args,
                        context: Loggers.LoggerHelper.INSTANCE.getContext(),
                        date: lDate.getTime(),
                        message: pMessage,
                        niveau: pLevel,
                        packageName: this.packageName
                    };
                    if (!Loggers.LoggerFactory.INSTANCE.isInit) {
                        this._cache.push(lTrace);
                        return;
                    }
                    this.tracer(lTrace);
                };
                Logger.prototype.tracer = function (pTrace) {
                    if (!Loggers.LoggerHelper.INSTANCE.testLevel(pTrace.niveau, this.levelMinimum)) {
                        return;
                    }
                    this.appenders.forEach(function (pAppender) {
                        pAppender.appender.append(pTrace);
                    });
                };
                Logger.prototype.debug = function (pMessage) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    this.internalLog(Loggers.LEVEL.DEBUG, pMessage, args);
                };
                Logger.prototype.info = function (pMessage) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    this.internalLog(Loggers.LEVEL.INFO, pMessage, args);
                };
                Logger.prototype.warn = function (pMessage) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    this.internalLog(Loggers.LEVEL.WARN, pMessage, args);
                };
                Logger.prototype.error = function (pMessage) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    this.internalLog(Loggers.LEVEL.ERROR, pMessage, args);
                };
                Logger.prototype.verifierNiveauMinimum = function () {
                    var _this = this;
                    this.appenders = Loggers.LoggerHelper.INSTANCE.getAppenders(this.packageName);
                    this.levelMinimum = null;
                    this.appenders.forEach(function (pAppender) {
                        if (_this.levelMinimum === null || Loggers.LoggerHelper.INSTANCE.testLevel(_this.levelMinimum, pAppender.levelMin)) {
                            _this.levelMinimum = pAppender.levelMin;
                        }
                    });
                    this.clearCache();
                };
                Logger.prototype.clearCache = function () {
                    var _this = this;
                    if (!Loggers.LoggerFactory.INSTANCE.isInit) {
                        return;
                    }
                    if (this._cache && this._cache.length > 0) {
                        this._cache.forEach(function (pTrace) {
                            _this.tracer(pTrace);
                        });
                        this._cache = [];
                    }
                };
                return Logger;
            }());
            Loggers.Logger = Logger;
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var MDC = /** @class */ (function () {
                function MDC() {
                    this.mdc = {};
                    this.stringify = null;
                }
                Object.defineProperty(MDC, "INSTANCE", {
                    get: function () {
                        if (!MDC._INSTANCE) {
                            MDC._INSTANCE = new MDC();
                        }
                        return MDC._INSTANCE;
                    },
                    enumerable: true,
                    configurable: true
                });
                MDC.prototype.setValue = function (pCle, pValeur) {
                    if (pValeur !== undefined) {
                        this.mdc[pCle] = pValeur;
                    }
                    else if (this.mdc[pCle]) {
                        delete this.mdc[pCle];
                    }
                    else {
                        return;
                    }
                    this.stringify = null;
                };
                MDC.prototype.getValue = function (pCle) {
                    return this.mdc[pCle];
                };
                MDC.prototype.remove = function (pCle) {
                    delete this.mdc[pCle];
                    this.stringify = null;
                };
                MDC.prototype.getAll = function () {
                    if (this.stringify === null) {
                        this.stringify = JSON.stringify(this.mdc);
                    }
                    return JSON.parse(this.stringify);
                };
                MDC._INSTANCE = null;
                return MDC;
            }());
            Loggers.MDC = MDC;
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var FLASH = /** @class */ (function () {
                function FLASH() {
                    this.flash = {};
                }
                Object.defineProperty(FLASH, "INSTANCE", {
                    get: function () {
                        if (!FLASH._INSTANCE) {
                            FLASH._INSTANCE = new FLASH();
                        }
                        return FLASH._INSTANCE;
                    },
                    enumerable: true,
                    configurable: true
                });
                FLASH.prototype.setValue = function (pCle, pValeur) {
                    if (pValeur !== undefined) {
                        this.flash[pCle] = pValeur;
                    }
                    else {
                        delete this.flash[pCle];
                    }
                };
                FLASH.prototype.getValue = function (pCle) {
                    var result = this.flash[pCle];
                    delete this.flash[pCle];
                    return result;
                };
                FLASH.prototype.setAll = function (pFlashs) {
                    this.flash = pFlashs;
                };
                FLASH.prototype.getAll = function () {
                    var lResults = JSON.parse(JSON.stringify(this.flash));
                    this.flash = {};
                    return lResults;
                };
                FLASH._INSTANCE = null;
                return FLASH;
            }());
            Loggers.FLASH = FLASH;
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var Appenders;
            (function (Appenders) {
                var AbstractAppender = /** @class */ (function () {
                    function AbstractAppender(name, 
                    //Bug Typescript qui empêche de déclarer un attribut "class" dans le constructeur
                    pClass, level, config) {
                        this.name = name;
                        this.level = level;
                        this.config = config;
                        this.class = null;
                        this.class = pClass;
                    }
                    AbstractAppender.prototype.getConfig = function () {
                        return this.config;
                    };
                    AbstractAppender.prototype.append = function (pMessage) {
                        if (!Loggers.LoggerHelper.INSTANCE.testLevel(pMessage.niveau, this.level)) {
                            return false;
                        }
                        this.onAppend(pMessage);
                        return true;
                    };
                    AbstractAppender.prototype.onAppend = function (pMessage) {
                        throw 'La méthode "onAppend" n\'a pas été surchargée';
                    };
                    return AbstractAppender;
                }());
                Appenders.AbstractAppender = AbstractAppender;
            })(Appenders = Loggers.Appenders || (Loggers.Appenders = {}));
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var Appenders;
            (function (Appenders) {
                var ConsoleAppender = /** @class */ (function (_super) {
                    __extends(ConsoleAppender, _super);
                    function ConsoleAppender(pNom, level, config) {
                        var _this = _super.call(this, pNom, ConsoleAppender.CLASSNAME, level, config) || this;
                        _this.format = null;
                        _this.parse(config.format);
                        return _this;
                    }
                    ConsoleAppender.prototype.onAppend = function (pMessage) {
                        var lResultat = '';
                        this.format.forEach(function (pFormater) {
                            lResultat += pFormater.format(pMessage);
                        });
                        switch (pMessage.niveau) {
                            case Loggers.LEVEL.DEBUG:
                                console.debug(lResultat);
                                break;
                            case Loggers.LEVEL.INFO:
                                console.info(lResultat);
                                break;
                            case Loggers.LEVEL.WARN:
                                console.warn(lResultat);
                                break;
                            case Loggers.LEVEL.ERROR:
                                console.error(lResultat);
                                break;
                        }
                    };
                    ConsoleAppender.prototype.parse = function (pFormat) {
                        var _this = this;
                        var lMorceaux = pFormat.split(/%([^ ]+)/g);
                        this.format = [];
                        lMorceaux.forEach(function (pMorceau) {
                            if (pMorceau.length === 0) {
                                return;
                            }
                            if (/^d/.test(pMorceau)) {
                                var lDateFormatTableau = pMorceau.split(/d{([^}]+)}/);
                                if (lDateFormatTableau.length !== 3) {
                                    _this.format.push(new Loggers.Formaters.DateFormater());
                                    return;
                                }
                                _this.format.push(new Loggers.Formaters.DateFormater(lDateFormatTableau[1]));
                                return;
                            }
                            if (/^level$/.test(pMorceau)) {
                                _this.format.push({
                                    format: function (pMessage) {
                                        return pMessage.niveau.toString();
                                    }
                                });
                                return;
                            }
                            if (/^class/.test(pMorceau)) {
                                _this.format.push({
                                    format: function (pMessage) {
                                        if (pMessage.packageName) {
                                            return pMessage.packageName;
                                        }
                                        else {
                                            return '';
                                        }
                                    }
                                });
                                return;
                            }
                            if (/^msg/.test(pMorceau)) {
                                _this.format.push(new Loggers.Formaters.MessageFormater());
                                return;
                            }
                            if (/^X/.test(pMorceau)) {
                                //Venant du contexte
                                var lMDCFormat = pMorceau.split(/X{([^}]+)}/);
                                if (lMDCFormat.length === 3) {
                                    _this.format.push({
                                        format: function (pMessage) {
                                            if (pMessage.context[lMDCFormat[1]]) {
                                                if (typeof pMessage.context[lMDCFormat[1]] === typeof "") {
                                                    return pMessage.context[lMDCFormat[1]];
                                                }
                                                else {
                                                    return JSON.stringify(pMessage.context[lMDCFormat[1]]);
                                                }
                                            }
                                            else {
                                                return '';
                                            }
                                        }
                                    });
                                    return;
                                }
                            }
                            //Non reconnu, recopie tel quel le morceau
                            _this.format.push({
                                format: function (pMessage) {
                                    return pMorceau;
                                }
                            });
                            return;
                        });
                    };
                    ConsoleAppender.CLASSNAME = "MyWay.Services.Loggers.Appenders.ConsoleAppender";
                    return ConsoleAppender;
                }(Appenders.AbstractAppender));
                Appenders.ConsoleAppender = ConsoleAppender;
                Loggers.LoggerFactory.INSTANCE.declareAppender(ConsoleAppender.CLASSNAME, ConsoleAppender);
            })(Appenders = Loggers.Appenders || (Loggers.Appenders = {}));
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var WaitingAppender = /** @class */ (function (_super) {
                __extends(WaitingAppender, _super);
                function WaitingAppender(name, level, config) {
                    var _this = _super.call(this, name, WaitingAppender.CLASSNAME, level, config) || this;
                    _this.internalAppender = null;
                    _this.messagesEnAttente = [];
                    return _this;
                }
                WaitingAppender.prototype.setInternalAppender = function (pClass) {
                    var _this = this;
                    this.internalAppender = new pClass(this.name, this.level, this.getConfig());
                    this.class = this.internalAppender.class;
                    this.messagesEnAttente.forEach(function (pMessage) {
                        _this.internalAppender.append(pMessage);
                    });
                    this.messagesEnAttente.length = 0;
                };
                WaitingAppender.prototype.onAppend = function (pMessage) {
                    if (this.internalAppender) {
                        return this.internalAppender.append(pMessage);
                    }
                    else {
                        //Mets le message de côté
                        this.messagesEnAttente.push(pMessage);
                        return true;
                    }
                };
                WaitingAppender.CLASSNAME = "MyWay.Services.Loggers.WaitingAppender";
                return WaitingAppender;
            }(Loggers.Appenders.AbstractAppender));
            Loggers.WaitingAppender = WaitingAppender;
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var Formaters;
            (function (Formaters) {
                var leftPad = function (pMorceauAFormater, pMorceauARajouter, pLongueurDesiree) {
                    var lResultat = pMorceauAFormater.toString();
                    while (lResultat.length < pLongueurDesiree) {
                        lResultat = pMorceauARajouter + lResultat;
                    }
                    return lResultat;
                };
                var DateFormater = /** @class */ (function () {
                    function DateFormater(pConfig) {
                        this.formatter = null;
                        this.parse(pConfig);
                    }
                    DateFormater.prototype.format = function (pMessage) {
                        var lResultat = '';
                        this.formatter.forEach(function (pFunction) {
                            lResultat += pFunction(new Date(pMessage.date));
                        });
                        return lResultat;
                    };
                    DateFormater.prototype.parse = function (pConfig) {
                        var _this = this;
                        this.formatter = [];
                        if (!pConfig) {
                            this.formatter.push(function (pDonnee) {
                                return pDonnee.getTime().toString();
                            });
                            return;
                        }
                        var lConfigAsTable = pConfig.split('');
                        var lNbIndexASauter = 0;
                        lConfigAsTable.forEach(function (pChar, pIndex) {
                            if (lNbIndexASauter > 0) {
                                lNbIndexASauter--;
                                return;
                            }
                            switch (pChar) {
                                case 'H':
                                    if (pConfig.charAt(pIndex + 1) === 'H') {
                                        //Two digits
                                        _this.formatter.push(function (pDonnee) {
                                            return leftPad(pDonnee.getHours().toString(), '0', 2);
                                        });
                                        lNbIndexASauter = 1;
                                    }
                                    else {
                                        //One or two digits
                                        _this.formatter.push(function (pDonnee) {
                                            return pDonnee.getHours().toString();
                                        });
                                    }
                                    break;
                                case 'm':
                                    if (pConfig.charAt(pIndex + 1) === 'm') {
                                        //Two digits
                                        _this.formatter.push(function (pDonnee) {
                                            return leftPad(pDonnee.getMinutes().toString(), '0', 2);
                                        });
                                        lNbIndexASauter = 1;
                                    }
                                    else {
                                        //One or two digits
                                        _this.formatter.push(function (pDonnee) {
                                            return pDonnee.getMinutes().toString();
                                        });
                                    }
                                    break;
                                case 's':
                                    if (pConfig.charAt(pIndex + 1) === 's') {
                                        //Two digits
                                        _this.formatter.push(function (pDonnee) {
                                            return leftPad(pDonnee.getSeconds().toString(), '0', 2);
                                        });
                                        lNbIndexASauter = 1;
                                    }
                                    else {
                                        //One or two digits
                                        _this.formatter.push(function (pDonnee) {
                                            return pDonnee.getSeconds().toString();
                                        });
                                    }
                                    break;
                                case 'S':
                                    if (pConfig.charAt(pIndex + 1) === 'S' && pConfig.charAt(pIndex + 2) === 'S') {
                                        //Three digits
                                        _this.formatter.push(function (pDonnee) {
                                            return leftPad(pDonnee.getMilliseconds().toString(), '0', 3);
                                        });
                                        lNbIndexASauter = 2;
                                    }
                                    else {
                                        //One or two or three digits
                                        _this.formatter.push(function (pDonnee) {
                                            return pDonnee.getMilliseconds().toString();
                                        });
                                    }
                                    break;
                                case 'Y':
                                    if (pConfig.charAt(pIndex + 1) === 'Y') {
                                        if (pConfig.charAt(pIndex + 2) === 'Y' && pConfig.charAt(pIndex + 3) === 'Y') {
                                            _this.formatter.push(function (pDonnee) {
                                                return leftPad(pDonnee.getFullYear().toString(), '0', 4);
                                            });
                                            lNbIndexASauter = 4;
                                        }
                                        else {
                                            _this.formatter.push(function (pDonnee) {
                                                return pDonnee.getFullYear().toString().substring(2, 4);
                                            });
                                            lNbIndexASauter = 2;
                                        }
                                    }
                                    else {
                                        _this.formatter.push(function (pDonnee) {
                                            return parseInt(pDonnee.getFullYear().toString().substring(2, 4), 10).toString();
                                        });
                                    }
                                    break;
                                case 'M':
                                    if (pConfig.charAt(pIndex + 1) === 'M') {
                                        //Two digits
                                        _this.formatter.push(function (pDonnee) {
                                            return leftPad((pDonnee.getMonth() + 1).toString(), '0', 2);
                                        });
                                        lNbIndexASauter = 1;
                                    }
                                    else {
                                        //One or two digits
                                        _this.formatter.push(function (pDonnee) {
                                            return (pDonnee.getMonth() + 1).toString();
                                        });
                                    }
                                    break;
                                case 'D':
                                    if (pConfig.charAt(pIndex + 1) === 'D') {
                                        //Two digits
                                        _this.formatter.push(function (pDonnee) {
                                            return leftPad(pDonnee.getDate().toString(), '0', 2);
                                        });
                                        lNbIndexASauter = 1;
                                    }
                                    else {
                                        //One or two digits
                                        _this.formatter.push(function (pDonnee) {
                                            return pDonnee.getDate().toString();
                                        });
                                    }
                                    break;
                                default:
                                    _this.formatter.push(function (pDonnee) {
                                        return pChar;
                                    });
                            }
                        });
                    };
                    return DateFormater;
                }());
                Formaters.DateFormater = DateFormater;
            })(Formaters = Loggers.Formaters || (Loggers.Formaters = {}));
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var Formaters;
            (function (Formaters) {
                var MessageFormater = /** @class */ (function () {
                    function MessageFormater() {
                    }
                    MessageFormater.prototype.format = function (pMessage) {
                        if (!pMessage.arguments || pMessage.arguments.length === 0) {
                            return pMessage.message;
                        }
                        var lResultat = pMessage.message;
                        pMessage.arguments.forEach(function (pArgument, pIndex) {
                            lResultat = lResultat.replace(new RegExp('%' + (pIndex + 1), 'g'), pArgument);
                        });
                        return lResultat;
                    };
                    return MessageFormater;
                }());
                Formaters.MessageFormater = MessageFormater;
            })(Formaters = Loggers.Formaters || (Loggers.Formaters = {}));
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var Messages;
            (function (Messages) {
                Messages.NOM_BIBLIOTHEQUE = 'Loggers';
                var TYPE;
                (function (TYPE) {
                    TYPE[TYPE["GET_CONFIG_ACTUAL"] = 'GET_CONFIG_ACTUAL'] = "GET_CONFIG_ACTUAL";
                    TYPE[TYPE["SET_CONFIG_ACTUAL"] = 'SET_CONFIG_ACTUAL'] = "SET_CONFIG_ACTUAL";
                    TYPE[TYPE["GET_CONFIG_DB"] = 'GET_CONFIG_DB'] = "GET_CONFIG_DB";
                    TYPE[TYPE["SET_CONFIG_DB"] = 'SET_CONFIG_DB'] = "SET_CONFIG_DB";
                    TYPE[TYPE["SAVE_CONFIG"] = 'SAVE_CONFIG'] = "SAVE_CONFIG";
                    TYPE[TYPE["LOAD_CONFIG"] = 'LOAD_CONFIG'] = "LOAD_CONFIG";
                    TYPE[TYPE["GET_LOGGERS"] = 'GET_LOGGERS'] = "GET_LOGGERS";
                    TYPE[TYPE["GET_NOM_CONFIG_ACTUELLE"] = 'GET_NOM_CONFIG_ACTUELLE'] = "GET_NOM_CONFIG_ACTUELLE";
                    TYPE[TYPE["IS_CLASS_EXISTS"] = 'IS_CLASS_EXISTS'] = "IS_CLASS_EXISTS";
                    TYPE[TYPE["RESET"] = 'RESET'] = "RESET";
                })(TYPE = Messages.TYPE || (Messages.TYPE = {}));
            })(Messages = Loggers.Messages || (Loggers.Messages = {}));
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            function loggerToTrace(pLogger) {
                return {
                    debug: function (message, action, object) {
                        if (action) {
                            Loggers.FLASH.INSTANCE.setValue('action', action);
                        }
                        if (object) {
                            Loggers.FLASH.INSTANCE.setValue('details', object);
                        }
                        pLogger.debug(message);
                    },
                    info: function (message, action, object) {
                        if (action) {
                            Loggers.FLASH.INSTANCE.setValue('action', action);
                        }
                        if (object) {
                            Loggers.FLASH.INSTANCE.setValue('details', object);
                        }
                        pLogger.info(message);
                    },
                    warning: function (message, action, object) {
                        if (action) {
                            Loggers.FLASH.INSTANCE.setValue('action', action);
                        }
                        if (object) {
                            Loggers.FLASH.INSTANCE.setValue('details', object);
                        }
                        pLogger.warn(message);
                    },
                    error: function (message, action, object) {
                        if (action) {
                            Loggers.FLASH.INSTANCE.setValue('action', action);
                        }
                        if (object) {
                            Loggers.FLASH.INSTANCE.setValue('details', object);
                        }
                        pLogger.error(message);
                    }
                };
            }
            Loggers.loggerToTrace = loggerToTrace;
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    /**
     * Informations statiques du Socle Technique Client
     */
    var Framework = /** @class */ (function () {
        function Framework() {
        }
        /**
         * Nom actuel du Socle Technique Client, utilisé dans les traces.
         * @type {string}
         */
        Framework.NAME = "Framework Technique";
        /**
         * Version actuelle du Socle Technique Client, utilisé dans les traces.
         * @type {string}
         */
        Framework.VERSION = "1";
        /**
         * Informations sur le build TFS ayant généré cette version du Socle Technique Client
         * @type {string}
         */
        Framework.BUILD = "Local";
        return Framework;
    }());
    MyWay.Framework = Framework;
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Core;
        (function (Core) {
            Core.override = function (pClass, pMethodeName, pContent) {
                var lOldMethod = pClass.prototype[pMethodeName];
                pClass.prototype[pMethodeName] = function () {
                    return pContent.apply(this, arguments);
                };
            };
            Core.defineProperty = function (pClass, pProperty, pGetterSetter) {
                Object.defineProperty(pClass.prototype, pProperty, {
                    get: pGetterSetter.get,
                    set: pGetterSetter.set,
                    enumerable: true,
                    configurable: true
                });
            };
        })(Core = Services.Core || (Services.Core = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var ScopeType;
            (function (ScopeType) {
                ScopeType[ScopeType["View"] = 1] = "View";
                ScopeType[ScopeType["Root"] = 2] = "Root";
                ScopeType[ScopeType["Service"] = 3] = "Service";
            })(ScopeType = Context.ScopeType || (Context.ScopeType = {}));
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            'use strict';
            var RegistryType;
            (function (RegistryType) {
            })(RegistryType = Components.RegistryType || (Components.RegistryType = {}));
            var AbstractRegistry = /** @class */ (function () {
                function AbstractRegistry(pRegistryType, pDependencies) {
                    this._components = [];
                    this._componentsInstances = [];
                    this._componentsInstancesByKey = {};
                    this._dependenciesInstances = null;
                    this._registryType = pRegistryType;
                    this._dependencies = pDependencies;
                }
                AbstractRegistry.prototype.register = function (pComponent) {
                    this._components.push(pComponent);
                };
                Object.defineProperty(AbstractRegistry.prototype, "components", {
                    get: function () {
                        return this._components;
                    },
                    enumerable: true,
                    configurable: true
                });
                AbstractRegistry.prototype.reset = function () {
                    this._components.length = 0;
                };
                AbstractRegistry.prototype.getComponentInstance = function (pName) {
                    return this._componentsInstancesByKey[pName];
                };
                AbstractRegistry.prototype.getComponentsInstances = function () {
                    return this._componentsInstances;
                };
                AbstractRegistry.prototype.getLibrary = function () {
                    return this._componentsInstancesByKey;
                };
                Object.defineProperty(AbstractRegistry.prototype, "registryType", {
                    get: function () {
                        return this._registryType;
                    },
                    enumerable: true,
                    configurable: true
                });
                AbstractRegistry.prototype.init = function (pComponent) {
                    //console.log("Registry : " + this._registryType + ", initialisation du composant " + pComponent);
                    this.createInstances();
                    var lInstance = this._componentsInstancesByKey[pComponent];
                    if (!lInstance) {
                        //Ignore component
                        //console.log("Registry : " + this._registryType + ", initialisation du composant " + pComponent + " => Ignoré!");
                        return Services.CoreCommon.getPromesseSelfResoved();
                    }
                    return this.initializeComponent(lInstance);
                };
                AbstractRegistry.prototype.createInstances = function () {
                    var _this = this;
                    this._components.forEach(function (pComponent) {
                        var lInstance = new pComponent();
                        _this._componentsInstances.push(lInstance);
                        _this._componentsInstancesByKey[lInstance.name] = lInstance;
                    });
                    this._components.length = 0;
                };
                Object.defineProperty(AbstractRegistry.prototype, "dependencies", {
                    get: function () {
                        return this._dependencies;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractRegistry.prototype, "dependenciesInstances", {
                    set: function (pInstances) {
                        this._dependenciesInstances = pInstances;
                    },
                    enumerable: true,
                    configurable: true
                });
                AbstractRegistry.prototype.dispose = function () {
                    var lPromises = [];
                    this._componentsInstances.forEach(function (pInstance) {
                        lPromises.push(pInstance.dispose());
                    });
                    return Services.CoreCommon.executePromisesSimultaneous(lPromises);
                };
                return AbstractRegistry;
            }());
            Components.AbstractRegistry = AbstractRegistry;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            'use strict';
            var FactoryRegistries = /** @class */ (function () {
                function FactoryRegistries() {
                    this.registries = [];
                    this.registriesByKeys = {};
                    this.dependencies = [];
                }
                FactoryRegistries.getInstance = function () {
                    if (FactoryRegistries.INSTANCE === null) {
                        FactoryRegistries.INSTANCE = new FactoryRegistries();
                    }
                    return FactoryRegistries.INSTANCE;
                };
                FactoryRegistries.prototype.reorderRegistries = function () {
                    var _this = this;
                    var lToposort = new Services.Toposort();
                    this.registries.forEach(function (pDependency) {
                        lToposort.add(pDependency.registryType, pDependency.dependencies);
                    });
                    var lReordered = lToposort.sort();
                    this.registries.length = 0;
                    lReordered.forEach(function (pDependency) {
                        if (!_this.registriesByKeys[pDependency]) {
                            //Case for tests, ignore it
                            return;
                        }
                        _this.registries.push(_this.registriesByKeys[pDependency]);
                    });
                };
                FactoryRegistries.prototype.reorderComponents = function () {
                    var _this = this;
                    var lToposort = new Services.Toposort();
                    var lDependenciesByKey = {};
                    this.dependencies.forEach(function (pDependency) {
                        lDependenciesByKey[pDependency.name] = pDependency;
                        lToposort.add(pDependency.name, pDependency.dependencies);
                    });
                    var lReordered = lToposort.sort();
                    this.dependencies.length = 0;
                    lReordered.forEach(function (pDependency) {
                        if (!lDependenciesByKey[pDependency]) {
                            //Case for tests, ignore it
                            return;
                        }
                        _this.dependencies.push(lDependenciesByKey[pDependency]);
                    });
                };
                FactoryRegistries.prototype.init = function () {
                    var _this = this;
                    this.reorderRegistries();
                    this.reorderComponents();
                    this.injectDependencies();
                    var lRegistryInitializations = [];
                    this.dependencies.forEach(function (pComponentDependencies) {
                        _this.registries.forEach(function (pRegistry) {
                            lRegistryInitializations.push(function () {
                                //FactoryRegistries.logger.debug("Registry : %1, initialisation du composant %2 => Démarrage!", pRegistry.registryType, pComponentDependencies.name);
                                return pRegistry.init(pComponentDependencies.name).then(function () {
                                    //FactoryRegistries.logger.debug("Registry : %1, initialisation du composant %2 => Terminé!", pRegistry.registryType, pComponentDependencies.name);
                                }, function (pErreur) {
                                    FactoryRegistries.logger.debug("Registry : %1, initialisation du composant %2 => Erreur!", pRegistry.registryType, pComponentDependencies.name);
                                    throw pErreur;
                                });
                            });
                        });
                    });
                    return Services.CoreCommon.executePromisesSequentially(lRegistryInitializations).then(function () {
                        //console.log("FactoryRegistry.init() OK");
                    }, console.error);
                };
                FactoryRegistries.prototype.injectDependencies = function () {
                    var _this = this;
                    this.registries.forEach(function (pRegistry) {
                        var lDependencies = pRegistry.dependencies;
                        var lInstances = [];
                        lDependencies.forEach(function (pRegistryType) {
                            var lRegistry = null;
                            _this.registries.every(function (pSubRegistry) {
                                if (pSubRegistry.registryType === pRegistryType) {
                                    lRegistry = pSubRegistry;
                                }
                                return lRegistry === null;
                            });
                            if (lRegistry === null) {
                                throw new Services.Erreur("Le registry de type " + pRegistryType + " n'a pas été trouvé!");
                            }
                            lInstances.push(lRegistry);
                        });
                        pRegistry.dependenciesInstances = lInstances;
                    });
                };
                FactoryRegistries.prototype.dispose = function () {
                    var lRegistryDisposes = [];
                    this.registries.forEach(function (pRegistry) {
                        lRegistryDisposes.push(function () {
                            return pRegistry.dispose();
                        });
                    });
                    return Services.CoreCommon.executePromisesSequentially(lRegistryDisposes);
                };
                FactoryRegistries.prototype.addRegistry = function (pRegistry) {
                    this.registries.push(pRegistry);
                    this.registriesByKeys[pRegistry.registryType] = pRegistry;
                };
                FactoryRegistries.prototype.declareComponent = function (pComponent, pDependencies) {
                    if (pComponent === undefined) {
                        throw new Services.Erreur("Tentative d'enregistrement de composant avant sa déclaration");
                    }
                    pDependencies.forEach(function (dependencie) {
                        if (dependencie === undefined) {
                            throw new Services.Erreur("Tentative d'enregistrement des dépendances du composant avant sa déclaration pour " + pComponent + ". Dependances :" + JSON.stringify(pDependencies));
                        }
                    });
                    this.dependencies.push({
                        dependencies: pDependencies,
                        name: pComponent
                    });
                };
                FactoryRegistries.prototype.getRegistryInstance = function (pRegistryType) {
                    return this.registriesByKeys[pRegistryType];
                };
                FactoryRegistries.INSTANCE = null;
                FactoryRegistries.CLASS_NAME = 'MyWay.Services.Components.FactoryRegistries';
                FactoryRegistries.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(FactoryRegistries.CLASS_NAME);
                return FactoryRegistries;
            }());
            Components.FactoryRegistries = FactoryRegistries;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            'use strict';
            var RegistryType;
            (function (RegistryType) {
                RegistryType["COMMON"] = "COMMON";
            })(RegistryType = Components.RegistryType || (Components.RegistryType = {}));
            var RegistryCommon = /** @class */ (function (_super) {
                __extends(RegistryCommon, _super);
                function RegistryCommon() {
                    return _super.call(this, RegistryType.COMMON, []) || this;
                }
                RegistryCommon.getInstance = function () {
                    if (RegistryCommon.instance === null) {
                        RegistryCommon.instance = new RegistryCommon();
                        Components.FactoryRegistries.getInstance().addRegistry(RegistryCommon.instance);
                    }
                    return RegistryCommon.instance;
                };
                RegistryCommon.prototype.initializeComponent = function (pComponent) {
                    return pComponent.init(this._componentsInstances);
                };
                RegistryCommon.instance = null;
                return RegistryCommon;
            }(Components.AbstractRegistry));
            Components.RegistryCommon = RegistryCommon;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentBase = /** @class */ (function () {
                //Logger: Trace.ILogger;
                function ComponentBase(_name) {
                    this._name = _name;
                }
                Object.defineProperty(ComponentBase.prototype, "name", {
                    get: function () {
                        return this._name;
                    },
                    enumerable: true,
                    configurable: true
                });
                ComponentBase.CLASS_NAMEBase = 'MyWay.Services.ComponentBase';
                ComponentBase.loggerBase = Services.Loggers.LoggerFactory.INSTANCE.getClass(ComponentBase.CLASS_NAMEBase);
                return ComponentBase;
            }());
            Components.ComponentBase = ComponentBase;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Controle"] = "Controle";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Controle;
        (function (Controle) {
            var ControleMessageSubject;
            (function (ControleMessageSubject) {
            })(ControleMessageSubject = Controle.ControleMessageSubject || (Controle.ControleMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Controle, []);
        })(Controle = Services.Controle || (Services.Controle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de contrôle - Contrôle any
* @module MyWay.Services.Controle
* classe : StaticAnyControle - public - Classe statique de contrôle du type any (classe utilisée depuis les managers)
* classe : AnyControle - public - Classe de contrôle du type any (classe utilisée depuis les agents)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Controle;
        (function (Controle) {
            /**
            * Classe statique de contrôle du type any (classe utilisée depuis les managers)
            * @classe StaticAnyControle
            * fonction : isNotUndefinedAndNotNull – public - Permet de contrôler que le paramètre en entrée n'est ni null ni undefined
            */
            var StaticAnyControle = /** @class */ (function () {
                function StaticAnyControle() {
                }
                /**
                * Contrôle que le paramètre en entrée n'est ni undefined ni null
                * @param value {any} valeur à contrôler
                */
                StaticAnyControle.isNotUndefinedAndNotNull = function (value) {
                    if (value !== undefined && value !== null)
                        return true;
                    else
                        return false;
                };
                return StaticAnyControle;
            }());
            Controle.StaticAnyControle = StaticAnyControle;
            /**
            * Classe de contrôle du type any (classe utilisée depuis les agents)
            * @classe AnyControle
            * fonction : isNotUndefinedAndNotNull – public - Permet de contrôler que le paramètre en entrée n'est ni null ni undefined
            */
            var AnyControle = /** @class */ (function () {
                function AnyControle() {
                }
                /**
                * Contrôle que le paramètre en entrée n'est ni undefined ni null
                * @param value {any} valeur à contrôler
                */
                AnyControle.prototype.isNotUndefinedAndNotNull = function (value) {
                    return StaticAnyControle.isNotUndefinedAndNotNull(value);
                };
                return AnyControle;
            }());
            Controle.AnyControle = AnyControle;
        })(Controle = Services.Controle || (Services.Controle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de contrôle des tableaux
* @module MyWay.Services.Controle
* classe : StaticArrayControle - public - Classe statique de contrôle des tableaux (classe utilisée depuis les managers)
* classe : ArrayControle - public - Classe de contrôle des tableaux (classe utilisée depuis les agents)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Controle;
        (function (Controle) {
            /**
            * Classe statique de contrôle des tableaux (classe utilisée depuis les managers)
            * @classe StaticArrayControle
            * fonction : isArray – public - Contrôle que le paramètre en entrée est un tableau,
            */
            var StaticArrayControle = /** @class */ (function () {
                function StaticArrayControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est un tableau
                * @param value {any} valeur à contrôler
                */
                StaticArrayControle.isArray = function (value) {
                    if (value !== undefined && value !== null && Object.prototype.toString.call(value) === '[object Array]')
                        return true;
                    else
                        return false;
                };
                return StaticArrayControle;
            }());
            Controle.StaticArrayControle = StaticArrayControle;
            /**
            * Classe statique de contrôle des tableaux (classe utilisée depuis les agents)
            * @classe ArrayControle
            * fonction : isArray – public - Contrôle que le paramètre en entrée est un tableau
            */
            var ArrayControle = /** @class */ (function () {
                function ArrayControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est un tableau
                * @param value {any} valeur à contrôler
                */
                ArrayControle.prototype.isArray = function (value) {
                    return StaticArrayControle.isArray(value);
                };
                return ArrayControle;
            }());
            Controle.ArrayControle = ArrayControle;
        })(Controle = Services.Controle || (Services.Controle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de contrôle - Contrôle des dates
* @module MyWay.Services.Controle
* classe : StaticDateControle - public - Classe statique de contrôle des dates (classe utilisée depuis les managers)
* classe : DateControle - public - Classe de contrôle des dates (classe utilisée depuis les agents)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Controle;
        (function (Controle) {
            /**
            * Classe statique de contrôle du type any (classe utilisée depuis les managers)
            * @classe StaticDateControle
            * fonction : isDate – public - Contrôle que le paramètre en entrée est une date
            */
            var StaticDateControle = /** @class */ (function () {
                function StaticDateControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est une date
                * @param value {any} valeur à contrôler
                */
                StaticDateControle.isDate = function (value) {
                    if (value !== undefined && value !== null && Object.prototype.toString.call(value) === '[object Date]')
                        return true;
                    else
                        return false;
                };
                return StaticDateControle;
            }());
            Controle.StaticDateControle = StaticDateControle;
            /**
            * Classe de contrôle du type any (classe utilisée depuis les agents)
            * @classe DateControle
            * fonction : isDate – public - Contrôle que le paramètre en entrée est une date
            */
            var DateControle = /** @class */ (function () {
                function DateControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est une date
                * @param value {any} valeur à contrôler
                */
                DateControle.prototype.isDate = function (value) {
                    return StaticDateControle.isDate(value);
                };
                return DateControle;
            }());
            Controle.DateControle = DateControle;
        })(Controle = Services.Controle || (Services.Controle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de contrôle - Contrôle des enum
* @module MyWay.Services.Controle
* classe : StaticEnumControle - public - Classe statique de contrôle des enum (classe utilisée depuis les managers)
* classe : EnumControle - public - Classe de contrôle des enum (classe utilisée depuis les agents)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Controle;
        (function (Controle) {
            /**
            * Classe statique de contrôle des enum (classe utilisée depuis les managers)
            * @classe StaticEnumControle
            * fonction : isAnEnumValueOrNullOrUndefined - public - Contrôle que la valeur est bien une valeur de l'enum ou null ou undefined
            * fonction : isAnEnumValue – public - Contrôle que la valeur est bien une valeur de l'enum
            * fonction : isAnEnumMember – public - Contrôle que le membre est bien un membre de l'enum
            */
            var StaticEnumControle = /** @class */ (function () {
                function StaticEnumControle() {
                }
                /**
                * Contrôle que la valeur est bien une valeur de l'enum ou null ou undefined
                * @param value {any} valeur à contrôler
                * @param enumObject {any} l'enum
                */
                StaticEnumControle.isAnEnumValueOrNullOrUndefined = function (value, enumObject) {
                    if (Controle.StaticAnyControle.isNotUndefinedAndNotNull(value))
                        return StaticEnumControle.isAnEnumValue(value, enumObject);
                    else
                        return true;
                };
                /**
                * Contrôle que la valeur est bien une valeur de l'enum
                * @param value {any} valeur à contrôler
                * @param enumObject {any} l'enum
                */
                StaticEnumControle.isAnEnumValue = function (value, enumClass) {
                    if (Controle.StaticNumberControle.isInt(value) && Controle.StaticObjectControle.isObject(enumClass)) {
                        for (var key in enumClass)
                            if (typeof enumClass[key] === 'number' && enumClass[key] === value)
                                return true;
                        return false;
                    }
                    else
                        return false;
                };
                /**
                * Contrôle que le membre est bien un membre de l'enum
                * @param member {any} membre à contrôler
                * @param enumObject {any} l'enum
                */
                StaticEnumControle.isAnEnumMember = function (member, enumClass) {
                    if (Controle.StaticStringControle.isString(member) && Controle.StaticObjectControle.isObject(enumClass)) {
                        for (var key in enumClass)
                            if (typeof enumClass[key] === 'number' && key === member)
                                return true;
                        return false;
                    }
                    else
                        return false;
                };
                return StaticEnumControle;
            }());
            Controle.StaticEnumControle = StaticEnumControle;
            /**
            * Classe de contrôle des enum (classe utilisée depuis les agents)
            * @classe EnumControle
            * fonction : isAnEnumValueOrNullOrUndefined - public - Contrôle que la valeur est bien une valeur de l'enum ou null ou undefined
            * fonction : isAnEnumValue – public - Contrôle que la valeur est bien une valeur de l'enum
            * fonction : isAnEnumMember – public - Contrôle que le membre est bien un membre de l'enum
            */
            var EnumControle = /** @class */ (function () {
                function EnumControle() {
                }
                /**
                * Contrôle que la valeur est bien une valeur de l'enum ou null ou undefined
                * @param value {any} valeur à contrôler
                * @param enumObject {any} l'enum
                */
                EnumControle.prototype.isAnEnumValueOrNullOrUndefined = function (value, enumObject) {
                    return StaticEnumControle.isAnEnumValueOrNullOrUndefined(value, enumObject);
                };
                /**
                * Contrôle que la valeur est bien une valeur de l'enum
                * @param value {any} valeur à contrôler
                * @param enumObject {any} l'enum
                */
                EnumControle.prototype.isAnEnumValue = function (value, enumObject) {
                    return StaticEnumControle.isAnEnumValue(value, enumObject);
                };
                /**
                * Contrôle que le membre est bien un membre de l'enum
                * @param member {any} membre à contrôler
                * @param enumObject {any} l'enum
                */
                EnumControle.prototype.isAnEnumMember = function (member, enumObject) {
                    return StaticEnumControle.isAnEnumMember(member, enumObject);
                };
                return EnumControle;
            }());
            Controle.EnumControle = EnumControle;
        })(Controle = Services.Controle || (Services.Controle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de contrôle - Contrôle des fonctions
* @module MyWay.Services.Controle
* classe : StaticFunctionControle - public - Classe statique de contrôle des fonctions (classe utilisée depuis les managers)
* classe : FunctionControle - public - Classe de contrôle des fonctions (classe utilisée depuis les agents)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Controle;
        (function (Controle) {
            /**
            * Classe statique de contrôle des fonctions (classe utilisée depuis les managers)
            * @classe StaticFunctionControle
            * fonction : isFunction – public - Contrôle que le paramètre en entrée est une fonction
            * fonction : isFunctionOrNull – public - Contrôle que le paramètre en entrée est une fonction ou null
            */
            var StaticFunctionControle = /** @class */ (function () {
                function StaticFunctionControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est une fonction
                * @param value {any} valeur à contrôler
                */
                StaticFunctionControle.isFunction = function (value) {
                    if (value !== undefined && value !== null && typeof value === "function")
                        return true;
                    else
                        return false;
                };
                /**
                * Contrôle que le paramètre en entrée est une fonction ou null
                * @param value {any} valeur à contrôler
                */
                StaticFunctionControle.isFunctionOrNull = function (value) {
                    if (value === null)
                        return true;
                    else
                        return this.isFunction(value);
                };
                return StaticFunctionControle;
            }());
            Controle.StaticFunctionControle = StaticFunctionControle;
            /**
            * Classe de contrôle des fonctions (classe utilisée depuis les agents)
            * @classe FunctionControle
            * fonction : isFunction – public - Contrôle que le paramètre en entrée est une fonction
            * fonction : isFunctionOrNull – public - Contrôle que le paramètre en entrée est une fonction ou null
            */
            var FunctionControle = /** @class */ (function () {
                function FunctionControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est une fonction
                * @param value {any} valeur à contrôler
                */
                FunctionControle.prototype.isFunction = function (value) {
                    return StaticFunctionControle.isFunction(value);
                };
                /**
                * Contrôle que le paramètre en entrée est une fonction ou null
                * @param value {any} valeur à contrôler
                */
                FunctionControle.prototype.isFunctionOrNull = function (value) {
                    return StaticFunctionControle.isFunctionOrNull(value);
                };
                return FunctionControle;
            }());
            Controle.FunctionControle = FunctionControle;
        })(Controle = Services.Controle || (Services.Controle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de contrôle - Contrôle des nombres
* @module MyWay.Services.Controle
* classe : StaticNumberControle - public - Classe statique de contrôle des nombres (classe utilisée depuis les managers)
* classe : NumberControle - public - Classe de contrôle des nombres (classe utilisée depuis les agents)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Controle;
        (function (Controle) {
            /**
            * Classe statique de contrôle des nombres (classe utilisée depuis les managers)
            * @classe StaticNumberControle
            * fonction : isNumber – public - Contrôle que le paramètre en entrée est un nombre
            * fonction : isInt – public - Contrôle que le paramètre en entrée est un nombre entier
            */
            var StaticNumberControle = /** @class */ (function () {
                function StaticNumberControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est un nombre
                * @param value {any} valeur à contrôler
                */
                StaticNumberControle.isNumber = function (value) {
                    if (value !== undefined && value !== null && typeof value === "number")
                        return true;
                    else
                        return false;
                };
                /**
                * Contrôle que le paramètre en entrée est un nombre entier
                * @param value {any} valeur à contrôler
                */
                StaticNumberControle.isInt = function (value) {
                    if (this.isNumber(value))
                        return value % 1 === 0;
                    else
                        return false;
                };
                return StaticNumberControle;
            }());
            Controle.StaticNumberControle = StaticNumberControle;
            /**
            * Classe de contrôle des nombres (classe utilisée depuis les managers)
            * @classe NumberControle
            * fonction : isNumber – public - Contrôle que le paramètre en entrée est un nombre
            * fonction : isInt – public - Contrôle que le paramètre en entrée est un nombre entier
            */
            var NumberControle = /** @class */ (function () {
                function NumberControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est un nombre
                * @param value {any} valeur à contrôler
                */
                NumberControle.prototype.isNumber = function (value) {
                    return StaticNumberControle.isNumber(value);
                };
                /**
                * Contrôle que le paramètre en entrée est un nombre entier
                * @param value {any} valeur à contrôler
                */
                NumberControle.prototype.isInt = function (value) {
                    return StaticNumberControle.isInt(value);
                };
                return NumberControle;
            }());
            Controle.NumberControle = NumberControle;
        })(Controle = Services.Controle || (Services.Controle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de contrôle - Contrôle des objets
* @module MyWay.Services.Controle
* classe : StaticObjectControle - public - Classe statique permettant d'appliquer un contrôle sur les objets (classe utilisée depuis les managers)
* classe : ObjectControler - public - Classe permettant d'appliquer un contrôle sur les objets (classe utilisée depuis les agents)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Controle;
        (function (Controle) {
            /**
            * Classe statique permettant d'appliquer un contrôle sur les objets (classe utilisée depuis les managers)
            * @classe StaticObjectControle
            * fonction : isObject – public - Contrôle que le paramètre en entrée est un objet de type Object
            * fonction : isObjectOrNull – public - Contrôle que le paramètre en entrée est un objet ou null
            * fonction : isObjectOrNullOrUndefined – public - Contrôle que le paramètre en entrée est un objet ou null ou undefined
            * fonction : isObjectSpecified – public - Contrôle que le paramètre en entrée est un objet correspondant au type spécifié
            */
            var StaticObjectControle = /** @class */ (function () {
                function StaticObjectControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est un objet de type Object
                * @param value {any} valeur à contrôler
                */
                StaticObjectControle.isObject = function (value) {
                    if (value !== undefined && value !== null && Object.prototype.toString.call(value) === '[object Object]')
                        return true;
                    else
                        return false;
                };
                /**
                * Contrôle que le paramètre en entrée est un objet ou null
                * @param value {any} valeur à contrôler
                */
                StaticObjectControle.isObjectOrNull = function (value) {
                    if (value === null)
                        return true;
                    else
                        return this.isObject(value);
                };
                /**
                * Contrôle que le paramètre en entrée est un objet ou null ou undefined
                * @param value {any} valeur à contrôler
                */
                StaticObjectControle.isObjectOrNullOrUndefined = function (value) {
                    if (value === undefined)
                        return true;
                    else
                        return this.isObjectOrNull(value);
                };
                /**
                * Contrôle que le paramètre en entrée est un objet correspondant au type spécifié
                * @param value {any} valeur à contrôler
                * @param objectType {string} type auquel doit correspondre la valeur
                */
                StaticObjectControle.isObjectSpecified = function (value, objectType) {
                    if (Controle.StaticStringControle.isStringNotEmpty(objectType))
                        if (value !== undefined && value !== null && Object.prototype.toString.call(value) === '[object ' + objectType + ']')
                            return true;
                        else
                            return false;
                    return false;
                };
                return StaticObjectControle;
            }());
            Controle.StaticObjectControle = StaticObjectControle;
            /**
            * Classe permettant d'appliquer un contrôle sur les objets (classe utilisée depuis les agents)
            * @classe ObjectControle
            * fonction : isObject – public - Contrôle que le paramètre en entrée est un objet de type Object
            * fonction : isObjectOrNull – public - Contrôle que le paramètre en entrée est un objet ou null
            * fonction : isObjectOrNullOrUndefined – public - Contrôle que le paramètre en entrée est un objet ou null ou undefined
            * fonction : isObjectSpecified – public - Contrôle que le paramètre en entrée est un objet correspondant au type spécifié
            */
            var ObjectControle = /** @class */ (function () {
                function ObjectControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est un objet de type Object
                * @param value {any} valeur à contrôler
                */
                ObjectControle.prototype.isObject = function (value) {
                    return StaticObjectControle.isObject(value);
                };
                /**
                * Contrôle que le paramètre en entrée est un objet ou null
                * @param value {any} valeur à contrôler
                */
                ObjectControle.prototype.isObjectOrNull = function (value) {
                    return StaticObjectControle.isObjectOrNull(value);
                };
                /**
                * Contrôle que le paramètre en entrée est un objet ou null ou undefined
                * @param value {any} valeur à contrôler
                */
                ObjectControle.prototype.isObjectOrNullOrUndefined = function (value) {
                    return StaticObjectControle.isObjectOrNullOrUndefined(value);
                };
                /**
                * Contrôle que le paramètre en entrée est un objet correspondant au type spécifié
                * @param value {any} valeur à contrôler
                * @param objectType {string} type auquel doit correspondre la valeur
                */
                ObjectControle.prototype.isObjectSpecified = function (value, objectType) {
                    return StaticObjectControle.isObjectSpecified(value, objectType);
                };
                return ObjectControle;
            }());
            Controle.ObjectControle = ObjectControle;
        })(Controle = Services.Controle || (Services.Controle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de contrôle - Contrôle des chaines de caractères
* @module MyWay.Services.Controle
* classe : StaticStringControle - public - Classe statique de contrôle des chaines de caractères (classe utilisée depuis les managers)
* classe : StringControle - public - Classe de contrôle des chaines de caractères (classe utilisée depuis les agents)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Controle;
        (function (Controle) {
            /**
            * Classe statique de contrôle des chaines de caractères (classe utilisée depuis les managers)
            * @classe StaticStringControle
            * fonction : isString – public - Contrôle que le paramètre en entrée est une chaine de caractères
            * fonction : isStringOrNull – public - Contrôle que le paramètre en entrée est une chaine de caractères ou null
            * fonction : isStringOrNullOrUndefined – public - Contrôle que le paramètre en entrée est une chaine de caractères ou null ou undefined
            * fonction : isStringNotEmpty – public - Contrôle que le paramètre en entrée est une chaine de caractères non vide
            * fonction : isStringNotEmptyOrNull – public - Contrôle que le paramètre en entrée est une chaine de caractères non vide ou null
            * fonction : isStringNotEmptyOrNullOrUndefined – public - Contrôle que le paramètre en entrée est une chaine de caractères non vide ou null ou undefined
            * fonction : isStringNotEmptyOrNullOrUndefined – public - Contrôle que le paramètre en entrée est une chaine de caractères non vide ou null ou undefined
            * fonction : isType - public - Contrôle que le paramètre [value] en entrée est correspond bien au [type] passé en paramètre
            */
            var StaticStringControle = /** @class */ (function () {
                function StaticStringControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est une chaine de caractères
                * @param value {any} valeur à contrôler
                */
                StaticStringControle.isString = function (value) {
                    if (value !== undefined && value !== null && typeof value === "string")
                        return true;
                    else
                        return false;
                };
                /**
                * Contrôle que le paramètre en entrée est une chaine de caractères ou null
                * @param value {any} valeur à contrôler
                */
                StaticStringControle.isStringOrNull = function (value) {
                    if (value === null)
                        return true;
                    else
                        return this.isString(value);
                };
                /**
                * Contrôle que le paramètre en entrée est une chaine de caractères ou null ou undefined
                * @param value {any} valeur à contrôler
                */
                StaticStringControle.isStringOrNullOrUndefined = function (value) {
                    if (value === undefined)
                        return true;
                    else
                        return this.isStringOrNull(value);
                };
                /**
                * Contrôle que le paramètre en entrée est une chaine de caractères non vide
                * @param value {any} valeur à contrôler
                */
                StaticStringControle.isStringNotEmpty = function (value) {
                    if (value === "")
                        return false;
                    else
                        return this.isString(value);
                };
                /**
                * Contrôle que le paramètre en entrée est une chaine de caractères non vide ou null
                * @param value {any} valeur à contrôler
                */
                StaticStringControle.isStringNotEmptyOrNull = function (value) {
                    if (value === "")
                        return false;
                    else
                        return this.isStringOrNull(value);
                };
                /**
                * Contrôle que le paramètre en entrée est une chaine de caractères non vide ou null ou undefined
                * @param value {any} valeur à contrôler
                */
                StaticStringControle.isStringNotEmptyOrNullOrUndefined = function (value) {
                    if (value === undefined)
                        return true;
                    else
                        return this.isStringNotEmptyOrNull(value);
                };
                return StaticStringControle;
            }());
            Controle.StaticStringControle = StaticStringControle;
            /**
            * Classe de contrôle des chaines de caractères (classe utilisée depuis les agents)
            * @classe StringControle
            * fonction : isString – public - Contrôle que le paramètre en entrée est une chaine de caractères
            * fonction : isStringOrNull – public - Contrôle que le paramètre en entrée est une chaine de caractères ou null
            * fonction : isStringOrNullOrUndefined – public - Contrôle que le paramètre en entrée est une chaine de caractères ou null ou undefined
            * fonction : isStringNotEmpty – public - Contrôle que le paramètre en entrée est une chaine de caractères non vide
            * fonction : isStringNotEmptyOrNull – public - Contrôle que le paramètre en entrée est une chaine de caractères non vide ou null
            * fonction : isStringNotEmptyOrNullOrUndefined – public - Contrôle que le paramètre en entrée est une chaine de caractères non vide ou null ou undefined
            */
            var StringControle = /** @class */ (function () {
                function StringControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est une chaine de caractères
                * @param value {any} valeur à contrôler
                */
                StringControle.prototype.isString = function (value) {
                    return StaticStringControle.isString(value);
                };
                /**
                * Contrôle que le paramètre en entrée est une chaine de caractères ou null
                * @param value {any} valeur à contrôler
                */
                StringControle.prototype.isStringOrNull = function (value) {
                    return StaticStringControle.isStringOrNull(value);
                };
                /**
                * Contrôle que le paramètre en entrée est une chaine de caractères ou null ou undefined
                * @param value {any} valeur à contrôler
                */
                StringControle.prototype.isStringOrNullOrUndefined = function (value) {
                    return StaticStringControle.isStringOrNullOrUndefined(value);
                };
                /**
                * Contrôle que le paramètre en entrée est une chaine de caractères non vide
                * @param value {any} valeur à contrôler
                */
                StringControle.prototype.isStringNotEmpty = function (value) {
                    return StaticStringControle.isStringNotEmpty(value);
                };
                /**
                * Contrôle que le paramètre en entrée est une chaine de caractères non vide ou null
                * @param value {any} valeur à contrôler
                */
                StringControle.prototype.isStringNotEmptyOrNull = function (value) {
                    return StaticStringControle.isStringNotEmptyOrNull(value);
                };
                /**
                * Contrôle que le paramètre en entrée est une chaine de caractères non vide ou null ou undefined
                * @param value {any} valeur à contrôler
                */
                StringControle.prototype.isStringNotEmptyOrNullOrUndefined = function (value) {
                    return StaticStringControle.isStringNotEmptyOrNullOrUndefined(value);
                };
                return StringControle;
            }());
            Controle.StringControle = StringControle;
        })(Controle = Services.Controle || (Services.Controle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de contrôle des booléens
* @module MyWay.Services.Controle
* classe : StaticBooleanControle - public - Classe statique de contrôle des booléens (classe utilisée depuis les managers)
* classe : BooleanControle - public - Classe de contrôle des booléens (classe utilisée depuis les agents)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Controle;
        (function (Controle) {
            /**
            * Classe statique de contrôle des booléens (classe utilisée depuis les managers)
            * @classe StaticBooleanControle
            * fonction : isBoolean – public - Contrôle que le paramètre en entrée est un booléen
            */
            var StaticBooleanControle = /** @class */ (function () {
                function StaticBooleanControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est un booléen
                * @param value {any} valeur à contrôler
                */
                StaticBooleanControle.isBoolean = function (value) {
                    if (value !== undefined && value !== null && Object.prototype.toString.call(value) === '[object Boolean]')
                        return true;
                    else
                        return false;
                };
                return StaticBooleanControle;
            }());
            Controle.StaticBooleanControle = StaticBooleanControle;
            /**
            * Classe de contrôle des booléens (classe utilisée depuis les agents)
            * @classe BooleanControle
            * fonction : isBoolean – public - Contrôle que le paramètre en entrée est un booléen
            */
            var BooleanControle = /** @class */ (function () {
                function BooleanControle() {
                }
                /**
                * Contrôle que le paramètre en entrée est un booléen
                * @param value {any} valeur à contrôler
                */
                BooleanControle.prototype.isBoolean = function (value) {
                    return StaticBooleanControle.isBoolean(value);
                };
                return BooleanControle;
            }());
            Controle.BooleanControle = BooleanControle;
        })(Controle = Services.Controle || (Services.Controle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de contrôle - Contrôle de paramétres
* @module MyWay.Services.Controle
* classe : StaticParametresControle - public - Classe statique de contrôle de paramétres (classe utilisée depuis les managers)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Controle;
        (function (Controle) {
            /**
            * Classe statique de contrôle de parametres (classe utilisée depuis les managers)
            * @classe StaticParametresControle
            * fonction : checkParameters – public - Permet de contrôler un ensemble de paramétres
            */
            var StaticParametresControle = /** @class */ (function () {
                function StaticParametresControle() {
                }
                /**
                * Permet de contrôler un ensemble de paramétres
                * Retourne une chaine de caractères correspondant à la description de l'ensemble des erreurs rencontrées (séparées par '/')
                * Si tous les contrôles sont OK, la chaine retournée est vide
                * @param parametres {parametre[]} Tableau de parametres à contrôler
                */
                StaticParametresControle.checkParameters = function (parametres) {
                    var controlResult = "";
                    var i;
                    for (i = 0; i < parametres.length; i++) {
                        switch (parametres[i].controle) {
                            case CONTROLES.isNotUndefinedAndNotNull:
                                if (!Controle.StaticAnyControle.isNotUndefinedAndNotNull(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' ne doit être ni null ni undefined / ";
                                break;
                            case CONTROLES.isArray:
                                if (!Controle.StaticArrayControle.isArray(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être un tableau / ";
                                break;
                            case CONTROLES.isBoolean:
                                if (!Controle.StaticBooleanControle.isBoolean(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être un booléen / ";
                                break;
                            case CONTROLES.isDate:
                                if (!Controle.StaticDateControle.isDate(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être une date / ";
                                break;
                            case CONTROLES.isAnEnumValue:
                                if (!Controle.StaticEnumControle.isAnEnumValue(parametres[i].value, parametres[i].enumObject))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être une valeur de l'enum '" + parametres[i].enumName + "' / ";
                                break;
                            case CONTROLES.isAnEnumMember:
                                if (!Controle.StaticEnumControle.isAnEnumMember(parametres[i].value, parametres[i].enumObject))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être un membre de l'enum '" + parametres[i].enumName + "' / ";
                                break;
                            case CONTROLES.isAnEnumValueOrNullOrUndefined:
                                if (!Controle.StaticEnumControle.isAnEnumValueOrNullOrUndefined(parametres[i].value, parametres[i].enumObject))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être une valeur de l'enum '" + parametres[i].enumName + "' ou null ou undefined / ";
                                break;
                            case CONTROLES.isFunction:
                                if (!Controle.StaticFunctionControle.isFunction(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être une fonction / ";
                                break;
                            case CONTROLES.isFunctionOrNull:
                                if (!Controle.StaticFunctionControle.isFunctionOrNull(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être une fonction ou null / ";
                                break;
                            case CONTROLES.isNumber:
                                if (!Controle.StaticNumberControle.isNumber(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être un nombre / ";
                                break;
                            case CONTROLES.isInt:
                                if (!Controle.StaticNumberControle.isInt(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être un nombre entier / ";
                                break;
                            case CONTROLES.isObject:
                                if (!Controle.StaticObjectControle.isObject(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être un objet / ";
                                break;
                            case CONTROLES.isObjectOrNull:
                                if (!Controle.StaticObjectControle.isObjectOrNull(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être un objet ou null / ";
                                break;
                            case CONTROLES.isObjectOrNullOrUndefined:
                                if (!Controle.StaticObjectControle.isObjectOrNullOrUndefined(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être un objet ou null ou undefined / ";
                                break;
                            case CONTROLES.isObjectSpecified:
                                if (!Controle.StaticObjectControle.isObjectSpecified(parametres[i].value, parametres[i].objectType))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être un objet de type '" + parametres[i].objectType + "' / ";
                                break;
                            case CONTROLES.isString:
                                if (!Controle.StaticStringControle.isString(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être une chaine de caractères / ";
                                break;
                            case CONTROLES.isStringOrNull:
                                if (!Controle.StaticStringControle.isStringOrNull(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être une chaine de caractères ou null / ";
                                break;
                            case CONTROLES.isStringOrNullOrUndefined:
                                if (!Controle.StaticStringControle.isStringOrNullOrUndefined(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être une chaine de caractères ou null ou undefined / ";
                                break;
                            case CONTROLES.isStringNotEmpty:
                                if (!Controle.StaticStringControle.isStringNotEmpty(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être une chaine de caractères non vide / ";
                                break;
                            case CONTROLES.isStringNotEmptyOrNull:
                                if (!Controle.StaticStringControle.isStringNotEmptyOrNull(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être une chaine de caractères non vide ou null / ";
                                break;
                            case CONTROLES.isStringNotEmptyOrNullOrUndefined:
                                if (!Controle.StaticStringControle.isStringNotEmptyOrNullOrUndefined(parametres[i].value))
                                    controlResult = controlResult + "Le paramètre '" + parametres[i].name + "' doit être une chaine de caractères non vide ou null ou undefined / ";
                                break;
                        }
                    }
                    if (controlResult != "")
                        controlResult = controlResult.substring(0, controlResult.lastIndexOf("/") - 1);
                    return controlResult;
                };
                return StaticParametresControle;
            }());
            Controle.StaticParametresControle = StaticParametresControle;
            /**
            * Enumération correspondant aux différents contrôles applicables sur une valeur
            * @enum Controle.CONTROLES
            */
            var CONTROLES;
            (function (CONTROLES) {
                CONTROLES[CONTROLES["isNotUndefinedAndNotNull"] = 0] = "isNotUndefinedAndNotNull";
                CONTROLES[CONTROLES["isArray"] = 100] = "isArray";
                CONTROLES[CONTROLES["isBoolean"] = 200] = "isBoolean";
                CONTROLES[CONTROLES["isDate"] = 300] = "isDate";
                CONTROLES[CONTROLES["isAnEnumValue"] = 400] = "isAnEnumValue";
                CONTROLES[CONTROLES["isAnEnumMember"] = 401] = "isAnEnumMember";
                CONTROLES[CONTROLES["isAnEnumValueOrNullOrUndefined"] = 402] = "isAnEnumValueOrNullOrUndefined";
                CONTROLES[CONTROLES["isFunction"] = 500] = "isFunction";
                CONTROLES[CONTROLES["isFunctionOrNull"] = 501] = "isFunctionOrNull";
                CONTROLES[CONTROLES["isNumber"] = 600] = "isNumber";
                CONTROLES[CONTROLES["isInt"] = 601] = "isInt";
                CONTROLES[CONTROLES["isObject"] = 700] = "isObject";
                CONTROLES[CONTROLES["isObjectOrNull"] = 701] = "isObjectOrNull";
                CONTROLES[CONTROLES["isObjectOrNullOrUndefined"] = 702] = "isObjectOrNullOrUndefined";
                CONTROLES[CONTROLES["isObjectSpecified"] = 703] = "isObjectSpecified";
                CONTROLES[CONTROLES["isString"] = 800] = "isString";
                CONTROLES[CONTROLES["isStringOrNull"] = 801] = "isStringOrNull";
                CONTROLES[CONTROLES["isStringOrNullOrUndefined"] = 802] = "isStringOrNullOrUndefined";
                CONTROLES[CONTROLES["isStringNotEmpty"] = 803] = "isStringNotEmpty";
                CONTROLES[CONTROLES["isStringNotEmptyOrNull"] = 804] = "isStringNotEmptyOrNull";
                CONTROLES[CONTROLES["isStringNotEmptyOrNullOrUndefined"] = 805] = "isStringNotEmptyOrNullOrUndefined";
            })(CONTROLES = Controle.CONTROLES || (Controle.CONTROLES = {}));
            ;
        })(Controle = Services.Controle || (Services.Controle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Message"] = "Message";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
            //Enregistrement du composant et de ses dépendances
            Components.FactoryRegistries.getInstance().declareComponent(Components.ComponentType.Message, []);
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        //export interface IServiceLibrary {
        //    Dates: Dates.DatesCommon;
        //    Common: ServiceCommon;
        //    Trace: Trace.ITraceService;
        //    Message: Message.IMessageService;
        //}
        var CommonEventType;
        (function (CommonEventType) {
            CommonEventType[CommonEventType["BriqueCommunication"] = 1] = "BriqueCommunication";
        })(CommonEventType = Services.CommonEventType || (Services.CommonEventType = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var PortalServiceParameters = /** @class */ (function () {
            function PortalServiceParameters() {
                if (PortalServiceParameters._instance) {
                    throw new Error("Error: Instantiation failed: Use PortalServiceParameters.Instance() instead of new.");
                }
                PortalServiceParameters._instance = this;
            }
            PortalServiceParameters.Instance = function () {
                if (PortalServiceParameters._instance === null) {
                    PortalServiceParameters._instance = new PortalServiceParameters();
                }
                return PortalServiceParameters._instance;
            };
            PortalServiceParameters._instance = null;
            return PortalServiceParameters;
        }());
        Services.PortalServiceParameters = PortalServiceParameters;
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Evennements"] = "Evennements";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Core"] = "Core";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        'use strict';
        var Toposort = /** @class */ (function () {
            function Toposort() {
                this._classCallCheck(this, Toposort);
                this.edges = [];
            }
            Toposort.prototype._classCallCheck = function (instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            };
            /**
             * Adds dependency edges.
             *
             * @since   0.1.0
             * @param   {String} item               An dependent name. Must be an string and not empty
             * @param   {String[]|String} [deps]    An dependency or array of dependencies
             * @returns {Toposort}                  The Toposort instance
             */
            Toposort.prototype.add = function (item, deps) {
                if (typeof item !== "string" || !item) {
                    throw new TypeError("Dependent name must be given as a not empty string");
                }
                deps = Array.isArray(deps) ? deps : [deps];
                var _i;
                if (deps.length > 0) {
                    for (var _iterator = deps, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ?
                        _iterator :
                        _iterator[Symbol.iterator]();;) {
                        var _ref;
                        if (_isArray) {
                            if (_i >= _iterator.length) {
                                break;
                            }
                            _ref = _iterator[_i++];
                        }
                        else {
                            _i = _iterator.next();
                            if (_i.done) {
                                break;
                            }
                            _ref = _i.value;
                        }
                        var dep = _ref;
                        if (typeof dep !== "string" || !dep) {
                            throw new TypeError("Dependency name must be given as a not empty string");
                        }
                        this.edges.push([item, dep]);
                    }
                }
                else {
                    this.edges.push([item]);
                }
                return this;
            };
            ;
            /**
             * Runs the toposorting and return an ordered array of strings
             *
             * @since   0.1.0
             * @returns {String[]}  The list of items topologically sorted.
             */
            Toposort.prototype.sort = function () {
                var _this = this;
                var nodes = [];
                //accumulate unique nodes into a large list
                for (var _iterator2 = this.edges, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ?
                    _iterator2 :
                    _iterator2[Symbol.iterator]();;) {
                    var _ref2;
                    if (_isArray2) {
                        if (_i2 >= _iterator2.length) {
                            break;
                        }
                        _ref2 = _iterator2[_i2++];
                    }
                    else {
                        _i2 = _iterator2.next();
                        if (_i2.done) {
                            break;
                        }
                        _ref2 = _i2.value;
                    }
                    var edge = _ref2;
                    for (var _iterator3 = edge, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ?
                        _iterator3 :
                        _iterator3[Symbol.iterator]();;) {
                        var _ref3;
                        if (_isArray3) {
                            if (_i3 >= _iterator3.length) {
                                break;
                            }
                            _ref3 = _iterator3[_i3++];
                        }
                        else {
                            _i3 = _iterator3.next();
                            if (_i3.done) {
                                break;
                            }
                            _ref3 = _i3.value;
                        }
                        var node = _ref3;
                        if (nodes.indexOf(node) === -1) {
                            nodes.push(node);
                        }
                    }
                }
                //initialize the placement of nodes into the sorted array at the end
                var place = nodes.length;
                //initialize the sorted array with the same length as the unique nodes array
                var sorted = new Array(nodes.length);
                //define a visitor function that recursively traverses dependencies.
                var visit = function visit(node, predecessors) {
                    //check if a node is dependent of itself
                    if (predecessors.length !== 0 && predecessors.indexOf(node) !== -1) {
                        throw new Error("Cyclic dependency found. " + node + " is dependent of itself.\nDependency chain: "
                            + predecessors.join(" -> ") + " => " + node);
                    }
                    var index = nodes.indexOf(node);
                    //if the node still exists, traverse its dependencies
                    if (index !== -1) {
                        var copy = false;
                        //mark the node as false to exclude it from future iterations
                        nodes[index] = false;
                        //loop through all edges and follow dependencies of the current node
                        for (var _iterator4 = _this.edges, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ?
                            _iterator4 :
                            _iterator4[Symbol.iterator]();;) {
                            var _ref4;
                            if (_isArray4) {
                                if (_i4 >= _iterator4.length) {
                                    break;
                                }
                                _ref4 = _iterator4[_i4++];
                            }
                            else {
                                _i4 = _iterator4.next();
                                if (_i4.done) {
                                    break;
                                }
                                _ref4 = _i4.value;
                            }
                            var edge = _ref4;
                            if (edge[0] === node) {
                                //lazily create a copy of predecessors with the current node concatenated onto it
                                copy = copy || predecessors.concat([node]);
                                //recurse to node dependencies
                                visit(edge[1], copy);
                            }
                        }
                        //add the node to the next place in the sorted array
                        sorted[--place] = node;
                    }
                };
                for (var i = 0; i < nodes.length; i++) {
                    var node = nodes[i];
                    //ignore nodes that have been excluded
                    if (node !== false) {
                        //mark the node as false to exclude it from future iterations
                        nodes[i] = false;
                        //loop through all edges and follow dependencies of the current node
                        for (var _iterator5 = this.edges, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ?
                            _iterator5 :
                            _iterator5[Symbol.iterator]();;) {
                            var _ref5;
                            if (_isArray5) {
                                if (_i5 >= _iterator5.length) {
                                    break;
                                }
                                _ref5 = _iterator5[_i5++];
                            }
                            else {
                                _i5 = _iterator5.next();
                                if (_i5.done) {
                                    break;
                                }
                                _ref5 = _i5.value;
                            }
                            var edge = _ref5;
                            if (edge[0] === node) {
                                //recurse to node dependencies
                                visit(edge[1], [node]);
                            }
                        }
                        //add the node to the next place in the sorted array
                        sorted[--place] = node;
                    }
                }
                var lResult = [];
                return sorted.reverse();
            };
            ;
            /**
             * Clears edges
             *
             * @since   0.4.0
             * @returns {Toposort}                  The Toposort instance
             */
            Toposort.prototype.clear = function () {
                this.edges = [];
                return this;
            };
            ;
            return Toposort;
        }());
        Services.Toposort = Toposort;
        var InstanceLoaderService = /** @class */ (function () {
            function InstanceLoaderService($parse) {
                this.$parse = $parse;
            }
            InstanceLoaderService.prototype.createInstance = function (name) {
                var args = [];
                for (var _a = 1; _a < arguments.length; _a++) {
                    args[_a - 1] = arguments[_a];
                }
                var instance = Object.create(this.$parse(name)(window).prototype);
                instance.constructor.apply(instance, args);
                return instance;
            };
            InstanceLoaderService.$inject = [
                "$parse",
            ];
            return InstanceLoaderService;
        }());
        Services.InstanceLoaderService = InstanceLoaderService;
        var CoreCommon = /** @class */ (function (_super) {
            __extends(CoreCommon, _super);
            function CoreCommon() {
                var _this = _super.call(this, Services.Components.ComponentType.Core) || this;
                _this._serviceLocalDisponible = false;
                _this.StringUtils = CoreCommon.StringUtils;
                _this.ObjectUtils = CoreCommon.ObjectUtils;
                return _this;
            }
            Object.defineProperty(CoreCommon, "ServiceDePromesse", {
                get: function () {
                    return Services.Promesses.getServiceDePromesse();
                },
                enumerable: true,
                configurable: true
            });
            CoreCommon.prototype.init = function () {
                return this.getPromesseSelfResoved();
            };
            CoreCommon.prototype.getServiceDePromesse = function () {
                return Services.Promesses.getServiceDePromesse();
            };
            CoreCommon.getPromesseSelfResoved = function () {
                return Services.Promesses.getPromesseSelfResoved();
            };
            CoreCommon.prototype.dispose = function () {
                return this.getPromesseSelfResoved();
            };
            CoreCommon.prototype.getPromesseSelfResoved = function () {
                return Services.Promesses.getPromesseSelfResoved();
            };
            CoreCommon.prototype.createPromiseSelfResolved = function (pValue) {
                return Services.Promesses.createPromiseSelfResolved(pValue);
            };
            CoreCommon.prototype.createPromiseSelfError = function (pError) {
                return Services.Promesses.createPromiseSelfError(pError);
            };
            CoreCommon.createPromiseSelfResolved = function (pValue) {
                return Services.Promesses.createPromiseSelfResolved(pValue);
            };
            CoreCommon.createPromiseSelfError = function (pError) {
                return Services.Promesses.createPromiseSelfError(pError);
            };
            CoreCommon.executePromisesSequentially = function (pPromises) {
                return Services.Promesses.executePromisesSequentially(pPromises);
            };
            CoreCommon.executePromisesSimultaneous = function (pPromises) {
                return Services.Promesses.executePromisesSimultaneous(pPromises);
            };
            CoreCommon.executePromisesSimultaneousAndWaitAllResolves = function (pPromises) {
                return Services.Promesses.executePromisesSimultaneousAndWaitAllResolves(pPromises);
            };
            CoreCommon.prototype.FindKeysToReplace = function (rawPathData) {
                var keys = [];
                var start = 0;
                var end = false;
                while (!end) {
                    var index = rawPathData.indexOf('[', start);
                    if (index >= 0) {
                        var index2 = rawPathData.indexOf(']', index);
                        if (index2 > 0) {
                            if (rawPathData.indexOf('[', index + 1) != -1 && rawPathData.indexOf('[', index + 1) < index2)
                                index = rawPathData.indexOf('[', index + 1);
                            var name = rawPathData.substring(index + 1, index2);
                            if (name[0] !== '"')
                                keys.push(name);
                        }
                        else {
                            end = true;
                        }
                        start = index2;
                    }
                    else {
                        end = true;
                    }
                }
                return keys;
            };
            /**
            * Permet de connaître le navigateur utilisé
            * @return {string}   nom du navigateur
            */
            CoreCommon.prototype.GetBrowser = function () {
                return CoreCommon.GetBrowserStatic();
            };
            CoreCommon.GetBrowserStatic = function () {
                if (!navigator && !navigator.platform) {
                    return null;
                }
                var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
                if (/trident/i.test(M[1])) {
                    tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
                    return 'IE ' + (tem[1] || '');
                }
                if (M[1] === 'Chrome') {
                    tem = ua.match(/\bOPR\/(\d+)/);
                    if (tem != null) {
                        return 'Opera ' + tem[1];
                    }
                }
                M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
                if ((tem = ua.match(/version\/(\d+)/i)) != null) {
                    M.splice(1, 1, tem[1]);
                }
                return M[0];
            };
            /**
            * Permet de connaître la version du navigateur utilisé
            * @return {string}   nom du navigateur
            */
            CoreCommon.prototype.GetBrowserVersion = function () {
                return CoreCommon.GetBrowserVersionStatic();
            };
            CoreCommon.GetBrowserVersionStatic = function () {
                if (!navigator && !navigator.platform) {
                    return null;
                }
                var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
                if (/trident/i.test(M[1])) {
                    tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
                    return 'IE ' + (tem[1] || '');
                }
                if (M[1] === 'Chrome') {
                    tem = ua.match(/\bOPR\/(\d+)/);
                    if (tem != null) {
                        return 'Opera ' + tem[1];
                    }
                }
                M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
                if ((tem = ua.match(/version\/(\d+)/i)) != null) {
                    M.splice(1, 1, tem[1]);
                }
                return M[1];
            };
            /**
            * Permet si le navigateur utilisé est un navigateur mobile ou non
            * @return {boolean}   oui : c'est un navigateur mobile
            */
            CoreCommon.IsMobileBrowser = function () {
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                    return true;
                }
                return false;
            };
            CoreCommon.prototype.SerializeScope = function (scope) {
                var scopeObject = {};
                this.ApplyProperties(scope, scopeObject);
                var json = JSON.stringify(scopeObject);
                return json;
            };
            CoreCommon.prototype.ApplyProperties = function (from, to) {
                for (var key in from) {
                    if (!from.hasOwnProperty(key))
                        continue;
                    if (key.substring(0, 1) === '$')
                        continue;
                    if (CoreCommon.IsFunction(from[key]))
                        continue;
                    to[key] = from[key];
                }
            };
            CoreCommon.IsFunction = function (functionToCheck) {
                var getType = {};
                return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
            };
            /**
            * Détermine si le navigateur utilisé est IE ou non
            */
            CoreCommon.checkIsIE = function () {
                var ieVersion = MyWay.Services.CoreCommon.getInternetExplorerVersion();
                if (ieVersion > -1)
                    return true;
                else
                    return false;
            };
            /**
            * Détermine si le service local est disponible ou non
            */
            CoreCommon.prototype.serviceLocalDisponible = function () {
                return this._serviceLocalDisponible;
            };
            /**
            * Retourne la version d'Internet Explorer
            */
            CoreCommon.getInternetExplorerVersion = function () {
                var rv = -1;
                if (navigator.appName == 'Microsoft Internet Explorer') {
                    var ua = navigator.userAgent;
                    var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
                    if (re.exec(ua) != null)
                        rv = parseFloat(RegExp.$1);
                }
                else if (navigator.appName == 'Netscape') {
                    var ua = navigator.userAgent;
                    var re = new RegExp("Trident/.*rv:([0-9]{1,}[\.0-9]{0,})");
                    if (re.exec(ua) != null)
                        rv = parseFloat(RegExp.$1);
                }
                return rv;
            };
            //FindValueFromAuthenticationInfo(authenticationInfo: Context.AuthentificationInfo, key) {
            //    return StaticServiceCommon.FindValueFromAuthenticationInfo(authenticationInfo, key);
            //    }
            CoreCommon.prototype.SwapArrayElements = function (arrayObject, index_a, index_b) {
                if (!arrayObject)
                    throw "arrayObject null";
                if (index_a < 0 || index_a > arrayObject.length - 1)
                    throw "index_a non valide";
                if (index_b < 0 || index_b > arrayObject.length - 1)
                    throw "index_b non valide";
                if (index_a === index_b)
                    return;
                var temp = arrayObject[index_a];
                arrayObject[index_a] = arrayObject[index_b];
                arrayObject[index_b] = temp;
            };
            CoreCommon.SendRequestWithPromise = function (settings) {
                var deferred = CoreCommon.ServiceDePromesse.defer();
                var ixhr;
                try {
                    ixhr = CoreCommon.SendRequest(settings, deferred.resolve, deferred.reject);
                }
                catch (e) {
                    deferred.reject(new Services.Erreur(e));
                }
                return deferred.promise;
            };
            CoreCommon.prototype.sendRequest = function (settings) {
                return this.promesseTryCatch(function (pDefer) {
                    CoreCommon.SendRequest(settings, pDefer.resolve, pDefer.reject);
                });
            };
            CoreCommon.SendRequest = function (settings, success, error) {
                var _this = this;
                //Check settings
                CoreCommon.CheckSettings(settings);
                //set url
                var url = settings.url;
                var params = '';
                if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(settings.params))
                    params = CoreCommon.GetParams(settings.params);
                if (url && params !== '')
                    url = url + "?" + params;
                var ixhr = {};
                if (url)
                    ixhr.url = url;
                else
                    ixhr.url = 'ceciestuntest?' + params; //for test purpose only
                ixhr.async = settings.async;
                ixhr.headers = {};
                //Ajoute en premier les headers additionnels pour qu'ils ne puissent pas overrider les headers framework
                if (settings.additionalHeaders) {
                    var key;
                    for (key in settings.additionalHeaders) {
                        var value = settings.additionalHeaders[key];
                        ixhr.headers[key] = value;
                    }
                }
                if (settings.method === MethodEnum.DELETE)
                    ixhr.method = "DELETE";
                else if (settings.method === MethodEnum.GET)
                    ixhr.method = "GET";
                else if (settings.method === MethodEnum.POST)
                    ixhr.method = "POST";
                else if (settings.method === MethodEnum.PUT)
                    ixhr.method = "PUT";
                if (settings.accept === AcceptEnum.ALL)
                    ixhr.headers["Accept"] = "*/*";
                else if (settings.accept === AcceptEnum.JSON)
                    ixhr.headers["Accept"] = "application/json";
                CoreCommon.AddMyWayHeaders(ixhr, settings);
                if (settings.data) {
                    if (settings.contentType === ContentTypeEnum.JSON) {
                        ixhr.data = JSON.stringify(settings.data);
                        ixhr.headers["Content-Type"] = "application/json";
                    }
                    else if (settings.contentType === ContentTypeEnum.URL_ENCODED) {
                        ixhr.data = CoreCommon.GetParams(settings.data);
                        ixhr.headers["Content-Type"] = "application/x-www-form-urlencoded";
                    }
                    else
                        throw "data is not null and settings is unknown";
                }
                switch (settings.responseType) {
                    case ResponseTypeEnum.BLOB:
                        ixhr.responseType = "blob";
                        break;
                    case ResponseTypeEnum.JSON:
                        ixhr.responseType = "json";
                        break;
                    case ResponseTypeEnum.EMPTY:
                        ixhr.responseType = "";
                        break;
                    default://NOT_DEFINED
                        if (settings.method === MethodEnum.GET) {
                            ixhr.responseType = "json";
                        }
                        else {
                            ixhr.responseType = "";
                        }
                        break;
                }
                if (settings.timeout) {
                    ixhr.timeout = settings.timeout;
                }
                if (settings.originalResponse === true) {
                    ixhr.originalResponse = true;
                }
                var successWrapper = function () {
                    var args = [];
                    for (var _a = 0; _a < arguments.length; _a++) {
                        args[_a] = arguments[_a];
                    }
                    //Traitement
                    if (success) {
                        success.apply(_this, args);
                    }
                    Services.Loggers.FLASH.INSTANCE.setValue('details', ixhr.url);
                    CoreCommon.logger.debug('SendRequest success');
                };
                var errorWrapper = function () {
                    var args = [];
                    for (var _a = 0; _a < arguments.length; _a++) {
                        args[_a] = arguments[_a];
                    }
                    //Traitement
                    if (error) {
                        error.apply(_this, args);
                    }
                    Services.Loggers.FLASH.INSTANCE.setValue('details', ixhr.url);
                    CoreCommon.logger.warn('SendRequest failed');
                };
                ixhr.success = successWrapper;
                ixhr.error = errorWrapper;
                if (url) {
                    CoreCommon.Send(ixhr, Services.Loggers.loggerToTrace(settings.logger), settings.withHeaders);
                }
                else {
                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'SendRequest');
                    CoreCommon.logger.warn('Aucune URL n\'a été fournie');
                    error(new Services.Erreur('Aucune URL n\'a été fournie'));
                }
                return ixhr;
            };
            CoreCommon.FixedEncodeURIComponent = function (str) {
                return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
                    return '%' + c.charCodeAt(0).toString(16);
                });
            };
            CoreCommon.GetParams = function (params) {
                var result = '';
                var first = true;
                if (!Services.Controle.StaticObjectControle.isObject(params))
                    return result;
                for (var prop in params) {
                    if (!Services.Controle.StaticStringControle.isStringNotEmpty(prop))
                        continue;
                    if (!params.hasOwnProperty(prop))
                        continue;
                    if (!first)
                        result += '&';
                    first = false;
                    // object
                    if (Services.Controle.StaticObjectControle.isObject(params[prop])) {
                        result += prop + '=' + this.FixedEncodeURIComponent(JSON.stringify(params[prop]));
                    }
                    else 
                    // array
                    if (Array.isArray(params[prop])) {
                        params[prop].forEach(function (value, index) {
                            result += (index > 0 ? '&' : '') + prop + '=' + value;
                        });
                    }
                    else {
                        result += prop + '=' + params[prop];
                    }
                }
                return result;
            };
            CoreCommon.addListenerOnAddMyWayHeaders = function (pCallback) {
                CoreCommon.listenersOnAddMyWayHeaders.push(pCallback);
            };
            CoreCommon.removeListenerOnAddMyWayHeaders = function (pCallback) {
                CoreCommon.ArrayUtils.remove(CoreCommon.listenersOnAddMyWayHeaders, function (pCurrentElement) {
                    return pCurrentElement === pCallback;
                });
            };
            CoreCommon.AddMyWayHeaders = function (ixhr, settings) {
                if (settings.withHeaders) {
                    ixhr.headers['X-versionComposant'] = settings.versionComposant;
                    ixhr.headers['X-typeOrigineComposant'] = '1';
                    ixhr.headers['X-dateHeureInstanciation'] = Date.now().toString(); //format
                    //Default
                    ixhr.headers['X-typeCanal'] = '01';
                    ixhr.headers['X-typeDevice'] = '01';
                    CoreCommon.listenersOnAddMyWayHeaders.forEach(function (pListener) {
                        pListener(ixhr.headers, settings);
                    });
                }
                if (!settings.cache) {
                    ixhr.headers['Cache-Control'] = 'no-cache';
                    ixhr.headers['Pragma'] = 'no-cache';
                }
            };
            CoreCommon.Send = function (ixhr, logger, withCredentials) {
                CoreCommon.logger.debug('Debut envoi requete: %1', ixhr.url);
                var isJSONRequest = false;
                if (CoreCommon.PreventMultipleJSONCalls) {
                    if (ixhr.url.length > 5 && ixhr.url.substring(ixhr.url.length - 5) === ".json") {
                        isJSONRequest = true;
                        if (CoreCommon.SavedJSON[ixhr.url]) {
                            ixhr.success(CoreCommon.SavedJSON[ixhr.url]);
                            return;
                        }
                    }
                }
                var xhr = new XMLHttpRequest();
                var ixhr = ixhr;
                xhr.open(ixhr.method, ixhr.url, ixhr.async);
                //Ajout pour authentification Kerberos
                /*
                    https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials
                    Note: Starting with Gecko 11.0 (Firefox 11.0 / Thunderbird 11.0 / SeaMonkey 2.8),
                    Gecko no longer lets you use the withCredentials attribute when performing synchronous requests.
                    Attempting to do so throws an NS_ERROR_DOM_INVALID_ACCESS_ERR exception.
                 */
                if (withCredentials && ixhr.async === true) {
                    xhr.withCredentials = true;
                }
                if (ixhr.async === true) {
                    //timeout only applies for asynchronous requests
                    if (ixhr.timeout) {
                        xhr.timeout = ixhr.timeout;
                    }
                    else {
                        //default timeout is 30 seconds
                        xhr.timeout = 30000;
                    }
                }
                xhr.ontimeout = function () {
                    CoreCommon.traiterErreur(xhr, ixhr, logger, null, true);
                };
                xhr.onload = function (e) {
                    if (xhr.status < 400) {
                        CoreCommon.logger.debug('Success requete: %1', ixhr.url);
                        if (Services.Controle.StaticFunctionControle.isFunction(ixhr.success)) {
                            if (ixhr.originalResponse) {
                                ixhr.success(xhr);
                            }
                            else {
                                var response = CoreCommon.GetResponse(xhr, ixhr.responseType, logger);
                                if (CoreCommon.PreventMultipleJSONCalls && isJSONRequest) {
                                    CoreCommon.SavedJSON[ixhr.url] = response;
                                }
                                ixhr.success(response);
                            }
                        }
                    }
                    else
                        CoreCommon.traiterErreur(xhr, ixhr, logger);
                };
                for (var key in ixhr.headers) {
                    var value = ixhr.headers[key];
                    xhr.setRequestHeader(key, value);
                }
                if (ixhr.async) {
                    xhr.onerror = function (xmlHttpRequestProgressEvent) {
                        CoreCommon.traiterErreur(xhr, ixhr, logger);
                    };
                    xhr.send(ixhr.data);
                }
                else {
                    try {
                        xhr.send(ixhr.data);
                    }
                    catch (error) {
                        CoreCommon.traiterErreur(xhr, ixhr, logger, error);
                    }
                }
            };
            CoreCommon.GetResponse = function (xhr, responseType, logger) {
                var response = xhr.response;
                //Cas spécial pour IE11
                if (Services.Controle.StaticStringControle.isString(xhr.response)
                    && xhr.response !== "" // si on parse une chaîne vide, on obtient obligatoirement une erreur
                    && (xhr.responseType === "json" || responseType === 'json')) {
                    try {
                        response = JSON.parse(xhr.response);
                    }
                    catch (e) {
                        var text = "une erreur (";
                        if (e) {
                            text += e.message;
                        }
                        text += ") est survenue en déserialisant le json suivant : '" + xhr.response + "'";
                        CoreCommon.logger.warn(text);
                    }
                }
                return response;
            };
            CoreCommon.traiterErreur = function (xhr, ixhr, logger, error, isTimeout) {
                if (logger) {
                    var objResponse = {};
                    if (xhr.response) {
                        if (Services.Controle.StaticStringControle.isString(xhr.response))
                            objResponse = { text: xhr.response };
                    }
                    if (isTimeout) {
                        objResponse.clientTimeout = true;
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'traiterErreur');
                        Services.Loggers.FLASH.INSTANCE.setValue('details', objResponse);
                        CoreCommon.logger.error('Erreur requete (timeout client): %1', ixhr.url);
                    }
                    else if (xhr.status == 0) {
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'traiterErreur');
                        Services.Loggers.FLASH.INSTANCE.setValue('details', objResponse);
                        CoreCommon.logger.error('Erreur requete (acces serveur impossible): %1', ixhr.url);
                    }
                    else {
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'traiterErreur');
                        Services.Loggers.FLASH.INSTANCE.setValue('details', objResponse);
                        CoreCommon.logger.error('Erreur requete (%1): %2', xhr.status, ixhr.url);
                    }
                }
                var erreur;
                if (Services.Controle.StaticFunctionControle.isFunction(ixhr.error)) {
                    if (error) {
                        // Il y a eu une exception pendant l'envoi de la requête
                        erreur = new ErreurClient(Services.Libelle.LibelleModel.COM.ERREUR_SERVEUR, [xhr.statusText + '\nErreur levée : ' + error.toString()], error);
                    }
                    else {
                        var response = CoreCommon.GetResponse(xhr, "json", logger);
                        if (Services.Controle.StaticObjectControle.isObject(response) && response.codeLibelle) {
                            // On récupère l'erreur du serveur dans la response (si xhr.responseType = "json")
                            erreur = response;
                            erreur.codeHttp = xhr.status;
                        }
                        else {
                            // Autres cas, serveur inaccessible, etc.
                            if (isTimeout) {
                                erreur = new ErreurServeur(xhr.status, Services.Libelle.LibelleModel.COM.ERREUR_TIMEOUT_CLIENT, xhr.statusText);
                            }
                            else if (xhr.status === 504)
                                erreur = new ErreurServeur(xhr.status, Services.Libelle.LibelleModel.COM.ERREUR_TIMEOUT_SERVEUR, xhr.statusText);
                            else if (xhr.status === 0)
                                erreur = new ErreurServeur(xhr.status, Services.Libelle.LibelleModel.COM.ERREUR_ACCES_SERVEUR, xhr.statusText);
                            else
                                erreur = new ErreurServeur(xhr.status, Services.Libelle.LibelleModel.COM.ERREUR_SERVEUR, xhr.statusText);
                        }
                    }
                    ixhr.error(erreur);
                }
            };
            CoreCommon.addListenerOnCheckSettings = function (pCallback) {
                this.listenersOnCheckSettings.push(pCallback);
            };
            CoreCommon.removeListenerOnCheckSettings = function (pCallback) {
                CoreCommon.ArrayUtils.remove(this.listenersOnCheckSettings, function (pCurrentElement) {
                    return pCurrentElement === pCallback;
                });
            };
            CoreCommon.CheckSettings = function (settings) {
                if (!Services.Controle.StaticObjectControle.isObject(settings))
                    throw "settings doit être un objet non null!";
                if (!Services.Controle.StaticEnumControle.isAnEnumValue(settings.method, MethodEnum)) {
                    if (!Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(settings.data))
                        settings.method = MethodEnum.GET;
                    else
                        settings.method = MethodEnum.POST;
                }
                if (!Services.Controle.StaticBooleanControle.isBoolean(settings.async))
                    settings.async = true;
                if (!Services.Controle.StaticEnumControle.isAnEnumValue(settings.contentType, ContentTypeEnum)) {
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(settings.data))
                        settings.contentType = ContentTypeEnum.JSON;
                    else
                        settings.contentType = ContentTypeEnum.NONE;
                }
                if (!Services.Controle.StaticEnumControle.isAnEnumValue(settings.accept, AcceptEnum))
                    settings.accept = AcceptEnum.ALL;
                if (!Services.Controle.StaticBooleanControle.isBoolean(settings.cache))
                    settings.cache = true;
                if (!Services.Controle.StaticBooleanControle.isBoolean(settings.withHeaders))
                    settings.withHeaders = true;
                if (!Services.Controle.StaticEnumControle.isAnEnumValue(settings.responseType, ResponseTypeEnum))
                    settings.responseType = ResponseTypeEnum.NOT_DEFINED;
                if (!settings.versionComposant && CoreCommon.VersionMySys)
                    settings.versionComposant = CoreCommon.VersionMySys;
                CoreCommon.listenersOnCheckSettings.forEach(function (pCallback) {
                    pCallback(settings);
                });
            };
            CoreCommon.creerChaineAleatoire = function (taille) {
                var randomString = Math.random().toString(36).substring(2);
                while (randomString.length < taille) {
                    randomString += Math.random().toString(36).substring(2);
                }
                if (randomString.length > taille) {
                    randomString = randomString.substring(0, taille);
                }
                return randomString;
            };
            CoreCommon.prototype.creerChaineAleatoire = function (taille) {
                return CoreCommon.creerChaineAleatoire(taille);
            };
            CoreCommon.applyProperties = function (source, target, propName) {
                if (!MyWay.Services.Controle.StaticObjectControle.isObject(source[propName]))
                    target[propName] = source[propName];
                else {
                    if (!target[propName])
                        target[propName] = {};
                    for (var index in source[propName]) {
                        if (MyWay.Services.Controle.StaticObjectControle.isObject(source[propName][index])) {
                            this.applyProperties(source[propName], target[propName], index);
                        }
                        else {
                            target[propName][index] = source[propName][index];
                        }
                    }
                }
            };
            /**
            * Permet le chargement dynamique d'un script présent dans le repertoire services du cdn
            * @param {string}   path
            * nom du fichier à charger
            */
            CoreCommon.loadCdnServiceScript = function (path) {
                var baseFolder = CoreCommon.getBaseFolder(path);
                if (baseFolder) {
                    CoreCommon.loadScript(baseFolder + '/' + path);
                }
            };
            /**
            * Permet le chargement dynamique d'un script présent dans le repertoire services-addons du cdn
            * @param {string}   path
            * nom du fichier à charger
            */
            CoreCommon.loadCdnAddonsServiceScript = function (path) {
                var baseFolder = CoreCommon.getBaseFolder(path);
                if (baseFolder) {
                    CoreCommon.loadScript(baseFolder + '/../services-addons/' + path);
                }
            };
            /**
            * Permet le récuperer le chemin d'un fichier de framework
            * @param {string}   path
            * nom du fichier à charger
            */
            CoreCommon.getBaseFolder = function (path) {
                var scripts = document.getElementsByTagName("script");
                var baseSrc = null;
                for (var i in scripts) {
                    var script = scripts[i];
                    if (!script || !script.src)
                        continue;
                    if (script.src.indexOf('framework-client-') > 0) {
                        baseSrc = script.src;
                        break;
                    }
                }
                if (baseSrc) {
                    var baseFolder = '';
                    var parts = baseSrc.split('/');
                    for (var ii = 0; ii < parts.length - 1; ii++) {
                        baseFolder += parts[ii] + '/';
                    }
                    return baseFolder.substr(0, baseFolder.length - 1);
                }
                else {
                    return null;
                }
            };
            /**
            * Permet le chargement dynamique d'un script JS
            * @param {string}   path
            * chemin du fichier à charger
            */
            CoreCommon.loadScript = function (path) {
                var head = document.getElementsByTagName('body')[0];
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = path;
                head.appendChild(script);
            };
            /**
             * Permet d'encoder certains caractères d'une string dont ~!*()' pour les passer en paramètres d'une URL
             * @param  {string} str Chaine de caractères à encoder
             * @return {string}     Chaine de caractères encodée
             */
            CoreCommon.encoderURL = function (str) {
                return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
                    return '%' + c.charCodeAt(0).toString(16);
                });
            };
            CoreCommon.promesseTryCatch = function (pCallback, pCallbackErreur) {
                return Services.Promesses.promesseTryCatch(pCallback, pCallbackErreur);
            };
            CoreCommon.prototype.promesseTryCatch = function (pCallback, pCallbackErreur) {
                return Services.Promesses.promesseTryCatch(pCallback, pCallbackErreur);
            };
            /**
             * Test si la valeur passé en paramètre est un objet
             *
             * @param {any} item la valeur à tester
             *
             * @return {boolean} true si c'est un objet sinon false
             */
            CoreCommon.isObject = function (item) {
                return (item && typeof item === 'object' && !Array.isArray(item) && item !== null);
            };
            CoreCommon.CLASS_NAME = 'MyWay.Services.CoreCommon';
            CoreCommon.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(CoreCommon.CLASS_NAME);
            CoreCommon.PreventMultipleJSONCalls = false;
            CoreCommon.VersionMySys = null;
            CoreCommon.listenersOnAddMyWayHeaders = [];
            CoreCommon.SavedJSON = [];
            CoreCommon.listenersOnCheckSettings = [];
            /**
             * Utilitaires pour le traitement des strings
             */
            CoreCommon.StringUtils = {
                /**
                 * Ajout de caractères en début de chaine
                 * @param pMorceauAFormater Chaîne d'origine
                 * @param pMorceauARajouter Caractères à ajouter en début pour compléter la longueur voulue
                 * @param pLongueurDesiree Longueur minimum désirée
                 */
                leftPad: function (pMorceauAFormater, pMorceauARajouter, pLongueurDesiree) {
                    var lResultat = pMorceauAFormater.toString();
                    while (lResultat.length < pLongueurDesiree) {
                        lResultat = pMorceauARajouter + lResultat;
                    }
                    return lResultat;
                },
                /**
                 * Ajout de caractères en fin de chaine
                 * @param pMorceauAFormater Chaîne d'origine
                 * @param pMorceauARajouter Caractères à ajouter en fin pour compléter la longueur voulue
                 * @param pLongueurDesiree Longueur minimum désirée
                 */
                rightPad: function (pMorceauAFormater, pMorceauARajouter, pLongueurDesiree) {
                    var lResultat = pMorceauAFormater.toString();
                    while (lResultat.length < pLongueurDesiree) {
                        lResultat = lResultat + pMorceauARajouter;
                    }
                    return lResultat;
                }
            };
            /**
             * Utilitaires pour les tableaux
             */
            CoreCommon.ArrayUtils = {
                /**
                 * Suppression d'éléments dans un tableau. Travaille directement sur le tableau passé en paramètre
                 * @param pArray Tableau à modifier
                 * @param pCompare Callback. Si retourne "true" alors l'élément sera supprimé
                 * @return Le même tableau (même instance mémoire) modifié
                 */
                remove: function (pArray, pCompare) {
                    if (!pArray) {
                        return pArray;
                    }
                    var lTaille = pArray.length;
                    var lNouveauTableau = [];
                    for (var i = 0; i < lTaille; i++) {
                        var pElementCourant = pArray[i];
                        if (!pCompare(pElementCourant)) {
                            lNouveauTableau.push(pElementCourant);
                        }
                    }
                    ;
                    lTaille = lNouveauTableau.length;
                    for (var i = 0; i < lTaille; i++) {
                        pArray[i] = lNouveauTableau[i];
                    }
                    pArray.length = lNouveauTableau.length;
                    return pArray;
                },
                /**
                 * Test si une clé est présente dans un tableau ou un objet
                 *
                 * @param {any} key la clé à rechercher
                 * @param {Array/Object} search le tableau ou l'objet à tester
                 * @return {boolean} true si 'elle existe sinon false
                 */
                keyExists: function (key, search) {
                    if (!search || (search.constructor !== Array && search.constructor !== Object)) {
                        return false;
                    }
                    for (var i = 0; i < search.length; i++) {
                        if (search[i] === key) {
                            return true;
                        }
                    }
                    return key in search;
                },
                getOne: function (pArray, pCompare) {
                    for (var i = pArray.length; i--;) {
                        if (pCompare(pArray[i])) {
                            return pArray[i];
                        }
                    }
                    return null;
                }
            };
            /**
             * Utilitaires pour les enums
             */
            CoreCommon.EnumUtils = {
                getNamesAndValues: function (e) {
                    return CoreCommon.EnumUtils.getNames(e).map(function (n) { return ({ name: n, value: e[n] }); });
                },
                getNames: function (e) {
                    return CoreCommon.EnumUtils.getObjValues(e).filter(function (v) { return typeof v === "string"; });
                },
                getValues: function (e) {
                    return CoreCommon.EnumUtils.getObjValues(e).filter(function (v) { return typeof v === "number"; });
                },
                getObjValues: function (e) {
                    return Object.keys(e).map(function (k) { return e[k]; });
                },
                /**
                 * Méthode qui retourne sous forme de tableau les valeurs d'un enum
                 * @param {enum} Enum à convertir sous forme de tableau
                 * @return {Array<T>}
                 */
                listerEnums: function (enumClass) {
                    var valeurs = [];
                    for (var key in enumClass) {
                        if (typeof enumClass[key] === 'number') {
                            valeurs.push(key);
                        }
                    }
                    return valeurs;
                },
                /**
                 * Permet de récupérer un membre d'un enum correspondant à la valeur passée en paramètre
                 * @param e {any} enum pour lequel on veut récupérer le membre
                 * @param value {number} valeur pour laquelle on veut récupérer le membre de l'enum
                 * @return {string} Retourne le membre de l'enum correspondant à la valeur passée en paramètre
                 */
                getName: function (enumClass, value) {
                    var exist = null;
                    for (var key in enumClass) {
                        if (typeof enumClass[key] === 'number' && enumClass[key] === value) {
                            exist = key;
                        }
                    }
                    return exist;
                }
            };
            /**
             * Utilitaires pour les objets
             */
            CoreCommon.ObjectUtils = {
                /**
                 * Test si un objet a les clés passées en paramètres
                 * Si la propriété strict est à true il vérifie qu'il y a exactement les mêmes clés
                 *
                 * @param {string} key la clé à rechercher
                 * @param {Array/Object} search le tableau ou l'objet à tester
                 * @return {boolean} true si 'elle existe sinon false
                 */
                hasKeys: function (keys, object, strict) {
                    if (strict === void 0) { strict = false; }
                    var result = true;
                    if (strict && (keys.length != Object.keys(object).length)) {
                        return false;
                    }
                    keys.forEach(function (key) {
                        if (!MyWay.Services.CoreCommon.ArrayUtils.keyExists(key, object)) {
                            result = false;
                        }
                    });
                    return result;
                },
                /**
                 * Test si un objet existe avec un couple de clé/valeur dans un tableau d'objets
                 *
                 * @param {Array<IKeyValuePair>} keyValueList la liste de couple clé/valeur à rechercher
                 * @param {Array} search le tableau d'objet à tester
                 * @return {Object} l'objet s'il existe sinon null
                 */
                objectExistsByKeyValueList: function (keyValueList, search) {
                    for (var i = 0; i < search.length; i++) {
                        if (MyWay.Services.CoreCommon.ObjectUtils.hasKeyValuePairList(search[i], keyValueList)) {
                            return search[i];
                        }
                    }
                    return null;
                },
                /**
                 * Test si un objet a une liste de couple de clé/valeur
                 *
                 * @param {Array<IKeyValuePair>} keyValueList la liste de couple clé/valeur à rechercher
                 * @param {Object} search le tableau ou l'objet à tester
                 * @return {boolean} true si cet abjet a ce couple clé/valeur
                 */
                hasKeyValuePairList: function (obj, keyValueList) {
                    for (var i = 0; i < keyValueList.length; i++) {
                        if (!(obj.hasOwnProperty(keyValueList[i].Key) && obj[keyValueList[i].Key] == keyValueList[i].Value)) {
                            return false;
                        }
                    }
                    return true;
                },
                /**
                * Récupère les propriétés de l'objet object et
                * retourne un tableau d'objet (Clé/Valeur) correspondant aux propriétés de l'objet object
                *
                * @param {Object} object l'objet
                * @return {Array<IKeyValuePair>} le tableau d'objets (Clé/valeur)
                */
                objectToArray: function (object) {
                    var arr = [];
                    for (var key in object) {
                        arr.push({ Key: key, Value: object[key] });
                    }
                    return arr;
                },
                /**
                * Permet de merger les propriétés de deux objets
                *
                * @param {Object} destination l'objet merger
                * @param {Object} source l'objet à merger
                *
                * @return {Object} l'objet mergé
                */
                merge: function (destination, source) {
                    for (var p in source) {
                        try {
                            if (MyWay.Services.CoreCommon.isObject(source[p])) {
                                destination[p] = MyWay.Services.CoreCommon.ObjectUtils.merge(destination[p], source[p]);
                            }
                            else {
                                destination[p] = source[p];
                            }
                        }
                        catch (e) {
                            destination[p] = source[p];
                        }
                    }
                    return destination;
                },
                deepEquals: function (pObject1, pObject2) {
                    if (pObject1 === pObject2) {
                        return true;
                    }
                    if (!pObject1 || !pObject2) {
                        return false;
                    }
                    if (typeof pObject1 !== typeof pObject2)
                        return false;
                    if (typeof pObject1 === 'object') {
                        for (var lKey in pObject1) {
                            if (!CoreCommon.ObjectUtils.deepEquals(pObject1[lKey], pObject2[lKey])) {
                                return false;
                            }
                        }
                        //Vérification qu'il n'y a pas des clés en plus dans le second objet
                        for (var lKey in pObject2) {
                            if (pObject2[lKey] !== undefined && pObject1[lKey] === undefined) {
                                return false;
                            }
                        }
                        return true;
                    }
                    return false;
                }
            };
            return CoreCommon;
        }(Services.Components.ComponentBase));
        Services.CoreCommon = CoreCommon;
        var ExecutionAppliExt = /** @class */ (function () {
            //Constructor
            function ExecutionAppliExt(codeRetour, messageRetour, donneesRetour, pid) {
                this.CodeRetour = codeRetour;
                this.MessageRetour = messageRetour;
                this.DonneesRetour = donneesRetour;
                this.Pid = pid;
            }
            return ExecutionAppliExt;
        }());
        Services.ExecutionAppliExt = ExecutionAppliExt;
        /*
        * Objet généré coté client
        */
        var ErreurClient = /** @class */ (function (_super) {
            __extends(ErreurClient, _super);
            function ErreurClient(codeLibelle, valeurs, error) {
                var _this = _super.call(this, codeLibelle, valeurs) || this;
                _this.error = error;
                return _this;
            }
            return ErreurClient;
        }(Services.Erreur));
        Services.ErreurClient = ErreurClient;
        /*
        * Objet renvoyé par le serveur
        */
        var ErreurServeur = /** @class */ (function (_super) {
            __extends(ErreurServeur, _super);
            function ErreurServeur(codeHttp, codeLibelle, libelle, valeurs, causes) {
                var _this = _super.call(this, codeLibelle, valeurs) || this;
                _this.codeHttp = codeHttp;
                _this.libelle = libelle;
                _this.causes = causes;
                return _this;
            }
            return ErreurServeur;
        }(Services.Erreur));
        Services.ErreurServeur = ErreurServeur;
        var ContentTypeEnum;
        (function (ContentTypeEnum) {
            ContentTypeEnum[ContentTypeEnum["NONE"] = 0] = "NONE";
            ContentTypeEnum[ContentTypeEnum["URL_ENCODED"] = 1] = "URL_ENCODED";
            ContentTypeEnum[ContentTypeEnum["JSON"] = 2] = "JSON";
        })(ContentTypeEnum = Services.ContentTypeEnum || (Services.ContentTypeEnum = {}));
        var ResponseTypeEnum;
        (function (ResponseTypeEnum) {
            ResponseTypeEnum[ResponseTypeEnum["BLOB"] = 0] = "BLOB";
            ResponseTypeEnum[ResponseTypeEnum["JSON"] = 1] = "JSON";
            ResponseTypeEnum[ResponseTypeEnum["EMPTY"] = 2] = "EMPTY";
            ResponseTypeEnum[ResponseTypeEnum["NOT_DEFINED"] = 3] = "NOT_DEFINED";
        })(ResponseTypeEnum = Services.ResponseTypeEnum || (Services.ResponseTypeEnum = {}));
        var AcceptEnum;
        (function (AcceptEnum) {
            AcceptEnum[AcceptEnum["ALL"] = 0] = "ALL";
            AcceptEnum[AcceptEnum["JSON"] = 1] = "JSON";
        })(AcceptEnum = Services.AcceptEnum || (Services.AcceptEnum = {}));
        var MethodEnum;
        (function (MethodEnum) {
            MethodEnum[MethodEnum["DELETE"] = 0] = "DELETE";
            MethodEnum[MethodEnum["GET"] = 1] = "GET";
            MethodEnum[MethodEnum["POST"] = 2] = "POST";
            MethodEnum[MethodEnum["PUT"] = 3] = "PUT";
        })(MethodEnum = Services.MethodEnum || (Services.MethodEnum = {}));
        /**
         * Information de diagnostic du demarrage d'une application
         *    Les jalons de démarrage d'une SPA sont:
         *     - previousStepEndTime : fin de l'étape précédente
         *       * si première étape, temps de démarrage du processus
         *       * si étape précédente est routeur, temps de fin de l'étape précédente
         *     - stepStartTime : début de l'étape
         *     - displayTime: début de l'affichage SPA
         *     - initTime: init service agent
         *     - lastDigestCycleTime: dernier cycle de digestion angular
         *
         *     Les temps de démarrage d'une SPA sont calculés à partir des jalons suivants:
         *     - stepStartDuration : entre fin de l'étape précédente et début affichage SPA
         *     - displayDuration : entre début affichage SPA et init serviceAgent
         *     - digestDuration : entre init serviceAgent et dernier cycle de digestion
         *
         *    Le temps d'analyse sont:
         *     - totalDisplayDuration : displayDuration + digestDuration
         *     - totalStartDuration: stepStartDuration + totalDisplayDuration
         */
        var ApplicationDiagnostic = /** @class */ (function () {
            function ApplicationDiagnostic() {
                this.codeApplication = "inconnu";
                this.stepId = "inconnu";
                this.stepPath = "inconnu";
                this._previousStepEndTime = 0;
                this._stepStartTime = 0;
                this._displayTime = 0;
                this._initTime = 0;
                this._lastDigestCycleTime = 0;
                this.watchers = 0;
                this.digestCycles = 0;
                this.contextSize = 0;
                this._userTime = -1;
                this.finalDiagnostic = false;
            }
            Object.defineProperty(ApplicationDiagnostic.prototype, "previousStepEndTime", {
                /**
                 * Jalon de fin d'étape précédente
                 */
                set: function (value) {
                    this._previousStepEndTime = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "stepStartTime", {
                /**
                 * Jalon de début d'étape
                 */
                set: function (value) {
                    if (this._previousStepEndTime && value < this._previousStepEndTime) {
                        value = this._previousStepEndTime;
                    }
                    this._stepStartTime = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "displayTime", {
                /**
                 * Jalon de début d'affichage de la SPA
                 */
                set: function (value) {
                    if (this._stepStartTime && value < this._stepStartTime) {
                        value = this._stepStartTime;
                    }
                    this._displayTime = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "initTime", {
                /**
                 * Jalon de début initialisation du serviceAgent
                 */
                set: function (value) {
                    if (this._displayTime && value < this._displayTime) {
                        value = this._displayTime;
                    }
                    this._initTime = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "userTime", {
                /**
                 * Jalon du ressenti utilisateur (utilisation du listenedContextKey par les applications)
                 */
                set: function (value) {
                    if (value === 0) {
                        this._userTime = 0;
                    }
                    else {
                        if (this._initTime && value < this._initTime) {
                            value = this._initTime;
                        }
                        this._userTime = value;
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "lastDigestCycleTime", {
                /**
                 * Jalon du dernier cycle de digestion angular
                 */
                set: function (value) {
                    if (this._initTime && value < this._initTime) {
                        value = this._initTime;
                    }
                    this._lastDigestCycleTime = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "stepStartDuration", {
                /**
                 * Temps de démarrage entre fin de l'étape précédente et début affichage SPA
                 */
                get: function () {
                    return this._displayTime - this._previousStepEndTime;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "staticFilesLoadDuration", {
                /**
                 * Temps de démarrage entre début affichage SPA et init serviceAgent
                 */
                get: function () {
                    return this._initTime - this._displayTime;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "digestDuration", {
                /**
                 * Temps de démarrage entre init serviceAgent et dernier cycle de digestion
                 */
                get: function () {
                    return this._lastDigestCycleTime - this._initTime;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "userDuration", {
                /**
                 * Temps de démarrage entre début affichage SPA et jalon du ressenti utilisateur (utilisation du listenedContextKey par les applications)
                 */
                get: function () {
                    if (this.userDurationEnabled)
                        return this._userTime - this._displayTime;
                    else
                        return this._lastDigestCycleTime - this._displayTime;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "totalDisplayDuration", {
                /**
                 * Durée totale de l'affichage de l'application
                 */
                get: function () {
                    return this.staticFilesLoadDuration + this.digestDuration;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "totalStartDuration", {
                /**
                 * Durée totale du démarrage de l'application
                 */
                get: function () {
                    return this.stepStartDuration + this.totalDisplayDuration;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "totalUserDuration", {
                /**
                 * Durée totale du démarrage de l'application ressenti par l'utilisateur
                 */
                get: function () {
                    return this.stepStartDuration + this.userDuration;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "userDurationEnabled", {
                get: function () {
                    return this._userTime > 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "startStatus", {
                /**
                 * Status du démarrage
                 */
                get: function () {
                    if (this.totalDisplayDuration > 10000) {
                        return "danger";
                    }
                    else if (this.totalDisplayDuration > 5000) {
                        return "warn";
                    }
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "watchersStatus", {
                /**
                 * Status du nombre de watchers
                 */
                get: function () {
                    if (this.watchers > 2000) {
                        return "danger";
                    }
                    else if (this.watchers > 1000) {
                        return "warn";
                    }
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "digestStatus", {
                /**
                 * Status du nombre de cycles de digestion
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ApplicationDiagnostic.prototype, "contextStatus", {
                /**
                 * Status de la quantité de données de contexte
                 */
                get: function () {
                    if (this.contextSize > 100000) {
                        return "danger";
                    }
                    else if (this.contextSize > 50000) {
                        return "warn";
                    }
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Clone les valeurs d'un diagnostic
             */
            ApplicationDiagnostic.prototype.clone = function (source) {
                this.codeApplication = source.codeApplication;
                this.stepId = source.stepId;
                this.stepPath = source.stepPath;
                this._previousStepEndTime = source._previousStepEndTime;
                this._stepStartTime = source._stepStartTime;
                this._displayTime = source._displayTime;
                this._initTime = source._initTime;
                this._lastDigestCycleTime = source._lastDigestCycleTime;
                this.watchers = source.watchers;
                this.digestCycles = source.digestCycles;
                this.contextSize = source.contextSize;
                this.finalDiagnostic = source.finalDiagnostic;
            };
            return ApplicationDiagnostic;
        }());
        Services.ApplicationDiagnostic = ApplicationDiagnostic;
        var MessageAppliExterne = /** @class */ (function () {
            function MessageAppliExterne(header, payload) {
                this.Header = header;
                this.Payload = payload;
            }
            return MessageAppliExterne;
        }());
        Services.MessageAppliExterne = MessageAppliExterne;
        ;
        var PayloadType;
        (function (PayloadType) {
            PayloadType[PayloadType["CONNECT"] = 0] = "CONNECT";
            PayloadType[PayloadType["DISCONNECT"] = 1] = "DISCONNECT";
            PayloadType[PayloadType["SEND"] = 2] = "SEND";
        })(PayloadType = Services.PayloadType || (Services.PayloadType = {}));
        var Header = /** @class */ (function () {
            function Header() {
            }
            return Header;
        }());
        Services.Header = Header;
        var Sender = /** @class */ (function () {
            function Sender() {
            }
            return Sender;
        }());
        Services.Sender = Sender;
        var Receiver = /** @class */ (function () {
            function Receiver() {
            }
            return Receiver;
        }());
        Services.Receiver = Receiver;
        var Entity = /** @class */ (function () {
            function Entity() {
            }
            return Entity;
        }());
        Services.Entity = Entity;
        var Payload = /** @class */ (function () {
            function Payload(sujet, contenu) {
                this.Sujet = sujet;
                this.Contenu = contenu;
            }
            return Payload;
        }());
        Services.Payload = Payload;
        Services.Components.RegistryCommon.getInstance().register(CoreCommon);
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
// JSON.pruned : a function to stringify any object without overflow
// example : var json = JSON.pruned({a:'e', c:[1,2,{d:{e:42, f:'deep'}}]})
// two additional optional parameters :
//   - the maximal depth (default : 6)
//   - the maximal length of arrays (default : 50)
// GitHub : https://github.com/Canop/JSON.prune
// This is based on Douglas Crockford's code ( https://github.com/douglascrockford/JSON-js/blob/master/json2.js )
(function () {
    'use strict';
    var DEFAULT_MAX_DEPTH = 6;
    var DEFAULT_ARRAY_MAX_LENGTH = 50;
    var seen; // Same variable used for all stringifications
    Date.prototype.toPrunedJSON = Date.prototype.toJSON;
    String.prototype.toPrunedJSON = String.prototype.toJSON;
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, meta = {
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"': '\\"',
        '\\': '\\\\'
    };
    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }
    function str(key, holder, depthDecr, arrayMaxLength) {
        var i, // The loop counter.
        k, // The member key.
        v, // The member value.
        length, partial, value = holder[key];
        if (value && typeof value === 'object' && typeof value.toPrunedJSON === 'function') {
            value = value.toPrunedJSON(key);
        }
        if (value === null || value === undefined) {
            return String(value);
        }
        switch (typeof value) {
            case 'string':
                return quote(value);
            case 'number':
                return isFinite(value) ? String(value) : 'null';
            case 'boolean':
                return String(value);
            case 'object':
                if (!value) {
                    return 'null';
                }
                if (depthDecr <= 0 || seen.indexOf(value) !== -1) {
                    console.warn('... oh oh, it seems this object is too deep... depth max is ' + depthDecr);
                    return '"-pruned-"';
                }
                seen.push(value);
                partial = [];
                if (Object.prototype.toString.apply(value) === '[object Array]') {
                    length = Math.min(value.length, arrayMaxLength);
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value, depthDecr - 1, arrayMaxLength) || 'null';
                    }
                    v = partial.length === 0
                        ? '[]'
                        : '[' + partial.join(',') + ']';
                    return v;
                }
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        try {
                            v = str(k, value, depthDecr - 1, arrayMaxLength);
                            if (v)
                                partial.push(quote(k) + ':' + v);
                        }
                        catch (e) {
                            // this try/catch due to some "Accessing selectionEnd on an input element that cannot have a selection." on Chrome
                        }
                    }
                }
                v = partial.length === 0
                    ? '{}'
                    : '{' + partial.join(',') + '}';
                return v;
        }
    }
    JSON.pruned = function (value, depthDecr, arrayMaxLength) {
        seen = [];
        depthDecr = depthDecr || DEFAULT_MAX_DEPTH;
        arrayMaxLength = arrayMaxLength || DEFAULT_ARRAY_MAX_LENGTH;
        return str('', { '': value }, depthDecr, arrayMaxLength);
    };
}());
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var NotificationMessage = /** @class */ (function () {
            function NotificationMessage() {
            }
            return NotificationMessage;
        }());
        Services.NotificationMessage = NotificationMessage;
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Common;
        (function (Common) {
            var ArbreBinaire = /** @class */ (function () {
                function ArbreBinaire(pFonctionCompare, pDoublonsPossibles) {
                    this._doublonsPossibles = false;
                    this._nombreElements = 0;
                    this._fonctionCompare = pFonctionCompare;
                    this._doublonsPossibles = pDoublonsPossibles;
                }
                ArbreBinaire.prototype.testerElements = function (pEl1, pEl2) {
                    return this._fonctionCompare(pEl1, pEl2);
                };
                Object.defineProperty(ArbreBinaire.prototype, "doublonsPossibles", {
                    get: function () {
                        return this._doublonsPossibles;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ArbreBinaire.prototype, "nombreElements", {
                    get: function () {
                        return this._nombreElements;
                    },
                    enumerable: true,
                    configurable: true
                });
                ArbreBinaire.prototype.ajouter = function (pNouveauElement) {
                    if (this._racine) {
                        if (this.placerElement(pNouveauElement, this._racine)) {
                            this._nombreElements++;
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                    else {
                        this._racine = {
                            parent: null,
                            precedent: null,
                            suivant: null,
                            valeur: pNouveauElement
                        };
                        this._nombreElements = 1;
                        return true;
                    }
                };
                ArbreBinaire.prototype.retirer = function (pFonctionTest) {
                    if (!this._racine) {
                        return;
                    }
                    var lNoeudCourant = this.getMinimum(this._racine);
                    if (lNoeudCourant !== null) {
                        while (lNoeudCourant) {
                            if (pFonctionTest(lNoeudCourant.valeur)) {
                                //Doit supprimer l'élément
                                this.retirerElement(lNoeudCourant);
                                this._nombreElements--;
                            }
                            lNoeudCourant = this.getSuivant(lNoeudCourant);
                        }
                    }
                };
                ArbreBinaire.prototype.inferieurAAsc = function (pElementSuperieur, pInclureElement, pCallback) {
                    if (!this._racine) {
                        return;
                    }
                    var lNoeudCourant = this.getMinimum(this._racine);
                    var lDernierNoeud = this.getPlusGrandInferieurA(pElementSuperieur, pInclureElement, this._racine);
                    if (lNoeudCourant !== null && lDernierNoeud !== null) {
                        while (lNoeudCourant !== lDernierNoeud) {
                            pCallback(lNoeudCourant.valeur);
                            lNoeudCourant = this.getSuivant(lNoeudCourant);
                        }
                        pCallback(lNoeudCourant.valeur);
                    }
                };
                ArbreBinaire.prototype.inferieurADesc = function (pElementSuperieur, pInclureElement, pCallback) {
                    if (!this._racine) {
                        return;
                    }
                    var lNoeudCourant = this.getPlusGrandInferieurA(pElementSuperieur, pInclureElement, this._racine);
                    if (lNoeudCourant != null) {
                        while (lNoeudCourant != null) {
                            pCallback(lNoeudCourant.valeur);
                            lNoeudCourant = this.getPrecedent(lNoeudCourant);
                        }
                    }
                };
                ArbreBinaire.prototype.superieurAAsc = function (pElementSuperieur, pInclureElement, pCallback) {
                    if (!this._racine) {
                        return;
                    }
                    var lNoeudCourant = this.getPlusPetitSuperieurA(pElementSuperieur, pInclureElement, this._racine);
                    if (lNoeudCourant != null) {
                        while (lNoeudCourant != null) {
                            pCallback(lNoeudCourant.valeur);
                            lNoeudCourant = this.getSuivant(lNoeudCourant);
                        }
                    }
                };
                ArbreBinaire.prototype.superieurADesc = function (pElementSuperieur, pInclureElement, pCallback) {
                    if (!this._racine) {
                        return;
                    }
                    var lNoeudCourant = this.getMaximum(this._racine);
                    var lDernierNoeud = this.getPlusPetitSuperieurA(pElementSuperieur, pInclureElement, this._racine);
                    if (lNoeudCourant !== null && lDernierNoeud !== null) {
                        while (lNoeudCourant !== lDernierNoeud) {
                            pCallback(lNoeudCourant.valeur);
                            lNoeudCourant = this.getPrecedent(lNoeudCourant);
                        }
                        pCallback(lNoeudCourant.valeur);
                    }
                };
                ArbreBinaire.prototype.entreBornesAsc = function (pElementInferieur, pInclureElementInferieur, pElementSuperieur, pInclureElementSuperieur, pCallback) {
                    if (!this._racine) {
                        return;
                    }
                    var lNoeudCourantInf = this.getPlusPetitSuperieurA(pElementInferieur, pInclureElementInferieur, this._racine);
                    var lNoeudCourantSupr = this.getPlusGrandInferieurA(pElementSuperieur, pInclureElementSuperieur, this._racine);
                    if (lNoeudCourantInf !== null && lNoeudCourantSupr !== null) {
                        var lNoeudCourant = lNoeudCourantInf;
                        while (lNoeudCourant !== lNoeudCourantSupr) {
                            pCallback(lNoeudCourant.valeur);
                            lNoeudCourant = this.getSuivant(lNoeudCourant);
                        }
                        pCallback(lNoeudCourant.valeur);
                    }
                };
                ArbreBinaire.prototype.entreBornesDesc = function (pElementInferieur, pInclureElementInferieur, pElementSuperieur, pInclureElementSuperieur, pCallback) {
                    if (!this._racine) {
                        return;
                    }
                    var lNoeudCourantInf = this.getPlusPetitSuperieurA(pElementInferieur, pInclureElementInferieur, this._racine);
                    var lNoeudCourantSupr = this.getPlusGrandInferieurA(pElementSuperieur, pInclureElementSuperieur, this._racine);
                    if (lNoeudCourantInf !== null && lNoeudCourantSupr !== null) {
                        var lNoeudCourant = lNoeudCourantSupr;
                        while (lNoeudCourant !== lNoeudCourantInf) {
                            pCallback(lNoeudCourant.valeur);
                            lNoeudCourant = this.getPrecedent(lNoeudCourant);
                        }
                        pCallback(lNoeudCourant.valeur);
                    }
                };
                ArbreBinaire.prototype.toutParcourir = function (pCallback) {
                    if (!this._racine) {
                        //Rien à parcourir
                        return;
                    }
                    var lNoeudCourant = this.getMinimum(this._racine);
                    while (lNoeudCourant != null) {
                        pCallback(lNoeudCourant.valeur);
                        lNoeudCourant = this.getSuivant(lNoeudCourant);
                    }
                };
                ArbreBinaire.prototype.getParCritere = function (pFonctionTest, pCallback) {
                    if (!this._racine) {
                        return;
                    }
                    var lNoeudCourant = this.getMinimum(this._racine);
                    while (lNoeudCourant != null) {
                        if (pFonctionTest(lNoeudCourant.valeur)) {
                            pCallback(lNoeudCourant.valeur);
                        }
                        lNoeudCourant = this.getSuivant(lNoeudCourant);
                    }
                };
                ArbreBinaire.prototype.isExists = function (pElement) {
                    return this.getElementInternal(pElement, this._racine) !== null;
                };
                ArbreBinaire.prototype.getElement = function (pElement) {
                    return this.getElementInternal(pElement, this._racine);
                };
                ArbreBinaire.prototype.getElementInternal = function (pElement, pNoeud) {
                    if (!pNoeud) {
                        return null;
                    }
                    var lComparaison = this._fonctionCompare(pNoeud.valeur, pElement);
                    if (lComparaison === 0) {
                        return pNoeud.valeur;
                    }
                    else if (lComparaison < 0) {
                        //Cet élément est plus petit que la référence, va voir à sa droite
                        if (pNoeud.suivant) {
                            return this.getElementInternal(pElement, pNoeud.suivant);
                        }
                        else {
                            return null;
                        }
                    }
                    else {
                        if (pNoeud.precedent) {
                            return this.getElementInternal(pElement, pNoeud.precedent);
                        }
                        else {
                            return null;
                        }
                    }
                };
                ArbreBinaire.prototype.getPlusGrandInferieurA = function (pElementBorne, pInclureBorne, pNoeud) {
                    var lComparaison = this._fonctionCompare(pNoeud.valeur, pElementBorne);
                    if (lComparaison < 0 || (lComparaison === 0 && pInclureBorne)) {
                        //Cet élément est plus petit que la référence, va voir à sa droite
                        if (pNoeud.suivant) {
                            var lSousElementDroite = this.getPlusGrandInferieurA(pElementBorne, pInclureBorne, pNoeud.suivant);
                            if (lSousElementDroite) {
                                return lSousElementDroite;
                            }
                            else {
                                //Dans la partie droite il n'y a aucun élément plus petit que la borne donc retourne l'élément courant
                                return pNoeud;
                            }
                        }
                        else {
                            //Pas d'élément plus grand, c'est donc lui
                            return pNoeud;
                        }
                    }
                    else {
                        if (pNoeud.precedent) {
                            return this.getPlusGrandInferieurA(pElementBorne, pInclureBorne, pNoeud.precedent);
                        }
                        else {
                            //Aucun élement est plus petit que la borne
                            return null;
                        }
                    }
                };
                ArbreBinaire.prototype.getPlusPetitSuperieurA = function (pElementBorne, pInclureBorne, pNoeud) {
                    var lComparaison = this._fonctionCompare(pNoeud.valeur, pElementBorne);
                    if (lComparaison > 0 || (lComparaison === 0 && pInclureBorne)) {
                        //Cet élément est plus petit que la référence, va voir à sa droite
                        if (pNoeud.precedent) {
                            var lSousElementDroite = this.getPlusPetitSuperieurA(pElementBorne, pInclureBorne, pNoeud.precedent);
                            if (lSousElementDroite) {
                                return lSousElementDroite;
                            }
                            else {
                                //Dans la partie gauche il n'y a aucun élément plus grand que la borne donc retourne l'élément courant
                                return pNoeud;
                            }
                        }
                        else {
                            //Pas d'élément plus petit, c'est donc lui
                            return pNoeud;
                        }
                    }
                    else {
                        if (pNoeud.suivant) {
                            return this.getPlusPetitSuperieurA(pElementBorne, pInclureBorne, pNoeud.suivant);
                        }
                        else {
                            //Aucun élement est plus grand que la borne
                            return null;
                        }
                    }
                };
                ArbreBinaire.prototype.getMinimum = function (pNoeud) {
                    var lNoeudMin = pNoeud;
                    while (lNoeudMin.precedent) {
                        lNoeudMin = lNoeudMin.precedent;
                    }
                    return lNoeudMin;
                };
                ArbreBinaire.prototype.getMaximum = function (pNoeud) {
                    var lNoeudMax = pNoeud;
                    while (lNoeudMax.suivant) {
                        lNoeudMax = lNoeudMax.suivant;
                    }
                    return lNoeudMax;
                };
                ArbreBinaire.prototype.getSuivant = function (pNoeud) {
                    if (pNoeud.suivant) {
                        return this.getMinimum(pNoeud.suivant);
                    }
                    else if (!pNoeud.parent) {
                        return null;
                    }
                    else if (pNoeud.parent.precedent === pNoeud) {
                        return pNoeud.parent;
                    }
                    else {
                        var lNoeudCourant = pNoeud;
                        while (lNoeudCourant.parent && lNoeudCourant.parent.suivant === lNoeudCourant) {
                            lNoeudCourant = lNoeudCourant.parent;
                        }
                        if (!lNoeudCourant.parent) {
                            return null;
                        }
                        else {
                            return lNoeudCourant.parent;
                        }
                    }
                };
                ArbreBinaire.prototype.getPrecedent = function (pNoeud) {
                    if (pNoeud.precedent) {
                        return this.getMaximum(pNoeud.precedent);
                    }
                    else if (!pNoeud.parent) {
                        return null;
                    }
                    else if (pNoeud.parent.suivant === pNoeud) {
                        return pNoeud.parent;
                    }
                    else {
                        var lNoeudCourant = pNoeud;
                        while (lNoeudCourant.parent && lNoeudCourant.parent.precedent === lNoeudCourant) {
                            lNoeudCourant = lNoeudCourant.parent;
                        }
                        if (!lNoeudCourant.parent) {
                            return null;
                        }
                        else {
                            return lNoeudCourant.parent;
                        }
                    }
                };
                ArbreBinaire.prototype.placerElement = function (pNouveauElement, pNoeudCourant) {
                    var lCompareResultat = this._fonctionCompare(pNoeudCourant.valeur, pNouveauElement);
                    if (lCompareResultat <= 0) {
                        if (lCompareResultat === 0 && !this._doublonsPossibles) {
                            return false;
                        }
                        //pNouveauElement >= pNoeudCourant, le place à droite
                        if (pNoeudCourant.suivant) {
                            return this.placerElement(pNouveauElement, pNoeudCourant.suivant);
                        }
                        else {
                            pNoeudCourant.suivant = {
                                valeur: pNouveauElement,
                                precedent: null,
                                suivant: null,
                                parent: pNoeudCourant
                            };
                            return true;
                        }
                    }
                    else {
                        //pNouveauElement < pNoeudCourant, le place à gauche
                        if (pNoeudCourant.precedent) {
                            return this.placerElement(pNouveauElement, pNoeudCourant.precedent);
                        }
                        else {
                            pNoeudCourant.precedent = {
                                valeur: pNouveauElement,
                                precedent: null,
                                suivant: null,
                                parent: pNoeudCourant
                            };
                            return true;
                        }
                    }
                };
                ArbreBinaire.prototype.retirerElement = function (pNoeudCourant) {
                    var lNoeudTemporaire;
                    //Doit supprimer l'élément courant
                    var lNouveauParent = null;
                    var lEstNoeudRacine = !pNoeudCourant.parent;
                    if (!pNoeudCourant.precedent) {
                        if (!pNoeudCourant.suivant) {
                            //Rien en dessous, le supprime simplement
                            lNouveauParent = null;
                            if (!lEstNoeudRacine && pNoeudCourant.parent.precedent === pNoeudCourant) {
                                pNoeudCourant.parent.precedent = null;
                            }
                            else if (!lEstNoeudRacine) {
                                pNoeudCourant.parent.suivant = null;
                            }
                        }
                        else {
                            //Remonte la partie droite à la place du noeud à supprimer
                            lNouveauParent = pNoeudCourant.suivant;
                            if (!lEstNoeudRacine && pNoeudCourant.parent.precedent === pNoeudCourant) {
                                pNoeudCourant.parent.precedent = pNoeudCourant.suivant;
                                pNoeudCourant.suivant.parent = pNoeudCourant.parent;
                            }
                            else if (!lEstNoeudRacine) {
                                pNoeudCourant.parent.suivant = pNoeudCourant.suivant;
                                pNoeudCourant.suivant.parent = pNoeudCourant.parent;
                            }
                        }
                    }
                    else {
                        if (!pNoeudCourant.suivant) {
                            //Remonte la partie gauche à la place du noeud à supprimer
                            lNouveauParent = pNoeudCourant.precedent;
                            if (!lEstNoeudRacine && pNoeudCourant.parent.precedent === pNoeudCourant) {
                                pNoeudCourant.parent.precedent = pNoeudCourant.precedent;
                                pNoeudCourant.precedent.parent = pNoeudCourant.parent;
                            }
                            else if (!lEstNoeudRacine) {
                                pNoeudCourant.parent.suivant = pNoeudCourant.precedent;
                                pNoeudCourant.precedent.parent = pNoeudCourant.parent;
                            }
                        }
                        else {
                            //Il y a quelque chose à droite et à gauche, mets la partie droite à la place du noeud à supprimer et déplace la partie gauche tout à gauche de cette partie droite
                            lNouveauParent = pNoeudCourant.suivant;
                            if (!lEstNoeudRacine && pNoeudCourant.parent.precedent === pNoeudCourant) {
                                pNoeudCourant.parent.precedent = pNoeudCourant.suivant;
                                pNoeudCourant.suivant.parent = pNoeudCourant.parent;
                            }
                            else if (!lEstNoeudRacine) {
                                pNoeudCourant.parent.suivant = pNoeudCourant.suivant;
                                pNoeudCourant.suivant.parent = pNoeudCourant.parent;
                            }
                            lNoeudTemporaire = pNoeudCourant.suivant;
                            while (lNoeudTemporaire.precedent) {
                                lNoeudTemporaire = lNoeudTemporaire.precedent;
                            }
                            lNoeudTemporaire.precedent = pNoeudCourant.precedent;
                            lNoeudTemporaire.precedent.parent = lNoeudTemporaire;
                        }
                    }
                    if (lEstNoeudRacine) {
                        if (lNouveauParent === null) {
                            this._racine = null;
                        }
                        else {
                            this._racine = lNouveauParent;
                            lNouveauParent.parent = null;
                        }
                    }
                };
                return ArbreBinaire;
            }());
            Common.ArbreBinaire = ArbreBinaire;
        })(Common = Services.Common || (Services.Common = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Loggers"] = "Loggers";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var LoggersMessageSubject;
            (function (LoggersMessageSubject) {
                LoggersMessageSubject[LoggersMessageSubject["GetConfigActual"] = 0] = "GetConfigActual";
                LoggersMessageSubject[LoggersMessageSubject["SetConfigActual"] = 1] = "SetConfigActual";
                LoggersMessageSubject[LoggersMessageSubject["GetConfigDB"] = 2] = "GetConfigDB";
                LoggersMessageSubject[LoggersMessageSubject["SetConfigDB"] = 3] = "SetConfigDB";
                LoggersMessageSubject[LoggersMessageSubject["SaveConfig"] = 4] = "SaveConfig";
                LoggersMessageSubject[LoggersMessageSubject["LoadConfig"] = 5] = "LoadConfig";
                LoggersMessageSubject[LoggersMessageSubject["GetLoggers"] = 6] = "GetLoggers";
                LoggersMessageSubject[LoggersMessageSubject["GetNomConfigAcuelle"] = 7] = "GetNomConfigAcuelle";
                LoggersMessageSubject[LoggersMessageSubject["IsClassExists"] = 8] = "IsClassExists";
                LoggersMessageSubject[LoggersMessageSubject["Reset"] = 9] = "Reset";
            })(LoggersMessageSubject = Loggers.LoggersMessageSubject || (Loggers.LoggersMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Loggers, [
                Services.Components.ComponentType.Core,
                Services.Components.ComponentType.Evennements
            ]);
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Message;
        (function (Message) {
            var Domain = /** @class */ (function () {
                function Domain() {
                }
                return Domain;
            }());
            var MessageBase = /** @class */ (function () {
                function MessageBase(targetWindow, targetDomain, authorizedDomains, recipientZone, zoneName, library, canReceiveResponses, canReceiveNewMessages) {
                    var _this = this;
                    this.canReceiveResponses = canReceiveResponses;
                    this.canReceiveNewMessages = canReceiveNewMessages;
                    this._currentIndex = 0;
                    this._callbackArray = [];
                    this._me = null;
                    this._ReceiveMessage = function (event) {
                        var message = event.data;
                        if (message.RecipientZone !== _this._zoneName) {
                            return;
                        }
                        if (message.Subject === null || message.Subject === undefined) {
                            throw "Subject is null - " + JSON.stringify(message);
                        }
                        if (message.Subject.substring && message.Subject.substring(0, 11) === "Response - ") {
                            if (_this.canReceiveResponses) {
                                _this.handleResponse(event);
                            }
                        }
                        else {
                            if (_this.canReceiveNewMessages) {
                                _this.handleReception(event);
                            }
                        }
                    };
                    this._SendResponse = function (event, response, erreur) {
                        var frameMessage = event.data;
                        var responseMessage = {
                            RequestId: frameMessage.RequestId,
                            RecipientZone: frameMessage.SenderZone,
                            RecipientComponent: null,
                            SenderZone: _this._zoneName,
                            Subject: "Response - " + frameMessage.Subject,
                            Content: response,
                            CallbackIndex: frameMessage.CallbackIndex,
                            ErreurCallbackIndex: frameMessage.ErreurCallbackIndex,
                            Error: null
                        };
                        return Services.CoreCommon.getPromesseSelfResoved().then(function () {
                            if (erreur && _this._zoneName === "Manager" && _this._library['Libelle'] && erreur.codeLibelle && !erreur.libelle) {
                                // On renseigne au passage le libellé de l'erreur pour éviter à l'application fonctionnelle
                                // de le faire plus tard via un appel asynchrone
                                return _this._library['Libelle'].constituerLibelle(erreur.codeLibelle, erreur.valeurs).then(function (pText) {
                                    erreur.libelle = pText;
                                });
                            }
                        }).then(function () {
                            if (erreur && JSON) {
                                responseMessage.Error = JSON.parse(JSON.stringify(erreur));
                            }
                            _this.ValidateMessage(responseMessage);
                            if (event.source) {
                                _this.postMessage(responseMessage, event.source, event.origin, null);
                            }
                        });
                    };
                    this._targetWindow = targetWindow;
                    this._targetDomain = targetDomain;
                    this._authorizedDomains = authorizedDomains;
                    this._recipientZone = recipientZone;
                    this._zoneName = zoneName;
                    this._me = Math.random().toString(36).substring(2);
                    this._library = library;
                }
                MessageBase.prototype.createMessage = function (recipient, subject, content, callbackIndex, errorCallbackIndex) {
                    return {
                        RequestId: '',
                        SenderZone: this._zoneName,
                        RecipientZone: this._recipientZone,
                        RecipientComponent: recipient,
                        Subject: subject,
                        Content: content,
                        CallbackIndex: callbackIndex,
                        ErreurCallbackIndex: errorCallbackIndex,
                        Error: null
                    };
                };
                MessageBase.prototype.send = function (pComponent, pSubject, pContent, targetWindow, targetDomain, pIdFrame) {
                    return this.sendWithResponse(pComponent, pSubject, pContent, targetWindow, targetDomain, pIdFrame);
                };
                MessageBase.prototype.sendWithResponse = function (pComponent, pSubject, pContent, targetWindow, targetDomain, pIdFrame) {
                    var _this = this;
                    var callbackIndex = null;
                    var errorCallbackIndex = null;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        callbackIndex = _this._AddCallback(pDefer.resolve);
                        errorCallbackIndex = _this._AddCallback(pDefer.reject);
                        if (!targetWindow)
                            targetWindow = _this._targetWindow;
                        if (!targetDomain)
                            targetDomain = _this._targetDomain;
                        var message = _this.createMessage(pComponent, pSubject, pContent, callbackIndex, errorCallbackIndex);
                        //used for tests
                        /*if (recipient == "Test" && subject === "Test Subject" && callback) {
                            callback(message);
                        } else {*/
                        _this.ValidateMessage(message);
                        if (targetDomain && targetWindow) {
                            _this.postMessage(message, targetWindow, targetDomain, pIdFrame);
                        }
                        else {
                            pDefer.reject(new Services.Erreur('Impossible d\'envoyer le message, la "target domain" et la "target window" n\'existent pas'));
                            _this._RemoveCallback(callbackIndex);
                            _this._RemoveCallback(errorCallbackIndex);
                        }
                        //}
                    }).catch(function (pReason) {
                        _this._RemoveCallback(callbackIndex);
                        _this._RemoveCallback(errorCallbackIndex);
                        throw pReason;
                    });
                };
                //Private
                MessageBase.prototype._AddCallback = function (callback) {
                    this._currentIndex++;
                    this._callbackArray[this._currentIndex] = callback;
                    return this._currentIndex;
                };
                MessageBase._getBaseDomain = function (domain) {
                    var baseDomain = new Domain();
                    if (domain.indexOf('http://') === 0) {
                        baseDomain.Root = 'http://';
                        var tempDomain = domain.replace('http://', '');
                        tempDomain = tempDomain.split('/')[0];
                        var parts = tempDomain.split(':');
                        baseDomain.Name = parts[0];
                        if (parts.length == 2)
                            baseDomain.Port = parts[1];
                        else
                            baseDomain.Port = '80';
                    }
                    else if (domain.indexOf('https://') === 0) {
                        baseDomain.Root = 'https://';
                        var tempDomain = domain.replace('https://', '');
                        tempDomain = tempDomain.split('/')[0];
                        var parts = tempDomain.split(':');
                        baseDomain.Name = parts[0];
                        if (parts.length == 2)
                            baseDomain.Port = parts[1];
                        else {
                            baseDomain.Root = 'http://';
                            baseDomain.Port = '443';
                        }
                    }
                    return baseDomain;
                };
                MessageBase.prototype.handleReception = function (event) {
                    var message = event.data;
                    this.transmettreMessage(event);
                };
                MessageBase.prototype.transmettreMessage = function (event) {
                    var _this = this;
                    var message = event.data;
                    if (!MessageBase.IsDomainAuthorized(event.origin, this._authorizedDomains)) {
                        throw event.origin + ' is not authorized at Reception : ' + JSON.stringify(message) + ';' + JSON.stringify(this._authorizedDomains);
                    }
                    var componentName = message.RecipientComponent;
                    var component = this._library[componentName];
                    if (component) {
                        var frameMessage = event.data;
                        try {
                            component.reception({
                                iframe: event.source,
                                message: frameMessage.Content,
                                subject: frameMessage.Subject
                            }).then(function (pResponse) {
                                _this._SendResponse(event, pResponse, null);
                            }, function (pError) {
                                _this._SendResponse(event, null, pError);
                            });
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                    else {
                        /*
                        if (this._library.PreventMessage)
                            this._SendResponse(event, {}, null);
                        else {
                        */
                        MessageBase.loggerMessageBase.warn('%1 can\'t be found. Message : %2', componentName, JSON.stringify(message));
                        this._SendResponse(event, null, new Services.Erreur("not delivered"));
                        //}
                    }
                };
                MessageBase.prototype.handleResponse = function (event) {
                    var responseMessage = event.data;
                    if (!MessageBase.IsDomainAuthorized(event.origin, this._authorizedDomains))
                        throw event.origin + ' is not authorized at Response : ' + JSON.stringify(responseMessage) + ';' + JSON.stringify(this._authorizedDomains);
                    if (responseMessage.Error) {
                        if (responseMessage.CallbackIndex)
                            this._RemoveCallback(responseMessage.CallbackIndex);
                        if (responseMessage.ErreurCallbackIndex) {
                            this._ExecuteCallback(responseMessage.ErreurCallbackIndex, responseMessage.Error);
                        }
                    }
                    else {
                        if (responseMessage.ErreurCallbackIndex) {
                            this._RemoveCallback(responseMessage.ErreurCallbackIndex);
                        }
                        if (responseMessage.CallbackIndex) {
                            this._ExecuteCallback(responseMessage.CallbackIndex, responseMessage.Content);
                        }
                    }
                };
                MessageBase.IsDomainAuthorized = function (eventOrigin, authorizedDomains) {
                    var found = false;
                    var origin = MessageBase._getBaseDomain(eventOrigin);
                    for (var i in authorizedDomains) {
                        var authorizedDomain = MessageBase._getBaseDomain(authorizedDomains[i]);
                        if (origin.Root && authorizedDomain.Root && origin.Root.toLowerCase() === authorizedDomain.Root.toLowerCase()
                            && origin.Name && authorizedDomain.Name && origin.Name.toLowerCase() === authorizedDomain.Name.toLowerCase()
                            && (origin.Port === authorizedDomain.Port || authorizedDomain.Port === "*")) {
                            found = true;
                            break;
                        }
                    }
                    return found;
                };
                MessageBase.prototype._ExecuteCallback = function (callbackIndex, callbackParam) {
                    var callback = this._callbackArray[callbackIndex];
                    if (callback) {
                        this._RemoveCallback(callbackIndex);
                        callback(callbackParam);
                    }
                };
                MessageBase.prototype._RemoveCallback = function (callbackIndex) {
                    var callback = this._callbackArray[callbackIndex];
                    if (callback) {
                        delete this._callbackArray[callbackIndex];
                    }
                };
                MessageBase.prototype.ValidateMessage = function (message) {
                    if (!message.Subject && message.Subject !== 0) {
                        throw "Subject is empty";
                    }
                    if (message.RecipientZone === message.SenderZone) {
                        throw "recipient zone and sender zone are identical : " + message.RecipientZone + " - " + JSON.stringify(message);
                    }
                };
                MessageBase.CLASS_NAMEMessageBase = 'MyWay.Services.Message.MessageBase';
                MessageBase.loggerMessageBase = Services.Loggers.LoggerFactory.INSTANCE.getClass(MessageBase.CLASS_NAMEMessageBase);
                return MessageBase;
            }());
            Message.MessageBase = MessageBase;
        })(Message = Services.Message || (Services.Message = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Core;
        (function (Core) {
            var CoreMessageSubject;
            (function (CoreMessageSubject) {
            })(CoreMessageSubject = Core.CoreMessageSubject || (Core.CoreMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Core, []);
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Evennements, []);
        })(Core = Services.Core || (Services.Core = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var RegistryType;
            (function (RegistryType) {
                RegistryType["MANAGER"] = "MANAGER";
            })(RegistryType = Components.RegistryType || (Components.RegistryType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Test;
    (function (Test) {
        var V1;
        (function (V1) {
            var Services;
            (function (Services) {
                Services.Erreur = MyWay.Services.Erreur;
                Services.Promesses = MyWay.Services.Promesses;
                function generateEmptyLibraryCommon() {
                    return {
                        Core: {
                            createPromiseSelfResolved: MyWay.Services.CoreCommon.createPromiseSelfResolved,
                            createPromiseSelfError: MyWay.Services.CoreCommon.createPromiseSelfError,
                            promesseTryCatch: MyWay.Services.CoreCommon.promesseTryCatch,
                            getPromesseSelfResoved: MyWay.Services.CoreCommon.getPromesseSelfResoved
                        }
                    };
                }
                Services.generateEmptyLibraryCommon = generateEmptyLibraryCommon;
                function override(pObject, pMethod, pValue) {
                    if (pObject[pMethod] === undefined) {
                        throw new MyWay.Services.Erreur("La méthode " + pMethod + " n'existe pas sur l'objet " + pObject.constructor);
                    }
                    pObject[pMethod] = pValue;
                }
                Services.override = override;
                function generateMessageService() {
                    return {
                        dispose: function () {
                            MyWay.Services.CoreCommon.getPromesseSelfResoved();
                        },
                        send: function (pComponent, pSubject, pContent, targetWindow, targetDomain, pIdFrame) {
                            return MyWay.Services.CoreCommon.createPromiseSelfError(new MyWay.Services.Erreur("Send method not overrided for tests"));
                        },
                        sendWithResponse: function (pComponent, pSubject, pContent, targetWindow, targetDomain, pIdFrame) {
                            return MyWay.Services.CoreCommon.createPromiseSelfError(new MyWay.Services.Erreur("SendWithResponse method not overrided for tests"));
                        }
                    };
                }
                Services.generateMessageService = generateMessageService;
                var TestMode;
                (function (TestMode) {
                    TestMode[TestMode["DeepEquals"] = 0] = "DeepEquals";
                    TestMode[TestMode["StrictEquals"] = 1] = "StrictEquals";
                    TestMode[TestMode["NoCheck"] = 2] = "NoCheck";
                    TestMode[TestMode["ObjectPropertiesEquals"] = 3] = "ObjectPropertiesEquals";
                    TestMode[TestMode["ArrayObjectPropertiesEquals"] = 4] = "ArrayObjectPropertiesEquals";
                })(TestMode = Services.TestMode || (Services.TestMode = {}));
            })(Services = V1.Services || (V1.Services = {}));
        })(V1 = Test.V1 || (Test.V1 = {}));
    })(Test = MyWay.Test || (MyWay.Test = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            'use strict';
            var RegistryType;
            (function (RegistryType) {
                RegistryType["AGENT"] = "AGENT";
            })(RegistryType = Components.RegistryType || (Components.RegistryType = {}));
            var RegistryAgent = /** @class */ (function (_super) {
                __extends(RegistryAgent, _super);
                function RegistryAgent() {
                    var _this = _super.call(this, RegistryType.AGENT, [RegistryType.COMMON]) || this;
                    _this.messageService = null;
                    _this._agentInitializer = null;
                    return _this;
                }
                RegistryAgent.getInstance = function () {
                    if (RegistryAgent.instance === null) {
                        RegistryAgent.instance = new RegistryAgent();
                        Components.FactoryRegistries.getInstance().addRegistry(RegistryAgent.instance);
                    }
                    return RegistryAgent.instance;
                };
                Object.defineProperty(RegistryAgent.prototype, "managerInitializer", {
                    set: function (pAgentInitializer) {
                        this._agentInitializer = pAgentInitializer;
                    },
                    enumerable: true,
                    configurable: true
                });
                RegistryAgent.prototype.getRegistryCommon = function () {
                    return this._dependenciesInstances[0];
                };
                RegistryAgent.prototype.init = function (pComponent) {
                    var _this = this;
                    this.getRegistryCommon().getComponentsInstances().forEach(function (pComponentInstance) {
                        if (!_this._componentsInstancesByKey[pComponentInstance.name]) {
                            _this._componentsInstances.push(pComponentInstance);
                            _this._componentsInstancesByKey[pComponentInstance.name] = pComponentInstance;
                        }
                    });
                    if (!this.messageService) {
                        this.messageService = Services.Message.MessageAgentFactory.createMessageAgent(this.getLibrary());
                    }
                    return _super.prototype.init.call(this, pComponent);
                };
                RegistryAgent.prototype.initializeComponent = function (pAgent) {
                    return pAgent.init(this._componentsInstancesByKey, this.messageService, this._agentInitializer);
                };
                RegistryAgent.instance = null;
                return RegistryAgent;
            }(Components.AbstractRegistry));
            Components.RegistryAgent = RegistryAgent;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentAgentBase = /** @class */ (function (_super) {
                __extends(ComponentAgentBase, _super);
                function ComponentAgentBase(pName) {
                    return _super.call(this, pName) || this;
                }
                ComponentAgentBase.prototype.init = function (pAgentLibrary, pMessageService, pMessageInitializer) {
                    this.library = pAgentLibrary;
                    this.messageService = pMessageService;
                    return Services.Promesses.getPromesseSelfResoved();
                };
                ComponentAgentBase.prototype.reception = function (pMessage) {
                    var _this = this;
                    return Services.Promesses.promesseTryCatch(function (pDefer) {
                        pDefer.reject(new Services.Erreur("Subject " + pMessage.subject + " not implemented on " + _this.name + " agent"));
                    });
                };
                ComponentAgentBase.prototype.dispose = function () {
                    return Services.Promesses.getPromesseSelfResoved();
                };
                ComponentAgentBase.prototype.sendMessage = function (pSubject, pContent) {
                    return this.messageService.sendWithResponse(this.name, pSubject, pContent);
                };
                return ComponentAgentBase;
            }(Components.ComponentBase));
            Components.ComponentAgentBase = ComponentAgentBase;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var Appenders;
            (function (Appenders) {
                var BroadcastAppender = /** @class */ (function (_super) {
                    __extends(BroadcastAppender, _super);
                    function BroadcastAppender(pNom, level, config) {
                        return _super.call(this, pNom, BroadcastAppender.CLASSNAME, level, config) || this;
                    }
                    Object.defineProperty(BroadcastAppender, "METHODE_PURGE_TRACES", {
                        set: function (pService) {
                            BroadcastAppender._METHODE_PURGE_TRACES = pService;
                            if (BroadcastAppender._METHODE_PURGE_TRACES) {
                                BroadcastAppender.logs.forEach(function (pLog) {
                                    BroadcastAppender._METHODE_PURGE_TRACES(pLog);
                                });
                                BroadcastAppender.logs.length = 0;
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    BroadcastAppender.prototype.onAppend = function (pMessage) {
                        if (BroadcastAppender._METHODE_PURGE_TRACES) {
                            BroadcastAppender._METHODE_PURGE_TRACES(pMessage);
                        }
                        else {
                            BroadcastAppender.logs.push(pMessage);
                        }
                    };
                    BroadcastAppender.CLASSNAME = "MyWay.Services.Loggers.Appenders.BroadcastAppender";
                    BroadcastAppender.logs = [];
                    BroadcastAppender._METHODE_PURGE_TRACES = null;
                    return BroadcastAppender;
                }(Appenders.AbstractAppender));
                Appenders.BroadcastAppender = BroadcastAppender;
                Loggers.LoggerFactory.INSTANCE.declareAppender(BroadcastAppender.CLASSNAME, BroadcastAppender);
            })(Appenders = Loggers.Appenders || (Loggers.Appenders = {}));
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Controle;
        (function (Controle) {
            var ControleAgent = /** @class */ (function (_super) {
                __extends(ControleAgent, _super);
                function ControleAgent() {
                    return _super.call(this, Services.Components.ComponentType.Controle) || this;
                }
                Object.defineProperty(ControleAgent.prototype, "Any", {
                    get: function () {
                        ControleAgent.logger.info('Méthode à surveiller - AnyControle');
                        return new Controle.AnyControle();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ControleAgent.prototype, "Array", {
                    get: function () {
                        ControleAgent.logger.info('Méthode à surveiller - AnyControleArrayControle');
                        return new Controle.ArrayControle();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ControleAgent.prototype, "Boolean", {
                    get: function () {
                        ControleAgent.logger.info('Méthode à surveiller - BooleanControle');
                        return new Controle.BooleanControle();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ControleAgent.prototype, "Date", {
                    get: function () {
                        ControleAgent.logger.info('Méthode à surveiller - DateControle');
                        return new Controle.DateControle();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ControleAgent.prototype, "Enum", {
                    get: function () {
                        ControleAgent.logger.info('Méthode à surveiller - EnumControle');
                        return new Controle.EnumControle();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ControleAgent.prototype, "Function", {
                    get: function () {
                        ControleAgent.logger.info('Méthode à surveiller - FunctionControle');
                        return new Controle.FunctionControle();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ControleAgent.prototype, "Number", {
                    get: function () {
                        ControleAgent.logger.info('Méthode à surveiller - NumberControle');
                        return new Controle.NumberControle();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ControleAgent.prototype, "Object", {
                    get: function () {
                        ControleAgent.logger.info('Méthode à surveiller - ObjectControle');
                        return new Controle.ObjectControle();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ControleAgent.prototype, "String", {
                    get: function () {
                        ControleAgent.logger.info('Méthode à surveiller - StringControle');
                        return new Controle.StringControle();
                    },
                    enumerable: true,
                    configurable: true
                });
                ControleAgent.CLASS_NAME = 'MyWay.Services.Controle.ControleAgent';
                ControleAgent.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ControleAgent.CLASS_NAME);
                return ControleAgent;
            }(Services.Components.ComponentAgentBase));
            Controle.ControleAgent = ControleAgent;
            Services.Components.RegistryAgent.getInstance().register(ControleAgent);
        })(Controle = Services.Controle || (Services.Controle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Message;
        (function (Message) {
            var MessageAgentBase = /** @class */ (function (_super) {
                __extends(MessageAgentBase, _super);
                //Constructor
                function MessageAgentBase(library, otherWindow, uri) {
                    return _super.call(this, otherWindow, uri, ["file:\\", uri], "Manager", "Agent", library, true, true) || this;
                }
                MessageAgentBase.prototype.replaceLibrary = function (library) {
                    this._library = library;
                };
                MessageAgentBase.prototype.dispose = function () { };
                return MessageAgentBase;
            }(Message.MessageBase));
            Message.MessageAgentBase = MessageAgentBase;
            var MessageAgent = /** @class */ (function (_super) {
                __extends(MessageAgent, _super);
                function MessageAgent(library) {
                    var _this = this;
                    var otherWindow;
                    var uri;
                    if (parent !== window) {
                        otherWindow = parent;
                        uri = Services.AppServiceParameters.Instance().PortalDomain;
                    }
                    else {
                        var erreur = "MessageAgent ne fonctionne que si l'application est intégrée dans un portail";
                        MessageAgent.logger.error(erreur);
                        throw erreur;
                    }
                    _this = _super.call(this, library, otherWindow, uri) || this;
                    window.addEventListener("message", _this._ReceiveMessage);
                    return _this;
                }
                MessageAgent.prototype.dispose = function () {
                    window.removeEventListener("message", this._ReceiveMessage);
                };
                MessageAgent.prototype.postMessage = function (pMessage, pTargetWindow, pTargetDomain, pIIFrameId) {
                    pTargetWindow.postMessage(pMessage, pTargetDomain);
                };
                MessageAgent.CLASS_NAME = 'MyWay.Services.Message.MessageAgent';
                MessageAgent.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(MessageAgent.CLASS_NAME);
                return MessageAgent;
            }(MessageAgentBase));
            Message.MessageAgent = MessageAgent;
            var MessageAgentFactory = /** @class */ (function () {
                function MessageAgentFactory() {
                }
                MessageAgentFactory.createMessageAgent = function (library) {
                    if (parent !== window) {
                        return new MessageAgent(library);
                    }
                    else if (Services['ServiceManager'] && Services['ServiceManager'].Instance()) {
                        return new MobileMessageAgent(library);
                    }
                    else {
                        return new SelfMessageManager(library);
                    }
                };
                return MessageAgentFactory;
            }());
            Message.MessageAgentFactory = MessageAgentFactory;
            var SelfMessageManager = /** @class */ (function (_super) {
                __extends(SelfMessageManager, _super);
                function SelfMessageManager(library) {
                    return _super.call(this, library, window, window.location.protocol + "//" + window.location.host) || this;
                }
                SelfMessageManager.prototype.SendMessage = function (recipient, subject, content, callback, errorCallback, targetWindow, targetDomain) {
                    SelfMessageManager.logger.error("l'application n'est pas hébergée dans une iframe, les services techniques ne peuvent pas fonctionner : tentative de d'envoi de message vers [%1] au sujet de [%2] a échoué", recipient, subject);
                    console.warn("l'application n'est pas hébergée dans une iframe, les services techniques ne peuvent pas fonctionner : tentative de d'envoi de message vers [" + recipient + "] au sujet de [" + subject + "] a échoué");
                };
                SelfMessageManager.prototype.postMessage = function (pMessage, pTargetWindow, pTargetDomain, pIIFrameId) {
                    pTargetWindow.postMessage(pMessage, pTargetDomain);
                };
                SelfMessageManager.CLASS_NAME = 'MyWay.Services.Message.SelfMessageManager';
                SelfMessageManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(SelfMessageManager.CLASS_NAME);
                return SelfMessageManager;
            }(MessageAgentBase));
            Message.SelfMessageManager = SelfMessageManager;
            var MobileMessageAgent = /** @class */ (function (_super) {
                __extends(MobileMessageAgent, _super);
                function MobileMessageAgent(library) {
                    var _this = _super.call(this, library, window, window.location.protocol + "//" + window.location.host) || this;
                    MobileMessageAgent.Instance = _this;
                    return _this;
                }
                MobileMessageAgent.prototype.postMessage = function (pMessage, pTargetWindow, pTargetDomain, pIIFrameId) {
                    var event = {};
                    event.data = pMessage;
                    event.origin = pTargetDomain;
                    event.source = pTargetWindow;
                    Services['ServiceManager'].Instance().Library.Message._ReceiveMessage(event);
                };
                MobileMessageAgent.CLASS_NAME = 'MyWay.Services.Message.MobileMessageAgent';
                MobileMessageAgent.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(MobileMessageAgent.CLASS_NAME);
                return MobileMessageAgent;
            }(MessageAgentBase));
            Message.MobileMessageAgent = MobileMessageAgent;
        })(Message = Services.Message || (Services.Message = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module Service Agent
* @module MyWay.Services.ServiceAgent
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.onInitUsableLoggerForServiceAgent = null;
        /**
        * Classe du ServiceAgent
        */
        var ServiceAgent = /** @class */ (function () {
            /**
            * Constructeur de la classe serviceAgent
            * Permet d'instancier ServiceAgent. Si on utilise le ServiceAgent dans une application angular,
            * cette instanciation n'est pas obligatoire. Il suffit d'utiliser l'injection de dépendance angular.JS,
            * et d'injeter le module 'moduleAgent' dans la déclaration de l'application. Le service serviceAgent
            * sera alors disponible pour chacun des controllers.
            *
            * ~~~ts
            * // ---- instanciation normale
            * var serviceAgent = new MyWay.Services.ServiceAgent();
            *
            * // ---- instanciation via l'injection de dépendance
            * var app = angular.module('app', ['moduleAgent']);
            *
            * app.controller('monController', [ 'serviceAgent', function(serviceAgent) {
            *     //je peux utiliser ici l'instance du service agent
            *     serviceAgent.init({ codeApplication: 'maSPA'});
            * }]);
            * ~~~
            */
            function ServiceAgent() {
                var _this = this;
                this.$$framework = '$$framework';
                this.IsInitDone = false;
                // précise si l'agent est en cours d'initialisation
                // il ne peut pas y avoir deux initialisations en simultané
                this.IsInitInProgress = false;
                this.onNotificationForSPA = null;
                this._initTerminee = function (onNotification) {
                    _this.Library.Core.addListenerOnNotification(function (pNotification) {
                        _this.OnNotification(pNotification, _this);
                        if (onNotification) {
                            onNotification(pNotification, _this);
                        }
                    });
                    _this.IsInitDone = true;
                    _this.IsInitInProgress = false;
                    return _this.Library.Core.getPromesseSelfResoved();
                };
                this._displayError = function (erreur) {
                    ServiceAgent.logger.warn(erreur.codeLibelle);
                };
            }
            Object.defineProperty(ServiceAgent.prototype, "Library", {
                get: function () {
                    return this._serviceLibrary;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ServiceAgent.prototype, "idServiceAgent", {
                get: function () {
                    return this._idServiceAgent;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Permet l'initialisation du ServiceAgent
             *
             * #### Syntaxe
             * ~~~ts
             * // initialisation du serviceAgent
             * serviceAgent.init(serviceInit?: IServiceAgentInitialisation);
             * ~~~
             *
             * @param  serviceInit {IServiceAgentInitialisation}             dont le code lisa de la SPA
             *
             * @return {IPromesse<any>}
             *
             * #### Exemple d'utilisation
             * ~~~ts
             * function alert(notification: MyWay.Services.NotificationMessage){
             *      //afficher la notification
             *      alert(notification.Sujet + ": " + notification.Contenu);
             * }
             *
             * serviceAgent.init({ codeApplication: 'GERC', onNotification: alert}).then(function () {
             *      //l'initialisation est terminée
             *      serviceAgent.SendRequest({url: 'http://data.json', method: MyWay.Services.MethodEnum.GET }, function(data) {
             *          $scope.data = data;
             *          $scope.$apply();
             *     });
             * ~~~
             */
            ServiceAgent.prototype.init = function (serviceInit) {
                var _this = this;
                if (serviceInit.codeApplication === "IZIVENTE") {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var lMessageAgent_1 = new Services.Message.MessageAgent({});
                    this["Context"] = {
                        AddToContext: function (key, value) {
                            var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                            lMessageAgent_1.send(Services.Components.ComponentType['Context'], Services['Context'].ContextMessageSubject.AddToContext, { key: key, value: value });
                            deferred.resolve(true);
                            return deferred.promise;
                        }
                    };
                    this["Lisa"] = {
                        Next: function (valeurSortie) {
                            var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                            lMessageAgent_1.send(Services.Components.ComponentType['Lisa'], Services['Lisa'].Messages.LisaMessageSubject.Next, {
                                valeurSortie: valeurSortie
                            });
                            deferred.resolve(null);
                            return deferred.promise;
                        }
                    };
                    deferred.resolve(this);
                    return deferred.promise;
                }
                //Réinitialise en premier lieu l'id du service agent
                this._idServiceAgent = Math.random().toString(36).substring(2);
                var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                var lPromessesAEffectuer = [];
                var lOnInitTermine = function () {
                    deferred.resolve();
                };
                // on initialise si le serviceAgent n'est pas déjà en initialisation
                if (!this.IsInitInProgress) {
                    this.IsInitInProgress = true;
                    var serializedServiceInit = JSON.stringify(serviceInit);
                    if (this.IsInitDone && this._serializedInitialisationValues === serializedServiceInit) {
                        ServiceAgent.logger.warn("serviceAgent déjà initialisé");
                    }
                    else {
                        this._serializedInitialisationValues = serializedServiceInit;
                        if (!serviceInit) {
                            serviceInit = {
                                codeApplication: null,
                                onNotification: null
                            };
                        }
                        if (!serviceInit.onGlobalError) {
                            serviceInit.onGlobalError = this._displayError;
                        }
                        deferred.promise.catch(serviceInit.onGlobalError);
                        //Init Library
                        Services.Components.RegistryAgent.getInstance().managerInitializer = {
                            applicationVersion: "",
                            codeApplication: serviceInit.codeApplication,
                            disableGetStepInfo: serviceInit.disableGetStepInfo,
                            disableScopeSave: serviceInit.disableScopeSave,
                            donneesScopeASauvegarder: serviceInit.donneesScopeASauvegarder,
                            scopeType: serviceInit.scopeType
                        };
                        lPromessesAEffectuer.push(function () {
                            return Services.Components.FactoryRegistries.getInstance().init().then(function () {
                                _this._serviceLibrary = Services.Components.RegistryAgent.getInstance().getLibrary();
                                for (var key in _this._serviceLibrary) {
                                    _this[key] = _this._serviceLibrary[key];
                                }
                                //Init agents
                                for (var key_1 in _this.Library) {
                                    _this[key_1] = _this.Library[key_1];
                                }
                                if (!Services.AppServiceParameters.Instance().MessageAgent && !_this.IsInitDone) {
                                    return _this._initAgents(serviceInit, deferred.reject);
                                }
                                else {
                                    return _this._initAgents(serviceInit, serviceInit.onGlobalError);
                                }
                            });
                        });
                        if (!this.IsInitDone) {
                            lPromessesAEffectuer.push(function () {
                                if (_this.onNotificationForSPA) {
                                    _this.Library.Core.removeListenerOnNotification(_this.onNotificationForSPA);
                                    _this.onNotificationForSPA = null;
                                }
                                return _this.Library.Core.getPromesseSelfResoved();
                            });
                        }
                    }
                    if (serviceInit.disableGetStepInfo && serviceInit.disableGetStepInfo === true) {
                        lPromessesAEffectuer.push(function () {
                            if (_this.Library["Context"]) {
                                return _this.Library["Context"].SetMyWayCompatible();
                            }
                            else {
                                return _this.Library.Core.getPromesseSelfResoved();
                            }
                        });
                    }
                    else {
                        //Retrieve step info
                        lPromessesAEffectuer.push(function () {
                            if (_this.Library["Context"]) {
                                return _this.Library["Context"].GetCurrentStepInfo().then(function (stepInfo) {
                                    _this.Library["Context"]["StepInfo"] = stepInfo;
                                });
                            }
                        });
                    }
                    if (serviceInit.capacitesChat) {
                        lPromessesAEffectuer.push(function () {
                            return _this.Library.Core.promesseTryCatch(function (pDefer) {
                                if (!_this.Library['Chat']) {
                                    pDefer.resolve();
                                    return;
                                }
                                //Librarie Chat chargée, indique si oui ou non cette iframe peut être une frame principale de chat
                                _this.Library['Chat'].addChatCapacity();
                                pDefer.resolve();
                            });
                        });
                    }
                    lPromessesAEffectuer.push(function () {
                        return _this._initTerminee(serviceInit.onNotification);
                    });
                    Services.Promesses.executePromisesSequentially(lPromessesAEffectuer).then(function () {
                        deferred.resolve(_this);
                    }, deferred.reject);
                }
                else {
                    deferred.reject(new Services.Erreur('Initialisation du serviceAgent déjà lancée... Il ne peut pas y avoir deux initialisations simultanées.'));
                }
                return deferred.promise;
            };
            ServiceAgent.prototype._initAgents = function (serviceInit, onErreur) {
                var _this = this;
                return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                    //init addon
                    Services.CoreCommon.loadCdnAddonsServiceScript('framework-client-app-addon.js');
                    if (Services.onInitUsableLoggerForServiceAgent) {
                        Services.onInitUsableLoggerForServiceAgent(_this, serviceInit.codeApplication);
                    }
                    pDefer.resolve();
                });
            };
            /**
             * Envoie une requête XHR en surchargeant par des headers MyWay
             *
             * /!\ Cette méthode est surchargée par le contexte pour y ajouter les données de contexte (step info, authentification info, ...)
             *
             * #### Syntaxe
             * ~~~ts
             * serviceAgent.SendRequest(settings: IRequestSettings)
             * ~~~
             *
             * @param  settings{IRequestSettings}  Paramètres de la requête
             *
             * @return {IPromesse<any>}
             *
             * #### Exemple
             * ~~~ts
             * serviceAgent.SendRequest(
             *  {
             *      url: restServiceUrl + 'api/opportunity',
             *      withHeaders: true,
             *      method: MyWay.Services.MethodEnum.GET
             *  }).then($scope.onLoadSuccess)
             * .catch($scope.onLoadError);
             *
             * $scope.onLoadSuccess = function (data) {
             *  for (var index in data) {
             *      var opportunity = new OpportunityModel(data[index]);
             *      $scope.opportunitys.push(opportunity);
             *  }
             *  $scope.$apply();
             * };
             *
             * $scope.onLoadError = function (error) {
             *  serviceAgent.DisplayMessage({ Type: 'danger', Message: 'Impossible de charger le portefeuille' });
             * };
             * ~~~
             */
            ServiceAgent.prototype.SendRequest = function (settings) {
                return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                    var settingsExtended = settings;
                    settingsExtended.logger = ServiceAgent.logger;
                    Services.CoreCommon.SendRequest(settingsExtended, function (result) { pDefer.resolve(result); }, function (error) { pDefer.reject(error); });
                });
            };
            ServiceAgent.prototype.SubscribeToNotification = function (onNotification) {
                var _this = this;
                if (this.onNotificationForSPA !== null) {
                    this.Library.Core.removeListenerOnNotification(this.onNotificationForSPA);
                }
                this.onNotificationForSPA = function (pMessage) {
                    onNotification(pMessage, _this);
                };
                this.Library.Core.addListenerOnNotification(this.onNotificationForSPA);
            };
            ServiceAgent.prototype.Dispose = function () {
                return Services.Components.FactoryRegistries.getInstance().dispose();
            };
            ServiceAgent.prototype.OnNotification = function (notification, agent) {
            };
            ServiceAgent.staticInit = function () {
                window.onerror = function (msg, url, lineNo, columnNo, error) {
                    var string = msg.toString().toLowerCase();
                    var substring = "script error";
                    if (string.indexOf(substring) > -1) {
                        console.error('Script Error: See Browser Console for Detail');
                    }
                    else {
                        var message = [
                            'Message: ' + msg,
                            'URL: ' + url,
                            'Line: ' + lineNo,
                            'Column: ' + columnNo,
                            'Error object: ' + JSON.stringify(error)
                        ].join(' - ');
                        console.error(message);
                    }
                    return false;
                };
                window.addEventListener('error', function (event) {
                    console.error(JSON.stringify(event));
                    ServiceAgent.logger.error(JSON.stringify(event));
                }, false);
            };
            ServiceAgent.CLASS_NAME = 'MyWay.Services.ServiceAgent';
            ServiceAgent.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ServiceAgent.CLASS_NAME);
            return ServiceAgent;
        }());
        Services.ServiceAgent = ServiceAgent;
        ServiceAgent.staticInit();
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var AppServiceParameters = /** @class */ (function () {
            function AppServiceParameters() {
                if (AppServiceParameters._instance) {
                    throw new Error("Error: Instantiation failed: Use AppServiceParameters.Instance() instead of new.");
                }
                AppServiceParameters._instance = this;
            }
            AppServiceParameters.Instance = function () {
                if (AppServiceParameters._instance === null) {
                    AppServiceParameters._instance = new AppServiceParameters();
                }
                return AppServiceParameters._instance;
            };
            AppServiceParameters._instance = null;
            return AppServiceParameters;
        }());
        Services.AppServiceParameters = AppServiceParameters;
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        if (typeof angular != 'undefined') {
            Services.moduleAgent.service("instanceLoaderService", Services.InstanceLoaderService);
        }
        var ServiceAgentProvider = /** @class */ (function () {
            function ServiceAgentProvider($q, instanceLoaderService, $timeout, $rootScope) {
                this.$q = $q;
                this.instanceLoaderService = instanceLoaderService;
                this.$timeout = $timeout;
                this.$rootScope = $rootScope;
            }
            ServiceAgentProvider.Instance = function ($q, instanceLoaderService, $timeout, $rootScope) {
                if (ServiceAgentProvider._serviceAgentExtended === null) {
                    ServiceAgentProvider._serviceAgentExtended = new ServiceAgentExtended($q, instanceLoaderService, $timeout, $rootScope);
                }
                return ServiceAgentProvider._serviceAgentExtended;
            };
            /**
             * Initialisation du serviceAgent.
             *
             * Le provider angular fournit un objet de type [[ServiceAgentExtended]].
             *
             * Le serviceAgent, injecté dans la SPA angular, doit être initialisé pour chaque route de la SPA.
             *
             * ~~~ts
             * $routeProvider
             * .when("/", {
             *       controller: "Controleur"
             *       , templateUrl: "views/defaut.html"
             *       , controllerAs: "ctrlr"
             *       , resolve: {
             *           serviceAgent: ["serviceAgentProvider",
             *               function (serviceAgentProvider: MyWay.Services.ServiceAgentProvider) {
             *                   return serviceAgentProvider.init({ codeApplication: "CREDIT" });
             *               }]
             *        }
             * });
             * ~~~
             * @param  {IServiceAgentInitialisation}       serviceInit
             *
             * @return {ng.IPromise<ServiceAgentExtended>}
             *
             */
            ServiceAgentProvider.prototype.init = function (serviceInit) {
                var _this = this;
                var deferred = this.$q.defer();
                ServiceAgentProvider.Instance(this.$q, this.instanceLoaderService, this.$timeout, this.$rootScope).init(serviceInit).then(function () {
                    deferred.resolve(ServiceAgentProvider.Instance(_this.$q, _this.instanceLoaderService, _this.$timeout, _this.$rootScope));
                }, function () {
                    deferred.reject();
                });
                return deferred.promise;
            };
            ServiceAgentProvider.$inject = [
                "$q",
                "instanceLoaderService",
                "$timeout",
                "$rootScope"
            ];
            //constructor(private $q: ng.IQService, private instanceLoaderService: MyWay.Services.InstanceLoaderService) {
            //    super();
            //}
            ServiceAgentProvider._serviceAgentExtended = null;
            return ServiceAgentProvider;
        }());
        Services.ServiceAgentProvider = ServiceAgentProvider;
        /**
         * @ngdoc service
         * @name moduleAgent.service:serviceAgentExtended
         * @requires $q
         * @requires moduleAgent.instanceLoaderService
         * @description
         * Ce service est une extension du serviceAgent (framework technique). Il permet d'en simplifier l'utilisation.
         */
        var ServiceAgentExtended = /** @class */ (function (_super) {
            __extends(ServiceAgentExtended, _super);
            function ServiceAgentExtended($q, instanceLoaderService, $timeout, $rootScope) {
                var _this = _super.call(this) || this;
                _this.$q = $q;
                _this.instanceLoaderService = instanceLoaderService;
                _this.$timeout = $timeout;
                _this.$rootScope = $rootScope;
                _this._lastDigestTimerHandle = null;
                _this.listenersBeforeInitialization = [];
                _this.listenersAfterInitialization = [];
                ServiceAgentExtended.onNewInstanceTraitements.forEach(function (pTraitement) {
                    pTraitement(_this);
                });
                return _this;
            }
            ServiceAgentExtended.onNewInstance = function (pCallback) {
                ServiceAgentExtended.onNewInstanceTraitements.push(pCallback);
            };
            /**
             * @ngdoc method
             * @name init
             * @methodOf moduleAgent.serviceAgentExtended
             * @description
             * Permet l'initialisation du ServiceAgent.
             * @param {Object} serviceInit Objet contenant le code LISA de la SPA
             *      et une fonction de rappel en cas de notification du portail vers l'application
             * @returns {Object} Result promise.
             */
            ServiceAgentExtended.prototype.init = function (serviceInit) {
                var _this = this;
                var deferred = this.$q.defer();
                var initDate = Date.now();
                if (!serviceInit)
                    serviceInit = { codeApplication: '' };
                this.listenersBeforeInitialization.forEach(function (pCallback) {
                    pCallback.call(_this);
                });
                var self = this;
                _super.prototype.init.call(this, serviceInit).then(function () {
                    _this.listenersAfterInitialization.forEach(function (pCallback) {
                        pCallback.call(_this, serviceInit, initDate);
                    });
                    deferred.resolve(self);
                }, function (reason) {
                    deferred.reject(reason);
                });
                return deferred.promise;
            };
            ServiceAgentExtended.prototype.addListenerBeforeInitialization = function (pCallback) {
                this.listenersBeforeInitialization.push(pCallback);
            };
            ServiceAgentExtended.prototype.addListenerAfterInitialization = function (pCallback) {
                this.listenersAfterInitialization.push(pCallback);
            };
            ServiceAgentExtended.prototype.removeListenerBeforeInitialization = function (pCallback) {
                Services.CoreCommon.ArrayUtils.remove(this.listenersBeforeInitialization, function (pCurrent) {
                    return pCurrent === pCallback;
                });
            };
            ServiceAgentExtended.prototype.removeListenerAfterInitialization = function (pCallback) {
                Services.CoreCommon.ArrayUtils.remove(this.listenersAfterInitialization, function (pCurrent) {
                    return pCurrent === pCallback;
                });
            };
            /**
             * @ngdoc method
             * @name sendRequest
             * @methodOf moduleAgent.serviceAgentExtended
             * @description
             * Envoi une requête pour consommer une ressource.
             * L'objet retourné peut être instancié par un type si fourni. L'opération est asynchrone et renvoie donc une promise.
             * @param {Object} settings interface de définition des paramètres d'envoi d'une requête REST.
             * @param {string=} resultType Type explicite de l'objet à renvoyer. Ce paramètre permet d'instancier un objet de type classe.
             * @returns {Object} Promise contenant la réponse de la requête.
             */
            ServiceAgentExtended.prototype.sendRequest = function (settings, resultType) {
                var _this = this;
                var deferred = this.$q.defer();
                _super.prototype.SendRequest.call(this, settings).then(function (result) {
                    if (resultType) {
                        result = _this.instanceLoaderService.createInstance(resultType, result);
                    }
                    if (result && typeof result === "string") {
                        // on suppose que le type de retour est toujours de type json et doit donc être converti en objet
                        result = JSON.parse(result);
                    }
                    deferred.resolve(result);
                }, function (error) {
                    deferred.reject(error);
                });
                return deferred.promise;
            };
            ServiceAgentExtended.prototype.LogDemarrage = function () {
                var _this = this;
                ServiceAgentExtended.logger_extended.debug("Début demarrage");
                if (this.$timeout)
                    this.$timeout(function () {
                        ServiceAgentExtended.logger_extended.debug("Fin render");
                    });
                if (this.$rootScope)
                    this.$rootScope.$evalAsync(function () {
                        ServiceAgentExtended.logger_extended.debug("Fin digest");
                        if (_this.$timeout)
                            _this.$timeout(function () {
                                ServiceAgentExtended.logger_extended.debug("Fin render");
                            });
                    });
            };
            ServiceAgentExtended.prototype.OnNotification = function (notification, agent) {
                if (notification.Sujet === 'FrameHidden') {
                    window.clearTimeout(this._watcherCountTimeout);
                }
                else if (notification.Sujet === 'FrameShown') {
                    if (agent && agent['countWatchers'])
                        agent['countWatchers']();
                }
                _super.prototype.OnNotification.call(this, notification, agent);
            };
            ServiceAgentExtended.CLASS_NAME_EXTENDED = 'MyWay.Services.ServiceAgentExtended';
            ServiceAgentExtended.logger_extended = Services.Loggers.LoggerFactory.INSTANCE.getClass(ServiceAgentExtended.CLASS_NAME_EXTENDED);
            ServiceAgentExtended.onNewInstanceTraitements = [];
            ServiceAgentExtended.$inject = [
                "$q",
                "instanceLoaderService",
                "$timeout",
                "$rootScope"
            ];
            return ServiceAgentExtended;
        }(Services.ServiceAgent));
        Services.ServiceAgentExtended = ServiceAgentExtended;
        if (typeof angular != 'undefined') {
            Services.moduleAgent.provider('serviceAgentExtended', function () {
                this.$get = ["$q", "instanceLoaderService", "$timeout", "$rootScope", function ($q, instanceLoaderService, $timeout, $rootScope) {
                        return ServiceAgentProvider.Instance($q, instanceLoaderService, $timeout, $rootScope);
                    }];
            });
            Services.moduleAgent.provider('serviceAgent', function () {
                this.$get = ["$q", "instanceLoaderService", "$timeout", "$rootScope", function ($q, instanceLoaderService, $timeout, $rootScope) {
                        return ServiceAgentProvider.Instance($q, instanceLoaderService, $timeout, $rootScope);
                    }];
            });
            Services.moduleAgent.provider('serviceAgentProvider', function () {
                this.$get = ["$q", "instanceLoaderService", "$timeout", "$rootScope", function ($q, instanceLoaderService, $timeout, $rootScope) {
                        return ServiceAgentProvider.Instance($q, instanceLoaderService, $timeout, $rootScope);
                    }];
            });
        }
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Core;
        (function (Core) {
            var CoreAgent = /** @class */ (function (_super) {
                __extends(CoreAgent, _super);
                function CoreAgent() {
                    var _this = _super.call(this) || this;
                    _this._listenersOnNotification = [];
                    return _this;
                }
                CoreAgent.prototype.addListenerOnNotification = function (pCallback) {
                    this._listenersOnNotification.push(pCallback);
                };
                CoreAgent.prototype.removeListenerOnNotification = function (pCallback) {
                    Services.CoreCommon.ArrayUtils.remove(this._listenersOnNotification, function (pCallbackFound) {
                        return pCallback === pCallbackFound;
                    });
                };
                CoreAgent.prototype.sendNotification = function (notification) {
                    this._listenersOnNotification.forEach(function (pCallback) {
                        pCallback(notification);
                    });
                };
                CoreAgent.prototype.init = function (pAgentLibrary, pMessageService, pMessageInitializer) {
                    this.library = pAgentLibrary;
                    this.messageService = pMessageService;
                    return _super.prototype.getPromesseSelfResoved.call(this);
                };
                CoreAgent.prototype.reception = function (pMessage) {
                    var _this = this;
                    return _super.prototype.promesseTryCatch.call(this, function (pDefer) {
                        pDefer.reject(new Services.Erreur("Subject " + pMessage.subject + " not implemented on " + _this.name + " agent"));
                    });
                };
                CoreAgent.prototype.dispose = function () {
                    return _super.prototype.getPromesseSelfResoved.call(this);
                };
                CoreAgent.prototype.sendMessage = function (pSubject, pContent) {
                    return this.messageService.sendWithResponse(this.name, pSubject, pContent);
                };
                return CoreAgent;
            }(Services.CoreCommon));
            Core.CoreAgent = CoreAgent;
            Services.Components.RegistryAgent.getInstance().register(CoreAgent);
        })(Core = Services.Core || (Services.Core = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["BaseDeDonnees"] = "BaseDeDonnees";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var BaseDeDonnees;
        (function (BaseDeDonnees) {
            var Messages;
            (function (Messages) {
                var BaseDeDonneesMessageSubject;
                (function (BaseDeDonneesMessageSubject) {
                    BaseDeDonneesMessageSubject[BaseDeDonneesMessageSubject["GetBases"] = 0] = "GetBases";
                    BaseDeDonneesMessageSubject[BaseDeDonneesMessageSubject["Get"] = 1] = "Get";
                    BaseDeDonneesMessageSubject[BaseDeDonneesMessageSubject["GetAll"] = 2] = "GetAll";
                    BaseDeDonneesMessageSubject[BaseDeDonneesMessageSubject["Find"] = 3] = "Find";
                    BaseDeDonneesMessageSubject[BaseDeDonneesMessageSubject["Count"] = 4] = "Count";
                    BaseDeDonneesMessageSubject[BaseDeDonneesMessageSubject["Ajouter"] = 5] = "Ajouter";
                    BaseDeDonneesMessageSubject[BaseDeDonneesMessageSubject["Supprimer"] = 6] = "Supprimer";
                    BaseDeDonneesMessageSubject[BaseDeDonneesMessageSubject["MettreAJour"] = 7] = "MettreAJour";
                    BaseDeDonneesMessageSubject[BaseDeDonneesMessageSubject["ResetAll"] = 8] = "ResetAll";
                })(BaseDeDonneesMessageSubject = Messages.BaseDeDonneesMessageSubject || (Messages.BaseDeDonneesMessageSubject = {}));
                //Enregistrement du composant et de ses dépendances
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.BaseDeDonnees, []);
            })(Messages = BaseDeDonnees.Messages || (BaseDeDonnees.Messages = {}));
        })(BaseDeDonnees = Services.BaseDeDonnees || (Services.BaseDeDonnees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des bases de données
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BaseDeDonnees;
        (function (BaseDeDonnees) {
            var messages;
            (function (messages) {
                messages.NOM_BIBLIOTHEQUE = 'BaseDeDonnees';
                var DB_UPGRADE_TYPE;
                (function (DB_UPGRADE_TYPE) {
                    DB_UPGRADE_TYPE[DB_UPGRADE_TYPE["TABLE_CREER"] = 'tableCreer'] = "TABLE_CREER";
                    DB_UPGRADE_TYPE[DB_UPGRADE_TYPE["TABLE_SUPPRIMER"] = 'tableSupprimer'] = "TABLE_SUPPRIMER";
                    DB_UPGRADE_TYPE[DB_UPGRADE_TYPE["INDEX_CREER"] = 'indexCreer'] = "INDEX_CREER";
                    DB_UPGRADE_TYPE[DB_UPGRADE_TYPE["INDEX_SUPPRIMER"] = 'indexSupprimer'] = "INDEX_SUPPRIMER";
                })(DB_UPGRADE_TYPE = messages.DB_UPGRADE_TYPE || (messages.DB_UPGRADE_TYPE = {}));
                var CAPACITE;
                (function (CAPACITE) {
                    CAPACITE[CAPACITE["VOLATILE"] = 1] = "VOLATILE";
                    CAPACITE[CAPACITE["MONO_ENREGISTREMENT"] = 2] = "MONO_ENREGISTREMENT";
                    CAPACITE[CAPACITE["MULTI_ENREGISTREMENT"] = 3] = "MULTI_ENREGISTREMENT";
                })(CAPACITE = messages.CAPACITE || (messages.CAPACITE = {}));
                var TYPE_BASE;
                (function (TYPE_BASE) {
                    TYPE_BASE[TYPE_BASE["INDEXEDDB"] = 'indexeddb'] = "INDEXEDDB";
                    TYPE_BASE[TYPE_BASE["LOCALSTORAGE"] = 'localstorage'] = "LOCALSTORAGE";
                    TYPE_BASE[TYPE_BASE["MEMORY"] = 'memory'] = "MEMORY";
                })(TYPE_BASE = messages.TYPE_BASE || (messages.TYPE_BASE = {}));
                var CLE_TYPE;
                (function (CLE_TYPE) {
                    CLE_TYPE[CLE_TYPE["AUTOINCREMENT"] = 'autoincrement'] = "AUTOINCREMENT";
                    CLE_TYPE[CLE_TYPE["PATH"] = 'path'] = "PATH";
                })(CLE_TYPE = messages.CLE_TYPE || (messages.CLE_TYPE = {}));
                var CRITERE_TYPE;
                (function (CRITERE_TYPE) {
                    CRITERE_TYPE[CRITERE_TYPE["EGAL"] = 'egal'] = "EGAL";
                    CRITERE_TYPE[CRITERE_TYPE["INFERIEUR"] = 'inferieur'] = "INFERIEUR";
                    CRITERE_TYPE[CRITERE_TYPE["SUPERIEUR"] = 'superieur'] = "SUPERIEUR";
                    CRITERE_TYPE[CRITERE_TYPE["BORNES"] = 'bornes'] = "BORNES";
                })(CRITERE_TYPE = messages.CRITERE_TYPE || (messages.CRITERE_TYPE = {}));
                var CRITERE_DIRECTION;
                (function (CRITERE_DIRECTION) {
                    CRITERE_DIRECTION[CRITERE_DIRECTION["PRECEDENT"] = 'precedent'] = "PRECEDENT";
                    CRITERE_DIRECTION[CRITERE_DIRECTION["PRECEDENT_UNIQUE"] = 'precedent_unique'] = "PRECEDENT_UNIQUE";
                    CRITERE_DIRECTION[CRITERE_DIRECTION["SUIVANT"] = 'suivant'] = "SUIVANT";
                    CRITERE_DIRECTION[CRITERE_DIRECTION["SUIVANT_UNIQUE"] = 'suivant_unique'] = "SUIVANT_UNIQUE";
                })(CRITERE_DIRECTION = messages.CRITERE_DIRECTION || (messages.CRITERE_DIRECTION = {}));
            })(messages = BaseDeDonnees.messages || (BaseDeDonnees.messages = {}));
        })(BaseDeDonnees = Services.BaseDeDonnees || (Services.BaseDeDonnees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Dates"] = "Dates";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des dates
* @module $date
* enum : FORMATS_DATE - public - Enumération des différents formats de date
* fonction : privateTrace – privé - Gestion des traces internes au module
* fonction : getDateDuJour – public - Retourne la date du jour au format passé en paramètre
* fonction : addDate – public - Ajoute des jours à une date
* fonction : addDateCal – public - Ajoute des jours à une date
* fonction : addDateMonth – public - Ajoute des jours à une date
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Dates;
        (function (Dates) {
            var FORMATS_DATE;
            (function (FORMATS_DATE) {
                FORMATS_DATE[FORMATS_DATE["aaaammjj"] = 10] = "aaaammjj";
            })(FORMATS_DATE = Dates.FORMATS_DATE || (Dates.FORMATS_DATE = {}));
            ;
            var DatesCommon = /** @class */ (function (_super) {
                __extends(DatesCommon, _super);
                //private _logger: Trace.ILogger;
                function DatesCommon() {
                    return _super.call(this, Services.Components.ComponentType.Dates) || this;
                }
                DatesCommon.prototype.init = function () {
                    return Services.CoreCommon.getPromesseSelfResoved();
                };
                DatesCommon.prototype.dispose = function () {
                    return Services.CoreCommon.getPromesseSelfResoved();
                };
                // Retourne la date du jour au format passé en paramètre
                DatesCommon.prototype.getDateDuJour = function (format) {
                    // Vérification des paramètres d'entrée
                    var erreurParams = "";
                    if (!Services.Controle.StaticEnumControle.isAnEnumValue(format, FORMATS_DATE))
                        erreurParams += "Le paramètre 'format' est obligatoire et sa valeur doit faire partie de l'enum 'FORMATS_DATE' / ";
                    if (erreurParams != "") {
                        erreurParams = erreurParams.substring(0, erreurParams.lastIndexOf("/") - 1);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDateDuJour');
                        DatesCommon.logger.error(erreurParams);
                        // Sortie de la fonction
                        return;
                    }
                    var _now = new Date();
                    switch (format) {
                        case FORMATS_DATE.aaaammjj:
                            return _now.getFullYear() + ('0' + (_now.getMonth() + 1)).substr(-2, 2) + ('0' + _now.getDate()).substr(-2, 2);
                        default:
                            var erreurMessage = "Le format '" + format + "' n'est pas reconnu!";
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDateDuJour');
                            DatesCommon.logger.error(erreurMessage);
                            return erreurMessage;
                    }
                };
                DatesCommon.prototype.isBissextile = function () {
                    var annee = new Date().getFullYear();
                    return (((annee % 4 === 0) && (annee % 100 !== 0)) || (annee % 400 === 0));
                };
                DatesCommon.prototype.getNbJoursMois = function (annee, mois) {
                    return [31, (this.isBissextile() ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][mois];
                };
                DatesCommon.prototype.CompareDates = function (date1, date2, Periode) {
                    var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
                    var diffDays = Math.round(Math.abs((date1.getTime() - date2.getTime()) / (oneDay)));
                    var Periodeadiviser;
                    switch (Periode) {
                        case 'd':
                            Periodeadiviser = 1;
                            break;
                        case 'm':
                            Periodeadiviser = 30;
                            break;
                        case 'y':
                            Periodeadiviser = 365;
                            break;
                        default: Periodeadiviser = 1;
                    }
                    return Math.floor(diffDays / Periodeadiviser);
                };
                // Ajoute dans l'ordre des jours, mois ou années à une date
                // d: date à laquelle on ajoute des jours, mois ou années
                // jours: nombre de jours à ajouter (peut être négatif)
                // mois: nombre de mois à ajouter (peut être négatif)
                // annees: nombre d'années à ajouter (peut être négatif)
                DatesCommon.prototype.addDate = function (d, jours, mois, annees) {
                    // Vérification des paramètres d'entrée
                    var erreurParams = "";
                    if (!Services.Controle.StaticDateControle.isDate(d))
                        erreurParams += "Le paramètre 'd' est obligatoire et doit être un objet date / ";
                    if (!Services.Controle.StaticNumberControle.isInt(jours))
                        erreurParams += "Le paramètre 'jours' est obligatoire et doit être un nombre entier / ";
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(mois) && !Services.Controle.StaticNumberControle.isInt(mois))
                        erreurParams += "Le paramètre 'mois' doit être un nombre entier / ";
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(annees) && !Services.Controle.StaticNumberControle.isInt(annees))
                        erreurParams += "Le paramètre 'annees' doit être un nombre entier / ";
                    if (erreurParams != "") {
                        erreurParams = erreurParams.substring(0, erreurParams.lastIndexOf("/") - 1);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'addDate');
                        DatesCommon.logger.error(erreurParams);
                        // Sortie de la fonction
                        return;
                    }
                    //ajout de jours
                    var d1 = d.getTime();
                    var d2 = new Date();
                    if (jours > 0) {
                        d1 += 24 * 3600 * 1000 * jours;
                    }
                    d2.setTime(d1);
                    //ajout de mois
                    if (mois != undefined && mois > 0) {
                        var jouractuel = d2.getDate();
                        d2.setDate(1);
                        d2.setMonth(d2.getMonth() + mois);
                        var nbjoursdumoisactuel = this.getNbJoursMois(d2.getFullYear(), d2.getMonth());
                        d2.setDate(Math.min(jouractuel, nbjoursdumoisactuel));
                    }
                    //ajout d'année
                    if (annees != undefined && annees > 0) {
                        d2.setFullYear(d2.getFullYear() + annees);
                    }
                    return d2;
                };
                DatesCommon.CLASS_NAME = 'MyWay.Services.Dates.DatesCommon';
                DatesCommon.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(DatesCommon.CLASS_NAME);
                return DatesCommon;
            }(Services.Components.ComponentBase));
            Dates.DatesCommon = DatesCommon;
            Services.Components.RegistryCommon.getInstance().register(DatesCommon);
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Dates, []);
        })(Dates = Services.Dates || (Services.Dates = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Export"] = "Export";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Export;
        (function (Export) {
            var ExportMessageSubject;
            (function (ExportMessageSubject) {
                ExportMessageSubject[ExportMessageSubject["ExporterFichier"] = 0] = "ExporterFichier";
            })(ExportMessageSubject = Export.ExportMessageSubject || (Export.ExportMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Export, [
                Services.Components.ComponentType.Core
            ]);
        })(Export = Services.Export || (Services.Export = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des exports (module commun aux agents et aux managers)
* @module MyWay.Services.Export
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Export;
        (function (Export) {
            /**
            * Enumération permettant de définir le format du fichier à exporter
            * @enum Export.FORMAT_FICHIER
            */
            var FORMAT_FICHIER;
            (function (FORMAT_FICHIER) {
                FORMAT_FICHIER[FORMAT_FICHIER["CSV"] = 'csv'] = "CSV";
            })(FORMAT_FICHIER = Export.FORMAT_FICHIER || (Export.FORMAT_FICHIER = {}));
            ;
            /**
            * Enumération permettant la localisation du fichier à exporter
            * Permet de formater les données suivant la localisation du logiciel.
            * @enum Export.LOCALISATION
            */
            var LOCALISATION;
            (function (LOCALISATION) {
                LOCALISATION[LOCALISATION["EN"] = 0] = "EN";
                LOCALISATION[LOCALISATION["FR"] = 1] = "FR";
            })(LOCALISATION = Export.LOCALISATION || (Export.LOCALISATION = {}));
            ;
            ;
            ;
        })(Export = Services.Export || (Services.Export = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            'use strict';
            var RegistryType;
            (function (RegistryType) {
                RegistryType["API"] = "API";
            })(RegistryType = Components.RegistryType || (Components.RegistryType = {}));
            var RegistryApi = /** @class */ (function (_super) {
                __extends(RegistryApi, _super);
                function RegistryApi(factoryRegistries, serviceApiFactory) {
                    var _this = _super.call(this, RegistryType.API, [RegistryType.COMMON]) || this;
                    _this.factoryRegistries = factoryRegistries;
                    _this.serviceApiFactory = serviceApiFactory;
                    _this.capabilities = null;
                    _this.apiInitializer = null;
                    return _this;
                }
                RegistryApi.getInstance = function () {
                    if (RegistryApi.instance === null) {
                        RegistryApi.instance = new RegistryApi(Components.FactoryRegistries.getInstance(), new Services.ServiceApiFactory());
                        Components.FactoryRegistries.getInstance().addRegistry(RegistryApi.instance);
                    }
                    return RegistryApi.instance;
                };
                RegistryApi.prototype.init = function (pComponent) {
                    var _this = this;
                    this.getRegistryCommon().getComponentsInstances().forEach(function (pComponentInstance) {
                        if (!_this._componentsInstancesByKey[pComponentInstance.name]) {
                            _this._componentsInstances.push(pComponentInstance);
                            _this._componentsInstancesByKey[pComponentInstance.name] = pComponentInstance;
                        }
                    });
                    if (!this.capabilities) {
                        return this.serviceApiFactory.GetServiceLocalCapabilities().then(function (pCapabilities) {
                            _this.capabilities = pCapabilities;
                            return _super.prototype.init.call(_this, pComponent);
                        });
                    }
                    else {
                        return _super.prototype.init.call(this, pComponent);
                    }
                };
                RegistryApi.prototype.initializeComponent = function (pApi) {
                    return pApi.init(this.capabilities, this.factoryRegistries.getRegistryInstance(RegistryType.MANAGER).getLibrary(), this.apiInitializer);
                };
                RegistryApi.prototype.getRegistryCommon = function () {
                    return this._dependenciesInstances[0];
                };
                RegistryApi.prototype.setApiInitializer = function (pApiInitializer) {
                    this.apiInitializer = pApiInitializer;
                };
                RegistryApi.instance = null;
                return RegistryApi;
            }(Components.AbstractRegistry));
            Components.RegistryApi = RegistryApi;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentApiBase = /** @class */ (function () {
                function ComponentApiBase(_name) {
                    this._name = _name;
                    this.libraryManager = null;
                    this.privatePortalServiceParameters = null;
                    this.portalServiceParameters = null;
                }
                ComponentApiBase.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    this.libraryManager = pLibraryManager;
                    this.privatePortalServiceParameters = pApiInitializer.privatePortalServiceParameters;
                    this.portalServiceParameters = pApiInitializer.portalServiceParameters;
                    return Services.CoreCommon.getPromesseSelfResoved();
                };
                ComponentApiBase.prototype.dispose = function () {
                    return Services.CoreCommon.getPromesseSelfResoved();
                };
                Object.defineProperty(ComponentApiBase.prototype, "name", {
                    get: function () {
                        return this._name;
                    },
                    enumerable: true,
                    configurable: true
                });
                ComponentApiBase.prototype.WarnLocalServiceUnavailability = function () {
                    ComponentApiBase.loggerBase.warn("Le service local n'a pu être joint et a été désactivé. Veuillez redémarrer le service local et recharger le portail");
                };
                ComponentApiBase.CLASS_NAMEBase = 'MyWay.Services.Component.ComponentApiBase';
                ComponentApiBase.loggerBase = Services.Loggers.LoggerFactory.INSTANCE.getClass(ComponentApiBase.CLASS_NAMEBase);
                return ComponentApiBase;
            }());
            Components.ComponentApiBase = ComponentApiBase;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var PrivatePortalServiceParameters = /** @class */ (function () {
            function PrivatePortalServiceParameters() {
                if (PrivatePortalServiceParameters._instance) {
                    throw new Error("Error: Instantiation failed: Use PrivatePortalServiceParameters.Instance() instead of new.");
                }
                PrivatePortalServiceParameters._instance = this;
            }
            PrivatePortalServiceParameters.Instance = function () {
                if (PrivatePortalServiceParameters._instance === null) {
                    PrivatePortalServiceParameters._instance = new PrivatePortalServiceParameters();
                }
                return PrivatePortalServiceParameters._instance;
            };
            PrivatePortalServiceParameters.prototype.init = function () {
                // REST
                this.AideUrl = Services.PortalServiceParameters.Instance().RestUrl + '/aideenligne/v1';
                this.ApplicationUrl = Services.PortalServiceParameters.Instance().RestUrl + '/portailmyway-v1/application';
                this.DonneesDelocaliseesUrl = Services.PortalServiceParameters.Instance().RestUrl + '/donneesDelocalisees/v1/';
                this.TraceUrl = Services.PortalServiceParameters.Instance().TraceUrl + '/trace/v2/trace';
                this.ConfigurationPosteUrl = Services.PortalServiceParameters.Instance().RestUrl + '/configuration-poste/v1/configuration';
                this.PreferencesUrl = Services.PortalServiceParameters.Instance().RestUrl + '/preferenceUtilisateur/v1';
                this.TraceSuiviUrl = Services.PortalServiceParameters.Instance().TraceUrl + '/trace-suivis/v1/';
                this.AuthentificationUrl = Services.PortalServiceParameters.Instance().RestUrl + '/infos-poste/v1/configuration';
                this.NumerotationTelephoniqueUrl = Services.PortalServiceParameters.Instance().RestUrl + '/boiteoutil/v1/numerotationTelephonique';
                this.GetFichierFromGEDUrl = Services.PortalServiceParameters.Instance().RestUrl + '/document-v1/contenu';
                this.HabilitationUrl = Services.PortalServiceParameters.Instance().RestUrl + '/habilitation/v2';
                this.RADLADUrl = Services.PortalServiceParameters.Instance().RestUrl + '/document-v1/reconnaissance';
                this.StockageUrl = Services.PortalServiceParameters.Instance().RestUrl + '/document-v1/stockage';
                this.GedUrl = Services.PortalServiceParameters.Instance().RestUrl + '/document/v1/contenu';
                this.ReferentielProcessusSiUrl = Services.PortalServiceParameters.Instance().RestUrl + '/referentielprocessussi/v1';
                this.PortalInfoUrl = Services.PortalServiceParameters.Instance().RestUrl + '/portailmyway/v1';
                // SPA
                this.LisaUrl = Services.PortalServiceParameters.Instance().SpaUrl + '/lisa/v2';
                // JAB (suppression car ne tient pas compte du multisession utilisateur)
                //this.JABUrl = PortalServiceParameters.Instance().ServiceLocaleUrl + '/contexte/EnregistrerJournalBancaireNSDK';
                // SERVICE DE GESTION DES PORTS
                this.PortsServiceUrl = Services.PortalServiceParameters.Instance().PortsServiceUrl;
                // SERVICE LOCAL
                this.LocalServiceUrl = Services.PortalServiceParameters.Instance().ServiceLocaleUrl;
                // IMPRESSION
                this.ImpressionUrl = Services.PortalServiceParameters.Instance().ImpressionUrl;
                // FICHIER MESSAGE
                this.FichierMessage = '/v1/data/MessagesMyWay_fr.json';
                // LISA PLACE HOLDERS
                this._lisaPlaceHolders = {
                    'VERS': Services.PortalServiceParameters.Instance().Version,
                    'URL-SPA': Services.PortalServiceParameters.Instance().SpaUrl,
                    'URL-SPA-NEW': '##URL-SPA##',
                    'URL_SERVICE_LOCAL': Services.PortalServiceParameters.Instance().ServiceLocaleUrl,
                    'PORT': '',
                    'ALIASTESTAPPS': '/myway.test-apps',
                    'ALIASTESTAPPS-CAPACITES': '/myway.utilitaires-socle-technique.capacites',
                    'ALIASTESTAPPS-CONTEXTVIEWER': '/myway.utilitaires-socle-technique.context-viewer',
                    'ALIASTESTAPPS-DATABASEVIEWER': '/myway.utilitaires-socle-technique.database-viewer',
                    'ALIASTESTAPPS-EXPORT': '/myway.utilitaires-socle-technique.export',
                    'ALIASPORTAIL': '/portail',
                    'PRESPMM': Services.PortalServiceParameters.Instance().PresPMM,
                    'ENVPMM': Services.PortalServiceParameters.Instance().EnvPMM,
                    'DOMPMM': Services.PortalServiceParameters.Instance().DomainePMM
                };
                // LISA FILE
                if (Services.PortalServiceParameters.Instance().LisaFilePath) {
                    this.LisaFileUrl = Services.PortalServiceParameters.Instance().CDNUrl + Services.PortalServiceParameters.Instance().LisaFilePath;
                }
                // SITES AUTORISES
                this.AuthorizedDomains = Services.PortalServiceParameters.Instance().AuthorizedDomains;
                // ENVIRONNEMENT
                this.Environnement = Services.PortalServiceParameters.Instance().Environnement;
                // KOFAX
                this.KofaxUrl = "http://127.0.0.1:23023/session";
            };
            Object.defineProperty(PrivatePortalServiceParameters.prototype, "ModeDebug", {
                get: function () {
                    if (this.TTLModeDebug && this.TTLModeDebug > Date.now())
                        return true;
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PrivatePortalServiceParameters.prototype, "LisaPlaceholders", {
                get: function () {
                    return this._lisaPlaceHolders;
                },
                set: function (value) {
                    this._lisaPlaceHolders = value;
                    // add the placeholders to the global context if context manager available
                },
                enumerable: true,
                configurable: true
            });
            PrivatePortalServiceParameters._instance = null;
            return PrivatePortalServiceParameters;
        }());
        Services.PrivatePortalServiceParameters = PrivatePortalServiceParameters;
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ServiceApiFactory = /** @class */ (function () {
            function ServiceApiFactory() {
                this.DeviceCapabilities = new DeviceCapabilities();
            }
            ServiceApiFactory.prototype.GetServiceLocalCapabilities = function () {
                var _this = this;
                // en premier lieu, nous demandons le port du service local au service des ports (tourne sur 8200 normalement)
                return Services.CoreCommon.SendRequestWithPromise({
                    url: Services.PrivatePortalServiceParameters.Instance().PortsServiceUrl + '/ports/GetPortUtilisateur',
                    cache: false,
                    timeout: 3000
                })
                    .then(function (port) {
                    Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl = "http://localhost:" + port + "/";
                })
                    .catch(function () {
                    return _this.DeviceCapabilities;
                })
                    .finally(function () {
                    // puis, nous demandons au service local ses compétences
                    return Services.CoreCommon.SendRequestWithPromise({
                        url: Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + '/contexte/GetCompetencesSL',
                        cache: false,
                        timeout: 3000
                    })
                        .then(function (competencesSL) {
                        _this.DeviceCapabilities.ServiceLocal = true;
                        _this.DeviceCapabilities.SIRIS = competencesSL.SIRIS;
                        _this.DeviceCapabilities.InteropAppliBancaire = competencesSL.interopApplicationBancaire;
                        ServiceApiFactory.logger.info("GetCompetencesSL : SIRIS=%1;InteropAppliBancaire=%2", competencesSL.SIRIS, competencesSL.interopApplicationBancaire);
                    })
                        .catch(function (error) {
                        _this.DeviceCapabilities.ServiceLocal = false;
                        _this.DeviceCapabilities.SIRIS = false;
                        _this.DeviceCapabilities.InteropAppliBancaire = false;
                        ServiceApiFactory.logger.info("GetCompetencesSL pas disponible : %1", error.codeLibelle);
                    })
                        .finally(function () {
                        _this.DeviceCapabilities.MobileBrowser = Services.CoreCommon.IsMobileBrowser();
                    });
                })
                    .then(function () {
                    return _this.DeviceCapabilities;
                });
            };
            ServiceApiFactory.CLASS_NAME = 'MyWay.Services.ServiceApiFactory';
            ServiceApiFactory.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ServiceApiFactory.CLASS_NAME);
            return ServiceApiFactory;
        }());
        Services.ServiceApiFactory = ServiceApiFactory;
        var DeviceCapabilities = /** @class */ (function () {
            function DeviceCapabilities() {
            }
            return DeviceCapabilities;
        }());
        Services.DeviceCapabilities = DeviceCapabilities;
        var CompetencesServiceLocal = /** @class */ (function () {
            function CompetencesServiceLocal() {
            }
            return CompetencesServiceLocal;
        }());
        Services.CompetencesServiceLocal = CompetencesServiceLocal;
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module qui fournit des méthodes utilitaires sur les tableaux
* @module MyWay.Donnees.ArrayExtension
* classe : StaticArrayExtension - public - Classe statique qui fournit des méthodes utilitaires sur les tableaux (classe utilisée depuis les managers)
* classe : ArrayExtension - public - Classe qui fournit des méthodes utilitaires sur les tableaux (classe utilisée depuis les agents)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Donnees;
        (function (Donnees) {
            /**
            * Classe statique qui fournit des méthodes utilitaires sur les tableaux (classe utilisée depuis les managers)
            * @classe StaticArrayExtension
            * fonction : filtrer – public - Permet de filtrer les éléments dans un tableau en fonction des critères définis
            */
            var StaticArrayExtension = /** @class */ (function () {
                function StaticArrayExtension() {
                }
                /**
                * Permet de filtrer les éléments dans un tableau en fonction des critères définis
                * @param collection {Array<any>} tableau contenant les données à filtrer
                * @param predicat {function} Action de filtre à appliquer sur chaque donnée contenue dans le tableau (la donnée courante est transmise en paramètre: data)
                *                            Doit retourner true si la donnée répond aux critères, false si la données ne répond pas aux critères et null en cas d'erreur
                * @return {Array<any>} Retourne les éléments du tableau qui correspondent au filtre (null en cas d'erreur)
                */
                StaticArrayExtension.filtrer = function (collection, predicat) {
                    // Vérification des paramètres d'entrée
                    var erreurParams = "";
                    if (!Services.Controle.StaticArrayControle.isArray(collection))
                        erreurParams += "Le paramètre 'collection' est obligatoire et doit être un tableau / ";
                    if (!Services.Controle.StaticFunctionControle.isFunction(predicat))
                        erreurParams += "Le paramètre 'predicat' est obligatoire et doit être une fonction / ";
                    if (erreurParams != "") {
                        erreurParams = erreurParams.substring(0, erreurParams.lastIndexOf("/") - 1);
                        // On lève une exception
                        throw erreurParams;
                    }
                    var result = [];
                    var index = -1;
                    var length = collection.length;
                    while (++index < length) {
                        var value = collection[index];
                        var resultCallback = predicat(value);
                        if (Services.Controle.StaticBooleanControle.isBoolean(resultCallback)) {
                            if (resultCallback)
                                result.push(value);
                        }
                        else {
                            result = null;
                            break;
                        }
                    }
                    return result;
                };
                return StaticArrayExtension;
            }());
            Donnees.StaticArrayExtension = StaticArrayExtension;
            /**
            * Classe qui fournit des méthodes utilitaires sur les tableaux (classe utilisée depuis les agents)
            * @classe ArrayExtension
            * fonction : filtrer – public - Permet de filtrer les éléments dans un tableau en fonction des critères définis
            */
            var ArrayExtension = /** @class */ (function () {
                function ArrayExtension() {
                }
                /**
                * Permet de filtrer les éléments dans un tableau en fonction des critères définis
                * @param collection {Array<any>} tableau contenant les données à filtrer
                * @param predicat {function} action de filtre à appliquer sur chaque donnée contenue dans le tableau (la donnée courante est transmise en paramètre: data)
                * @return {Array<any>} Retourne les éléments du tableau qui correspondent au filtre
                */
                ArrayExtension.prototype.filtrer = function (collection, predicat) {
                    return StaticArrayExtension.filtrer(collection, predicat);
                };
                return ArrayExtension;
            }());
            Donnees.ArrayExtension = ArrayExtension;
        })(Donnees = Services.Donnees || (Services.Donnees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Donnees"] = "Donnees";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Donnees;
        (function (Donnees) {
            var DonneesCommon = /** @class */ (function (_super) {
                __extends(DonneesCommon, _super);
                function DonneesCommon() {
                    var _this = _super.call(this, Services.Components.ComponentType.Donnees) || this;
                    _this.Enum = new Donnees.EnumExtension();
                    _this.Array = new Donnees.ArrayExtension();
                    _this.Object = new Donnees.ObjectExtension();
                    _this.String = new Donnees.StringExtension();
                    return _this;
                }
                DonneesCommon.prototype.init = function () {
                    return Services.CoreCommon.getPromesseSelfResoved();
                };
                DonneesCommon.prototype.dispose = function () {
                    return Services.CoreCommon.getPromesseSelfResoved();
                };
                return DonneesCommon;
            }(Services.Components.ComponentBase));
            Donnees.DonneesCommon = DonneesCommon;
            Services.Components.RegistryCommon.getInstance().register(DonneesCommon);
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Donnees, []);
        })(Donnees = Services.Donnees || (Services.Donnees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module qui fournit des méthodes utilitaires sur les enum
* @module MyWay.Donnees
* classe : StaticEnumExtension - public - Classe statique qui fournit des méthodes utilitaires sur les enum (classe utilisée depuis les managers)
* classe : EnumExtension - public - Classe qui fournit des méthodes utilitaires sur les enum (classe utilisée depuis les agents)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Donnees;
        (function (Donnees) {
            /**
            * Classe statique qui fournit des méthodes utilitaires sur les enum (classe utilisée depuis les managers)
            * @classe StaticEnumExtension
            * fonction : getNames – public - Permet de récupérer tous les membres d'un enum sous la forme d'un tableau de chaines de caractères
            * fonction : getName – public - Permet de récupérer un membre d'un enum correspondant à la valeur passée en paramètre
            * fonction : getValues – public - Permet de récupérer toutes les valeurs d'un enum sous la forme d'un tableau de nombres
            * fonction : getValue – public - Permet de récupérer une valeur d'un enum correspondant au membre passé en paramètre
            * fonction : getValuesAndNames - public - Permet de récupérer toutes les valeurs et tous les membres d'un enum sous la forme d'un tableau de valeur, membre
            */
            var StaticEnumExtension = /** @class */ (function () {
                function StaticEnumExtension() {
                }
                /**
                * Permet de récupérer tous les membres d'un enum sous la forme d'un tableau de chaines de caractères
                * @param e {any} enum pour lequel on veut récupérer les différents membres
                * @return {Array<string>} Retourne les membres de l'enum
                */
                StaticEnumExtension.getNames = function (e) {
                    var a = [];
                    for (var val in e) {
                        if (typeof e[val] === 'number') {
                            a.push(val);
                        }
                    }
                    return a;
                };
                /**
                * Permet de récupérer un membre d'un enum correspondant à la valeur passée en paramètre
                * @param e {any} enum pour lequel on veut récupérer le membre
                * @param value {number} valeur pour laquelle on veut récupérer le membre de l'enum
                * @return {string} Retourne le membre de l'enum correspondant à la valeur passée en paramètre
                */
                StaticEnumExtension.getName = function (e, value) {
                    var exist = null;
                    for (var val in e) {
                        if (typeof e[val] === 'number' && e[val] === value) {
                            exist = val;
                        }
                    }
                    return exist;
                };
                /**
                * Permet de récupérer toutes les valeurs d'un enum sous la forme d'un tableau de nombres
                * @param e {any} enum pour lequel on veut récupérer les différentes valeurs
                * @return {Array<number>} Retourne les valeurs de l'enum
                */
                StaticEnumExtension.getValues = function (e) {
                    var a = [];
                    for (var val in e) {
                        if (!(typeof e[val] === 'number')) {
                            a.push(parseInt(val, 10));
                        }
                    }
                    return a;
                };
                /**
                * Permet de récupérer une valeur d'un enum correspondant au membre passé en paramètre
                * @param e {any} enum pour lequel on veut récupérer la valeur
                * @param name {string} membre pour lequel on veut récupérer la valeur
                * @return {number} Retourne la valeur de l'enum correspondant au membre passé en paramètre
                */
                StaticEnumExtension.getValue = function (e, name) {
                    var exist = null;
                    for (var val in e) {
                        if (!(typeof e[val] === 'number') && e[val] === name) {
                            exist = Number(val);
                        }
                    }
                    return exist;
                };
                /**
                * Permet de récupérer toutes les valeurs et tous les membres d'un enum sous la forme d'un tableau d'objets contenant les membres et les valeurs de l'enum
                * @param e {any} enum pour lequel on veut récupérer les différents membres et les différentes valeurs
                * @return {number} Retourne toutes les valeurs et tous les membres de l'enum
                */
                StaticEnumExtension.getValuesAndNames = function (e) {
                    var a = [];
                    for (var val in e) {
                        if (!(typeof e[val] === 'number')) {
                            a.push({ value: Number(val), name: e[Number(val)] });
                        }
                    }
                    return a;
                };
                return StaticEnumExtension;
            }());
            Donnees.StaticEnumExtension = StaticEnumExtension;
            /**
            * Classe qui fournit des méthodes utilitaires sur les enum (classe utilisée depuis les agents)
            * @classe EnumExtension
            * fonction : getNames – public - Permet de récupérer tous les membres d'un enum sous la forme d'un tableau de chaines de caractères
            * fonction : getName – public - Permet de récupérer un membre d'un enum correspondant à la valeur passée en paramètre
            * fonction : getValues – public - Permet de récupérer toutes les valeurs d'un enum sous la forme d'un tableau de nombres
            * fonction : getValue – public - Permet de récupérer une valeur d'un enum correspondant au membre passé en paramètre
            * fonction : getValuesAndNames - public - Permet de récupérer toutes les valeurs et tous les membres d'un enum sous la forme d'un tableau de valeur, membre
            */
            var EnumExtension = /** @class */ (function () {
                function EnumExtension() {
                }
                /**
                * Permet de récupérer tous les membres d'un enum sous la forme d'un tableau de chaines de caractères
                * @param e {any} enum pour lequel on veut récupérer les différents membres
                * @return {Array<string>} Retourne les membres de l'enum
                */
                EnumExtension.prototype.getNames = function (e) {
                    return StaticEnumExtension.getNames(e);
                };
                /**
                * Permet de récupérer un membre d'un enum correspondant à la valeur passée en paramètre
                * @param e {any} enum pour lequel on veut récupérer le membre
                * @param value {number} valeur pour laquelle on veut récupérer le membre de l'enum
                * @return {string} Retourne le membre de l'enum correspondant à la valeur passée en paramètre
                */
                EnumExtension.prototype.getName = function (e, value) {
                    return StaticEnumExtension.getName(e, value);
                };
                /**
                * Permet de récupérer toutes les valeurs d'un enum sous la forme d'un tableau de nombres
                * @param e {any} enum pour lequel on veut récupérer les différentes valeurs
                * @return {Array<number>} Retourne les valeurs de l'enum
                */
                EnumExtension.prototype.getValues = function (e) {
                    return StaticEnumExtension.getValues(e);
                };
                /**
                * Permet de récupérer une valeur d'un enum correspondant au membre passé en paramètre
                * @param e {any} enum pour lequel on veut récupérer la valeur
                * @param name {string} membre pour lequel on veut récupérer la valeur
                * @return {number} Retourne la valeur de l'enum correspondant au membre passé en paramètre
                */
                EnumExtension.prototype.getValue = function (e, name) {
                    return StaticEnumExtension.getValue(e, name);
                };
                /**
                * Permet de récupérer toutes les valeurs et tous les membres d'un enum sous la forme d'un tableau d'objets contenant les membres et les valeurs de l'enum.
                * @param e {any} enum pour lequel on veut récupérer les différents membres et les différentes valeurs
                * @return {number} Retourne toutes les valeurs et tous les membres de l'enum
                */
                EnumExtension.prototype.getValuesAndNames = function (e) {
                    return StaticEnumExtension.getValuesAndNames(e);
                };
                return EnumExtension;
            }());
            Donnees.EnumExtension = EnumExtension;
        })(Donnees = Services.Donnees || (Services.Donnees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module qui fournit des méthodes utilitaires sur les objets
* @module MyWay.Donnees.ObjectExtension
* classe : StaticObjectExtension - public - Classe statique qui fournit des méthodes utilitaires sur les objets (classe utilisée depuis les managers)
* classe : ObjectExtension - public - Classe qui fournit des méthodes utilitaires sur les objets (classe utilisée depuis les agents)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Donnees;
        (function (Donnees) {
            /**
            * Classe statique qui fournit des méthodes utilitaires sur les objets (classe utilisée depuis les managers)
            * @classe StaticObjectExtension
            * fonction : getTaille – public - Retourne la taille d'un objet
            */
            var StaticObjectExtension = /** @class */ (function () {
                function StaticObjectExtension() {
                }
                /**
                * Retourne la taille d'un objet
                * @param objet {any} objet dont on veut calculer la taille
                * @return {number} Retourne la taille de l'objet
                */
                StaticObjectExtension.getTaille = function (objet) {
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(objet)) {
                        return JSON.stringify(objet).length;
                    }
                    else {
                        return 0;
                    }
                };
                return StaticObjectExtension;
            }());
            Donnees.StaticObjectExtension = StaticObjectExtension;
            /**
            * Classe qui fournit des méthodes utilitaires sur les objets (classe utilisée depuis les agents)
            * @classe ObjectExtension
            * fonction : getTaille – public - Retourne la taille d'un objet
            */
            var ObjectExtension = /** @class */ (function () {
                function ObjectExtension() {
                }
                /**
                * Retourne la taille d'un objet
                * @param objet {any} objet dont on veut calculer la taille
                * @return {number} Retourne la taille de l'objet
                */
                ObjectExtension.prototype.getTaille = function (objet) {
                    return StaticObjectExtension.getTaille(objet);
                };
                return ObjectExtension;
            }());
            Donnees.ObjectExtension = ObjectExtension;
        })(Donnees = Services.Donnees || (Services.Donnees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module qui fournit des méthodes utilitaires sur les chaines de caractères
* @module MyWay.Donnees.StringExtension
* classe : StaticStringExtension - public - Classe statique qui fournit des méthodes utilitaires sur les string (classe utilisée depuis les managers)
* classe : StringExtension - public - Classe qui fournit des méthodes utilitaires sur les string (classe utilisée depuis les agents)
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Donnees;
        (function (Donnees) {
            /**
            * Classe statique qui fournit des méthodes utilitaires sur les string (classe utilisée depuis les managers)
            * @classe StaticStringExtension
            * fonction : getEmptyStringIfNotStringOrGetItSelf – public - Retourne une chaine de caractères vide si le paramètre en entrée n'est pas une chaine de caractère. Retourne le paramètre en entrée sinon.
            */
            var StaticStringExtension = /** @class */ (function () {
                function StaticStringExtension() {
                }
                /**
                * Retourne une chaine de caractères vide si le paramètre en entrée n'est pas une chaine de caractère. Retourne le paramètre en entrée sinon.
                * @param valueToTest {any} valeur à tester/modifer
                * @return {number} Retourne une chaine de caractères vide si le paramètre en entrée n'est pas une chaine de caractère. Retourne le paramètre en entrée sinon
                */
                StaticStringExtension.getEmptyStringIfNotStringOrGetItSelf = function (valueToTest) {
                    if (Services.Controle.StaticStringControle.isStringNotEmpty(valueToTest)) {
                        return valueToTest;
                    }
                    else {
                        return "";
                    }
                };
                return StaticStringExtension;
            }());
            Donnees.StaticStringExtension = StaticStringExtension;
            /**
            * Classe qui fournit des méthodes utilitaires sur les objets (classe utilisée depuis les agents)
            * @classe ObjectExtension
            * fonction : getTaille – public - Retourne la taille d'un objet
            */
            var StringExtension = /** @class */ (function () {
                function StringExtension() {
                }
                /**
                * Retourne une chaine de caractères vide si le paramètre en entrée n'est pas une chaine de caractère. Retourne le paramètre en entrée sinon.
                * @param valueToTest {any} valeur à tester/modifer
                * @return {number} Retourne une chaine de caractères vide si le paramètre en entrée n'est pas une chaine de caractère. Retourne le paramètre en entrée sinon
                */
                StringExtension.prototype.getEmptyStringIfNotStringOrGetItSelf = function (valueToTest) {
                    return StaticStringExtension.getEmptyStringIfNotStringOrGetItSelf(valueToTest);
                };
                return StringExtension;
            }());
            Donnees.StringExtension = StringExtension;
        })(Donnees = Services.Donnees || (Services.Donnees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des fichiers
* @module MyWay.Services.Fichier
* enum : TYPE_FICHIER - public - Enumération correspondant aux différents types de fichier
* enum : TYPE_DONNEES_A_SAUVER - Enumération correspondant aux différents types de données à sauvegarder
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Fichier;
        (function (Fichier) {
            /**
            * Enumération correspondant aux différents types de fichier
            * Les valeurs inférieures à 100 sont réservées aux types de fichier autorisés pour la génération de document (API Impression)
            * @enum Fichier.TYPE_FICHIER
            */
            var TYPE_FICHIER;
            (function (TYPE_FICHIER) {
                TYPE_FICHIER[TYPE_FICHIER["PDF"] = 0] = "PDF";
                TYPE_FICHIER[TYPE_FICHIER["PDF_EMBED"] = 5] = "PDF_EMBED";
                TYPE_FICHIER[TYPE_FICHIER["PDFA_1A"] = 10] = "PDFA_1A";
                TYPE_FICHIER[TYPE_FICHIER["PDFA_1B"] = 15] = "PDFA_1B";
                TYPE_FICHIER[TYPE_FICHIER["PDFX_1_2001"] = 20] = "PDFX_1_2001";
                TYPE_FICHIER[TYPE_FICHIER["PDFX_1A_2001"] = 25] = "PDFX_1A_2001";
                TYPE_FICHIER[TYPE_FICHIER["PDFX_1A_2003"] = 30] = "PDFX_1A_2003";
                TYPE_FICHIER[TYPE_FICHIER["PDFX_3_2002"] = 35] = "PDFX_3_2002";
                TYPE_FICHIER[TYPE_FICHIER["PDFX_3_2003"] = 40] = "PDFX_3_2003";
                TYPE_FICHIER[TYPE_FICHIER["JSON"] = 105] = "JSON";
                TYPE_FICHIER[TYPE_FICHIER["TAR_GZ"] = 110] = "TAR_GZ";
                TYPE_FICHIER[TYPE_FICHIER["WORDML"] = 100] = "WORDML";
            })(TYPE_FICHIER = Fichier.TYPE_FICHIER || (Fichier.TYPE_FICHIER = {}));
            ;
            /**
            * Enumération correspondant aux différents types de données à sauvegarder
            * @enum Fichier.TYPE_DONNEES_A_SAUVER
            */
            var TYPE_DONNEES_A_SAUVER;
            (function (TYPE_DONNEES_A_SAUVER) {
                TYPE_DONNEES_A_SAUVER[TYPE_DONNEES_A_SAUVER["BLOB"] = 0] = "BLOB";
                TYPE_DONNEES_A_SAUVER[TYPE_DONNEES_A_SAUVER["BASE64"] = 1] = "BASE64";
            })(TYPE_DONNEES_A_SAUVER = Fichier.TYPE_DONNEES_A_SAUVER || (Fichier.TYPE_DONNEES_A_SAUVER = {}));
            ;
        })(Fichier = Services.Fichier || (Services.Fichier = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Fichier"] = "Fichier";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Fichier;
        (function (Fichier) {
            var FichierMessageSubject;
            (function (FichierMessageSubject) {
                FichierMessageSubject[FichierMessageSubject["SaveAs"] = 0] = "SaveAs";
            })(FichierMessageSubject = Fichier.FichierMessageSubject || (Fichier.FichierMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Fichier, []);
        })(Fichier = Services.Fichier || (Services.Fichier = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Persistence"] = "Persistence";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Persistence;
        (function (Persistence) {
            var PersistenceMessageSubject;
            (function (PersistenceMessageSubject) {
            })(PersistenceMessageSubject = Persistence.PersistenceMessageSubject || (Persistence.PersistenceMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Persistence, []);
        })(Persistence = Services.Persistence || (Services.Persistence = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["TraitementNsdk"] = "TraitementNsdk";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraitementNsdk;
        (function (TraitementNsdk) {
            var TraitementNsdkMessageSubject;
            (function (TraitementNsdkMessageSubject) {
                TraitementNsdkMessageSubject[TraitementNsdkMessageSubject["Lancer"] = 0] = "Lancer";
            })(TraitementNsdkMessageSubject = TraitementNsdk.TraitementNsdkMessageSubject || (TraitementNsdk.TraitementNsdkMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.TraitementNsdk, [
                Services.Components.ComponentType.Core
            ]);
        })(TraitementNsdk = Services.TraitementNsdk || (Services.TraitementNsdk = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["JAB"] = "JAB";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var JAB;
        (function (JAB) {
            var JABMessageSubject;
            (function (JABMessageSubject) {
                JABMessageSubject[JABMessageSubject["Enregistrer"] = 0] = "Enregistrer";
            })(JABMessageSubject = JAB.JABMessageSubject || (JAB.JABMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.JAB, [
                Services.Components.ComponentType.Core
            ]);
        })(JAB = Services.JAB || (Services.JAB = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var LoggerTechAgent = /** @class */ (function (_super) {
                __extends(LoggerTechAgent, _super);
                /**
                * Constructeur de la classe LoggerTechAgent
                */
                function LoggerTechAgent() {
                    return _super.call(this, Services.Components.ComponentType.Loggers) || this;
                }
                LoggerTechAgent.prototype.getConfigurationDB = function (pNom) {
                    return this.sendMessage(Loggers.LoggersMessageSubject.GetConfigDB, {
                        nom: pNom
                    }).then(function (pReponse) {
                        return pReponse.config;
                    });
                };
                LoggerTechAgent.prototype.setConfigurationDB = function (pNom, pConfiguration) {
                    return this.sendMessage(Loggers.LoggersMessageSubject.SetConfigDB, {
                        nom: pNom,
                        config: pConfiguration
                    });
                };
                LoggerTechAgent.prototype.getConfigurationActual = function () {
                    return this.sendMessage(Loggers.LoggersMessageSubject.GetConfigActual, {}).then(function (pReponse) {
                        return pReponse.config;
                    });
                };
                LoggerTechAgent.prototype.setConfigurationActual = function (pConfiguration) {
                    return this.sendMessage(Loggers.LoggersMessageSubject.SetConfigActual, {
                        config: pConfiguration
                    });
                };
                LoggerTechAgent.prototype.loadConfiguration = function (pNom) {
                    return this.sendMessage(Loggers.LoggersMessageSubject.LoadConfig, {
                        nom: pNom
                    });
                };
                LoggerTechAgent.prototype.saveConfiguration = function (pNom) {
                    return this.sendMessage(Loggers.LoggersMessageSubject.SaveConfig, {
                        nom: pNom
                    });
                };
                LoggerTechAgent.prototype.getLoggers = function () {
                    return this.sendMessage(Loggers.LoggersMessageSubject.GetLoggers, {}).then(function (pReponse) {
                        return pReponse.loggers;
                    });
                };
                LoggerTechAgent.prototype.getNomConfigActuelle = function () {
                    return this.sendMessage(Loggers.LoggersMessageSubject.GetNomConfigAcuelle, {}).then(function (pReponse) {
                        return pReponse.nom;
                    });
                };
                LoggerTechAgent.prototype.isClassExists = function (pNom) {
                    return this.sendMessage(Loggers.LoggersMessageSubject.IsClassExists, {
                        nom: pNom
                    }).then(function (pReponse) {
                        return pReponse.isExists;
                    });
                };
                LoggerTechAgent.prototype.reset = function () {
                    return this.sendMessage(Loggers.LoggersMessageSubject.Reset, {});
                };
                return LoggerTechAgent;
            }(Services.Components.ComponentAgentBase));
            Loggers.LoggerTechAgent = LoggerTechAgent;
            Services.Components.RegistryAgent.getInstance().register(LoggerTechAgent);
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TechAgentProvider = /** @class */ (function () {
            function TechAgentProvider($q, instanceLoaderService, $timeout, $rootScope) {
                this.$q = $q;
                this.instanceLoaderService = instanceLoaderService;
                this.$timeout = $timeout;
                this.$rootScope = $rootScope;
            }
            TechAgentProvider.Instance = function ($q, instanceLoaderService, $timeout, $rootScope) {
                if (TechAgentProvider._techAgentExtended === null) {
                    TechAgentProvider._techAgentExtended = new TechAgentExtended($q, instanceLoaderService, $timeout, $rootScope);
                }
                return TechAgentProvider._techAgentExtended;
            };
            TechAgentProvider.prototype.init = function (serviceInit) {
                var _this = this;
                var deferred = this.$q.defer();
                TechAgentProvider.Instance(this.$q, this.instanceLoaderService, this.$timeout, this.$rootScope).init(serviceInit).then(function () {
                    deferred.resolve(TechAgentProvider.Instance(_this.$q, _this.instanceLoaderService, _this.$timeout, _this.$rootScope));
                }, function () {
                    deferred.reject();
                });
                return deferred.promise;
            };
            TechAgentProvider.$inject = [
                "$q",
                "instanceLoaderService",
                "$timeout",
                "$rootScope"
            ];
            //constructor(private $q: ng.IQService, private instanceLoaderService: MyWay.Services.InstanceLoaderService) {
            //    super();
            //}
            TechAgentProvider._techAgentExtended = null;
            return TechAgentProvider;
        }());
        Services.TechAgentProvider = TechAgentProvider;
        var TechLibrary = /** @class */ (function () {
            function TechLibrary() {
            }
            TechLibrary.addInitListener = function (pCallback) {
                TechLibrary.onInitListener.push(pCallback);
            };
            TechLibrary.removeInitListener = function (pCallback) {
                Services.CoreCommon.ArrayUtils.remove(TechLibrary.onInitListener, function (pCurrentListener) {
                    return pCurrentListener === pCallback;
                });
            };
            TechLibrary.prototype.init = function (library, serviceInit) {
                var _this = this;
                var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                this._errorCallback = deferred.reject;
                this.LoggerTechAgent = library.Loggers;
                TechLibrary.onInitListener.forEach(function (pOnInitListener) {
                    pOnInitListener(_this, library);
                });
                deferred.resolve();
                return deferred.promise;
            };
            TechLibrary.onInitListener = [];
            return TechLibrary;
        }());
        Services.TechLibrary = TechLibrary;
        var TechAgent = /** @class */ (function (_super) {
            __extends(TechAgent, _super);
            //Constructor
            function TechAgent() {
                var _this = _super.call(this) || this;
                _this._techLibrary = new TechLibrary();
                return _this;
            }
            TechAgent.prototype.init = function (serviceInit) {
                var _this = this;
                var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                _super.prototype.init.call(this, serviceInit).then(function () {
                    return _this._techLibrary.init(_this.Library, serviceInit);
                }).then(function () {
                    deferred.resolve();
                }).catch(deferred.reject);
                return deferred.promise;
            };
            Object.defineProperty(TechAgent.prototype, "LoggerTechAgent", {
                get: function () {
                    return this._techLibrary.LoggerTechAgent;
                },
                enumerable: true,
                configurable: true
            });
            //Raccourcis
            TechAgent.prototype.SendRequest = function (settings) {
                return _super.prototype.SendRequest.call(this, settings);
            };
            return TechAgent;
        }(Services.ServiceAgent));
        Services.TechAgent = TechAgent;
        var TechAgentExtended = /** @class */ (function (_super) {
            __extends(TechAgentExtended, _super);
            function TechAgentExtended($q, instanceLoaderService, $timeout, $rootScope) {
                var _this = _super.call(this, $q, instanceLoaderService, $timeout, $rootScope) || this;
                _this._techLibrary = new TechLibrary();
                return _this;
            }
            /**
             * @ngdoc method
             * @name init
             * @methodOf moduleAgent.TechAgentExtended
             * @description
             * Permet l'initialisation du ServiceAgent.
             * @param {Object} serviceInit Objet contenant le code LISA de la SPA
             *      et une fonction de rappel en cas de notification du portail vers l'application
             * @returns {Object} Result promise.
             */
            TechAgentExtended.prototype.init = function (serviceInit) {
                var _this = this;
                var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                _super.prototype.init.call(this, serviceInit).then(function () {
                    return _this._techLibrary.init(_this.Library, serviceInit);
                }).then(function () {
                    deferred.resolve();
                }).catch(deferred.reject);
                return deferred.promise;
            };
            Object.defineProperty(TechAgentExtended.prototype, "LoggerTechAgent", {
                get: function () {
                    return this._techLibrary.LoggerTechAgent;
                },
                enumerable: true,
                configurable: true
            });
            //Raccourcis
            TechAgentExtended.prototype.SendRequest = function (settings) {
                return _super.prototype.SendRequest.call(this, settings);
            };
            TechAgentExtended.$inject = [
                "$q",
                "instanceLoaderService",
                "$timeout",
                "$rootScope"
            ];
            return TechAgentExtended;
        }(Services.ServiceAgentExtended));
        Services.TechAgentExtended = TechAgentExtended;
        if (typeof angular != 'undefined') {
            Services.moduleAgent.provider('techAgentExtended', function () {
                this.$get = ["$q", "instanceLoaderService", "$timeout", "$rootScope", function ($q, instanceLoaderService, $timeout, $rootScope) {
                        return TechAgentProvider.Instance($q, instanceLoaderService, $timeout, $rootScope);
                    }];
            });
            Services.moduleAgent.provider('techAgent', function () {
                this.$get = ["$q", "instanceLoaderService", "$timeout", "$rootScope", function ($q, instanceLoaderService, $timeout, $rootScope) {
                        return TechAgentProvider.Instance($q, instanceLoaderService, $timeout, $rootScope);
                    }];
            });
            Services.moduleAgent.provider('serviceAgent', function () {
                this.$get = ["$q", "instanceLoaderService", "$timeout", "$rootScope", function ($q, instanceLoaderService, $timeout, $rootScope) {
                        return TechAgentProvider.Instance($q, instanceLoaderService, $timeout, $rootScope);
                    }];
            });
            Services.moduleAgent.provider('serviceAgentExtended', function () {
                this.$get = ["$q", "instanceLoaderService", "$timeout", "$rootScope", function ($q, instanceLoaderService, $timeout, $rootScope) {
                        return TechAgentProvider.Instance($q, instanceLoaderService, $timeout, $rootScope);
                    }];
            });
        }
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Test;
    (function (Test) {
        var V1;
        (function (V1) {
            var Services;
            (function (Services) {
                function generateEmptyLibraryAgent() {
                    return {
                        Core: {
                            createPromiseSelfResolved: MyWay.Services.CoreCommon.createPromiseSelfResolved,
                            createPromiseSelfError: MyWay.Services.CoreCommon.createPromiseSelfError,
                            promesseTryCatch: MyWay.Services.CoreCommon.promesseTryCatch,
                            getPromesseSelfResoved: MyWay.Services.CoreCommon.getPromesseSelfResoved
                        },
                        Context: {}
                    };
                }
                Services.generateEmptyLibraryAgent = generateEmptyLibraryAgent;
                var ManageRegistryAgent = /** @class */ (function () {
                    function ManageRegistryAgent() {
                    }
                    ManageRegistryAgent.getInstance = function () {
                        if (ManageRegistryAgent.INSTANCE === null) {
                            ManageRegistryAgent.INSTANCE = new ManageRegistryAgent();
                            ManageRegistryAgent.INSTANCE.init();
                        }
                        return ManageRegistryAgent.INSTANCE;
                    };
                    ManageRegistryAgent.prototype.init = function () {
                        var _this = this;
                        this.componentsByKey = {};
                        MyWay.Services.Components.RegistryAgent.getInstance().components.forEach(function (pComponentConstructor) {
                            var lInstance = new pComponentConstructor();
                            _this.componentsByKey[lInstance.name.toString()] = pComponentConstructor;
                        });
                    };
                    ManageRegistryAgent.prototype.getClass = function (pType) {
                        return this.componentsByKey[pType.toString()];
                    };
                    ManageRegistryAgent.INSTANCE = null;
                    return ManageRegistryAgent;
                }());
                function declareAgentVersExterieurATester(pParamsDeclare) {
                    var lTests = [];
                    return {
                        execute: function () {
                            describe("Lorsque j'utilise l'agent " + pParamsDeclare.classAgentName + " vers l'exterieur", function () {
                                lTests.forEach(function (pTest) {
                                    pTest();
                                });
                            });
                        },
                        test: function (pParams) {
                            var lTestName = "";
                            lTestName = "Si j'appelle la méthode " + pParams.agentMethod + " de l'agent correctement j'ai bien le comportement attendu";
                            if (pParams.testMethodSuffix) {
                                lTestName += " [cas : " + pParams.testMethodSuffix + "]";
                            }
                            lTests.push(function () {
                                var lMethode = it;
                                if (pParams.only === true) {
                                    lMethode = fit;
                                }
                                lMethode(lTestName, function (pDone) {
                                    var lAgentMessageService = Services.generateMessageService();
                                    // Prepare Agent
                                    var lAgentLibrary = generateEmptyLibraryAgent();
                                    var lMessageInitializer = {};
                                    var lClassAgent = ManageRegistryAgent.getInstance().getClass(pParamsDeclare.component);
                                    if (!lClassAgent) {
                                        fail("La class agent du type " + pParamsDeclare.component + " n'est pas enregistrée auprès du RegistryAgent");
                                        return;
                                    }
                                    else {
                                        expect(true).toBe(true, "La class agent du type " + pParamsDeclare.component + " est enregistrée auprès du RegistryAgent");
                                    }
                                    var lAgentInstance = new lClassAgent();
                                    var lMessageServiceEstAppelle = false;
                                    var lMessageServiceDestinataire = undefined;
                                    var lMessageServiceTypeMessage = undefined;
                                    var lMessageServiceParametres = undefined;
                                    var lMessageServiceResponse = undefined;
                                    //On mock la sortie de l'agent
                                    Services.override(lAgentMessageService, "sendWithResponse", function (pComponent, pSubject, pContent) {
                                        lMessageServiceEstAppelle = true;
                                        lMessageServiceDestinataire = pComponent;
                                        lMessageServiceTypeMessage = pSubject;
                                        lMessageServiceParametres = pContent;
                                        if (pComponent !== pParamsDeclare.component) {
                                            return MyWay.Services.Promesses.createPromiseSelfError(new MyWay.Services.Erreur("L'agent n'envoie pas un message au bon composant. Il est de type " + pParamsDeclare.component + " mais il envoie un message au composant " + pComponent));
                                        }
                                        if (pParams.hasResponseMessage) {
                                            return MyWay.Services.Promesses.createPromiseSelfResolved(pParams.responseMessage);
                                        }
                                        else {
                                            return MyWay.Services.Promesses.getPromesseSelfResoved();
                                        }
                                    });
                                    var lNbTests = 5;
                                    return MyWay.Services.CoreCommon.getPromesseSelfResoved().then(function () {
                                        if (pParamsDeclare.beforeEach) {
                                            var lParamsAgent = {
                                                agentLibrary: lAgentLibrary,
                                                instance: lAgentInstance,
                                                isErrorMode: false
                                            };
                                            return pParamsDeclare.beforeEach(lParamsAgent);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        var lParamsAgent = {
                                            agentLibrary: lAgentLibrary,
                                            instance: lAgentInstance,
                                            isErrorMode: false
                                        };
                                        if (pParams.before) {
                                            return pParams.before(lParamsAgent);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        return lAgentInstance.init(lAgentLibrary, lAgentMessageService, lMessageInitializer);
                                    }).then(function () {
                                        if (pParams.agentHasMethodParams) {
                                            return lAgentInstance[pParams.agentMethod].apply(lAgentInstance, pParams.agentMethodParams);
                                        }
                                        else {
                                            return lAgentInstance[pParams.agentMethod].call(lAgentInstance);
                                        }
                                    }).then(function (pResponse) {
                                        expect(lMessageServiceEstAppelle).toBe(true, "Le sendMessage doit être appelé");
                                        expect(lMessageServiceTypeMessage).toBe(pParams.typeMessage, "Le message " + pParamsDeclare.enumTypeMessage[pParams.typeMessage] + " doit être envoyé, et pas " + pParamsDeclare.enumTypeMessage[lMessageServiceTypeMessage]);
                                        if (pParams.hasRequestMessage) {
                                            switch (pParams.requestMessageTestMode) {
                                                case Services.TestMode.NoCheck:
                                                    expect(true).toBe(true, "Vérification du message que l'agent a envoyé au manager [test ignoré]");
                                                    break;
                                                case Services.TestMode.StrictEquals:
                                                    expect(lMessageServiceParametres).toBe(pParams.requestMessage, "Vérification du message que l'agent a envoyé au manager");
                                                    break;
                                                case Services.TestMode.DeepEquals:
                                                default:
                                                    expect(lMessageServiceParametres).toEqual(pParams.requestMessage, "Vérification du message que l'agent a envoyé au manager");
                                                    break;
                                            }
                                        }
                                        else {
                                            expect(lMessageServiceParametres).toBe(undefined, "Vérification du message que l'agent a envoyé au manager");
                                        }
                                        if (pParams.agentHasResult) {
                                            switch (pParams.agentResultTestMode) {
                                                case Services.TestMode.NoCheck:
                                                    expect(true).toBe(true, "Vérification du résultat retourné par l'agent [test ignoré]");
                                                    break;
                                                case Services.TestMode.StrictEquals:
                                                    expect(pResponse).toBe(pParams.agentResult, "Vérification du résultat retourné par l'agent");
                                                    break;
                                                case Services.TestMode.ObjectPropertiesEquals:
                                                    expect(pResponse).toEqual(jasmine.objectContaining(pParams.agentResult), "Vérification du résultat retourné par l'agent");
                                                    break;
                                                case Services.TestMode.ArrayObjectPropertiesEquals:
                                                    expect(pResponse.length).toEqual(pParams.agentResult.length, "Vérification du résultat retourné par l'agent - Test du nombre de résutlats dans le tableau de réponse");
                                                    if (pResponse.length === pParams.agentResult.length) {
                                                        pResponse.forEach(function (item, position) {
                                                            expect(item).toEqual(jasmine.objectContaining(pParams.agentResult[position]), "Vérification du résultat retourné par l'agent - Vérification de l'élément " + position);
                                                        });
                                                    }
                                                    break;
                                                case Services.TestMode.DeepEquals:
                                                default:
                                                    expect(pResponse).toEqual(pParams.agentResult, "Vérification du résultat retourné par l'agent");
                                                    break;
                                            }
                                        }
                                        else {
                                            expect(pResponse).toBe(undefined, "Vérification du résultat retourné par l'agent");
                                        }
                                    }, function (pErreur) {
                                        fail("Une erreur s'est produite! Details : " + pErreur.codeLibelle);
                                        console.error(pErreur);
                                    }).then(function () {
                                        if (pParamsDeclare.afterEach) {
                                            var lParamsAgent = {
                                                agentLibrary: lAgentLibrary,
                                                instance: lAgentInstance,
                                                isErrorMode: false
                                            };
                                            return pParamsDeclare.afterEach(lParamsAgent);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        var lParamsAgent = {
                                            agentLibrary: lAgentLibrary,
                                            instance: lAgentInstance,
                                            isErrorMode: false
                                        };
                                        if (pParams.after) {
                                            return pParams.after(lParamsAgent);
                                        }
                                        else {
                                            return;
                                        }
                                    }).finally(pDone);
                                });
                            });
                            lTests.push(function () {
                                lTestName = "Si j'appelle la méthode " + pParams.agentMethod + " de l'agent de manière incorrecte j'ai bien une erreur qui remonte";
                                if (pParams.testMethodSuffix) {
                                    lTestName += " [cas : " + pParams.testMethodSuffix + "]";
                                }
                                it(lTestName, function (pDone) {
                                    var lAgentMessageService = Services.generateMessageService();
                                    // Prepare Agent
                                    var lAgentLibrary = generateEmptyLibraryAgent();
                                    var lMessageInitializer = {};
                                    var lClassAgent = ManageRegistryAgent.getInstance().getClass(pParamsDeclare.component);
                                    if (!lClassAgent) {
                                        fail("La class agent du type " + pParamsDeclare.component + " n'est pas enregistrée auprès du RegistryAgent");
                                        return;
                                    }
                                    else {
                                        expect(true).toBe(true, "La class agent du type " + pParamsDeclare.component + " est enregistrée auprès du RegistryAgent");
                                    }
                                    var lAgentInstance = new lClassAgent();
                                    var lMessageServiceEstAppelle = false;
                                    var lMessageServiceDestinataire = undefined;
                                    var lMessageServiceTypeMessage = undefined;
                                    var lMessageServiceParametres = undefined;
                                    Services.override(lAgentMessageService, "sendWithResponse", function (pComponent, pSubject, pContent) {
                                        lMessageServiceEstAppelle = true;
                                        lMessageServiceDestinataire = pComponent;
                                        lMessageServiceTypeMessage = pSubject;
                                        lMessageServiceParametres = pContent;
                                        if (pComponent !== pParamsDeclare.component) {
                                            return lAgentLibrary.Core.createPromiseSelfError(new MyWay.Services.Erreur("L'agent n'envoie pas un message au bon composant. Il est de type " + pParamsDeclare.component + " mais il envoie un message au composant " + pComponent));
                                        }
                                        return MyWay.Services.Promesses.createPromiseSelfError(new MyWay.Services.Erreur("Erreur de test"));
                                    });
                                    var lNbTests = 5;
                                    MyWay.Services.CoreCommon.getPromesseSelfResoved().then(function () {
                                        if (pParamsDeclare.beforeEach) {
                                            var lParamsAgent = {
                                                agentLibrary: lAgentLibrary,
                                                instance: lAgentInstance,
                                                isErrorMode: true
                                            };
                                            return pParamsDeclare.beforeEach(lParamsAgent);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        var lParamsAgent = {
                                            agentLibrary: lAgentLibrary,
                                            instance: lAgentInstance,
                                            isErrorMode: true
                                        };
                                        if (pParams.before) {
                                            return pParams.before(lParamsAgent);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        return lAgentInstance.init(lAgentLibrary, lAgentMessageService, lMessageInitializer);
                                    }).then(function () {
                                        if (pParams.agentHasMethodParams) {
                                            return lAgentInstance[pParams.agentMethod].apply(lAgentInstance, pParams.agentMethodParams);
                                        }
                                        else {
                                            return lAgentInstance[pParams.agentMethod].call(lAgentInstance);
                                        }
                                    }).then(function (pResponse) {
                                        fail("Une erreur aurait dû se produire!");
                                    }, function (pErreur) {
                                        expect(lMessageServiceEstAppelle).toBe(true, "Le sendMessage doit être appelé");
                                        expect(lMessageServiceTypeMessage).toBe(pParams.typeMessage, "Le message " + pParamsDeclare.enumTypeMessage[pParams.typeMessage] + " doit être envoyé");
                                        if (pParams.hasRequestMessage) {
                                            switch (pParams.requestMessageTestMode) {
                                                case Services.TestMode.NoCheck:
                                                    expect(true).toBe(true, "Vérification du message que l'agent a envoyé au manager [test ignoré]");
                                                    break;
                                                case Services.TestMode.StrictEquals:
                                                    expect(lMessageServiceParametres).toBe(pParams.requestMessage, "Vérification du message que l'agent a envoyé au manager");
                                                    break;
                                                case Services.TestMode.DeepEquals:
                                                default:
                                                    expect(lMessageServiceParametres).toEqual(pParams.requestMessage, "Vérification du message que l'agent a envoyé au manager");
                                                    break;
                                            }
                                        }
                                        else {
                                            expect(lMessageServiceParametres).toBe(undefined, "Vérification du message que l'agent a envoyé au manager");
                                        }
                                        expect(pErreur.codeLibelle).toBe(pParams.agentResultErreur, "Vérification de l'erreur renvoyée par l'agent");
                                    }).then(function () {
                                        if (pParamsDeclare.afterEach) {
                                            var lParamsAgent = {
                                                agentLibrary: lAgentLibrary,
                                                instance: lAgentInstance,
                                                isErrorMode: true
                                            };
                                            return pParamsDeclare.afterEach(lParamsAgent);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        var lParamsAgent = {
                                            agentLibrary: lAgentLibrary,
                                            instance: lAgentInstance,
                                            isErrorMode: true
                                        };
                                        if (pParams.after) {
                                            return pParams.after(lParamsAgent);
                                        }
                                        else {
                                            return;
                                        }
                                    }).finally(pDone);
                                });
                            });
                        }
                    };
                }
                Services.declareAgentVersExterieurATester = declareAgentVersExterieurATester;
            })(Services = V1.Services || (V1.Services = {}));
        })(V1 = Test.V1 || (Test.V1 = {}));
    })(Test = MyWay.Test || (MyWay.Test = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentManagerBase = /** @class */ (function (_super) {
                __extends(ComponentManagerBase, _super);
                function ComponentManagerBase(pName) {
                    var _this = _super.call(this, pName) || this;
                    _this.listenersEvennement = [];
                    return _this;
                }
                ComponentManagerBase.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.library = pManagerLibrary;
                    this.messageService = pMessageService;
                    this.managerInitializer = pManagerInitializer;
                    return Services.CoreCommon.getPromesseSelfResoved();
                };
                ComponentManagerBase.prototype.SendEvent = function (event) {
                    if (this.library && this.library.Evennements) {
                        event.ComponentName = this.name;
                        this.library.Evennements.notifier(event);
                    }
                };
                ComponentManagerBase.prototype.sendMessage = function (pSubject, pContent) {
                    return this.messageService.sendWithResponse(this.name, pSubject, pContent);
                };
                ComponentManagerBase.prototype.sendMessageWithFrame = function (pSubject, pContent, frame) {
                    var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                    if (this.messageService) {
                        var targetWindow;
                        var targetDomain;
                        if (frame.SimulateAppIFrame) {
                            targetWindow = window;
                            targetDomain = window.location.protocol + "//" + window.location.host;
                        }
                        else {
                            if (!frame || !frame.IsMyWayUrl || frame.IsProducteur) {
                                lDefer.resolve(null);
                                return lDefer.promise;
                            }
                            targetWindow = frame.GetWindow();
                            targetDomain = frame.FrameUrl;
                        }
                        if (targetDomain) {
                            this.messageService.sendWithResponse(this.name, pSubject, pContent, targetWindow, targetDomain, frame.FrameId).then(lDefer.resolve, lDefer.reject);
                        }
                        else {
                            lDefer.resolve(null);
                        }
                    }
                    else {
                        lDefer.resolve(null);
                    }
                    return lDefer.promise;
                };
                ComponentManagerBase.prototype.dispose = function () {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.listenersEvennement.forEach(function (pListener) {
                            _this.library.Evennements.retirerListener(pListener);
                        });
                        pDefer.resolve();
                    });
                };
                ComponentManagerBase.prototype.ajouterListenerEvent = function (pTypeEvennement, pListener) {
                    this.listenersEvennement.push(pListener);
                    this.library.Evennements.ajouterListener(pListener, pTypeEvennement);
                };
                return ComponentManagerBase;
            }(Components.ComponentBase));
            Components.ComponentManagerBase = ComponentManagerBase;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            'use strict';
            var RegistryType;
            (function (RegistryType) {
            })(RegistryType = Components.RegistryType || (Components.RegistryType = {}));
            var RegistryManager = /** @class */ (function (_super) {
                __extends(RegistryManager, _super);
                function RegistryManager() {
                    var _this = _super.call(this, RegistryType.MANAGER, [RegistryType.COMMON, RegistryType.API]) || this;
                    _this._managerInitializer = null;
                    _this.messageService = null;
                    return _this;
                }
                RegistryManager.getInstance = function () {
                    if (RegistryManager.instance === null) {
                        RegistryManager.instance = new RegistryManager();
                        Components.FactoryRegistries.getInstance().addRegistry(RegistryManager.instance);
                    }
                    return RegistryManager.instance;
                };
                Object.defineProperty(RegistryManager.prototype, "managerInitializer", {
                    set: function (pManagerInitializer) {
                        this._managerInitializer = pManagerInitializer;
                    },
                    enumerable: true,
                    configurable: true
                });
                RegistryManager.prototype.init = function (pComponent) {
                    var _this = this;
                    this.getRegistryCommon().getComponentsInstances().forEach(function (pComponentInstance) {
                        if (!_this._componentsInstancesByKey[pComponentInstance.name]) {
                            _this._componentsInstances.push(pComponentInstance);
                            _this._componentsInstancesByKey[pComponentInstance.name] = pComponentInstance;
                        }
                    });
                    if (!this.messageService) {
                        this.messageService = Services.Message.MessageManagerFactory.createMessageManager(this.getLibrary());
                    }
                    return _super.prototype.init.call(this, pComponent);
                };
                RegistryManager.prototype.getRegistryCommon = function () {
                    return this._dependenciesInstances[0];
                };
                RegistryManager.prototype.getRegistryApi = function () {
                    return this._dependenciesInstances[1];
                };
                RegistryManager.prototype.initializeComponent = function (pManager) {
                    return pManager.init(this._componentsInstancesByKey, this.messageService, this._managerInitializer, this.getRegistryApi().getComponentInstance(pManager.name));
                };
                RegistryManager.instance = null;
                return RegistryManager;
            }(Components.AbstractRegistry));
            Components.RegistryManager = RegistryManager;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Evennements = /** @class */ (function (_super) {
            __extends(Evennements, _super);
            function Evennements() {
                var _this = _super.call(this, Services.Components.ComponentType.Evennements) || this;
                _this.listenersParEvenement = {};
                _this.typesEvenements = null;
                return _this;
            }
            Evennements.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                this.typesEvenements = Services.CoreCommon.EnumUtils.getValues(Services.Component.ManagerEventType);
                return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
            };
            Evennements.prototype.SendEvent = function (event) {
                return _super.prototype.SendEvent.call(this, event);
            };
            Evennements.prototype.ajouterListener = function (pListener) {
                var _this = this;
                var pTypeEvenements = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    pTypeEvenements[_i - 1] = arguments[_i];
                }
                if (!pListener) {
                    return;
                }
                if (pTypeEvenements.length === 0) {
                    pTypeEvenements = this.typesEvenements;
                }
                pTypeEvenements.forEach(function (pTypeEvenement) {
                    if (!_this.listenersParEvenement[pTypeEvenement]) {
                        _this.listenersParEvenement[pTypeEvenement] = [];
                    }
                    _this.listenersParEvenement[pTypeEvenement].push(pListener);
                });
            };
            Evennements.prototype.retirerListener = function (pListenerASupprimer) {
                for (var pEvennement in this.listenersParEvenement) {
                    var lListeners = this.listenersParEvenement[pEvennement];
                    var lNouvelleListe = [];
                    lListeners.forEach(function (pListenerCourant) {
                        if (pListenerCourant === pListenerASupprimer) {
                            return;
                        }
                        lNouvelleListe.push(pListenerCourant);
                    });
                    this.listenersParEvenement[pEvennement] = lNouvelleListe;
                }
            };
            Evennements.prototype.notifier = function (pEvent) {
                if (!pEvent || !pEvent.EventType) {
                    return;
                }
                if (!this.listenersParEvenement[pEvent.EventType]) {
                    return;
                }
                //Notifie portail / managers
                this.listenersParEvenement[pEvent.EventType].forEach(function (pListener) {
                    try {
                        pListener(pEvent);
                    }
                    catch (e) {
                        Evennements.logger.error("Erreur lors de la remise d'un evennement : %1", JSON.pruned(pEvent));
                    }
                });
            };
            Evennements.CLASS_NAME = 'MyWay.Services.Evennements';
            Evennements.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(Evennements.CLASS_NAME);
            return Evennements;
        }(Services.Components.ComponentManagerBase));
        Services.Evennements = Evennements;
        Services.Components.RegistryManager.getInstance().register(Evennements);
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var PhantomAgentProvider = /** @class */ (function () {
            function PhantomAgentProvider($q) {
                this.$q = $q;
            }
            PhantomAgentProvider.Instance = function () {
                if (PhantomAgentProvider._phantomAgent === null) {
                    PhantomAgentProvider._phantomAgent = new Services.PhantomAgent();
                }
                return PhantomAgentProvider._phantomAgent;
            };
            PhantomAgentProvider.prototype.init = function (serviceInit) {
                var deferred = this.$q.defer();
                deferred.resolve(PhantomAgentProvider.Instance());
                return deferred.promise;
            };
            PhantomAgentProvider.$inject = [
                "$q"
            ];
            PhantomAgentProvider._phantomAgent = null;
            return PhantomAgentProvider;
        }());
        Services.PhantomAgentProvider = PhantomAgentProvider;
        if (typeof angular != 'undefined') {
            Services.moduleManager = angular.module("moduleManager", ["ng"]);
            Services.moduleManager.provider('serviceAgent', function () {
                this.$get = ["$q", function ($q) {
                        return PhantomAgentProvider.Instance();
                    }];
            });
        }
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var PhantomAgent = /** @class */ (function () {
            function PhantomAgent() {
                this._serviceManager = Services.ServiceManager.Instance();
            }
            Object.defineProperty(PhantomAgent.prototype, "Core", {
                get: function () {
                    return this._serviceManager.Library.Core;
                },
                enumerable: true,
                configurable: true
            });
            PhantomAgent.addListenerOnInit = function (pCallback) {
                PhantomAgent.onInitListeners.push(pCallback);
            };
            PhantomAgent.removeListenerOnInit = function (pCallback) {
                Services.CoreCommon.ArrayUtils.remove(PhantomAgent.onInitListeners, function (pCurrentListener) {
                    return pCallback === pCurrentListener;
                });
            };
            PhantomAgent.prototype.SendRequest = function (settings) {
                return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                    var settingsExtended = settings;
                    settingsExtended.logger = PhantomAgent.logger;
                    Services.CoreCommon.SendRequest(settingsExtended, function (result) { pDefer.resolve(result); }, function (error) { pDefer.reject(error); });
                });
            };
            PhantomAgent.prototype.init = function (serviceInit) {
                var _this = this;
                return Services.Promesses.getPromesseSelfResoved().then(function () {
                    PhantomAgent.onInitListeners.forEach(function (onInitListener) {
                        onInitListener(_this, _this._serviceManager);
                    });
                });
            };
            PhantomAgent.prototype.DisplayMessage = function (message) {
            };
            PhantomAgent.prototype.SubscribeToNotification = function (onNotification) {
            };
            PhantomAgent.prototype.Dispose = function () {
            };
            PhantomAgent.prototype.OnNotification = function (notification, serviceAgent) {
            };
            PhantomAgent.CLASS_NAME = 'MyWay.Services.PhantomAgent';
            PhantomAgent.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(PhantomAgent.CLASS_NAME);
            PhantomAgent.onInitListeners = [];
            return PhantomAgent;
        }());
        Services.PhantomAgent = PhantomAgent;
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ModeVerificationProcessus;
        (function (ModeVerificationProcessus) {
            ModeVerificationProcessus[ModeVerificationProcessus["Aucun"] = 0] = "Aucun";
            ModeVerificationProcessus[ModeVerificationProcessus["Warning"] = 1] = "Warning";
            ModeVerificationProcessus[ModeVerificationProcessus["Erreur"] = 2] = "Erreur";
        })(ModeVerificationProcessus = Services.ModeVerificationProcessus || (Services.ModeVerificationProcessus = {}));
        var ServiceManager = /** @class */ (function () {
            function ServiceManager() {
                this.listenerEventFromPortail = null;
                ServiceManager.logger.info('ServiceManager constructor begin');
                ServiceManager._instance = this;
            }
            ServiceManager.Instance = function () {
                return ServiceManager._instance;
            };
            Object.defineProperty(ServiceManager.prototype, "Library", {
                get: function () {
                    return this.library;
                },
                enumerable: true,
                configurable: true
            });
            ServiceManager.prototype.init = function (serviceInit) {
                var _this = this;
                ServiceManager.logger.info('ServiceManager constructor init begin', Date.now(), true);
                Services.CoreCommon.VersionMySys = versionMySys;
                //Init Library
                var lRegistryManager = Services.Components.RegistryManager.getInstance();
                lRegistryManager.managerInitializer = {
                    delegationPortail: serviceInit.delegationPortail,
                    IFrameId: serviceInit.IFrameId,
                    isTotemCapable: serviceInit.isTotemCapable,
                    LogOnUrl: serviceInit.LogOnUrl,
                    ModeVerificationProcessus: serviceInit.ModeVerificationProcessus,
                    PortalType: serviceInit.PortalType
                };
                Services.Components.RegistryApi.getInstance().setApiInitializer({
                    privatePortalServiceParameters: Services.PrivatePortalServiceParameters.Instance(),
                    portalServiceParameters: Services.PortalServiceParameters.Instance()
                });
                return Services.Components.FactoryRegistries.getInstance().init().then(function () {
                    _this.library = lRegistryManager.getLibrary();
                    //Ajoute le listener d'evennements du portail
                    _this.OnEvent = serviceInit.OnEvent;
                    //BaseDeDonnees.Generique.TailleDB.TailleAlerte.ajouterListenerGlobal(this._onStorageLimitGenerique);
                    // Storage.InteropMessageBusStorage.onStorageLimit = this._onStorageLimit;
                    // Storage.ContextStorage.onStorageLimit = this._onStorageLimit;
                    ServiceManager.logger.info('ServiceManager StartManagers end', Date.now(), false);
                    //BaseDeDonnees.Generique.TailleDB.TailleAlerte.ajouterLimiteTypeBase(BaseDeDonnees.Generique.TYPE_BASE.LOCALSTORAGE, 4 * 1024 * 1024);
                });
            };
            Object.defineProperty(ServiceManager.prototype, "OnEvent", {
                set: function (value) {
                    if (this.listenerEventFromPortail) {
                        this.library.Evennements.retirerListener(this.listenerEventFromPortail);
                    }
                    this.listenerEventFromPortail = value;
                    this.library.Evennements.ajouterListener(value);
                },
                enumerable: true,
                configurable: true
            });
            ServiceManager.staticInit = function () {
                //Déplacé depuis CoreCommon car utilisé uniquement dans le cadre des services techniques du portail
                if (typeof $ != 'undefined' && $.ajaxSetup) {
                    $.ajaxSetup({
                        cache: false
                    });
                }
                else {
                    console.info("[Framework Technique MyWay - CoreCommon - init] JQuery n'est pas disponible");
                }
                window.onerror = function (msg, url, lineNo, columnNo, error) {
                    var string = msg.toString().toLowerCase();
                    var substring = "script error";
                    if (string.indexOf(substring) > -1) {
                        ServiceManager.logger.error('Script Error: See Browser Console for Detail');
                    }
                    else {
                        var message = [
                            'Message: ' + msg,
                            'URL: ' + url,
                            'Line: ' + lineNo,
                            'Column: ' + columnNo,
                            'Error object: ' + JSON.stringify(error)
                        ].join(' - ');
                        ServiceManager.logger.error(message);
                    }
                    return false;
                };
            };
            ServiceManager.prototype.Dispose = function () {
                var _this = this;
                return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                    if (_this.listenerEventFromPortail) {
                        _this.library.Evennements.retirerListener(_this.listenerEventFromPortail);
                    }
                    // Storage.InteropMessageBusStorage.onInternalStorageChanged = null;
                    // Storage.ContextStorage.onInternalStorageChanged = null;
                    return Services.Components.FactoryRegistries.getInstance().dispose().then(function () {
                        //Efface les limites de base
                        //BaseDeDonnees.Generique.TailleDB.TailleAlerte.retirerLimiteTypeBase(BaseDeDonnees.Generique.TYPE_BASE.LOCALSTORAGE);
                        // for (var lNomBase in this.callbacksLimitesBases) {
                        //     window.clearTimeout(this.timersLimitesBases[lNomBase]);
                        // }
                        // BaseDeDonnees.Generique.Utilities.Connexion.avertirTouteConnexionTerminee().finally(() => {
                        //     IndependantLogger.Memory._traceManager = null;
                        //     pDefer.resolve();
                        // });
                    });
                });
            };
            ServiceManager.addActionOnInitialize = function (pActionName, pCallback) {
                var pActionsRequises = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    pActionsRequises[_i - 2] = arguments[_i];
                }
                ServiceManager.actionsOnInitialize.push({
                    name: pActionName,
                    callback: pCallback,
                    actionsRequises: pActionsRequises || []
                });
            };
            ServiceManager.prototype.Initialize = function () {
                var _this = this;
                //Réorganise les actions à effectuer en fonction de leurs dépendances
                var lActionsALancerDeferreds = {};
                var lActionsByName = {};
                var lPromises = [];
                //Parcours une première fois la liste pour créer tous les deferreds
                ServiceManager.actionsOnInitialize.forEach(function (pAction) {
                    lActionsALancerDeferreds[pAction.name] = Services.CoreCommon.ServiceDePromesse.defer();
                });
                ServiceManager.actionsOnInitialize.forEach(function (pAction) {
                    ServiceManager.logger.debug("Prépare l'action %1", pAction.name);
                    var lPromisesRequises = [];
                    pAction.actionsRequises.forEach(function (pActionRequise) {
                        ServiceManager.logger.debug("Ajoute comme condition %1", pActionRequise);
                        var lDeferredRequis = lActionsALancerDeferreds[pActionRequise];
                        if (!lDeferredRequis) {
                            throw new Services.Erreur("L'action " + pActionRequise + ", requise pour l'action " + pAction.name + " n'a jamais été définie!");
                        }
                        lPromisesRequises.push(lDeferredRequis.promise);
                    });
                    var lDeferredAction = lActionsALancerDeferreds[pAction.name];
                    lActionsByName[pAction.name] = lDeferredAction.promise;
                    Services.CoreCommon.executePromisesSimultaneousAndWaitAllResolves(lPromisesRequises).then(function () {
                        ServiceManager.logger.debug("Initialize - Lancement de l'action %1", pAction.name);
                        pAction.callback(_this.library).then(function () {
                            lDeferredAction.resolve();
                        }, function (e) {
                            ServiceManager.logger.debug("Action " + pAction.name + " en erreur ", e);
                            lDeferredAction.reject(e);
                        }).finally(function () {
                            ServiceManager.logger.debug("Initialize - Fin de l'action %1", pAction.name);
                        });
                    }, lDeferredAction.reject);
                    lPromises.push(lDeferredAction.promise);
                });
                return Services.CoreCommon.executePromisesSimultaneousAndWaitAllResolves(lPromises).then(function () {
                    //Pas de traitement, mais comme le paramètre est any[], implémentation du then obligatoire
                }, function (pErreur) {
                    //Si erreur lors de l'initialisation, pas de réaction (iso-précédent code...)
                });
            };
            ServiceManager.CLASS_NAME = 'MyWay.Services.ServiceManager';
            ServiceManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ServiceManager.CLASS_NAME);
            // private limitesDBOriginales: { [key: string]: number } = {};
            // private timersLimitesBases: { [key: string]: number } = {};
            // private callbacksLimitesBases: { [key: string]: () => void } = {};
            // private _onStorageLimitGenerique = (pType: BaseDeDonnees.Generique.TYPE_BASE, pTaille: number, pSeuilAlerte: number) => {
            //     var lNomTypeBase: string = BaseDeDonnees.Generique.Factory.getNomTypeBase(pType);
            //     if (!this.limitesDBOriginales[lNomTypeBase]) {
            //         this.limitesDBOriginales[lNomTypeBase] = BaseDeDonnees.Generique.TailleDB.TailleAlerte.getLimiteTypeBase(pType);
            //     }
            //     //Déplace la limite de base à Minimum(20% au dessus, +500ko)
            //     var lAjoutNouvelleLimite: number = Math.max(1024 * 500, pSeuilAlerte * 0.2);
            //     BaseDeDonnees.Generique.TailleDB.TailleAlerte.ajouterLimiteTypeBase(pType, pSeuilAlerte + lAjoutNouvelleLimite);
            //     //Ajoute un timer pour restaurer la bonne limite
            //     if (this.timersLimitesBases[lNomTypeBase]) {
            //         window.clearTimeout(this.timersLimitesBases[lNomTypeBase]);
            //     }
            //     this.callbacksLimitesBases[lNomTypeBase] = () => {
            //         window.clearTimeout(this.timersLimitesBases[lNomTypeBase]);
            //         BaseDeDonnees.Generique.TailleDB.TailleAlerte.ajouterLimiteTypeBase(pType, this.limitesDBOriginales[lNomTypeBase]);
            //         delete this.timersLimitesBases[lNomTypeBase];
            //         delete this.callbacksLimitesBases[lNomTypeBase];
            //     };
            //     this.timersLimitesBases[lNomTypeBase] = window.setTimeout(this.callbacksLimitesBases[lNomTypeBase], 60 * 1000);//Timer de 1minute
            //     switch (pType) {
            //         case BaseDeDonnees.Generique.TYPE_BASE.LOCALSTORAGE:
            //             var text = "Seuil d'alerte dépassé sur la base localstorage: " + pTaille.toFixed(2) + " KB (limite : " + pSeuilAlerte + " KB)";
            //             ServiceManager.logger.warn(text);
            //             this.library.Display.DisplayMessage({ Message: text });
            //             break;
            //         case BaseDeDonnees.Generique.TYPE_BASE.MEMORY:
            //             var text = "Seuil d'alerte dépassé sur la base mémoire: " + pTaille.toFixed(2) + " KB (limite : " + pSeuilAlerte + " KB)";
            //             ServiceManager.logger.warn(text);
            //             this.library.Display.DisplayMessage({ Message: text });
            //             break;
            //     }
            // };
            // private _onStorageLimit = (lsSize: number, idbSize: number) => {
            //     if (lsSize > 0) {
            //         var limit = Storage.BaseStorage.LocalStorageLimitInKb;
            //         if (lsSize > limit) {
            //             var text = "Seuil d'alerte dépassé sur la base localStorage: " + lsSize.toFixed(2) + " KB (limite : " + limit + " KB)";
            //             ServiceManager.logger.warn(text);
            //             //this.Library.Display.DisplayMessage({ Message: text });
            //         }
            //     }
            //     if (idbSize > 0) {
            //         var limit = Storage.BaseStorage.IndexedDBStorageLimitInKb;
            //         if (idbSize > limit) {
            //             var text = "Seuil d'alerte dépassé sur la base indexedDB: " + idbSize.toFixed(2) + " KB (limite : " + limit + " KB)";
            //             ServiceManager.logger.warn(text);
            //             //this.Library.Display.DisplayMessage({ Message: text });
            //         }
            //     }
            // }
            ServiceManager.actionsOnInitialize = [];
            return ServiceManager;
        }());
        Services.ServiceManager = ServiceManager;
        ServiceManager.staticInit();
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Component;
        (function (Component) {
            var ManagerEvent = /** @class */ (function () {
                function ManagerEvent(EventType, Detail) {
                    this.EventType = EventType;
                    this.Detail = Detail;
                }
                ManagerEvent.prototype.onSend = function (pIFrameId) {
                    return true;
                };
                return ManagerEvent;
            }());
            Component.ManagerEvent = ManagerEvent;
            var ManagerEventType;
            (function (ManagerEventType) {
                ManagerEventType[ManagerEventType["PortalContextChanged"] = 1] = "PortalContextChanged";
                ManagerEventType[ManagerEventType["FinDeTransition"] = 2] = "FinDeTransition";
                ManagerEventType[ManagerEventType["FinDeProcessus"] = 3] = "FinDeProcessus";
                ManagerEventType[ManagerEventType["NouvelleEtape"] = 4] = "NouvelleEtape";
                ManagerEventType[ManagerEventType["NouveauProcess"] = 5] = "NouveauProcess";
                ManagerEventType[ManagerEventType["NouveauSousProcess"] = 6] = "NouveauSousProcess";
                ManagerEventType[ManagerEventType["NouvelleAppliExterne"] = 7] = "NouvelleAppliExterne";
                ManagerEventType[ManagerEventType["BasculeProcess"] = 8] = "BasculeProcess";
                ManagerEventType[ManagerEventType["ChangementNomProcess"] = 9] = "ChangementNomProcess";
                ManagerEventType[ManagerEventType["DemandeDeDemarrageDeProcessus"] = 10] = "DemandeDeDemarrageDeProcessus";
                ManagerEventType[ManagerEventType["AcceptPhase"] = 11] = "AcceptPhase";
                ManagerEventType[ManagerEventType["ConnectionSignalR"] = 12] = "ConnectionSignalR";
                ManagerEventType[ManagerEventType["AfficherLogOn"] = 13] = "AfficherLogOn";
                ManagerEventType[ManagerEventType["MasquerLogOn"] = 14] = "MasquerLogOn";
                ManagerEventType[ManagerEventType["Extraction"] = 15] = "Extraction";
                ManagerEventType[ManagerEventType["Diagnostic"] = 16] = "Diagnostic";
                ManagerEventType[ManagerEventType["MiseAJourContexteClient"] = 17] = "MiseAJourContexteClient";
                ManagerEventType[ManagerEventType["Log"] = 18] = "Log";
                ManagerEventType[ManagerEventType["ChangementAuthentificationInfo"] = 19] = "ChangementAuthentificationInfo";
                ManagerEventType[ManagerEventType["BriqueCommunication"] = 20] = "BriqueCommunication";
                ManagerEventType[ManagerEventType["ContextRecharge"] = 21] = "ContextRecharge";
                ManagerEventType[ManagerEventType["ResetHabilitations"] = 22] = "ResetHabilitations";
                ManagerEventType[ManagerEventType["Communication"] = 23] = "Communication";
            })(ManagerEventType = Component.ManagerEventType || (Component.ManagerEventType = {}));
        })(Component = Services.Component || (Services.Component = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            /*
            * Class de gestion de gestion des logs
            */
            var LoggerManager = /** @class */ (function (_super) {
                __extends(LoggerManager, _super);
                function LoggerManager() {
                    return _super.call(this, Services.Components.ComponentType.Loggers) || this;
                }
                LoggerManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                        _this.loggerFactory = Loggers.LoggerFactory.INSTANCE;
                    });
                };
                LoggerManager.prototype.getClassByName = function (pName) {
                    var lResult = window;
                    var lNames = pName.split(".");
                    lNames.forEach(function (pSubName) {
                        lResult = lResult[pSubName];
                    });
                    return lResult;
                };
                LoggerManager.prototype.getConfigurationActual = function () {
                    return this.loggerFactory.getConfigurationActual();
                };
                LoggerManager.prototype.setConfigActual = function (pConfig) {
                    this.loggerFactory.setConfigActual(pConfig);
                };
                LoggerManager.prototype.getConfigurationDB = function (pNom) {
                    var lConfig = this.loggerFactory.getConfigurationDB(pNom);
                    if (!lConfig) {
                        switch (pNom) {
                            case Loggers.LoggerFactory.LOGGER_PORTAIL:
                                lConfig = Loggers.DEFAULT_CONFIGURATION_PORTAIL;
                                break;
                        }
                    }
                    return lConfig;
                };
                LoggerManager.prototype.setConfigDB = function (pNom, pConfig) {
                    return this.loggerFactory.setConfigDB(pNom, pConfig);
                };
                LoggerManager.prototype.saveConfiguration = function (pNom) {
                    return this.loggerFactory.saveConfiguration(pNom);
                };
                LoggerManager.prototype.loadConfiguration = function (pNom) {
                    return this.loggerFactory.loadConfiguration(pNom);
                };
                LoggerManager.prototype.getAllLogggersNames = function () {
                    return this.loggerFactory.getAllLogggersNames();
                };
                LoggerManager.prototype.getNomConfigActuelle = function () {
                    return this.loggerFactory.getNomConfigActuelle();
                };
                LoggerManager.prototype.clearConfigurations = function () {
                    return this.loggerFactory.clearConfigurations();
                };
                return LoggerManager;
            }(Services.Components.ComponentManagerBase));
            Loggers.LoggerManager = LoggerManager;
            Services.Components.RegistryManager.getInstance().register(LoggerManager);
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            Loggers.DEFAULT_CONFIGURATION_PORTAIL = {
                appenders: [
                    {
                        type: 'CONSOLE',
                        level: Loggers.LEVEL.DEBUG,
                        class: 'MyWay.Services.Loggers.Appenders.ConsoleAppender',
                        config: {
                            format: '%d{HH:mm:ss,SSS} %class %X{action} : %msg, Details : %X{details}'
                        }
                    },
                    {
                        type: 'DB',
                        level: Loggers.LEVEL.DEBUG,
                        class: 'MyWay.Services.Loggers.Appenders.DBAppender',
                        config: {}
                    },
                    {
                        type: 'PORTAL',
                        level: Loggers.LEVEL.DEBUG,
                        class: 'MyWay.Services.Loggers.Appenders.PortalAppender',
                        config: {
                            format: '%d{HH:mm:ss,SSS} %class %X{action} : %msg, Details : %X{details}'
                        }
                    }
                ],
                loggers: [
                    {
                        name: 'MyWay.Services',
                        level: Loggers.LEVEL.INFO,
                        appenders: ['CONSOLE', 'PORTAL']
                    },
                    // {
                    //     name: 'MyWay.Services.Impression.ImpressionManager',
                    //     level: LEVEL.DEBUG,
                    //     appenders: ['CONSOLE', 'PORTAL']
                    // },
                    {
                        name: 'MyWay.Services',
                        level: Loggers.LEVEL.INFO,
                        appenders: ['DB']
                    },
                    {
                        name: '*',
                        level: Loggers.LEVEL.INFO,
                        appenders: ['CONSOLE', 'DB']
                    }
                ]
            };
            Loggers.LoggerFactory.INSTANCE.loadConfiguration();
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Message;
        (function (Message) {
            var MessageManagerBase = /** @class */ (function (_super) {
                __extends(MessageManagerBase, _super);
                //Constructor
                function MessageManagerBase(library, otherWindow, uri) {
                    return _super.call(this, otherWindow, uri, Services.PrivatePortalServiceParameters.Instance().AuthorizedDomains, "Agent", "Manager", library, true, false) || this;
                }
                return MessageManagerBase;
            }(Message.MessageBase));
            Message.MessageManagerBase = MessageManagerBase;
            var MessageManager = /** @class */ (function (_super) {
                __extends(MessageManager, _super);
                function MessageManager(library) {
                    var _this = _super.call(this, library, null, null) || this;
                    window.addEventListener("message", _this._ReceiveMessage);
                    return _this;
                }
                MessageManager.prototype.dispose = function () {
                    window.removeEventListener("message", this._ReceiveMessage);
                };
                MessageManager.prototype.postMessage = function (pMessage, pTargetWindow, pTargetDomain, pIIFrameId) {
                    pTargetWindow.postMessage(pMessage, pTargetDomain);
                };
                return MessageManager;
            }(MessageManagerBase));
            Message.MessageManager = MessageManager;
            var MobileMessageManager = /** @class */ (function (_super) {
                __extends(MobileMessageManager, _super);
                function MobileMessageManager(library) {
                    return _super.call(this, library, null, null) || this;
                }
                MobileMessageManager.prototype.dispose = function () { };
                MobileMessageManager.prototype.postMessage = function (pMessage, pTargetWindow, pTargetDomain, pIIFrameId) {
                    var event = {};
                    event.data = pMessage;
                    event.origin = pTargetDomain;
                    event.source = pTargetWindow;
                    if (Message['MobileMessageAgent'] && Message['MobileMessageAgent'].Instance) {
                        Message['MobileMessageAgent'].Instance._ReceiveMessage(event);
                    }
                };
                return MobileMessageManager;
            }(MessageManagerBase));
            Message.MobileMessageManager = MobileMessageManager;
            var MessageManagerFactory = /** @class */ (function () {
                function MessageManagerFactory() {
                }
                MessageManagerFactory.createMessageManager = function (library) {
                    if (MyWay.Services.isMobile) {
                        return new MobileMessageManager(library);
                    }
                    else {
                        return new MessageManager(library);
                    }
                };
                return MessageManagerFactory;
            }());
            Message.MessageManagerFactory = MessageManagerFactory;
        })(Message = Services.Message || (Services.Message = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Test;
    (function (Test) {
        var V1;
        (function (V1) {
            var Services;
            (function (Services) {
                function generateEmptyLibraryManagerForApi() {
                    var lNumAppel = 0;
                    var lValeurSauvegardee = null;
                    var lListenersEvents = {};
                    return {
                        Core: {
                            createPromiseSelfResolved: MyWay.Services.CoreCommon.createPromiseSelfResolved,
                            createPromiseSelfError: MyWay.Services.CoreCommon.createPromiseSelfError,
                            promesseTryCatch: MyWay.Services.CoreCommon.promesseTryCatch,
                            getPromesseSelfResoved: MyWay.Services.CoreCommon.getPromesseSelfResoved,
                            creerChaineAleatoire: function (taille) {
                                lNumAppel++;
                                return "abcde" + lNumAppel;
                            }
                        },
                        Context: {},
                        ContexteClient: {},
                        Display: {},
                        Lisa: {},
                        Evennements: {},
                        Libelle: {}
                    };
                }
                Services.generateEmptyLibraryManagerForApi = generateEmptyLibraryManagerForApi;
            })(Services = V1.Services || (V1.Services = {}));
        })(V1 = Test.V1 || (Test.V1 = {}));
    })(Test = MyWay.Test || (MyWay.Test = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Context"] = "Context";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var ContextMessageSubject;
            (function (ContextMessageSubject) {
                ContextMessageSubject[ContextMessageSubject["AddToContext"] = 0] = "AddToContext";
                ContextMessageSubject[ContextMessageSubject["AddToContextTech"] = 1] = "AddToContextTech";
                ContextMessageSubject[ContextMessageSubject["ClearContext"] = 2] = "ClearContext";
                ContextMessageSubject[ContextMessageSubject["AddToSharedContext"] = 3] = "AddToSharedContext";
                ContextMessageSubject[ContextMessageSubject["RemoveFromSharedContext"] = 4] = "RemoveFromSharedContext";
                ContextMessageSubject[ContextMessageSubject["AddToProcessStepContext"] = 5] = "AddToProcessStepContext";
                ContextMessageSubject[ContextMessageSubject["AddToGlobalContext"] = 6] = "AddToGlobalContext";
                ContextMessageSubject[ContextMessageSubject["AddToTempoContext"] = 7] = "AddToTempoContext";
                ContextMessageSubject[ContextMessageSubject["AddListToContext"] = 8] = "AddListToContext";
                ContextMessageSubject[ContextMessageSubject["AddToMainProcessContext"] = 9] = "AddToMainProcessContext";
                ContextMessageSubject[ContextMessageSubject["GetFromMainProcessContext"] = 10] = "GetFromMainProcessContext";
                ContextMessageSubject[ContextMessageSubject["ChangeMainProcessName"] = 11] = "ChangeMainProcessName";
                ContextMessageSubject[ContextMessageSubject["GetFromContext"] = 12] = "GetFromContext";
                ContextMessageSubject[ContextMessageSubject["GetObjectFromContext"] = 13] = "GetObjectFromContext";
                ContextMessageSubject[ContextMessageSubject["GetTypedObjectFromContext"] = 14] = "GetTypedObjectFromContext";
                ContextMessageSubject[ContextMessageSubject["ReinitialisationServiceAgent"] = 15] = "ReinitialisationServiceAgent";
                ContextMessageSubject[ContextMessageSubject["GetCurrentStepInfo"] = 16] = "GetCurrentStepInfo";
                ContextMessageSubject[ContextMessageSubject["GetSharedStorage"] = 17] = "GetSharedStorage";
                ContextMessageSubject[ContextMessageSubject["GetWaitingProcesses"] = 18] = "GetWaitingProcesses";
                ContextMessageSubject[ContextMessageSubject["GetPortals"] = 19] = "GetPortals";
                ContextMessageSubject[ContextMessageSubject["GetGlobalStorage"] = 20] = "GetGlobalStorage";
                ContextMessageSubject[ContextMessageSubject["SetMyWayCompatible"] = 21] = "SetMyWayCompatible";
                ContextMessageSubject[ContextMessageSubject["GetListFromContext"] = 22] = "GetListFromContext";
                ContextMessageSubject[ContextMessageSubject["GetAuthentificationInfo"] = 23] = "GetAuthentificationInfo";
                ContextMessageSubject[ContextMessageSubject["GetParametresComptables"] = 24] = "GetParametresComptables";
                ContextMessageSubject[ContextMessageSubject["PutProcessInPortalContext"] = 25] = "PutProcessInPortalContext";
                ContextMessageSubject[ContextMessageSubject["PutTaskInPortalContext"] = 26] = "PutTaskInPortalContext";
                ContextMessageSubject[ContextMessageSubject["GetCurrentProcessId"] = 27] = "GetCurrentProcessId";
                ContextMessageSubject[ContextMessageSubject["GetCurrentMainProcess"] = 28] = "GetCurrentMainProcess";
                ContextMessageSubject[ContextMessageSubject["GetCurrentStepId"] = 29] = "GetCurrentStepId";
                ContextMessageSubject[ContextMessageSubject["Notification"] = 30] = "Notification";
                ContextMessageSubject[ContextMessageSubject["AnalyseApp"] = 31] = "AnalyseApp";
                ContextMessageSubject[ContextMessageSubject["RemoveFromContext"] = 32] = "RemoveFromContext";
                ContextMessageSubject[ContextMessageSubject["RemoveFromSharedContextContext"] = 33] = "RemoveFromSharedContextContext";
                ContextMessageSubject[ContextMessageSubject["GetPortalContext"] = 34] = "GetPortalContext";
                ContextMessageSubject[ContextMessageSubject["SwitchProcess"] = 35] = "SwitchProcess";
                ContextMessageSubject[ContextMessageSubject["EndProcess"] = 36] = "EndProcess";
                ContextMessageSubject[ContextMessageSubject["EndAllProcess"] = 37] = "EndAllProcess";
                ContextMessageSubject[ContextMessageSubject["Inconnu"] = 38] = "Inconnu";
                ContextMessageSubject[ContextMessageSubject["GetFromSharedContext"] = 39] = "GetFromSharedContext";
            })(ContextMessageSubject = Context.ContextMessageSubject || (Context.ContextMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Context, [
                Services.Components.ComponentType.Persistence
            ]);
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            Services.CoreCommon.addListenerOnAddMyWayHeaders(function (headers, settings) {
                if (settings.stepInfo) {
                    headers['X-identifiantProcessus'] = settings.stepInfo.CurrentParentProcessId;
                    headers['X-nomComposant'] = settings.stepInfo.NomComposant;
                    headers['X-niveauTrace'] = settings.stepInfo.NiveauTrace.toString();
                }
                else {
                    headers['X-identifiantProcessus'] = '';
                    headers['X-nomComposant'] = '';
                    headers['X-niveauTrace'] = '';
                }
                if (settings.authentificationInfo) {
                    headers['X-codeEtablissement'] = settings.authentificationInfo.codeEtablissement;
                    headers['X-identifiantPoste'] = settings.authentificationInfo.numeroStationTravail;
                    headers['X-identifiantConnexionAgent'] = settings.authentificationInfo.agentConnecte.referenceExterneAgent;
                    headers['X-identifiantNationalAgent'] = settings.authentificationInfo.agentConnecte.adresseMessagerie;
                    if (settings.oldHeader)
                        headers['authentificationInfo'] = JSON.stringify(settings.authentificationInfo);
                    //Traitement des EDS
                    if (settings.authentificationInfo.agentConnecte.referenceExterneEdsRattachemen)
                        headers['X-agenceRattachement'] = settings.authentificationInfo.agentConnecte.referenceExterneEdsRattachemen;
                    else
                        headers['X-agenceRattachement'] = "0000000";
                    if (settings.authentificationInfo.agentConnecte.numeroInterneEds)
                        headers['X-posteFonctionnelAgent'] = settings.authentificationInfo.agentConnecte.numeroInterneEds;
                    else
                        headers['X-posteFonctionnelAgent'] = "0000000";
                }
                if (settings.parametresComptables) {
                    headers['X-identifiantGuichetOperation'] = settings.parametresComptables.edsInterneGuichetComptable;
                }
            });
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var StorageLevel;
            (function (StorageLevel) {
                StorageLevel[StorageLevel["Global"] = 0] = "Global";
                StorageLevel[StorageLevel["Process"] = 1] = "Process";
                StorageLevel[StorageLevel["Step"] = 2] = "Step";
                StorageLevel[StorageLevel["Shared"] = 3] = "Shared";
                StorageLevel[StorageLevel["Tempo"] = 4] = "Tempo";
                StorageLevel[StorageLevel["MainProcess"] = 5] = "MainProcess";
            })(StorageLevel = Context.StorageLevel || (Context.StorageLevel = {}));
            var PATH_PART;
            (function (PATH_PART) {
                PATH_PART[PATH_PART["MAIN_PROCESS_ID"] = 0] = "MAIN_PROCESS_ID";
                PATH_PART[PATH_PART["LAST_PROCESS_ID"] = 1] = "LAST_PROCESS_ID";
                PATH_PART[PATH_PART["PREVIOUS_PROCESS_ID"] = 2] = "PREVIOUS_PROCESS_ID";
                PATH_PART[PATH_PART["STEP_ID"] = 3] = "STEP_ID";
            })(PATH_PART = Context.PATH_PART || (Context.PATH_PART = {}));
            var EtatEtape;
            (function (EtatEtape) {
                EtatEtape[EtatEtape["NONE"] = 0] = "NONE";
                EtatEtape[EtatEtape["STARTED"] = 1] = "STARTED";
                EtatEtape[EtatEtape["RESET"] = 2] = "RESET";
            })(EtatEtape = Context.EtatEtape || (Context.EtatEtape = {}));
            var IStepAction = /** @class */ (function () {
                function IStepAction() {
                }
                return IStepAction;
            }());
            Context.IStepAction = IStepAction;
            var IStepContrat = /** @class */ (function () {
                function IStepContrat() {
                }
                return IStepContrat;
            }());
            Context.IStepContrat = IStepContrat;
            var AnalyseResult = /** @class */ (function () {
                function AnalyseResult() {
                    this.TotalWatchers = 0;
                    this.TotalWatchers2 = 0;
                    this.TotalWatchers3 = 0;
                    this.WatcherByScope = [];
                }
                AnalyseResult.prototype.ToString = function () {
                    return JSON.stringify(this);
                };
                return AnalyseResult;
            }());
            Context.AnalyseResult = AnalyseResult;
            var AnalyseScope = /** @class */ (function () {
                function AnalyseScope(Name, WatcherCount) {
                    this.Name = Name;
                    this.WatcherCount = WatcherCount;
                }
                return AnalyseScope;
            }());
            Context.AnalyseScope = AnalyseScope;
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var StepInfo = /** @class */ (function () {
                function StepInfo() {
                    this.Contrats = [];
                    this.AuthorizedOutputs = [];
                }
                return StepInfo;
            }());
            Context.StepInfo = StepInfo;
            var StepInfoExtended = /** @class */ (function (_super) {
                __extends(StepInfoExtended, _super);
                function StepInfoExtended() {
                    return _super.call(this) || this;
                }
                return StepInfoExtended;
            }(StepInfo));
            Context.StepInfoExtended = StepInfoExtended;
            var ContratInfo = /** @class */ (function () {
                function ContratInfo() {
                }
                return ContratInfo;
            }());
            Context.ContratInfo = ContratInfo;
            var DonneesLocales = /** @class */ (function () {
                function DonneesLocales() {
                }
                return DonneesLocales;
            }());
            Context.DonneesLocales = DonneesLocales;
            /**
             * Ensemble des données liées à l'utilisateur bancaire
             */
            var AuthentificationInfo = /** @class */ (function () {
                //Constructor
                function AuthentificationInfo() {
                    this.agentConnecte = new AgentConnecte();
                    this.guichetAgent = new GuichetAgent();
                }
                return AuthentificationInfo;
            }());
            Context.AuthentificationInfo = AuthentificationInfo;
            var ParametresComptables = /** @class */ (function () {
                function ParametresComptables() {
                }
                return ParametresComptables;
            }());
            Context.ParametresComptables = ParametresComptables;
            var ParametresNumerisation = /** @class */ (function () {
                function ParametresNumerisation() {
                }
                return ParametresNumerisation;
            }());
            Context.ParametresNumerisation = ParametresNumerisation;
            var ParametresServeurPoste = /** @class */ (function () {
                function ParametresServeurPoste() {
                }
                return ParametresServeurPoste;
            }());
            Context.ParametresServeurPoste = ParametresServeurPoste;
            var AgentConnecte = /** @class */ (function () {
                //Constructor
                function AgentConnecte() {
                }
                return AgentConnecte;
            }());
            Context.AgentConnecte = AgentConnecte;
            var GuichetAgent = /** @class */ (function () {
                function GuichetAgent() {
                }
                return GuichetAgent;
            }());
            Context.GuichetAgent = GuichetAgent;
            var InfosUserPoste = /** @class */ (function () {
                function InfosUserPoste() {
                }
                return InfosUserPoste;
            }());
            Context.InfosUserPoste = InfosUserPoste;
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Display"] = "Display";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Display;
        (function (Display) {
            var DisplayMessageSubject;
            (function (DisplayMessageSubject) {
                DisplayMessageSubject[DisplayMessageSubject["Redirect"] = 0] = "Redirect";
                DisplayMessageSubject[DisplayMessageSubject["RedirectInStep"] = 1] = "RedirectInStep";
                DisplayMessageSubject[DisplayMessageSubject["PrepareSubmit"] = 2] = "PrepareSubmit";
                DisplayMessageSubject[DisplayMessageSubject["DisplayMessage"] = 3] = "DisplayMessage";
                DisplayMessageSubject[DisplayMessageSubject["GetMyIFrameId"] = 4] = "GetMyIFrameId";
                DisplayMessageSubject[DisplayMessageSubject["Refresh"] = 5] = "Refresh";
            })(DisplayMessageSubject = Display.DisplayMessageSubject || (Display.DisplayMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Display, [
                Services.Components.ComponentType.Context,
                Services.Components.ComponentType.Core
            ]);
        })(Display = Services.Display || (Services.Display = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ContexteClient;
        (function (ContexteClient) {
            var ContexteClientStatusFlag = /** @class */ (function () {
                function ContexteClientStatusFlag() {
                }
                ContexteClientStatusFlag.RELOAD_FLAG_NAME = "indicateurSynchroSynthese";
                ContexteClientStatusFlag.RELOAD_FLAG_VALUE_NONE = "0";
                ContexteClientStatusFlag.RELOAD_FLAG_VALUE_SYNCHRO = "1";
                ContexteClientStatusFlag.RELOAD_FLAG_VALUE_RELOAD = "2";
                return ContexteClientStatusFlag;
            }());
            ContexteClient.ContexteClientStatusFlag = ContexteClientStatusFlag;
        })(ContexteClient = Services.ContexteClient || (Services.ContexteClient = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            var ApplicationDTO = /** @class */ (function () {
                function ApplicationDTO() {
                }
                return ApplicationDTO;
            }());
            Application.ApplicationDTO = ApplicationDTO;
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Persistence;
        (function (Persistence) {
            var StorageInstance = /** @class */ (function () {
                function StorageInstance(pKeyStorage, pCallbackToDisposeListener, pCallbackToSave, pCallbackOnEvent) {
                    this.callbackToDisposeListener = null;
                    this.callbackToSave = null;
                    this.callbackOnEvent = null;
                    this.keyStorage = pKeyStorage;
                    this.callbackToDisposeListener = pCallbackToDisposeListener;
                    this.callbackToSave = pCallbackToSave;
                    this.callbackOnEvent = pCallbackOnEvent;
                }
                StorageInstance.prototype.saveValue = function (pObject) {
                    this.callbackToSave(pObject);
                };
                StorageInstance.prototype.getValue = function () {
                    var lValue = window.localStorage.getItem(this.keyStorage);
                    if (!lValue || lValue.length === 0) {
                        return null;
                    }
                    var lValueUnstringified = JSON.parse(lValue);
                    if (!lValueUnstringified || !lValueUnstringified.data) {
                        return null;
                    }
                    return lValueUnstringified.data;
                };
                StorageInstance.prototype.onEvent = function (pElement) {
                    this.callbackOnEvent(pElement);
                };
                StorageInstance.prototype.disposeListener = function () {
                    this.callbackToDisposeListener();
                };
                return StorageInstance;
            }());
            Persistence.StorageInstance = StorageInstance;
        })(Persistence = Services.Persistence || (Services.Persistence = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BaseDeDonnees;
        (function (BaseDeDonnees) {
            var BaseDeDonneesAgent = /** @class */ (function (_super) {
                __extends(BaseDeDonneesAgent, _super);
                /**
                * Constructeur de la classe BaseDeDonneesAgent
                */
                function BaseDeDonneesAgent() {
                    return _super.call(this, Services.Components.ComponentType.BaseDeDonnees) || this;
                }
                BaseDeDonneesAgent.prototype.getBases = function () {
                    return this.sendMessage(BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.GetBases, {});
                };
                BaseDeDonneesAgent.prototype.get = function (pParametres) {
                    return this.sendMessage(BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.Get, {
                        base: pParametres.base,
                        cle: pParametres.cle,
                        table: pParametres.table
                    });
                };
                BaseDeDonneesAgent.prototype.getAll = function (pParametres) {
                    return this.sendMessage(BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.GetAll, {
                        base: pParametres.base,
                        table: pParametres.table
                    });
                };
                BaseDeDonneesAgent.prototype.find = function (pParametres) {
                    return this.sendMessage(BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.Find, {
                        table: pParametres.table
                    });
                };
                BaseDeDonneesAgent.prototype.count = function (pParametres) {
                    return this.sendMessage(BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.Count, {
                        base: pParametres.base,
                        table: pParametres.table
                    });
                };
                BaseDeDonneesAgent.prototype.ajouter = function (pParametres) {
                    return this.sendMessage(BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.Ajouter, {
                        base: pParametres.base,
                        elements: [pParametres.element],
                        table: pParametres.table
                    });
                };
                BaseDeDonneesAgent.prototype.supprimer = function (pParametres) {
                    return this.sendMessage(BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.Supprimer, {
                        base: pParametres.base,
                        cles: [pParametres.cle],
                        table: pParametres.table
                    });
                };
                BaseDeDonneesAgent.prototype.modifier = function (pParametres) {
                    return this.sendMessage(BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.MettreAJour, {
                        base: pParametres.base,
                        elements: [{
                                cle: pParametres.cle,
                                element: pParametres.element
                            }],
                        table: pParametres.table
                    });
                };
                BaseDeDonneesAgent.prototype.resetAll = function () {
                    return this.sendMessage(BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.ResetAll, {});
                };
                return BaseDeDonneesAgent;
            }(Services.Components.ComponentAgentBase));
            BaseDeDonnees.BaseDeDonneesAgent = BaseDeDonneesAgent;
            Services.Components.RegistryAgent.getInstance().register(BaseDeDonneesAgent);
        })(BaseDeDonnees = Services.BaseDeDonnees || (Services.BaseDeDonnees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des exports
* @module MyWay.Services.Export
* @author Laurie Marchaterre
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Export;
        (function (Export) {
            /**
            * Classe permettant de gérer les exports
            */
            var ExportAgent = /** @class */ (function (_super) {
                __extends(ExportAgent, _super);
                /**
                 * Constructeur de la classe ExportAgent
                 */
                function ExportAgent() {
                    return _super.call(this, Services.Components.ComponentType.Export) || this;
                }
                /**
                 * Permet d'exporter un tableau de données Json dans un fichier.
                 * @param {IDonneesAExporter}   donnees        Données Json à exporter dans un fichier
                 * @param {FORMAT_FICHIER} format       Format du fichier exporté
                 * @param {IOptionsExportFichier} options        Options d'exportation du fichier
                 * @return {IPromesse<void>}
                 *
                 * ~~~ts
                 * serviceAgent.export.exporterFichier(donnees: IDonneesAExporter, format: FORMAT_FICHIER, options: IOptionsExportFichier).then(() => {
                 * // Le fichier a été exporté
                 * ...
                 * * }).catch((erreur: MyWay.Services.Erreur) => {
                 * // Renvoi une erreur
                 * ...
                 * });
                 * ~~~
                 */
                ExportAgent.prototype.exporterFichier = function (donnees, format, options) {
                    var lParametres = {
                        donnees: donnees,
                        format: format,
                        options: options
                    };
                    return this.sendMessage(Export.ExportMessageSubject.ExporterFichier, lParametres);
                };
                ExportAgent.CLASS_NAME = 'MyWay.Services.Export.ExportAgent';
                ExportAgent.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ExportAgent.CLASS_NAME);
                return ExportAgent;
            }(Services.Components.ComponentAgentBase));
            Export.ExportAgent = ExportAgent;
            Services.Components.RegistryAgent.getInstance().register(ExportAgent);
        })(Export = Services.Export || (Services.Export = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des jab
* @module MyWay.Services.JAB
* classe : JABAgent - public - Classe permettant la gestion des Journaux d'Archivage Bancaires
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var JAB;
        (function (JAB) {
            /**
            * Classe permettant la gestion des Journaux d'Archivage Bancaires
            */
            var JABAgent = /** @class */ (function (_super) {
                __extends(JABAgent, _super);
                /**
                 * Constructeur de la classe JABAgent
                 */
                function JABAgent() {
                    return _super.call(this, Services.Components.ComponentType.JAB) || this;
                }
                JABAgent.prototype.Enregistrer = function (data) {
                    return this.sendMessage(JAB.JABMessageSubject.Enregistrer, {
                        data: data
                    });
                };
                return JABAgent;
            }(Services.Components.ComponentAgentBase));
            JAB.JABAgent = JABAgent;
            Services.Components.RegistryAgent.getInstance().register(JABAgent);
        })(JAB = Services.JAB || (Services.JAB = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des fichiers
* @module MyWay.Services.Fichier
* classe : FichierAgent - public - Classe de gestion des fichiers
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Fichier;
        (function (Fichier) {
            /**
            * Classe gestion des fichiers
            * @classe FichierAgent
            * fonction : saveAs – public - Permet de sauvegarder un fichier sur le filesystem
            */
            var FichierAgent = /** @class */ (function (_super) {
                __extends(FichierAgent, _super);
                function FichierAgent() {
                    return _super.call(this, Services.Components.ComponentType.Fichier) || this;
                }
                /**
                * Permet de sauvegarder un fichier sur le poste: le fichier est téléchargé par le navigateur
                * @param data {any} données à sauvegarder
                * @param type {TYPE_FICHIER} type du fichier à télécharger
                * @param nomFichier {string} nom attribué au fichier téléchargé
                * @param typeDonnees {TYPE_DONNEES_A_SAUVER} type de données à enregistrer (Optionnel: par défaut TYPE_DONNEES_A_SAUVER.BLOB)
                *
                * ~~~ts
                * // Exemple de création d'un fichier PDF
                * serviceAgent.Fichier.saveAs({}, MyWay.Services.Fichier.TYPE_FICHIER.PDF, "Fichier de test.pdf")
                *   .then(function () {
                *       // Sauvegarde OK
                *   })
                *   .catch(function (erreur: MyWay.Services.Erreur) {
                *       // Sauvegarde KO
                *   });
                * // Exemple de création d'un fichier JSON
                * serviceAgent.Fichier.saveAs("{ \"Key\": \"Value\" }", MyWay.Services.Fichier.TYPE_FICHIER.JSON, "Fichier de test.json")
                *   .then(function () {
                *       // Sauvegarde OK
                *   })
                *   .catch(function (erreur: MyWay.Services.Erreur) {
                *       // Sauvegarde KO
                *   });
                * ~~~
                */
                FichierAgent.prototype.saveAs = function (data, type, nomFichier, typeDonnees) {
                    var parameters = {
                        data: data,
                        type: type,
                        nomFichier: nomFichier,
                        typeDonnees: typeDonnees
                    };
                    return this.sendMessage(Fichier.FichierMessageSubject.SaveAs, parameters);
                };
                return FichierAgent;
            }(Services.Components.ComponentAgentBase));
            Fichier.FichierAgent = FichierAgent;
            Services.Components.RegistryAgent.getInstance().register(FichierAgent);
        })(Fichier = Services.Fichier || (Services.Fichier = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des traitement Nsdk
* @module MyWay.Services.TraitementNsdk
* classe : TraitementNsdkAgent - public - Classe permettant Le lancement de traitment NSDK depuis MyWay
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraitementNsdk;
        (function (TraitementNsdk) {
            /**
            * Classe permettant la gestion des traitements NSDK depuis MyWay
            */
            var TraitementNsdkAgent = /** @class */ (function (_super) {
                __extends(TraitementNsdkAgent, _super);
                /**
                 * Constructeur de la classe TraitementNsdkAgent
                 * @param {AgentLibrary}   agentLibrary  [description]
                 * @param {ErreurCallback} errorCallback [description]
                 */
                function TraitementNsdkAgent() {
                    return _super.call(this, Services.Components.ComponentType.TraitementNsdk) || this;
                }
                TraitementNsdkAgent.prototype.Lancer = function (traitement, data) {
                    return this.sendMessage(TraitementNsdk.TraitementNsdkMessageSubject.Lancer, {
                        traitement: traitement,
                        data: data
                    });
                };
                return TraitementNsdkAgent;
            }(Services.Components.ComponentAgentBase));
            TraitementNsdk.TraitementNsdkAgent = TraitementNsdkAgent;
            Services.Components.RegistryAgent.getInstance().register(TraitementNsdkAgent);
        })(TraitementNsdk = Services.TraitementNsdk || (Services.TraitementNsdk = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentManagerExtendedBase = /** @class */ (function () {
                function ComponentManagerExtendedBase(_name) {
                    this._name = _name;
                }
                ComponentManagerExtendedBase.prototype.init = function (pManager, pLibraryCommon) {
                    this.library = pLibraryCommon;
                    this.manager = pManager;
                    return this.library.Core.getPromesseSelfResoved();
                };
                ComponentManagerExtendedBase.prototype.dispose = function () {
                    return this.library.Core.getPromesseSelfResoved();
                };
                Object.defineProperty(ComponentManagerExtendedBase.prototype, "name", {
                    get: function () {
                        return this._name;
                    },
                    enumerable: true,
                    configurable: true
                });
                return ComponentManagerExtendedBase;
            }());
            Components.ComponentManagerExtendedBase = ComponentManagerExtendedBase;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            'use strict';
            var RegistryType;
            (function (RegistryType) {
                RegistryType["MANAGER_EXTENDED"] = "MANAGER_EXTENDED";
            })(RegistryType = Components.RegistryType || (Components.RegistryType = {}));
            var RegistryManagerExtended = /** @class */ (function (_super) {
                __extends(RegistryManagerExtended, _super);
                function RegistryManagerExtended() {
                    return _super.call(this, RegistryType.MANAGER_EXTENDED, [RegistryType.MANAGER, RegistryType.COMMON]) || this;
                }
                RegistryManagerExtended.getInstance = function () {
                    if (RegistryManagerExtended.instance === null) {
                        RegistryManagerExtended.instance = new RegistryManagerExtended();
                        Components.FactoryRegistries.getInstance().addRegistry(RegistryManagerExtended.instance);
                    }
                    return RegistryManagerExtended.instance;
                };
                RegistryManagerExtended.prototype.init = function (pComponent) {
                    var _this = this;
                    this.getRegistryCommon().getComponentsInstances().forEach(function (pComponentInstance) {
                        if (!_this._componentsInstancesByKey[pComponentInstance.name]) {
                            _this._componentsInstances.push(pComponentInstance);
                            _this._componentsInstancesByKey[pComponentInstance.name] = pComponentInstance;
                        }
                    });
                    return _super.prototype.init.call(this, pComponent);
                };
                RegistryManagerExtended.prototype.initializeComponent = function (pManagerExtended) {
                    return pManagerExtended.init(this.getRegistryManager().getComponentInstance(pManagerExtended.name), this.getRegistryCommon().getLibrary());
                };
                RegistryManagerExtended.prototype.getRegistryCommon = function () {
                    return this._dependenciesInstances[1];
                };
                RegistryManagerExtended.prototype.getRegistryManager = function () {
                    return this._dependenciesInstances[0];
                };
                RegistryManagerExtended.instance = null;
                return RegistryManagerExtended;
            }(Components.AbstractRegistry));
            Components.RegistryManagerExtended = RegistryManagerExtended;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ServiceManagerExtended = /** @class */ (function () {
            function ServiceManagerExtended() {
                this.library = null;
                this.libraryExtended = null;
                this._serviceManager = new Services.ServiceManager();
            }
            ServiceManagerExtended.setListenerOnInitContext = function (pCallback) {
                ServiceManagerExtended.listenerOnInitContext = pCallback;
            };
            ServiceManagerExtended.prototype.init = function (serviceInit) {
                var _this = this;
                Services.PrivatePortalServiceParameters.Instance().init();
                return this._serviceManager.init(serviceInit).then(function () {
                    _this.libraryExtended = Services.Components.RegistryManagerExtended.getInstance().getLibrary();
                    _this.library = Services.Components.RegistryManager.getInstance().getLibrary();
                    for (var key in _this.libraryExtended) {
                        _this[key] = _this.libraryExtended[key];
                    }
                    if (ServiceManagerExtended.listenerOnInitContext) {
                        return ServiceManagerExtended.listenerOnInitContext(_this.libraryExtended);
                    }
                    else {
                        return Services.CoreCommon.createPromiseSelfResolved(null);
                    }
                });
            };
            ServiceManagerExtended.prototype.Initialize = function () {
                return this._serviceManager.Initialize();
            };
            Object.defineProperty(ServiceManagerExtended.prototype, "OnEvent", {
                set: function (value) {
                    this._serviceManager.OnEvent = value;
                },
                enumerable: true,
                configurable: true
            });
            ServiceManagerExtended.prototype.Dispose = function () {
                return this._serviceManager.Dispose();
            };
            ServiceManagerExtended.prototype.VersionMySys = function () {
                return Services.CoreCommon.VersionMySys;
            };
            ServiceManagerExtended.CLASS_NAME = 'MyWay.Services.ServiceManagerExtended';
            ServiceManagerExtended.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ServiceManagerExtended.CLASS_NAME);
            ServiceManagerExtended.listenerOnInitContext = null;
            return ServiceManagerExtended;
        }());
        Services.ServiceManagerExtended = ServiceManagerExtended;
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ServiceManagerProvider = /** @class */ (function () {
            function ServiceManagerProvider($q) {
                this.$q = $q;
            }
            ServiceManagerProvider.Instance = function () {
                if (ServiceManagerProvider._serviceManager === null) {
                    ServiceManagerProvider._serviceManager = new Services.ServiceManagerExtended();
                }
                return ServiceManagerProvider._serviceManager;
            };
            ServiceManagerProvider.prototype.init = function (serviceInit) {
                var deferred = this.$q.defer();
                ServiceManagerProvider.Instance().init(serviceInit).then(function () {
                    ServiceManagerProvider.logger.info("Fin d'initialisation du serviceManager");
                    deferred.resolve(ServiceManagerProvider.Instance());
                }, function () {
                    deferred.reject();
                });
                return deferred.promise;
            };
            ServiceManagerProvider.CLASS_NAME = 'MyWay.Services.ServiceManagerProvider';
            ServiceManagerProvider.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ServiceManagerProvider.CLASS_NAME);
            ServiceManagerProvider.$inject = [
                "$q"
            ];
            ServiceManagerProvider._serviceManager = null;
            return ServiceManagerProvider;
        }());
        Services.ServiceManagerProvider = ServiceManagerProvider;
        if (typeof angular != 'undefined') {
            Services.moduleManager = angular.module("moduleManager", ["ng"]);
            Services.moduleManager.provider('serviceManager', function () {
                this.$get = ["$q", function ($q) {
                        return ServiceManagerProvider.Instance();
                    }];
            });
        }
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentManagerMessageBase = /** @class */ (function (_super) {
                __extends(ComponentManagerMessageBase, _super);
                function ComponentManagerMessageBase(pName) {
                    return _super.call(this, pName) || this;
                }
                ComponentManagerMessageBase.prototype.init = function (pManager, pLibCommon) {
                    this.managerInstance = pManager;
                    this.library = pLibCommon;
                    return Services.CoreCommon.getPromesseSelfResoved();
                };
                ComponentManagerMessageBase.prototype.reception = function (pMessage) {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        pDefer.reject(new Services.Erreur("Subject " + pMessage.subject + " not implemented on " + _this.name + " manager-message"));
                    });
                };
                ComponentManagerMessageBase.prototype.dispose = function () {
                    return Services.CoreCommon.getPromesseSelfResoved();
                };
                return ComponentManagerMessageBase;
            }(Components.ComponentBase));
            Components.ComponentManagerMessageBase = ComponentManagerMessageBase;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            'use strict';
            var RegistryType;
            (function (RegistryType) {
                RegistryType["MANAGER_MESSAGE"] = "MANAGER_MESSAGE";
            })(RegistryType = Components.RegistryType || (Components.RegistryType = {}));
            var RegistryManagerMessage = /** @class */ (function (_super) {
                __extends(RegistryManagerMessage, _super);
                function RegistryManagerMessage() {
                    var _this = _super.call(this, RegistryType.MANAGER_MESSAGE, [RegistryType.COMMON, RegistryType.MANAGER]) || this;
                    _this.messageService = null;
                    return _this;
                }
                RegistryManagerMessage.getInstance = function () {
                    if (RegistryManagerMessage.instance === null) {
                        RegistryManagerMessage.instance = new RegistryManagerMessage();
                        Components.FactoryRegistries.getInstance().addRegistry(RegistryManagerMessage.instance);
                    }
                    return RegistryManagerMessage.instance;
                };
                RegistryManagerMessage.prototype.init = function (pComponent) {
                    var _this = this;
                    this.getRegistryCommon().getComponentsInstances().forEach(function (pComponentInstance) {
                        if (!_this._componentsInstancesByKey[pComponentInstance.name]) {
                            _this._componentsInstances.push(pComponentInstance);
                            _this._componentsInstancesByKey[pComponentInstance.name] = pComponentInstance;
                        }
                    });
                    if (!this.messageService) {
                        this.messageService = Services.Message.MessageManagerMessageFactory.createMessageManager(this.getLibrary());
                    }
                    return _super.prototype.init.call(this, pComponent);
                };
                RegistryManagerMessage.prototype.getRegistryCommon = function () {
                    return this._dependenciesInstances[0];
                };
                RegistryManagerMessage.prototype.getRegistryManager = function () {
                    return this._dependenciesInstances[1];
                };
                RegistryManagerMessage.prototype.initializeComponent = function (pManagerMessage) {
                    var lManager = this.getRegistryManager().getComponentInstance(pManagerMessage.name);
                    return pManagerMessage.init(lManager, this.getRegistryCommon().getLibrary());
                };
                RegistryManagerMessage.instance = null;
                return RegistryManagerMessage;
            }(Components.AbstractRegistry));
            Components.RegistryManagerMessage = RegistryManagerMessage;
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Message;
        (function (Message) {
            var MessageManagerMessageBase = /** @class */ (function (_super) {
                __extends(MessageManagerMessageBase, _super);
                //Constructor
                function MessageManagerMessageBase(library, otherWindow, uri) {
                    return _super.call(this, otherWindow, uri, Services.PrivatePortalServiceParameters.Instance().AuthorizedDomains, "Agent", "Manager", library, false, true) || this;
                }
                return MessageManagerMessageBase;
            }(Message.MessageBase));
            Message.MessageManagerMessageBase = MessageManagerMessageBase;
            var MessageManagerMessage = /** @class */ (function (_super) {
                __extends(MessageManagerMessage, _super);
                function MessageManagerMessage(library) {
                    var _this = _super.call(this, library, null, null) || this;
                    window.addEventListener("message", _this._ReceiveMessage);
                    return _this;
                }
                MessageManagerMessage.prototype.dispose = function () {
                    window.removeEventListener("message", this._ReceiveMessage);
                };
                MessageManagerMessage.prototype.postMessage = function (pMessage, pTargetWindow, pTargetDomain, pIIFrameId) {
                    pTargetWindow.postMessage(pMessage, pTargetDomain);
                };
                return MessageManagerMessage;
            }(MessageManagerMessageBase));
            Message.MessageManagerMessage = MessageManagerMessage;
            var MobileMessageManagerMessage = /** @class */ (function (_super) {
                __extends(MobileMessageManagerMessage, _super);
                function MobileMessageManagerMessage(library) {
                    return _super.call(this, library, null, null) || this;
                }
                MobileMessageManagerMessage.prototype.postMessage = function (pMessage, pTargetWindow, pTargetDomain, pIIFrameId) {
                    var event = {};
                    event.data = pMessage;
                    event.origin = pTargetDomain;
                    event.source = pTargetWindow;
                    if (Services['MobileMessageAgent'] && Services['MobileMessageAgent'].Instance) {
                        Services['MobileMessageAgent'].Instance._ReceiveMessage(event);
                    }
                };
                MobileMessageManagerMessage.prototype.dispose = function () { };
                return MobileMessageManagerMessage;
            }(MessageManagerMessageBase));
            Message.MobileMessageManagerMessage = MobileMessageManagerMessage;
            var MessageManagerMessageFactory = /** @class */ (function () {
                function MessageManagerMessageFactory() {
                }
                MessageManagerMessageFactory.createMessageManager = function (library) {
                    if (MyWay.Services.isMobile) {
                        return new MobileMessageManagerMessage(library);
                    }
                    else {
                        return new MessageManagerMessage(library);
                    }
                };
                return MessageManagerMessageFactory;
            }());
            Message.MessageManagerMessageFactory = MessageManagerMessageFactory;
        })(Message = Services.Message || (Services.Message = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var LoggerManagerMessage = /** @class */ (function (_super) {
                __extends(LoggerManagerMessage, _super);
                function LoggerManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Loggers) || this;
                }
                LoggerManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Loggers.LoggersMessageSubject.GetConfigActual: {
                            var lContent = pMessage.message;
                            var lConfig = this.managerInstance.getConfigurationActual();
                            return this.library.Core.createPromiseSelfResolved({
                                config: lConfig
                            });
                        }
                        case Loggers.LoggersMessageSubject.SetConfigActual: {
                            var lContent = pMessage.message;
                            this.managerInstance.setConfigActual(lContent.config);
                            this.library.Core.getPromesseSelfResoved();
                        }
                        case Loggers.LoggersMessageSubject.GetConfigDB: {
                            var lContent = pMessage.message;
                            var lConfig = this.managerInstance.getConfigurationDB(lContent.nom);
                            return this.library.Core.createPromiseSelfResolved({
                                config: lConfig
                            });
                        }
                        case Loggers.LoggersMessageSubject.SetConfigDB: {
                            var lContent = pMessage.message;
                            this.managerInstance.setConfigDB(lContent.nom, lContent.config);
                            this.library.Core.getPromesseSelfResoved();
                        }
                        case Loggers.LoggersMessageSubject.SaveConfig: {
                            var lContent = pMessage.message;
                            this.managerInstance.saveConfiguration(lContent.nom);
                            this.library.Core.getPromesseSelfResoved();
                        }
                        case Loggers.LoggersMessageSubject.LoadConfig: {
                            var lContent = pMessage.message;
                            this.managerInstance.loadConfiguration(lContent.nom);
                            this.library.Core.getPromesseSelfResoved();
                        }
                        case Loggers.LoggersMessageSubject.GetLoggers: {
                            var lContent = pMessage.message;
                            return this.library.Core.createPromiseSelfResolved({
                                loggers: this.managerInstance.getAllLogggersNames()
                            });
                        }
                        case Loggers.LoggersMessageSubject.GetNomConfigAcuelle: {
                            var lContent = pMessage.message;
                            var lNom = this.managerInstance.getNomConfigActuelle();
                            return this.library.Core.createPromiseSelfResolved({
                                nom: lNom
                            });
                        }
                        case Loggers.LoggersMessageSubject.IsClassExists: {
                            var lContent = pMessage.message;
                            try {
                                this.managerInstance.getClassByName(lContent.nom);
                                return this.library.Core.createPromiseSelfResolved({
                                    isExists: true
                                });
                            }
                            catch (e) {
                                return this.library.Core.createPromiseSelfResolved({
                                    isExists: false
                                });
                            }
                        }
                        case Loggers.LoggersMessageSubject.Reset: {
                            var lContent = pMessage.message;
                            this.managerInstance.clearConfigurations();
                            this.library.Core.getPromesseSelfResoved();
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                return LoggerManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Loggers.LoggerManagerMessage = LoggerManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(LoggerManagerMessage);
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Storage;
        (function (Storage) {
            var BaseStorage = /** @class */ (function () {
                function BaseStorage(Key) {
                    this.Key = Key;
                    BaseStorage.LocalStorageLimitInKb = 4 * 1024;
                    BaseStorage.IndexedDBStorageLimitInKb = 40 * 1024;
                }
                /**
                 * Crée un objet de stockage (storageData), le sérialize et le sauvegarde dans le localStorage.
                 * @param value
                 */
                BaseStorage.prototype.Set = function (value) {
                    var currentValue = this.Get();
                    if (currentValue === value)
                        return;
                    var storageData = {};
                    storageData.rev = MyWay.Services.CoreCommon.creerChaineAleatoire(5);
                    storageData.value = value;
                    var serializedValue = JSON.stringify(storageData);
                    if (this.onInternalStorageChanged)
                        this.onInternalStorageChanged(storageData.rev);
                    localStorage[this.Key] = serializedValue;
                    BaseStorage.EvaluateStorageSize(this.onStorageLimit);
                };
                /**
                 * Récupère l'objet de stockage sérialisé par la méthode Set, le parse et retourne sa valeur.
                 */
                BaseStorage.prototype.Get = function () {
                    var serializedValue = localStorage[this.Key];
                    if (serializedValue) {
                        var storageData = JSON.parse(serializedValue);
                        return storageData.value;
                    }
                    return undefined;
                };
                /**
                 * Calcule la taille, en octets, de la donnée stockée sur localStorage et IndexedDB et le transmet à la fonction onStorageLimit.
                 * @param onStorageLimit
                 */
                BaseStorage.EvaluateStorageSize = function (onStorageLimit) {
                    var x;
                    var data = [];
                    var localStorageTotal = 0;
                    var indexedDBTotal = 0;
                    for (x in localStorage) {
                        var length = localStorage[x].length * 2;
                        localStorageTotal += length;
                        if (x.substring(0, 4) === "IDB/")
                            indexedDBTotal += parseInt(localStorage[x]);
                    }
                    ;
                    if (onStorageLimit) {
                        var alertLS = 0;
                        var alertIDB = 0;
                        if (localStorageTotal > BaseStorage.LocalStorageLimitInKb * 1024)
                            alertLS = localStorageTotal / 1024;
                        if (indexedDBTotal > BaseStorage.IndexedDBStorageLimitInKb * 1024)
                            alertIDB = indexedDBTotal / 1024;
                        onStorageLimit(alertLS, alertIDB);
                    }
                };
                return BaseStorage;
            }());
            Storage.BaseStorage = BaseStorage;
            var ContextStorage = /** @class */ (function () {
                function ContextStorage() {
                }
                Object.defineProperty(ContextStorage, "Key", {
                    get: function () {
                        return ContextStorage._baseStorage.Key;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ContextStorage, "onInternalStorageChanged", {
                    set: function (value) {
                        ContextStorage._baseStorage.onInternalStorageChanged = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ContextStorage, "onStorageLimit", {
                    set: function (value) {
                        ContextStorage._baseStorage.onStorageLimit = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                ContextStorage.Set = function (value) {
                    ContextStorage._baseStorage.Set(value);
                };
                ContextStorage.Get = function () {
                    return ContextStorage._baseStorage.Get();
                };
                ContextStorage._baseStorage = new BaseStorage("context");
                return ContextStorage;
            }());
            Storage.ContextStorage = ContextStorage;
            var InteropMessageBusStorage = /** @class */ (function () {
                function InteropMessageBusStorage() {
                }
                Object.defineProperty(InteropMessageBusStorage, "Key", {
                    get: function () {
                        return InteropMessageBusStorage._baseStorage.Key;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(InteropMessageBusStorage, "onInternalStorageChanged", {
                    set: function (value) {
                        InteropMessageBusStorage._baseStorage.onInternalStorageChanged = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(InteropMessageBusStorage, "onStorageLimit", {
                    set: function (value) {
                        InteropMessageBusStorage._baseStorage.onStorageLimit = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                InteropMessageBusStorage.Set = function (value) {
                    InteropMessageBusStorage._baseStorage.Set(value);
                };
                InteropMessageBusStorage.Get = function () {
                    return InteropMessageBusStorage._baseStorage.Get();
                };
                InteropMessageBusStorage._baseStorage = new BaseStorage("interop-message-bus");
                return InteropMessageBusStorage;
            }());
            Storage.InteropMessageBusStorage = InteropMessageBusStorage;
        })(Storage = Services.Storage || (Services.Storage = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Test;
    (function (Test) {
        var V1;
        (function (V1) {
            var Services;
            (function (Services) {
                function generateEmptyLibraryManager() {
                    var lNumAppel = 0;
                    var lValeurSauvegardee = null;
                    var lListenersEvents = {};
                    return {
                        BaseDeDonnees: {},
                        Core: {
                            createPromiseSelfResolved: MyWay.Services.CoreCommon.createPromiseSelfResolved,
                            createPromiseSelfError: MyWay.Services.CoreCommon.createPromiseSelfError,
                            promesseTryCatch: MyWay.Services.CoreCommon.promesseTryCatch,
                            getPromesseSelfResoved: MyWay.Services.CoreCommon.getPromesseSelfResoved,
                            creerChaineAleatoire: function (taille) {
                                lNumAppel++;
                                return "abcde" + lNumAppel;
                            }
                        },
                        Context: {},
                        Dates: {},
                        Display: {},
                        Libelle: {},
                        Persistence: {
                            addStorage: function (pKey, pCallback) {
                                return {
                                    getValue: function () {
                                        return lValeurSauvegardee;
                                    },
                                    saveValue: function (pValeur) {
                                        lValeurSauvegardee = pValeur;
                                    }
                                };
                            }
                        },
                        Evennements: {
                            notifier: function (pEvent) {
                                if (!pEvent || !pEvent.EventType) {
                                    return;
                                }
                                if (!lListenersEvents[pEvent.EventType]) {
                                    return;
                                }
                                //Notifie portail / managers
                                lListenersEvents[pEvent.EventType].forEach(function (pListener) {
                                    try {
                                        pListener(pEvent);
                                    }
                                    catch (e) {
                                    }
                                });
                            },
                            ajouterListener: function (pCallback) {
                                var pEvents = [];
                                for (var _i = 1; _i < arguments.length; _i++) {
                                    pEvents[_i - 1] = arguments[_i];
                                }
                                pEvents.forEach(function (pEvent) {
                                    if (!lListenersEvents[pEvent]) {
                                        lListenersEvents[pEvent] = [];
                                    }
                                    lListenersEvents[pEvent].push(pCallback);
                                });
                            },
                            retirerListener: function (pListenerASupprimer) {
                                for (var pEvennement in lListenersEvents) {
                                    MyWay.Services.CoreCommon.ArrayUtils.remove(lListenersEvents[pEvennement], function (pListenerCourant) {
                                        return pListenerCourant === pListenerASupprimer;
                                    });
                                }
                            }
                        }
                    };
                }
                Services.generateEmptyLibraryManager = generateEmptyLibraryManager;
            })(Services = V1.Services || (V1.Services = {}));
        })(V1 = Test.V1 || (Test.V1 = {}));
    })(Test = MyWay.Test || (MyWay.Test = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des habilitations
* @module MyWay.Services.JAB
* classe : JABManager - public - Classe permettant l'enregistrement au jab NSDK
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var JAB;
        (function (JAB) {
            /**
            * Classe permettant la gestion des habilitations
            */
            var JABApi = /** @class */ (function (_super) {
                __extends(JABApi, _super);
                function JABApi() {
                    return _super.call(this, Services.Components.ComponentType.JAB) || this;
                }
                JABApi.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    var _this = this;
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer).then(function () {
                        _this._jabUrl = _this.privatePortalServiceParameters.LocalServiceUrl + '/contexte/EnregistrerJournalBancaireNSDK';
                    });
                };
                JABApi.prototype.enregistrer = function (data) {
                    return this.libraryManager.Core.sendRequest({
                        url: this._jabUrl + '?data=' + data,
                        method: Services.MethodEnum.POST
                    });
                };
                return JABApi;
            }(Services.Components.ComponentApiBase));
            JAB.JABApi = JABApi;
            Services.Components.RegistryApi.getInstance().register(JABApi);
        })(JAB = Services.JAB || (Services.JAB = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Fichier;
        (function (Fichier) {
            var FileSaver = /** @class */ (function () {
                function FileSaver() {
                    this.currentFileName = "telechargement";
                    this.currentMimeType = "application/octet-stream";
                    this._responseData = {};
                    this._strFileName = '';
                    this._strMimeType = '';
                    this.toString = function (a) { return String(a); };
                }
                Object.defineProperty(FileSaver.prototype, "responseData", {
                    get: function () {
                        return this._responseData;
                    },
                    set: function (data) {
                        this._responseData = data;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FileSaver.prototype, "strFileName", {
                    get: function () {
                        return this._strFileName;
                    },
                    set: function (strFileName) {
                        this._strFileName = strFileName;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FileSaver.prototype, "strMimeType", {
                    get: function () {
                        return this._strMimeType;
                    },
                    set: function (strMimeType) {
                        this._strMimeType = strMimeType;
                    },
                    enumerable: true,
                    configurable: true
                });
                FileSaver.prototype.initSaveFile = function () {
                    var _this = this;
                    this.self = window;
                    this.currentBlob = this.self.Blob || this.self.MozBlob || this.self.WebKitBlob || this.toString;
                    this.currentBlob = this.currentBlob.call ? this.currentBlob.bind(this.self) : Blob;
                    this.anchor = document.createElement("a");
                    if (this.strMimeType.length > 0) {
                        this.currentMimeType = this.strMimeType;
                    }
                    if (this.strFileName.length > 0) {
                        this.currentFileName = this.strFileName;
                    }
                    if (this.isSafari() && this.checkSafariVersion()) {
                        this.saveSafariFile();
                    }
                    else {
                        if (/^this.responseData\:[\w+\-]+\/[\w+\-]+[,;]/.test(this.responseData)) {
                            if (this.responseData.length > (1024 * 1024 * 1.999) && this.currentBlob !== this.toString) {
                                this.responseData = this.dataUrlToBlob(this.responseData);
                            }
                            else {
                                if (navigator.msSaveOrOpenBlob) {
                                    navigator.msSaveOrOpenBlob(this.dataUrlToBlob(this.responseData), this.currentFileName);
                                }
                                else {
                                    this.url = this.responseData;
                                    this.saver();
                                }
                                return;
                            }
                        }
                        if (this.responseData instanceof this.currentBlob) {
                            this.blob = this.responseData;
                        }
                        else {
                            this.blob = new this.currentBlob([this.responseData], { type: this.currentMimeType });
                        }
                        if (navigator.msSaveOrOpenBlob) {
                            navigator.msSaveOrOpenBlob(this.blob, this.currentFileName);
                            return;
                        }
                        if (this.self.URL) {
                            this.url = this.self.URL.createObjectURL(this.blob);
                            this.saver(true);
                        }
                        else {
                            if (typeof this.blob === "string" || this.blob.constructor === this.toString) {
                                try {
                                    this.url = "data:" + this.currentMimeType + ";base64," + this.self.btoa(this.blob);
                                }
                                catch (y) {
                                    this.url = "data:" + this.currentMimeType + "," + encodeURIComponent(this.blob);
                                }
                            }
                            else {
                                this.reader = new FileReader();
                                this.reader.onload = function (e) {
                                    _this.url = e.result;
                                };
                                this.reader.readAsDataURL(this.blob);
                                this.saver();
                            }
                            return;
                        }
                    }
                };
                FileSaver.prototype.dataUrlToBlob = function (strUrl) {
                    var parts = strUrl.split(/[:;,]/), type = parts[1], decoder = parts[2] == "base64" ? atob : decodeURIComponent, binData = decoder(parts.pop()), mx = binData.length, i = 0, uiArr = new Uint8Array(mx);
                    for (i; i < mx; ++i) {
                        uiArr[i] = binData.charCodeAt(i);
                    }
                    return new this.currentBlob([uiArr], { type: type });
                };
                FileSaver.prototype.saver = function (winMode) {
                    if ('download' in this.anchor) {
                        this.downloadFile(winMode);
                    }
                    else {
                        var iframe_1 = document.createElement("iframe");
                        document.body.appendChild(iframe_1);
                        if (!winMode) {
                            this.url = "data:" + this.url.replace(/^this.responseData:([\w\/\-\+]+)/, this.currentMimeType);
                        }
                        iframe_1.src = this.url;
                        setTimeout(function () {
                            document.body.removeChild(iframe_1);
                        }, 333);
                    }
                };
                FileSaver.prototype.saveSafariFile = function () {
                    var uInt8Array = new Uint8Array(this.responseData), i = uInt8Array.length, binaryString = new Array(i);
                    while (i--) {
                        binaryString[i] = String.fromCharCode(uInt8Array[i]);
                    }
                    this.url = "data:" + this.currentMimeType + ";base64," + window.btoa(binaryString.join(''));
                    if (!window.open(this.url)) {
                        window.location.href = this.url;
                    }
                };
                FileSaver.prototype.downloadFile = function (winMode) {
                    var _this = this;
                    this.anchor.href = this.url;
                    this.anchor.setAttribute("download", this.currentFileName);
                    this.anchor.className = "download-js-link";
                    this.anchor.innerHTML = "téléchargement en cours...";
                    this.anchor.style.display = "none";
                    document.body.appendChild(this.anchor);
                    setTimeout(function () {
                        _this.anchor.click();
                        document.body.removeChild(_this.anchor);
                        if (winMode) {
                            setTimeout(function () {
                                _this.self.URL.revokeObjectURL(_this.anchor.href);
                            }, 250);
                        }
                    }, 66);
                };
                FileSaver.prototype.isSafari = function () {
                    return (/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.Safari\//.test(navigator.userAgent)) ? true : false;
                };
                FileSaver.prototype.checkSafariVersion = function () {
                    var version = navigator.userAgent.match(/version\/(\d+).(\d+)/i);
                    return (Number(version[1] + version[2]) <= 61) ? true : false;
                };
                return FileSaver;
            }());
            Fichier.FileSaver = FileSaver;
        })(Fichier = Services.Fichier || (Services.Fichier = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Fichier;
        (function (Fichier) {
            var FichierApi = /** @class */ (function (_super) {
                __extends(FichierApi, _super);
                function FichierApi() {
                    return _super.call(this, Services.Components.ComponentType.Fichier) || this;
                }
                FichierApi.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    this._isIE = Services.CoreCommon.checkIsIE();
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer);
                };
                FichierApi.prototype.saveAs = function (data, type, nomFichier) {
                    var fileSaver = new Fichier.FileSaver();
                    fileSaver.responseData = data;
                    fileSaver.strMimeType = type;
                    fileSaver.strFileName = nomFichier;
                    fileSaver.initSaveFile();
                    return Services.Promesses.createPromiseSelfResolved();
                };
                FichierApi.prototype.save = function (data, type, nomFichier) {
                    this.saveAs(data, type, nomFichier);
                    return Services.Promesses.createPromiseSelfResolved();
                };
                return FichierApi;
            }(Services.Components.ComponentApiBase));
            Fichier.FichierApi = FichierApi;
            Services.Components.RegistryApi.getInstance().register(FichierApi);
        })(Fichier = Services.Fichier || (Services.Fichier = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des traitements NSDK depuis MyWay
* @module MyWay.Services.TraitementNsdk
* classe : TraitementNsdkManager - public - Classe permettant la gestion des traitements NSDK depuis MyWay
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraitementNsdk;
        (function (TraitementNsdk) {
            /**
            * Classe permettant la gestion des traitements NSDK depuis MyWay
            */
            var TraitementNsdkApi = /** @class */ (function (_super) {
                __extends(TraitementNsdkApi, _super);
                function TraitementNsdkApi() {
                    return _super.call(this, Services.Components.ComponentType.TraitementNsdk) || this;
                }
                TraitementNsdkApi.prototype.lancer = function (traitement, data) {
                    return this.libraryManager.Core.sendRequest({
                        url: Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + '/contexte/LancerTraitementNSDK?data=' + data + "&traitement=" + traitement,
                        cache: false,
                        async: false,
                        method: Services.MethodEnum.GET
                    });
                };
                return TraitementNsdkApi;
            }(Services.Components.ComponentApiBase));
            TraitementNsdk.TraitementNsdkApi = TraitementNsdkApi;
            Services.Components.RegistryApi.getInstance().register(TraitementNsdkApi);
        })(TraitementNsdk = Services.TraitementNsdk || (Services.TraitementNsdk = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["BriqueCommunication"] = "BriqueCommunication";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var BriqueCommunicationMessageSubject;
            (function (BriqueCommunicationMessageSubject) {
            })(BriqueCommunicationMessageSubject = BriqueCommunication.BriqueCommunicationMessageSubject || (BriqueCommunication.BriqueCommunicationMessageSubject = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var Messages;
            (function (Messages) {
                var EVENT_TYPE;
                (function (EVENT_TYPE) {
                    EVENT_TYPE[EVENT_TYPE["CHAT"] = 1] = "CHAT";
                    EVENT_TYPE[EVENT_TYPE["NOTIFICATION"] = 2] = "NOTIFICATION";
                })(EVENT_TYPE = Messages.EVENT_TYPE || (Messages.EVENT_TYPE = {}));
            })(Messages = BriqueCommunication.Messages || (BriqueCommunication.Messages = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Chat"] = "Chat";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var Chat;
            (function (Chat) {
                var ChatMessageSubject;
                (function (ChatMessageSubject) {
                    ChatMessageSubject[ChatMessageSubject["OpenChatroom"] = 0] = "OpenChatroom";
                    ChatMessageSubject[ChatMessageSubject["OpenChat"] = 1] = "OpenChat";
                    ChatMessageSubject[ChatMessageSubject["SendMessage"] = 2] = "SendMessage";
                    ChatMessageSubject[ChatMessageSubject["CloseChat"] = 3] = "CloseChat";
                    ChatMessageSubject[ChatMessageSubject["GetUtilisateurs"] = 4] = "GetUtilisateurs";
                    ChatMessageSubject[ChatMessageSubject["EnvoyerMessageVideoroom"] = 5] = "EnvoyerMessageVideoroom";
                    ChatMessageSubject[ChatMessageSubject["ReceptionMessageVideoroom"] = 6] = "ReceptionMessageVideoroom";
                    ChatMessageSubject[ChatMessageSubject["GetChatrooms"] = 7] = "GetChatrooms";
                    ChatMessageSubject[ChatMessageSubject["GetChatroom"] = 8] = "GetChatroom";
                    ChatMessageSubject[ChatMessageSubject["PrendreLaMainVideoroom"] = 9] = "PrendreLaMainVideoroom";
                    ChatMessageSubject[ChatMessageSubject["DemarrerVideoChatroom"] = 10] = "DemarrerVideoChatroom";
                    ChatMessageSubject[ChatMessageSubject["ArreterVideoChatroom"] = 11] = "ArreterVideoChatroom";
                    ChatMessageSubject[ChatMessageSubject["AccepterDemanderExpert"] = 12] = "AccepterDemanderExpert";
                    ChatMessageSubject[ChatMessageSubject["InviterPersonnesAUneChatroom"] = 13] = "InviterPersonnesAUneChatroom";
                    ChatMessageSubject[ChatMessageSubject["SetStatut"] = 14] = "SetStatut";
                    ChatMessageSubject[ChatMessageSubject["AddChatCapacity"] = 15] = "AddChatCapacity";
                    ChatMessageSubject[ChatMessageSubject["WebRTC"] = 16] = "WebRTC";
                })(ChatMessageSubject = Chat.ChatMessageSubject || (Chat.ChatMessageSubject = {}));
                //Enregistrement du composant et de ses dépendances
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.BriqueCommunication, [
                    Services.Components.ComponentType.Context
                ]);
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Chat, [
                    Services.Components.ComponentType.BriqueCommunication,
                    Services.Components.ComponentType.Context,
                    Services.Components.ComponentType.Core,
                    Services.Components.ComponentType.Display,
                    Services.Components.ComponentType.Evennements,
                    Services.Components.ComponentType.Persistence
                ]);
            })(Chat = BriqueCommunication.Chat || (BriqueCommunication.Chat = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var Chat;
            (function (Chat) {
                var Messages;
                (function (Messages) {
                    var TYPE;
                    (function (TYPE) {
                        TYPE[TYPE["OPEN_CHATROOM"] = 1] = "OPEN_CHATROOM";
                        TYPE[TYPE["OPEN_CHAT"] = 2] = "OPEN_CHAT";
                        TYPE[TYPE["SEND_MESSAGE"] = 3] = "SEND_MESSAGE";
                        TYPE[TYPE["CLOSE_CHAT"] = 4] = "CLOSE_CHAT";
                        TYPE[TYPE["GET_UTILISATEURS"] = 5] = "GET_UTILISATEURS";
                        TYPE[TYPE["ENVOYER_MESSAGE_VIDEOROOM"] = 6] = "ENVOYER_MESSAGE_VIDEOROOM";
                        TYPE[TYPE["RECEPTION_MESSAGE_VIDEOROOM"] = 7] = "RECEPTION_MESSAGE_VIDEOROOM";
                        TYPE[TYPE["GET_CHATROOMS"] = 8] = "GET_CHATROOMS";
                        TYPE[TYPE["GET_CHATROOM"] = 16] = "GET_CHATROOM";
                        TYPE[TYPE["PRENDRE_LA_MAIN_VIDEOROOM"] = 9] = "PRENDRE_LA_MAIN_VIDEOROOM";
                        TYPE[TYPE["DEMARRER_VIDEO_CHATROOM"] = 10] = "DEMARRER_VIDEO_CHATROOM";
                        TYPE[TYPE["ARRETER_VIDEO_CHATROOM"] = 11] = "ARRETER_VIDEO_CHATROOM";
                        TYPE[TYPE["ACCEPTER_DEMANDE_EXPERT"] = 12] = "ACCEPTER_DEMANDE_EXPERT";
                        TYPE[TYPE["INVITER_PERSONNES_A_UNE_CHATROOM"] = 13] = "INVITER_PERSONNES_A_UNE_CHATROOM";
                        TYPE[TYPE["SET_STATUT"] = 14] = "SET_STATUT";
                        TYPE[TYPE["ADD_CHAT_CAPACITY"] = 15] = "ADD_CHAT_CAPACITY";
                    })(TYPE = Messages.TYPE || (Messages.TYPE = {}));
                    var EVENT_TYPE;
                    (function (EVENT_TYPE) {
                        EVENT_TYPE[EVENT_TYPE["MESSAGE_RECU"] = 1] = "MESSAGE_RECU";
                        EVENT_TYPE[EVENT_TYPE["CHAT_FERME"] = 2] = "CHAT_FERME";
                        EVENT_TYPE[EVENT_TYPE["CHAT_OUVERT"] = 3] = "CHAT_OUVERT";
                        EVENT_TYPE[EVENT_TYPE["MISE_A_JOUR_LISTE_UTILISATEURS"] = 4] = "MISE_A_JOUR_LISTE_UTILISATEURS";
                        EVENT_TYPE[EVENT_TYPE["UTILISATEUR_CONNECTE_A_CHAT"] = 5] = "UTILISATEUR_CONNECTE_A_CHAT";
                        EVENT_TYPE[EVENT_TYPE["UTILISATEUR_DECONNECTE_A_CHAT"] = 6] = "UTILISATEUR_DECONNECTE_A_CHAT";
                        EVENT_TYPE[EVENT_TYPE["CHANGEMENT_MAIN_CHATROOM"] = 7] = "CHANGEMENT_MAIN_CHATROOM";
                        EVENT_TYPE[EVENT_TYPE["DEMANDE_EXPERT"] = 8] = "DEMANDE_EXPERT";
                        EVENT_TYPE[EVENT_TYPE["FIN_DEMANDE_EXPERT"] = 9] = "FIN_DEMANDE_EXPERT";
                        EVENT_TYPE[EVENT_TYPE["CHAT_DIV_ELEMENT"] = 10] = "CHAT_DIV_ELEMENT";
                        EVENT_TYPE[EVENT_TYPE["FIN_VIDEOROOM"] = 11] = "FIN_VIDEOROOM";
                    })(EVENT_TYPE = Messages.EVENT_TYPE || (Messages.EVENT_TYPE = {}));
                    var UTILISATEUR_TYPE;
                    (function (UTILISATEUR_TYPE) {
                        UTILISATEUR_TYPE[UTILISATEUR_TYPE["CONSEILLER"] = 0] = "CONSEILLER";
                        UTILISATEUR_TYPE[UTILISATEUR_TYPE["EXPERT"] = 1] = "EXPERT";
                        UTILISATEUR_TYPE[UTILISATEUR_TYPE["CLIENT"] = 2] = "CLIENT";
                        UTILISATEUR_TYPE[UTILISATEUR_TYPE["PROSPECT"] = 3] = "PROSPECT";
                    })(UTILISATEUR_TYPE = Messages.UTILISATEUR_TYPE || (Messages.UTILISATEUR_TYPE = {}));
                    var UTILISATEUR_STATUT;
                    (function (UTILISATEUR_STATUT) {
                        UTILISATEUR_STATUT[UTILISATEUR_STATUT["CONNECTE"] = 1] = "CONNECTE";
                        UTILISATEUR_STATUT[UTILISATEUR_STATUT["DECONNECTE"] = 2] = "DECONNECTE";
                    })(UTILISATEUR_STATUT = Messages.UTILISATEUR_STATUT || (Messages.UTILISATEUR_STATUT = {}));
                })(Messages = Chat.Messages || (Chat.Messages = {}));
            })(Chat = BriqueCommunication.Chat || (BriqueCommunication.Chat = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var Notification;
            (function (Notification) {
                var Messages;
                (function (Messages) {
                    var TYPE;
                    (function (TYPE) {
                        TYPE[TYPE["ABONNEMENT"] = 1] = "ABONNEMENT";
                        TYPE[TYPE["DESABONNEMENT"] = 2] = "DESABONNEMENT";
                        TYPE[TYPE["GET_LISTE_SUJETS"] = 3] = "GET_LISTE_SUJETS";
                    })(TYPE = Messages.TYPE || (Messages.TYPE = {}));
                    var INotificationMessageAbonnementRequest = /** @class */ (function () {
                        function INotificationMessageAbonnementRequest() {
                        }
                        return INotificationMessageAbonnementRequest;
                    }());
                    Messages.INotificationMessageAbonnementRequest = INotificationMessageAbonnementRequest;
                    var INotificationMessageDesabonnementRequest = /** @class */ (function () {
                        function INotificationMessageDesabonnementRequest() {
                        }
                        return INotificationMessageDesabonnementRequest;
                    }());
                    Messages.INotificationMessageDesabonnementRequest = INotificationMessageDesabonnementRequest;
                    var INotificationMessageListeSujetsResponse = /** @class */ (function () {
                        function INotificationMessageListeSujetsResponse() {
                        }
                        return INotificationMessageListeSujetsResponse;
                    }());
                    Messages.INotificationMessageListeSujetsResponse = INotificationMessageListeSujetsResponse;
                    var EVENT_TYPE;
                    (function (EVENT_TYPE) {
                        EVENT_TYPE[EVENT_TYPE["NOUVEL_ABONNEMENT"] = 1] = "NOUVEL_ABONNEMENT";
                        EVENT_TYPE[EVENT_TYPE["DESABONNEMENT"] = 2] = "DESABONNEMENT";
                        EVENT_TYPE[EVENT_TYPE["NOTIFICATION_MESSAGE"] = 3] = "NOTIFICATION_MESSAGE";
                    })(EVENT_TYPE = Messages.EVENT_TYPE || (Messages.EVENT_TYPE = {}));
                })(Messages = Notification.Messages || (Notification.Messages = {}));
            })(Notification = BriqueCommunication.Notification || (BriqueCommunication.Notification = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Notification"] = "Notification";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var Notification;
            (function (Notification) {
                var NotificationMessageSubject;
                (function (NotificationMessageSubject) {
                    NotificationMessageSubject[NotificationMessageSubject["Abonnement"] = 0] = "Abonnement";
                    NotificationMessageSubject[NotificationMessageSubject["Desabonnement"] = 1] = "Desabonnement";
                    NotificationMessageSubject[NotificationMessageSubject["GetListeSubjects"] = 2] = "GetListeSubjects";
                })(NotificationMessageSubject = Notification.NotificationMessageSubject || (Notification.NotificationMessageSubject = {}));
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Notification, [
                    Services.Components.ComponentType.BriqueCommunication,
                    Services.Components.ComponentType.Context,
                    Services.Components.ComponentType.Core,
                    Services.Components.ComponentType.Evennements,
                    Services.Components.ComponentType.Persistence
                ]);
            })(Notification = BriqueCommunication.Notification || (BriqueCommunication.Notification = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Acquisition"] = "Acquisition";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            var Messages;
            (function (Messages) {
                Messages.START_STATE = "start";
                Messages.END_STATE = "finish";
                Messages.ERROR = "error";
                var AcquisitionMessageSubject;
                (function (AcquisitionMessageSubject) {
                    AcquisitionMessageSubject[AcquisitionMessageSubject["AppelRADLAD"] = 0] = "AppelRADLAD";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["ChangeState"] = 1] = "ChangeState";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["ConvertBase64ToBin"] = 2] = "ConvertBase64ToBin";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["ConvertFileToImg"] = 3] = "ConvertFileToImg";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["FermetureSpiFactory"] = 4] = "FermetureSpiFactory";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["GetDocumentGEDAtAndOpen"] = 5] = "GetDocumentGEDAtAndOpen";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["GetDocumentGEDAndOpen"] = 6] = "GetDocumentGEDAndOpen";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["GetDocumentGEDAndSave"] = 7] = "GetDocumentGEDAndSave";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["GetProcessingTask"] = 8] = "GetProcessingTask";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["MergeAndOpenPDF"] = 9] = "MergeAndOpenPDF";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["MergerEtArchiver"] = 10] = "MergerEtArchiver";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["MergerEtUploader"] = 11] = "MergerEtUploader";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["OuvrirListeDocumentGED"] = 12] = "OuvrirListeDocumentGED";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["Purge"] = 13] = "Purge";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["RecupereListeDocumentGED"] = 14] = "RecupereListeDocumentGED";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["SetConfigurationScanner"] = 15] = "SetConfigurationScanner";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["GetListeScanner"] = 16] = "GetListeScanner";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["IsPrisEnMainADistance"] = 17] = "IsPrisEnMainADistance";
                    AcquisitionMessageSubject[AcquisitionMessageSubject["UploadDocumentFrom"] = 18] = "UploadDocumentFrom";
                })(AcquisitionMessageSubject = Messages.AcquisitionMessageSubject || (Messages.AcquisitionMessageSubject = {}));
                //Enregistrement du composant et de ses dépendances
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Acquisition, [Services.Components.ComponentType.Context]);
            })(Messages = Acquisition.Messages || (Acquisition.Messages = {}));
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            /**
             * Enumération correspondant aux différent types de document envoyés à la RADLAD
             *
             * @enum Acquisition.ACQUISITION_TYPE
             */
            var ACQUISITION_TYPE;
            (function (ACQUISITION_TYPE) {
                ACQUISITION_TYPE[ACQUISITION_TYPE["BINARY"] = 0] = "BINARY";
                ACQUISITION_TYPE[ACQUISITION_TYPE["BASE64"] = 1] = "BASE64";
            })(ACQUISITION_TYPE = Acquisition.ACQUISITION_TYPE || (Acquisition.ACQUISITION_TYPE = {}));
            ;
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            /**
             * Enumération correspondant aux différentes methodes de binarization supportées
             *
             * @enum Acquisition.BINARIZE_METHOD
             */
            var BINARIZE_METHOD;
            (function (BINARIZE_METHOD) {
                BINARIZE_METHOD[BINARIZE_METHOD["SIMPLE_THRESHOLD"] = 0] = "SIMPLE_THRESHOLD";
                BINARIZE_METHOD[BINARIZE_METHOD["GLOBAL_THRESHOLD"] = 1] = "GLOBAL_THRESHOLD";
                BINARIZE_METHOD[BINARIZE_METHOD["ADAPTIVE_THRESHOLD"] = 2] = "ADAPTIVE_THRESHOLD";
                BINARIZE_METHOD[BINARIZE_METHOD["DYNAMIC_THRESHOLD"] = 3] = "DYNAMIC_THRESHOLD";
            })(BINARIZE_METHOD = Acquisition.BINARIZE_METHOD || (Acquisition.BINARIZE_METHOD = {}));
            ;
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            /**
             * Enumération correspondant aux différents types de fichiers
             *
             * @enum Acquisition.FILE_FORMAT
             */
            var FILE_FORMAT;
            (function (FILE_FORMAT) {
                FILE_FORMAT[FILE_FORMAT["BMP"] = 0] = "BMP";
                FILE_FORMAT[FILE_FORMAT["PNG"] = 1] = "PNG";
                FILE_FORMAT[FILE_FORMAT["GIF"] = 2] = "GIF";
                FILE_FORMAT[FILE_FORMAT["JPG_JPEG"] = 3] = "JPG_JPEG";
                FILE_FORMAT[FILE_FORMAT["PDF"] = 4] = "PDF";
                FILE_FORMAT[FILE_FORMAT["TIF_TIFF"] = 5] = "TIF_TIFF";
            })(FILE_FORMAT = Acquisition.FILE_FORMAT || (Acquisition.FILE_FORMAT = {}));
            ;
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            /**
             * Enumération correspondant aux différentes valeurs de rotation de document possible
             *
             * @enum Acquisition.ROTATION_VALUES
             */
            var ROTATION_VALUES;
            (function (ROTATION_VALUES) {
                ROTATION_VALUES[ROTATION_VALUES["ANGLE_90"] = 90] = "ANGLE_90";
                ROTATION_VALUES[ROTATION_VALUES["ANGLE_180"] = 180] = "ANGLE_180";
                ROTATION_VALUES[ROTATION_VALUES["ANGLE_270"] = 270] = "ANGLE_270";
            })(ROTATION_VALUES = Acquisition.ROTATION_VALUES || (Acquisition.ROTATION_VALUES = {}));
            ;
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            /**
             * Interface permettant de définir les paramètres de conversion d'un fichier
             *
             * @param dpi la résolution
             * @param quality la qualité de l'image normal
             * @param thumbQuality la qualité de l'image miniature
             *
             * @interface Acquisition.IConvertFileParams
             */
            var IConvertFileParams = /** @class */ (function () {
                function IConvertFileParams() {
                }
                return IConvertFileParams;
            }());
            Acquisition.IConvertFileParams = IConvertFileParams;
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            /**
             * Interface permettant de définir les paramètres de création bitonale
             *
             * @param dpibase64List la liste des images en base 64
             * @param save sauvegarde ou non de l'image
             * @param binarizeMethod méthode de binarization
             *
             * @interface Acquisition.IConvertPdfParams
             */
            var ICreerImageBitonalParams = /** @class */ (function () {
                function ICreerImageBitonalParams() {
                }
                return ICreerImageBitonalParams;
            }());
            Acquisition.ICreerImageBitonalParams = ICreerImageBitonalParams;
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            /**
             * Interface permettant de définir les paramètres du merge et de l'ouverture des PDF
             *
             * @interface Acquisition.IOpenPdfParams
             */
            var IPdfParams = /** @class */ (function () {
                function IPdfParams() {
                }
                return IPdfParams;
            }());
            Acquisition.IPdfParams = IPdfParams;
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            /**
             * Interface permettant de définir les paramètres du merge et de l'ouverture des PDF
             *
             * @interface Acquisition.IGuidOpenPdfParams
             */
            var IGuidParams = /** @class */ (function (_super) {
                __extends(IGuidParams, _super);
                function IGuidParams() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return IGuidParams;
            }(Acquisition.IPdfParams));
            Acquisition.IGuidParams = IGuidParams;
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            /**
             * Interface permettant de définir les paramètres de l'appel RADLAD
             *
             * @interface Acquisition.IRadladParams
             */
            var IRadladParams = /** @class */ (function () {
                function IRadladParams() {
                }
                return IRadladParams;
            }());
            Acquisition.IRadladParams = IRadladParams;
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            /**
             * Interface permettant de déclarer une tâche de traitement
             *
             * @interface Acquisition.IProcessingTasks
             */
            var IProcessingTasks = /** @class */ (function () {
                function IProcessingTasks() {
                }
                return IProcessingTasks;
            }());
            Acquisition.IProcessingTasks = IProcessingTasks;
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Communication"] = "Communication";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Communication;
        (function (Communication) {
            var CommunicationMessageSubject;
            (function (CommunicationMessageSubject) {
                CommunicationMessageSubject[CommunicationMessageSubject["EnvoyerMail"] = 0] = "EnvoyerMail";
                CommunicationMessageSubject[CommunicationMessageSubject["DeclencherAppel"] = 1] = "DeclencherAppel";
                CommunicationMessageSubject[CommunicationMessageSubject["RaccrocherAppel"] = 2] = "RaccrocherAppel";
                CommunicationMessageSubject[CommunicationMessageSubject["EnvoyerMessageAppliKiosque"] = 3] = "EnvoyerMessageAppliKiosque";
            })(CommunicationMessageSubject = Communication.CommunicationMessageSubject || (Communication.CommunicationMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Communication, [
                Services.Components.ComponentType.Context,
                Services.Components.ComponentType.Core
            ]);
        })(Communication = Services.Communication || (Services.Communication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des moyens de communication
* @module MyWay.Services.Communication
* @methode controleEnvoyerMail – public - Permet de contrôler l'envoi d'un mail
* @methode controleDeclencherAppel – public - Permet de contrôler le déclenchement d'un appel
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Communication;
        (function (Communication) {
            /**
            * Permet de contrôler l'envoi d'un mail
            *
            * @param {Mail} mail Le mail à envoyer
            */
            function controleEnvoyerMail(mail) {
                var formatMail = "^[a-zA-Z]+[a-zA-Z0-9._-]*@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,3}(;[a-zA-Z]+[a-zA-Z0-9._-]*@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,3})*$";
                var messageErreurFormat = "Le format de l'adresse mail du paramètre '{0}' ({1}) est incorrect";
                // Contrôle sur le paramètre obligatoire to et vérifier que c'est une chaîne de caractère
                if (!Services.Controle.StaticStringControle.isString(mail.to)) {
                    return "Le paramètre 'to' doit être une chaine de caractères";
                }
                // Contrôle sur le format du paramètre to
                if (!mail.to.match(formatMail)) {
                    return messageErreurFormat.replace("{0}", "to").replace("{1}", mail.to);
                }
                // Contrôle sur le format du paramètre cc
                if (Services.Controle.StaticStringControle.isString(mail.cc) && !mail.cc.match(formatMail)) {
                    return messageErreurFormat.replace("{0}", "cc").replace("{1}", mail.cc);
                }
                // Contrôle sur le format du paramètre bcc
                if (Services.Controle.StaticStringControle.isString(mail.bcc) && !mail.bcc.match(formatMail)) {
                    return messageErreurFormat.replace("{0}", "bcc").replace("{1}", mail.bcc);
                }
                return "";
            }
            Communication.controleEnvoyerMail = controleEnvoyerMail;
            /**
            * Permet de contrôler le déclenchement d'un appel
            *
            * @param {Call} call    Les données d'appel
            */
            function controleDeclencherAppel(call) {
                var formatNumero = /^(0|\+33)[1-9]([-. ]?[0-9]{2}){4}$/;
                var messageErreurFormat = "Le format du numéro du destinataire ({0}) est incorrect";
                if (!formatNumero.test(call.numeroDestinataire)) {
                    return messageErreurFormat.replace("{0}", call.numeroDestinataire);
                }
                return "";
            }
            Communication.controleDeclencherAppel = controleDeclencherAppel;
        })(Communication = Services.Communication || (Services.Communication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des moyens de communication (module commun aux agents et aux managers)
* @module MyWay.Services.Communication
* @interface Mail - public - Interface permettant de décrire un objet Mail
* @interface ComExterne - public - Interface permettant de décrire un objet MessageComExterne pour communiquer avec une application extérieure
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Communication;
        (function (Communication) {
            /**
            * Modèle d'un mail
            */
            var Mail = /** @class */ (function () {
                function Mail(_to, _subject, _body, _cc, _bcc) {
                    this.to = _to;
                    this.subject = _subject;
                    this.body = _body;
                    this.cc = _cc;
                    this.bcc = _bcc;
                }
                return Mail;
            }());
            Communication.Mail = Mail;
            ;
            /**
            * Modèle d'un appel
            */
            var Call = /** @class */ (function () {
                function Call(_numeroDestinataire) {
                    this.numeroDestinataire = _numeroDestinataire;
                }
                return Call;
            }());
            Communication.Call = Call;
            ;
            /** Message destiné à l'agent */
            var MessageAgent = /** @class */ (function () {
                function MessageAgent(idAgent, sujet, contenu) {
                    this.IdAgent = idAgent;
                    this.Payload = new Services.Payload(sujet, contenu);
                }
                return MessageAgent;
            }());
            Communication.MessageAgent = MessageAgent;
        })(Communication = Services.Communication || (Services.Communication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["ConfigurationPoste"] = "ConfigurationPoste";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var ConfigurationPoste;
        (function (ConfigurationPoste) {
            var ConfigurationPosteMessageSubject;
            (function (ConfigurationPosteMessageSubject) {
                ConfigurationPosteMessageSubject[ConfigurationPosteMessageSubject["GetConfiguration"] = 0] = "GetConfiguration";
            })(ConfigurationPosteMessageSubject = ConfigurationPoste.ConfigurationPosteMessageSubject || (ConfigurationPoste.ConfigurationPosteMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.ConfigurationPoste, [
                Services.Components.ComponentType.Context,
                Services.Components.ComponentType.Core
            ]);
        })(ConfigurationPoste = Services.ConfigurationPoste || (Services.ConfigurationPoste = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["ContexteClient"] = "ContexteClient";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var ContexteClient;
        (function (ContexteClient) {
            var ContextClientMessageSubject;
            (function (ContextClientMessageSubject) {
                ContextClientMessageSubject[ContextClientMessageSubject["GetContextesParClients"] = 0] = "GetContextesParClients";
                ContextClientMessageSubject[ContextClientMessageSubject["GetId"] = 1] = "GetId";
                ContextClientMessageSubject[ContextClientMessageSubject["GetClient"] = 2] = "GetClient";
                ContextClientMessageSubject[ContextClientMessageSubject["SetClient"] = 3] = "SetClient";
                ContextClientMessageSubject[ContextClientMessageSubject["GetProperty"] = 4] = "GetProperty";
                ContextClientMessageSubject[ContextClientMessageSubject["AddToList"] = 5] = "AddToList";
                ContextClientMessageSubject[ContextClientMessageSubject["SetProperty"] = 6] = "SetProperty";
                ContextClientMessageSubject[ContextClientMessageSubject["RemoveFromList"] = 7] = "RemoveFromList";
                ContextClientMessageSubject[ContextClientMessageSubject["DeleteProperty"] = 8] = "DeleteProperty";
                ContextClientMessageSubject[ContextClientMessageSubject["GetContenu"] = 9] = "GetContenu";
                ContextClientMessageSubject[ContextClientMessageSubject["SetContenu"] = 10] = "SetContenu";
                ContextClientMessageSubject[ContextClientMessageSubject["GetContextes"] = 11] = "GetContextes";
                ContextClientMessageSubject[ContextClientMessageSubject["DestroyContext"] = 12] = "DestroyContext";
                ContextClientMessageSubject[ContextClientMessageSubject["NewContext"] = 13] = "NewContext";
                ContextClientMessageSubject[ContextClientMessageSubject["ChangeContextProcess"] = 14] = "ChangeContextProcess";
                ContextClientMessageSubject[ContextClientMessageSubject["ChangeContextMode"] = 15] = "ChangeContextMode";
                ContextClientMessageSubject[ContextClientMessageSubject["DetailsContext"] = 16] = "DetailsContext";
                ContextClientMessageSubject[ContextClientMessageSubject["SetReloadSynthese"] = 17] = "SetReloadSynthese";
            })(ContextClientMessageSubject = ContexteClient.ContextClientMessageSubject || (ContexteClient.ContextClientMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.ContexteClient, [
                Services.Components.ComponentType.Context,
                Services.Components.ComponentType.Core,
                Services.Components.ComponentType.Display,
                Services.Components.ComponentType.Persistence
            ]);
        })(ContexteClient = Services.ContexteClient || (Services.ContexteClient = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ContexteClient;
        (function (ContexteClient) {
            var Messages;
            (function (Messages) {
                var ContexteClientMode;
                (function (ContexteClientMode) {
                    ContexteClientMode[ContexteClientMode["AUTOMATIQUE"] = "AUTOMATIQUE"] = "AUTOMATIQUE";
                    ContexteClientMode[ContexteClientMode["MANUEL"] = "MANUEL"] = "MANUEL";
                })(ContexteClientMode = Messages.ContexteClientMode || (Messages.ContexteClientMode = {}));
                var MiseAJourContexteClientType;
                (function (MiseAJourContexteClientType) {
                    MiseAJourContexteClientType[MiseAJourContexteClientType["addToList"] = "addToList"] = "addToList";
                    MiseAJourContexteClientType[MiseAJourContexteClientType["removeFromList"] = "removeFromList"] = "removeFromList";
                    MiseAJourContexteClientType[MiseAJourContexteClientType["deleteProperty"] = "deleteProperty"] = "deleteProperty";
                    MiseAJourContexteClientType[MiseAJourContexteClientType["setProperty"] = "setProperty"] = "setProperty";
                    MiseAJourContexteClientType[MiseAJourContexteClientType["setClient"] = "setClient"] = "setClient";
                    MiseAJourContexteClientType[MiseAJourContexteClientType["nouveauContexte"] = "nouveauContexte"] = "nouveauContexte";
                    MiseAJourContexteClientType[MiseAJourContexteClientType["detructionContexte"] = "detructionContexte"] = "detructionContexte";
                    MiseAJourContexteClientType[MiseAJourContexteClientType["changementContexte"] = "changementContexte"] = "changementContexte";
                })(MiseAJourContexteClientType = Messages.MiseAJourContexteClientType || (Messages.MiseAJourContexteClientType = {}));
            })(Messages = ContexteClient.Messages || (ContexteClient.Messages = {}));
        })(ContexteClient = Services.ContexteClient || (Services.ContexteClient = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Interop;
        (function (Interop) {
            var InfoFichier = /** @class */ (function () {
                //Constructor
                function InfoFichier() {
                }
                return InfoFichier;
            }());
            Interop.InfoFichier = InfoFichier;
            var ExecutableWrapper = /** @class */ (function () {
                //Constructor
                function ExecutableWrapper(execapp, exectransaction, execserv, execweb) {
                    this.ExecApp = execapp;
                    this.ExecServ = execserv;
                    this.ExecTransaction = exectransaction;
                    this.ExecWeb = execweb;
                }
                return ExecutableWrapper;
            }());
            Interop.ExecutableWrapper = ExecutableWrapper;
            var ExecApp = /** @class */ (function () {
                //Constructor
                function ExecApp(executable) {
                    this.Executable = executable;
                }
                return ExecApp;
            }());
            Interop.ExecApp = ExecApp;
            var ExecTransaction = /** @class */ (function () {
                //Constructor
                function ExecTransaction(numero) {
                    this.Numero = numero;
                }
                return ExecTransaction;
            }());
            Interop.ExecTransaction = ExecTransaction;
            var ExecServ = /** @class */ (function () {
                //Constructor
                function ExecServ(codesortie) {
                    this.CodeSortie = codesortie;
                }
                return ExecServ;
            }());
            Interop.ExecServ = ExecServ;
            var ExecWeb = /** @class */ (function () {
                //Constructor
                function ExecWeb(url, libelle) {
                    this.Url = url;
                    this.Libelle = libelle;
                }
                return ExecWeb;
            }());
            Interop.ExecWeb = ExecWeb;
            var ContexteMyway = /** @class */ (function () {
                //Constructor
                function ContexteMyway(processId, stepId) {
                    this.ProcessId = processId;
                    this.StepId = stepId;
                }
                return ContexteMyway;
            }());
            Interop.ContexteMyway = ContexteMyway;
            var ContexteClient = /** @class */ (function () {
                //Constructor
                function ContexteClient(numeroClient, plan) {
                    this.NumeroClient = numeroClient;
                    this.Plan = plan;
                }
                return ContexteClient;
            }());
            Interop.ContexteClient = ContexteClient;
            var JsonStringArray = /** @class */ (function () {
                function JsonStringArray(tableau) {
                    this.Valeur = tableau;
                }
                return JsonStringArray;
            }());
            Interop.JsonStringArray = JsonStringArray;
            var infoDataStructNSDK = /** @class */ (function () {
                function infoDataStructNSDK() {
                }
                return infoDataStructNSDK;
            }());
            Interop.infoDataStructNSDK = infoDataStructNSDK;
            var SegmentNsdkClass = /** @class */ (function () {
                function SegmentNsdkClass(data) {
                }
                Object.defineProperty(SegmentNsdkClass.prototype, "StructData", {
                    get: function () {
                        return this._StructData;
                    },
                    set: function (value) {
                        this._StructData = value;
                        SegmentNsdkClass.Size = this.CalcSize();
                    },
                    enumerable: true,
                    configurable: true
                });
                SegmentNsdkClass.prototype.DeSerializeData = function (fluxData) {
                    var pos = 0;
                    var longSegment = 0;
                    var objectData = "{";
                    var infoDataLu = this.StructData;
                    for (var i = 0; i < this.StructData.length; i++) {
                        if (infoDataLu[i].DataName != "cwlgqr") {
                            this[infoDataLu[i].DataName] = fluxData.substring(pos, pos + infoDataLu[i].DataLength);
                        }
                        pos += infoDataLu[i].DataLength;
                    }
                    this["cwlgqr"] = pos;
                };
                SegmentNsdkClass.prototype.SerializeData = function () {
                    var infoDataLu = this.StructData;
                    var fluxData = "";
                    for (var i = 0; i < this.StructData.length; i++) {
                        if (infoDataLu[i].DataName != "cwlgqr")
                            fluxData += this[infoDataLu[i].DataName];
                    }
                    return fluxData;
                };
                SegmentNsdkClass.prototype.CalcSize = function () {
                    var infoDataLu = this.StructData;
                    var longueurSegment = 0;
                    for (var i = 0; i < this.StructData.length; i++) {
                        longueurSegment += infoDataLu[i].DataLength;
                    }
                    return longueurSegment;
                };
                return SegmentNsdkClass;
            }());
            Interop.SegmentNsdkClass = SegmentNsdkClass;
            var s_5s6f5a = /** @class */ (function (_super) {
                __extends(s_5s6f5a, _super);
                function s_5s6f5a() {
                    var _this = _super.call(this) || this;
                    _this.StructData = [{ "DataName": "cwlgqr", "DataLength": 4 }, { "DataName": "cwlnqr", "DataLength": 8 }, { "DataName": "cidfiej", "DataLength": 5 }, { "DataName": "cnuf9cg", "DataLength": 10 }, { "DataName": "cdtfkc0", "DataLength": 8 }, { "DataName": "ccdtn", "DataLength": 2 }, { "DataName": "cnocee1", "DataLength": 7 }, { "DataName": "ccocee3", "DataLength": 7 }, { "DataName": "cddf9tr", "DataLength": 8 }, { "DataName": "cdff9tr", "DataLength": 8 }, { "DataName": "cidct", "DataLength": 7 }, { "DataName": "cidtiem", "DataLength": 9 }, { "DataName": "cidit", "DataLength": 9 }, { "DataName": "cmtf9op", "DataLength": 15 }, { "DataName": "cmtf9o1", "DataLength": 15 }, { "DataName": "ccdfadv", "DataLength": 3 }, { "DataName": "cnsf9rq", "DataLength": 4 }, { "DataName": "cdtfkcc", "DataLength": 8 }];
                    return _this;
                }
                return s_5s6f5a;
            }(MyWay.Services.Interop.SegmentNsdkClass));
            Interop.s_5s6f5a = s_5s6f5a;
        })(Interop = Services.Interop || (Services.Interop = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Interop"] = "Interop";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Interop;
        (function (Interop) {
            var Messages;
            (function (Messages) {
                var InteropMessageSubject;
                (function (InteropMessageSubject) {
                    InteropMessageSubject[InteropMessageSubject["AfficherWindowParHandle"] = 0] = "AfficherWindowParHandle";
                    InteropMessageSubject[InteropMessageSubject["AfficherWindowParPid"] = 1] = "AfficherWindowParPid";
                    InteropMessageSubject[InteropMessageSubject["AfficherSynthese"] = 2] = "AfficherSynthese";
                    InteropMessageSubject[InteropMessageSubject["ActiverApplicationAppelante"] = 3] = "ActiverApplicationAppelante";
                    InteropMessageSubject[InteropMessageSubject["AddToContextInterop"] = 4] = "AddToContextInterop";
                    InteropMessageSubject[InteropMessageSubject["AddListToContextInterop"] = 5] = "AddListToContextInterop";
                    InteropMessageSubject[InteropMessageSubject["GetFromContextInterop"] = 6] = "GetFromContextInterop";
                    InteropMessageSubject[InteropMessageSubject["GetListFromContextInterop"] = 7] = "GetListFromContextInterop";
                    InteropMessageSubject[InteropMessageSubject["Lancer"] = 8] = "Lancer";
                    InteropMessageSubject[InteropMessageSubject["EndStep"] = 9] = "EndStep";
                    InteropMessageSubject[InteropMessageSubject["TriggerNotifications"] = 10] = "TriggerNotifications";
                    InteropMessageSubject[InteropMessageSubject["LireFichier"] = 11] = "LireFichier";
                    InteropMessageSubject[InteropMessageSubject["EcrireFichier"] = 12] = "EcrireFichier";
                    InteropMessageSubject[InteropMessageSubject["ClearBus"] = 13] = "ClearBus";
                })(InteropMessageSubject = Messages.InteropMessageSubject || (Messages.InteropMessageSubject = {}));
                //Enregistrement du composant et de ses dépendances
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Interop, [
                    Services.Components.ComponentType.Context,
                    Services.Components.ComponentType.Persistence
                ]);
            })(Messages = Interop.Messages || (Interop.Messages = {}));
        })(Interop = Services.Interop || (Services.Interop = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Libelle;
        (function (Libelle) {
            var TYPE_AFFICHAGE;
            (function (TYPE_AFFICHAGE) {
                TYPE_AFFICHAGE[TYPE_AFFICHAGE["ERREUR"] = 10] = "ERREUR";
                TYPE_AFFICHAGE[TYPE_AFFICHAGE["AVERTISSEMENT"] = 30] = "AVERTISSEMENT";
                TYPE_AFFICHAGE[TYPE_AFFICHAGE["INFORMATION"] = 50] = "INFORMATION";
                TYPE_AFFICHAGE[TYPE_AFFICHAGE["OUI_NON"] = 70] = "OUI_NON";
                TYPE_AFFICHAGE[TYPE_AFFICHAGE["OUI_NON_ANNULER"] = 90] = "OUI_NON_ANNULER";
                TYPE_AFFICHAGE[TYPE_AFFICHAGE["VALIDER_ANNULER"] = 110] = "VALIDER_ANNULER";
                TYPE_AFFICHAGE[TYPE_AFFICHAGE["ANNULER"] = 120] = "ANNULER";
                TYPE_AFFICHAGE[TYPE_AFFICHAGE["VIDE"] = 140] = "VIDE";
            })(TYPE_AFFICHAGE = Libelle.TYPE_AFFICHAGE || (Libelle.TYPE_AFFICHAGE = {}));
            ;
        })(Libelle = Services.Libelle || (Services.Libelle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Libelle"] = "Libelle";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Libelle;
        (function (Libelle) {
            var LibelleMessageSubject;
            (function (LibelleMessageSubject) {
                LibelleMessageSubject[LibelleMessageSubject["afficherMessage"] = 0] = "afficherMessage";
                LibelleMessageSubject[LibelleMessageSubject["constituerLibelle"] = 1] = "constituerLibelle";
            })(LibelleMessageSubject = Libelle.LibelleMessageSubject || (Libelle.LibelleMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Libelle, [
                Services.Components.ComponentType.Context,
                Services.Components.ComponentType.Core,
                Services.Components.ComponentType.Display
            ]);
        })(Libelle = Services.Libelle || (Services.Libelle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
// Interface pour caster le fichier json reçu ou injecter un mock pour les tests unitaires
// Fichier généré par l'outil de gestion des messages
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Libelle;
        (function (Libelle) {
            var LibelleModel = /** @class */ (function () {
                function LibelleModel() {
                }
                LibelleModel.COM = {
                    MESSAGE_SANS_VARIABLE: "COM.MESSAGE_SANS_VARIABLE",
                    RESULTATS: "COM.RESULTATS",
                    ERREUR_PARAMETRE_MAUVAIS_TYPE: "COM.ERREUR_PARAMETRE_MAUVAIS_TYPE",
                    ERREUR_PARAMETRES: "COM.ERREUR_PARAMETRES",
                    ERREUR_FRAMEWORK: "COM.ERREUR_FRAMEWORK",
                    ERREUR_SERVEUR: "COM.ERREUR_SERVEUR",
                    ERREUR_TIMEOUT_SERVEUR: "COM.ERREUR_TIMEOUT_SERVEUR",
                    ERREUR_TIMEOUT_CLIENT: "COM.ERREUR_TIMEOUT_CLIENT",
                    ERREUR_ACCES_SERVEUR: "COM.ERREUR_ACCES_SERVEUR",
                    ERREUR_CONFIGURATION_PAS_DE_CONFIG: "COM.ERREUR_CONFIGURATION_PAS_DE_CONFIG",
                    ERREUR_HABILITATION_MAUVAIS_FORMAT: "COM.ERREUR_HABILITATION_MAUVAIS_FORMAT",
                    ERREUR_HABILITATION_CODE_INCONNU: "COM.ERREUR_HABILITATION_CODE_INCONNU",
                    ERREUR_HABILITATION_PARAMETRES_INSUFFISANTS: "COM.ERREUR_HABILITATION_PARAMETRES_INSUFFISANTS",
                    ERREUR_HABILITATION_AUTHENTIFICATION_MANQUANTE: "COM.ERREUR_HABILITATION_AUTHENTIFICATION_MANQUANTE",
                    ERREUR_INDEXED_DB_NON_SUPPORTE: "COM.ERREUR_INDEXED_DB_NON_SUPPORTE",
                    ERREUR_INDEXED_DB_GENERIQUE: "COM.ERREUR_INDEXED_DB_GENERIQUE",
                    ERREUR_INDEXED_DB_SUPPRESSION_IMPOSSIBLE: "COM.ERREUR_INDEXED_DB_SUPPRESSION_IMPOSSIBLE",
                    ERREUR_INDEXED_DB_ACCES_IMPOSSIBLE: "COM.ERREUR_INDEXED_DB_ACCES_IMPOSSIBLE",
                    ERREUR_INDEXED_DB_LECTURE_IMPOSSIBLE: "COM.ERREUR_INDEXED_DB_LECTURE_IMPOSSIBLE",
                    ERREUR_INDEXED_DB_AJOUT_IMPOSSIBLE: "COM.ERREUR_INDEXED_DB_AJOUT_IMPOSSIBLE",
                    ERREUR_INDEXED_DB_MAJ_IMPOSSIBLE: "COM.ERREUR_INDEXED_DB_MAJ_IMPOSSIBLE",
                    ERREUR_INDEXED_DB_REQUETE_IMPOSSIBLE_INDEX: "COM.ERREUR_INDEXED_DB_REQUETE_IMPOSSIBLE_INDEX",
                    ERREUR_INDEXED_DB_REQUETE_IMPOSSIBLE_CRITERE: "COM.ERREUR_INDEXED_DB_REQUETE_IMPOSSIBLE_CRITERE",
                    ERREUR_INDEXED_DB_CALCUL_TAILLE: "COM.ERREUR_INDEXED_DB_CALCUL_TAILLE",
                    ERREUR_CONTEXTE_RECUP_CODE_ETAB_IMPOSSIBLE: "COM.ERREUR_CONTEXTE_RECUP_CODE_ETAB_IMPOSSIBLE",
                    ERREUR_CONTEXTE_RECUP_ID_AGENCE_IMPOSSIBLE: "COM.ERREUR_CONTEXTE_RECUP_ID_AGENCE_IMPOSSIBLE",
                    ERREUR_DONNEESDELOC_OBJET_MAL_FORME: "COM.ERREUR_DONNEESDELOC_OBJET_MAL_FORME",
                    ERREUR_DONNEESDELOC_PROPRIETE_ABSENTE: "COM.ERREUR_DONNEESDELOC_PROPRIETE_ABSENTE",
                    ERREUR_DONNEESDELOC_RECUP_DERNMAJ_IMPOSSIBLE: "COM.ERREUR_DONNEESDELOC_RECUP_DERNMAJ_IMPOSSIBLE",
                    ERREUR_LISA_NEXT_IMPOSSIBLE: "COM.ERREUR_LISA_NEXT_IMPOSSIBLE",
                    ERREUR_LISA_START_IMPOSSIBLE: "COM.ERREUR_LISA_START_IMPOSSIBLE",
                    ERREUR_LISA_GETPROCESSES_IMPOSSIBLE: "COM.ERREUR_LISA_GETPROCESSES_IMPOSSIBLE",
                    ERREUR_LISA_GETTOOLS_IMPOSSIBLE: "COM.ERREUR_LISA_GETTOOLS_IMPOSSIBLE",
                    ERREUR_NUMERISATION_RECUP_CODE_ETAB_IMPOSSIBLE: "COM.ERREUR_NUMERISATION_RECUP_CODE_ETAB_IMPOSSIBLE",
                    ERREUR_NUMERISATION_RECUP_DONNEES_DELOCALISEES_IMPOSSIBLE: "COM.ERREUR_NUMERISATION_RECUP_DONNEES_DELOCALISEES_IMPOSSIBLE",
                    ERREUR_INTEROP_SERVICE_LOCAL_APPEL_IMPOSSIBLE: "COM.ERREUR_INTEROP_SERVICE_LOCAL_APPEL_IMPOSSIBLE",
                    ERREUR_FICHIER_PARAMETRE_DATA_VIDE: "COM.ERREUR_FICHIER_PARAMETRE_DATA_VIDE",
                    ERREUR_FICHIER_PARAMETRE_B64_VIDE: "COM.ERREUR_FICHIER_PARAMETRE_B64_VIDE",
                    ERREUR_APPLICATION: "COM.ERREUR_APPLICATION",
                    ERREUR_APPLICATION_CODE_NON_RENSEIGNE: "COM.ERREUR_APPLICATION_CODE_NON_RENSEIGNE",
                    ERREUR_APPLICATION_TYPE_INCONNU: "COM.ERREUR_APPLICATION_TYPE_INCONNU",
                    ERREUR_APPLICATION_DEMARRAGE_IMPO: "COM.ERREUR_APPLICATION_DEMARRAGE_IMPOSSIBLE",
                    ERREUR_APPLICATION_MAINTENANCE: "COM.ERREUR_APPLICATION_MAINTENANCE",
                    ERREUR_MOBILITE_RECUP_RESEAU_IMPOSSIBLE: "COM.ERREUR_MOBILITE_RECUP_RESEAU_IMPOSSIBLE",
                    ERREUR_MOBILITE_RECUP_LISTE_PERIPH_IMPOSSIBLE: "COM.ERREUR_MOBILITE_RECUP_LISTE_PERIPH_IMPOSSIBLE",
                    ERREUR_MOBILITE_RECUP_LISTE_TABLETTES_SIGNATURES_IMPOSSIBLE: "COM.ERREUR_MOBILITE_RECUP_LISTE_TABLETTES_SIGNATURES_IMPOSSIBLE",
                    ERREUR_MOBILITE_RECUP_INFO_MACHINE_IMPOSSIBLE: "COM.ERREUR_MOBILITE_RECUP_INFO_MACHINE_IMPOSSIBLE",
                    ERREUR_MOBILITE_RECUP_PLATEFORME_MACHINE_IMPOSSIBLE: "COM.ERREUR_MOBILITE_RECUP_PLATEFORME_MACHINE_IMPOSSIBLE",
                    ERREUR_MOBILITE_RECUP_RESOLUTION_ECRAN_IMPOSSIBLE: "COM.ERREUR_MOBILITE_RECUP_RESOLUTION_ECRAN_IMPOSSIBLE",
                    ERREUR_MOBILITE_RECUP_TYPE_ECRAN_IMPOSSIBLE: "COM.ERREUR_MOBILITE_RECUP_TYPE_ECRAN_IMPOSSIBLE",
                    ERREUR_CAPACITES_REGLE_INCONNU: "COM.ERREUR_CAPACITES_REGLE_INCONNU",
                    ERREUR_COMMUNICATION_MESSAGE_INDISPONIBLE: "COM.MESSAGE_INDISPONIBLE",
                    ERREUR_COMMUNICATION_FORMAT_MAIL_INCORRECT: "COM.ERREUR_COMMUNICATION_FORMAT_MAIL_INCORRECT",
                    ERREUR_COMMUNICATION_FORMAT_NUMERO_INCORRECT: "COM.ERREUR_COMMUNICATION_FORMAT_NUMERO_INCORRECT",
                    ERREUR_COMMUNICATION_DONNEES_APPEL_MANQUANTE: "COM.ERREUR_COMMUNICATION_DONNEES_APPEL_MANQUANTE",
                    ERREUR_COMMUNICATION_PARAMETRES_INSUFFISANTS: "COM.ERREUR_COMMUNICATION_PARAMETRES_INSUFFISANTS",
                    ERREUR_CONTROLE_STRING_ADRESSEIP_INCORRECT: "COM.ERREUR_CONTROLE_STRING_ADRESSEIP_INCORRECT",
                    ERREUR_ACQUISITION_PARAMETRES_INSUFFISANTS: "COM.ERREUR_ACQUISITION_PARAMETRES_INSUFFISANTS",
                    ERREUR_EXPORT_DONNEES_ENTREES_FORMAT_INVALIDE: "COM.ERREUR_EXPORT_DONNEES_ENTREES_FORMAT_INVALIDE",
                    ERREUR_EXPORT_DONNEES_ENTREES_VIDE: "COM.ERREUR_EXPORT_DONNEES_ENTREES_VIDE",
                    ERREUR_EXPORT_DONNEES_ENTREES_NB_INVALIDE: "COM.ERREUR_EXPORT_DONNEES_ENTREES_NB_INVALIDE",
                    ERREUR_EXPORT_CONVERSION_CSV_IMPOSSIBLE: "COM.ERREUR_EXPORT_CONVERSION_CSV_IMPOSSIBLE",
                    ERREUR_EXPORT_TELECHARGEMENT_IMPOSSIBLE: "COM.ERREUR_EXPORT_TELECHARGEMENT_IMPOSSIBLE",
                    ERREUR_EXPORT_FORMAT_FICHIER_INCONNU: "COM.ERREUR_EXPORT_FORMAT_FICHIER_INCONNU",
                };
                LibelleModel.TEC = {
                    CHAINE_VIDE: "TEC.CHAINE_VIDE",
                    VALIDATION_ARRAY: "TEC.VALIDATION_ARRAY",
                    IMPRESSION_GENERATION_EN_COURS: "TEC.IMPRESSION_GENERATION_EN_COURS",
                    IMPRESSION_IMPRESSION_EN_COURS: "TEC.IMPRESSION_IMPRESSION_EN_COURS",
                    IMPRESSION_GENERATION_IMPRESSION_EN_COURS: "TEC.IMPRESSION_GENERATION_IMPRESSION_EN_COURS",
                    NUMERISATION_EN_COURS: "TEC.NUMERISATION_EN_COURS"
                };
                return LibelleModel;
            }());
            Libelle.LibelleModel = LibelleModel;
        })(Libelle = Services.Libelle || (Services.Libelle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Mobilite"] = "Mobilite";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilité (module commun aux agents et aux managers)
* @module MyWay.Services.Mobilite
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            var Messages;
            (function (Messages) {
                var MobiliteMessageSubject;
                (function (MobiliteMessageSubject) {
                    MobiliteMessageSubject[MobiliteMessageSubject["GetInfoMachine"] = 0] = "GetInfoMachine";
                    MobiliteMessageSubject[MobiliteMessageSubject["GetPeripheriques"] = 1] = "GetPeripheriques";
                    MobiliteMessageSubject[MobiliteMessageSubject["GetPeripheriquesParType"] = 2] = "GetPeripheriquesParType";
                    MobiliteMessageSubject[MobiliteMessageSubject["GetReseau"] = 3] = "GetReseau";
                })(MobiliteMessageSubject = Messages.MobiliteMessageSubject || (Messages.MobiliteMessageSubject = {}));
                //Enregistrement du composant et de ses dépendances
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Mobilite, [
                    Services.Components.ComponentType.Context,
                    Services.Components.ComponentType.Core
                ]);
            })(Messages = Mobilite.Messages || (Mobilite.Messages = {}));
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            var CaisseAuto = /** @class */ (function () {
                function CaisseAuto() {
                    this.typePeripherique = Mobilite.TYPE_PERIPHERIQUE.CAISSE_AUTO;
                }
                return CaisseAuto;
            }());
            Mobilite.CaisseAuto = CaisseAuto;
            ;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            /**
            * Enumération permettant de définir le type de plateforme
            * @enum Mobilite.PLATEFORME
            */
            var PLATEFORME;
            (function (PLATEFORME) {
                PLATEFORME[PLATEFORME["MYSYS"] = 1] = "MYSYS";
                PLATEFORME[PLATEFORME["WINDOWS"] = 2] = "WINDOWS";
                PLATEFORME[PLATEFORME["APPLE"] = 3] = "APPLE";
                PLATEFORME[PLATEFORME["ANDROID"] = 4] = "ANDROID";
                PLATEFORME[PLATEFORME["AUTRE"] = 99] = "AUTRE";
            })(PLATEFORME = Mobilite.PLATEFORME || (Mobilite.PLATEFORME = {}));
            ;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            /**
            * Enumération permettant de définir les types de périphérques connectés au poste
            * @enum Mobilite.TYPE_PERIPHERIQUE
            */
            var TYPE_PERIPHERIQUE;
            (function (TYPE_PERIPHERIQUE) {
                TYPE_PERIPHERIQUE[TYPE_PERIPHERIQUE["TABLETTE_SIGNATURE"] = 0] = "TABLETTE_SIGNATURE";
                TYPE_PERIPHERIQUE[TYPE_PERIPHERIQUE["CAISSE_AUTO"] = 1] = "CAISSE_AUTO";
            })(TYPE_PERIPHERIQUE = Mobilite.TYPE_PERIPHERIQUE || (Mobilite.TYPE_PERIPHERIQUE = {}));
            ;
            /**
             * Variable pour assurer la rétrocompatibilité avec la 16.03
             */
            Mobilite.TypePeripherique = TYPE_PERIPHERIQUE;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            /**
            * Enumération permettant de définir les types de réseau
            * @enum Mobilite.TYPE_RESEAU
            */
            var TYPE_RESEAU;
            (function (TYPE_RESEAU) {
                TYPE_RESEAU[TYPE_RESEAU["DECONNECTE"] = 0] = "DECONNECTE";
                TYPE_RESEAU[TYPE_RESEAU["VPN"] = 10] = "VPN";
                TYPE_RESEAU[TYPE_RESEAU["WIFI_AGENCE"] = 20] = "WIFI_AGENCE";
                TYPE_RESEAU[TYPE_RESEAU["FILAIRE"] = 30] = "FILAIRE";
                TYPE_RESEAU[TYPE_RESEAU["CONNECTE"] = 99] = "CONNECTE";
                TYPE_RESEAU[TYPE_RESEAU["INCONNU"] = 99] = "INCONNU";
            })(TYPE_RESEAU = Mobilite.TYPE_RESEAU || (Mobilite.TYPE_RESEAU = {}));
            ;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilite
* INTERFACE IConfigDetailsMobilite : Infos de mobilité présente dans la configuration poste
* @module MyWay.Services.Mobilite
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            var TabletteSignature = /** @class */ (function () {
                function TabletteSignature(type, modele, codeModele) {
                    this.typePeripherique = Mobilite.TYPE_PERIPHERIQUE.TABLETTE_SIGNATURE;
                    this.type = type;
                    this.modele = modele;
                    this.codeModele = codeModele;
                }
                return TabletteSignature;
            }());
            Mobilite.TabletteSignature = TabletteSignature;
            ;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Partie commune entre agent et manager
* @module MyWay.Services.Trace
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            /*
            * Les différents niveaux de trace disponibles
            * Attention: les modifications de l'enum NiveauxTrace doivent imperativement être répercutées:
            * au niveau des API de Traces du Framework Technique Service Local et du Framework Technique JAVA
            */
            var NIVEAUX_TRACE;
            (function (NIVEAUX_TRACE) {
                NIVEAUX_TRACE[NIVEAUX_TRACE["DEBUG"] = 30] = "DEBUG";
                NIVEAUX_TRACE[NIVEAUX_TRACE["INFO"] = 50] = "INFO";
                NIVEAUX_TRACE[NIVEAUX_TRACE["WARNING"] = 70] = "WARNING";
                NIVEAUX_TRACE[NIVEAUX_TRACE["ERROR"] = 90] = "ERROR";
            })(NIVEAUX_TRACE = Trace.NIVEAUX_TRACE || (Trace.NIVEAUX_TRACE = {}));
            ;
            /*
            * Pour éviter une DataCloneError coté agent ou une erreur de controle coté manager,
            * on recopie l'erreur dans un objet banal.
            */
            var Utils = /** @class */ (function () {
                function Utils() {
                }
                Utils.gererErreur = function (object) {
                    if (object) {
                        if (object instanceof Error) {
                            object = {
                                message: object.message,
                                stack: object.stack
                            };
                        }
                        else if (Services.Controle.StaticObjectControle.isObjectSpecified(object, "DOMException")) {
                            object = {
                                code: object.code,
                                message: object.message,
                                name: object.name,
                                stack: object.stack
                            };
                        }
                    }
                    return object;
                };
                return Utils;
            }());
            Trace.Utils = Utils;
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            var Logger = /** @class */ (function () {
                /*
                * @param componentName : Pour le Framework: Nom du module appelant et pour une application fonctionnelle: code séquence de l’application dans le système d’enchaînement Lisa
                * @param zoneName : Manager / Agent / Application / Api / Common
                * @param library :
                */
                function Logger(componentName, zoneName, library) {
                    this._componentName = componentName;
                    this._zoneName = zoneName;
                    this._library = library;
                }
                /*
                * Voir ILogger.debug
                */
                Logger.prototype.debug = function (message, action, detail) {
                    this.send(Trace.NIVEAUX_TRACE.DEBUG, message, action, detail);
                };
                /*
                * Voir ILogger.info
                */
                Logger.prototype.info = function (message, action, detail) {
                    this.send(Trace.NIVEAUX_TRACE.INFO, message, action, detail);
                };
                /*
                * Voir ILogger.warning
                */
                Logger.prototype.warning = function (message, action, detail) {
                    this.send(Trace.NIVEAUX_TRACE.WARNING, message, action, detail);
                };
                /*
                * Voir ILogger.error
                */
                Logger.prototype.error = function (message, action, detail) {
                    this.send(Trace.NIVEAUX_TRACE.ERROR, message, action, detail);
                };
                Logger.prototype.send = function (niveauTrace, message, action, detail) {
                    var application;
                    var composant;
                    if (this._zoneName === "Application") {
                        application = this._componentName;
                        composant = null;
                    }
                    else {
                        if (typeof MyWay.Framework != 'undefined')
                            application = MyWay.Framework.NAME + " V" + MyWay.Framework.VERSION;
                        else
                            application = "Framework inconnu";
                        composant = this._componentName + this._zoneName;
                    }
                    var trace = this.createTrace(niveauTrace, message, window.location.href, application, composant, action, detail);
                    var traceSend = false;
                    if (this._library && this._library.Trace) {
                        this._library.Trace.send(trace);
                        traceSend = true;
                    }
                };
                Logger.prototype.createTrace = function (niveau, message, url, application, composant, action, detail) {
                    var traceDate = new Date().getTime();
                    if (action === "ServiceAgentExtended" && detail && detail.lastDigestTime) {
                        traceDate = detail.lastDigestTime;
                        detail = null;
                    }
                    // Todo: à supprimer lorsque l'objet erreur du Framework aura été implémenté
                    detail = Trace.Utils.gererErreur(detail);
                    // Vérification des paramètres d'entrée
                    var erreurParams = "";
                    if (!Services.Controle.StaticEnumControle.isAnEnumValue(niveau, Trace.NIVEAUX_TRACE))
                        erreurParams += "Le paramètre 'niveau' est obligatoire et sa valeur doit faire partie de l'enum 'NIVEAUX_TRACE' / ";
                    if (!Services.Controle.StaticStringControle.isStringNotEmpty(message))
                        erreurParams += "Le paramètre 'message' est obligatoire et doit être de type string et non vide / ";
                    if (!Services.Controle.StaticStringControle.isStringNotEmpty(url))
                        erreurParams += "Le paramètre 'url' est obligatoire et doit être de type string et non vide / ";
                    if (!Services.Controle.StaticStringControle.isStringNotEmpty(application))
                        erreurParams += "Le paramètre 'application' est obligatoire et doit être de type string et non vide / ";
                    if (!Services.Controle.StaticStringControle.isStringNotEmptyOrNullOrUndefined(composant))
                        erreurParams += "Le paramètre 'composant' doit être soit null soit undefined soit de type string et non vide / ";
                    if (!Services.Controle.StaticStringControle.isStringNotEmptyOrNullOrUndefined(action))
                        erreurParams += "Le paramètre 'action' doit être soit null soit undefined soit de type string et non vide / ";
                    if (erreurParams != "") {
                        // Sortie du constructeur
                        erreurParams = erreurParams.substring(0, erreurParams.lastIndexOf("/") - 1);
                        throw new Error(erreurParams);
                    }
                    var trace = new TraceModel();
                    trace.datetime = traceDate;
                    trace.niveau = niveau;
                    trace.client = "";
                    trace.serveur = "";
                    trace.url = url;
                    trace.application = application;
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(composant))
                        trace.composant = composant;
                    else
                        trace.composant = "";
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(action))
                        trace.action = action;
                    else
                        trace.action = "";
                    trace.message = message;
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(detail))
                        trace.details = detail;
                    else
                        trace.details = null;
                    return trace;
                };
                return Logger;
            }());
            Trace.Logger = Logger;
            /*
             * Modèle d'une trace
             */
            var TraceModel = /** @class */ (function () {
                function TraceModel() {
                }
                return TraceModel;
            }());
            Trace.TraceModel = TraceModel;
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Trace"] = "Trace";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            var Messages;
            (function (Messages) {
                var TraceMessageSubject;
                (function (TraceMessageSubject) {
                    TraceMessageSubject[TraceMessageSubject["Tracer"] = 0] = "Tracer";
                    TraceMessageSubject[TraceMessageSubject["Logger"] = 1] = "Logger";
                    TraceMessageSubject[TraceMessageSubject["GetIntervallePurge"] = 2] = "GetIntervallePurge";
                    TraceMessageSubject[TraceMessageSubject["GetQuotaPurge"] = 3] = "GetQuotaPurge";
                    TraceMessageSubject[TraceMessageSubject["PurgerTraces"] = 4] = "PurgerTraces";
                    TraceMessageSubject[TraceMessageSubject["SendDiagnostic"] = 5] = "SendDiagnostic";
                    TraceMessageSubject[TraceMessageSubject["SetModeDebug"] = 6] = "SetModeDebug";
                    TraceMessageSubject[TraceMessageSubject["ReInitDbTraces"] = 7] = "ReInitDbTraces";
                })(TraceMessageSubject = Messages.TraceMessageSubject || (Messages.TraceMessageSubject = {}));
                //Enregistrement du composant et de ses dépendances
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Trace, [
                    Services.Components.ComponentType.Context,
                    Services.Components.ComponentType.Core,
                    Services.Components.ComponentType.BaseDeDonnees
                ]);
            })(Messages = Trace.Messages || (Trace.Messages = {}));
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion du contexte
* @module MyWay.Services.Context
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var ScopeData = /** @class */ (function () {
                function ScopeData() {
                }
                return ScopeData;
            }());
            Context.ScopeData = ScopeData;
            var ServiceData = /** @class */ (function () {
                function ServiceData(name, data) {
                    this.name = name;
                    this.data = data;
                }
                return ServiceData;
            }());
            Context.ServiceData = ServiceData;
            var ContextAgent = /** @class */ (function (_super) {
                __extends(ContextAgent, _super);
                function ContextAgent() {
                    var _this = _super.call(this, Services.Components.ComponentType.Context) || this;
                    _this.listenersNotificationsCorrespondance = [];
                    //AddContextListener
                    _this._listenedKey = null;
                    _this._listernerCallback = null;
                    return _this;
                }
                ContextAgent.prototype.init = function (pAgentLibrairy, pMessageService, pMessageInitializer) {
                    var _this = this;
                    this.sauvegardeScopeParam = pMessageInitializer;
                    if (!this.sauvegardeScopeParam)
                        this.sauvegardeScopeParam = {};
                    // rendre la sauvegarde de scope automatique même si elle n'est pas demandée
                    if (!this.sauvegardeScopeParam.donneesScopeASauvegarder) {
                        this.sauvegardeScopeParam.donneesScopeASauvegarder = ['*'];
                    }
                    if (!this.sauvegardeScopeParam.scopeType) {
                        this.sauvegardeScopeParam.scopeType = Context.ScopeType.View;
                    }
                    if (this.sauvegardeScopeParam.disableScopeSave === null || this.sauvegardeScopeParam.disableScopeSave === undefined) {
                        this.sauvegardeScopeParam.disableScopeSave = true;
                    }
                    return _super.prototype.init.call(this, pAgentLibrairy, pMessageService, pMessageInitializer).then(function () {
                        if (pMessageInitializer && pMessageInitializer.disableGetStepInfo === true) {
                            return _this.GetCurrentStepInfo().then(function (pStepInfo) {
                                _this.StepInfo = pStepInfo;
                            });
                        }
                        else {
                            return _this.SetMyWayCompatible().then(function () { }, function () { });
                        }
                    });
                };
                /**
                * Permet d'ajouter une données au contexte
                *
                * ~~~ts
                * serviceAgent.Context.AddToContext('global', 'NODAPE', '123456')
                *    .then(() => {
                *       // Donnée ajoutée au contexte
                *    }).catch((erreur: MyWay.Services.Erreur) => {
                *       // Ajout de la donnée KO: traitement de l'erreur
                * });
                * ~~~
                * @param key {string} nom de la clé de la donnée
                * @param value {string} nom de la valeur de la donnée
                * @return {IPromesse<boolean>}
                */
                ContextAgent.prototype.AddToContext = function (key, value) {
                    var _this = this;
                    return this.sendMessage(Context.ContextMessageSubject.AddToContext, { key: key, value: value }).then(function (result) {
                        _this._checkKey(key);
                        return result;
                    });
                };
                ContextAgent.prototype.AddToSharedContext = function (key, value) {
                    return this.sendMessage(Context.ContextMessageSubject.AddToSharedContext, { key: key, value: value });
                };
                ContextAgent.prototype.RemoveFromSharedContext = function (key) {
                    return this.sendMessage(Context.ContextMessageSubject.RemoveFromSharedContext, { key: key });
                };
                ContextAgent.prototype.AddToMainProcessContext = function (key, value) {
                    return this.sendMessage(Context.ContextMessageSubject.AddToMainProcessContext, { key: key, value: value });
                };
                /**
                * Permet d'ajouter une liste de données au contexte
                *
                * ~~~ts
                * serviceAgent.Context.AddListToContext(kvp)
                *    .then(() => {
                *       // Données ajoutées au contexte
                *    }).catch((erreur: MyWay.Services.Erreur) => {
                *       // Ajout des données KO: traitement de l'erreur
                * });
                * ~~~
                * @param kvp {MyWay.Services.Context.IContextKeyValuePair[]} Liste de tuple clé/valeur à ajouter au contexte
                * @return {IPromesse<any>}
                */
                ContextAgent.prototype.AddListToContext = function (kvp) {
                    var _this = this;
                    return this.sendMessage(Context.ContextMessageSubject.AddListToContext, { kvp: kvp }).then(function (result) {
                        _this._checkKeys(kvp);
                        return result;
                    });
                };
                /**
                * Permet de récupérer une donnée depuis le contexte
                *
                * ~~~ts
                * serviceAgent.Context.GetFromContext('NODAPE')
                *    .then((value: string) => {
                *       console.log("la valeur récupérée est : " + value);
                *    }).catch((erreur: MyWay.Services.Erreur) => {
                *       // Récupération de la donnée KO: traitement de l'erreur
                * });
                * ~~~
                * @param key {string} Clé de la donnée
                * @return {IPromesse<string>}
                */
                ContextAgent.prototype.GetFromContext = function (key) {
                    return this.sendMessage(Context.ContextMessageSubject.GetFromContext, { key: key });
                };
                //------------------------------------------------------------------------------------------------------------------
                //------------------------------------------------------------------------------------------------------------------
                //------------------------------------------------------------------------------------------------------------------
                ContextAgent.prototype.GetFromSharedContext = function (key) {
                    return this.sendMessage(Context.ContextMessageSubject.GetFromSharedContext, { key: key });
                };
                //------------------------------------------------------------------------------------------------------------------
                //------------------------------------------------------------------------------------------------------------------
                //------------------------------------------------------------------------------------------------------------------
                ContextAgent.prototype.GetObjectFromContext = function (keyArray) {
                    return this.sendMessage(Context.ContextMessageSubject.GetObjectFromContext, { keyArray: keyArray });
                };
                ContextAgent.prototype.GetTypedObjectFromContext = function (template) {
                    return this.sendMessage(Context.ContextMessageSubject.GetTypedObjectFromContext, { template: template });
                };
                /**
                * Permet de récupérer une liste de données depuis le contexte
                *
                * ~~~ts
                * serviceAgent.Context.GetListFromContext(keyArray)
                *    .then((kvp: MyWay.Services.Context.IContextKeyValuePair[]) => {
                *        for(let i in kvp) {
                *           console.log('la valeur de ' + kvp[i].Key + ' a été récupérée: ' + kvp[i].Value);
                *        }
                *    }).catch((erreur: MyWay.Services.Erreur) => {
                *       // Récupération des données KO: traitement de l'erreur
                * });
                * ~~~
                * @param keyArray {string[]} La liste de clé à récupérer
                * @return {IPromesse<MyWay.Services.Context.IContextKeyValuePair[]>}
                */
                ContextAgent.prototype.GetListFromContext = function (keyArray) {
                    return this.sendMessage(Context.ContextMessageSubject.GetListFromContext, { keyArray: keyArray });
                };
                /**
                * Récupère les données d'authentification
                *
                * ~~~ts
                * serviceAgent.Context.GetAuthentificationInfo()
                *    .then((authenticationInfo: AuthentificationInfo) => {
                *        console.log('user connecté :' + authentificationInfo.agentConnecte.referenceExterneAgent);
                *    }).catch((erreur: MyWay.Services.Erreur) => {
                *       // Récupération des données d'authentification KO: traitement de l'erreur
                * });
                * ~~~
                * @param keyArray {string[]} La liste de clé à récupérer
                * @return {IPromesse<AuthentificationInfo>}
                */
                ContextAgent.prototype.GetAuthentificationInfo = function () {
                    return this.sendMessage(Context.ContextMessageSubject.GetAuthentificationInfo, {});
                };
                ContextAgent.prototype.getAuthentificationInfo = function () {
                    return this.GetAuthentificationInfo();
                };
                ContextAgent.prototype.GetParametresComptables = function () {
                    return this.sendMessage(Context.ContextMessageSubject.GetParametresComptables, {});
                };
                ContextAgent.prototype.Redirect = function (url, previousUrl) {
                    if (url === void 0) { url = null; }
                    if (previousUrl === void 0) { previousUrl = null; }
                    return this.library.Display.redirect(url, previousUrl);
                };
                ContextAgent.prototype.GetWaitingProcesses = function () {
                    return this.sendMessage(Context.ContextMessageSubject.GetWaitingProcesses, {});
                };
                ContextAgent.prototype.PutProcessInPortalContext = function (processId) {
                    return this.sendMessage(Context.ContextMessageSubject.PutProcessInPortalContext, { processId: processId });
                };
                ContextAgent.prototype.PutTaskInPortalContext = function (taskId) {
                    return this.sendMessage(Context.ContextMessageSubject.PutTaskInPortalContext, { taskId: taskId });
                };
                ContextAgent.prototype.GetCurrentProcessId = function () {
                    return this.sendMessage(Context.ContextMessageSubject.GetCurrentProcessId, {});
                };
                ContextAgent.prototype.GetCurrentStepId = function () {
                    return this.sendMessage(Context.ContextMessageSubject.GetCurrentStepId, {});
                };
                ContextAgent.prototype.reinitialisationServiceAgent = function (pIdGenere) {
                    return this.sendMessage(Context.ContextMessageSubject.ReinitialisationServiceAgent, { idServiceAgentGenere: pIdGenere });
                };
                ContextAgent.prototype.GetCurrentStepInfo = function () {
                    return this.sendMessage(Context.ContextMessageSubject.GetCurrentStepInfo, {});
                };
                ContextAgent.prototype.SetMyWayCompatible = function () {
                    var _this = this;
                    return this.sendMessage(Context.ContextMessageSubject.SetMyWayCompatible, {}).then(function (res) {
                        _this.VersionComposant = res.versionComposant;
                        return true;
                    });
                };
                ContextAgent.prototype.SubscribeToNotification = function (onNotifications, serviceAgent) {
                    var _this = this;
                    onNotifications.forEach(function (pCallbackExterne) {
                        var lIsFound = false;
                        _this.listenersNotificationsCorrespondance.every(function (pCallbackExistant) {
                            if (pCallbackExistant.callbackExterne === pCallbackExterne) {
                                lIsFound = true;
                            }
                            return !lIsFound;
                        });
                        if (!lIsFound) {
                            var lNewListener = {
                                callbackExterne: pCallbackExterne,
                                callbackInterne: function (notification) {
                                    pCallbackExterne(notification, serviceAgent);
                                }
                            };
                            _this.library.Core.addListenerOnNotification(lNewListener.callbackInterne);
                            _this.listenersNotificationsCorrespondance.push(lNewListener);
                        }
                    });
                    if (serviceAgent && this.library['Interop']) {
                        return this.library['Interop'].triggerNotifications();
                    }
                    else {
                        return Services.Promesses.getPromesseSelfResoved();
                    }
                };
                ContextAgent.prototype.retirerListenerNotification = function (onNotificationASupprimer) {
                    var _this = this;
                    Services.CoreCommon.ArrayUtils.remove(this.listenersNotificationsCorrespondance, function (pCurrent) {
                        if (pCurrent.callbackExterne === onNotificationASupprimer) {
                            _this.library.Core.removeListenerOnNotification(pCurrent.callbackInterne);
                            return true;
                        }
                        return false;
                    });
                };
                /**
                 * Permet de changer le titre contextuel d'une application.
                 *
                 * ~~~ts
                 * // Changement du titre de son application
                 * serviceAgentExtended.Context.ChangeMainProcessName('Nouveau nom de l'application').then((result: MyWay.Services.Context.IPortalContext) => {
                 * ...
                 * }).catch((erreur: MyWay.Services.Erreur) => {
                 * ...
                 * });
                 * ~~~
                 *
                 * @param  {string}  name
                 * Correspond au nom de l'application
                 *
                 * @return {IPromesse<any>}
                 * Promesse retournant le context du portail courant "MyWay.Services.Context.IPortalContext"
                 *
                 */
                ContextAgent.prototype.ChangeMainProcessName = function (name) {
                    return this.sendMessage(Context.ContextMessageSubject.ChangeMainProcessName, { name: name });
                };
                //Sauvegarde données scope
                ContextAgent.prototype.getAllElementsWithAttribute = function (attribute) {
                    var matchingElements = [];
                    var allElements = (document.getElementsByTagName('*'));
                    for (var i = 0, n = allElements.length; i < n; i++) {
                        if ((allElements[i]).getAttribute(attribute) !== null) {
                            // Element exists with attribute. Add to array.
                            matchingElements.push(allElements[i]);
                        }
                    }
                    return matchingElements;
                };
                // méthode permettant de sauvegarder des données du scope de la SPA
                // pour pouvoir les récupérer plus tard si besoin à l'initialisation de la SPA
                ContextAgent.prototype.SauvegarderDonneesScope = function () {
                    if (this.sauvegardeScopeParam.disableScopeSave || !this.StepInfo || !this.StepInfo.CurrentStepId)
                        return null;
                    if (typeof angular == 'undefined')
                        return null;
                    var serializedScopeContent = null;
                    try {
                        if (this.sauvegardeScopeParam.scopeType == Context.ScopeType.Service) {
                            var data = this._getServiceData(this.sauvegardeScopeParam.donneesScopeASauvegarder);
                            try {
                                serializedScopeContent = JSON.pruned(data);
                            }
                            catch (e) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'SauvegarderDonneesScope');
                                ContextAgent.logger.error('impossible de serialiser le scope');
                            }
                        }
                        else {
                            var angularScope = this._getAngularScope();
                            if (!angularScope)
                                return;
                            var scopeContent = this._getOverallScopeContent(angularScope);
                            try {
                                serializedScopeContent = JSON.pruned(scopeContent);
                            }
                            catch (e) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'SauvegarderDonneesScope');
                                ContextAgent.logger.error('impossible de serialiser le scope');
                            }
                        }
                        if (serializedScopeContent) {
                            var limit = 10000;
                            if (serializedScopeContent.length < limit)
                                this._addToProcessStepContext('donneesScope', serializedScopeContent, this.StepInfo.CurrentPath);
                            else {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'SauvegarderDonneesScope');
                                ContextAgent.logger.warn('Sauvegarde du scope non autorisee, le scope serialise depasse la taille limite de %1 caracteres : %2', limit, serializedScopeContent.length);
                            }
                        }
                    }
                    catch (e) {
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'SauvegarderDonneesScope');
                        ContextAgent.logger.debug('impossible de récupérer le scope');
                    }
                };
                ContextAgent.prototype._addToProcessStepContext = function (key, value, processStepId) {
                    return this.sendMessage(Context.ContextMessageSubject.AddToProcessStepContext, { key: key, value: value, processStepId: processStepId });
                };
                ContextAgent.prototype._getAngularScope = function () {
                    var angularScope;
                    if (this.sauvegardeScopeParam.scopeType === Context.ScopeType.View) {
                        var ngView = this.getAllElementsWithAttribute('ng-view');
                        if (ngView.length === 0)
                            ngView = this.getAllElementsWithAttribute('data-ng-view');
                        if (ngView.length === 0)
                            return null;
                        angularScope = angular.element(ngView).scope();
                    }
                    else if (this.sauvegardeScopeParam.scopeType === Context.ScopeType.Root) {
                        angularScope = angular.element(document).scope();
                    }
                    return angularScope;
                };
                ContextAgent.prototype._getOverallScopeContent = function (scope) {
                    var _this = this;
                    if (this.sauvegardeScopeParam.scopeType === Context.ScopeType.View) {
                        var content_1 = {};
                        if (this.sauvegardeScopeParam.donneesScopeASauvegarder.length == 1 && this.sauvegardeScopeParam.donneesScopeASauvegarder[0] === '*') {
                            content_1 = this._getScopeContent(scope);
                        }
                        else {
                            this.sauvegardeScopeParam.donneesScopeASauvegarder.forEach(function (valeur) {
                                var elems = valeur.split('.');
                                if (elems.length === 1)
                                    content_1[valeur] = _this._getScopeContent(scope[elems[0]]);
                                else {
                                    var currentScope_1 = scope;
                                    var currentContent_1 = {};
                                    elems.forEach(function (pElem, pIndex) {
                                        if (pIndex === 0) {
                                            if (!content_1[pElem])
                                                content_1[pElem] = {};
                                            currentContent_1 = content_1[pElem];
                                            currentScope_1 = currentScope_1[pElem];
                                        }
                                        else if (pIndex === (elems.length - 1)) {
                                            currentContent_1[pElem] = _this._getScopeContent(currentScope_1[pElem]);
                                        }
                                        else {
                                            if (!currentContent_1[pElem])
                                                currentContent_1[pElem] = {};
                                            currentContent_1 = currentContent_1[pElem];
                                            currentScope_1 = currentScope_1[pElem];
                                        }
                                    });
                                }
                            });
                        }
                        return content_1;
                    }
                    else if (this.sauvegardeScopeParam.scopeType === Context.ScopeType.Root) {
                        return this._getScopeData(scope, null);
                    }
                    else if (this.sauvegardeScopeParam.scopeType === Context.ScopeType.Service) {
                        return this._getServiceData(this.sauvegardeScopeParam.donneesScopeASauvegarder);
                    }
                };
                ContextAgent.prototype._getScopeData = function (currentScope, parentScopeData) {
                    var scopeData = new ScopeData();
                    scopeData.id = currentScope.$id;
                    scopeData.data = this._getScopeContent(currentScope);
                    if (currentScope.$$childHead)
                        this._getScopeData(currentScope.$$childHead, scopeData);
                    if (currentScope.$$nextSibling)
                        this._getScopeData(currentScope.$$nextSibling, parentScopeData);
                    if (parentScopeData) {
                        if (!parentScopeData.children)
                            parentScopeData.children = [];
                        parentScopeData.children.push(scopeData);
                    }
                    return scopeData;
                };
                ContextAgent.prototype._setScope = function (rootScope, scopeData) {
                    var _this = this;
                    var scope = this._getScopeById(rootScope, scopeData.id);
                    if (scope) {
                        for (var key in scopeData.data) {
                            Services.CoreCommon.applyProperties(scopeData.data, scope, key);
                        }
                    }
                    if (scopeData.children) {
                        scopeData.children.forEach(function (pChild) {
                            _this._setScope(rootScope, pChild);
                        });
                    }
                };
                ContextAgent.prototype._getServiceData = function (donnesASauvegarder) {
                    var servicesData = [];
                    for (var i = 0; i < donnesASauvegarder.length; i++) {
                        var serviceName = donnesASauvegarder[i];
                        var content = angular.element(document.body).injector().get(serviceName);
                        servicesData.push(new ServiceData(serviceName, content));
                    }
                    return servicesData;
                };
                ContextAgent.prototype._setServices = function (servicesData) {
                    for (var i = 0; i < servicesData.length; i++) {
                        var serviceName = servicesData[i].name;
                        var savedContent = servicesData[i].data;
                        var service = angular.element(document.body).injector().get(serviceName);
                        for (var prop in savedContent) {
                            Services.CoreCommon.applyProperties(savedContent, service, prop);
                        }
                    }
                };
                ContextAgent.prototype._getScopeById = function (scope, id) {
                    if (scope.$id === id)
                        return scope;
                    if (scope.$$childHead) {
                        var found = this._getScopeById(scope.$$childHead, id);
                        if (found)
                            return found;
                    }
                    if (scope.$$nextSibling) {
                        var found = this._getScopeById(scope.$$nextSibling, id);
                        if (found)
                            return found;
                    }
                    return null;
                };
                // Copie de la méthode Controle.StaticObjectControle
                ContextAgent.prototype._isObject = function (value) {
                    if (value !== undefined && value !== null && Object.prototype.toString.call(value) === '[object Object]')
                        return true;
                    else
                        return false;
                };
                ContextAgent.prototype._getScopeContent = function (scope) {
                    // TODO key vaut toujours undefined à ce moment.
                    // Comprendre l'utilité de cette fonction.
                    if (!this._isObject(scope[key]))
                        return scope;
                    var content = {};
                    // sauvegarder tout le scope, sauf les éléments réservés d'angularJS
                    for (var key in scope) {
                        if (key[0] === '$')
                            continue;
                        if (typeof scope[key] === 'function')
                            continue;
                        if (!scope[key])
                            continue;
                        if (!scope.hasOwnProperty(key))
                            continue;
                        if (this._isObject(scope[key])) {
                            if (scope[key].$$framework)
                                continue;
                            content[key] = this._getScopeContent(scope[key]);
                        }
                        else
                            content[key] = scope[key];
                    }
                    return content;
                };
                ContextAgent.prototype.getId = function (element) {
                    if (element.id)
                        return '#' + element.id;
                    return '';
                };
                ContextAgent.prototype.getClasses = function (element) {
                    if (element.className) {
                        var classes = element.className;
                        return '.' + classes.replace(new RegExp(' ', 'g'), '.');
                    }
                    return '';
                };
                // méthode permettant d'initialiser le scope de la SPA
                // avec les données qui ont été préalablement sauvées dans le contexte de ce processus
                ContextAgent.prototype.InitialiserDonneesScope = function (stepInfo) {
                    var _this = this;
                    if (this.sauvegardeScopeParam.disableScopeSave || !stepInfo || !stepInfo.CurrentStepId || typeof angular == 'undefined') {
                        var deferred = Services.Promesses.getServiceDePromesse().defer();
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'InitialiserDonneesScope');
                        ContextAgent.logger.debug("sauvegarde scope non utilisable");
                        deferred.resolve(false);
                        return deferred.promise;
                    }
                    ContextAgent.logger.warn("InitialiserDonneesScope - Restauration du scope, log pour remonter sur Kibana qui utilise cette fonctionnalité");
                    var self = this;
                    var estInitialise = false;
                    return this.GetFromContext('donneesScope').then(function (value) {
                        // Si la valeur de retour n'est pas null
                        if (value) {
                            try {
                                var donneesScope_1 = JSON.parse(value);
                                var currentScope_2 = _this._getAngularScope();
                                // On vérifie si un scope angular existe
                                if (!currentScope_2 && (self.sauvegardeScopeParam.scopeType === Context.ScopeType.View || self.sauvegardeScopeParam.scopeType === Context.ScopeType.Root)) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'InitialiserDonneesScope');
                                    ContextAgent.logger.warn('pas de scope trouvé sur la vue');
                                }
                                else {
                                    if (self.sauvegardeScopeParam.scopeType === Context.ScopeType.View) {
                                        if (_this.sauvegardeScopeParam.donneesScopeASauvegarder.length == 1 && _this.sauvegardeScopeParam.donneesScopeASauvegarder[0] === '*') {
                                            for (var key in donneesScope_1) {
                                                Services.CoreCommon.applyProperties(donneesScope_1, currentScope_2, key);
                                            }
                                        }
                                        else {
                                            _this.sauvegardeScopeParam.donneesScopeASauvegarder.forEach(function (valeur, key) {
                                                var elems = valeur.split('.');
                                                if (elems.length === 1) {
                                                    Services.CoreCommon.applyProperties(donneesScope_1, currentScope_2, key);
                                                }
                                                else {
                                                    var currentInnerScope_1 = currentScope_2;
                                                    var currentContent_2 = {};
                                                    elems.forEach(function (pElem, pIndex) {
                                                        if (pIndex === 0) {
                                                            if (!currentInnerScope_1[pElem])
                                                                currentInnerScope_1[pElem] = {};
                                                            currentContent_2 = donneesScope_1[pElem];
                                                            currentInnerScope_1 = currentInnerScope_1[pElem];
                                                        }
                                                        else if (pIndex === (elems.length - 1)) {
                                                            Services.CoreCommon.applyProperties(currentContent_2, currentInnerScope_1, pElem);
                                                        }
                                                        else {
                                                            if (!currentInnerScope_1[pElem])
                                                                currentInnerScope_1[pElem] = {};
                                                            currentContent_2 = currentContent_2[pElem];
                                                            currentInnerScope_1 = currentInnerScope_1[pElem];
                                                        }
                                                    });
                                                }
                                            });
                                        }
                                        currentScope_2.$apply();
                                    }
                                    else if (self.sauvegardeScopeParam.scopeType === Context.ScopeType.Root) {
                                        _this._setScope(currentScope_2, donneesScope_1);
                                        currentScope_2.$apply();
                                    }
                                    else if (self.sauvegardeScopeParam.scopeType === Context.ScopeType.Service) {
                                        _this._setServices(donneesScope_1);
                                    }
                                    estInitialise = true;
                                }
                            }
                            catch (e) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'InitialiserDonneesScope');
                                ContextAgent.logger.error('Problème lors de l\'initialisation des données du scope : %1', e.toString());
                            }
                        }
                        return estInitialise;
                    });
                };
                ContextAgent.prototype.sendNotification = function (notification) {
                    this.library.Core.sendNotification(notification);
                    if (notification && notification.Sujet === 'fin d etape') {
                        // sauvegarder dans le contexte du portail les données du scope de la SPA
                        this.SauvegarderDonneesScope();
                    }
                    return Services.Promesses.getPromesseSelfResoved();
                };
                ContextAgent.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Context.ContextMessageSubject.Notification: {
                            var lMessage = pMessage.message; //TODO NotificationMessage est gênant!
                            return this.sendNotification(lMessage);
                        }
                        case Context.ContextMessageSubject.AnalyseApp: {
                            var analyse = this.AnalyseApp();
                            var lDefer = Services.Promesses.getServiceDePromesse().defer();
                            lDefer.resolve(analyse);
                            return lDefer.promise;
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                ContextAgent.prototype.AnalyseApp = function () {
                    if (typeof angular == 'undefined')
                        return null;
                    var result = new Context.AnalyseResult();
                    var self = this;
                    var scopes = document.getElementsByClassName("ng-scope");
                    // Transforme la collection en tableau pour pouvoir itérer avec for .. of
                    var scopesArray = [].slice.call(scopes);
                    for (var _i = 0, scopesArray_1 = scopesArray; _i < scopesArray_1.length; _i++) {
                        var element = scopesArray_1[_i];
                        var elementName = element.localName + self.getId(element) + self.getClasses(element);
                        // Get the scope associated with this element node.
                        var scope = angular.element(element).scope();
                        // The $$watchers value starts out as NULL.
                        if (scope) {
                            if (scope.$$watchers) {
                                var count = scope.$$watchers.length;
                                result.TotalWatchers += count;
                                result.WatcherByScope.push(new Context.AnalyseScope(elementName, count));
                            }
                            else {
                                result.WatcherByScope.push(new Context.AnalyseScope(elementName, 0));
                            }
                        }
                    }
                    result.TotalWatchers2 = this.CountWatcher2();
                    result.TotalWatchers3 = this.CountWatcher3();
                    return result;
                };
                ContextAgent.prototype.CountWatcher2 = function () {
                    var root = angular.element(document.getElementsByTagName('body'));
                    var watchers = [];
                    var f = function (element) {
                        angular.forEach(['$scope', '$isolateScope'], function (scopeProperty) {
                            if (element.data() && element.data().hasOwnProperty(scopeProperty)) {
                                angular.forEach(element.data()[scopeProperty].$$watchers, function (watcher) {
                                    watchers.push(watcher);
                                });
                            }
                        });
                        angular.forEach(element.children(), function (childElement) {
                            f(angular.element(childElement));
                        });
                    };
                    f(root);
                    // Remove duplicate watchers
                    var watchersWithoutDuplicates = [];
                    angular.forEach(watchers, function (item) {
                        if (watchersWithoutDuplicates.indexOf(item) < 0) {
                            watchersWithoutDuplicates.push(item);
                        }
                    });
                    return watchersWithoutDuplicates.length;
                };
                ContextAgent.prototype.CountWatcher3 = function () {
                    var elements = this.getAllElementsWithAttribute("ng-controller");
                    var count = 0;
                    if (elements) {
                        elements.forEach(function (pElement) {
                            var scope = angular.element(pElement).scope();
                            if (scope && scope.$$watchers) {
                                count += scope.$$watchers.length;
                            }
                        });
                    }
                    return count;
                };
                ContextAgent.prototype.SetContextListener = function (key, callback) {
                    this._listenedKey = key;
                    this._listernerCallback = callback;
                };
                ContextAgent.prototype._checkKey = function (key) {
                    var cleTrouve = false;
                    if (this._listenedKey && this._listernerCallback && key === this._listenedKey) {
                        this._listernerCallback();
                        cleTrouve = true;
                    }
                    return cleTrouve;
                };
                ContextAgent.prototype._checkKeys = function (kvp) {
                    var cleTrouve = false;
                    for (var _i = 0, kvp_1 = kvp; _i < kvp_1.length; _i++) {
                        var item = kvp_1[_i];
                        if (this._checkKey(item.Key)) {
                            cleTrouve = true;
                            break;
                        }
                    }
                    return cleTrouve;
                };
                ContextAgent.CLASS_NAME = 'MyWay.Services.Context.ContextAgent';
                ContextAgent.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ContextAgent.CLASS_NAME);
                return ContextAgent;
            }(Services.Components.ComponentAgentBase));
            Context.ContextAgent = ContextAgent;
            Services.Components.RegistryAgent.getInstance().register(ContextAgent);
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.ServiceAgentExtended.prototype.OnContextEvent = function () {
            Services.ServiceAgentExtended.logger_extended.info("Ajout au contexte de %1", this._listenedKey);
            Services.ServiceAgentProvider["_serviceAgentExtended"]["_diagnostic"].userTime = Date.now();
            this.library.Context.SetContextListener(null, null);
        };
        /**
         * @ngdoc method
         * @name addToSharedContext
         * @methodOf moduleAgent.serviceAgentExtended
         * @description
         * Ajoute un objet dans le contexte global. L'opération est asynchrone et renvoie donc une promise.
         * @param {string} key clé de la donnée
         * @param {Object} value valeur de la donnée
         * @returns {Object} Result promise.
         */
        Services.ServiceAgentExtended.prototype.addToSharedContext = function (key, value) {
            try {
                var deferred = this.$q.defer();
                this.Context.AddToSharedContext(key, value).then(function () {
                    deferred.resolve();
                }, function () {
                    deferred.reject();
                });
                return deferred.promise;
            }
            catch (error) {
                throw new Error("context pas initialise !");
            }
        };
        /**
         * @ngdoc method
         * @name removeFromSharedContext
         * @methodOf moduleAgent.serviceAgentExtended
         * @description
         * Supprime un objet dans le contexte global. L'opération est asynchrone et renvoie donc une promise.
         * @param {string} key clé de la donnée
         * @returns {Object} Result promise.
         */
        Services.ServiceAgentExtended.prototype.removeFromSharedContext = function (key) {
            try {
                var deferred = this.$q.defer();
                this.Context.RemoveFromSharedContext(key).then(function () {
                    deferred.resolve();
                }, function () {
                    deferred.reject();
                });
                return deferred.promise;
            }
            catch (error) {
                throw new Error("context pas initialise !");
            }
        };
        /**
         * @ngdoc method
         * @name addToContext
         * @methodOf moduleAgent.serviceAgentExtended
         * @description
         * Ajoute un objet dans le contexte (local storage). L'opération est asynchrone et renvoie donc une promise.
         * @param {string} key clé de la donnée
         * @param {Object} value valeur de la donnée
         * @returns {Object} Result promise.
         */
        Services.ServiceAgentExtended.prototype.addToContext = function (key, value) {
            try {
                var deferred = this.$q.defer();
                this.Context.AddToContext(key, value).then(function () {
                    deferred.resolve();
                }, function () {
                    deferred.reject();
                });
                return deferred.promise;
            }
            catch (error) {
                throw new Error("context pas initialise !");
            }
        };
        /**
         * @ngdoc method
         * @name addListToContext
         * @methodOf moduleAgent.serviceAgentExtended
         * @description
         * Ajoute une liste d'objets dans le contexte (local storage). L'opération est asynchrone et renvoie donc une promise.
         * @param {Object} data Chaque propriété de l'objet correspond à un objet à mettre dans le contexte.
         * @returns {Object} Result promise.
         */
        Services.ServiceAgentExtended.prototype.addListToContext = function (data) {
            try {
                var deferred = this.$q.defer();
                var kvp = [];
                angular.forEach(data, function (value, key) {
                    kvp.push({ Key: key, Value: value });
                });
                this.Context.AddListToContext(kvp).then(function () {
                    deferred.resolve();
                }, function () {
                    deferred.reject();
                });
                return deferred.promise;
            }
            catch (error) {
                throw new Error("context pas initialise !");
            }
        };
        /**
         * @ngdoc method
         * @name getFromContext
         * @methodOf moduleAgent.serviceAgentExtended
         * @description
         * Renvoie un objet du contexte (local storage). L'opération est asynchrone et renvoie donc une promise.
         * @param {string} key clé de la donnée
         * @param {string=} resultType Type explicite de l'objet à renvoyer.
         * Ce paramètre permet d'instancier un objet de type classe. Le constructeur est appelé avec la valeur en entrée.
         * @returns {Object} Promise contenant la valeur associée à la clé.
         */
        Services.ServiceAgentExtended.prototype.getFromContext = function (key, resultType) {
            var _this = this;
            try {
                var deferred = this.$q.defer();
                this.Context.GetFromContext(key).then(function (value) {
                    if (resultType) {
                        value = _this.instanceLoaderService.createInstance(resultType, value);
                    }
                    deferred.resolve(value);
                }, function () {
                    deferred.reject();
                });
                return deferred.promise;
            }
            catch (error) {
                throw new Error("context pas initialise !");
            }
        };
        //------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------
        Services.ServiceAgentExtended.prototype.getFromSharedContext = function (key, resultType) {
            var _this = this;
            try {
                var deferred = this.$q.defer();
                this.Context.GetFromSharedContext(key).then(function (value) {
                    if (resultType) {
                        value = _this.instanceLoaderService.createInstance(resultType, value);
                    }
                    deferred.resolve(value);
                }, function () {
                    deferred.reject();
                });
                return deferred.promise;
            }
            catch (error) {
                throw new Error("context pas initialise !");
            }
        };
        //------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------
        //------------------------------------------------------------------------------------------------------------------
        /**
         * @ngdoc method
         * @name getListFromContext
         * @methodOf moduleAgent.serviceAgentExtended
         * @description
         * Permet de récupérer une liste de donnée depuis le contexte. L'opération est asynchrone et renvoie donc une promise.
         * @param {array} keyArray Liste de clé à récupérer
         * @returns {Object} Promise contenant un tableau d'objets de type MyWay.Services.Context.IContextKeyValuePair.
         */
        Services.ServiceAgentExtended.prototype.getListFromContext = function (keyArray) {
            try {
                var deferred = this.$q.defer();
                this.Context.GetListFromContext(keyArray).then(function (result) {
                    deferred.resolve(result);
                }, function () {
                    deferred.reject();
                });
                return deferred.promise;
            }
            catch (error) {
                throw new Error("context pas initialise !");
            }
        };
        /**
         * @ngdoc method
         * @name getAuthentificationInfo
         * @methodOf moduleAgent.serviceAgentExtended
         * @description
         * Récupère les données d'authentification. L'opération est asynchrone et renvoie donc une promise.
         * @returns {Object} Promise contenant un objet de type AuthentificationInfo.
         */
        Services.ServiceAgentExtended.prototype.getAuthentificationInfo = function () {
            try {
                var deferred = this.$q.defer();
                this.Context.GetAuthentificationInfo().then(function (info) {
                    deferred.resolve(info);
                }, function (error) {
                    deferred.reject(error);
                });
                return deferred.promise;
            }
            catch (error) {
                throw new Error("context pas initialise !");
            }
        };
        /**
         * @ngdoc method
         * @name getParametresComptables
         * @methodOf moduleAgent.serviceAgentExtended
         * @description
         * Permet de récupérer un objet de données (rubrique ou table délocalisée) pour l'établissement de l'utilisateur connecté.
         * L'opération est asynchrone et renvoie donc une promise.
         * @param {void}
         * @returns {Object} Promise contenant l'objet de données wrappé (dans la propriété donnees).
         */
        Services.ServiceAgentExtended.prototype.getParametresComptables = function () {
            try {
                var deferred = this.$q.defer();
                this.Context.GetParametresComptables().then(function (info) {
                    deferred.resolve(info);
                }, function (error) {
                    deferred.reject(error);
                });
                return deferred.promise;
            }
            catch (error) {
                throw new Error(error);
            }
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.ServiceAgent, "Step", {
            get: function () {
                return this.Library.Context.StepInfo;
            }
        });
        //Remplace la méthode sendRequest pour y ajouter tout ce qui vient du contexte
        Services.ServiceAgent.prototype.SendRequest = function (settings) {
            var _this = this;
            return Services.Promesses.promesseTryCatch(function (pDefer) {
                var thisServiceAgent = _this;
                var settingsExtended = settings;
                settingsExtended.logger = Services.ServiceAgent.logger;
                if (thisServiceAgent.Library && thisServiceAgent.Library.Context && thisServiceAgent.Library.Context.StepInfo) {
                    settingsExtended.stepInfo = thisServiceAgent.Library.Context.StepInfo;
                    settingsExtended.versionComposant = settingsExtended.stepInfo.VersionComposant;
                }
                else if (thisServiceAgent.Library && thisServiceAgent.Library.Context) {
                    settingsExtended.stepInfo = null;
                    settingsExtended.versionComposant = thisServiceAgent.Library.Context.VersionComposant;
                }
                if (settings.withHeaders) {
                    thisServiceAgent.Context.GetAuthentificationInfo()
                        .then(function (authentificationInfo) {
                        settingsExtended.authentificationInfo = authentificationInfo;
                        thisServiceAgent.Library.Context.GetParametresComptables()
                            .then(function (parametresComptables) {
                            settingsExtended.parametresComptables = parametresComptables;
                            Services.CoreCommon.SendRequest(settingsExtended, function (result) { pDefer.resolve(result); }, function (error) { pDefer.reject(error); });
                        })
                            .catch(pDefer.reject);
                    })
                        .catch(pDefer.reject);
                }
                else {
                    Services.CoreCommon.SendRequest(settingsExtended, function (result) { pDefer.resolve(result); }, function (error) { pDefer.reject(error); });
                }
            });
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Display;
        (function (Display) {
            var DisplayAgent = /** @class */ (function (_super) {
                __extends(DisplayAgent, _super);
                function DisplayAgent() {
                    var _this = _super.call(this, Services.Components.ComponentType.Display) || this;
                    _this.myIFrameId = null;
                    return _this;
                }
                DisplayAgent.prototype.getMyIFrameId = function () {
                    return this.myIFrameId;
                };
                DisplayAgent.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Display.DisplayMessageSubject.Refresh: {
                            var lContent = pMessage.message;
                            this.Refresh();
                            return Services.Promesses.getPromesseSelfResoved();
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                DisplayAgent.prototype.Refresh = function () {
                    try {
                        var routeService = angular.element(document.body).injector().get("$route");
                        routeService.reload();
                    }
                    catch (e) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', e);
                        DisplayAgent.logger.warn('Reload failed');
                    }
                };
                DisplayAgent.prototype.RedirectInStep = function (url) {
                    return this.sendMessage(Display.DisplayMessageSubject.RedirectInStep, {}).then(function (pUrl) {
                        window.location.href = pUrl;
                    });
                };
                DisplayAgent.prototype.PrepareSubmit = function (url) {
                    return this.sendMessage(Display.DisplayMessageSubject.PrepareSubmit, { url: url });
                };
                DisplayAgent.prototype.redirect = function (url, previousUrl) {
                    if (url === void 0) { url = null; }
                    if (previousUrl === void 0) { previousUrl = null; }
                    return this.sendMessage(Display.DisplayMessageSubject.Redirect, { url: url, previousUrl: previousUrl });
                };
                DisplayAgent.prototype.displayMessage = function (message) {
                    return this.sendMessage(Display.DisplayMessageSubject.DisplayMessage, { message: message });
                };
                DisplayAgent.CLASS_NAME = 'MyWay.Services.Display.DisplayAgent';
                DisplayAgent.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(DisplayAgent.CLASS_NAME);
                return DisplayAgent;
            }(Services.Components.ComponentAgentBase));
            Display.DisplayAgent = DisplayAgent;
            Services.Components.RegistryAgent.getInstance().register(DisplayAgent);
        })(Display = Services.Display || (Services.Display = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Preferences"] = "Preferences";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Preferences;
        (function (Preferences) {
            var PreferencesMessageSubject;
            (function (PreferencesMessageSubject) {
                PreferencesMessageSubject[PreferencesMessageSubject["LirePreference"] = 0] = "LirePreference";
                PreferencesMessageSubject[PreferencesMessageSubject["EcrirePreference"] = 1] = "EcrirePreference";
                PreferencesMessageSubject[PreferencesMessageSubject["LireMultiPreference"] = 2] = "LireMultiPreference";
            })(PreferencesMessageSubject = Preferences.PreferencesMessageSubject || (Preferences.PreferencesMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Preferences, [
                Services.Components.ComponentType.Context,
                Services.Components.ComponentType.Core
            ]);
        })(Preferences = Services.Preferences || (Services.Preferences = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var ContextApiBase = /** @class */ (function () {
                function ContextApiBase() {
                    this.libraryManager = null;
                    this.portalServiceParameters = null;
                }
                ContextApiBase.prototype.init = function (pApi, pPortalServiceParameters) {
                    this.libraryManager = pApi;
                    this.portalServiceParameters = pPortalServiceParameters;
                };
                ContextApiBase.prototype.GetDonneesLocales = function () {
                    return Services.Promesses.promesseTryCatch(function (pDefer) {
                        pDefer.resolve(null);
                    });
                };
                ContextApiBase.prototype.ShareProcess = function (sharedProcess, codeAgent) {
                    return Services.Promesses.promesseTryCatch(function (pDefer) {
                        pDefer.resolve();
                    });
                };
                ContextApiBase.prototype.RemoveProcess = function (taskId) {
                    return Services.Promesses.promesseTryCatch(function (pDefer) {
                        pDefer.resolve(null);
                    });
                };
                ContextApiBase.prototype.GetInfosUserApi = function () {
                    return Services.Promesses.promesseTryCatch(function (pDefer) {
                        pDefer.resolve(null);
                    });
                };
                ContextApiBase.prototype.GetPortalInformation = function (authentificationInfo) {
                    var codeEtablissement = '';
                    if (authentificationInfo)
                        codeEtablissement = authentificationInfo.codeEtablissement;
                    return Services.CoreCommon.SendRequestWithPromise({
                        url: Services.PrivatePortalServiceParameters.Instance().PortalInfoUrl + '/urlCultureNet?codeEtablissement=' + codeEtablissement,
                        withHeaders: true,
                        authentificationInfo: authentificationInfo
                    }).then(function (infos) {
                        if (infos && infos.donnee) {
                            return { urlCultureNet: infos.donnee };
                        }
                        else {
                            return null;
                        }
                    });
                };
                ContextApiBase.prototype.warnLocalServiceUnavailability = function () {
                    ContextApiBase.loggerContextApiBase.warn("Le service local n'a pu être joint et a été désactivé. Veuillez redémarrer le service local et recharger le portail");
                    return Services.Promesses.createPromiseSelfError(new Services.Erreur("Le service local n'a pu être joint et a été désactivé. Veuillez redémarrer le service local et recharger le portail"));
                };
                ContextApiBase.CLASS_NAMEContextApiBase = 'MyWay.Services.Context.ContextApiWindows';
                ContextApiBase.loggerContextApiBase = Services.Loggers.LoggerFactory.INSTANCE.getClass(ContextApiBase.CLASS_NAMEContextApiBase);
                return ContextApiBase;
            }());
            Context.ContextApiBase = ContextApiBase;
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var ContextApiFactory = /** @class */ (function (_super) {
                __extends(ContextApiFactory, _super);
                function ContextApiFactory() {
                    return _super.call(this, Services.Components.ComponentType.Context) || this;
                }
                ContextApiFactory.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    var _this = this;
                    if (pCapabilities.ServiceLocal) {
                        this.api = new Context.ContextApiWindows();
                    }
                    else {
                        this.api = new Context.ContextApiFullWeb();
                    }
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer).then(function () {
                        _this.api.init(pLibraryManager, pApiInitializer.portalServiceParameters);
                    });
                };
                ContextApiFactory.prototype.GetDonneesLocales = function () {
                    return this.api.GetDonneesLocales();
                };
                ContextApiFactory.prototype.ShareProcess = function (sharedProcess, codeAgent) {
                    return this.api.ShareProcess(sharedProcess, codeAgent);
                };
                ContextApiFactory.prototype.RemoveProcess = function (taskId) {
                    return this.api.RemoveProcess(taskId);
                };
                ContextApiFactory.prototype.GetInfosUserApi = function () {
                    return this.api.GetInfosUserApi();
                };
                ContextApiFactory.prototype.GetPortalInformation = function (authentificationInfo) {
                    return this.api.GetPortalInformation(authentificationInfo);
                };
                return ContextApiFactory;
            }(Services.Components.ComponentApiBase));
            Context.ContextApiFactory = ContextApiFactory;
            Services.Components.RegistryApi.getInstance().register(ContextApiFactory);
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var ContextApiFullWeb = /** @class */ (function (_super) {
                __extends(ContextApiFullWeb, _super);
                function ContextApiFullWeb() {
                    return _super.call(this) || this;
                }
                ContextApiFullWeb.prototype.infosBaseToDonneesLocales = function (pCodeEtablissement, pIdentifiantPoste, pIdentifiantConnexionAgent) {
                    return {
                        AuthentificationInfo: {
                            agentConnecte: {
                                referenceExterneAgent: pIdentifiantConnexionAgent,
                                adresseMessagerie: null,
                                codeCivilite: null,
                                codeIndicateurFinStructure: null,
                                codeInseePays: null,
                                codeQualiteAgent: null,
                                dateDebutValidite: null,
                                dateDebutValiditeReferentiel: null,
                                dateFinValidite: null,
                                designationLongueAgent: null,
                                designationPosteFonctionnel: null,
                                identifiantInterneSite: null,
                                libelleEds: null,
                                libelleTypeEds: null,
                                LICEE1: null,
                                ligne2Adresse: null,
                                ligne3Adresse: null,
                                ligne4Adresse: null,
                                ligne5Adresse: null,
                                ligne6Adresse: null,
                                NODATP: null,
                                nomFamillePersonnePhysique: null,
                                nomUsagePersonnePhysique: null,
                                numeroEdsSuperieur: null,
                                numeroExterneEds: null,
                                numeroInterneEds: null,
                                prenom: null,
                                referenceExterneEdsRattachemen: null,
                                typeEds: null,
                                typeEdsRattachement: null,
                                typeFonction: null
                            },
                            codeEtablissement: pCodeEtablissement,
                            numeroStationTravail: pIdentifiantPoste,
                            ENVIRON: null,
                            guichetAgent: null
                        },
                        ParametresComptables: null,
                        ParametresNumerisation: null,
                        ParametresServeurPoste: null
                    };
                };
                ContextApiFullWeb.prototype.getFromUrl = function (name) {
                    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
                    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                    var results = regex.exec(location.search);
                    return results === null ? null : decodeURIComponent(results[1].replace(/\+/g, " "));
                };
                ContextApiFullWeb.prototype.GetDonneesLocales = function () {
                    var _this = this;
                    //Regarde s'il y a quelque chose dans les paramètres d'url
                    var lAuthentObjectStringify = this.getFromUrl('authent');
                    if (lAuthentObjectStringify) {
                        var lAuthentObject = JSON.parse(lAuthentObjectStringify);
                        var lCodeEtablissement = lAuthentObject.codeEtablissement || null;
                        var lIdentifiantPoste = lAuthentObject.identifiantPoste || null;
                        var lIdentifiantConnexionAgent = lAuthentObject.identifiantConnexionAgent || null;
                        if (lCodeEtablissement && lIdentifiantConnexionAgent && lIdentifiantPoste) {
                            if (/([0-9]+)$/.test(lIdentifiantConnexionAgent)) {
                                lIdentifiantConnexionAgent = /([0-9]+)$/.exec(lIdentifiantConnexionAgent)[0];
                            }
                            return Services.Promesses.createPromiseSelfResolved(this.infosBaseToDonneesLocales(lCodeEtablissement, lIdentifiantPoste, lIdentifiantConnexionAgent));
                        }
                    }
                    //Tente d'aller voir le fichier de conf déposé sur le apache statique, sur lequel est mappé le serveur OpenIdConnect qui mettra dans les headers de réponse les données d'identification
                    return this.libraryManager.Core.sendRequest({
                        url: this.portalServiceParameters.CDNUrl + '/v1/services/config.json',
                        originalResponse: true
                    }).then(function (pResponse) {
                        var lCodeEtablissement = pResponse.getResponseHeader('X-codeEtablissement') || null;
                        var lIdentifiantPoste = pResponse.getResponseHeader('X-identifiantPoste') || null;
                        var lIdentifiantConnexionAgent = pResponse.getResponseHeader('X-identifiantConnexionAgent') || null;
                        if (lCodeEtablissement && lIdentifiantConnexionAgent && lIdentifiantPoste) {
                            return _this.infosBaseToDonneesLocales(lCodeEtablissement, lIdentifiantPoste, lIdentifiantConnexionAgent);
                        }
                        else {
                            return Services.Promesses.createPromiseSelfResolved(null);
                        }
                    }, function () {
                        //Fichier non trouvé, pas d'infos d'authentification
                        return Services.Promesses.createPromiseSelfResolved(null);
                    });
                };
                ContextApiFullWeb.prototype.ShareProcess = function (sharedProcess, codeAgent) {
                    return Services.Promesses.promesseTryCatch(function (pDefer) {
                        pDefer.resolve();
                    });
                };
                ContextApiFullWeb.prototype.RemoveProcess = function (taskId) {
                    return Services.Promesses.promesseTryCatch(function (pDefer) {
                        pDefer.resolve(null);
                    });
                };
                ContextApiFullWeb.prototype.GetInfosUserApi = function () {
                    return Services.Promesses.promesseTryCatch(function (pDefer) {
                        pDefer.resolve(null);
                    });
                };
                return ContextApiFullWeb;
            }(Context.ContextApiBase));
            Context.ContextApiFullWeb = ContextApiFullWeb;
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var ContextApiWindows = /** @class */ (function (_super) {
                __extends(ContextApiWindows, _super);
                function ContextApiWindows() {
                    return _super.call(this) || this;
                }
                ContextApiWindows.prototype.GetDonneesLocales = function () {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        return this.libraryManager.Core.sendRequest({
                            url: Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + '/contexte/GetDonneesLocales',
                            contentType: Services.ContentTypeEnum.JSON,
                            method: Services.MethodEnum.GET,
                            async: false,
                            cache: false
                        }).catch(function (erreur) {
                            ContextApiWindows.logger.error("Erreur de récupération des informations d'authentification de l'agent depuis le service local");
                            throw erreur;
                        });
                    }
                    else {
                        return this.warnLocalServiceUnavailability();
                    }
                };
                ContextApiWindows.prototype.ShareProcess = function (sharedProcess, codeAgent) {
                    var taskData = { Id: null, CodeAgent: codeAgent, Name: sharedProcess.displayName, AddedDateAsLong: sharedProcess.putInWaitTime, SerializedTask: JSON.stringify(sharedProcess) };
                    return this.libraryManager.Core.sendRequest({
                        url: Services.PrivatePortalServiceParameters.Instance().ShareServiceUrl + '/api/Task',
                        method: Services.MethodEnum.POST,
                        data: taskData,
                        withHeaders: false
                    });
                };
                ContextApiWindows.prototype.RemoveProcess = function (taskId) {
                    return this.libraryManager.Core.sendRequest({
                        url: Services.PrivatePortalServiceParameters.Instance().ShareServiceUrl + '/api/Task?id=' + taskId,
                        method: Services.MethodEnum.DELETE,
                        withHeaders: false
                    }).then(function (serializedProcess) {
                        return JSON.parse(serializedProcess);
                    });
                };
                ContextApiWindows.prototype.GetInfosUserApi = function () {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        return this.libraryManager.Core.sendRequest({
                            url: Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + '/contexte/GetInfosUserPoste',
                            type: 'GET',
                            async: false,
                            method: Services.MethodEnum.GET,
                            contentType: Services.ContentTypeEnum.JSON,
                            cache: false
                        });
                    }
                    else {
                        return this.warnLocalServiceUnavailability();
                    }
                };
                ContextApiWindows.CLASS_NAME = 'MyWay.Services.Context.ContextApiWindows';
                ContextApiWindows.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ContextApiWindows.CLASS_NAME);
                return ContextApiWindows;
            }(Context.ContextApiBase));
            Context.ContextApiWindows = ContextApiWindows;
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.isMobile = true;
        var ServiceAgentMobileProvider = /** @class */ (function () {
            function ServiceAgentMobileProvider($q, instanceLoaderService, $timeout, $rootScope) {
                this.$q = $q;
                this.instanceLoaderService = instanceLoaderService;
                this.$timeout = $timeout;
                this.$rootScope = $rootScope;
            }
            ServiceAgentMobileProvider.Instance = function ($q, instanceLoaderService, $timeout, $rootScope) {
                if (ServiceAgentMobileProvider._serviceAgentExtended === null) {
                    ServiceAgentMobileProvider._serviceAgentExtended = new ServiceAgentMobileExtended($q, instanceLoaderService, $timeout, $rootScope);
                }
                return ServiceAgentMobileProvider._serviceAgentExtended;
            };
            ServiceAgentMobileProvider.$inject = [
                "$q",
                "instanceLoaderService",
                "$timeout",
                "$rootScope"
            ];
            //constructor(private $q: ng.IQService, private instanceLoaderService: MyWay.Services.InstanceLoaderService) {
            //    super();
            //}
            ServiceAgentMobileProvider._serviceAgentExtended = null;
            return ServiceAgentMobileProvider;
        }());
        Services.ServiceAgentMobileProvider = ServiceAgentMobileProvider;
        var ServiceAgentMobileExtended = /** @class */ (function (_super) {
            __extends(ServiceAgentMobileExtended, _super);
            function ServiceAgentMobileExtended(_$q, _instanceLoaderService, _$timeout, _$rootScope) {
                var _this = _super.call(this, _$q, _instanceLoaderService, _$timeout, _$rootScope) || this;
                _this._$q = _$q;
                _this._instanceLoaderService = _instanceLoaderService;
                _this._$timeout = _$timeout;
                _this._$rootScope = _$rootScope;
                return _this;
            }
            ServiceAgentMobileExtended.addActionPostInit = function (pCallback) {
            };
            ServiceAgentMobileExtended.removeActionPostInit = function (pCallback) {
                Services.CoreCommon.ArrayUtils.remove(ServiceAgentMobileExtended.actionsPostInit, function (pCurrentCallback) {
                    return pCurrentCallback === pCallback;
                });
            };
            ServiceAgentMobileExtended.prototype.init = function (serviceInit) {
                var _this = this;
                var deferred = this._$q.defer();
                var serviceManager = new Services.ServiceManagerExtended();
                serviceManager.init({
                    IFrameId: null,
                    LogOnUrl: null,
                    OnEvent: null,
                    PortalType: 'single',
                    isTotemCapable: false,
                    ModeVerificationProcessus: MyWay.Services.ModeVerificationProcessus.Aucun,
                    delegationPortail: false
                }).finally(function () {
                    return Services.ServiceManager.Instance().Initialize();
                }).finally(function () {
                    var lPromisesToWait = [];
                    ServiceAgentMobileExtended.actionsPostInit.forEach(function (pCallback) {
                        lPromisesToWait.push(pCallback(Services.ServiceManager.Instance().Library));
                    });
                    return Services.CoreCommon.ServiceDePromesse.all(lPromisesToWait);
                }).finally(function () {
                    _super.prototype.init.call(_this, serviceInit).then(function () {
                        deferred.resolve(Services.ServiceAgentProvider.Instance(_this._$q, _this._instanceLoaderService, _this._$timeout, _this._$rootScope));
                    }, function (reason) {
                        deferred.reject(reason);
                    });
                });
                return deferred.promise;
            };
            ServiceAgentMobileExtended.actionsPostInit = [];
            return ServiceAgentMobileExtended;
        }(Services.ServiceAgentExtended));
        Services.ServiceAgentMobileExtended = ServiceAgentMobileExtended;
        if (typeof angular != 'undefined') {
            Services.moduleAgent = angular.module("moduleAgent", ["ng"]);
            Services.moduleAgent.service("instanceLoaderService", Services.InstanceLoaderService);
            Services.moduleAgent.provider('serviceAgent', function () {
                this.$get = ["$q", "instanceLoaderService", "$timeout", "$rootScope", function ($q, instanceLoaderService, $timeout, $rootScope) {
                        return ServiceAgentMobileProvider.Instance($q, instanceLoaderService, $timeout, $rootScope);
                    }];
            });
            Services.moduleAgent.provider('serviceAgentExtended', function () {
                this.$get = ["$q", "instanceLoaderService", "$timeout", "$rootScope", function ($q, instanceLoaderService, $timeout, $rootScope) {
                        return ServiceAgentMobileProvider.Instance($q, instanceLoaderService, $timeout, $rootScope);
                    }];
            });
            Services.moduleAgent.provider('serviceAgentProvider', function () {
                this.$get = ["$q", "instanceLoaderService", "$timeout", "$rootScope", function ($q, instanceLoaderService, $timeout, $rootScope) {
                        return ServiceAgentMobileProvider.Instance($q, instanceLoaderService, $timeout, $rootScope);
                    }];
            });
        }
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Interop;
        (function (Interop) {
            var InteropMessageBus = /** @class */ (function () {
                function InteropMessageBus() {
                    this.StorageNotification = null;
                    this._setMessages();
                    if (!this._messages) {
                        this._init();
                    }
                }
                InteropMessageBus.prototype._setMessages = function () {
                    if (Services.Storage.InteropMessageBusStorage && Services.Storage.InteropMessageBusStorage.Get())
                        this._messages = JSON.parse(Services.Storage.InteropMessageBusStorage.Get());
                    else
                        this._messages = [];
                };
                InteropMessageBus.prototype._init = function () {
                    this._messages = [];
                    Services.Storage.InteropMessageBusStorage.Set(JSON.stringify(this._messages));
                    this.Notify();
                };
                InteropMessageBus.prototype.Notify = function () {
                    if (this.StorageNotification)
                        this.StorageNotification.saveValue(Math.random());
                };
                InteropMessageBus.prototype.Add = function (event) {
                    this._setMessages();
                    this._messages.push(event);
                    Services.Storage.InteropMessageBusStorage.Set(JSON.stringify(this._messages));
                    this.Notify();
                };
                InteropMessageBus.prototype.SpliceByStepId = function (processStepId) {
                    this._setMessages();
                    var stepMessages = [];
                    for (var i = this._messages.length - 1; i >= 0; i--) {
                        var message = this._messages[i];
                        if (message.ProcessStepId == processStepId)
                            stepMessages.push(this._messages.splice(i)[0]);
                    }
                    Services.Storage.InteropMessageBusStorage.Set(JSON.stringify(this._messages));
                    if (stepMessages.length > 0)
                        this.Notify();
                    return stepMessages;
                };
                InteropMessageBus.prototype.Clear = function () {
                    Services.Storage.InteropMessageBusStorage.Set('');
                    this.Notify();
                    this._init();
                };
                Object.defineProperty(InteropMessageBus.prototype, "Messages", {
                    get: function () {
                        this._setMessages();
                        return this._messages;
                    },
                    enumerable: true,
                    configurable: true
                });
                return InteropMessageBus;
            }());
            Interop.InteropMessageBus = InteropMessageBus;
            var InteropMessageEvent = /** @class */ (function () {
                function InteropMessageEvent() {
                }
                return InteropMessageEvent;
            }());
            Interop.InteropMessageEvent = InteropMessageEvent;
        })(Interop = Services.Interop || (Services.Interop = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.PhantomAgent, 'Dates', {
            get: function () {
                return this._serviceManager.Library.Dates;
            }
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des bases de données
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BaseDeDonnees;
        (function (BaseDeDonnees) {
            /*
            * Class de gestion de gestion des base de données
            */
            var BaseDeDonneesManager = /** @class */ (function (_super) {
                __extends(BaseDeDonneesManager, _super);
                function BaseDeDonneesManager() {
                    return _super.call(this, Services.Components.ComponentType.BaseDeDonnees) || this;
                }
                BaseDeDonneesManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                        _this.dbs = {};
                    });
                };
                BaseDeDonneesManager.prototype.enregistrerDB = function (pNom, pInstance) {
                    this.dbs[pNom] = pInstance;
                };
                BaseDeDonneesManager.prototype.disposeDB = function (pNom) {
                    delete this.dbs[pNom];
                };
                BaseDeDonneesManager.prototype.getBases = function () {
                    var lResult = [];
                    var _loop_1 = function (pDbName) {
                        var lDB = this_1.dbs[pDbName];
                        var lDBDefinition = {
                            nom: pDbName,
                            implementation: null,
                            version: lDB.version,
                            tables: []
                        };
                        switch (lDB.implementation) {
                            case BaseDeDonnees.BaseDeDonneesImplementation.INDEXEDDB:
                                lDBDefinition.implementation = BaseDeDonnees.messages.TYPE_BASE.INDEXEDDB;
                                break;
                            case BaseDeDonnees.BaseDeDonneesImplementation.LOCALSTORAGE:
                                lDBDefinition.implementation = BaseDeDonnees.messages.TYPE_BASE.LOCALSTORAGE;
                                break;
                            case BaseDeDonnees.BaseDeDonneesImplementation.MEMORY:
                                lDBDefinition.implementation = BaseDeDonnees.messages.TYPE_BASE.MEMORY;
                                break;
                        }
                        lDB.getTables().forEach(function (pTableName) {
                            lDBDefinition.tables.push({
                                nom: pTableName
                            });
                        });
                        lResult.push(lDBDefinition);
                    };
                    var this_1 = this;
                    for (var pDbName in this.dbs) {
                        _loop_1(pDbName);
                    }
                    return this.library.Core.createPromiseSelfResolved(lResult);
                };
                BaseDeDonneesManager.prototype.getBase = function (pBase) {
                    return this.dbs[pBase.nom];
                };
                return BaseDeDonneesManager;
            }(Services.Components.ComponentManagerBase));
            BaseDeDonnees.BaseDeDonneesManager = BaseDeDonneesManager;
            Services.Components.RegistryManager.getInstance().register(BaseDeDonneesManager);
        })(BaseDeDonnees = Services.BaseDeDonnees || (Services.BaseDeDonnees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BaseDeDonnees;
        (function (BaseDeDonnees) {
            var Generique;
            (function (Generique) {
                Generique.indexeddbIsSupported = false; //Indexedbd est désactivé pour le réactiver il faut mettre la variable à null
                /** Classe FACTORY pour gérer les implémentation de base de données */
                var Factory = /** @class */ (function () {
                    function Factory() {
                    }
                    Factory.testImplementationIndexeddb = function (force) {
                        if (force === void 0) { force = false; }
                        return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                            // Optimisation performance - force l'utilisation d'indexedDB pour certain cas
                            if (force) {
                                testAppleBrokenIndexedDB(force);
                                return;
                            }
                            if (Generique.indexeddbIsSupported !== null) {
                                pDefer.resolve(Generique.indexeddbIsSupported);
                                return;
                            }
                            if (typeof indexedDB === 'undefined') {
                                Generique.indexeddbIsSupported = false;
                                pDefer.resolve(false);
                            }
                            else if (window.indexedDB === null) {
                                Generique.indexeddbIsSupported = false;
                                pDefer.resolve(false);
                            }
                            else if (typeof IDBKeyRange === 'undefined') {
                                Generique.indexeddbIsSupported = false;
                                pDefer.resolve(false);
                            }
                            else {
                                testAppleBrokenIndexedDB();
                            }
                            function testAppleBrokenIndexedDB(force) {
                                if (force === void 0) { force = false; }
                                //Verification de l'absence de cette DB
                                var reqDelete = window.indexedDB.deleteDatabase('testIndexeddb');
                                reqDelete.onsuccess = function () {
                                    var req = indexedDB.open('testIndexeddb', 1);
                                    req.onupgradeneeded = function (e) {
                                        var db = (e.target).result;
                                        db.createObjectStore('one', {
                                            keyPath: 'key'
                                        });
                                        db.createObjectStore('two', {
                                            keyPath: 'key'
                                        });
                                    };
                                    req.onerror = function () {
                                    };
                                    req.onsuccess = function (e) {
                                        var db = (e.target).result;
                                        var tx;
                                        try {
                                            tx = db.transaction(['one', 'two'], 'readwrite');
                                        }
                                        catch (err) {
                                            Generique.indexeddbIsSupported = false;
                                            pDefer.resolve(false);
                                            return;
                                        }
                                        tx.oncomplete = function (e) {
                                            db.close();
                                            // Optimisation performance - force l'utilisation d'indexedDB 
                                            // ne pas activer indexeddbIsSupported pour tt le monde lors d'un force 
                                            Generique.indexeddbIsSupported = force ? Generique.indexeddbIsSupported : true;
                                            pDefer.resolve(true);
                                        };
                                        var req = tx.objectStore('two').put({
                                            'key': new Date().valueOf()
                                        });
                                        req.onsuccess = function (e) {
                                        };
                                        req.onerror = function () {
                                        };
                                    };
                                    reqDelete.onerror = function () {
                                        pDefer.reject(new Services.Erreur("Impossible de supprimer la base de test qui sert de support au test d'implémentation d'indexeddb"));
                                    };
                                };
                            }
                        });
                    };
                    Factory.CLASS_NAME = 'MyWay.Services.BaseDeDonnees.Generique.Factory';
                    Factory.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(Factory.CLASS_NAME);
                    return Factory;
                }());
                Generique.Factory = Factory;
            })(Generique = BaseDeDonnees.Generique || (BaseDeDonnees.Generique = {}));
        })(BaseDeDonnees = Services.BaseDeDonnees || (Services.BaseDeDonnees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BaseDeDonnees;
        (function (BaseDeDonnees) {
            var BaseDeDonneesImplementation;
            (function (BaseDeDonneesImplementation) {
                BaseDeDonneesImplementation[BaseDeDonneesImplementation["INDEXEDDB"] = 0] = "INDEXEDDB";
                BaseDeDonneesImplementation[BaseDeDonneesImplementation["LOCALSTORAGE"] = 1] = "LOCALSTORAGE";
                BaseDeDonneesImplementation[BaseDeDonneesImplementation["MEMORY"] = 2] = "MEMORY";
            })(BaseDeDonneesImplementation = BaseDeDonnees.BaseDeDonneesImplementation || (BaseDeDonnees.BaseDeDonneesImplementation = {}));
        })(BaseDeDonnees = Services.BaseDeDonnees || (Services.BaseDeDonnees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BaseDeDonnees;
        (function (BaseDeDonnees) {
            var TestIndexeddbStatuts;
            (function (TestIndexeddbStatuts) {
                TestIndexeddbStatuts[TestIndexeddbStatuts["DB_NOT_EXISTS"] = 0] = "DB_NOT_EXISTS";
                TestIndexeddbStatuts[TestIndexeddbStatuts["DB_IS_OK"] = 1] = "DB_IS_OK";
                TestIndexeddbStatuts[TestIndexeddbStatuts["DB_IS_WRONG"] = 2] = "DB_IS_WRONG";
            })(TestIndexeddbStatuts || (TestIndexeddbStatuts = {}));
            /* istanbul ignore next */
            var VerificationSchemaIndexeddb = /** @class */ (function () {
                function VerificationSchemaIndexeddb() {
                }
                VerificationSchemaIndexeddb.testEtCorrectionSchema = function () {
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        if (VerificationSchemaIndexeddb.isVerified) {
                            pDefer.resolve();
                            return;
                        }
                        VerificationSchemaIndexeddb.defersEnAttente.push(pDefer);
                        if (VerificationSchemaIndexeddb.estEnCours) {
                            return;
                        }
                        VerificationSchemaIndexeddb.estEnCours = true;
                        var lCallbackFin = function (pErreur) {
                            if (pErreur) {
                                VerificationSchemaIndexeddb.defersEnAttente.forEach(function (pDeferAttente) {
                                    pDeferAttente.reject(pErreur);
                                });
                            }
                            else {
                                VerificationSchemaIndexeddb.defersEnAttente.forEach(function (pDeferAttente) {
                                    pDeferAttente.resolve();
                                });
                            }
                        };
                        BaseDeDonnees.Generique.Factory.testImplementationIndexeddb().then(function (pEstImplemente) {
                            if (!pEstImplemente) {
                                //Pas implémenté, ne fais pas de vérification
                                VerificationSchemaIndexeddb.isVerified = true;
                                lCallbackFin();
                                return;
                            }
                            //Test chaque DB
                            var lPromessesAAttendre = [];
                            lPromessesAAttendre.push(VerificationSchemaIndexeddb.testDB('DBTraceSuivi', ['tracessuivi']));
                            lPromessesAAttendre.push(VerificationSchemaIndexeddb.testDB('DonneesDelocalisees', ['storeTDT', 'storeData']));
                            lPromessesAAttendre.push(VerificationSchemaIndexeddb.testDB('Trace', ['storeTrace']));
                            lPromessesAAttendre.push(VerificationSchemaIndexeddb.testDB('_base_technique_', ['referentiel']));
                            Services.CoreCommon.ServiceDePromesse.all(lPromessesAAttendre).then(function (pResults) {
                                var lToutEstOk = true;
                                pResults.every(function (pIsOk) {
                                    if (pIsOk.status === TestIndexeddbStatuts.DB_IS_WRONG) {
                                        lToutEstOk = false;
                                    }
                                    return lToutEstOk;
                                });
                                if (!lToutEstOk) {
                                    console.log("Indexeddb WRONG, fait un reset");
                                    //Doit faire un reset complet d'indexeddb
                                    var lNbDeleted = 0;
                                    var lNbToDelete = 0;
                                    pResults.forEach(function (pIsOk) {
                                        if (pIsOk.status !== TestIndexeddbStatuts.DB_NOT_EXISTS) {
                                            lNbToDelete++;
                                            var lRequestDelete = window.indexedDB.deleteDatabase(pIsOk.db);
                                            lRequestDelete.onsuccess = function () {
                                                lNbDeleted++;
                                                if (lNbDeleted >= lNbToDelete) {
                                                    console.log("Indexeddb WRONG, reset terminé");
                                                    VerificationSchemaIndexeddb.isVerified = true;
                                                    lCallbackFin();
                                                }
                                            };
                                        }
                                    });
                                    if (lNbToDelete === 0) {
                                        console.log("Indexeddb WRONG, reset terminé");
                                        VerificationSchemaIndexeddb.isVerified = true;
                                        lCallbackFin();
                                    }
                                }
                                else {
                                    //Tout est OK
                                    console.log("Indexeddb OK");
                                    VerificationSchemaIndexeddb.isVerified = true;
                                    lCallbackFin();
                                }
                            }, function (pErreur) {
                                //Une erreur s'est produite
                                console.error("Erreur lors de la vérification d'indexeddb!");
                                console.error(pErreur);
                                VerificationSchemaIndexeddb.isVerified = true;
                                lCallbackFin(pErreur);
                            });
                        });
                    });
                };
                VerificationSchemaIndexeddb.testDB = function (pBDName, pTables) {
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var lRequeteOpen = window.indexedDB.open(pBDName);
                        var lDBExists = true;
                        lRequeteOpen.onupgradeneeded = function () {
                            lDBExists = false;
                        };
                        lRequeteOpen.onsuccess = function () {
                            var lDBConnexion = lRequeteOpen.result;
                            if (!lDBExists) {
                                //Elle n'existait pas, ordonne sa suppression
                                lDBConnexion.close();
                                window.indexedDB.deleteDatabase(pBDName);
                                pDefer.resolve({
                                    db: pBDName,
                                    status: TestIndexeddbStatuts.DB_NOT_EXISTS
                                });
                                return;
                            }
                            var lTablesIterateur = lDBConnexion.objectStoreNames;
                            var lTables = [];
                            var lTablesAreFound = [];
                            pTables.forEach(function (pTable) {
                                lTablesAreFound.push({
                                    table: pTable,
                                    estTrouve: false
                                });
                            });
                            for (var i = 0; i < lTablesIterateur.length; i++) {
                                lTables.push(lTablesIterateur.item(i));
                            }
                            lDBConnexion.close();
                            lTables.forEach(function (pTableExistante) {
                                lTablesAreFound.every(function (pTableATester) {
                                    if (pTableExistante === pTableATester.table) {
                                        pTableATester.estTrouve = true;
                                        return false; //Doit s'arreter
                                    }
                                    return true; //Doit continuer
                                });
                            });
                            //Vérification que toutes les tables ont été trouvées
                            var lToutEstOk = true;
                            lTablesAreFound.every(function (pTableATester) {
                                if (!pTableATester.estTrouve) {
                                    lToutEstOk = false;
                                }
                                return lToutEstOk;
                            });
                            pDefer.resolve({
                                db: pBDName,
                                status: lToutEstOk ? TestIndexeddbStatuts.DB_IS_OK : TestIndexeddbStatuts.DB_IS_WRONG
                            });
                        };
                    });
                };
                VerificationSchemaIndexeddb.isVerified = false;
                VerificationSchemaIndexeddb.estEnCours = false;
                VerificationSchemaIndexeddb.defersEnAttente = [];
                return VerificationSchemaIndexeddb;
            }());
            BaseDeDonnees.VerificationSchemaIndexeddb = VerificationSchemaIndexeddb;
        })(BaseDeDonnees = Services.BaseDeDonnees || (Services.BaseDeDonnees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Persistence;
        (function (Persistence) {
            var PersistenceManager = /** @class */ (function (_super) {
                __extends(PersistenceManager, _super);
                function PersistenceManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Persistence) || this;
                    _this.CURRENT_ID_EMETTEUR = null;
                    _this.keysWatched = {};
                    _this.listener = function (pEvent) {
                        var lKey = pEvent.key;
                        if (!_this.keysWatched[lKey]) {
                            //Clé non enregistrée, ignore
                            return;
                        }
                        var lNewValue = JSON.parse(pEvent.newValue);
                        if (lNewValue.emetteur === _this.CURRENT_ID_EMETTEUR) {
                            //Même émetteur, ignore
                            return;
                        }
                        _this.keysWatched[lKey].forEach(function (pEventListener) {
                            pEventListener.onEvent(lNewValue.data);
                        });
                    };
                    return _this;
                }
                PersistenceManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    this.CURRENT_ID_EMETTEUR = Math.random().toString();
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                        return _this.initialize();
                    });
                };
                PersistenceManager.prototype.initialize = function () {
                    window.addEventListener('storage', this.listener);
                };
                PersistenceManager.prototype.dispose = function () {
                    window.removeEventListener('storage', this.listener);
                    return _super.prototype.dispose.call(this);
                };
                /**
                 * Crée un objet de stockage StorageInstance, le dote des callbacks nécessaires (pour se débarasser d'un Listener, pour être enregistré, pour réaliser une
                 * action lors d'un Event). Cet objet créé est rajouté à la liste des clefs observées (keysWatched) du gestionnaire de persistence (PersistenceManager) avant d'être
                 * retourné.
                 * @param pKey
                 * @param pCallback
                 */
                PersistenceManager.prototype.addStorage = function (pKey, pCallback) {
                    var _this = this;
                    var lEventListener = new Persistence.StorageInstance(pKey, function () {
                        _this.removeListener(pKey, lEventListener);
                    }, function (pElement) {
                        _this.addElementToStore(pKey, pElement);
                    }, pCallback);
                    var lCollectionEventsListenersOnKey = this.keysWatched[pKey];
                    if (!lCollectionEventsListenersOnKey) {
                        lCollectionEventsListenersOnKey = [];
                        this.keysWatched[pKey] = lCollectionEventsListenersOnKey;
                    }
                    lCollectionEventsListenersOnKey.push(lEventListener);
                    return lEventListener;
                };
                PersistenceManager.prototype.removeListener = function (pKey, pEventListener) {
                    if (!this.keysWatched[pKey]) {
                        return;
                    }
                    var lLength = this.keysWatched[pKey].length;
                    var lIsFound = false;
                    for (var i = 0; i < (lLength - 1); i++) {
                        if (!lIsFound && this.keysWatched[pKey][i] === pEventListener) {
                            lIsFound = true;
                        }
                        if (lIsFound) {
                            this.keysWatched[pKey][i] = this.keysWatched[pKey][i + 1];
                        }
                    }
                    if (lIsFound || this.keysWatched[pKey][lLength - 1] === pEventListener) {
                        this.keysWatched[pKey].length--;
                    }
                };
                PersistenceManager.prototype.addElementToStore = function (pStore, pElement) {
                    var objectToSave = {
                        data: pElement,
                        emetteur: this.CURRENT_ID_EMETTEUR
                    };
                    window.localStorage.setItem(pStore, JSON.stringify(objectToSave));
                };
                return PersistenceManager;
            }(Services.Components.ComponentManagerBase));
            Persistence.PersistenceManager = PersistenceManager;
            Services.Components.RegistryManager.getInstance().register(PersistenceManager);
        })(Persistence = Services.Persistence || (Services.Persistence = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Test;
    (function (Test) {
        var V1;
        (function (V1) {
            var Services;
            (function (Services) {
                function declareManagerExtendedATester(pParamsDeclare) {
                    var lTests = [];
                    return {
                        execute: function () {
                            describe("Lorsque j'utilise le " + pParamsDeclare.className, function () {
                                lTests.forEach(function (pTest) {
                                    pTest();
                                });
                            });
                        },
                        testManagerExtended: function (pParams) {
                            var lMethode = it;
                            if (pParams.only === true) {
                                lMethode = fit;
                            }
                            lTests.push(function () {
                                lMethode("Si j'appelle la méthode " + pParams.method + " correctement j'ai bien le comportement attendu", function (pDone) {
                                    var lNbTests = 2;
                                    if (pParams.hasResult) {
                                        lNbTests++;
                                    }
                                    var lManager = {};
                                    var lLibraryCommon;
                                    var lManagerExtendedInstance = new pParamsDeclare.classManagerExtended();
                                    var lEstAppelle = false;
                                    var lParametres = undefined;
                                    lManager[pParams.managerMethod] = function () {
                                        var pParamsCurrentMethode = [];
                                        for (var _i = 0; _i < arguments.length; _i++) {
                                            pParamsCurrentMethode[_i] = arguments[_i];
                                        }
                                        lEstAppelle = true;
                                        lParametres = pParamsCurrentMethode;
                                        if (pParams.managerHasResult) {
                                            return pParams.managerResult;
                                        }
                                        else {
                                            return;
                                        }
                                    };
                                    lLibraryCommon = Services.generateEmptyLibraryCommon();
                                    MyWay.Services.CoreCommon.getPromesseSelfResoved().then(function () {
                                        if (pParamsDeclare.beforeEach) {
                                            return pParamsDeclare.beforeEach(lManager, lLibraryCommon);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        if (pParams.beforeTest) {
                                            return pParams.beforeTest(lManager, lLibraryCommon);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        return lManagerExtendedInstance.init(lManager, lLibraryCommon);
                                    }).then(function () {
                                        if (pParams.hasParam) {
                                            return lManagerExtendedInstance[pParams.method].apply(lManagerExtendedInstance, pParams.params);
                                        }
                                        else {
                                            return lManagerExtendedInstance[pParams.method].call(lManagerExtendedInstance);
                                        }
                                    }).then(function (pResponse) {
                                        expect(lEstAppelle).toBe(true, "La méthode doit être appelée");
                                        if (pParams.managerHasParam) {
                                            expect(lParametres).toEqual(pParams.managerParams, "Vérification des paramètres passés au manager");
                                        }
                                        else {
                                            expect(lParametres).toEqual([], "Vérification des paramètres passés au manager");
                                        }
                                        if (pParams.hasResult) {
                                            switch (pParams.resultType) {
                                                case Services.TestMode.StrictEquals:
                                                    expect(pResponse).toBe(pParams.result, "Vérification du résultat retourné");
                                                    break;
                                                case Services.TestMode.DeepEquals:
                                                default:
                                                    expect(pResponse).toEqual(pParams.result, "Vérification du résultat retourné");
                                                    break;
                                            }
                                        }
                                    }).finally(function () {
                                        if (pParams.afterTest) {
                                            return pParams.afterTest(lManager, lLibraryCommon);
                                        }
                                        else {
                                            return;
                                        }
                                    }).finally(function () {
                                        if (pParamsDeclare.afterEach) {
                                            return pParamsDeclare.afterEach(lManager, lLibraryCommon);
                                        }
                                        else {
                                            return;
                                        }
                                    }).finally(pDone);
                                });
                            });
                            lTests.push(function () {
                                lMethode("Si j'appelle la méthode " + pParams.method + " de manière erronée j'ai bien une erreur qui me remonte", function (pDone) {
                                    var lManager = {};
                                    var lLibraryCommon;
                                    var lManagerExtendedInstance = new pParamsDeclare.classManagerExtended();
                                    var lEstAppelle = false;
                                    var lParametres = undefined;
                                    lManager[pParams.managerMethod] = function () {
                                        var pParamsCurrentMethode = [];
                                        for (var _i = 0; _i < arguments.length; _i++) {
                                            pParamsCurrentMethode[_i] = arguments[_i];
                                        }
                                        lEstAppelle = true;
                                        lParametres = pParamsCurrentMethode;
                                        throw new MyWay.Services.Erreur("Message d'erreur de test");
                                    };
                                    lLibraryCommon = Services.generateEmptyLibraryCommon();
                                    MyWay.Services.CoreCommon.getPromesseSelfResoved().then(function () {
                                        if (pParamsDeclare.beforeEach) {
                                            return pParamsDeclare.beforeEach(lManager, lLibraryCommon);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        if (pParams.beforeTest) {
                                            return pParams.beforeTest(lManager, lLibraryCommon);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        return lManagerExtendedInstance.init(lManager, lLibraryCommon);
                                    }).then(function () {
                                        if (pParams.hasParam) {
                                            return lManagerExtendedInstance[pParams.method].apply(lManagerExtendedInstance, pParams.params);
                                        }
                                        else {
                                            return lManagerExtendedInstance[pParams.method].call(lManagerExtendedInstance);
                                        }
                                    }).catch(function (pResponse) {
                                        expect(lEstAppelle).toBe(true, "La méthode doit être appelée");
                                        if (pParams.managerHasParam) {
                                            expect(lParametres).toEqual(pParams.managerParams, "Vérification des paramètres passés à la méthode");
                                        }
                                        else {
                                            expect(lParametres).toEqual([], "Vérification des paramètres passés à la méthode");
                                        }
                                        expect(pResponse.codeLibelle).toBe("Message d'erreur de test", "Vérification de l'erreur retournée par la méthode");
                                    }).finally(function () {
                                        if (pParams.afterTest) {
                                            return pParams.afterTest(lManager, lLibraryCommon);
                                        }
                                        else {
                                            return;
                                        }
                                    }).finally(function () {
                                        if (pParamsDeclare.afterEach) {
                                            return pParamsDeclare.afterEach(lManager, lLibraryCommon);
                                        }
                                        else {
                                            return;
                                        }
                                    }).finally(pDone);
                                });
                            });
                        }
                    };
                }
                Services.declareManagerExtendedATester = declareManagerExtendedATester;
            })(Services = V1.Services || (V1.Services = {}));
        })(V1 = Test.V1 || (Test.V1 = {}));
    })(Test = MyWay.Test || (MyWay.Test = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Test;
    (function (Test) {
        var V1;
        (function (V1) {
            var Services;
            (function (Services) {
                var ManageRegistryManagerMessage = /** @class */ (function () {
                    function ManageRegistryManagerMessage() {
                    }
                    ManageRegistryManagerMessage.getInstance = function () {
                        if (ManageRegistryManagerMessage.INSTANCE === null) {
                            ManageRegistryManagerMessage.INSTANCE = new ManageRegistryManagerMessage();
                            ManageRegistryManagerMessage.INSTANCE.init();
                        }
                        return ManageRegistryManagerMessage.INSTANCE;
                    };
                    ManageRegistryManagerMessage.prototype.init = function () {
                        var _this = this;
                        this.componentsByKey = {};
                        MyWay.Services.Components.RegistryManagerMessage.getInstance().components.forEach(function (pComponentConstructor) {
                            var lInstance = new pComponentConstructor();
                            _this.componentsByKey[lInstance.name.toString()] = pComponentConstructor;
                        });
                    };
                    ManageRegistryManagerMessage.prototype.getClass = function (pType) {
                        return this.componentsByKey[pType.toString()];
                    };
                    ManageRegistryManagerMessage.INSTANCE = null;
                    return ManageRegistryManagerMessage;
                }());
                function declareExterieurVersManagerMessageATester(pParamsDeclare) {
                    var lTests = [];
                    // Vérification que si le manager-message reçois un mauvais message, alors il est correctement traité
                    lTests.push(function () {
                        var lTestName = "Si j'envoie un message erroné (en l'occurence MAUVAIS_MESSAGE_POUR_TEST) au manager-message j'ai bien le comportement attendu";
                        var lMethode = it;
                        if (pParamsDeclare.onlyBadMessageTest === true) {
                            lMethode = fit;
                        }
                        lMethode(lTestName, function (pDone) {
                            var lManagerMessageService = Services.generateMessageService();
                            // Prepare Agent
                            var lClassManagerMessage = ManageRegistryManagerMessage.getInstance().getClass(pParamsDeclare.component);
                            if (!lClassManagerMessage) {
                                fail("La class manager-message du type " + pParamsDeclare.component + " n'est pas enregistrée auprès du RegistryManagerMessage");
                                return;
                            }
                            else {
                                expect(true).toBe(true, "La class manager-message du type " + pParamsDeclare.component + " est enregistrée auprès du RegistryManagerMessage");
                            }
                            var lManagerMessageInstance = new lClassManagerMessage();
                            //Prepare Manager
                            var lManagerInstance = {};
                            var lManagerLibrary = Services.generateEmptyLibraryManager();
                            var lManagerInitializer;
                            var lNbTests = 2;
                            return MyWay.Services.CoreCommon.getPromesseSelfResoved().then(function () {
                                if (pParamsDeclare.beforeEach) {
                                    var lParamsManager = {
                                        instance: lManagerMessageInstance
                                    };
                                    return pParamsDeclare.beforeEach(lParamsManager);
                                }
                                else {
                                    return;
                                }
                            }).then(function () {
                                return lManagerMessageInstance.init(lManagerInstance, lManagerLibrary);
                            }).then(function () {
                                var lRequestMessage = {
                                    subject: "MAUVAIS_MESSAGE_POUR_TEST",
                                    message: null,
                                    iframe: null
                                };
                                return lManagerMessageInstance.reception(lRequestMessage);
                            }).then(function (pResponse) {
                                fail("L'envoi d'un message erroné n'a pas renvoyé une erreur!");
                            }, function (pErreur) {
                                expect(pErreur.codeLibelle).toBe("Subject MAUVAIS_MESSAGE_POUR_TEST not implemented on " + lManagerMessageInstance.name + " manager-message", "Une erreur a bien été générée suite à l'envoi d'un message erroné");
                            }).finally(pDone);
                        });
                    });
                    return {
                        execute: function () {
                            describe("Lorsque j'utilise le manager-message " + pParamsDeclare.classManagerName, function () {
                                lTests.forEach(function (pTest) {
                                    pTest();
                                });
                            });
                        },
                        test: function (pParams) {
                            var lTestName = "";
                            lTestName = "Si j'envoie le message " + pParams.typeMessage + " de l'agent correctement j'ai bien le comportement attendu";
                            if (pParams.testMethodSuffix) {
                                lTestName += " [cas : " + pParams.testMethodSuffix + "]";
                            }
                            lTests.push(function () {
                                var lMethode = it;
                                if (pParams.only === true) {
                                    lMethode = fit;
                                }
                                lMethode(lTestName, function (pDone) {
                                    var lManagerMessageService = Services.generateMessageService();
                                    // Prepare Agent
                                    var lClassManagerMessage = ManageRegistryManagerMessage.getInstance().getClass(pParamsDeclare.component);
                                    if (!lClassManagerMessage) {
                                        fail("La class manager-message du type " + pParamsDeclare.component + " n'est pas enregistrée auprès du RegistryManagerMessage");
                                        return;
                                    }
                                    else {
                                        expect(true).toBe(true, "La class manager-message du type " + pParamsDeclare.component + " est enregistrée auprès du RegistryManagerMessage");
                                    }
                                    var lManagerMessageInstance = new lClassManagerMessage();
                                    //Prepare Manager
                                    var lManagerInstance = {};
                                    var lManagerLibrary = Services.generateEmptyLibraryManager();
                                    var lManagerInitializer;
                                    var lManagerEstAppelle = false;
                                    var lManagerParametres = undefined;
                                    lManagerInstance[pParams.managerMethod] = function () {
                                        var pParamsCurrentMethode = [];
                                        for (var _i = 0; _i < arguments.length; _i++) {
                                            pParamsCurrentMethode[_i] = arguments[_i];
                                        }
                                        lManagerEstAppelle = true;
                                        lManagerParametres = pParamsCurrentMethode;
                                        if (pParams.managerHasMethodResponse) {
                                            return pParams.managerMethodResponse;
                                        }
                                        else {
                                            return;
                                        }
                                    };
                                    var lNbTests = 4;
                                    return MyWay.Services.CoreCommon.getPromesseSelfResoved().then(function () {
                                        if (pParamsDeclare.beforeEach) {
                                            var lParamsManager = {
                                                instance: lManagerMessageInstance
                                            };
                                            return pParamsDeclare.beforeEach(lParamsManager);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        var lParamsManager = {
                                            instance: lManagerMessageInstance
                                        };
                                        if (pParams.before) {
                                            return pParams.before(lParamsManager);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        return lManagerMessageInstance.init(lManagerInstance, lManagerLibrary);
                                    }).then(function () {
                                        var lRequestMessage = {
                                            subject: pParams.typeMessage,
                                            message: null,
                                            iframe: pParams.requestMessageIframe
                                        };
                                        if (pParams.hasRequestMessage) {
                                            lRequestMessage.message = pParams.requestMessage;
                                        }
                                        return lManagerMessageInstance.reception(lRequestMessage);
                                    }).then(function (pResponse) {
                                        if (!lManagerEstAppelle) {
                                            fail("Le manager n'a pas été appelé!");
                                        }
                                        else {
                                            expect(true).toBe(true, "Le manager a été appelé!");
                                        }
                                        if (pParams.managerHasMethodParams) {
                                            expect(lManagerParametres).toEqual(pParams.managerMethodParams, "Vérification des paramètres passés à la méthode du manager");
                                        }
                                        else {
                                            expect(lManagerParametres).toEqual([], "Vérification des paramètres passés à la méthode du manager");
                                        }
                                        if (pParams.hasResponseMessage) {
                                            switch (pParams.responseMessageTestMode) {
                                                case Services.TestMode.NoCheck:
                                                    expect(true).toBe(true, "Vérification du message répondu par le manager-message qui est envoyé à l'agent [test ignoré]");
                                                    break;
                                                case Services.TestMode.StrictEquals:
                                                    expect(pResponse).toBe(pParams.responseMessage, "Vérification du message répondu par le manager-message qui est envoyé à l'agent");
                                                    break;
                                                case Services.TestMode.DeepEquals:
                                                default:
                                                    expect(pResponse).toEqual(pParams.responseMessage, "Vérification du message répondu par le manager-message qui est envoyé à l'agent");
                                                    break;
                                            }
                                        }
                                        else {
                                            expect(pResponse).toBe(undefined, "Vérification du message répondu par le manager-message qui est envoyé à l'agent");
                                        }
                                    }, function (pErreur) {
                                        fail(pErreur);
                                        fail("Une erreur s'est produite! Details : " + pErreur.codeLibelle);
                                        console.error(pErreur);
                                    }).finally(pDone);
                                });
                            });
                            lTests.push(function () {
                                lTestName = "Si j'envoie le message " + pParams.typeMessage + " de l'agent de manière incorrecte j'ai bien une erreur qui remonte";
                                if (pParams.testMethodSuffix) {
                                    lTestName += " [cas : " + pParams.testMethodSuffix + "]";
                                }
                                it(lTestName, function (pDone) {
                                    // Prepare Agent
                                    var lClassManagerMessage = ManageRegistryManagerMessage.getInstance().getClass(pParamsDeclare.component);
                                    if (!lClassManagerMessage) {
                                        fail("La class manager-message du type " + pParamsDeclare.component + " n'est pas enregistrée auprès du RegistryManagerMessage");
                                        return;
                                    }
                                    else {
                                        expect(true).toBe(true, "La class manager-message du type " + pParamsDeclare.component + " est enregistrée auprès du RegistryManagerMessage");
                                    }
                                    var lManagerMessageInstance = new lClassManagerMessage();
                                    //Prepare Manager
                                    var lManagerInstance = {};
                                    var lManagerLibrary = Services.generateEmptyLibraryManager();
                                    var lManagerInitializer;
                                    var lManagerEstAppelle = false;
                                    var lManagerParametres = null;
                                    lManagerInstance[pParams.managerMethod] = function () {
                                        var pParamsCurrentMethode = [];
                                        for (var _i = 0; _i < arguments.length; _i++) {
                                            pParamsCurrentMethode[_i] = arguments[_i];
                                        }
                                        lManagerEstAppelle = true;
                                        lManagerParametres = pParamsCurrentMethode;
                                        if (pParams.managerMethodeThrowError) {
                                            throw pParams.managerMethodeError;
                                        }
                                        else {
                                            return pParams.managerMethodeError;
                                        }
                                    };
                                    var lNbTests = 4;
                                    MyWay.Services.CoreCommon.getPromesseSelfResoved().then(function () {
                                        if (pParamsDeclare.beforeEach) {
                                            var lParamsManager = {
                                                instance: lManagerMessageInstance
                                            };
                                            return pParamsDeclare.beforeEach(lParamsManager);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        var lParamsManager = {
                                            instance: lManagerMessageInstance
                                        };
                                        if (pParams.before) {
                                            return pParams.before(lParamsManager);
                                        }
                                        else {
                                            return;
                                        }
                                    }).then(function () {
                                        return lManagerMessageInstance.init(lManagerInstance, lManagerLibrary);
                                    }).then(function () {
                                        var lRequestMessage = {
                                            subject: pParams.typeMessage,
                                            message: null,
                                            iframe: pParams.requestMessageIframe
                                        };
                                        if (pParams.hasRequestMessage) {
                                            lRequestMessage.message = pParams.requestMessage;
                                        }
                                        return lManagerMessageInstance.reception(lRequestMessage);
                                    }).then(function (pResponse) {
                                        fail("Une erreur aurait dû se produire!");
                                    }, function (pErreur) {
                                        if (!lManagerEstAppelle) {
                                            fail("Le manager n'a pas été appelé!");
                                        }
                                        else {
                                            expect(true).toBe(true, "Le manager a été appelé!");
                                        }
                                        if (pParams.managerHasMethodParams) {
                                            expect(lManagerParametres).toEqual(pParams.managerMethodParams, "Vérification des paramètres passés à la méthode du manager");
                                        }
                                        else {
                                            expect(lManagerParametres).toEqual([], "Vérification des paramètres passés à la méthode du manager");
                                        }
                                        expect(pErreur.codeLibelle).toBe(pParams.responseMessageErreur, "Vérification de l'erreur par le manager-message");
                                    }).finally(pDone);
                                });
                            });
                        }
                    };
                }
                Services.declareExterieurVersManagerMessageATester = declareExterieurVersManagerMessageATester;
            })(Services = V1.Services || (V1.Services = {}));
        })(V1 = Test.V1 || (Test.V1 = {}));
    })(Test = MyWay.Test || (MyWay.Test = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des jab
* @module MyWay.Services.JAB
* classe : JABManager - public - Classe permettant la gestion des Journaux d'Archivage Bancaires
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var JAB;
        (function (JAB) {
            /**
            * Classe permettant la gestion des habilitations
            */
            var JABManager = /** @class */ (function (_super) {
                __extends(JABManager, _super);
                function JABManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.JAB) || this;
                    _this.api = null;
                    return _this;
                }
                JABManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
                };
                JABManager.prototype.enregistrer = function (data) {
                    return this.api.enregistrer(data)
                        .then(function (result) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', data);
                        JABManager.logger.debug('JAB Enregister Success');
                        return result;
                    }, function (error) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', data);
                        JABManager.logger.error('JAB Enregister Failed - %1', JSON.stringify(error));
                        throw error;
                    });
                };
                JABManager.CLASS_NAME = 'MyWay.Services.JAB.JABManager';
                JABManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(JABManager.CLASS_NAME);
                return JABManager;
            }(Services.Components.ComponentManagerBase));
            JAB.JABManager = JABManager;
            Services.Components.RegistryManager.getInstance().register(JABManager);
        })(JAB = Services.JAB || (Services.JAB = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des jab
* @module MyWay.Services.JAB
* classe : JABManager - public - Classe permettant la gestion des Journaux d'Archivage Bancaires
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraitementNsdk;
        (function (TraitementNsdk) {
            /**
            * Classe permettant la gestion des habilitations
            */
            var TraitementNsdkManager = /** @class */ (function (_super) {
                __extends(TraitementNsdkManager, _super);
                function TraitementNsdkManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.TraitementNsdk) || this;
                    _this.api = null;
                    return _this;
                }
                TraitementNsdkManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
                };
                TraitementNsdkManager.prototype.Lancer = function (traitement, data) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    return this.api.lancer(traitement, data).then(function (result) {
                        TraitementNsdkManager.logger.debug('Lancement du traitement NSDK ok - %1', result);
                        return result;
                    }, function (error) {
                        TraitementNsdkManager.logger.error('Lancement du traitement NSDK échoué - %1', JSON.stringify(error));
                        throw error;
                    });
                };
                TraitementNsdkManager.CLASS_NAME = 'MyWay.Services.TraitementNsdk.TraitementNsdkManager';
                TraitementNsdkManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(TraitementNsdkManager.CLASS_NAME);
                return TraitementNsdkManager;
            }(Services.Components.ComponentManagerBase));
            TraitementNsdk.TraitementNsdkManager = TraitementNsdkManager;
            Services.Components.RegistryManager.getInstance().register(TraitementNsdkManager);
        })(TraitementNsdk = Services.TraitementNsdk || (Services.TraitementNsdk = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
 * Module de gestion de la numérisation
 * @module MyWay.Services.Acquisition
 */
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            /**
            * Classe permettant la gestion de la numérisation
            *
            * @classe AcquisitionAgent
            */
            var AcquisitionAgent = /** @class */ (function (_super) {
                __extends(AcquisitionAgent, _super);
                /**
                 * Constructeur de la classe AcquisitionAgent
                 * @param agentLibrary {AgentLibrary}
                 * @param errorCallback {ErreurCallback}
                 */
                function AcquisitionAgent() {
                    var _this = _super.call(this, Services.Components.ComponentType.Acquisition) || this;
                    _this.defers = {};
                    return _this;
                }
                /**
                 * Permet d'extraire les données de fichiers
                 *
                 * @param fileInfos les informations sur les fichiers (url et type)
                 * @param params la liste des paramètres RADLAD
                 *
                 * @return les informations du traitement RADLAD
                 */
                AcquisitionAgent.prototype.appelRADLAD = function (fileInfos, params) {
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.AppelRADLAD, {
                        fileInfos: fileInfos,
                        params: params
                    });
                };
                /**
                 * Permet de convertir des fichiers en images
                 *
                 * @param fileInfo information du fichier
                 * @param params paramètres de conversion du fichier
                 *
                 * @return array un tableau contenant les liens vers les images, les miniatures et les pdfs de chaque fichier
                 */
                AcquisitionAgent.prototype.convertFileToImg = function (fileInfo, params) {
                    if (params === void 0) { params = null; }
                    if (params === null) {
                        params = {
                            dpi: 300,
                            quality: 90,
                            thumbQuality: 30
                        };
                    }
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.ConvertFileToImg, {
                        fileInfo: fileInfo,
                        params: params
                    });
                };
                /**
                 * Permet de merger des pdf en un seul et de l'archiver en GED
                 *
                 * @param fileInfos information des pdfs
                 * @param putDocumentInput le document à envoyer en GED
                 *
                 * @return
                 */
                AcquisitionAgent.prototype.mergerEtArchiver = function (fileInfos, putDocumentInput) {
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.MergerEtArchiver, {
                        fileInfos: fileInfos,
                        putDocumentInput: putDocumentInput
                    });
                };
                /**
                 * Permet de merger des pdf en un seul et de l'uploader
                 *
                 * @param fileInfos information des pdfs
                 *
                 * @return
                 */
                AcquisitionAgent.prototype.mergerEtUploader = function (fileInfos) {
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.MergerEtUploader, {
                        fileInfos: fileInfos
                    });
                };
                /**
                 * Permet de convertir des pdfs en images
                 *
                 * @param urls la liste des urls des fichiers base64 à convertir
                 *
                 * @return array un tableau contenant la liste des liens vers les images convertis
                 */
                AcquisitionAgent.prototype.convertBase64ToBin = function (urls) {
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.ConvertBase64ToBin, {
                        urls: urls
                    });
                };
                /**
                 * Permet de vider le répertoire où sont stocké les images
                 * @param le nombre d'heure pour que la purge s'effectue depuis la création du fichier
                 *
                 * @return boolean true si tout s'est bien passé sinon false
                 */
                AcquisitionAgent.prototype.purge = function (hour) {
                    if (hour === void 0) { hour = 8; }
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.Purge, {
                        hour: hour
                    });
                };
                /**
                 * Permet de fermer SpiFactory
                 *
                 *
                 * @return boolean true si tout s'est bien passé sinon false
                 */
                AcquisitionAgent.prototype.fermetureSpiFactory = function () {
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.FermetureSpiFactory, {});
                };
                /**
                 * Permet de configurer un scanner
                 *
                 * @param typeScanner le type du scanner à configurer
                 *
                 * @return boolean true si tout s'est bien passé sinon false
                 */
                AcquisitionAgent.prototype.setConfigurationScanner = function (typeScanner) {
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.SetConfigurationScanner, {
                        typeScanner: typeScanner
                    });
                };
                /**
                 * Permet de merger des PDF et de les ouvrir
                 *
                 * @param params les paramètres nécessaires à l'ouverture d'un PDF
                 *
                 * @return boolean true si tout s'est bien passé sinon false
                 */
                AcquisitionAgent.prototype.mergeAndOpenPDF = function (params) {
                    var _this = this;
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.MergeAndOpenPDF, {
                        params: params
                    }).then(function (guid) {
                        var result = {
                            guid: guid,
                            promise: _this.getProcessingTask(guid)
                        };
                        return result;
                    }, function (e) {
                        throw (e);
                    });
                };
                /**
                 * retourne le chemin du fichier de résultat (au format demandé) mergeant les documents passés en paramètres.
                 * Si le format demandé est de type FORMAT_MERGE.PDF mais qu'un des documents n'est pas de ce type, une archive au format FORMAT_MERGE.ZIP sera créée.
                 * @param params IGedParams liste des documents à merger ou à archiver.
                 * @param pFormatResultat FORMAT_MERGE type de format du fichier de résultat.
                 * @returns une promesse de type string contenant le chemin du fichier de résultat.
                 */
                AcquisitionAgent.prototype.recupereListeDocumentGED = function (params, pFormatResultat) {
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.RecupereListeDocumentGED, {
                        params: params,
                        formatResultat: pFormatResultat
                    }).catch(function (e) {
                        throw (e);
                    });
                };
                /**
                 * ouvre ou ajoute en pièce jointe à un mail (dépend du paramètre correspondant) une archive de documents fournis en paramètre.
                 * @param params IGedParams liste des documents constituant l'archive.
                 * @param pFormatResultat FORMAT_MERGE type de format du fichier de résultat.
                 * @param pTypeOuverture OUVERTURE_ARCHIVE type de manipulation de l'archive : ouverture ou ajout en pièce jointe d'un mail.
                 * @returns une promesse.
                 */
                AcquisitionAgent.prototype.ouvrirListeDocumentGED = function (params, pFormatResultat, pTypeOuverture) {
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.OuvrirListeDocumentGED, {
                        params: params,
                        formatResultat: pFormatResultat,
                        formatOuverture: pTypeOuverture
                    }).catch(function (e) {
                        throw (e);
                    });
                };
                /**
                 * Permet récupérer un document en GED et de les ouvrir
                 *
                 * @param params les paramètres nécessaires à l'ouverture d'un document
                 *
                 * @return boolean true si tout s'est bien passé sinon false
                 */
                AcquisitionAgent.prototype.getDocumentGedAndOpen = function (params) {
                    var _this = this;
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.GetDocumentGEDAndOpen, {
                        params: params
                    }).then(function (guid) {
                        var result = {
                            guid: guid,
                            promise: _this.getProcessingTask(guid)
                        };
                        return result;
                    }, function (e) {
                        throw (e);
                    });
                };
                /**
                 * Permet connaître l'état d'un traitement d'un merge et ouvrir pdf
                 *
                 * @param guid l'identifiant du traitement à connaître
                 *
                 * @return string status le statut du traitement correspondant au guid
                 */
                AcquisitionAgent.prototype.getProcessingTask = function (guid) {
                    var _this = this;
                    if (this.defers[guid]) {
                        return this.defers[guid].promise;
                    }
                    return Services.Promesses.promesseTryCatch(function (defer) {
                        _this.defers[guid] = defer;
                        _this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.GetProcessingTask, {
                            guid: guid
                        });
                    });
                };
                /**
                 * Permet de récupérer des documents en GED, de les sauvegarder et de les récupérer
                 *
                 * @param params information du fichier
                 *
                 * @return array un tableau contenant les liens vers les documents GED, les miniatures et les pds de chaque fichier
                 */
                AcquisitionAgent.prototype.getDocumentGEDAndSave = function (params) {
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.GetDocumentGEDAndSave, {
                        params: params
                    });
                };
                /**
                 * @author : Benoît Ouvrié.
                 * @version : 20.03
                 * @description : liste des scanners accessibles depuis le poste.
                 * @returns Une promesse de type liste de IScannerAccessibleResult.
                 */
                AcquisitionAgent.prototype.getListeScanner = function () {
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.GetListeScanner, {});
                };
                /**
                 * @author : Benoît Ouvrié.
                 * @version : 20.03
                 * @description : vérification de la prise en main (ou non) à distance du poste.
                 * @returns Une promesse de type IPrisEnMainADistanceResult.
                 */
                AcquisitionAgent.prototype.isPrisEnMainADistance = function () {
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.IsPrisEnMainADistance, {});
                };
                /**
                 * @author : Benoît Ouvrié
                 * @version : 20.03
                 * @description : Sauvegarde le document GED (passé en paramètre) sur le poste à l'endroit précisé en paramètre
                 * puis ouvre le document.
                 * @param params interface de type IGedOneSaveAtAndOpenParams. Il contient les éléments nécessaires pour retrouver le document en GED
                 * et le chemin où le document GED sera sauvegardé (cheminSauvegardeSurLePoste).
                 * @returns une IPromesse de type string représentant le chemin du document sur le poste.
                 *
                 */
                AcquisitionAgent.prototype.getDocumentGedSaveAtAndOpen = function (params) {
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.GetDocumentGEDAtAndOpen, {
                        params: params
                    }).catch(function (e) {
                        throw (e);
                    });
                };
                /**
                 * @author : Benoît Ouvrié
                 * @version : 20.03
                 * @description Ouvre le fichier présent sur le poste localement, à l'adresse fournie en paramètre.
                 * @param leParam chemin du fichier, présent localement sur le poste, à ouvrir.
                 * @returns une IPromesse de type booelan : true si l'ouverture s'est bien passée.
                 */
                AcquisitionAgent.prototype.uploadDocumentFrom = function (leParam) {
                    return this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.UploadDocumentFrom, {
                        cheminDuFichierSurLePoste: leParam
                    }).catch(function (erreurUploadDocumentFrom) {
                        throw (erreurUploadDocumentFrom);
                    });
                };
                AcquisitionAgent.prototype.reception = function (message) {
                    if (message.subject === Acquisition.Messages.AcquisitionMessageSubject.ChangeState) {
                        var content = message.message;
                        if (content.state === Acquisition.Messages.END_STATE) {
                            this.defers[content.guid].resolve(content);
                            delete this.defers[content.guid];
                            return Services.Promesses.createPromiseSelfResolved();
                        }
                        else if (content.state === Acquisition.Messages.ERROR) {
                            var erreurAPropagee = new MyWay.Services.Erreur(content.detail);
                            this.defers[content.guid].reject(erreurAPropagee);
                            delete this.defers[content.guid];
                            return Services.Promesses.createPromiseSelfError(erreurAPropagee);
                        }
                        else {
                            this.defers[content.guid].notify(content);
                            return Services.Promesses.createPromiseSelfResolved();
                        }
                    }
                    else {
                        return _super.prototype.reception.call(this, message);
                    }
                };
                return AcquisitionAgent;
            }(Services.Components.ComponentAgentBase));
            Acquisition.AcquisitionAgent = AcquisitionAgent;
            Services.Components.RegistryAgent.getInstance().register(AcquisitionAgent);
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des moyens de communication
* @module MyWay.Services.Communication
* @classe CommunicationAgent - public - Classe permettant la gestion des moyens de communication
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Communication;
        (function (Communication) {
            var CommunicationAgent = /** @class */ (function (_super) {
                __extends(CommunicationAgent, _super);
                /**
                 * Constructeur de la classe CommunicationAgent
                 *
                 * @param agentLibrary {AgentLibrary} La librairie de construction de l'agent
                 * @param errorCallback {ErreurCallback} Action à executer en cas d'erreur lors de la construction de l'agent
                 *
                 */
                function CommunicationAgent() {
                    return _super.call(this, Services.Components.ComponentType.Communication) || this;
                }
                /**
                 * Permet d'envoyer un mail
                 *
                 * @param mail Mail
                 *
                 */
                CommunicationAgent.prototype.envoyerMail = function (mail) {
                    return this.sendMessage(Communication.CommunicationMessageSubject.EnvoyerMail, {
                        mail: mail
                    });
                };
                /**
                * Permet de déclencher un appel
                *
                * @param {Call} call    Données de l'appel
                *
                */
                CommunicationAgent.prototype.declencherAppel = function (call) {
                    return this.sendMessage(Communication.CommunicationMessageSubject.DeclencherAppel, {
                        call: call
                    });
                };
                /**
                * Permet de raccrocher un appel
                *
                */
                CommunicationAgent.prototype.raccrocherAppel = function () {
                    return this.sendMessage(Communication.CommunicationMessageSubject.RaccrocherAppel, {});
                };
                return CommunicationAgent;
            }(Services.Components.ComponentAgentBase));
            Communication.CommunicationAgent = CommunicationAgent;
            Services.Components.RegistryAgent.getInstance().register(CommunicationAgent);
        })(Communication = Services.Communication || (Services.Communication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ConfigurationPoste;
        (function (ConfigurationPoste) {
            /**
            * Classe permettant la gestion des configurations
            */
            var ConfigurationPosteApi = /** @class */ (function (_super) {
                __extends(ConfigurationPosteApi, _super);
                function ConfigurationPosteApi() {
                    var _this = _super.call(this, Services.Components.ComponentType.ConfigurationPoste) || this;
                    _this.urlServiceRest = Services.PrivatePortalServiceParameters.Instance().ConfigurationPosteUrl;
                    return _this;
                }
                /**
                   * Permet d'appeler  l'Api Configuration poste
                   *
                   *
                   * @param  {string}             codeApplication
                   * Correspond au code de l'application
                   *
                   * @return {IPromesse<IConfigPosteDTO<IConfigPosteDetails>}
                   * Si on le DateConfig n'a pas changé alors on récupère un code 204 (non modifié) et on retourne dans la promesse un null
                   *
                   */
                ConfigurationPosteApi.prototype.getConfigurationPoste = function (params) {
                    var _this = this;
                    var url = this.urlServiceRest
                        + "/" + ((params.dateConfig) ? params.dateConfig.toString() : "")
                        + "?computer=" + params.poste
                        + "&establishment=" + params.etablissement;
                    return this.libraryManager.Core.sendRequest({
                        withHeaders: true,
                        url: url,
                        method: Services.MethodEnum.GET,
                        originalResponse: true
                    }).then(function (response) {
                        switch (response.status) {
                            case 200: {
                                ConfigurationPosteApi.loggerConfigurationPosteApi.debug("Send request getConfigurationPoste Successed - status 200");
                                return _this.libraryManager.Core.createPromiseSelfResolved(JSON.parse(response.responseText));
                            }
                            case 204: {
                                ConfigurationPosteApi.loggerConfigurationPosteApi.debug("Send request getConfigurationPoste Successed - status 204");
                                return _this.libraryManager.Core.createPromiseSelfResolved(null);
                            }
                            default: {
                                throw new Services.Erreur("SendRequest getConfigurationPoste status incorrect ", ["Status: " + response.status]);
                            }
                        }
                    }, function (erreur) {
                        ConfigurationPosteApi.loggerConfigurationPosteApi.error("Send request getConfigurationPoste Failed -  %1", JSON.stringify(erreur));
                        throw erreur;
                    });
                };
                ConfigurationPosteApi.CLASS_NAME_BASE = 'MyWay.Services.ConfigurationPoste.ConfigurationPosteApi';
                ConfigurationPosteApi.loggerConfigurationPosteApi = Services.Loggers.LoggerFactory.INSTANCE.getClass(ConfigurationPosteApi.CLASS_NAME_BASE);
                return ConfigurationPosteApi;
            }(Services.Components.ComponentApiBase));
            ConfigurationPoste.ConfigurationPosteApi = ConfigurationPosteApi;
            Services.Components.RegistryApi.getInstance().register(ConfigurationPosteApi);
        })(ConfigurationPoste = Services.ConfigurationPoste || (Services.ConfigurationPoste = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ContexteClient;
        (function (ContexteClient) {
            /**
             * Classe ContexteClientApiFactory.
             */
            var ContexteClientApiFactory = /** @class */ (function (_super) {
                __extends(ContexteClientApiFactory, _super);
                /**
                 * Constructeur de la classe ContexteClientApiFactory.
                 */
                function ContexteClientApiFactory() {
                    return _super.call(this, Services.Components.ComponentType.ContexteClient) || this;
                }
                /**
                 * Méthode permettant l'initialisation de l'api.
                 *
                 * @param pCapabilities         Représente les capacités du poste utilisateur.
                 * @param pLibraryManager       La librairie du manager.
                 * @param pApiInitializer       L'objet d'initialisation de l'api.
                 * @returns une promesse avec aucune donnée de retour.
                 */
                ContexteClientApiFactory.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    var _this = this;
                    if (pCapabilities.ServiceLocal) {
                        if (pCapabilities.InteropAppliBancaire) {
                            this.api = new ContexteClient.ContexteClientApiPetra();
                        }
                        else {
                            this.api = new ContexteClient.ContexteClientApiWindows();
                        }
                    }
                    else {
                        this.api = new ContexteClient.ContexteClientApiFullWeb();
                    }
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer).then(function () {
                        return _this.initApi(pLibraryManager, pApiInitializer);
                    });
                };
                /**
                 * Méthode permettant d'initialiser l'api utilisé.
                 *
                 * @param pLibraryManager   La librairie du manager.
                 * @param pApiInitializer   L'objet d'initialisation de l'api.
                 * @returns une promesse avec aucune donnée de retour.
                 */
                ContexteClientApiFactory.prototype.initApi = function (pLibraryManager, pApiInitializer) {
                    return this.api.initApi(pLibraryManager, pApiInitializer);
                };
                /**
                 * Méthode permettant de synchroniser le contexte client entre NSDK et MyWay.
                 *
                 * @param numeroClient      Le numéro du client.
                 * @param contexteClient    Le contexte du client.
                 * @returns une promesse avec une booléan en retour.
                 */
                ContexteClientApiFactory.prototype.setContexteClientNSDK = function (numeroClient, contexteClient) {
                    return this.api.setContexteClientNSDK(numeroClient, contexteClient);
                };
                ContexteClientApiFactory.prototype.getContexteClientPCM = function () {
                    return this.api.getContexteClientPCM();
                };
                return ContexteClientApiFactory;
            }(Services.Components.ComponentApiBase));
            ContexteClient.ContexteClientApiFactory = ContexteClientApiFactory;
            Services.Components.RegistryApi.getInstance().register(ContexteClientApiFactory);
        })(ContexteClient = Services.ContexteClient || (Services.ContexteClient = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ContexteClient;
        (function (ContexteClient) {
            var ContexteClientApiFullWeb = /** @class */ (function () {
                function ContexteClientApiFullWeb() {
                    /**
                     * Classe du contexte client pour l'api full web.
                     */
                    this.libraryManager = null;
                }
                /**
                 * Méthode permettant d'initialiser l'api utilisé.
                 *
                 * @param pLibraryManager   La librairie du manager.
                 * @param pApiInitializer   L'objet d'initialisation de l'api.
                 * @returns une promesse avec aucune donnée de retour.
                 */
                ContexteClientApiFullWeb.prototype.initApi = function (pLibraryManager, pApiInitializer) {
                    this.libraryManager = pLibraryManager;
                    return this.libraryManager.Core.getPromesseSelfResoved();
                };
                /**
                 * Méthode permettant de synchroniser le contexte client entre NSDK et MyWay.
                 *
                 * @param numeroClient      Le numéro du client.
                 * @param contexteClient    Le contexte du client.
                 * @returns une promesse avec une booléan en retour.
                 */
                ContexteClientApiFullWeb.prototype.setContexteClientNSDK = function (numeroClient, contexteClient) {
                    return this.libraryManager.Core.createPromiseSelfResolved(false);
                };
                ContexteClientApiFullWeb.prototype.getContexteClientPCM = function () {
                    return this.libraryManager.Core.createPromiseSelfResolved(null);
                };
                return ContexteClientApiFullWeb;
            }());
            ContexteClient.ContexteClientApiFullWeb = ContexteClientApiFullWeb;
        })(ContexteClient = Services.ContexteClient || (Services.ContexteClient = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ContexteClient;
        (function (ContexteClient) {
            /**
             * Classe du contexte client pour l'api Petra.
             */
            var ContexteClientApiPetra = /** @class */ (function () {
                function ContexteClientApiPetra() {
                    /**
                     * Instance de la librairie du manager.
                     */
                    this.libraryManager = null;
                    /**
                     * Paramètres du service du portail.
                     */
                    this.privatePortalServiceParameters = null;
                }
                /**
                 * Méthode permettant d'initialiser l'api utilisé.
                 *
                 * @param pLibraryManager   La librairie du manager.
                 * @param pApiInitializer   L'objet d'initialisation de l'api.
                 * @returns une promesse avec aucune donnée de retour.
                 */
                ContexteClientApiPetra.prototype.initApi = function (pLibraryManager, pApiInitializer) {
                    this.libraryManager = pLibraryManager;
                    this.privatePortalServiceParameters = pApiInitializer.privatePortalServiceParameters;
                    return this.libraryManager.Core.getPromesseSelfResoved();
                };
                /**
                 * Méthode permettant de synchroniser le contexte client entre NSDK et MyWay.
                 *
                 * @param numeroClient      Le numéro du client.
                 * @param contexteClient    Le contexte du client.
                 * @returns une promesse avec une booléan en retour.
                 */
                ContexteClientApiPetra.prototype.setContexteClientNSDK = function (numeroClient, contexteClient) {
                    switch (contexteClient[ContexteClient.ContexteClientStatusFlag.RELOAD_FLAG_NAME]) {
                        case ContexteClient.ContexteClientStatusFlag.RELOAD_FLAG_VALUE_NONE:
                            return this.libraryManager.Core.createPromiseSelfResolved(true);
                        case ContexteClient.ContexteClientStatusFlag.RELOAD_FLAG_VALUE_RELOAD:
                            return this._reloadNSDK(numeroClient);
                        case ContexteClient.ContexteClientStatusFlag.RELOAD_FLAG_VALUE_SYNCHRO:
                        default:
                            return this._setContexteClientNSDK(numeroClient, contexteClient);
                    }
                };
                /**
                 * Méthode permettant de synchroniser le contexte client entre NSDK et MyWay.
                 *
                 * @param numeroClient      Le numéro du client.
                 * @param contexteClient    Le contexte du client.
                 * @returns une promesse avec une booléan en retour.
                 */
                ContexteClientApiPetra.prototype.getContexteClientPCM = function () {
                    var listeIdClient = [];
                    return this.libraryManager.Core.sendRequest({
                        url: this.privatePortalServiceParameters.LocalServiceUrl + '/contexte/GetListeClientIdentifiesPCM',
                        method: Services.MethodEnum.GET,
                        contentType: Services.ContentTypeEnum.JSON
                    }).then(function (listeClientsPCM) {
                        for (var _i = 0, listeClientsPCM_1 = listeClientsPCM; _i < listeClientsPCM_1.length; _i++) {
                            var clientPCM = listeClientsPCM_1[_i];
                            listeIdClient.push(clientPCM.NumeroPersonne);
                        }
                        return listeIdClient;
                    }).catch(function () { return listeIdClient; });
                };
                ContexteClientApiPetra.prototype._setContexteClientNSDK = function (numeroClient, contexteClient) {
                    return this.libraryManager.Core.sendRequest({
                        url: this.privatePortalServiceParameters.LocalServiceUrl + '/contexte/SetContexteClientNSDK?numeroClient=' + numeroClient,
                        method: Services.MethodEnum.POST,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: contexteClient
                    }).then(function () {
                        return true;
                    });
                };
                /**
                 * Méthode permettant de mise à jour de la synthèse NSDK.
                 *
                 * @param numeroClient  Le numéro du client.
                 */
                ContexteClientApiPetra.prototype._reloadNSDK = function (numeroClient) {
                    return this.libraryManager.Core.sendRequest({
                        url: this.privatePortalServiceParameters.LocalServiceUrl + '/contexte/DemandeMAJSyntheseNSDK?numeroClient=' + numeroClient,
                        method: Services.MethodEnum.POST
                    }).then(function () {
                        return true;
                    });
                };
                return ContexteClientApiPetra;
            }());
            ContexteClient.ContexteClientApiPetra = ContexteClientApiPetra;
        })(ContexteClient = Services.ContexteClient || (Services.ContexteClient = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ContexteClient;
        (function (ContexteClient) {
            /**
             * Classe du contexte client pour l'api Windows.
             */
            var ContexteClientApiWindows = /** @class */ (function () {
                function ContexteClientApiWindows() {
                    /**
                     * Instance de la librairie du manager.
                     */
                    this.libraryManager = null;
                }
                /**
                 * Méthode permettant d'initialiser l'api utilisé.
                 *
                 * @param pLibraryManager   La librairie du manager.
                 * @param pApiInitializer   L'objet d'initialisation de l'api.
                 * @returns une promesse avec aucune donnée de retour.
                 */
                ContexteClientApiWindows.prototype.initApi = function (pLibraryManager, pApiInitializer) {
                    this.libraryManager = pLibraryManager;
                    return this.libraryManager.Core.getPromesseSelfResoved();
                };
                /**
                 * Méthode permettant de synchroniser le contexte client entre NSDK et MyWay.
                 *
                 * @param numeroClient      Le numéro du client.
                 * @param contexteClient    Le contexte du client.
                 * @returns une promesse avec une booléan en retour.
                 */
                ContexteClientApiWindows.prototype.setContexteClientNSDK = function (numeroClient, contexteClient) {
                    return this.libraryManager.Core.createPromiseSelfResolved(false);
                };
                ContexteClientApiWindows.prototype.getContexteClientPCM = function () {
                    return this.libraryManager.Core.createPromiseSelfResolved(null);
                };
                return ContexteClientApiWindows;
            }());
            ContexteClient.ContexteClientApiWindows = ContexteClientApiWindows;
        })(ContexteClient = Services.ContexteClient || (Services.ContexteClient = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Interop;
        (function (Interop) {
            var InteropAgent = /** @class */ (function (_super) {
                __extends(InteropAgent, _super);
                function InteropAgent() {
                    return _super.call(this, Services.Components.ComponentType.Interop) || this;
                }
                InteropAgent.prototype.lireFichier = function (nomFichier) {
                    var lParametres = {
                        nomFichier: nomFichier,
                    };
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.LireFichier, lParametres).then(function (response) {
                        return response.data;
                    });
                };
                InteropAgent.prototype.ecrireFichier = function (nomFichier, fluxdonnees, ajouter, creeDir) {
                    var lParametres = {
                        nomFichier: nomFichier,
                        fluxdonnees: fluxdonnees,
                        ajouter: ajouter,
                        creeDir: creeDir
                    };
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.EcrireFichier, lParametres).then(function (response) {
                        return response.data;
                    });
                };
                InteropAgent.prototype.triggerNotifications = function () {
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.TriggerNotifications);
                };
                return InteropAgent;
            }(Services.Components.ComponentAgentBase));
            Interop.InteropAgent = InteropAgent;
            Services.Components.RegistryAgent.getInstance().register(InteropAgent);
        })(Interop = Services.Interop || (Services.Interop = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            var AcquisitionApiBase = /** @class */ (function () {
                function AcquisitionApiBase() {
                    this.libraryManager = null;
                }
                AcquisitionApiBase.prototype.initApi = function (libraryManagerApi) {
                    this.libraryManager = libraryManagerApi;
                };
                AcquisitionApiBase.prototype.recuperationImageKofax = function (fileInfos) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.creerImagesBitonales = function (base64List, pCreerImageBitonalParams) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.traitementRADLAD = function (base64List, params, authentInfo) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.convertFileToImg = function (fileInfo, params) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.mergerPdfs = function (fileInfos) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.mergerDocuments = function (fileInfos, formatResultatMerge) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.manipulerArchives = function (fileInfos, formatResultatMerge, typeOuvertureArchive) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.archiver = function (putDocumentInput, authentInfo) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.convertBase64ToBin = function (urls) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.purge = function (hour) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.fermetureSpiFactory = function () {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.setConfigurationScanner = function (typeScanner) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.retrieveGedDocument = function (applicationCode, gedDocumentParams, authentInfo) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.saveDocument = function (document) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                /**
                 * @author : Benoît Ouvrié
                 * @version : 20.03
                 * Sauvegarde le document GED (passé en paramètre) sur le poste à l'endroit précisé en paramètre
                 * puis ouvre le document.
                 * @param document interface de type IBase64File. Il contient l'équivalent en base64 du document GED (base64),
                 * le chemin où le document GED sera sauvegardé (path) et le nom du fichier (name).
                 * @returns une IPromesse de type string représentant le chemin du document sur le poste.
                */
                AcquisitionApiBase.prototype.saveDocumentGedAtAndOpen = function (document) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                /**
                 * @author : Benoît Ouvrié
                 * @version : 20.03
                 * Ouvre le fichier présent sur le poste localement à l'adresse fournie en paramètre.
                 * @param localisationFichierSurLePoste chemin du fichier à ouvrir.
                 * @returns une IPromesse de type booelan : true si l'ouverture s'est bien passée.
                 */
                AcquisitionApiBase.prototype.uploadDocumentFrom = function (localisationFichierSurLePoste) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                AcquisitionApiBase.prototype.openDocument = function (document) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                /**
                 * @author : Benoît Ouvrié.
                 * @version : 20.03
                 * @description : vérification de la prise en main (ou non) à distance du poste.
                 * @returns Une promesse de type IPrisEnMainADistanceResult.
                 */
                AcquisitionApiBase.prototype.isPrisEnMainADistance = function () {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                /**
                 * @author : Benoît Ouvrié.
                 * @version : 20.03
                 * @description : liste des scanners accessibles depuis le poste.
                 * @returns Une promesse de type liste de IScannerAccessibleResult.
                 */
                AcquisitionApiBase.prototype.getListeScanner = function () {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve();
                    return deferred.promise;
                };
                return AcquisitionApiBase;
            }());
            Acquisition.AcquisitionApiBase = AcquisitionApiBase;
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            var AcquisitionApiFactory = /** @class */ (function (_super) {
                __extends(AcquisitionApiFactory, _super);
                function AcquisitionApiFactory() {
                    var _this = _super.call(this, Services.Components.ComponentType.Acquisition) || this;
                    _this.api = null;
                    return _this;
                }
                AcquisitionApiFactory.prototype.init = function (capabilities, libraryManager, apiInitializer) {
                    var _this = this;
                    if (capabilities.ServiceLocal) {
                        this.api = new Acquisition.AcquisitionApiWindows();
                    }
                    else {
                        this.api = new Acquisition.AcquisitionApiFullWeb();
                    }
                    return _super.prototype.init.call(this, capabilities, libraryManager, apiInitializer).then(function () {
                        return _this.api.initApi(libraryManager);
                    });
                };
                AcquisitionApiFactory.prototype.initApi = function (libraryManagerApi) {
                };
                AcquisitionApiFactory.prototype.recuperationImageKofax = function (fileInfos) {
                    return this.api.recuperationImageKofax(fileInfos);
                };
                AcquisitionApiFactory.prototype.creerImagesBitonales = function (base64List, pCreerImageBitonalParams) {
                    return this.api.creerImagesBitonales(base64List, pCreerImageBitonalParams);
                };
                AcquisitionApiFactory.prototype.traitementRADLAD = function (base64List, params, authentInfo) {
                    return this.api.traitementRADLAD(base64List, params, authentInfo);
                };
                AcquisitionApiFactory.prototype.convertFileToImg = function (fileInfo, params) {
                    return this.api.convertFileToImg(fileInfo, params);
                };
                AcquisitionApiFactory.prototype.mergerPdfs = function (fileInfos) {
                    return this.api.mergerPdfs(fileInfos);
                };
                AcquisitionApiFactory.prototype.mergerDocuments = function (fileInfos, formatResultatMerge) {
                    return this.api.mergerDocuments(fileInfos, formatResultatMerge);
                };
                AcquisitionApiFactory.prototype.manipulerArchives = function (fileInfos, formatResultatMerge, typeOuvertureArchive) {
                    return this.api.manipulerArchives(fileInfos, formatResultatMerge, typeOuvertureArchive);
                };
                AcquisitionApiFactory.prototype.archiver = function (putDocumentInput, authentInfo) {
                    return this.api.archiver(putDocumentInput, authentInfo);
                };
                AcquisitionApiFactory.prototype.convertBase64ToBin = function (urls) {
                    return this.api.convertBase64ToBin(urls);
                };
                AcquisitionApiFactory.prototype.purge = function (hour) {
                    return this.api.purge(hour);
                };
                AcquisitionApiFactory.prototype.fermetureSpiFactory = function () {
                    return this.api.fermetureSpiFactory();
                };
                AcquisitionApiFactory.prototype.setConfigurationScanner = function (typeScanner) {
                    return this.api.setConfigurationScanner(typeScanner);
                };
                AcquisitionApiFactory.prototype.retrieveGedDocument = function (applicationCode, gedDocumentParams, authentInfo) {
                    return this.api.retrieveGedDocument(applicationCode, gedDocumentParams, authentInfo);
                };
                AcquisitionApiFactory.prototype.saveDocument = function (document) {
                    return this.api.saveDocument(document);
                };
                /**
                 * @author : Benoît Ouvrié
                 * @version : 20.03
                 * @description : Appel à l'api pour sauvegarder le document GED (passé en paramètre) sur le poste à l'endroit précisé en paramètre
                 * puis pour ouvrir le document.
                 * @param document interface de type IBase64File. Il contient l'équivalent en base64 du document GED (base64),
                 * le chemin où le document GED sera sauvegardé (path) et le nom du fichier (name).
                 * @returns une IPromesse de type string représentant le chemin du document sur le poste.
                */
                AcquisitionApiFactory.prototype.saveDocumentGedAtAndOpen = function (document) {
                    return this.api.saveDocumentGedAtAndOpen(document);
                };
                /**
                 * @author : Benoît Ouvrié
                 * @version : 20.03
                 * Ouvre le fichier présent sur le poste localement à l'adresse fournie en paramètre.
                 * @param cheminDuFichierSurLePoste chemin du fichier à ouvrir.
                 * @returns une IPromesse de type booelan : true si l'ouverture s'est bien passée.
                 */
                AcquisitionApiFactory.prototype.uploadDocumentFrom = function (cheminDuFichierSurLePoste) {
                    return this.api.uploadDocumentFrom(cheminDuFichierSurLePoste);
                };
                AcquisitionApiFactory.prototype.openDocument = function (document) {
                    return this.api.openDocument(document);
                };
                /**
                 * @author : Benoît Ouvrié.
                 * @version : 20.03
                 * @description : vérification de la prise en main (ou non) à distance du poste.
                 * @returns Une promesse de type IPrisEnMainADistanceResult.
                 */
                AcquisitionApiFactory.prototype.isPrisEnMainADistance = function () {
                    return this.api.isPrisEnMainADistance();
                };
                /**
                 * @author : Benoît Ouvrié.
                 * @version : 20.03
                 * @description : liste des scanners accessibles depuis le poste.
                 * @returns Une promesse de type liste de IScannerAccessibleResult.
                 */
                AcquisitionApiFactory.prototype.getListeScanner = function () {
                    return this.api.getListeScanner();
                };
                return AcquisitionApiFactory;
            }(Services.Components.ComponentApiBase));
            Acquisition.AcquisitionApiFactory = AcquisitionApiFactory;
            Services.Components.RegistryApi.getInstance().register(AcquisitionApiFactory);
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            var AcquisitionApiFullWeb = /** @class */ (function (_super) {
                __extends(AcquisitionApiFullWeb, _super);
                function AcquisitionApiFullWeb() {
                    return _super.call(this) || this;
                }
                return AcquisitionApiFullWeb;
            }(Acquisition.AcquisitionApiBase));
            Acquisition.AcquisitionApiFullWeb = AcquisitionApiFullWeb;
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            var AcquisitionApiWindows = /** @class */ (function (_super) {
                __extends(AcquisitionApiWindows, _super);
                function AcquisitionApiWindows() {
                    var _this = _super.call(this) || this;
                    _this._url = Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + "/acquisition/";
                    _this._RADLADUrl = Services.PrivatePortalServiceParameters.Instance().RADLADUrl;
                    _this._StockageUrl = Services.PrivatePortalServiceParameters.Instance().StockageUrl;
                    _this._GedUrl = Services.PrivatePortalServiceParameters.Instance().GedUrl;
                    return _this;
                }
                AcquisitionApiWindows.prototype.recuperationImageKofax = function (fileInfos) {
                    var settings = {
                        url: this._url + "/RecuperationImageKofax",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: JSON.stringify(fileInfos),
                        cache: false
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                AcquisitionApiWindows.prototype.creerImagesBitonales = function (base64, params) {
                    var settings = {
                        url: this._url + "/CreerImagesBitonales",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: JSON.stringify({
                            base64List: JSON.parse(base64),
                            creerImageBitonalParams: params
                        })
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                AcquisitionApiWindows.prototype.traitementRADLAD = function (base64List, params, authentInfo) {
                    var settings = {
                        url: this._RADLADUrl,
                        method: Services.MethodEnum.POST,
                        data: {
                            docElect: base64List,
                            activationVRS: params.activationVRS,
                            activationLAD: params.activationLAD
                        },
                        withHeaders: true,
                        authentificationInfo: authentInfo
                    };
                    base64List.forEach(function (base64) {
                        base64.replace(/(?:\r\n|\r|\n)/g, '');
                    });
                    return this.libraryManager.Core.sendRequest(settings);
                };
                AcquisitionApiWindows.prototype.convertFileToImg = function (fileInfo, params) {
                    var settings = {
                        url: this._url + "/ConvertFileToImg",
                        method: Services.MethodEnum.POST,
                        async: true,
                        timeout: 60000,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: JSON.stringify({
                            fileInfo: fileInfo,
                            convertFileParams: params
                        })
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                AcquisitionApiWindows.prototype.mergerPdfs = function (fileInfos) {
                    var settings = {
                        url: this._url + "/MergerPdfs",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: JSON.stringify(fileInfos),
                        timeout: 120000
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                /**
                 * sollicitation de la méthode MergerDocuments du service local permettant de récupérer le chemin du fichier de résultat (au format demandé) mergeant les documents passés en paramètres.
                 * Si le format demandé est de type FORMAT_MERGE.PDF mais qu'un des documents n'est pas de ce type, une archive au format FORMAT_MERGE.ZIP sera créée.
                 * @param fileInfos tableau de IFileInformation contenant les éléments des documents à merger ou à archiver
                 * @param pFormatResultatMerge FORMAT_MERGE format du fichier de résultat.
                 * @returns une promesse de type string contenant le chemin du fichier de résultat.
                 */
                AcquisitionApiWindows.prototype.mergerDocuments = function (fileInfos, pFormatResultatMerge) {
                    var settings = {
                        url: this._url + "/MergerDocuments",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: JSON.stringify({
                            mergeFileInfo: fileInfos,
                            formatResultatMerge: pFormatResultatMerge
                        }),
                        timeout: 120000
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                /**
                 * sollicitation de la méthode ManipulerArchives du service local permettant de constituer uen archive (au format demandé) et de l'ouvrir ou de l'inclure en pièce jointe d'un mail.
                 * Si le format demandé est de type FORMAT_MERGE.PDF mais qu'un des documents n'est pas de ce type, une archive au format FORMAT_MERGE.ZIP sera créée.
                 * @param fileInfos tableau de IFileInformation contenant les éléments des documents à merger ou à archiver
                 * @param pFormatResultatMerge FORMAT_MERGE format du fichier de résultat.
                 * @param pTypeOuvertureArchive OUVERTURE_ARCHIVE type de manipulation de l'archive (ouverture ou ajout en pièce jointe d'un mail).
                 * @returns une promesse de type Boolean : true si tout s'est bien passé.
                 */
                AcquisitionApiWindows.prototype.manipulerArchives = function (fileInfos, pFormatResultatMerge, pTypeOuvertureArchive) {
                    var settings = {
                        url: this._url + "/ManipulerArchives",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: JSON.stringify({
                            mergeFileInfo: fileInfos,
                            formatResultatMerge: pFormatResultatMerge,
                            systemeOuvertureArchive: pTypeOuvertureArchive
                        }),
                        timeout: 120000
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                AcquisitionApiWindows.prototype.archiver = function (putDocumentInput, authentInfo) {
                    var settings = {
                        withHeaders: true,
                        url: this._StockageUrl,
                        method: Services.MethodEnum.PUT,
                        data: putDocumentInput,
                        authentificationInfo: authentInfo,
                        timeout: 120000
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                AcquisitionApiWindows.prototype.convertBase64ToBin = function (urls) {
                    var settings = {
                        url: this._url + "/ConvertBase64ToBin",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: JSON.stringify(urls)
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                AcquisitionApiWindows.prototype.purge = function (hour) {
                    var settings = {
                        url: this._url + "/Purge",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: JSON.stringify(hour)
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                AcquisitionApiWindows.prototype.fermetureSpiFactory = function () {
                    var settings = {
                        url: this._url + "/FermetureSpiFactory",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                AcquisitionApiWindows.prototype.setConfigurationScanner = function (typeScanner) {
                    var settings = {
                        url: this._url + "/SetConfigurationScanner?typeScanner=" + typeScanner,
                        method: Services.MethodEnum.POST
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                AcquisitionApiWindows.prototype.retrieveGedDocument = function (codeApplication, gedDocumentParams, authentInfo) {
                    var settings = {
                        url: this._GedUrl,
                        method: Services.MethodEnum.GET,
                        withHeaders: true,
                        params: {
                            idDocument: gedDocumentParams.id,
                            codeApplication: codeApplication,
                            indicateurDocument: true
                        }
                    };
                    if (gedDocumentParams.nature !== undefined && gedDocumentParams.nature !== null) {
                        /* INC002318964 : remplacement du paramètre nature par codeTypeNatrDoc */
                        settings.params.codeTypeNatrDoc = gedDocumentParams.nature;
                    }
                    // appel du service
                    return this.libraryManager.Core.sendRequest(settings).catch(function (erreurRetrieveDocument) {
                        throw erreurRetrieveDocument;
                    });
                };
                AcquisitionApiWindows.prototype.saveDocument = function (document) {
                    var settings = {
                        url: this._url + "/SaveDocument",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: JSON.stringify(document),
                        timeout: 60000
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                /**
                 * @author : Benoît Ouvrié
                 * @version : 20.03
                 * @description : Appel au serviceLocal pour sauvegarder le document GED (passé en paramètre) sur le poste à l'endroit précisé en paramètre
                 * puis pour ouvrir le document.
                 * @param document interface de type IBase64File. Il contient l'équivalent en base64 du document GED (base64),
                 * le chemin où le document GED sera sauvegardé (path) et le nom du fichier (name).
                 * @returns une IPromesse de type string représentant le chemin du document sur le poste.
                */
                AcquisitionApiWindows.prototype.saveDocumentGedAtAndOpen = function (document) {
                    var settings = {
                        url: this._url + "/SaveDocumentGedAtAndOpen",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: JSON.stringify(document),
                        timeout: 60000
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                }; // FIN saveDocumentGedAtAndOpen
                /**
                 * @author : Benoît Ouvrié
                 * @version : 20.03
                 * @description : Ouvre le fichier présent sur le poste localement à l'adresse fournie en paramètre.
                 * @param cheminDuFichierSurLePoste chemin du fichier à ouvrir.
                 * @returns une IPromesse de type booelan : true si l'ouverture s'est bien passée.
                 */
                AcquisitionApiWindows.prototype.uploadDocumentFrom = function (cheminDuFichierSurLePoste) {
                    var settings = {
                        url: this._url + "/UploadDocumentFrom",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: JSON.stringify(cheminDuFichierSurLePoste),
                        timeout: 60000
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                }; // FIN uploadDocumentFrom
                AcquisitionApiWindows.prototype.openDocument = function (document) {
                    var settings = {
                        url: this._url + "/OpenDocument",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: JSON.stringify(document),
                        timeout: 60000
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                /**
                 * @author : Benoît Ouvrié.
                 * @version : 20.03
                 * @description : liste des scanners accessibles depuis le poste.
                 * @returns Une promesse de type liste de IScannerAccessibleResult.
                 */
                AcquisitionApiWindows.prototype.getListeScanner = function () {
                    var settings = {
                        url: this._url + "/GetListeScanner",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                /**
                 * @author : Benoît Ouvrié.
                 * @version : 20.03
                 * @description : vérification de la prise en main (ou non) à distance du poste.
                 * @returns Une promesse de type IPrisEnMainADistanceResult.
                 */
                AcquisitionApiWindows.prototype.isPrisEnMainADistance = function () {
                    var settings = {
                        url: this._url + "/IsPrisEnMainADistance",
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON
                    };
                    return this.libraryManager.Core.sendRequest(settings);
                };
                return AcquisitionApiWindows;
            }(Acquisition.AcquisitionApiBase));
            Acquisition.AcquisitionApiWindows = AcquisitionApiWindows;
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            BriqueCommunication.URLBASE_CONFIGURATION = "ws://126.246.166.113:8000/jms";
            BriqueCommunication.TOPIC_CONFIGURATION_GENERALE = "/topic/BGC_CONFIGURATION";
            var KaazingCanalType;
            (function (KaazingCanalType) {
                KaazingCanalType[KaazingCanalType["JMS"] = 0] = "JMS";
            })(KaazingCanalType = BriqueCommunication.KaazingCanalType || (BriqueCommunication.KaazingCanalType = {}));
            var CanalControlerReadOnly = /** @class */ (function () {
                function CanalControlerReadOnly(_close) {
                    var _this = this;
                    this._close = _close;
                    this._reader = null;
                    this._lastMessage = null;
                    this._hasMessage = false;
                    this._reader = function (pValue) {
                        _this._lastMessage = pValue;
                        _this._hasMessage = true;
                    };
                }
                Object.defineProperty(CanalControlerReadOnly.prototype, "reader", {
                    get: function () {
                        return this._reader;
                    },
                    set: function (pReader) {
                        this._reader = pReader;
                        if (this._hasMessage) {
                            this._reader(this._lastMessage);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CanalControlerReadOnly.prototype, "close", {
                    get: function () {
                        return this._close;
                    },
                    enumerable: true,
                    configurable: true
                });
                return CanalControlerReadOnly;
            }());
            BriqueCommunication.CanalControlerReadOnly = CanalControlerReadOnly;
            var CanalControler = /** @class */ (function (_super) {
                __extends(CanalControler, _super);
                function CanalControler(close) {
                    var _this = _super.call(this, close) || this;
                    _this.writer = null;
                    return _this;
                }
                return CanalControler;
            }(CanalControlerReadOnly));
            BriqueCommunication.CanalControler = CanalControler;
            var InfosAgentType;
            (function (InfosAgentType) {
                InfosAgentType[InfosAgentType["CLIENT"] = "CLIENT"] = "CLIENT";
                InfosAgentType[InfosAgentType["ADVISER"] = "ADVISOR"] = "ADVISER";
                InfosAgentType[InfosAgentType["EXPERT"] = "EXPERT"] = "EXPERT";
                InfosAgentType[InfosAgentType["PROSPECT"] = "PROSPECT"] = "PROSPECT";
            })(InfosAgentType = BriqueCommunication.InfosAgentType || (BriqueCommunication.InfosAgentType = {}));
            /* istanbul ignore next */
            var BriqueCommunicationApi = /** @class */ (function (_super) {
                __extends(BriqueCommunicationApi, _super);
                function BriqueCommunicationApi() {
                    return _super.call(this, Services.Components.ComponentType.BriqueCommunication) || this;
                }
                /**
                 *
                 * @param pUrl
                 * @param pAuthentificationInfo
                 * @return Promesse avec une session Kaazing. Doit mettre ANY car sinon le portal.d.ts doit référencer Kaazing (c'est moche!)
                 */
                BriqueCommunicationApi.prototype.connect = function (pUrl, pAuthentificationInfo) {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var lConnectionFactory = new JmsConnectionFactory(pUrl);
                        BriqueCommunicationApi.logger.debug("Création de la connexion vers %1", pUrl);
                        if (pUrl.match('jmssec')) {
                            var lToken = _this.generateToken(pAuthentificationInfo);
                            var myChallengeHander = function () {
                                this.canHandle = function (challengeRequest) {
                                    // Return true if challengeRequest.authenticationScheme matches your scheme.
                                    return challengeRequest != null && "token" == challengeRequest.authenticationScheme.trim().toLowerCase();
                                };
                                this.handle = function (challengeRequest, callback) {
                                    var challengeResponse = null;
                                    if (challengeRequest.location != null) {
                                        if (lToken != null) {
                                            // Set the token to challengeResponse
                                            challengeResponse = new ChallengeResponse("Token " + lToken, null);
                                        }
                                    }
                                    // Invoke callback function with challenge response
                                    callback(challengeResponse);
                                };
                            };
                            lConnectionFactory.getWebSocketFactory().setChallengeHandler(new myChallengeHander());
                        }
                        var lConnectionFuture = lConnectionFactory.createConnection(function () {
                            BriqueCommunicationApi.logger.debug("Connexion OK de %1", pUrl);
                            try {
                                var lConnexion = lConnectionFuture.getValue();
                                var lSession = lConnexion.createSession(false, Session.AUTO_ACKNOWLEDGE);
                                var lOldClose = lSession.close;
                                lSession.close = function (pCallback) {
                                    return lOldClose(function () {
                                        lConnexion.close(pCallback);
                                    });
                                };
                                lConnexion.start(function () {
                                    pDefer.resolve(lSession);
                                });
                            }
                            catch (e) {
                                BriqueCommunicationApi.logger.error('Erreur: %1', JSON.pruned(e));
                            }
                        });
                    });
                };
                BriqueCommunicationApi.prototype.generateToken = function (pAuthentificationInfo) {
                    var lId = Services.CoreCommon.StringUtils.leftPad(pAuthentificationInfo.agentConnecte.referenceExterneAgent, '0', 7);
                    return JSON.stringify({
                        login: "agent-S" + lId,
                        userid: "agent-S" + lId,
                        type: "CLIENT",
                        token: "token",
                        establishment: pAuthentificationInfo.codeEtablissement
                    });
                };
                BriqueCommunicationApi.CLASS_NAME = 'MyWay.Services.BriqueCommunication.BriqueCommunicationApi';
                BriqueCommunicationApi.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(BriqueCommunicationApi.CLASS_NAME);
                return BriqueCommunicationApi;
            }(Services.Components.ComponentApiBase));
            BriqueCommunication.BriqueCommunicationApi = BriqueCommunicationApi;
            Services.Components.RegistryApi.getInstance().register(BriqueCommunicationApi);
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la Communication
* @module MyWay.Services.Communication
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Communication;
        (function (Communication) {
            /**
            *  Classe permettant d'accéder aux données de communication
            */
            var CommunicationApiBase = /** @class */ (function () {
                function CommunicationApiBase() {
                    this.libraryManager = null;
                    this._numerotationTelephoniqueUrl = Services.PrivatePortalServiceParameters.Instance().NumerotationTelephoniqueUrl;
                }
                CommunicationApiBase.prototype.initApi = function (libraryManagerApi) {
                    this.libraryManager = libraryManagerApi;
                };
                /**
                  * Permet de déclencher un appel
                  *
                  * @param  {Call}  call        Données de l'appel
                  * @param  {AuthentificationInfo}  authentificationInfo        Données personnelles de l'utilisateur
                  * @return {IPromesse<INumerotationTelephoniqueDTO>}                DTO reçu par le service REST
                  */
                CommunicationApiBase.prototype.declencherAppel = function (call, authentificationInfo) {
                    if (call.numeroDestinataire && authentificationInfo.codeEtablissement && authentificationInfo.agentConnecte.referenceExterneAgent) {
                        // valorisation des paramètres du sendRequest
                        var settings = {
                            url: this._numerotationTelephoniqueUrl + '?numeroDestinataire=' + call.numeroDestinataire,
                            method: Services.MethodEnum.PUT,
                            authentificationInfo: authentificationInfo
                        };
                        // Appel du service
                        return this.libraryManager.Core.sendRequest(settings)
                            .catch(function (erreur) {
                            Communication.CommunicationApiFullWeb.loggerCommunicationApiBase.error('SendRequest declencherAppel Failed - %1', JSON.stringify(erreur));
                            throw erreur;
                        });
                    }
                    else {
                        return this.libraryManager.Core.createPromiseSelfError(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_COMMUNICATION_PARAMETRES_INSUFFISANTS));
                    }
                };
                /**
                 * Permet de raccrocher un appel
                 *
                 * @param  {AuthentificationInfo}           authentificationInfo        Données personnelles de l'utilisateur
                 * @return {IPromesse<INumerotationTelephoniqueDTO>}    DTO reçu par le service REST
                 */
                CommunicationApiBase.prototype.raccrocherAppel = function (authentificationInfo) {
                    if (authentificationInfo.codeEtablissement && authentificationInfo.agentConnecte.referenceExterneAgent) {
                        // valorisation des paramètres du sendRequest
                        var settings = {
                            url: this._numerotationTelephoniqueUrl,
                            method: Services.MethodEnum.DELETE,
                            authentificationInfo: authentificationInfo
                        };
                        // Appel du service
                        return this.libraryManager.Core.sendRequest(settings)
                            .catch(function (erreur) {
                            Communication.CommunicationApiFullWeb.loggerCommunicationApiBase.error('SendRequest raccrocherAppel Failed - %1', JSON.stringify(erreur));
                            throw erreur;
                        });
                    }
                    else {
                        return this.libraryManager.Core.createPromiseSelfError(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_COMMUNICATION_PARAMETRES_INSUFFISANTS));
                    }
                }; // fin raccrocherAppel(...)        
                CommunicationApiBase.prototype.envoyerMessageAppliKiosque = function (messageAgent) {
                    return Services.Promesses.createPromiseSelfResolved("");
                };
                CommunicationApiBase.CLASS_NAME_BASE = 'MyWay.Services.Communication.CommunicationApiBase';
                CommunicationApiBase.loggerCommunicationApiBase = Services.Loggers.LoggerFactory.INSTANCE.getClass(CommunicationApiBase.CLASS_NAME_BASE);
                return CommunicationApiBase;
            }());
            Communication.CommunicationApiBase = CommunicationApiBase;
        })(Communication = Services.Communication || (Services.Communication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Communication;
        (function (Communication) {
            var CommunicationApiFullWeb = /** @class */ (function (_super) {
                __extends(CommunicationApiFullWeb, _super);
                function CommunicationApiFullWeb() {
                    return _super.call(this) || this;
                }
                return CommunicationApiFullWeb;
            }(Communication.CommunicationApiBase));
            Communication.CommunicationApiFullWeb = CommunicationApiFullWeb;
        })(Communication = Services.Communication || (Services.Communication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Impression"] = "Impression";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Impression;
        (function (Impression) {
            var Messages;
            (function (Messages) {
                var ImpressionMessageSubject;
                (function (ImpressionMessageSubject) {
                    ImpressionMessageSubject[ImpressionMessageSubject["Generer"] = 0] = "Generer";
                    ImpressionMessageSubject[ImpressionMessageSubject["GetJsonConverti"] = 1] = "GetJsonConverti";
                    ImpressionMessageSubject[ImpressionMessageSubject["Imprimer"] = 2] = "Imprimer";
                    ImpressionMessageSubject[ImpressionMessageSubject["ImprimerLot"] = 3] = "ImprimerLot";
                    ImpressionMessageSubject[ImpressionMessageSubject["GenererImprimer"] = 4] = "GenererImprimer";
                })(ImpressionMessageSubject = Messages.ImpressionMessageSubject || (Messages.ImpressionMessageSubject = {}));
                //Enregistrement du composant et de ses dépendances
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Impression, [
                    Services.Components.ComponentType.Context,
                    Services.Components.ComponentType.Core,
                    Services.Components.ComponentType.Display,
                    Services.Components.ComponentType.Fichier,
                    Services.Components.ComponentType.Libelle
                ]);
            })(Messages = Impression.Messages || (Impression.Messages = {}));
        })(Impression = Services.Impression || (Services.Impression = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des impressions (module commun aux agents et aux managers)
* @module MyWay.Services.Impression
* @enum RESTITUTION_VERSION - public - Enumération correspondant aux différentes versions du serveur de restitution
* @enum GENERATION_ACTION - public - Enumération correspondant aux différentes actions du service de génération
* @enum GENERATION_IMPRESSION_ACTION - public - Enumération correspondant aux différentes actions du service de génération et d'impression
* @enum TYPE_IMAGE - public - Enumération correspondant aux différentes types de données images possibles dans le flux de données d'impression
* @interface DocumentGenere - public - Interface permettant de décrire un objet document généré
* @interface DocumentImpressionLot - public - Interface permettant de définir les paramètres de documents pour l'impression par lot
* @interface GenerationParams - public - Interface permettant de définir les paramètres de génération d'un document
* @interface ParametresGenerationSysteme - public - Interface permettant de définir les paramètres système pour la génération d'un document
* @interface ParametresGenerationObligatoires - public - Interface permettant de définir les paramètres obligatoires pour la génération d'un document
* @interface ParametresGenerationFichier - public - Interface permettant de définir les paramètres nécessaires à la génération d'un fichier d'impression
* @interface ParametresGenerationOptionnels - public - Interface permettant de définir les paramètres optionnels pour la génération d'un document
* @interface MentionsLegales - public - Interface permettant de définir les mentions légales
* @interface Archivage - public - Interface permettant d’archiver lors de la génération du fichier
* @interface GceContextSoapHeader - public - Interface contenant les  informations d'entête du contexte SOAP
* @interface AQstnCreerDoc - public - Interface contenant les questions pour la création de document
* @interface DonnCntx - public - Interface contenant les données contextuelles
* @interface Document - public - Interface permettant de créer un document
* @interface ProprietesDoc - public - Interface contenant les métadonnées du document à créer
* @interface FichierDoc - public - Interface contenant les propriétés propres à la pièce-jointe du document à créer
* @interface BlocGenerique - public - Interface
* @interface ImpressionParams - public - Interface permettant de définir les paramètres d'impression d'un document
* @interface ParametresImpressionObligatoires - public - Interface permettant de définir les paramètres obligatoires pour l'impression d'un document
* @interface ParametresImpressionOptionnels - public - Interface permettant de définir les paramètres optionnels pour l'impression d'un document
* @interface GenerationImpressionParams - public - Interface permettant de définir les paramètres de génération et d'impression d'un document
* @interface ParametresGenerationImpressionObligatoires - public - Interface permettant de définir les paramètres obligatoires pour la génération et l'impression d'un document
* @interface ParametresGenerationImpressionOptionnels - public - Interface permettant de définir les paramètres optionnels pour la génération et l'impression d'un document
* @interface ParametreActiveX - public - Interface permettant de définir les paramètres de l'ActiveX d'impression pour une impression simple
* @interface ParametresActiveXIndividuels - public - Interface permettant de définir les paramètres individuels de l'ActiveX d'impression pour une impression par lot
* @interface ParametresActiveXGlobaux - public - Interface permettant de définir les paramètres globaux de l'ActiveX d'impression pour une impression par lot
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Impression;
        (function (Impression) {
            /**
            * Enumération correspondant aux différentes versions du serveur de restitution
            * @enum Impression.RESTITUTION_VERSION
            */
            var RESTITUTION_VERSION;
            (function (RESTITUTION_VERSION) {
                /** Version 180 du serveur de restitution */
                RESTITUTION_VERSION[RESTITUTION_VERSION["V180"] = 180] = "V180";
            })(RESTITUTION_VERSION = Impression.RESTITUTION_VERSION || (Impression.RESTITUTION_VERSION = {}));
            ;
            /**
            * Enumération correspondant aux différentes actions de génération possibles
            * @enum Impression.GENERATION_ACTION
            */
            var GENERATION_ACTION;
            (function (GENERATION_ACTION) {
                /** Permet d'archiver le document généré en GED */
                GENERATION_ACTION[GENERATION_ACTION["archiver"] = 10] = "archiver";
                /** Permet d'archiver en GED et d'obtenir le fichier généré */
                GENERATION_ACTION[GENERATION_ACTION["archiverAndGetFichier"] = 20] = "archiverAndGetFichier";
                /** Permet d'obtenir le fichier généré */
                GENERATION_ACTION[GENERATION_ACTION["getFichier"] = 30] = "getFichier";
            })(GENERATION_ACTION = Impression.GENERATION_ACTION || (Impression.GENERATION_ACTION = {}));
            ;
            /**
            * Enumération correspondant aux différentes actions de génération et d'impression possibles
            * @enum Impression.GENERATION_IMPRESSION_ACTION
            */
            var GENERATION_IMPRESSION_ACTION;
            (function (GENERATION_IMPRESSION_ACTION) {
                /** Permet d'archiver en GED et d'obtenir le fichier généré et imprimé */
                GENERATION_IMPRESSION_ACTION[GENERATION_IMPRESSION_ACTION["archiverAndGetFichier"] = 20] = "archiverAndGetFichier";
                /** Permet d'obtenir le fichier généré et imprimé */
                GENERATION_IMPRESSION_ACTION[GENERATION_IMPRESSION_ACTION["getFichier"] = 30] = "getFichier";
            })(GENERATION_IMPRESSION_ACTION = Impression.GENERATION_IMPRESSION_ACTION || (Impression.GENERATION_IMPRESSION_ACTION = {}));
            ;
            /**
            * Enumération correspondant aux différentes types de données images possibles dans le flux de données d'impression
            * @enum Impression.TYPE_IMAGE
            */
            var TYPE_IMAGE;
            (function (TYPE_IMAGE) {
                /** Nom de l'image */
                TYPE_IMAGE[TYPE_IMAGE["Id"] = 0] = "Id";
                /** Image en Base 64 */
                TYPE_IMAGE[TYPE_IMAGE["Flux"] = 1] = "Flux";
            })(TYPE_IMAGE = Impression.TYPE_IMAGE || (Impression.TYPE_IMAGE = {}));
        })(Impression = Services.Impression || (Services.Impression = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["DonneesDelocalisees"] = "DonneesDelocalisees";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var DonneesDelocalisees;
        (function (DonneesDelocalisees) {
            var Messages;
            (function (Messages) {
                var DonneesDelocaliseesMessageSubject;
                (function (DonneesDelocaliseesMessageSubject) {
                    DonneesDelocaliseesMessageSubject[DonneesDelocaliseesMessageSubject["GetDonneesDelocalisees"] = 0] = "GetDonneesDelocalisees";
                    DonneesDelocaliseesMessageSubject[DonneesDelocaliseesMessageSubject["GetListeDonneesDelocalisees"] = 1] = "GetListeDonneesDelocalisees";
                    DonneesDelocaliseesMessageSubject[DonneesDelocaliseesMessageSubject["GetRubriqueLibelle"] = 2] = "GetRubriqueLibelle";
                    DonneesDelocaliseesMessageSubject[DonneesDelocaliseesMessageSubject["GetDonneesParCriteres"] = 3] = "GetDonneesParCriteres";
                    DonneesDelocaliseesMessageSubject[DonneesDelocaliseesMessageSubject["ReInitDbDonneesDelocalisees"] = 4] = "ReInitDbDonneesDelocalisees";
                    DonneesDelocaliseesMessageSubject[DonneesDelocaliseesMessageSubject["GetTDTById"] = 5] = "GetTDTById";
                    DonneesDelocaliseesMessageSubject[DonneesDelocaliseesMessageSubject["DeleteTDTById"] = 6] = "DeleteTDTById";
                })(DonneesDelocaliseesMessageSubject = Messages.DonneesDelocaliseesMessageSubject || (Messages.DonneesDelocaliseesMessageSubject = {}));
                //Enregistrement du composant et de ses dépendances
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.DonneesDelocalisees, [
                    Services.Components.ComponentType.Context,
                    Services.Components.ComponentType.Dates,
                    Services.Components.ComponentType.Libelle,
                    Services.Components.ComponentType.BaseDeDonnees
                ]);
            })(Messages = DonneesDelocalisees.Messages || (DonneesDelocalisees.Messages = {}));
        })(DonneesDelocalisees = Services.DonneesDelocalisees || (Services.DonneesDelocalisees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des données délocalisées (module commun aux agents et aux managers)
* @module MyWay.Services.DonneesDelocalisees
* enum : CRITERES_OPERATEUR - public - Enumération correspondant aux différents opérateurs applicables sur un critère
* interface : ObjectDataCritere - public - Description d'un critère de recherche pour un objet de données
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var DonneesDelocalisees;
        (function (DonneesDelocalisees) {
            /**
            * Enumération correspondant aux différents opérateurs applicables sur un critère
            * @enum DonneesDelocalisees.CRITERES_OPERATEUR
            */
            var CRITERES_OPERATEUR;
            (function (CRITERES_OPERATEUR) {
                CRITERES_OPERATEUR[CRITERES_OPERATEUR["EGAL"] = 0] = "EGAL";
                CRITERES_OPERATEUR[CRITERES_OPERATEUR["CONTIENT"] = 1] = "CONTIENT";
            })(CRITERES_OPERATEUR = DonneesDelocalisees.CRITERES_OPERATEUR || (DonneesDelocalisees.CRITERES_OPERATEUR = {}));
            ;
        })(DonneesDelocalisees = Services.DonneesDelocalisees || (Services.DonneesDelocalisees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des libellés
* @module MyWay.Services.Libelle
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Libelle;
        (function (Libelle) {
            var LibelleAgent = /** @class */ (function (_super) {
                __extends(LibelleAgent, _super);
                /*
                * Appelé par le ServiceAgent
                */
                function LibelleAgent() {
                    return _super.call(this, Services.Components.ComponentType.Libelle) || this;
                }
                /**
                 * Permet au portail d'afficher un message à l'aide d'une modal bootstrap ou d'une application.
                 *
                 * ~~~ts
                 * $scope.message_information = function () {
                 *   serviceAgent.Libelle.afficherMessage(MyWay.Services.Libelle.LibelleModel.COM.MESSAGE_SANS_VARIABLE, MyWay.Services.Libelle.TYPE_AFFICHAGE.INFORMATION, null, null);
                 * }
                 *
                 * // cas où une promesse est utilisée, qui renvoie le nom du bouton cliqué le cas échéant
                 *
                 * $scope.message_oui_non = function () {
                 *   serviceAgent.Libelle.afficherMessage(MyWay.Services.Libelle.LibelleModel.COM.RESULTATS, MyWay.Services.Libelle.TYPE_AFFICHAGE.OUI_NON, ["Nom 1", "Nom 2"], 1000).then((resultat: any) => {
                 *      console.log("bouton cliqué :"+resultat);
                 *   });
                 * }
                 * ~~~
                 *
                 * @param  {any} codeLibelle
                 * @param  {TYPE_AFFICHAGE}
                 * @param  {string[]} Optionnel - Tableau de string qui constitueront le message
                 * @param  {number} Optionnel - Indique le délai avant d'afficher les boutons une fois la modal ouverte
                 *
                 * @return {IPromesse<any>}
                 */
                LibelleAgent.prototype.afficherMessage = function (codeLibelle, typeAffichage, valeurs, delai) {
                    LibelleAgent.logger.info('Méthode à surveiller - afficherMessage');
                    var parametres = {
                        codeLibelle: codeLibelle,
                        typeAffichage: typeAffichage,
                        valeurs: valeurs,
                        delai: delai
                    };
                    return this.sendMessage(Libelle.LibelleMessageSubject.afficherMessage, parametres);
                };
                LibelleAgent.prototype.constituerLibelle = function (codeLibelle, valeurs) {
                    LibelleAgent.logger.info('Méthode à surveiller - constituerLibelle');
                    var parametres = {
                        codeLibelle: codeLibelle,
                        valeurs: valeurs
                    };
                    return this.sendMessage(Libelle.LibelleMessageSubject.constituerLibelle, parametres);
                };
                LibelleAgent.CLASS_NAME = 'MyWay.Services.Libelle.LibelleAgent';
                LibelleAgent.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(LibelleAgent.CLASS_NAME);
                return LibelleAgent;
            }(Services.Components.ComponentAgentBase));
            Libelle.LibelleAgent = LibelleAgent;
            Services.Components.RegistryAgent.getInstance().register(LibelleAgent);
        })(Libelle = Services.Libelle || (Services.Libelle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Libelle;
        (function (Libelle) {
            var LibelleApi = /** @class */ (function (_super) {
                __extends(LibelleApi, _super);
                function LibelleApi() {
                    var _this = _super.call(this, Services.Components.ComponentType.Libelle) || this;
                    _this.messages = null;
                    _this.managerLibelleIsReady = false;
                    _this.constituerLibellesEnAttente = [];
                    return _this;
                }
                LibelleApi.prototype.constituerLibelle = function (codeLibelle, valeurs) {
                    var _this = this;
                    if (this.managerLibelleIsReady) {
                        /* istanbul ignore next */
                        return this.libraryManager.Libelle.constituerLibelle(codeLibelle, valeurs);
                    }
                    else {
                        return this.libraryManager.Core.promesseTryCatch(function (pDefer) {
                            _this.constituerLibellesEnAttente.push(function () {
                                _this.libraryManager.Libelle.constituerLibelle(codeLibelle, valeurs).then(pDefer.resolve, pDefer.reject);
                            });
                        });
                    }
                };
                LibelleApi.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    var _this = this;
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer).then(function () {
                        var url = null;
                        if (_this.portalServiceParameters.CDNUrl) {
                            url = _this.portalServiceParameters.CDNUrl + _this.privatePortalServiceParameters.FichierMessage;
                        }
                        else {
                            url = _this.privatePortalServiceParameters.FichierMessage;
                        }
                        // Récupération du fichier des messages
                        var parametres = {};
                        parametres.method = Services.MethodEnum.GET;
                        parametres.url = url;
                        parametres.responseType = Services.ResponseTypeEnum.JSON;
                        parametres.withHeaders = false;
                        return pLibraryManager.Core.sendRequest(parametres).then(function (pData) {
                            _this.messages = pData;
                        }, function () {
                            //Ignore l'erreur
                        }).finally(function () {
                            _this.managerLibelleSetToReady();
                        });
                    }, 
                    /* istanbul ignore next */
                    function (pError) {
                        LibelleApi.logger.info('ServiceApiBase constructor SendRequest callbackError : %1', pError.codeLibelle);
                        throw pError;
                    });
                };
                LibelleApi.prototype.managerLibelleSetToReady = function () {
                    this.managerLibelleIsReady = true;
                    this.constituerLibellesEnAttente.forEach(function (pCallback) { return pCallback(); });
                };
                LibelleApi.CLASS_NAME = 'MyWay.Services.Libelle.LibelleApi';
                LibelleApi.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(LibelleApi.CLASS_NAME);
                return LibelleApi;
            }(Services.Components.ComponentApiBase));
            Libelle.LibelleApi = LibelleApi;
            Services.Components.RegistryApi.getInstance().register(LibelleApi);
        })(Libelle = Services.Libelle || (Services.Libelle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Capacites"] = "Capacites";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Capacites;
        (function (Capacites) {
            var Messages;
            (function (Messages) {
                var CapacitesMessageSubject;
                (function (CapacitesMessageSubject) {
                    CapacitesMessageSubject[CapacitesMessageSubject["GetCapacite"] = 0] = "GetCapacite";
                })(CapacitesMessageSubject = Messages.CapacitesMessageSubject || (Messages.CapacitesMessageSubject = {}));
                //Enregistrement du composant et de ses dépendances
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Capacites, [
                    Services.Components.ComponentType.Context,
                    Services.Components.ComponentType.Mobilite
                ]);
            })(Messages = Capacites.Messages || (Capacites.Messages = {}));
        })(Capacites = Services.Capacites || (Services.Capacites = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la cpacités (module commun aux agents et aux managers)
* @module MyWay.Services.Capacites
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Capacites;
        (function (Capacites) {
            /**
             * Liste des diférentes règles
             */
            var REGLE;
            (function (REGLE) {
                REGLE[REGLE["INTEROP_APPLI_BANCAIRE"] = 0] = "INTEROP_APPLI_BANCAIRE";
                REGLE[REGLE["INTEROP_WINDOWS"] = 1] = "INTEROP_WINDOWS";
                REGLE[REGLE["TABLETTE_SIGNATURE"] = 2] = "TABLETTE_SIGNATURE";
                REGLE[REGLE["CAISSE_AUTO"] = 3] = "CAISSE_AUTO";
                REGLE[REGLE["CONNECTE"] = 4] = "CONNECTE";
                REGLE[REGLE["MODIFIER_HABILITATION"] = 5] = "MODIFIER_HABILITATION";
                REGLE[REGLE["ECRAN_COMPATIBLE_MYWAY"] = 6] = "ECRAN_COMPATIBLE_MYWAY";
                REGLE[REGLE["RESEAU_INTERNE"] = 7] = "RESEAU_INTERNE";
                REGLE[REGLE["PORTAIL_MYWAY"] = 8] = "PORTAIL_MYWAY";
            })(REGLE = Capacites.REGLE || (Capacites.REGLE = {}));
            ;
        })(Capacites = Services.Capacites || (Services.Capacites = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des exports
* @module MyWay.Services.Export
* @author Laurie Marchaterre
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Export;
        (function (Export) {
            /**
            *  Classe permettant d'accéder aux données de mobilité
            */
            var ExportManager = /** @class */ (function (_super) {
                __extends(ExportManager, _super);
                function ExportManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Export) || this;
                    _this.contextKey = 'EXPORT';
                    return _this;
                }
                ExportManager.prototype.verificationDonneesAExporter = function (pDonnees) {
                    if (pDonnees === null || pDonnees.contenu === undefined || pDonnees.entetes === undefined) {
                        return this.library.Core.createPromiseSelfError(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_EXPORT_DONNEES_ENTREES_FORMAT_INVALIDE));
                    }
                    if (pDonnees.entetes === null || pDonnees.contenu === null) {
                        return this.library.Core.createPromiseSelfError(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_EXPORT_DONNEES_ENTREES_VIDE));
                    }
                    return this.library.Core.getPromesseSelfResoved();
                };
                ExportManager.prototype.convertionDonneesEnCsv = function (donnees, options) {
                    var lCsv = "";
                    var lSeparateur;
                    var lLocalisation = options && options.localisation !== undefined ? options.localisation : Export.LOCALISATION.FR;
                    var columnDetails = options && options.columnDetails !== undefined ? options.columnDetails : [];
                    //Formatage des donnees en fonction de la localisation de l'utilisateur
                    if (lLocalisation === Export.LOCALISATION.FR) {
                        lSeparateur = ";";
                    }
                    else {
                        lSeparateur = ",";
                    }
                    //Boucle pour ajouter les entetes aux donnees Csv
                    var lLigneCSV = "";
                    for (var index in donnees.entetes) {
                        lLigneCSV += donnees.entetes[index] + lSeparateur;
                    }
                    lLigneCSV = lLigneCSV.slice(0, -1);
                    lCsv += lLigneCSV + "\r\n";
                    //Boucle pour ajouter le contenu aux donnees Csv
                    donnees.contenu.forEach(function (lLignes) {
                        var lLigneCSV = "";
                        lLignes.ligne.forEach(function (lCellules, index) {
                            var defaultFormat = function (rawValue) {
                                return lCellules.cellule;
                            };
                            var columnDetail = MyWay.Services.CoreCommon.ArrayUtils.getOne(columnDetails, function (columnDetail) {
                                return (columnDetail.index === index) ? true : false;
                            });
                            if (columnDetail === null) {
                                columnDetail = {
                                    index: index,
                                    addquote: true,
                                    format: defaultFormat
                                };
                            }
                            var value = (columnDetail.format !== undefined) ? columnDetail.format(lCellules.cellule) : defaultFormat(lCellules.cellule);
                            value = (columnDetail.addquote === undefined || columnDetail.addquote === true) ? '"' + value + '"' : value;
                            lLigneCSV += value + lSeparateur;
                        });
                        lLigneCSV.slice(0, lLigneCSV.length - 1);
                        lCsv += lLigneCSV + "\r\n";
                    });
                    Services.Loggers.FLASH.INSTANCE.setValue('details', lCsv);
                    ExportManager.logger.debug('Convertion des données en CSV - Success');
                    return lCsv;
                };
                ExportManager.prototype.telechargerFichier = function (donneesTraitees, options) {
                    var lNomFichier = options && options.nomFichier ? options.nomFichier.replace(/ /g, "_") : "defaut";
                    if (Services.CoreCommon.checkIsIE()) {
                        var BOM = "\uFEFF";
                        donneesTraitees = BOM + donneesTraitees;
                        var blob = Blob ? new Blob([donneesTraitees], { type: "text/csv;charset=utf-8;" }) : null;
                        if (window.navigator && window.navigator.msSaveBlob) {
                            window.navigator.msSaveBlob(blob, lNomFichier + "." + Export.FORMAT_FICHIER.CSV);
                            ExportManager.logger.debug('Téléchargement fichier sous IE - Success');
                            return this.library.Core.createPromiseSelfResolved(donneesTraitees);
                        }
                        else {
                            ExportManager.logger.error('Téléchargement fichier sous IE - Failed');
                            return this.library.Core.createPromiseSelfError(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_EXPORT_TELECHARGEMENT_IMPOSSIBLE));
                        }
                    }
                    else {
                        var lUrl = "data:text/csv;charset=utf-8,%EF%BB%BF" + encodeURI(donneesTraitees);
                        var lLien = document.createElement("a");
                        lLien.href = lUrl;
                        lLien.style = "visibility:hidden";
                        lLien.download = lNomFichier + "." + Export.FORMAT_FICHIER.CSV;
                        document.body.appendChild(lLien);
                        lLien.click();
                        document.body.removeChild(lLien);
                        ExportManager.logger.debug('Téléchargement fichier avec navigateur non IE - Success');
                        return this.library.Core.createPromiseSelfResolved(donneesTraitees);
                    }
                };
                /**
                 * Permet d'exporter un tableau de données Json dans un fichier.
                 * @param {IDonneesAExporter}   donnees        Données Json à exporter dans un fichier
                 * @param {FORMAT_FICHIER} format       Format du fichier exporté
                 * @param {OptionsExportFichier} options        Options d'exportation du fichier
                 * @return {IPromesse<void>}
                 *
                 * ~~~ts
                 * serviceAgent.export.exporterFichier(donnees: IDonneesAExporter, format: FORMAT_FICHIER, options: IOptionsExportFichier).then(() => {
                 * // Le fichier a été exporté
                 * ...
                 * * }).catch((erreur: MyWay.Services.Erreur) => {
                 * // Renvoi une erreur
                 * ...
                 * });
                 * ~~~
                 */
                ExportManager.prototype.exporterFichier = function (donneesTableau, format, options) {
                    var _this = this;
                    return this.verificationDonneesAExporter(donneesTableau).then(function () {
                        switch (format) {
                            case Export.FORMAT_FICHIER.CSV:
                                var donneesTraitees = _this.convertionDonneesEnCsv(donneesTableau, options);
                                return _this.telechargerFichier(donneesTraitees, options);
                            default:
                                ExportManager.logger.error('Format d\'exportation demandé inconnu  - Success');
                                throw new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_EXPORT_FORMAT_FICHIER_INCONNU);
                        }
                    }).catch(function (erreur) {
                        ExportManager.logger.error('Format d\'exportation demandé inconnu  - Success');
                        throw erreur;
                    });
                };
                ExportManager.CLASS_NAME = 'MyWay.Services.Export.ExportManager';
                ExportManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ExportManager.CLASS_NAME);
                return ExportManager;
            }(Services.Components.ComponentManagerBase));
            Export.ExportManager = ExportManager;
            Services.Components.RegistryManager.getInstance().register(ExportManager);
        })(Export = Services.Export || (Services.Export = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilité
* @module MyWay.Services.Mobilite
* @author Laurie Marchaterre
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            /**
            * Classe permettant d'accéder aux données de mobilité
            */
            var MobiliteAgent = /** @class */ (function (_super) {
                __extends(MobiliteAgent, _super);
                /**
                 * Constructeur de la classe MobiliteAgent
                 * @param {AgentLibrary}   agentLibrary  [description]
                 * @param {ErreurCallback} errorCallback [description]
                 */
                function MobiliteAgent() {
                    return _super.call(this, Services.Components.ComponentType.Mobilite) || this;
                }
                /**
                 * Méthode qui récupère la liste des caisses auto connectées.
                 * @return {IPromesse<ICaisseAuto[]>} liste de caisses auto
                 * ~~~ts
                 * serviceAgent.mobilite.getCaissesAuto().then((result: ICaissesAuto[]) => {
                 *  // Renvoi un tableau de Caisse Auto
                 * }).catch((erreur: MyWay.Services.Erreur) => {
                 *  // Renvoi une erreur
                 * });
                 * ~~~
                 */
                MobiliteAgent.prototype.getCaissesAuto = function () {
                    return this.sendMessage(Mobilite.Messages.MobiliteMessageSubject.GetPeripheriquesParType, {
                        typePeripherique: Mobilite.TYPE_PERIPHERIQUE.CAISSE_AUTO
                    });
                };
                /**
                 * Méthode qui récupère la liste les informations de la machine de l'utilisateur.
                 * Les informations retournées sont :
                 *     - La plateforme
                 *     - La largeur de l'écran
                 *     - La hauteur de l'écran
                 *     - La résolution Minimale MyWay (boolean)
                 *     - Ecran tactile (boolean)
                 *     - Le navigateur
                 * @return {IPromesse<IInfoMachine>} : IInfoMachine
                 * ~~~ts
                 * serviceAgent.mobilite.getInfoMachine().then((result: IInfoMachine) => {
                 *  // Renvoi les infos machine
                 * }).catch((erreur: MyWay.Services.Erreur) => {
                 *  // Renvoi une erreur
                 * });
                 * ~~~
                 */
                MobiliteAgent.prototype.getInfoMachine = function () {
                    return this.sendMessage(Mobilite.Messages.MobiliteMessageSubject.GetInfoMachine, {});
                };
                /**
                 * **DEPRECIEE:** Méthode qui récupère la liste des périphériques connectés.
                 * Il faut utiliser la méthode getPeripheriques();
                **/
                MobiliteAgent.prototype.GetPeripheriques = function () {
                    var params = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        params[_i] = arguments[_i];
                    }
                    MobiliteAgent.logger.debug('Attention, cette méthode est dépréciée, Il faut utiliser la méthode mobilite.getPeripheriques()');
                    return this.getPeripheriques.apply(this, params);
                };
                /**
                 * Méthode qui récupère la liste des périphériques connectés.
                 * Les périphériques retournées sont :
                 *     - Les caisses auto
                 *     - Les tablettes de signature Wacom
                 * @return {IPromesse<IPeripherique[]>} liste de IPeripherique
                 * ~~~ts
                 * serviceAgent.mobilite.getPeripheriques().then((result: IPeripherique[]) => {
                 *  // Renvoi un tableau de Peripherique
                 * }).catch((erreur: MyWay.Services.Erreur) => {
                 *  // Renvoi une erreur
                 * });
                 * ~~~
                 */
                MobiliteAgent.prototype.getPeripheriques = function () {
                    return this.sendMessage(Mobilite.Messages.MobiliteMessageSubject.GetPeripheriques, {});
                };
                /**
                 * Permet de savoir à quel type de réseau on est connecté.
                 * @return {IPromesse<TYPE_RESEAU>}
                 *      - CONNECTE : Connecté (réseau inconnu)
                 *      - OFFLINE: Déconnecté
                 *
                 * ~~~ts
                 * serviceAgent.mobilite.getReseau().then((result: TYPE_RESEAU) => {
                 * // Renvoi le type de connexion
                 * ...
                 * * }).catch((erreur: MyWay.Services.Erreur) => {
                 * // Renvoi une erreur
                 * ...
                 * });
                 * ~~~
                 */
                MobiliteAgent.prototype.getReseau = function () {
                    return this.sendMessage(Mobilite.Messages.MobiliteMessageSubject.GetReseau, {});
                };
                /**
                 * Méthode qui récupère la liste des tablettes de signature connectées.
                 * @return {IPromesse<ITabletteSignature[]>} liste de tablettes de signature Wacom
                 * ~~~ts
                 * serviceAgent.mobilite.getTablettesSignature().then((result: ITabletteSignature[]) => {
                 *  // Renvoi un tableau de tablettes de signature Wacom
                 * }).catch((erreur: MyWay.Services.Erreur) => {
                 *  // Renvoi une erreur
                 * });
                 * ~~~
                 */
                MobiliteAgent.prototype.getTablettesSignature = function () {
                    return this.sendMessage(Mobilite.Messages.MobiliteMessageSubject.GetPeripheriquesParType, {
                        typePeripherique: Mobilite.TYPE_PERIPHERIQUE.TABLETTE_SIGNATURE
                    });
                };
                MobiliteAgent.CLASS_NAME = 'MyWay.Services.Mobilite.MobiliteAgent';
                MobiliteAgent.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(MobiliteAgent.CLASS_NAME);
                return MobiliteAgent;
            }(Services.Components.ComponentAgentBase));
            Mobilite.MobiliteAgent = MobiliteAgent;
            Services.Components.RegistryAgent.getInstance().register(MobiliteAgent);
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraceSuivi;
        (function (TraceSuivi) {
            var TraceSuiviModel = /** @class */ (function () {
                function TraceSuiviModel() {
                }
                return TraceSuiviModel;
            }());
            TraceSuivi.TraceSuiviModel = TraceSuiviModel;
        })(TraceSuivi = Services.TraceSuivi || (Services.TraceSuivi = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["TraceSuivi"] = "TraceSuivi";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraceSuivi;
        (function (TraceSuivi) {
            var Messages;
            (function (Messages) {
                var TraceSuiviMessageSubject;
                (function (TraceSuiviMessageSubject) {
                    TraceSuiviMessageSubject[TraceSuiviMessageSubject["SendTraceSuivi"] = 0] = "SendTraceSuivi";
                    TraceSuiviMessageSubject[TraceSuiviMessageSubject["SendTraceSuiviForcee"] = 1] = "SendTraceSuiviForcee";
                })(TraceSuiviMessageSubject = Messages.TraceSuiviMessageSubject || (Messages.TraceSuiviMessageSubject = {}));
                //Enregistrement du composant et de ses dépendances
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.TraceSuivi, [
                    Services.Components.ComponentType.Context,
                    Services.Components.ComponentType.Core,
                    Services.Components.ComponentType.Mobilite,
                    Services.Components.ComponentType.BaseDeDonnees
                ]);
            })(Messages = TraceSuivi.Messages || (TraceSuivi.Messages = {}));
        })(TraceSuivi = Services.TraceSuivi || (Services.TraceSuivi = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des traces techniques
* @module MyWay.Services.Trace
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            var TraceApiBase = /** @class */ (function () {
                function TraceApiBase() {
                    this._url = Services.PrivatePortalServiceParameters.Instance().TraceUrl;
                    this.libraryManager = null;
                }
                TraceApiBase.prototype.initApi = function (libraryManagerApi) {
                    this.libraryManager = libraryManagerApi;
                };
                /**
                 * Méthode qui fait la correspondance entre l'enum NIVEAUX_TRACE et l'attribut "level" de la ressource REST
                 * @param {enum} : NIVEAUX_TRACE
                 * @return {string} level d'erreur
                 */
                TraceApiBase.prototype.convertirEnumNiveau = function (niveau) {
                    var level;
                    switch (niveau) {
                        case Trace.NIVEAUX_TRACE.DEBUG:
                            level = "DEBUG";
                            break;
                        case Trace.NIVEAUX_TRACE.INFO:
                            level = "INFO";
                            break;
                        case Trace.NIVEAUX_TRACE.WARNING:
                            level = "WARN";
                            break;
                        case Trace.NIVEAUX_TRACE.ERROR:
                            level = "ERROR";
                            break;
                        default:
                            level = "INFO";
                            break;
                    }
                    return level;
                };
                /**
                * Méthode qui fait la correspondance entre "TraceModel" et l'attribut "ITraceDTO" de la ressource REST
                * @param {Trace.TraceModel[]} : Objet généré lors de l'écrire d'un trace
                * @param {Context.AuthentificationInfo} : Données d'authentifications
                * @return {ITraceDTO} Modèle de trace attendu par la ressource REST
                */
                TraceApiBase.prototype.convertirTraceModel = function (traces, authentificationInfo) {
                    var _this = this;
                    var datas = [];
                    traces.forEach(function (trace) {
                        var data = {
                            level: "INFO",
                            message: "",
                            details: {}
                        };
                        data.level = _this.convertirEnumNiveau(trace.niveau);
                        data.message = trace.message;
                        data.details.DateTime = trace.datetime;
                        data.details.IdentifiantPoste = authentificationInfo.numeroStationTravail; //P0SEC243
                        data.details.IdentifiantProcessus = trace.idProcessus;
                        data.details.IdentifiantEtape = trace.cheminInstances;
                        if (authentificationInfo.agentConnecte.numeroInterneEds) {
                            data.details.AgenceRattachement = authentificationInfo.agentConnecte.referenceExterneEdsRattachemen; //1057604
                        }
                        else {
                            data.details.AgenceRattachement = "0000000"; //1057604
                        }
                        data.details.NiveauTrace = "INFO";
                        data.details.CodeEtablissement = trace.COCXBQ; //11315
                        if (authentificationInfo.agentConnecte.numeroInterneEds) {
                            data.details.PosteFonctionnelAgent = authentificationInfo.agentConnecte.numeroInterneEds; //1057604
                        }
                        else {
                            data.details.PosteFonctionnelAgent = "0000000"; //1057604
                        }
                        data.details.NomComposant = trace.composant ? trace.composant : trace.application;
                        data.details.TypeCanal = "01";
                        data.details.VersionComposant = Services.CoreCommon.VersionMySys; //v17.01
                        data.details.TypeDevice = "01";
                        data.details.IdentifiantConnexionAgent = authentificationInfo.agentConnecte.referenceExterneAgent; //A0077541
                        data.details.Autres = trace.details;
                        datas.push(data);
                    });
                    return datas;
                };
                /**
                * Méthode qui envoie les traces vers le serveur Kibana
                * @param {Trace.TraceModel[]} : Objet généré lors de l'écrire d'un trace
                * @param {Context.AuthentificationInfo} : Données d'authentifications
                * @return {IPromesse<void>}
                */
                TraceApiBase.prototype.envoyerTraces = function (traces, authentInfo) {
                    // Paramétrage
                    var settings = {};
                    settings.url = this._url;
                    settings.method = Services.MethodEnum.POST;
                    settings.async = true;
                    settings.contentType = Services.ContentTypeEnum.JSON;
                    settings.data = this.convertirTraceModel(traces, authentInfo);
                    settings.cache = false;
                    settings.withHeaders = true;
                    settings.authentificationInfo = authentInfo;
                    return this.libraryManager.Core.sendRequest(settings);
                };
                TraceApiBase.prototype.setModeDebug = function (timeToLive) {
                    return Services.Promesses.getPromesseSelfResoved();
                };
                TraceApiBase.prototype.readFileModeDebug = function () {
                    var DateTime = undefined;
                    return Services.Promesses.createPromiseSelfResolved(DateTime);
                };
                return TraceApiBase;
            }());
            Trace.TraceApiBase = TraceApiBase;
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            var TraceApiFactory = /** @class */ (function (_super) {
                __extends(TraceApiFactory, _super);
                function TraceApiFactory() {
                    var _this = _super.call(this, Services.Components.ComponentType.Trace) || this;
                    _this.wrapped = null;
                    return _this;
                }
                TraceApiFactory.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    var _this = this;
                    if (pCapabilities.ServiceLocal) {
                        this.wrapped = new Trace.TraceApiWindows();
                    }
                    else {
                        this.wrapped = new Trace.TraceApiFullWeb();
                    }
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer).then(function () {
                        return _this.wrapped.initApi(pLibraryManager);
                    });
                };
                TraceApiFactory.prototype.initApi = function (libraryManagerApi) {
                };
                TraceApiFactory.prototype.envoyerTraces = function (traces, authentInfo) {
                    return this.wrapped.envoyerTraces(traces, authentInfo);
                };
                TraceApiFactory.prototype.setModeDebug = function (timeToLive) {
                    return this.wrapped.setModeDebug(timeToLive);
                };
                TraceApiFactory.prototype.readFileModeDebug = function () {
                    return this.wrapped.readFileModeDebug();
                };
                return TraceApiFactory;
            }(Services.Components.ComponentApiBase));
            Trace.TraceApiFactory = TraceApiFactory;
            Services.Components.RegistryApi.getInstance().register(TraceApiFactory);
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des traces techniques
* @module MyWay.Services.Trace
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            var TraceApiFullWeb = /** @class */ (function (_super) {
                __extends(TraceApiFullWeb, _super);
                function TraceApiFullWeb() {
                    return _super.call(this) || this;
                }
                return TraceApiFullWeb;
            }(Trace.TraceApiBase));
            Trace.TraceApiFullWeb = TraceApiFullWeb;
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des traces techniques
* @module MyWay.Services.Trace
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            var TraceApiWindows = /** @class */ (function (_super) {
                __extends(TraceApiWindows, _super);
                function TraceApiWindows() {
                    var _this = _super.call(this) || this;
                    _this._urlLireFichier = Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + "/fichier/lire";
                    return _this;
                }
                /**
                * Méthode qui envoie les traces vers le service local et le serveur Kibana
                * @param {Trace.TraceModel[]} : Objet généré lors de l'écrire d'un trace
                * @param {Context.AuthentificationInfo} : Données d'authentifications
                * @return {IPromesse<void>}
                */
                TraceApiWindows.prototype.envoyerTraces = function (traces, authentInfo) {
                    //Envoi la trace vers Kibana
                    _super.prototype.envoyerTraces.call(this, traces, authentInfo);
                    // Paramétrage
                    var settings = {};
                    settings.method = Services.MethodEnum.POST;
                    settings.url = Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + "/Trace/PurgeTraces";
                    settings.async = true;
                    settings.contentType = Services.ContentTypeEnum.JSON;
                    settings.data = JSON.stringify(traces);
                    return this.libraryManager.Core.sendRequest(settings);
                };
                TraceApiWindows.prototype.setModeDebug = function (timeToLive) {
                    return Services.CoreCommon.SendRequestWithPromise({
                        url: Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + "/Trace/SetModeDegug?timeToLive=" + timeToLive,
                        method: Services.MethodEnum.POST
                    });
                };
                TraceApiWindows.prototype.readFileModeDebug = function () {
                    return this.libraryManager.Core.sendRequest({
                        url: this._urlLireFichier + "?pathFichier=C:/perso/ModeDebugMyway.json",
                        method: Services.MethodEnum.GET,
                        cache: false
                    })
                        .then(function (result) {
                        var datesDebug;
                        try {
                            datesDebug = JSON.parse(result);
                        }
                        catch (error) {
                            throw error;
                        }
                        return datesDebug;
                    });
                };
                return TraceApiWindows;
            }(Trace.TraceApiBase));
            Trace.TraceApiWindows = TraceApiWindows;
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var Chat;
            (function (Chat) {
                /* istanbul ignore next */
                var VideoRoom = /** @class */ (function () {
                    function VideoRoom(producerConsumer, chatroom, onGetDivVideo, onCloseVideo, myUserId, userDistantId) {
                        var _this = this;
                        this.producerConsumer = producerConsumer;
                        this.chatroom = chatroom;
                        this.onGetDivVideo = onGetDivVideo;
                        this.onCloseVideo = onCloseVideo;
                        this.myUserId = myUserId;
                        this.userDistantId = userDistantId;
                        this.onAcceptOffer = function () {
                            _this.aDemarre = true;
                            _this.webRTCLib.createStream({ audio: true, video: true }, function (pLocalStream) {
                                _this.localStream = pLocalStream;
                                if (_this.chatroom.streamLocal === null) {
                                    _this.chatroom.streamLocal = pLocalStream;
                                    if (_this.chatroom.htmlElementStream !== null) {
                                        WebRtcCDN.WebRTCLib.attachStream(_this.chatroom.streamLocal, _this.chatroom.htmlElementStream);
                                    }
                                    else {
                                        _this.onGetDivVideo({
                                            cestmoi: true,
                                            chatroom_id: _this.chatroom.id,
                                            user_id: _this.myUserId,
                                            doitLancerAutresVideos: true
                                        });
                                    }
                                }
                            }, function (pRemoteStream) {
                                _this.remoteStream = pRemoteStream;
                                if (_this.remoteStreamVideo) {
                                    WebRtcCDN.WebRTCLib.attachStream(pRemoteStream, _this.remoteStreamVideo);
                                }
                                else {
                                    _this.onGetDivVideo({
                                        cestmoi: false,
                                        chatroom_id: _this.chatroom.id,
                                        user_id: _this.userDistantId,
                                        doitLancerAutresVideos: true
                                    });
                                }
                            });
                        };
                        this.onClose = function () {
                            _this.aDemarre = false;
                            _this.onCloseVideo();
                        };
                        this.aDemarre = false;
                        this.webRTCLib = new WebRtcCDN.WebRTCLib(producerConsumer);
                        this.init();
                    }
                    VideoRoom.prototype.start = function (pDoitLancerAutresVideos) {
                        if (this.aDemarre) {
                            //La videoroom a déjà été démarée, ne fait qu'un reaccept
                            this.onGetDivVideo({
                                cestmoi: true,
                                chatroom_id: this.chatroom.id,
                                user_id: this.myUserId,
                                doitLancerAutresVideos: pDoitLancerAutresVideos
                            });
                            this.onGetDivVideo({
                                cestmoi: false,
                                chatroom_id: this.chatroom.id,
                                user_id: this.userDistantId,
                                doitLancerAutresVideos: pDoitLancerAutresVideos
                            });
                        }
                        else {
                            //La vidéoroom n'a jamais été démarée, fait un createOffer
                            this.createOffer();
                        }
                    };
                    VideoRoom.prototype.close = function () {
                        this.webRTCLib.close();
                    };
                    VideoRoom.prototype.getLocalStream = function () {
                        return this.localStream;
                    };
                    VideoRoom.prototype.setVideoElement = function (pVideoElement) {
                        if (this.remoteStreamVideo !== null) {
                            //Change le HTMLElement sur lequel est la vidéo
                            //TODO
                            //return;
                        }
                        this.remoteStreamVideo = pVideoElement;
                        if (this.remoteStream) {
                            WebRtcCDN.WebRTCLib.attachStream(this.remoteStream, this.remoteStreamVideo);
                        }
                    };
                    VideoRoom.prototype.init = function () {
                        this.webRTCLib.onAcceptOffer(this.onAcceptOffer);
                        this.webRTCLib.onClose(this.onClose);
                    };
                    VideoRoom.prototype.createOffer = function () {
                        var _this = this;
                        this.aDemarre = true;
                        this.webRTCLib.createStream({ audio: true, video: true }, function (pLocalStream) {
                            _this.localStream = pLocalStream;
                            if (_this.chatroom.streamLocal === null) {
                                _this.chatroom.streamLocal = pLocalStream;
                                if (_this.chatroom.htmlElementStream !== null) {
                                    WebRtcCDN.WebRTCLib.attachStream(_this.chatroom.streamLocal, _this.chatroom.htmlElementStream);
                                }
                                else {
                                    _this.onGetDivVideo({
                                        cestmoi: true,
                                        chatroom_id: _this.chatroom.id,
                                        user_id: _this.myUserId,
                                        doitLancerAutresVideos: true
                                    });
                                }
                            }
                            _this.webRTCLib.createOffer();
                        }, function (pRemoteStream) {
                            _this.remoteStream = pRemoteStream;
                            if (_this.remoteStreamVideo) {
                                WebRtcCDN.WebRTCLib.attachStream(pRemoteStream, _this.remoteStreamVideo);
                            }
                            else {
                                _this.onGetDivVideo({
                                    cestmoi: false,
                                    chatroom_id: _this.chatroom.id,
                                    user_id: _this.userDistantId,
                                    doitLancerAutresVideos: true
                                });
                            }
                        });
                    };
                    VideoRoom.CLASS_NAME = 'MyWay.Services.BriqueCommunication.Chat.VideoRoom';
                    VideoRoom.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(VideoRoom.CLASS_NAME);
                    return VideoRoom;
                }());
                /* istanbul ignore next */
                var ChatAgent = /** @class */ (function (_super) {
                    __extends(ChatAgent, _super);
                    function ChatAgent() {
                        var _this = _super.call(this, Services.Components.ComponentType.Chat) || this;
                        _this.noop = function () { };
                        _this.producersConsumers = [];
                        _this.producersConsumersById = {};
                        _this.promesseCodeAgent = null;
                        _this.numMessage = 0;
                        return _this;
                    }
                    ChatAgent.prototype.init = function (pAgentLibrary, pMessageService, pMessageInitializer) {
                        var _this = this;
                        return _super.prototype.init.call(this, pAgentLibrary, pMessageService, pMessageInitializer).then(function () {
                            _this.library.Context.SubscribeToNotification([function (pNotification) {
                                    if (pNotification.Sujet === "NotificationEvent") {
                                        _this.traiterEvennement(pNotification);
                                    }
                                }], null);
                        });
                    };
                    ChatAgent.prototype.sendNotification = function (pEvent) {
                        var lEventMain = {
                            mainEventType: Services.BriqueCommunication.Messages.EVENT_TYPE.CHAT,
                            event: pEvent
                        };
                        this.library.Context.sendNotification({
                            Sujet: "NotificationEvent",
                            type: MyWay.Services.CommonEventType.BriqueCommunication,
                            Contenu: lEventMain
                        });
                    };
                    ChatAgent.prototype.addChatCapacity = function () {
                        this.sendMessage(Chat.ChatMessageSubject.AddChatCapacity, {});
                    };
                    ChatAgent.prototype.getMe = function () {
                        var _this = this;
                        if (this.promesseCodeAgent) {
                            return this.promesseCodeAgent;
                        }
                        this.promesseCodeAgent = this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                            return _this.getMyCode(pAuthentificationInfo);
                        });
                        return this.promesseCodeAgent;
                    };
                    ChatAgent.prototype.setStatut = function (pStatut) {
                        return this.sendMessage(Chat.ChatMessageSubject.SetStatut, {
                            statut: pStatut
                        });
                    };
                    ChatAgent.prototype.openChat = function (pUserDestinataire) {
                        return this.sendMessage(Chat.ChatMessageSubject.OpenChat, {
                            destinataire: pUserDestinataire
                        });
                    };
                    ChatAgent.prototype.openTchatroom = function (pChatroomId) {
                        return this.sendMessage(Chat.ChatMessageSubject.OpenChatroom, {
                            idChat: pChatroomId
                        });
                    };
                    ChatAgent.prototype.closeChat = function (pChatroomId) {
                        var lChatroom = this.producersConsumersById[pChatroomId];
                        if (lChatroom) {
                            for (var userid in lChatroom.videorooms) {
                                lChatroom.videorooms[userid].close();
                            }
                        }
                        return this.sendMessage(Chat.ChatMessageSubject.CloseChat, {
                            idChat: pChatroomId
                        });
                    };
                    ChatAgent.prototype.sendMessageChat = function (pChatroomId, pMessage) {
                        return this.sendMessage(Chat.ChatMessageSubject.SendMessage, {
                            idChat: pChatroomId,
                            message: pMessage
                        });
                    };
                    ChatAgent.prototype.getUtilisateurs = function () {
                        return this.sendMessage(Chat.ChatMessageSubject.GetUtilisateurs, {});
                    };
                    ChatAgent.prototype.getChatrooms = function () {
                        return this.sendMessage(Chat.ChatMessageSubject.GetChatrooms, {});
                    };
                    ChatAgent.prototype.getChatroom = function (pChatroomId) {
                        return this.sendMessage(Chat.ChatMessageSubject.GetChatroom, {
                            chatroom_id: pChatroomId
                        });
                    };
                    ChatAgent.prototype.accepterInvitationExpert = function (pChatroomId, pDomaine, pProspect) {
                        return this.sendMessage(Chat.ChatMessageSubject.AccepterDemanderExpert, {
                            chatroom_id: pChatroomId,
                            domaine: pDomaine,
                            prospect_id: pProspect
                        });
                    };
                    ChatAgent.prototype.inviterPersonnesAUneChatroom = function (pChatroomId) {
                        var pUsersId = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            pUsersId[_i - 1] = arguments[_i];
                        }
                        return this.sendMessage(Chat.ChatMessageSubject.InviterPersonnesAUneChatroom, {
                            chatroom_id: pChatroomId,
                            users_id: pUsersId
                        });
                    };
                    ChatAgent.prototype.setHtmlElementVideo = function (pChatroomId, pUserId, pHtmlElement) {
                        var lChatroom = this.producersConsumersById[pChatroomId];
                        if (!lChatroom) {
                            return;
                        }
                        this.getMe().then(function (pMe) {
                            if (pUserId === pMe) {
                                lChatroom.htmlElementStream = pHtmlElement;
                                if (lChatroom.streamLocal !== null) {
                                    WebRtcCDN.WebRTCLib.attachStream(lChatroom.streamLocal, lChatroom.htmlElementStream);
                                }
                                return;
                            }
                            var lVideoroom = lChatroom.videorooms[pUserId];
                            if (!lVideoroom) {
                                return;
                            }
                            lVideoroom.setVideoElement(pHtmlElement);
                        });
                    };
                    ChatAgent.prototype.commencerVideo = function (pChatroomId) {
                        var lChatroom = this.producersConsumersById[pChatroomId];
                        if (!lChatroom) {
                            return;
                        }
                        for (var userid in lChatroom.videorooms) {
                            lChatroom.videorooms[userid].start(false);
                        }
                        this.sendMessage(Chat.ChatMessageSubject.DemarrerVideoChatroom, {
                            idChat: pChatroomId
                        });
                    };
                    ChatAgent.prototype.arreterVideo = function (pChatroomId) {
                        var lChatroom = this.producersConsumersById[pChatroomId];
                        if (!lChatroom) {
                            return;
                        }
                        for (var userid in lChatroom.videorooms) {
                            lChatroom.videorooms[userid].close();
                        }
                        this.sendMessage(Chat.ChatMessageSubject.ArreterVideoChatroom, {
                            idChat: pChatroomId
                        });
                    };
                    ChatAgent.prototype.devenirFramePrincipalePourChatroomVideo = function (pChatroomId) {
                        this.sendMessage(Chat.ChatMessageSubject.PrendreLaMainVideoroom, {
                            idChat: pChatroomId
                        });
                    };
                    ChatAgent.prototype.reception = function (pMessage) {
                        switch (pMessage.subject) {
                            case Chat.ChatMessageSubject.AddChatCapacity: {
                                var lContent = pMessage.message;
                                this.handleMessageWebRTC(lContent);
                                return this.library.Core.getPromesseSelfResoved();
                            }
                            default:
                                return _super.prototype.reception.call(this, pMessage);
                        }
                    };
                    ChatAgent.prototype.traiterEvennement = function (pEvent) {
                        switch (pEvent.type) {
                            case MyWay.Services.CommonEventType.BriqueCommunication:
                                this.traiterEvennementBriqueCommunication(pEvent);
                                break;
                        }
                    };
                    ChatAgent.prototype.traiterEvennementBriqueCommunication = function (pEvent) {
                        switch (pEvent.Contenu.mainEventType) {
                            case MyWay.Services.BriqueCommunication.Messages.EVENT_TYPE.CHAT: {
                                this.traiterEvennementChat(pEvent.Contenu.event);
                            }
                        }
                    };
                    ChatAgent.prototype.traiterEvennementChat = function (pEvent) {
                        switch (pEvent.eventType) {
                            case MyWay.Services.BriqueCommunication.Chat.Messages.EVENT_TYPE.CHAT_OUVERT:
                                var lMessageChatOuvert = pEvent;
                                this.etablirVideorooms(lMessageChatOuvert.chatroom_id, lMessageChatOuvert.membres, lMessageChatOuvert.estFramePrincipale);
                                break;
                            case MyWay.Services.BriqueCommunication.Chat.Messages.EVENT_TYPE.CHAT_FERME:
                                var lMessageChatOuvert = pEvent;
                                this.terminerToutesVideorooms(lMessageChatOuvert.chatroom_id);
                                break;
                            case MyWay.Services.BriqueCommunication.Chat.Messages.EVENT_TYPE.UTILISATEUR_CONNECTE_A_CHAT:
                                var lMessageUtilisateurConnecteAChat = pEvent;
                                this.ajouterVideoroom(lMessageUtilisateurConnecteAChat.chatroom_id, lMessageUtilisateurConnecteAChat.user_id, lMessageUtilisateurConnecteAChat.estFramePrincipale);
                                break;
                            case MyWay.Services.BriqueCommunication.Chat.Messages.EVENT_TYPE.UTILISATEUR_DECONNECTE_A_CHAT:
                                var lMessageUtilisateurDeconnecteAChat = pEvent;
                                this.terminerVideoroom(lMessageUtilisateurDeconnecteAChat.chatroom_id, lMessageUtilisateurDeconnecteAChat.user_id);
                                break;
                            case MyWay.Services.BriqueCommunication.Chat.Messages.EVENT_TYPE.CHANGEMENT_MAIN_CHATROOM:
                                var lMessageChangementMainChatroom = pEvent;
                                this.changementMainChatroom(lMessageChangementMainChatroom.chatroom_id, lMessageChangementMainChatroom.estFramePrincipale, lMessageChangementMainChatroom.videoEstEnCours);
                                break;
                        }
                    };
                    ChatAgent.prototype.changementMainChatroom = function (pChatroomId, pEstFramePrincipale, pVideoEstEnCours) {
                        var _this = this;
                        var lChatroom = this.producersConsumersById[pChatroomId];
                        if (!lChatroom) {
                            //Non enregistrée, ignore
                            return;
                        }
                        var lPromesses = [];
                        lChatroom.membres.forEach(function (pMembre) {
                            var lVideoroom = lChatroom.videorooms[pMembre];
                            if (!pEstFramePrincipale && lVideoroom) {
                                lVideoroom.close();
                                delete lChatroom.videorooms[pMembre];
                            }
                            else if (pEstFramePrincipale && !lVideoroom) {
                                lPromesses.push(_this.ajouterVideoroom(pChatroomId, pMembre, pEstFramePrincipale));
                            }
                        });
                        if (pEstFramePrincipale && pVideoEstEnCours) {
                            Services.CoreCommon.ServiceDePromesse.all(lPromesses).then(function () {
                                _this.commencerVideo(pChatroomId);
                            });
                        }
                    };
                    ChatAgent.prototype.ajouterVideoroom = function (pChatroomId, pUserId, pEstFramePrincipale) {
                        var _this = this;
                        var lChatroom = this.producersConsumersById[pChatroomId];
                        if (!lChatroom) {
                            lChatroom = {
                                id: pChatroomId,
                                htmlElementStream: null,
                                streamLocal: null,
                                videorooms: {},
                                membres: []
                            };
                            this.producersConsumersById[pChatroomId] = lChatroom;
                        }
                        var lMembreTrouve = false;
                        lChatroom.membres.every(function (pMembre) {
                            if (pMembre === pUserId) {
                                lMembreTrouve = true;
                            }
                            return lMembreTrouve;
                        });
                        if (!lMembreTrouve) {
                            lChatroom.membres.push(pUserId);
                        }
                        if (!pEstFramePrincipale) {
                            //C'est une autre iframe qui s'occupe du flux vidéo
                            return;
                        }
                        return this.getMe().then(function (pMyUserid) {
                            if (pMyUserid === pUserId) {
                                //N'ouvre pas un flux avec lui-même!
                                return;
                            }
                            var lVideoroom = lChatroom.videorooms[pUserId];
                            if (lVideoroom) {
                                //Flux déjà en cours
                                return;
                            }
                            var lProducerConsumer = {
                                producer: function (pMessage) {
                                    ChatAgent.logger.debug("Emission %1", JSON.pruned(pMessage));
                                    var lMessage = JSON.stringify(pMessage);
                                    _this.sendMessage(Chat.ChatMessageSubject.EnvoyerMessageVideoroom, {
                                        chatroom_id: pChatroomId,
                                        user_id: pUserId,
                                        message: lMessage
                                    });
                                },
                                setConsumer: function (pCallback) {
                                    lProducerConsumer.consumer = pCallback;
                                },
                                consumer: function () {
                                }
                            };
                            var lVideoRoom = new VideoRoom(lProducerConsumer, lChatroom, function (pNotification) {
                                //Evennement quand la vidéo démarre
                                _this.sendNotification({
                                    eventType: Chat.Messages.EVENT_TYPE.CHAT_DIV_ELEMENT,
                                    cestmoi: pNotification.cestmoi,
                                    chatroom_id: pNotification.chatroom_id,
                                    user_id: pNotification.user_id
                                });
                                if (pNotification.doitLancerAutresVideos) {
                                    //Et lance les autres vidéos si compare(mon userid, userid courant) === compare(mon userid, pUserid) distant (on évite que deux personnes se retrouvent à être "hôte")
                                    for (var lUserId in lChatroom.videorooms) {
                                        if (lUserId === pUserId) {
                                            continue;
                                        }
                                        var lDemarrerFlux = false;
                                        if (!/^agent/.test(lUserId)) {
                                            //Communique avec un non-myway, initie la vidéo à tous les coups
                                            lDemarrerFlux = true;
                                        }
                                        if (pMyUserid.localeCompare(lUserId) < 0) {
                                            //Démarre le flux si mon id est alphabétiquement avant l'id de l'autre user
                                            lDemarrerFlux = true;
                                        }
                                        if (!lDemarrerFlux) {
                                            continue;
                                        }
                                        lChatroom.videorooms[lUserId].start(false);
                                    }
                                }
                            }, function () {
                                //Evennement quand la vidéo s'arrête
                                delete lChatroom.videorooms[pUserId];
                                if (lChatroom.streamLocal === lVideoRoom.getLocalStream()) {
                                    //C'était cette videoroom qui possédait la main sur le flux local, change de vidéoroom
                                    for (var lUserIdCourant in lChatroom.videorooms) {
                                        var lLocalStream = lChatroom.videorooms[lUserIdCourant].getLocalStream();
                                        if (lLocalStream) {
                                            lChatroom.streamLocal = lLocalStream;
                                            _this.sendNotification({
                                                eventType: Chat.Messages.EVENT_TYPE.CHAT_DIV_ELEMENT,
                                                cestmoi: true,
                                                chatroom_id: lChatroom.id,
                                                user_id: pMyUserid
                                            });
                                            break;
                                        }
                                    }
                                }
                                _this.sendNotification({
                                    eventType: Chat.Messages.EVENT_TYPE.FIN_VIDEOROOM,
                                    chatroom_id: lChatroom.id,
                                    user_id: pUserId
                                });
                            }, pMyUserid, pUserId);
                            lChatroom.videorooms[pUserId] = lVideoRoom;
                            lChatroom.membres.push(pUserId);
                            return lVideoroom;
                        });
                    };
                    ChatAgent.prototype.terminerVideoroom = function (pChatroomId, pUserId) {
                        var lChatroom = this.producersConsumersById[pChatroomId];
                        if (!lChatroom) {
                            return;
                        }
                        var lVideoroom = lChatroom[pUserId];
                        if (!lVideoroom) {
                            return;
                        }
                        lVideoroom.close();
                        delete lChatroom[pUserId];
                    };
                    ChatAgent.prototype.getMyCode = function (pAuthentificationInfo) {
                        return "agent-S" + this.library.Core.StringUtils.leftPad(pAuthentificationInfo.agentConnecte.referenceExterneAgent, "0", 7);
                    };
                    ChatAgent.prototype.etablirVideorooms = function (pChatroomId, pUsers, pEstFramePrincipale) {
                        var _this = this;
                        this.getMe().then(function (pMe) {
                            pUsers.forEach(function (pMembre) {
                                if (pMembre === pMe) {
                                    return;
                                }
                                _this.ajouterVideoroom(pChatroomId, pMembre, pEstFramePrincipale);
                            });
                        });
                    };
                    ChatAgent.prototype.terminerToutesVideorooms = function (pChatroomId) {
                        var lChatroom = this.producersConsumersById[pChatroomId];
                        if (!lChatroom) {
                            return;
                        }
                        for (var lUserId in lChatroom.videorooms) {
                            lChatroom.videorooms[lUserId].close();
                        }
                    };
                    ChatAgent.prototype.handleMessageWebRTC = function (pMessage) {
                        var lChatroom = this.producersConsumersById[pMessage.chatroom_id];
                        if (!lChatroom) {
                            return;
                        }
                        var lVideoroom = lChatroom.videorooms[pMessage.user_id];
                        if (!lVideoroom) {
                            return;
                        }
                        if (!lVideoroom.producerConsumer) {
                            return;
                        }
                        if (!lVideoroom.producerConsumer.consumer) {
                            return;
                        }
                        ChatAgent.logger.debug("EmissionReception %1", JSON.pruned(pMessage));
                        lVideoroom.producerConsumer.consumer(JSON.stringify(pMessage.content));
                    };
                    ChatAgent.CLASS_NAME = 'MyWay.Services.BriqueCommunication.Chat.ChatAgent';
                    ChatAgent.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ChatAgent.CLASS_NAME);
                    return ChatAgent;
                }(Services.Components.ComponentAgentBase));
                Chat.ChatAgent = ChatAgent;
                Services.Components.RegistryAgent.getInstance().register(ChatAgent);
            })(Chat = BriqueCommunication.Chat || (BriqueCommunication.Chat = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var Notification;
            (function (Notification) {
                var NotificationAgent = /** @class */ (function (_super) {
                    __extends(NotificationAgent, _super);
                    function NotificationAgent() {
                        return _super.call(this, Services.Components.ComponentType.Notification) || this;
                    }
                    NotificationAgent.prototype.abonnement = function (pSubject) {
                        return this.sendMessage(Notification.NotificationMessageSubject.Abonnement, {
                            subject: pSubject
                        });
                    };
                    NotificationAgent.prototype.desabonnement = function (pSubject) {
                        return this.sendMessage(Notification.NotificationMessageSubject.Desabonnement, {
                            subject: pSubject
                        });
                    };
                    NotificationAgent.prototype.getListeSujets = function () {
                        return this.sendMessage(Notification.NotificationMessageSubject.GetListeSubjects, {});
                    };
                    return NotificationAgent;
                }(Services.Components.ComponentAgentBase));
                Notification.NotificationAgent = NotificationAgent;
                Services.Components.RegistryAgent.getInstance().register(NotificationAgent);
            })(Notification = BriqueCommunication.Notification || (BriqueCommunication.Notification = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ContexteClient;
        (function (ContexteClient) {
            /**
             * Agent du contexte client.
             */
            var ContexteClientAgent = /** @class */ (function (_super) {
                __extends(ContexteClientAgent, _super);
                /**
                 * Constructeur de la classe ContexteClientAgent.
                 */
                function ContexteClientAgent() {
                    return _super.call(this, Services.Components.ComponentType.ContexteClient) || this;
                }
                /**
                 * Méthode permettant d'initialiser l'agent.
                 *
                 * @param pAgentLibrary         La librairie de l'agent.
                 * @param pMessageService       Le service de message.
                 * @param pManagerInitializer   L'objet d'initialisation de l'agent.
                 */
                ContexteClientAgent.prototype.init = function (pAgentLibrary, pMessageService, pMessageInitializer) {
                    return _super.prototype.init.call(this, pAgentLibrary, pMessageService, pMessageInitializer);
                };
                /**
                 * Méthode permettant de récupérer l'expéditeur.
                 * @returns l'expéditeur.
                 */
                ContexteClientAgent.prototype.getExpediteur = function () {
                    var expediteur = "agent";
                    if (this.library.Context && this.library.Context.StepInfo) {
                        expediteur = this.library.Context.StepInfo.CurrentParentProcessId;
                    }
                    return expediteur;
                };
                /**
                 * Récupération de l'ensemble des contextes ouverts sur des clients.
                 * @returns Liste des identifiants clients assignés à des contextes clients.
                 */
                ContexteClientAgent.prototype.getContextesParClients = function () {
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.GetContextesParClients).then(function (pResult) {
                        return pResult.ids;
                    });
                };
                /**
                 * Récupération de l'identifiant technique du contexte client courant.
                 * @returns Id technique du contexte client courant.
                 */
                ContexteClientAgent.prototype.getId = function () {
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.GetId).then(function (pResult) {
                        return pResult.id;
                    });
                };
                /**
                 * Récupération de l'identifiant client du contexte client courant.
                 * @returns Id du client du contexte client courant.
                 */
                ContexteClientAgent.prototype.getClient = function () {
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.GetClient).then(function (pResult) {
                        return pResult.id;
                    });
                };
                /**
                 * Modification de l'identifiant client du contexte client courant.
                 *
                 * @throws          Erreur si processus non associé à un contexte client.
                 * @throws          Erreur si contexte client déjà associé à un client.
                 * @throws          Erreur si code client invalide (ex : null, undefined, ...).
                 * @param pClient   Identifiant du client à assigner au contexte courant.
                 */
                ContexteClientAgent.prototype.setClient = function (pClient) {
                    var lParametres = {
                        client: pClient,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.SetClient, lParametres);
                };
                /**
                 * Lis une donnée du contexte client.
                 *
                 * @throws      Erreur si processus non associé à un contexte client.
                 * @param pCle  Cle à récupérer. Passer "null" pour récupérer tout le contexte client complet.
                 * @returns     Valeur associée à la clé spécifiée.
                 */
                ContexteClientAgent.prototype.getProperty = function (pCle) {
                    var lParametres = {
                        cle: pCle
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.GetProperty, lParametres).then(function (pResult) {
                        return pResult.valeur;
                    });
                };
                /**
                 * Ajoute une donnée dans un tableau du contexte client.
                 *
                 * @throws          Erreur si processus non associé à un contexte client.
                 * @param pCle      Clé de la liste à modifier.
                 * @param pValeur   Valeur à ajouter à la liste.
                 * @returns         true sur valeur ajoutée, false sinon.
                 */
                ContexteClientAgent.prototype.addToList = function (pCle, pValeur) {
                    var lParametres = {
                        cle: pCle,
                        valeur: pValeur,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.AddToList, lParametres).then(function (pResult) {
                        return pResult.estOk;
                    });
                };
                /**
                 * Fixe une donnée dans un objet du contexte client.
                 *
                 * @throws          Erreur si processus non associé à un contexte client.
                 * @param pCle      Clé de la propriété à modifier.
                 * @param pValeur   Valeur à donner à la propriété.
                 * @returns         true sur valeur ajoutée, false sinon.
                 */
                ContexteClientAgent.prototype.setProperty = function (pCle, pValeur) {
                    var lParametres = {
                        cle: pCle,
                        valeur: pValeur,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.SetProperty, lParametres).then(function (pResult) {
                        return pResult.estOk;
                    });
                };
                /**
                 * Supprime une donnée d'un tableau du contexte client.
                 *
                 * @throws      Erreur si processus non associé à un contexte client.
                 * @param pCle  Clé de la liste à modifier.
                 * @returns     true sur valeur supprimée, false sinon.
                 */
                ContexteClientAgent.prototype.removeFromList = function (pCle) {
                    var lParametres = {
                        cle: pCle,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.RemoveFromList, lParametres).then(function (pResult) {
                        return pResult.estOk;
                    });
                };
                /**
                 * Supprime une donnée d'un objet du contexte client.
                 *
                 * @throws      Erreur si processus non associé à un contexte client.
                 * @param pCle  Clé de la propriété à modifier.
                 * @returns     true sur valeur supprimée, false sinon.
                 */
                ContexteClientAgent.prototype.deleteProperty = function (pCle) {
                    var lParametres = {
                        cle: pCle,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.DeleteProperty, lParametres).then(function (pResult) {
                        return pResult.estOk;
                    });
                };
                /**
                 * Lis le contenu du contexte client pour un client donné.
                 *
                 * @throws Erreur si aucun client n'est associé à un contexte client
                 * @param pIdClient Id du client
                 * @returns Contenu du contexte client
                 */
                ContexteClientAgent.prototype.getContenu = function (pIdClient) {
                    var lParametres = {
                        idClient: pIdClient
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.GetContenu, lParametres).then(function (pResult) {
                        return pResult.valeur;
                    });
                };
                /**
                 * Fixe le contenu d'un contexte client pour un client donné
                 * @throws Erreur si aucun client n'est associé à un contexte client
                 * @param pIdClient Id du client
                 * @param pValeur Contenu à assigner
                 * @returns true sur contenu modifié, false sinon
                 */
                ContexteClientAgent.prototype.setContenu = function (pIdClient, pValeur) {
                    var lParametres = {
                        idClient: pIdClient,
                        valeur: pValeur,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.SetContenu, lParametres).then(function (pResult) {
                        return pResult.estOk;
                    });
                };
                /**
                 * Fixe l'indicateur de synchrosynthese à RELOAD
                 * @throws          Erreur si aucun client n'est associé à un contexte client.
                 * @param pIdClient Id du client.
                 * @returns         true sur reload OK, false sinon.
                 */
                ContexteClientAgent.prototype.setReloadSynthese = function (pIdClient) {
                    var lParametres = {
                        idClient: pIdClient,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.SetReloadSynthese, lParametres).then(function (pResult) {
                        return pResult.estOk;
                    });
                };
                return ContexteClientAgent;
            }(Services.Components.ComponentAgentBase));
            ContexteClient.ContexteClientAgent = ContexteClientAgent;
            Services.Components.RegistryAgent.getInstance().register(ContexteClientAgent);
        })(ContexteClient = Services.ContexteClient || (Services.ContexteClient = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            Trace.KEY_TIME_BEFORE_TRANSITION = "TempsAvantTransition";
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.ServiceAgentExtended.prototype['_diagnostic'] = null;
        Services.ServiceAgentExtended.prototype.demarrerDiagnostic = function (serviceInit, initDate) {
            var _this = this;
            if (this._diagnostic.stepId !== this.Step.CurrentStepId) {
                this._diagnostic.previousStepEndTime = this.Step.PreviousStepEndTime;
                this._diagnostic.stepStartTime = this.Step.StartTime;
                this._diagnostic.displayTime = this.Step.DisplayTime;
                this._diagnostic.initTime = initDate;
                this._diagnostic.lastDigestCycleTime = initDate;
                this._diagnostic.userTime = 0;
                this._diagnostic.codeApplication = serviceInit.codeApplication;
                this._diagnostic.stepId = this.Step.CurrentStepId;
                this._diagnostic.stepPath = this.Step.CurrentPath;
                this._diagnostic.finalDiagnostic = this.Step.DiagnosticTraceSentForStep;
                this._diagnostic.timeBeforeTransition = 0;
                //a deplacer dans le code de connaissance client//
                if (this.Step.NomComposant === "Connaissance Client Particulier" && !serviceInit.listenedContextKey) {
                    serviceInit.listenedContextKey = "MAJSYNTHESENSDK";
                }
                this._listenedContextKey = serviceInit.listenedContextKey;
                this.prepareTracesTechniques();
                /*
                 * this.Step.Diagnostic n'est vrai que si on est dans le portail technique,
                 * les informations sont alors remontées en temps réel et affichées dans le portail
                 */
                if (this.Step.Diagnostic) {
                    this.countWatchers();
                }
                return this.Library.Context.GetFromContext(Services.Trace.KEY_TIME_BEFORE_TRANSITION).then(function (result) {
                    if (result !== null) {
                        var timeParsed = Number(result);
                        if (!isNaN(timeParsed)) {
                            _this._diagnostic.timeBeforeTransition = timeParsed;
                        }
                        _this.Library.Context.AddToContext(Services.Trace.KEY_TIME_BEFORE_TRANSITION, "");
                    }
                });
            }
        };
        Services.ServiceAgentExtended.prototype.prepareTracesTechniques = function () {
            var self = this;
            Services.ServiceAgentExtended.logger_extended.info("Fin d'initialisation du serviceAgent");
            //on s'abonne à l'évenement de digest
            self._clearWatchListener = self.$rootScope.$watch(function (n, v, s) {
                //mise à jour des données de diagnostic
                self._diagnostic.digestCycles++;
                self._diagnostic.lastDigestCycleTime = Date.now();
                //envoi du diagnostic si necessaire
                if (self.Step && self.Step.Diagnostic) {
                    self.Library.Trace.sendDiagnostic(self._diagnostic);
                }
                //Réinitialisation du timer de fin de chargement
                if (self._lastDigestTimerHandle) {
                    window.clearTimeout(self._lastDigestTimerHandle);
                }
                // Il est nécessaire d'envelopper la méthode à exécuter dans une fonction pour que 
                // self référencie ServiceAgentExtended et non pas Window.
                self._lastDigestTimerHandle = window.setTimeout(function () { self.OnPremiereAction(null); }, 10000);
            });
            //divers evenements de debug
            self.$rootScope.$on("$includeContentLoaded", function () {
                Services.ServiceAgentExtended.logger_extended.debug("$includeContentLoaded");
            });
            self.$rootScope.$on("$viewContentLoaded", function () {
                Services.ServiceAgentExtended.logger_extended.debug("$viewContentLoaded");
            });
            //on s'abonne aux évenements utilisateurs
            this.ajouteEvenementsUtilisateurs();
            //on s'abonne aux évenements des modification de contexte si nécessaire
            if (this._listenedContextKey) {
                this.Library.Context.SetContextListener(this._listenedContextKey, this.OnContextEvent);
            }
        };
        Services.ServiceAgentExtended.prototype.ajouteEvenementsUtilisateurs = function () {
            var _this = this;
            window.addEventListener("mousedown", function (ev) {
                _this.OnPremiereAction(ev);
            }, false);
            window.addEventListener("wheel", function (ev) {
                _this.OnPremiereAction(ev);
            }, false);
            window.addEventListener("scroll", function (ev) {
                _this.OnPremiereAction(ev);
            }, false);
            window.addEventListener("keypress", function (ev) {
                _this.OnPremiereAction(ev);
            }, false);
        };
        Services.ServiceAgentExtended.prototype.retireEvenementsUtilisateurs = function () {
            var _this = this;
            window.removeEventListener("mousedown", function (ev) {
                _this.OnPremiereAction(ev);
            }, false);
            window.removeEventListener("wheel", function (ev) {
                _this.OnPremiereAction(ev);
            }, false);
            window.removeEventListener("scroll", function (ev) {
                _this.OnPremiereAction(ev);
            }, false);
            window.removeEventListener("keypress", function (ev) {
                _this.OnPremiereAction(ev);
            }, false);
        };
        Services.ServiceAgentExtended.prototype.stringify = function (d, ev) {
            var res = "";
            res += "|stepId|" + d.stepId;
            res += "|digestCycles|" + d.digestCycles;
            res += "|totalDisplayDuration|" + (d.totalDisplayDuration + d.timeBeforeTransition);
            res += "|stepStartDuration|" + d.stepStartDuration;
            res += "|totalStartDuration|" + d.totalStartDuration;
            if (ev && ev.type) {
                res += "|type|" + ev.type;
            }
            else {
                res += "|type|timer";
            }
            res += "|staticFilesLoadDuration|" + d.staticFilesLoadDuration;
            res += "|digestDuration|" + d.digestDuration;
            res += "|userDuration|" + (d.userDuration + d.timeBeforeTransition);
            res += "|totalUserDuration|" + d.totalUserDuration;
            res += "|userDurationEnabled|" + d.userDurationEnabled;
            return res;
        };
        Services.ServiceAgentExtended.prototype.OnPremiereAction = function (ev) {
            if (!this._diagnostic.finalDiagnostic) {
                Services.Loggers.FLASH.INSTANCE.setValue('action', 'ServiceAgentExtended');
                Services.Loggers.FLASH.INSTANCE.setValue('details', { lastDigestTime: this._diagnostic.lastDigestCycleTime });
                // this.Library.Context.GetFromContext(Trace.KEY_TIME_BEFORE_TRANSITION).then((result: string) => {
                //     if (result !== null) {
                //         let timeParsed: number = Number(result);
                // 		if (!isNaN(timeParsed)) { 
                //             this._diagnostic.timeBeforeTransition = timeParsed;
                //         }
                //     }
                Services.ServiceAgentExtended.logger_extended.info("fin de chargement de l'application %1", this.stringify(this._diagnostic, ev));
                //    this.Library.Context.AddToContext(Trace.KEY_TIME_BEFORE_TRANSITION, "");
                this._diagnostic.finalDiagnostic = true;
                this.Library.Trace.sendDiagnostic(this._diagnostic);
                //});
            }
            if (this._clearWatchListener)
                this._clearWatchListener();
            if (this._lastDigestTimerHandle)
                window.clearTimeout(this._lastDigestTimerHandle);
            this.retireEvenementsUtilisateurs();
        };
        Services.ServiceAgentExtended.prototype.cleanTimers = function () {
            if (this._clearWatchListener)
                this._clearWatchListener();
            if (this._lastDigestTimerHandle)
                window.clearTimeout(this._lastDigestTimerHandle);
            this.retireEvenementsUtilisateurs();
            if (this._watcherCountTimeout)
                window.clearTimeout(this._watcherCountTimeout);
        };
        Services.ServiceAgentExtended.prototype.countWatchers = function () {
            var _this = this;
            var result = this.Context.AnalyseApp();
            this._diagnostic.watchers = Math.max(result.TotalWatchers, result.TotalWatchers2, result.TotalWatchers3);
            this.Library.Trace.sendDiagnostic(this._diagnostic);
            this._watcherCountTimeout = window.setTimeout(function () {
                _this.countWatchers();
            }, 5000);
        };
        Services.ServiceAgentExtended.onNewInstance(function (pInstance) {
            pInstance.addListenerBeforeInitialization(function () {
                if (!this._diagnostic) {
                    this._diagnostic = new Services.ApplicationDiagnostic();
                }
                else {
                    this.cleanTimers();
                }
            });
            pInstance.addListenerAfterInitialization(function (serviceInit, initDate) {
                if (this.Step) {
                    this.demarrerDiagnostic(serviceInit, initDate);
                }
            });
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var _usableLogger;
        Services.Core.defineProperty(Services.ServiceAgent, "Trace", {
            get: function () {
                return _usableLogger;
            },
            set: function () {
                // do nothing;
            }
        });
        Services.onInitUsableLoggerForServiceAgent = function (pServiceAgent, pCodeApplication) {
            var codeEtapeLog;
            if (pCodeApplication) {
                codeEtapeLog = pCodeApplication;
            }
            else {
                codeEtapeLog = "LocalLauncher";
            }
            _usableLogger = new Services.Trace.Logger(codeEtapeLog, "Application", pServiceAgent.Library);
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des traces coté agent.
* @class TraceAgent : initialise l'agent de trace
* @class Logger : Permet de tracer coté manager
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            var TraceAgent = /** @class */ (function (_super) {
                __extends(TraceAgent, _super);
                /*
                * Appelé par le ServiceAgent
                * @param agentLibrary : services disponibles pour un agent
                * @param errorCallback : gestionnaire d'erreur du serviceAgent
                * @param application : nom de l'application fonctionnelle
                * @param applicationVersion : version de l'application fonctionnelle
                */
                function TraceAgent() {
                    var _this = _super.call(this, Services.Components.ComponentType.Trace) || this;
                    _this.regExpSTC = /^MyWay\.Services\./;
                    return _this;
                }
                TraceAgent.prototype.init = function (pAgentLibrary, pMessageService, pMessageInitializer) {
                    var _this = this;
                    this._application = pMessageInitializer.codeApplication;
                    this._applicationVersion = pMessageInitializer.applicationVersion;
                    return _super.prototype.init.call(this, pAgentLibrary, pMessageService, pMessageInitializer).then(function () {
                        //Ajout de la méthode qui récupèrera les logs envoyés au logger générique
                        Services.Loggers.Appenders.BroadcastAppender.METHODE_PURGE_TRACES = function (pLog) {
                            _this.sendLog(pLog);
                        };
                    });
                };
                TraceAgent.prototype.dispose = function () {
                    Services.Loggers.Appenders.BroadcastAppender.METHODE_PURGE_TRACES = null;
                    return this.library.Core.getPromesseSelfResoved();
                };
                TraceAgent.prototype.send = function (trace) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    if (!this.regExpSTC.test(trace.composant) && trace.niveau === Trace.NIVEAUX_TRACE.INFO) {
                        trace.niveau = Trace.NIVEAUX_TRACE.DEBUG;
                    }
                    return this.sendMessage(Trace.Messages.TraceMessageSubject.Tracer, { trace: trace });
                };
                TraceAgent.prototype.sendLog = function (pLog) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    if (!this.regExpSTC.test(pLog.packageName) && pLog.niveau === Services.Loggers.LEVEL.INFO) {
                        pLog.niveau = Services.Loggers.LEVEL.DEBUG;
                    }
                    return this.sendMessage(Trace.Messages.TraceMessageSubject.Logger, { log: pLog });
                };
                TraceAgent.prototype.sendDiagnostic = function (diagnostic) {
                    return this.sendMessage(Trace.Messages.TraceMessageSubject.SendDiagnostic, { diagnostic: diagnostic });
                };
                /**
                 * Permet à une SPA  de rajouter un temp à la trace de fin de chargement
                 * Cette durée est stockée dans le context à l'étape A pour être utilisée dans le calcul du temps de chargement de l'étape B
                 */
                TraceAgent.prototype.setTempsAvantTransition = function (temps) {
                    return this.library.Context.AddToContext(Trace.KEY_TIME_BEFORE_TRANSITION, temps.toString());
                };
                return TraceAgent;
            }(Services.Components.ComponentAgentBase));
            Trace.TraceAgent = TraceAgent;
            Services.Components.RegistryAgent.getInstance().register(TraceAgent);
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgentExtended, 'ContextTechAgent', {
            get: function () {
                return this._techLibrary.ContextTechAgent;
            }
        });
        Services.TechAgentExtended.prototype.AddToGlobalContext = function (kvp) {
            return this._techLibrary.AddToGlobalContext(kvp);
        };
        Services.TechAgentExtended.prototype.AddToTempoContext = function (kvp) {
            return this._techLibrary.AddToTempoContext(kvp);
        };
        Services.TechAgentExtended.prototype.AddToMainProcessContext = function (key, value) {
            return this._techLibrary.AddToMainProcessContext(key, value);
        };
        Services.TechAgentExtended.prototype.GetFromMainProcessContext = function (key) {
            return this._techLibrary.GetFromMainProcessContext(key);
        };
        Services.TechAgentExtended.prototype.GetCurrentMainProcess = function () {
            return this._techLibrary.GetCurrentMainProcess();
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgent, 'ContextTechAgent', {
            get: function () {
                return this._techLibrary.ContextTechAgent;
            }
        });
        Services.TechAgent.prototype.AddToGlobalContext = function (kvp) {
            return this.ContextTechAgent.AddToGlobalContext(kvp);
        };
        Services.TechAgent.prototype.AddToTempoContext = function (kvp) {
            return this.ContextTechAgent.AddToTempoContext(kvp);
        };
        Services.TechAgent.prototype.AddToMainProcessContext = function (key, value) {
            return this.ContextTechAgent.AddToMainProcessContext(key, value);
        };
        Services.TechAgent.prototype.GetFromMainProcessContext = function (key) {
            return this.ContextTechAgent.GetFromMainProcessContext(key);
        };
        Services.TechAgent.prototype.GetCurrentMainProcess = function () {
            return this.ContextTechAgent.GetCurrentMainProcess();
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.TechLibrary.addInitListener(function (pInstance, library) {
            pInstance.ContextTechAgent = library.Context;
        });
        Services.TechLibrary.prototype.AddToGlobalContext = function (kvp) {
            return this.ContextTechAgent.AddToGlobalContext(kvp);
        };
        Services.TechLibrary.prototype.AddToTempoContext = function (kvp) {
            return this.ContextTechAgent.AddToTempoContext(kvp);
        };
        Services.TechLibrary.prototype.AddToMainProcessContext = function (key, value) {
            return this.ContextTechAgent.AddToMainProcessContext(key, value);
        };
        Services.TechLibrary.prototype.GetFromMainProcessContext = function (key) {
            return this.ContextTechAgent.GetFromMainProcessContext(key);
        };
        Services.TechLibrary.prototype.GetCurrentMainProcess = function () {
            return this.ContextTechAgent.GetCurrentMainProcess();
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var ContextTechAgent = /** @class */ (function (_super) {
                __extends(ContextTechAgent, _super);
                function ContextTechAgent() {
                    return _super.call(this) || this;
                }
                /**
                 * Renvoie toutes les variables partagées
                 * @return {} [description]
                 */
                ContextTechAgent.prototype.GetSharedStorage = function () {
                    return this.sendMessage(Context.ContextMessageSubject.GetSharedStorage, {});
                };
                /**
                 * Renvoie toutes les variables processus hors portail
                 * @return {} [description]
                 */
                ContextTechAgent.prototype.GetWaitingProcesses = function () {
                    return this.sendMessage(Context.ContextMessageSubject.GetWaitingProcesses, {});
                };
                /**
                 * Renvoie toutes les variables du portail
                 * @return {} [description]
                 */
                ContextTechAgent.prototype.GetPortals = function () {
                    return this.sendMessage(Context.ContextMessageSubject.GetPortals, {});
                };
                /**
                 * Renvoie toutes les variables du global storage
                 * @return {} [description]
                 */
                ContextTechAgent.prototype.GetGlobalStorage = function () {
                    return this.sendMessage(Context.ContextMessageSubject.GetGlobalStorage, {});
                };
                /**
                 * Efface le contexte
                 * @return {} [description]
                 */
                ContextTechAgent.prototype.ClearContext = function () {
                    return this.sendMessage(Context.ContextMessageSubject.ClearContext, {});
                };
                /**
                * Efface le bus interop
                * @return {} [description]
                */
                ContextTechAgent.prototype.ClearBus = function () {
                    if (this.library['Interop']) {
                        return this.library['Interop'].clearBus();
                    }
                    else {
                        return this.library.Core.getPromesseSelfResoved();
                    }
                };
                ContextTechAgent.prototype.AddToContext = function (arg1, arg2, elementId) {
                    if (typeof arg2 === "string") {
                        return _super.prototype.AddToContext.call(this, arg1, arg2);
                    }
                    return this.sendMessage(Context.ContextMessageSubject.AddToContextTech, {
                        level: arg1,
                        kvp: arg2,
                        elementId: elementId
                    });
                };
                ContextTechAgent.prototype.AddToGlobalContext = function (kvp) {
                    return this.sendMessage(Context.ContextMessageSubject.AddToGlobalContext, {
                        kvp: kvp
                    });
                };
                ContextTechAgent.prototype.AddToTempoContext = function (kvp) {
                    return this.sendMessage(Context.ContextMessageSubject.AddToTempoContext, {
                        kvp: kvp
                    });
                };
                ContextTechAgent.prototype.AddToMainProcessContext = function (key, value) {
                    return this.sendMessage(Context.ContextMessageSubject.AddToMainProcessContext, {
                        key: key,
                        value: value
                    });
                };
                ContextTechAgent.prototype.AddToProcessStepContext = function (key, value, processStepId) {
                    return this.sendMessage(Context.ContextMessageSubject.AddToProcessStepContext, {
                        key: key,
                        value: value,
                        processStepId: processStepId
                    });
                };
                ContextTechAgent.prototype.GetFromMainProcessContext = function (key) {
                    return this.sendMessage(Context.ContextMessageSubject.GetFromMainProcessContext, {
                        key: key
                    });
                };
                ContextTechAgent.prototype.GetCurrentMainProcess = function () {
                    return this.sendMessage(Context.ContextMessageSubject.GetCurrentMainProcess, {});
                };
                return ContextTechAgent;
            }(Context.ContextAgent));
            Context.ContextTechAgent = ContextTechAgent;
            Services.Components.RegistryAgent.getInstance().register(ContextTechAgent);
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Aide"] = "Aide";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Aide;
        (function (Aide) {
            var Messages;
            (function (Messages) {
                var AideMessageSubject;
                (function (AideMessageSubject) {
                    AideMessageSubject[AideMessageSubject["GetContenuInfobulle"] = 0] = "GetContenuInfobulle";
                    AideMessageSubject[AideMessageSubject["GetInfobullesAffichables"] = 1] = "GetInfobullesAffichables";
                })(AideMessageSubject = Messages.AideMessageSubject || (Messages.AideMessageSubject = {}));
                //Enregistrement du composant et de ses dépendances
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Aide, [Services.Components.ComponentType.Context, Services.Components.ComponentType.Display, Services.Components.ComponentType.Preferences]);
            })(Messages = Aide.Messages || (Aide.Messages = {}));
        })(Aide = Services.Aide || (Services.Aide = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Aide;
        (function (Aide) {
            var AideResult = /** @class */ (function () {
                function AideResult(data) {
                    if (data) {
                        this.ChampsDeSaisie = data.ChampsDeSaisie;
                        this.ModalePush = data.ModalePush;
                        this.Totem = data.Totem;
                        this.InfobullesAffichees = data.InfobullesAffichees;
                        this.DetailInfobulleAffichee = data.DetailInfobulleAffichee;
                    }
                }
                return AideResult;
            }());
            Aide.AideResult = AideResult;
            var ChampDeSaisieResult = /** @class */ (function () {
                function ChampDeSaisieResult(data) {
                    if (data) {
                        this.Id = data.Id;
                        this.IdChamp = data.IdChamp;
                        this.MessageCommunautaire = data.MessageCommunautaire;
                        this.MessageEtablissement = data.MessageEtablissement;
                        this.EstUneNouveaute = data.EstUneNouveaute;
                    }
                }
                return ChampDeSaisieResult;
            }());
            Aide.ChampDeSaisieResult = ChampDeSaisieResult;
            var ModalePushResult = /** @class */ (function () {
                function ModalePushResult(data) {
                    if (data) {
                        this.Message = data.Message;
                    }
                }
                return ModalePushResult;
            }());
            Aide.ModalePushResult = ModalePushResult;
            var TotemResult = /** @class */ (function () {
                function TotemResult(data) {
                    if (data) {
                        this.Categorie = data.Categorie;
                        this.Titre = data.Titre;
                        this.FormatDocument = data.FormatDocument;
                        this.Lien = data.Lien;
                        this.EstUneNouveaute = data.EstUneNouveaute;
                    }
                }
                return TotemResult;
            }());
            Aide.TotemResult = TotemResult;
            //Classe mère des composants infobulle
            var Infobulle = /** @class */ (function () {
                function Infobulle() {
                }
                return Infobulle;
            }());
            Aide.Infobulle = Infobulle;
            //Classe utilisée pour les infobulles que l'on souhaite afficher au chargement de la page.
            var InfobulleAfficheeResult = /** @class */ (function (_super) {
                __extends(InfobulleAfficheeResult, _super);
                function InfobulleAfficheeResult(nomChamp, nouveaute) {
                    var _this = _super.call(this) || this;
                    if (typeof (nomChamp) === "string") {
                        _this._nomChampLie = nomChamp ? nomChamp : "";
                        _this._estNouveaute = nouveaute ? nouveaute : false;
                    }
                    else if (typeof (nomChamp) === "object") {
                        _this._nomChampLie = nomChamp && nomChamp["_nomChampLie"] ? nomChamp["_nomChampLie"] : "";
                        _this._estNouveaute = nomChamp && nomChamp["_estNouveaute"] ? nomChamp["_estNouveaute"] : false;
                    }
                    else {
                        _this._nomChampLie = "";
                        _this._estNouveaute = false;
                    }
                    return _this;
                }
                InfobulleAfficheeResult.prototype.getNomChampLie = function () {
                    return this._nomChampLie;
                };
                InfobulleAfficheeResult.prototype.getEstNouveaute = function () {
                    return this._estNouveaute;
                };
                return InfobulleAfficheeResult;
            }(Infobulle));
            Aide.InfobulleAfficheeResult = InfobulleAfficheeResult;
            //Classe utilisée pour le détail d'une infobulle.
            var DetailInfobulleAfficheeResult = /** @class */ (function (_super) {
                __extends(DetailInfobulleAfficheeResult, _super);
                function DetailInfobulleAfficheeResult(nomChamp, nouveaute, message, img) {
                    var _this = this;
                    if (typeof (nomChamp) === "string") {
                        _this = _super.call(this, nomChamp, nouveaute) || this;
                        _this._message = message ? message : "";
                        _this._image = img ? img : null;
                    }
                    else if (typeof (nomChamp) === "object") {
                        _this = _super.call(this, nomChamp) || this;
                        _this._message = nomChamp && nomChamp["_message"] ? nomChamp["_message"] : "";
                        _this._image = nomChamp && nomChamp["_image"] ? nomChamp["_image"] : null;
                    }
                    else {
                        _this = _super.call(this, "", false) || this;
                        _this._message = "";
                        _this._image = null;
                    }
                    return _this;
                }
                DetailInfobulleAfficheeResult.prototype.getNomChampLie = function () {
                    return _super.prototype.getNomChampLie.call(this);
                };
                DetailInfobulleAfficheeResult.prototype.getEstNouveaute = function () {
                    return _super.prototype.getEstNouveaute.call(this);
                };
                DetailInfobulleAfficheeResult.prototype.getMessage = function () {
                    return this._message;
                };
                DetailInfobulleAfficheeResult.prototype.getImage = function () {
                    return this._image;
                };
                return DetailInfobulleAfficheeResult;
            }(InfobulleAfficheeResult));
            Aide.DetailInfobulleAfficheeResult = DetailInfobulleAfficheeResult;
        })(Aide = Services.Aide || (Services.Aide = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
 * Module de gestion des preferences
 * @module MyWay.Services.Preferences
 * classe : PreferencesAgent - public - Classe permettant la gestion de preferences
 */
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Preferences;
        (function (Preferences) {
            /**
             * Classe permettant la gestion de la configuration.
             */
            var PreferencesAgent = /** @class */ (function (_super) {
                __extends(PreferencesAgent, _super);
                /**
                 * Constructeur de la classe ConfigurationAgent.
                 */
                function PreferencesAgent() {
                    return _super.call(this, Services.Components.ComponentType.Preferences) || this;
                }
                /**
                 * Méthode permettant de lire une préférence spécifique.
                 *
                 * @param nomVariable Le nom de la préférence à récupérer.
                 * @returns une promesse avec une préférence en retour.
                 */
                PreferencesAgent.prototype.LirePreference = function (nomVariable, isChargerServeur) {
                    var lParametres = {
                        nomVariable: nomVariable,
                        isChargerServeur: isChargerServeur
                    };
                    return this.sendMessage(Preferences.PreferencesMessageSubject.LirePreference, lParametres).then(function (response) {
                        return response.valeurVariable;
                    });
                };
                /**
                 * Méthode permettant d'écrire une préférence ou d'en modifier une existante.
                 *
                 * @param nomVariable       Le nom de la préférence à écrire ou à modifier.
                 * @param valeurVariable    La valeur de la préférence.
                 * @returns une promesse sans valeur de retour.
                 */
                PreferencesAgent.prototype.EcrirePreference = function (nomVariable, valeurVariable) {
                    var preferences = [{
                            cle: nomVariable,
                            valeur: valeurVariable
                        }];
                    var lParametres = {
                        preferences: preferences
                    };
                    return this.sendMessage(Preferences.PreferencesMessageSubject.EcrirePreference, lParametres);
                };
                /**
                 * Méthode permettant de lire plusieurs préférences à la fois.
                 *
                 * @param codesPreference Une liste de nom de préférences à lire.
                 * @returns une promesse avec un tableau de préférences.
                 */
                PreferencesAgent.prototype.lireMultiPreference = function (codesPreference) {
                    var lParametres = {
                        codesPreference: codesPreference
                    };
                    return this.sendMessage(Preferences.PreferencesMessageSubject.LireMultiPreference, lParametres).then(function (response) {
                        return response.preferences;
                    });
                };
                /**
                 * Méthode permettant d'écrire ou modifier plusieurs préférences à la fois.
                 *
                 * @param preferences Une liste de préférences à écrire ou modifier.
                 * @returns une promesse sans valeur de retour.
                 */
                PreferencesAgent.prototype.ecrireMultiPreference = function (preferences) {
                    var lParametres = {
                        preferences: preferences
                    };
                    return this.sendMessage(Preferences.PreferencesMessageSubject.EcrirePreference, lParametres);
                };
                return PreferencesAgent;
            }(Services.Components.ComponentAgentBase));
            Preferences.PreferencesAgent = PreferencesAgent;
            Services.Components.RegistryAgent.getInstance().register(PreferencesAgent);
        })(Preferences = Services.Preferences || (Services.Preferences = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Preferences;
        (function (Preferences) {
            /**
            * Classe permettant la gestion des préférences.
            */
            var PreferencesApi = /** @class */ (function (_super) {
                __extends(PreferencesApi, _super);
                /**
                 * Constructeur de PreferencesApi.
                 */
                function PreferencesApi() {
                    return _super.call(this, Services.Components.ComponentType.Preferences) || this;
                }
                /**
                 * Méthode permettant de récupérer les préférences d'un utilisateur.
                 *
                 * @param codeAgent Le codeAgent permettant d'identifier l'utilisateur.
                 * @returns une promesse contenant les préférences de l'utilisateur.
                 */
                PreferencesApi.prototype.ObtenirPreferences = function (codeAgent) {
                    return this.libraryManager.Core.sendRequest({
                        withHeaders: true,
                        url: Services.PrivatePortalServiceParameters.Instance().PreferencesUrl + '/multi?codeAgent=' + codeAgent,
                        method: Services.MethodEnum.GET
                    }).then(function (pPrefs) {
                        var lResults = [];
                        for (var key in pPrefs) {
                            lResults.push({
                                cle: key,
                                valeur: pPrefs[key]
                            });
                        }
                        return lResults;
                    });
                };
                /**
                 * Méthode permettant d'ajouter une liste de préférences associer à un utilisateur.
                 *
                 * @param codeAgent     Le codeAgent permettant d'identifier l'utilisateur.
                 * @param preferences   La liste des préférences à ajouter.
                 * @returns une promesse avec aucun donnée de retour.
                 */
                PreferencesApi.prototype.EcrirePreference = function (codeAgent, preferences) {
                    var lDatas = {};
                    preferences.forEach(function (pPreference) {
                        lDatas[pPreference.cle] = pPreference.valeur;
                    });
                    var settings = {};
                    settings.method = Services.MethodEnum.POST;
                    settings.url = Services.PrivatePortalServiceParameters.Instance().PreferencesUrl + '/multi?codeAgent=' + codeAgent;
                    settings.async = true;
                    settings.data = { "preferences": lDatas };
                    settings.contentType = Services.ContentTypeEnum.JSON;
                    return this.libraryManager.Core.sendRequest(settings);
                };
                return PreferencesApi;
            }(Services.Components.ComponentApiBase));
            Preferences.PreferencesApi = PreferencesApi;
            Services.Components.RegistryApi.getInstance().register(PreferencesApi);
        })(Preferences = Services.Preferences || (Services.Preferences = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Interop;
        (function (Interop) {
            var InteropApiFactory = /** @class */ (function (_super) {
                __extends(InteropApiFactory, _super);
                function InteropApiFactory() {
                    var _this = _super.call(this, Services.Components.ComponentType.Interop) || this;
                    _this.wrapped = null;
                    return _this;
                }
                InteropApiFactory.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    var _this = this;
                    if (pCapabilities.ServiceLocal) {
                        this.wrapped = new Interop.InteropApiWindows();
                    }
                    else {
                        this.wrapped = new Interop.InteropApiFullWeb();
                    }
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer).then(function () {
                        return _this.wrapped.initApi(pLibraryManager);
                    });
                };
                InteropApiFactory.prototype.initApi = function () {
                };
                InteropApiFactory.prototype.lancer = function (executableWrapper, contexte, parametres, sync, callback) {
                    return this.wrapped.lancer(executableWrapper, contexte, parametres, sync, callback);
                };
                InteropApiFactory.prototype.addToContextInterop = function (level, key, value, callback, errorCallback) {
                    return this.wrapped.addToContextInterop(level, key, value, callback, errorCallback);
                };
                InteropApiFactory.prototype.addListToContextInterop = function (level, datas, callback, errorCallback) {
                    return this.wrapped.addListToContextInterop(level, datas, callback, errorCallback);
                };
                InteropApiFactory.prototype.getVarEnv = function (nom, callback, errorCallback) {
                    return this.wrapped.getVarEnv(nom, callback, errorCallback);
                };
                InteropApiFactory.prototype.getRegistryValue = function (niveau, souscle, nom, callback, errorCallback) {
                    return this.wrapped.getRegistryValue(niveau, souscle, nom, callback, errorCallback);
                };
                InteropApiFactory.prototype.ecrireFichier = function (pathFichier, fluxdonnees, ajouter, creeDir) {
                    return this.wrapped.ecrireFichier(pathFichier, fluxdonnees, ajouter, creeDir);
                };
                InteropApiFactory.prototype.lireFichier = function (pathFichier) {
                    return this.wrapped.lireFichier(pathFichier);
                };
                InteropApiFactory.prototype.getInfoFichier = function (pathFichier, callback, errorCallback) {
                    return this.wrapped.getInfoFichier(pathFichier, callback, errorCallback);
                };
                InteropApiFactory.prototype.afficherWindowParHandle = function (handle, affiche) {
                    return this.wrapped.afficherWindowParHandle(handle, affiche);
                };
                InteropApiFactory.prototype.afficherWindowParPid = function (pid, affiche) {
                    return this.wrapped.afficherWindowParPid(pid, affiche);
                };
                InteropApiFactory.prototype.afficherSynthese = function (numeroClient) {
                    return this.wrapped.afficherSynthese(numeroClient);
                };
                InteropApiFactory.prototype.activerApplicationAppelante = function (numeroPlan) {
                    return this.wrapped.activerApplicationAppelante(numeroPlan);
                };
                InteropApiFactory.prototype.notifierFinStep = function (stepId) {
                    return this.wrapped.notifierFinStep(stepId);
                };
                InteropApiFactory.prototype.notifierEtatProcessus = function (processId, etat) {
                    return this.wrapped.notifierEtatProcessus(processId, etat);
                };
                InteropApiFactory.prototype.notifierFinProcessus = function (processId, datas) {
                    return this.wrapped.notifierFinProcessus(processId, datas);
                };
                InteropApiFactory.prototype.notifierChangementNomProcessus = function (processid, nomProcessus) {
                    return this.wrapped.notifierChangementNomProcessus(processid, nomProcessus);
                };
                InteropApiFactory.prototype.subscribeToEvent = function (onEvent, onAcceptEvent, onConnection) {
                    return this.wrapped.subscribeToEvent(onEvent, onAcceptEvent, onConnection);
                };
                InteropApiFactory.prototype.testLocalService = function () {
                    return this.wrapped.testLocalService();
                };
                InteropApiFactory.prototype.getListFromContextInterop = function (level, datas, callback, errorCallback) {
                    return this.wrapped.getListFromContextInterop(level, datas, callback, errorCallback);
                };
                InteropApiFactory.prototype.getFromContextInterop = function (level, key, callback, errorCallback) {
                    return this.wrapped.getFromContextInterop(level, key, callback, errorCallback);
                };
                InteropApiFactory.prototype.getCommonDataInteropToUpdate = function () {
                    return this.wrapped.getCommonDataInteropToUpdate();
                };
                return InteropApiFactory;
            }(Services.Components.ComponentApiBase));
            Interop.InteropApiFactory = InteropApiFactory;
            Services.Components.RegistryApi.getInstance().register(InteropApiFactory);
        })(Interop = Services.Interop || (Services.Interop = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Interop;
        (function (Interop) {
            var InteropApiFullWeb = /** @class */ (function () {
                function InteropApiFullWeb() {
                }
                InteropApiFullWeb.prototype.initApi = function (pLibraryManager) {
                    this.libraryManager = pLibraryManager;
                };
                InteropApiFullWeb.prototype.lancer = function (executableWrapper, contexte, parametres, sync, callback) {
                };
                InteropApiFullWeb.prototype.addToContextInterop = function (level, key, value, callback, errorCallback) {
                };
                InteropApiFullWeb.prototype.addListToContextInterop = function (level, datas, callback, errorCallback) {
                };
                InteropApiFullWeb.prototype.getListFromContextInterop = function (level, datas, callback, errorCallback) {
                };
                InteropApiFullWeb.prototype.getFromContextInterop = function (level, key, callback, errorCallback) {
                };
                InteropApiFullWeb.prototype.getVarEnv = function (nom, callback, errorCallback) {
                };
                InteropApiFullWeb.prototype.getRegistryValue = function (niveau, souscle, nom, callback, errorCallback) {
                };
                InteropApiFullWeb.prototype.ecrireFichier = function (pathFichier, fluxdonnees, ajouter, creeDir) {
                    return this.libraryManager.Core.createPromiseSelfResolved();
                };
                InteropApiFullWeb.prototype.lireFichier = function (pathFichier) {
                    return this.libraryManager.Core.createPromiseSelfResolved();
                };
                InteropApiFullWeb.prototype.getInfoFichier = function (pathFichier, callback, errorCallback) {
                };
                InteropApiFullWeb.prototype.afficherWindowParHandle = function (handle, affiche) {
                };
                InteropApiFullWeb.prototype.afficherWindowParPid = function (pid, affiche) {
                };
                InteropApiFullWeb.prototype.afficherSynthese = function (numeroClient) {
                };
                InteropApiFullWeb.prototype.activerApplicationAppelante = function (numeroPlan) {
                };
                InteropApiFullWeb.prototype.activerWindow = function (handle) {
                };
                InteropApiFullWeb.prototype.notifierFinStep = function (stepId) {
                };
                InteropApiFullWeb.prototype.notifierEtatProcessus = function (processId, etat) {
                };
                InteropApiFullWeb.prototype.notifierFinProcessus = function (processId, datas) {
                };
                InteropApiFullWeb.prototype.notifierChangementNomProcessus = function (processId, nomProcessus) {
                };
                InteropApiFullWeb.prototype.activerApplication = function (handle, active) {
                };
                InteropApiFullWeb.prototype.getHandlePetra = function (callback) {
                };
                InteropApiFullWeb.prototype.subscribeToEvent = function (onEvent) {
                };
                InteropApiFullWeb.prototype.testLocalService = function () {
                };
                InteropApiFullWeb.prototype.sendConnectionInfo = function (portalType, processesId) {
                };
                InteropApiFullWeb.prototype.getCommonDataInteropToUpdate = function () {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var dataInterop = [];
                    deferred.resolve(dataInterop);
                    return deferred.promise;
                };
                return InteropApiFullWeb;
            }());
            Interop.InteropApiFullWeb = InteropApiFullWeb;
        })(Interop = Services.Interop || (Services.Interop = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Interop;
        (function (Interop) {
            var InteropApiWindows = /** @class */ (function () {
                function InteropApiWindows() {
                }
                InteropApiWindows.prototype.initApi = function (pLibraryManager) {
                    this._localServiceUrl = Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl;
                    this.libraryManager = pLibraryManager;
                };
                InteropApiWindows.prototype.testLocalService = function () {
                    var _this = this;
                    var settings = {
                        url: this._localServiceUrl + '/Contexte/GetAllVarEnv',
                        cache: false,
                        async: false
                    };
                    Services.CoreCommon.SendRequest(settings, function () {
                    }, function () {
                        Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled = true;
                        _this.warnLocalServiceUnavailability();
                    });
                };
                InteropApiWindows.prototype.lancer = function (executableWrapper, contexte, parametres, sync, callback) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var executableWrapperJson = JSON.stringify(executableWrapper);
                        var contexteJson = JSON.stringify(contexte);
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/lanceur/lancer?exec=' + executableWrapperJson + '&parametres=' + parametres + "&contexte=" + contexteJson + "&sync=" + sync,
                            contentType: Services.ContentTypeEnum.JSON,
                            method: Services.MethodEnum.POST,
                        }, function () {
                        }, callback);
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.addToContextInterop = function (level, key, value, callback, errorCallback) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var cheminContexte;
                        cheminContexte = '/Myway/' + level + '/';
                        if (level.toLowerCase() == 'process')
                            if (key.toLowerCase() != 'courant')
                                cheminContexte = cheminContexte + 'courant/';
                        key = cheminContexte + key;
                        var retourContexte;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/contexte/setvaleur?cle=' + key + '&valeur=' + value,
                            //data: retourContexte,
                            method: Services.MethodEnum.GET,
                            contentType: Services.ContentTypeEnum.JSON,
                            async: false,
                            cache: false
                        }, function (retourContexte) {
                            if (callback)
                                callback(retourContexte);
                        }, errorCallback);
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.addListToContextInterop = function (level, datas, callback, errorCallback) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var cheminContexte;
                        cheminContexte = '/Myway/' + level + '/courant/';
                        var retourContexte;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/contexte/AddListToContextInterop?racinePath=' + cheminContexte + '&datas=' + JSON.stringify(datas),
                            //data: retourContexte,
                            method: Services.MethodEnum.GET,
                            contentType: Services.ContentTypeEnum.JSON,
                            async: false,
                            cache: false
                        }, function (retourContexte) {
                            if (callback)
                                callback(retourContexte);
                        }, errorCallback);
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.getFromContextInterop = function (level, key, callback, errorCallback) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var cheminContexte;
                        cheminContexte = '/Myway/' + level + '/';
                        key = cheminContexte + key;
                        var retourContexte;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/contexte/getvaleur?cle=' + key,
                            data: retourContexte,
                            method: Services.MethodEnum.GET,
                            contentType: Services.ContentTypeEnum.JSON,
                            async: false,
                            cache: false
                        }, function (returnData) {
                            if (callback)
                                callback(returnData);
                        }, errorCallback);
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.getListFromContextInterop = function (level, datas, callback, errorCallback) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var cheminContexte;
                        cheminContexte = '/Myway/' + level + '/courant/';
                        var retourContexte;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/contexte/GetListFromContextInterop?racinePath=' + cheminContexte + '&datas=' + JSON.stringify(datas),
                            //data: retourContexte,
                            method: Services.MethodEnum.GET,
                            contentType: Services.ContentTypeEnum.JSON,
                            async: false,
                            cache: false
                        }, function (returnDatas) {
                            if (callback)
                                callback(returnDatas);
                        }, errorCallback);
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.getVarEnv = function (nom, callback, errorCallback) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var valeur;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/environment/getvaleur?nom=' + nom,
                            data: valeur,
                            async: false,
                            method: Services.MethodEnum.GET,
                            contentType: Services.ContentTypeEnum.JSON,
                            cache: false
                        }, function (valeur) {
                            if (callback)
                                callback(valeur);
                        }, errorCallback);
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.getRegistryValue = function (niveau, souscle, nom, callback, errorCallback) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var valeur;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/window/GetRegistryValue?niveau=' + niveau + '&souscle=' + souscle + '&nom=' + nom,
                            data: valeur,
                            async: false,
                            method: Services.MethodEnum.GET,
                            contentType: Services.ContentTypeEnum.JSON,
                            cache: false
                        }, function (valeur) {
                            if (callback)
                                callback(valeur);
                        }, errorCallback);
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.lireFichier = function (pathFichier) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        return this.libraryManager.Core.sendRequest({
                            url: Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + '/fichier/lire?pathFichier=' + pathFichier,
                            contentType: Services.ContentTypeEnum.JSON,
                            method: Services.MethodEnum.GET,
                            async: false,
                            cache: false
                        }).then(function (data) {
                            return data;
                        });
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.getInfoFichier = function (pathFichier, callback, errorCallback) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var infoFichier;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/fichier/GetInfo?pathFichier=' + pathFichier,
                            data: infoFichier,
                            type: 'GET',
                            async: false,
                            method: Services.MethodEnum.GET,
                            contentType: Services.ContentTypeEnum.JSON,
                            cache: false
                        }, function (datavalue) {
                            if (callback)
                                callback(datavalue);
                        }, errorCallback);
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.ecrireFichier = function (pathFichier, fluxdonnees, ajouter, creeDir) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        return this.libraryManager.Core.sendRequest({
                            url: Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + '/fichier/ecrire?pathFichier=' + pathFichier + '&ajouter=' + ajouter + '&creeDir=' + creeDir,
                            data: fluxdonnees,
                            contentType: Services.ContentTypeEnum.JSON,
                            method: Services.MethodEnum.POST,
                            type: 'POST',
                            async: false
                        }).then(function (data) {
                            return data;
                        });
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.afficherWindowParHandle = function (handle, affiche) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var retour;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/lanceur/AfficherWindowParHandle?handle=' + handle + '&affiche=' + affiche,
                            data: retour,
                            async: false,
                            method: Services.MethodEnum.POST,
                            contentType: Services.ContentTypeEnum.JSON
                        }, function () {
                        }, function () {
                        });
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.afficherWindowParPid = function (pid, affiche) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var retour;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/lanceur/AfficherWindowParPid?pid=' + pid + '&affiche=' + affiche,
                            data: retour,
                            async: false,
                            method: Services.MethodEnum.POST,
                            contentType: Services.ContentTypeEnum.JSON
                        }, function () {
                        }, function () {
                        });
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.afficherSynthese = function (numeroClient) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var retour;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/lanceur/AfficherSynthese?numeroClient=' + numeroClient,
                            data: retour,
                            async: false,
                            method: Services.MethodEnum.POST,
                            contentType: Services.ContentTypeEnum.JSON
                        }, function () {
                        }, function () {
                        });
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.activerApplicationAppelante = function (numeroPlan) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var retour;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/lanceur/ActiverApplicationAppelante?numeroPlan=' + numeroPlan,
                            data: retour,
                            async: false,
                            method: Services.MethodEnum.POST,
                            contentType: Services.ContentTypeEnum.JSON
                        }, function () {
                        }, function () {
                        });
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.notifierFinStep = function (stepId) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var retour;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/lanceur/NotifierFinStep?stepId=' + stepId,
                            data: retour,
                            async: false,
                            method: Services.MethodEnum.POST,
                            contentType: Services.ContentTypeEnum.JSON
                        }, function () {
                        }, function () {
                        });
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.notifierEtatProcessus = function (processId, etat) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var retour;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/lanceur/NotifierEtatProcessus?processId=' + processId + '&cId=' + this._connectionId + "&Etat=" + etat,
                            data: retour,
                            async: false,
                            method: Services.MethodEnum.POST,
                            contentType: Services.ContentTypeEnum.JSON
                        }, function () {
                        }, function (erreur) {
                            console.log(erreur);
                        });
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.notifierFinProcessus = function (processId, datas) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var retour;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/lanceur/NotifierFinProcessusAvecData?processId=' + processId + '&cId=' + this._connectionId + '&datas=' + JSON.stringify(datas),
                            data: retour,
                            async: false,
                            method: Services.MethodEnum.POST,
                            contentType: Services.ContentTypeEnum.JSON
                        }, function () {
                        }, function (erreur) {
                            console.log(erreur);
                        });
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.notifierChangementNomProcessus = function (processId, nomProcessus) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var retour;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/lanceur/NotifierChangementNomProcessus?processId=' + processId + '&nomProcessus=' + encodeURIComponent(nomProcessus),
                            data: retour,
                            async: false,
                            method: Services.MethodEnum.POST,
                            contentType: Services.ContentTypeEnum.JSON
                        }, function () {
                        }, function (erreur) {
                            console.log(erreur);
                        });
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.notifierNomProcessus = function (name, processId) {
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        var retour;
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl + '/lanceur/NotifierNomProcessus?nom=' + name + '&processId=' + processId,
                            data: retour,
                            async: false,
                            method: Services.MethodEnum.POST,
                            contentType: Services.ContentTypeEnum.JSON
                        }, function () {
                        }, function (erreur) {
                            console.log(erreur);
                        });
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                    }
                };
                InteropApiWindows.prototype.subscribeToEvent = function (onEvent, onAcceptEvent, onConnection) {
                    this._onEvent = onEvent;
                    this._onAcceptEvent = onAcceptEvent;
                    this._onConnection = onConnection;
                    try {
                        var self = this;
                        // chargement dynamique du fichier signalr/hubs
                        $.getScript(this._localServiceUrl + '/signalr/hubs').done(function (script, textStatus) {
                            // puis démarrage du hub
                            var simpleEventHub = $.connection.simpleEventHub;
                            simpleEventHub.client.sendMessage = function (message) {
                                self._setConnection($.connection.hub.id);
                                self._treatMessage(message);
                            };
                            var hub = $.connection.hub;
                            hub.url = self._localServiceUrl + '/signalr';
                            hub.logging = true;
                            hub.start({ transport: ['serverSentEvents', 'longPolling'] })
                                .done(function () {
                                self._setConnection($.connection.hub.id);
                            });
                            hub.disconnected(function () {
                                setTimeout(function () {
                                    hub.start({ transport: ['serverSentEvents', 'longPolling'] })
                                        .done(function () {
                                        self._connectionId = $.connection.hub.id;
                                        onConnection(self._connectionId);
                                    });
                                }, 5000); // Restart connection after 5 seconds.
                            });
                            window.onbeforeunload = function (e) {
                                self._disconnect();
                            };
                        }).fail(function (jqxhr, settings, exception) {
                            $("div.log").text("Triggered ajaxError handler.");
                        });
                    }
                    catch (error) {
                        console.log("can't load hub evenHub: " + error);
                    }
                };
                InteropApiWindows.prototype.getCommonDataInteropToUpdate = function () {
                    var url;
                    var dataInterop = [];
                    if (this._localServiceUrl) {
                        url = this._localServiceUrl + '/donnees-interop.json';
                        return this.libraryManager.Core.sendRequest({
                            url: url,
                            method: Services.MethodEnum.GET,
                            withHeaders: false,
                            timeout: 3000
                        }).then(function (dataInteropLues) {
                            return dataInteropLues;
                        }, function () {
                            return dataInterop;
                        });
                    }
                    else {
                        return this.libraryManager.Core.createPromiseSelfResolved(dataInterop);
                    }
                };
                InteropApiWindows.prototype._setConnection = function (id) {
                    if (id !== this._connectionId) {
                        this._connectionId = id;
                        this._onConnection(id);
                    }
                };
                InteropApiWindows.prototype._treatMessage = function (message) {
                    if (message.Destinataire === "accept") {
                        var interopMessageEvent = new Interop.InteropMessageEvent();
                        interopMessageEvent.ProcessStepId = message.Destinataire;
                        interopMessageEvent.Subject = message.Sujet;
                        interopMessageEvent.Contenu = message.Contenu;
                        interopMessageEvent.DeliverTries = 0;
                        var accept = this._onAcceptEvent(interopMessageEvent);
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl
                                + '/Evenements/AcceptMessage?connectionId='
                                + this._connectionId + '&messageId='
                                + message.Contenu.MessageId
                                + '&accept=' + accept,
                            method: Services.MethodEnum.GET,
                            withHeaders: false
                        }, null, null);
                    }
                    else {
                        // envoyer une requete de callback au serveur
                        Services.CoreCommon.SendRequest({
                            url: this._localServiceUrl
                                + '/Evenements/Acknowledge?status=SUCCESS&messageId='
                                + message.Id + '&responseText=ok',
                            method: Services.MethodEnum.GET,
                            withHeaders: false
                        }, null, null);
                        var interopMessageEvent = new Interop.InteropMessageEvent();
                        interopMessageEvent.ProcessStepId = message.Destinataire;
                        interopMessageEvent.Subject = message.Sujet;
                        interopMessageEvent.Contenu = message.Contenu;
                        interopMessageEvent.DeliverTries = 0;
                        this._onEvent(interopMessageEvent, null);
                    }
                };
                InteropApiWindows.prototype._disconnect = function () {
                    //(<any>$).connection.hub.stop();
                    // envoyer une requete de callback au serveur
                    Services.CoreCommon.SendRequest({
                        url: this._localServiceUrl + '/Evenements/Disconnect/' + this._connectionId,
                        method: Services.MethodEnum.GET,
                        withHeaders: false
                    }, null, null);
                };
                InteropApiWindows.prototype.warnLocalServiceUnavailability = function () {
                    InteropApiWindows.logger.warn("Le service local n'a pu être joint et a été désactivé. Veuillez redémarrer le service local et recharger le portail");
                };
                InteropApiWindows.CLASS_NAME = 'MyWay.Services.Interop.InteropApiWindows';
                InteropApiWindows.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(InteropApiWindows.CLASS_NAME);
                return InteropApiWindows;
            }());
            Interop.InteropApiWindows = InteropApiWindows;
        })(Interop = Services.Interop || (Services.Interop = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BaseDeDonnees;
        (function (BaseDeDonnees) {
            var BaseDeDonneesManagerMessage = /** @class */ (function (_super) {
                __extends(BaseDeDonneesManagerMessage, _super);
                function BaseDeDonneesManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.BaseDeDonnees) || this;
                }
                BaseDeDonneesManagerMessage.prototype.onGetBases = function () {
                    return this.managerInstance.getBases();
                };
                BaseDeDonneesManagerMessage.prototype.onGet = function (pParametres) {
                    var lBase = pParametres.base;
                    var lTable = pParametres.table;
                    var lCle = pParametres.cle;
                    var lBaseInstance = this.managerInstance.getBase(lBase);
                    var lTableInstance = lBaseInstance.getTable(lTable);
                    return lTableInstance.get(lCle);
                };
                BaseDeDonneesManagerMessage.prototype.onGetAll = function (pParametres) {
                    var lBase = pParametres.base;
                    var lTable = pParametres.table;
                    var lBaseInstance = this.managerInstance.getBase(lBase);
                    var lTableInstance = lBaseInstance.getTable(lTable);
                    return lTableInstance.getAll();
                };
                BaseDeDonneesManagerMessage.prototype.onFind = function (pParametres) {
                    var lBase = pParametres.base;
                    var lTable = pParametres.table;
                    var lCritere = pParametres.critere;
                    var lBaseInstance = this.managerInstance.getBase(lBase);
                    var lTableInstance = lBaseInstance.getTable(lTable);
                    return lTableInstance.chercher(lCritere);
                };
                BaseDeDonneesManagerMessage.prototype.onCount = function (pParametres) {
                    var lBase = pParametres.base;
                    var lTable = pParametres.table;
                    var lCritere = pParametres.critere;
                    var lBaseInstance = this.managerInstance.getBase(lBase);
                    var lTableInstance = lBaseInstance.getTable(lTable);
                    return lTableInstance.count(lCritere);
                };
                BaseDeDonneesManagerMessage.prototype.onAjouter = function (pParametres) {
                    var lBase = pParametres.base;
                    var lTable = pParametres.table;
                    var lElements = pParametres.elements;
                    var lBaseInstance = this.managerInstance.getBase(lBase);
                    var lTableInstance = lBaseInstance.getTable(lTable);
                    return lTableInstance.ajouter(lElements);
                };
                BaseDeDonneesManagerMessage.prototype.onSupprimer = function (pParametres) {
                    var lBase = pParametres.base;
                    var lTable = pParametres.table;
                    var lCles = pParametres.cles;
                    var lBaseInstance = this.managerInstance.getBase(lBase);
                    var lTableInstance = lBaseInstance.getTable(lTable);
                    return lTableInstance.supprimer(lCles);
                };
                BaseDeDonneesManagerMessage.prototype.onModifier = function (pParametres) {
                    var lBase = pParametres.base;
                    var lTable = pParametres.table;
                    var lElements = pParametres.elements;
                    var lBaseInstance = this.managerInstance.getBase(lBase);
                    var lTableInstance = lBaseInstance.getTable(lTable);
                    return lTableInstance.mettreAJour(lElements);
                };
                /* istanbul ignore next */
                BaseDeDonneesManagerMessage.prototype.onResetAll = function () {
                    var _this = this;
                    return this.managerInstance.getBases().then(function (pBases) {
                        var lPromises = [];
                        pBases.forEach(function (pBase) {
                            var lBase = _this.managerInstance.getBase(pBase);
                            lBase.getTables().forEach(function (pNom) {
                                lPromises.push(lBase.getTable(pNom).resetAll());
                            });
                        });
                        return _this.library.Core.getServiceDePromesse().all(lPromises).then(function () { });
                    });
                };
                BaseDeDonneesManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.GetBases: {
                            var lContent = pMessage.message;
                            return this.onGetBases();
                        }
                        case BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.Get: {
                            var lContent = pMessage.message;
                            return this.onGet(lContent);
                        }
                        case BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.GetAll: {
                            var lContent = pMessage.message;
                            return this.onGetAll(lContent);
                        }
                        case BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.Find: {
                            var lContent = pMessage.message;
                            return this.onFind(lContent);
                        }
                        case BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.Count: {
                            var lContent = pMessage.message;
                            return this.onCount(lContent);
                        }
                        case BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.Ajouter: {
                            var lContent = pMessage.message;
                            return this.onAjouter(lContent);
                        }
                        case BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.Supprimer: {
                            var lContent = pMessage.message;
                            return this.onSupprimer(lContent);
                        }
                        case BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.MettreAJour: {
                            var lContent = pMessage.message;
                            return this.onModifier(lContent);
                        }
                        /* istanbul ignore next */
                        case BaseDeDonnees.Messages.BaseDeDonneesMessageSubject.ResetAll: {
                            var lContent = pMessage.message;
                            return this.onResetAll();
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                return BaseDeDonneesManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            BaseDeDonnees.BaseDeDonneesManagerMessage = BaseDeDonneesManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(BaseDeDonneesManagerMessage);
        })(BaseDeDonnees = Services.BaseDeDonnees || (Services.BaseDeDonnees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var JAB;
        (function (JAB) {
            var JABManagerMessage = /** @class */ (function (_super) {
                __extends(JABManagerMessage, _super);
                function JABManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.JAB) || this;
                }
                JABManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case JAB.JABMessageSubject.Enregistrer: {
                            var lContent = pMessage.message;
                            var data = lContent.data;
                            return this.managerInstance.enregistrer(data);
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                JABManagerMessage.CLASS_NAME = 'MyWay.Services.JAB.JABManagerMessage';
                JABManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(JABManagerMessage.CLASS_NAME);
                return JABManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            JAB.JABManagerMessage = JABManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(JABManagerMessage);
        })(JAB = Services.JAB || (Services.JAB = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            //Ajout de la vérification de l'authentification info lors des requêtes XHR
            Services.CoreCommon.addListenerOnCheckSettings(function (settings) {
                if (!settings.authentificationInfo && settings.withHeaders && Services.ServiceManager && Services.ServiceManager.Instance() && Services.ServiceManager.Instance().Library && Services.ServiceManager.Instance().Library.Context) {
                    settings.authentificationInfo = Services.ServiceManager.Instance().Library.Context.GetAuthentificationInfo();
                }
            });
            Services.ServiceManager.addActionOnInitialize('Context.GetInfosUserApi', function (pLibrary) {
                return pLibrary.Context.GetInfosUserApi();
            });
            Services.ServiceManager.addActionOnInitialize('Context.GetDonneesLocales', function (pLibrary) {
                return pLibrary.Context.GetDonneesLocales();
            });
            Services.ServiceManager.addActionOnInitialize('Context.SetPortalInformation', function (pLibrary) {
                return pLibrary.Context.SetPortalInformation();
            }, 'Context.GetDonneesLocales');
            var RecuperationContext = /** @class */ (function () {
                function RecuperationContext(level, value) {
                    this.level = level;
                    this.value = value;
                }
                return RecuperationContext;
            }());
            var ContextManager = /** @class */ (function (_super) {
                __extends(ContextManager, _super);
                //Constructor
                function ContextManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Context) || this;
                    //Members
                    _this.api = null;
                    _this._portalIndex = 0;
                    _this._storageNotification = null;
                    _this._useDiagnostic = false;
                    _this.listenerOnTerminerProcessus = [];
                    _this._infosUser = null;
                    _this._pathFileSharedContext = "%APPDATA%\\sharedContext.txt";
                    _this.listenerOnChangePortailType = null;
                    return _this;
                }
                ContextManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    this.api = pApi;
                    this._context = ContextManager._initContext();
                    this._portalIndex = 0;
                    this._useDiagnostic = pManagerInitializer.isTotemCapable;
                    this._storageNotification = pManagerLibrary.Persistence.addStorage('notifications.context', function () { _this.OnContextStorageChanged(); });
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
                };
                //Traitement messages
                ContextManager.prototype.AddToContextAsync = function (level, key, value) {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var callbackContent = _this.AddToContext(level, key, value);
                        pDefer.resolve(callbackContent);
                    });
                };
                ContextManager.prototype.RemoveFromContextAsync = function (level, key) {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var callbackContent = _this.RemoveFromContext(level, key);
                        pDefer.resolve(callbackContent);
                    });
                };
                ContextManager.prototype.AddListToContextAsync = function (level, kvp, elementId) {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var callbackParam = _this.AddListToContext(level, kvp, elementId);
                        pDefer.resolve(callbackParam);
                    });
                };
                ContextManager.prototype.GetFromContextAsync = function (key) {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var recuperationContexte = _this._getFromContext(key);
                        if (recuperationContexte) {
                            ContextManager.logger.debug('lecture dans le contexte %1 de %2: %3', recuperationContexte.level, key, recuperationContexte.value);
                            pDefer.resolve(recuperationContexte.value);
                        }
                        else {
                            ContextManager.logger.warn('echec de lecture dans le contexte de %1', key);
                            pDefer.resolve(null);
                        }
                    });
                };
                //------------------------------------------------------------------------------------------------------------------
                //------------------------------------------------------------------------------------------------------------------
                //------------------------------------------------------------------------------------------------------------------
                ContextManager.prototype.GetFromSharedContextAsync = function (key) {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var recuperationContexte = _this._getFromSharedContext(key);
                        if (recuperationContexte) {
                            ContextManager.logger.debug('lecture dans le contexte %1 de %2: %3', recuperationContexte.level, key, recuperationContexte.value);
                            pDefer.resolve(recuperationContexte.value);
                        }
                        else {
                            ContextManager.logger.warn('echec de lecture dans le contexte de %1', key);
                            pDefer.resolve(null);
                        }
                    });
                };
                //------------------------------------------------------------------------------------------------------------------
                //------------------------------------------------------------------------------------------------------------------
                //------------------------------------------------------------------------------------------------------------------
                ContextManager.prototype.GetCurrentStepInfoAsync = function () {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var stepInfoParam = _this.GetCurrentStepInfo();
                        pDefer.resolve(stepInfoParam);
                    });
                };
                ContextManager.prototype.GetListFromContextAsync = function (keyArray) {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var callbackParam = _this.GetListFromContext(keyArray);
                        pDefer.resolve(callbackParam);
                    });
                };
                ContextManager.prototype.GetAuthentificationInfoAsync = function () {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var authenticationInfo = _this.GetAuthentificationInfo(false);
                        pDefer.resolve(authenticationInfo);
                    });
                };
                ContextManager.prototype.GetParametresComptablesAsync = function () {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var parametresComptables = _this.GetParametresComptables();
                        pDefer.resolve(parametresComptables);
                    });
                };
                ContextManager.prototype.GetWaitingProcessesAsync = function () {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var callbackParam = _this.GetWaitingProcesses();
                        pDefer.resolve(callbackParam);
                    });
                };
                ContextManager.prototype.GetCurrentProcessIdAsync = function () {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var processId = _this.GetCurrentProcessId();
                        pDefer.resolve(processId);
                    });
                };
                ContextManager.prototype.GetCurrentStepIdAsync = function () {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var stepId = _this.GetCurrentStepId();
                        pDefer.resolve(stepId);
                    });
                };
                ContextManager.prototype.GetCurrentMainProcessAsync = function () {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var mainProcess = _this.GetCurrentMainProcess();
                        pDefer.resolve(mainProcess);
                    });
                };
                ContextManager.prototype.setIsMyWayUrl = function (pIsMyWayUrl) {
                    this.library.Display.CurrentFrame.IsMyWayUrl = pIsMyWayUrl;
                };
                ContextManager.prototype.SendEvent = function (event) {
                    return _super.prototype.SendEvent.call(this, event);
                };
                ContextManager.prototype.InitSinglePortalContext = function () {
                    if (this._singlePortalContext && this._singlePortalContext.processes && this._singlePortalContext.processes.length >= 1) {
                        this.SetSingleProcess(this._singlePortalContext.processes[0].id);
                    }
                };
                // Context & Local storage
                ContextManager._initContext = function () {
                    var context;
                    var jsonContext = Services.Storage.ContextStorage.Get();
                    if (jsonContext) {
                        context = MyWay.Services.Context.ContextImpl.clone(JSON.parse(jsonContext));
                    }
                    if (!context) {
                        context = new MyWay.Services.Context.ContextImpl();
                        context.portals = [];
                        context.waitingProcesses = [];
                        context.globalStorage = [];
                        context.sharedStorage = [];
                        var iContext = ContextManager.AddNewPortalToContext(context);
                        ContextManager._saveContext(iContext);
                    }
                    return context;
                };
                ContextManager._reloadContext = function () {
                    var context;
                    var jsonContext = Services.Storage.ContextStorage.Get();
                    if (jsonContext) {
                        context = MyWay.Services.Context.ContextImpl.clone(JSON.parse(jsonContext));
                    }
                    return context;
                };
                ContextManager.prototype.ReloadContext = function () {
                    var context = ContextManager._reloadContext();
                    return context;
                };
                ContextManager._saveContext = function (context) {
                    Services.Storage.ContextStorage.Set(JSON.stringify(context));
                };
                ContextManager.prototype.SaveContext = function () {
                    ContextManager._saveContext(this._context);
                    this._storageNotification.saveValue(Math.random());
                };
                ContextManager.AddNewPortalToContext = function (context) {
                    var newPortal = ContextManager.CreatePortalContext();
                    context.portals.push(newPortal);
                    return context;
                };
                ContextManager.CreatePortalContext = function () {
                    var newPortal = new MyWay.Services.Context.PortalContext();
                    newPortal.temporayContextStorage = [];
                    newPortal.processes = [];
                    newPortal.currentPath = null;
                    return newPortal;
                };
                Object.defineProperty(ContextManager.prototype, "PortalCount", {
                    get: function () {
                        return this._context.portals.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                ContextManager.prototype.OnContextStorageChanged = function () {
                    this._context = ContextManager._initContext();
                    var newPortalIndex = this._portalIndex;
                    if (newPortalIndex >= this._context.portals.length) {
                        newPortalIndex = this._context.portals.length - 1;
                    }
                    if (newPortalIndex !== this._portalIndex) {
                        this._portalIndex = newPortalIndex;
                    }
                    this.InitSinglePortalContext();
                    var portalContext = this.GetPortalContext();
                    this.SendPortalContext(true, 'OnContextStorageChanged');
                    this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.PortalContextChanged, { portalContext: portalContext, info: 'OnContextStorageChanged' }));
                    this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.ContextRecharge, {}));
                };
                //Display
                ContextManager.prototype.DisplayProcesses = function (nouvelleIframe) {
                    if (nouvelleIframe === void 0) { nouvelleIframe = false; }
                    ContextManager.logger.debug('DisplayProcesses');
                    // si la méthode nécessite l'url du processus alors on ne résoud pas la promesse tout de suite
                    var waitingForProcessUrl = false;
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    this.library.Display.CleanFrames(this.GetPortalContext().processes);
                    var currentProcess = this.GetCurrentProcess();
                    if (currentProcess) {
                        var currentStep_1 = this.GetCurrentStep(currentProcess);
                        if (currentStep_1) {
                            ContextManager.logger.debug('Current step is : %1', currentStep_1.getPath());
                            if (!currentStep_1.displayTime) {
                                currentStep_1.displayTime = Date.now();
                            }
                            waitingForProcessUrl = true;
                            this.DisplayProcessUrl(currentStep_1.url, null, nouvelleIframe).then(function (res) {
                                if (res) {
                                    currentStep_1.displayTime = Date.now();
                                    ContextManager.logger.info("Display Step " + currentStep_1.id);
                                }
                                deferred.resolve(res);
                            });
                        }
                    }
                    if (!waitingForProcessUrl) {
                        deferred.resolve(false);
                    }
                    return deferred.promise;
                };
                ContextManager.prototype.DisplayProcessUrl = function (url, mainProcessId, nouvelleIFrame) {
                    if (nouvelleIFrame === void 0) { nouvelleIFrame = false; }
                    ContextManager.logger.debug('DisplayProcessUrl');
                    var self = this;
                    if (!mainProcessId)
                        mainProcessId = this.GetMainProcessId();
                    return this.library.Display.AfficherUrl(url, mainProcessId, nouvelleIFrame);
                };
                //GetPortalContext
                ContextManager.prototype.GetPortalContext = function (getSingleIfSingle) {
                    if (getSingleIfSingle === void 0) { getSingleIfSingle = true; }
                    if (this._singlePortalContext && getSingleIfSingle)
                        return this._singlePortalContext;
                    return this._context.portals[this._portalIndex];
                };
                //Ids
                ContextManager.prototype.GetCurrentProcessId = function () {
                    var currentProcess = this.GetCurrentProcess();
                    if (currentProcess)
                        return currentProcess.id;
                    else
                        return null;
                };
                ContextManager.prototype.GetMainProcessId = function () {
                    var portalContext = this.GetPortalContext();
                    return Context.PortalContext.GetPathPart(portalContext.currentPath, Context.PATH_PART.MAIN_PROCESS_ID);
                };
                ContextManager.prototype.GetCurrentStepId = function () {
                    var currentProcess = this.GetCurrentProcess();
                    if (currentProcess) {
                        var currentStep = this.GetCurrentStep(currentProcess);
                        if (currentStep)
                            return currentStep.id;
                    }
                    return null;
                };
                ContextManager.prototype.IsSingleProcess = function () {
                    if (this._singlePortalContext && this._singlePortalContext.currentPath)
                        return true;
                    return false;
                };
                ContextManager.prototype.GetCurrentProcess = function () {
                    return this.GetPortalContext().GetCurrentProcess();
                };
                ContextManager.prototype.GetCurrentMainProcess = function () {
                    return this.GetPortalContext().GetCurrentMainProcess();
                };
                ContextManager.prototype.GetParentProcess = function (process) {
                    var portalContext = this.GetPortalContext();
                    return Context.PortalContext.GetProcessByPath(process.id, portalContext.processes);
                };
                ContextManager.prototype.GetCurrentProcessCode = function () {
                    var currentProcess = this.GetCurrentProcess();
                    if (currentProcess) {
                        var currentPath = currentProcess.getPath();
                        var currentProcessCode = Context.PortalContext.GetPathPart(currentPath, Context.PATH_PART.LAST_PROCESS_ID);
                        if (currentProcessCode && currentProcessCode.indexOf('-') > 0)
                            currentProcessCode = currentProcessCode.split('-')[0];
                        return currentProcessCode;
                    }
                    return null;
                };
                ContextManager.prototype.GetProcessById = function (processId, processElements) {
                    if (!processElements)
                        processElements = this.GetPortalContext().processes;
                    for (var index in processElements) {
                        var processElement = processElements[index];
                        if (processElement.type === 'Process') {
                            var process = processElement;
                            if (process.id === processId)
                                return process;
                            else {
                                var resultOk = this.GetProcessById(processId, process.subElements);
                                if (resultOk)
                                    return resultOk;
                            }
                        }
                    }
                    return null;
                };
                ContextManager.prototype.GetAllProcessFromAllPortails = function () {
                    var lResultats = [];
                    var lProcessusHorsPortails = this.GetWaitingProcesses();
                    if (lProcessusHorsPortails) {
                        lProcessusHorsPortails.forEach(function (pProcess) {
                            lResultats.push(pProcess);
                        });
                    }
                    var lPortails = this.getPortails();
                    if (lPortails) {
                        lPortails.forEach(function (pPortail) {
                            if (pPortail.processes) {
                                pPortail.processes.forEach(function (pProcess) {
                                    lResultats.push(pProcess);
                                });
                            }
                        });
                    }
                    return lResultats;
                };
                ContextManager.prototype.GetProcessByIdFromAllPortails = function (pProcessId) {
                    var lResultat = null;
                    var lProcessusHorsPortails = this.GetWaitingProcesses();
                    if (lProcessusHorsPortails) {
                        for (var _i = 0, lProcessusHorsPortails_1 = lProcessusHorsPortails; _i < lProcessusHorsPortails_1.length; _i++) {
                            var process = lProcessusHorsPortails_1[_i];
                            if (process.id === pProcessId) {
                                lResultat = process;
                                break;
                            }
                        }
                    }
                    if (!lResultat) {
                        var lPortails = this.getPortails();
                        if (lPortails) {
                            lPortails.every(function (pPortail) {
                                if (pPortail.processes) {
                                    pPortail.processes.every(function (pProcess) {
                                        if (pProcess.id === pProcessId) {
                                            lResultat = pProcess;
                                        }
                                        return lResultat === null;
                                    });
                                    return lResultat === null;
                                }
                            });
                        }
                    }
                    return lResultat;
                };
                ContextManager.prototype.GetProcessStepById = function (processStepId) {
                    var stepId = Context.PortalContext.GetPathPart(processStepId, Context.PATH_PART.STEP_ID);
                    var processId = processStepId.replace('|' + stepId, '');
                    var process = this.GetProcessById(processId);
                    if (process) {
                        for (var index in process.subElements) {
                            var subElement = process.subElements[index];
                            if (subElement.id === stepId)
                                return subElement;
                        }
                    }
                    return null;
                };
                ContextManager.prototype.GetWaitingProcess = function (processId) {
                    for (var index in this._context.waitingProcesses) {
                        var process = this._context.waitingProcesses[index];
                        if (process.id === processId)
                            return process;
                    }
                    return null;
                };
                ContextManager.prototype.GetCurrentStep = function (process) {
                    if (!process)
                        return null;
                    for (var index in process.subElements) {
                        var subElement = process.subElements[index];
                        if (subElement.id === process.currentInnerElementPath)
                            return subElement;
                    }
                    return null;
                };
                ContextManager.prototype.SetSingleProcess = function (processId) {
                    var setHasBeenDone = false;
                    this._singlePortalContext = ContextManager.CreatePortalContext();
                    this._singlePortalContext.isSingle = true;
                    if (this.listenerOnChangePortailType) {
                        this.listenerOnChangePortailType('singleWithProcess');
                    }
                    for (var i in this._context.waitingProcesses) {
                        var process = this._context.waitingProcesses[i];
                        if (process.id === processId) {
                            this._singlePortalContext.processes.push(process);
                            this._singlePortalContext.currentPath = process.getPath();
                            setHasBeenDone = true;
                            break;
                        }
                    }
                    return setHasBeenDone;
                };
                ContextManager.prototype.setOnChangePortailType = function (pCallback) {
                    this.listenerOnChangePortailType = pCallback;
                };
                //GetWaitingProcesses
                ContextManager.prototype.GetWaitingProcesses = function () {
                    return this._context.waitingProcesses;
                };
                ContextManager.prototype.getPortails = function () {
                    return this._context.portals;
                };
                /**
                 * Permet de placer le processus en 'waitintProcessus' = processus hors portail
                 *  dont l'id est précisé en paramètre
                 * @return {MyWay.Services.Context.IPortalContext}           [description]
                 */
                ContextManager.prototype.PutProcessInWait = function (processId) {
                    var context = this._context.portals[this._portalIndex];
                    var removedProcess = ContextManager._removeProcess(context, processId);
                    if (removedProcess) {
                        removedProcess.putInWaitTime = Date.now();
                        this._context.waitingProcesses.push(removedProcess);
                        this.SaveContext();
                    }
                    return context;
                };
                /**
                 * Appel asynchrone à la méthode [[PutProcessInWait]]
                 */
                ContextManager.prototype.PutProcessInWaitAsync = function (processId, success) {
                    var _this = this;
                    var notificationMessage = new Services.NotificationMessage();
                    notificationMessage.Sujet = 'MEP';
                    this.Notify(notificationMessage).then(function () {
                        var portalContext = _this.PutProcessInWait(processId);
                        success(portalContext);
                    });
                };
                ContextManager.prototype.PutProcessInPortalContext = function (processId) {
                    var foundIndex = -1;
                    for (var i = 0; i < this._context.waitingProcesses.length; i++) {
                        var process = this._context.waitingProcesses[i];
                        if (process.id === processId) {
                            foundIndex = i;
                            break;
                        }
                    }
                    var portalContext = this._context.portals[this._portalIndex];
                    if (foundIndex >= 0) {
                        var movedProcess = this._context.waitingProcesses.splice(foundIndex, 1)[0];
                        portalContext.processes.push(movedProcess);
                        portalContext.currentPath = movedProcess.getPath();
                        this.SaveContext();
                    }
                    return portalContext;
                };
                //Notify
                ContextManager.prototype.Notify = function (notification) {
                    return this.sendMessageWithFrame(Context.ContextMessageSubject.Notification, notification, this.library.Display.CurrentFrame);
                };
                ContextManager.prototype.NotifyFrame = function (notification, pFrame) {
                    return this.sendMessageWithFrame(Context.ContextMessageSubject.Notification, notification, pFrame);
                };
                //Share processes
                ContextManager.prototype.Share = function (processId, codeAgent, callback) {
                    var _this = this;
                    var portalContext = this.GetPortalContext();
                    var sharedProcess = portalContext.GetProcess(processId);
                    if (sharedProcess) {
                        sharedProcess.putInWaitTime = Date.now();
                        this.api.ShareProcess(sharedProcess, codeAgent).then(function () {
                            var context = _this._context.portals[_this._portalIndex];
                            ContextManager._removeProcess(context, processId);
                            _this.SaveContext();
                            callback(context);
                        }, function (error) {
                            //Ignore l'erreur car avant le callback était ignoré. A voir si on corrige!
                        });
                    }
                };
                ContextManager.prototype.PutTaskInPortalContext = function (taskId) {
                    var _this = this;
                    return this.api.RemoveProcess(taskId).then(function (process) {
                        var portalContext = _this._context.portals[_this._portalIndex];
                        portalContext.processes.push(process);
                        portalContext.currentPath = process.getPath();
                        _this.SaveContext();
                        return portalContext;
                    });
                };
                //RemoveCurrentPortal
                ContextManager.prototype.RemoveCurrentPortal = function () {
                    if (this._portalIndex == 0)
                        throw "can't remove first portal";
                    var portalContext = this.GetPortalContext();
                    if (portalContext.processes.length > 0)
                        throw "can't remove portal with processes";
                    portalContext = this.ChangePortalIndex(this._portalIndex - 1);
                    this._context.portals.splice(this._portalIndex + 1, 1);
                    this.SaveContext();
                    return portalContext;
                };
                /**
                 * Permet d'ajouter une données au contexte
                 *
                 * @param level {StorageLevel}
                 * @param key {string} nom de la clé de la donnée
                 * @param value {string} nom de la valeur de la donnée
                 */
                ContextManager.prototype.AddToContext = function (level, key, value) {
                    return this.AddListToContext(level, [{ Key: key, Value: value }]);
                };
                ContextManager.prototype.RemoveFromContext = function (level, key) {
                    return this.RemoveListFromContext(level, [key]);
                };
                //Clear context
                ContextManager.prototype.ClearContext = function () {
                    Services.Storage.ContextStorage.Set('');
                    this._context = ContextManager._initContext();
                    this.InitSinglePortalContext();
                };
                //DonneesLocales
                ContextManager.prototype.GetDonneesLocales = function () {
                    var _this = this;
                    if (this.api) {
                        ContextManager.logger.debug("ServiceApi Start GetDonneesLocales");
                        return this.api.GetDonneesLocales().then(function (donneesLocales) {
                            ContextManager.logger.debug("ServiceApi End GetDonneesLocales");
                            if (donneesLocales) {
                                if (donneesLocales.AuthentificationInfo)
                                    _this.SetContextAuthentificationInfo(donneesLocales.AuthentificationInfo);
                                if (donneesLocales.ParametresComptables)
                                    _this.AddToContext(Context.StorageLevel.Global, "ParametresComptables", JSON.stringify(donneesLocales.ParametresComptables));
                                if (donneesLocales.ParametresNumerisation)
                                    _this.AddToContext(Context.StorageLevel.Global, "ParametresNumerisation", JSON.stringify(donneesLocales.ParametresNumerisation));
                                if (donneesLocales.ParametresServeurPoste)
                                    _this.AddToContext(Context.StorageLevel.Global, "ParametresServeurPoste", JSON.stringify(donneesLocales.ParametresServeurPoste));
                            }
                        });
                    }
                    else {
                        return Services.Promesses.getPromesseSelfResoved();
                    }
                };
                //AuthenticationInfo
                ContextManager.prototype.GetAuthentificationInfo = function (bypassIfNull) {
                    if (bypassIfNull === void 0) { bypassIfNull = true; }
                    var authentificationInfo = this._getAuthenticationInfoFromContext();
                    if (authentificationInfo == null && !bypassIfNull) {
                        this.library.Display.DisplayLogOn();
                    }
                    return authentificationInfo;
                };
                ContextManager.prototype.getAuthentificationInfo = function () {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        var lAuthentificationInfo = _this.GetAuthentificationInfo(false);
                        if (lAuthentificationInfo !== null) {
                            pDefer.resolve(lAuthentificationInfo);
                        }
                        else {
                            //Pas d'authentification info, se mets en attente
                            var lListener_1 = function (pEvent) {
                                var lAuthentificationInfo = _this.GetAuthentificationInfo();
                                if (lAuthentificationInfo) {
                                    _this.library.Evennements.retirerListener(lListener_1);
                                    pDefer.resolve(lAuthentificationInfo);
                                }
                                else {
                                    pDefer.reject(new Services.Erreur("Il n'a pas été possible de récupérer les informations d'authenfications."));
                                }
                            };
                            _this.ajouterListenerEvent(Services.Component.ManagerEventType.ChangementAuthentificationInfo, lListener_1);
                        }
                    });
                };
                ContextManager.prototype.SetContextAuthentificationInfo = function (authenticationInfo) {
                    this.AddToContext(Context.StorageLevel.Global, "AuthentificationInfo", JSON.stringify(authenticationInfo));
                    this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.ChangementAuthentificationInfo, {}));
                };
                ContextManager.prototype._getAuthenticationInfoFromContext = function () {
                    var authentificationInfoCTX = this.GetFromContext("AuthentificationInfo");
                    var authentificationInfo;
                    if (authentificationInfoCTX)
                        authentificationInfo = JSON.parse(authentificationInfoCTX);
                    else
                        authentificationInfo = null;
                    return authentificationInfo;
                };
                //GetParametresComptables
                ContextManager.prototype.GetParametresComptables = function () {
                    var parametresComptablesCTX = this.GetFromContext("ParametresComptables");
                    if (parametresComptablesCTX)
                        return JSON.parse(parametresComptablesCTX);
                    else
                        return null;
                };
                ContextManager.prototype.GetInfosUserApi = function () {
                    var _this = this;
                    return this.api.GetInfosUserApi().then(function (InfosUser) {
                        if (InfosUser) {
                            _this.AddToContext(Context.StorageLevel.Global, "InfosUser", JSON.stringify(InfosUser));
                        }
                    });
                };
                //GetInfosUser
                ContextManager.prototype.GetInfosUser = function () {
                    var infosUser = this.GetFromContext("InfosUser");
                    if (infosUser)
                        return JSON.parse(infosUser);
                    else
                        return null;
                };
                /**
                 * Comme GetInfosUser mais stop l'appel récurssif qui intervient au ReloadSharedContext et qui cause
                 * une erreur
                 */
                ContextManager.prototype.GetInfosUserOnce = function () {
                    if (this._infosUser) {
                        return this._infosUser;
                    }
                    else {
                        this._infosUser = this.GetInfosUser();
                        return this._infosUser;
                    }
                };
                ContextManager.prototype.ClearParametresComptables = function () {
                    this.AddToContext(Context.StorageLevel.Global, "ParametresComptables", "");
                };
                /**
                 * Permet d'ajouter une liste de données au contexte
                 *
                 * @param level {StorageLevel}
                 * @param kvp {MyWay.Services.Context.IContextKeyValuePair[]} Liste de tuple clé/valeur à ajouter au contexte
                 * @return {boolean}
                 */
                ContextManager.prototype.AddListToContext = function (level, kvp, elementId) {
                    var storage = this._getStorage(level, elementId);
                    if (storage) {
                        this.CheckData(level, kvp);
                        var keys = [];
                        for (var _i = 0, kvp_2 = kvp; _i < kvp_2.length; _i++) {
                            var item = kvp_2[_i];
                            // value peut contenir une chaine vide mais ne peut pas être null ou undefined.
                            // null == undefined is true donc pas besoin de mettre !== null & !== undefined
                            if (item.Key && item.Value !== null) {
                                keys.push(item.Key);
                                this._addToContextArray(storage, { Key: item.Key, Value: item.Value });
                                if (level === Context.StorageLevel.Global && item.Key === "AuthentificationInfo") {
                                    //Mise à jour de AuthentificationInfo
                                    this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.ChangementAuthentificationInfo, {}));
                                }
                            }
                        }
                        this.SaveContext();
                        if (level === Context.StorageLevel.Global) {
                            this.SendPortalContext(true, 'Add to global context: ' + JSON.stringify(keys));
                        }
                        if (level === Context.StorageLevel.Shared) {
                            //let pathFichier = "C:\\PERSO\\sharedContext_" + this.GetInfosUserOnce().IdentifiantUser + ".json"; //.json //IdentifiantUser
                            var fluxdonnees = JSON.stringify(this._context.sharedStorage);
                            Services.CoreCommon.SendRequest({
                                url: Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + '/fichier/ecrire?pathFichier=' + this._pathFileSharedContext + '&ajouter=false&creeDir=false',
                                data: fluxdonnees,
                                contentType: Services.ContentTypeEnum.JSON,
                                method: Services.MethodEnum.POST,
                                type: 'POST',
                                async: false
                            }, function (sharedContextInFile) { }, function (error) { });
                        }
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                ContextManager.prototype.CheckData = function (level, kvps) {
                    if (level === Context.StorageLevel.MainProcess
                        || level === Context.StorageLevel.Process) {
                        var sum = 0;
                        var limit = 5000;
                        var limitSum = 100000;
                        for (var index in kvps) {
                            var kvp = kvps[index];
                            if (kvp && kvp.Value) {
                                var length_1 = this.GetLength(kvp.Value);
                                if (length_1 > limit)
                                    ContextManager.logger.warn("Attention, la donnée ajoutée dans le contexte dépasse %3 caractères. Clé=%1; Taille=%2", kvp.Key, length_1, limit);
                                sum += length_1;
                            }
                        }
                        sum += this.GetCurrentProcessContextSize();
                        if (sum > limitSum)
                            ContextManager.logger.warn("Attention, les données ajoutées dans le contexte de processus dépasse %2 caractères. Taille=%1", sum, limitSum);
                    }
                };
                ContextManager.prototype.GetLength = function (value) {
                    if (typeof value === 'object') {
                        return JSON.stringify(value).length;
                    }
                    else if (typeof value === 'string') {
                        return value.length;
                    }
                    return 0;
                };
                ContextManager.prototype.GetCurrentProcessContextSize = function () {
                    return this.GetProcessContextSize(this.GetCurrentMainProcess());
                };
                ContextManager.prototype.GetProcessContextSize = function (process) {
                    var sum = 0;
                    for (var index in process.contextStorage) {
                        if (process.contextStorage[index] && process.contextStorage[index].Value)
                            sum += this.GetLength(process.contextStorage[index].Value);
                    }
                    for (var index in process.subElements) {
                        var elem = process.subElements[index];
                        if (elem.type == 'Process')
                            sum += this.GetProcessContextSize(elem);
                    }
                    return sum;
                };
                ContextManager.prototype.RemoveListFromContext = function (level, keys, elementId) {
                    var _this = this;
                    var storage = this._getStorage(level, elementId);
                    if (storage) {
                        for (var index in keys) {
                            this._removeFromContextArray(storage, keys[index]);
                        }
                        if (level === Context.StorageLevel.Shared) {
                            //let pathFichier = "C:\\PERSO\\sharedContext_" + this.GetInfosUserOnce().IdentifiantUser + ".json"; //.json
                            Services.CoreCommon.SendRequest({
                                url: Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + '/fichier/lire?pathFichier=' + this._pathFileSharedContext,
                                contentType: Services.ContentTypeEnum.JSON,
                                method: Services.MethodEnum.GET,
                                async: false,
                                cache: false
                            }, function (sharedContextInFile) {
                                var sharedContextInFileObject = JSON.parse(sharedContextInFile);
                                for (var index in keys) {
                                    sharedContextInFileObject.some(function (contextVP, idx) {
                                        if (keys[index] === contextVP.Key) {
                                            var kvp = sharedContextInFileObject.splice(idx, 1)[0];
                                        }
                                    });
                                }
                                var fluxdonnees = JSON.stringify(sharedContextInFileObject);
                                Services.CoreCommon.SendRequest({
                                    url: Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + '/fichier/ecrire?pathFichier=' + _this._pathFileSharedContext + '&ajouter=false&creeDir=false',
                                    data: fluxdonnees,
                                    contentType: Services.ContentTypeEnum.JSON,
                                    method: Services.MethodEnum.POST,
                                    type: 'POST',
                                    async: false
                                }, function (sharedContextInFile) { }, function (error) { });
                            }, function (error) { });
                        }
                        this.SaveContext();
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                ContextManager.prototype._getStorage = function (level, elementId) {
                    var self = this;
                    var storage;
                    if (level === Context.StorageLevel.Global) {
                        storage = this._context.globalStorage;
                    }
                    else if (level === Context.StorageLevel.Shared) {
                        storage = this._context.sharedStorage;
                    }
                    else if (level === Context.StorageLevel.Tempo) {
                        storage = this._context.portals[this._portalIndex].temporayContextStorage;
                    }
                    else {
                        if (level === Context.StorageLevel.Process) {
                            var process = null;
                            if (elementId)
                                process = this.GetProcessById(elementId);
                            else
                                process = this.GetCurrentProcess();
                            if (!process)
                                throw "process not found";
                            storage = process.contextStorage;
                        }
                        else if (level === Context.StorageLevel.Step) {
                            var processStep = null;
                            if (elementId) {
                                processStep = this.GetProcessStepById(elementId);
                            }
                            else
                                processStep = this.GetCurrentStep(this.GetCurrentProcess());
                            if (!processStep)
                                throw "processStep not found";
                            storage = processStep.contextStorage;
                        }
                        else if (level === Context.StorageLevel.MainProcess) {
                            var process = this.GetCurrentProcess();
                            if (!process)
                                throw "no current process";
                            var parentProcess = process;
                            while (process) {
                                process = self.GetParentProcess(process);
                                if (process)
                                    parentProcess = process;
                            }
                            storage = parentProcess.contextStorage;
                        }
                        else {
                            throw "le niveau '" + level + "' n'est pas valable";
                        }
                    }
                    return storage;
                };
                ContextManager.prototype.setContextClientIdOnProcessus = function (pContextClientId, pProcessus, pNotSaveContext) {
                    pProcessus.contexteClientId = pContextClientId;
                    for (var index in pProcessus.subElements) {
                        var processElement = pProcessus.subElements[index];
                        if (processElement.type === 'Process') {
                            this.setContextClientIdOnProcessus(pContextClientId, processElement, true);
                        }
                    }
                    if (pNotSaveContext) {
                        return;
                    }
                    this.SaveContext();
                };
                /**
                 * Permet de récupérer une donnée depuis le contexte
                 * @param key {string} Clé de la donnée
                 * @return {string}GetFromSharedContextAsync
                 */
                ContextManager.prototype.GetFromContext = function (key) {
                    var recuperationContexte = this._getFromContext(key);
                    if (recuperationContexte)
                        return recuperationContexte.value;
                    return null;
                };
                ContextManager.prototype.ChangeMainProcessNameAsync = function (name) {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var portalContext = _this.ChangeMainProcessName(name);
                        pDefer.resolve(portalContext);
                    });
                };
                ContextManager.prototype.ChangeMainProcessName = function (name) {
                    return this.ChangeProcessName(name, this.GetMainProcessId());
                };
                ContextManager.prototype.ChangeProcessName = function (name, processId) {
                    var process = this.GetProcessById(processId, null);
                    if (process) {
                        process.displayName = name;
                        this.SaveContext();
                    }
                    if (this.onProcessNameChanged) {
                        try {
                            this.onProcessNameChanged(processId, name);
                        }
                        catch (e) {
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'ChangeProcessName');
                            Services.Loggers.FLASH.INSTANCE.setValue('details', e);
                            ContextManager.logger.error("une erreur est survenue lors de la notification de changement de nom");
                        }
                    }
                    return this.GetPortalContext();
                };
                ContextManager.prototype.GetCurrentStepInfo = function () {
                    var process = this.GetCurrentProcess();
                    if (!process)
                        return null;
                    var step = this.GetCurrentStep(process);
                    if (!step)
                        return null;
                    var info = new Context.StepInfoExtended();
                    var infoContrat;
                    info.StepCode = step.codeEtape;
                    info.BusinessCode = step.codeMetier;
                    info.ProcessCode = process.codeProcess;
                    info.ProcessType = process.typeProcess;
                    info.ValeurEntree = step.valeurEntree;
                    info.PreviousStepEndTime = process.lastNextTime;
                    info.DiagnosticTraceSentForStep = step.diagnosticTraceSentForStep;
                    info.StartTime = step.creationDate;
                    var displayTime = step.displayTime;
                    if (displayTime < process.lastNextTime)
                        displayTime = process.lastNextTime;
                    info.DisplayTime = displayTime;
                    for (var j in step.authorizedOutputs)
                        info.AuthorizedOutputs.push(step.authorizedOutputs[j]);
                    for (var i in step.contrats) {
                        infoContrat = new Context.ContratInfo();
                        infoContrat.NomData = step.contrats[i].Code;
                        infoContrat.Mode = step.contrats[i].Mode;
                        info.Contrats.push(infoContrat);
                    }
                    info.CurrentProcessId = process.id;
                    info.CurrentParentProcessId = Context.PortalContext.GetPathPart(process.id, Context.PATH_PART.MAIN_PROCESS_ID);
                    info.CurrentStepId = step.id;
                    info.CurrentPath = info.CurrentProcessId + '|' + info.CurrentStepId;
                    info.NomComposant = step.nomApplication;
                    info.VersionComposant = Services.CoreCommon.VersionMySys;
                    switch (Services.PrivatePortalServiceParameters.Instance().ModeDebug) {
                        case true:
                            info.NiveauTrace = 4;
                            break;
                        default:
                            info.NiveauTrace = 3;
                            break;
                    }
                    info.Diagnostic = this._useDiagnostic;
                    return info;
                };
                //AddProcessAsync(id: string, sequenceCode: string, icon: string, displayName: string, startUrl: string, event: MessageEvent, sendResponse: (MessageEvent, any) => void) {
                //    let callbackParam = this.AddProcess(id, sequenceCode, icon, displayName, startUrl);
                //    sendResponse(event, callbackParam);
                //}
                ContextManager.prototype.GetObjectFromContext = function (keyArray) {
                    var values = this.GetListFromContext(keyArray);
                    var result = {};
                    for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
                        var kvp = values_1[_i];
                        result[kvp.Key] = kvp.Value;
                    }
                    return result;
                };
                ContextManager.prototype.GetTypedObjectFromContext = function (template) {
                    var keys = Object.keys(template);
                    var values = this.GetListFromContext(keys);
                    var result = {};
                    for (var index in values) {
                        var kvp = values[index];
                        result[kvp.Key] = kvp.Value;
                    }
                    return result;
                };
                /**
                 * Permet de récupérer une liste de données depuis le contexte
                 *
                 * @param keyArray {string[]} La liste de clé à récupérer
                 * @param useObjectPath {boolean}
                 * @param returnEmptyIfNull {boolean}
                 * @return {IPromesse<MyWay.Services.Context.IContextKeyValuePair[]>}
                 */
                ContextManager.prototype.GetListFromContext = function (keyArray, useObjectPath, returnEmptyIfNull) {
                    var values;
                    values = [];
                    for (var index in keyArray) {
                        var key = keyArray[index];
                        var recuperationContexte = void 0;
                        if (!useObjectPath || key.indexOf('.') < 0) {
                            recuperationContexte = this._getFromContext(key, returnEmptyIfNull);
                        }
                        else {
                            recuperationContexte = this._getObjectPropFromContext(key, returnEmptyIfNull);
                        }
                        if (recuperationContexte) {
                            values.push({ Key: key, Value: recuperationContexte.value });
                        }
                    }
                    return values;
                };
                //AddBoundStepAsync(stepId: string, displayName: string, url: string, boundId: string, isEnd: boolean, event: MessageEvent, sendResponse: (MessageEvent, any) => void) {
                //    let callbackParam = this.AddBoundStep(null, stepId, displayName, url, boundId, isEnd);
                //    sendResponse(event, callbackParam);
                //}
                //SwitchToProcess
                ContextManager.prototype.SwitchToProcess = function (id) {
                    var context = this._context.portals[this._portalIndex];
                    var foundProcess;
                    for (var index in context.processes) {
                        var process = context.processes[index];
                        if (process.id === id) {
                            foundProcess = process;
                            break;
                        }
                    }
                    if (!foundProcess)
                        throw "process '" + id + "' not found";
                    if (context.currentPath === foundProcess.getPath()) {
                        return false;
                    }
                    context.currentPath = foundProcess.getPath();
                    this.SaveContext();
                    return true;
                };
                ContextManager.prototype.SwitchToProcessAsync = function (id, callback) {
                    this.SwitchToProcess(id);
                    var lPortail = this.GetPortalContext();
                    callback(lPortail);
                };
                //RemoveProcess
                ContextManager.prototype.RemoveProcess = function (id) {
                    var _this = this;
                    var context = this.GetPortalContext();
                    var removedProcess = ContextManager._removeProcess(context, id);
                    if (removedProcess) {
                        if (this._singlePortalContext) {
                            this._context.waitingProcesses.some(function (process, index) {
                                if (process.id === removedProcess.id) {
                                    _this._context.waitingProcesses.splice(index, 1)[0];
                                    return true;
                                }
                            });
                        }
                        this.SaveContext();
                    }
                    return this.GetPortalContext();
                };
                ContextManager.prototype.RemoveCurrentProcess = function () {
                    var _this = this;
                    var currentProcess = this.GetCurrentProcess();
                    var context = this.GetPortalContext();
                    var removedProcess;
                    if (currentProcess.id.indexOf('|') === 0)
                        removedProcess = ContextManager._removeProcess(context, currentProcess.id);
                    else {
                        if (context.isSingle)
                            removedProcess = this.RemoveSubProcess(context, currentProcess.id + '|', context.processes, this.GetParentProcess(currentProcess));
                        else {
                            removedProcess = this.RemoveSubProcess(context, currentProcess.id + '|', context.processes, this.GetParentProcess(currentProcess));
                        }
                    }
                    if (removedProcess) {
                        if (this._singlePortalContext) {
                            this._context.waitingProcesses.some(function (process, index) {
                                if (process.id === removedProcess.id) {
                                    _this._context.waitingProcesses.splice(index, 1)[0];
                                    return true;
                                }
                            });
                        }
                        this.SaveContext();
                    }
                    return this.GetPortalContext();
                };
                /**
                 * Remove all 'waiting Processes' which creationDate is before today 00:00
                 */
                ContextManager.prototype.RemoveWaitingProcesses = function () {
                    // browse waitingProcesses and find all waitingProcesses older than today 00:00:00
                    var waitingProcessesToBeRemoved = [];
                    for (var indexProcess in this._context.waitingProcesses) {
                        waitingProcessesToBeRemoved.push(indexProcess);
                    }
                    // browse from the end of waitingProcessesToBeRemoved
                    // and splice for each value
                    for (var index = (waitingProcessesToBeRemoved.length); index--; index >= 0) {
                        this._context.waitingProcesses.splice(waitingProcessesToBeRemoved[index], 1);
                    }
                    // save and return
                    this.SaveContext();
                    return this.GetPortalContext();
                };
                ContextManager._removeProcess = function (context, id) {
                    var foundIndex = -1;
                    for (var i = 0; i < context.processes.length; i++) {
                        var process = context.processes[i];
                        if (process.id === id) {
                            foundIndex = i;
                            break;
                        }
                    }
                    var removedProcess = null;
                    if (foundIndex >= 0) {
                        removedProcess = context.processes.splice(foundIndex, 1)[0];
                        if (context.processes.length === 0) {
                            context.currentPath = null;
                        }
                        else if (foundIndex <= context.processes.length - 1) {
                            context.currentPath = context.processes[foundIndex].getPath();
                        }
                        else {
                            context.currentPath = context.processes[context.processes.length - 1].getPath();
                        }
                    }
                    return removedProcess;
                };
                ContextManager.prototype.RemoveSubProcess = function (context, id, processElements, parentProcess) {
                    var foundIndex = -1;
                    var mainProcessId = Context.PortalContext.GetPathPart(id, Context.PATH_PART.MAIN_PROCESS_ID);
                    var lastProcessId = Context.PortalContext.GetPathPart(id, Context.PATH_PART.LAST_PROCESS_ID);
                    for (var index = 0; index < processElements.length; index++) {
                        var processElement = processElements[index];
                        if (processElement.type === 'Process') {
                            var process = processElement;
                            var initialProcessId = Context.PortalContext.GetPathPart(process.id, Context.PATH_PART.STEP_ID);
                            if (initialProcessId === mainProcessId) {
                                if (mainProcessId === lastProcessId) {
                                    foundIndex = index;
                                    break;
                                }
                                else
                                    return this.RemoveSubProcess(context, id.replace(mainProcessId + '|', ''), process.subElements, process);
                            }
                        }
                    }
                    var removedProcess = null;
                    if (foundIndex >= 0) {
                        removedProcess = processElements.splice(foundIndex, 1)[0];
                        var parent_1 = this.GetParentProcess(removedProcess);
                        if (processElements.length > 0) {
                            var processElement = processElements[processElements.length - 1];
                            if (processElement.type === 'Process') {
                                context.currentPath = processElement.getPath();
                            }
                            else {
                                parent_1.currentInnerElementPath = processElement.id;
                                context.currentPath = parent_1.id + '|' + processElement.id;
                            }
                        }
                        else {
                            context.currentPath = '';
                        }
                    }
                    return removedProcess;
                };
                //RemoveCurrentStep
                ContextManager.prototype.RemoveCurrentStep = function (codeEtape) {
                    var context = this.GetPortalContext();
                    var currentProcess;
                    currentProcess = this.GetCurrentProcess();
                    if (!currentProcess) {
                        throw "no current process";
                    }
                    var stepId = currentProcess.currentInnerElementPath;
                    while (currentProcess.currentInnerElementPath.indexOf('|') > 0) {
                        var processId = Context.PortalContext.GetPathPart(currentProcess.currentInnerElementPath, Context.PATH_PART.MAIN_PROCESS_ID);
                        var process = this.GetProcessById(currentProcess.id + '|' + processId, currentProcess.subElements);
                        if (codeEtape && process.codeEtape === codeEtape) {
                            stepId = process.id;
                            break;
                        }
                        else {
                            currentProcess = process;
                            stepId = currentProcess.currentInnerElementPath;
                        }
                    }
                    var processes = this.RemoveStep(stepId, currentProcess.id);
                    return processes;
                };
                //RemoveStep
                ContextManager.prototype.RemoveStep = function (stepId, processId) {
                    var context = this.GetPortalContext();
                    var returnProcesses;
                    var process = this.GetProcessById(processId);
                    var indexes;
                    var step = this._getStepById(process, stepId);
                    if (step && step.boundId) {
                        indexes = this._getIndexesByBoundId(process, step.boundId);
                    }
                    else {
                        indexes = [];
                        var stepIndex = this._getStepIndexById(process, stepId);
                        if (stepIndex >= 0) {
                            indexes.push(stepIndex);
                        }
                    }
                    if (indexes && indexes.length > 0) {
                        process.subElements.splice(indexes[0], indexes.length);
                        var newCurrentStep = void 0;
                        if (process.subElements.length > 0) {
                            if (indexes[0] <= process.subElements.length - 1) {
                                newCurrentStep = process.subElements[indexes[0]];
                            }
                            else {
                                newCurrentStep = process.subElements[process.subElements.length - 1];
                            }
                            process.currentInnerElementPath = newCurrentStep.id;
                            context.currentPath = process.getPath();
                            this.SaveContext();
                            returnProcesses = context;
                        }
                        else {
                            returnProcesses = this.RemoveProcess(process.id);
                        }
                    }
                    return returnProcesses;
                };
                //ChangePortalIndex
                ContextManager.prototype.ChangePortalIndex = function (portalIndex) {
                    if (portalIndex >= 0 && portalIndex < this._context.portals.length) {
                        this._portalIndex = portalIndex;
                        this.SaveContext();
                    }
                    return this._context.portals[this._portalIndex];
                };
                //AddNewPortal
                ContextManager.prototype.AddAndGetNewPortal = function () {
                    this._context = ContextManager.AddNewPortalToContext(this._context);
                    this._portalIndex = this._context.portals.length - 1;
                    this.SaveContext();
                    return this._context.portals[this._portalIndex];
                };
                ContextManager.prototype.AddNewPortal = function () {
                    this._context = ContextManager.AddNewPortalToContext(this._context);
                    this.SaveContext();
                    return this._context.portals.length - 1;
                };
                //GetPortalIndex
                ContextManager.prototype.GetPortalIndex = function () {
                    return this._portalIndex;
                };
                ContextManager.prototype.ClearCurrentPath = function () {
                    var context = this.GetPortalContext();
                    context.currentPath = null;
                    this.SaveContext();
                };
                ContextManager.prototype._getObjectPropFromContext = function (path, returnEmptyIfNull) {
                    var parts = path.split('.');
                    var serialisedObj = this._getFromContext(parts[0]);
                    if (!serialisedObj) {
                        if (returnEmptyIfNull)
                            return new RecuperationContext('unknown', '');
                        else
                            return null;
                    }
                    var value = null;
                    if (returnEmptyIfNull)
                        value = '';
                    try {
                        var obj = JSON.parse(serialisedObj.value);
                        for (var i = 1; i < parts.length; i++) {
                            value = obj[parts[i]];
                            obj = value;
                        }
                    }
                    catch (e) {
                    }
                    return new RecuperationContext(serialisedObj.level, value);
                };
                ContextManager.prototype._getFromContext = function (key, returnEmptyIfNull) {
                    var self = this;
                    var currentProcess = this.GetCurrentProcess();
                    //get from tempo values
                    var level = '';
                    var value = this._getFromContextArray(this._context.portals[this._portalIndex].temporayContextStorage, key);
                    if (value !== undefined && value !== null) {
                        level = 'tempo';
                        this._removeFromContextArray(this._context.portals[this._portalIndex].temporayContextStorage, key);
                        this.SaveContext();
                    }
                    //get from process step values
                    if ((value === undefined || value === null) && currentProcess) {
                        var processStep = this.GetCurrentStep(currentProcess);
                        if (processStep) {
                            level = 'processStep';
                            value = this._getFromContextArray(processStep.contextStorage, key);
                        }
                    }
                    //get from process values
                    var process = currentProcess;
                    while ((value === undefined || value === null) && process) {
                        level = 'process';
                        value = this._getFromContextArray(process.contextStorage, key);
                        if (!value)
                            process = this.GetParentProcess(process);
                    }
                    //get from portal values
                    if ((value === undefined || value === null)) {
                        level = 'global';
                        value = this._getFromContextArray(this._context.globalStorage, key);
                    }
                    if ((value === undefined || value === null)) {
                        level = 'shared';
                        //this.ReloadSharedContext();
                        value = this._getFromContextArray(this._context.sharedStorage, key);
                    }
                    if (value !== undefined && value !== null) {
                        return new RecuperationContext(level, value);
                    }
                    else if (returnEmptyIfNull) {
                        return new RecuperationContext(level, '');
                    }
                    return null;
                };
                //------------------------------------------------------------------------------------------------------------------
                //------------------------------------------------------------------------------------------------------------------
                //------------------------------------------------------------------------------------------------------------------
                ContextManager.prototype._getFromSharedContext = function (key, returnEmptyIfNull) {
                    var self = this;
                    var currentProcess = this.GetCurrentProcess();
                    //get from tempo values
                    var level = '';
                    var value = this._getFromContextArray(this._context.portals[this._portalIndex].temporayContextStorage, key);
                    if ((value === undefined || value === null)) {
                        level = 'shared';
                        this.ReloadSharedContext();
                        value = this._getFromContextArray(this._context.sharedStorage, key);
                    }
                    if (value !== undefined && value !== null) {
                        return new RecuperationContext(level, value);
                    }
                    else if (returnEmptyIfNull) {
                        return new RecuperationContext(level, '');
                    }
                    return null;
                };
                //------------------------------------------------------------------------------------------------------------------
                //------------------------------------------------------------------------------------------------------------------
                //------------------------------------------------------------------------------------------------------------------
                ContextManager.prototype.ReloadSharedContext = function () {
                    //let pathFichier = "C:\\PERSO\\sharedContext_" + this.GetInfosUserOnce().IdentifiantUser + ".json"; //.json
                    var _this = this;
                    Services.CoreCommon.SendRequest({
                        url: Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + '/fichier/lire?pathFichier=' + this._pathFileSharedContext,
                        contentType: Services.ContentTypeEnum.JSON,
                        method: Services.MethodEnum.GET,
                        async: false,
                        cache: false
                    }, function (sharedContext) {
                        _this._context.sharedStorage = JSON.parse(sharedContext);
                    }, function (error) { });
                };
                ContextManager.prototype._addToContextArray = function (context, kvp) {
                    for (var index in context) {
                        var contextVP = context[index];
                        if (kvp.Key === contextVP.Key) {
                            contextVP.Value = kvp.Value;
                            return;
                        }
                    }
                    context.push(kvp);
                };
                ContextManager.prototype._getFromContextArray = function (context, key) {
                    for (var index in context) {
                        var contextVP = context[index];
                        if (key === contextVP.Key) {
                            return contextVP.Value;
                        }
                    }
                    return;
                };
                ContextManager.prototype._removeFromContextArray = function (context, key) {
                    context.some(function (contextVP, index) {
                        if (key === contextVP.Key) {
                            var kvp = context.splice(index, 1)[0];
                            return true;
                        }
                    });
                    return;
                };
                ContextManager.prototype._getStepById = function (currentProcess, id) {
                    if (currentProcess && currentProcess.subElements) {
                        for (var i in currentProcess.subElements) {
                            var step = currentProcess.subElements[i];
                            if (step.id === id) {
                                return step;
                            }
                        }
                    }
                    return null;
                };
                ContextManager.prototype._getStepIndexById = function (currentProcess, id) {
                    var result = -1;
                    if (currentProcess && currentProcess.subElements) {
                        currentProcess.subElements.forEach(function (step, index) {
                            if (step.id === id) {
                                result = index;
                            }
                        });
                    }
                    return result;
                };
                ContextManager.prototype._getIndexesByBoundId = function (currentProcess, boundId) {
                    var indexes = [];
                    if (currentProcess && currentProcess.subElements) {
                        currentProcess.subElements.forEach(function (subElement, index) {
                            var step = subElement;
                            if (step.boundId === boundId) {
                                indexes.push(index);
                            }
                        });
                    }
                    return indexes;
                };
                ContextManager.prototype.SendPortalContext = function (onlyHeader, reason) {
                    var portalContext = this.GetPortalContext();
                    this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.PortalContextChanged, { portalContext: portalContext, demandeDeDemarrageDeProcessusDetail: { onlyHeader: onlyHeader }, info: reason }));
                };
                ContextManager.prototype.AnalyseApp = function (callback) {
                    this.sendMessage(Context.ContextMessageSubject.AnalyseApp).then(callback);
                };
                ContextManager.prototype.SetPortalInformation = function () {
                    var _this = this;
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    if (this.api) {
                        ContextManager.logger.debug("GetPortalInformation");
                        var authentificationInfo = this.GetAuthentificationInfo();
                        if (authentificationInfo) {
                            this.api.GetPortalInformation(authentificationInfo).then(function (portalInformation) {
                                ContextManager.logger.debug("GetPortalInformation");
                                if (portalInformation && portalInformation.urlCultureNet) {
                                    _this.AddToContext(Context.StorageLevel.Global, "URLCultureNet", portalInformation.urlCultureNet);
                                    deferred.resolve();
                                }
                                else {
                                    var text = "Aucune information trouvée. portalInformation: " + JSON.stringify(portalInformation);
                                    ContextManager.logger.error(text);
                                    deferred.reject(new Services.Erreur(text));
                                }
                            }, function (erreur) {
                                ContextManager.logger.error("Erreur lors de SetPortalInformation: %1", JSON.stringify(erreur));
                                deferred.reject(erreur);
                            });
                        }
                        else {
                            ContextManager.logger.error("Aucune données d'authentification présente");
                            deferred.reject();
                        }
                    }
                    else {
                        deferred.resolve();
                    }
                    return deferred.promise;
                };
                ContextManager.prototype.SetDiagnosticTraceSentForStep = function (stepId) {
                    var processStep = this.GetProcessStepById(stepId);
                    processStep.diagnosticTraceSentForStep = true;
                    this.SaveContext();
                };
                //TODO Methodes pour le portail, NE PAS UTILISER
                //A déplacer avec le patern façade
                ContextManager.prototype._portail_terminerProcess = function (processId) {
                    ContextManager.logger.info("TerminerProcess");
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var lProcess = this.GetProcessByIdFromAllPortails(processId);
                    if (!lProcess) {
                        deferred.resolve(false);
                        return deferred.promise;
                    }
                    //On notifie les services interressés par les fin de processus (ex : Traces de suivi, contexte client, traces technique)
                    this.listenerOnTerminerProcessus.forEach(function (pCallback) {
                        pCallback(lProcess);
                    });
                    var portalContext = this.RemoveProcess(processId);
                    this.library.Display.RemoveProcessIFrame(processId);
                    this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.FinDeProcessus, { portalContext: portalContext, info: processId }));
                    if (portalContext.processes.length > 0) {
                        this.DisplayProcesses();
                        this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.BasculeProcess, { portalContext: portalContext, info: processId }));
                    }
                    deferred.resolve(true);
                    return deferred.promise;
                };
                ContextManager.prototype._portail_terminerAllProcess = function () {
                    var _this = this;
                    ContextManager.logger.info("TerminerTousLesProcess");
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var portalContext = this.GetPortalContext();
                    var promessesTerminerProcessus = [];
                    if (!portalContext) {
                        deferred.resolve(false);
                        return deferred.promise;
                    }
                    portalContext.processes.forEach(function (process) {
                        promessesTerminerProcessus.push(_this._portail_terminerProcess(process.id));
                    });
                    return Services.Promesses.all(promessesTerminerProcessus)
                        .then(function () {
                        return true;
                    }, function (erreur) {
                        ContextManager.logger.warn('EndAllProcess Failed', JSON.stringify(erreur));
                        throw erreur;
                    });
                };
                ContextManager.prototype.addListenerOnTerminerProcessus = function (pCallback) {
                    this.listenerOnTerminerProcessus.push(pCallback);
                };
                ContextManager.prototype.removeListenerOnTerminerProcessus = function (pCallback) {
                    Services.CoreCommon.ArrayUtils.remove(this.listenerOnTerminerProcessus, function (pElement) {
                        return pElement === pCallback;
                    });
                };
                ContextManager.prototype._portail_extraireProcess = function (processId) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var portalContext = this.PutProcessInWait(processId);
                    this.library.Display.RemoveProcessIFrame(processId);
                    this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.Extraction, { portalContext: portalContext }));
                    if (portalContext.processes.length > 0) {
                        this.DisplayProcesses();
                        this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.BasculeProcess, { portalContext: portalContext }));
                    }
                    //ouverture de la fenêtre
                    var urlSpa = Services.PrivatePortalServiceParameters.Instance().LisaPlaceholders["URL-SPA"];
                    var urlPortail = Services.PrivatePortalServiceParameters.Instance().LisaPlaceholders["ALIASPORTAIL"];
                    var processUrl = urlSpa + urlPortail + '/' + '?i=' + processId;
                    window.open(processUrl);
                    deferred.resolve(true);
                    return deferred.promise;
                };
                ContextManager.CLASS_NAME = 'MyWay.Services.Context.ContextManager';
                ContextManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ContextManager.CLASS_NAME);
                return ContextManager;
            }(Services.Components.ComponentManagerBase));
            Context.ContextManager = ContextManager;
            Services.Components.RegistryManager.getInstance().register(ContextManager);
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var ContextKeyValuePair = /** @class */ (function () {
                function ContextKeyValuePair() {
                }
                return ContextKeyValuePair;
            }());
            Context.ContextKeyValuePair = ContextKeyValuePair;
            var ContextImpl = /** @class */ (function () {
                function ContextImpl() {
                }
                ContextImpl.clone = function (clonedContext) {
                    var context = new ContextImpl();
                    context.portals = [];
                    for (var i in clonedContext.portals) {
                        var clonedPortal = clonedContext.portals[i];
                        context.portals.push(PortalContext.clone(clonedPortal));
                    }
                    context.globalStorage = [];
                    for (var i in clonedContext.globalStorage) {
                        var kvp = clonedContext.globalStorage[i];
                        context.globalStorage.push({ Key: kvp.Key, Value: kvp.Value });
                    }
                    context.sharedStorage = [];
                    for (var i in clonedContext.sharedStorage) {
                        var kvp = clonedContext.sharedStorage[i];
                        context.sharedStorage.push({ Key: kvp.Key, Value: kvp.Value });
                    }
                    context.waitingProcesses = [];
                    for (var i in clonedContext.waitingProcesses) {
                        var clonedProcess = clonedContext.waitingProcesses[i];
                        context.waitingProcesses.push(Process.clone(clonedProcess));
                    }
                    return context;
                };
                return ContextImpl;
            }());
            Context.ContextImpl = ContextImpl;
            var PortalContext = /** @class */ (function () {
                function PortalContext() {
                }
                PortalContext.clone = function (clonedPortalContext) {
                    var context = new PortalContext();
                    context.temporayContextStorage = [];
                    for (var i in clonedPortalContext.temporayContextStorage) {
                        var kvp = clonedPortalContext.temporayContextStorage[i];
                        context.temporayContextStorage.push({ Key: kvp.Key, Value: kvp.Value });
                    }
                    context.processes = [];
                    for (var i in clonedPortalContext.processes) {
                        var clonedProcess = clonedPortalContext.processes[i];
                        context.processes.push(Process.clone(clonedProcess));
                    }
                    context.currentPath = clonedPortalContext.currentPath;
                    context.isSingle = clonedPortalContext.isSingle;
                    return context;
                };
                PortalContext.GetPathPart = function (path, pathPart) {
                    var resultat = null;
                    if (path) {
                        var parts = path.split('|');
                        switch (pathPart) {
                            case Context.PATH_PART.MAIN_PROCESS_ID:
                                resultat = parts[0];
                                break;
                            case Context.PATH_PART.STEP_ID:
                                resultat = parts[parts.length - 1];
                                break;
                            case Context.PATH_PART.LAST_PROCESS_ID:
                                resultat = parts[parts.length - 2];
                                break;
                            case Context.PATH_PART.PREVIOUS_PROCESS_ID:
                                resultat = parts[parts.length - 3];
                                break;
                        }
                    }
                    return resultat;
                };
                PortalContext.GetProcessByPath = function (path, processElements) {
                    var mainProcessId = PortalContext.GetPathPart(path, Context.PATH_PART.MAIN_PROCESS_ID);
                    var lastProcessId = PortalContext.GetPathPart(path, Context.PATH_PART.LAST_PROCESS_ID);
                    for (var index in processElements) {
                        var processElement = processElements[index];
                        if (processElement.type === 'Process') {
                            var process = processElement;
                            var initialProcessId = PortalContext.GetPathPart(process.id, Context.PATH_PART.STEP_ID);
                            if (initialProcessId === mainProcessId) {
                                if (mainProcessId == lastProcessId)
                                    return process;
                                else
                                    return this.GetProcessByPath(path.replace(mainProcessId + '|', ''), process.subElements);
                            }
                        }
                    }
                    return null;
                };
                PortalContext.prototype.GetProcess = function (processId) {
                    if (Services.Controle.StaticStringControle.isString(processId)) {
                        for (var index in this.processes) {
                            var process = this.processes[index];
                            if (process.id === processId)
                                return process;
                        }
                    }
                    return null;
                };
                PortalContext.prototype.GetProcessByPathPart = function (path, pathPart) {
                    return this.GetProcess(PortalContext.GetPathPart(path, pathPart));
                };
                PortalContext.prototype.GetCurrentProcess = function () {
                    return PortalContext.GetProcessByPath(this.currentPath, this.processes);
                };
                PortalContext.prototype.GetCurrentMainProcess = function () {
                    return this.GetProcessByPathPart(this.currentPath, Context.PATH_PART.MAIN_PROCESS_ID);
                };
                PortalContext.prototype.GetCurrentStep = function (process) {
                    if (!process)
                        return null;
                    for (var index in process.subElements) {
                        var subElement = process.subElements[index];
                        if (subElement.id === process.currentInnerElementPath)
                            return subElement;
                    }
                    return null;
                };
                return PortalContext;
            }());
            Context.PortalContext = PortalContext;
            var Process = /** @class */ (function () {
                function Process() {
                    this.type = 'Process';
                    this.creationDate = Date.now();
                    this.outputContracts = [];
                }
                Process.clone = function (clonedProcess) {
                    var process = new Process();
                    process.contextStorage = [];
                    for (var i in clonedProcess.contextStorage) {
                        var kvp = clonedProcess.contextStorage[i];
                        process.contextStorage.push({ Key: kvp.Key, Value: kvp.Value });
                    }
                    process.subElements = [];
                    for (var i in clonedProcess.subElements) {
                        var element = clonedProcess.subElements[i];
                        if (element.type == 'ProcessStep') {
                            process.subElements.push(ProcessStep.clone(element));
                        }
                        else if (element.type == 'Process') {
                            process.subElements.push(Process.clone(element));
                        }
                    }
                    process.currentInnerElementPath = clonedProcess.currentInnerElementPath;
                    process.displayName = clonedProcess.displayName;
                    process.icon = clonedProcess.icon;
                    process.id = clonedProcess.id;
                    process.putInWaitTime = clonedProcess.putInWaitTime;
                    process.knownSteps = clonedProcess.knownSteps;
                    process.codeEtape = clonedProcess.codeEtape;
                    process.codeProcess = clonedProcess.codeProcess;
                    process.typeProcess = clonedProcess.typeProcess;
                    process.creationDate = clonedProcess.creationDate;
                    process.estApplicationExterne = clonedProcess.estApplicationExterne;
                    process.outputContracts = [];
                    for (var ii in clonedProcess.outputContracts) {
                        process.outputContracts.push(clonedProcess.outputContracts[ii]);
                    }
                    process.authorizedOutputs = [];
                    for (var i in clonedProcess.authorizedOutputs) {
                        var clonedAuthorizedOutput = clonedProcess.authorizedOutputs[i];
                        process.authorizedOutputs.push(clonedAuthorizedOutput);
                    }
                    process.isSubProcess = clonedProcess.isSubProcess;
                    process.contexteClientId = clonedProcess.contexteClientId;
                    process.lastNextTime = clonedProcess.lastNextTime;
                    return process;
                };
                Process.prototype.getPath = function () {
                    return this.id + '|' + this.currentInnerElementPath;
                };
                return Process;
            }());
            Context.Process = Process;
            var ProcessStep = /** @class */ (function () {
                function ProcessStep() {
                    this.type = 'ProcessStep';
                }
                ProcessStep.clone = function (clonedStep) {
                    var step = new ProcessStep();
                    step.contextStorage = [];
                    for (var i in clonedStep.contextStorage) {
                        var kvp = clonedStep.contextStorage[i];
                        step.contextStorage.push({ Key: kvp.Key, Value: kvp.Value });
                    }
                    step.codeMetier = clonedStep.codeMetier;
                    step.nomApplication = clonedStep.nomApplication;
                    step.valeurEntree = clonedStep.valeurEntree;
                    step.parentPath = clonedStep.parentPath;
                    step.id = clonedStep.id;
                    step.codeEtape = clonedStep.codeEtape;
                    step.codeApplication = clonedStep.codeApplication;
                    step.url = clonedStep.url;
                    step.boundId = clonedStep.boundId;
                    step.isEnd = clonedStep.isEnd;
                    if (clonedStep.nextStep) {
                        step.nextStep = ProcessStep.clone(clonedStep.nextStep);
                    }
                    step.actions = [];
                    for (var i in clonedStep.actions) {
                        var clonedAction = clonedStep.actions[i];
                        step.actions.push(StepAction.clone(clonedAction));
                    }
                    step.contrats = [];
                    for (var i in clonedStep.contrats) {
                        var clonedContrat = clonedStep.contrats[i];
                        step.contrats.push(StepContrat.clone(clonedContrat));
                    }
                    step.processusMaitre = clonedStep.processusMaitre;
                    step.processName = clonedStep.processName;
                    step.maintienIFrame = clonedStep.maintienIFrame;
                    step.maintienIFrameLastAction = clonedStep.maintienIFrameLastAction;
                    step.authorizedOutputs = [];
                    for (var i in clonedStep.authorizedOutputs) {
                        var clonedAuthorizedOutput = clonedStep.authorizedOutputs[i];
                        step.authorizedOutputs.push(clonedAuthorizedOutput);
                    }
                    step.etapeResultAsString = clonedStep.etapeResultAsString;
                    step.isRouteur = clonedStep.isRouteur;
                    step.etatEtape = clonedStep.etatEtape;
                    step.creationDate = clonedStep.creationDate;
                    step.displayTime = clonedStep.displayTime;
                    step.diagnosticTraceSentForStep = clonedStep.diagnosticTraceSentForStep;
                    return step;
                };
                ProcessStep.prototype.getPath = function () {
                    return this.parentPath + '|' + this.id;
                };
                return ProcessStep;
            }());
            Context.ProcessStep = ProcessStep;
            var StepAction = /** @class */ (function () {
                function StepAction() {
                }
                StepAction.clone = function (clonedAction) {
                    var action = new StepAction();
                    action.Nom = clonedAction.Nom;
                    action.CodeEtape = clonedAction.CodeEtape;
                    action.ValeurSortie = clonedAction.ValeurSortie;
                    action.EstExterne = clonedAction.EstExterne;
                    action.Options = clonedAction.Options;
                    return action;
                };
                return StepAction;
            }());
            Context.StepAction = StepAction;
            var StepContrat = /** @class */ (function () {
                function StepContrat() {
                }
                StepContrat.clone = function (clonedContrat) {
                    var contrat = new StepContrat();
                    contrat.Code = clonedContrat.Code;
                    contrat.Type = clonedContrat.Type;
                    contrat.Longueur = clonedContrat.Longueur;
                    contrat.Nullable = clonedContrat.Nullable;
                    contrat.Mode = clonedContrat.Mode;
                    return contrat;
                };
                return StepContrat;
            }());
            Context.StepContrat = StepContrat;
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.PhantomAgent.addListenerOnInit(function (pInstance, pServiceManager) {
            pInstance.Context = new Services.Context.PhantomContextAgent(pServiceManager);
        });
        //Remplace la méthode sendRequest pour y ajouter tout ce qui vient du contexte
        Services.PhantomAgent.prototype.SendRequest = function (settings) {
            var _this = this;
            return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                var thisServiceAgent = _this;
                var settingsExtended = settings;
                settingsExtended.logger = Services.PhantomAgent.logger;
                if (thisServiceAgent.Context && thisServiceAgent.Context.StepInfo) {
                    settingsExtended.stepInfo = thisServiceAgent.Context.StepInfo;
                    settingsExtended.versionComposant = settingsExtended.stepInfo.VersionComposant;
                }
                else if (thisServiceAgent._serviceManager && thisServiceAgent.Context) {
                    settingsExtended.stepInfo = null;
                    settingsExtended.versionComposant = thisServiceAgent.Context.VersionComposant;
                }
                if (settings.withHeaders) {
                    thisServiceAgent.Context.GetAuthentificationInfo()
                        .then(function (authentificationInfo) {
                        settingsExtended.authentificationInfo = authentificationInfo;
                        thisServiceAgent.Context.GetParametresComptables()
                            .then(function (parametresComptables) {
                            settingsExtended.parametresComptables = parametresComptables;
                            Services.CoreCommon.SendRequest(settingsExtended, function (result) { pDefer.resolve(result); }, function (error) { pDefer.reject(error); });
                        })
                            .catch(pDefer.reject);
                    })
                        .catch(pDefer.reject);
                }
                else {
                    Services.CoreCommon.SendRequest(settingsExtended, function (result) { pDefer.resolve(result); }, function (error) { pDefer.reject(error); });
                }
            });
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var PhantomContextAgent = /** @class */ (function () {
                function PhantomContextAgent(serviceManager) {
                    this.serviceManager = serviceManager;
                }
                Object.defineProperty(PhantomContextAgent.prototype, "VersionComposant", {
                    get: function () {
                        return Services.CoreCommon.VersionMySys;
                    },
                    enumerable: true,
                    configurable: true
                });
                PhantomContextAgent.prototype.AddToContext = function (key, value) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    this.serviceManager.Library.Context.AddToContext(Context.StorageLevel.Process, key, value);
                    deferred.resolve();
                    return deferred.promise;
                };
                PhantomContextAgent.prototype.AddToMainProcessContext = function (key, value) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    this.serviceManager.Library.Context.AddToContext(Context.StorageLevel.MainProcess, key, value);
                    deferred.resolve();
                    return deferred.promise;
                };
                PhantomContextAgent.prototype.AddListToContext = function (kvp) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    this.serviceManager.Library.Context.AddListToContext(Context.StorageLevel.Process, kvp);
                    deferred.resolve();
                    return deferred.promise;
                };
                PhantomContextAgent.prototype.GetFromContext = function (key) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var returnedValue = this.serviceManager.Library.Context.GetFromContext(key);
                    deferred.resolve(returnedValue);
                    return deferred.promise;
                };
                PhantomContextAgent.prototype.GetObjectFromContext = function (keyArray) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var returnedValue = this.serviceManager.Library.Context.GetObjectFromContext(keyArray);
                    deferred.resolve(returnedValue);
                    return deferred.promise;
                };
                PhantomContextAgent.prototype.GetTypedObjectFromContext = function (template) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var returnedValue = this.serviceManager.Library.Context.GetTypedObjectFromContext(template);
                    deferred.resolve(returnedValue);
                    return deferred.promise;
                };
                PhantomContextAgent.prototype.GetListFromContext = function (keyArray) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var returnedValue = this.serviceManager.Library.Context.GetListFromContext(keyArray, null, null);
                    deferred.resolve(returnedValue);
                    return deferred.promise;
                };
                PhantomContextAgent.prototype.GetAuthentificationInfo = function () {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var returnedValue = this.serviceManager.Library.Context.GetAuthentificationInfo(false);
                    deferred.resolve(returnedValue);
                    return deferred.promise;
                };
                PhantomContextAgent.prototype.getAuthentificationInfo = function () {
                    return this.GetAuthentificationInfo();
                };
                PhantomContextAgent.prototype.sendNotification = function (notification, event, sendResponseCallback) {
                    if (sendResponseCallback) {
                        sendResponseCallback(event, null, null);
                    }
                };
                PhantomContextAgent.prototype.GetParametresComptables = function () {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var returnedValue = this.serviceManager.Library.Context.GetParametresComptables();
                    deferred.resolve(returnedValue);
                    return deferred.promise;
                };
                PhantomContextAgent.prototype.Redirect = function (url, previousUrl) {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.GetWaitingProcesses = function () {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.PutProcessInPortalContext = function (processId) {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.PutTaskInPortalContext = function (taskId) {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.GetCurrentProcessId = function () {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.GetCurrentStepId = function () {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.reinitialisationServiceAgent = function (pIdGenere) {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.GetCurrentStepInfo = function () {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.SetMyWayCompatible = function () {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.SubscribeToNotification = function (onNotification, serviceAgent) {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.retirerListenerNotification = function (onNotificationASupprimer) {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.AnalyseApp = function () {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.ChangeMainProcessName = function (name) {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.AddToSharedContext = function (key, value) {
                    throw new Services.Erreur("not implemented");
                };
                PhantomContextAgent.prototype.RemoveFromSharedContext = function (key) {
                    throw new Services.Erreur("not implemented");
                };
                Object.defineProperty(PhantomContextAgent.prototype, "StepInfo", {
                    get: function () {
                        return null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PhantomContextAgent.prototype, "ErreurCallback", {
                    get: function () {
                        return null;
                    },
                    enumerable: true,
                    configurable: true
                });
                PhantomContextAgent.prototype.SetContextListener = function (key, callback) {
                };
                return PhantomContextAgent;
            }());
            Context.PhantomContextAgent = PhantomContextAgent;
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Display;
        (function (Display) {
            var FrameModel = /** @class */ (function () {
                function FrameModel(FrameId, _baseFrameElement, displayManager) {
                    this.FrameId = FrameId;
                    this._baseFrameElement = _baseFrameElement;
                    this.displayManager = displayManager;
                    this._frameElement = document.getElementById(this.FrameId);
                    this.TempId = '';
                    this.Redirected = false;
                    this.IsHidden = true;
                }
                Object.defineProperty(FrameModel.prototype, "SimulateAppIFrame", {
                    get: function () {
                        return Services.PrivatePortalServiceParameters.Instance().SimulateAppIFrame;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FrameModel.prototype, "FrameElement", {
                    get: function () {
                        if (!this._frameElement) {
                            FrameModel.logger.debug('Tentative de récupération de _frameElement, Id %1', this.FrameId);
                            this._frameElement = document.getElementById(this.FrameId);
                        }
                        if (this._frameElement)
                            return this._frameElement;
                        else {
                            FrameModel.logger.debug('Impossible de récupérer _frameElement, Id %1', this.FrameId);
                            return null;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                FrameModel.prototype.CreateFrameElement = function () {
                    if (!this.SimulateAppIFrame && !this._frameElement) {
                        var iframeNode = document.createElement("IFRAME");
                        iframeNode.id = this.FrameId;
                        this._baseFrameElement.parentElement.appendChild(iframeNode);
                        this._frameElement = document.getElementById(this.FrameId);
                        if (this._frameElement)
                            FrameModel.logger.debug('Création de la frame %1', this.FrameElement.id);
                    }
                };
                FrameModel.prototype.RemoveFrameElement = function () {
                    if (!this.SimulateAppIFrame && this.FrameElement && this._baseFrameElement) {
                        if (this._baseFrameElement.parentElement.contains(this.FrameElement)) {
                            if (this.FrameElement)
                                FrameModel.logger.debug('Suppression de la frame %1', this.FrameElement.id);
                            this._baseFrameElement.parentElement.removeChild(this.FrameElement);
                        }
                    }
                };
                FrameModel.prototype.SetUrl = function (url) {
                    var appIFrame = this.FrameElement;
                    if (appIFrame) {
                        appIFrame.setAttribute('src', url);
                        FrameModel.logger.debug('Changement de l\'url de la frame %1: %2', appIFrame.id, url);
                        this.FrameUrl = url;
                        return true;
                    }
                    if (this.SimulateAppIFrame) {
                        this.FrameUrl = url;
                        return true;
                    }
                    return false;
                };
                FrameModel.prototype.Show = function () {
                    var wasHidden = false;
                    if (!this.SimulateAppIFrame && this.FrameElement && this.FrameElement.hasAttribute('style')) {
                        this.FrameElement.removeAttribute('style');
                    }
                    if (this.IsHidden) {
                        if (this.FrameElement)
                            FrameModel.logger.debug('Affichage de la frame %1', this.FrameElement.id);
                        var notif = new Services.NotificationMessage();
                        notif.Sujet = "FrameShown";
                        this.displayManager.getManagerLibrary().Context.NotifyFrame(notif, this);
                        this.IsHidden = false;
                        wasHidden = true;
                    }
                    return wasHidden;
                };
                FrameModel.prototype.Hide = function () {
                    if (!this.SimulateAppIFrame && this.FrameElement) {
                        this.FrameElement.setAttribute('style', 'display:none');
                    }
                    if (!this.IsHidden) {
                        if (this.FrameElement)
                            FrameModel.logger.debug('Masquage de la frame %1', this.FrameElement.id);
                        var notif = new Services.NotificationMessage();
                        notif.Sujet = "FrameHidden";
                        this.displayManager.getManagerLibrary().Context.NotifyFrame(notif, this);
                        this.IsHidden = true;
                    }
                };
                FrameModel.prototype.SetId = function () {
                    if (this.FrameElement) {
                        FrameModel.logger.debug('Changement de l\'id de la frame %1 pour %2', this.FrameElement.id, this.FrameId);
                        this.FrameElement.id = this.FrameId;
                    }
                };
                FrameModel.prototype.GetWindow = function () {
                    if (this.FrameElement)
                        return this.FrameElement.contentWindow;
                    return null;
                };
                FrameModel.CLASS_NAME = 'MyWay.Services.Display.FrameModel';
                FrameModel.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(FrameModel.CLASS_NAME);
                return FrameModel;
            }());
            Display.FrameModel = FrameModel;
            var DisplayManager = /** @class */ (function (_super) {
                __extends(DisplayManager, _super);
                //Constructeur
                function DisplayManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Display) || this;
                    _this.formatObjectNotificationListeners = {};
                    return _this;
                }
                DisplayManager.prototype.setFormatObjectNotificationListener = function (pEventType, pListener) {
                    this.formatObjectNotificationListeners[pEventType] = pListener;
                };
                DisplayManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    this._logOnUrl = pManagerInitializer.LogOnUrl || null;
                    this.Frames = [];
                    this.BaseFrame = new FrameModel(pManagerInitializer.IFrameId, null, this);
                    this.Frames.push(this.BaseFrame);
                    this.CurrentFrame = this.BaseFrame;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                        _this.library.Evennements.ajouterListener(function (pEvent) {
                            if (!_this.Frames) {
                                return;
                            }
                            var lEvent = {
                                Contenu: null,
                                type: null,
                                Sujet: "NotificationEvent"
                            };
                            if (_this.formatObjectNotificationListeners[pEvent.EventType]) {
                                _this.formatObjectNotificationListeners[pEvent.EventType](pEvent, lEvent);
                            }
                            else {
                                //Autre messages, ne pas transmettre
                                return;
                            }
                            _this.Frames.forEach(function (pFrame) {
                                if (pEvent.onSend) {
                                    pEvent.onSend(pFrame.FrameId);
                                }
                                _this.library.Context.NotifyFrame(lEvent, pFrame);
                            });
                        });
                    });
                };
                DisplayManager.prototype.getManagerLibrary = function () {
                    return this.library;
                };
                //Methodes publiques
                /**
                 * Affiche l'url dans la frame correspondant au processus
                 *
                 * Si l'id de processus est vide, affiche l'url dans la frame de base
                 *
                 * @url {string} url à afficher
                 * @processId {string} id du processus
                 */
                DisplayManager.prototype.AfficherUrl = function (url, processId, nouvelleIFrame) {
                    if (nouvelleIFrame === void 0) { nouvelleIFrame = false; }
                    DisplayManager.logger.debug('AfficherUrl, ulr: ' + url);
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    if (processId) {
                        this.DisplayIFrameUrl(url, processId, nouvelleIFrame, function (result) {
                            DisplayManager.logger.debug('L\'url est affiché dans la frame correspondant au processus %1', processId);
                            deferred.resolve(result);
                        });
                    }
                    else {
                        this.DisplayBaseUrl(url);
                        DisplayManager.logger.debug('L\'url est affiché dans la frame de base');
                        deferred.resolve(true);
                    }
                    return deferred.promise;
                };
                /**
                 * Ouvre une nouvelle instance de navigateur avec l'url (get) du correspondante
                 */
                DisplayManager.prototype.OuvrirUrl = function (url) {
                    DisplayManager.logger.debug('L\'url est affiché dans une nouvelle instance de navigateur');
                    return window.open(url);
                };
                DisplayManager.prototype.DisplayBaseFrame = function () {
                    DisplayManager.logger.debug('Masque toutes les frames sauf celle correspondant à l\'id %1', this.BaseFrame.FrameId);
                    this.ShowOnlyIFrame(this.BaseFrame.FrameId);
                };
                /**
                 * Affiche la fenêtre de logOn si elle a été précisée et n'est pas déjà affichée
                 */
                DisplayManager.prototype.DisplayLogOn = function () {
                    DisplayManager.logger.debug('Display logon');
                    this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.AfficherLogOn, null));
                    if (this._logOnUrl && (!this.BaseFrame.FrameUrl || this.BaseFrame.FrameUrl.indexOf(this._logOnUrl) < 0)) {
                        this.Redirect(this._logOnUrl, this.CurrentFrame);
                    }
                };
                DisplayManager.prototype.Redirect = function (url, secondArg, frameId) {
                    if (url === void 0) { url = null; }
                    if (secondArg === void 0) { secondArg = null; }
                    if (frameId === void 0) { frameId = null; }
                    var previousUrl;
                    var previousFrame;
                    var lPromesse = null;
                    if (secondArg && typeof secondArg == "string") {
                        previousUrl = secondArg;
                        previousFrame = this.CurrentFrame;
                    }
                    else if (secondArg && typeof secondArg == "object") {
                        previousFrame = secondArg;
                    }
                    DisplayManager.logger.debug('Redirect, url: ' + url + ', previousUrl: ' + previousUrl);
                    //Premier appel on stocke la frame précédente pour pouvoir y revenir
                    if (previousFrame) {
                        if (previousUrl)
                            this.SavedUrl = previousUrl;
                        else
                            this.SavedUrl = previousFrame.FrameUrl;
                        this.SavedFrameId = previousFrame.FrameId;
                        this.SavedProcessId = previousFrame.ProcessId;
                        lPromesse = this.AfficherUrl(url, null, false);
                    }
                    else {
                        if (url) {
                            if (frameId === null || frameId === this.BaseFrame.FrameId)
                                lPromesse = this.AfficherUrl(url, null, false);
                            else {
                                lPromesse = this.AfficherUrl(url, this.SavedProcessId, false);
                                this.SavedUrl = null;
                                this.SavedFrameId = null;
                                this.SavedProcessId = null;
                            }
                        }
                        else {
                            if (this.SavedUrl)
                                lPromesse = this.Redirect(this.SavedUrl, null, this.SavedFrameId);
                            else {
                                this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.MasquerLogOn, null));
                                var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                                lDefer.resolve(true);
                                lPromesse = lDefer.promise;
                            }
                        }
                    }
                    return lPromesse;
                };
                DisplayManager.prototype.CleanFrames = function (processes) {
                    var removeIndexes = [];
                    DisplayManager.logger.debug('CleanFrames %1', JSON.stringify(processes));
                    for (var index = 0; index < this.Frames.length; index++) {
                        var frame = this.Frames[index];
                        if (frame.ProcessId) {
                            var found = false;
                            for (var u in processes) {
                                var p = processes[u];
                                if (p.id === frame.ProcessId) {
                                    found = true;
                                    break;
                                }
                            }
                            if (!found) {
                                this.RemoveProcessIFrame(frame.ProcessId);
                                removeIndexes.push(index);
                            }
                        }
                    }
                    var revRemoveIndexes = removeIndexes.reverse();
                    for (var r in revRemoveIndexes) {
                        var index = revRemoveIndexes[r];
                        this.Frames.splice(index, 1);
                    }
                };
                DisplayManager.prototype.CleanLastProcessFrame = function () {
                    var _this = this;
                    var currentProcess = this.library.Context.GetCurrentMainProcess();
                    DisplayManager.logger.debug('CleanLastProcessFrame %1', JSON.stringify(currentProcess));
                    if (currentProcess) {
                        var frame = this.GetLastFrameModelByProcessId(currentProcess.id);
                        if (frame) {
                            frame.RemoveFrameElement();
                        }
                        this.Frames.some(function (fr, index) {
                            if (fr.FrameId === frame.FrameId) {
                                _this.Frames.splice(index, 1);
                                return true;
                            }
                        });
                    }
                };
                /**
                 * Supprime la frame correspondant à un processus
                 * @processId {string} id du processus
                 */
                DisplayManager.prototype.RemoveProcessIFrame = function (processId) {
                    var _this = this;
                    var frames = this.GetFrameModelsByProcessId(processId);
                    DisplayManager.logger.debug('Suppression de la frame du processus %1', processId);
                    for (var i in frames) {
                        var frame = frames[i];
                        frame.RemoveFrameElement();
                        this.Frames.some(function (fr, index) {
                            if (fr.FrameId === frame.FrameId) {
                                _this.Frames.splice(index, 1);
                                return true;
                            }
                        });
                    }
                };
                DisplayManager.prototype.DisplayMessage = function (message) {
                    DisplayManager.logger.debug('DisplayMessage');
                    if (this.onNotificationDeMessage)
                        this.onNotificationDeMessage(message);
                };
                DisplayManager.prototype.FermerModalMessage = function () {
                    DisplayManager.logger.debug('FermerModalMessage');
                    if (this.onFermerModalMessage)
                        this.onFermerModalMessage();
                };
                /**
                 * Permet de lancer l'événement d'affichage d'une modale
                 * @param {string}  TitreMessage     Titre de la modale
                 * @param {string}  ContenuMessage   Contenu de la modale
                 * @param {string}  boutonsAAfficher Objet précisant les différents boutons à afficher
                 * @param {number}  delai            Délai d'affichage de la modale
                 * @param {any) =>               void}        callback        [description]
                 * @param {()   =>               void}        onModaleOuverte [description]
                 */
                DisplayManager.prototype.AfficherModalMessage = function (TitreMessage, ContenuMessage, boutonsAAfficher, delai, callback, onModaleOuverte) {
                    DisplayManager.logger.debug('Lancement de l\'évènement d\'affichage d\'une modale Message');
                    if (this.onAffichageModalMessage)
                        this.onAffichageModalMessage(TitreMessage, ContenuMessage, boutonsAAfficher, delai, callback, onModaleOuverte);
                };
                DisplayManager.prototype.AfficherModalAide = function (TitreMessage, ContenuMessage, CodeEtape, IdFlashcode) {
                    DisplayManager.logger.debug('Lancement de l\'évènement d\'affichage d\'une modale Aide');
                    if (this.onAffichageModalAide)
                        this.onAffichageModalAide(TitreMessage, ContenuMessage, CodeEtape, IdFlashcode);
                };
                DisplayManager.prototype.getMyIFrameId = function (pWindow) {
                    var lId = null;
                    if (this.Frames) {
                        this.Frames.every(function (pFrame) {
                            if (pFrame.GetWindow() === pWindow) {
                                lId = pFrame.FrameId;
                            }
                            return lId === null;
                        });
                    }
                    return lId;
                };
                //Méthodes privées
                DisplayManager.prototype.DisplayIFrameUrl = function (url, displayedProcessId, nouvelleIFrame, callback) {
                    DisplayManager.logger.debug('DisplayIFrameUrl, url: ' + url);
                    var process = this.library.Context.GetCurrentProcess();
                    var currentStep = null;
                    if (process)
                        currentStep = this.library.Context.GetCurrentStep(process);
                    if (currentStep.isRouteur) {
                        if (currentStep.etatEtape == Services.Context.EtatEtape.RESET) {
                            currentStep.etatEtape = Services.Context.EtatEtape.STARTED;
                            this.ExecuteJS(currentStep.url);
                        }
                    }
                    else {
                        var needStart = false;
                        if (currentStep.etatEtape == Services.Context.EtatEtape.RESET) {
                            currentStep.etatEtape = Services.Context.EtatEtape.STARTED;
                            needStart = true;
                        }
                        this.AddProcessIFrame(url, displayedProcessId, nouvelleIFrame, false, needStart);
                        if (callback)
                            callback(true);
                    }
                };
                DisplayManager.prototype.DisplayBaseUrl = function (url) {
                    DisplayManager.logger.debug('DisplayBaseUrl, url: ' + url);
                    var wasHidden = this.ShowOnlyIFrame(this.BaseFrame.FrameId);
                    if (wasHidden && this.BaseFrame.FrameUrl === url)
                        return true;
                    // add unique id to URL if previous and current URL are the same
                    if (this.BaseFrame.FrameUrl === url) {
                        if (this.BaseFrame.FrameUrl.indexOf('?') >= 0) {
                            url += '&';
                        }
                        else {
                            url += '?';
                        }
                        url += Services.CoreCommon.creerChaineAleatoire(7);
                    }
                    this.BaseFrame.IsMyWayUrl = false;
                    if (this.BaseFrame.SetUrl(url))
                        return true;
                    return false;
                };
                /**
                 * Récupère le modèle de frame par son id
                 * @id {string} id de la frame
                 */
                DisplayManager.prototype.GetFrameModelById = function (id) {
                    for (var i = 0; i < this.Frames.length; i++) {
                        var frame = this.Frames[i];
                        if (frame.FrameId === id)
                            return frame;
                    }
                    return null;
                };
                DisplayManager.prototype.GetLastFrameModelByProcessId = function (processId) {
                    for (var i = this.Frames.length - 1; i >= 0; i--) {
                        var frame = this.Frames[i];
                        if (frame.ProcessId === processId && frame.TempId === '')
                            return frame;
                    }
                    for (var i = this.Frames.length - 1; i >= 0; i--) {
                        var frame = this.Frames[i];
                        if (frame.ProcessId === processId)
                            return frame;
                    }
                    return null;
                };
                DisplayManager.prototype.GetFrameModelsByProcessId = function (processId) {
                    var frames = [];
                    for (var i = this.Frames.length - 1; i >= 0; i--) {
                        var frame = this.Frames[i];
                        if (frame.ProcessId === processId)
                            frames.push(frame);
                    }
                    return frames;
                };
                /**
                 * Masque toutes les frames sauf celle correspondant à l'id donné
                 * @iframeId {string} id de la frame à montrer
                 */
                DisplayManager.prototype.ShowOnlyIFrame = function (iframeId, forceShowFrame) {
                    var wasHidden = false;
                    if (!iframeId)
                        throw 'iframeId is mandatory';
                    var frame = this.GetFrameModelById(iframeId);
                    if (frame == null)
                        throw "can't find frame with id " + iframeId;
                    wasHidden = frame.Show();
                    this.CurrentFrame = frame;
                    //var iframes = document.getElementsByTagName('iframe');
                    //for (var index = 0; index < iframes.length; index++) {
                    //    var element = document.getElementsByTagName('iframe')[index];
                    //    if (!iframeId || element.id !== iframeId)
                    //        element.setAttribute('style', 'display:none');
                    //}
                    for (var i in this.Frames) {
                        var frame = this.Frames[i];
                        if (frame.FrameId != iframeId)
                            frame.Hide();
                    }
                    if (wasHidden || forceShowFrame)
                        if (this.onShowFrame)
                            this.onShowFrame(this.CurrentFrame);
                    return wasHidden;
                };
                /**
                 * Ajoute une frame pour un processus donné avec l'url donnée
                 * Si la frame existe déjà, l'url de cette frame est juste modifiée
                 * @url {string} url à mettre dans la frame
                 * @processId {string} id du processus
                 */
                DisplayManager.prototype.AddProcessIFrame = function (url, processId, nouvelleIFrame, redirected, needStart) {
                    DisplayManager.logger.debug('AddProcessIFrame');
                    var iframeId = 'iframe-' + processId;
                    var frame = this.GetLastFrameModelByProcessId(processId);
                    var previousFrame = null;
                    if (frame && nouvelleIFrame) {
                        this.AddTempId(frame, processId, '-' + Services.CoreCommon.creerChaineAleatoire(8));
                        previousFrame = frame;
                        frame = null;
                    }
                    else if (frame && frame.TempId) {
                        this.AddTempId(frame, processId, '');
                    }
                    var wasHidden;
                    if (!frame) {
                        frame = new FrameModel(iframeId, this.BaseFrame.FrameElement, this);
                        frame.ProcessId = processId;
                        if (previousFrame)
                            frame.PreviousFrame = previousFrame;
                        this.Frames.push(frame);
                        frame.CreateFrameElement();
                        wasHidden = this.ShowOnlyIFrame(frame.FrameId, true);
                    }
                    else {
                        wasHidden = this.ShowOnlyIFrame(frame.FrameId);
                    }
                    if (!wasHidden && frame.FrameUrl === url && needStart) {
                        if (frame.IsMyWayUrl) {
                            DisplayManager.logger.debug('refresh demandé');
                            this.sendMessage(Display.DisplayMessageSubject.Refresh);
                        }
                    }
                    if ((!frame.IsProducteur && frame.FrameUrl != url) || (frame.IsProducteur && frame.FrameUrlOrigine != url)) {
                        if (!frame.Redirected) {
                            DisplayManager.logger.debug('SetUrl');
                            frame.SetUrl(url);
                        }
                        else {
                            DisplayManager.logger.warn('Frame has a Redirected flag, set url cannot be done');
                        }
                    }
                    if (!wasHidden)
                        frame.Redirected = redirected;
                    this.CurrentFrame = frame;
                    //if (!wasHidden && needStart && (this.CurrentFrame.IsMyWayUrl == undefined || !this.CurrentFrame.IsMyWayUrl))
                    if (!wasHidden && needStart) {
                        this.CurrentFrame.IsMyWayUrl = false;
                    }
                };
                DisplayManager.prototype.AddTempId = function (frame, processId, tempId) {
                    frame.FrameId = 'iframe-' + processId + tempId;
                    frame.TempId = tempId;
                    frame.SetId();
                };
                DisplayManager.prototype.ExecuteJS = function (jsUrl) {
                    DisplayManager.logger.info('execution d\'une étape de routage: %1', jsUrl);
                    Services.CoreCommon.loadScript(jsUrl);
                };
                DisplayManager.prototype.RedirectInStep = function (url) {
                    var process = this.library.Context.GetCurrentProcess();
                    this.AddProcessIFrame(url, process.id, false, true, true);
                };
                DisplayManager.prototype.PrepareSubmit = function (url) {
                    DisplayManager.logger.debug('Prepare frame for submit');
                    var process = this.library.Context.GetCurrentMainProcess();
                    var frame = this.GetLastFrameModelByProcessId(process.id);
                    frame.FrameUrlOrigine = frame.FrameUrl;
                    frame.FrameUrl = url;
                    frame.Redirected = true;
                    frame.IsMyWayUrl = false;
                    frame.IsProducteur = true;
                };
                DisplayManager.prototype.FinishSubmit = function () {
                    var process = this.library.Context.GetCurrentMainProcess();
                    if (process) {
                        var frame = this.GetLastFrameModelByProcessId(process.id);
                        if (frame && frame.Redirected) {
                            DisplayManager.logger.debug('cancel redirected flag');
                            frame.Redirected = false;
                        }
                    }
                };
                DisplayManager.CLASS_NAME = 'MyWay.Services.Display.DisplayManager';
                DisplayManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(DisplayManager.CLASS_NAME);
                return DisplayManager;
            }(Services.Components.ComponentManagerBase));
            Display.DisplayManager = DisplayManager;
            Services.Components.RegistryManager.getInstance().register(DisplayManager);
        })(Display = Services.Display || (Services.Display = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraitementNsdk;
        (function (TraitementNsdk) {
            var TraitementNsdkManagerMessage = /** @class */ (function (_super) {
                __extends(TraitementNsdkManagerMessage, _super);
                function TraitementNsdkManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.TraitementNsdk) || this;
                }
                TraitementNsdkManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case TraitementNsdk.TraitementNsdkMessageSubject.Lancer: {
                            var lContent = pMessage.message;
                            var data = lContent.data;
                            var traitement = lContent.traitement;
                            return this.managerInstance.Lancer(traitement, data);
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                TraitementNsdkManagerMessage.CLASS_NAME = 'MyWay.Services.TraitementNsdk.TraitementNsdkManagerMessage';
                TraitementNsdkManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(TraitementNsdkManagerMessage.CLASS_NAME);
                return TraitementNsdkManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            TraitementNsdk.TraitementNsdkManagerMessage = TraitementNsdkManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(TraitementNsdkManagerMessage);
        })(TraitementNsdk = Services.TraitementNsdk || (Services.TraitementNsdk = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgentExtended, 'InteropTechAgent', {
            get: function () {
                return this._techLibrary.InteropTechAgent;
            }
        });
        Services.TechAgentExtended.prototype.Lancer = function (executableWrapper, contexte, parametres, sync, errorCallback) {
            return this._techLibrary.Lancer(executableWrapper, contexte, parametres, sync, errorCallback);
        };
        Services.TechAgentExtended.prototype.AddToContextInterop = function (level, key, value, callback, errorCallback) {
            return this._techLibrary.AddToContextInterop(level, key, value, callback, errorCallback);
        };
        Services.TechAgentExtended.prototype.AddListToContextInterop = function (level, datas, callback, errorCallback) {
            return this._techLibrary.AddListToContextInterop(level, datas, callback, errorCallback);
        };
        Services.TechAgentExtended.prototype.GetListFromContextInterop = function (level, datas, callback, errorCallback) {
            return this._techLibrary.GetListFromContextInterop(level, datas, callback, errorCallback);
        };
        Services.TechAgentExtended.prototype.GetFromContextInterop = function (level, key, value, callback, errorCallback) {
            return this._techLibrary.GetFromContextInterop(level, key, value, callback, errorCallback);
        };
        Services.TechAgentExtended.prototype.EndStep = function () {
            return this._techLibrary.EndStep();
        };
        Services.TechAgentExtended.prototype.AfficherWindowParHandle = function (handle, affiche) {
            return this._techLibrary.AfficherWindowParHandle(handle, affiche);
        };
        Services.TechAgentExtended.prototype.AfficherWindowParPid = function (pid, affiche) {
            return this._techLibrary.AfficherWindowParPid(pid, affiche);
        };
        Services.TechAgentExtended.prototype.AfficherSynthese = function (numeroClient) {
            return this._techLibrary.AfficherSynthese(numeroClient);
        };
        Services.TechAgentExtended.prototype.ActiverApplicationAppelante = function (numeroPlan) {
            return this.InteropTechAgent.ActiverApplicationAppelante(numeroPlan);
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgent, 'InteropTechAgent', {
            get: function () {
                return this._techLibrary.InteropTechAgent;
            }
        });
        Services.TechAgent.prototype.Lancer = function (executableWrapper, contexte, parametres, sync, errorCallback) {
            return this.InteropTechAgent.Lancer(executableWrapper, contexte, parametres, sync, errorCallback);
        };
        Services.TechAgent.prototype.AddToContextInterop = function (level, key, value, callback, errorCallback) {
            return this.InteropTechAgent.AddToContextInterop(level, key, value, callback, errorCallback);
        };
        Services.TechAgent.prototype.AddListToContextInterop = function (level, datas, callback, errorCallback) {
            return this.InteropTechAgent.AddListToContextInterop(level, datas, callback, errorCallback);
        };
        Services.TechAgent.prototype.GetListFromContextInterop = function (level, datas, callback, errorCallback) {
            return this.InteropTechAgent.GetListFromContextInterop(level, datas, callback, errorCallback);
        };
        Services.TechAgent.prototype.GetFromContextInterop = function (level, key, value, callback, errorCallback) {
            return this.InteropTechAgent.GetFromContextInterop(level, key, value, callback, errorCallback);
        };
        Services.TechAgent.prototype.EndStep = function () {
            return this.InteropTechAgent.EndStep();
        };
        Services.TechAgent.prototype.AfficherWindowParHandle = function (handle, affiche) {
            return this.InteropTechAgent.AfficherWindowParHandle(handle, affiche);
        };
        Services.TechAgent.prototype.AfficherWindowParPid = function (pid, affiche) {
            return this.InteropTechAgent.AfficherWindowParPid(pid, affiche);
        };
        Services.TechAgent.prototype.AfficherSynthese = function (numeroClient) {
            return this.InteropTechAgent.AfficherSynthese(numeroClient);
        };
        Services.TechAgent.prototype.ActiverApplicationAppelante = function (numeroPlan) {
            return this.InteropTechAgent.ActiverApplicationAppelante(numeroPlan);
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.TechLibrary.addInitListener(function (pInstance, library) {
            pInstance.InteropTechAgent = library.Interop;
        });
        Services.TechLibrary.prototype.Lancer = function (executableWrapper, contexte, parametres, sync, errorCallback) {
            return this.InteropTechAgent.Lancer(executableWrapper, contexte, parametres, sync, errorCallback);
        };
        Services.TechLibrary.prototype.AddToContextInterop = function (level, key, value, callback, errorCallback) {
            return this.InteropTechAgent.AddToContextInterop(level, key, value, callback, errorCallback);
        };
        Services.TechLibrary.prototype.AddListToContextInterop = function (level, datas, callback, errorCallback) {
            return this.InteropTechAgent.AddListToContextInterop(level, datas, callback, errorCallback);
        };
        Services.TechLibrary.prototype.GetListFromContextInterop = function (level, datas, callback, errorCallback) {
            return this.InteropTechAgent.GetListFromContextInterop(level, datas, callback, errorCallback);
        };
        Services.TechLibrary.prototype.GetFromContextInterop = function (level, key, value, callback, errorCallback) {
            return this.InteropTechAgent.GetFromContextInterop(level, key, value, callback, errorCallback);
        };
        Services.TechLibrary.prototype.EndStep = function () {
            return this.InteropTechAgent.EndStep();
        };
        Services.TechLibrary.prototype.AfficherWindowParHandle = function (handle, affiche) {
            return this.InteropTechAgent.AfficherWindowParHandle(handle, affiche);
        };
        Services.TechLibrary.prototype.AfficherWindowParPid = function (pid, affiche) {
            return this.InteropTechAgent.AfficherWindowParPid(pid, affiche);
        };
        Services.TechLibrary.prototype.AfficherSynthese = function (numeroClient) {
            return this.InteropTechAgent.AfficherSynthese(numeroClient);
        };
        Services.TechLibrary.prototype.ActiverApplicationAppelante = function (numeroPlan) {
            return this.InteropTechAgent.ActiverApplicationAppelante(numeroPlan);
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Interop;
        (function (Interop) {
            var InteropTechAgent = /** @class */ (function (_super) {
                __extends(InteropTechAgent, _super);
                function InteropTechAgent() {
                    return _super.call(this) || this;
                }
                InteropTechAgent.prototype.Lancer = function (executableWrapper, contexte, parametres, sync, errorCallback) {
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.Lancer, {
                        executableWrapper: executableWrapper,
                        contexte: contexte,
                        parametres: parametres,
                        sync: sync
                    }).catch(function (e) {
                        if (errorCallback) {
                            errorCallback(e);
                        }
                        throw e;
                    });
                };
                InteropTechAgent.prototype.AddToContextInterop = function (level, key, value, callback, errorCallback) {
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.AddToContextInterop, {
                        level: level,
                        key: key,
                        value: value
                    }).then(function (any) {
                        if (callback) {
                            callback(any);
                        }
                        return any;
                    }, function (e) {
                        if (errorCallback) {
                            errorCallback(e);
                        }
                        throw e;
                    });
                };
                InteropTechAgent.prototype.AddListToContextInterop = function (level, datas, callback, errorCallback) {
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.AddListToContextInterop, {
                        level: level,
                        datas: datas
                    }).then(function (any) {
                        if (callback) {
                            callback(any);
                        }
                        return any;
                    }, function (e) {
                        if (errorCallback) {
                            errorCallback(e);
                        }
                        throw e;
                    });
                };
                InteropTechAgent.prototype.GetListFromContextInterop = function (level, datas, callback, errorCallback) {
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.GetListFromContextInterop, {
                        level: level,
                        datas: datas
                    }).then(function (returnDatas) {
                        if (callback) {
                            callback(returnDatas);
                        }
                        return returnDatas;
                    }, function (e) {
                        if (errorCallback) {
                            errorCallback(e);
                        }
                        throw e;
                    });
                };
                InteropTechAgent.prototype.GetFromContextInterop = function (level, key, value, callback, errorCallback) {
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.GetFromContextInterop, {
                        level: level,
                        key: key,
                        value: value
                    }).then(function (returnData) {
                        if (callback) {
                            callback(returnData);
                        }
                        return returnData;
                    }, function (e) {
                        if (errorCallback) {
                            errorCallback(e);
                        }
                        throw e;
                    });
                };
                InteropTechAgent.prototype.EndStep = function () {
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.EndStep, {});
                };
                InteropTechAgent.prototype.AfficherWindowParHandle = function (handle, affiche) {
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.AfficherWindowParHandle, {
                        handle: handle,
                        affiche: affiche
                    });
                };
                InteropTechAgent.prototype.AfficherWindowParPid = function (pid, affiche) {
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.AfficherWindowParPid, {
                        pid: pid,
                        affiche: affiche
                    });
                };
                InteropTechAgent.prototype.AfficherSynthese = function (numeroClient) {
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.AfficherSynthese, {
                        numeroClient: numeroClient
                    });
                };
                InteropTechAgent.prototype.ActiverApplicationAppelante = function (numeroPlan) {
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.ActiverApplicationAppelante, {
                        numeroPlan: numeroPlan
                    });
                };
                InteropTechAgent.prototype.LireFichier = function (nomFichier, callback, errorCallback) {
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.LireFichier, {
                        nomFichier: nomFichier
                    }).then(function (content) {
                        if (callback) {
                            callback(content);
                        }
                        return content;
                    }, function (e) {
                        if (errorCallback) {
                            errorCallback(e);
                        }
                        throw e;
                    });
                };
                InteropTechAgent.prototype.clearBus = function () {
                    return this.sendMessage(Interop.Messages.InteropMessageSubject.ClearBus, {});
                };
                return InteropTechAgent;
            }(Interop.InteropAgent));
            Interop.InteropTechAgent = InteropTechAgent;
            Services.Components.RegistryAgent.getInstance().register(InteropTechAgent);
        })(Interop = Services.Interop || (Services.Interop = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des impressions
* @module MyWay.Services.Impression
* @methode controleGenerer – public - Permet de contrôler la génération de document d'impression
* @methode controleImprimer – public - Permet de contrôler le lancement d'une impression
* @methode controleGenererImprimer – public - Permet de contrôler la générétion et le lancement d'une impression
* @methode controleParametreActiveX – public - Permet de contrôler les paramètres envoyé à l'ActiveX pour le lancement d'une impression
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Impression;
        (function (Impression) {
            /**
            * Permet de contrôler la génération de document d'impression
            * @param data {any} Données à envoyer pour la génération du document d'impression
            * @param generationParams {GenerationParams} Paramètres pour la génération du document d'impression
            * @param callback {function} Action à executer une fois la génération effectuée
            * @param callbackError {function} Action à executer en cas d'erreur lors de la génération
            */
            function controleGenerer(data, generationParams) {
                var erreurParams;
                // Contrôle sur les arguments passés en paramètres
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "data", value: data, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull },
                    { name: "generationParams", value: generationParams, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres obligatoires de generationParams
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "systeme", value: generationParams.systeme, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull },
                    { name: "obligatoires", value: generationParams.obligatoires, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres obligatoires de generationParams.systeme
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "typeName", value: generationParams.systeme.typeName, controle: MyWay.Services.Controle.CONTROLES.isStringNotEmpty },
                    { name: "typeFullName", value: generationParams.systeme.typeFullName, controle: MyWay.Services.Controle.CONTROLES.isStringNotEmpty },
                    { name: "librairie", value: generationParams.systeme.librairie, controle: MyWay.Services.Controle.CONTROLES.isStringNotEmpty }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres obligatoires de generationParams.obligatoires
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "action", value: generationParams.obligatoires.action, controle: MyWay.Services.Controle.CONTROLES.isAnEnumValue, enumName: "Impression.GENERATION_ACTION", enumObject: Impression.GENERATION_ACTION },
                    { name: "parametresGenerationFichier", value: generationParams.obligatoires.parametresGenerationFichier, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres obligatoires de generationParams.obligatoires.parametresGenerationFichier
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "typeFichier", value: generationParams.obligatoires.parametresGenerationFichier.typeFichier, controle: MyWay.Services.Controle.CONTROLES.isAnEnumValue, enumName: "Fichier.TYPE_FICHIER", enumObject: Services.Fichier.TYPE_FICHIER },
                    { name: "restitutionVersion", value: generationParams.obligatoires.parametresGenerationFichier.restitutionVersion, controle: MyWay.Services.Controle.CONTROLES.isAnEnumValue, enumName: "Impression.RESTITUTION_VERSION", enumObject: Impression.RESTITUTION_VERSION },
                    { name: "sousRepModele", value: generationParams.obligatoires.parametresGenerationFichier.sousRepModele, controle: MyWay.Services.Controle.CONTROLES.isString }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur le paramètre nom de fichier si l'action demandé contient la récupération du fichier (archiverAndGetFichier et getFichier)
                if ((generationParams.obligatoires.action == Impression.GENERATION_ACTION.archiverAndGetFichier || generationParams.obligatoires.action == Impression.GENERATION_ACTION.getFichier) && !Services.Controle.StaticStringControle.isStringNotEmpty(generationParams.optionnels.nomFichier)) {
                    return "L'action demandée implique que le nom du fichier soit renseigné";
                }
                // Contrôle sur les paramètres obligatoires de generationParams.optionnels.mentionsLegales, si ce dernier est renseigné
                if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationParams.optionnels.mentionsLegales) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "numEtablissement", value: generationParams.optionnels.mentionsLegales.numEtablissement, controle: MyWay.Services.Controle.CONTROLES.isStringNotEmptyOrNull }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres obligatoires de generationParams.optionnels.archivage, si ce dernier est renseigné
                if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationParams.optionnels.archivage)) {
                    // Contrôle sur les paramètres obligatoires de generationParams.optionnels.archivage.aQstnCreerDoc
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationParams.optionnels.archivage.aQstnCreerDoc)) {
                        // Contrôle sur les paramètres obligatoires de generationParams.optionnels.archivage.aQstnCreerDoc.donnCntx et generationParams.optionnels.archivage.aQstnCreerDoc.document
                        if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationParams.optionnels.archivage.aQstnCreerDoc.donnCntx) && Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationParams.optionnels.archivage.aQstnCreerDoc.document)) {
                            if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                                { name: "idntCmpstApplf", value: generationParams.optionnels.archivage.aQstnCreerDoc.donnCntx.idntCmpstApplf, controle: MyWay.Services.Controle.CONTROLES.isString }
                            ])) !== "") {
                                return erreurParams;
                            }
                            // Contrôle sur les paramètres obligatoires de generationParams.optionnels.archivage.aQstnCreerDoc.document.fichierDoc et generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc, si ce dernier est renseigné
                            if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationParams.optionnels.archivage.aQstnCreerDoc.document.fichierDoc) && Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc)) {
                                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                                    { name: "nomFich", value: generationParams.optionnels.archivage.aQstnCreerDoc.document.fichierDoc.nomFich, controle: MyWay.Services.Controle.CONTROLES.isString },
                                    { name: "codeTypeNatrDoc", value: generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeNatrDoc, controle: MyWay.Services.Controle.CONTROLES.isString },
                                    { name: "codeTypeAttrb", value: generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeAttrb, controle: MyWay.Services.Controle.CONTROLES.isString },
                                    { name: "idntAttrb", value: generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.idntAttrb, controle: MyWay.Services.Controle.CONTROLES.isString },
                                    { name: "dateDeliv", value: generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.dateDeliv, controle: MyWay.Services.Controle.CONTROLES.isDate },
                                    { name: "dateNumr", value: generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.dateNumr, controle: MyWay.Services.Controle.CONTROLES.isDate },
                                    { name: "inttAttr", value: generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.inttAttr, controle: MyWay.Services.Controle.CONTROLES.isString },
                                ])) !== "") {
                                    return erreurParams;
                                }
                                // Contrôle sur les paramètres obligatoires de generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeStck si ce dernier est en Filenet (GED définitive, codeTypeStck = A)
                                if (!Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeStck) || generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeStck === "A") {
                                    if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                                        { name: "codeTypeModeAcqs", value: generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeModeAcqs, controle: MyWay.Services.Controle.CONTROLES.isString },
                                        { name: "codeTypeOrigAcqs", value: generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeOrigAcqs, controle: MyWay.Services.Controle.CONTROLES.isString },
                                        { name: "codeTypeSign", value: generationParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeSign, controle: MyWay.Services.Controle.CONTROLES.isString },
                                    ])) !== "") {
                                        return erreurParams;
                                    }
                                }
                            }
                            else {
                                return "Les paramètres fichierDoc et proprietesDoc de document doivent être renseignés";
                            }
                        }
                        else {
                            return "Les paramètres document et donnCntx de l'aQstnCreerDoc doivent être renseignés";
                        }
                    }
                    else {
                        return "Le paramètre aQstnCreerDoc de l'archivage doit être renseigné";
                    }
                }
                return "";
            }
            Impression.controleGenerer = controleGenerer;
            /**
            * Permet de contrôler le lancement d'une impression
            * @param data {any} Données à envoyer pour l'impression du document
            * @param impressionParams {ImpressionParams} Paramètres pour l'impression du document
            * @param callback {function} Action à executer une fois l'impression effectuée
            * @param callbackError {function} Action à executer en cas d'erreur lors de l'impression
            */
            function controleImprimer(data, impressionParams) {
                var erreurParams;
                // Contrôle sur les arguments passés en paramètres
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "data", value: data, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull },
                    { name: "impressionParams", value: impressionParams, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres impression du document
                if ((erreurParams = controleImpressionParams(impressionParams)) !== "") {
                    return erreurParams;
                }
                return controleParametreActiveX(impressionParams);
            }
            Impression.controleImprimer = controleImprimer;
            /**
            * Permet de contrôler le lancement d'une impression
            * @param data {any} Données à envoyer pour l'impression du document
            * @param generationParams {ImpressionParams} Paramètres pour l'impression du document
            * @param callback {function} Action à executer une fois l'impression effectuée
            * @param callbackError {function} Action à executer en cas d'erreur lors de l'impression
            */
            function controleImprimerLot(data, parametresActiveXGlobaux) {
                var erreurParams;
                // Contrôle sur les arguments passés en paramètres
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "data", value: data, controle: MyWay.Services.Controle.CONTROLES.isArray }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur le lot de documents qui ne peut être vide
                if (data.length <= 0) {
                    return 'Le lot de documents à imprimer est vide';
                }
                return controleParametreActiveXGlobaux(parametresActiveXGlobaux);
            }
            Impression.controleImprimerLot = controleImprimerLot;
            /**
            * Permet de contrôler le lancement le contenu d'un lot d'impression
            * @param data {DocumentImpressionLot} L'un des documents du lot à imprimer
            * @param callback {function} Action à executer une fois l'impression effectuée
            * @param callbackError {function} Action à executer en cas d'erreur lors de l'impression
            */
            function controleDocumentImpressionLot(data) {
                var erreurParams;
                // Contrôle sur les arguments passés en paramètres
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "data", value: data, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres data.fichier et data.idGed qui ne peuvent être null en même temps
                if (!Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(data.fichier) && !Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(data.idGed)) {
                    return 'L\'un des paramètres "fichier" ou "idGed" de DocumentImpressionLot doit être renseigné';
                }
                // Contrôle sur les paramètres du document fournis
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "numeroOrdre", value: data.numeroOrdre, controle: MyWay.Services.Controle.CONTROLES.isNumber }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres impression du document
                if ((erreurParams = controleImpressionParams(data.impressionParams)) !== '') {
                    return erreurParams;
                }
                return controleParametreActiveXIndividuels(data.impressionParams);
            }
            Impression.controleDocumentImpressionLot = controleDocumentImpressionLot;
            /**
            * Permet de controler les paramètres d'impression
            * @param impressionParams {ImpressionParams} Paramètres pour l'impression du document
            */
            function controleImpressionParams(impressionParams) {
                var erreurParams;
                // Contrôle sur la propriété impressionParams.typeName, ce qui indique que le type d'impressionParams n'est pas du nouveau type ImpressionParams
                if (impressionParams.hasOwnProperty('typeName')) {
                    return "Le paramètre impressionParams doit être du nouveau type ImpressionParams";
                }
                // Contrôle sur les paramètres obligatoires de impressionsParams
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "obligatoires", value: impressionParams.obligatoires, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres obligatoires de impressionParams.obligatoires
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "nomFichier", value: impressionParams.obligatoires.nomFichier, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull }
                ])) !== "") {
                    return erreurParams;
                }
                return '';
            }
            Impression.controleImpressionParams = controleImpressionParams;
            /**
            * Permet de contrôler la générétion et le lancement d'une impression
            * @param data {any} Données à envoyer pour la génération et l'impression d'un document
            * @param generationParams {GenerationParams} Paramètres pour la génération et l'impression d'un document
            * @param callback {function} Action à executer une fois la génération et l'impression effectuée
            * @param callbackError {function} Action à executer en cas d'erreur lors de la génération et/ou de l'impression
            */
            function controleGenererImprimer(data, generationImpressionParams) {
                var erreurParams;
                // Contrôle sur les arguments passés en paramètres
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "data", value: data, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull },
                    { name: "generationImpressionParams", value: generationImpressionParams, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres obligatoires de generationImpressionParams
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "systeme", value: generationImpressionParams.systeme, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull },
                    { name: "obligatoires", value: generationImpressionParams.obligatoires, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres obligatoires de generationImpressionParams.systeme
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "typeName", value: generationImpressionParams.systeme.typeName, controle: MyWay.Services.Controle.CONTROLES.isStringNotEmpty },
                    { name: "typeFullName", value: generationImpressionParams.systeme.typeFullName, controle: MyWay.Services.Controle.CONTROLES.isStringNotEmpty },
                    { name: "librairie", value: generationImpressionParams.systeme.librairie, controle: MyWay.Services.Controle.CONTROLES.isStringNotEmpty }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres obligatoires de generationImpressionParams.obligatoires.
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "action", value: generationImpressionParams.obligatoires.action, controle: MyWay.Services.Controle.CONTROLES.isAnEnumValue, enumName: "Impression.GENERATION_ACTION", enumObject: Impression.GENERATION_ACTION },
                    { name: "parametresGenerationFichier", value: generationImpressionParams.obligatoires.parametresGenerationFichier, controle: MyWay.Services.Controle.CONTROLES.isNotUndefinedAndNotNull }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres obligatoires de generationImpressionParams.obligatoires.parametresGenerationFichier
                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                    { name: "typeFichier", value: generationImpressionParams.obligatoires.parametresGenerationFichier.typeFichier, controle: MyWay.Services.Controle.CONTROLES.isAnEnumValue, enumName: "Fichier.TYPE_FICHIER", enumObject: Services.Fichier.TYPE_FICHIER },
                    { name: "restitutionVersion", value: generationImpressionParams.obligatoires.parametresGenerationFichier.restitutionVersion, controle: MyWay.Services.Controle.CONTROLES.isAnEnumValue, enumName: "Impression.RESTITUTION_VERSION", enumObject: Impression.RESTITUTION_VERSION },
                    { name: "sousRepModele", value: generationImpressionParams.obligatoires.parametresGenerationFichier.sousRepModele, controle: MyWay.Services.Controle.CONTROLES.isString }
                ])) !== "") {
                    return erreurParams;
                }
                // Contrôle sur les paramètres obligatoires de generationImpressionParams.optionnels.archivage, si ce dernier est renseigné
                if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationImpressionParams.optionnels.archivage)) {
                    // Contrôle sur les paramètres obligatoires de generationImpressionParams.optionnels.archivage.aQstnCreerDoc
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationImpressionParams.optionnels.archivage.aQstnCreerDoc)) {
                        // Contrôle sur les paramètres obligatoires de generationParams.optionnels.archivage.aQstnCreerDoc.donnCntx et generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document
                        if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationImpressionParams.optionnels.archivage.aQstnCreerDoc.donnCntx) && Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document)) {
                            if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                                { name: "idntCmpstApplf", value: generationImpressionParams.optionnels.archivage.aQstnCreerDoc.donnCntx.idntCmpstApplf, controle: MyWay.Services.Controle.CONTROLES.isString }
                            ])) !== "") {
                                return erreurParams;
                            }
                            // Contrôle sur les paramètres obligatoires de generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.fichierDoc et generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc, si ce dernier est renseigné
                            if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.fichierDoc) && Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc)) {
                                if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                                    { name: "nomFich", value: generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.fichierDoc.nomFich, controle: MyWay.Services.Controle.CONTROLES.isString },
                                    { name: "codeTypeNatrDoc", value: generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeNatrDoc, controle: MyWay.Services.Controle.CONTROLES.isString },
                                    { name: "codeTypeAttrb", value: generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeAttrb, controle: MyWay.Services.Controle.CONTROLES.isString },
                                    { name: "idntAttrb", value: generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.idntAttrb, controle: MyWay.Services.Controle.CONTROLES.isString },
                                    { name: "dateDeliv", value: generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.dateDeliv, controle: MyWay.Services.Controle.CONTROLES.isDate },
                                    { name: "dateNumr", value: generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.dateNumr, controle: MyWay.Services.Controle.CONTROLES.isDate },
                                    { name: "inttAttr", value: generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.inttAttr, controle: MyWay.Services.Controle.CONTROLES.isString },
                                ])) !== "") {
                                    return erreurParams;
                                }
                                // Contrôle sur les paramètres obligatoires de generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeStck si ce dernier est en Filenet (GED définitive, codeTypeStck = A)
                                if (!Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeStck) || generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeStck === "A") {
                                    if ((erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                                        { name: "codeTypeModeAcqs", value: generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeModeAcqs, controle: MyWay.Services.Controle.CONTROLES.isString },
                                        { name: "codeTypeOrigAcqs", value: generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeOrigAcqs, controle: MyWay.Services.Controle.CONTROLES.isString },
                                        { name: "codeTypeSign", value: generationImpressionParams.optionnels.archivage.aQstnCreerDoc.document.proprietesDoc.codeTypeSign, controle: MyWay.Services.Controle.CONTROLES.isString },
                                    ])) !== "") {
                                        return erreurParams;
                                    }
                                }
                            }
                            else {
                                return "Les paramètres fichierDoc et proprietesDoc de document doivent être renseignés";
                            }
                        }
                        else {
                            return "Les paramètres document et donnCntx de l'aQstnCreerDoc doivent être renseignés";
                        }
                    }
                    else {
                        return "Le paramètre aQstnCreerDoc de l'archivage doit être renseigné";
                    }
                }
                return controleParametreActiveX(generationImpressionParams);
            }
            Impression.controleGenererImprimer = controleGenererImprimer;
            /**
            * Permet de controler les paramètres ActiveX
            * @param params {ImpressionParams|GenerationParams} Paramètres pour l'impression et/ou la génération d'un document
            */
            function controleParametreActiveX(params) {
                var erreurParams;
                // Contrôle sur params.optionnels.parametreActiveX, si ce dernier est renseigné
                if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametreActiveX)) {
                    // Contrôle sur params.optionnels.parametreActiveX.annul, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametreActiveX.annul) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "annul", value: params.optionnels.parametreActiveX.annul, controle: MyWay.Services.Controle.CONTROLES.isBoolean }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur params.optionnels.parametreActiveX.voir, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametreActiveX.voir) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "voir", value: params.optionnels.parametreActiveX.voir, controle: MyWay.Services.Controle.CONTROLES.isBoolean }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur params.optionnels.parametreActiveX.enregistrer, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametreActiveX.enregistrer) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "enregistrer", value: params.optionnels.parametreActiveX.enregistrer, controle: MyWay.Services.Controle.CONTROLES.isBoolean }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur params.optionnels.parametreActiveX.blocnbex, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametreActiveX.blocnbex) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "blocnbex", value: params.optionnels.parametreActiveX.blocnbex, controle: MyWay.Services.Controle.CONTROLES.isBoolean }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur params.optionnels.parametreActiveX.nbcopiesdef, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametreActiveX.nbcopiesdef) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "nbcopiesdef", value: params.optionnels.parametreActiveX.nbcopiesdef, controle: MyWay.Services.Controle.CONTROLES.isNumber }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur params.optionnels.parametreActiveX.mincop, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametreActiveX.mincop) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "mincop", value: params.optionnels.parametreActiveX.mincop, controle: MyWay.Services.Controle.CONTROLES.isNumber }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur params.optionnels.parametreActiveX.maxcop, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametreActiveX.maxcop) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "maxcop", value: params.optionnels.parametreActiveX.maxcop, controle: MyWay.Services.Controle.CONTROLES.isNumber }
                    ])) !== "") {
                        return erreurParams;
                    }
                }
                return "";
            }
            Impression.controleParametreActiveX = controleParametreActiveX;
            /**
            * Permet de contrôler les paramètres individuels de l'ActiveX
            * @param params {ImpressionParams|GenerationParams} Paramètres pour l'impression et/ou la génération d'un document
            */
            function controleParametreActiveXIndividuels(params) {
                var erreurParams;
                // Contrôle sur params.optionnels.parametresActiveXIndividuels, si ce dernier est renseigné
                if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels) &&
                    Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametresActiveXIndividuels)) {
                    // Contrôle sur params.optionnels.parametresActiveXIndividuels.voir, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametresActiveXIndividuels.voir) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "voir", value: params.optionnels.parametresActiveXIndividuels.voir, controle: MyWay.Services.Controle.CONTROLES.isBoolean }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur params.optionnels.parametresActiveXIndividuels.enregistrer, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametresActiveXIndividuels.enregistrer) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "enregistrer", value: params.optionnels.parametresActiveXIndividuels.enregistrer, controle: MyWay.Services.Controle.CONTROLES.isBoolean }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur params.optionnels.parametresActiveXIndividuels.blocnbex, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametresActiveXIndividuels.blocnbex) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "blocnbex", value: params.optionnels.parametresActiveXIndividuels.enregistrer, controle: MyWay.Services.Controle.CONTROLES.isBoolean }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur params.optionnels.parametresActiveXIndividuels.nbcopiesdef, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametresActiveXIndividuels.nbcopiesdef) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "nbcopiesdef", value: params.optionnels.parametresActiveXIndividuels.nbcopiesdef, controle: MyWay.Services.Controle.CONTROLES.isNumber }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur params.optionnels.parametresActiveXIndividuels.mincop, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametresActiveXIndividuels.mincop) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "mincop", value: params.optionnels.parametresActiveXIndividuels.mincop, controle: MyWay.Services.Controle.CONTROLES.isNumber }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur params.optionnels.parametresActiveXIndividuels.maxcop, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(params.optionnels.parametresActiveXIndividuels.maxcop) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "maxcop", value: params.optionnels.parametresActiveXIndividuels.maxcop, controle: MyWay.Services.Controle.CONTROLES.isNumber }
                    ])) !== "") {
                        return erreurParams;
                    }
                }
                // return controleParametreActiveXGlobaux(params);
                return "";
            }
            Impression.controleParametreActiveXIndividuels = controleParametreActiveXIndividuels;
            /**
            * Permet de contrôler les paramètres globaux de l'Active
            * @param params {ImpressionParams|GenerationParams|ParametresActiveXGlobaux} Paramètres pour l'impression ou la génération d'un document ou paramètres globaux pour l'ActiveX
            */
            function controleParametreActiveXGlobaux(parametresActiveXGlobaux) {
                var erreurParams;
                // Contrôle sur parametresActiveXGlobaux, si ce dernier est renseigné
                if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(parametresActiveXGlobaux)) {
                    // Contrôle sur parametresActiveXGlobaux.annul, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(parametresActiveXGlobaux.annul) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "annul", value: parametresActiveXGlobaux.annul, controle: MyWay.Services.Controle.CONTROLES.isBoolean }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur parametresActiveXGlobaux.impdef, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(parametresActiveXGlobaux.impdef) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "impdef", value: parametresActiveXGlobaux.impdef, controle: MyWay.Services.Controle.CONTROLES.isBoolean }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur parametresActiveXGlobaux.affred, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(parametresActiveXGlobaux.affred) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "affred", value: parametresActiveXGlobaux.affred, controle: MyWay.Services.Controle.CONTROLES.isBoolean }
                    ])) !== "") {
                        return erreurParams;
                    }
                    // Contrôle sur parametresActiveXGlobaux.reimp, si ce dernier est renseigné
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(parametresActiveXGlobaux.reimp) && (erreurParams = Services.Controle.StaticParametresControle.checkParameters([
                        { name: "reimp", value: parametresActiveXGlobaux.reimp, controle: MyWay.Services.Controle.CONTROLES.isBoolean }
                    ])) !== "") {
                        return erreurParams;
                    }
                }
                return "";
            }
            Impression.controleParametreActiveXGlobaux = controleParametreActiveXGlobaux;
        })(Impression = Services.Impression || (Services.Impression = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des impressions
* @module MyWay.Services.Impression
* classe : ImpressionAgent - public - Classe permettant la gestion impressions
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Impression;
        (function (Impression) {
            /**
            * Classe permettant la gestion des impressions
            * @classe ImpressionAgent
            * @methode generer – public - Permet de lancer la génération d'un document d'impression
            * @methode imprimer – public - Permet de lancer une impression
            * @methode imprimerLot - public - Permet de lancer une impression de document par lot
            * @methode genererImprimer – public - Permet de lancer la génération et l'impression d'un document
            * @methode imprimerEcran – public - Permet de lancer l'impression du navigateur
            */
            var ImpressionAgent = /** @class */ (function (_super) {
                __extends(ImpressionAgent, _super);
                /**
                * Constructeur de la classe ImpressionAgent
                */
                function ImpressionAgent() {
                    return _super.call(this, Services.Components.ComponentType.Impression) || this;
                }
                /**
                * Permet de lancer la génération d'un document d'impression
                * @param data {any} Données à envoyer pour la génération du document d'impression
                * @param generationParams {GenerationParams} Paramètres de génération du document d'impression
                * @return {IPromesse<any>} Renvoie une promesse MyWay
                *
                * ~~~ts
                * var myDocument: Editique.Tests.DocFicheConcours.DocFicheConcours = Editique.Tests.DocFicheConcours.createDocument();
                * var documentGenerationParams: MyWay.Services.Impression.GenerationParams = new Editique.Tests.DocFicheConcours.DocFicheConcoursGenerationParam();
                *
                * serviceAgent.Impression.generer(myDocument, documentGenerationParams)
                *   .then(function (documentGenere: MyWay.Services.Impression.DocumentGenere) {
                *   // Génération OK
                * })
                *   .catch(function (erreur: MyWay.Services.Erreur) {
                *   // Génération KO: traitement de l'erreur
                * });
                * ~~~
                */
                ImpressionAgent.prototype.generer = function (data, generationParams) {
                    return this.sendMessage(Impression.Messages.ImpressionMessageSubject.Generer, {
                        data: data,
                        generationParams: generationParams
                    });
                };
                /**
                * Permet de lancer une impression d'un document
                * @param data {any} Données à envoyer pour l’impression.
                * Si c’est le flux XML et non le PDF qui est passé en paramètre alors le paramètre optionnel parametresGenerationFichier doit obligatoirement être renseigné.
                * @param impressionParams {ImpressionParams} Paramètres d'impression du document
                * @return {IPromesse<any>} Renvoie une promesse MyWay
                *
                * ~~~ts
                * // Impression avec un PDF
                * serviceAgent.Impression.imprimer(myPdf, documentImpressionParams)
                *    .then(function () {
                *       // Impression OK
                *    })
                *    .catch(function (erreur: MyWay.Services.Erreur) {
                * // Impression KO: traitement de l'erreur
                * });
                * // Impression avec un flux XML
                * serviceAgent.Impression.imprimer(myFluxXML, documentImpressionParams)
                *    .then(function () {
                *       // Impression OK
                *    })
                *    .catch(function (erreur: MyWay.Services.Erreur) {
                *      // Impression KO: traitement de l'erreur
                *    });
                * ~~~
                */
                ImpressionAgent.prototype.imprimer = function (data, impressionParams) {
                    return this.sendMessage(Impression.Messages.ImpressionMessageSubject.Imprimer, {
                        data: data,
                        impressionParams: impressionParams
                    });
                };
                /**
                * Permet de lancer une impression de document par lot
                * @param data {DocumentImpressionLot[]} Lot de documents à envoyer pour l'impression (uniquement PDF, avec possibilité de les récupérer en GED)
                * @param parametresActiveXGlobaux {ParametresActiveXGlobaux} Paramètres globaux de l'ActiveX d'impression
                * @return {IPromesse<any>} Renvoie une promesse MyWay
                *
                * ~~~ts
                * var data: DocumentImpressionLot[] = [{
                *   numeroOrdre: 0,
                *   idGed: 'ce39fe6d-6e37-4a50-a44e-4222319ff222',
                *   composantApplicatif: 'DOCENTPR',
                *   codeEtablissement: '17515',
                *   impressionParams: {obligatoires: {nomFichier: 'TestGED.pdf'}, optionnels: {parametresActiveXIndividuels: {enregistrer: true,voir: true,nbcopiesdef: 2}}}
                * },{
                *   numeroOrdre: 1,
                *   fichier: 'UN FICHIER EN BASE 64'
                *   impressionParams: {
                *   obligatoires: { nomFichier: 'TestFichier.pdf'},
                *   optionnels: {parametresActiveXIndividuels: {enregistrer: false, voir: true, nbcopiesdef: 1, mincop: 1, maxcop: 2}}}
                * }];
                *
                * var parametresActiveXGlobaux: ParametresActiveXGlobaux = {annul: true, reimp: true, impedef: false};
                *
                * serviceAgent.Impression.imprimerLot(data, parametresActiveXGlobaux)
                *   .then(function () {
                *       // Impression OK
                *   })
                *   .catch(function (erreur: MyWay.Services.Erreur) {
                *        // Impression KO: traitement de l'erreur
                *   });
                * ~~~
                */
                ImpressionAgent.prototype.imprimerLot = function (data, parametresActiveXGlobaux) {
                    return this.sendMessage(Impression.Messages.ImpressionMessageSubject.ImprimerLot, {
                        data: data,
                        parametresActiveXGlobaux: parametresActiveXGlobaux
                    });
                };
                /**
                * Permet de lancer la génération et l'impression d'un document
                * @param data {any} Données à envoyer pour la génération et l'impression d'un document
                * @param generationImpressionParams {GenerationImpressionParams} Paramètres de génération et d'impression d'un document
                * @return {IPromesse<any>} Renvoie une promesse MyWay
                * ~~~ts
                * var myDocument: Editique.Tests.DocFicheConcours.DocFicheConcours = Editique.Tests.DocFicheConcours.createDocument();
                * var documentGenerationImpressionParams: MyWay.Services.Impression.GenerationImpressionParams = new Editique.Tests.DocFicheConcours.DocFicheConcoursGenerationImpressionParam();
                *
                * serviceAgent.Impression.genererImprimer(myDocument, documentGenerationImpressionParams)
                *   .then(function (documentGenere: MyWay.Services.Impression.DocumentGenere) {
                *       // Génération OK
                *   })
                *   .catch(function (erreur: MyWay.Services.Erreur) {
                *       // Génération KO: traitement de l'erreur
                * });
                * ~~~
                */
                ImpressionAgent.prototype.genererImprimer = function (data, generationImpressionParams) {
                    return this.sendMessage(Impression.Messages.ImpressionMessageSubject.GenererImprimer, {
                        data: data,
                        generationImpressionParams: generationImpressionParams
                    });
                };
                /**
                 * Permet de récupérer le json converti
                 *
                 * @param data {any} Données à envoyer pour la génération du document d'impression
                 * @return {IPromesse<string>} Le json converti
                 */
                ImpressionAgent.prototype.getJsonConverti = function (data) {
                    return this.sendMessage(Impression.Messages.ImpressionMessageSubject.GetJsonConverti, {
                        data: data
                    });
                };
                /**
                * Permet de lancer l'impression du navigateur
                * @return L'imprime écran
                */
                ImpressionAgent.prototype.imprimerEcran = function () {
                    return window.print();
                };
                return ImpressionAgent;
            }(Services.Components.ComponentAgentBase));
            Impression.ImpressionAgent = ImpressionAgent;
            Services.Components.RegistryAgent.getInstance().register(ImpressionAgent);
        })(Impression = Services.Impression || (Services.Impression = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des données délocalisées
* @module MyWay.Services.DonneesDelocalisees
* classe : DonneesDelocaliseesAgent - public - Classe permettant la gestion des données délocalisées
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var DonneesDelocalisees;
        (function (DonneesDelocalisees) {
            /**
            * Classe permettant la gestion des données délocalisées
            * @classe DonneesDelocaliseesAgent
            * fonction : getDonneesDelocalisees – public - Permet de récupérer des données délocalisées
            * fonction : getRubriqueLibelle - public - Permet de récupérer le libellé du code d'une rubrique
            */
            var DonneesDelocaliseesAgent = /** @class */ (function (_super) {
                __extends(DonneesDelocaliseesAgent, _super);
                /**
                * Constructeur de la classe DonneesDelocaliseesAgent
                */
                function DonneesDelocaliseesAgent() {
                    return _super.call(this, Services.Components.ComponentType.DonneesDelocalisees) || this;
                }
                /**
                * Permet de récupérer un objet de données (rubrique ou table délocalisée) pour l'établissement spécifié.
                * @param numEtablissement {string} identifiant de la Table des tables (numéro d'établissement). Si null, c'est celui du contexte qui est utilisé (via GetAuthentificationInfo).
                * @param objectDataName {string} Nom de l'objet de données à récupérer.
                * @return {IPromesse<any>}
                * Le then est exécuté dans le cas où l'objet de données a bien été récupéré.
                * Il est également exécuté dans le cas où l'objet de données n'a pas pu être récupéré mais qu'il est possible et permis (paramètrage en central) d'utiliser une ancienne version de celui-ci (une trace d'avertissement est alors automatiquement envoyée).
                *
                * ~~~ts
                * // Récupération de la rubrique délocalisée "COLIDV" pour l'établissement 13135
                * serviceAgent.DonneesDelocalisees.getDonneesDelocalisees("13135", "COLIDV")
                *   .then(function (objectData) {
                *       // Traitement
                *   })
                *   .catch(function (erreur: MyWay.Services.Erreur) {
                *       // Traitement en cas d'erreur
                *   });
                *   // Récupération de la table délocalisée "CARTE" pour l'établissement enregistré dans le contexte
                * serviceAgent.DonneesDelocalisees.getDonneesDelocalisees(null, "CARTE")
                *   .then(function (objectData) {
                *       // Traitement
                *   })
                *   .catch(function (erreur: MyWay.Services.Erreur) {
                *       // Traitement en cas d'erreur
                *   });
                * ~~~
                */
                DonneesDelocaliseesAgent.prototype.getDonneesDelocalisees = function (numEtablissement, objectDataName) {
                    return this.sendMessage(DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.GetDonneesDelocalisees, {
                        numEtablissement: numEtablissement,
                        objectDataName: objectDataName
                    });
                };
                /**
                * Permet de récupérer une liste de données délocalisées (rubriques ou tables délocalisées) pour l'établissement spécifié.
                * @param numEtablissement {string} Numéro d'établissement. Si null, c'est celui du contexte qui est utilisé (via GetAuthentificationInfo).
                * @param objectDataNames {Array<string>} Liste des noms d'objets de données à récupérer.
                * @return {IPromesse<any>}
                * Le then est exécuté dans le cas où l'objet de données a bien été récupéré.
                * Il est également exécuté dans le cas où l'objet de données n'a pas pu être récupéré mais qu'il est possible et permis (paramètrage en central) d'utiliser une ancienne version de celui-ci (une trace d'avertissement est alors automatiquement envoyée).
                *
                * ~~~ts
                * // Récupération de la rubrique délocalisée "COLIDV" et de la table délocalisée "CARTE" pour l'établissement 13135
                * serviceAgent.DonneesDelocalisees.getListeDonneesDelocalisees("13135", ["COLIDV","CARTE"])
                *   .then(function (objectsData: any[]) {
                *       // Traitement
                *   })
                *   .catch(function (erreur: MyWay.Services.Erreur) {
                *       // Traitement en cas d'erreur
                *   });
                *
                * // Récupération de la rubrique délocalisée "COLIDV"  et de la table délocalisée "CARTE" pour l'établissement enregistré dans le contexte
                * serviceAgent.DonneesDelocalisees.getListeDonneesDelocalisees(null, ["COLIDV","CARTE"])
                *   .then(function (objectsData: any[]) {
                *       // Traitement
                *   })
                *   .catch(function (erreur: MyWay.Services.Erreur) {
                *       // Traitement en cas d'erreur
                *   });
                * ~~~
                */
                DonneesDelocaliseesAgent.prototype.getListeDonneesDelocalisees = function (numEtablissement, objectDataNames) {
                    return this.sendMessage(DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.GetListeDonneesDelocalisees, {
                        numEtablissement: numEtablissement,
                        objectDataNames: objectDataNames
                    });
                };
                /**
                * Permet de récupérer le libellé du code d'un objet de données
                * @param numEtablissement {string} identifiant de la Table des tables (numéro d'établissement). Si null, c'est la valeur du contexte qui est utilisée (via GetAuthentificationInfo).
                * @param objectDataName {string} nom de l'objet de données à récupérer.
                * @param code {string} code pour lequel on veut obtenir le libellé
                * @return {IPromesse<string>}
                *
                * ~~~ts
                * serviceAgent.DonneesDelocalisees.getRubriqueLibelle("18715", "LIDACT", "5")
                *   .then(function (rubriqueLibelle: string) {
                *       // Traitement
                *   })
                *   .catch(function (erreur: MyWay.Services.Erreur) {
                *       // Traitement en cas d'erreur
                *   });
                * ~~~
                */
                DonneesDelocaliseesAgent.prototype.getRubriqueLibelle = function (numEtablissement, objectDataName, code) {
                    return this.sendMessage(DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.GetRubriqueLibelle, {
                        numEtablissement: numEtablissement,
                        objectDataName: objectDataName,
                        code: code
                    });
                };
                /**
                * Permet de récupérer les données d'un objet de données correspondant aux critères choisis
                * @param numEtablissement {string} identifiant de la Table des tables (numéro d'établissement). Si null, c'est la valeur du contexte qui est utilisée (via GetAuthentificationInfo).
                * @param objectDataName {string} nom de l'objet de données à récupérer.
                * @param criteres {Array<ObjectDataCritere>} critères de recherche des données
                * @return {IPromesse<any>}
                *
                * ~~~ts
                * // Ce filtre retournera les données qui correspondent aux 2 critères suivant : le critère "CODMPR" doit être égal à "K006" ET le critère "LLKTCT" doit contenir la valeur "NATIONAL"
                * var filtres = [{
                *   critere: "CODMPR", valeur: "K006", operateur: MyWay.Services.DonneesDelocalisees.CRITERES_OPERATEUR.EGAL
                * }, {
                *   critere: "LLKTCT", valeur: "NATIONAL", operateur: MyWay.Services.DonneesDelocalisees.CRITERES_OPERATEUR.CONTIENT
                * }]
                *
                * serviceAgent.DonneesDelocalisees.getDonneesParCriteres("13135", "CARTES", filtres)
                *   .then(function (objectData) {
                *       // Traitement
                *   })
                *   .catch(function (erreur: MyWay.Services.Erreur) {
                *       // Traitement en cas d'erreur
                *   });
                * ~~~
                */
                DonneesDelocaliseesAgent.prototype.getDonneesParCriteres = function (numEtablissement, objectDataName, criteres) {
                    return this.sendMessage(DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.GetDonneesParCriteres, {
                        numEtablissement: numEtablissement,
                        objectDataName: objectDataName,
                        criteres: criteres
                    });
                };
                return DonneesDelocaliseesAgent;
            }(Services.Components.ComponentAgentBase));
            DonneesDelocalisees.DonneesDelocaliseesAgent = DonneesDelocaliseesAgent;
            Services.Components.RegistryAgent.getInstance().register(DonneesDelocaliseesAgent);
        })(DonneesDelocalisees = Services.DonneesDelocalisees || (Services.DonneesDelocalisees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        /**
         * @ngdoc method
         * @name getDonneesDelocalisees
         * @methodOf moduleAgent.serviceAgentExtended
         * @description
         * Permet de récupérer un objet de données (rubrique ou table délocalisée) pour l'établissement de l'utilisateur connecté.
         *  L'opération est asynchrone et renvoie donc une promise.
         * @param {string} numEtablissement Numéro d'établissement.
         * @param {string} objectDataName Nom de l'objet de données à récupérer.
         * @returns {Object} Promise contenant l'objet de données wrappé (dans la propriété donnees).
         */
        Services.ServiceAgentExtended.prototype.getDonneesDelocalisees = function (numEtablissement, objectDataName) {
            try {
                var deferred = this.$q.defer();
                this.DonneesDelocalisees.getDonneesDelocalisees(numEtablissement, objectDataName).then(function (result) {
                    deferred.resolve(result);
                }, function (error) {
                    deferred.reject(error);
                });
                return deferred.promise;
            }
            catch (error) {
                throw new Error("context pas initialise !");
            }
        };
        /**
         * @ngdoc method
         * @name getListDonneesDelocalisees
         * @methodOf moduleAgent.serviceAgentExtended
         * @description
         * Permet de récupérer une liste de données (rubrique ou table délocalisée) pour l'établissement de l'utilisateur connecté.
         * Les objets instanciés sont fortement typés à partir du type fourni. L'opération est asynchrone et renvoie donc une promise.
         * @param {string} objectDataName Nom de l'objet de données à récupérer.
         * @param {string=} resultType Type explicite de l'objet à renvoyer. Ce paramètre permet d'instancier un objet de type classe.
         *  Le constructeur est appelé avec l'objet de données en entrée.
         * @returns {Object} Promise contenant l'objet de données wrappé (dans la propriété donnees).
         */
        Services.ServiceAgentExtended.prototype.getListDonneesDelocalisees = function (objectDataName, resultType) {
            var _this = this;
            try {
                var deferred = this.$q.defer();
                this.getAuthentificationInfo().then(function (info) {
                    _this.DonneesDelocalisees.getDonneesDelocalisees(info.codeEtablissement, objectDataName)
                        .then(function (objectData) {
                        var result = [];
                        if (resultType && (objectData.donnees !== undefined)) {
                            objectData.donnees.forEach(function (data) {
                                result.push(_this.instanceLoaderService.createInstance(resultType, data));
                            });
                        }
                        else {
                            result = objectData.donnees;
                        }
                        deferred.resolve(result);
                    }, function (error) {
                        deferred.reject(error);
                    });
                });
                return deferred.promise;
            }
            catch (error) {
                throw new Error("utilisateur pas authentifie ou service local pas demarre !");
            }
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var DonneesDelocalisees;
        (function (DonneesDelocalisees) {
            var DonneesDelocaliseesApi = /** @class */ (function (_super) {
                __extends(DonneesDelocaliseesApi, _super);
                function DonneesDelocaliseesApi() {
                    return _super.call(this, Services.Components.ComponentType.DonneesDelocalisees) || this;
                }
                DonneesDelocaliseesApi.prototype.getDistantObjectData = function (settings) {
                    return this.sendRequest(settings);
                };
                DonneesDelocaliseesApi.prototype.getDistantTDT = function (settings) {
                    return this.sendRequest(settings);
                };
                DonneesDelocaliseesApi.prototype.getTDTById = function (settings) {
                    return this.sendRequest(settings);
                };
                DonneesDelocaliseesApi.prototype.sendRequest = function (settings) {
                    //settings.cache = true; 
                    return this.libraryManager.Core.sendRequest(settings);
                };
                return DonneesDelocaliseesApi;
            }(Services.Components.ComponentApiBase));
            DonneesDelocalisees.DonneesDelocaliseesApi = DonneesDelocaliseesApi;
            Services.Components.RegistryApi.getInstance().register(DonneesDelocaliseesApi);
        })(DonneesDelocalisees = Services.DonneesDelocalisees || (Services.DonneesDelocalisees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Capacites;
        (function (Capacites) {
            var CapacitesAgent = /** @class */ (function (_super) {
                __extends(CapacitesAgent, _super);
                /**
                * Constructeur de la classe CapacitesAgent
                * @param agentLibrary {AgentLibrary}
                * @param errorCallback {ErreurCallback}
                */
                function CapacitesAgent() {
                    return _super.call(this, Services.Components.ComponentType.Capacites) || this;
                }
                CapacitesAgent.prototype.getCapacite = function (regle) {
                    return this.sendMessage(Capacites.Messages.CapacitesMessageSubject.GetCapacite, {
                        regle: regle
                    });
                };
                return CapacitesAgent;
            }(Services.Components.ComponentAgentBase));
            Capacites.CapacitesAgent = CapacitesAgent;
            Services.Components.RegistryAgent.getInstance().register(CapacitesAgent);
        })(Capacites = Services.Capacites || (Services.Capacites = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Numerisation"] = "Numerisation";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Numerisation;
        (function (Numerisation) {
            var NumerisationMessageSubject;
            (function (NumerisationMessageSubject) {
                NumerisationMessageSubject[NumerisationMessageSubject["Numeriser"] = 0] = "Numeriser";
                NumerisationMessageSubject[NumerisationMessageSubject["GetSpiFactoryActivationStatut"] = 1] = "GetSpiFactoryActivationStatut";
                NumerisationMessageSubject[NumerisationMessageSubject["NumeriserArcade"] = 2] = "NumeriserArcade";
            })(NumerisationMessageSubject = Numerisation.NumerisationMessageSubject || (Numerisation.NumerisationMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Numerisation, [
                Services.Components.ComponentType.Context,
                Services.Components.ComponentType.Core,
                Services.Components.ComponentType.Display,
                Services.Components.ComponentType.DonneesDelocalisees,
                Services.Components.ComponentType.Libelle
            ]);
        })(Numerisation = Services.Numerisation || (Services.Numerisation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Habilitation"] = "Habilitation";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Acquisition
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Habilitation;
        (function (Habilitation) {
            var HabilitationMessageSubject;
            (function (HabilitationMessageSubject) {
                HabilitationMessageSubject[HabilitationMessageSubject["EstHabilite"] = 0] = "EstHabilite";
                HabilitationMessageSubject[HabilitationMessageSubject["ChargerHabilitations"] = 1] = "ChargerHabilitations";
                HabilitationMessageSubject[HabilitationMessageSubject["ObtenirHabilitations"] = 2] = "ObtenirHabilitations";
                HabilitationMessageSubject[HabilitationMessageSubject["ObtenirHabilitation"] = 3] = "ObtenirHabilitation";
                HabilitationMessageSubject[HabilitationMessageSubject["ModifierHabilitation"] = 4] = "ModifierHabilitation";
            })(HabilitationMessageSubject = Habilitation.HabilitationMessageSubject || (Habilitation.HabilitationMessageSubject = {}));
            //Enregistrement du composant et de ses dépendances
            Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Habilitation, [
                Services.Components.ComponentType.Capacites,
                Services.Components.ComponentType.Context,
                Services.Components.ComponentType.Core
            ]);
        })(Habilitation = Services.Habilitation || (Services.Habilitation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion technique des habilitations
*
* @module MyWay.Services.Habilitation
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Habilitation;
        (function (Habilitation) {
            var DOMAIN;
            (function (DOMAIN) {
                DOMAIN[DOMAIN["MYSYS"] = "mysys"] = "MYSYS";
                DOMAIN[DOMAIN["IAM"] = "iam"] = "IAM";
                DOMAIN[DOMAIN["CULTURENET"] = "cultureNet"] = "CULTURENET";
            })(DOMAIN = Habilitation.DOMAIN || (Habilitation.DOMAIN = {}));
            /**
             * Modèle d'une habilitation
             */
            var HabilitationModel = /** @class */ (function () {
                function HabilitationModel(_code, _valeur) {
                    this[_code] = _valeur;
                }
                return HabilitationModel;
            }());
            Habilitation.HabilitationModel = HabilitationModel;
            var EHabilitationType;
            (function (EHabilitationType) {
                EHabilitationType[EHabilitationType["MYSYS"] = 0] = "MYSYS";
                EHabilitationType[EHabilitationType["IAM"] = 1] = "IAM";
                EHabilitationType[EHabilitationType["CULTURENET"] = 2] = "CULTURENET";
            })(EHabilitationType = Habilitation.EHabilitationType || (Habilitation.EHabilitationType = {}));
        })(Habilitation = Services.Habilitation || (Services.Habilitation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Export;
        (function (Export) {
            var ExportManagerMessage = /** @class */ (function (_super) {
                __extends(ExportManagerMessage, _super);
                function ExportManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Export) || this;
                }
                ExportManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Export.ExportMessageSubject.ExporterFichier: {
                            var lContent = pMessage.message;
                            var lDonnees = lContent.donnees;
                            var lFormat = lContent.format;
                            var lOptions = lContent.options;
                            return this.managerInstance.exporterFichier(lDonnees, lFormat, lOptions);
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                ExportManagerMessage.CLASS_NAME = 'MyWay.Services.Export.ExportManagerMessage';
                ExportManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ExportManagerMessage.CLASS_NAME);
                return ExportManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Export.ExportManagerMessage = ExportManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(ExportManagerMessage);
        })(Export = Services.Export || (Services.Export = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraceSuivi;
        (function (TraceSuivi) {
            var TraceSuiviApiBase = /** @class */ (function (_super) {
                __extends(TraceSuiviApiBase, _super);
                function TraceSuiviApiBase() {
                    var _this = _super.call(this, Services.Components.ComponentType.TraceSuivi) || this;
                    _this._isSiris = null;
                    return _this;
                }
                TraceSuiviApiBase.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    this._url = Services.PrivatePortalServiceParameters.Instance().TraceSuiviUrl;
                    this._isSiris = pCapabilities.SIRIS;
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer);
                };
                // Envoi des traces au service
                TraceSuiviApiBase.prototype.envoyerTracesSuivi = function (traces, pAuthentificationInfo) {
                    if (traces.length != 0) {
                        // Paramétrage
                        var settings = {
                            method: Services.MethodEnum.POST,
                            url: this._url,
                            async: true,
                            contentType: Services.ContentTypeEnum.JSON,
                            data: traces,
                            withHeaders: true,
                            authentificationInfo: pAuthentificationInfo
                        };
                        // Appel du service
                        return this.libraryManager.Core.sendRequest(settings);
                    }
                    else {
                        return this.libraryManager.Core.getPromesseSelfResoved();
                    }
                };
                TraceSuiviApiBase.prototype.isSiris = function () {
                    return this._isSiris;
                };
                return TraceSuiviApiBase;
            }(Services.Components.ComponentApiBase));
            TraceSuivi.TraceSuiviApiBase = TraceSuiviApiBase;
            Services.Components.RegistryApi.getInstance().register(TraceSuiviApiBase);
        })(TraceSuivi = Services.TraceSuivi || (Services.TraceSuivi = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des traces coté agent.
* @class TraceAgent : initialise l'agent de trace
* @class Logger : Permet de tracer coté manager
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraceSuivi;
        (function (TraceSuivi) {
            var TraceSuiviAgent = /** @class */ (function (_super) {
                __extends(TraceSuiviAgent, _super);
                /*
                * Appelé par le ServiceAgent
                * @param agentLibrary : services disponibles pour un agent
                * @param errorCallback : gestionnaire d'erreur du serviceAgent
                * @param application : nom de l'application fonctionnelle
                * @param applicationVersion : version de l'application fonctionnelle
                */
                function TraceSuiviAgent() {
                    return _super.call(this, Services.Components.ComponentType.TraceSuivi) || this;
                }
                TraceSuiviAgent.prototype.tracer = function (trace) {
                    return this.sendMessage(TraceSuivi.Messages.TraceSuiviMessageSubject.SendTraceSuivi, {
                        trace: trace
                    });
                };
                return TraceSuiviAgent;
            }(Services.Components.ComponentAgentBase));
            TraceSuivi.TraceSuiviAgent = TraceSuiviAgent;
            Services.Components.RegistryAgent.getInstance().register(TraceSuiviAgent);
        })(TraceSuivi = Services.TraceSuivi || (Services.TraceSuivi = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgentExtended, 'ContexteClientTechAgent', {
            get: function () {
                return this._techLibrary.ContexteClientTechAgent;
            }
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgent, 'ContexteClientTechAgent', {
            get: function () {
                return this._techLibrary.ContexteClientTechAgent;
            }
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.TechLibrary.addInitListener(function (pInstance, library) {
            pInstance.ContexteClientTechAgent = library.ContexteClient;
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ContexteClient;
        (function (ContexteClient) {
            /**
             * Agent technique du contexte client
             */
            var ContexteClientTechAgent = /** @class */ (function (_super) {
                __extends(ContexteClientTechAgent, _super);
                function ContexteClientTechAgent() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * Récupération de l'ensemble des <b>id techniques</b> de tous les contextes clients (même ceux qui ne sont pas attachés à des clients!)
                 * @returns Id technique de chaque contexte client
                 */
                ContexteClientTechAgent.prototype.getContextes = function () {
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.GetContextes).then(function (pResult) {
                        return pResult.idContextes;
                    });
                };
                /**
                 * Destruction d'un contexte client. Chacun de ses processus sera alors détaché immédiatement
                 * @throws Erreur si contexte client inexistant
                 * @param pIdContexteClient Identifiant technique du contexte client à détruire
                 * @returns true si destruction effective, false sinon
                 */
                ContexteClientTechAgent.prototype.detruireContexte = function (pIdContexteClient) {
                    var lParameters = {
                        idContexte: pIdContexteClient,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.DestroyContext, lParameters).then(function (pResult) {
                        return pResult.isDestroy;
                    });
                };
                /**
                 * Création d'un nouveau contexte client. Plusieurs cas sont envisagés vis-a-vis du paramètre pIdClient
                 * <ul>
                 *  <li>Si non fourni alors un nouveau contexte client sans id client sera retourné</li>
                 *  <li>Si fourni et qu'un autre contexte client a déjà cet identifiant client alors aucun nouveau contexte client sera créé et le contexte client trouvé sera retourné</li>
                 *  <li>Si fourni et qu'aucun autre contexte client ne possède déjà cet identifiant client alors un nouveau contexte client attaché à cet identifiant client sera créé et retourné</li>
                 * </ul>
                 * @param pIdClient [OPTIONNEL] Identifiant du client pour le nouveau contexte client
                 * @returns Identifiant technique du nouveau contexte client créé
                 */
                ContexteClientTechAgent.prototype.nouveauContexte = function (pIdClient) {
                    var lParameters = {
                        idClient: pIdClient,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.NewContext, lParameters).then(function (pResult) {
                        return pResult.idContexte;
                    });
                };
                /**
                 * Change le contexte client d'un processus. Passer "null" comme id contexte client pour retirer le processus de tout contexte
                 * @throws Erreur si le processus n'existe pas
                 * @throws Erreur si le contexte client n'existe pas
                 * @param pIdContexteClient Identifiant du contexte client à assigner au processus. Peut être null
                 * @param pCodeProcessus Code du processus à assigner au contexte client
                 */
                ContexteClientTechAgent.prototype.changerContexteDuProcessus = function (pIdContexteClient, pCodeProcessus) {
                    var lParameters = {
                        idContexte: pIdContexteClient,
                        codeProcessus: pCodeProcessus,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.ChangeContextProcess, lParameters);
                };
                /**
                 * Changer le mode de fonctionnement du contexte client. Attention RAPPEL : En mode automatique le contexte client se supprime de lui-même s'il n'est associé à aucun processus
                 * @throws Erreur si le processus n'existe pas
                 * @param pIdContexteClient Identifiant du contexte client à assigner au processus
                 * @param pMode Nouveau mode du contexte client
                 */
                ContexteClientTechAgent.prototype.changerModeContexteClient = function (pIdContexteClient, pMode) {
                    var lParameters = {
                        idContexte: pIdContexteClient,
                        mode: pMode
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.ChangeContextMode, lParameters);
                };
                /**
                 * Récupérer tous les détails d'un contexte
                 * @throws Erreur si le processus n'existe pas
                 * @param pIdContexteClient Identifiant du contexte client à traiter
                 * @returns Renvois tous les détails du processus demandé
                 */
                ContexteClientTechAgent.prototype.getDetailsContexte = function (pIdContexteClient) {
                    var lParameters = {
                        idContexte: pIdContexteClient
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.DetailsContext, lParameters);
                };
                /**
                 * Modification de l'identifiant client d'un contexte spécifique
                 * @throws Erreur si le contexte client n'existe pas
                 * @throws Erreur si code client non valide
                 * @throws Erreur si le contexte client a déjà un code client
                 * @param pIdContexteClient Identifiant du contexte client à traiter
                 * @param pClient Code du client à assigner au contexte client
                 */
                ContexteClientTechAgent.prototype.setClientOfContexteSpecifique = function (pIdContexteClient, pClient) {
                    var lParameters = {
                        idContexteClient: pIdContexteClient,
                        client: pClient,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.SetClient, lParameters);
                };
                /**
                 * Lis une donnée d'un contexte spécifique
                 * @throws Erreur si le contexte client n'existe pas
                 * @param pIdContexteClient Identifiant du contexte client à traiter
                 * @param pCle Clé à récupérer
                 * @returns Valeur cherchée
                 */
                ContexteClientTechAgent.prototype.getPropertyOfContexteSpecifique = function (pIdContexteClient, pCle) {
                    var lParameters = {
                        idContexteClient: pIdContexteClient,
                        cle: pCle
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.GetProperty, lParameters).then(function (pResult) {
                        return pResult.valeur;
                    });
                };
                /**
                 * Ajoute une donnée dans un tableau d'un contexte spécifique
                 * @throws Erreur si le contexte client n'existe pas
                 * @param pIdContexteClient Identifiant du contexte client à traiter
                 * @param pCle Clé à modifier
                 * @param pValeur Valeur à ajouter
                 * @returns true si valeur ajoutée, false sinon
                 */
                ContexteClientTechAgent.prototype.addToListOfContexteSpecifique = function (pIdContexteClient, pCle, pValeur) {
                    var lParameters = {
                        idContexteClient: pIdContexteClient,
                        cle: pCle,
                        valeur: pValeur,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.AddToList, lParameters).then(function (pResult) {
                        return pResult.estOk;
                    });
                };
                /**
                 * Fixe une donnée dans un objet d'un contexte spécifique
                 * @throws Erreur si le contexte client n'existe pas
                 * @param pIdContexteClient Identifiant du contexte client à traiter
                 * @param pCle Clé à modifier
                 * @param pValeur Valeur à placer
                 * @returns true si valeur modifiée, false sinon
                 */
                ContexteClientTechAgent.prototype.setPropertyOfContexteSpecifique = function (pIdContexteClient, pCle, pValeur) {
                    var lParameters = {
                        idContexteClient: pIdContexteClient,
                        cle: pCle,
                        valeur: pValeur,
                        expediteur: 'tech-agent'
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.SetProperty, lParameters).then(function (pResult) {
                        return pResult.estOk;
                    });
                };
                /**
                 * Supprime une donnée d'un tableau d'un contexte spécifique
                 * @throws Erreur si le contexte client n'existe pas
                 * @param pIdContexteClient Identifiant du contexte client à traiter
                 * @param pCle Clé à supprimer
                 * @returns true si valeur supprimée, false sinon
                 */
                ContexteClientTechAgent.prototype.removeFromListOfContexteSpecifique = function (pIdContexteClient, pCle) {
                    var lParameters = {
                        idContexteClient: pIdContexteClient,
                        cle: pCle,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.RemoveFromList, lParameters).then(function (pResult) {
                        return pResult.estOk;
                    });
                };
                /**
                 * Supprime une donnée d'un objet d'un contexte spécifique
                 * @throws Erreur si le contexte client n'existe pas
                 * @param pIdContexteClient Identifiant du contexte client à traiter
                 * @param pCle Clé à supprimer
                 * @returns true si valeur supprimée, false sinon
                 */
                ContexteClientTechAgent.prototype.deletePropertyOfContexteSpecifique = function (pIdContexteClient, pCle) {
                    var lParameters = {
                        idContexteClient: pIdContexteClient,
                        cle: pCle,
                        expediteur: this.getExpediteur()
                    };
                    return this.sendMessage(ContexteClient.ContextClientMessageSubject.DeleteProperty, lParameters).then(function (pResult) {
                        return pResult.estOk;
                    });
                };
                return ContexteClientTechAgent;
            }(ContexteClient.ContexteClientAgent));
            ContexteClient.ContexteClientTechAgent = ContexteClientTechAgent;
            Services.Components.RegistryAgent.getInstance().register(ContexteClientTechAgent);
        })(ContexteClient = Services.ContexteClient || (Services.ContexteClient = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgentExtended, 'TraceTechAgent', {
            get: function () {
                return this._techLibrary.TraceTechAgent;
            }
        });
        Services.TechAgentExtended.prototype.purgerTraces = function () {
            return this.Library.Trace.purgeTrace();
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgent, 'TraceTechAgent', {
            get: function () {
                return this._techLibrary.TraceTechAgent;
            }
        });
        Services.TechAgent.prototype.purgerTraces = function () {
            return this.Library.Trace.purgeTrace();
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.TechLibrary.addInitListener(function (pInstance, library) {
            pInstance.TraceTechAgent = library.Trace;
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            var TraceTechAgent = /** @class */ (function (_super) {
                __extends(TraceTechAgent, _super);
                /**
                * Constructeur de la classe TechDonneesDelocaliseesTools
                */
                function TraceTechAgent() {
                    return _super.call(this) || this;
                }
                TraceTechAgent.prototype.getIntervallePurge = function (callback, callbackError) {
                    return this.sendMessage(Trace.Messages.TraceMessageSubject.GetIntervallePurge, {}).then(function (intervallePurge) {
                        if (callback) {
                            callback(intervallePurge);
                        }
                        return intervallePurge;
                    }, callbackError);
                };
                TraceTechAgent.prototype.getQuotaPurge = function (callback, callbackError) {
                    return this.sendMessage(Trace.Messages.TraceMessageSubject.GetQuotaPurge, {}).then(function (quotaPurge) {
                        if (callback) {
                            callback(quotaPurge);
                        }
                        return quotaPurge;
                    }, callbackError);
                };
                /* istanbul ignore next */
                TraceTechAgent.prototype.getEnregistrerTracesDansBD = function (callback, callbackError) {
                    if (callbackError) {
                        callbackError(new Services.Erreur("Not implemented"));
                    }
                    return this.library.Core.createPromiseSelfError(new Services.Erreur("Not implemented"));
                    //this._messageService.SendMessage("Trace", "getEnregistrerTracesDansBD", {}, callback, callbackError);
                };
                /* istanbul ignore next */
                TraceTechAgent.prototype.setNiveauMinimumTraceConsole = function (niveauMinimumTraceConsole, callback, callbackError) {
                    if (callbackError) {
                        callbackError(new Services.Erreur("Not implemented"));
                    }
                    return this.library.Core.createPromiseSelfError(new Services.Erreur("Not implemented"));
                    //this._messageService.SendMessage("Trace", "setNiveauMinimumTraceConsole", { niveauMinimumTraceConsole: niveauMinimumTraceConsole }, callback, callbackError);
                };
                /* istanbul ignore next */
                TraceTechAgent.prototype.getNiveauMinimumTraceConsole = function (callback, callbackError) {
                    if (callbackError) {
                        callbackError(new Services.Erreur("Not implemented"));
                    }
                    return this.library.Core.createPromiseSelfError(new Services.Erreur("Not implemented"));
                    //this._messageService.SendMessage("Trace", "getNiveauMinimumTraceConsole", {}, callback, callbackError);
                };
                /* istanbul ignore next */
                TraceTechAgent.prototype.setNiveauMinimumTraceBD = function (niveauMinimumTraceBD, callback, callbackError) {
                    if (callbackError) {
                        callbackError(new Services.Erreur("Not implemented"));
                    }
                    return this.library.Core.createPromiseSelfError(new Services.Erreur("Not implemented"));
                    //this._messageService.SendMessage("Trace", "setNiveauMinimumTraceBD", { niveauMinimumTraceBD: niveauMinimumTraceBD }, callback, callbackError);
                };
                /* istanbul ignore next */
                TraceTechAgent.prototype.getNiveauMinimumTraceBD = function (callback, callbackError) {
                    if (callbackError) {
                        callbackError(new Services.Erreur("Not implemented"));
                    }
                    return this.library.Core.createPromiseSelfError(new Services.Erreur("Not implemented"));
                    //this._messageService.SendMessage("Trace", "getNiveauMinimumTraceBD", {}, callback, callbackError);
                };
                /* istanbul ignore next */
                TraceTechAgent.prototype.getAfficherTracesDansConsole = function (callback, callbackError) {
                    if (callbackError) {
                        callbackError(new Services.Erreur("Not implemented"));
                    }
                    return this.library.Core.createPromiseSelfError(new Services.Erreur("Not implemented"));
                    //this._messageService.SendMessage("TraceAdmin", "getAfficherTracesDansConsole", {}, callback, callbackError);
                };
                TraceTechAgent.prototype.reInitDbTraces = function (callback, callbackError) {
                    return this.sendMessage(Trace.Messages.TraceMessageSubject.ReInitDbTraces, {}).then(function () {
                        if (callback) {
                            callback();
                        }
                    }, callbackError);
                };
                /* istanbul ignore next */
                TraceTechAgent.prototype.addOldTraces = function (nbJours, callback, callbackError) {
                    if (callbackError) {
                        callbackError(new Services.Erreur("Not implemented"));
                    }
                    return this.library.Core.createPromiseSelfError(new Services.Erreur("Not implemented"));
                    //this._messageService.SendMessage("TraceAdmin", "addOldTraces", { nbJours: nbJours }, callback, callbackError);
                };
                TraceTechAgent.prototype.purgeTrace = function (dbRecordLimitInDays, callback, callbackError) {
                    return this.sendMessage(Trace.Messages.TraceMessageSubject.PurgerTraces, {}).then(function () {
                        if (callback) {
                            callback();
                        }
                    }, callbackError);
                };
                /* istanbul ignore next */
                TraceTechAgent.prototype.getTracesByLevel = function (niveau, callback, callbackError) {
                    if (callbackError) {
                        callbackError(new Services.Erreur("Not implemented"));
                    }
                    return this.library.Core.createPromiseSelfError(new Services.Erreur("Not implemented"));
                    //this._messageService.SendMessage("TraceAdmin", "getTracesByLevel", { niveau: niveau }, callback, callbackError);
                };
                //TODO : Retourne un tableau de traces qui n'est jamais rempli
                TraceTechAgent.prototype.setModeDebug = function (active, callback, callbackError) {
                    return this.sendMessage(Trace.Messages.TraceMessageSubject.SetModeDebug, { active: active }).then(function () {
                        if (callback) {
                            callback([]);
                        }
                        return [];
                    }, callbackError);
                };
                return TraceTechAgent;
            }(Trace.TraceAgent));
            Trace.TraceTechAgent = TraceTechAgent;
            Services.Components.RegistryAgent.getInstance().register(TraceTechAgent);
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Aide;
        (function (Aide) {
            /**
            * Classe permettant la gestion de l'aide
            */
            var AideAgent = /** @class */ (function (_super) {
                __extends(AideAgent, _super);
                function AideAgent() {
                    return _super.call(this, Services.Components.ComponentType.Aide) || this;
                }
                AideAgent.prototype.GetContenuInfobulle = function (idChamp, utilisationHorsProcessus, codeProcessusVoulu, codeEtapeVoulu) {
                    return this.sendMessage(Aide.Messages.AideMessageSubject.GetContenuInfobulle, {
                        idChampLie: idChamp,
                        horsProcessus: utilisationHorsProcessus,
                        codeProcessus: codeProcessusVoulu,
                        codeEtape: codeEtapeVoulu
                    }).then(function (resultatSansMethode) {
                        var resultatEnrichiMethodes = new Aide.DetailInfobulleAfficheeResult(resultatSansMethode);
                        return new Aide.DetailInfobulleAfficheeResult(resultatEnrichiMethodes);
                    });
                };
                AideAgent.prototype.GetInfobullesAffichables = function (utilisationHorsProcessus, codeProcessusVoulu, codeEtapeVoulu) {
                    return this.sendMessage(Aide.Messages.AideMessageSubject.GetInfobullesAffichables, {
                        horsProcessus: utilisationHorsProcessus,
                        codeProcessus: codeProcessusVoulu,
                        codeEtape: codeEtapeVoulu
                    }).then(function (resultatSansMethode) {
                        var resultatEnrichiMethodes = [];
                        for (var i = 0; i < resultatSansMethode.length; i++) {
                            resultatEnrichiMethodes.push(new Aide.InfobulleAfficheeResult(resultatSansMethode[i]));
                        }
                        return resultatEnrichiMethodes;
                    });
                };
                return AideAgent;
            }(Services.Components.ComponentAgentBase));
            Aide.AideAgent = AideAgent;
            Services.Components.RegistryAgent.getInstance().register(AideAgent);
        })(Aide = Services.Aide || (Services.Aide = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Aide;
        (function (Aide) {
            var AideApi = /** @class */ (function (_super) {
                __extends(AideApi, _super);
                function AideApi() {
                    return _super.call(this, Services.Components.ComponentType.Aide) || this;
                }
                AideApi.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer);
                };
                AideApi.prototype.GetContenuInfobulle = function (params) {
                    return this.libraryManager.Core.sendRequest({
                        url: Services.PrivatePortalServiceParameters.Instance().AideUrl +
                            '/recherche/infobulle?codeEtablissement=' + params.codeEtablissement +
                            '&processus=' + params.codeProcessus +
                            '&etape=' + params.codeEtape +
                            '&date=' + params.dateTraitement +
                            '&nomChamp=' + params.idChampLie,
                        method: Services.MethodEnum.GET,
                        withHeaders: true
                    });
                };
                AideApi.prototype.GetInfobullesAffichables = function (params) {
                    return this.libraryManager.Core.sendRequest({
                        url: Services.PrivatePortalServiceParameters.Instance().AideUrl +
                            '/recherche/presenceinfobulle?codeEtablissement=' + params.codeEtablissement +
                            '&processus=' + params.codeProcessus +
                            '&etape=' + params.codeEtape +
                            '&date=' + params.dateTraitement,
                        method: Services.MethodEnum.GET,
                        withHeaders: true
                    });
                };
                AideApi.prototype.GetAideFlash = function (params) {
                    return this.libraryManager.Core.sendRequest({
                        url: Services.PrivatePortalServiceParameters.Instance().AideUrl +
                            '/recherche/flash/?codeEtablissement=' + params.codeEtablissement +
                            // '&processus=' + params.codeProcessus +
                            '&etape=' + params.codeEtape +
                            '&date=' + params.dateTraitement,
                        method: Services.MethodEnum.GET,
                        withHeaders: true
                    });
                };
                return AideApi;
            }(Services.Components.ComponentApiBase));
            Aide.AideApi = AideApi;
            Services.Components.RegistryApi.getInstance().register(AideApi);
        })(Aide = Services.Aide || (Services.Aide = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Aide;
        (function (Aide) {
            //export enum TYPE_AIDE {
            //    CHAMP_DE_SAISIE = 1,
            //    MODALE_PUSH = 2,
            //    TOTEM = 3
            //}
            Aide.CODE_ETAPE_KEY = "codeEtape";
            Aide.ID_FLASH_CODE_KEY = "idFlashCode";
            var InfobulleAfficheeParametres = /** @class */ (function () {
                function InfobulleAfficheeParametres() {
                }
                InfobulleAfficheeParametres.prototype.estEgal = function (parametres) {
                    var resultatComparaison;
                    resultatComparaison = this.codeEtablissement == parametres.codeEtablissement
                        && this.codeEtape == parametres.codeEtape
                        && this.codeProcessus == parametres.codeProcessus
                        && this.dateTraitement == parametres.dateTraitement
                        && this.pointEntree == parametres.pointEntree;
                    return resultatComparaison;
                };
                return InfobulleAfficheeParametres;
            }());
            Aide.InfobulleAfficheeParametres = InfobulleAfficheeParametres;
            var DetailInfobulleAfficheeParametres = /** @class */ (function (_super) {
                __extends(DetailInfobulleAfficheeParametres, _super);
                function DetailInfobulleAfficheeParametres() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                DetailInfobulleAfficheeParametres.prototype.estEgal = function (parametres) {
                    var resultatComparaison;
                    resultatComparaison = _super.prototype.estEgal.call(this, parametres)
                        && this.idChampLie == parametres.idChampLie;
                    return resultatComparaison;
                };
                return DetailInfobulleAfficheeParametres;
            }(InfobulleAfficheeParametres));
            Aide.DetailInfobulleAfficheeParametres = DetailInfobulleAfficheeParametres;
        })(Aide = Services.Aide || (Services.Aide = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation
* @module MyWay.Services.Acquisition
* classe : NumerisationManager - public - Classe permettant la gestion de la numérisation
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            /**
            * Classe permettant la gestion de la numérisation
            *
            * @classe AcquisitionManager
            */
            var AcquisitionManager = /** @class */ (function (_super) {
                __extends(AcquisitionManager, _super);
                /**
                 * Constructeur de la classe AcquisitionManager
                 */
                function AcquisitionManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Acquisition) || this;
                    _this.api = null;
                    // Tableau contenant l'ensemble des traitements et leurs états
                    _this.stateTasks = {};
                    return _this;
                }
                AcquisitionManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
                };
                /**
                 * Permet d'extraire les données de fichiers
                 *
                 * @param fileInfos les informations sur les fichiers (url et type)
                 * @param params la liste des paramètres RADLAD
                 *
                 * @return les informations du traitement RADLAD
                 */
                AcquisitionManager.prototype.appelRADLAD = function (fileInfos, params) {
                    var _this = this;
                    return this.api.recuperationImageKofax(fileInfos).then(function (result) {
                        var imageBitonaleParams = {
                            save: params.save || false,
                            binarizeMethod: params.binarizeMethod || Acquisition.BINARIZE_METHOD.SIMPLE_THRESHOLD
                        };
                        return _this.api.creerImagesBitonales(result, imageBitonaleParams).then(function (result) {
                            return _this.library.Context.getAuthentificationInfo().then(function (authentificationInfo) {
                                return _this.api.traitementRADLAD(JSON.parse(result), params, authentificationInfo).then(function (result) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('details', result);
                                    AcquisitionManager.logger.debug('traitementRADLAD Success');
                                    return result;
                                }, function (error) {
                                    AcquisitionManager.logger.error('traitementRADLAD failed - %1', JSON.stringify(error));
                                    throw error;
                                });
                            });
                        }, function (error) {
                            AcquisitionManager.logger.error('creerImagesBitonales failed - %1', JSON.stringify(error));
                            throw error;
                        });
                    }, function (error) {
                        AcquisitionManager.logger.error('recuperationImageKofax failed - %1', JSON.stringify(error));
                        throw error;
                    });
                };
                /**
                 * Permet de convertir des fichiers en images
                 *
                 * @param fileInfo information du fichier
                 * @param params paramètres de conversion du fichier
                 *
                 * @return array un tableau evs les liens vers les images, les miniatures et les pds de chaque fichier
                 */
                AcquisitionManager.prototype.convertFileToImg = function (fileInfo, params) {
                    return this.api.convertFileToImg(fileInfo, params).then(function (result) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', result);
                        AcquisitionManager.logger.debug('convertFileToImg Success');
                        return JSON.parse(result);
                    }, function (error) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', fileInfo);
                        AcquisitionManager.logger.error('convertFileToImg failed - %1', JSON.stringify(error));
                        throw error;
                    });
                };
                /**
                 * Permet de merger des pdf en un seul et de l'archiver en GED
                 *
                 * @param fileInfos information des pdfs
                 * @param putDocumentInput le document à envoyer en GED
                 *
                 * @return
                 */
                AcquisitionManager.prototype.mergerEtArchiver = function (fileInfos, putDocumentInput) {
                    var _this = this;
                    return this.api.mergerPdfs(fileInfos).then(function (result) {
                        var file = JSON.parse(result);
                        putDocumentInput.docElect = file.base64;
                        return _this.library.Context.getAuthentificationInfo().then(function (lAuthentificationInfo) {
                            return _this.api.archiver(putDocumentInput, lAuthentificationInfo).then(function (idDraft) {
                                Services.Loggers.FLASH.INSTANCE.setValue('details', idDraft);
                                AcquisitionManager.logger.debug('archiver Success');
                                return idDraft;
                            }, function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('details', fileInfos);
                                AcquisitionManager.logger.error('archiver failed - %1', JSON.stringify(error));
                                throw error;
                            });
                        });
                    }, function (error) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', fileInfos);
                        AcquisitionManager.logger.error('merge Pdf failed - %1', JSON.stringify(error));
                        throw error;
                    });
                };
                /**
                 * Permet de merger des pdf en un seul et de l'uploader
                 *
                 * @param fileInfos information des pdfs
                 *
                 * @return
                 */
                AcquisitionManager.prototype.mergerEtUploader = function (fileInfos) {
                    return this.api.mergerPdfs(fileInfos).then(function (result) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', result);
                        AcquisitionManager.logger.debug('mergerPdfs Success');
                        var file = JSON.parse(result);
                        return file.base64;
                    }, function (error) {
                        AcquisitionManager.logger.error('mergerPdfs failed - %1', JSON.stringify(error));
                        throw error;
                    });
                };
                /**
                 * Permet de convertir des fichiers base64 en binaire
                 *
                 * @param urls la liste des urls des fichiers à convertir
                 *
                 * @return
                 */
                AcquisitionManager.prototype.convertBase64ToBin = function (urls) {
                    return this.api.convertBase64ToBin(urls).then(function (result) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', result);
                        AcquisitionManager.logger.debug('convertBase64ToBin Success');
                        return result;
                    }, function (error) {
                        AcquisitionManager.logger.error('convertBase64ToBin failed - %1', JSON.stringify(error));
                        throw error;
                    });
                };
                /**
                 * Permet de vider le répertoire où sont stocké les images
                 *
                 * @return boolean true si tout s'est bien passé sinon false
                 */
                AcquisitionManager.prototype.purge = function (hour) {
                    return this.api.purge(hour).then(function (result) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', result);
                        AcquisitionManager.logger.debug('purge Success');
                        return result;
                    }, function (error) {
                        AcquisitionManager.logger.error('purge failed - %1', JSON.stringify(error));
                        throw error;
                    });
                };
                /**
                 * Permet de fermer SpiFactory
                 *
                 * @return boolean true si tout s'est bien passé sinon false
                 */
                AcquisitionManager.prototype.fermetureSpiFactory = function () {
                    return this.api.fermetureSpiFactory().then(function (result) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', result);
                        AcquisitionManager.logger.debug('fermeture Spifactory Success');
                        return result;
                    }, function (error) {
                        AcquisitionManager.logger.error('Spifactory failed - %1', JSON.stringify(error));
                        throw error;
                    });
                };
                /**
                 * Permet de configurer un scanner
                 *
                 * @param typeScanner le type du scanner à configurer
                 *
                 * @return boolean true si tout s'est bien passé sinon false
                 */
                AcquisitionManager.prototype.setConfigurationScanner = function (typeScanner) {
                    return this.api.setConfigurationScanner(typeScanner).then(function () {
                        AcquisitionManager.logger.debug('setConfigurationScanner Success');
                        return true;
                    }, function (error) {
                        AcquisitionManager.logger.error('setConfigurationScanner failed - %1', JSON.stringify(error));
                        return false;
                    });
                };
                /**
                 * Permet de merger et d'ouvrir des PDFs
                 *
                 * @param params les paramètres nécessaires au merge puis à l'ouverture d'un PDF
                 *
                 * @return boolean true si tout s'est bien passé sinon false
                 */
                AcquisitionManager.prototype.onMergeAndOpenPDF = function (params, iFrame) {
                    var _this = this;
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    // Génération d'un GUID pour le traitement qui va suivre
                    var guid = this.generateGuid();
                    // Démarrage du traitement
                    this.stateTasks[guid] = { guid: guid, state: Acquisition.Messages.START_STATE, frames: [] };
                    // Nombre de traitement
                    var countTasks = (params.documents instanceof Array) ? params.documents.length : 1;
                    // Numéro du traitement courant
                    var currentTask = 0;
                    // Nom du fichier
                    var filename;
                    if (iFrame) {
                        var lIFrameId = this.library.Display.getMyIFrameId(iFrame);
                        var iframeModel = this.library.Display.GetFrameModelById(lIFrameId);
                        this.stateTasks[guid].frames.push(iframeModel);
                    }
                    var documents;
                    if (params.documents instanceof Array) {
                        documents = params.documents;
                    }
                    else {
                        documents = [params.documents];
                    }
                    this.library.Context.getAuthentificationInfo().then(function (authentificationInfo) {
                        var promises = [];
                        documents.forEach(function (document) {
                            promises.push(_this.api.retrieveGedDocument(params.applicationCode, document, authentificationInfo).then(function (document) {
                                currentTask++;
                                _this.changeState(guid, (currentTask / (countTasks + 1)) * 100); // total = nombre de document à traiter + 1 (qui correspond au merge)
                                return document;
                            }));
                        });
                        return Services.Promesses.all(promises).then(function (documents) {
                            var fileInfos = [];
                            documents.forEach(function (document) {
                                fileInfos.push({
                                    base64: document.fichier.contenu,
                                    type: Acquisition.ACQUISITION_TYPE.BASE64
                                });
                                filename = (documents.length === 1) ? document.fichier.nom : 'merge.pdf';
                            });
                            return _this.api.mergerPdfs(fileInfos).then(function (result) {
                                var file = JSON.parse(result);
                                Services.Loggers.FLASH.INSTANCE.setValue('details', file.base64);
                                AcquisitionManager.logger.debug('mergerPdfs Success');
                                currentTask++;
                                _this.changeState(guid, (currentTask / (countTasks + 1)) * 100);
                                var base64File = {
                                    path: guid,
                                    name: filename,
                                    base64: file.base64
                                };
                                return _this.api.saveDocument(base64File).then(function (saved) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('details', saved);
                                    AcquisitionManager.logger.debug('SaveDocument Success');
                                    return _this.api.openDocument(base64File).then(function (opened) {
                                        Services.Loggers.FLASH.INSTANCE.setValue('details', opened);
                                        AcquisitionManager.logger.debug('openDocument Success');
                                        _this.changeState(guid, Acquisition.Messages.END_STATE);
                                        return JSON.parse(opened);
                                    }, function (error) {
                                        Services.Loggers.FLASH.INSTANCE.setValue('details', fileInfos);
                                        AcquisitionManager.logger.error('openDocument failed - %1', JSON.stringify(error));
                                        _this.changeState(guid, Acquisition.Messages.ERROR, error.codeLibelle);
                                        deferred.reject(error);
                                    });
                                }, function (error) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('details', fileInfos);
                                    AcquisitionManager.logger.error('SaveDocument failed - %1', JSON.stringify(error));
                                    _this.changeState(guid, Acquisition.Messages.ERROR, error.codeLibelle);
                                    deferred.reject(error);
                                });
                            }, function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('details', fileInfos);
                                AcquisitionManager.logger.error('mergerPdfs failed - %1', JSON.stringify(error));
                                _this.changeState(guid, Acquisition.Messages.ERROR, error.codeLibelle);
                                deferred.reject(error);
                            });
                        }, function (error) {
                            Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                            AcquisitionManager.logger.error('retrieveGedDocument failed - %1', JSON.stringify(error));
                            _this.changeState(guid, Acquisition.Messages.ERROR, error.codeLibelle);
                            deferred.reject(error);
                        });
                    }, function (erreurAuthentification) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', erreurAuthentification);
                        AcquisitionManager.logger.error('getAuthentificationInfo failed - %1', JSON.stringify(erreurAuthentification));
                        _this.changeState(guid, Acquisition.Messages.ERROR, erreurAuthentification.codeLibelle);
                        deferred.reject(erreurAuthentification);
                    });
                    deferred.resolve(guid);
                    return deferred.promise;
                };
                /**
                 * retourne le chemin du fichier de résultat (au format demandé) mergeant les documents passés en paramètres.
                 * Si le format demandé est de type FORMAT_MERGE.PDF mais qu'un des documents n'est pas de ce type, une archive au format FORMAT_MERGE.ZIP sera créée.
                 * @param params IGedParams liste des documents à merger ou à archiver.
                 * @param pFormatResultatMerge FORMAT_MERGE type de format du fichier de résultat.
                 * @returns une promesse de type string contenant le chemin du fichier de résultat.
                 */
                AcquisitionManager.prototype.onRecupereListeDocumentGED = function (params, pFormatResultatMerge) {
                    var _this = this;
                    var documents;
                    if (params.documents instanceof Array) {
                        documents = params.documents;
                    }
                    else {
                        documents = [params.documents];
                    }
                    return this.library.Context.getAuthentificationInfo().then(function (authentificationInfo) {
                        var promises = [];
                        documents.forEach(function (document) {
                            promises.push(_this.api.retrieveGedDocument(params.applicationCode, document, authentificationInfo).then(function (document) {
                                AcquisitionManager.logger.debug('onRecupereListeDocumentGED : le document a été retrouvé en GED');
                                return document;
                            }));
                        });
                        return Services.Promesses.all(promises).then(function (documents) {
                            var fileInfos = [];
                            documents.forEach(function (document) {
                                fileInfos.push({
                                    base64: document.fichier.contenu,
                                    type: Acquisition.ACQUISITION_TYPE.BASE64,
                                    nomDocumentEnGed: document.fichier.nom
                                });
                            });
                            return _this.api.mergerDocuments(fileInfos, pFormatResultatMerge).then(function (resultatCheminFichier) {
                                AcquisitionManager.logger.debug('mergerDocuments Success');
                                // le chemin récupéré, correspondant à une adresse de répertoire, contient des @@ comme séparateur de répertoire
                                // exemple : "C:@@Users@@S0061200@@AppData@@Local@@Temp@@merge.pdf" 
                                // les @@ sont remplacés par des \
                                var regexChaineCheminFichier = /@@/gi;
                                return resultatCheminFichier.replace(regexChaineCheminFichier, "\\");
                            }, function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('details', fileInfos);
                                AcquisitionManager.logger.error('mergerPdfs failed - %1', JSON.stringify(error));
                                throw error;
                            });
                        }, function (error) {
                            Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                            AcquisitionManager.logger.error('retrieveGedDocument failed - %1', JSON.stringify(error));
                            throw error;
                        });
                    }, function (erreurAuthentification) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', erreurAuthentification);
                        AcquisitionManager.logger.error('getAuthentificationInfo failed - %1', JSON.stringify(erreurAuthentification));
                        throw erreurAuthentification;
                    });
                };
                /**
                 * manipule (ouverture ou ajout en pièce jointe d'un mail) l'archive constituée à partir des documents passés en paramètre.
                 * Si le format demandé est de type FORMAT_MERGE.PDF mais qu'un des documents n'est pas de ce type, une archive au format FORMAT_MERGE.ZIP sera créée.
                 * @param params IGedParams liste des documents à merger ou à archiver.
                 * @param pFormatResultatMerge FORMAT_MERGE type de format du fichier de résultat.
                 * @param pFormatOuvertureArchive OUVERTURE_ARCHIVE type de manipulation de l'archive : ouverture ou ajout en pièce jointe d'un mail.
                 * @returns une promesse.
                 */
                AcquisitionManager.prototype.onOuvrirListeDocumentGED = function (params, pFormatResultatMerge, pFormatOuvertureArchive) {
                    var _this = this;
                    var documents;
                    if (params.documents instanceof Array) {
                        documents = params.documents;
                    }
                    else {
                        documents = [params.documents];
                    }
                    return this.library.Context.getAuthentificationInfo().then(function (authentificationInfo) {
                        var promises = [];
                        documents.forEach(function (document) {
                            promises.push(_this.api.retrieveGedDocument(params.applicationCode, document, authentificationInfo).then(function (document) {
                                AcquisitionManager.logger.debug('onOuvrirListeDocumentGED : le document a été retrouvé en GED');
                                return document;
                            }));
                        });
                        return Services.Promesses.all(promises).then(function (documents) {
                            var fileInfos = [];
                            documents.forEach(function (document) {
                                fileInfos.push({
                                    base64: document.fichier.contenu,
                                    type: Acquisition.ACQUISITION_TYPE.BASE64,
                                    nomDocumentEnGed: document.fichier.nom
                                });
                            });
                            return _this.api.manipulerArchives(fileInfos, pFormatResultatMerge, pFormatOuvertureArchive).then(function () {
                                AcquisitionManager.logger.debug('manipulerArchives Success');
                                return true;
                            }, function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('details', fileInfos);
                                AcquisitionManager.logger.error('manipulerArchives failed - %1', JSON.stringify(error));
                                throw error;
                            });
                        }, function (error) {
                            Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                            AcquisitionManager.logger.error('retrieveGedDocument failed - %1', JSON.stringify(error));
                            throw error;
                        });
                    }, function (erreurAuthentification) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', erreurAuthentification);
                        AcquisitionManager.logger.error('getAuthentificationInfo failed - %1', JSON.stringify(erreurAuthentification));
                        throw erreurAuthentification;
                    });
                };
                /**
             * Envoi le changement de statut d'un traitement
             *
             * @param guid l'identifiant du traitement
             * @param state l'état du traitement
             * @param detail l'état du traitement
             */
                AcquisitionManager.prototype.changeState = function (guid, state, detail) {
                    var _this = this;
                    this.stateTasks[guid].state = state;
                    this.stateTasks[guid].detail = detail;
                    if (this.stateTasks[guid].frames.length > 0) {
                        this.stateTasks[guid].frames.forEach(function (frame) {
                            _this.sendMessageWithFrame(Acquisition.Messages.AcquisitionMessageSubject.ChangeState, {
                                guid: guid,
                                state: state,
                                detail: detail
                            }, frame);
                        });
                    }
                    else {
                        this.sendMessage(Acquisition.Messages.AcquisitionMessageSubject.ChangeState, {
                            guid: guid,
                            state: state,
                            detail: detail
                        });
                    }
                };
                /**
                 * Permet connaître l'état d'un traitement d'un merge et ouvrir pdf
                 *
                 * @param guid l'identifiant du traitement à connaître
                 *
                 * @return string status le statut du traitement correspondant au guid
                 */
                AcquisitionManager.prototype.onGetProcessingTask = function (guid) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve(this.stateTasks[guid]);
                    return deferred.promise;
                };
                /**
                 * Permet de récupérer des documents en GED, de les sauvegarder et de les récupérer
                 *
                 * @param params information du fichier
                 *
                 * @return array un tableau contenant les liens vers les documents GED, les miniatures et les pds de chaque fichier
                 */
                AcquisitionManager.prototype.onGetDocumentGEDAndSave = function (params) {
                    var _this = this;
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    return this.library.Context.getAuthentificationInfo().then(function (authentificationInfo) {
                        var document;
                        if (params.documents instanceof Array) {
                            throw new Error('Tableau de document impossibles, uniquement un seul document peut être traité');
                        }
                        else {
                            document = params.documents;
                        }
                        return _this.api.retrieveGedDocument(params.applicationCode, document, authentificationInfo).then(function (document) {
                            // Génération d'un GUID pour le traitement qui va suivre
                            var guid = _this.generateGuid();
                            var base64File = {
                                path: guid,
                                name: document.fichier.nom,
                                base64: document.fichier.contenu
                            };
                            return _this.api.saveDocument(base64File).then(function (file) {
                                Services.Loggers.FLASH.INSTANCE.setValue('details', file);
                                AcquisitionManager.logger.debug('SaveDocument Success');
                                return JSON.parse(file);
                            }, function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                                AcquisitionManager.logger.error('SaveDocument failed - %1', JSON.stringify(error));
                                throw error;
                            });
                        });
                    });
                };
                /**
                 * @author : Benoît Ouvrié
                 * @version : 20.03
                 * @description : Sauvegarde le document GED (passé en paramètre) sur le poste à l'endroit précisé en paramètre
                 * puis ouvre le document.
                 * @param params interface de type IGedOneSaveAtAndOpenParams. Il contient les éléments nécessaires pour retrouver le document en GED
                 * et le chemin où le document GED sera sauvegardé (cheminSauvegardeSurLePoste).
                 * @returns une IPromesse de type string représentant le chemin du document sur le poste.
                 *
                 */
                AcquisitionManager.prototype.onGetDocumentGedSaveAtAndOpen = function (params) {
                    var _this = this;
                    return this.library.Context.getAuthentificationInfo().then(function (authentificationInfo) {
                        // fabrication du paramètre nécessaire à l'interrogation du service GED
                        var documentAChercherEnGED = {
                            id: null,
                            nature: null
                        };
                        documentAChercherEnGED.id = params.id;
                        documentAChercherEnGED.nature = params.nature;
                        // sollicitation du service GED de recherche d'un document
                        return _this.api.retrieveGedDocument(params.applicationCode, documentAChercherEnGED, authentificationInfo).then(function (documentTrouveEnGED) {
                            // fabrication du paramètre nécessaire à l'interrogation de l'api
                            var leParamBase64File = {
                                path: params.cheminSauvegardeSurLePoste,
                                name: documentTrouveEnGED.fichier.nom,
                                base64: documentTrouveEnGED.fichier.contenu
                            };
                            // sollicitation du service
                            return _this.api.saveDocumentGedAtAndOpen(leParamBase64File).then(function (cheminFichier) {
                                Services.Loggers.FLASH.INSTANCE.setValue('details', cheminFichier);
                                AcquisitionManager.logger.debug('onGetDocumentGedSaveAtAndOpen - saveDocumentGedAtAndOpen Success');
                                return cheminFichier;
                            }, function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                                AcquisitionManager.logger.error('onGetDocumentGedSaveAtAndOpen - saveDocumentGedAtAndOpen failed - %1', JSON.stringify(error));
                                throw error;
                            });
                        }, function (error) {
                            Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                            AcquisitionManager.logger.error('onGetDocumentGedSaveAtAndOpen - retrieveGedDocument failed - %1', JSON.stringify(error));
                            throw error;
                        });
                    }, function (error) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                        AcquisitionManager.logger.error('onGetDocumentGedSaveAtAndOpen - GetAuthentificationInfo failed - %1', JSON.stringify(error));
                        throw error;
                    });
                }; // FIN onGetDocumentGedSaveAtAndOpen
                /**
                 * @author : Benoît Ouvrié
                 * @version : 20.03
                 * Ouvre le fichier présent sur le poste local à l'adresse fournie en paramètre.
                 * @param leCheminDuFichier chemin du fichier à ouvrir.
                 * @returns une IPromesse de type booelan : true si l'ouverture s'est bien passée.
                 */
                AcquisitionManager.prototype.onUploadDocumentFrom = function (leCheminDuFichier) {
                    return this.api.uploadDocumentFrom(leCheminDuFichier).then(function (result) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', result);
                        AcquisitionManager.logger.debug('onUploadDocumentFrom - uploadDocumentFrom : Success');
                        return result;
                    }, function (error) {
                        AcquisitionManager.logger.error('onUploadDocumentFrom - uploadDocumentFrom : failed - %1', JSON.stringify(error));
                        throw error;
                    });
                };
                /**
                 * Permet de récupérer des documents en GED et de les ouvrir
                 *
                 * @param params information du fichier
                 *
                 * @return true si les documents s'ouvrent, false dans le cas contraire
                 */
                AcquisitionManager.prototype.onGetDocumentGEDAndOpen = function (params) {
                    var _this = this;
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    return this.library.Context.getAuthentificationInfo().then(function (authentificationInfo) {
                        var document = {
                            id: null,
                            nature: null
                        };
                        document.id = params.id;
                        document.nature = params.nature;
                        return _this.api.retrieveGedDocument(params.applicationCode, document, authentificationInfo).then(function (document) {
                            // Génération d'un GUID pour le traitement qui va suivre
                            var guid = _this.generateGuid();
                            var base64File = {
                                path: guid,
                                name: document.fichier.nom,
                                base64: document.fichier.contenu
                            };
                            return _this.api.saveDocument(base64File).then(function (file) {
                                Services.Loggers.FLASH.INSTANCE.setValue('details', file);
                                AcquisitionManager.logger.debug('SaveDocument Success');
                                return _this.api.openDocument(base64File).then(function (opened) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('details', opened);
                                    AcquisitionManager.logger.debug('openDocument Success');
                                    return JSON.parse(opened);
                                }, function (error) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                                    AcquisitionManager.logger.error('openDocument failed - %1', JSON.stringify(error));
                                    throw error;
                                });
                            }, function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                                AcquisitionManager.logger.error('SaveDocument failed - %1', JSON.stringify(error));
                                throw error;
                            });
                        }).catch(function (erreurRetriveDocument) {
                            Services.Loggers.FLASH.INSTANCE.setValue('details', erreurRetriveDocument);
                            AcquisitionManager.logger.error('retrieveGedDocument failed - %1', JSON.stringify(erreurRetriveDocument));
                            throw erreurRetriveDocument;
                        });
                    }).catch(function (erreurAuthentification) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', erreurAuthentification);
                        AcquisitionManager.logger.error('getAuthentificationInfo failed - %1', JSON.stringify(erreurAuthentification));
                        throw erreurAuthentification;
                    });
                };
                /**
                 * @author : Benoît Ouvrié.
                 * @version : 20.03
                 * @description : liste des scanners accessibles depuis le poste.
                 * @returns Une promesse de type liste de IScannerAccessibleResult.
                 */
                AcquisitionManager.prototype.onGetListeScanner = function () {
                    return this.api.getListeScanner().then(function (laListeDesScannersResult) {
                        AcquisitionManager.logger.debug('onGetListeScanner Success');
                        return JSON.parse(laListeDesScannersResult);
                    }, function (error) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                        AcquisitionManager.logger.error('onGetListeScanner failed - %1', JSON.stringify(error));
                        throw error;
                    });
                };
                /**
                 * @author : Benoît Ouvrié.
                 * @version : 20.03
                 * @description : vérification de la prise en main (ou non) à distance du poste.
                 * @returns Une promesse de type IPrisEnMainADistanceResult.
                 */
                AcquisitionManager.prototype.onIsPrisEnMainADistance = function () {
                    return this.api.isPrisEnMainADistance().then(function (laPriseEnMaintenanceResult) {
                        AcquisitionManager.logger.debug('onIsPrisEnMainADistance Success');
                        return JSON.parse(laPriseEnMaintenanceResult);
                    }, function (error) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                        AcquisitionManager.logger.error('onIsPrisEnMainADistance failed - %1', JSON.stringify(error));
                        throw error;
                    });
                };
                ;
                AcquisitionManager.prototype.S4 = function () {
                    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
                };
                /**
                 * Génère un GUID unique
                 */
                AcquisitionManager.prototype.generateGuid = function () {
                    var guid = (this.S4() + this.S4() + "-" + this.S4() + "-4" + this.S4().substr(0, 3) + "-" + this.S4() + "-" + this.S4() + this.S4() + this.S4()).toLowerCase();
                    return guid;
                };
                AcquisitionManager.CLASS_NAME = 'MyWay.Services.Acquisition.AcquisitionManager';
                AcquisitionManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(AcquisitionManager.CLASS_NAME);
                return AcquisitionManager;
            }(Services.Components.ComponentManagerBase));
            Acquisition.AcquisitionManager = AcquisitionManager;
            Services.Components.RegistryManager.getInstance().register(AcquisitionManager);
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des moyens de communication
* @module MyWay.Services.Communication
* @classe CommunicationManager - public - Classe permettant la gestion des moyens de communication
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Communication;
        (function (Communication) {
            var CommunicationManager = /** @class */ (function (_super) {
                __extends(CommunicationManager, _super);
                /**
                 * Constructeur de la classe CommunicationManager
                 *
                 * @param managerLibrary {ManagerLibrary} La librairie de construction du manager
                 *
                 */
                function CommunicationManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Communication) || this;
                    _this.api = null;
                    return _this;
                }
                CommunicationManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
                };
                /**
                 * Permet d'envoyer un mail
                 *
                 * @param mail Mail
                 *
                 */
                CommunicationManager.prototype.envoyerMail = function (mail) {
                    var erreurParams;
                    if ((erreurParams = Communication.controleEnvoyerMail(mail)) !== "") {
                        var erreur = new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_COMMUNICATION_FORMAT_MAIL_INCORRECT, [erreurParams]);
                        CommunicationManager.logger.error('envoyerMail Failed - %1', JSON.stringify(erreur));
                        return this.library.Core.createPromiseSelfError(erreur);
                    }
                    else {
                        var mailto = "mailto:{0}?{1}{2}{3}{4}";
                        mailto = mailto.replace("{0}", mail.to);
                        mailto = mailto.replace("{1}", (Services.Controle.StaticStringControle.isString(mail.subject) ? "subject=" + mail.subject + "&" : ""));
                        mailto = mailto.replace("{2}", (Services.Controle.StaticStringControle.isString(mail.body) ? "body=" + mail.body.replace(/\n/g, "%0D%0A") + "&" : ""));
                        mailto = mailto.replace("{3}", (Services.Controle.StaticStringControle.isString(mail.cc) ? "cc=" + mail.cc + "&" : ""));
                        mailto = mailto.replace("{4}", (Services.Controle.StaticStringControle.isString(mail.bcc) ? "bcc=" + mail.bcc : ""));
                        mailto = mailto.replace("?&", "?");
                        if (mailto.lastIndexOf("&") == mailto.length - 1 || mailto.lastIndexOf("?") == mailto.length - 1) {
                            mailto = mailto.substring(0, mailto.length - 1);
                        }
                        CommunicationManager.logger.debug('envoyerMail Success - %1', mailto);
                        return this.library.Core.createPromiseSelfResolved(mailto);
                    }
                };
                /**
                 * Permet de déclencher un appel
                 *
                 * @param {Call} call    Données de l'appel
                 */
                CommunicationManager.prototype.declencherAppel = function (call) {
                    var _this = this;
                    var erreurParams;
                    if ((erreurParams = Communication.controleDeclencherAppel(call)) !== "") {
                        var erreur = new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_COMMUNICATION_FORMAT_NUMERO_INCORRECT, [erreurParams]);
                        CommunicationManager.logger.error('envoyerMail Failed - %1', JSON.stringify(erreur));
                        return this.library.Core.createPromiseSelfError(erreur);
                    }
                    else {
                        return this.library.Context.getAuthentificationInfo().then(function (authentificationInfo) {
                            if (authentificationInfo !== null) {
                                return _this.api.declencherAppel(call, authentificationInfo)
                                    .then(function (result) {
                                    CommunicationManager.logger.debug('API NumerotationTelephonique.declencherAppel Success');
                                    return result;
                                }, function (error) {
                                    CommunicationManager.logger.error('API NumerotationTelephonique.declencherAppel Failed - %1', JSON.stringify(error));
                                    throw error;
                                });
                            }
                            else {
                                CommunicationManager.logger.error('Données d\'appel manquantes');
                                throw new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_COMMUNICATION_DONNEES_APPEL_MANQUANTE);
                            }
                        });
                    }
                };
                /**
                * Permet de raccrocher un appel
                */
                CommunicationManager.prototype.raccrocherAppel = function () {
                    var _this = this;
                    return this.library.Context.getAuthentificationInfo().then(function (authentificationInfo) {
                        return _this.api.raccrocherAppel(authentificationInfo)
                            .then(function (result) {
                            CommunicationManager.logger.debug('API NumerotationTelephonique.raccrocherAppel Success');
                            return result;
                        }, function (error) {
                            CommunicationManager.logger.error('API NumerotationTelephonique.raccrocherAppel Failed - %1', JSON.stringify(error));
                            throw error;
                        });
                    });
                };
                /**
                * Permet de d'envoyer un message à une application externe (ex : application kiosque)
                */
                CommunicationManager.prototype.envoyerMessageAppliKiosque = function (messageAgent) {
                    return this.api.envoyerMessageAppliKiosque(messageAgent)
                        .then(function (result) {
                        CommunicationManager.logger.debug('API NumerotationTelephonique.raccrocherAppel Success');
                        return result;
                    }, function (error) {
                        CommunicationManager.logger.error('API NumerotationTelephonique.raccrocherAppel Failed - %1', JSON.stringify(error));
                        throw error;
                    });
                };
                CommunicationManager.CLASS_NAME = 'MyWay.Services.Communication.CommunicationManager';
                CommunicationManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(CommunicationManager.CLASS_NAME);
                return CommunicationManager;
            }(Services.Components.ComponentManagerBase));
            Communication.CommunicationManager = CommunicationManager;
            Services.Components.RegistryManager.getInstance().register(CommunicationManager);
        })(Communication = Services.Communication || (Services.Communication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.PhantomAgent.addListenerOnInit(function (pInstance, pServiceManager) {
            pInstance.Communication = new Services.Communication.PhantomCommunicationAgent(pServiceManager);
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des moyens de communication
* @module MyWay.Services.Communication
* @classe CommunicationAgent - public - Classe permettant la gestion des moyens de communication
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Communication;
        (function (Communication) {
            var PhantomCommunicationAgent = /** @class */ (function () {
                /**
                 * Constructeur de la classe CommunicationAgent
                 *
                 * @param agentLibrary {AgentLibrary} La librairie de construction de l'agent
                 * @param errorCallback {ErreurCallback} Action à executer en cas d'erreur lors de la construction de l'agent
                 *
                 */
                function PhantomCommunicationAgent(serviceManager) {
                    this.serviceManager = serviceManager;
                }
                /**
                 * Permet d'envoyer un mail
                 *
                 * @param mail Mail
                 *
                 */
                PhantomCommunicationAgent.prototype.envoyerMail = function (mail) {
                    return this.serviceManager.Library.Communication.envoyerMail(mail);
                };
                /**
                * Permet de déclencher un appel
                *
                * @param {Call} call    Données de l'appel
                *
                */
                PhantomCommunicationAgent.prototype.declencherAppel = function (call) {
                    return this.serviceManager.Library.Communication.declencherAppel(call);
                };
                /**
                * Permet de raccrocher un appel
                *
                */
                PhantomCommunicationAgent.prototype.raccrocherAppel = function () {
                    return this.serviceManager.Library.Communication.raccrocherAppel();
                };
                return PhantomCommunicationAgent;
            }());
            Communication.PhantomCommunicationAgent = PhantomCommunicationAgent;
        })(Communication = Services.Communication || (Services.Communication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var BriqueCommunicationManager = /** @class */ (function (_super) {
                __extends(BriqueCommunicationManager, _super);
                function BriqueCommunicationManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.BriqueCommunication) || this;
                    _this.initialization = null;
                    _this.api = null;
                    _this.configuration = null;
                    _this.configurationEtablissement = null;
                    _this.AVAILABLE = null;
                    _this.CONNECTED = null;
                    _this.TO_DEVICE = null;
                    _this.FROM_DEVICE = null;
                    _this.CONFIGURATION_ETABLISSEMENT = null;
                    _this.agentCourant = null;
                    _this.loadConfig = function (pAuthentificationInfo) {
                        BriqueCommunicationManager.logger.error("Chargement de la configuration globale KAAZING");
                        return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                            var lCanalController = null;
                            var lReader = function (pMessage) {
                                //Configuration reçue, ferme la connexion
                                lCanalController.close();
                                _this.configuration = pMessage;
                                _this.configuration.forEach(function (pConfiguration) {
                                    switch (pConfiguration.code) {
                                        case "USERS_TODEVICE":
                                            _this.TO_DEVICE = pConfiguration;
                                            break;
                                        case "USERS_FROMDEVICE":
                                            _this.FROM_DEVICE = pConfiguration;
                                            break;
                                        case "USERS_AVAILABLE":
                                            _this.AVAILABLE = pConfiguration;
                                            break;
                                        case "USERS_ONLINE":
                                            _this.CONNECTED = pConfiguration;
                                            break;
                                        case "CHANNELS_SEC_CONFIGURATION":
                                            _this.CONFIGURATION_ETABLISSEMENT = pConfiguration;
                                            break;
                                    }
                                });
                                //Va chercher la configuration de l'établissement courant
                                _this.loadConfigEtablissement(pAuthentificationInfo, pDefer);
                            };
                            _this.ouvrirCanal(BriqueCommunication.URLBASE_CONFIGURATION, BriqueCommunication.TOPIC_CONFIGURATION_GENERALE, { readable: true, writable: false }, pAuthentificationInfo).then(function (pCanalControler) {
                                lCanalController = pCanalControler;
                                lCanalController.reader = lReader;
                            }, function (pErreur) {
                                BriqueCommunicationManager.logger.error("Impossible de charger la configuration KAAZING : %1", JSON.pruned(pErreur));
                                pDefer.reject(pErreur);
                            });
                        }).then(function () {
                            return _this.enregistrerAgent();
                        });
                    };
                    _this.sessions = {};
                    _this.connexionsInProgress = {};
                    _this.connexionsEnFileDAttente = {};
                    return _this;
                }
                BriqueCommunicationManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                        if (!window['JmsConnectionFactory']) {
                            return;
                        }
                        return pManagerLibrary.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                            return _this.loadConfig(pAuthentificationInfo);
                        }).then(function () {
                            _this.library.Display.setFormatObjectNotificationListener(Services.Component.ManagerEventType.BriqueCommunication, function (pEvent, pNotification) {
                                pNotification.type = Services.CommonEventType.BriqueCommunication;
                                pNotification.Contenu = pEvent.Detail.chat;
                            });
                        });
                    });
                };
                BriqueCommunicationManager.prototype.getConfiguration = function () {
                    return this.configuration;
                };
                BriqueCommunicationManager.prototype.getConfigurationEtablissement = function () {
                    return this.configurationEtablissement;
                };
                BriqueCommunicationManager.prototype.getInfosAgentCourant = function () {
                    return this.agentCourant;
                };
                BriqueCommunicationManager.prototype.loadConfigEtablissement = function (pAuthentificationInfo, pDefer) {
                    var _this = this;
                    BriqueCommunicationManager.logger.error("Chargement de la configuration de l'établissement");
                    var lCanalController = null;
                    var lReader = function (pMessage) {
                        //Configuration reçue, ferme la connexion
                        lCanalController.close();
                        _this.configurationEtablissement = pMessage;
                        BriqueCommunicationManager.logger.error("Fin de chargement de la configuration");
                        pDefer.resolve();
                    };
                    this.ouvrirCanal(this.CONFIGURATION_ETABLISSEMENT.url, this.replaceTokens(this.CONFIGURATION_ETABLISSEMENT.destination, { 'establishment': pAuthentificationInfo.codeEtablissement }), { readable: true, writable: false }, pAuthentificationInfo).then(function (pCanalControler) {
                        lCanalController = pCanalControler;
                        lCanalController.reader = lReader;
                    }, function (pErreur) {
                        BriqueCommunicationManager.logger.error("Impossible de charger la configuration par établissement de KAAZING : %1", JSON.pruned(pErreur));
                        pDefer.reject(pErreur);
                    });
                };
                BriqueCommunicationManager.prototype.enregistrerAgent = function () {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        _this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                            var lCanalToDevice = null;
                            var lReaderToDevice = function (pMessage) {
                                //Infos user reçues, ferme le canal
                                lCanalToDevice.close();
                                pMessage.firstname = pAuthentificationInfo.agentConnecte.prenom;
                                pMessage.lastname = pAuthentificationInfo.agentConnecte.nomFamillePersonnePhysique;
                                pMessage.establishment = pAuthentificationInfo.codeEtablissement;
                                pMessage.persisted = true;
                                _this.agentCourant = pMessage;
                                _this.ouvrirCanal(_this.FROM_DEVICE.url, _this.FROM_DEVICE.destination, { readable: false, writable: true }, pAuthentificationInfo).then(function (pCanalController) {
                                    pCanalController.writer(pMessage);
                                    pCanalController.close();
                                    pDefer.resolve();
                                }, pDefer.reject);
                            };
                            _this.ouvrirCanal(_this.TO_DEVICE.url, _this.TO_DEVICE.destination, { readable: true, writable: false }, pAuthentificationInfo).then(function (pCanalController) {
                                lCanalToDevice = pCanalController;
                                lCanalToDevice.reader = lReaderToDevice;
                            }, pDefer.reject);
                        }, pDefer.reject);
                    });
                };
                BriqueCommunicationManager.prototype.setStatutEnLigne = function (pEstEnLigne) {
                    var _this = this;
                    return this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                        _this.agentCourant.onlineStatus = pEstEnLigne;
                        return _this.ouvrirCanal(_this.FROM_DEVICE.url, _this.FROM_DEVICE.destination, { readable: false, writable: true }, pAuthentificationInfo).then(function (pCanalController) {
                            pCanalController.writer(_this.agentCourant);
                            pCanalController.close();
                        });
                    });
                };
                BriqueCommunicationManager.prototype.getUtilisateursConnectes = function () {
                    var _this = this;
                    //Ecoute tout client qui demande une connexion
                    return this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                        return _this.ouvrirCanal(_this.CONNECTED.url, _this.replaceTokens(_this.CONNECTED.destination, { "establishment": pAuthentificationInfo.codeEtablissement }), { readable: true, writable: false }, pAuthentificationInfo).then(function (pCanalController) {
                            return pCanalController;
                        });
                    });
                };
                BriqueCommunicationManager.prototype.getUtilisateurs = function () {
                    var _this = this;
                    //Ecoute tout client qui demande une connexion
                    return this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                        return _this.ouvrirCanal(_this.AVAILABLE.url, _this.AVAILABLE.destination, { readable: true, writable: false }, pAuthentificationInfo).then(function (pCanalController) {
                            return pCanalController;
                        });
                    });
                };
                BriqueCommunicationManager.prototype.dispose = function () {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        var lPromessesSessions = [];
                        for (var key in _this.sessions) {
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            _this.sessions[key].session.close(function () {
                                lDefer.resolve();
                            });
                            delete _this.sessions[key];
                            lPromessesSessions.push(lDefer.promise);
                        }
                        Services.CoreCommon.ServiceDePromesse.all(lPromessesSessions).finally(pDefer.resolve);
                    });
                };
                BriqueCommunicationManager.prototype.ouvrirCanal = function (pUrl, pDestination, pOptions, pAuthentificationInfo) {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        _this.connect(pUrl, pAuthentificationInfo).then(function (pId) {
                            var lDecoupe = pDestination.match(/^\/queue\//);
                            var lIsQueue = lDecoupe !== null;
                            BriqueCommunicationManager.logger.debug('Connexion à %1, sur %2', pUrl, pDestination);
                            var lTopicOrQueue = null;
                            var lSession = _this.sessions[pId].session;
                            if (lIsQueue) {
                                lTopicOrQueue = lSession.createQueue(pDestination);
                            }
                            else {
                                lTopicOrQueue = lSession.createTopic(pDestination);
                            }
                            var lConsumer = null;
                            var lProducer = null;
                            var lControlleur = new BriqueCommunication.CanalControler();
                            lControlleur['messagesEnAttente'] = null;
                            lControlleur.close = function () {
                                BriqueCommunicationManager.logger.debug('Deconnexion de %1, sur %2', pUrl, pDestination);
                                if (lConsumer) {
                                    lConsumer.close(function () { });
                                }
                                if (lProducer) {
                                    lProducer.close();
                                }
                                if (_this.sessions[pId]) {
                                    _this.sessions[pId].count--;
                                    if (_this.sessions[pId].timeoutToClose !== null) {
                                        window.clearTimeout(_this.sessions[pId].timeoutToClose);
                                    }
                                    //Attends 5 secondes avant de tout couper, au cas où que d'autres demandes arrivent
                                    _this.sessions[pId].timeoutToClose = window.setTimeout(function () {
                                        if (_this.sessions[pId].count <= 0) {
                                            BriqueCommunicationManager.logger.debug("Tente de fermer la connexion à %1", pUrl);
                                            //Dernière connexion fermée, coupe tout
                                            _this.sessions[pId].session.close(function () {
                                                BriqueCommunicationManager.logger.debug("Session fermée à %1", pUrl);
                                            });
                                            delete _this.sessions[pId];
                                            delete _this.connexionsInProgress[pId];
                                            delete _this.connexionsEnFileDAttente[pId];
                                        }
                                    }, 5000);
                                }
                            };
                            if (pOptions.readable) {
                                lConsumer = lSession.createConsumer(lTopicOrQueue);
                                lConsumer.setMessageListener(function (pMessage) {
                                    BriqueCommunicationManager.logger.debug("Message arrivé sur %1 : %2", pDestination, JSON.pruned(pMessage.getText()));
                                    var lText = pMessage.getText();
                                    var lObject = JSON.parse(lText);
                                    lControlleur.reader(lObject);
                                });
                            }
                            if (pOptions.writable) {
                                lProducer = lSession.createProducer(lTopicOrQueue);
                                var lCallbackWrite = function (pMessage) {
                                    var lTextMessage = lSession.createTextMessage(pMessage);
                                    lProducer.send(lTextMessage, function () {
                                        //Message envoyé, passe au suivant
                                        var lListe = lControlleur['messagesEnAttente'];
                                        var lNouvelleListe = null;
                                        var lSuivant = null;
                                        if (lListe && lListe.length > 0) {
                                            lSuivant = lListe[0];
                                            lNouvelleListe = [];
                                            for (var i = 1; i < lListe.length; i++) {
                                                lNouvelleListe.push(lListe[i]);
                                            }
                                        }
                                        lControlleur['messagesEnAttente'] = lNouvelleListe;
                                        if (lSuivant) {
                                            lCallbackWrite(lSuivant);
                                        }
                                    });
                                };
                                lControlleur.writer = function (pObject) {
                                    var lText = JSON.stringify(pObject);
                                    if (lControlleur['messagesEnAttente']) {
                                        //Déjà un message en cours d'envoi, empile
                                        lControlleur['messagesEnAttente'].push(lText);
                                        return;
                                    }
                                    lControlleur['messagesEnAttente'] = [];
                                    lCallbackWrite(lText);
                                };
                            }
                            pDefer.resolve(lControlleur);
                        });
                    });
                };
                BriqueCommunicationManager.prototype.replaceTokens = function (pString, pValues) {
                    var lKey;
                    for (lKey in pValues) {
                        var lValue = pValues[lKey];
                        pString = pString.replace("[" + lKey + "]", lValue);
                    }
                    return pString;
                };
                BriqueCommunicationManager.prototype.connect = function (pUrl, pAuthentificationInfo) {
                    var _this = this;
                    return Services.CoreCommon.promesseTryCatch(function (pDefer) {
                        //Commence par vérifier si la connexion n'est pas déjà ouverte
                        if (_this.sessions[pUrl]) {
                            //Est déjà ouverte, incrémente le nombre de connexions en cours sur cette URL
                            _this.sessions[pUrl].count++;
                            pDefer.resolve(pUrl);
                            return;
                        }
                        //Vérifie maintenant qu'il n'y a pas déjà une demande de connexion en cours
                        if (_this.connexionsInProgress[pUrl]) {
                            //Une demande de connexion est déjà en cours de traitement sur cette URL, mets le DEFER en attente
                            if (!_this.connexionsEnFileDAttente[pUrl]) {
                                _this.connexionsEnFileDAttente[pUrl] = [];
                            }
                            _this.connexionsEnFileDAttente[pUrl].push(pDefer);
                            return;
                        }
                        _this.connexionsInProgress[pUrl] = true;
                        var lNecessiteToken = false;
                        _this.api.connect(pUrl, pAuthentificationInfo).then(function (pSession) {
                            var lSession = pSession;
                            _this.sessions[pUrl] = {
                                count: 1,
                                session: lSession,
                                timeoutToClose: null
                            };
                            //Valide les autres connexions en file d'attente
                            if (_this.connexionsEnFileDAttente[pUrl]) {
                                _this.connexionsEnFileDAttente[pUrl].forEach(function (pDeferEnAttente) {
                                    _this.sessions[pUrl].count++;
                                    pDeferEnAttente.resolve(pUrl);
                                });
                                delete _this.connexionsEnFileDAttente[pUrl];
                            }
                            delete _this.connexionsInProgress[pUrl];
                            pDefer.resolve(pUrl);
                        });
                    });
                };
                BriqueCommunicationManager.CLASS_NAME = 'MyWay.Services.BriqueCommunication.BriqueCommunicationManager';
                BriqueCommunicationManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(BriqueCommunicationManager.CLASS_NAME);
                return BriqueCommunicationManager;
            }(Services.Components.ComponentManagerBase));
            BriqueCommunication.BriqueCommunicationManager = BriqueCommunicationManager;
            Services.Components.RegistryManager.getInstance().register(BriqueCommunicationManager);
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var Chat;
            (function (Chat) {
                /* istanbul ignore next */
                var ChatManagerBase = /** @class */ (function (_super) {
                    __extends(ChatManagerBase, _super);
                    function ChatManagerBase() {
                        var _this = _super.call(this, Services.Components.ComponentType.Chat) || this;
                        _this.conf_chat_request = null;
                        _this.conf_chat_request_experts = null;
                        _this.conf_chat_rooms = null;
                        _this.storageInstance = null;
                        _this.storageValue = null;
                        _this.storageSaveTimeout = null;
                        _this.chatManagerCanaux = null;
                        _this.onChangeStorage = function (pElement) {
                            //Changement de la liste des chats connus
                            pElement.chats.forEach(function (pChat) {
                                var lChatroom = _this.chatManagerCanaux.getChatRoomById(pChat.chatroom_id);
                                if (!lChatroom) {
                                    //Chat non ouvert, l'ouvre
                                    _this.openChatroom.apply(_this, [pChat.chatroom_id, null].concat(pChat.membres));
                                }
                            });
                        };
                        _this.onChangeAuthentificationInfo = function () {
                            _this.chatManagerCanaux.closeAndOpenAll();
                        };
                        return _this;
                    }
                    ChatManagerBase.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                        var _this = this;
                        return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                            if (!window['JmsConnectionFactory']) {
                                return;
                            }
                            _this.chatManagerCanaux = new Chat.ChatManagerCanaux(pManagerLibrary);
                            return _this.load();
                        });
                    };
                    ChatManagerBase.prototype.sendNotification = function (pEvent, pOnSend) {
                        var lEventMain = {
                            mainEventType: Services.BriqueCommunication.Messages.EVENT_TYPE.CHAT,
                            event: pEvent
                        };
                        var lEvent = new Services.Component.ManagerEvent(Services.Component.ManagerEventType.BriqueCommunication, {
                            chat: lEventMain
                        });
                        lEvent.onSend = pOnSend;
                        this.library.Evennements.notifier(lEvent);
                    };
                    ChatManagerBase.prototype.getCurrentFramePrincipale = function () {
                        if (this.library.Display.CurrentFrame) {
                            if (this.library.Display.CurrentFrame.capaciteChat) {
                                return this.library.Display.CurrentFrame.FrameId;
                            }
                        }
                        var lResult = null;
                        if (this.library.Display.Frames) {
                            this.library.Display.Frames.every(function (pFrame) {
                                if (pFrame.capaciteChat) {
                                    lResult = pFrame.FrameId;
                                }
                                return lResult === null;
                            });
                        }
                        return lResult;
                    };
                    ChatManagerBase.prototype.load = function () {
                        var _this = this;
                        this.storageInstance = this.library.Persistence.addStorage('Chats', this.onChangeStorage);
                        this.chatManagerCanaux.init({
                            fermerChatroom: function (pChatroomId) {
                                _this.closeChat(pChatroomId);
                            },
                            ouvrirChatroom: function (pChatroomId, pDemandeur, pMembresPresents) {
                                pMembresPresents.push(pDemandeur);
                                _this.openChatroom.apply(_this, [pChatroomId, _this.getCurrentFramePrincipale()].concat(pMembresPresents));
                            },
                            notifierChangementListeUtilisateurs: function (pUtilisateurs) {
                                var lHasModifications = false;
                                _this.storageValue.chats.forEach(function (pChat) {
                                    var lNouvelleListeMembres = [];
                                    var lChatroom = _this.chatManagerCanaux.getChatRoomById(pChat.chatroom_id);
                                    pChat.membres.forEach(function (pMembre) {
                                        pUtilisateurs.every(function (pUtilisateur) {
                                            if (pUtilisateur.id === pMembre) {
                                                if (!pUtilisateur.isConnected) {
                                                    //Déconnecte cet utilisateur du chat
                                                    lHasModifications = true;
                                                    if (lChatroom) {
                                                        lChatroom.utilisateurDeconnecte(pMembre);
                                                    }
                                                }
                                                else {
                                                    lNouvelleListeMembres.push(pMembre);
                                                }
                                                return false;
                                            }
                                            return true;
                                        });
                                    });
                                    if (lHasModifications) {
                                        pChat.membres = lNouvelleListeMembres;
                                    }
                                });
                                _this.sendNotification({
                                    eventType: Chat.Messages.EVENT_TYPE.MISE_A_JOUR_LISTE_UTILISATEURS,
                                    utilisateurs: pUtilisateurs
                                });
                            },
                            demanderExpert: function (pChatroomId, pDomaine, pDemandeur) {
                                _this.sendNotification({
                                    eventType: Chat.Messages.EVENT_TYPE.DEMANDE_EXPERT,
                                    chatroom_id: pChatroomId,
                                    expertise: pDomaine,
                                    user_id: pDemandeur
                                });
                            },
                            finDemandeExpert: function (pChatroomId, pDomaine, pExpert) {
                                _this.sendNotification({
                                    eventType: Chat.Messages.EVENT_TYPE.FIN_DEMANDE_EXPERT,
                                    chatroom_id: pChatroomId,
                                    expertise: pDomaine,
                                    user_id: pExpert
                                });
                            }
                        });
                        this.storageValue = this.storageInstance.getValue();
                        if (!this.storageValue) {
                            this.storageValue = {
                                chats: []
                            };
                        }
                        this.onChangeStorage(this.storageValue);
                        this.ajouterListenerEvent(Services.Component.ManagerEventType.ChangementAuthentificationInfo, this.onChangeAuthentificationInfo);
                        this.library.BriqueCommunication.getConfiguration().forEach(function (pConfiguration) {
                            switch (pConfiguration.code) {
                                case "CHAT_REQUEST":
                                    _this.conf_chat_request = pConfiguration;
                                    break;
                                case "CHATROOM":
                                    _this.conf_chat_rooms = pConfiguration;
                                    break;
                                case "CHAT_REQUEST_PROSPECT":
                                    _this.conf_chat_request_experts = pConfiguration;
                                    break;
                            }
                        });
                        return this.library.Core.getPromesseSelfResoved();
                    };
                    ChatManagerBase.prototype.addChatroomReader = function (pChatRoom) {
                        var _this = this;
                        pChatRoom.reader = function (pMessage) {
                            _this.sendNotification({
                                eventType: Chat.Messages.EVENT_TYPE.MESSAGE_RECU,
                                message: pMessage
                            });
                        };
                    };
                    ChatManagerBase.prototype.setChatCapacite = function (pFrame) {
                        var lIFrameId = this.library.Display.getMyIFrameId(pFrame);
                        if (this.library.Display.Frames) {
                            var lEstTrouve = false;
                            this.library.Display.Frames.every(function (pFrame) {
                                if (pFrame.FrameId === lIFrameId) {
                                    pFrame.capaciteChat = true;
                                }
                                return !lEstTrouve;
                            });
                        }
                        if (this.library.Display.CurrentFrame) {
                            this.library.Display.CurrentFrame.capaciteChat = true;
                        }
                    };
                    ChatManagerBase.prototype.getUtilisateurs = function () {
                        return this.chatManagerCanaux.getUtilisateurs();
                    };
                    ChatManagerBase.prototype.setStatut = function (pStatut) {
                        return this.library.BriqueCommunication.setStatutEnLigne(pStatut === Chat.Messages.UTILISATEUR_STATUT.CONNECTE);
                    };
                    ChatManagerBase.prototype.getChatrooms = function (pFrame) {
                        var _this = this;
                        var lIFrameId = this.library.Display.getMyIFrameId(pFrame);
                        return this.library.Core.promesseTryCatch(function (pDefer) {
                            var lResponse = [];
                            _this.chatManagerCanaux.getChatrooms().forEach(function (pChatroom) {
                                lResponse.push({
                                    id: pChatroom.id,
                                    membres: pChatroom.membres,
                                    framePrincipale: pChatroom.framePrincipale,
                                    estFramePrincipale: pChatroom.framePrincipale === lIFrameId,
                                    videoEstEnCours: false
                                });
                            });
                            pDefer.resolve(lResponse);
                        });
                    };
                    ChatManagerBase.prototype.getChatroom = function (pIdChat, pFrame) {
                        var _this = this;
                        var lIFrameId = this.library.Display.getMyIFrameId(pFrame);
                        return this.library.Core.promesseTryCatch(function (pDefer) {
                            var pChatroom = _this.chatManagerCanaux.getChatRoomById(pIdChat);
                            var lResponse = {
                                id: pChatroom.id,
                                membres: pChatroom.membres,
                                framePrincipale: pChatroom.framePrincipale,
                                estFramePrincipale: pChatroom.framePrincipale === lIFrameId,
                                videoEstEnCours: false
                            };
                            pDefer.resolve(lResponse);
                        });
                    };
                    ChatManagerBase.prototype.closeChat = function (pIdChat) {
                        var _this = this;
                        return this.library.Core.promesseTryCatch(function (pDefer) {
                            var lChatRoom = _this.chatManagerCanaux.getChatRoomById(pIdChat);
                            if (lChatRoom === null) {
                                pDefer.reject(new Services.Erreur("Chat room " + pIdChat + " isn't found!"));
                                return;
                            }
                            lChatRoom.writeEnd();
                            lChatRoom.close();
                            _this.chatManagerCanaux.retirerChatroom(lChatRoom);
                            _this.supprimerStorageInstance(pIdChat);
                            _this.sendNotification({
                                eventType: Chat.Messages.EVENT_TYPE.CHAT_FERME,
                                chatroom_id: pIdChat
                            });
                            pDefer.resolve();
                        });
                    };
                    ChatManagerBase.prototype.accepterDemandeExpert = function (pIdChat, pDomaine, pDemandeur, pFrame) {
                        var _this = this;
                        return this.openChatroom(pIdChat, pFrame, pDemandeur).then(function () {
                            _this.chatManagerCanaux.accepterDemandeExpert(pIdChat, pDomaine, pDemandeur);
                        });
                    };
                    ChatManagerBase.prototype.inviterPersonnesAUneChatroom = function (pIdChat) {
                        var _this = this;
                        var pUsers = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            pUsers[_i - 1] = arguments[_i];
                        }
                        return this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                            var lChatroom = _this.chatManagerCanaux.getChatRoomById(pIdChat);
                            if (!lChatroom) {
                                return;
                            }
                            //Commence par mettre à jour la liste des utilisateurs du chat
                            var lMembres = [];
                            lChatroom.membres.forEach(function (pMembre) {
                                lMembres.push(pMembre);
                            });
                            pUsers.forEach(function (pUser) {
                                if (!lChatroom.membresObject[pUser]) {
                                    lMembres.push(pUser);
                                }
                            });
                            pUsers.forEach(function (pUser) {
                                _this.inviterPersonneARejoindreUneChatroomApi.apply(_this, [pIdChat, pUser, pAuthentificationInfo].concat(lMembres));
                            });
                        });
                    };
                    ChatManagerBase.prototype.changerFramePrincipale = function (pChatroomId, pFrame) {
                        var lChatroom = this.chatManagerCanaux.getChatRoomById(pChatroomId);
                        if (!lChatroom) {
                            return;
                        }
                        if (lChatroom.framePrincipale === pFrame) {
                            //Déjà la bonne frame, ignore
                            return;
                        }
                        lChatroom.framePrincipale = pFrame;
                        var lEvent = {
                            eventType: Chat.Messages.EVENT_TYPE.CHAT_OUVERT,
                            chatroom_id: pChatroomId,
                            framePrincipale: lChatroom.framePrincipale,
                            videoEstEnCours: lChatroom.videoEstEnCours,
                            estFramePrincipale: false
                        };
                        this.sendNotification(lEvent, function (pIFrameId) {
                            if (pIFrameId === lChatroom.framePrincipale) {
                                lEvent.estFramePrincipale = true;
                            }
                            else {
                                lEvent.estFramePrincipale = false;
                            }
                            return true;
                        });
                    };
                    ChatManagerBase.prototype.demarrerVideoChatroom = function (pChatroomId) {
                        var lChatroom = this.chatManagerCanaux.getChatRoomById(pChatroomId);
                        if (!lChatroom) {
                            return;
                        }
                        lChatroom.videoEstEnCours = true;
                    };
                    ChatManagerBase.prototype.arreterVideoChatroom = function (pChatroomId) {
                        var lChatroom = this.chatManagerCanaux.getChatRoomById(pChatroomId);
                        if (!lChatroom) {
                            return;
                        }
                        lChatroom.videoEstEnCours = false;
                    };
                    ChatManagerBase.prototype.openChat = function (pDestinataire, pFrame) {
                        var _this = this;
                        var lIFrameId = this.library.Display.getMyIFrameId(pFrame);
                        return this.library.Core.promesseTryCatch(function (pDefer) {
                            //Recherche s'il n'y a pas déjà un Chat avec cette personne
                            var lChatroomDejaOuverte = null;
                            _this.chatManagerCanaux.getChatrooms().every(function (pChatroom) {
                                if (pChatroom.membres.length > 2) {
                                    return;
                                }
                                if (pChatroom.membres[0] === pDestinataire || pChatroom.membres[1] === pDestinataire) {
                                    //Chat déjà ouvert
                                    lChatroomDejaOuverte = pChatroom;
                                }
                                return lChatroomDejaOuverte === null;
                            });
                            if (lChatroomDejaOuverte) {
                                var lResponse = {
                                    id: lChatroomDejaOuverte.id,
                                    membres: lChatroomDejaOuverte.membres,
                                    framePrincipale: lChatroomDejaOuverte.framePrincipale,
                                    estFramePrincipale: lChatroomDejaOuverte.framePrincipale === lIFrameId,
                                    videoEstEnCours: false
                                };
                                pDefer.resolve(lResponse);
                                return;
                            }
                            _this.openChatApi(pDestinataire).then(function (pChatroom) {
                                pChatroom.framePrincipale = lIFrameId;
                                var lResponse = {
                                    id: pChatroom.id,
                                    membres: pChatroom.membres,
                                    framePrincipale: pChatroom.framePrincipale,
                                    estFramePrincipale: pChatroom.framePrincipale === lIFrameId,
                                    videoEstEnCours: false
                                };
                                //Enregistre les videosrooms ouvertes
                                _this.enregistrerVideoroomsOuvertes(pChatroom);
                                _this.chatManagerCanaux.ajouterChatroom(pChatroom);
                                _this.addChatroomReader(pChatroom);
                                _this.sendNotification({
                                    eventType: Chat.Messages.EVENT_TYPE.CHAT_OUVERT,
                                    chatroom_id: pChatroom.id,
                                    membres: pChatroom.membres,
                                    framePrincipale: pChatroom.framePrincipale,
                                    estFramePrincipale: pChatroom.framePrincipale === lIFrameId
                                });
                                pDefer.resolve(lResponse);
                            }, pDefer.reject);
                        });
                    };
                    ChatManagerBase.prototype.openChatroom = function (pIdChat, pFrame) {
                        var _this = this;
                        var pMembres = [];
                        for (var _i = 2; _i < arguments.length; _i++) {
                            pMembres[_i - 2] = arguments[_i];
                        }
                        var lIFrameId = null;
                        if (typeof pFrame === "string") {
                            lIFrameId = pFrame;
                        }
                        else {
                            lIFrameId = this.library.Display.getMyIFrameId(pFrame);
                        }
                        return this.library.Core.promesseTryCatch(function (pDefer) {
                            var lChatroomDejaOuverte = _this.chatManagerCanaux.getChatRoomById(pIdChat);
                            if (lChatroomDejaOuverte) {
                                var lResponse = {
                                    id: lChatroomDejaOuverte.id,
                                    membres: lChatroomDejaOuverte.membres,
                                    framePrincipale: lChatroomDejaOuverte.framePrincipale,
                                    estFramePrincipale: lChatroomDejaOuverte.framePrincipale === lIFrameId,
                                    videoEstEnCours: false
                                };
                                pDefer.resolve(lResponse);
                                return;
                            }
                            _this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                                var lIdAgent = "agent-S" + _this.library.Core.StringUtils.leftPad(pAuthentificationInfo.agentConnecte.referenceExterneAgent, "0", 7);
                                var lParameters = [pIdChat];
                                if (pMembres) {
                                    pMembres.forEach(function (pMembre) {
                                        lParameters.push(pMembre);
                                    });
                                }
                                _this.openTchatroomApi.apply(_this, [pIdChat].concat(pMembres)).then(function (pChatroom) {
                                    pChatroom.framePrincipale = lIFrameId;
                                    //Signale l'acceptation d'entrée en chat
                                    pChatroom.writeResponse(true);
                                    var lResponse = {
                                        id: pChatroom.id,
                                        membres: pChatroom.membres,
                                        framePrincipale: pChatroom.framePrincipale,
                                        estFramePrincipale: pChatroom.framePrincipale === lIFrameId,
                                        videoEstEnCours: false
                                    };
                                    var lDestinataire = null;
                                    if (pMembres) {
                                        pMembres.forEach(function (pMembre) {
                                            lDestinataire = pMembre;
                                        });
                                    }
                                    //Enregistre les videosrooms ouvertes
                                    _this.enregistrerVideoroomsOuvertes(pChatroom);
                                    _this.chatManagerCanaux.ajouterChatroom(pChatroom);
                                    _this.addChatroomReader(pChatroom);
                                    _this.sendNotification({
                                        eventType: Chat.Messages.EVENT_TYPE.CHAT_OUVERT,
                                        chatroom_id: pChatroom.id,
                                        membres: pChatroom.membres,
                                        framePrincipale: pChatroom.framePrincipale,
                                        estFramePrincipale: pChatroom.framePrincipale === lIFrameId
                                    });
                                    pDefer.resolve(lResponse);
                                }, pDefer.reject);
                            }, pDefer.reject);
                        });
                    };
                    ChatManagerBase.prototype.enregistrerVideoroomsOuvertes = function (pChatroom) {
                        var _this = this;
                        var lCallbackAjouterVideoroom = function (pMembre) {
                            if (!pChatroom.membresObject[pMembre]) {
                                var lEvent = {
                                    eventType: Chat.Messages.EVENT_TYPE.UTILISATEUR_CONNECTE_A_CHAT,
                                    chatroom_id: pChatroom.id,
                                    user_id: pMembre,
                                    framePrincipale: pChatroom.framePrincipale,
                                    estFramePrincipale: false
                                };
                                _this.sendNotification(lEvent, function (pIFrameId) {
                                    if (pIFrameId === pChatroom.framePrincipale) {
                                        lEvent.estFramePrincipale = true;
                                    }
                                    else {
                                        lEvent.estFramePrincipale = false;
                                    }
                                    return true;
                                });
                            }
                            var lOldWriter = pChatroom.videosrooms[pMembre].canal.writer;
                            pChatroom.videosrooms[pMembre].canal.writer = function (pMessage) {
                                var lContent = JSON.parse(pMessage);
                                ChatManagerBase.logger.debug("Envoi d'un message sur la chatroom %1 : %2", pChatroom.id, JSON.pruned(lContent));
                                lOldWriter(lContent);
                            };
                            pChatroom.videosrooms[pMembre].canal.reader = function (pMessage) {
                                ChatManagerBase.logger.debug("Reception d'un message sur la chatroom %1 : %2", pChatroom.id, JSON.pruned(pMessage));
                                _this.sendMessage(Chat.ChatMessageSubject.WebRTC, {
                                    chatroom_id: pChatroom.id,
                                    user_id: pMembre,
                                    content: pMessage
                                });
                            };
                        };
                        pChatroom.utilisateurConnecte = function (pUserId) {
                            var lEvent = {
                                eventType: Chat.Messages.EVENT_TYPE.UTILISATEUR_CONNECTE_A_CHAT,
                                chatroom_id: pChatroom.id,
                                user_id: pUserId,
                                framePrincipale: pChatroom.framePrincipale,
                                estFramePrincipale: false
                            };
                            _this.sendNotification(lEvent, function (pIFrameId) {
                                if (pIFrameId === pChatroom.framePrincipale) {
                                    lEvent.estFramePrincipale = true;
                                }
                                else {
                                    lEvent.estFramePrincipale = false;
                                }
                                return true;
                            });
                            _this.ajouterStorageInstance(pChatroom);
                        };
                        pChatroom.utilisateurDeconnecte = function (pUserId) {
                            _this.sendNotification({
                                eventType: Chat.Messages.EVENT_TYPE.UTILISATEUR_DECONNECTE_A_CHAT,
                                chatroom_id: pChatroom.id,
                                user_id: pUserId
                            });
                            _this.ajouterStorageInstance(pChatroom);
                        };
                        pChatroom.videoroomAjoutee = function (pVideoroom, pUserId) {
                            lCallbackAjouterVideoroom(pUserId);
                        };
                        pChatroom.membres.forEach(function (pMembre) {
                            //Enregistre les videosrooms ouvertes
                            if (pChatroom.videosrooms[pMembre]) {
                                lCallbackAjouterVideoroom(pMembre);
                            }
                        });
                        this.ajouterStorageInstance(pChatroom);
                    };
                    ChatManagerBase.prototype.sendMessageToStream = function (pIdChat, pMessage) {
                        var _this = this;
                        return this.library.Core.promesseTryCatch(function (pDefer) {
                            var lChatRoom = _this.chatManagerCanaux.getChatRoomById(pIdChat);
                            if (lChatRoom === null) {
                                pDefer.reject(new Services.Erreur("Chat room " + pIdChat + " isn't found!"));
                                return;
                            }
                            lChatRoom.writeMessage(pMessage);
                            pDefer.resolve();
                        });
                    };
                    ChatManagerBase.prototype.envoyerMessageVideoroom = function (pChatId, pUserId, pMessage) {
                        var _this = this;
                        return this.library.Core.promesseTryCatch(function (pDefer) {
                            var lChatroom = _this.chatManagerCanaux.getChatRoomById(pChatId);
                            if (lChatroom === null) {
                                pDefer.reject(new Services.Erreur("Chat room " + pChatId + " isn't found!"));
                                return;
                            }
                            var lVideoroom = lChatroom.videosrooms[pUserId];
                            if (!lVideoroom) {
                                pDefer.reject(new Services.Erreur("Video room " + pChatId + " to user " + pUserId + " isn't found!"));
                                return;
                            }
                            lVideoroom.canal.writer(pMessage);
                            pDefer.resolve();
                        });
                    };
                    ChatManagerBase.prototype.demarrerVideo = function (pIdChat) {
                        var _this = this;
                        return this.library.Core.promesseTryCatch(function (pDefer) {
                            var lChatroom = _this.chatManagerCanaux.getChatRoomById(pIdChat);
                            if (!lChatroom) {
                                pDefer.reject(new Services.Erreur("Chat " + pIdChat + " not found!"));
                                return;
                            }
                            lChatroom.membres.forEach(function (pMembre) {
                                var lVideoroom = lChatroom.videosrooms[pMembre];
                                if (!lVideoroom) {
                                    return;
                                }
                                lVideoroom.start();
                            });
                        });
                    };
                    ChatManagerBase.prototype.arreterVideo = function (pIdChat) {
                        var _this = this;
                        return this.library.Core.promesseTryCatch(function (pDefer) {
                            var lChatroom = _this.chatManagerCanaux.getChatRoomById(pIdChat);
                            if (!lChatroom) {
                                pDefer.reject(new Services.Erreur("Chat " + pIdChat + " not found!"));
                                return;
                            }
                            lChatroom.membres.forEach(function (pMembre) {
                                var lVideoroom = lChatroom.videosrooms[pMembre];
                                if (!lVideoroom) {
                                    return;
                                }
                                lVideoroom.stop();
                            });
                        });
                    };
                    ChatManagerBase.prototype.saveStorageValue = function () {
                        var _this = this;
                        //Diffère la sauvegarde pour éviter des écritures multiples simultanées
                        if (this.storageSaveTimeout !== null) {
                            window.clearTimeout(this.storageSaveTimeout);
                            this.storageSaveTimeout = null;
                        }
                        this.storageSaveTimeout = window.setTimeout(function () {
                            _this.storageInstance.saveValue(_this.storageValue);
                        }, 100);
                    };
                    ChatManagerBase.prototype.ajouterStorageInstance = function (pChatroom) {
                        var lStorageInstance = this.getStorageInstance(pChatroom.id);
                        if (!lStorageInstance) {
                            lStorageInstance = {
                                chatroom_id: pChatroom.id,
                                membres: []
                            };
                            this.storageValue.chats.push(lStorageInstance);
                        }
                        lStorageInstance.membres = pChatroom.membres;
                        this.saveStorageValue();
                    };
                    ChatManagerBase.prototype.supprimerStorageInstance = function (pChatroom_id) {
                        var lEstTrouve = false;
                        for (var i = 0; i < (this.storageValue.chats.length - 1); i++) {
                            if (this.storageValue.chats[i].chatroom_id === pChatroom_id) {
                                lEstTrouve = true;
                            }
                            if (lEstTrouve) {
                                this.storageValue.chats[i] = this.storageValue.chats[i + 1];
                            }
                        }
                        if (lEstTrouve || this.storageValue.chats[this.storageValue.chats.length - 1].chatroom_id === pChatroom_id) {
                            this.storageValue.chats.length--;
                        }
                        this.saveStorageValue();
                    };
                    ChatManagerBase.prototype.getStorageInstance = function (pChatroom_id) {
                        var lChatCherche = null;
                        this.storageValue.chats.every(function (pChat) {
                            if (pChat.chatroom_id === pChatroom_id) {
                                lChatCherche = pChat;
                            }
                            return lChatCherche === null;
                        });
                        return lChatCherche;
                    };
                    //API
                    ChatManagerBase.prototype.ecouterCanalDeDemandeApi = function (pIdUtilisateur) {
                        var _this = this;
                        return this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                            return _this.library.BriqueCommunication.ouvrirCanal(_this.conf_chat_request.url, _this.library.BriqueCommunication.replaceTokens(_this.conf_chat_request.destination, { "user_id": pIdUtilisateur }), { readable: true, writable: false }, pAuthentificationInfo).then(function (pCanal) {
                                return pCanal;
                            });
                        });
                    };
                    ChatManagerBase.prototype.ecouterCanalExpertiseApi = function (pDomaine) {
                        var _this = this;
                        return this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                            return _this.library.BriqueCommunication.ouvrirCanal(_this.conf_chat_request_experts.url, _this.library.BriqueCommunication.replaceTokens(_this.conf_chat_request_experts.destination, { "domain": pDomaine }), { readable: true, writable: true }, pAuthentificationInfo).then(function (pCanal) {
                                return pCanal;
                            });
                        });
                    };
                    ;
                    ChatManagerBase.prototype.inviterPersonneARejoindreUneChatroomApi = function (pChatroomId, pUserDestinataire, pAuthentificationInfo) {
                        var pMembresConnus = [];
                        for (var _i = 3; _i < arguments.length; _i++) {
                            pMembresConnus[_i - 3] = arguments[_i];
                        }
                        var lIdAgentMe = "agent-S" + this.library.Core.StringUtils.leftPad(pAuthentificationInfo.agentConnecte.referenceExterneAgent, "0", 7);
                        this.library.BriqueCommunication.ouvrirCanal(this.conf_chat_request.url, this.library.BriqueCommunication.replaceTokens(this.conf_chat_request.destination, { "user_id": pUserDestinataire }), { readable: false, writable: true }, pAuthentificationInfo).then(function (pControlleur) {
                            var lDemandeConnexion = {
                                chatroom_id: pChatroomId,
                                type: "request",
                                user_id: lIdAgentMe,
                                users_ids: pMembresConnus
                            };
                            pControlleur.writer(lDemandeConnexion);
                            pControlleur.close();
                        });
                    };
                    ChatManagerBase.prototype.openChatApi = function (pUserDestinataire) {
                        var _this = this;
                        var lRoomId = this.generateRoomId();
                        return this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                            return _this.openTchatroomApi(lRoomId, pUserDestinataire).then(function (pChat) {
                                if (!pChat.membresObject[pUserDestinataire]) {
                                    pChat.membres.push(pUserDestinataire);
                                    pChat.membresObject[pUserDestinataire] = true;
                                }
                                _this.inviterPersonneARejoindreUneChatroomApi(lRoomId, pUserDestinataire, pAuthentificationInfo);
                                return pChat;
                            });
                        });
                    };
                    ChatManagerBase.prototype.openTchatroomApi = function (pChatroomId) {
                        var _this = this;
                        var pMembres = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            pMembres[_i - 1] = arguments[_i];
                        }
                        return this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                            var lIdAgentMe = "agent-S" + _this.library.Core.StringUtils.leftPad(pAuthentificationInfo.agentConnecte.referenceExterneAgent, "0", 7);
                            var lChatRoom = {
                                membres: [],
                                membresObject: {},
                                myUserId: lIdAgentMe,
                                id: pChatroomId,
                                close: null,
                                reader: null,
                                writeMessage: null,
                                writeResponse: null,
                                writeEnd: null,
                                videosrooms: {},
                                videoroomAjoutee: null,
                                utilisateurConnecte: null,
                                utilisateurDeconnecte: null,
                                framePrincipale: null,
                                videoEstEnCours: false
                            };
                            lChatRoom.membres.push(lIdAgentMe);
                            lChatRoom.membresObject[lIdAgentMe] = true;
                            if (pMembres) {
                                pMembres.forEach(function (pMembre) {
                                    if (lChatRoom.membresObject[pMembre]) {
                                        return;
                                    }
                                    lChatRoom.membres.push(pMembre);
                                    lChatRoom.membresObject[pMembre] = true;
                                });
                            }
                            var lReaderChat = function (pMessage) {
                                if (!lChatRoom.membresObject[pMessage.user_id]) {
                                    if (pMessage.type === "response" && !pMessage.accepted) {
                                        //Entrée non acceptée, ignore l'utilisateur
                                        return;
                                    }
                                    lChatRoom.membres.push(pMessage.user_id);
                                    lChatRoom.membresObject[pMessage.user_id] = true;
                                    if (lChatRoom.utilisateurConnecte) {
                                        lChatRoom.utilisateurConnecte(pMessage.user_id);
                                    }
                                    if (pMessage.user_id !== lIdAgentMe) {
                                        _this.ouvrirCanalVideoApi(lChatRoom, pMessage.user_id).then(function (pCanalVideo) {
                                            lChatRoom.videosrooms[pMessage.user_id] = pCanalVideo;
                                            if (lChatRoom.videoroomAjoutee) {
                                                lChatRoom.videoroomAjoutee(pCanalVideo, pMessage.user_id);
                                            }
                                        });
                                    }
                                }
                                if (pMessage.type === "end") {
                                    //Un utilisateur a quitté le chat
                                    if (lChatRoom.membresObject[pMessage.user_id]) {
                                        var lUtilisateurEstTrouve = false;
                                        for (var lIndex = 0; lIndex < (lChatRoom.membres.length - 1); lIndex++) {
                                            if (lChatRoom.membres[lIndex] === pMessage.user_id) {
                                                lUtilisateurEstTrouve = true;
                                            }
                                            if (lUtilisateurEstTrouve) {
                                                lChatRoom.membres[lIndex] = lChatRoom.membres[lIndex + 1];
                                            }
                                        }
                                        if (lUtilisateurEstTrouve || lChatRoom.membres[lChatRoom.membres.length - 1] === pMessage.user_id) {
                                            lChatRoom.membres.length--;
                                        }
                                        delete lChatRoom.membresObject[pMessage.user_id];
                                        if (lChatRoom.utilisateurDeconnecte) {
                                            lChatRoom.utilisateurDeconnecte(pMessage.user_id);
                                        }
                                    }
                                    return;
                                }
                                if (pMessage.type === "message" && lChatRoom.reader) {
                                    lChatRoom.reader(pMessage);
                                }
                            };
                            return _this.library.BriqueCommunication.ouvrirCanal(_this.conf_chat_rooms.url, _this.library.BriqueCommunication.replaceTokens(_this.conf_chat_rooms.destination, { "chatroom_id": pChatroomId }), { readable: true, writable: true }, pAuthentificationInfo).then(function (pControlleur) {
                                pControlleur.reader = lReaderChat;
                                lChatRoom.membres.forEach(function (pMembre) {
                                    if (pMembre !== lIdAgentMe) {
                                        _this.ouvrirCanalVideoApi(lChatRoom, pMembre).then(function (pCanalVideo) {
                                            lChatRoom.videosrooms[pMembre] = pCanalVideo;
                                            if (lChatRoom.videoroomAjoutee) {
                                                lChatRoom.videoroomAjoutee(pCanalVideo, pMembre);
                                            }
                                        });
                                    }
                                });
                                lChatRoom.close = function () {
                                    lChatRoom.membres.forEach(function (pMembre) {
                                        if (lChatRoom.videosrooms[pMembre]) {
                                            lChatRoom.videosrooms[pMembre].canal.close();
                                        }
                                    });
                                    pControlleur.close();
                                };
                                lChatRoom.writeMessage = function (pMessage) {
                                    pControlleur.writer({
                                        chatroom_id: pChatroomId,
                                        message: pMessage,
                                        type: "message",
                                        user_id: lIdAgentMe
                                    });
                                };
                                lChatRoom.writeResponse = function (pEstAccepte) {
                                    pControlleur.writer({
                                        chatroom_id: pChatroomId,
                                        accepted: pEstAccepte,
                                        type: "response",
                                        user_id: lIdAgentMe
                                    });
                                };
                                lChatRoom.writeEnd = function () {
                                    pControlleur.writer({
                                        chatroom_id: pChatroomId,
                                        type: "end",
                                        user_id: lIdAgentMe
                                    });
                                };
                                return lChatRoom;
                            });
                        });
                    };
                    ChatManagerBase.prototype.ouvrirCanalVideoApi = function (pChatRoom, pUserId) {
                        var _this = this;
                        var lChatroomUrl = this.library.BriqueCommunication.replaceTokens(this.conf_chat_rooms.destination, { "chatroom_id": pChatRoom.id });
                        var lIdVideoroom = null;
                        if (pChatRoom.myUserId.localeCompare(pUserId) < 0) {
                            lIdVideoroom = pChatRoom.myUserId + "_" + pUserId;
                        }
                        else {
                            lIdVideoroom = pUserId + "_" + pChatRoom.myUserId;
                        }
                        var lVideoroomUrl = lChatroomUrl + "/webrtc/" + lIdVideoroom;
                        ChatManagerBase.logger.debug("Ouverture vidéo vers %1", lVideoroomUrl);
                        return this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                            return _this.library.BriqueCommunication.ouvrirCanal(_this.conf_chat_rooms.url, lVideoroomUrl, { readable: true, writable: true }, pAuthentificationInfo).then(function (pCanalControleur) {
                                return {
                                    start: null,
                                    stop: null,
                                    canal: pCanalControleur
                                };
                            });
                        });
                    };
                    ChatManagerBase.prototype.generateRoomId = function () {
                        return Math.random().toString(36).substring(2);
                    };
                    ChatManagerBase.CLASS_NAME = 'MyWay.Services.BriqueCommunication.Chat.ChatManagerBase';
                    ChatManagerBase.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ChatManagerBase.CLASS_NAME);
                    return ChatManagerBase;
                }(Services.Components.ComponentManagerBase));
                Chat.ChatManagerBase = ChatManagerBase;
                Services.Components.RegistryManager.getInstance().register(ChatManagerBase);
            })(Chat = BriqueCommunication.Chat || (BriqueCommunication.Chat = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var Chat;
            (function (Chat) {
                var ChatManagerCanaux = /** @class */ (function () {
                    function ChatManagerCanaux(library) {
                        this.library = library;
                        this.listenerOnChangeAuthentificationInfo = null;
                        this.currentCodeAgent = null;
                        this.currentCodeEtablissement = null;
                        this.doitEcouterMiseAJourListeUtilisateurs = false;
                        this.utilisateurs = null;
                        this.currentListenerListeUtilisateurs = null;
                        this.promessesGetUtilisateursEnAttente = [];
                        this.doitEcouterCanalDemandeChat = true;
                        this.currentListenerDemandeChat = null;
                        this.currentCanauxEcouteExpertises = [];
                        this.currentCanauxEcouteExpertisesParDomaine = {};
                        this.chatrooms = [];
                        this.controleur = null;
                    }
                    ChatManagerCanaux.prototype.init = function (pControleur) {
                        this.controleur = pControleur;
                        this.closeAndOpenAll();
                    };
                    ChatManagerCanaux.prototype.Dispose = function () {
                        var _this = this;
                        if (this.currentListenerListeUtilisateurs !== null) {
                            this.currentListenerListeUtilisateurs.close();
                            this.currentListenerListeUtilisateurs = null;
                        }
                        if (this.currentListenerDemandeChat !== null) {
                            this.currentListenerDemandeChat.close();
                            this.currentListenerDemandeChat = null;
                        }
                        this.chatrooms.forEach(function (pChatroom) {
                            _this.controleur.fermerChatroom(pChatroom.id);
                        });
                    };
                    ChatManagerCanaux.prototype.closeAndOpenAll = function () {
                        var _this = this;
                        this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                            var lNouveauCodeAgent = null;
                            var lNouveauCodeEtablissement = null;
                            if (pAuthentificationInfo) {
                                lNouveauCodeAgent = pAuthentificationInfo.agentConnecte.referenceExterneAgent;
                                lNouveauCodeEtablissement = pAuthentificationInfo.codeEtablissement;
                            }
                            if (_this.currentCodeAgent !== lNouveauCodeAgent && _this.currentListenerListeUtilisateurs !== null) {
                                _this.currentListenerListeUtilisateurs.close();
                                _this.currentListenerListeUtilisateurs = null;
                            }
                            if (_this.currentCodeEtablissement !== lNouveauCodeEtablissement && _this.currentListenerDemandeChat !== null) {
                                _this.currentListenerDemandeChat.close();
                                _this.currentListenerDemandeChat = null;
                            }
                            if (pAuthentificationInfo) {
                                if (_this.currentCodeAgent !== lNouveauCodeAgent) {
                                    //Changement de code agent, ferme toutes les chatroom en cours
                                    _this.chatrooms.forEach(function (pChatroom) {
                                        _this.controleur.fermerChatroom(pChatroom.id);
                                    });
                                    //Ferme aussi les canaux d'écoute sur les domaines d'expertise
                                    _this.currentCanauxEcouteExpertises.forEach(function (pCanal) {
                                        pCanal.canal.close();
                                        delete _this.currentCanauxEcouteExpertisesParDomaine[pCanal.domaine];
                                    });
                                    if (_this.doitEcouterMiseAJourListeUtilisateurs) {
                                        _this.ecouterMiseAJourListeUtilisateurs(pAuthentificationInfo.codeEtablissement);
                                    }
                                    _this.ecouterCanauxExpertises();
                                    _this.currentCodeAgent = lNouveauCodeAgent;
                                }
                                if (_this.currentCodeEtablissement !== lNouveauCodeEtablissement && _this.doitEcouterCanalDemandeChat) {
                                    _this.ecouterCanalDeDemande(pAuthentificationInfo.agentConnecte.referenceExterneAgent);
                                    _this.currentCodeEtablissement = lNouveauCodeEtablissement;
                                }
                            }
                        });
                    };
                    ChatManagerCanaux.prototype.getUtilisateurs = function () {
                        var _this = this;
                        this.doitEcouterMiseAJourListeUtilisateurs = true;
                        return this.library.Core.promesseTryCatch(function (pDefer) {
                            if (_this.promessesGetUtilisateursEnAttente === null) {
                                pDefer.resolve(_this.utilisateurs);
                                return;
                            }
                            if (_this.promessesGetUtilisateursEnAttente.length > 0) {
                                //Déjà une demande en cours
                                _this.promessesGetUtilisateursEnAttente.push(pDefer);
                                return;
                            }
                            else {
                                _this.promessesGetUtilisateursEnAttente.push(pDefer);
                            }
                            _this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                                _this.ecouterMiseAJourListeUtilisateurs(pAuthentificationInfo.codeEtablissement).then(function () {
                                    _this.promessesGetUtilisateursEnAttente.forEach(function (pDeferEnAttente) {
                                        pDeferEnAttente.resolve(_this.utilisateurs);
                                    });
                                    _this.promessesGetUtilisateursEnAttente = null;
                                }, pDefer.reject);
                            }, pDefer.reject);
                        });
                    };
                    ChatManagerCanaux.prototype.getChatrooms = function () {
                        return this.chatrooms;
                    };
                    ChatManagerCanaux.prototype.ajouterChatroom = function (pChatroom) {
                        this.chatrooms.push(pChatroom);
                    };
                    ChatManagerCanaux.prototype.retirerChatroom = function (pChatroom) {
                        var lEstTrouve = false;
                        for (var i = 0; i < (this.chatrooms.length - 1); i++) {
                            if (this.chatrooms[i].id === pChatroom.id) {
                                lEstTrouve = true;
                            }
                            if (lEstTrouve) {
                                this.chatrooms[i] = this.chatrooms[i + 1];
                            }
                        }
                        if (lEstTrouve || this.chatrooms[this.chatrooms.length - 1].id === pChatroom.id) {
                            this.chatrooms.length--;
                        }
                    };
                    ChatManagerCanaux.prototype.getChatRoomById = function (pIdChat) {
                        var lResult = null;
                        this.chatrooms.every(function (pChatroom) {
                            if (pChatroom.id === pIdChat) {
                                lResult = pChatroom;
                            }
                            return lResult === null;
                        });
                        return lResult;
                    };
                    ChatManagerCanaux.prototype.accepterDemandeExpert = function (pIdChat, pDomaine, pDemandeur) {
                        if (!this.currentCanauxEcouteExpertisesParDomaine[pDomaine]) {
                            return;
                        }
                        var lInfosAgent = this.library.BriqueCommunication.getInfosAgentCourant();
                        this.currentCanauxEcouteExpertisesParDomaine[pDomaine].canal.writer({
                            type: "response",
                            accepted: true,
                            chatroom_id: pIdChat,
                            date: Date.now(),
                            domain: pDomaine,
                            user_id: lInfosAgent.userid
                        });
                    };
                    ChatManagerCanaux.prototype.ecouterCanauxExpertises = function () {
                        var _this = this;
                        var lInfosAgent = this.library.BriqueCommunication.getInfosAgentCourant();
                        if (lInfosAgent.type === BriqueCommunication.InfosAgentType.EXPERT) {
                            //Doit regarder les domaines d'expertise
                            var lExpertises = lInfosAgent.preferences.expertises;
                            lExpertises.forEach(function (pDomaine) {
                                _this.library.Chat.ecouterCanalExpertiseApi(pDomaine).then(function (pCanalExpertise) {
                                    _this.currentCanauxEcouteExpertisesParDomaine[pDomaine] = {
                                        canal: pCanalExpertise,
                                        domaine: pDomaine
                                    };
                                    _this.currentCanauxEcouteExpertises.push(_this.currentCanauxEcouteExpertisesParDomaine[pDomaine]);
                                    pCanalExpertise.reader = function (pMessageRequest) {
                                        switch (pMessageRequest.type) {
                                            case "request":
                                                //Demande d'expert
                                                var lDemande = pMessageRequest;
                                                _this.controleur.demanderExpert(lDemande.chatroom_id, lDemande.domain, lDemande.user_id);
                                                break;
                                            case "response":
                                                //Un expert a pris la demande
                                                var lResponse = pMessageRequest;
                                                _this.controleur.finDemandeExpert(lResponse.chatroom_id, lResponse.domain, lResponse.user_id);
                                                break;
                                        }
                                    };
                                });
                            });
                        }
                    };
                    ChatManagerCanaux.prototype.ecouterMiseAJourListeUtilisateurs = function (pEtablissement) {
                        var _this = this;
                        return this.library.Core.promesseTryCatch(function (pDefer) {
                            var lCanalAllUsers = null;
                            var lCanalConnectes = null;
                            var lUsersById = {};
                            _this.utilisateurs = [];
                            var lResult = {
                                close: function () {
                                    _this.currentListenerListeUtilisateurs = null;
                                    lCanalAllUsers.close();
                                    lCanalConnectes.close();
                                }
                            };
                            var lCallbackNotification = function () {
                                _this.controleur.notifierChangementListeUtilisateurs(_this.utilisateurs);
                            };
                            var lReaderAllUsers = function (pMessage) {
                                pMessage.forEach(function (pUser) {
                                    if (pUser.establishment !== pEtablissement) {
                                        //Autre établissement, l'ignore
                                        return;
                                    }
                                    if (lUsersById[pUser.userid]) {
                                        //Utilisateur déjà connu, l'ignore
                                        return;
                                    }
                                    var lNomPrenomFonctionCaisse = pUser.label;
                                    var lDecoupe = lNomPrenomFonctionCaisse.match(/^([^ ]+) ([^-]+)/);
                                    var lNom = (lDecoupe.length >= 3) ? lDecoupe[2].trim() : "?";
                                    var lPrenom = (lDecoupe.length >= 2) ? lDecoupe[1].trim() : "?";
                                    //Nouvel utilisateur, l'enregistre
                                    var lUser = {
                                        id: pUser.userid,
                                        isConnected: false,
                                        nom: lNom,
                                        prenom: lPrenom,
                                        type: null
                                    };
                                    switch (pUser.type) {
                                        case BriqueCommunication.InfosAgentType.ADVISER: {
                                            lUser.type = Chat.Messages.UTILISATEUR_TYPE.CONSEILLER;
                                            break;
                                        }
                                        case BriqueCommunication.InfosAgentType.CLIENT: {
                                            lUser.type = Chat.Messages.UTILISATEUR_TYPE.CLIENT;
                                            break;
                                        }
                                        case BriqueCommunication.InfosAgentType.EXPERT: {
                                            lUser.type = Chat.Messages.UTILISATEUR_TYPE.EXPERT;
                                            break;
                                        }
                                        case BriqueCommunication.InfosAgentType.PROSPECT: {
                                            lUser.type = Chat.Messages.UTILISATEUR_TYPE.PROSPECT;
                                            break;
                                        }
                                    }
                                    lUsersById[lUser.id] = lUser;
                                    _this.utilisateurs.push(lUser);
                                });
                                //Envoie les données
                                lCallbackNotification();
                            };
                            var lReaderConnectes = function (pMessage) {
                                //Memorise les utilisateurs actuellement connus en ligne
                                var lUserActuellementEnLigne = [];
                                var lUserActuellementEnLigneById = {};
                                _this.utilisateurs.forEach(function (pUser) {
                                    lUserActuellementEnLigne.push(pUser);
                                    lUserActuellementEnLigneById[pUser.id] = pUser;
                                });
                                pMessage.forEach(function (pUser) {
                                    if (pUser.establishment !== pEtablissement) {
                                        //Autre établissement, l'ignore
                                        return;
                                    }
                                    if (lUsersById[pUser.userid]) {
                                        //Utilisateur déjà connu, le mets à jour
                                        lUsersById[pUser.userid].isConnected = true;
                                    }
                                    else {
                                        //Nouvel utilisateur, l'enregistre
                                        var lNomPrenomFonctionCaisse = pUser.label;
                                        var lDecoupe = lNomPrenomFonctionCaisse.match(/^([^ ]+) ([^-]+)/);
                                        var lNom = (lDecoupe.length >= 3) ? lDecoupe[2].trim() : "?";
                                        var lPrenom = (lDecoupe.length >= 2) ? lDecoupe[1].trim() : "?";
                                        var lUser = {
                                            id: pUser.userid,
                                            isConnected: true,
                                            nom: lNom,
                                            prenom: lPrenom,
                                            type: null
                                        };
                                        switch (pUser.type) {
                                            case BriqueCommunication.InfosAgentType.ADVISER: {
                                                lUser.type = Chat.Messages.UTILISATEUR_TYPE.CONSEILLER;
                                                break;
                                            }
                                            case BriqueCommunication.InfosAgentType.CLIENT: {
                                                lUser.type = Chat.Messages.UTILISATEUR_TYPE.CLIENT;
                                                break;
                                            }
                                            case BriqueCommunication.InfosAgentType.EXPERT: {
                                                lUser.type = Chat.Messages.UTILISATEUR_TYPE.EXPERT;
                                                break;
                                            }
                                            case BriqueCommunication.InfosAgentType.PROSPECT: {
                                                lUser.type = Chat.Messages.UTILISATEUR_TYPE.PROSPECT;
                                                break;
                                            }
                                        }
                                        lUsersById[lUser.id] = lUser;
                                        _this.utilisateurs.push(lUser);
                                    }
                                    //Supprime cet user de la liste des utilisateurs connus
                                    delete lUserActuellementEnLigneById[pUser.userid];
                                });
                                //Passe "hors ligne" les utilisateurs qui n'ont pas été receptionnés ici
                                lUserActuellementEnLigne.forEach(function (pUser) {
                                    if (!lUserActuellementEnLigneById[pUser.id]) {
                                        //L'utilisateur est toujours en ligne
                                        return;
                                    }
                                    pUser.isConnected = false;
                                });
                                //Envoie les données
                                lCallbackNotification();
                            };
                            _this.library.BriqueCommunication.getUtilisateurs().then(function (pCanal) {
                                lCanalAllUsers = pCanal;
                                lCanalAllUsers.reader = lReaderAllUsers;
                                if (lCanalConnectes) {
                                    _this.currentListenerListeUtilisateurs = lResult;
                                    pDefer.resolve();
                                }
                            });
                            _this.library.BriqueCommunication.getUtilisateursConnectes().then(function (pCanal) {
                                lCanalConnectes = pCanal;
                                lCanalConnectes.reader = lReaderConnectes;
                                if (lCanalAllUsers) {
                                    _this.currentListenerListeUtilisateurs = lResult;
                                    pDefer.resolve();
                                }
                            });
                        });
                    };
                    ChatManagerCanaux.prototype.ecouterCanalDeDemande = function (pCodeAgent) {
                        var _this = this;
                        this.doitEcouterCanalDemandeChat = true;
                        return this.library.Core.promesseTryCatch(function (pDefer) {
                            //Ecoute tout client qui demande une connexion
                            var lReader = function (pMessage) {
                                if (pMessage.type === "request") {
                                    //Demande de tchat, se connecte sur la room
                                    _this.controleur.ouvrirChatroom(pMessage.chatroom_id, pMessage.user_id, pMessage.users_ids);
                                }
                            };
                            var lIdAgent = "agent-S" + _this.library.Core.StringUtils.leftPad(pCodeAgent, "0", 7);
                            _this.library.Chat.ecouterCanalDeDemandeApi(lIdAgent).then(function (pCanal) {
                                pCanal.reader = lReader;
                                _this.currentListenerDemandeChat = pCanal;
                                pDefer.resolve(pCanal);
                            }, pDefer.reject);
                        });
                    };
                    return ChatManagerCanaux;
                }());
                Chat.ChatManagerCanaux = ChatManagerCanaux;
            })(Chat = BriqueCommunication.Chat || (BriqueCommunication.Chat = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var Notification;
            (function (Notification) {
                /* istanbul ignore next */
                var NotificationManagerBase = /** @class */ (function (_super) {
                    __extends(NotificationManagerBase, _super);
                    function NotificationManagerBase() {
                        var _this = _super.call(this, Services.Components.ComponentType.Notification) || this;
                        _this.CONF_NOTIFICATIONS = null;
                        _this.subjetsConnected = [];
                        _this.subjetsConnectedByName = {};
                        _this.subjects = null;
                        _this.subjectsByName = {};
                        _this.storageInstance = null;
                        _this.abonnements = null;
                        /**
                         * Evennement appelé quand le stockage de la configuration change
                         *
                         * @param pNouvelleValeur Nouvelle valeur dans le stockage
                         */
                        _this.onChangeStorage = function (pNouvelleValeur) {
                            if (!pNouvelleValeur) {
                                pNouvelleValeur = {
                                    sujetsAbonnees: [],
                                    version: 1
                                };
                            }
                            var lSujetsACouper = [];
                            var lSujetsAOuvrir = [];
                            var lSujetsDejaAbonnes = [];
                            var lSujetsDejaAbonnesParCle = {};
                            if (_this.abonnements) {
                                _this.abonnements.sujetsAbonnees.forEach(function (pSujet) {
                                    lSujetsDejaAbonnes.push(pSujet);
                                    lSujetsDejaAbonnesParCle[pSujet] = true;
                                });
                            }
                            var lNouveauxSujetsParCle = {};
                            pNouvelleValeur.sujetsAbonnees.forEach(function (pSujet) {
                                lNouveauxSujetsParCle[pSujet] = true;
                                if (!lSujetsDejaAbonnesParCle[pSujet]) {
                                    lSujetsAOuvrir.push(pSujet);
                                }
                            });
                            lSujetsDejaAbonnes.forEach(function (pSujet) {
                                if (!lNouveauxSujetsParCle[pSujet]) {
                                    lSujetsACouper.push(pSujet);
                                }
                            });
                            lSujetsACouper.forEach(function (pSujet) {
                                _this._arreterNotifications(pSujet);
                            });
                            lSujetsAOuvrir.forEach(function (pSujet) {
                                _this._ecouterNotifications(pSujet);
                            });
                            _this.abonnements = pNouvelleValeur;
                            _this.save();
                        };
                        _this.load = function () {
                            _this.library.BriqueCommunication.getConfigurationEtablissement().forEach(function (pConfiguration) {
                                switch (pConfiguration.code) {
                                    case "CLIENTS":
                                        _this.CONF_NOTIFICATIONS = pConfiguration;
                                        break;
                                }
                            });
                            _this.subjects = _this.CONF_NOTIFICATIONS.parameters.subjects;
                            _this.subjects.forEach(function (pSubject) {
                                _this.subjectsByName[pSubject.name] = pSubject;
                            });
                            _this.storageInstance = _this.library.Persistence.addStorage('Notifications', _this.onChangeStorage);
                            _this.onChangeStorage(_this.storageInstance.getValue());
                            return _this.library.Core.getPromesseSelfResoved();
                        };
                        return _this;
                    }
                    NotificationManagerBase.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                        var _this = this;
                        return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                            if (!window['JmsConnectionFactory']) {
                                return;
                            }
                            return _this.load();
                        });
                    };
                    /**
                     * Sauvegarde de la configuration courante
                     */
                    NotificationManagerBase.prototype.save = function () {
                        this.storageInstance.saveValue(this.abonnements);
                    };
                    /**
                     * Envoi une notification
                     *
                     * @param pEvent Evenement à envoyer
                     */
                    NotificationManagerBase.prototype.sendNotification = function (pEvent) {
                        var lEventMain = {
                            mainEventType: Services.BriqueCommunication.Messages.EVENT_TYPE.NOTIFICATION,
                            event: pEvent
                        };
                        this.library.Evennements.notifier(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.BriqueCommunication, {
                            chat: lEventMain
                        }));
                    };
                    /**
                     * Execution de l'inscription à un sujet
                     *
                     * @param pSubject Nom du sujet
                     */
                    NotificationManagerBase.prototype._ecouterNotifications = function (pSubject) {
                        var _this = this;
                        if (!this.subjectsByName[pSubject]) {
                            //Canal de notification non trouvé
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            lDefer.reject(new Services.Erreur("Canal " + pSubject + " inconnu"));
                            return lDefer.promise;
                        }
                        if (this.subjetsConnectedByName[pSubject]) {
                            //Déjà connecté!
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            lDefer.resolve();
                            return lDefer.promise;
                        }
                        var lReader = function (pMessage) {
                            _this.sendNotification({
                                eventType: Notification.Messages.EVENT_TYPE.NOTIFICATION_MESSAGE,
                                subject: pSubject,
                                message: pMessage
                            });
                        };
                        var lSubject = this.subjectsByName[pSubject];
                        var lInfosAgent = this.library.BriqueCommunication.getInfosAgentCourant();
                        return this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                            var lDestination = _this.library.BriqueCommunication.replaceTokens(_this.CONF_NOTIFICATIONS.destination, {
                                user_id: lInfosAgent.userid,
                                subject: lSubject.code
                            });
                            return _this.library.BriqueCommunication.ouvrirCanal(_this.CONF_NOTIFICATIONS.url, lDestination, {
                                readable: true, writable: false
                            }, pAuthentificationInfo).then(function (pCanal) {
                                pCanal.reader = lReader;
                                _this.subjetsConnectedByName[pSubject] = { name: pSubject, canal: pCanal };
                                _this.subjetsConnected.push(_this.subjetsConnectedByName[pSubject]);
                                _this.sendNotification({
                                    eventType: Notification.Messages.EVENT_TYPE.NOUVEL_ABONNEMENT,
                                    subject: pSubject
                                });
                            });
                        });
                    };
                    NotificationManagerBase.prototype._arreterNotifications = function (pSubject) {
                        var lSubject = this.subjetsConnectedByName[pSubject];
                        if (!lSubject) {
                            return;
                        }
                        //Coupe la connexion
                        lSubject.canal.close();
                        delete this.subjetsConnectedByName[pSubject];
                        var lIsFound = false;
                        for (var i = 0; i < (this.subjetsConnected.length - 1); i++) {
                            if (this.subjetsConnected[i] === lSubject) {
                                lIsFound = true;
                            }
                            if (lIsFound) {
                                this.subjetsConnected[i] = this.subjetsConnected[i + 1];
                            }
                        }
                        if (lIsFound || this.subjetsConnected[this.subjetsConnected.length - 1] === lSubject) {
                            this.subjetsConnected.length--;
                            lIsFound = true;
                        }
                        if (lIsFound) {
                            this.sendNotification({
                                eventType: Notification.Messages.EVENT_TYPE.DESABONNEMENT,
                                subject: pSubject
                            });
                        }
                    };
                    NotificationManagerBase.prototype.ecouterNotifications = function (pSubject) {
                        var _this = this;
                        return this._ecouterNotifications(pSubject).then(function () {
                            var lIsFound = false;
                            _this.abonnements.sujetsAbonnees.every(function (pSujetExistant) {
                                lIsFound = pSujetExistant === pSubject;
                                return !lIsFound;
                            });
                            if (!lIsFound) {
                                _this.abonnements.sujetsAbonnees.push(pSubject);
                                _this.save();
                            }
                        });
                    };
                    NotificationManagerBase.prototype.arreterNotifications = function (pSubject) {
                        this._arreterNotifications(pSubject);
                        var lIsFound = false;
                        for (var i = 0; i < (this.abonnements.sujetsAbonnees.length - 1); i++) {
                            if (this.abonnements.sujetsAbonnees[i] === pSubject) {
                                lIsFound = true;
                            }
                            if (lIsFound) {
                                this.abonnements.sujetsAbonnees[i] = this.abonnements.sujetsAbonnees[i + 1];
                            }
                        }
                        if (lIsFound || this.abonnements.sujetsAbonnees[this.abonnements.sujetsAbonnees.length - 1] === pSubject) {
                            this.abonnements.sujetsAbonnees.length--;
                            lIsFound = true;
                        }
                        if (lIsFound) {
                            this.save();
                        }
                    };
                    NotificationManagerBase.prototype.getListeSujets = function () {
                        var _this = this;
                        var lResults = [];
                        this.subjects.forEach(function (pSujet) {
                            lResults.push({
                                nom: pSujet.name,
                                estAbonne: !!_this.subjetsConnectedByName[pSujet.name]
                            });
                        });
                        return this.library.Core.createPromiseSelfResolved({
                            sujets: lResults
                        });
                    };
                    NotificationManagerBase.prototype.ecouterNotificationsApi = function (pNotificationName) {
                        var _this = this;
                        if (!this.subjectsByName[pNotificationName]) {
                            //Canal de notification non trouvé
                            return;
                        }
                        var lSubject = this.subjectsByName[pNotificationName];
                        var lInfosAgent = this.library.BriqueCommunication.getInfosAgentCourant();
                        return this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                            var lDestination = _this.library.BriqueCommunication.replaceTokens(_this.CONF_NOTIFICATIONS.destination, {
                                user_id: lInfosAgent.userid,
                                subject: lSubject.code
                            });
                            return _this.library.BriqueCommunication.ouvrirCanal(_this.CONF_NOTIFICATIONS.url, lDestination, {
                                readable: true, writable: false
                            }, pAuthentificationInfo);
                        });
                    };
                    return NotificationManagerBase;
                }(Services.Components.ComponentManagerBase));
                Notification.NotificationManagerBase = NotificationManagerBase;
                Services.Components.RegistryManager.getInstance().register(NotificationManagerBase);
            })(Notification = BriqueCommunication.Notification || (BriqueCommunication.Notification = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des messages
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ConfigurationPoste;
        (function (ConfigurationPoste) {
            /*
            * Class de gestion de gestion des messages
            */
            var ConfigurationPosteManager = /** @class */ (function (_super) {
                __extends(ConfigurationPosteManager, _super);
                function ConfigurationPosteManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.ConfigurationPoste) || this;
                    _this.api = null;
                    _this.localStorageKey = 'configurationPoste';
                    _this.storage = null;
                    return _this;
                }
                ConfigurationPosteManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                        _this.storage = _this.library.Persistence.addStorage(_this.localStorageKey, _this.listenerOnConfigurationPosteLocalStorage);
                        _this.getConfigurationPoste({ refreshLocalStorage: true })
                            .catch(function (erreur) {
                            return;
                        });
                    });
                };
                // Récupère la configuration du poste dans le localStorage
                ConfigurationPosteManager.prototype.getConfigPosteInLocalStorage = function () {
                    var resultat = this.storage.getValue();
                    if (resultat && resultat.configuration && resultat.dateConfig) {
                        return resultat;
                    }
                    return null;
                };
                // Ecoute si la configuration poste a changé dans le localStorage
                ConfigurationPosteManager.prototype.listenerOnConfigurationPosteLocalStorage = function (resultat) {
                    ConfigurationPosteManager.logger.warn('configurationPoste - %1', JSON.stringify(resultat));
                };
                ;
                //Méthode publique pour récupérer la config. du poste passé en paramètre
                ConfigurationPosteManager.prototype.getConfigurationPoste = function (parametres) {
                    var _this = this;
                    var params = parametres !== undefined ? parametres : { poste: null, etablissement: null, refreshLocalStorage: null };
                    return this.library.Context.getAuthentificationInfo().then(function (authent) {
                        if (!(params.etablissement || params.poste) || (authent.numeroStationTravail === params.poste && authent.codeEtablissement === params.etablissement)) {
                            //Je veux la config de mon poste
                            var configPosteLocalStorage = _this.getConfigPosteInLocalStorage();
                            if (params.refreshLocalStorage || !configPosteLocalStorage) {
                                //On n'a pas pas la donnée dans le Local Storage ou on le reload de celui-ci
                                return _this.api.getConfigurationPoste({
                                    etablissement: authent.codeEtablissement,
                                    poste: authent.numeroStationTravail,
                                    dateConfig: configPosteLocalStorage ? configPosteLocalStorage.dateConfig : null
                                }).then(function (newConfig) {
                                    if (newConfig) {
                                        //Sauvegarde
                                        _this.storage.saveValue(newConfig);
                                    }
                                    return newConfig || configPosteLocalStorage;
                                });
                            }
                            else {
                                //On a la donnée dans le localstorage
                                return configPosteLocalStorage;
                            }
                        }
                        else {
                            //Je veux la config d'un autre poste
                            return _this.api.getConfigurationPoste({
                                etablissement: params.etablissement,
                                poste: params.poste,
                                dateConfig: null
                            });
                        }
                    });
                };
                ConfigurationPosteManager.CLASS_NAME = 'MyWay.Services.ConfigurationPoste.ConfigurationPosteManager';
                ConfigurationPosteManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ConfigurationPosteManager.CLASS_NAME);
                return ConfigurationPosteManager;
            }(Services.Components.ComponentManagerBase));
            ConfigurationPoste.ConfigurationPosteManager = ConfigurationPosteManager;
            Services.Components.RegistryManager.getInstance().register(ConfigurationPosteManager);
        })(ConfigurationPoste = Services.ConfigurationPoste || (Services.ConfigurationPoste = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ContexteClient;
        (function (ContexteClient) {
            var ContexteClientManagerBase = /** @class */ (function (_super) {
                __extends(ContexteClientManagerBase, _super);
                function ContexteClientManagerBase() {
                    var _this = _super.call(this, Services.Components.ComponentType.ContexteClient) || this;
                    _this.contextes = [];
                    _this.contextesById = {};
                    _this.storage = null;
                    _this.api = null;
                    _this.listenerOnContexteChange = function () {
                        //Le contexte client a changé, doit le rafraichir
                        var pContexte = JSON.parse(localStorage.getItem('contextesClients'));
                        _this.load(pContexte);
                    };
                    _this.listenerOnProcessEnd = function (pProcess) {
                        if (pProcess.contexteClientId) {
                            //Retire le processus de son contexte client
                            _this.library.ContexteClient.changeContexteOfProcess(null, pProcess.id, null);
                        }
                    };
                    return _this;
                }
                Object.defineProperty(ContexteClientManagerBase, "RELOAD_FLAG_NAME", {
                    get: function () {
                        return ContexteClient.ContexteClientStatusFlag.RELOAD_FLAG_NAME;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ContexteClientManagerBase, "RELOAD_FLAG_VALUE_NONE", {
                    get: function () {
                        return ContexteClient.ContexteClientStatusFlag.RELOAD_FLAG_VALUE_NONE;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ContexteClientManagerBase, "RELOAD_FLAG_VALUE_SYNCHRO", {
                    get: function () {
                        return ContexteClient.ContexteClientStatusFlag.RELOAD_FLAG_VALUE_SYNCHRO;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ContexteClientManagerBase, "RELOAD_FLAG_VALUE_RELOAD", {
                    get: function () {
                        return ContexteClient.ContexteClientStatusFlag.RELOAD_FLAG_VALUE_RELOAD;
                    },
                    enumerable: true,
                    configurable: true
                });
                ContexteClientManagerBase.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                        _this.storage = _this.library.Persistence.addStorage('notification.contextesclient', _this.listenerOnContexteChange);
                        _this.load();
                        _this.library.Evennements.ajouterListener(function (pEvent) {
                            _this.notifierRechargementContexte();
                        }, Services.Component.ManagerEventType.ContextRecharge);
                        _this.library.Context.addListenerOnTerminerProcessus(_this.listenerOnProcessEnd);
                    });
                };
                ContexteClientManagerBase.prototype.dispose = function () {
                    this.library.Context.removeListenerOnTerminerProcessus(this.listenerOnProcessEnd);
                    return _super.prototype.dispose.call(this);
                };
                ContexteClientManagerBase.prototype.nouveauContexte = function (pIdClient) {
                    //Recherche si un contexte avec cet id client existe déjà
                    var found = this.getByIdClient(pIdClient);
                    if (found) {
                        ContexteClientManagerBase.loggerContexteClientManagerBase.debug("reutilisation contexte client : %1", found.getId());
                        return found;
                    }
                    var lId = this.library.Core.creerChaineAleatoire(16);
                    while (this.contextesById[lId]) {
                        lId = this.library.Core.creerChaineAleatoire(16);
                    }
                    var lResult = new ContexteClient.ContexteClientClass(lId, this.library.Core, this);
                    if (pIdClient) {
                        lResult.setClient(pIdClient);
                    }
                    this.contextesById[lId] = lResult;
                    this.contextes.push(lResult);
                    ContexteClientManagerBase.loggerContexteClientManagerBase.debug("creation nouveau contexte client : %1", lResult.getId());
                    this.save();
                    return lResult;
                };
                ContexteClientManagerBase.prototype.getByIdClient = function (pIdClient) {
                    var lContextClientTrouve = null;
                    if (!pIdClient) {
                        return null;
                    }
                    this.contextes.every(function (pContext) {
                        if (pContext.getClient() === pIdClient) {
                            lContextClientTrouve = pContext;
                        }
                        return lContextClientTrouve === null;
                    });
                    return lContextClientTrouve;
                };
                ContexteClientManagerBase.prototype.getCurrentContexteClient = function () {
                    var lProcess = this.library.Context.GetCurrentProcess();
                    if (!lProcess) {
                        return null;
                    }
                    var lContexteClientId = lProcess.contexteClientId;
                    if (!lContexteClientId) {
                        return null;
                    }
                    return this.getContexte(lContexteClientId);
                };
                ContexteClientManagerBase.prototype.setCurrentContexteClient = function (pContexteClient) {
                    var lProcess = this.library.Context.GetCurrentProcess();
                    if (!lProcess) {
                        throw new Services.Erreur("Il n'y a pas de processus courant");
                    }
                    this.library.Context.setContextClientIdOnProcessus(pContexteClient.getId(), lProcess);
                };
                ContexteClientManagerBase.prototype.getContexte = function (pId) {
                    return this.contextesById[pId];
                };
                ContexteClientManagerBase.prototype.getContextes = function () {
                    return this.contextes;
                };
                ContexteClientManagerBase.prototype.getContextesAsync = function () {
                    var _this = this;
                    var contextes = [];
                    var contexte;
                    return this.api.getContexteClientPCM().then(function (numeroClients) {
                        if (numeroClients == null) {
                            return _this.contextes;
                        }
                        else {
                            for (var _i = 0, numeroClients_1 = numeroClients; _i < numeroClients_1.length; _i++) {
                                var numclient = numeroClients_1[_i];
                                contexte = _this.getByIdClient(numclient);
                                if (contexte != null)
                                    contextes.push(contexte);
                            }
                            return contextes;
                        }
                    });
                };
                ContexteClientManagerBase.prototype.detruireContexte = function (pExpediteur, pId) {
                    var _this = this;
                    var lContexte = this.getContexte(pId);
                    if (!lContexte) {
                        throw new Services.Erreur("Contexte client " + pId + " inexistant");
                    }
                    if (lContexte.getMode() === ContexteClient.Messages.ContexteClientMode.AUTOMATIQUE) {
                        this.changeContexteMode(pId, ContexteClient.Messages.ContexteClientMode.MANUEL);
                        ContexteClientManagerBase.loggerContexteClientManagerBase.debug("Le contexte d'identifiant %1 cherche à être détruit, mais il est en mode automatique. Changement de son statut en manuel.", pId);
                    }
                    var lProcessusANotifier = [];
                    lContexte.getProcessus().forEach(function (pProcessus) {
                        lProcessusANotifier.push(pProcessus);
                        pProcessus.contexteClientId = null;
                        _this.library.Context.setContextClientIdOnProcessus(null, pProcessus);
                    });
                    delete this.contextesById[pId];
                    var length = this.contextes.length - 1;
                    var lEstTrouve = false;
                    for (var i = 0; i < (length + 1); i++) {
                        if (this.contextes[i] === lContexte) {
                            lEstTrouve = true;
                        }
                        if (lEstTrouve) {
                            this.contextes[i] = this.contextes[i + 1];
                        }
                    }
                    this.contextes.length--;
                    this.save();
                    this.broadcastUpdateEventByProcess(null, pExpediteur, lProcessusANotifier, ContexteClient.Messages.MiseAJourContexteClientType.detructionContexte);
                    return true;
                };
                ContexteClientManagerBase.prototype.changeTousContexteMode = function (pMode) {
                    var ids = [];
                    this.getContextes().forEach(function (cc) {
                        ids.push(cc.getId());
                    });
                    this.changeContexteModes(ids, ContexteClient.Messages.ContexteClientMode.AUTOMATIQUE);
                };
                ContexteClientManagerBase.prototype.getClient = function (pIdContexteClient) {
                    var lContexte = this.getCurrentContexteOrByIdAndThrowIfNothing(pIdContexteClient);
                    return lContexte.getClient();
                };
                ContexteClientManagerBase.prototype.setClient = function (pExpediteur, client, pIdContexteClient) {
                    var _this = this;
                    if (!client) {
                        throw new Services.Erreur("Impossible de supprimer l'id du client dans le contexte client courant.");
                    }
                    var lContexteClientOriginal = this.getCurrentContexteOrByIdAndThrowIfNothing(pIdContexteClient);
                    if (lContexteClientOriginal.getClient() !== undefined) {
                        throw new Services.Erreur("Impossible de modifier le client courant du contexte client car il est déjà défini.");
                    }
                    //Recherche tous les contextes clients courants si par hazar cet ID est déjà utilisé
                    var lContexteClientMemeClient = undefined;
                    this.getContextes().every(function (pContexte) {
                        if (pContexte.getClient() === client) {
                            lContexteClientMemeClient = pContexte;
                        }
                        return lContexteClientMemeClient === undefined;
                    });
                    if (lContexteClientMemeClient === undefined) {
                        lContexteClientOriginal.setClient(client);
                        this.save();
                        this.broadcastUpdateEvent(null, pExpediteur, lContexteClientOriginal, ContexteClient.Messages.MiseAJourContexteClientType.setClient);
                        return true;
                    }
                    var lProcessusANotifier = [];
                    //Stocke le mode avant de déplacer les processus car une évolution a fait que si le contexte client est automatique on le passe en manuel lors de sa suppression!
                    var lMode = lContexteClientOriginal.getMode();
                    lContexteClientOriginal.getProcessus().forEach(function (pProcessus) {
                        lProcessusANotifier.push(pProcessus);
                        lContexteClientOriginal.retirerProcessus(pProcessus);
                        lContexteClientMemeClient.ajouterProcessus(pProcessus);
                        _this.library.Context.setContextClientIdOnProcessus(lContexteClientMemeClient.getId(), pProcessus);
                    });
                    if (lMode !== ContexteClient.Messages.ContexteClientMode.AUTOMATIQUE) {
                        this.detruireContexte(pExpediteur, lContexteClientOriginal.getId());
                    }
                    this.save();
                    this.broadcastUpdateEventByProcess(null, pExpediteur, lProcessusANotifier, ContexteClient.Messages.MiseAJourContexteClientType.changementContexte);
                    return true;
                };
                ContexteClientManagerBase.prototype.getContextesParClients = function () {
                    var lIds = [];
                    this.getContextes().forEach(function (pContexte) {
                        var lIdClient = pContexte.getClient();
                        if (!lIdClient) {
                            return;
                        }
                        lIds.push(lIdClient);
                    });
                    return lIds;
                };
                ContexteClientManagerBase.prototype.getContextesParClientsAsync = function () {
                    var _this = this;
                    var lIds = [];
                    var contexte;
                    return this.api.getContexteClientPCM().then(function (numeroClients) {
                        if (numeroClients == null) {
                            return _this.getContextesParClients();
                        }
                        else {
                            return numeroClients;
                        }
                    });
                };
                ContexteClientManagerBase.prototype.addToList = function (pExpediteur, pProperty, pValue, pIdContexteClient) {
                    var _this = this;
                    var cc = this.getCurrentContexteOrByIdAndThrowIfNothing(pIdContexteClient);
                    return cc.addToList(pProperty, pValue).then(function (pResult) {
                        _this.save();
                        _this.broadcastUpdateEvent(pProperty, pExpediteur, cc, ContexteClient.Messages.MiseAJourContexteClientType.addToList);
                        return pResult;
                    });
                };
                ContexteClientManagerBase.prototype.getContenu = function (pIdClient) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var cc = this.getByIdClient(pIdClient);
                    if (cc)
                        return cc.getProperty(null);
                    deferred.reject(new Services.Erreur("Impossible de trouver une contexte client avec l'id client " + pIdClient));
                    return deferred.promise;
                };
                ContexteClientManagerBase.prototype.getProperty = function (pProperty, pIdContexteClient) {
                    var cc = this.getCurrentContexteOrByIdAndThrowIfNothing(pIdContexteClient);
                    return cc.getProperty(pProperty);
                };
                ContexteClientManagerBase.prototype.setContenu = function (pExpediteur, pIdClient, pValue) {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        var cc = _this.getByIdClient(pIdClient);
                        if (!cc) {
                            pDefer.reject(new Services.Erreur("Impossible de trouver une contexte client avec l'id client " + pIdClient));
                            return;
                        }
                        if (!pValue[ContexteClientManagerBase.RELOAD_FLAG_NAME])
                            pValue[ContexteClientManagerBase.RELOAD_FLAG_NAME] = ContexteClientManagerBase.RELOAD_FLAG_VALUE_NONE;
                        cc.setProperty(null, pValue).then(function (pResulat) {
                            _this.save();
                            _this.broadcastUpdateEvent(null, pExpediteur, cc, ContexteClient.Messages.MiseAJourContexteClientType.setProperty);
                            pDefer.resolve(pResulat);
                        }, pDefer.reject);
                    });
                };
                ContexteClientManagerBase.prototype.setReloadSynthese = function (pExpediteur, pIdClient) {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        var cc = _this.getByIdClient(pIdClient);
                        if (!cc) {
                            pDefer.reject(new Services.Erreur("Impossible de trouver une contexte client avec l'id client " + pIdClient));
                            return;
                        }
                        cc.setProperty(ContexteClient.ContexteClientStatusFlag.RELOAD_FLAG_NAME, ContexteClient.ContexteClientStatusFlag.RELOAD_FLAG_VALUE_RELOAD).then(function (pResulat) {
                            _this.save();
                            _this.broadcastUpdateEvent(null, pExpediteur, cc, ContexteClient.Messages.MiseAJourContexteClientType.setProperty);
                            pDefer.resolve(pResulat);
                        }, pDefer.reject);
                    });
                };
                ContexteClientManagerBase.prototype.setProperty = function (pExpediteur, pProperty, pValue, pIdContexteClient) {
                    var _this = this;
                    var cc = this.getCurrentContexteOrByIdAndThrowIfNothing(pIdContexteClient);
                    return cc.setProperty(pProperty, pValue).then(function (pResult) {
                        _this.save();
                        _this.broadcastUpdateEvent(pProperty, pExpediteur, cc, ContexteClient.Messages.MiseAJourContexteClientType.setProperty);
                        return pResult;
                    });
                };
                ContexteClientManagerBase.prototype.removeFromList = function (pExpediteur, pProperty, pIdContexteClient) {
                    var _this = this;
                    var cc = this.getCurrentContexteOrByIdAndThrowIfNothing(pIdContexteClient);
                    return cc.removeFromList(pProperty).then(function (pResult) {
                        _this.save();
                        _this.broadcastUpdateEvent(pProperty, pExpediteur, cc, ContexteClient.Messages.MiseAJourContexteClientType.removeFromList);
                        return pResult;
                    });
                };
                ContexteClientManagerBase.prototype.deleteProperty = function (pExpediteur, pProperty, pIdContexteClient) {
                    var _this = this;
                    var cc = this.getCurrentContexteOrByIdAndThrowIfNothing(pIdContexteClient);
                    return cc.deleteProperty(pProperty).then(function (pResult) {
                        _this.save();
                        _this.broadcastUpdateEvent(pProperty, pExpediteur, cc, ContexteClient.Messages.MiseAJourContexteClientType.deleteProperty);
                        return pResult;
                    });
                };
                ContexteClientManagerBase.prototype.notifierRechargementContexte = function () {
                    var _this = this;
                    //Vérifie que les processus n'ont pas été réassigné à d'autres contextes
                    var lProcesses = this.library.Context.GetAllProcessFromAllPortails();
                    var lProcessesById = {};
                    var lProcessesANotifier = [];
                    //Commence par parcourir l'ensemble des processus
                    lProcesses.forEach(function (pProcess) {
                        lProcessesById[pProcess.id] = pProcess;
                        if (!pProcess.contexteClientId) {
                            //Pas de contexte
                            return;
                        }
                        var lContexteClient = _this.getContexte(pProcess.contexteClientId);
                        if (!lContexteClient) {
                            //Contexte client non référencé, devrais l'être par une seconde maj du localstorage
                            return;
                        }
                        var lEstTrouve = false;
                        lContexteClient.getProcessus().every(function (pProcessFromContexteClient) {
                            if (pProcessFromContexteClient.id === pProcess.id) {
                                //Processus trouvé, c'est OK
                                lEstTrouve = true;
                                return false;
                            }
                            return true;
                        });
                        if (!lEstTrouve) {
                            //Changement de son contexte
                            lProcessesANotifier.push(pProcess);
                            //L'ajoute
                            lContexteClient.ajouterProcessus(pProcess);
                        }
                    });
                    //Puis fait le même traitement dans le sens ContextesClients -> Processus
                    this.contextes.forEach(function (pContextClient) {
                        var lProcessusARetirer = [];
                        pContextClient.getProcessus().forEach(function (pProcessFromContexteClient) {
                            var lProcessus = lProcessesById[pProcessFromContexteClient.id];
                            if (!lProcessus) {
                                //N'existe plus!
                                pContextClient.retirerProcessus(pProcessFromContexteClient);
                                return;
                            }
                            if (lProcessus.contexteClientId !== pContextClient.getId()) {
                                //Le processus a été déplacé
                                if (lProcessesANotifier.indexOf(lProcessus) === -1) {
                                    lProcessesANotifier.push(lProcessus);
                                }
                                lProcessusARetirer.push(pProcessFromContexteClient);
                            }
                        });
                        lProcessusARetirer.forEach(function (pProcessARetirer) {
                            pContextClient.retirerProcessus(pProcessARetirer);
                        });
                    });
                    this.broadcastUpdateEventByProcess(null, "load", lProcessesANotifier, ContexteClient.Messages.MiseAJourContexteClientType.changementContexte);
                };
                ContexteClientManagerBase.prototype.changeContexteOfProcess = function (pExpediteur, pCodeProcessus, pIdContexteClient) {
                    var lProcess = this.library.Context.GetProcessByIdFromAllPortails(pCodeProcessus);
                    if (!lProcess) {
                        throw new Services.Erreur("Le processus " + pCodeProcessus + " n'a pas été trouvé");
                    }
                    var lAncienContexteClient = null;
                    if (lProcess.contexteClientId) {
                        lAncienContexteClient = this.getContexte(lProcess.contexteClientId);
                    }
                    if (!pIdContexteClient) {
                        this.library.Context.setContextClientIdOnProcessus(null, lProcess);
                        if (lAncienContexteClient) {
                            lAncienContexteClient.retirerProcessus(lProcess);
                        }
                        this.save();
                        this.broadcastUpdateEventByProcess(null, pExpediteur, [lProcess], ContexteClient.Messages.MiseAJourContexteClientType.changementContexte);
                        return;
                    }
                    var lNouveauContexte = this.getContexte(pIdContexteClient);
                    if (!lNouveauContexte) {
                        throw new Services.Erreur("Le contexte client d'identifiant technique " + pIdContexteClient + " n'a pas été trouvé");
                    }
                    if (lAncienContexteClient) {
                        lAncienContexteClient.retirerProcessus(lProcess);
                    }
                    lNouveauContexte.ajouterProcessus(lProcess);
                    this.library.Context.setContextClientIdOnProcessus(lNouveauContexte.getId(), lProcess);
                    this.save();
                    this.broadcastUpdateEventByProcess(null, pExpediteur, [lProcess], ContexteClient.Messages.MiseAJourContexteClientType.changementContexte);
                };
                ContexteClientManagerBase.prototype.getMode = function (pIdContexteClient) {
                    var lContexteClient = this.getCurrentContexteOrByIdAndThrowIfNothing(pIdContexteClient);
                    return lContexteClient.getMode();
                };
                ContexteClientManagerBase.prototype.changeContexteMode = function (pIdContexteClient, pMode) {
                    return this.changeContexteModes([pIdContexteClient], pMode);
                };
                ContexteClientManagerBase.prototype.changeContexteModes = function (pIdsContexteClient, pMode) {
                    var _this = this;
                    pIdsContexteClient.forEach(function (pIdContexteClient) {
                        var lContexteClient = _this.getContexte(pIdContexteClient);
                        if (!lContexteClient) {
                            throw new Services.Erreur("Le contexte client d'identifiant technique " + pIdContexteClient + " n'a pas été trouvé");
                        }
                        lContexteClient.setMode(pMode);
                    });
                    this.save();
                };
                ContexteClientManagerBase.prototype.getListeProcessus = function (pIdContexteClient) {
                    var lContexteClient = this.getCurrentContexteOrByIdAndThrowIfNothing(pIdContexteClient);
                    return lContexteClient.getProcessus();
                };
                ContexteClientManagerBase.prototype.getDetailsContexte = function (pIdContexte) {
                    var lContexteClient = this.getContexte(pIdContexte);
                    if (!lContexteClient) {
                        throw new Services.Erreur("Le contexte client d'identifiant technique " + pIdContexte + " n'a pas été trouvé");
                    }
                    var lResult = {
                        idContexte: lContexteClient.getId(),
                        idClient: lContexteClient.getClient(),
                        mode: lContexteClient.getMode(),
                        processus: [],
                        content: lContexteClient.getCurrentDatas()
                    };
                    lContexteClient.getProcessus().forEach(function (pProcessus) {
                        lResult.processus.push(pProcessus.id);
                    });
                    return lResult;
                };
                ContexteClientManagerBase.prototype.getCurrentContexteOrById = function (pIdContexte) {
                    if (pIdContexte) {
                        return this.contextesById[pIdContexte];
                    }
                    return this.getCurrentContexteClient();
                };
                ContexteClientManagerBase.prototype.getCurrentContexteOrByIdAndThrowIfNothing = function (pIdContexte) {
                    var lContexte = null;
                    if (pIdContexte) {
                        lContexte = this.contextesById[pIdContexte];
                    }
                    else {
                        lContexte = this.getCurrentContexteClient();
                    }
                    if (!lContexte) {
                        if (pIdContexte) {
                            throw new Services.Erreur("Le contexte client " + pIdContexte + " n'existe pas!");
                        }
                        else {
                            throw new Services.Erreur("Il n'y a pas de contexte client courant.");
                        }
                    }
                    return lContexte;
                };
                ContexteClientManagerBase.prototype.save = function () {
                    var lTousLesContextes = {
                        version: 1,
                        contextes: []
                    };
                    this.contextes.forEach(function (pContext) {
                        lTousLesContextes.contextes.push({
                            id: pContext.getId(),
                            client: pContext.getClient(),
                            mode: pContext.getMode(),
                            content: pContext.getCurrentDatas()
                        });
                    });
                    localStorage.setItem('contextesClients', JSON.stringify(lTousLesContextes));
                    this.storage.saveValue(Math.random());
                };
                ContexteClientManagerBase.prototype.load = function (pTousLesContextes) {
                    var _this = this;
                    var lTousLesContextes = null;
                    if (pTousLesContextes) {
                        lTousLesContextes = pTousLesContextes;
                    }
                    else {
                        lTousLesContextes = JSON.parse(localStorage.getItem('contextesClients'));
                    }
                    if (!lTousLesContextes) {
                        //Pas de contexte client sauvegardé, part de zéro
                        this.contextes = [];
                        this.contextesById = {};
                        return;
                    }
                    if (lTousLesContextes.version !== 1) {
                        ContexteClientManagerBase.loggerContexteClientManagerBase.error("Impossible de charger les contextes du local storage car la version " + lTousLesContextes.version + " n'est pas correcte! Repars de zéro.");
                        this.contextes = [];
                        this.contextesById = {};
                        return;
                    }
                    //Fais un reset des contextes clients
                    var lAnciensContextes = this.contextesById;
                    this.contextes = [];
                    this.contextesById = {};
                    var lTousLesProcessus = [];
                    var lWaitingsProcesses = this.library.Context.GetWaitingProcesses();
                    /* istanbul ignore else */
                    if (lWaitingsProcesses) {
                        lWaitingsProcesses.forEach(function (pProcess) {
                            lTousLesProcessus.push(pProcess);
                        });
                    }
                    var lPortails = this.library.Context.getPortails();
                    /* istanbul ignore else */
                    if (lPortails) {
                        lPortails.forEach(function (pPortail) {
                            pPortail.processes.forEach(function (pProcessus) {
                                lTousLesProcessus.push(pProcessus);
                            });
                        });
                    }
                    lTousLesContextes.contextes.forEach(function (pContexteClient) {
                        var lContexteClientClass = new ContexteClient.ContexteClientClass(pContexteClient.id, _this.library.Core, _this);
                        _this.contextes.push(lContexteClientClass);
                        _this.contextesById[pContexteClient.id] = lContexteClientClass;
                        lContexteClientClass.setClient(pContexteClient.client);
                        lTousLesProcessus.forEach(function (pProcessus) {
                            if (pProcessus.contexteClientId === pContexteClient.id) {
                                lContexteClientClass.ajouterProcessus(pProcessus);
                            }
                        });
                        lContexteClientClass.setProperty(null, pContexteClient.content);
                        lContexteClientClass.setMode(pContexteClient.mode);
                    });
                    //Vérifie que tous les contextes sont bien présents
                    lTousLesProcessus.forEach(function (pProcessus) {
                        if (!_this.contextesById[pProcessus.contexteClientId]) {
                            //Ce contexte n'existe plus!
                            _this.library.Context.setContextClientIdOnProcessus(null, pProcessus);
                        }
                    });
                    //Notifie tout ces process que leurs contextes ont changé (s'ils ont changé)
                    this.contextes.forEach(function (pContexte) {
                        if (lAnciensContextes[pContexte.getId()]) {
                            var lAncienContexte = lAnciensContextes[pContexte.getId()];
                            if (lAncienContexte.getClient() !== pContexte.getClient()) {
                                _this.broadcastUpdateEvent(null, "load", pContexte, ContexteClient.Messages.MiseAJourContexteClientType.setClient);
                            }
                            if (!_this.library.Core.ObjectUtils.deepEquals(lAnciensContextes[pContexte.getId()].getCurrentDatas(), pContexte.getCurrentDatas())) {
                                _this.broadcastUpdateEvent(null, "load", pContexte, ContexteClient.Messages.MiseAJourContexteClientType.setProperty);
                            }
                        }
                        else {
                            _this.broadcastUpdateEvent(null, "load", pContexte, ContexteClient.Messages.MiseAJourContexteClientType.setClient);
                            _this.broadcastUpdateEvent(null, "load", pContexte, ContexteClient.Messages.MiseAJourContexteClientType.setProperty);
                        }
                    });
                };
                ContexteClientManagerBase.prototype.broadcastUpdateEvent = function (cle, sender, contexteClient, type) {
                    var _this = this;
                    var contexteClientMiseAJourInfo = {
                        cleModifie: cle,
                        contexteClientId: contexteClient ? contexteClient.getId() : null,
                        type: type
                    };
                    //Le portail est notifié sauf si c'est lui qui a mis à jour le contexte client
                    if (sender !== "portail") {
                        this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.MiseAJourContexteClient, { contexteClientMiseAJourInfo: contexteClientMiseAJourInfo }));
                    }
                    //on notifie tous les processus associé au contexte client
                    var processes = undefined;
                    if (contexteClient) {
                        processes = contexteClient.getProcessus();
                    }
                    if (processes) {
                        processes.forEach(function (pProcess) {
                            if (pProcess.id !== sender) {
                                var notificationMessage = new Services.NotificationMessage();
                                notificationMessage.Sujet = "MiseAJourContexteClient";
                                notificationMessage.Contenu = contexteClientMiseAJourInfo;
                                /* istanbul ignore else */
                                if (_this.library.Display.Frames) {
                                    _this.library.Display.Frames.every(function (pFrame) {
                                        //if (pFrame.ProcessId === pProcess.id) {
                                        _this.library.Context.NotifyFrame(notificationMessage, pFrame);
                                        //     return false;
                                        //}
                                        return true;
                                    });
                                }
                            }
                        });
                        if (sender !== "interop" && sender !== "load") {
                            contexteClient.getProperty(null).then(function (content) {
                                _this.api.setContexteClientNSDK(contexteClient.getClient(), content).then(function (res) {
                                    if (res) {
                                        contexteClient.setProperty(ContexteClientManagerBase.RELOAD_FLAG_NAME, ContexteClientManagerBase.RELOAD_FLAG_VALUE_NONE);
                                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'broadcastUpdateEvent');
                                        ContexteClientManagerBase.loggerContexteClientManagerBase.debug("update ok");
                                    }
                                }).catch(function (erreur) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'broadcastUpdateEvent');
                                    Services.Loggers.FLASH.INSTANCE.setValue('details', erreur);
                                    ContexteClientManagerBase.loggerContexteClientManagerBase.error("Impossible de mettre à jour la synthèse NSDK");
                                });
                            });
                        }
                    }
                };
                ContexteClientManagerBase.prototype.broadcastUpdateEventByProcess = function (cle, sender, pProcess, type) {
                    var _this = this;
                    pProcess.forEach(function (pProcess) {
                        var contexteClientMiseAJourInfo = {
                            cleModifie: cle,
                            contexteClientId: pProcess.contexteClientId,
                            type: type
                        };
                        //Le portail est notifié sauf si c'est lui qui a mis à jour le contexte client
                        if (sender !== "portail") {
                            _this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.MiseAJourContexteClient, { contexteClientMiseAJourInfo: contexteClientMiseAJourInfo }));
                        }
                        if (pProcess.id !== sender) {
                            var notificationMessage = new Services.NotificationMessage();
                            notificationMessage.Sujet = "MiseAJourContexteClient";
                            notificationMessage.Contenu = contexteClientMiseAJourInfo;
                            /* istanbul ignore else */
                            if (_this.library.Display.Frames) {
                                _this.library.Display.Frames.every(function (pFrame) {
                                    if (pFrame.ProcessId === pProcess.id) {
                                        _this.library.Context.NotifyFrame(notificationMessage, pFrame);
                                        return false;
                                    }
                                    return true;
                                });
                            }
                        }
                    });
                };
                ContexteClientManagerBase.CLASS_NAME_BASE = 'MyWay.Services.Context.ContexteClientManagerBase';
                ContexteClientManagerBase.loggerContexteClientManagerBase = Services.Loggers.LoggerFactory.INSTANCE.getClass(ContexteClientManagerBase.CLASS_NAME_BASE);
                return ContexteClientManagerBase;
            }(Services.Components.ComponentManagerBase));
            ContexteClient.ContexteClientManagerBase = ContexteClientManagerBase;
            Services.Components.RegistryManager.getInstance().register(ContexteClientManagerBase);
        })(ContexteClient = Services.ContexteClient || (Services.ContexteClient = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ContexteClient;
        (function (ContexteClient) {
            var ContexteClientClass = /** @class */ (function () {
                function ContexteClientClass(pId, coreCommon, contexteClientManager) {
                    this.coreCommon = coreCommon;
                    this.contexteClientManager = contexteClientManager;
                    this.contexte = null;
                    this.id = pId;
                    this.client = undefined;
                    this.contexte = {};
                    this.mode = ContexteClient.Messages.ContexteClientMode.MANUEL;
                    this.processus = [];
                }
                ContexteClientClass.prototype.getId = function () {
                    return this.id;
                };
                ContexteClientClass.prototype.getMode = function () {
                    return this.mode;
                };
                ContexteClientClass.prototype.setMode = function (pMode) {
                    this.mode = pMode;
                    this.checkSiDoitDetruireContexteClient();
                };
                ContexteClientClass.prototype.getProcessus = function () {
                    return this.processus;
                };
                ContexteClientClass.prototype.ajouterProcessus = function (pProcessus) {
                    this.processus.push(pProcessus);
                };
                ContexteClientClass.prototype.retirerProcessus = function (pProcessus) {
                    var lIsDeleted = false;
                    for (var i = 0; i < this.processus.length; i++) {
                        if (!lIsDeleted && this.processus[i] === pProcessus) {
                            lIsDeleted = true;
                        }
                        if (lIsDeleted) {
                            this.processus[i] = this.processus[i + 1];
                        }
                    }
                    if (!lIsDeleted && this.processus[this.processus.length - 1] === pProcessus) {
                        lIsDeleted = true;
                    }
                    if (lIsDeleted) {
                        this.processus.length--;
                        this.checkSiDoitDetruireContexteClient();
                    }
                    return lIsDeleted;
                };
                ContexteClientClass.prototype.checkSiDoitDetruireContexteClient = function () {
                    if (this.mode !== ContexteClient.Messages.ContexteClientMode.AUTOMATIQUE) {
                        return;
                    }
                    if (this.processus.length === 0) {
                        this.detruireContexte();
                    }
                };
                ContexteClientClass.prototype.getClient = function () {
                    return this.client;
                };
                ContexteClientClass.prototype.setClient = function (pClient) {
                    if (this.client) {
                        //Ne peut pas modifier un client déjà fixé
                        throw new Services.Erreur("Impossible de modifier le client courant du contexte client car il est déjà défini.");
                    }
                    this.client = pClient;
                };
                ContexteClientClass.prototype.getCurrentDatas = function () {
                    return this.contexte;
                };
                /**
                 * Lis une donnée du contexte client
                 */
                ContexteClientClass.prototype.getProperty = function (pCle) {
                    var _this = this;
                    return this.coreCommon.promesseTryCatch(function (pDefer) {
                        if (!pCle) {
                            // Get all contexte
                            pDefer.resolve(_this.contexte);
                            return;
                        }
                        var lParts = pCle.split('.');
                        var lResult = _this.contexte;
                        lParts.every(function (pPart, pIndex) {
                            lResult = lResult[pPart];
                            return lResult !== undefined && lResult !== null;
                        });
                        pDefer.resolve(lResult);
                    });
                };
                /**
                 * Ajoute une donnée dans un tableau du contexte client
                 */
                ContexteClientClass.prototype.addToList = function (pCle, pValeur) {
                    var _this = this;
                    return this.coreCommon.promesseTryCatch(function (pDefer) {
                        if (!pCle) {
                            pDefer.reject(new Services.Erreur("La clé ne peut être nulle ni vide"));
                            return;
                        }
                        var lParts = pCle.split('.');
                        var lResult = _this.contexte;
                        var lLength = lParts.length;
                        var lIsAdded = false;
                        lParts.forEach(function (pPart, pIndex) {
                            if ((pIndex + 1) >= lLength) {
                                //S'arrete sur le dernier élément
                                if (!lResult[pPart]) {
                                    lResult[pPart] = [];
                                }
                                lResult = lResult[pPart];
                                if (!lResult.push) {
                                    lIsAdded = false;
                                    return;
                                }
                                lResult.push(pValeur);
                                lIsAdded = true;
                                return;
                            }
                            if (!lResult[pPart]) {
                                lResult[pPart] = {};
                            }
                            lResult = lResult[pPart];
                        });
                        pDefer.resolve(lIsAdded);
                    });
                };
                /**
                 * Fixe une donnée dans un objet du contexte client
                 */
                ContexteClientClass.prototype.setProperty = function (pCle, pValeur) {
                    var _this = this;
                    return this.coreCommon.promesseTryCatch(function (pDefer) {
                        if (!pCle) {
                            _this.contexte = pValeur;
                            pDefer.resolve(true);
                            return;
                        }
                        var lParts = pCle.split('.');
                        var lResult = _this.contexte;
                        var lLength = lParts.length;
                        lParts.forEach(function (pPart, pIndex) {
                            if ((pIndex + 1) >= lLength) {
                                //S'arrete sur le dernier élément
                                lResult[pPart] = pValeur;
                                return;
                            }
                            /* istanbul ignore else */
                            if (!lResult[pPart]) {
                                lResult[pPart] = {};
                            }
                            lResult = lResult[pPart];
                        });
                        pDefer.resolve(true);
                    });
                };
                /**
                 * Supprime une donnée d'un objet du contexte client
                 */
                ContexteClientClass.prototype.removeFromList = function (pCle) {
                    var _this = this;
                    return this.coreCommon.promesseTryCatch(function (pDefer) {
                        if (!pCle) {
                            pDefer.reject(new Services.Erreur("La clé ne peut être nulle ni vide"));
                            return;
                        }
                        var lParts = pCle.split('.');
                        var lResult = _this.contexte;
                        var lLength = lParts.length;
                        var lIsRemoved = false;
                        lParts.every(function (pPart, pIndex) {
                            if ((pIndex + 1) >= lLength) {
                                //S'arrete sur le dernier élément
                                var lTableau = lResult;
                                // if (lTableau) déjà testé à l'itération précédente
                                if (!lTableau.push) {
                                    lIsRemoved = false;
                                    return;
                                }
                                var lPartAsNumber = Number(pPart);
                                if (isNaN(lPartAsNumber)) {
                                    lIsRemoved = false;
                                    return false;
                                }
                                var lLengthTableau = lTableau.length;
                                for (var i = lPartAsNumber; i < (lLengthTableau - 1); i++) {
                                    lTableau[i] = lTableau[i + 1];
                                }
                                delete lTableau[lTableau.length - 1];
                                lTableau.length--;
                                lIsRemoved = true;
                                return true;
                            }
                            if (!lResult[pPart]) {
                                return false;
                            }
                            lResult = lResult[pPart];
                            return true;
                        });
                        pDefer.resolve(lIsRemoved);
                    });
                };
                /**
                 * Supprime une donnée d'un tableau du contexte client
                 */
                ContexteClientClass.prototype.deleteProperty = function (pCle) {
                    var _this = this;
                    return this.coreCommon.promesseTryCatch(function (pDefer) {
                        if (!pCle) {
                            //Reset contexte
                            _this.contexte = {};
                            pDefer.resolve(true);
                            return;
                        }
                        var lParts = pCle.split('.');
                        var lResult = _this.contexte;
                        var lLength = lParts.length;
                        var lIsDeleted = false;
                        lParts.every(function (pPart, pIndex) {
                            if ((pIndex + 1) >= lLength) {
                                //S'arrete sur le dernier élément
                                var lSubContext = lResult[pPart];
                                if (!lSubContext) {
                                    lIsDeleted = false;
                                    return false;
                                }
                                delete lResult[pPart];
                                lIsDeleted = true;
                                return true;
                            }
                            if (!lResult[pPart]) {
                                return false;
                            }
                            lResult = lResult[pPart];
                            return true;
                        });
                        pDefer.resolve(lIsDeleted);
                    });
                };
                ContexteClientClass.prototype.detruireContexte = function () {
                    this.contexteClientManager.detruireContexte(null, this.id);
                };
                return ContexteClientClass;
            }());
            ContexteClient.ContexteClientClass = ContexteClientClass;
        })(ContexteClient = Services.ContexteClient || (Services.ContexteClient = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des messages
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Libelle;
        (function (Libelle) {
            /*
            * Class de gestion de gestion des messages
            */
            var LibelleManager = /** @class */ (function (_super) {
                __extends(LibelleManager, _super);
                function LibelleManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Libelle) || this;
                    _this.api = null;
                    return _this;
                }
                LibelleManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
                };
                LibelleManager.prototype.constituerLibelle = function (codeLibelle, valeurs) {
                    if (codeLibelle === null || codeLibelle === undefined || codeLibelle.trim().length === 0) {
                        throw new Services.ErreurClient(Libelle.LibelleModel.TEC.CHAINE_VIDE, ["codeLibelle", codeLibelle]);
                    }
                    var libelles = this.api.messages;
                    var parties = codeLibelle.split(".");
                    var libelle;
                    if (libelles instanceof Object) {
                        var domaineFonctionnel = libelles[parties[0]];
                        if (domaineFonctionnel) {
                            if (typeof parties[1] === "string") {
                                libelle = domaineFonctionnel[parties[1]];
                                if (!libelle) {
                                    LibelleManager.logger.warn('Code message manquant : %1', codeLibelle);
                                    libelle = this.codeValeurs(codeLibelle, valeurs);
                                }
                            }
                            else {
                                LibelleManager.logger.warn('Code incorrect : %1', codeLibelle);
                                libelle = codeLibelle;
                            }
                        }
                        else {
                            LibelleManager.logger.warn('Code incorrect, domaine fonctionnel manquant : %1', parties[0]);
                            //libelle = this.codeValeurs(codeLibelle, valeurs);
                            libelle = codeLibelle;
                        }
                    }
                    else {
                        LibelleManager.logger.warn('Fichier Libelles manquants.');
                        //libelle = this.codeValeurs(codeLibelle, valeurs);
                        libelle = codeLibelle;
                    }
                    if (valeurs instanceof Array) {
                        // Remplacement des placeholders
                        for (var index = 0; index < valeurs.length; ++index) {
                            var placeHolder = "{" + index + "}";
                            if (libelle.indexOf(placeHolder) < 0) {
                                LibelleManager.logger.warn('PlaceHolder %1 manquant pour le code libelle %2', placeHolder, codeLibelle);
                            }
                            else {
                                libelle = libelle.replace(placeHolder, valeurs[index]);
                            }
                        }
                    }
                    // Suppression des placeholders non substitués
                    libelle = libelle.replace(/{[0-9]*}/g, '');
                    return this.library.Core.createPromiseSelfResolved(libelle);
                };
                /*
                * En cas d'absence du code du message, on utilise le code suivi des valeurs
                */
                LibelleManager.prototype.codeValeurs = function (codeLibelle, valeurs) {
                    var libelle = codeLibelle;
                    if (valeurs instanceof Array) {
                        valeurs.forEach(function (valeur) {
                            libelle = libelle + " " + valeur;
                        });
                    }
                    return libelle;
                };
                LibelleManager.prototype.afficherMessage = function (codeLibelle, typeAffichage, valeurs, delai, callback, onModaleOuverte) {
                    var _this = this;
                    this.constituerLibelle(codeLibelle, valeurs).then(function (pText) {
                        var codeMessage = pText;
                        if (typeAffichage === Libelle.TYPE_AFFICHAGE.INFORMATION) {
                            var message = { Type: "Info", Message: codeMessage };
                            _this.library.Display.DisplayMessage(message);
                        }
                        else {
                            var boutonsAAfficher = {
                                oui: false,
                                non: false,
                                valider: false,
                                ok: false,
                                annuler: false
                            };
                            switch (typeAffichage) {
                                case Libelle.TYPE_AFFICHAGE.ERREUR:
                                case Libelle.TYPE_AFFICHAGE.AVERTISSEMENT:
                                    boutonsAAfficher.ok = true;
                                    break;
                                case Libelle.TYPE_AFFICHAGE.OUI_NON:
                                    boutonsAAfficher.oui = true;
                                    boutonsAAfficher.non = true;
                                    break;
                                case Libelle.TYPE_AFFICHAGE.OUI_NON_ANNULER:
                                    boutonsAAfficher.oui = true;
                                    boutonsAAfficher.non = true;
                                    boutonsAAfficher.annuler = true;
                                    break;
                                case Libelle.TYPE_AFFICHAGE.VALIDER_ANNULER:
                                    boutonsAAfficher.valider = true;
                                    boutonsAAfficher.annuler = true;
                                    break;
                                case Libelle.TYPE_AFFICHAGE.ANNULER:
                                    boutonsAAfficher.annuler = true;
                                    break;
                                case Libelle.TYPE_AFFICHAGE.VIDE:
                                    break;
                            }
                            _this.library.Display.FermerModalMessage();
                            /* istanbul ignore next */
                            setTimeout(function () {
                                _this.library.Display.AfficherModalMessage("MESSAGE", codeMessage, boutonsAAfficher, delai, callback, onModaleOuverte);
                            }, 500);
                        }
                    });
                };
                LibelleManager.prototype.afficherMessageAsync = function (codeLibelle, typeAffichage, valeurs, delai) {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.afficherMessage(codeLibelle, typeAffichage, valeurs, delai, pDefer.resolve, function () {
                            /* istanbul ignore next */
                            var notificationMessage = new Services.NotificationMessage();
                            /* istanbul ignore next */
                            notificationMessage.Sujet = 'modaleOuverte';
                            /* istanbul ignore next */
                            _this.Notify(notificationMessage, function () { });
                        });
                    });
                };
                /* istanbul ignore next */
                LibelleManager.prototype.Notify = function (notification, success) {
                    this.library.Context.Notify(notification).then(success);
                };
                LibelleManager.CLASS_NAME = 'MyWay.Services.Libelle.LibelleManager';
                LibelleManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(LibelleManager.CLASS_NAME);
                return LibelleManager;
            }(Services.Components.ComponentManagerBase));
            Libelle.LibelleManager = LibelleManager;
            Services.Components.RegistryManager.getInstance().register(LibelleManager);
        })(Libelle = Services.Libelle || (Services.Libelle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var IndependantLogger;
(function (IndependantLogger) {
    /**
     * Model for a checkpoint, a moment we want to memorize in a script's execution
     */
    var CheckpointModel = /** @class */ (function () {
        function CheckpointModel(_message, _timestamp, _deltaWithPreviousCheckpoint) {
            this.message = _message;
            this.timestamp = _timestamp;
            this.deltaWithPreviousCheckpoint = _deltaWithPreviousCheckpoint;
        }
        return CheckpointModel;
    }());
    IndependantLogger.CheckpointModel = CheckpointModel;
    var Memory = /** @class */ (function () {
        function Memory() {
        }
        /**
         * Ajoute un point d'étape pour tracer le fonctionnement du portail
         * @param {string} message [description]
         * @param {number} timestamp [description]
         * @param {log} boolean        log in the browser console (or not) the message with a human readable date
         */
        Memory.addCheckpoint = function (message, timestamp, log) {
            if (log === true) {
                var d = new Date(timestamp), hh = d.getHours().toString(), mm = d.getMinutes().toString(), ss = d.getSeconds().toString(), ms = d.getMilliseconds().toString(), timestring = (hh[1] ? hh : "0" + hh[0]) + ':' +
                    (mm[1] ? mm : "0" + mm[0]) + ':' +
                    (ss[1] ? ss : "0" + ss[0]) + ',' +
                    (ms[2] ? ms : ms[1] ? "0" + ms : "00" + ms[0]);
                console.log(timestring + ' > ' + message);
            }
            Memory._checkpoints.push(new CheckpointModel(message, timestamp, Memory._checkpoints.length > 0 ? timestamp - Memory._checkpoints[Memory._checkpoints.length - 1].timestamp : 0));
            if (Memory._traceManager) {
                Memory._traceManager.recordCheckpoints();
            }
        };
        Memory._checkpoints = [];
        Memory._traceManager = null;
        return Memory;
    }());
    IndependantLogger.Memory = Memory;
})(IndependantLogger || (IndependantLogger = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            Trace.DB_STORE_TRACES = "storeTrace";
            Trace.DB_STORE_TRACES_INDEX_NIVEAU = "indexNiveau";
            Trace.DB_STORE_TRACES_INDEX_DATETIME = "indexDatetime";
            Trace.TIMEOUT_ENVOI_TRACE = 1000 * 60 * 5; //5 minutes
            Trace.NB_ESSAIS_MAX_TRACES = 5;
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            var EventSizeChangeType;
            (function (EventSizeChangeType) {
                EventSizeChangeType[EventSizeChangeType["SET"] = 0] = "SET";
                EventSizeChangeType[EventSizeChangeType["ADD"] = 1] = "ADD";
            })(EventSizeChangeType = Trace.EventSizeChangeType || (Trace.EventSizeChangeType = {}));
            var TraceDB = /** @class */ (function () {
                function TraceDB(hasIndexedDb, library, onSizeChange) {
                    this.hasIndexedDb = hasIndexedDb;
                    this.library = library;
                    this.onSizeChange = onSizeChange;
                    this.memoryDB = [];
                    this.memoryDBAutoincrement = 0;
                }
                TraceDB.prototype.get = function (pKeys) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lResultats_1 = [];
                        this.memoryDB.forEach(function (pTraceDB) {
                            var lTraceFound = null;
                            pKeys.every(function (pKey) {
                                if (pKey === pTraceDB.id) {
                                    lTraceFound = pTraceDB;
                                }
                                return lTraceFound === null;
                            });
                            lResultats_1.push(_this.elementToInstanceAvecCle(lTraceFound));
                        });
                        return this.library.Core.createPromiseSelfResolved(lResultats_1);
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceDB.TABLE_NOM);
                            var lResultats = [];
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pKeys.length) {
                                    pDefer.resolve(lResultats);
                                    return;
                                }
                                var lKey = pKeys[pCurrentIndex];
                                var lRequestRead = lTable.get(lKey);
                                lRequestRead.onsuccess = function (pEventRead) {
                                    if (!lRequestRead.result) {
                                        lResultats.push(null);
                                        console.warn("Trace " + lKey + " isn't found!");
                                    }
                                    else {
                                        lResultats.push(_this.elementToInstanceAvecCle(lRequestRead.result));
                                        lResultats.push({
                                            cle: lKey,
                                            element: lRequestRead.result
                                        });
                                    }
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lRequestRead.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors de la purge des traces de la base de données - Moment de la lecture"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                TraceDB.prototype.getAll = function () {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lResultats_2 = [];
                        this.memoryDB.forEach(function (pElement) {
                            lResultats_2.push(_this.elementToInstanceAvecCle(pElement));
                        });
                        return this.library.Core.createPromiseSelfResolved(lResultats_2);
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceDB.TABLE_NOM);
                            var lRequestCursor = lTable.openCursor();
                            var lResultats = [];
                            lRequestCursor.onsuccess = function (pEvent) {
                                var lCursor = pEvent.target.result;
                                if (lCursor) {
                                    var lTraceEnregistrement = lCursor.value;
                                    var lKey = lCursor.key;
                                    lResultats.push({
                                        cle: lKey,
                                        element: lTraceEnregistrement
                                    });
                                    lCursor.continue();
                                }
                                else {
                                    pDefer.resolve(lResultats);
                                }
                            };
                            lRequestCursor.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors du comptage du nombre de traces"));
                            };
                        });
                    });
                };
                TraceDB.prototype.chercher = function (pText) {
                    var _this = this;
                    if (!pText) {
                        return this.getAll();
                    }
                    if (!this.hasIndexedDb) {
                        var lResultats_3 = [];
                        this.memoryDB.forEach(function (pTrace) {
                            if (_this.testTrace(pTrace, pText)) {
                                lResultats_3.push(_this.elementToInstanceAvecCle(pTrace));
                            }
                        });
                        return this.library.Core.createPromiseSelfResolved(lResultats_3);
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceDB.TABLE_NOM);
                            var lRequestCursor = lTable.openCursor();
                            var lResultats = [];
                            lRequestCursor.onsuccess = function (pEvent) {
                                var lCursor = pEvent.target.result;
                                if (lCursor) {
                                    var lTraceEnregistrement = lCursor.value;
                                    if (_this.testTrace(lTraceEnregistrement, pText)) {
                                        var lKey = lCursor.key;
                                        lResultats.push({
                                            cle: lKey,
                                            element: lTraceEnregistrement
                                        });
                                    }
                                    lCursor.continue();
                                }
                                else {
                                    pDefer.resolve(lResultats);
                                }
                            };
                            lRequestCursor.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors du comptage du nombre de traces"));
                            };
                        });
                    });
                };
                TraceDB.prototype.count = function (pText) {
                    var _this = this;
                    if (pText || !this.hasIndexedDb) {
                        return this.chercher(pText).then(function (pTraces) {
                            return pTraces.length;
                        });
                    }
                    // Ici : Indexeddb et pas de criètère => Utilise la méthode count de indexeddb, optimisée!
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceDB.TABLE_NOM);
                            var lRequestCount = lTable.count();
                            lRequestCount.onsuccess = function () {
                                var lNbElements = lRequestCount.result;
                                pDefer.resolve(lNbElements);
                            };
                            lRequestCount.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors du comptage du nombre de traces"));
                            };
                        });
                    });
                };
                TraceDB.prototype.ajouter = function (pTraces) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        pTraces.forEach(function (pTrace) {
                            if (pTrace.id === undefined) {
                                pTrace.id = _this.memoryDBAutoincrement++;
                            }
                            else if (pTrace.id > _this.memoryDBAutoincrement) {
                                _this.memoryDBAutoincrement = pTrace.id + 1;
                            }
                            _this.memoryDB.push(pTrace);
                        });
                        return this.library.Core.getPromesseSelfResoved();
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceDB.TABLE_NOM);
                            var lAddSize = 0;
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pTraces.length) {
                                    _this.onSizeChange(lAddSize, EventSizeChangeType.ADD);
                                    pDefer.resolve();
                                    return;
                                }
                                var lTrace = pTraces[pCurrentIndex];
                                lAddSize += JSON.stringify(lTrace.trace).length;
                                var lAddRequest = lTable.add(lTrace);
                                lAddRequest.onsuccess = function () {
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lAddRequest.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors de la sauvegarde d'une trace"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                TraceDB.prototype.supprimer = function (pKeys) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lMemoryDB_1 = [];
                        this.memoryDB.forEach(function (pTraceDB) {
                            var lIsFound = false;
                            pKeys.every(function (pKey) {
                                lIsFound = pKey === pTraceDB.id;
                                return !lIsFound;
                            });
                            if (!lIsFound) {
                                lMemoryDB_1.push(pTraceDB);
                            }
                        });
                        this.memoryDB = lMemoryDB_1;
                        return this.library.Core.getPromesseSelfResoved();
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceDB.TABLE_NOM);
                            var lSizeRemoved = 0;
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pKeys.length) {
                                    _this.onSizeChange(lSizeRemoved * -1, EventSizeChangeType.ADD);
                                    pDefer.resolve();
                                    return;
                                }
                                var lKey = pKeys[pCurrentIndex];
                                var lRequestRead = lTable.get(lKey);
                                lRequestRead.onsuccess = function (pEventRead) {
                                    if (!lRequestRead.result) {
                                        console.warn("Trace " + lKey + " isn't found!");
                                        lCallbackSaveNext(pCurrentIndex + 1);
                                        return;
                                    }
                                    lSizeRemoved += JSON.stringify(lRequestRead.result.trace).length;
                                    var lRequestDelete = lTable.delete(lKey);
                                    lRequestDelete.onsuccess = function () {
                                        lCallbackSaveNext(pCurrentIndex + 1);
                                    };
                                    lRequestDelete.onerror = function (ev) {
                                        console.error(ev);
                                        pDefer.reject(new Services.Erreur("Erreur lors de la purge des traces de la base de données - Moment de la suppression"));
                                    };
                                };
                                lRequestRead.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors de la purge des traces de la base de données - Moment de la lecture"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                TraceDB.prototype.mettreAJour = function (pElements) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lDataToAdd_1 = [];
                        pElements.forEach(function (pElement) {
                            var lIsFound = false;
                            _this.memoryDB.every(function (pTableDB, pIndex) {
                                if (pElement.cle === pTableDB.id) {
                                    _this.memoryDB[pIndex] = pElement.element;
                                    lIsFound = true;
                                }
                                return !lIsFound;
                            });
                            if (!lIsFound) {
                                lDataToAdd_1.push(pElement.element);
                            }
                        });
                        if (lDataToAdd_1.length > 0) {
                            return this.ajouter(lDataToAdd_1);
                        }
                        else {
                            return this.library.Core.getPromesseSelfResoved();
                        }
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceDB.TABLE_NOM);
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pElements.length) {
                                    //Terminé
                                    pDefer.resolve();
                                    return;
                                }
                                var lElement = pElements[pCurrentIndex];
                                var lRequestPut = lTable.put(lElement.element, lElement.cle);
                                lRequestPut.onsuccess = function () {
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lRequestPut.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors du reset de la base de données"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                TraceDB.prototype.resetAll = function () {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        this.memoryDB.length = 0;
                        return this.library.Core.getPromesseSelfResoved();
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceDB.TABLE_NOM);
                            var lRequestClear = lTable.clear();
                            lRequestClear.onsuccess = function (pEvent) {
                                _this.onSizeChange(0, EventSizeChangeType.SET);
                                pDefer.resolve();
                            };
                            lRequestClear.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors du reset de la base de données"));
                            };
                        });
                    });
                };
                TraceDB.prototype.getTracesToPurge = function () {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        return this.library.Core.createPromiseSelfResolved(this.memoryDB);
                    }
                    var lTraces = [];
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceDB.TABLE_NOM);
                            var lRequestCursor = lTable.openCursor();
                            lRequestCursor.onsuccess = function (pEvent) {
                                var lCursor = pEvent.target.result;
                                if (lCursor) {
                                    var lTraceEnregistrement = lCursor.value;
                                    lTraceEnregistrement.id = lCursor.key;
                                    lTraces.push(lTraceEnregistrement);
                                    lCursor.continue();
                                }
                                else {
                                    pDefer.resolve(lTraces);
                                }
                            };
                            lRequestCursor.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors de la récupération des traces à purger"));
                            };
                        });
                    });
                };
                TraceDB.prototype.actionOnDB = function (pCallback) {
                    var lOpenAction = window.indexedDB.open("myway_stc_traces", TraceDB.VERSION);
                    lOpenAction.onupgradeneeded = function (ev) {
                        var lDB = ev.target.result;
                        switch (ev.oldVersion) {
                            case 0:
                                var lObjectStore = lDB.createObjectStore(TraceDB.TABLE_NOM, {
                                    autoIncrement: true
                                });
                                lObjectStore.createIndex("datetime", "datetime", { unique: false });
                                break;
                        }
                    };
                    lOpenAction.onsuccess = function (ev) {
                        var lDB = ev.target.result;
                        pCallback(lDB);
                    };
                };
                TraceDB.prototype.testTrace = function (pTrace, pText) {
                    if (pTrace.trace.message.match(pText)) {
                        return true;
                    }
                    return false;
                };
                TraceDB.prototype.elementToInstanceAvecCle = function (pElement) {
                    if (pElement) {
                        return {
                            cle: pElement.id,
                            element: pElement
                        };
                    }
                    else {
                        return null;
                    }
                };
                TraceDB.VERSION = 1;
                TraceDB.TABLE_NOM = "traces";
                return TraceDB;
            }());
            Trace.TraceDB = TraceDB;
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
// TODO: Externaliser la gestion de la purge
// TODO: Mettre aux normes + commentaires + cartouches d'en-tête
// TODO: Tests unitaires
/*
* Module de gestion des traces coté manager.
* En fonction du paramètrage, les traces envoyés peuvent:
* - être affichées dans la console
* - stockées dans une base de données du navigateur
* @module MyWay.Services.Trace
* @class TraceManager : Crée les traces directement par appel des méthodes debug, etc. ou par envoi de message
* @method getLogger : Récupère l'instance du traceManager en tant que logger
* @class : trace – public - Création et envoi d'une trace applicative
* @class Logger : Permet de tracer coté manager
* Admin
* @method : purgeTrace – public - Permet de purger la base de données du navigateur contenant les traces
* @method : getTracesByLevel – public - Permet d'obtenir l'ensemble des traces stockées dans la base de données des traces (interne au navigateur) qui ont un niveau supérieur ou égal au niveau spécifié
* Tools

* module : tools – public - Module encapsulant les outils de debug et de diagnostics des traces - Ne doit pas être utilisé en production
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            //Ajout de la vérification de l'authentification info lors des requêtes XHR
            Services.CoreCommon.addListenerOnCheckSettings(function (settings) {
                if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(settings.stepInfo) && !Services.Controle.StaticNumberControle.isNumber(settings.stepInfo.NiveauTrace)) {
                    settings.stepInfo.NiveauTrace = Trace.NIVEAUX_TRACE.DEBUG;
                }
            });
            // Configuration par défaut pour l'écriture en base de données navigateur
            Trace.QUOTA_PURGE = 100 * 1024; // Occupation des traces en octet déclenchant une purge (100 ko)
            var TAILLE_MAX_BD = 2 * 1024 * 1024; // Occupation des traces en octet déclenchant une purge ou forçant la suppression des traces les plus anciennes pour revenir à QUOTA_PURGE (2 Mo)
            Trace.INTERVALLE_PURGE = 10 * 60 * 1000; // Intervalle de temps en ms déclenchant une purge (10 minutes)
            var MAX_TRACE_PAR_ENVOI = 30;
            var isPurgeEnCours = false;
            var nbPurgesError = 0;
            var tailleTracesBD = 0;
            var EVENT_PURGE_ACTION;
            (function (EVENT_PURGE_ACTION) {
                EVENT_PURGE_ACTION[EVENT_PURGE_ACTION["DEBUT"] = 'DEBUT'] = "DEBUT";
                EVENT_PURGE_ACTION[EVENT_PURGE_ACTION["FIN"] = 'FIN'] = "FIN";
            })(EVENT_PURGE_ACTION || (EVENT_PURGE_ACTION = {}));
            /*
            * Crée les traces directement par appel des méthodes debug, etc. ou par envoi de message
            */
            var TraceManager = /** @class */ (function (_super) {
                __extends(TraceManager, _super);
                function TraceManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Trace) || this;
                    _this.api = null;
                    _this.storageInstanceSize = null;
                    _this.storageInstancePurge = null;
                    _this.traceDB = null;
                    _this.onCallbackOnFinProcessus = function (process) {
                        _this.purgerTraces();
                    };
                    _this._modeDebugDuration = 2 * 60 * 60 * 1000; //2 heures
                    _this._dateDebutDebug = 0; //Date de debut de débug
                    _this._dateFinDebug = 0; //Date de fin de débug
                    return _this;
                }
                TraceManager.prototype.createPrivateTrace = function (niveau, action, message, details) {
                    // Crée et envoi une trace privée
                    var tracePrivate = new Trace.TraceModel();
                    tracePrivate.niveau = niveau;
                    tracePrivate.composant = "TraceManager";
                    tracePrivate.action = action;
                    tracePrivate.application = MyWay.Framework.NAME + " V" + MyWay.Framework.VERSION;
                    tracePrivate.datetime = new Date().getTime();
                    tracePrivate.message = message;
                    tracePrivate.details = details;
                    this.traceModelToLogger(tracePrivate);
                };
                TraceManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                        _this.storageInstanceSize = _this.library.Persistence.addStorage("traces_size", function (pOnTraceSizeEvent) {
                            tailleTracesBD = pOnTraceSizeEvent.newSize;
                        });
                        _this.storageInstancePurge = _this.library.Persistence.addStorage("traces_size", function (pOnTraceSizeEvent) {
                            isPurgeEnCours = pOnTraceSizeEvent.action === EVENT_PURGE_ACTION.FIN;
                            nbPurgesError = pOnTraceSizeEvent.nbPurgesError;
                        });
                        return Services.BaseDeDonnees.Generique.Factory.testImplementationIndexeddb().then(function (pIndexedDBIsImplemented) {
                            //Initialise la base de données
                            _this.traceDB = new Trace.TraceDB(pIndexedDBIsImplemented, _this.library, function (pNewSize, pType) {
                                if (!pIndexedDBIsImplemented) {
                                    // Non partagé entre les instances du navigateur!
                                    return;
                                }
                                switch (pType) {
                                    case Trace.EventSizeChangeType.ADD:
                                        tailleTracesBD += pNewSize;
                                        break;
                                    case Trace.EventSizeChangeType.SET:
                                        tailleTracesBD = pNewSize;
                                        break;
                                    default:
                                        TraceManager.logger.error("L'evennement de type %1 n'est pas geré par le callback onSizeChanged() sur la base de données des traces", pType);
                                }
                                _this.storageInstanceSize.saveValue({
                                    newSize: tailleTracesBD
                                });
                            });
                            _this.library.BaseDeDonnees.enregistrerDB("TRACE", {
                                version: Trace.TraceDB.VERSION,
                                implementation: pIndexedDBIsImplemented ? Services.BaseDeDonnees.BaseDeDonneesImplementation.INDEXEDDB : Services.BaseDeDonnees.BaseDeDonneesImplementation.MEMORY,
                                getTables: function () {
                                    return [Trace.TraceDB.TABLE_NOM];
                                },
                                getTable: function (pNom) {
                                    switch (pNom) {
                                        case Trace.TraceDB.TABLE_NOM:
                                            return _this.traceDB;
                                        default:
                                            return null;
                                    }
                                }
                            });
                            //Recalcule la taille de la DB
                            return _this.traceDB.getAll().then(function (pTraces) {
                                var lSize = 0;
                                pTraces.forEach(function (pTrace) {
                                    if (!pTrace) {
                                        return;
                                    }
                                    lSize += JSON.stringify(pTrace.element.trace).length;
                                });
                                tailleTracesBD = lSize;
                                _this.storageInstanceSize.saveValue({
                                    newSize: tailleTracesBD
                                });
                                // enregistre les checkpoints gérés avec le Logger de base, indépendant du Framework technique
                                _this.recordCheckpoints();
                                // TODO: Aller chercher les traces temporaires (DBConfig) pour les stocker dans indexedDB
                                _this.startTimerPurge();
                            });
                        });
                    }).then(function () {
                        //S'inscrit au context pour purger en fin de processus
                        _this.library.Context.addListenerOnTerminerProcessus(_this.onCallbackOnFinProcessus);
                    }).then(function () {
                        _this.initializeModeDebug();
                    });
                };
                /*
                * Démarre un timer pour purger à intervalle régulier
                */
                TraceManager.prototype.startTimerPurge = function () {
                    if (this._timerPurgeId) {
                        throw "un timer est déjà en cours d'éxécution";
                    }
                    this.createPrivateTrace(Trace.NIVEAUX_TRACE.DEBUG, "startTimerPurge", "Démarrage du timer de purge");
                    var self = this;
                    this._timerPurgeId = window.setInterval(function () {
                        self.purgerTraces();
                    }, Trace.INTERVALLE_PURGE);
                };
                TraceManager.prototype.dispose = function () {
                    this.library.Context.removeListenerOnTerminerProcessus(this.onCallbackOnFinProcessus);
                    if (this._timerPurgeId) {
                        // Arrêt du timer de purge
                        this.createPrivateTrace(Trace.NIVEAUX_TRACE.DEBUG, "Dispose", "Arrêt du timer de purge");
                        clearInterval(this._timerPurgeId);
                        this._timerPurgeId = null;
                    }
                    Services.Loggers.Appenders.DBAppender.SERVICE_TRACE = null;
                    this.library.BaseDeDonnees.disposeDB("TRACE");
                    return _super.prototype.dispose.call(this);
                };
                TraceManager.prototype.traceToLogger = function (pTrace) {
                    var lLogger = Services.Loggers.LoggerFactory.INSTANCE.getClass(pTrace.packageName);
                    lLogger.tracer(pTrace);
                };
                TraceManager.prototype.traceModelToLogger = function (pTrace) {
                    var lLogger = Services.Loggers.LoggerFactory.INSTANCE.getClass("MyWay.SPA." + pTrace.composant);
                    Services.Loggers.FLASH.INSTANCE.setValue('details', pTrace.details);
                    Services.Loggers.FLASH.INSTANCE.setValue('action', pTrace.action);
                    if (pTrace.datetime)
                        Services.Loggers.FLASH.INSTANCE.setValue('dateLog', new Date(pTrace.datetime));
                    switch (pTrace.niveau) {
                        case Trace.NIVEAUX_TRACE.DEBUG:
                            lLogger.debug(pTrace.message);
                            break;
                        case Trace.NIVEAUX_TRACE.INFO:
                            lLogger.info(pTrace.message);
                            break;
                        case Trace.NIVEAUX_TRACE.WARNING:
                            lLogger.warn(pTrace.message);
                            break;
                        case Trace.NIVEAUX_TRACE.ERROR:
                            lLogger.error(pTrace.message);
                            break;
                        default:
                            throw 'Niveau de trace ' + pTrace.niveau + ' non supporté';
                    }
                };
                TraceManager.prototype.recupererInfosContexte = function (trace) {
                    //- le quartet : Code Agent, code établissement, code agence, EDS + le client (nom du poste)
                    var authentificationInfo = this.library.Context.GetAuthentificationInfo();
                    if (authentificationInfo) {
                        trace.COCXBQ = authentificationInfo.codeEtablissement;
                        trace.client = authentificationInfo.numeroStationTravail;
                        if (authentificationInfo.agentConnecte) {
                            trace.COCEAG = authentificationInfo.agentConnecte.referenceExterneAgent;
                            trace.CTCEAG = authentificationInfo.agentConnecte.typeFonction;
                            trace.NOCEEL = authentificationInfo.agentConnecte.numeroInterneEds;
                        }
                    }
                    // L'id du processus principal et le chemin courant des instances
                    trace.idProcessus = Services.Donnees.StaticStringExtension.getEmptyStringIfNotStringOrGetItSelf(this.library.Context.GetMainProcessId());
                    trace.cheminInstances = Services.Donnees.StaticStringExtension.getEmptyStringIfNotStringOrGetItSelf(this.library.Context.GetPortalContext().currentPath);
                };
                /**
                 * Envoi effectif de la trace
                 * @param pMessage Message à envoyer
                 */
                TraceManager.prototype.logToTrace = function (pMessage, pMessageFormater) {
                    var lNiveau = null;
                    switch (pMessage.niveau) {
                        case Services.Loggers.LEVEL.DEBUG:
                            lNiveau = Trace.NIVEAUX_TRACE.DEBUG;
                            break;
                        case Services.Loggers.LEVEL.INFO:
                            lNiveau = Trace.NIVEAUX_TRACE.INFO;
                            break;
                        case Services.Loggers.LEVEL.WARN:
                            lNiveau = Trace.NIVEAUX_TRACE.WARNING;
                            break;
                        case Services.Loggers.LEVEL.ERROR:
                            lNiveau = Trace.NIVEAUX_TRACE.ERROR;
                            break;
                    }
                    var lMessage = pMessageFormater.format(pMessage);
                    var lDetails = pMessage.context['details'];
                    var lAction = pMessage.context['action'];
                    var lTraceDate = pMessage.date;
                    if (lAction === "ServiceAgentExtended" && lDetails && lDetails.lastDigestTime) {
                        lTraceDate = lDetails.lastDigestTime;
                        lDetails = null;
                    }
                    var lApplication = null;
                    var lComposant = null;
                    if (/^MyWay\.Service.*/.test(pMessage.packageName)) {
                        if (typeof MyWay.Framework != 'undefined') {
                            lApplication = MyWay.Framework.NAME + " V" + MyWay.Framework.VERSION;
                        }
                        else {
                            lApplication = "Framework inconnu";
                        }
                        lComposant = pMessage.packageName;
                    }
                    else {
                        lApplication = pMessage.packageName;
                        lComposant = null;
                    }
                    if (!lAction) {
                        lAction = '';
                    }
                    if (!lComposant) {
                        lComposant = '';
                    }
                    if (!lDetails) {
                        lDetails = null;
                    }
                    var lTrace = {
                        action: lAction,
                        application: lApplication,
                        cheminInstances: null,
                        client: null,
                        COCEAG: null,
                        COCXBQ: null,
                        composant: lComposant,
                        CTCEAG: null,
                        datetime: pMessage.date,
                        details: lDetails,
                        idProcessus: null,
                        message: lMessage,
                        niveau: lNiveau,
                        NOCEEL: null,
                        serveur: null,
                        url: window.location.href
                    };
                    return lTrace;
                };
                TraceManager.prototype.sendMultipleLogs = function (pTraces, pMessageFormater) {
                    var _this = this;
                    var lTracesAAjouter = [];
                    pTraces.forEach(function (pLog) {
                        var lTrace = _this.logToTrace(pLog, pMessageFormater);
                        _this.recupererInfosContexte(lTrace);
                        lTracesAAjouter.push({
                            dateDernierEnvoi: 0,
                            nbEssais: 0,
                            trace: lTrace
                        });
                    });
                    return this.traceDB.ajouter(lTracesAAjouter).then(function () {
                        _this.gererPurge();
                    });
                };
                /**
                 * Enregistre une trace en base IndexedDB,
                 * l'affiche si demandé
                 * @param {TraceModel} trace      trace à enregistrer
                 * @param {boolean}    display    affiche ou non la trace
                 */
                TraceManager.prototype.sendLog = function (pLog, pMessageFormater) {
                    var _this = this;
                    var lTrace = this.logToTrace(pLog, pMessageFormater);
                    this.recupererInfosContexte(lTrace);
                    var lTraceAAjouter = {
                        dateDernierEnvoi: 0,
                        nbEssais: 0,
                        trace: lTrace
                    };
                    return this.traceDB.ajouter([lTraceAAjouter]).then(function () {
                        _this.gererPurge();
                    });
                };
                /**
                 * Enregistre une trace en base IndexedDB,
                 * l'affiche si demandé
                 * @param {TraceModel} trace      trace à enregistrer
                 * @param {boolean}    display    affiche ou non la trace
                 */
                TraceManager.prototype.send = function (trace, display) {
                    var _this = this;
                    this.recupererInfosContexte(trace);
                    var lTraceAAjouter = {
                        dateDernierEnvoi: 0,
                        nbEssais: 0,
                        trace: trace
                    };
                    return this.traceDB.ajouter([lTraceAAjouter]).then(function () {
                        _this.gererPurge();
                    });
                };
                /**
                 * Enregistre dans les traces techniques les traces 'indépendantes'
                 */
                TraceManager.prototype.recordCheckpoints = function (pTraces) {
                    var _this = this;
                    for (var index in IndependantLogger.Memory._checkpoints) {
                        var currentTrace = new Trace.TraceModel();
                        currentTrace.datetime = IndependantLogger.Memory._checkpoints[index].timestamp;
                        currentTrace.message = IndependantLogger.Memory._checkpoints[index].message;
                        currentTrace.niveau = Trace.NIVEAUX_TRACE.INFO;
                        this.traceModelToLogger(currentTrace);
                    }
                    if (pTraces && pTraces.length > 0) {
                        pTraces.forEach(function (pTrace) {
                            _this.traceModelToLogger(currentTrace);
                        });
                    }
                    IndependantLogger.Memory._checkpoints = [];
                    IndependantLogger.Memory._traceManager = this;
                    Services.Loggers.Appenders.DBAppender.SERVICE_TRACE = this;
                };
                /*
                * Purger les traces si besoin
                */
                TraceManager.prototype.gererPurge = function () {
                    if (isPurgeEnCours) {
                        return;
                    }
                    if (tailleTracesBD > Trace.QUOTA_PURGE) {
                        this.purgerTraces();
                    }
                };
                TraceManager.prototype.resetDB = function () {
                    return this.traceDB.resetAll();
                };
                /*
                * Purger les traces de la base pour les archiver
                */
                TraceManager.prototype.purgerTraces = function () {
                    var _this = this;
                    if (isPurgeEnCours) {
                        return;
                    }
                    this.createPrivateTrace(Trace.NIVEAUX_TRACE.DEBUG, "purgerTraces", "Début de la purge");
                    isPurgeEnCours = true;
                    this.storageInstancePurge.saveValue({
                        action: EVENT_PURGE_ACTION.DEBUT,
                        nbPurgesError: nbPurgesError
                    });
                    var lTracesAEnvoyer = [];
                    var lTracesMisesAJour = [];
                    var lTracesEnregistrement = null;
                    return this.traceDB.getTracesToPurge().then(function (pTracesEnregistrement) {
                        lTracesEnregistrement = pTracesEnregistrement;
                        if (pTracesEnregistrement.length === 0) {
                            isPurgeEnCours = false;
                            _this.storageInstancePurge.saveValue({
                                action: EVENT_PURGE_ACTION.FIN,
                                nbPurgesError: nbPurgesError
                            });
                            return;
                        }
                        var lTimestampCourant = new Date().getTime();
                        pTracesEnregistrement.every(function (pTrace) {
                            pTrace.dateDernierEnvoi = lTimestampCourant;
                            lTracesAEnvoyer.push(pTrace.trace);
                            lTracesMisesAJour.push({
                                cle: pTrace.id,
                                element: pTrace
                            });
                            return lTracesAEnvoyer.length < MAX_TRACE_PAR_ENVOI;
                        });
                        return _this.traceDB.mettreAJour(lTracesMisesAJour);
                    }).then(function () {
                        return _this.library.Context.getAuthentificationInfo();
                    }).then(function (pAuthentificationInfo) {
                        return _this.api.envoyerTraces(lTracesAEnvoyer, pAuthentificationInfo);
                    }).then(function () {
                        //Tout s'est bien passé, supprime ces traces
                        nbPurgesError = 0;
                        var lIdTracesMisesAJour = [];
                        lTracesMisesAJour.forEach(function (pTrace) {
                            lIdTracesMisesAJour.push(pTrace.cle);
                        });
                        _this.traceDB.supprimer(lIdTracesMisesAJour);
                    }, function (pErreur) {
                        console.error(pErreur);
                        _this.finDePurgeFail(lTracesMisesAJour);
                    }).finally(function () {
                        isPurgeEnCours = false;
                        _this.storageInstancePurge.saveValue({
                            action: EVENT_PURGE_ACTION.FIN,
                            nbPurgesError: nbPurgesError
                        });
                        if (lTracesEnregistrement.length >= MAX_TRACE_PAR_ENVOI) {
                            //Lance le lot suivant à purger
                            _this.purgerTraces();
                        }
                    });
                };
                TraceManager.prototype.finDePurgeFail = function (pTraces) {
                    var _this = this;
                    nbPurgesError++;
                    if (nbPurgesError >= 5) {
                        //Environnement ne permettant pas de purger les traces, supprime tout!
                        this.traceDB.resetAll();
                        return;
                    }
                    var lTracesReportees = [];
                    var lIdTracesSupprimees = [];
                    pTraces.forEach(function (pTrace) {
                        if (pTrace.element.nbEssais < Trace.NB_ESSAIS_MAX_TRACES) {
                            pTrace.element.nbEssais++;
                            lTracesReportees.push(pTrace);
                        }
                        else {
                            lIdTracesSupprimees.push(pTrace.cle);
                        }
                    });
                    return this.traceDB.mettreAJour(lTracesReportees).then(function () {
                        return _this.traceDB.supprimer(lIdTracesSupprimees);
                    }).then(function () {
                        if (lTracesReportees.length > 0) {
                            _this.createPrivateTrace(Trace.NIVEAUX_TRACE.WARNING, 'purgerTraces', "Des traces n'ont pas pu être envoyées, incrémentation de leur compteur de tentative d'envois");
                        }
                        if (lIdTracesSupprimees.length > 0) {
                            _this.createPrivateTrace(Trace.NIVEAUX_TRACE.ERROR, 'purgerTraces', "Des traces ont atteint leur quota de tentative d'envois, elles sont donc supprimées");
                        }
                    });
                };
                TraceManager.prototype.sendDiagnostic = function (diagnostic) {
                    var currentStep = null;
                    var currentProcess = this.library.Context.GetCurrentProcess();
                    if (currentProcess) {
                        currentStep = this.library.Context.GetCurrentStep(currentProcess);
                    }
                    if (currentStep) {
                        if (currentStep.id === diagnostic.stepId) {
                            diagnostic.contextSize = this.library.Context.GetCurrentProcessContextSize();
                            this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.Diagnostic, { diagnostic: diagnostic }));
                        }
                        if (diagnostic.finalDiagnostic) {
                            this.library.Context.SetDiagnosticTraceSentForStep(diagnostic.stepPath);
                            currentStep.diagnosticTraceSentForStep = diagnostic.finalDiagnostic;
                        }
                    }
                };
                TraceManager.prototype.formatageDate = function (date) {
                    //On vérifie que la date est bien au format 29/12/2018 23:00:00
                    var formatDate = /^(0[1-9]|1\d|2\d|3[01])\/(0[1-9]|1\d|2\d|3[01])\/(19|20)\d{2}\s+(0[0-9]|1[0-9]|2[0-3])\:(0[0-9]|[1-5][0-9])\:(0[0-9]|[1-5][0-9])$/;
                    if (formatDate.test(date) === false) {
                        return null;
                    }
                    //On sépare dans un tableau la partie date de la partie heure
                    var arrayDate = date.split(" ");
                    //Met le format date en mode anglais => 12/29/2018
                    var arrayDateDMY = arrayDate[0].split("/");
                    arrayDateDMY.reverse();
                    //On reconstitue la date => 12/29/2018 23:00:00
                    var dateFormate = arrayDateDMY.join("/") + " " + arrayDate[1];
                    return new Date(dateFormate);
                };
                TraceManager.prototype.initializeModeDebug = function () {
                    var activationDate = 0;
                    try {
                        var modeDebugActivationDate = this.library.Context.GetFromContext('MODEDEBUG');
                        if (modeDebugActivationDate) {
                            activationDate = parseInt(modeDebugActivationDate, 10);
                        }
                    }
                    catch (e) {
                        //do nothing
                    }
                    if ((Date.now() < this._dateFinDebug) && (this._dateDebutDebug < Date.now())) {
                        Services.PrivatePortalServiceParameters.Instance().TTLModeDebug = this._dateFinDebug;
                    }
                    else if (activationDate > 0) {
                        Services.PrivatePortalServiceParameters.Instance().TTLModeDebug = activationDate + this._modeDebugDuration;
                    }
                    else {
                        Services.PrivatePortalServiceParameters.Instance().TTLModeDebug = 0;
                    }
                    this.api.setModeDebug(Services.PrivatePortalServiceParameters.Instance().TTLModeDebug);
                };
                TraceManager.prototype.setModeDebug = function (active) {
                    var _this = this;
                    if (active) {
                        TraceManager.logger.info('Activation du mode debug');
                        this.library.Context.AddToContext(Services.Context.StorageLevel.Global, "MODEDEBUG", Date.now().toString());
                        Services.PrivatePortalServiceParameters.Instance().TTLModeDebug = Date.now() + this._modeDebugDuration;
                        //On va récupérer un fichier sur le poste de l'utilisateur qui permet de mettre en modeDébug pour une durée spécifique
                        this.api.readFileModeDebug().then(function (result) {
                            try {
                                var dateDebutDebug = _this.formatageDate(result.DateHeureDebut);
                                var dateFinDebug = _this.formatageDate(result.DateHeureFin);
                                if ((dateDebutDebug.getTime() < Date.now()) && (Date.now() < dateFinDebug.getTime())) {
                                    _this._dateDebutDebug = dateDebutDebug.getTime();
                                    _this._dateFinDebug = dateFinDebug.getTime();
                                    Services.PrivatePortalServiceParameters.Instance().TTLModeDebug = _this._dateFinDebug;
                                }
                            }
                            catch (erreur) {
                                TraceManager.logger.warn('Format des dates incorrectes dans le fichier ModeDebugMyway.json : %1', erreur.codeLibelle);
                            }
                        }).catch(function (erreur) {
                            TraceManager.logger.warn('Erreur lors de la lecture du fichier ModeDebugMyway.json : %1', erreur.codeLibelle);
                        }).finally(function () {
                            TraceManager.logger.info('Mode débug activité jusqu\'à : %1', new Date(Services.PrivatePortalServiceParameters.Instance().TTLModeDebug));
                            _this.api.setModeDebug(Services.PrivatePortalServiceParameters.Instance().TTLModeDebug);
                        });
                    }
                    else {
                        TraceManager.logger.info('Desactivation du mode debug');
                        this.library.Context.AddToContext(Services.Context.StorageLevel.Global, "MODEDEBUG", "0");
                        Services.PrivatePortalServiceParameters.Instance().TTLModeDebug = 0;
                        this.api.setModeDebug(Services.PrivatePortalServiceParameters.Instance().TTLModeDebug);
                    }
                };
                TraceManager.CLASS_NAME = 'MyWay.Services.Trace.TraceManager';
                TraceManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(TraceManager.CLASS_NAME);
                return TraceManager;
            }(Services.Components.ComponentManagerBase));
            Trace.TraceManager = TraceManager;
            Services.Components.RegistryManager.getInstance().register(TraceManager);
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var Appenders;
            (function (Appenders) {
                var DBAppender = /** @class */ (function (_super) {
                    __extends(DBAppender, _super);
                    function DBAppender(pNom, level, config) {
                        var _this = _super.call(this, pNom, DBAppender.CLASSNAME, level, config) || this;
                        /** Niveaux de logs qui déclenchent la purge des traces en attente */
                        _this.niveauxDeclenchementPurgeDebug = [];
                        /** Niveau de trace maximum avant d'être mise en attente */
                        _this.niveauMaxTrace = null;
                        /** Nombre de traces qui se mettent en attente au maximum */
                        _this.nbTracesAStocker = null;
                        /** Liste de messages en attente */
                        _this.messagesAPurgerSiError = [];
                        /** Position courrante d'écriture dans la liste des messages en attente (car tableau cyclique) */
                        _this.indexMessagesAPurgerSiError = 0;
                        _this.niveauxDeclenchementPurgeDebug = config.niveauxDeclenchementPurgeDebug || [
                            {
                                name: '*',
                                level: Loggers.LEVEL.ERROR
                            }
                        ];
                        _this.niveauMaxTrace = config.niveauMaxTrace || Loggers.LEVEL.WARN;
                        _this.nbTracesAStocker = config.nbTracesAStocker || 50;
                        return _this;
                    }
                    Object.defineProperty(DBAppender, "SERVICE_TRACE", {
                        set: function (pService) {
                            DBAppender._SERVICE_TRACE = pService;
                            if (DBAppender._SERVICE_TRACE !== null && DBAppender.tracesAEnregistrer.length > 0) {
                                DBAppender._SERVICE_TRACE.sendMultipleLogs(DBAppender.tracesAEnregistrer, DBAppender.messageFormater);
                                DBAppender.tracesAEnregistrer.length = 0;
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    /**
                     * Surcharge du append pour que si la trace ne doit pas être envoyée elle soit mise de côté
                     * @param pMessage
                     */
                    DBAppender.prototype.append = function (pMessage) {
                        if (!_super.prototype.append.call(this, pMessage)) {
                            //La trace ne doit pas être envoyée, la stock dans la pile des traces
                            if (this.messagesAPurgerSiError.length < this.nbTracesAStocker) {
                                this.messagesAPurgerSiError.push(pMessage);
                            }
                            else {
                                this.messagesAPurgerSiError[this.indexMessagesAPurgerSiError] = pMessage;
                                this.indexMessagesAPurgerSiError++;
                                this.indexMessagesAPurgerSiError %= this.nbTracesAStocker;
                            }
                            return false;
                        }
                        return true;
                    };
                    /**
                     * Message du loggeur à envoyer. Teste d'abord si le message doit être mis en attente, déclenche une purge et / ou est envoyé directement.
                     * @param pMessage Message à envoyer
                     */
                    DBAppender.prototype.onAppend = function (pMessage) {
                        this.verificationEtEnvoiTracesSiNiveauDelenchementAtteint(pMessage);
                        this.envoyerTrace(pMessage);
                    };
                    /**
                     * Cette méthode vérifie que la trace en paramètre ne déclenche pas la purge des traces en attente.
                     * @param pMessage Message à tester
                     */
                    DBAppender.prototype.verificationEtEnvoiTracesSiNiveauDelenchementAtteint = function (pMessage) {
                        var lLastPackageMatch = null;
                        var lLastLevelMatch = Loggers.LEVEL.NONE;
                        this.niveauxDeclenchementPurgeDebug.forEach(function (pNiveauDeclenchementPurgeDebug) {
                            if ('*' !== pNiveauDeclenchementPurgeDebug.name && !new RegExp('^' + pNiveauDeclenchementPurgeDebug.name.replace('.', '\\.')).test(pMessage.packageName)) {
                                return;
                            }
                            if (lLastPackageMatch === null || lLastPackageMatch.length < pNiveauDeclenchementPurgeDebug.name.length) {
                                //Niveau de package plus précis, le prends en compte
                                lLastLevelMatch = pNiveauDeclenchementPurgeDebug.level;
                                lLastPackageMatch = pNiveauDeclenchementPurgeDebug.name;
                            }
                        });
                        if (Loggers.LoggerHelper.INSTANCE.testLevel(pMessage.niveau, lLastLevelMatch)) {
                            //Déclenche la purge des messages en attente
                            var lCurrentIndex = this.indexMessagesAPurgerSiError;
                            //Va jusqu'à la fin du tableau
                            while (lCurrentIndex < this.messagesAPurgerSiError.length) {
                                this.envoyerTrace(this.messagesAPurgerSiError[lCurrentIndex]);
                                lCurrentIndex++;
                            }
                            //Et reprends de 0 jusqu'à indexMessagesAPurgerSiError
                            lCurrentIndex = 0;
                            while (lCurrentIndex < this.indexMessagesAPurgerSiError) {
                                this.envoyerTrace(this.messagesAPurgerSiError[lCurrentIndex]);
                                lCurrentIndex++;
                            }
                            this.messagesAPurgerSiError.length = 0;
                            this.indexMessagesAPurgerSiError = 0;
                        }
                    };
                    /**
                     * Envoi effectif de la trace
                     * @param pMessage Message à envoyer
                     */
                    DBAppender.prototype.envoyerTrace = function (pMessage) {
                        if (DBAppender._SERVICE_TRACE === null) {
                            DBAppender.tracesAEnregistrer.push(pMessage);
                            return;
                        }
                        DBAppender._SERVICE_TRACE.sendLog(pMessage, DBAppender.messageFormater);
                    };
                    DBAppender.CLASSNAME = "MyWay.Services.Loggers.Appenders.DBAppender";
                    DBAppender._SERVICE_TRACE = null;
                    DBAppender.tracesAEnregistrer = [];
                    DBAppender.messageFormater = new Loggers.Formaters.MessageFormater();
                    return DBAppender;
                }(Appenders.AbstractAppender));
                Appenders.DBAppender = DBAppender;
                Loggers.LoggerFactory.INSTANCE.declareAppender(DBAppender.CLASSNAME, DBAppender);
            })(Appenders = Loggers.Appenders || (Loggers.Appenders = {}));
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Loggers;
        (function (Loggers) {
            var Appenders;
            (function (Appenders) {
                var PortalAppender = /** @class */ (function (_super) {
                    __extends(PortalAppender, _super);
                    function PortalAppender(pNom, level, config) {
                        var _this = _super.call(this, pNom, PortalAppender.CLASSNAME, level, config) || this;
                        _this.format = null;
                        _this._eventsToSend = null;
                        _this.parse(config.format);
                        return _this;
                    }
                    PortalAppender.prototype.onAppend = function (pMessage) {
                        var lResultat = '';
                        this.format.forEach(function (pFormater) {
                            lResultat += pFormater.format(pMessage);
                        });
                        var event = new Services.Component.ManagerEvent(Services.Component.ManagerEventType.Log, { trace: { content: lResultat, level: null } });
                        event.ComponentName = Services.Components.ComponentType.Trace;
                        switch (pMessage.niveau) {
                            case Loggers.LEVEL.DEBUG:
                                event.Detail.trace.level = 'DEBUG';
                                this.send(event);
                                break;
                            case Loggers.LEVEL.INFO:
                                event.Detail.trace.level = 'INFO';
                                this.send(event);
                                break;
                            case Loggers.LEVEL.WARN:
                                event.Detail.trace.level = 'WARN';
                                this.send(event);
                                break;
                            case Loggers.LEVEL.ERROR:
                                event.Detail.trace.level = 'ERROR';
                                this.send(event);
                                break;
                        }
                    };
                    PortalAppender.prototype.send = function (pEvent) {
                        var libEvents = null;
                        if (Services.ServiceManager.Instance() && Services.ServiceManager.Instance().Library && Services.ServiceManager.Instance().Library.Evennements) {
                            libEvents = Services.ServiceManager.Instance().Library.Evennements;
                        }
                        if (libEvents) {
                            if (this._eventsToSend !== null) {
                                this._eventsToSend.forEach(function (pEventSaved) {
                                    Services.ServiceManager.Instance().Library.Evennements.notifier(pEventSaved);
                                });
                                this._eventsToSend = null;
                            }
                            Services.ServiceManager.Instance().Library.Evennements.notifier(pEvent);
                        }
                        else {
                            if (this._eventsToSend === null) {
                                this._eventsToSend = [];
                            }
                            this._eventsToSend.push(pEvent);
                        }
                    };
                    PortalAppender.prototype.parse = function (pFormat) {
                        var _this = this;
                        var lMorceaux = pFormat.split(/%([^ ]+)/g);
                        this.format = [];
                        lMorceaux.forEach(function (pMorceau) {
                            if (pMorceau.length === 0) {
                                return;
                            }
                            if (/^d/.test(pMorceau)) {
                                var lDateFormatTableau = pMorceau.split(/d{([^}]+)}/);
                                if (lDateFormatTableau.length !== 3) {
                                    _this.format.push(new Loggers.Formaters.DateFormater());
                                    return;
                                }
                                _this.format.push(new Loggers.Formaters.DateFormater(lDateFormatTableau[1]));
                                return;
                            }
                            if (/^level$/.test(pMorceau)) {
                                _this.format.push({
                                    format: function (pMessage) {
                                        return pMessage.niveau.toString();
                                    }
                                });
                                return;
                            }
                            if (/^class/.test(pMorceau)) {
                                _this.format.push({
                                    format: function (pMessage) {
                                        return pMessage.packageName;
                                    }
                                });
                                return;
                            }
                            if (/^msg/.test(pMorceau)) {
                                _this.format.push(new Loggers.Formaters.MessageFormater());
                                return;
                            }
                            //Non reconnu, recopie tel quel le morceau
                            _this.format.push({
                                format: function (pMessage) {
                                    return pMorceau;
                                }
                            });
                            return;
                        });
                    };
                    PortalAppender.CLASSNAME = "MyWay.Services.Loggers.Appenders.PortalAppender";
                    return PortalAppender;
                }(Appenders.AbstractAppender));
                Appenders.PortalAppender = PortalAppender;
                Loggers.LoggerFactory.INSTANCE.declareAppender(PortalAppender.CLASSNAME, PortalAppender);
            })(Appenders = Loggers.Appenders || (Loggers.Appenders = {}));
        })(Loggers = Services.Loggers || (Services.Loggers = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var ContextManagerMessage = /** @class */ (function (_super) {
                __extends(ContextManagerMessage, _super);
                //Constructor
                function ContextManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Context) || this;
                }
                ContextManagerMessage.prototype.getAuthentificationInfo = function () {
                    return this.managerInstance.getAuthentificationInfo();
                };
                ContextManagerMessage.prototype.reception = function (pMessage) {
                    var _this = this;
                    switch (pMessage.subject) {
                        case Context.ContextMessageSubject.AddToContext: {
                            var lMessage = pMessage.message;
                            var key_2 = lMessage.key;
                            var value = lMessage.value;
                            var level = Context.StorageLevel.Process;
                            ContextManagerMessage.logger.debug('Ajout au contexte %1 de la clé %2', level, key_2);
                            return this.managerInstance.AddToContextAsync(level, key_2, value);
                        }
                        case Context.ContextMessageSubject.AddToContextTech: {
                            var lMessage = pMessage.message;
                            var kvp = lMessage.kvp;
                            var level = lMessage.level;
                            var elementId = lMessage.elementId;
                            ContextManagerMessage.logger.debug('Ajout au contexte %1 des clés valeurs %2', level, JSON.pruned(kvp));
                            return this.managerInstance.AddListToContextAsync(level, kvp, elementId);
                        }
                        case Context.ContextMessageSubject.ClearContext: {
                            var lMessage = pMessage.message;
                            ContextManagerMessage.logger.debug('Efface le contexte');
                            this.managerInstance.ClearContext();
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            lDefer.resolve();
                            return lDefer.promise;
                        }
                        case Context.ContextMessageSubject.AddToSharedContext: {
                            var lMessage = pMessage.message;
                            var key_3 = lMessage.key;
                            var value = lMessage.value;
                            var level = Context.StorageLevel.Shared;
                            ContextManagerMessage.logger.debug('Ajout au contexte %1 de la clé %2', level, key_3);
                            return this.managerInstance.AddToContextAsync(level, key_3, value);
                        }
                        case Context.ContextMessageSubject.RemoveFromSharedContext: {
                            var lMessage = pMessage.message;
                            var key_4 = lMessage.key;
                            var level = Context.StorageLevel.Shared;
                            ContextManagerMessage.logger.debug('Ajout au contexte ' + level + ' de la clé ' + key_4);
                            return this.managerInstance.RemoveFromContextAsync(level, key_4);
                        }
                        case Context.ContextMessageSubject.AddToProcessStepContext: {
                            var lMessage = pMessage.message;
                            var key_5 = lMessage.key;
                            var value = lMessage.value;
                            var processStepId = lMessage.processStepId;
                            var level = Context.StorageLevel.Step;
                            ContextManagerMessage.logger.debug('Ajout au contexte %1 de la clé %2', level, key_5);
                            return this.managerInstance.AddListToContextAsync(level, [{ Key: key_5, Value: value }], processStepId);
                        }
                        case Context.ContextMessageSubject.AddToGlobalContext: {
                            var lMessage = pMessage.message;
                            var kvp = lMessage.kvp;
                            var level = Context.StorageLevel.Global;
                            ContextManagerMessage.logger.debug('Ajout au contexte %1 de %2', level, JSON.stringify(kvp));
                            return this.managerInstance.AddListToContextAsync(level, kvp);
                        }
                        case Context.ContextMessageSubject.AddToTempoContext: {
                            var lMessage = pMessage.message;
                            var kvp = lMessage.kvp;
                            var level = Context.StorageLevel.Tempo;
                            ContextManagerMessage.logger.debug('Ajout au contexte %1 de %2', level, JSON.stringify(kvp));
                            return this.managerInstance.AddListToContextAsync(level, kvp);
                        }
                        case Context.ContextMessageSubject.AddListToContext: {
                            var lMessage = pMessage.message;
                            var kvp = lMessage.kvp;
                            var level = Context.StorageLevel.Process;
                            ContextManagerMessage.logger.debug('Ajout au contexte %1 de %2', level, JSON.stringify(kvp));
                            return this.managerInstance.AddListToContextAsync(level, kvp);
                        }
                        case Context.ContextMessageSubject.AddToMainProcessContext: {
                            var lMessage = pMessage.message;
                            var key_6 = lMessage.key;
                            var value = lMessage.value;
                            var level = Context.StorageLevel.MainProcess;
                            ContextManagerMessage.logger.debug('Ajout au contexte %1 de la clé %2', level, key_6);
                            return this.managerInstance.AddToContextAsync(level, key_6, value).then(function (pValue) {
                                _this.managerInstance.SendPortalContext(true, 'AddToMainProcessContext');
                                return pValue;
                            });
                        }
                        case Context.ContextMessageSubject.GetFromMainProcessContext: {
                            var lMessage = pMessage.message;
                            var key = lMessage.key;
                            return this.managerInstance.GetFromContextAsync(key);
                        }
                        case Context.ContextMessageSubject.ChangeMainProcessName: {
                            var lMessage = pMessage.message;
                            var name = lMessage.name;
                            return this.managerInstance.ChangeMainProcessNameAsync(name).then(function (portalContext) {
                                _this.managerInstance.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.ChangementNomProcess, { portalContext: portalContext, info: name }));
                            });
                        }
                        case Context.ContextMessageSubject.GetFromContext: {
                            var lMessage = pMessage.message;
                            var key = lMessage.key;
                            return this.managerInstance.GetFromContextAsync(key);
                        }
                        //------------------------------------------------------------------------------------------------------------------
                        //------------------------------------------------------------------------------------------------------------------
                        //------------------------------------------------------------------------------------------------------------------
                        case Context.ContextMessageSubject.GetFromSharedContext: {
                            var lMessage = pMessage.message;
                            var key = lMessage.key;
                            return this.managerInstance.GetFromSharedContextAsync(key);
                        }
                        //------------------------------------------------------------------------------------------------------------------
                        //------------------------------------------------------------------------------------------------------------------
                        //------------------------------------------------------------------------------------------------------------------
                        case Context.ContextMessageSubject.GetCurrentStepInfo: {
                            var lMessage = pMessage.message;
                            return this.managerInstance.GetCurrentStepInfoAsync().then(function (pStepInfoExtended) {
                                _this.managerInstance.setIsMyWayUrl(true);
                                return pStepInfoExtended;
                            });
                        }
                        case Context.ContextMessageSubject.GetSharedStorage: {
                            var lMessage = pMessage.message;
                            var sharedStorage = this.managerInstance._context.sharedStorage;
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            lDefer.resolve(sharedStorage);
                            return lDefer.promise;
                        }
                        case Context.ContextMessageSubject.GetPortals: {
                            var lMessage = pMessage.message;
                            var portals = this.managerInstance.getPortails();
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            lDefer.resolve(portals);
                            return lDefer.promise;
                        }
                        case Context.ContextMessageSubject.GetGlobalStorage: {
                            var lMessage = pMessage.message;
                            var globalStorage = this.managerInstance._context.globalStorage;
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            lDefer.resolve(globalStorage);
                            return lDefer.promise;
                        }
                        case Context.ContextMessageSubject.SetMyWayCompatible: {
                            var lMessage = pMessage.message;
                            this.managerInstance.setIsMyWayUrl(true);
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            lDefer.resolve({ versionComposant: Services.CoreCommon.VersionMySys });
                            return lDefer.promise;
                        }
                        case Context.ContextMessageSubject.GetListFromContext: {
                            var lMessage = pMessage.message;
                            var keyArray = lMessage.keyArray;
                            return this.managerInstance.GetListFromContextAsync(keyArray);
                        }
                        case Context.ContextMessageSubject.GetAuthentificationInfo: {
                            var lMessage = pMessage.message;
                            return this.managerInstance.GetAuthentificationInfoAsync();
                        }
                        case Context.ContextMessageSubject.GetParametresComptables: {
                            var lMessage = pMessage.message;
                            return this.managerInstance.GetParametresComptablesAsync();
                        }
                        case Context.ContextMessageSubject.GetWaitingProcesses: {
                            var lMessage = pMessage.message;
                            return this.managerInstance.GetWaitingProcessesAsync();
                        }
                        case Context.ContextMessageSubject.PutProcessInPortalContext: {
                            var lMessage = pMessage.message;
                            var processId = lMessage.processId;
                            var portalContext = this.managerInstance.PutProcessInPortalContext(processId);
                            this.managerInstance.SendPortalContext(false, 'PutProcessInPortalContext');
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            lDefer.resolve();
                            return lDefer.promise;
                        }
                        case Context.ContextMessageSubject.PutTaskInPortalContext: {
                            var lMessage = pMessage.message;
                            var taskId = lMessage.taskId;
                            return this.managerInstance.PutTaskInPortalContext(taskId).then(function (portalContext) {
                                _this.managerInstance.SendPortalContext(false, 'PutTaskInPortalContext');
                            });
                        }
                        case Context.ContextMessageSubject.GetCurrentProcessId: {
                            var lMessage = pMessage.message;
                            return this.managerInstance.GetCurrentProcessIdAsync();
                        }
                        case Context.ContextMessageSubject.GetCurrentMainProcess: {
                            var lMessage = pMessage.message;
                            return this.managerInstance.GetCurrentMainProcessAsync();
                        }
                        case Context.ContextMessageSubject.GetCurrentStepId: {
                            var lMessage = pMessage.message;
                            return this.managerInstance.GetCurrentStepIdAsync();
                        }
                        case Context.ContextMessageSubject.GetObjectFromContext: {
                            var lMessage = pMessage.message;
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            lDefer.resolve(this.managerInstance.GetObjectFromContext(lMessage.keyArray));
                            return lDefer.promise;
                        }
                        case Context.ContextMessageSubject.GetTypedObjectFromContext: {
                            var lMessage = pMessage.message;
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            lDefer.resolve(this.managerInstance.GetTypedObjectFromContext(lMessage.template));
                            return lDefer.promise;
                        }
                        case Context.ContextMessageSubject.GetPortalContext: {
                            var lMessage = pMessage.message;
                            var getSingleIfSingle = lMessage.getSingleIfSingle;
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            lDefer.resolve(this.managerInstance.GetPortalContext(getSingleIfSingle));
                            return lDefer.promise;
                        }
                        case Context.ContextMessageSubject.SwitchProcess: {
                            var lMessage = pMessage.message;
                            var processId_1 = lMessage.processId;
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            var lEstModifie = this.managerInstance.SwitchToProcess(processId_1);
                            this.managerInstance.DisplayProcesses();
                            if (lEstModifie) {
                                this.managerInstance.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.BasculeProcess, { portalContext: this.managerInstance.GetPortalContext() }));
                            }
                            lDefer.resolve(false);
                            return lDefer.promise;
                        }
                        case Context.ContextMessageSubject.EndProcess: {
                            var lMessage = pMessage.message;
                            var processId_2 = lMessage.processId;
                            return this.managerInstance._portail_terminerProcess(processId_2);
                        }
                        case Context.ContextMessageSubject.EndAllProcess: {
                            var lMessage = pMessage.message;
                            return this.managerInstance._portail_terminerAllProcess();
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                ContextManagerMessage.CLASS_NAME = 'MyWay.Services.Context.ContextManagerMessage';
                ContextManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ContextManagerMessage.CLASS_NAME);
                return ContextManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Context.ContextManagerMessage = ContextManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(ContextManagerMessage);
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Display;
        (function (Display) {
            var DisplayManagerMessage = /** @class */ (function (_super) {
                __extends(DisplayManagerMessage, _super);
                //Constructeur
                function DisplayManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Display) || this;
                }
                DisplayManagerMessage.prototype.reception = function (pMessage) {
                    var _this = this;
                    switch (pMessage.subject) {
                        case Display.DisplayMessageSubject.Redirect: {
                            var lContent = pMessage.message;
                            var url = lContent.url;
                            var previousUrl = lContent.previousUrl;
                            return this.managerInstance.Redirect(url, previousUrl);
                        }
                        case Display.DisplayMessageSubject.RedirectInStep: {
                            var lContent = pMessage.message;
                            var url = lContent.url;
                            this.managerInstance.RedirectInStep(url);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case Display.DisplayMessageSubject.PrepareSubmit: {
                            var lContent = pMessage.message;
                            var url = lContent.url;
                            this.managerInstance.PrepareSubmit(url);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case Display.DisplayMessageSubject.DisplayMessage: {
                            var lContent = pMessage.message;
                            var lMessage = lContent.message;
                            this.managerInstance.DisplayMessage(lMessage);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case Display.DisplayMessageSubject.GetMyIFrameId: {
                            var lContent = pMessage.message;
                            return this.library.Core.promesseTryCatch(function (pDefer) {
                                pDefer.resolve(_this.managerInstance.getMyIFrameId(pMessage.iframe));
                            });
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                DisplayManagerMessage.CLASS_NAME = 'MyWay.Services.Display.DisplayManagerMessage';
                DisplayManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(DisplayManagerMessage.CLASS_NAME);
                return DisplayManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Display.DisplayManagerMessage = DisplayManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(DisplayManagerMessage);
        })(Display = Services.Display || (Services.Display = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.ServiceManagerExtended.setListenerOnInitContext(function (pLibrary) {
            // add to the global context the lisa place holders if they exist
            for (var key in Services.PrivatePortalServiceParameters.Instance().LisaPlaceholders) {
                pLibrary.Context.AddToContext('global', key, Services.PrivatePortalServiceParameters.Instance().LisaPlaceholders[key]);
            }
            return pLibrary.Core.createPromiseSelfResolved(pLibrary.Context.GetPortalContext());
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Context;
        (function (Context) {
            var ContextManagerExtended = /** @class */ (function (_super) {
                __extends(ContextManagerExtended, _super);
                function ContextManagerExtended() {
                    return _super.call(this, Services.Components.ComponentType.Context) || this;
                }
                ContextManagerExtended.prototype.AddToContext = function (levelStr, key, value) {
                    var level;
                    switch (levelStr) {
                        case "global":
                            level = Context.StorageLevel.Global;
                            break;
                        case "tempo":
                            level = Context.StorageLevel.Tempo;
                            break;
                        default:
                            level = Context.StorageLevel.Process;
                            break;
                    }
                    return this.manager.AddToContext(level, key, value);
                };
                ContextManagerExtended.prototype.GetDonneesLocales = function () {
                    return this.manager.GetDonneesLocales();
                };
                ContextManagerExtended.prototype.GetAuthentificationInfo = function (bypassIfNull) {
                    if (bypassIfNull === void 0) { bypassIfNull = false; }
                    return this.manager.GetAuthentificationInfo(bypassIfNull);
                };
                /**
                 * Méthode permettant de récupérer une donnée issue du contexte
                 *
                 */
                ContextManagerExtended.prototype.GetFromContext = function (key) {
                    return this.manager.GetFromContext(key);
                };
                /**
                 * Méthode permettant de dédier un processus au portail
                 */
                ContextManagerExtended.prototype.DedierPortail = function (processId) {
                    if (this.manager.SetSingleProcess(processId)) {
                        this.manager.DisplayProcesses();
                        return this.manager.GetCurrentStep(this.manager.GetCurrentProcess());
                    }
                    return null;
                };
                /**
                 * Permet de terminer un processus à partir de son id.
                 *
                 * Bascule l'affichage automatiquement sur le dernier processus actif.
                 *
                 * Emet un événement de [[Component.ManagerEventType.BasculeProcess]] avec le contexte du portail en paramètre
                 *
                 * Renvoie une promesse indiquant si la fin de processus s'est bien passée
                 *
                 */
                ContextManagerExtended.prototype.TerminerProcess = function (processId) {
                    return this.manager._portail_terminerProcess(processId);
                };
                ContextManagerExtended.prototype.BasculerProcess = function (processId) {
                    ContextManagerExtended.logger.debug('BasculerProcess');
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var lEstModifie = this.manager.SwitchToProcess(processId);
                    this.manager.DisplayProcesses();
                    if (lEstModifie) {
                        this.manager.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.BasculeProcess, { portalContext: this.manager.GetPortalContext() }));
                    }
                    deferred.resolve(false);
                    return deferred.promise;
                };
                ContextManagerExtended.prototype.ChangerNomProcessPrincipal = function (nom) {
                    return this.manager.ChangeMainProcessName(nom);
                };
                ContextManagerExtended.prototype.RemoveWaitingProcesses = function () {
                    return this.manager.RemoveWaitingProcesses();
                };
                /**
                 * wrapper de la méthode AnalyseApp de la class [[ContextManager]]
                 */
                ContextManagerExtended.prototype.AnalyseApp = function () {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    this.manager.AnalyseApp(function (res) {
                        deferred.resolve(res);
                    });
                    return deferred.promise;
                };
                //GetPortalContext        
                ContextManagerExtended.prototype.GetPortalContext = function (getSingleIfSingle) {
                    if (getSingleIfSingle === void 0) { getSingleIfSingle = true; }
                    return this.manager.GetPortalContext(getSingleIfSingle);
                };
                ContextManagerExtended.prototype.ExtraireProcess = function (processId) {
                    return this.manager._portail_extraireProcess(processId);
                };
                ContextManagerExtended.CLASS_NAME = 'MyWay.Services.Context.ContextManagerExtended';
                ContextManagerExtended.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ContextManagerExtended.CLASS_NAME);
                return ContextManagerExtended;
            }(Services.Components.ComponentManagerExtendedBase));
            Context.ContextManagerExtended = ContextManagerExtended;
            Services.Components.RegistryManagerExtended.getInstance().register(ContextManagerExtended);
        })(Context = Services.Context || (Services.Context = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Display;
        (function (Display) {
            var DisplayManagerExtended = /** @class */ (function (_super) {
                __extends(DisplayManagerExtended, _super);
                function DisplayManagerExtended() {
                    return _super.call(this, Services.Components.ComponentType.Display) || this;
                }
                Object.defineProperty(DisplayManagerExtended.prototype, "onNotificationDeMessage", {
                    set: function (value) {
                        this.manager.onNotificationDeMessage = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DisplayManagerExtended.prototype, "onFermerModalMessage", {
                    set: function (value) {
                        this.manager.onFermerModalMessage = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DisplayManagerExtended.prototype, "onAffichageModalMessage", {
                    set: function (value) {
                        this.manager.onAffichageModalMessage = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DisplayManagerExtended.prototype, "onAffichageModalAide", {
                    set: function (value) {
                        this.manager.onAffichageModalAide = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                DisplayManagerExtended.prototype.AfficherUrl = function (url, processId) {
                    return this.manager.AfficherUrl(url, processId, false);
                };
                DisplayManagerExtended.prototype.OuvrirUrl = function (url) {
                    return this.manager.OuvrirUrl(url);
                };
                Object.defineProperty(DisplayManagerExtended.prototype, "onChangementDeFrame", {
                    set: function (value) {
                        this.manager.onShowFrame = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                return DisplayManagerExtended;
            }(Services.Components.ComponentManagerExtendedBase));
            Display.DisplayManagerExtended = DisplayManagerExtended;
            Services.Components.RegistryManagerExtended.getInstance().register(DisplayManagerExtended);
        })(Display = Services.Display || (Services.Display = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var DonneesDelocalisees;
        (function (DonneesDelocalisees) {
            /**
            * Classe encapsulant les outils de debug et de diagnostics des données délocalisées
            * @classe DonneesDelocaliseesTechAgent
            * fonction : deleteDbDonneesDelocalisees – private - Permet de supprimer la base de données IndexedDb des données délocalisées
            * fonction : getTDTById – private - Permet de récupérer l'objet TDT correspondant à l'identifiant passé en paramètre dans le storeTDT
            * fonction : deleteTDTById – private - Permet de supprimer l'objet TDT correspondant à l'identifiant passé en paramètre dans le storeTDT
            */
            var DonneesDelocaliseesTechAgent = /** @class */ (function (_super) {
                __extends(DonneesDelocaliseesTechAgent, _super);
                /**
                * Constructeur de la classe DonneesDelocaliseesTechAgent
                */
                function DonneesDelocaliseesTechAgent() {
                    return _super.call(this) || this;
                }
                /**
                 * Permet de supprimer et de réinitialiser la base de données IndexedDB des données délocalisées
                 * @param callback {function} action à exécuter une fois les données supprimées
                 * @param callbackError {function} action à exécuter en cas d'erreur (le message d'erreur est transmis en paramètre: messageErreur)
                 */
                DonneesDelocaliseesTechAgent.prototype.reInitDbDonneesDelocalisees = function (callback, callbackError) {
                    return this.sendMessage(DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.ReInitDbDonneesDelocalisees, {}).then(function () {
                        if (callback) {
                            callback();
                        }
                    }, function (pErreur) {
                        if (callbackError) {
                            callbackError(pErreur);
                        }
                        throw pErreur;
                    });
                };
                /**
                * Permet de récupérer l'objet TDT correspondant à l'identifiant passé en paramètre dans le storeTDT
                * @param idTDT {string} identifiant du TDT à récupérer dans le storeTDT
                * @param callback {function} action à exécuter une fois que l'objet TDT a été récupérer (l'objet TDT récupéré est transmis en paramètre: objectTDT)
                * @param callbackError {function} action à exécuter en cas d'erreur (le message d'erreur est transmis en paramètre: messageErreur)
                */
                DonneesDelocaliseesTechAgent.prototype.getTDTById = function (idTDT, callback, callbackError) {
                    return this.sendMessage(DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.GetTDTById, { idTDT: idTDT }).then(function (objectTDT) {
                        if (callback) {
                            callback(objectTDT);
                        }
                    }, function (pErreur) {
                        if (callbackError) {
                            callbackError(pErreur);
                        }
                        throw pErreur;
                    });
                };
                /**
                * Permet de supprimer l'objet TDT correspondant à l'identifiant passé en paramètre dans le storeTDT
                * @param idTDT {string} identifiant du TDT à supprimer dans le storeTDT
                * @param callback {function} action à exécuter une fois que l'objet TDT a été supprimé
                * @param callbackError {function} action à exécuter en cas d'erreur (le message d'erreur est transmis en paramètre: messageErreur)
                */
                DonneesDelocaliseesTechAgent.prototype.deleteTDTById = function (idTDT, callback, callbackError) {
                    return this.sendMessage(DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.DeleteTDTById, {}).then(function () {
                        if (callback) {
                            callback();
                        }
                    }, function (pErreur) {
                        if (callbackError) {
                            callbackError(pErreur);
                        }
                        throw pErreur;
                    });
                };
                return DonneesDelocaliseesTechAgent;
            }(DonneesDelocalisees.DonneesDelocaliseesAgent));
            DonneesDelocalisees.DonneesDelocaliseesTechAgent = DonneesDelocaliseesTechAgent;
            Services.Components.RegistryAgent.getInstance().register(DonneesDelocaliseesTechAgent);
        })(DonneesDelocalisees = Services.DonneesDelocalisees || (Services.DonneesDelocalisees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des preferences
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Preferences;
        (function (Preferences) {
            /**
             * Initialise la liste des préférences une fois que le service manager se lance.
             */
            Services.ServiceManager.addActionOnInitialize('Preferences.ObtenirPreferences', function (pLibrary) {
                return pLibrary.Preferences.ObtenirPreferences().then(function () { });
            }, 'Context.GetDonneesLocales');
            /*
            * Class de gestion de gestion des messages
            */
            var PreferencesManager = /** @class */ (function (_super) {
                __extends(PreferencesManager, _super);
                /**
                 * Constructeur de la classe PreferencesManager.
                 */
                function PreferencesManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Preferences) || this;
                    /**
                     * Objet permettant d'appeler l'api de préférence.
                     */
                    _this.api = null;
                    /**
                     * La promesse de la dernière ecriture en attente.
                     */
                    _this.derniereEcritureEnAttente = null;
                    return _this;
                }
                /**
                 * Méthode permettant l'initialisation du manager.
                 *
                 * @param pManagerLibrary       La librairie du manager.
                 * @param pMessageService       Le service de message.
                 * @param pManagerInitializer   L'objet d'initialisation du manager.
                 * @param pApi                  L'instance de l'api de préférence.
                 * @returns une promesse avec aucune donnée de retour.
                 */
                PreferencesManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
                };
                /**
                 * Méthode permettant de récupérer la liste des préférences de l'utilisateur connecté.
                 *
                 * @returns une promesse avec un tableau de préférences en retour.
                 */
                PreferencesManager.prototype.ObtenirPreferences = function () {
                    var _this = this;
                    return this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                        if (pAuthentificationInfo) {
                            return _this.api.ObtenirPreferences(pAuthentificationInfo.agentConnecte.referenceExterneAgent).then(function (data) {
                                _this.internalSavePreferences(data);
                                PreferencesManager.logger.debug('ServiceApi.Preferences.ObtenirPreferences Success - %1', JSON.stringify(data));
                                return data;
                            }, function (error) {
                                PreferencesManager.logger.error('ServiceApi.Preferences.ObtenirPreferences Failed - %1', JSON.stringify(error));
                                throw error;
                            });
                        }
                        else {
                            PreferencesManager.logger.error('Impossible de récupérer les données d\'authentification');
                            throw new Services.Erreur('Impossible de récupérer les données d\'authentification');
                        }
                    });
                };
                /**
                 * Méthode permettant de lire une préférence spécifique.
                 *
                 * @param codePreference   Le nom de la préférence à lire.
                 * @param isChargerServeur booléen. Si rue, le chargement se fera via le serveur uniquement, sinon préchargement par le cache
                 * @returns une promesse avec une préférence en retour.
                 */
                PreferencesManager.prototype.LirePreference = function (codePreference, isChargerServeur) {
                    var _this = this;
                    if (isChargerServeur) {
                        return this.internalGetPreferencesChargementServeur().then(function (pPreferences) {
                            return _this.preferenceTrouve(codePreference, pPreferences);
                        });
                    }
                    else {
                        return this.internalGetPreferences().then(function (pPreferences) {
                            return _this.preferenceTrouve(codePreference, pPreferences);
                        });
                    }
                };
                PreferencesManager.prototype.preferenceTrouve = function (codePreference, pPreferences) {
                    if (pPreferences) {
                        var lEstTrouve = false;
                        var lPreferenceTrouvee = null;
                        pPreferences.every(function (pPreference) {
                            if (pPreference.cle === codePreference) {
                                lEstTrouve = true;
                                lPreferenceTrouvee = pPreference.valeur;
                            }
                            return !lEstTrouve;
                        });
                        return lPreferenceTrouvee;
                    }
                    else {
                        var erreur = new Services.Erreur('JSON des préférences mal formé');
                        PreferencesManager.logger.error('GetFromContext Failed - 1%', JSON.stringify(erreur));
                        throw erreur;
                    }
                };
                /**
                 * Ecriture d'un ensemble de préférences utilisateur.
                 * Attention : N'en fait qu'une à la fois, d'où l'attribut privé "derniereEcritureEnAttente".
                 * Se mets donc à la suite de la "derniereEcritureEnAttente" pour lancer l'écriture suivante.
                 *
                 * @param preferences Liste des préférences à écrire.
                 * @returns une promesse avec aucune donnée en retour.
                 */
                PreferencesManager.prototype.EcrirePreference = function (preferences) {
                    var _this = this;
                    var lPromiseAAttendre = this.library.Core.getPromesseSelfResoved();
                    if (this.derniereEcritureEnAttente) {
                        lPromiseAAttendre = this.derniereEcritureEnAttente;
                    }
                    var lAuthentificationInfo = null;
                    // Se mets en attente de la fin de la précédente écriture.
                    this.derniereEcritureEnAttente = lPromiseAAttendre.then(function () {
                        return _this.library.Context.getAuthentificationInfo();
                    }).then(function (pAuthentificationInfo) {
                        lAuthentificationInfo = pAuthentificationInfo;
                        return _this.internalGetPreferences();
                    }).then(function (pPreferences) {
                        if (!pPreferences) {
                            //Doit d'abord ecrire, recharger, puis redonner la main
                            return _this.api.EcrirePreference(lAuthentificationInfo.agentConnecte.referenceExterneAgent, preferences).then(function () {
                                return _this.ObtenirPreferences().then(function () {
                                    return;
                                });
                            }, function (pErreur) {
                                PreferencesManager.logger.error('ServiceApi.Preferences.EcrirePreference Failed - 1%', JSON.stringify(pErreur));
                                throw pErreur;
                            });
                        }
                        else {
                            //On a bien une copie locale, alors la mets à jour et redonne la main. Mets à jour la donnée de manière asynchrone
                            _this.internalMettreAJourDonnee(pPreferences, preferences);
                            _this.api.EcrirePreference(lAuthentificationInfo.agentConnecte.referenceExterneAgent, preferences).catch(function (pErreur) {
                                PreferencesManager.logger.error('ServiceApi.Preferences.EcrirePreference Failed - 1%', JSON.stringify(pErreur));
                            });
                            return _this.library.Core.getPromesseSelfResoved();
                        }
                    });
                    return this.derniereEcritureEnAttente;
                };
                /**
                 * Méthode permettant de lire plusieurs préférences à la fois.
                 *
                 * @param codesPreference La liste des préférences à récupérer.
                 * @returns une promesse avec un tableau de préférences en retour.
                 */
                PreferencesManager.prototype.LireMultiPreference = function (codesPreference) {
                    return this.internalGetPreferences().then(function (pPreferences) {
                        // TODO
                        var response = {
                            preferences: []
                        };
                        codesPreference.forEach(function (pCodePreference) {
                            var lIsFound = false;
                            pPreferences.every(function (pPreference) {
                                if (pCodePreference === pPreference.cle) {
                                    lIsFound = true;
                                    response.preferences.push({
                                        cle: pPreference.cle,
                                        valeur: pPreference.valeur
                                    });
                                }
                                return !lIsFound;
                            });
                            if (!lIsFound) {
                                response.preferences.push(null);
                            }
                        });
                        return response;
                    });
                };
                /**
                 * Méthode permettant de récupérer toute la liste des préférences sauvegardé dans le contexte.
                 * @returns une promesse avec un tableau de préférences en retour.
                 */
                PreferencesManager.prototype.internalGetPreferences = function () {
                    var preferences = null;
                    try {
                        preferences = JSON.parse(this.library.Context.GetFromContext('preferences'));
                    }
                    catch (_a) {
                        var erreur = new Services.Erreur('JSON des préférences mal formé');
                        PreferencesManager.logger.error('GetFromContext Failed - 1%', JSON.stringify(erreur));
                        return this.library.Core.createPromiseSelfError(erreur);
                    }
                    if (preferences) {
                        //Est défini, renvoi la valeur trouvée
                        return this.library.Core.createPromiseSelfResolved(preferences);
                    }
                    else {
                        //Doit aller les chercher sur le serveur
                        return this.ObtenirPreferences();
                    }
                };
                /**
                 * Méthode permettant de récupérer toute la liste des préférences sauvegardé dans le contexte.
                 * @returns une promesse avec un tableau de préférences en retour.
                 */
                PreferencesManager.prototype.internalGetPreferencesChargementServeur = function () {
                    var preferences = null;
                    try {
                        preferences = JSON.parse(this.library.Context.GetFromContext('preferences'));
                    }
                    catch (_a) {
                        var erreur = new Services.Erreur('JSON des préférences mal formé');
                        PreferencesManager.logger.error('GetFromContext Failed - 1%', JSON.stringify(erreur));
                        return this.library.Core.createPromiseSelfError(erreur);
                    }
                    //Doit aller les chercher sur le serveur
                    return this.ObtenirPreferences();
                };
                /**
                 * Méthode permettant de sauvegardé dans le contexte de nouvelles préférences ou de modifier celles existantes.
                 *
                 * @param pPreferences la liste des préférences à sauvegarder ou à modifier.
                 */
                PreferencesManager.prototype.internalSavePreferences = function (pPreferences) {
                    this.library.Context.AddToContext(Services.Context.StorageLevel.Global, 'preferences', JSON.stringify(pPreferences));
                };
                /**
                 * Méthode permettant de mettre à jour les préférences sauvegardées dans le contexte.
                 *
                 * @param pPreferences          Liste des préférences actuel à mettre à jour.
                 * @param preferencesUpdated    Liste des préférences actuel mais avec des valeurs à jour.
                 */
                PreferencesManager.prototype.internalMettreAJourDonnee = function (pPreferences, preferencesUpdated) {
                    preferencesUpdated.forEach(function (pref) {
                        var lEstTrouve = false;
                        pPreferences.every(function (pPreference) {
                            if (pPreference.cle === pref.cle) {
                                pPreference.valeur = pref.valeur;
                                lEstTrouve = true;
                            }
                            return !lEstTrouve;
                        });
                        if (!lEstTrouve) {
                            pPreferences.push({
                                cle: pref.cle,
                                valeur: pref.valeur
                            });
                        }
                    });
                    this.internalSavePreferences(pPreferences);
                };
                /**
                 * Chemin complet de la classe PreferencesManager.
                 */
                PreferencesManager.CLASS_NAME = 'MyWay.Services.Preferences.PreferencesManager';
                /**
                 * Instance du logger de la classe PreferencesManager.
                 */
                PreferencesManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(PreferencesManager.CLASS_NAME);
                return PreferencesManager;
            }(Services.Components.ComponentManagerBase));
            Preferences.PreferencesManager = PreferencesManager;
            Services.Components.RegistryManager.getInstance().register(PreferencesManager);
        })(Preferences = Services.Preferences || (Services.Preferences = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation
* @module MyWay.Services.Numerisation
* classe : NumerisationAgent - public - Classe permettant la gestion de la numérisation
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Numerisation;
        (function (Numerisation) {
            /**
            * Classe permettant la gestion de la numérisation
            * @classe NumérisationAgent
            * fonction : numeriser – public - Permet de numériser un document
            * fonction : getSpiFactoryActivationStatut – public - Permet de savoir si le jeton d'activation SpiFactory est présent sur le serveur d'agence
            * fonction : numeriserArcade – public - Permet de numériser un document avec Spifactory Arcade
            */
            var NumerisationAgent = /** @class */ (function (_super) {
                __extends(NumerisationAgent, _super);
                /**
                * Constructeur de la classe NumerisationAgent
                */
                function NumerisationAgent() {
                    return _super.call(this, Services.Components.ComponentType.Numerisation) || this;
                }
                /**
                * Permet de numeriser via SpiFactory (fonctionne uniquement sur les postes agences).
                *
                * ~~~ts
                * serviceAgent.Numerisation.numeriser(documentData, documentParams)
                *    .then(() => {
                *       // Numérisation OK
                *    }).catch((erreur: MyWay.Services.Erreur) => {
                *       // Numérisation KO: traitement de l'erreur
                * });
                * ~~~
                * @param data {any} données à envoyer pour la numérisation (xml sérializé)
                * @param numerisationParams {NumerisationParams} paramètres de numérisation du document
                * @return {IPromesse<any>}
                */
                NumerisationAgent.prototype.numeriser = function (data, numerisationParams) {
                    NumerisationAgent.logger.info('Méthode à déprécier - numeriser');
                    return this.sendMessage(Numerisation.NumerisationMessageSubject.Numeriser, {
                        data: data,
                        numerisationParams: numerisationParams
                    });
                };
                /**
                * Permet de lancer une numérisation avec Spifactory Arcade  (fonctionne uniquement sur les postes agences).
                *
                * ~~~ts
                * serviceAgent.Numerisation.numeriserArcade(documentData, null)
                *    .then(() => {
                *       // Numérisation Arcade OK
                *    }).catch((erreur: MyWay.Services.Erreur) => {
                *       // Numérisation Arcade KO: traitement de l'erreur
                * });
                * ~~~
                * @param data {any} données à envoyer pour la numérisation (xml sérializé)
                * @param numerisationParams {any} paramètres de numérisation du document
                * @return {IPromesse<any>}
                */
                NumerisationAgent.prototype.numeriserArcade = function (data, numerisationParams) {
                    NumerisationAgent.logger.info('Méthode à surveiller - numeriserArcade');
                    return this.sendMessage(Numerisation.NumerisationMessageSubject.NumeriserArcade, {
                        data: data,
                        numerisationParams: numerisationParams
                    });
                };
                /**
                * Permet de savoir si le jeton d'activation SpiFactory est présent sur le serveur d'agence
                *
                * ~~~ts
                * serviceAgent.Numerisation.getSpiFactoryActivationStatut()
                *    .then((jetonSpiFactory) => {
                *       // Traitement
                *    }).catch((erreur: MyWay.Services.Erreur) => {
                *       // Traitement en cas d'erreur
                * });
                * ~~~
                *
                * @param callback {function} action à executer une fois le statut d'activation récupéré
                * @param callbackError {function} action à executer en cas d'erreur
                * @return {IPromesse<any>}
                */
                NumerisationAgent.prototype.getSpiFactoryActivationStatut = function () {
                    NumerisationAgent.logger.info('Méthode à surveiller - getSpiFactoryActivationStatut');
                    return this.sendMessage(Numerisation.NumerisationMessageSubject.GetSpiFactoryActivationStatut, {});
                };
                NumerisationAgent.CLASS_NAME = 'MyWay.Services.Numerisation.NumerisationAgent';
                NumerisationAgent.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(NumerisationAgent.CLASS_NAME);
                return NumerisationAgent;
            }(Services.Components.ComponentAgentBase));
            Numerisation.NumerisationAgent = NumerisationAgent;
            Services.Components.RegistryAgent.getInstance().register(NumerisationAgent);
        })(Numerisation = Services.Numerisation || (Services.Numerisation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Numerisation;
        (function (Numerisation) {
            var NumerisationApiBase = /** @class */ (function () {
                function NumerisationApiBase(url) {
                    this.libraryManager = null;
                    this._url = url;
                }
                NumerisationApiBase.prototype.initApi = function (pApi) {
                    this.libraryManager = pApi;
                };
                NumerisationApiBase.prototype.numeriserDocument = function (data, params) {
                    // Paramétrage
                    var settings = {};
                    settings.url = this._url + "/NumeriserSpifactory";
                    settings.method = Services.MethodEnum.POST;
                    settings.params = params;
                    settings.async = true;
                    settings.contentType = Services.ContentTypeEnum.JSON;
                    settings.data = JSON.stringify(data);
                    settings.cache = false;
                    // Appel du service
                    return this.libraryManager.Core.sendRequest(settings);
                };
                NumerisationApiBase.prototype.getSpiFactoryActivationStatutOnServeur = function () {
                    // Paramétrage
                    var settings = {};
                    settings.url = this._url + "/GetSpiFactoryActivationStatut";
                    settings.method = Services.MethodEnum.GET;
                    settings.async = true;
                    settings.contentType = Services.ContentTypeEnum.JSON;
                    // Appel du service
                    return this.libraryManager.Core.sendRequest(settings);
                };
                NumerisationApiBase.prototype.numeriserDocumentArcade = function (data, params) {
                    // Paramétrage
                    var settings = {};
                    settings.url = this._url + "/NumeriserSpifactoryArcade";
                    settings.method = Services.MethodEnum.POST;
                    settings.params = params;
                    settings.async = true;
                    settings.contentType = Services.ContentTypeEnum.JSON;
                    settings.data = JSON.stringify(data);
                    // Appel du service
                    return this.libraryManager.Core.sendRequest(settings);
                };
                return NumerisationApiBase;
            }());
            Numerisation.NumerisationApiBase = NumerisationApiBase;
        })(Numerisation = Services.Numerisation || (Services.Numerisation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Numerisation;
        (function (Numerisation) {
            var NumerisationApiFactory = /** @class */ (function (_super) {
                __extends(NumerisationApiFactory, _super);
                function NumerisationApiFactory() {
                    var _this = _super.call(this, Services.Components.ComponentType.Numerisation) || this;
                    _this.wrapped = null;
                    return _this;
                }
                NumerisationApiFactory.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    var _this = this;
                    if (pCapabilities.ServiceLocal) {
                        this.wrapped = new Numerisation.NumerisationApiWindows();
                    }
                    else {
                        this.wrapped = new Numerisation.NumerisationApiFullWeb();
                    }
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer).then(function () {
                        return _this.wrapped.initApi(pLibraryManager);
                    });
                };
                NumerisationApiFactory.prototype.initApi = function (pApi) {
                };
                NumerisationApiFactory.prototype.numeriserDocument = function (data, params) {
                    return this.wrapped.numeriserDocument(data, params);
                };
                NumerisationApiFactory.prototype.getSpiFactoryActivationStatutOnServeur = function () {
                    return this.wrapped.getSpiFactoryActivationStatutOnServeur();
                };
                NumerisationApiFactory.prototype.numeriserDocumentArcade = function (data, params) {
                    return this.wrapped.numeriserDocumentArcade(data, params);
                };
                return NumerisationApiFactory;
            }(Services.Components.ComponentApiBase));
            Numerisation.NumerisationApiFactory = NumerisationApiFactory;
            Services.Components.RegistryApi.getInstance().register(NumerisationApiFactory);
        })(Numerisation = Services.Numerisation || (Services.Numerisation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Numerisation;
        (function (Numerisation) {
            var NumerisationApiFullWeb = /** @class */ (function (_super) {
                __extends(NumerisationApiFullWeb, _super);
                function NumerisationApiFullWeb() {
                    return _super.call(this, Services.PrivatePortalServiceParameters.Instance().NumerisationUrl) || this;
                }
                return NumerisationApiFullWeb;
            }(Numerisation.NumerisationApiBase));
            Numerisation.NumerisationApiFullWeb = NumerisationApiFullWeb;
        })(Numerisation = Services.Numerisation || (Services.Numerisation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Numerisation;
        (function (Numerisation) {
            var NumerisationApiWindows = /** @class */ (function (_super) {
                __extends(NumerisationApiWindows, _super);
                function NumerisationApiWindows() {
                    return _super.call(this, Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + "/numerisation/") || this;
                }
                return NumerisationApiWindows;
            }(Numerisation.NumerisationApiBase));
            Numerisation.NumerisationApiWindows = NumerisationApiWindows;
        })(Numerisation = Services.Numerisation || (Services.Numerisation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des habilitations
* @module MyWay.Services.Habilitation
* classe : HabilitationAgent - public - Classe permettant la gestion des habilitations
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Habilitation;
        (function (Habilitation) {
            /**
            * Classe permettant la gestion des habilitations
            */
            var HabilitationAgent = /** @class */ (function (_super) {
                __extends(HabilitationAgent, _super);
                /**
                 * Constructeur de la classe HabilitationAgent
                 */
                function HabilitationAgent() {
                    return _super.call(this, Services.Components.ComponentType.Habilitation) || this;
                }
                HabilitationAgent.prototype.EstHabilite = function (codeOuCodes) {
                    var isCodeOuCodesArray = Services.Controle.StaticArrayControle.isArray(codeOuCodes);
                    return this.sendMessage(Habilitation.HabilitationMessageSubject.EstHabilite, {
                        code: isCodeOuCodesArray ? codeOuCodes : [codeOuCodes]
                    }).then(function (pResults) {
                        if (isCodeOuCodesArray) {
                            return pResults;
                        }
                        else {
                            return pResults[0];
                        }
                    });
                };
                return HabilitationAgent;
            }(Services.Components.ComponentAgentBase));
            Habilitation.HabilitationAgent = HabilitationAgent;
            Services.Components.RegistryAgent.getInstance().register(HabilitationAgent);
        })(Habilitation = Services.Habilitation || (Services.Habilitation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des habilitations
* @module MyWay.Services.Habilitation
* classe : HabilitationManager - public - Classe permettant la gestion des habilitations
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Habilitation;
        (function (Habilitation) {
            /**
            * Classe permettant la gestion des habilitations
            */
            var HabilitationApi = /** @class */ (function (_super) {
                __extends(HabilitationApi, _super);
                function HabilitationApi() {
                    return _super.call(this, Services.Components.ComponentType.Habilitation) || this;
                }
                HabilitationApi.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    this._habilitationUrl = Services.PrivatePortalServiceParameters.Instance().HabilitationUrl;
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer);
                };
                /**
                 * Permet de récupérer les habilitations
                 *
                 * @param  {boolean}                        mysys                       Domaine d'habilitation mysys
                 * @param  {boolean}                        iam                         Domaine d'habilitation iam
                 * @param  {boolean}                        cultureNet                  Domaine d'habilitation cultureNet
                 * @param  {InfosUserPoste}                 infosUserPoste              Ensemble des données de l'utilisateur du poste
                 * @param  {AuthentificationInfo}           authentificationInfo        Ensemble des données liées à l'utilisateur bancaire
                 * @return {IPromesse<IHabilitationDTO>}    DTO reçu par le service REST
                 */
                HabilitationApi.prototype.GetHabilitations = function (mysys, iam, cultureNet, infosUserPoste, authentificationInfo) {
                    try {
                        if (authentificationInfo.agentConnecte.referenceExterneAgent && authentificationInfo.codeEtablissement && authentificationInfo.agentConnecte.typeFonction) {
                            var userAD = void 0;
                            var domaineADUser = void 0;
                            var url = void 0;
                            // url de base
                            url = this._habilitationUrl + '/?mysys=' + mysys + '&iam=' + iam + '&cultureNet=' + cultureNet + '&codeAgent=T' + authentificationInfo.agentConnecte.referenceExterneAgent + '&codeEtablissement=' + authentificationInfo.codeEtablissement + '&typeFonction=' + authentificationInfo.agentConnecte.typeFonction;
                            // si les habilitations demandées concernent le Domaine d'habilitation "iam" ou le Domaine d'habilitation "cultureNet", il faut ajouter 2 paramètres à l'url
                            if (iam || cultureNet) {
                                if (infosUserPoste != null && infosUserPoste.IdentifiantUser && infosUserPoste.DomaineADUser) {
                                    // ajout du paramètre userAD
                                    userAD = infosUserPoste.IdentifiantUser;
                                    url += '&userAD=' + userAD;
                                    // ajout du paramètre domaineUtilisateur
                                    domaineADUser = infosUserPoste.DomaineADUser;
                                    url += '&domaineUtilisateur=' + domaineADUser;
                                }
                                else {
                                    return Services.Promesses.createPromiseSelfError(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_HABILITATION_PARAMETRES_INSUFFISANTS));
                                }
                            } // FIN if (iam || cultureNet)
                            return this.libraryManager.Core.sendRequest({
                                url: url,
                                method: Services.MethodEnum.GET,
                                authentificationInfo: authentificationInfo
                            });
                        }
                        else {
                            return Services.Promesses.createPromiseSelfError(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_HABILITATION_PARAMETRES_INSUFFISANTS));
                        }
                    }
                    catch (e) {
                        return Services.Promesses.createPromiseSelfError(new Services.Erreur(e));
                    }
                };
                return HabilitationApi;
            }(Services.Components.ComponentApiBase));
            Habilitation.HabilitationApi = HabilitationApi;
            Services.Components.RegistryApi.getInstance().register(HabilitationApi);
        })(Habilitation = Services.Habilitation || (Services.Habilitation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var LisaCallbackResult = /** @class */ (function () {
                function LisaCallbackResult() {
                }
                return LisaCallbackResult;
            }());
            Lisa.LisaCallbackResult = LisaCallbackResult;
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Lisa"] = "Lisa";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation (module commun aux agents et aux managers)
* @module MyWay.Services.Lisa
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var Messages;
            (function (Messages) {
                var LisaMessageSubject;
                (function (LisaMessageSubject) {
                    LisaMessageSubject[LisaMessageSubject["Next"] = 0] = "Next";
                    LisaMessageSubject[LisaMessageSubject["StartProcess"] = 1] = "StartProcess";
                    LisaMessageSubject[LisaMessageSubject["StartSubProcess"] = 2] = "StartSubProcess";
                    LisaMessageSubject[LisaMessageSubject["StartExternalApp"] = 3] = "StartExternalApp";
                    LisaMessageSubject[LisaMessageSubject["GetProcesses"] = 4] = "GetProcesses";
                    LisaMessageSubject[LisaMessageSubject["GetTools"] = 5] = "GetTools";
                    LisaMessageSubject[LisaMessageSubject["GetCodesProcessus"] = 6] = "GetCodesProcessus";
                    LisaMessageSubject[LisaMessageSubject["GetInfoProcessus"] = 7] = "GetInfoProcessus";
                    LisaMessageSubject[LisaMessageSubject["StartUrl"] = 8] = "StartUrl";
                    LisaMessageSubject[LisaMessageSubject["StartUrlPortal"] = 9] = "StartUrlPortal";
                    LisaMessageSubject[LisaMessageSubject["StartProcessPortal"] = 10] = "StartProcessPortal";
                })(LisaMessageSubject = Messages.LisaMessageSubject || (Messages.LisaMessageSubject = {}));
                //Enregistrement du composant et de ses dépendances
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Lisa, [
                    Services.Components.ComponentType.Aide,
                    Services.Components.ComponentType.Context,
                    Services.Components.ComponentType.ContexteClient,
                    Services.Components.ComponentType.Core,
                    Services.Components.ComponentType.Display,
                    Services.Components.ComponentType.Habilitation,
                    Services.Components.ComponentType.Interop,
                    Services.Components.ComponentType.TraceSuivi
                ]);
            })(Messages = Lisa.Messages || (Lisa.Messages = {}));
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var ResultBase = /** @class */ (function () {
                function ResultBase() {
                }
                ResultBase.prototype.Init = function (data) {
                    if (data) {
                        if (data.ProcessDemarre)
                            this.ProcessDemarre = new ProcessResult(data.ProcessDemarre);
                        if (data.ProchaineEtape)
                            this.ProchaineEtape = new EtapeResult(data.ProchaineEtape);
                    }
                };
                return ResultBase;
            }());
            Lisa.ResultBase = ResultBase;
            var NextResult = /** @class */ (function (_super) {
                __extends(NextResult, _super);
                function NextResult(nextData) {
                    var _this = _super.call(this) || this;
                    if (nextData) {
                        _this.CodeEtape = nextData.CodeEtape;
                        _this.ValeurSortie = nextData.ValeurSortie;
                        _this.FinProcess = nextData.FinProcess;
                        _this.ValeurFinProcess = nextData.ValeurFinProcess;
                    }
                    _this.Init(nextData);
                    return _this;
                }
                return NextResult;
            }(ResultBase));
            Lisa.NextResult = NextResult;
            var StartResult = /** @class */ (function (_super) {
                __extends(StartResult, _super);
                function StartResult(startData) {
                    var _this = _super.call(this) || this;
                    if (startData) {
                        _this.CodeProcessus = startData.CodeProcessus;
                        _this.VersionExport = startData.VersionExport;
                    }
                    _this.Init(startData);
                    return _this;
                }
                return StartResult;
            }(ResultBase));
            Lisa.StartResult = StartResult;
            var ProcessResult = /** @class */ (function () {
                function ProcessResult(processData) {
                    if (processData) {
                        this.Code = processData.Code;
                        this.ValeurDepart = processData.ValeurDepart;
                        this.Nom = processData.Nom;
                        this.EtapesConnues = processData.EtapesConnues;
                        this.CodeEtape = processData.CodeEtape;
                        this.OptionsProcess = processData.OptionsProcess;
                        this.OptionsProcessAsEtape = processData.OptionsProcessAsEtape;
                        this.Actions = processData.Actions;
                    }
                }
                return ProcessResult;
            }());
            Lisa.ProcessResult = ProcessResult;
            var EtapeResult = /** @class */ (function () {
                function EtapeResult(etapeData) {
                    if (etapeData) {
                        this.CodeEtape = etapeData.CodeEtape;
                        this.CodeMetier = etapeData.CodeMetier;
                        this.TypeApplication = etapeData.TypeApplication;
                        this.ValeurEntree = etapeData.ValeurEntree;
                        this.CodeApplication = etapeData.CodeApplication;
                        this.NomApplication = etapeData.NomApplication;
                        this.Icone = etapeData.Icone;
                        this.LocalisationAbsolue = etapeData.LocalisationAbsolue;
                        this.LocalisationRelative = etapeData.LocalisationRelative;
                        this.Contrats = [];
                        if (etapeData.Contrats) {
                            for (var i = 0; i < etapeData.Contrats.length; i++) {
                                var contratData = etapeData.Contrats[i];
                                var contrat = new ContratResult(contratData);
                                this.Contrats.push(contrat);
                            }
                        }
                        this.Actions = [];
                        if (etapeData.Actions) {
                            for (var i = 0; i < etapeData.Actions.length; i++) {
                                var actionData = etapeData.Actions[i];
                                var action = new ActionResult(actionData);
                                this.Actions.push(action);
                            }
                        }
                        this.OptionsEtape = etapeData.OptionsEtape;
                        this.OptionsPointEntree = etapeData.OptionsPointEntree;
                    }
                }
                return EtapeResult;
            }());
            Lisa.EtapeResult = EtapeResult;
            var ContratResult = /** @class */ (function () {
                function ContratResult(contratData) {
                    if (contratData) {
                        this.Code = contratData.Code;
                        this.Type = contratData.Type;
                        this.Longueur = contratData.Longueur;
                        this.Nullable = contratData.Nullable;
                        this.Mode = contratData.Mode;
                        this.OptionsContrat = contratData.OptionsContrat;
                    }
                }
                return ContratResult;
            }());
            Lisa.ContratResult = ContratResult;
            var ActionResult = /** @class */ (function () {
                function ActionResult(actionData) {
                    if (actionData) {
                        this.ValeurSortie = actionData.ValeurSortie;
                        this.EstExterne = actionData.EstExterne;
                        this.NomExterne = actionData.NomExterne;
                        this.OptionsAction = actionData.OptionsAction;
                        this.ValeursFinProcessPossibles = [];
                        if (actionData.ValeursFinProcessPossibles) {
                            for (var i = 0; i < actionData.ValeursFinProcessPossibles.length; i++) {
                                var vfp = actionData.ValeursFinProcessPossibles[i];
                                this.ValeursFinProcessPossibles.push(vfp);
                            }
                        }
                    }
                }
                return ActionResult;
            }());
            Lisa.ActionResult = ActionResult;
            var ApplicationResult = /** @class */ (function () {
                function ApplicationResult(Nom, Icone, Url) {
                    this.Nom = Nom;
                    this.Icone = Icone;
                    this.Url = Url;
                }
                return ApplicationResult;
            }());
            Lisa.ApplicationResult = ApplicationResult;
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var RouteurAgent = /** @class */ (function () {
            function RouteurAgent() {
            }
            RouteurAgent.setImplementation = function (implementation) {
                RouteurAgent.implementation = implementation;
            };
            ;
            Object.defineProperty(RouteurAgent.prototype, "StepInfo", {
                get: function () {
                    return RouteurAgent.implementation.StepInfo;
                },
                enumerable: true,
                configurable: true
            });
            RouteurAgent.prototype.Next = function (valeurSortie) {
                return RouteurAgent.implementation.Next(valeurSortie);
            };
            RouteurAgent.prototype.AddToContext = function (key, value) {
                return RouteurAgent.implementation.AddToContext(key, value);
            };
            RouteurAgent.prototype.GetFromContext = function (key) {
                return RouteurAgent.implementation.GetFromContext(key);
            };
            RouteurAgent.prototype.LireFichier = function (nomFichier) {
                return RouteurAgent.implementation.LireFichier(nomFichier);
            };
            RouteurAgent.prototype.Previous = function () {
                return RouteurAgent.implementation.Previous();
            };
            RouteurAgent.CLASS_NAME = 'MyWay.Services.RouteurAgent';
            RouteurAgent.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(RouteurAgent.CLASS_NAME);
            return RouteurAgent;
        }());
        Services.RouteurAgent = RouteurAgent;
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgentExtended, 'TraceSuiviTechAgent', {
            get: function () {
                return this._techLibrary.TraceSuiviTechAgent;
            }
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgent, 'TraceSuiviTechAgent', {
            get: function () {
                return this._techLibrary.TraceSuiviTechAgent;
            }
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.TechLibrary.addInitListener(function (pInstance, library) {
            pInstance.TraceSuiviTechAgent = library.TraceSuivi;
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des traces coté agent.
* @class TraceAgent : initialise l'agent de trace
* @class Logger : Permet de tracer coté manager
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraceSuivi;
        (function (TraceSuivi) {
            var TraceSuiviTechAgent = /** @class */ (function (_super) {
                __extends(TraceSuiviTechAgent, _super);
                /*
                * Appelé par le ServiceAgent
                * @param agentLibrary : services disponibles pour un agent
                * @param errorCallback : gestionnaire d'erreur du serviceAgent
                * @param application : nom de l'application fonctionnelle
                * @param applicationVersion : version de l'application fonctionnelle
                */
                function TraceSuiviTechAgent() {
                    return _super.call(this) || this;
                }
                TraceSuiviTechAgent.prototype.forcerTrace = function (trace) {
                    return this.sendMessage(TraceSuivi.Messages.TraceSuiviMessageSubject.SendTraceSuiviForcee, {
                        trace: trace
                    });
                };
                return TraceSuiviTechAgent;
            }(TraceSuivi.TraceSuiviAgent));
            TraceSuivi.TraceSuiviTechAgent = TraceSuiviTechAgent;
            Services.Components.RegistryAgent.getInstance().register(TraceSuiviTechAgent);
        })(TraceSuivi = Services.TraceSuivi || (Services.TraceSuivi = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Acquisition;
        (function (Acquisition) {
            var AcquisitionManagerMessage = /** @class */ (function (_super) {
                __extends(AcquisitionManagerMessage, _super);
                function AcquisitionManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Acquisition) || this;
                }
                AcquisitionManagerMessage.prototype.onAppelRADLAD = function (message) {
                    var fileInfos = message.fileInfos;
                    var params = message.params;
                    return this.managerInstance.appelRADLAD(fileInfos, params);
                };
                AcquisitionManagerMessage.prototype.onConvertFileToImg = function (message) {
                    var fileInfo = message.fileInfo;
                    var params = message.params;
                    return this.managerInstance.convertFileToImg(fileInfo, params);
                };
                AcquisitionManagerMessage.prototype.onMergerEtArchiver = function (message) {
                    var fileInfos = message.fileInfos;
                    var putDocumentInput = message.putDocumentInput;
                    return this.managerInstance.mergerEtArchiver(fileInfos, putDocumentInput);
                };
                AcquisitionManagerMessage.prototype.onMergerEtUploader = function (message) {
                    var fileInfos = message.fileInfos;
                    return this.managerInstance.mergerEtUploader(fileInfos);
                };
                AcquisitionManagerMessage.prototype.onConvertBase64ToBin = function (message) {
                    var urls = message.urls;
                    return this.managerInstance.convertBase64ToBin(urls);
                };
                AcquisitionManagerMessage.prototype.onPurge = function (message) {
                    var hour = message.hour;
                    return this.managerInstance.purge(hour);
                };
                AcquisitionManagerMessage.prototype.onFermetureSpiFactory = function (message) {
                    return this.managerInstance.fermetureSpiFactory();
                };
                AcquisitionManagerMessage.prototype.onSetConfigurationScanner = function (message) {
                    var typeScanner = message.typeScanner;
                    return this.managerInstance.setConfigurationScanner(typeScanner);
                };
                AcquisitionManagerMessage.prototype.onMergeAndOpenPDF = function (message, iFrame) {
                    var params = message.params;
                    return this.managerInstance.onMergeAndOpenPDF(params, iFrame);
                };
                AcquisitionManagerMessage.prototype.onRecupereListeDocumentGED = function (message) {
                    var params = message.params;
                    var formatResultat = message.formatResultat;
                    return this.managerInstance.onRecupereListeDocumentGED(params, formatResultat);
                };
                AcquisitionManagerMessage.prototype.onOuvrirListeDocumentGED = function (message) {
                    var params = message.params;
                    var formatResultat = message.formatResultat;
                    var formatOuverture = message.formatOuverture;
                    return this.managerInstance.onOuvrirListeDocumentGED(params, formatResultat, formatOuverture);
                };
                AcquisitionManagerMessage.prototype.onGetProcessingTask = function (message) {
                    var guid = message.guid;
                    return this.managerInstance.onGetProcessingTask(guid);
                };
                AcquisitionManagerMessage.prototype.onGetDocumentGEDAndSave = function (message) {
                    var params = message.params;
                    return this.managerInstance.onGetDocumentGEDAndSave(params);
                };
                AcquisitionManagerMessage.prototype.onGetDocumentGedSaveAtAndOpen = function (message) {
                    var params = message.params;
                    return this.managerInstance.onGetDocumentGedSaveAtAndOpen(params);
                };
                AcquisitionManagerMessage.prototype.onGetDocumentGEDAndOpen = function (message) {
                    var params = message.params;
                    return this.managerInstance.onGetDocumentGEDAndOpen(params);
                };
                AcquisitionManagerMessage.prototype.onUploadDocumentFrom = function (message) {
                    var params = message.cheminDuFichierSurLePoste;
                    return this.managerInstance.onUploadDocumentFrom(params);
                };
                /**
                 * @author : Benoît Ouvrié.
                 * @version : 20.03
                 * @description : liste des scanners accessibles depuis le poste.
                 * @returns Une promesse de type liste de IScannerAccessibleResult.
                 */
                AcquisitionManagerMessage.prototype.onGetListeScanner = function (message) {
                    return this.managerInstance.onGetListeScanner();
                };
                /**
                 * @author : Benoît Ouvrié.
                 * @version : 20.03
                 * @description : vérification de la prise en main (ou non) à distance du poste.
                 * @returns Une promesse de type IPrisEnMainADistanceResult.
                 */
                AcquisitionManagerMessage.prototype.onIsPrisEnMainADistance = function (message) {
                    return this.managerInstance.onIsPrisEnMainADistance();
                };
                /**
                 * Traite les messages provenant de l'agent AcquisitionAgent
                 *
                 * @param event {Event} Evénement
                 * @param sendResponseCallback {ResponseCallback} Objet contenant le callback de retour
                 *
                 */
                AcquisitionManagerMessage.prototype.reception = function (message) {
                    switch (message.subject) {
                        case Acquisition.Messages.AcquisitionMessageSubject.AppelRADLAD:
                            return this.onAppelRADLAD(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.ConvertFileToImg:
                            return this.onConvertFileToImg(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.MergerEtArchiver:
                            return this.onMergerEtArchiver(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.MergerEtUploader:
                            return this.onMergerEtUploader(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.ConvertBase64ToBin:
                            return this.onConvertBase64ToBin(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.Purge:
                            return this.onPurge(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.FermetureSpiFactory:
                            return this.onFermetureSpiFactory(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.SetConfigurationScanner:
                            return this.onSetConfigurationScanner(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.MergeAndOpenPDF:
                            return this.onMergeAndOpenPDF(message.message, message.iframe);
                        case Acquisition.Messages.AcquisitionMessageSubject.OuvrirListeDocumentGED:
                            return this.onOuvrirListeDocumentGED(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.RecupereListeDocumentGED:
                            return this.onRecupereListeDocumentGED(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.GetProcessingTask:
                            return this.onGetProcessingTask(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.GetDocumentGEDAndSave:
                            return this.onGetDocumentGEDAndSave(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.GetDocumentGEDAtAndOpen:
                            return this.onGetDocumentGedSaveAtAndOpen(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.GetDocumentGEDAndOpen:
                            return this.onGetDocumentGEDAndOpen(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.GetListeScanner:
                            return this.onGetListeScanner(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.IsPrisEnMainADistance:
                            return this.onIsPrisEnMainADistance(message.message);
                        case Acquisition.Messages.AcquisitionMessageSubject.UploadDocumentFrom:
                            return this.onUploadDocumentFrom(message.message);
                        default:
                            return _super.prototype.reception.call(this, message);
                    }
                };
                AcquisitionManagerMessage.CLASS_NAME = 'MyWay.Services.Acquisition.AcquisitionManagerMessage';
                AcquisitionManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(AcquisitionManagerMessage.CLASS_NAME);
                return AcquisitionManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Acquisition.AcquisitionManagerMessage = AcquisitionManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(AcquisitionManagerMessage);
        })(Acquisition = Services.Acquisition || (Services.Acquisition = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des moyens de communication
* @module MyWay.Services.Communication
* @classe CommunicationManager - public - Classe permettant la gestion des moyens de communication
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Communication;
        (function (Communication) {
            var CommunicationManagerExtended = /** @class */ (function (_super) {
                __extends(CommunicationManagerExtended, _super);
                function CommunicationManagerExtended() {
                    return _super.call(this, Services.Components.ComponentType.Communication) || this;
                }
                /**
                * Permet d'envoyer un mail
                *
                * @param mail Mail
                *
                */
                CommunicationManagerExtended.prototype.envoyerMail = function (mail) {
                    return this.manager.envoyerMail(mail);
                };
                /**
                * Permet de déclencher un appel
                *
                * @param {Call} call    Données de l'appel
                */
                CommunicationManagerExtended.prototype.declencherAppel = function (call) {
                    return this.manager.declencherAppel(call);
                };
                /**
                * Permet de raccrocher un appel
                */
                CommunicationManagerExtended.prototype.raccrocherAppel = function () {
                    return this.manager.raccrocherAppel();
                };
                /**
                * Permet d'envoyer un message à l'application kiosque
                */
                CommunicationManagerExtended.prototype.envoyerMessageAppliKiosque = function (messageAgent) {
                    return this.manager.envoyerMessageAppliKiosque(messageAgent);
                };
                return CommunicationManagerExtended;
            }(Services.Components.ComponentManagerExtendedBase));
            Communication.CommunicationManagerExtended = CommunicationManagerExtended;
            Services.Components.RegistryManagerExtended.getInstance().register(CommunicationManagerExtended);
        })(Communication = Services.Communication || (Services.Communication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Communication;
        (function (Communication) {
            var CommunicationManagerMessage = /** @class */ (function (_super) {
                __extends(CommunicationManagerMessage, _super);
                function CommunicationManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Communication) || this;
                }
                CommunicationManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Communication.CommunicationMessageSubject.EnvoyerMail: {
                            var lContent = pMessage.message;
                            var mail = lContent.mail;
                            return this.managerInstance.envoyerMail(mail);
                        }
                        case Communication.CommunicationMessageSubject.DeclencherAppel: {
                            var lContent = pMessage.message;
                            var call = lContent.call;
                            return this.managerInstance.declencherAppel(call);
                        }
                        case Communication.CommunicationMessageSubject.RaccrocherAppel: {
                            var lContent = pMessage.message;
                            return this.managerInstance.raccrocherAppel();
                        }
                        case Communication.CommunicationMessageSubject.EnvoyerMessageAppliKiosque: {
                            var lContent = pMessage.message;
                            var messageAgent = lContent.messageAgent;
                            return this.managerInstance.envoyerMessageAppliKiosque(messageAgent);
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                CommunicationManagerMessage.CLASS_NAME = 'MyWay.Services.Communication.CommunicationManagerMessage';
                CommunicationManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(CommunicationManagerMessage.CLASS_NAME);
                return CommunicationManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Communication.CommunicationManagerMessage = CommunicationManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(CommunicationManagerMessage);
        })(Communication = Services.Communication || (Services.Communication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var Chat;
            (function (Chat) {
                /* istanbul ignore next */
                var ChatManagerExtended = /** @class */ (function (_super) {
                    __extends(ChatManagerExtended, _super);
                    function ChatManagerExtended() {
                        return _super.call(this, Services.Components.ComponentType.Chat) || this;
                    }
                    ChatManagerExtended.prototype.closeChat = function (pIdChat) {
                        return this.manager.closeChat(pIdChat);
                    };
                    ChatManagerExtended.prototype.openChat = function (pDestinataire) {
                        return this.manager.openChat(pDestinataire, null);
                    };
                    ChatManagerExtended.prototype.openChatroom = function (pIdChat) {
                        return this.manager.openChatroom(pIdChat, null);
                    };
                    ChatManagerExtended.prototype.sendMessage = function (pIdChat, pMessage) {
                        return this.manager.sendMessageToStream(pIdChat, pMessage);
                    };
                    ChatManagerExtended.prototype.getUtilisateurs = function () {
                        return this.manager.getUtilisateurs();
                    };
                    return ChatManagerExtended;
                }(Services.Components.ComponentManagerExtendedBase));
                Chat.ChatManagerExtended = ChatManagerExtended;
                Services.Components.RegistryManagerExtended.getInstance().register(ChatManagerExtended);
            })(Chat = BriqueCommunication.Chat || (BriqueCommunication.Chat = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var Chat;
            (function (Chat) {
                /* istanbul ignore next */
                var ChatManagerMessage = /** @class */ (function (_super) {
                    __extends(ChatManagerMessage, _super);
                    function ChatManagerMessage() {
                        return _super.call(this, Services.Components.ComponentType.Chat) || this;
                    }
                    ChatManagerMessage.prototype.reception = function (pMessage) {
                        switch (pMessage.subject) {
                            case Chat.ChatMessageSubject.AddChatCapacity: {
                                var lContent = pMessage.message;
                                this.managerInstance.setChatCapacite(pMessage.iframe);
                                return this.library.Core.getPromesseSelfResoved();
                            }
                            case Chat.ChatMessageSubject.SetStatut: {
                                var lContent = pMessage.message;
                                return this.managerInstance.setStatut(lContent.statut);
                            }
                            case Chat.ChatMessageSubject.CloseChat: {
                                var lContent = pMessage.message;
                                return this.managerInstance.closeChat(lContent.idChat);
                            }
                            case Chat.ChatMessageSubject.OpenChat: {
                                var lContent = pMessage.message;
                                return this.managerInstance.openChat(lContent.destinataire, pMessage.iframe);
                            }
                            case Chat.ChatMessageSubject.OpenChatroom: {
                                var lContent = pMessage.message;
                                return this.managerInstance.openChatroom(lContent.idChat, pMessage.iframe);
                            }
                            case Chat.ChatMessageSubject.SendMessage: {
                                var lContent = pMessage.message;
                                return this.managerInstance.sendMessageToStream(lContent.idChat, lContent.message);
                            }
                            case Chat.ChatMessageSubject.AccepterDemanderExpert: {
                                var lContent = pMessage.message;
                                return this.managerInstance.accepterDemandeExpert(lContent.chatroom_id, lContent.domaine, lContent.prospect_id, pMessage.iframe);
                            }
                            case Chat.ChatMessageSubject.GetUtilisateurs: {
                                var lContent = pMessage.message;
                                return this.managerInstance.getUtilisateurs();
                            }
                            case Chat.ChatMessageSubject.EnvoyerMessageVideoroom: {
                                var lContent = pMessage.message;
                                return this.managerInstance.envoyerMessageVideoroom(lContent.chatroom_id, lContent.user_id, lContent.message);
                            }
                            case Chat.ChatMessageSubject.GetChatrooms: {
                                var lContent = pMessage.message;
                                return this.managerInstance.getChatrooms(pMessage.iframe);
                            }
                            case Chat.ChatMessageSubject.GetChatroom: {
                                var lContent = pMessage.message;
                                return this.managerInstance.getChatroom(lContent.chatroom_id, pMessage.iframe);
                            }
                            case Chat.ChatMessageSubject.DemarrerVideoChatroom: {
                                var lContent = pMessage.message;
                                this.managerInstance.demarrerVideoChatroom(lContent.idChat);
                                return this.library.Core.getPromesseSelfResoved();
                            }
                            case Chat.ChatMessageSubject.ArreterVideoChatroom: {
                                var lContent = pMessage.message;
                                this.managerInstance.arreterVideoChatroom(lContent.idChat);
                                return this.library.Core.getPromesseSelfResoved();
                            }
                            case Chat.ChatMessageSubject.InviterPersonnesAUneChatroom: {
                                var lContent = pMessage.message;
                                return (_a = this.managerInstance).inviterPersonnesAUneChatroom.apply(_a, [lContent.chatroom_id].concat(lContent.users_id));
                            }
                            default:
                                return _super.prototype.reception.call(this, pMessage);
                        }
                        var _a;
                    };
                    return ChatManagerMessage;
                }(Services.Components.ComponentManagerMessageBase));
                Chat.ChatManagerMessage = ChatManagerMessage;
                Services.Components.RegistryManagerMessage.getInstance().register(ChatManagerMessage);
            })(Chat = BriqueCommunication.Chat || (BriqueCommunication.Chat = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var BriqueCommunication;
        (function (BriqueCommunication) {
            var Notification;
            (function (Notification) {
                var NotificationManagerMessage = /** @class */ (function (_super) {
                    __extends(NotificationManagerMessage, _super);
                    function NotificationManagerMessage() {
                        return _super.call(this, Services.Components.ComponentType.Notification) || this;
                    }
                    NotificationManagerMessage.prototype.onAbonnement = function (pMessage) {
                        return this.managerInstance.ecouterNotifications(pMessage.subject);
                    };
                    NotificationManagerMessage.prototype.onDesabonnement = function (pMessage) {
                        this.managerInstance.arreterNotifications(pMessage.subject);
                    };
                    NotificationManagerMessage.prototype.onGetSujets = function (pMessage) {
                        return this.managerInstance.getListeSujets();
                    };
                    NotificationManagerMessage.prototype.reception = function (pMessage) {
                        switch (pMessage.subject) {
                            case Notification.NotificationMessageSubject.Abonnement: {
                                var lContent = pMessage.message;
                                return this.onAbonnement(pMessage.message);
                            }
                            case Notification.NotificationMessageSubject.Desabonnement: {
                                var lContent = pMessage.message;
                                this.onDesabonnement(pMessage.message);
                                return this.library.Core.getPromesseSelfResoved();
                            }
                            case Notification.NotificationMessageSubject.GetListeSubjects: {
                                var lContent = pMessage.message;
                                return this.onGetSujets(pMessage.message);
                            }
                            default:
                                return _super.prototype.reception.call(this, pMessage);
                        }
                    };
                    return NotificationManagerMessage;
                }(Services.Components.ComponentManagerMessageBase));
                Notification.NotificationManagerMessage = NotificationManagerMessage;
                Services.Components.RegistryManagerMessage.getInstance().register(NotificationManagerMessage);
            })(Notification = BriqueCommunication.Notification || (BriqueCommunication.Notification = {}));
        })(BriqueCommunication = Services.BriqueCommunication || (Services.BriqueCommunication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilite
* @module MyWay.Services.Mobilite
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            /**
            *  Classe permettant d'accéder aux données de mobilité
            */
            var MobiliteApiBase = /** @class */ (function () {
                function MobiliteApiBase() {
                    this.libraryManager = null;
                }
                MobiliteApiBase.prototype.initApi = function (libraryManagerApi) {
                    this.libraryManager = libraryManagerApi;
                };
                /**
                 * Méthode qui vérifie si l'on est connecté.
                 * @return {IPromesse<boolean>}   Si true, on est bien connecté, on retourne false.
                 */
                MobiliteApiBase.prototype.estConnecte = function () {
                    if (!navigator || navigator.onLine === undefined) {
                        return Services.Promesses.createPromiseSelfError(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_MOBILITE_RECUP_RESEAU_IMPOSSIBLE));
                    }
                    else if (navigator.onLine) {
                        return Services.Promesses.createPromiseSelfResolved(true);
                    }
                    else {
                        return Services.Promesses.createPromiseSelfResolved(false);
                    }
                };
                /**
                 * Méthode qui vérifie que l'écran de l'utilisateur est tactile.
                 * @return {IPromesse<boolean>}   Si true, on a un écran tactile, on retourne false.
                 */
                MobiliteApiBase.prototype.estEcranTactile = function () {
                    if (('onstarttouch' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0)) {
                        return Services.Promesses.createPromiseSelfResolved(true);
                    }
                    else {
                        return Services.Promesses.createPromiseSelfResolved(false);
                    }
                };
                /**
                 * Méthode qui récupère la liste des périphériques connectés.
                 * @return {IPromesse<IPeripherique[]>} liste d'objet IPeripherique
                 */
                MobiliteApiBase.prototype.listePeripheriques = function () {
                    var listePeripheriques = [];
                    return Services.Promesses.createPromiseSelfResolved(listePeripheriques);
                };
                /**
                 * Méthode qui récupère la liste des tablettes de signatures connectées.
                 * @return {IPromesse<ITabletteSignature[]>} liste d'objet ITabletteSignature
                 */
                MobiliteApiBase.prototype.listeTablettesSignatures = function () {
                    var listeTabletteSignature = [];
                    return Services.Promesses.createPromiseSelfResolved(listeTabletteSignature);
                };
                ;
                /**
                 * Methode qui récupère les plages réseaux pour déterminer le type de l'adresse Ip du poste.
                 * @return {IPromesse<ConfigurationPoste.IConfigPosteDTO<IConfigDetailsMobilite>} Retourne les plages reseaux par type
                 */
                MobiliteApiBase.prototype.getPlagesReseau = function () {
                    return this.libraryManager.ConfigurationPoste.getConfigurationPoste();
                };
                return MobiliteApiBase;
            }());
            Mobilite.MobiliteApiBase = MobiliteApiBase;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilite
* @module MyWay.Services.Mobilite
* classe : MobiliteManager - public - Classe permettant la gestion de la mobilite
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            var MobiliteApiFactory = /** @class */ (function (_super) {
                __extends(MobiliteApiFactory, _super);
                function MobiliteApiFactory() {
                    var _this = _super.call(this, Services.Components.ComponentType.Mobilite) || this;
                    _this.wrapped = null;
                    return _this;
                }
                MobiliteApiFactory.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    var _this = this;
                    if (pCapabilities.ServiceLocal) {
                        if (pCapabilities.SIRIS) {
                            this.wrapped = new Mobilite.MobiliteApiSIRIS();
                        }
                        else {
                            this.wrapped = new Mobilite.MobiliteApiWindows();
                        }
                    }
                    else {
                        this.wrapped = new Mobilite.MobiliteApiFullWeb();
                    }
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer).then(function () {
                        return _this.wrapped.initApi(pLibraryManager);
                    });
                };
                MobiliteApiFactory.prototype.initApi = function (libraryManagerApi) {
                };
                MobiliteApiFactory.prototype.getPlagesReseau = function () {
                    return this.wrapped.getPlagesReseau();
                };
                MobiliteApiFactory.prototype.estConnecte = function () {
                    return this.wrapped.estConnecte();
                };
                MobiliteApiFactory.prototype.estEcranTactile = function () {
                    return this.wrapped.estEcranTactile();
                };
                MobiliteApiFactory.prototype.listeTablettesSignatures = function () {
                    return this.wrapped.listeTablettesSignatures();
                };
                MobiliteApiFactory.prototype.getPlateforme = function () {
                    return this.wrapped.getPlateforme();
                };
                MobiliteApiFactory.prototype.getResolutionEcran = function () {
                    return this.wrapped.getResolutionEcran();
                };
                MobiliteApiFactory.prototype.getAdresseIp = function () {
                    return this.wrapped.getAdresseIp();
                };
                return MobiliteApiFactory;
            }(Services.Components.ComponentApiBase));
            Mobilite.MobiliteApiFactory = MobiliteApiFactory;
            Services.Components.RegistryApi.getInstance().register(MobiliteApiFactory);
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilite
* @module MyWay.Services.Mobilite
* classe : MobiliteManager - public - Classe permettant la gestion de la mobilite
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            /**
            *  Classe permettant d'accéder aux données de mobilité
            */
            var MobiliteApiFullWeb = /** @class */ (function (_super) {
                __extends(MobiliteApiFullWeb, _super);
                function MobiliteApiFullWeb() {
                    return _super.call(this) || this;
                }
                /**
                  * Méthode qui récupère la résolution de l'écran.
                  * @return {IPromesse<ResolutionEcranDTO>}   Retourne un object de type ResolutionEcranDTO
                  */
                MobiliteApiFullWeb.prototype.getResolutionEcran = function () {
                    var resolutionEcran = { largeur: null, hauteur: null };
                    if (window.screen) {
                        //Récupère la résolution de l'écran
                        resolutionEcran.hauteur = window.screen.height;
                        resolutionEcran.largeur = window.screen.width;
                    }
                    else {
                        //Pour les vieux navigateurs, récupère la taille de la fenêtre du navigateur
                        resolutionEcran.hauteur = document.body.clientHeight;
                        resolutionEcran.largeur = document.body.clientWidth;
                    }
                    return Services.Promesses.createPromiseSelfResolved(resolutionEcran);
                };
                /**
                 * Methode qui récupère le type de plateforme du poste.
                 * @return {IPromesse<PLATEFORME>} Retourne le type de plateforme
                 */
                MobiliteApiFullWeb.prototype.getPlateforme = function () {
                    var plateforme;
                    if (navigator && navigator.platform) {
                        if (navigator.platform.indexOf("Win") != -1) {
                            plateforme = Mobilite.PLATEFORME.WINDOWS;
                        }
                        else if (navigator.platform.indexOf("Mac") != -1) {
                            plateforme = Mobilite.PLATEFORME.APPLE;
                        }
                        else if (navigator.platform.indexOf("iP") != -1) {
                            plateforme = Mobilite.PLATEFORME.APPLE;
                        }
                        else if (navigator.platform.indexOf("Android") != -1) {
                            plateforme = Mobilite.PLATEFORME.ANDROID;
                        }
                        else {
                            plateforme = Mobilite.PLATEFORME.AUTRE;
                        }
                    }
                    else {
                        plateforme = Mobilite.PLATEFORME.AUTRE;
                    }
                    return Services.Promesses.createPromiseSelfResolved(plateforme);
                };
                /**
                 * TODO : Méthode présente dans context-api => rajouter dans une partie commune?
                 * Méthode qui récupère qui récupère un paramètre d'URL.
                 * @param {string} : clé du paramètre à récupérer
                 * @return {IPromesse<string>} Retourne la valeur du parametre
                 */
                MobiliteApiFullWeb.prototype.getFromUrl = function (name) {
                    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
                    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                    var resultats = regex.exec(location.search);
                    return resultats === null ? null : decodeURIComponent(resultats[1].replace(/\+/g, " "));
                };
                /**
                 * Méthode qui récupère l'adresse Ip du poste passé en paramètre d'url.
                 * @return {IPromesse<string>} Retourne le type de plateforme
                 */
                MobiliteApiFullWeb.prototype.getAdresseIp = function () {
                    var adresseIp = this.getFromUrl('ip');
                    if (adresseIp) {
                        return Services.Promesses.createPromiseSelfResolved(adresseIp);
                    }
                    else {
                        return Services.Promesses.createPromiseSelfError(new Services.Erreur("Aucune adresse Ip passée en paramètre d'url"));
                    }
                    ;
                };
                return MobiliteApiFullWeb;
            }(Mobilite.MobiliteApiBase));
            Mobilite.MobiliteApiFullWeb = MobiliteApiFullWeb;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilite
* @module MyWay.Services.Mobilite
* classe : MobiliteManager - public - Classe permettant la gestion de la mobilite
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            /**
            *  Classe permettant d'accéder aux données de mobilité
            */
            var MobiliteApiWindows = /** @class */ (function (_super) {
                __extends(MobiliteApiWindows, _super);
                function MobiliteApiWindows() {
                    var _this = _super.call(this) || this;
                    _this._periphUrl = Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + "/periph/";
                    _this._contexteUrl = Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + "/contexte/";
                    return _this;
                }
                /**
                 * Méthode qui récupère la liste des tablettes de signatures connectées auprès du service local.
                 * @return {IPromesse.ITabletteSignatureDTO >} liste d'objet ITabletteSignatureDTO
                 */
                MobiliteApiWindows.prototype.listeTablettesSignatures = function () {
                    return this.libraryManager.Core.sendRequest({
                        url: this._periphUrl + 'getliste',
                        method: Services.MethodEnum.GET,
                        cache: false
                    })
                        .then(function (result) {
                        var listeTablettesSignature = [];
                        for (var key in result) {
                            var infos = JSON.parse(result[key].Info);
                            var tablette = new Mobilite.TabletteSignature(infos.Type, infos.Modele, infos.CodeModele);
                            listeTablettesSignature.push(tablette);
                        }
                        ;
                        return listeTablettesSignature;
                    }, function (erreur) {
                        throw erreur;
                    });
                };
                /**
                 * Méthode qui récupère la résolution de l'écran principal auprès du service local.
                 * @return {IPromesse.IResolutionEcranDTO >}
                 */
                MobiliteApiWindows.prototype.getResolutionEcran = function () {
                    return this.libraryManager.Core.sendRequest({
                        url: this._contexteUrl + 'GetResolutionEcran',
                        method: Services.MethodEnum.GET,
                        cache: false
                    })
                        .then(function (result) {
                        return result;
                    }, function (erreur) {
                        throw erreur;
                    });
                };
                /**
                 * Méthode qui récupère le type de plateforme du poste.
                 * @return {IPromesse<PLATEFORME>} Retourne le type WINDOWS car on a le service locale
                 */
                MobiliteApiWindows.prototype.getPlateforme = function () {
                    return Services.Promesses.createPromiseSelfResolved(Mobilite.PLATEFORME.WINDOWS);
                };
                /**
                 * Méthode qui récupère l'adresse Ip du poste en appelant le service local.
                 * @return {IPromesse<string>} Retourne le type de plateforme
                 */
                MobiliteApiWindows.prototype.getAdresseIp = function () {
                    return this.libraryManager.Core.sendRequest({
                        withHeaders: true,
                        url: Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + '/contexte/GetIpPoste',
                        method: Services.MethodEnum.GET
                    }).then(function (adresseIp) {
                        return adresseIp;
                    }, function (erreur) {
                        throw erreur;
                    });
                };
                return MobiliteApiWindows;
            }(Mobilite.MobiliteApiBase));
            Mobilite.MobiliteApiWindows = MobiliteApiWindows;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilite
* @module MyWay.Services.Mobilite
* classe : MobiliteManager - public - Classe permettant la gestion de la mobilite
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            /**
            *  Classe permettant d'accéder aux données de mobilité
            */
            var MobiliteApiSIRIS = /** @class */ (function (_super) {
                __extends(MobiliteApiSIRIS, _super);
                function MobiliteApiSIRIS() {
                    return _super.call(this) || this;
                }
                MobiliteApiSIRIS.prototype.getPlateforme = function () {
                    return Services.Promesses.createPromiseSelfResolved(Mobilite.PLATEFORME.MYSYS);
                };
                return MobiliteApiSIRIS;
            }(Mobilite.MobiliteApiWindows));
            Mobilite.MobiliteApiSIRIS = MobiliteApiSIRIS;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ContexteClient;
        (function (ContexteClient) {
            var ContexteClientManagerExtended = /** @class */ (function (_super) {
                __extends(ContexteClientManagerExtended, _super);
                function ContexteClientManagerExtended() {
                    return _super.call(this, Services.Components.ComponentType.ContexteClient) || this;
                }
                /**
                * Permet la création d'un contexte client sur un client donné transmis par son id
                *
                * @param pIdClient {string} id du client
                * @return L'id technique du contexte client créé (ou mergé)
                */
                ContexteClientManagerExtended.prototype.nouveauContexte = function (pIdClient) {
                    return this.manager.nouveauContexte(pIdClient).getId();
                };
                /**
                * Permet la destruction d'un contexte client
                *
                * @param pId {string} id du contexte client
                * @return True si le contexte client a bien été détruit, false sinon
                */
                ContexteClientManagerExtended.prototype.detruireContexte = function (pId) {
                    return this.manager.detruireContexte("portail", pId);
                };
                /**
                 * Change le contexte client d'un processus
                 *
                 * @param pIdContexteClient Identifiant du contexte client. Passer "null" pour retirer le processus de tout contexte client
                 * @param pIdProcessus Identifiant du processus à modifier
                 */
                ContexteClientManagerExtended.prototype.changerContexteClientDunProcessus = function (pIdContexteClient, pIdProcessus) {
                    this.manager.changeContexteOfProcess("portail", pIdProcessus, pIdContexteClient);
                };
                /**
                 * Récupère le client d'un contexte
                 *
                 * @param pIdContexteClient Identifiant du contexte client.
                 * @return Identifiant du client
                 */
                ContexteClientManagerExtended.prototype.getClientDuContexte = function (pIdContexteClient) {
                    return this.manager.getClient(pIdContexteClient);
                };
                /**
                 * Modifie le client d'un contexte. Ne peut modifier le client d'un contexte qui a déjà un client
                 *
                 * @param pIdContexteClient Identifiant du contexte client.
                 * @param pIdClient Identifiant du client.
                 * @return TRUE si ça s'est bien passé, FALSE sinon
                 */
                ContexteClientManagerExtended.prototype.setClientDuContexte = function (pIdContexteClient, pIdClient) {
                    return this.manager.setClient("portail", pIdClient, pIdContexteClient);
                };
                /**
                 * Récupère le mode du contexte client (AUTOMATIQUE ou MANUEL)
                 *
                 * @param pIdContexteClient Identifiant du contexte client.
                 * @return Le mode du contexe
                 */
                ContexteClientManagerExtended.prototype.getModeDuContexte = function (pIdContexteClient) {
                    return this.manager.getMode(pIdContexteClient);
                };
                /**
                 * Modifie le mode du contexte client (AUTOMATIQUE ou MANUEL)
                 *
                 * @param pIdContexteClient Identifiant du contexte client.
                 * @param pMode Nouveau mode
                 */
                ContexteClientManagerExtended.prototype.setModeDuContexte = function (pIdContexteClient, pMode) {
                    this.manager.changeContexteMode(pIdContexteClient, pMode);
                };
                /**
                 * Permet la récupération de l'ensemble des ids techniques des contextes clients
                 *
                 * @param pIdContexteClient Identifiant du contexte client.
                 * @return Liste des ids contextes clients
                 */
                ContexteClientManagerExtended.prototype.getContextes = function () {
                    var lResult = [];
                    this.manager.getContextes().forEach(function (pContexte) {
                        lResult.push(pContexte.getId());
                    });
                    return lResult;
                };
                /**
                 * Permet de connaître l'ensemble des processus attachés à un contexte client
                 *
                 * @param pIdContexteClient Identifiant du contexte client.
                 * @return Liste des ids des processus
                 */
                ContexteClientManagerExtended.prototype.getProcessusDuContexte = function (pIdContexteClient) {
                    var lResult = [];
                    this.manager.getListeProcessus(pIdContexteClient).forEach(function (pProcessus) {
                        lResult.push(pProcessus.id);
                    });
                    return lResult;
                };
                /**
                 * Permet de connaitre la valeur d'une propriété d'un contexte client
                 *
                 * @param pIdContexteClient Identifiant du contexte client.
                 * @param pPropriete Propriété à lire. Passer "null" pour connaitre tout le contenu du contexte client
                 * @return Valeur de la propriété
                 */
                ContexteClientManagerExtended.prototype.getProprieteDuContexte = function (pIdContexteClient, pPropriete) {
                    return this.manager.getProperty(pPropriete, pIdContexteClient);
                };
                /**
                 * Permet de modifier la valeur d'une propriété d'un contexte client
                 *
                 * @param pIdContexteClient Identifiant du contexte client.
                 * @param pPropriete Propriété à lire. Passer "null" pour connaitre tout le contenu du contexte client
                 * @param pValeur Nouvelle valeur
                 * @return TRUE si ça s'est bien passé, FALSE sinon
                 */
                ContexteClientManagerExtended.prototype.setProprieteDuContexte = function (pIdContexteClient, pPropriete, pValeur) {
                    return this.manager.setProperty("portail", pPropriete, pValeur, pIdContexteClient);
                };
                /**
                 * Permet de modifier la valeur d'une lsite d'un contexte client
                 *
                 * @param pIdContexteClient Identifiant du contexte client.
                 * @param pPropriete Propriété à lire
                 * @param pValeur Nouvelle valeur
                 * @return TRUE si ça s'est bien passé, FALSE sinon
                 */
                ContexteClientManagerExtended.prototype.ajouterAListeDuContexte = function (pIdContexteClient, pPropriete, pValeur) {
                    return this.manager.addToList("portail", pPropriete, pValeur, pIdContexteClient);
                };
                /**
                 * Permet de retirer une valeur d'une liste d'un contexte client
                 *
                 * @param pIdContexteClient Identifiant du contexte client.
                 * @param pPropriete Propriété à retirer
                 * @return TRUE si ça s'est bien passé, FALSE sinon
                 */
                ContexteClientManagerExtended.prototype.retirerDeListeDuContexte = function (pIdContexteClient, pPropriete) {
                    return this.manager.removeFromList("portail", pPropriete, pIdContexteClient);
                };
                /**
                 * Permet de supprimer une valeur d'une propriété d'un contexte client
                 *
                 * @param pIdContexteClient Identifiant du contexte client.
                 * @param pPropriete Propriété à supprimer. Passer "null" pour vider tout le contexte client.
                 * @return TRUE si ça s'est bien passé, FALSE sinon
                 */
                ContexteClientManagerExtended.prototype.supprimerProprieteDuContexte = function (pIdContexteClient, pPropriete) {
                    return this.manager.deleteProperty("portail", pPropriete, pIdContexteClient);
                };
                return ContexteClientManagerExtended;
            }(Services.Components.ComponentManagerExtendedBase));
            ContexteClient.ContexteClientManagerExtended = ContexteClientManagerExtended;
            Services.Components.RegistryManagerExtended.getInstance().register(ContexteClientManagerExtended);
        })(ContexteClient = Services.ContexteClient || (Services.ContexteClient = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var ContexteClient;
        (function (ContexteClient) {
            var ContexteClientManagerMessage = /** @class */ (function (_super) {
                __extends(ContexteClientManagerMessage, _super);
                function ContexteClientManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.ContexteClient) || this;
                }
                ContexteClientManagerMessage.prototype.onGetContextesParClients = function () {
                    /*return this.library.Core.promesseTryCatch((pDefer: IDeferred<IContextClientMessageContentGetContextesParClientsResponse>) => {
                        pDefer.resolve({
                            ids: this.managerInstance.getContextesParClients()
                        });
                    });
                    */
                    return this.managerInstance.getContextesParClientsAsync().then(function (pResult) {
                        return { ids: pResult };
                    });
                };
                ContexteClientManagerMessage.prototype.onGetId = function () {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        pDefer.resolve({
                            id: _this.managerInstance.getCurrentContexteClient().getId()
                        });
                    });
                };
                ContexteClientManagerMessage.prototype.onGetClient = function () {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        pDefer.resolve({
                            id: _this.managerInstance.getCurrentContexteClient().getClient()
                        });
                    });
                };
                ContexteClientManagerMessage.prototype.onSetClient = function (pParameters) {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.managerInstance.setClient(pParameters.expediteur, pParameters.client, pParameters.idContexteClient);
                        pDefer.resolve();
                    });
                };
                ContexteClientManagerMessage.prototype.onGetContenu = function (pParameters) {
                    return this.managerInstance.getContenu(pParameters.idClient).then(function (pResult) {
                        return { valeur: pResult };
                    });
                };
                ContexteClientManagerMessage.prototype.onGetProperty = function (pParameters) {
                    return this.managerInstance.getProperty(pParameters.cle, pParameters.idContexteClient).then(function (pResult) {
                        return { valeur: pResult };
                    });
                };
                ContexteClientManagerMessage.prototype.onAddToList = function (pParameters) {
                    return this.managerInstance.addToList(pParameters.expediteur, pParameters.cle, pParameters.valeur, pParameters.idContexteClient).then(function (pResult) {
                        return { estOk: pResult };
                    });
                };
                ContexteClientManagerMessage.prototype.onSetContenu = function (pParameters) {
                    return this.managerInstance.setContenu(pParameters.expediteur, pParameters.idClient, pParameters.valeur).then(function (pResult) {
                        return { estOk: pResult };
                    });
                };
                ContexteClientManagerMessage.prototype.onSetReloadSynthese = function (pParameters) {
                    return this.managerInstance.setReloadSynthese(pParameters.expediteur, pParameters.idClient).then(function (pResult) {
                        return { estOk: pResult };
                    });
                };
                ContexteClientManagerMessage.prototype.onSetProperty = function (pParameters) {
                    return this.managerInstance.setProperty(pParameters.expediteur, pParameters.cle, pParameters.valeur, pParameters.idContexteClient).then(function (pResult) {
                        return { estOk: pResult };
                    });
                };
                ContexteClientManagerMessage.prototype.onRemoveFromList = function (pParameters) {
                    return this.managerInstance.removeFromList(pParameters.expediteur, pParameters.cle, pParameters.idContexteClient).then(function (pResult) {
                        return { estOk: pResult };
                    });
                };
                ContexteClientManagerMessage.prototype.onDeleteProperty = function (pParameters) {
                    return this.managerInstance.deleteProperty(pParameters.expediteur, pParameters.cle, pParameters.idContexteClient).then(function (pResult) {
                        return { estOk: pResult };
                    });
                };
                //Méthodes du techgent
                ContexteClientManagerMessage.prototype.onGetContextes = function () {
                    /*return this.library.Core.promesseTryCatch((pDefer: IDeferred<Messages.ITechActionGetContextesResponse>) => {
                        var lIdContextes: string[] = [];
                        this.managerInstance.getContextes().forEach((pContexte: ContexteClientClass) => {
                            lIdContextes.push(pContexte.getId());
                        });
                        pDefer.resolve({
                            idContextes: lIdContextes
                        });
                    });*/
                    var lIdContextes = [];
                    return this.managerInstance.getContextesAsync().then(function (contextes) {
                        contextes.forEach(function (pContexte) {
                            lIdContextes.push(pContexte.getId());
                        });
                        return { idContextes: lIdContextes };
                    });
                };
                ContexteClientManagerMessage.prototype.onDestroyContext = function (pParameters) {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        pDefer.resolve({
                            isDestroy: _this.managerInstance.detruireContexte(pParameters.expediteur, pParameters.idContexte)
                        });
                    });
                };
                ContexteClientManagerMessage.prototype.onNewContexte = function (pParameters) {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        pDefer.resolve({
                            idContexte: _this.managerInstance.nouveauContexte(pParameters.idClient).getId()
                        });
                    });
                };
                ContexteClientManagerMessage.prototype.onChangeContexteProcess = function (pParameters) {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.managerInstance.changeContexteOfProcess(pParameters.expediteur, pParameters.codeProcessus, pParameters.idContexte);
                        pDefer.resolve();
                    });
                };
                ContexteClientManagerMessage.prototype.onChangeContexteMode = function (pParameters) {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.managerInstance.changeContexteMode(pParameters.idContexte, pParameters.mode);
                        pDefer.resolve();
                    });
                };
                ContexteClientManagerMessage.prototype.onDetailsContexte = function (pParameters) {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        pDefer.resolve(_this.managerInstance.getDetailsContexte(pParameters.idContexte));
                    });
                };
                ContexteClientManagerMessage.prototype.reception = function (pMessage) {
                    var lFonction = null;
                    switch (pMessage.subject) {
                        case ContexteClient.ContextClientMessageSubject.GetContextesParClients: {
                            lFonction = this.onGetContextesParClients;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.GetId: {
                            lFonction = this.onGetId;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.GetClient: {
                            lFonction = this.onGetClient;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.SetClient: {
                            lFonction = this.onSetClient;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.GetProperty: {
                            lFonction = this.onGetProperty;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.AddToList: {
                            lFonction = this.onAddToList;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.SetProperty: {
                            lFonction = this.onSetProperty;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.RemoveFromList: {
                            lFonction = this.onRemoveFromList;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.DeleteProperty: {
                            lFonction = this.onDeleteProperty;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.GetContenu: {
                            lFonction = this.onGetContenu;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.SetContenu: {
                            lFonction = this.onSetContenu;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.SetReloadSynthese: {
                            lFonction = this.onSetReloadSynthese;
                            break;
                        }
                        //Messages du tech agent
                        case ContexteClient.ContextClientMessageSubject.GetContextes: {
                            lFonction = this.onGetContextes;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.DestroyContext: {
                            lFonction = this.onDestroyContext;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.NewContext: {
                            lFonction = this.onNewContexte;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.ChangeContextProcess: {
                            lFonction = this.onChangeContexteProcess;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.ChangeContextMode: {
                            lFonction = this.onChangeContexteMode;
                            break;
                        }
                        case ContexteClient.ContextClientMessageSubject.DetailsContext: {
                            lFonction = this.onDetailsContexte;
                            break;
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                    return lFonction.call(this, pMessage.message);
                };
                ContexteClientManagerMessage.CLASS_NAME = 'MyWay.Services.Context.ContexteClientManagerMessage';
                ContexteClientManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ContexteClientManagerMessage.CLASS_NAME);
                return ContexteClientManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            ContexteClient.ContexteClientManagerMessage = ContexteClientManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(ContexteClientManagerMessage);
        })(ContexteClient = Services.ContexteClient || (Services.ContexteClient = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des fichiers
* @module MyWay.Services.Fichier
* classe : FichierManager - public - Classe de gestion des fichiers
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Fichier;
        (function (Fichier) {
            /**
            * Classe gestion des fichiers
            * @classe FichierManager
            * fonction : saveAs – public - Permet de sauvegarder un fichier sur le filesystem
            * fonction : b64toBlob – private - Renvoie un Blob à partir d'une chaine base64
            * fonction : HandleMessage - public - Traite les messages provenants de l'agent FichierAgent
            */
            var FichierManager = /** @class */ (function (_super) {
                __extends(FichierManager, _super);
                function FichierManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Fichier) || this;
                    _this.api = null;
                    return _this;
                }
                FichierManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
                };
                /**
                * Permet de télécharger un fichier
                * @param data {any} données du fichier
                * @param type {TYPE_FICHIER} type du fichier à télécharger
                * @param nomFichier {string} nom attribué au fichier téléchargé
                * @param typeDonnees {TYPE_DONNEES_A_SAUVER} type de données à enregistrer (Optionnel: par défaut TYPE_DONNEES_A_SAUVER.BLOB)
                */
                FichierManager.prototype.saveAs = function (data, type, nomFichier, typeDonnees) {
                    var _this = this;
                    if (typeDonnees === void 0) { typeDonnees = Fichier.TYPE_DONNEES_A_SAUVER.BLOB; }
                    if (!(data !== null && data !== undefined)) {
                        // Trace de l'erreur
                        var erreurData = new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FICHIER_PARAMETRE_DATA_VIDE);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'saveAs');
                        this.library.Libelle.constituerLibelle(erreurData.codeLibelle).then(function (pText) {
                            FichierManager.logger.error(pText);
                        });
                        return Services.Promesses.createPromiseSelfError(erreurData);
                    }
                    var blob = data;
                    return Services.Promesses.getPromesseSelfResoved().then(function () {
                        if (typeDonnees && typeDonnees === Fichier.TYPE_DONNEES_A_SAUVER.BASE64) {
                            return _this.b64toBlob(data, null, null).then(function (result) {
                                blob = result;
                                return true;
                            });
                        }
                        return true;
                    }).then(function (doitExecuterSaveas) {
                        if (doitExecuterSaveas) {
                            return _this.api.save(blob, _this.getFormatFichier(type), nomFichier);
                        }
                    });
                };
                /**
                * Renvoie un Blob à partir d'une chaine base64.
                * @param b64Data {string} données encodés en base 64.
                * @param contentType {string=} type MIME des données.
                * @param {number=} sliceSize taille du découpage pour la conversion en tableau d'entiers non signés.
                * @returns {Blob} Blob.
                */
                FichierManager.prototype.b64toBlob = function (b64Data, contentType, sliceSize) {
                    if (contentType === void 0) { contentType = null; }
                    if (sliceSize === void 0) { sliceSize = null; }
                    // Vérification des paramètres d'entrée
                    if (!Services.Controle.StaticStringControle.isStringNotEmptyOrNull(b64Data)) {
                        // Trace de l'erreur
                        var erreurB64Data = new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FICHIER_PARAMETRE_B64_VIDE);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'saveAsb64toBlob');
                        this.library.Libelle.constituerLibelle(erreurB64Data.codeLibelle).then(function (pText) {
                            FichierManager.logger.error(pText);
                        });
                        // Sortie de la fonction
                        return Services.Promesses.createPromiseSelfError(erreurB64Data);
                    }
                    if (contentType === null) {
                        contentType = "application/pdf";
                    }
                    if (sliceSize === null) {
                        sliceSize = 512;
                    }
                    // on décode la chaine qui a été encodée en base64
                    var byteCharacters = atob(b64Data);
                    var bytesArray = [];
                    // on convertit en tableau d'entiers non signés, représentés sur 8 bits
                    // découpage en paquets pour de meilleures performances
                    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                        var slice = byteCharacters.slice(offset, offset + sliceSize);
                        var byteNumbers = new Array(slice.length);
                        for (var i = 0; i < slice.length; i++) {
                            byteNumbers[i] = slice.charCodeAt(i);
                        }
                        bytesArray.push(new Uint8Array(byteNumbers));
                    }
                    // Création et renvoi du blob
                    return Services.Promesses.createPromiseSelfResolved(new Blob(bytesArray, { type: contentType }));
                };
                /**
                * Retourne le format MIME du fichier en fonction du type passé en paramètre
                * @param type {TYPE_FICHIER} type du fichier
                */
                FichierManager.prototype.getFormatFichier = function (type) {
                    var format;
                    switch (type) {
                        case Fichier.TYPE_FICHIER.PDF:
                        case Fichier.TYPE_FICHIER.PDF_EMBED:
                        case Fichier.TYPE_FICHIER.PDFA_1A:
                        case Fichier.TYPE_FICHIER.PDFA_1B:
                        case Fichier.TYPE_FICHIER.PDFX_1_2001:
                        case Fichier.TYPE_FICHIER.PDFX_1A_2001:
                        case Fichier.TYPE_FICHIER.PDFX_1A_2003:
                        case Fichier.TYPE_FICHIER.PDFX_3_2002:
                        case Fichier.TYPE_FICHIER.PDFX_3_2003:
                            format = "application/pdf";
                            break;
                        //case TYPE_FICHIER.WORD:
                        //    format = "application/msword";
                        //    break;
                        case Fichier.TYPE_FICHIER.JSON:
                            format = "application/json";
                            break;
                        case Fichier.TYPE_FICHIER.TAR_GZ:
                            format = "application/x-compressed";
                            break;
                        default:
                            format = "application/pdf";
                            break;
                    }
                    return format;
                };
                FichierManager.CLASS_NAME = 'MyWay.Services.Fichier.FichierManager';
                FichierManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(FichierManager.CLASS_NAME);
                return FichierManager;
            }(Services.Components.ComponentManagerBase));
            Fichier.FichierManager = FichierManager;
            Services.Components.RegistryManager.getInstance().register(FichierManager);
        })(Fichier = Services.Fichier || (Services.Fichier = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var DonneesDelocalisees;
        (function (DonneesDelocalisees) {
            var DBDonneesDelocs = /** @class */ (function () {
                function DBDonneesDelocs() {
                }
                DBDonneesDelocs.actionOnDB = function (pCallback) {
                    var lOpenAction = window.indexedDB.open("myway_stc_donneesdelocalisees", DBDonneesDelocs.DB_VERSION);
                    lOpenAction.onupgradeneeded = function (ev) {
                        var lDB = ev.target.result;
                        switch (ev.oldVersion) {
                            case 0:
                                var lObjectStore = lDB.createObjectStore(DonneesDelocalisees.DonneesDelocaliseesTDTDB.TABLE_NOM, {
                                    autoIncrement: false,
                                    keyPath: "id"
                                });
                                lObjectStore = lDB.createObjectStore(DonneesDelocalisees.DonneesDelocaliseesTableDB.TABLE_NOM, {
                                    autoIncrement: false,
                                    keyPath: "id"
                                });
                                break;
                        }
                    };
                    lOpenAction.onsuccess = function (ev) {
                        var lDB = ev.target.result;
                        pCallback(lDB);
                    };
                };
                DBDonneesDelocs.DB_VERSION = 1;
                DBDonneesDelocs.DB_NAME = "myway_stc_donneesdelocalisees";
                return DBDonneesDelocs;
            }());
            DonneesDelocalisees.DBDonneesDelocs = DBDonneesDelocs;
        })(DonneesDelocalisees = Services.DonneesDelocalisees || (Services.DonneesDelocalisees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des données délocalisées
* @module MyWay.Services.DonneesDelocalisees
* Dépendances: Controle, Donnees, indexedDB
* classe : DonneesDelocaliseesManager - public - Classe permettant la gestion des données délocalisées
* classe : DonneesDelocaliseesTools - public - Classe encapsulant les outils de debug et de diagnostics des données délocalisées - Ne doit pas être utilisé en production
* interface : ObjectDataDescription – privé - Description d'un objet de données
*/
// TODO: Peut-on avoir des objets de données délocalisées avec des propriétés valorisées autrement qu'avec des chaines de caractères?
// Si oui -> il faut en tenir compte pour la recherche par critère
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var DonneesDelocalisees;
        (function (DonneesDelocalisees) {
            Services.ServiceManager.addActionOnInitialize('DonneesDelocalisees.openIDBAndGetDistantTDTAndCloseIDB', function (pLibrary) {
                return pLibrary.DonneesDelocalisees.openIDBAndGetDistantTDTAndCloseIDB(null).then(function () {
                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'Initialize()');
                    Services.ServiceManager.logger.debug('Pré-chargement TDT OK!');
                }, function (erreur) {
                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'Initialize()');
                    Services.Loggers.FLASH.INSTANCE.setValue('details', erreur);
                    Services.ServiceManager.logger.warn('Impossible de pré-charger la TDT: %1 / %2', erreur.codeLibelle, erreur.valeurs);
                });
            }, 'Habilitation.ObtenirHabilitations');
            // Web API
            var WEBAPI_GET_TDT;
            var WEBAPI_GET_OBJECT;
            /**
            * Classe permettant la gestion des données délocalisées
            * @classe DonneesDelocaliseesManager
            * fonction : getDonneesDelocalisees – public - Permet de récupérer des données délocalisées
            * fonction : getListeDonneesDelocalisees – public - Récupère une liste de données délocalisées correspondantes à la liste de noms d'objets de données et au numéro d'établissement passés en paramètres
            * fonction : getRubriqueLibelle - public - Permet de récupérer le libellé du code d'un objet de données rubrique
            * fonction : getDonneesParCriteres - public - Permet de récupérer les données d'un objet de données correspondant aux critères choisis
            * fonction : openIDBAndGetDistantTDTAndCloseIDB – public - Permet d'ouvrir IDB, de récupérer et stocker la dernière version d'un objet TDT via une REST API du serveur intermédiaire et de fermer IDB
            * fonction : HandleMessage - public - Traite les messages provenants de l'agent DonneesDelocaliseesAgent
            * fonction : _getCodeEtablissement - privé - Permet de récupérer le code établissement du contexte
            * fonction : getDonneesDelocaliseesIDB – privé - Permet de récupérer des données délocalisées depuis une base données délocalisées IndexedDB
            * fonction : getTDTIDB – privé - Permet de récupérer un objet TDT stocké dans le storeTDT d'une base données délocalisées IndexedDB
            * fonction : getDistantTDT – privé - Permet de récupérer un objet TDT via une REST API du serveur intermédiaire
            * fonction : getObjectDataIDB – privé - Permet de récupérer un objet de données stocké dans le storeData d'une base données délocalisées IndexedDB
            * fonction : getDistantObjectData – privé - Permet de récupérer un objet de données via une REST API du serveur intermédiaire
            * fonction : getRefData – privé - Permet de récupérer les informations d'un objet de données dont la date de dernière mise à jour dans un objet TDT
            */
            var DonneesDelocaliseesManager = /** @class */ (function (_super) {
                __extends(DonneesDelocaliseesManager, _super);
                /**
                * Constructeur de la classe DonneesDelocaliseesManager
                */
                function DonneesDelocaliseesManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.DonneesDelocalisees) || this;
                    _this.api = null;
                    _this.dbTDT = null;
                    _this.dbTable = null;
                    return _this;
                }
                DonneesDelocaliseesManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    this.api = pApi;
                    // Web API
                    WEBAPI_GET_TDT = Services.PrivatePortalServiceParameters.Instance().DonneesDelocaliseesUrl + "tableDesTables";
                    WEBAPI_GET_OBJECT = Services.PrivatePortalServiceParameters.Instance().DonneesDelocaliseesUrl + "objetDelocalise";
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                        return Services.BaseDeDonnees.Generique.Factory.testImplementationIndexeddb(true).then(function (pIndexedDBIsImplemented) {
                            //Initialise la base de données
                            _this.dbTDT = new DonneesDelocalisees.DonneesDelocaliseesTDTDB(pIndexedDBIsImplemented, _this.library);
                            _this.dbTable = new DonneesDelocalisees.DonneesDelocaliseesTableDB(pIndexedDBIsImplemented, _this.library);
                            var lDBBase = {
                                version: DonneesDelocalisees.DBDonneesDelocs.DB_VERSION,
                                implementation: pIndexedDBIsImplemented ? Services.BaseDeDonnees.BaseDeDonneesImplementation.INDEXEDDB : Services.BaseDeDonnees.BaseDeDonneesImplementation.MEMORY,
                                getTable: function (pNom) {
                                    switch (pNom) {
                                        case DonneesDelocalisees.DonneesDelocaliseesTDTDB.TABLE_NOM:
                                            return _this.dbTDT;
                                        case DonneesDelocalisees.DonneesDelocaliseesTableDB.TABLE_NOM:
                                            return _this.dbTable;
                                        default:
                                            return null;
                                    }
                                },
                                getTables: function () {
                                    return [DonneesDelocalisees.DonneesDelocaliseesTDTDB.TABLE_NOM, DonneesDelocalisees.DonneesDelocaliseesTableDB.TABLE_NOM];
                                }
                            };
                            _this.library.BaseDeDonnees.enregistrerDB("DonneesDelocalisees", lDBBase);
                        });
                    });
                };
                /**
                * Récupère les données délocalisées correspondantes au nom de l'objet de données et au numéro d'établissement passés en paramètres
                * Et si nécessaire met à jour la base de données DonneesDelocalisees dans indexedDB
                * Si le navigateur utilisé ne supporte pas indexedDB alors on appelle les WS REST à chaque fois que l'on veut récupérer un objet de données
                * Une fois les données récupérées, la fonction callback passée en paramètre est executée avec en paramètre objectData (l'objet de données demandé)
                * En cas d'erreur, la fonction callbackError passée en paramètre est executée avec en paramètre messageErreur (le message de description de l'erreur)
                * @param numEtablissement {string} Numéro d'établissement. Si null, c'est celui du contexte qui est utilisé.
                * @param objectDataName {string} Nom de l'objet de données
                * @param callback {function} Action à exécuter une fois les données récupérées (l'objet de données est passé en paramètre: objectData)
                * @param callbackError {function} Action à exécuter en cas d'erreur (le message d'erreur est passé en paramètres: messageErreur)
                */
                DonneesDelocaliseesManager.prototype.getDonneesDelocalisees = function (numEtablissement, objectDataName) {
                    var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                    // Vérification des paramètres d'entrée
                    var erreurParams = '';
                    if (!Services.Controle.StaticStringControle.isStringNotEmptyOrNull(numEtablissement))
                        erreurParams += 'Le paramètre \'numEtablissement\' doit être une chaine de caractères non vide ou null / ';
                    if (!Services.Controle.StaticStringControle.isStringNotEmpty(objectDataName))
                        erreurParams += 'Le paramètre \'objectDataName\' est obligatoire et doit être une chaine de caractères non vide / ';
                    if (erreurParams != '') {
                        erreurParams = erreurParams.substring(0, erreurParams.lastIndexOf("/") - 1);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDonneesDelocalisees');
                        DonneesDelocaliseesManager.logger.error(erreurParams);
                        // Appel de la fonction de rappel
                        lDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, [erreurParams]));
                        // Sortie de la fonction
                        return lDefer.promise;
                    }
                    // Récupération du code établissement
                    if (numEtablissement === null) {
                        numEtablissement = this._getCodeEtablissement(lDefer.reject);
                        if (numEtablissement === null)
                            return lDefer.promise;
                    }
                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDonneesDelocalisees');
                    DonneesDelocaliseesManager.logger.debug('Début récupération \'%1\' (%2) avec support DB', objectDataName, numEtablissement);
                    this.getDonneesDelocaliseesIDB(numEtablissement, objectDataName).then(function (objectData) {
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDonneesDelocalisees');
                        DonneesDelocaliseesManager.logger.debug('Fin récupération objet \'%1\' OK', objectData.id);
                        lDefer.resolve(objectData);
                    }, function (erreur) {
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDonneesDelocalisees');
                        DonneesDelocaliseesManager.logger.debug("Fin récupération objet KO: %1", erreur.libelle);
                        lDefer.reject(erreur);
                    });
                    return lDefer.promise;
                };
                /**
                * Récupère une liste de données délocalisées correspondantes à la liste de noms d'objets de données et au numéro d'établissement passés en paramètres
                * @param numEtablissement {string} Numéro d'établissement. Si null, c'est celui du contexte qui est utilisé.
                * @param objectDataNames {Array<string>} Liste des noms d'objets de données
                */
                DonneesDelocaliseesManager.prototype.getListeDonneesDelocalisees = function (numEtablissement, objectDataNames) {
                    var _this = this;
                    var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                    // Vérification des paramètres d'entrée
                    var erreurParams = "";
                    if (!Services.Controle.StaticStringControle.isStringNotEmptyOrNull(numEtablissement))
                        erreurParams += "Le paramètre 'numEtablissement' doit être une chaine de caractères non vide ou null / ";
                    if (!Services.Controle.StaticArrayControle.isArray(objectDataNames))
                        erreurParams += "Le paramètre 'objectDataNames' est obligatoire et doit être un tableau d'objets de type String / ";
                    if (erreurParams != "") {
                        erreurParams = erreurParams.substring(0, erreurParams.lastIndexOf("/") - 1);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'getListeDonneesDelocalisees');
                        DonneesDelocaliseesManager.logger.error(erreurParams);
                        lDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, [erreurParams]));
                        // Sortie de la fonction
                        return lDefer.promise;
                    }
                    // Récupération du code établissement
                    if (numEtablissement === null) {
                        numEtablissement = this._getCodeEtablissement(lDefer.reject);
                        if (numEtablissement === null)
                            return lDefer.promise;
                    }
                    var erreurTrouvee = false;
                    var nbObjectDataNames = objectDataNames.length;
                    var indexProcessed = 0;
                    var results = [];
                    var lNbTermines = 0;
                    objectDataNames.forEach(function (objectDataName, pIndex) {
                        _this.getDonneesDelocalisees(numEtablissement, objectDataName).then(function (objectData) {
                            results[pIndex] = objectData;
                            lNbTermines++;
                            if (lNbTermines === nbObjectDataNames) {
                                // tous les noms ont été traités => retourner la liste d'objets
                                lDefer.resolve(results);
                            }
                        }, function (erreur) {
                            if (!erreurTrouvee) {
                                erreurTrouvee = true;
                                lDefer.reject(erreur);
                            }
                        });
                    });
                    return lDefer.promise;
                };
                /**
                * Permet de récupérer le libellé du code d'un objet de données
                * @param numEtablissement {string} identifiant de la Table des tables (numéro d'établissement). Si null, c'est celui du contexte qui est utilisé.
                * @param objectDataName {string} nom de l'objet de données
                * @param code {string} code pour lequel on veut obtenir le libellé
                * @param callback {function} action à exécuter une fois le libellé récupéré (le libellé récupéré est transmis en paramètre: stringData)
                * @param callbackError {function} action à exécuter en cas d'erreur (le message d'erreur est transmis en paramètre: messageErreur)
                */
                DonneesDelocaliseesManager.prototype.getRubriqueLibelle = function (numEtablissement, objectDataName, code) {
                    var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                    // Vérification des paramètres d'entrée
                    var erreurParams = "";
                    if (!Services.Controle.StaticStringControle.isStringNotEmptyOrNull(numEtablissement))
                        erreurParams += "Le paramètre 'numEtablissement' doit être une chaine de caractères non vide ou null / ";
                    if (!Services.Controle.StaticStringControle.isStringNotEmpty(objectDataName))
                        erreurParams += "Le paramètre 'objectDataName' est obligatoire et doit être une chaine de caractères non vide / ";
                    if (!Services.Controle.StaticStringControle.isStringNotEmpty(code))
                        erreurParams += "Le paramètre 'code' est obligatoire et doit être une chaine de caractères non vide / ";
                    if (erreurParams != "") {
                        erreurParams = erreurParams.substring(0, erreurParams.lastIndexOf("/") - 1);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'getRubriqueLibelle');
                        DonneesDelocaliseesManager.logger.error(erreurParams);
                        lDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, [erreurParams]));
                        // Sortie de la fonction
                        return lDefer.promise;
                    }
                    // Récupération du code établissement
                    if (numEtablissement === null) {
                        numEtablissement = this._getCodeEtablissement(lDefer.reject);
                        if (numEtablissement === null)
                            return lDefer.promise;
                    }
                    this.getDonneesDelocalisees(numEtablissement, objectDataName).then(function (objectData) {
                        if (objectData.referentiel === "rubrique") {
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'getRubriqueLibelle');
                            DonneesDelocaliseesManager.logger.debug('L\'objet de données \'%1\' est bien une rubrique', objectDataName);
                            // Récupération du libellé
                            var length = objectData.donnees.length;
                            var libelle = null;
                            for (var i = 0; i < length; i++) {
                                if (objectData.donnees[i].Key === code) {
                                    libelle = objectData.donnees[i].Value;
                                    break;
                                }
                            }
                            if (libelle) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'getRubriqueLibelle');
                                DonneesDelocaliseesManager.logger.debug('Récupération du libellé du code \'%1\' : \'%2\'', code, libelle);
                                lDefer.resolve(libelle);
                            }
                            else {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'getRubriqueLibelle');
                                var messageErreur = 'Le code \'' + code + '\' n\'a pas été trouvé dans la rubrique \'' + objectDataName + '\'';
                                DonneesDelocaliseesManager.logger.error(messageErreur);
                                lDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, [messageErreur]));
                            }
                        }
                        else {
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'getRubriqueLibelle');
                            var messageErreur = 'L\'objet de données \'' + objectDataName + '\' n\'est pas une rubrique';
                            DonneesDelocaliseesManager.logger.error(messageErreur);
                            lDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, [messageErreur]));
                        }
                    }, function (erreur) {
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'getRubriqueLibelle');
                        DonneesDelocaliseesManager.logger.error('Erreur lors de la récupération de la rubrique \'%1\'', objectDataName);
                        lDefer.reject(erreur);
                    });
                    return lDefer.promise;
                };
                /**
                * Permet de récupérer les données d'un objet de données correspondant aux critères choisis
                * @param numEtablissement {string} identifiant de la Table des tables (numéro d'établissement). Si null, c'est celui du contexte qui est utilisé.
                * @param objectDataName {string} nom de l'objet de données
                * @param criteres {Array<ObjectDataCritere>} critères de recherche des données
                */
                DonneesDelocaliseesManager.prototype.getDonneesParCriteres = function (numEtablissement, objectDataName, criteres) {
                    var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                    // Vérification des paramètres d'entrée
                    var erreurParams = "";
                    if (!Services.Controle.StaticStringControle.isStringNotEmptyOrNull(numEtablissement))
                        erreurParams += "Le paramètre 'numEtablissement' doit être une chaine de caractères non vide ou null / ";
                    if (!Services.Controle.StaticStringControle.isStringNotEmpty(objectDataName))
                        erreurParams += "Le paramètre 'objectDataName' est obligatoire et doit être une chaine de caractères non vide / ";
                    if (!Services.Controle.StaticArrayControle.isArray(criteres))
                        erreurParams += "Le paramètre 'criteres' est obligatoire et doit être un tableau d'objets de type ObjectDataCritere / ";
                    if (erreurParams != "") {
                        erreurParams = erreurParams.substring(0, erreurParams.lastIndexOf("/") - 1);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDonneesParCriteres');
                        DonneesDelocaliseesManager.logger.error(erreurParams);
                        // Appel de la fonction de rappel
                        lDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, [erreurParams]));
                        // Sortie de la fonction
                        return lDefer.promise;
                    }
                    // Récupération du code établissement
                    if (numEtablissement === null) {
                        numEtablissement = this._getCodeEtablissement(lDefer.reject);
                        if (numEtablissement === null)
                            return lDefer.promise;
                    }
                    this.getDonneesDelocalisees(numEtablissement, objectDataName).then(function (objectData) {
                        // Filtre des données récupérées
                        try {
                            var aMessageErreurs = [];
                            var donnees = Services.Donnees.StaticArrayExtension.filtrer(objectData.donnees, function (data) {
                                // True: l'objet data répond aux critères attendus
                                var resultat = true;
                                // Pour chaque critère passé en paramètre
                                criteres.forEach(function (critere) {
                                    // Si l'objet de données a la propriété
                                    if (data.hasOwnProperty(critere.propriete)) {
                                        switch (critere.operateur) {
                                            case DonneesDelocalisees.CRITERES_OPERATEUR.CONTIENT:
                                                if (data[critere.propriete].indexOf(critere.valeur) === -1) {
                                                    resultat = false;
                                                }
                                                break;
                                            default:
                                                // Opérateur par défaut : égal
                                                if (data[critere.propriete] !== critere.valeur) {
                                                    resultat = false;
                                                }
                                                break;
                                        }
                                        if (!resultat) {
                                            return false; // On sort du forEach
                                        }
                                    }
                                    else {
                                        var messageErreur = "L'objet de données ne contient pas la propriété '" + critere.propriete + "'";
                                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDonneesParCriteres');
                                        DonneesDelocaliseesManager.logger.error(messageErreur);
                                        aMessageErreurs.push(critere.propriete);
                                        // lDefer.reject(new Erreur(Libelle.LibelleModel.COM.ERREUR_DONNEESDELOC_PROPRIETE_ABSENTE, [critere.propriete]));
                                        resultat = null; // Problème de critère: on stoppe l'execution de la fonction filtrer
                                        return false; // On sort du forEach
                                    }
                                });
                                return resultat;
                            });
                            if (Services.Controle.StaticArrayControle.isArray(donnees))
                                lDefer.resolve(donnees);
                            else
                                lDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_DONNEESDELOC_PROPRIETE_ABSENTE, aMessageErreurs));
                        }
                        catch (erreur) {
                            lDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_DONNEESDELOC_OBJET_MAL_FORME, [erreur]));
                        }
                    }, function (erreur) {
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDonneesParCriteres');
                        DonneesDelocaliseesManager.logger.error('Erreur lors de la récupération de l\'objet de données \'%1\' pour l\'établissement \'%2\'', objectDataName, numEtablissement);
                        lDefer.reject(erreur);
                    });
                    return lDefer.promise;
                };
                /**
                * Permet d'ouvrir IDB, de récupérer et stocker la dernière version d'un objet TDT via une REST API du serveur intermédiaire et de fermer IDB
                * @param numEtablissement {string} identifiant de la Table des tables (numéro d'établissement). Si null, c'est celui du contexte qui est utilisé.
                * @param callback {function} action à exécuter une fois l'objet TDT récupéré
                * @param callbackError {function} action à exécuter en cas d'erreur (le message d'erreur est transmis en paramètre: messageErreur)
                */
                DonneesDelocaliseesManager.prototype.openIDBAndGetDistantTDTAndCloseIDB = function (numEtablissement) {
                    var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                    // Vérification des paramètres d'entrée
                    var erreurParams = "";
                    if (!Services.Controle.StaticStringControle.isStringNotEmptyOrNull(numEtablissement))
                        erreurParams += "Le paramètre 'numEtablissement' doit être une chaine de caractères non vide ou null / ";
                    if (erreurParams != "") {
                        erreurParams = erreurParams.substring(0, erreurParams.lastIndexOf("/") - 1);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'openIDBAndGetDistantTDTAndCloseIDB');
                        DonneesDelocaliseesManager.logger.error(erreurParams);
                        // Appel de la fonction de rappel
                        lDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, [erreurParams]));
                        // Sortie de la fonction
                        return lDefer.promise;
                    }
                    // Récupération du code établissement
                    if (numEtablissement === null) {
                        numEtablissement = this._getCodeEtablissement(lDefer.reject);
                        if (numEtablissement === null)
                            return lDefer.promise;
                    }
                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'openIDBAndGetDistantTDTAndCloseIDB');
                    DonneesDelocaliseesManager.logger.debug('Le navigateur supporte IndexedDB');
                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'openIDBAndGetDistantTDTAndCloseIDB');
                    DonneesDelocaliseesManager.logger.debug('Début récupération TDT (%1) avec support IndexedDB', numEtablissement);
                    // Ouverture de la base de données
                    this.getTDTIDB(numEtablissement).then(lDefer.resolve, lDefer.reject);
                    return lDefer.promise;
                };
                /**
                * Récupère le code établissement depuis le contexte
                * @param callbackError {function} Action à exécuter en cas d'erreur (le message d'erreur est passé en paramètres: messageErreur)
                * @return string code établissement
                */
                DonneesDelocaliseesManager.prototype._getCodeEtablissement = function (callbackError) {
                    var codeEtablissement = null;
                    var authentificationInfo = this.library.Context.GetAuthentificationInfo();
                    if (authentificationInfo) {
                        codeEtablissement = authentificationInfo.codeEtablissement;
                    }
                    if (!Services.Controle.StaticStringControle.isStringNotEmpty(codeEtablissement)) {
                        // Trace de l'erreur
                        var erreurEtablissement = new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_CONTEXTE_RECUP_CODE_ETAB_IMPOSSIBLE);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', '_getCodeEtablissement');
                        this.library.Libelle.constituerLibelle(erreurEtablissement.codeLibelle).then(function (pText) {
                            DonneesDelocaliseesManager.logger.error(pText);
                        });
                        // Appel de la fonction de rappel
                        callbackError(erreurEtablissement);
                        // Sortie de la fonction
                        return null;
                    }
                    return codeEtablissement;
                };
                /**
                * Permet de récupérer des données délocalisées depuis une base données délocalisées IndexedDB
                * @param numEtablissement {string} identifiant de la Table des tables (numéro d'établissement)
                * @param objectDataName {string} nom de l'objet de données
                * @param callback {function} action à exécuter une fois les données récupérées (les données récupérées sont transmis en paramètre: objectData)
                * @param callbackError {function} action à exécuter en cas d'erreur (le message d'erreur est transmis en paramètre: messageErreur)
                */
                DonneesDelocaliseesManager.prototype.getDonneesDelocaliseesIDB = function (numEtablissement, objectDataName) {
                    var _this = this;
                    var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                    // Ouverture de la base de données
                    this.getTDTIDB(numEtablissement).then(function (pTDT) {
                        // Lecture de la date de dernière mise à jour et du référentiel des données délocalisées
                        var myObjectDataDescriptionIDB = _this.getRefData(pTDT, objectDataName);
                        if (myObjectDataDescriptionIDB) {
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDonneesDelocaliseesIDB');
                            DonneesDelocaliseesManager.logger.debug('Date de dernière mise à jour de l\'objet de données \'%1\' dans la TDT \'%2\': %3', objectDataName, numEtablissement, myObjectDataDescriptionIDB.datemaj);
                            // Récupération des données et mise à jour du storeData si nécessaire
                            _this.getObjectDataIDB(numEtablissement, myObjectDataDescriptionIDB).then(function (objectData) {
                                lDefer.resolve(objectData);
                            }, function (erreur) {
                                lDefer.reject(erreur);
                            });
                        }
                        else {
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDonneesDelocaliseesIDB');
                            DonneesDelocaliseesManager.logger.error('Impossible de récupérer la date de dernière mise à jour de l\'objet de données \'%1\' dans la TDT \'%2\'', objectDataName, numEtablissement);
                            lDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_DONNEESDELOC_RECUP_DERNMAJ_IMPOSSIBLE, [objectDataName, numEtablissement]));
                        }
                    }, lDefer.reject);
                    return lDefer.promise;
                };
                /**
                * Permet de récupérer un objet TDT stocké dans le storeTDT d'une base données délocalisées IndexedDB
                * @param idTDT {string} identifiant de l'objet TDT à récupérer dans le storeTDT
                * @param callback {function} action à exécuter une fois l'objet TDT récupéré (l'objet TDT récupéré est transmis en paramètre: objectTDT)
                * @param callbackError {function} action à exécuter en cas d'erreur (le message d'erreur est transmis en paramètre: messageErreur)
                */
                DonneesDelocaliseesManager.prototype.getTDTIDB = function (idTDT) {
                    var _this = this;
                    return this.dbTDT.get([idTDT]).then(function (pTDTs) {
                        var dateMajTDT; // Date de dernière mise à jour de la TDT
                        var dateDuJour = _this.library.Dates.getDateDuJour(Services.Dates.FORMATS_DATE.aaaammjj);
                        var objectTDT;
                        if (pTDTs[0]) {
                            var lTDT = pTDTs[0].element;
                            dateMajTDT = lTDT.datemaj;
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'getTDTIDB');
                            DonneesDelocaliseesManager.logger.debug('Date de dernière mise à jour de la TDT \'%1\': %2', idTDT, dateMajTDT);
                            if (dateMajTDT < dateDuJour) {
                                return _this.getDistantTDT(idTDT);
                            }
                            else {
                                return lTDT;
                            }
                        }
                        else {
                            return _this.getDistantTDT(idTDT);
                        }
                    });
                };
                /**
                * Permet de récupérer un objet TDT via une REST API du serveur intermédiaire
                * @param numEtablissement {string} identifiant de la Table des tables (numéro d'établissement)
                * @param callback {function} action à exécuter une fois l'objet TDT récupéré (l'objet TDT récupéré est transmis en paramètre: objectTDT)
                * @param callbackError {function} action à exécuter en cas d'erreur (le message d'erreur est transmis en paramètre: messageErreur)
                */
                DonneesDelocaliseesManager.prototype.getDistantTDT = function (numEtablissement) {
                    var _this = this;
                    var settings = {};
                    settings.method = Services.MethodEnum.GET;
                    settings.url = WEBAPI_GET_TDT;
                    settings.params = { codeEtablissement: numEtablissement };
                    settings.withHeaders = true;
                    var objectTDT = null;
                    return this.api.getDistantTDT(settings).then(function (pObjectTDT) {
                        objectTDT = pObjectTDT;
                        return _this.dbTDT.mettreAJour([{ cle: objectTDT.id, element: objectTDT }]);
                    }).then(function () {
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDistantTDT');
                        DonneesDelocaliseesManager.logger.debug('La TDT \'%1\' a bien été mise à jour dans le store %2', numEtablissement, DonneesDelocalisees.DonneesDelocaliseesTDTDB.TABLE_NOM);
                        return (objectTDT);
                    }).catch(function (erreur) {
                        if (objectTDT) {
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDistantTDT');
                            DonneesDelocaliseesManager.logger.error('La TDT \'%1\' n\'a pas été mise à jour dans le store %2', numEtablissement, DonneesDelocalisees.DonneesDelocaliseesTDTDB.TABLE_NOM);
                            return objectTDT;
                        }
                        else {
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDistantTDT');
                            DonneesDelocaliseesManager.logger.error('Impossible de récupérer la TDT \'%1\' auprès du serveur distant', numEtablissement);
                            throw erreur;
                        }
                    });
                };
                /**
                * Permet de récupérer un objet de données stocké dans le storeData d'une base données délocalisées IndexedDB
                * @param numEtablissement {string} identifiant de la Table des tables (numéro d'établissement)
                * @param objectDataDescription {ObjectDataDescription} description de l'objet de données
                * @param callback {function} action à exécuter une fois l'objet de données récupéré (l'objet de données récupéré est transmis en paramètre: objectData)
                * @param callbackError {function} action à exécuter en cas d'erreur (le message d'erreur est transmis en paramètre: messageErreur)
                */
                DonneesDelocaliseesManager.prototype.getObjectDataIDB = function (numEtablissement, objectDataDescription) {
                    var _this = this;
                    var idObjectData = objectDataDescription.referentiel + "-" + objectDataDescription.nom;
                    var lTableToReturn = null;
                    var lDateMajObjectData = null;
                    return this.dbTable.get([idObjectData]).then(function (pTables) {
                        if (pTables[0]) {
                            var lTable = pTables[0].element;
                            lTableToReturn = lTable;
                            var lDateMajObjectData = lTable.datemaj;
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'getObjectDataIDB');
                            DonneesDelocaliseesManager.logger.debug('Date de dernière mise à jour de l\'objet de données \'%1\' dans le store %2: %3', idObjectData, DonneesDelocalisees.DonneesDelocaliseesTableDB.TABLE_NOM, lDateMajObjectData);
                            if (lDateMajObjectData < objectDataDescription.datemaj) {
                                return _this.getDistantObjectData(numEtablissement, objectDataDescription.nom);
                            }
                            else {
                                return lTable;
                            }
                        }
                        else {
                            return _this.getDistantObjectData(numEtablissement, objectDataDescription.nom);
                        }
                    }).catch(function (erreur) {
                        if (objectDataDescription.utildonneesperimees === "O") {
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'getObjectDataIDB');
                            DonneesDelocaliseesManager.logger.error('Impossible de récupérer l\'objet de données \'%1\' mis à jour le \'%2\' du central. L\'objet du store local mis à jour le \'%3\' sera utilisé', idObjectData, objectDataDescription.datemaj, lDateMajObjectData);
                            return lTableToReturn;
                        }
                        else {
                            throw erreur;
                        }
                    });
                };
                /**
                * Permet de récupérer un objet de données via une REST API du serveur intermédiaire
                * @param numEtablissement {string} identifiant de la Table des tables (numéro d'établissement)
                * @param objectDataName {string} nom de l'objet de données
                * @param callback {function} action à exécuter une fois l'objet de données récupéré (l'objet de données récupéré est transmis en paramètre: objectData)
                * @param callbackError {function} action à exécuter en cas d'erreur (le message d'erreur est transmis en paramètre: messageErreur)
                */
                DonneesDelocaliseesManager.prototype.getDistantObjectData = function (numEtablissement, objectDataName) {
                    var _this = this;
                    var settings = {};
                    settings.method = Services.MethodEnum.GET;
                    settings.url = WEBAPI_GET_OBJECT;
                    settings.params = { codeEtablissement: numEtablissement, nom: objectDataName };
                    settings.withHeaders = true;
                    var lResult = null;
                    return this.api.getDistantObjectData(settings).then(function (objectData) {
                        lResult = objectData;
                        return _this.dbTable.mettreAJour([{ cle: objectData.id, element: objectData }]);
                    }).then(function () {
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDistantObjectData');
                        DonneesDelocaliseesManager.logger.debug('L\'objet de données \'%1\' a bien été mis à jour dans le store %2', objectDataName, DonneesDelocalisees.DonneesDelocaliseesTableDB.TABLE_NOM);
                        return lResult;
                    }, function (erreur) {
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'getDistantObjectData');
                        DonneesDelocaliseesManager.logger.error('L\'objet de données \'%1\' n\'a pas été mis à jour dans le store %2', objectDataName, DonneesDelocalisees.DonneesDelocaliseesTableDB.TABLE_NOM);
                        throw erreur;
                    });
                };
                /**
                * Permet de récupérer la date de dernière mise à jour d'un objet de données dans un objet TDT
                * @param objectTDT {any} objet TDT pour lequel on veut obtenir la date de dernière mise à jour
                * @param objectDataName {string} nom de l'objet de données
                */
                DonneesDelocaliseesManager.prototype.getRefData = function (objectTDT, objectDataName) {
                    var length = objectTDT.tables.length;
                    for (var i = 0; i < length; i++) {
                        if (objectTDT.tables[i].nom === objectDataName) {
                            return objectTDT.tables[i];
                        }
                    }
                    return null;
                };
                /**
                * Permet de supprimer et de réinitialiser la base de données IndexedDB des données délocalisées
                * @param callback {function} action à exécuter une fois les données supprimées
                * @param callbackError {function} action à exécuter en cas d'erreur (le message d'erreur est transmis en paramètre: messageErreur)
                */
                DonneesDelocaliseesManager.prototype.reInitDbDonneesDelocalisees = function () {
                    var _this = this;
                    return this.dbTDT.resetAll().then(function () {
                        return _this.dbTable.resetAll();
                    });
                };
                /**
                * Permet de récupérer l'objet TDT correspondant à l'identifiant passé en paramètre dans le storeTDT
                * @param idTDT {string} identifiant du TDT à récupérer dans le storeTDT
                * @param callback {function} action à exécuter une fois que l'objet TDT a été récupérer (l'objet TDT récupéré est transmis en paramètre: objectTDT)
                * @param callbackError {function} action à exécuter en cas d'erreur (le message d'erreur est transmis en paramètre: messageErreur)
                */
                DonneesDelocaliseesManager.prototype.getTDTById = function (idTDT) {
                    return this.dbTDT.get([idTDT]).then(function (pTDTs) {
                        if (!pTDTs[0]) {
                            return null;
                        }
                        return pTDTs[0].element;
                    });
                };
                /**
                * Permet de supprimer l'objet TDT correspondant à l'identifiant passé en paramètre dans le storeTDT
                * @param idTDT {string} identifiant du TDT à supprimer dans le storeTDT
                * @param callback {function} action à exécuter une fois que l'objet TDT a été supprimé
                * @param callbackError {function} action à exécuter en cas d'erreur (le message d'erreur est transmis en paramètre: messageErreur)
                */
                DonneesDelocaliseesManager.prototype.deleteTDTById = function (idTDT) {
                    return this.dbTDT.supprimer([idTDT]);
                };
                /**
                * Retourne l'enum CRITERES_OPERATEUR
                * @param callback {function} action à exécuter pour renvoyer l'enum
                */
                DonneesDelocaliseesManager.prototype.getEnumCriteresOperateur = function () {
                    var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                    lDefer.resolve(DonneesDelocalisees.CRITERES_OPERATEUR);
                    return lDefer.promise;
                };
                DonneesDelocaliseesManager.CLASS_NAME = 'MyWay.Services.DonneesDelocalisees.DonneesDelocaliseesManager';
                DonneesDelocaliseesManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(DonneesDelocaliseesManager.CLASS_NAME);
                return DonneesDelocaliseesManager;
            }(Services.Components.ComponentManagerBase));
            DonneesDelocalisees.DonneesDelocaliseesManager = DonneesDelocaliseesManager;
            Services.Components.RegistryManager.getInstance().register(DonneesDelocaliseesManager);
        })(DonneesDelocalisees = Services.DonneesDelocalisees || (Services.DonneesDelocalisees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var DonneesDelocalisees;
        (function (DonneesDelocalisees) {
            var DonneesDelocaliseesTableDB = /** @class */ (function () {
                function DonneesDelocaliseesTableDB(hasIndexedDb, library) {
                    this.hasIndexedDb = hasIndexedDb;
                    this.library = library;
                    this.memoryDB = [];
                }
                /**
                 * Méthode qui recherche dans le tableau de mémoire memoryDB une clé (pKeys) et retourne un tableau contenant des objets IInstanceAvecCle de la forme suivante:
                 * {
                 *      element: {datemaj: "datemaj", id: "id", nom: "nom", referentiel: "referentiel", donnees: [...]},
                 *      cle: "cle"
                 * }
                 * @param pKeys : chaîne de caractère issue de la concaténation numEtablissement-nom (i.e : "11315-D11D")
                 */
                DonneesDelocaliseesTableDB.prototype.get = function (pKeys) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lResultats_4 = []; //on crée un tableau vide d'objet IInstanceAvecCle
                        this.memoryDB.forEach(function (pTableDB) {
                            var lTableFound = null;
                            pKeys.every(function (pKey) {
                                //càd tant que lTableFound n'a pas été affectée et donc tant que (pKey === pTableDB.id) ne s'est pas vérifié. 
                                //L'usage d'every est ici malvenu, il réduit la lisibilité du code; un while aurait été meilleur, car il serait plus lisible et le boolean retourné par every
                                //ne serait pas futilement renvoyé à la mémoire du browser sans attache (car il n'est pas utilisé ni d'ailleurs enregistré dans une variable).
                                if (pKey === pTableDB.id) {
                                    lTableFound = pTableDB;
                                }
                                return lTableFound === null;
                            });
                            lResultats_4.push(_this.elementToInstanceAvecCle(lTableFound));
                        });
                        return this.library.Core.createPromiseSelfResolved(lResultats_4);
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTableDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTableDB.TABLE_NOM);
                            var lResultats = [];
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pKeys.length) {
                                    pDefer.resolve(lResultats);
                                    return;
                                }
                                var lKey = pKeys[pCurrentIndex];
                                var lRequestRead = lTable.get(lKey);
                                lRequestRead.onsuccess = function (pEventRead) {
                                    if (!lRequestRead.result) {
                                        lResultats.push(null);
                                        console.warn("Table " + lKey + " isn't found!");
                                    }
                                    else {
                                        lResultats.push(_this.elementToInstanceAvecCle(lRequestRead.result));
                                    }
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lRequestRead.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors de la récupération d'une Table de la base de données - Moment de la lecture"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                DonneesDelocaliseesTableDB.prototype.getAll = function () {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lResultats_5 = [];
                        this.memoryDB.forEach(function (pElement) {
                            lResultats_5.push(_this.elementToInstanceAvecCle(pElement));
                        });
                        return this.library.Core.createPromiseSelfResolved(lResultats_5);
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTableDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTableDB.TABLE_NOM);
                            var lRequestCursor = lTable.openCursor();
                            var lResultats = [];
                            lRequestCursor.onsuccess = function (pEvent) {
                                var lCursor = pEvent.target.result;
                                if (lCursor) {
                                    var lInstance = lCursor.value;
                                    lResultats.push(_this.elementToInstanceAvecCle(lInstance));
                                    lCursor.continue();
                                }
                                else {
                                    pDefer.resolve(lResultats);
                                }
                            };
                            lRequestCursor.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors de la récupération de l'ensemble des Table"));
                            };
                        });
                    });
                };
                DonneesDelocaliseesTableDB.prototype.chercher = function (pText) {
                    var _this = this;
                    if (!pText) {
                        return this.getAll();
                    }
                    if (!this.hasIndexedDb) {
                        var lResultats_6 = [];
                        this.memoryDB.forEach(function (pTable) {
                            if (_this.testTable(pTable, pText)) {
                                lResultats_6.push(_this.elementToInstanceAvecCle(pTable));
                            }
                        });
                        return this.library.Core.createPromiseSelfResolved(lResultats_6);
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTableDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTableDB.TABLE_NOM);
                            var lRequestCursor = lTable.openCursor();
                            var lResultats = [];
                            lRequestCursor.onsuccess = function (pEvent) {
                                var lCursor = pEvent.target.result;
                                if (lCursor) {
                                    var lInstance = lCursor.value;
                                    if (_this.testTable(lInstance, pText)) {
                                        lResultats.push(_this.elementToInstanceAvecCle(lInstance));
                                    }
                                    lCursor.continue();
                                }
                                else {
                                    pDefer.resolve(lResultats);
                                }
                            };
                            lRequestCursor.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors de la recherche de Table"));
                            };
                        });
                    });
                };
                DonneesDelocaliseesTableDB.prototype.count = function (pText) {
                    if (pText || !this.hasIndexedDb) {
                        return this.chercher(pText).then(function (pTables) {
                            return pTables.length;
                        });
                    }
                    // Ici : Indexeddb et pas de criètère => Utilise la méthode count de indexeddb, optimisée!
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTableDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTableDB.TABLE_NOM);
                            var lRequestCount = lTable.count();
                            lRequestCount.onsuccess = function () {
                                var lNbElements = lRequestCount.result;
                                pDefer.resolve(lNbElements);
                            };
                            lRequestCount.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors du comptage du nombre de Table"));
                            };
                        });
                    });
                };
                /**
                 * Méthode qui ajoute à un tableau (memoryDB) qui est conservé dans le HEAP-memory du browser tant que la page
                 * n'a pas été fermé ou reloader. On passe en général par la méthode get (ci-dessus) avant d'exécuter la méthode courante
                 * et ce afin d'éviter les redondances dans memoryDB.
                 * L'element à ajouter doit être entièrement nouveau, une méthode de mise-à-jour (mettreAJour) est prévue.
                 */
                DonneesDelocaliseesTableDB.prototype.ajouter = function (pTables) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        pTables.forEach(function (pTable) {
                            _this.memoryDB.push(pTable);
                        });
                        return this.library.Core.getPromesseSelfResoved();
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTableDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTableDB.TABLE_NOM);
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pTables.length) {
                                    pDefer.resolve();
                                    return;
                                }
                                var lInstance = pTables[pCurrentIndex];
                                var lAddRequest = lTable.add(lInstance);
                                lAddRequest.onsuccess = function () {
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lAddRequest.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors de la sauvegarde d'une Table"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                DonneesDelocaliseesTableDB.prototype.supprimer = function (pKeys) {
                    if (!this.hasIndexedDb) {
                        var lMemoryDB_2 = [];
                        this.memoryDB.forEach(function (pTableDB) {
                            var lIsFound = false;
                            pKeys.every(function (pKey) {
                                lIsFound = pKey === pTableDB.id;
                                return !lIsFound;
                            });
                            if (!lIsFound) {
                                lMemoryDB_2.push(pTableDB);
                            }
                        });
                        this.memoryDB = lMemoryDB_2;
                        return this.library.Core.getPromesseSelfResoved();
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTableDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTableDB.TABLE_NOM);
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pKeys.length) {
                                    pDefer.resolve();
                                    return;
                                }
                                var lKey = pKeys[pCurrentIndex];
                                var lRequestDelete = lTable.delete(lKey);
                                lRequestDelete.onsuccess = function () {
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lRequestDelete.onerror = function (ev) {
                                    //Continue
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                /**
                 * Permet de mettre à jours une table modifiée.
                 * @param pElements : objet simulant une base de données, n'est en effet qu'un tableau d'objet IInstanceAvecCle<IDonneeDelocaliseeData, string> dont la structure-type
                 * est { element: IDonneeDelocaliseeData; cle: "string" }; c'est alors effectivement un objet stockant en mémoire du navigateur toutes les tables rapartriées depuis le
                 * service REST; ce paramètre sera généralement récupéré par les méthodes get ou getAll (ci-dessus explicitées).
                 */
                DonneesDelocaliseesTableDB.prototype.mettreAJour = function (pElements) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lDataToAdd_2 = [];
                        pElements.forEach(function (pElement) {
                            var lIsFound = false;
                            _this.memoryDB.every(function (pTableDB, pIndex) {
                                if (pElement.cle === pTableDB.id) {
                                    _this.memoryDB[pIndex] = pElement.element;
                                    lIsFound = true;
                                }
                                return !lIsFound;
                            });
                            if (!lIsFound) {
                                lDataToAdd_2.push(pElement.element);
                            }
                        });
                        if (lDataToAdd_2.length > 0) {
                            return this.ajouter(lDataToAdd_2);
                        }
                        else {
                            return this.library.Core.getPromesseSelfResoved();
                        }
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTableDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTableDB.TABLE_NOM);
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pElements.length) {
                                    //Terminé
                                    pDefer.resolve();
                                    return;
                                }
                                var lElement = pElements[pCurrentIndex];
                                var lRequestPut = lTable.put(lElement.element);
                                lRequestPut.onsuccess = function () {
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lRequestPut.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors de la mise à jour d'une Table"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                DonneesDelocaliseesTableDB.prototype.resetAll = function () {
                    if (!this.hasIndexedDb) {
                        this.memoryDB.length = 0;
                        return this.library.Core.getPromesseSelfResoved();
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTableDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTableDB.TABLE_NOM);
                            var lRequestClear = lTable.clear();
                            lRequestClear.onsuccess = function (pEvent) {
                                pDefer.resolve();
                            };
                            lRequestClear.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors du reset de la base de données"));
                            };
                        });
                    });
                };
                DonneesDelocaliseesTableDB.prototype.testTable = function (pTable, pText) {
                    if (pTable.id.match(pText)) {
                        return true;
                    }
                    return false;
                };
                DonneesDelocaliseesTableDB.prototype.elementToInstanceAvecCle = function (pElement) {
                    if (pElement) {
                        return {
                            cle: pElement.id,
                            element: pElement
                        };
                    }
                    else {
                        return null;
                    }
                };
                DonneesDelocaliseesTableDB.TABLE_NOM = "TABLES";
                return DonneesDelocaliseesTableDB;
            }());
            DonneesDelocalisees.DonneesDelocaliseesTableDB = DonneesDelocaliseesTableDB;
        })(DonneesDelocalisees = Services.DonneesDelocalisees || (Services.DonneesDelocalisees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var DonneesDelocalisees;
        (function (DonneesDelocalisees) {
            var DonneesDelocaliseesTDTDB = /** @class */ (function () {
                function DonneesDelocaliseesTDTDB(hasIndexedDb, library) {
                    this.hasIndexedDb = hasIndexedDb;
                    this.library = library;
                    this.memoryDB = [];
                }
                /**
                 * Méthode qui recherche dans le tableau de mémoire memoryDB une clé (pKeys) et retourne un tableau contenant des objets IInstanceAvecCle de la forme suivante:
                 * {
                 *      element: {datemaj: "datemaj", id: "id", nom: "nom", referentiel: "referentiel", donnees: [...]},
                 *      cle: "cle"
                 * }
                 * @param pKeys : chaîne de caractère identifiant une Table dans la TDT.
                 */
                DonneesDelocaliseesTDTDB.prototype.get = function (pKeys) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lResultats_7 = [];
                        this.memoryDB.forEach(function (pTDTDB) {
                            var lTDTFound = null;
                            pKeys.every(function (pKey) {
                                //la fonction every se lit comme suit: la fonction-paramètre retournera true tant que ((lTDTFound === null) === true)
                                //càd tant que lTableFound n'a pas été affectée et donc tant que (pKey === pTDTDB.id) ne s'est pas vérifié. 
                                //L'usage d'every est ici malvenu, il réduit la lisibilité du code; un while aurait été meilleur, car il serait plus lisible et le boolean retourné par every
                                //ne serait pas futilement renvoyé à la mémoire du browser sans attache (car il n'est pas utilisé ni d'ailleurs enregistré dans une variable).
                                if (pKey === pTDTDB.id) {
                                    lTDTFound = pTDTDB;
                                }
                                return lTDTFound === null;
                            });
                            lResultats_7.push(_this.elementToInstanceAvecCle(lTDTFound));
                        });
                        return this.library.Core.createPromiseSelfResolved(lResultats_7);
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTDTDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTDTDB.TABLE_NOM);
                            var lResultats = [];
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pKeys.length) {
                                    pDefer.resolve(lResultats);
                                    return;
                                }
                                var lKey = pKeys[pCurrentIndex];
                                var lRequestRead = lTable.get(lKey);
                                lRequestRead.onsuccess = function (pEventRead) {
                                    if (!lRequestRead.result) {
                                        lResultats.push(null);
                                        console.warn("TDT " + lKey + " isn't found!");
                                    }
                                    else {
                                        lResultats.push(_this.elementToInstanceAvecCle(lRequestRead.result));
                                    }
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lRequestRead.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors de la récupération d'une table de la base de données - Moment de la lecture"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                DonneesDelocaliseesTDTDB.prototype.getAll = function () {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lResultats_8 = [];
                        this.memoryDB.forEach(function (pElement) {
                            lResultats_8.push(_this.elementToInstanceAvecCle(pElement));
                        });
                        return this.library.Core.createPromiseSelfResolved(lResultats_8);
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTDTDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTDTDB.TABLE_NOM);
                            var lRequestCursor = lTable.openCursor();
                            var lResultats = [];
                            lRequestCursor.onsuccess = function (pEvent) {
                                var lCursor = pEvent.target.result;
                                if (lCursor) {
                                    var lInstance = lCursor.value;
                                    lResultats.push(_this.elementToInstanceAvecCle(lInstance));
                                    lCursor.continue();
                                }
                                else {
                                    pDefer.resolve(lResultats);
                                }
                            };
                            lRequestCursor.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors de la récupération de l'ensemble des tables"));
                            };
                        });
                    });
                };
                DonneesDelocaliseesTDTDB.prototype.chercher = function (pText) {
                    var _this = this;
                    if (!pText) {
                        return this.getAll();
                    }
                    if (!this.hasIndexedDb) {
                        var lResultats_9 = [];
                        this.memoryDB.forEach(function (pTDT) {
                            if (_this.testTDT(pTDT, pText)) {
                                lResultats_9.push(_this.elementToInstanceAvecCle(pTDT));
                            }
                        });
                        return this.library.Core.createPromiseSelfResolved(lResultats_9);
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTDTDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTDTDB.TABLE_NOM);
                            var lRequestCursor = lTable.openCursor();
                            var lResultats = [];
                            lRequestCursor.onsuccess = function (pEvent) {
                                var lCursor = pEvent.target.result;
                                if (lCursor) {
                                    var lTDT = lCursor.value;
                                    if (_this.testTDT(lTDT, pText)) {
                                        lResultats.push(_this.elementToInstanceAvecCle(lTDT));
                                    }
                                    lCursor.continue();
                                }
                                else {
                                    pDefer.resolve(lResultats);
                                }
                            };
                            lRequestCursor.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors de la recherche de table"));
                            };
                        });
                    });
                };
                DonneesDelocaliseesTDTDB.prototype.count = function (pText) {
                    if (pText || !this.hasIndexedDb) {
                        return this.chercher(pText).then(function (pTDTs) {
                            return pTDTs.length;
                        });
                    }
                    // Ici : Indexeddb et pas de criètère => Utilise la méthode count de indexeddb, optimisée!
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTDTDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTDTDB.TABLE_NOM);
                            var lRequestCount = lTable.count();
                            lRequestCount.onsuccess = function () {
                                var lNbElements = lRequestCount.result;
                                pDefer.resolve(lNbElements);
                            };
                            lRequestCount.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors du comptage du nombre de table"));
                            };
                        });
                    });
                };
                DonneesDelocaliseesTDTDB.prototype.ajouter = function (pTDTs) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        pTDTs.forEach(function (pTDT) {
                            _this.memoryDB.push(pTDT);
                        });
                        return this.library.Core.getPromesseSelfResoved();
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTDTDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTDTDB.TABLE_NOM);
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pTDTs.length) {
                                    pDefer.resolve();
                                    return;
                                }
                                var lTDT = pTDTs[pCurrentIndex];
                                var lAddRequest = lTable.add(lTDT);
                                lAddRequest.onsuccess = function () {
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lAddRequest.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors de la sauvegarde d'une table"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                DonneesDelocaliseesTDTDB.prototype.supprimer = function (pKeys) {
                    if (!this.hasIndexedDb) {
                        var lMemoryDB_3 = [];
                        this.memoryDB.forEach(function (pTDTDB) {
                            var lIsFound = false;
                            pKeys.every(function (pKey) {
                                lIsFound = pKey === pTDTDB.id;
                                return !lIsFound;
                            });
                            if (!lIsFound) {
                                lMemoryDB_3.push(pTDTDB);
                            }
                        });
                        this.memoryDB = lMemoryDB_3;
                        return this.library.Core.getPromesseSelfResoved();
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTDTDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTDTDB.TABLE_NOM);
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pKeys.length) {
                                    pDefer.resolve();
                                    return;
                                }
                                var lKey = pKeys[pCurrentIndex];
                                var lRequestDelete = lTable.delete(lKey);
                                lRequestDelete.onsuccess = function () {
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lRequestDelete.onerror = function (ev) {
                                    //Continue
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                DonneesDelocaliseesTDTDB.prototype.mettreAJour = function (pElements) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lDataToAdd_3 = [];
                        pElements.forEach(function (pElement) {
                            var lIsFound = false;
                            _this.memoryDB.every(function (pTableDB, pIndex) {
                                if (pElement.cle === pTableDB.id) {
                                    _this.memoryDB[pIndex] = pElement.element;
                                    lIsFound = true;
                                }
                                return !lIsFound;
                            });
                            if (!lIsFound) {
                                lDataToAdd_3.push(pElement.element);
                            }
                        });
                        if (lDataToAdd_3.length > 0) {
                            return this.ajouter(lDataToAdd_3);
                        }
                        else {
                            return this.library.Core.getPromesseSelfResoved();
                        }
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTDTDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTDTDB.TABLE_NOM);
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pElements.length) {
                                    //Terminé
                                    pDefer.resolve();
                                    return;
                                }
                                var lElement = pElements[pCurrentIndex];
                                var lRequestPut = lTable.put(lElement.element);
                                lRequestPut.onsuccess = function () {
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lRequestPut.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors de la mise à jour d'une table"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                DonneesDelocaliseesTDTDB.prototype.resetAll = function () {
                    if (!this.hasIndexedDb) {
                        this.memoryDB.length = 0;
                        return this.library.Core.getPromesseSelfResoved();
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        DonneesDelocalisees.DBDonneesDelocs.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([DonneesDelocaliseesTDTDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(DonneesDelocaliseesTDTDB.TABLE_NOM);
                            var lRequestClear = lTable.clear();
                            lRequestClear.onsuccess = function (pEvent) {
                                pDefer.resolve();
                            };
                            lRequestClear.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors du reset de la base de données"));
                            };
                        });
                    });
                };
                DonneesDelocaliseesTDTDB.prototype.testTDT = function (pTDT, pText) {
                    if (pTDT.id.match(pText)) {
                        return true;
                    }
                    return false;
                };
                DonneesDelocaliseesTDTDB.prototype.elementToInstanceAvecCle = function (pElement) {
                    if (pElement) {
                        return {
                            cle: pElement.id,
                            element: pElement
                        };
                    }
                    else {
                        return null;
                    }
                };
                DonneesDelocaliseesTDTDB.TABLE_NOM = "TDT";
                return DonneesDelocaliseesTDTDB;
            }());
            DonneesDelocalisees.DonneesDelocaliseesTDTDB = DonneesDelocaliseesTDTDB;
        })(DonneesDelocalisees = Services.DonneesDelocalisees || (Services.DonneesDelocalisees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Libelle;
        (function (Libelle) {
            var LibelleManagerMessage = /** @class */ (function (_super) {
                __extends(LibelleManagerMessage, _super);
                function LibelleManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Libelle) || this;
                }
                LibelleManagerMessage.prototype.constituerLibelle = function (codeLibelle, valeurs) {
                    return this.managerInstance.constituerLibelle(codeLibelle, valeurs);
                };
                LibelleManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Libelle.LibelleMessageSubject.afficherMessage: {
                            var lContent = pMessage.message;
                            var codeLibelle = lContent.codeLibelle;
                            var typeAffichage = lContent.typeAffichage;
                            var valeurs = lContent.valeurs;
                            var delai = lContent.delai;
                            return this.managerInstance.afficherMessageAsync(codeLibelle, typeAffichage, valeurs, delai).then(function (retour) {
                                LibelleManagerMessage.logger.debug('afficherMessage Success : %1', JSON.stringify(retour));
                                return retour;
                            });
                        }
                        case Libelle.LibelleMessageSubject.constituerLibelle: {
                            var lContent = pMessage.message;
                            var codeLibelle = lContent.codeLibelle;
                            var valeurs = lContent.valeurs;
                            return this.managerInstance.constituerLibelle(codeLibelle, valeurs).then(function (libelle) {
                                LibelleManagerMessage.logger.debug('constituerLibelle Success : %1', libelle);
                                return libelle;
                            }).catch(function (pError) {
                                LibelleManagerMessage.logger.error('constituerLibelle Failed : %1', JSON.stringify(pError));
                                throw pError;
                            });
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                LibelleManagerMessage.CLASS_NAME = 'MyWay.Services.Libelle.LibelleManagerMessage';
                LibelleManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(LibelleManagerMessage.CLASS_NAME);
                return LibelleManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Libelle.LibelleManagerMessage = LibelleManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(LibelleManagerMessage);
        })(Libelle = Services.Libelle || (Services.Libelle = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            var TraceManagerMessage = /** @class */ (function (_super) {
                __extends(TraceManagerMessage, _super);
                function TraceManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Trace) || this;
                }
                TraceManagerMessage.prototype.send = function (trace, display) {
                    return this.managerInstance.send(trace, display);
                };
                TraceManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Trace.Messages.TraceMessageSubject.Tracer: {
                            var lContent = pMessage.message;
                            this.managerInstance.traceModelToLogger(lContent.trace);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case Trace.Messages.TraceMessageSubject.Logger: {
                            var lContent = pMessage.message;
                            this.managerInstance.traceToLogger(lContent.log);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case Trace.Messages.TraceMessageSubject.GetIntervallePurge: {
                            var lContent = pMessage.message;
                            return this.library.Core.createPromiseSelfResolved(Trace.INTERVALLE_PURGE);
                        }
                        case Trace.Messages.TraceMessageSubject.GetQuotaPurge: {
                            var lContent = pMessage.message;
                            return this.library.Core.createPromiseSelfResolved(Trace.QUOTA_PURGE);
                        }
                        case Trace.Messages.TraceMessageSubject.PurgerTraces: {
                            var lContent = pMessage.message;
                            this.managerInstance.purgerTraces();
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case Trace.Messages.TraceMessageSubject.SendDiagnostic: {
                            var lContent = pMessage.message;
                            var diagnostic = new Services.ApplicationDiagnostic();
                            diagnostic.clone(lContent.diagnostic);
                            this.managerInstance.sendDiagnostic(diagnostic);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case Trace.Messages.TraceMessageSubject.SetModeDebug: {
                            var lContent = pMessage.message;
                            this.managerInstance.setModeDebug(lContent.active);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case Trace.Messages.TraceMessageSubject.ReInitDbTraces: {
                            var lContent = pMessage.message;
                            return this.managerInstance.resetDB();
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                TraceManagerMessage.CLASS_NAME = 'MyWay.Services.Trace.TraceManagerMessage';
                TraceManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(TraceManagerMessage.CLASS_NAME);
                return TraceManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Trace.TraceManagerMessage = TraceManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(TraceManagerMessage);
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Trace;
        (function (Trace) {
            var TraceManagerExtended = /** @class */ (function (_super) {
                __extends(TraceManagerExtended, _super);
                function TraceManagerExtended() {
                    return _super.call(this, Services.Components.ComponentType.Trace) || this;
                }
                TraceManagerExtended.prototype.debug = function (message, action, detail) {
                    Services.Loggers.FLASH.INSTANCE.setValue('action', action);
                    Services.Loggers.FLASH.INSTANCE.setValue('details', detail);
                    TraceManagerExtended.logger.debug(message);
                };
                TraceManagerExtended.prototype.info = function (message, action, detail) {
                    Services.Loggers.FLASH.INSTANCE.setValue('action', action);
                    Services.Loggers.FLASH.INSTANCE.setValue('details', detail);
                    TraceManagerExtended.logger.info(message);
                };
                TraceManagerExtended.prototype.warning = function (message, action, detail) {
                    Services.Loggers.FLASH.INSTANCE.setValue('action', action);
                    Services.Loggers.FLASH.INSTANCE.setValue('details', detail);
                    TraceManagerExtended.logger.warn(message);
                };
                TraceManagerExtended.prototype.error = function (message, action, detail) {
                    Services.Loggers.FLASH.INSTANCE.setValue('action', action);
                    Services.Loggers.FLASH.INSTANCE.setValue('details', detail);
                    TraceManagerExtended.logger.error(message);
                };
                TraceManagerExtended.prototype.send = function (trace) {
                    this.manager.send(trace);
                };
                TraceManagerExtended.CLASS_NAME = 'MyWay.Services.Trace.TraceManagerExtended';
                TraceManagerExtended.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(TraceManagerExtended.CLASS_NAME);
                return TraceManagerExtended;
            }(Services.Components.ComponentManagerExtendedBase));
            Trace.TraceManagerExtended = TraceManagerExtended;
            Services.Components.RegistryManagerExtended.getInstance().register(TraceManagerExtended);
        })(Trace = Services.Trace || (Services.Trace = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Aide;
        (function (Aide) {
            /**
            * Classe permettant la gestion de l'aide
            */
            var AideManager = /** @class */ (function (_super) {
                __extends(AideManager, _super);
                function AideManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Aide) || this;
                    //Mise en commentaire par E. Jacquot le 09/07/2015 avant suppression définitive
                    _this.ClePreferenceModaleAide = "AideModalePush";
                    _this._listeCodesEtapesVues = [];
                    return _this;
                }
                AideManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
                };
                /**
                 * Permet de récupérer une aide push si elle existe, puis déclencher son ouverture si elle n'a pas encore été vue
                 * @param {IAideParametres}                           params          Paramètres de recherche de l'aide push
                 * @param {AideResult)            =>     void}        callback        Callback de succès, avec le résultat de l'aide
                 * @param {MyWay.Services.Erreur) =>     void}        errorCallback   Callback d'erreur
                 */
                AideManager.prototype.displayAideFlash = function (params) {
                    var _this = this;
                    if (params) {
                        if (!params.dateTraitement) {
                            var d = new Date(Date.now());
                            var dd = d.getDate().toString();
                            if (!dd[1])
                                dd = "0" + dd[0];
                            var mm = (d.getMonth() + 1).toString();
                            if (!mm[1])
                                mm = "0" + mm[0];
                            var yy = d.getFullYear().toString();
                            params.dateTraitement = yy + '-' + mm + '-' + dd;
                        }
                        if (!params.codeEtablissement) {
                            var authentInfo = this.library.Context.GetAuthentificationInfo();
                            if (authentInfo)
                                params.codeEtablissement = authentInfo.codeEtablissement;
                        }
                        this.api.GetAideFlash(params).then(function (aide) {
                            if (aide) {
                                // vérifier si cette aide n'a pas déjà été visionnée
                                _this.lireEtapesDansPreference(function (result) {
                                    if (result) {
                                        var aidePref = { codeEtape: params.codeEtape, idFlashCode: aide.id };
                                        if (_this._listeCodesEtapesVues && _this.aidePrefExist(aidePref, _this._listeCodesEtapesVues) != null) {
                                            aide = null;
                                        }
                                    }
                                    if (aide) {
                                        _this.library.Display.AfficherModalAide(aide.titre, aide.contenu, params.codeEtape, aide.id);
                                    }
                                });
                            }
                            AideManager.logger.debug('GetAideFlash success');
                        }, function (erreur) {
                            AideManager.logger.error('GetAideFlash Failed - %1', JSON.stringify(erreur));
                        });
                        AideManager.logger.debug('DisplayAideFlash success');
                    }
                    else {
                        AideManager.logger.error('DisplayAideFlash error : le paramètre params est null ou undefined');
                    }
                };
                //Mise en commentaire par E. Jacquot le 09/07/2015 avant suppression définitive
                //private SupprimerPreferenceEtapeVue(codeEtapeAideDemandee: string) {
                //    this._listeCodesEtapesVues.splice(this._listeCodesEtapesVues.indexOf(codeEtapeAideDemandee), 1);
                //    this.Library.Preferences.EcrirePreference(this.ClePreferenceModaleAide, JSON.stringify(this._listeCodesEtapesVues));
                //}
                AideManager.prototype.lireEtapesDansPreference = function (callback) {
                    var _this = this;
                    this.library.Preferences.LirePreference(this.ClePreferenceModaleAide).then(function (result) {
                        if (result) {
                            try {
                                AideManager.logger.debug('LirePreference success - %1', result);
                                _this._listeCodesEtapesVues = JSON.parse(result);
                            }
                            catch (e) {
                                AideManager.logger.error('LirePreference : JSON parse of the result Failed - %1', e);
                                callback(false);
                                return;
                            }
                        }
                        callback(true);
                    }, function () {
                        AideManager.logger.error('LirePreference Failed - ClePreferenceModaleAide : %1', _this.ClePreferenceModaleAide);
                        if (callback)
                            callback(false);
                    });
                };
                /**
                 * Permet de mémoriser que l'utilisateur ne souhaite plus visualiser systématiquement
                 * l'aide flash de l'étape dont le code étape et l'id flash est précisée en paramètre
                 * @param {IAidePref} préférence d'aide
                 */
                AideManager.prototype.ajouterEtapeDansPreference = function (aidePref) {
                    var _this = this;
                    this.lireEtapesDansPreference(function (result) {
                        if (result) {
                            if (!_this._listeCodesEtapesVues)
                                _this._listeCodesEtapesVues = [];
                            else if (_this.aidePrefExist(aidePref, _this._listeCodesEtapesVues) != null)
                                return;
                            // écrire dans les préférences que cette aide a été visionnée
                            if (_this.aidePrefExistForOnlyCodeEtape(aidePref, _this._listeCodesEtapesVues) != null) {
                                Services.CoreCommon.ArrayUtils.remove(_this._listeCodesEtapesVues, function (ap) {
                                    return ap.codeEtape === aidePref.codeEtape;
                                });
                            }
                            _this._listeCodesEtapesVues.push(aidePref);
                            var preferences = [{ cle: _this.ClePreferenceModaleAide, valeur: JSON.stringify(_this._listeCodesEtapesVues) }];
                            _this.library.Preferences.EcrirePreference(preferences);
                            AideManager.logger.debug('AjouterEtapeDansPreference success');
                        }
                    });
                };
                AideManager.prototype.aidePrefExistForOnlyCodeEtape = function (aidepref, aidePrefList) {
                    var keyValueList = [];
                    keyValueList.push({ Key: Aide.CODE_ETAPE_KEY, Value: aidepref.codeEtape });
                    return MyWay.Services.CoreCommon.ObjectUtils.objectExistsByKeyValueList(keyValueList, aidePrefList);
                };
                AideManager.prototype.aidePrefExist = function (aidepref, aidePrefList) {
                    var keyValueList = [];
                    keyValueList.push({ Key: Aide.CODE_ETAPE_KEY, Value: aidepref.codeEtape });
                    keyValueList.push({ Key: Aide.ID_FLASH_CODE_KEY, Value: aidepref.idFlashCode });
                    return MyWay.Services.CoreCommon.ObjectUtils.objectExistsByKeyValueList(keyValueList, aidePrefList);
                };
                AideManager.prototype.GetContenuInfobulle = function (params) {
                    var _this = this;
                    return this.api.GetContenuInfobulle(params).then(function (aide) {
                        if (!aide) {
                            return null;
                        }
                        //Déclaration objet retourné
                        var infobulle;
                        //Valorisation de l'objet retourné
                        infobulle = new Aide.DetailInfobulleAfficheeResult(aide['nomChamp'], aide['nouveaute'], _this.ValoriserMessage(aide['token'], aide['contenu']), aide['image']);
                        AideManager.logger.debug('GetContenuInfobulle success- %1', JSON.stringify(infobulle));
                        return infobulle;
                    }, function (erreur) {
                        AideManager.logger.error('GetContenuInfobulle Failed - %1', JSON.stringify(erreur));
                        throw erreur;
                    });
                };
                AideManager.prototype.GetInfobullesAffichables = function (params) {
                    var _this = this;
                    return this.api.GetInfobullesAffichables(params).then(function (aide) {
                        if (!aide) {
                            return null;
                        }
                        //Déclaration objet retourné
                        var tableauInfobulle = new Array();
                        var tableauTemporaire = new Array();
                        tableauTemporaire = aide;
                        //Valorisation de l'objet retourné
                        for (var i = 0; i < tableauTemporaire.length; i++) {
                            tableauInfobulle.push(new Aide.InfobulleAfficheeResult(tableauTemporaire[i]['nomChamp'], _this.DeterminerNouveaute(tableauTemporaire[i]['dateFinNouveaute'], tableauTemporaire[i]['nouveaute'])));
                        }
                        AideManager.logger.debug('GetInfobullesAffichables success- %1', JSON.stringify(tableauInfobulle));
                        return tableauInfobulle;
                    }, function (erreur) {
                        AideManager.logger.error('GetInfobullesAffichables Failed - %1', JSON.stringify(erreur));
                        throw erreur;
                    });
                };
                AideManager.prototype.getParametresContexte = function (idChampLie, horsProcessus, codeProcessus, codeEtape) {
                    var parametresResultat;
                    parametresResultat = new Aide.DetailInfobulleAfficheeParametres();
                    var dateDuJour = new Date();
                    var jour = ("0" + (dateDuJour.getUTCDate())).slice(-2);
                    var mois = ("0" + (dateDuJour.getMonth() + 1)).slice(-2);
                    var annee = dateDuJour.getUTCFullYear().toString();
                    var separateurDate = "-";
                    //Date de traitement
                    //EJ le 06/11/2015 => le format des dates pour l'appel au service REST devient SSAA-MM-JJ
                    //parametresResultat.dateTraitement = jour + separateurDate + mois + separateurDate + annee;
                    parametresResultat.dateTraitement = annee + separateurDate + mois + separateurDate + jour;
                    //Champ Lié à l'infobulle
                    parametresResultat.idChampLie = (idChampLie !== null && idChampLie !== undefined) ? idChampLie : "";
                    //Code Etablissement
                    var authentificationInfo;
                    authentificationInfo = this.library.Context.GetAuthentificationInfo();
                    if (authentificationInfo !== undefined && authentificationInfo !== null) {
                        parametresResultat.codeEtablissement = authentificationInfo.codeEtablissement;
                    }
                    else {
                        parametresResultat.codeEtablissement = null;
                        AideManager.logger.debug("code Etablissement non récupéré à partir de GetAuthentificationInfo() => valorisé à null");
                    }
                    //Code Processus, Etape, et Point d'Entrée
                    //Par défaut Etape et Point d'Entrée sont à null, sauf si le Code Processus est valorisé
                    parametresResultat.codeEtape = null;
                    parametresResultat.pointEntree = null;
                    //Le booléen impose de bypasser les recherches sur le processus => tout ce qui en découle (étape, point d'entrée) valorisé à null.
                    if (horsProcessus === true) {
                        parametresResultat.codeProcessus = null;
                        //On rend la main à l'appelant.
                        return parametresResultat;
                    }
                    //A ce stade, le booléen ignorerProcessus n'est pas valorisé (ou il vaut false)
                    //On regarde si le processus à utiliser est renseigné
                    if (codeProcessus !== null && codeProcessus !== undefined) {
                        parametresResultat.codeProcessus = codeProcessus;
                        //Idem pour le code étape
                        if (codeEtape !== null && codeEtape !== undefined) {
                            parametresResultat.codeEtape = codeEtape;
                        }
                        //On rend la main à l'appelant.
                        return parametresResultat;
                    }
                    //A ce stade on recherche les infos du processus dans le contexte.
                    parametresResultat.codeProcessus = this.library.Context.GetCurrentProcessCode();
                    if (parametresResultat.codeProcessus === undefined) {
                        //Pas de processus trouvé dans le contexte => toutes les infos qui en découlent (étape, point d'entrée) valorisées à null.
                        parametresResultat.codeProcessus = null;
                    }
                    else {
                        if (parametresResultat.codeProcessus !== null) {
                            //Processus trouvé dans le contexte => on alimente les autres infos (étape et point d'entrée).
                            var etape = this.library.Context.GetCurrentStep(this.library.Context.GetCurrentProcess());
                            if (etape !== undefined && etape !== null) {
                                parametresResultat.codeEtape = etape.codeEtape;
                                //EJ le 21/10/2015: suite à communication tél. avec V. Zajda => le point d'entrée n'est plus transmis au service REST.
                                //=> transmis à null par défaut (cf. plus haut).
                                //parametresResultat.pointEntree = etape.codeApplication;
                            }
                        }
                    }
                    return parametresResultat;
                };
                AideManager.prototype.ValoriserMessage = function (interpretationTokens, messageOriginel) {
                    //Code à implémenter lorsque l'on saura comment gérer les token
                    var messageResultat = messageOriginel;
                    if (interpretationTokens) {
                        messageResultat = this.RemplacerTokens(messageOriginel);
                    }
                    return messageResultat;
                };
                AideManager.prototype.RemplacerTokens = function (messageOriginel) {
                    var messageResultat = messageOriginel;
                    //Pour travailler il faut:
                    //- un message à traiter => cf. tests sur messageOriginel
                    //- un indicateur de token valorisé (ex: ##) =>  cf. tests sur indicateurDeToken
                    if (messageOriginel !== null && messageOriginel !== undefined) {
                        //Stockage des occurrences de tokens traités dans messageOriginel
                        //La présence dans ce tableau signifie que le token a été trouvé:
                        //- ET remplacé par sa valeur de Contexte
                        //  => toutes les occurrences du token dans le texte ont été remplacées à la volée
                        //- OU non remplacé par sa valeur de Contexte
                        //  => toutes les occurrences du token restent présentes dans le texte.
                        var tokensTraites = new Array();
                        //Variables pour l'analyse de messageOriginel
                        var nextPosition = 0; //position de départ d'un token
                        var tokenLu = ""; //token trouvé
                        //Boucle d'analyse de messageOriginel
                        while (nextPosition >= 0) {
                            //La chaîne possède une longueur suffisante:
                            //- on accède à une position existante.
                            //- indexOf retourne -1 si aucun token n'est présent à partir de la position de lecture
                            if (messageResultat.length >= nextPosition + tokenLu.length) {
                                nextPosition = messageResultat.indexOf(AideManager.INDICATEUR_DE_TOKEN, nextPosition + tokenLu.length);
                            }
                            //Le délimiteur du début de token est trouvé
                            if (nextPosition >= 0) {
                                //Le délimiteur de fin de token est trouvé
                                if (messageResultat.indexOf(AideManager.INDICATEUR_DE_TOKEN, nextPosition + AideManager.INDICATEUR_DE_TOKEN.length) >= 0) {
                                    tokenLu = messageResultat.substr(nextPosition, messageResultat.indexOf(AideManager.INDICATEUR_DE_TOKEN, nextPosition + AideManager.INDICATEUR_DE_TOKEN.length) + AideManager.INDICATEUR_DE_TOKEN.length - nextPosition);
                                    var cleContexte = "";
                                    if (tokenLu !== null && tokenLu !== undefined) {
                                        cleContexte = tokenLu.substr(AideManager.INDICATEUR_DE_TOKEN.length, tokenLu.length - 2 * AideManager.INDICATEUR_DE_TOKEN.length);
                                    }
                                    //tokenLu est-il déjà dans le tableau des tokens traités ?
                                    //Non => on l'ajoute; Oui => on l'ignore car cela signifie que le token en cours a déjà été traité
                                    if (tokensTraites.indexOf(cleContexte) < 0) {
                                        tokensTraites.push(cleContexte);
                                    }
                                }
                                else {
                                    //le délimiteur de fin de token n'est pas trouvé => on quitte la boucle
                                    nextPosition = -1;
                                }
                            }
                        }
                        //On essaie de remplacer le token partout.
                        if (tokensTraites.length > 0) {
                            var lecturesContexte = this.library.Context.GetListFromContext(tokensTraites);
                            for (var i = 0; i < lecturesContexte.length; i++) {
                                messageResultat = messageResultat.replace(new RegExp(AideManager.INDICATEUR_DE_TOKEN + lecturesContexte[i].Key + AideManager.INDICATEUR_DE_TOKEN, "g"), lecturesContexte[i].Value);
                            }
                            ;
                        }
                    }
                    AideManager.logger.debug('RemplacerTokens Success: %1', messageResultat);
                    return messageResultat;
                };
                /**
                 * Déterminer si le token est une nouveauté.
                 *
                 * @param dateFinNouveaute , date d'échéance de nouveauté ( format : jour/mois/année )
                 * @param tokenNouveaute  , true si c'est une nouveauté, false autrement.
                 */
                AideManager.prototype.DeterminerNouveaute = function (dateFinNouveaute, tokenNouveaute) {
                    var nouveauteResultat = tokenNouveaute;
                    if (dateFinNouveaute !== null && dateFinNouveaute !== undefined) {
                        if (dateFinNouveaute.length == 10
                            && (!isNaN(Number(dateFinNouveaute.substr(6, 4))))
                            && (!isNaN(Number(dateFinNouveaute.substr(3, 2))))
                            && (!isNaN(Number(dateFinNouveaute.substr(0, 2))))) {
                            //Variables pour définir si l'infobulle est une nouveauté.
                            var dateDuJour = new Date();
                            var mois = ("0" + (dateDuJour.getMonth() + 1)).slice(-2);
                            var jour = ("0" + (dateDuJour.getUTCDate())).slice(-2);
                            var annee = dateDuJour.getUTCFullYear().toString();
                            var dateDuJourString = annee + mois + jour;
                            var dateFinNouveauteInversee = void 0;
                            // année mois jour
                            dateFinNouveauteInversee = dateFinNouveaute.substr(6, 4) + dateFinNouveaute.substr(3, 2) + dateFinNouveaute.substr(0, 2);
                            //Valorisation nouveauté
                            //Si le booléen indique une nouveauté
                            //  - Si la date de fin de nouveauté est renseignée ET si elle est inférieure à celle du jour
                            //      - Il ne s'agit plus d'une nouveauté
                            //  - Sinon
                            //      - Il s'agit encore d'une nouveauté
                            //Sinon
                            //  - Il ne s'agit pas d'une nouveauté.
                            nouveauteResultat = (tokenNouveaute === true) ? ((dateDuJourString > dateFinNouveauteInversee) ? false : true) : false;
                        }
                    }
                    AideManager.logger.debug('DeterminerNouveaute Success : %1', nouveauteResultat);
                    return nouveauteResultat;
                };
                AideManager.INDICATEUR_DE_TOKEN = '##';
                AideManager.CLASS_NAME = 'MyWay.Services.Aide.AideManager';
                AideManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(AideManager.CLASS_NAME);
                return AideManager;
            }(Services.Components.ComponentManagerBase));
            Aide.AideManager = AideManager;
            Services.Components.RegistryManager.getInstance().register(AideManager);
        })(Aide = Services.Aide || (Services.Aide = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Preferences;
        (function (Preferences) {
            /**
             * Classe permettant la gestion des messages à destination du module de préférences.
             */
            var PreferencesManagerMessage = /** @class */ (function (_super) {
                __extends(PreferencesManagerMessage, _super);
                /**
                 * Constructeur de la classe PreferencesManagerMessage.
                 */
                function PreferencesManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Preferences) || this;
                }
                /**
                 * Méthode contenant un message permettant de déterminer la méthode de l'api de préférences à appeler.
                 *
                 * @param pMessage Un message permettant de déterminer la méthode de l'api de préférences à appeler.
                 * @returns une promesse avec en réponse, le résultat attendu par la requête.
                 */
                PreferencesManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Preferences.PreferencesMessageSubject.LirePreference: {
                            var lMessage = pMessage.message;
                            var nomVariable = lMessage.nomVariable;
                            var isChargerServeur = lMessage.isChargerServeur;
                            return this.managerInstance.LirePreference(nomVariable, isChargerServeur).then(function (pValeur) {
                                return {
                                    valeurVariable: pValeur
                                };
                            });
                        }
                        case Preferences.PreferencesMessageSubject.EcrirePreference: {
                            var lMessage = pMessage.message;
                            var preferences = lMessage.preferences;
                            return this.managerInstance.EcrirePreference(preferences);
                        }
                        case Preferences.PreferencesMessageSubject.LireMultiPreference: {
                            var lMessage = pMessage.message;
                            var nomVariables = lMessage.codesPreference;
                            return this.managerInstance.LireMultiPreference(nomVariables);
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                /**
                 * Chemin complet de la classe PreferencesManager.
                 */
                PreferencesManagerMessage.CLASS_NAME = 'MyWay.Services.Preferences.PreferencesManagerMessage';
                /**
                 * Instance du logger de la classe PreferencesManager.
                 */
                PreferencesManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(PreferencesManagerMessage.CLASS_NAME);
                return PreferencesManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Preferences.PreferencesManagerMessage = PreferencesManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(PreferencesManagerMessage);
        })(Preferences = Services.Preferences || (Services.Preferences = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des preferences
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Preferences;
        (function (Preferences) {
            /**
             * Classe d'extension du gestionnaire de préférence.
             */
            var PreferencesManagerExtended = /** @class */ (function (_super) {
                __extends(PreferencesManagerExtended, _super);
                /**
                 * Constructeur de la classe PreferencesManagerExtended.
                 */
                function PreferencesManagerExtended() {
                    return _super.call(this, Services.Components.ComponentType.Preferences) || this;
                }
                /**
                 * Méthode permettant de lire une préférence spécifique.
                 *
                 * @param nomVariable Le nom de la préférence à lire.
                 * @param isChargerServeur booléen. Si rue, le chargement se fera via le serveur uniquement, sinon préchargement par le cache
                 * @returns une promesse avec une préférence en retour.
                 */
                PreferencesManagerExtended.prototype.LirePreference = function (nomVariable, isChargerServeur) {
                    return this.manager.LirePreference(nomVariable, isChargerServeur);
                };
                /**
                 * Ecriture d'un ensemble de préférences utilisateur.
                 * Attention : N'en fait qu'une à la fois, d'où l'attribut privé "derniereEcritureEnAttente".
                 * Se mets donc à la suite de la "derniereEcritureEnAttente" pour lancer l'écriture suivante.
                 *
                 * @param preferences Liste des préférences à écrire.
                 * @returns une promesse avec aucune donnée en retour.
                 */
                PreferencesManagerExtended.prototype.EcrirePreference = function (nomVariable, valeurVariable) {
                    var preferences = [{
                            cle: nomVariable,
                            valeur: valeurVariable
                        }];
                    return this.manager.EcrirePreference(preferences);
                };
                /**
                 * Méthode permettant de lire plusieurs préférences à la fois.
                 *
                 * @param codesPreference La liste des préférences à récupérer.
                 * @returns une promesse avec un tableau de préférences en retour.
                 */
                PreferencesManagerExtended.prototype.lireMultiPreference = function (codesPreference) {
                    return this.manager.LireMultiPreference(codesPreference).then(function (response) {
                        return response.preferences;
                    });
                };
                /**
                 * Ecriture d'un ensemble de préférences utilisateur.
                 * Attention : N'en fait qu'une à la fois, d'où l'attribut privé "derniereEcritureEnAttente".
                 * Se mets donc à la suite de la "derniereEcritureEnAttente" pour lancer l'écriture suivante.
                 *
                 * @param preferences Liste des préférences à écrire.
                 * @returns une promesse avec aucune donnée en retour.
                 */
                PreferencesManagerExtended.prototype.ecrireMultiPreference = function (preferences) {
                    return this.manager.EcrirePreference(preferences);
                };
                return PreferencesManagerExtended;
            }(Services.Components.ComponentManagerExtendedBase));
            Preferences.PreferencesManagerExtended = PreferencesManagerExtended;
            Services.Components.RegistryManagerExtended.getInstance().register(PreferencesManagerExtended);
        })(Preferences = Services.Preferences || (Services.Preferences = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgentExtended, 'HabilitationTechAgent', {
            get: function () {
                return this._techLibrary.HabilitationTechAgent;
            }
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgent, 'HabilitationTechAgent', {
            get: function () {
                return this._techLibrary.HabilitationTechAgent;
            }
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.TechLibrary.addInitListener(function (pInstance, library) {
            pInstance.HabilitationTechAgent = library.Habilitation;
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion technique des habilitations
* @module MyWay.Services.Habilitation
* classe : HabilitationTechAgent - public - Classe permettant l'administration des habilitations
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Habilitation;
        (function (Habilitation) {
            /**
            * Classe permettant la gestion des habilitations
            */
            var HabilitationTechAgent = /** @class */ (function (_super) {
                __extends(HabilitationTechAgent, _super);
                /**
                * Constructeur de la classe HabilitationTechAgent
                */
                function HabilitationTechAgent() {
                    return _super.call(this) || this;
                }
                HabilitationTechAgent.prototype.init = function (pAgentLibrary, pMessageService, pMessageInitializer) {
                    //Fixme Problème de compatibilité ascendante, le "Habiliation" tech agent a un nom différent du "Habilitation" agent
                    pAgentLibrary["HabilitationTech"] = this;
                    return _super.prototype.init.call(this, pAgentLibrary, pMessageService, pMessageInitializer);
                };
                /**
                 * Renvoie toutes les habilitations disponibles, dans un tableau d'habilitations
                 * @return {IPromesse<HabilitationModel[]>} [description]
                 */
                HabilitationTechAgent.prototype.ObtenirHabilitations = function () {
                    return this.sendMessage(Habilitation.HabilitationMessageSubject.ObtenirHabilitations, {});
                };
                /**
                 * Permet de récupérer une habilitation au format HabilitationModel
                 * @param  {string}                       code [description]
                 * @return {IPromesse<HabilitationModel>}                  [description]
                 */
                HabilitationTechAgent.prototype.ObtenirHabilitation = function (code) {
                    return this.sendMessage(Habilitation.HabilitationMessageSubject.ObtenirHabilitation, { code: code });
                };
                /**
                 * Ajoute ou modifie une habilitation
                 * @param  {string}                       code Le code de l'habilitation à insérer / modifier
                 * @param  {boolean}                      valeur           La valeur true/false de l'habilitation
                 * @return {IPromesse<HabilitationModel>}                  [description]
                 */
                HabilitationTechAgent.prototype.ModifierHabilitation = function (code, valeur) {
                    return this.sendMessage(Habilitation.HabilitationMessageSubject.ModifierHabilitation, { code: code, valeur: valeur });
                };
                /**
                 * Charge les habilitations en écrasant toutes les modifications faites par l'utilisateur
                 * @return {IPromesse<HabilitationModel[]>} [description]
                 */
                HabilitationTechAgent.prototype.ChargerHabilitations = function () {
                    return this.sendMessage(Habilitation.HabilitationMessageSubject.ChargerHabilitations, {});
                };
                return HabilitationTechAgent;
            }(Habilitation.HabilitationAgent));
            Habilitation.HabilitationTechAgent = HabilitationTechAgent;
            Services.Components.RegistryAgent.getInstance().register(HabilitationTechAgent);
        })(Habilitation = Services.Habilitation || (Services.Habilitation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            var ComponentType;
            (function (ComponentType) {
                ComponentType["Application"] = "Application";
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            var Messages;
            (function (Messages) {
                var ApplicationMessageSubject;
                (function (ApplicationMessageSubject) {
                    ApplicationMessageSubject[ApplicationMessageSubject["Demarrer"] = 0] = "Demarrer";
                    ApplicationMessageSubject[ApplicationMessageSubject["DemarrerProcessus"] = 1] = "DemarrerProcessus";
                })(ApplicationMessageSubject = Messages.ApplicationMessageSubject || (Messages.ApplicationMessageSubject = {}));
                //Enregistrement du composant et de ses dépendances
                Services.Components.FactoryRegistries.getInstance().declareComponent(Services.Components.ComponentType.Application, [
                    Services.Components.ComponentType.Context,
                    Services.Components.ComponentType.ContexteClient,
                    Services.Components.ComponentType.Core,
                    Services.Components.ComponentType.Display,
                    Services.Components.ComponentType.Evennements,
                    Services.Components.ComponentType.Lisa
                ]);
            })(Messages = Application.Messages || (Application.Messages = {}));
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var LisaComposantApplicatif = /** @class */ (function () {
                function LisaComposantApplicatif(nom, localisationAbsolue, type, placeholders) {
                    this.Nom = nom;
                    this.LocalisationAbsolue = localisationAbsolue;
                    if (placeholders) {
                        for (var key in placeholders) {
                            this.LocalisationAbsolue = this.LocalisationAbsolue.replace('[' + key + ']', placeholders[key]);
                        }
                        ;
                    }
                    this.Type = type;
                }
                return LisaComposantApplicatif;
            }());
            Lisa.LisaComposantApplicatif = LisaComposantApplicatif;
            var LisaPointEntree = /** @class */ (function () {
                function LisaPointEntree(composantApplicatif, nom, code, icone, localisationRelative, estUnOutil) {
                    this.ComposantApplicatif = composantApplicatif;
                    this.Nom = nom;
                    this.Code = code;
                    this.Icone = icone;
                    this.LocalisationRelative = localisationRelative;
                    this.Type = 'PointDEntree';
                    this.EstUnOutil = false;
                    if (estUnOutil != undefined)
                        this.EstUnOutil = estUnOutil;
                }
                return LisaPointEntree;
            }());
            Lisa.LisaPointEntree = LisaPointEntree;
            var LisaProcess = /** @class */ (function () {
                function LisaProcess(code, nom, options, habilitation) {
                    this.Code = code;
                    this.Nom = nom;
                    this.Type = 'Process';
                    this.Options = options;
                    this.Habilitation = habilitation;
                }
                return LisaProcess;
            }());
            Lisa.LisaProcess = LisaProcess;
            var LisaEtape = /** @class */ (function () {
                function LisaEtape(code, elementDeProcessus, codeMetier, inProcess, valeurEntree, valeurDepartProcessus, options) {
                    this.ElementDeProcessus = elementDeProcessus;
                    this.InProcess = inProcess;
                    this.ValeurEntree = valeurEntree;
                    this.ValeurDepartProcessus = valeurDepartProcessus;
                    if (!code) {
                        if (this.InProcess)
                            this.Code = this.InProcess.Code + ':';
                        else
                            this.Code = '';
                        this.Code += this.ElementDeProcessus.Code;
                    }
                    else {
                        this.Code = code;
                    }
                    this.Options = options;
                    this.CodeMetier = codeMetier;
                    this.Actions = [];
                }
                return LisaEtape;
            }());
            Lisa.LisaEtape = LisaEtape;
            var LisaAction = /** @class */ (function () {
                function LisaAction(etape, valeurSortie, versEtape, estExterne, nomExterne, finProcess, valeurFinProcess) {
                    if (finProcess === void 0) { finProcess = false; }
                    if (valeurFinProcess === void 0) { valeurFinProcess = null; }
                    this.Etape = etape;
                    this.ValeurSortie = valeurSortie;
                    this.VersEtape = versEtape;
                    this.EstExterne = estExterne;
                    this.NomExterne = nomExterne;
                    this.FinProcess = finProcess;
                    this.ValeurFinProcess = valeurFinProcess;
                }
                return LisaAction;
            }());
            Lisa.LisaAction = LisaAction;
            var LisaContrat = /** @class */ (function () {
                function LisaContrat(pointEntree, code, longueur, mode, nullable, type) {
                    this.PointEntree = pointEntree;
                    this.Code = code;
                    this.Longueur = longueur;
                    this.Type = type;
                    this.Nullable = nullable;
                    this.Mode = mode;
                }
                return LisaContrat;
            }());
            Lisa.LisaContrat = LisaContrat;
            var FakeLisaApi = /** @class */ (function () {
                function FakeLisaApi(environment, placeholders, isLocalServiceAvailable, authorizedDomains) {
                    if (isLocalServiceAvailable === void 0) { isLocalServiceAvailable = true; }
                    if (authorizedDomains === void 0) { authorizedDomains = []; }
                    this.composantsApplicatifs = [];
                    this.pointDEntrees = [];
                    this.contrats = [];
                    this.etapes = [];
                    this.actions = [];
                    this.processes = [];
                    this.libraryManager = null;
                    this._isLocalServiceAvailable = isLocalServiceAvailable;
                    if (authorizedDomains && authorizedDomains.length > 0)
                        MyWay.Services.PrivatePortalServiceParameters.Instance().AuthorizedDomains = authorizedDomains;
                    if (Services.PrivatePortalServiceParameters.Instance().LisaFileUrl)
                        this.addSettingsFromJSON(environment, placeholders);
                }
                FakeLisaApi.prototype.initApi = function (pApi) {
                    this.libraryManager = pApi;
                };
                FakeLisaApi.prototype.addSettingsFromJSON = function (environment, placeholders) {
                    var lisaUrl;
                    var altLisaUrl;
                    if (Services.PrivatePortalServiceParameters.Instance().LisaFileUrl) {
                        lisaUrl = Services.PrivatePortalServiceParameters.Instance().LisaFileUrl;
                        if (environment)
                            altLisaUrl = lisaUrl + '/' + environment;
                        else
                            altLisaUrl = lisaUrl;
                    }
                    else {
                        lisaUrl = '/v1/data/lisa';
                        altLisaUrl = '/v1/data/lisa/' + environment;
                    }
                    var self = this;
                    var url = altLisaUrl + '/composants-applicatifs.json';
                    Services.CoreCommon.SendRequest({ url: url, withHeaders: false, async: false, cache: false }, function (composantsApplicatifs) {
                        self.composantsApplicatifs = [];
                        for (var index in composantsApplicatifs) {
                            var ca = composantsApplicatifs[index];
                            if (!ca)
                                throw "ca is null: url=" + url;
                            self.composantsApplicatifs[ca.Nom] = new LisaComposantApplicatif(ca.Nom, ca.LocalisationAbsolue, ca.Type, placeholders);
                        }
                    }, null);
                    url = lisaUrl + '/points-entrees.json';
                    Services.CoreCommon.SendRequest({ url: url, withHeaders: false, async: false, cache: false }, function (pointDEntrees) {
                        self.pointDEntrees = [];
                        for (var index in pointDEntrees) {
                            var pe = pointDEntrees[index];
                            self.pointDEntrees[pe.Code] = new LisaPointEntree(self.composantsApplicatifs[pe.ComposantApplicatif], pe.Nom, pe.Code, pe.Icone, pe.LocalisationRelative, pe.EstUnOutil);
                        }
                    }, null);
                    url = lisaUrl + '/processus.json';
                    Services.CoreCommon.SendRequest({ url: url, withHeaders: false, async: false, cache: false }, function (processes) {
                        self.processes = [];
                        for (var index in processes) {
                            var p = processes[index];
                            self.processes[p.Code] = new LisaProcess(p.Code, p.Nom, p.Options, p.Habilitation);
                        }
                    }, null);
                    url = lisaUrl + '/etapes.json';
                    Services.CoreCommon.SendRequest({ url: url, withHeaders: false, async: false, cache: false }, function (etapes) {
                        self.etapes = [];
                        for (var index in etapes) {
                            var e = etapes[index];
                            var parts = e.ElementDeProcessus.split('|');
                            if (parts[1] === 'PointDEntree')
                                self.etapes[e.Code] = new LisaEtape(e.Code, self.pointDEntrees[parts[0]], e.CodeMetier, self.processes[e.InProcess], e.ValeurEntree, e.ValeurDepartProcessus, e.Options);
                            else
                                self.etapes[e.Code] = new LisaEtape(e.Code, self.processes[parts[0]], e.CodeMetier, self.processes[e.InProcess], e.ValeurEntree, e.ValeurDepartProcessus, e.Options);
                        }
                    }, null);
                    url = lisaUrl + '/actions.json';
                    Services.CoreCommon.SendRequest({ url: url, withHeaders: false, async: false, cache: false }, function (actions) {
                        self.actions = [];
                        for (var index in actions) {
                            var a = actions[index];
                            var action = new LisaAction(self.etapes[a.Etape], a.ValeurSortie, self.etapes[a.VersEtape], a.EstExterne, a.NomExterne, a.FinProcess, a.ValeurFinProcess);
                            self.actions.push(action);
                            self.etapes[a.Etape].Actions.push(action);
                        }
                    }, null);
                    url = lisaUrl + '/contrats.json';
                    Services.CoreCommon.SendRequest({ url: url, withHeaders: false, async: false, cache: false }, function (contrats) {
                        self.contrats = [];
                        for (var index in contrats) {
                            var c = contrats[index];
                            self.contrats.push(new LisaContrat(self.pointDEntrees[c.PointEntree], c.Code, c.Longueur, c.Mode, c.Nullable, c.Type));
                        }
                    }, null);
                    url = lisaUrl + '/addons.json';
                    Services.CoreCommon.SendRequest({ url: url, withHeaders: false, async: false, cache: false }, function (addOns) {
                        self.addOns = addOns;
                    }, null);
                };
                FakeLisaApi.prototype.next = function (codeEtape, valeurSortie) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    try {
                        var nextResult = null;
                        for (var i in this.actions) {
                            var action = this.actions[i];
                            if (action.Etape.Code === codeEtape && action.ValeurSortie === valeurSortie) {
                                nextResult = new MyWay.Services.Lisa.NextResult(null);
                                nextResult.CodeEtape = codeEtape;
                                nextResult.ValeurSortie = valeurSortie;
                                if (action.FinProcess) {
                                    nextResult.FinProcess = true;
                                    nextResult.ValeurFinProcess = action.ValeurFinProcess;
                                }
                                else if (action.VersEtape.ElementDeProcessus.Type === 'PointDEntree') {
                                    var etapePE = this.setSequencePE(action.VersEtape);
                                    nextResult.ProchaineEtape = etapePE;
                                }
                                else if (action.VersEtape.ElementDeProcessus.Type === 'Process') {
                                    var etapePR = this.setSequencePR(action.VersEtape.ElementDeProcessus, action.VersEtape.ValeurEntree);
                                    nextResult.ProchaineEtape = etapePR;
                                    nextResult.ProcessDemarre = new Services.Lisa.ProcessResult({ Code: action.VersEtape.ElementDeProcessus.Code, Nom: action.VersEtape.ElementDeProcessus.Nom });
                                    nextResult.ProcessDemarre.EtapesConnues = this.getKnownSteps(action.VersEtape.ElementDeProcessus.Code);
                                    nextResult.ProcessDemarre.CodeEtape = action.VersEtape.Code;
                                    nextResult.ProcessDemarre.OptionsProcess = action.VersEtape.ElementDeProcessus.Options;
                                    nextResult.ProcessDemarre.Actions = [];
                                    for (var ii in this.actions) {
                                        var action2 = this.actions[ii];
                                        if (action2.Etape)
                                            if (action2.Etape.Code === action.VersEtape.Code) {
                                                var seqAction = new MyWay.Services.Lisa.ActionResult(null);
                                                seqAction.ValeurSortie = action2.ValeurSortie;
                                                seqAction.NomExterne = action2.NomExterne;
                                                seqAction.EstExterne = action2.EstExterne;
                                                nextResult.ProcessDemarre.Actions.push(seqAction);
                                            }
                                    }
                                    if (action.VersEtape.Options) {
                                        nextResult.ProcessDemarre.OptionsProcessAsEtape = action.VersEtape.Options;
                                    }
                                    for (var k in nextResult.ProcessDemarre.Actions) {
                                        var actionPE = nextResult.ProcessDemarre.Actions[k];
                                        actionPE.ValeursFinProcessPossibles = this.getSortiesPossiblesPourEtapeEtSortie(action.VersEtape, actionPE.ValeurSortie);
                                    }
                                }
                                deferred.resolve(nextResult);
                                return deferred.promise;
                            }
                        }
                        deferred.reject(new Services.Erreur("Sortie " + valeurSortie + " inexistante pour l'étape " + codeEtape));
                    }
                    catch (e) {
                        deferred.reject(new Services.Erreur("Impossible de réaliser l'enchainement: " + JSON.stringify(e)));
                    }
                    return deferred.promise;
                };
                FakeLisaApi.prototype.start = function (codeProcessus, valeurDepart) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    try {
                        var startResult = null;
                        if (!codeProcessus) {
                            deferred.reject(new Services.Erreur("pas de code processus fourni en paramètre"));
                        }
                        for (var i in this.processes) {
                            var process = this.processes[i];
                            if (process.Code === codeProcessus) {
                                var etapePR = this.setSequencePR(process, valeurDepart);
                                startResult = new MyWay.Services.Lisa.StartResult(null);
                                startResult.CodeProcessus = process.Code;
                                startResult.ProchaineEtape = etapePR;
                                startResult.ProcessDemarre = new Services.Lisa.ProcessResult({ Code: process.Code, ValeurDepart: valeurDepart, Nom: process.Nom });
                                startResult.ProcessDemarre.EtapesConnues = this.getKnownSteps(process.Code);
                                startResult.ProcessDemarre.Actions = [];
                                startResult.ProcessDemarre.OptionsProcess = process.Options;
                                deferred.resolve(startResult);
                                return deferred.promise;
                            }
                        }
                        deferred.resolve(null);
                    }
                    catch (e) {
                        deferred.reject(new Services.Erreur("Impossible de démarrer un processus: " + JSON.stringify(e)));
                    }
                    return deferred.promise;
                };
                FakeLisaApi.prototype.getProcesses = function () {
                    if (this.processes) {
                        var results = [];
                        for (var key in this.processes) {
                            var process = this.processes[key];
                            var result = new Lisa.ProcessResult(null);
                            result.Code = process.Code;
                            result.Nom = process.Nom;
                            result.OptionsProcess = process.Options;
                            results.push(result);
                        }
                        return this.libraryManager.Core.createPromiseSelfResolved(results);
                    }
                    else {
                        return this.libraryManager.Core.createPromiseSelfError(new Services.Erreur("pas de processus trouvé"));
                    }
                };
                FakeLisaApi.prototype.getTools = function () {
                    if (this.pointDEntrees) {
                        var results = [];
                        for (var key in this.pointDEntrees) {
                            var pointDEntree = this.pointDEntrees[key];
                            if (pointDEntree.EstUnOutil) {
                                var application = new Lisa.ApplicationResult(pointDEntree.Nom, pointDEntree.Icone, pointDEntree.ComposantApplicatif.LocalisationAbsolue + pointDEntree.LocalisationRelative);
                                results.push(application);
                            }
                        }
                        return this.libraryManager.Core.createPromiseSelfResolved(results);
                    }
                    else {
                        return this.libraryManager.Core.createPromiseSelfError(new Services.Erreur("pas d'outil trouvé"));
                    }
                };
                FakeLisaApi.prototype.setSequencePE = function (etape) {
                    var etape = this.getEtape(etape.Code);
                    var pointDentree = etape.ElementDeProcessus;
                    var etapePE = new MyWay.Services.Lisa.EtapeResult(null);
                    etapePE.CodeApplication = pointDentree.Code;
                    etapePE.CodeEtape = etape.Code;
                    etapePE.CodeMetier = etape.CodeMetier;
                    etapePE.NomApplication = etape.ElementDeProcessus.Nom;
                    etapePE.LocalisationAbsolue = pointDentree.ComposantApplicatif.LocalisationAbsolue;
                    etapePE.LocalisationRelative = pointDentree.LocalisationRelative;
                    etapePE.TypeApplication = pointDentree.ComposantApplicatif.Type;
                    etapePE.ValeurEntree = etape.ValeurEntree;
                    etapePE.Actions = [];
                    for (var i in this.actions) {
                        var action = this.actions[i];
                        if (action.Etape)
                            if (action.Etape.Code === etapePE.CodeEtape) {
                                var seqAction = new MyWay.Services.Lisa.ActionResult(null);
                                seqAction.ValeurSortie = action.ValeurSortie;
                                seqAction.NomExterne = action.NomExterne;
                                seqAction.EstExterne = action.EstExterne;
                                etapePE.Actions.push(seqAction);
                            }
                    }
                    etapePE.Contrats = [];
                    for (var j in this.contrats) {
                        var contrat = this.contrats[j];
                        if (contrat.PointEntree.Code === pointDentree.Code) {
                            var seqContrat = new MyWay.Services.Lisa.ContratResult(null);
                            seqContrat.Code = contrat.Code;
                            seqContrat.Longueur = contrat.Longueur;
                            seqContrat.Mode = contrat.Mode;
                            seqContrat.Nullable = contrat.Nullable;
                            seqContrat.Type = contrat.Type;
                            etapePE.Contrats.push(seqContrat);
                        }
                    }
                    etapePE.OptionsEtape = etape.Options;
                    etapePE.OptionsPointEntree = pointDentree.Options;
                    for (var k in etapePE.Actions) {
                        var actionPE = etapePE.Actions[k];
                        actionPE.ValeursFinProcessPossibles = this.getSortiesPossiblesPourEtapeEtSortie(etape, actionPE.ValeurSortie);
                    }
                    return etapePE;
                };
                FakeLisaApi.prototype.setSequencePR = function (process, valeurDepart) {
                    var etapePR;
                    var depart = this.getDepart(process.Code, valeurDepart);
                    if (depart.ElementDeProcessus.Type === 'PointDEntree') {
                        etapePR = this.setSequencePE(depart);
                    }
                    else {
                        etapePR = this.setSequencePR(depart.ElementDeProcessus, valeurDepart);
                    }
                    return etapePR;
                };
                FakeLisaApi.prototype.getDepart = function (codeProcess, valeurDepartProcessus) {
                    for (var i in this.etapes) {
                        var etape = this.etapes[i];
                        if (etape.InProcess.Code === codeProcess) {
                            if (valeurDepartProcessus) {
                                if (etape.ValeurDepartProcessus
                                    && etape.ValeurDepartProcessus === valeurDepartProcessus)
                                    return etape;
                            }
                            else {
                                if (etape.ValeurDepartProcessus === 1)
                                    return etape;
                            }
                        }
                    }
                    throw "pas de première étape trouvée";
                };
                FakeLisaApi.prototype.getEtape = function (codeEtape) {
                    for (var i in this.etapes) {
                        var etape = this.etapes[i];
                        if (etape.Code == codeEtape) {
                            return etape;
                        }
                    }
                    return null;
                };
                // get all the actions for a step caracterized by a codeProcess & a codeProcessElement
                // @param codeProcess string
                // @param codeProcessElement string
                // @return 
                FakeLisaApi.prototype.getActionsForAStep = function (codeProcess, codeProcessElement) {
                    var actions = [];
                    for (var i in this.actions) {
                        if (this.actions[i].Etape.Code === (codeProcess + ':' + codeProcessElement)) {
                            actions.push(this.actions[i]);
                        }
                    }
                    return actions;
                };
                // get the differents steps of a process
                // @param codeProcess string
                // @return string[]
                FakeLisaApi.prototype.getKnownSteps = function (codeProcess) {
                    var knownSteps = [], entryPoint, currentProcessElement = '', currentActions = [];
                    // first, find the entryPoint
                    entryPoint = this.getDepart(codeProcess).ElementDeProcessus;
                    // chain the differents steps from the 'entry point'
                    currentProcessElement = entryPoint.Code;
                    knownSteps.push(currentProcessElement);
                    currentActions = this.getActionsForAStep(codeProcess, currentProcessElement);
                    // check that current step code is not already in retrieved kwnows steps to prevent recursive endless loops
                    while (currentActions.length === 1 && currentActions[0].FinProcess !== true && currentActions[0].VersEtape && knownSteps.indexOf(currentActions[0].VersEtape.ElementDeProcessus.Code) === -1) {
                        currentProcessElement = currentActions[0].VersEtape.ElementDeProcessus.Code;
                        knownSteps.push(currentProcessElement);
                        currentActions = this.getActionsForAStep(codeProcess, currentProcessElement);
                    }
                    // we stop if more than one action, maybe to implement  later
                    if (currentActions.length > 1)
                        knownSteps.push('...');
                    else if (currentActions.length < 1 /* || (currentActions.length > 0 && currentActions[0].FinProcess !== true) */)
                        knownSteps.push('???');
                    return knownSteps;
                };
                FakeLisaApi.prototype.getSortiesPossiblesPourEtapeEtSortie = function (etape, valeurSortie) {
                    var output = [];
                    for (var i in etape.Actions) {
                        var action = etape.Actions[i];
                        if (action.ValeurSortie === valeurSortie) {
                            if (action.FinProcess)
                                output.push(action.ValeurFinProcess);
                            else {
                                var sp = this.getSortiesPossiblesPourEtape(action.VersEtape);
                                for (var u in sp) {
                                    var val = sp[u];
                                    var getVal = output.indexOf(val);
                                    if (getVal < 0)
                                        output.push(val);
                                }
                            }
                            break;
                        }
                    }
                    return output;
                };
                FakeLisaApi.prototype.getSortiesPossiblesPourEtape = function (etape) {
                    var output = [];
                    if (!etape.Actions)
                        console.log(etape);
                    else {
                        for (var i in etape.Actions) {
                            var action = etape.Actions[i];
                            if (!action.ValeursFinProcessPossibles) {
                                if (action.FinProcess) {
                                    action.ValeursFinProcessPossibles = [];
                                    action.ValeursFinProcessPossibles.push(action.ValeurFinProcess);
                                }
                                else {
                                    action.ValeursFinProcessPossibles = [];
                                    var etapeSuivante = action.VersEtape;
                                    var sorties = this.getSortiesPossiblesPourEtape(etapeSuivante);
                                    for (var u in sorties) {
                                        var val = sorties[u];
                                        var getVal = action.ValeursFinProcessPossibles.indexOf(val);
                                        if (getVal < 0)
                                            action.ValeursFinProcessPossibles.push(val);
                                    }
                                }
                            }
                            for (var uu in action.ValeursFinProcessPossibles) {
                                var val = action.ValeursFinProcessPossibles[uu];
                                var getVal = output.indexOf(val);
                                if (getVal < 0)
                                    output.push(val);
                            }
                        }
                    }
                    return output;
                };
                /**
                * Récupère les codes des processus LISA
                */
                FakeLisaApi.prototype.getCodesProcessus = function () {
                    return this.getProcesses().then(function (processes) {
                        var array = [];
                        for (var i in processes) {
                            array.push(processes[i].Code);
                        }
                        return array;
                    });
                };
                /**
                * Récupère les infos d'un processus LISA
                * @param {string}   codeProcessus
                * code du processus
                */
                FakeLisaApi.prototype.getInfoProcessus = function (coeProcessus) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve(null);
                    return deferred.promise;
                };
                FakeLisaApi.prototype.DemarrerSousProcessusExterne = function (codeProcessus, delegationPortail, initData, valeurDepart, horsPortail, surTablette) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve(null);
                    return deferred.promise;
                };
                FakeLisaApi.prototype.getHabilitationProcessus = function (codeProcessus) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    for (var i in this.processes) {
                        var process = this.processes[i];
                        if (process.Code === codeProcessus) {
                            deferred.resolve(process.Habilitation);
                            return deferred.promise;
                        }
                    }
                    deferred.resolve(null);
                    return deferred.promise;
                };
                FakeLisaApi.prototype.getAddOns = function () {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    deferred.resolve(this.addOns);
                    return deferred.promise;
                };
                return FakeLisaApi;
            }());
            Lisa.FakeLisaApi = FakeLisaApi;
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var LisaApiBase = /** @class */ (function (_super) {
                __extends(LisaApiBase, _super);
                function LisaApiBase(environment, placeholders, isLocalServiceAvailable, authorizedDomains) {
                    if (isLocalServiceAvailable === void 0) { isLocalServiceAvailable = true; }
                    if (authorizedDomains === void 0) { authorizedDomains = []; }
                    var _this = _super.call(this, environment, placeholders, isLocalServiceAvailable, authorizedDomains) || this;
                    _this.processusVersions = {};
                    _this._lisaUrl = Services.PrivatePortalServiceParameters.Instance().LisaUrl;
                    _this._referentielProcessusSiUrl = Services.PrivatePortalServiceParameters.Instance().ReferentielProcessusSiUrl;
                    _this.getAddOns().then(function (addOns) {
                        _this.addOns = addOns;
                    });
                    return _this;
                }
                LisaApiBase.prototype.next = function (codeEtape, valeurSortie) {
                    var _this = this;
                    var promise;
                    if (Services.PrivatePortalServiceParameters.Instance().LisaFileUrl) {
                        promise = _super.prototype.next.call(this, codeEtape, valeurSortie);
                    }
                    else {
                        promise = this._next(codeEtape, valeurSortie);
                    }
                    return promise.then(function (nextData) {
                        var next = new Lisa.NextResult(nextData);
                        //TODO : faire évoluer avec un Switch pour implémenter proprement pour chaque montée de version Lisa 
                        if (next.ProcessDemarre) {
                            if (next.ProcessDemarre.OptionsProcessAsEtape) {
                                var optionsProcessAsEtape = null;
                                optionsProcessAsEtape = JSON.parse(next.ProcessDemarre.OptionsProcessAsEtape);
                                if (optionsProcessAsEtape != null && optionsProcessAsEtape.HorsProcessus) {
                                    return next;
                                }
                            }
                            //Corrigé en 18.09. Si un processus a déjà les données nécessaires, alors on ne va pas les chercher dans les addons
                            var addOn = null;
                            if (nextData.ProcessDemarre.ValeurDepart !== undefined) {
                                addOn = {
                                    actionsFinSousProcessus: nextData.ProcessDemarre.Actions,
                                    codeEtape: nextData.ProcessDemarre.CodeEtape,
                                    valeurDepartSousProcessus: nextData.ProcessDemarre.ValeurDepart,
                                    valeurSortie: valeurSortie
                                };
                            }
                            else {
                                addOn = _this._getEtapeAddOn(next.ProcessDemarre.CodeEtape);
                            }
                            if (addOn) {
                                return _this._handleSubProcess(next, addOn);
                            }
                        }
                        return next;
                    });
                };
                LisaApiBase.prototype.start = function (codeProcessus, valeurDepart) {
                    var _this = this;
                    return Services.Promesses.getPromesseSelfResoved().then(function () {
                        if (Services.PrivatePortalServiceParameters.Instance().LisaFileUrl) {
                            return _super.prototype.start.call(_this, codeProcessus, valeurDepart).then(function (startData) {
                                var start = new Lisa.StartResult(startData);
                                return start;
                            });
                        }
                        else {
                            return _this._start(codeProcessus, valeurDepart);
                        }
                    }).then(function (startResult) {
                        if (startResult.VersionExport !== undefined) {
                            _this.processusVersions[codeProcessus] = Number(startResult.VersionExport);
                        }
                        else {
                            _this.processusVersions[codeProcessus] = 0;
                        }
                        return startResult;
                    });
                };
                LisaApiBase.prototype._next = function (codeEtape, valeurSortie) {
                    return Services.CoreCommon.SendRequestWithPromise({
                        url: this._lisaUrl + '/next/' + codeEtape + '/' + valeurSortie,
                        method: Services.MethodEnum.GET,
                        withHeaders: false
                    });
                };
                LisaApiBase.prototype._start = function (codeProcessus, valeurDepart) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var url = this._lisaUrl + '/start/' + codeProcessus;
                    if (valeurDepart) {
                        url += '/' + valeurDepart;
                    }
                    Services.CoreCommon.SendRequestWithPromise({
                        url: url,
                        method: Services.MethodEnum.GET,
                        withHeaders: false
                    }).then(function (startData) {
                        var start = new Lisa.StartResult(startData);
                        deferred.resolve(start);
                    }).catch(function (erreur) {
                        deferred.reject(erreur);
                    });
                    return deferred.promise;
                };
                LisaApiBase.prototype._handleSubProcess = function (next, addOn) {
                    var lValeurDepartSousProcessus = next.ProcessDemarre.ValeurDepart;
                    if (lValeurDepartSousProcessus === undefined) {
                        lValeurDepartSousProcessus = addOn.valeurDepartSousProcessus;
                    }
                    return this.start(next.ProcessDemarre.Code, lValeurDepartSousProcessus).then(function (start) {
                        next.ProchaineEtape = new Lisa.EtapeResult(start.ProchaineEtape);
                        next.ProcessDemarre.Actions = [];
                        for (var i in addOn.actionsFinSousProcessus) {
                            next.ProcessDemarre.Actions.push(new Lisa.ActionResult(addOn.actionsFinSousProcessus[i]));
                        }
                        return next;
                    }).catch(function (erreur) {
                        throw erreur;
                    });
                };
                LisaApiBase.prototype.getTools = function () {
                    return _super.prototype.getTools.call(this);
                };
                /**
                * Récupère les codes des processus LISA
                */
                LisaApiBase.prototype.getCodesProcessus = function () {
                    if (Services.PrivatePortalServiceParameters.Instance().LisaFileUrl) {
                        return _super.prototype.getCodesProcessus.call(this);
                    }
                    else {
                        return Services.CoreCommon.SendRequestWithPromise({ url: this._lisaUrl + '/_index_', withHeaders: false });
                    }
                };
                /**
                * Récupère les infos d'un processus LISA
                * @param {string}   codeProcessus
                * code du processus
                */
                LisaApiBase.prototype.getInfoProcessus = function (codeProcessus) {
                    if (Services.PrivatePortalServiceParameters.Instance().LisaFileUrl) {
                        return _super.prototype.getInfoProcessus.call(this, codeProcessus);
                    }
                    else {
                        return Services.CoreCommon.SendRequestWithPromise({ url: this._lisaUrl + '/' + codeProcessus + ".infos", withHeaders: false });
                    }
                };
                LisaApiBase.prototype.getHabilitationProcessus = function (codeProcessus) {
                    if (Services.PrivatePortalServiceParameters.Instance().LisaFileUrl) {
                        return _super.prototype.getHabilitationProcessus.call(this, codeProcessus);
                    }
                    else {
                        var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                        Services.CoreCommon.SendRequest({
                            url: this._referentielProcessusSiUrl + '/recherche/processus?codeProcessus=' + codeProcessus
                        }, function (processData) {
                            if (processData && processData.codeHabilitation)
                                deferred.resolve(processData.codeHabilitation);
                            else
                                deferred.reject(new Services.Erreur("les données renvoyées ne sont pas valables", [JSON.stringify(processData)]));
                        }, function (erreur) {
                            deferred.reject(erreur);
                        });
                        return deferred.promise;
                    }
                };
                /**
                 * Utiliser lorsqu'on monte de version Lisa et qu'on rajoute de nouvelles données au paramètrage LISA,
                 * Le fichier addons contient toutes ces nouvelles données pour les vieux processus évitant ainsi devoir les relivrer
                 * @return {IAddOns}   agentLibrary  [description]
                 * @param {ErreurCallback} errorCallback [description]
                 */
                LisaApiBase.prototype.getAddOns = function () {
                    if (Services.PrivatePortalServiceParameters.Instance().LisaFileUrl) {
                        return _super.prototype.getAddOns.call(this);
                    }
                    else {
                        var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                        Services.CoreCommon.SendRequest({ url: this._lisaUrl + '/importExport/addons', withHeaders: false }, function (addOns) {
                            deferred.resolve(addOns);
                        }, function (erreur) {
                            deferred.reject(erreur);
                        });
                        return deferred.promise;
                    }
                };
                LisaApiBase.prototype._getEtapeAddOn = function (codeEtape) {
                    if (this.addOns && this.addOns.nextsSubProcess) {
                        for (var i in this.addOns.nextsSubProcess) {
                            var addOn = this.addOns.nextsSubProcess[i];
                            if (addOn && addOn.codeEtape === codeEtape) {
                                return addOn;
                            }
                        }
                    }
                    return null;
                };
                LisaApiBase.prototype.DemarrerSousProcessusExterne = function (codeProcessus, delegationPortail, initData, valeurDepart, horsPortail, surTablette) {
                    var valeurDepartInt;
                    /*if (delegationPortail) {
                        var initDataAsString = JSON.stringify(initData);
        
                        var demarrageDetail: Component.IDemandeDeDemarrageDeProcessusDetail = {};
                        demarrageDetail.codeProcessus = codeProcessus;
                        if (valeurDepart)
                            demarrageDetail.valeurDepart = valeurDepart.toString();
                        demarrageDetail.initData = initDataAsString;
        
                        var eventDetail: Component.IManagerEventDetail = {};
                        eventDetail.demandeDeDemarrageDeProcessusDetail = demarrageDetail;
        
                        var mgrEvent = new Component.ManagerEvent(Component.ManagerEventType.DemandeDeDemarrageDeProcessus, eventDetail);
                        Loggers.FLASH.INSTANCE.setValue('action', '_handlePortalMessage');
                        ApplicationApiBase.loggerApplicationApiBase.debug('Send event \'DemarreProcess\' : process=%1, valeurDepart=%2, initData=%3', codeProcessus, valeurDepart, initDataAsString);
                        this.libraryManager.Evennements.SendEvent(mgrEvent);
                        return this.libraryManager.Core.createPromiseSelfResolved(true);
                    } else {
        
                        valeurDepartInt = (valeurDepart == null ? null : parseInt (valeurDepart));
                        
                        return this.libraryManager.Lisa.startStandaloneProcessWithInitialisation(codeProcessus, valeurDepartInt, initData).then(
                            (result) => {
                                if (initData.processusAOuvrirDansUneNouvelleInstance) {
                                    this.libraryManager.Context.PutProcessInWait(result.processId);
                                }
                                this.libraryManager.Lisa.endTransition(result);
                                ApplicationApiBase.loggerApplicationApiBase.debug('StartStandaloneProcessWithInitialisation Success');
                                return true;
                            }, () => {
                                var erreur: Erreur = new Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_APPLICATION_DEMARRAGE_IMPO);
                                ApplicationApiBase.loggerApplicationApiBase.error('StartStandaloneProcessWithInitialisation failed - %1', JSON.stringify(erreur));
                                throw erreur;
                            });
                        }*/
                    return this.libraryManager.Core.createPromiseSelfResolved(true);
                };
                return LisaApiBase;
            }(Lisa.FakeLisaApi));
            Lisa.LisaApiBase = LisaApiBase;
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var LisaApiFactory = /** @class */ (function (_super) {
                __extends(LisaApiFactory, _super);
                function LisaApiFactory() {
                    var _this = _super.call(this, Services.Components.ComponentType.Lisa) || this;
                    _this.wrapped = null;
                    return _this;
                }
                LisaApiFactory.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    var _this = this;
                    if (pCapabilities.ServiceLocal) {
                        if (pCapabilities.InteropAppliBancaire) {
                            this.wrapped = new Lisa.LisaApiPetra();
                        }
                        else {
                            this.wrapped = new Lisa.LisaApiWindows();
                        }
                    }
                    else {
                        this.wrapped = new Lisa.LisaApiFullWeb();
                    }
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer).then(function () {
                        return _this.wrapped.initApi(pLibraryManager);
                    });
                };
                LisaApiFactory.prototype.initApi = function (pLibraryManager) {
                };
                LisaApiFactory.prototype.next = function (codeEtape, valeurSortie) {
                    return this.wrapped.next(codeEtape, valeurSortie);
                };
                LisaApiFactory.prototype.start = function (codeProcess, valeurDepart) {
                    return this.wrapped.start(codeProcess, valeurDepart);
                };
                LisaApiFactory.prototype.DemarrerSousProcessusExterne = function (codeProcessus, delegationPortail, initData, valeurDepart, horsPortail, surTablette) {
                    return this.wrapped.DemarrerSousProcessusExterne(codeProcessus, delegationPortail, initData, valeurDepart, horsPortail, surTablette);
                };
                LisaApiFactory.prototype.getTools = function () {
                    return this.wrapped.getTools();
                };
                /**
                * Récupère les codes des processus LISA
                */
                LisaApiFactory.prototype.getCodesProcessus = function () {
                    return this.wrapped.getCodesProcessus();
                };
                /**
                * Récupère les infos d'un processus LISA
                * @param {string}   codeProcessus
                * code du processus
                */
                LisaApiFactory.prototype.getInfoProcessus = function (codeProcessus) {
                    return this.wrapped.getInfoProcessus(codeProcessus);
                };
                LisaApiFactory.prototype.getHabilitationProcessus = function (codeProcessus) {
                    return this.wrapped.getHabilitationProcessus(codeProcessus);
                };
                LisaApiFactory.prototype.getAddOns = function () {
                    return this.wrapped.getAddOns();
                };
                return LisaApiFactory;
            }(Services.Components.ComponentApiBase));
            Lisa.LisaApiFactory = LisaApiFactory;
            Services.Components.RegistryApi.getInstance().register(LisaApiFactory);
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var LisaApiFullWeb = /** @class */ (function (_super) {
                __extends(LisaApiFullWeb, _super);
                function LisaApiFullWeb() {
                    return _super.call(this, MyWay.Services.PrivatePortalServiceParameters.Instance().Environnement, MyWay.Services.PrivatePortalServiceParameters.Instance().LisaPlaceholders) || this;
                }
                return LisaApiFullWeb;
            }(Lisa.LisaApiBase));
            Lisa.LisaApiFullWeb = LisaApiFullWeb;
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var LisaApiWindows = /** @class */ (function (_super) {
                __extends(LisaApiWindows, _super);
                function LisaApiWindows() {
                    var _this = _super.call(this, MyWay.Services.PrivatePortalServiceParameters.Instance().Environnement, MyWay.Services.PrivatePortalServiceParameters.Instance().LisaPlaceholders) || this;
                    _this._surchargeNext = null;
                    _this._surchargeStart = null;
                    _this._localServiceUrl = null;
                    _this._localServiceUrl = Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl;
                    var self = _this;
                    return _this;
                }
                LisaApiWindows.prototype.initApi = function (pLibraryManager) {
                    var _this = this;
                    _super.prototype.initApi.call(this, pLibraryManager);
                    if (!Services.PrivatePortalServiceParameters.Instance().LocalServiceDisabled) {
                        this.getSurchargeNext(function (surchargeNext) {
                            _this._surchargeNext = surchargeNext;
                        });
                        this.getSurchargeStart(function (surchargeStart) {
                            _this._surchargeStart = surchargeStart;
                        });
                    }
                };
                LisaApiWindows.prototype.next = function (codeEtape, valeurSortie) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    for (var u in this._surchargeNext) {
                        var surchargeNext = this._surchargeNext[u];
                        if (surchargeNext.CodeEtape === codeEtape && surchargeNext.ValeurSortie === valeurSortie) {
                            deferred.resolve(surchargeNext);
                            return deferred.promise;
                        }
                    }
                    return _super.prototype.next.call(this, codeEtape, valeurSortie);
                };
                LisaApiWindows.prototype.start = function (codeProcessus, valeurDepart) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    for (var u in this._surchargeStart) {
                        var surchargeStart = this._surchargeStart[u];
                        if (surchargeStart.CodeProcessus === codeProcessus) {
                            deferred.resolve(surchargeStart);
                            return deferred.promise;
                        }
                    }
                    return _super.prototype.start.call(this, codeProcessus, valeurDepart); //, callback, errorCallback);
                };
                LisaApiWindows.prototype.getSurchargeNext = function (callback) {
                    var url;
                    if (this._localServiceUrl) {
                        url = this._localServiceUrl + '/surcharge-next.json';
                        return this.libraryManager.Core.sendRequest({
                            url: url
                        }).then(function (surchargeNext) {
                            var res = [];
                            for (var index in surchargeNext) {
                                var nextData = surchargeNext[index];
                                res.push(nextData);
                            }
                            callback(res);
                        }, function (erreur) { });
                    }
                };
                LisaApiWindows.prototype.getSurchargeStart = function (callback) {
                    var url;
                    if (this._localServiceUrl) {
                        url = this._localServiceUrl + '/surcharge-start.json';
                        return this.libraryManager.Core.sendRequest({
                            url: url
                        }).then(function (surchargesStart) {
                            var res = [];
                            for (var index in surchargesStart) {
                                var startData = surchargesStart[index];
                                res.push(startData);
                            }
                            callback(res);
                        }, function (erreur) { });
                    }
                };
                return LisaApiWindows;
            }(Lisa.LisaApiBase));
            Lisa.LisaApiWindows = LisaApiWindows;
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des enchainements entre les applications
* @module MyWay.Services.Lisa
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var LisaAgent = /** @class */ (function (_super) {
                __extends(LisaAgent, _super);
                function LisaAgent() {
                    return _super.call(this, Services.Components.ComponentType.Lisa) || this;
                }
                LisaAgent.prototype.init = function (pAgentLibrary, pMessageService, pMessageInitializer) {
                    var _this = this;
                    return _super.prototype.init.call(this, pAgentLibrary, pMessageService, pMessageInitializer).then(function () {
                        if (pMessageInitializer.disableGetStepInfo && pMessageInitializer.disableGetStepInfo === true) {
                            _this.StepCode = pMessageInitializer.codeApplication;
                        }
                        else {
                            return _this.library.Context.GetCurrentStepInfo().then(function (stepInfo) {
                                _this.StepCode = stepInfo.StepCode;
                                _this.library.Context.StepInfo = stepInfo;
                            });
                        }
                    });
                };
                /**
                * Permet de réaliser un enchainement vers l'étape suivante du processus.
                * A la fin de l'enchainement, si l'application suivante est une autre application que l'application courante, celle-ci est détruite.
                * La promesse retournée par la méthode ne doit être utilisée uniquement que pour des tests unitaires.
                * @param {number} valeurSortie la valeur de sortie de l'application
                * @return {IPromesse<LisaCallbackResult>}
                *
                * ~~~ts
                * // Démarrage de l'application AC1
                * serviceAgent.Lisa.Next(1).then((result: LisaCallbackResult) => {
                * ...
                * }).catch((erreur: MyWay.Services.Erreur) => {
                * ...
                * });
                * ~~~
                *
                */
                LisaAgent.prototype.Next = function (valeurSortie) {
                    return this.NextWithStep(this.StepCode, valeurSortie);
                };
                LisaAgent.prototype.NextWithStep = function (stepCode, valeurSortie) {
                    return this.sendMessage(Lisa.Messages.LisaMessageSubject.Next, {
                        valeurSortie: valeurSortie,
                        stepCode: stepCode
                    });
                };
                return LisaAgent;
            }(Services.Components.ComponentAgentBase));
            Lisa.LisaAgent = LisaAgent;
            Services.Components.RegistryAgent.getInstance().register(LisaAgent);
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Impression;
        (function (Impression) {
            var ImpressionApiBase = /** @class */ (function (_super) {
                __extends(ImpressionApiBase, _super);
                function ImpressionApiBase() {
                    var _this = _super.call(this, Services.Components.ComponentType.Impression) || this;
                    //this._urlDistant = PortalServiceParameters.Instance().ImpressionUrl;
                    _this._urlDistantGeneration = Services.PrivatePortalServiceParameters.Instance().ImpressionUrl + "/ServiceRestGcedoc/api/Restitution/RestitutionGceDocAvecGed";
                    _this._urlGetFichierFromGED = Services.PrivatePortalServiceParameters.Instance().GetFichierFromGEDUrl;
                    return _this;
                    //this._urlDistant = PortalServiceParameters.Instance().LocalServiceUrl + "/impression/GenererGceDoc";
                }
                ImpressionApiBase.prototype.isLocal = function () {
                    return false;
                };
                ImpressionApiBase.prototype.genererDocument = function (data, params, authentificationInfo) {
                    // Paramétrage
                    var settings = {};
                    settings.url = this._urlDistantGeneration;
                    settings.responseType = Services.ResponseTypeEnum.JSON;
                    settings.authentificationInfo = authentificationInfo;
                    settings.method = Services.MethodEnum.POST;
                    settings.params = params;
                    settings.withHeaders = true;
                    settings.async = true;
                    settings.timeout = 60000;
                    settings.contentType = Services.ContentTypeEnum.JSON;
                    settings.data = this.convertJson(data);
                    // Appel du service
                    return this.libraryManager.Core.sendRequest(settings);
                };
                ImpressionApiBase.prototype.convertJson = function (data) {
                    var result = JSON.stringify(data).replace(/_attribute_Content\":0/g, "@Content\":\"Id\"").replace(/_attribute_Content:\"1/g, "@Content\":\"Flux\"").replace(/_attribute_/g, "@");
                    result = result.replace(/attributeContent\":0/g, "@Content\":\"Id\"").replace(/attributeContent:\"1/g, "@Content\":\"Flux\"").replace(/attributeId/g, "@id").replace(/attributeXmlns/g, "@xmlns").replace(/attributeCamel/g, "@camel");
                    return result;
                };
                ImpressionApiBase.prototype.getJsonConverti = function (data) {
                    try {
                        return Services.Promesses.createPromiseSelfResolved(this.convertJson(data));
                    }
                    catch (e) {
                        return Services.Promesses.createPromiseSelfError(new Services.Erreur(e));
                    }
                };
                ImpressionApiBase.prototype.imprimerDocument = function (data, params) {
                    return Services.Promesses.getPromesseSelfResoved();
                };
                ImpressionApiBase.prototype.imprimerDocumentLot = function (data, parametresActiveXGlobaux) {
                    return Services.Promesses.getPromesseSelfResoved();
                };
                ImpressionApiBase.prototype.getDocumentGEDLot = function (documents, authentificationInfo) {
                    var _this = this;
                    return Services.Promesses.promesseTryCatch(function (pDefer) {
                        var erreurParams;
                        // Récupération des documents en GED pour les documents du lot qui ne contiennent pas le fichier PDF
                        for (var i = 0; i < documents.length; i++) {
                            // // Préparation du message de traitement
                            // var message: string = 'Traitement du message {0} / {1} ({2}%)';
                            // var pourcentage: number = ((i + 1) / documents.length) * 100;
                            // 
                            // message = message.replace('{0}', String(i + 1));
                            // message = message.replace('{1}', String(documents.length));
                            // message = message.replace('{2}', String(pourcentage.toFixed(0)));
                            // Vérifier que le fichier n'est pas une chaine de caractères vide
                            if (documents[i].fichier === '') {
                                // Le fichier est une chaine de caractères vide, on le réinitialise a undefined
                                documents[i].fichier = undefined;
                            }
                            // Vérifier que l'identifiant GED n'est pas une chaine de caractères vide
                            if (documents[i].idGed === '') {
                                // L'identifiant GED  est une chaine de caractères vide, on le réinitialise a undefined
                                documents[i].idGed = undefined;
                            }
                            // Contrôle sur les paramètres des documents du lot
                            if ((erreurParams = Impression.controleDocumentImpressionLot(documents[i])) !== "") {
                                var messageErreur = 'Le contrôle du document {0} a rapporté une erreur : {1}';
                                messageErreur = messageErreur.replace('{0}', String(i + 1));
                                messageErreur = messageErreur.replace('{1}', erreurParams);
                                pDefer.reject(new Services.Erreur(messageErreur));
                                return;
                            }
                            // Contrôle sur le composant applicatif et si non renseigné, mettre par défaut "CONTELEC"
                            if (!Services.Controle.StaticStringControle.isStringNotEmpty(documents[i].composantApplicatif)) {
                                documents[i].composantApplicatif = "CONTELEC";
                            }
                            // Contrôle sur le code établissement et si renseigné, utilisé ce code établissement
                            if (Services.Controle.StaticStringControle.isStringNotEmpty(documents[i].codeEtablissement)) {
                                authentificationInfo.codeEtablissement = documents[i].codeEtablissement;
                            }
                            // Contrôle sur le document du lot pour vérifier s'il est présent
                            if (!Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(documents[i].fichier)) {
                                // Vérication des données d'authentification
                                if (authentificationInfo.codeEtablissement && authentificationInfo.agentConnecte) {
                                    var settings = {};
                                    settings.url = _this._urlGetFichierFromGED;
                                    settings.responseType = Services.ResponseTypeEnum.JSON;
                                    settings.authentificationInfo = authentificationInfo;
                                    settings.method = Services.MethodEnum.GET;
                                    settings.params = {
                                        idDocument: documents[i].idGed,
                                        codeApplication: documents[i].composantApplicatif
                                    };
                                    settings.withHeaders = true;
                                    settings.async = false;
                                    settings.contentType = Services.ContentTypeEnum.JSON;
                                    settings.timeout = 60000;
                                    /*
                                    this.libraryManager.Core.sendRequest(settings).then((result?: any) => {
                                        documents[i].fichier = result.fichier.contenu;
                                    }, (error: MyWay.Services.Erreur) => {
                                        var messageErreur: string = 'La récupération du document {0} du lot a généré une erreur : {1}';
                                        messageErreur = messageErreur.replace('{0}', String(i + 1));
                                        messageErreur = messageErreur.replace('{1}', error.libelle);
                                        pDefer.reject(new Erreur(messageErreur));
                                    });
                                    */
                                    ///*
                                    Services.CoreCommon.SendRequest(settings, function (result) {
                                        documents[i].fichier = result.fichier.contenu;
                                    }, function (error) {
                                        var messageErreur = 'La récupération du document {0} du lot a généré une erreur : {1}';
                                        messageErreur = messageErreur.replace('{0}', String(i + 1));
                                        messageErreur = messageErreur.replace('{1}', error.libelle);
                                        pDefer.reject(new Services.Erreur(messageErreur));
                                    });
                                    //*/
                                }
                                else {
                                    pDefer.reject(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_COMMUNICATION_PARAMETRES_INSUFFISANTS));
                                    return;
                                }
                            }
                        }
                        pDefer.resolve(documents);
                    });
                };
                /**
                * Permet de gérer les erreurs captés
                * @param erreur {string} Le message d'erreur
                */
                ImpressionApiBase.prototype.gererErreur = function (libelleErreur) {
                    ImpressionApiBase.logger.error(libelleErreur);
                    return Services.Promesses.createPromiseSelfError(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, [libelleErreur]));
                };
                ImpressionApiBase.CLASS_NAME = 'MyWay.Services.Impression.ImpressionApiBase';
                ImpressionApiBase.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ImpressionApiBase.CLASS_NAME);
                return ImpressionApiBase;
            }(Services.Components.ComponentApiBase));
            Impression.ImpressionApiBase = ImpressionApiBase;
        })(Impression = Services.Impression || (Services.Impression = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Impression;
        (function (Impression) {
            var ImpressionApiFactory = /** @class */ (function (_super) {
                __extends(ImpressionApiFactory, _super);
                function ImpressionApiFactory() {
                    var _this = _super.call(this, Services.Components.ComponentType.Impression) || this;
                    _this.wrapped = null;
                    return _this;
                }
                ImpressionApiFactory.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    var _this = this;
                    if (pCapabilities.ServiceLocal && pCapabilities.SIRIS && pCapabilities.InteropAppliBancaire) {
                        this.wrapped = new Impression.ImpressionApiPetra();
                    }
                    else {
                        this.wrapped = new Impression.ImpressionApiFullWeb();
                    }
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer).then(function () {
                        return _this.wrapped.init(pCapabilities, pLibraryManager, pApiInitializer);
                    });
                };
                ImpressionApiFactory.prototype.genererDocument = function (data, params, authentificationInfo) {
                    return this.wrapped.genererDocument(data, params, authentificationInfo);
                };
                ImpressionApiFactory.prototype.getJsonConverti = function (data) {
                    return this.wrapped.getJsonConverti(data);
                };
                ImpressionApiFactory.prototype.imprimerDocument = function (data, params) {
                    return this.wrapped.imprimerDocument(data, params);
                };
                ImpressionApiFactory.prototype.imprimerDocumentLot = function (data, parametresActiveXGlobaux) {
                    return this.wrapped.imprimerDocumentLot(data, parametresActiveXGlobaux);
                };
                ImpressionApiFactory.prototype.getDocumentGEDLot = function (documents, authentificationInfo) {
                    return this.wrapped.getDocumentGEDLot(documents, authentificationInfo);
                };
                return ImpressionApiFactory;
            }(Services.Components.ComponentApiBase));
            Impression.ImpressionApiFactory = ImpressionApiFactory;
            Services.Components.RegistryApi.getInstance().register(ImpressionApiFactory);
        })(Impression = Services.Impression || (Services.Impression = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Impression;
        (function (Impression) {
            var ImpressionApiFullWeb = /** @class */ (function (_super) {
                __extends(ImpressionApiFullWeb, _super);
                function ImpressionApiFullWeb() {
                    return _super.call(this) || this;
                }
                ImpressionApiFullWeb.prototype.imprimerDocument = function (data, params) {
                    // Sauvegarde du PDF
                    Impression.ImpressionApiBase.logger.debug("Lancement de la sauvegarde du PDF");
                    return this.libraryManager.Fichier.saveAs(data, MyWay.Services.Fichier.TYPE_FICHIER.PDF, params.serializedImpressionParams.obligatoires.nomFichier, MyWay.Services.Fichier.TYPE_DONNEES_A_SAUVER.BASE64);
                };
                ImpressionApiFullWeb.prototype.imprimerDocumentLot = function (data, parametresActiveXGlobaux) {
                    var lPromises = [];
                    for (var i = 0; i < data.length; i++) {
                        // Sauvegarde du PDF
                        lPromises.push(this.libraryManager.Fichier.saveAs(data[i].fichier, MyWay.Services.Fichier.TYPE_FICHIER.PDF, data[i].impressionParams.obligatoires.nomFichier, MyWay.Services.Fichier.TYPE_DONNEES_A_SAUVER.BASE64));
                    }
                    return Services.Promesses.getServiceDePromesse().all(lPromises).catch(function (e) {
                        var messageErreur = 'Une erreur est survenue lors de la sauvegarde des documents du lot : {0}';
                        messageErreur = messageErreur.replace('{0}', e.codeLibelle);
                        throw new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, [messageErreur]);
                    });
                };
                return ImpressionApiFullWeb;
            }(Impression.ImpressionApiBase));
            Impression.ImpressionApiFullWeb = ImpressionApiFullWeb;
        })(Impression = Services.Impression || (Services.Impression = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Impression;
        (function (Impression) {
            var ImpressionApiPetra = /** @class */ (function (_super) {
                __extends(ImpressionApiPetra, _super);
                function ImpressionApiPetra() {
                    var _this = _super.call(this) || this;
                    _this._urlLocal = Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl + "/impression/";
                    return _this;
                }
                ImpressionApiPetra.prototype.imprimerDocument = function (data, params) {
                    var _this = this;
                    return Services.Promesses.promesseTryCatch(function (pDefer) {
                        // Ouverture de la modale
                        _this.libraryManager.Libelle.afficherMessage(Services.Libelle.LibelleModel.TEC.IMPRESSION_IMPRESSION_EN_COURS, Services.Libelle.TYPE_AFFICHAGE.VIDE, null, 0, null, function () {
                            // Appel du service d'impression
                            _this._imprimerDocument(data, params).then(function () {
                                // On ferme la modale et on appelle le callback
                                Services.ServiceManager.Instance().Library.Display.FermerModalMessage();
                                Impression.ImpressionApiBase.logger.debug("ServiceApi.Impression.imprimerDocument Success");
                                pDefer.resolve();
                            }, function (erreur) {
                                // On ferme la modale et on appelle le callback
                                Services.ServiceManager.Instance().Library.Display.FermerModalMessage();
                                Impression.ImpressionApiBase.logger.error("ServiceApi.Impression.imprimerDocument failed %1", JSON.stringify(erreur));
                                pDefer.reject(erreur);
                            });
                        });
                    });
                };
                ImpressionApiPetra.prototype.imprimerDocumentLot = function (data, parametresActiveXGlobaux) {
                    var _this = this;
                    return Services.Promesses.promesseTryCatch(function (pDefer) {
                        // Ouverture de la modale
                        _this.libraryManager.Libelle.afficherMessage(Services.Libelle.LibelleModel.TEC.IMPRESSION_IMPRESSION_EN_COURS, Services.Libelle.TYPE_AFFICHAGE.VIDE, null, 0, null, function () {
                            // Appel du service d'impression
                            _this._imprimerDocumentLot(data, parametresActiveXGlobaux).then(function () {
                                // On ferme la modale et on appelle le callback
                                Services.ServiceManager.Instance().Library.Display.FermerModalMessage();
                                Impression.ImpressionApiBase.logger.debug("ServiceApi.Impression.imprimerDocumentLot success");
                                pDefer.resolve();
                            }, function (erreur) {
                                // On ferme la modale et on appelle le callback
                                Services.ServiceManager.Instance().Library.Display.FermerModalMessage();
                                var messageErreur = 'Une erreur est survenue lors de la l\'impression des documents du lot : {0}';
                                messageErreur = messageErreur.replace('{0}', erreur.libelle);
                                pDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, [messageErreur]));
                            });
                        });
                    });
                };
                ImpressionApiPetra.prototype._imprimerDocument = function (data, params) {
                    // Paramétrage
                    var settings = {};
                    settings.url = this._urlLocal + "ImprimerSansGceDoc";
                    settings.responseType = null;
                    settings.method = Services.MethodEnum.POST;
                    settings.params = params;
                    settings.async = true;
                    settings.timeout = 3600000;
                    settings.contentType = Services.ContentTypeEnum.JSON;
                    settings.data = data;
                    settings.cache = false;
                    // Appel du service
                    return this.libraryManager.Core.sendRequest(settings);
                };
                ImpressionApiPetra.prototype._imprimerDocumentLot = function (data, parametresActiveXGlobaux) {
                    // Paramétrage
                    var settings = {};
                    settings.url = this._urlLocal + "ImprimerLotSansGceDoc";
                    settings.responseType = null;
                    settings.params = parametresActiveXGlobaux;
                    settings.method = Services.MethodEnum.POST;
                    settings.async = true;
                    settings.timeout = 3600000;
                    settings.contentType = Services.ContentTypeEnum.JSON;
                    settings.data = data;
                    // Appel du service
                    return this.libraryManager.Core.sendRequest(settings);
                };
                return ImpressionApiPetra;
            }(Impression.ImpressionApiBase));
            Impression.ImpressionApiPetra = ImpressionApiPetra;
        })(Impression = Services.Impression || (Services.Impression = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilite
* @module MyWay.Services.Mobilite
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            var OutilsIp = /** @class */ (function () {
                function OutilsIp() {
                }
                /**
                 * Vérifie si l'adresse IP passé en paramètre est bien valide
                 * @param {string} : adresse IP
                 * @return {IPromesse<boolean>}
                 */
                OutilsIp.isAdresseIpValide = function (adresseIp) {
                    var lFormatIpv4 = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
                    var lFormatIpv6 = /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/;
                    return (lFormatIpv4.test(adresseIp) || lFormatIpv6.test(adresseIp)) ? true : false;
                };
                ;
                return OutilsIp;
            }());
            Mobilite.OutilsIp = OutilsIp;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilite
* @module MyWay.Services.Mobilite
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            /**Régexp pour déterminer les IP interne, soit commençant par 126. **/
            Mobilite.PLAGES_IP = /^126|^172/;
            var PlageReseau = /** @class */ (function () {
                function PlageReseau(_data) {
                    this._data = _data;
                    this._plagesReseau = null;
                    try {
                        this._plagesReseau = this.formatagePlages(_data);
                    }
                    catch (erreur) {
                        throw erreur;
                    }
                }
                ;
                PlageReseau.prototype.formatagePlages = function (data) {
                    var plagesReseau = data.split("*");
                    switch (plagesReseau[0]) {
                        case "1": {
                            return plagesReseau[1].split(",").map(function (value) {
                                var arrayPlages = value.split("/");
                                var valeurAdresseIp = arrayPlages[0];
                                if (!Mobilite.OutilsIp.isAdresseIpValide(valeurAdresseIp)) {
                                    throw new Services.Erreur("La valeur de l'adresseIp est incorrecte :" + valeurAdresseIp);
                                }
                                var valeurMasque = Number(arrayPlages[1]);
                                if (isNaN(valeurMasque) || valeurMasque < 0 || valeurMasque > 32) {
                                    throw new Services.Erreur("La valeur du masque réseau est incorrecte :" + valeurMasque);
                                }
                                var plageFormatee = {
                                    adresseIP: valeurAdresseIp,
                                    masque: valeurMasque
                                };
                                return plageFormatee;
                            });
                        }
                        default: {
                            throw new Services.Erreur("Type de plage réseau incorrecte");
                        }
                    }
                };
                PlageReseau.prototype.isDansPlageReseau = function (adresseIpClient) {
                    var _this = this;
                    return this._plagesReseau.some(function (plageReseau) {
                        var masqueBinaire = _this.convertirMasqueEnBinaire(plageReseau.masque);
                        var adresseBinaireClient = _this.convertirIPEnBinaire(adresseIpClient);
                        var sousReseau = _this.recupererSousReseau(_this.convertirIPEnBinaire(plageReseau.adresseIP), masqueBinaire);
                        var sousReseauClient = _this.recupererSousReseau(adresseBinaireClient, masqueBinaire);
                        if (sousReseau === sousReseauClient) {
                            return true;
                        }
                    });
                };
                ;
                PlageReseau.prototype.convertirIPEnBinaire = function (adresseIp) {
                    var lBinaire = "";
                    var lOctetsIp = adresseIp.split(".").map(Number);
                    lOctetsIp.forEach(function (pOctetIp) {
                        var lOctetIp = pOctetIp.toString(2);
                        var lOctetsManquants = 8 - lOctetIp.length;
                        lOctetIp = Array(lOctetsManquants + 1).join("0") + lOctetIp;
                        lBinaire += lOctetIp;
                    });
                    return lBinaire;
                };
                ;
                PlageReseau.prototype.convertirMasqueEnBinaire = function (valeurMasque) {
                    return Array(valeurMasque).join("1") + Array(32 - valeurMasque).join("0");
                };
                ;
                PlageReseau.prototype.recupererSousReseau = function (adresseIp, masque) {
                    var lAdresseIP = parseInt(adresseIp, 2);
                    var lMasque = parseInt(masque, 2);
                    var lSousReseau = lMasque & lAdresseIP;
                    return lSousReseau.toString(2);
                };
                return PlageReseau;
            }());
            Mobilite.PlageReseau = PlageReseau;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilité : Permet de récupérer les informations de l'environnement utilisateur
* @module MyWay.Services.Mobilite
* @author Laurie Marchaterre
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            /**
            *  Classe permettant d'accéder aux données de mobilité
            */
            var MobiliteManager = /** @class */ (function (_super) {
                __extends(MobiliteManager, _super);
                function MobiliteManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Mobilite) || this;
                    _this.api = null;
                    _this.contextKey = 'MOBILITE';
                    _this.recupIpPromesse = null;
                    _this.recupIpTimeout = null;
                    _this.maximumTimeout = 60 * 60 * 1000;
                    return _this;
                }
                MobiliteManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                        _this.recupererAdresseIp();
                    });
                };
                /**
                 * Méthode qui récupère dans le context (parametresCompatables) si on a une caisse automatique connectées
                 * @return {boolean} retourne 'true' si on a une caisse connectée sinon 'false'
                 */
                MobiliteManager.prototype.getCaisseAuto = function () {
                    var parametresComptables = this.library.Context.GetParametresComptables();
                    if (parametresComptables && parametresComptables.typeCA) {
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                /**
                 * Méthode qui vérifie que l'écran de l'utilisateur est tactile
                 * @return {IPromesse<boolean>}   Si true, on a un écran tactile, on retourne false.
                 */
                MobiliteManager.prototype.getEcranTactile = function () {
                    return this.api.estEcranTactile().then(function (result) {
                        MobiliteManager.logger.debug('Ecran principal tactile - statut : %1', result);
                        return result;
                    }, function (erreur) {
                        MobiliteManager.logger.warn('Erreur lors de la récupération de l\'information: écran tactile', JSON.stringify(erreur));
                        throw new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_MOBILITE_RECUP_TYPE_ECRAN_IMPOSSIBLE);
                    });
                };
                /**
                 * Méthode qui récupère dans le navigateur utilisé par l'utilisateur
                 * @return {object} INavigateur : retourne le nom et la version du navigateur
                 */
                MobiliteManager.prototype.getNavigateur = function () {
                    var lNavigateur = { nom: null, version: null };
                    lNavigateur.nom = this.library.Core.GetBrowser();
                    lNavigateur.version = this.library.Core.GetBrowserVersion();
                    MobiliteManager.logger.debug('Le navigateur utilisé est %1', JSON.stringify(lNavigateur));
                    return this.library.Core.createPromiseSelfResolved(lNavigateur);
                };
                /**
                 * Méthode qui récupère dans la plateforme (système d'exploitation) du poste utilisateur
                 * @return {enum} PLATEFORME : retourne le type de plateforme
                 */
                MobiliteManager.prototype.getPlateforme = function () {
                    return this.api.getPlateforme()
                        .then(function (result) {
                        MobiliteManager.logger.debug('La plateforme de l\'utilisateur est %1', Mobilite.PLATEFORME[result]);
                        return result;
                    }, function (erreur) {
                        MobiliteManager.logger.warn('Impossible de récupérer la plateforme de la machine');
                        throw new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_MOBILITE_RECUP_PLATEFORME_MACHINE_IMPOSSIBLE);
                    });
                };
                /**
                 * Méthode qui retourne la résolution de l'écran du poste utilisateur
                 * @return
                 */
                MobiliteManager.prototype.getResolutionEcran = function () {
                    return this.api.getResolutionEcran()
                        .then(function (result) {
                        MobiliteManager.logger.debug('La résolution de l\'écran principal est %1', JSON.stringify(result));
                        return result;
                    }, function (erreur) {
                        MobiliteManager.logger.warn('Impossible de récupérer la résolution de l\'écran');
                        throw new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_MOBILITE_RECUP_RESOLUTION_ECRAN_IMPOSSIBLE);
                    });
                };
                /**
                 * Méthode qui récupère la liste les informations de la machine de l'utilisateur.
                 * Les informations retournées sont :
                 *     - La plateforme
                 *     - La largeur de l'écran
                 *     - La hauteur de l'écran
                 *     - La résolution Minimale MyWay (boolean)
                 *     - Ecran tactile (boolean)
                 *     - Le navigateur
                 * @return {IPromesse<IInfoMachine>} : IInfoMachine
                 * ~~~ts
                 * serviceManager.mobilite.getInfoMachine().then((result: IInfoMachine) => {
                 *  // Renvoi les infos machine
                 * }).catch((erreur: MyWay.Services.Erreur) => {
                 *  // Renvoi une erreur
                 * });
                 * ~~~
                 */
                MobiliteManager.prototype.getInfoMachine = function () {
                    var infoMachine = {};
                    var promesses = [];
                    MobiliteManager.logger.debug('Start getInfoMachine');
                    promesses.push(this.getPlateforme()
                        .then(function (plateforme) {
                        infoMachine.plateforme = plateforme;
                    }));
                    promesses.push(this.getResolutionEcran()
                        .then(function (result) {
                        infoMachine.hauteurEcran = result.hauteur;
                        infoMachine.largeurEcran = result.largeur;
                    }));
                    promesses.push(this.getEcranTactile()
                        .then(function (result) {
                        infoMachine.ecranTactile = result;
                    }));
                    promesses.push(this.getNavigateur()
                        .then(function (result) {
                        infoMachine.navigateur = result;
                    }));
                    return Services.Promesses.all(promesses)
                        .then(function () {
                        return infoMachine;
                    }, function (erreur) {
                        MobiliteManager.logger.warn('getInfoMachine Failed', JSON.stringify(erreur));
                        throw erreur;
                    });
                };
                /**
                 * Permet de récupérer l'adresse IP du poste, soit dans le contexte global, soit par l'intermédiaire du Service Local
                 * @return {IPromesse<string>} : retourne l'adresse IP du poste
                 */
                MobiliteManager.prototype.recupererAdresseIp = function () {
                    var _this = this;
                    if (this.recupIpPromesse !== null && (Date.now() - this.recupIpTimeout) < this.maximumTimeout) {
                        return this.recupIpPromesse;
                    }
                    Services.Promesses.promesseTryCatch(function (pDefer) {
                        _this.recupIpPromesse = pDefer.promise;
                        _this.recupIpTimeout = Date.now();
                        var lDonneesMobilite = JSON.parse(_this.library.Context.GetFromContext(_this.contextKey));
                        if (lDonneesMobilite && lDonneesMobilite.adresseIp !== null && (Date.now() - lDonneesMobilite.timeout) < _this.maximumTimeout) {
                            pDefer.resolve(lDonneesMobilite.adresseIp);
                        }
                        else {
                            _this.api.getAdresseIp()
                                .then(function (adresseIp) {
                                if (!Mobilite.OutilsIp.isAdresseIpValide(adresseIp)) {
                                    return pDefer.reject(new Services.Erreur("Format de l'adresse IP est incorrect"));
                                }
                                var lDonneesMobiliteContext = {
                                    adresseIp: adresseIp,
                                    timeout: _this.recupIpTimeout
                                };
                                _this.library.Context.AddToContext(Services.Context.StorageLevel.Global, _this.contextKey, JSON.stringify(lDonneesMobiliteContext));
                                pDefer.resolve(adresseIp);
                            }, function (e) {
                                _this.recupIpPromesse = null;
                                MobiliteManager.logger.warn(e.codeLibelle, JSON.stringify(e));
                                pDefer.reject(e);
                            });
                        }
                    });
                    return this.recupIpPromesse;
                };
                /**
                 * Permet de savoir si on est connecté à un réseau
                 * @return {IPromesse<boolean>} : retourne 'true' si on est connecté, sinon 'false'
                 */
                // private estConnecte(): IPromesse<boolean> {
                //     return this.api.estConnecte()
                //         .then((result: boolean): boolean => {
                //             MobiliteManager.logger.debug('Le statut de connection à un réseau est %1', result);
                //             return result;
                //         }, (erreur: Erreur) => {
                //             MobiliteManager.logger.warn('estConnecte Failed', JSON.stringify(erreur));
                //             throw erreur;
                //         });
                // }
                /**
                 * Détermine à quel type de réseau correspond l'adresse IP.
                 * @param {string} : adresse IP Client
                 * @return {TYPE_RESEAU} : retourne le type de réseau sur lequel on est connecté
                 */
                MobiliteManager.prototype.determinerTypeReseau = function (adresseIpClient) {
                    /** Vérification si on a une adresse IP Caisse d'Epargne **/
                    var formatIp = Mobilite.PLAGES_IP;
                    if (!formatIp.test(adresseIpClient)) {
                        MobiliteManager.logger.warn('Type de réseau: %1 - Adresse IP: %2', Mobilite.TYPE_RESEAU[Mobilite.TYPE_RESEAU.INCONNU], adresseIpClient);
                        return this.library.Core.createPromiseSelfResolved(Mobilite.TYPE_RESEAU.INCONNU);
                    }
                    /** Détermination du type de reseau **/
                    return this.api.getPlagesReseau().then(function (result) {
                        var plagesVPN = new Mobilite.PlageReseau(result.configuration.VPN);
                        var plagesWifi = new Mobilite.PlageReseau(result.configuration.WIFI);
                        if (plagesVPN.isDansPlageReseau(adresseIpClient)) {
                            MobiliteManager.logger.debug('Type de réseau: %1', Mobilite.TYPE_RESEAU[Mobilite.TYPE_RESEAU.VPN]);
                            return Mobilite.TYPE_RESEAU.VPN;
                        }
                        else if (plagesWifi.isDansPlageReseau(adresseIpClient)) {
                            MobiliteManager.logger.debug('Type de réseau: %1', Mobilite.TYPE_RESEAU[Mobilite.TYPE_RESEAU.WIFI_AGENCE]);
                            return Mobilite.TYPE_RESEAU.WIFI_AGENCE;
                        }
                        MobiliteManager.logger.debug('Type de réseau: %1', Mobilite.TYPE_RESEAU[Mobilite.TYPE_RESEAU.FILAIRE]);
                        return Mobilite.TYPE_RESEAU.FILAIRE;
                    });
                };
                /**
                 * Permet de savoir à quel type de réseau on est connecté.
                 * @return {IPromesse<TYPE_RESEAU>}
                 *      - CONNECTE : Connecté (réseau inconnu)
                 *      - OFFLINE: Déconnecté
                 *
                 * ~~~ts
                 * serviceManager.mobilite.getReseau().then((result: TYPE_RESEAU) => {
                 * // Renvoi le type de connexion
                 * ...
                 * * }).catch((erreur: MyWay.Services.Erreur) => {
                 * // Renvoi une erreur
                 * ...
                 * });
                 * ~~~
                 */
                MobiliteManager.prototype.getReseau = function () {
                    var _this = this;
                    //    return this.estConnecte().then((result: boolean) => {
                    //         if (!result) {
                    //             MobiliteManager.logger.debug('Type de réseau : %1', TYPE_RESEAU[TYPE_RESEAU.DECONNECTE]);
                    //             return TYPE_RESEAU.DECONNECTE;
                    //         }
                    return this.recupererAdresseIp().then(function (adresseIp) {
                        MobiliteManager.logger.debug('Adresse IP du poste %1', adresseIp);
                        return _this.determinerTypeReseau(adresseIp);
                    }, function (e) {
                        MobiliteManager.logger.warn('Impossible de récupérer l\'adresse IP du poste : %1', JSON.stringify(e.codeLibelle));
                        return Mobilite.TYPE_RESEAU.INCONNU;
                    });
                    // }, (erreur: Erreur) => {
                    //         MobiliteManager.logger.warn('Impossible de récupérer le Type de réseau: %1', JSON.stringify(erreur));
                    //         throw new Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_MOBILITE_RECUP_RESEAU_IMPOSSIBLE);
                    // });
                };
                /**
                 * Méthode qui récupère la liste des périphériques connectés.
                 * Les périphériques retournées sont :
                 *     - Les caisses auto
                 *     - Les tablettes de signature Wacom
                 * @return {IPromesse<IPeripherique[]>} liste de IPeripherique
                 * ~~~ts
                 * serviceManager.mobilite.getPeripheriques().then((result: IPeripherique[]) => {
                 *  // Renvoi un tableau de Peripherique
                 * }).catch((erreur: MyWay.Services.Erreur) => {
                 *  // Renvoi une erreur
                 * });
                 * ~~~
                 */
                MobiliteManager.prototype.getPeripheriques = function () {
                    var listePeripheriques = [];
                    if (this.getCaisseAuto()) {
                        listePeripheriques.push(new Mobilite.CaisseAuto());
                    }
                    var promesses = [];
                    promesses.push(this.getTablettesSignatures()
                        .then(function (result) {
                        listePeripheriques = listePeripheriques.concat(result);
                    }));
                    return Services.Promesses.all(promesses)
                        .then(function () {
                        MobiliteManager.logger.debug('Liste des périphériques connectés: %1', JSON.stringify(listePeripheriques));
                        return listePeripheriques;
                    }, function (erreur) {
                        MobiliteManager.logger.warn('Erreur lors de la récupération la liste des périphériques connectés: %1', JSON.stringify(erreur));
                        throw erreur;
                    });
                };
                /**
                 * Méthode qui récupère la liste des périphériques connectés par Type.
                 * @return {IPromesse<T[]>} liste de périphériques du type demandé
                 * ~~~ts
                 * serviceManager.mobilite.getPeripheriquesParType().then((result: T[]) => {
                 *  // Renvoi un tableau de Peripherique
                 * }).catch((erreur: MyWay.Services.Erreur) => {
                 *  // Renvoi une erreur
                 * });
                 * ~~~
                 */
                MobiliteManager.prototype.getPeripheriquesParType = function (type) {
                    return this.getPeripheriques().then(function (listePeripheriques) {
                        var listePeripheriquesParType = listePeripheriques
                            .filter(function (peripherique) { return peripherique.typePeripherique === type; })
                            .map(function (peripherique) { return peripherique; });
                        MobiliteManager.logger.debug('Liste de périphériques de type %1 connectées: %2', Mobilite.TYPE_PERIPHERIQUE[type], JSON.stringify(listePeripheriquesParType));
                        return listePeripheriquesParType;
                    })
                        .catch(function (erreur) {
                        MobiliteManager.logger.warn('Erreur lors de la récupération la liste des périphériques connectés: %1', JSON.stringify(erreur));
                        throw erreur;
                    });
                };
                /**
                 * Méthode qui appel le Service Local pour savoir si on a des tablettes de signatures Wacom connectées
                 * @return {ITabletteSignature[]} retourne  les listes des tablettes de signature Wacom connectées
                 */
                MobiliteManager.prototype.getTablettesSignatures = function () {
                    return this.api.listeTablettesSignatures().catch(function (erreur) {
                        throw (new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_MOBILITE_RECUP_LISTE_TABLETTES_SIGNATURES_IMPOSSIBLE));
                    });
                };
                MobiliteManager.CLASS_NAME = 'MyWay.Services.Mobilite.MobiliteManager';
                MobiliteManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(MobiliteManager.CLASS_NAME);
                return MobiliteManager;
            }(Services.Components.ComponentManagerBase));
            Mobilite.MobiliteManager = MobiliteManager;
            Services.Components.RegistryManager.getInstance().register(MobiliteManager);
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Fichier;
        (function (Fichier) {
            var FichierManagerMessage = /** @class */ (function (_super) {
                __extends(FichierManagerMessage, _super);
                function FichierManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Fichier) || this;
                }
                FichierManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Fichier.FichierMessageSubject.SaveAs: {
                            var lContent = pMessage.message;
                            var data = lContent.data;
                            var type = lContent.type;
                            var nomFichier = lContent.nomFichier;
                            var typeDonnees = lContent.typeDonnees;
                            return this.managerInstance.saveAs(data, type, nomFichier, typeDonnees);
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                FichierManagerMessage.CLASS_NAME = 'MyWay.Services.Fichier.FichierManagerMessage';
                FichierManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(FichierManagerMessage.CLASS_NAME);
                return FichierManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Fichier.FichierManagerMessage = FichierManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(FichierManagerMessage);
        })(Fichier = Services.Fichier || (Services.Fichier = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des données délocalisées
* @module MyWay.Services.DonneesDelocalisees
* Dépendances: Controle, Donnees, indexedDB
* classe : DonneesDelocaliseesManager - public - Classe permettant la gestion des données délocalisées
* classe : DonneesDelocaliseesTools - public - Classe encapsulant les outils de debug et de diagnostics des données délocalisées - Ne doit pas être utilisé en production
* interface : ObjectDataDescription – privé - Description d'un objet de données
*/
// TODO: Peut-on avoir des objets de données délocalisées avec des propriétés valorisées autrement qu'avec des chaines de caractères?
// Si oui -> il faut en tenir compte pour la recherche par critère
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var DonneesDelocalisees;
        (function (DonneesDelocalisees) {
            var DonneesDelocaliseesManagerExtended = /** @class */ (function (_super) {
                __extends(DonneesDelocaliseesManagerExtended, _super);
                function DonneesDelocaliseesManagerExtended() {
                    return _super.call(this, Services.Components.ComponentType.DonneesDelocalisees) || this;
                }
                /**
                * Permet de récupérer des données délocalisées
                * @param numEtablissement {string} identifiant de la Table des tables (numéro d'établissement). Si null, c'est celui du contexte qui est utilisé.
                * @param objectDataName {string} nom de l'objet de données
                */
                DonneesDelocaliseesManagerExtended.prototype.getDonneesDelocalisees = function (numEtablissement, objectDataName) {
                    return this.manager.getDonneesDelocalisees(numEtablissement, objectDataName);
                };
                /**
                * Permet de récupérer une liste de données délocalisées
                * @param numEtablissement {string} Numéro d'établissement. Si null, c'est celui du contexte qui est utilisé.
                * @param objectDataNames {Array<string>} Liste des noms d'objets de données
                */
                DonneesDelocaliseesManagerExtended.prototype.getListeDonneesDelocalisees = function (numEtablissement, objectDataNames) {
                    return this.manager.getListeDonneesDelocalisees(numEtablissement, objectDataNames);
                };
                /**
                * Permet de récupérer le libellé du code d'un objet de données
                * @param numEtablissement {string} identifiant de la Table des tables (numéro d'établissement)
                * @param objectDataName {string} nom de l'objet de données
                * @param code {string} code pour lequel on veut obtenir le libellé
                */
                DonneesDelocaliseesManagerExtended.prototype.getRubriqueLibelle = function (numEtablissement, objectDataName, code) {
                    return this.manager.getRubriqueLibelle(numEtablissement, objectDataName, code);
                };
                /**
                * Permet de récupérer les données d'un objet de données correspondant aux critères choisis
                * @param numEtablissement {string} identifiant de la Table des tables (numéro d'établissement)
                * @param objectDataName {string} nom de l'objet de données
                * @param criteres {Array<ObjectDataCritere>} critères de recherche des données
                */
                DonneesDelocaliseesManagerExtended.prototype.getDonneesParCriteres = function (numEtablissement, objectDataName, criteres) {
                    return this.manager.getDonneesParCriteres(numEtablissement, objectDataName, criteres);
                };
                return DonneesDelocaliseesManagerExtended;
            }(Services.Components.ComponentManagerExtendedBase));
            DonneesDelocalisees.DonneesDelocaliseesManagerExtended = DonneesDelocaliseesManagerExtended;
            Services.Components.RegistryManagerExtended.getInstance().register(DonneesDelocaliseesManagerExtended);
        })(DonneesDelocalisees = Services.DonneesDelocalisees || (Services.DonneesDelocalisees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var DonneesDelocalisees;
        (function (DonneesDelocalisees) {
            var DonneesDelocaliseesManagerMessage = /** @class */ (function (_super) {
                __extends(DonneesDelocaliseesManagerMessage, _super);
                function DonneesDelocaliseesManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.DonneesDelocalisees) || this;
                }
                DonneesDelocaliseesManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.GetDonneesDelocalisees: {
                            var lContent = pMessage.message;
                            var numEtablissement = lContent.numEtablissement;
                            var objectDataName = lContent.objectDataName;
                            return this.managerInstance.getDonneesDelocalisees(numEtablissement, objectDataName);
                        }
                        case DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.GetListeDonneesDelocalisees: {
                            var lContent = pMessage.message;
                            var numEtablissement = lContent.numEtablissement;
                            var objectDataNames = lContent.objectDataNames;
                            return this.managerInstance.getListeDonneesDelocalisees(numEtablissement, objectDataNames);
                        }
                        case DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.GetRubriqueLibelle: {
                            var lContent = pMessage.message;
                            var numEtablissement = lContent.numEtablissement;
                            var objectDataName = lContent.objectDataName;
                            var code = lContent.code;
                            return this.managerInstance.getRubriqueLibelle(numEtablissement, objectDataName, code);
                        }
                        case DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.GetDonneesParCriteres: {
                            var lContent = pMessage.message;
                            var numEtablissement = lContent.numEtablissement;
                            var objectDataName = lContent.objectDataName;
                            var criteres = lContent.criteres;
                            return this.managerInstance.getDonneesParCriteres(numEtablissement, objectDataName, criteres);
                        }
                        case DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.ReInitDbDonneesDelocalisees: {
                            var lContent = pMessage.message;
                            return this.managerInstance.reInitDbDonneesDelocalisees();
                        }
                        case DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.GetTDTById: {
                            var lContent = pMessage.message;
                            var idTDT = lContent.idTDT;
                            return this.managerInstance.getTDTById(idTDT);
                        }
                        case DonneesDelocalisees.Messages.DonneesDelocaliseesMessageSubject.DeleteTDTById: {
                            var lContent = pMessage.message;
                            var idTDT = lContent.idTDT;
                            return this.managerInstance.deleteTDTById(idTDT);
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                DonneesDelocaliseesManagerMessage.CLASS_NAME = 'MyWay.Services.DonneesDelocalisees.DonneesDelocaliseesManagerMessage';
                DonneesDelocaliseesManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(DonneesDelocaliseesManagerMessage.CLASS_NAME);
                return DonneesDelocaliseesManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            DonneesDelocalisees.DonneesDelocaliseesManagerMessage = DonneesDelocaliseesManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(DonneesDelocaliseesManagerMessage);
        })(DonneesDelocalisees = Services.DonneesDelocalisees || (Services.DonneesDelocalisees = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la numérisation
* @module MyWay.Services.Numerisation
* classe : NumerisationManager - public - Classe permettant la gestion de la numérisation
* classe : NumerisationParamObligatoires - public - Classe permettant de définir les paramètres de numérisation
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Numerisation;
        (function (Numerisation) {
            /**
            * Classe permettant la gestion de la numérisation
            * @classe NumerisationManager
            * fonction : numeriser – public - Permet de lancer une numérisation
            */
            var NumerisationManager = /** @class */ (function (_super) {
                __extends(NumerisationManager, _super);
                /**
                * Constructeur de la classe NumerisationManager
                * @param managerLibrary {ManagerLibrary}
                * @param serviceApi {IServiceApi}
                */
                function NumerisationManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Numerisation) || this;
                    _this.api = null;
                    return _this;
                }
                NumerisationManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
                };
                /**
                * Permet de lancer une numérisation
                * @param data {string} données à envoyer pour la numérisation (xml sérializé)
                * @param numerisationParams {NumerisationParams} paramètres de numérisation du document
                * @param callback {function} action à executer une fois la numérisation effectuée
                * @param callbackError {function} action à executer en cas d'erreur de numérisation
                *
                * ~~~ts
                * serviceManager.Numerisation.numeriser(documentData, documentParams)
                *    .then(() => {
                *       // Numérisation OK
                *    }).catch((erreur: MyWay.Services.Erreur) => {
                *       // Numérisation KO: traitement de l'erreur
                * });
                * ~~~
                */
                NumerisationManager.prototype.numeriser = function (data, numerisationParams) {
                    var _this = this;
                    var erreurParams = "";
                    var codeEtablissement = "";
                    // Vérification des paramètres d'entrée
                    if (!(Services.Controle.StaticStringControle.isStringNotEmpty(data)))
                        erreurParams += "Le paramètre 'data' est obligatoire et doit être une chaine de caractères non vide / ";
                    if (!(Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(numerisationParams))) {
                        erreurParams += "Le paramètre 'numerisationParams' est obligatoire et doit être de type 'NumerisationParams' / ";
                    }
                    else {
                        if (!Services.Controle.StaticStringControle.isStringNotEmpty(numerisationParams.dropZonePath))
                            erreurParams += "Le paramètre 'numerisationParams.dropZonePath' est obligatoire et doit être une chaine de caractères non vide / ";
                        if (!Services.Controle.StaticStringControle.isStringNotEmpty(numerisationParams.configurationFilePath))
                            erreurParams += "Le paramètre 'numerisationParams.configurationFilePath' est obligatoire et doit être une chaine de caractères non vide / ";
                    }
                    if (erreurParams != "") {
                        erreurParams = erreurParams.substring(0, erreurParams.lastIndexOf("/") - 1);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'numeriser');
                        NumerisationManager.logger.error(erreurParams);
                        // Appel de la fonction de rappel
                        return this.library.Core.createPromiseSelfError(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, [erreurParams]));
                    }
                    // Initialisation des données
                    var donneesNumerisation = {};
                    donneesNumerisation.data = data;
                    // Ouverture de la modale
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.library.Libelle.afficherMessage(Services.Libelle.LibelleModel.TEC.NUMERISATION_EN_COURS, Services.Libelle.TYPE_AFFICHAGE.VIDE, null, 0, null, function () {
                            // Récupération du code établissement
                            _this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                                if (pAuthentificationInfo)
                                    codeEtablissement = pAuthentificationInfo.codeEtablissement;
                                if (codeEtablissement === "") {
                                    // Trace de l'erreur
                                    var erreurEtablissement = new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_CONTEXTE_RECUP_CODE_ETAB_IMPOSSIBLE);
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'numeriser');
                                    _this.library.Libelle.constituerLibelle(erreurEtablissement.codeLibelle).then(function (pText) {
                                        NumerisationManager.logger.error(pText);
                                    });
                                    // On ferme la modale et on appelle le callback d'erreur
                                    _this.library.Display.FermerModalMessage();
                                    pDefer.reject(erreurEtablissement);
                                    // Sortie de la fonction
                                    return;
                                }
                                // Délocalisation des données
                                _this.getDonneesDelocaliseesNumerisation(codeEtablissement, donneesNumerisation, "").then(
                                // Délocalisation des données OK
                                function () {
                                    // Paramétrage
                                    var params = new NumerisationParamObligatoires(numerisationParams.dropZonePath, numerisationParams.configurationFilePath, codeEtablissement, true);
                                    // Appel du service de numerisation
                                    _this.api.numeriserDocument(donneesNumerisation, params).then(function () {
                                        // On ferme la modale et on appelle le callback
                                        _this.library.Display.FermerModalMessage();
                                        NumerisationManager.logger.debug('numeriserDocument success');
                                        pDefer.resolve();
                                    }, function (erreur) {
                                        // On ferme la modale et on appelle le callback d'erreur
                                        _this.library.Display.FermerModalMessage();
                                        NumerisationManager.logger.error('numeriserDocument failed - %1', JSON.stringify(erreur));
                                        pDefer.reject(erreur);
                                    });
                                }, 
                                // Délocalisation des données KO
                                function () {
                                    // Création d'un Warning
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'numeriser');
                                    _this.library.Libelle.constituerLibelle(Services.Libelle.LibelleModel.COM.ERREUR_NUMERISATION_RECUP_DONNEES_DELOCALISEES_IMPOSSIBLE).then(function (pText) {
                                        NumerisationManager.logger.warn(pText);
                                    });
                                    // Paramétrage
                                    donneesNumerisation.CCLI_TYP = {};
                                    donneesNumerisation.CCLI_UTL = {};
                                    donneesNumerisation.NATURE = {};
                                    var params = new NumerisationParamObligatoires(numerisationParams.dropZonePath, numerisationParams.configurationFilePath, codeEtablissement, false);
                                    // Appel du service de numerisation      
                                    _this.api.numeriserDocument(donneesNumerisation, params).then(function () {
                                        // On ferme la modale et on appelle le callback
                                        _this.library.Display.FermerModalMessage();
                                        NumerisationManager.logger.debug('numeriserDocument success');
                                        pDefer.resolve();
                                    }, function (erreur) {
                                        // On ferme la modale et on appelle le callback d'erreur
                                        _this.library.Display.FermerModalMessage();
                                        NumerisationManager.logger.error('numeriserDocument failed - %1', JSON.stringify(erreur));
                                        pDefer.reject(erreur);
                                    });
                                });
                            }, pDefer.reject);
                        });
                    });
                };
                /**
                * Permet de savoir si le jeton d'activation SpiFactory est présent sur le serveur d'agence
                * @param callback {function} action à executer une fois le statut d'activation récupéré
                * @param callbackError {function} action à executer en cas d'erreur
                * ~~~ts
                * serviceManager.Numerisation.getSpiFactoryActivationStatut()
                *    .then((jetonSpiFactory) => {
                *       // Traitement
                *    }).catch((erreur: MyWay.Services.Erreur) => {
                *       // Traitement en cas d'erreur
                * });
                * ~~~
                */
                NumerisationManager.prototype.getSpiFactoryActivationStatut = function () {
                    // Appel du service    
                    return this.api.getSpiFactoryActivationStatutOnServeur().then(function (statut) {
                        NumerisationManager.logger.debug('Statut de la présence du jeton d\'activation SpiFactory sur le serveur d\'agence : %1', statut);
                        return statut;
                    }, function (erreur) {
                        NumerisationManager.logger.error('Statut de la présence du jeton d\'activation SpiFactory sur le serveur d\'agence : %1', JSON.stringify(erreur));
                        throw erreur;
                    });
                };
                /**
                * Permet de lancer une numérisation avec Spifactory Arcade
                * @param data {string} données à envoyer pour la numérisation (xml sérializé)
                * @param numerisationParams {any} paramètres de numérisation du document
                * @param callback {function} action à executer une fois la numérisation effectuée
                * @param callbackError {function} action à executer en cas d'erreur de numérisation
                * ~~~ts
                * serviceManager.Numerisation.numeriserArcade(documentData, null)
                *    .then(() => {
                *       // Numérisation Arcade OK
                *    }).catch((erreur: MyWay.Services.Erreur) => {
                *       // Numérisation Arcade KO: traitement de l'erreur
                * });
                * ~~~
                */
                NumerisationManager.prototype.numeriserArcade = function (data, numerisationParams) {
                    var _this = this;
                    var erreurParams = "";
                    var codeEtablissement = "";
                    var idAgence = "";
                    // Vérification des paramètres d'entrée
                    if (!(Services.Controle.StaticStringControle.isStringNotEmpty(data)))
                        erreurParams += "Le paramètre 'data' est obligatoire et doit être une chaine de caractères non vide / ";
                    if (erreurParams != "") {
                        erreurParams = erreurParams.substring(0, erreurParams.lastIndexOf("/") - 1);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'numeriserArcade');
                        NumerisationManager.logger.error(erreurParams);
                        // Appel de la fonction de rappel
                        return this.library.Core.createPromiseSelfError(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, [erreurParams]));
                    }
                    // Initialisation des données
                    var donneesNumerisationArcade = {};
                    donneesNumerisationArcade.data = data;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        // Ouverture de la modale
                        _this.library.Libelle.afficherMessage(Services.Libelle.LibelleModel.TEC.NUMERISATION_EN_COURS, Services.Libelle.TYPE_AFFICHAGE.VIDE, null, 0, null, function () {
                            // Récupération du code établissement et de l'id Agence
                            _this.library.Context.getAuthentificationInfo().then(function (pAuthentificationInfo) {
                                codeEtablissement = pAuthentificationInfo.codeEtablissement;
                                var parametresComptables = _this.library.Context.GetParametresComptables();
                                if (parametresComptables) {
                                    idAgence = parametresComptables.edsExterneGuichetComptable;
                                }
                                if (!Services.Controle.StaticStringControle.isStringNotEmpty(codeEtablissement)) {
                                    // Trace de l'erreur
                                    var erreurEtablissement = new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_CONTEXTE_RECUP_CODE_ETAB_IMPOSSIBLE);
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'numeriserArcade');
                                    _this.library.Libelle.constituerLibelle(erreurEtablissement.codeLibelle).then(function (pText) {
                                        NumerisationManager.logger.error(pText);
                                    });
                                    // On ferme la modale et on appelle le callback
                                    _this.library.Display.FermerModalMessage();
                                    pDefer.reject(erreurEtablissement);
                                    // Sortie de la fonction
                                    return;
                                }
                                if (!Services.Controle.StaticStringControle.isStringNotEmpty(idAgence)) {
                                    // Trace de l'erreur
                                    var erreurIdAgence = new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_CONTEXTE_RECUP_ID_AGENCE_IMPOSSIBLE);
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'numeriserArcade');
                                    _this.library.Libelle.constituerLibelle(erreurIdAgence.codeLibelle).then(function (pText) {
                                        NumerisationManager.logger.error(pText);
                                    });
                                    // On ferme la modale et on appelle le callback
                                    _this.library.Display.FermerModalMessage();
                                    pDefer.reject(erreurIdAgence);
                                    // Sortie de la fonction
                                    return;
                                }
                                // Délocalisation des données
                                _this.getDonneesDelocaliseesNumerisationArcade(codeEtablissement, donneesNumerisationArcade, "").then(
                                // Délocalisation des données OK
                                function () {
                                    // Paramétrage
                                    var params = new NumerisationArcadeParamObligatoires(codeEtablissement, idAgence, true);
                                    // Appel du service de numerisation
                                    _this.api.numeriserDocumentArcade(donneesNumerisationArcade, params).then(function () {
                                        // On ferme la modale et on appelle le callback
                                        _this.library.Display.FermerModalMessage();
                                        NumerisationManager.logger.debug('numeriserDocumentArcade success');
                                        pDefer.resolve();
                                    }, function (erreur) {
                                        // On ferme la modale et on appelle le callback d'erreur
                                        _this.library.Display.FermerModalMessage();
                                        NumerisationManager.logger.error('numeriserDocumentArcade failed - %1', JSON.stringify(erreur));
                                        pDefer.reject(erreur);
                                    });
                                }, 
                                // Délocalisation des données KO
                                function () {
                                    // Création d'un Warning
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'numeriserArcade');
                                    _this.library.Libelle.constituerLibelle(Services.Libelle.LibelleModel.COM.ERREUR_NUMERISATION_RECUP_DONNEES_DELOCALISEES_IMPOSSIBLE).then(function (pText) {
                                        NumerisationManager.logger.warn(pText);
                                    });
                                    // Paramétrage
                                    donneesNumerisationArcade.D93F = {};
                                    donneesNumerisationArcade.D93G = {};
                                    donneesNumerisationArcade.D93J = {};
                                    donneesNumerisationArcade.D93K = {};
                                    donneesNumerisationArcade.D93M = {};
                                    donneesNumerisationArcade.D93T = {};
                                    donneesNumerisationArcade.D93V = {};
                                    donneesNumerisationArcade.D93Y = {};
                                    var params = new NumerisationArcadeParamObligatoires(codeEtablissement, idAgence, false);
                                    // Appel du service de numerisation      
                                    _this.api.numeriserDocumentArcade(donneesNumerisationArcade, params).then(function () {
                                        // On ferme la modale et on appelle le callback
                                        _this.library.Display.FermerModalMessage();
                                        NumerisationManager.logger.debug('numeriserDocumentArcade success');
                                        pDefer.resolve();
                                    }, function (erreur) {
                                        // On ferme la modale et on appelle le callback d'erreur
                                        _this.library.Display.FermerModalMessage();
                                        NumerisationManager.logger.error('numeriserDocumentArcade failed - %1', JSON.stringify(erreur));
                                        pDefer.reject(erreur);
                                    });
                                });
                            });
                        });
                    });
                };
                /**
                * Délocalise les données nécessaires au fonctionnement de SpiFactory (fonction récursive)
                * @param numEtablissement {string} Code de l'établissement pour lequel il faut récupérer les données
                * @param donneesNumerisation {NumerisationData} Objet de données numérisation à compléter
                * @param action {string} Nom de l'objet de données délocalisées à récupérer
                * @param callback {function} action à executer une fois l'ensemble des données récupérées
                * @param callbackError {function} action à executer en cas d'erreur de lors de la récupération des données
                */
                NumerisationManager.prototype.getDonneesDelocaliseesNumerisation = function (numEtablissement, donneesNumerisation, action) {
                    var _this = this;
                    switch (action) {
                        case "CCLI_TYP":
                            return this.library.DonneesDelocalisees.getDonneesDelocalisees(numEtablissement, action).then(function (ccli_typ) {
                                donneesNumerisation.CCLI_TYP = ccli_typ;
                                return _this.getDonneesDelocaliseesNumerisation(numEtablissement, donneesNumerisation, "CCLI_UTL");
                            });
                        case "CCLI_UTL":
                            return this.library.DonneesDelocalisees.getDonneesDelocalisees(numEtablissement, action).then(function (ccli_utl) {
                                donneesNumerisation.CCLI_UTL = ccli_utl;
                                return _this.getDonneesDelocaliseesNumerisation(numEtablissement, donneesNumerisation, "NATURE");
                            });
                        case "NATURE":
                            return this.library.DonneesDelocalisees.getDonneesDelocalisees(numEtablissement, action).then(function (nature) {
                                donneesNumerisation.NATURE = nature;
                            });
                        default:
                            return this.getDonneesDelocaliseesNumerisation(numEtablissement, donneesNumerisation, "CCLI_TYP");
                    }
                };
                /**
                * Délocalise les données nécessaires au fonctionnement de SpiFactory Arcade (fonction récursive)
                * @param numEtablissement {string} Code de l'établissement pour lequel il faut récupérer les données
                * @param donneesNumerisationArcade {NumerisationDataArcade} Objet de données numérisation à compléter
                * @param action {string} Nom de l'objet de données délocalisées à récupérer
                * @param callback {function} action à executer une fois l'ensemble des données récupérées
                * @param callbackError {function} action à executer en cas d'erreur de lors de la récupération des données
                */
                NumerisationManager.prototype.getDonneesDelocaliseesNumerisationArcade = function (numEtablissement, donneesNumerisationArcade, action) {
                    var _this = this;
                    switch (action) {
                        case "D93F":
                            return this.library.DonneesDelocalisees.getDonneesDelocalisees(numEtablissement, action).then(function (d93f) {
                                donneesNumerisationArcade.D93F = d93f;
                                return _this.getDonneesDelocaliseesNumerisationArcade(numEtablissement, donneesNumerisationArcade, "D93G");
                            });
                        case "D93G":
                            return this.library.DonneesDelocalisees.getDonneesDelocalisees(numEtablissement, action).then(function (d93g) {
                                donneesNumerisationArcade.D93G = d93g;
                                return _this.getDonneesDelocaliseesNumerisationArcade(numEtablissement, donneesNumerisationArcade, "D93J");
                            });
                        case "D93J":
                            return this.library.DonneesDelocalisees.getDonneesDelocalisees(numEtablissement, action).then(function (d93j) {
                                donneesNumerisationArcade.D93J = d93j;
                                return _this.getDonneesDelocaliseesNumerisationArcade(numEtablissement, donneesNumerisationArcade, "D93K");
                            });
                        case "D93K":
                            return this.library.DonneesDelocalisees.getDonneesDelocalisees(numEtablissement, action).then(function (d93k) {
                                donneesNumerisationArcade.D93K = d93k;
                                return _this.getDonneesDelocaliseesNumerisationArcade(numEtablissement, donneesNumerisationArcade, "D93M");
                            });
                        case "D93M":
                            return this.library.DonneesDelocalisees.getDonneesDelocalisees(numEtablissement, action).then(function (d93m) {
                                donneesNumerisationArcade.D93M = d93m;
                                return _this.getDonneesDelocaliseesNumerisationArcade(numEtablissement, donneesNumerisationArcade, "D93T");
                            });
                        case "D93T":
                            return this.library.DonneesDelocalisees.getDonneesDelocalisees(numEtablissement, action).then(function (d93t) {
                                donneesNumerisationArcade.D93T = d93t;
                                return _this.getDonneesDelocaliseesNumerisationArcade(numEtablissement, donneesNumerisationArcade, "D93V");
                            });
                        case "D93V":
                            return this.library.DonneesDelocalisees.getDonneesDelocalisees(numEtablissement, action).then(function (d93v) {
                                donneesNumerisationArcade.D93V = d93v;
                                return _this.getDonneesDelocaliseesNumerisationArcade(numEtablissement, donneesNumerisationArcade, "D93Y");
                            });
                        case "D93Y":
                            return this.library.DonneesDelocalisees.getDonneesDelocalisees(numEtablissement, action).then(function (d93y) {
                                donneesNumerisationArcade.D93Y = d93y;
                            });
                        default:
                            return this.getDonneesDelocaliseesNumerisationArcade(numEtablissement, donneesNumerisationArcade, "D93F");
                    }
                };
                NumerisationManager.CLASS_NAME = 'MyWay.Services.Numerisation.NumerisationManager';
                NumerisationManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(NumerisationManager.CLASS_NAME);
                return NumerisationManager;
            }(Services.Components.ComponentManagerBase));
            Numerisation.NumerisationManager = NumerisationManager;
            /**
            * Classe permettant de définir les paramètres de numérisation obligatoires
            * @classe NumerisationParamObligatoires
            */
            var NumerisationParamObligatoires = /** @class */ (function () {
                /**
                * Constructeur de la classe NumerisationParamObligatoires
                * @param dropZonePath {string}
                * @param configurationFilePath {string}
                * @param codeEtablissement {string}
                * @param donneesDelocalisees {boolean}
                */
                function NumerisationParamObligatoires(dropZonePath, configurationFilePath, codeEtablissement, donneesDelocalisees) {
                    this.dropZonePath = dropZonePath;
                    this.configurationFilePath = configurationFilePath;
                    this.codeEtablissement = codeEtablissement;
                    this.donneesDelocalisees = donneesDelocalisees;
                }
                return NumerisationParamObligatoires;
            }());
            /**
            * Classe permettant de définir les paramètres de numérisation obligatoires pour SpiFactory Arcade
            * @classe NumerisationParamObligatoires
            */
            var NumerisationArcadeParamObligatoires = /** @class */ (function () {
                /**
                * Constructeur de la classe NumerisationArcadeParamObligatoires
                * @param codeEtablissement {string}
                * @param idAgence {string}
                * @param donneesDelocalisees {boolean}
                */
                function NumerisationArcadeParamObligatoires(codeEtablissement, idAgence, donneesDelocalisees) {
                    this.codeEtablissement = codeEtablissement;
                    this.idAgence = idAgence;
                    this.donneesDelocalisees = donneesDelocalisees;
                }
                return NumerisationArcadeParamObligatoires;
            }());
            Services.Components.RegistryManager.getInstance().register(NumerisationManager);
        })(Numerisation = Services.Numerisation || (Services.Numerisation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Aide;
        (function (Aide) {
            var AideManagerMessage = /** @class */ (function (_super) {
                __extends(AideManagerMessage, _super);
                function AideManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Aide) || this;
                }
                AideManagerMessage.prototype.onGetContenuInfobulle = function (pMessage) {
                    var idChampLie = (pMessage.idChampLie !== null && pMessage.idChampLie !== undefined) ? pMessage.idChampLie : "";
                    var horsProcessus = (pMessage.horsProcessus !== null && pMessage.horsProcessus !== undefined) ? pMessage.horsProcessus : null;
                    var codeProcessus = (pMessage.codeProcessus !== null && pMessage.codeProcessus !== undefined) ? pMessage.codeProcessus : null;
                    var codeEtape = (pMessage.codeEtape !== null && pMessage.codeEtape !== undefined) ? pMessage.codeEtape : null;
                    var parametres = this.managerInstance.getParametresContexte(idChampLie, horsProcessus, codeProcessus, codeEtape);
                    return this.managerInstance.GetContenuInfobulle(parametres);
                };
                AideManagerMessage.prototype.onGetInfobullesAffichables = function (pMessage) {
                    var idChampLie = "";
                    var horsProcessus = (pMessage.horsProcessus !== null && pMessage.horsProcessus !== undefined) ? pMessage.horsProcessus : null;
                    var codeProcessus = (pMessage.codeProcessus !== null && pMessage.codeProcessus !== undefined) ? pMessage.codeProcessus : null;
                    var codeEtape = (pMessage.codeEtape !== null && pMessage.codeEtape !== undefined) ? pMessage.codeEtape : null;
                    var parametres = this.managerInstance.getParametresContexte(idChampLie, horsProcessus, codeProcessus, codeEtape);
                    return this.managerInstance.GetInfobullesAffichables(parametres);
                };
                AideManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Aide.Messages.AideMessageSubject.GetContenuInfobulle:
                            return this.onGetContenuInfobulle(pMessage.message);
                        case Aide.Messages.AideMessageSubject.GetInfobullesAffichables:
                            return this.onGetInfobullesAffichables(pMessage.message);
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                AideManagerMessage.CLASS_NAME = 'MyWay.Services.Aide.AideManagerMessage';
                AideManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(AideManagerMessage.CLASS_NAME);
                return AideManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Aide.AideManagerMessage = AideManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(AideManagerMessage);
        })(Aide = Services.Aide || (Services.Aide = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Aide;
        (function (Aide) {
            var AideManagerExtended = /** @class */ (function (_super) {
                __extends(AideManagerExtended, _super);
                function AideManagerExtended() {
                    return _super.call(this, Services.Components.ComponentType.Aide) || this;
                }
                AideManagerExtended.prototype.MemoriserEtape = function (aidePref) {
                    return this.manager.ajouterEtapeDansPreference(aidePref);
                };
                return AideManagerExtended;
            }(Services.Components.ComponentManagerExtendedBase));
            Aide.AideManagerExtended = AideManagerExtended;
            Services.Components.RegistryManagerExtended.getInstance().register(AideManagerExtended);
        })(Aide = Services.Aide || (Services.Aide = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des applications
* @module MyWay.Services.Application
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            /**
            * Classe permettant la gestion des applications
            */
            var ApplicationAgent = /** @class */ (function (_super) {
                __extends(ApplicationAgent, _super);
                /**
                 * Constructeur de la classe ApplicationAgent
                 */
                function ApplicationAgent() {
                    return _super.call(this, Services.Components.ComponentType.Application) || this;
                }
                /**
                 * Permet de démarrer une application à partir d'un code application.
                 *
                 * ~~~ts
                 * // Démarrage de l'application AC1
                 * serviceAgent.Application.Demarrer('AC1').then((result: boolean) => {
                 * ...
                 * }).catch((erreur: MyWay.Services.Erreur) => {
                 * ...
                 * });
                 * ~~~
                 *
                 * @param  {string}             codeApplication
                 * Correspond au code de l'application
                 *
                 * @return {IPromesse<boolean>}
                 * Promesse indiquant si oui(true) ou non(false) l'application a correctement démarrée sinon retourne une **erreur**
                 *
                 * #### Listes des erreurs
                 * | codeLibelle                               | libelle                                                        |
                 * | ----------------------------------------- |:-------------------------------------------------------------- |
                 * | ERREUR_APPLICATION_TYPE_INCONNU           | Le type de l'application n'est pas pris en charge              |
                 * | ERREUR_APPLICATION_DEMARRAGE_IMPOSSIBLE   | L'application n'a pas pu être démarrée                         |
                 * | ERREUR_APPLICATION_CODE_NON_RENSEIGNE     | Le code de l'application n'est pas renseigné                   |
                 * | ERREUR_APPLICATION_MAINTENANCE            | L'application est indisponible temporairement pour maintenance |
        
                 */
                ApplicationAgent.prototype.Demarrer = function (codeApplication) {
                    return this.sendMessage(Application.Messages.ApplicationMessageSubject.Demarrer, {
                        codeApplication: codeApplication
                    });
                };
                /**  Démarrage du processus SYNTH_CLI
                * serviceManager.Application.DemarrerProcessus('SYNTH_CLI',true,{"idClient":"1111111111","context": {"identifiantPersonne": "11111111111"},"valeurEntree":"1"}).then((result: boolean) => {
                * ...
                * }).catch((erreur: MyWay.Services.Erreur) => {
                * ...
                * });
                 * ~~~
                *
                *
                 * @param {string} codeProcessus Le code de référence de l'Application
                 * @param {string} initData Données de contexte passées pour lancer un processus
                 * @param {string} valeurDepart Valeur LISA d'entrée dans le processus
                 * @param {boolean} delegationPortail Indicateur pour savoir si on délègue le lancement du processus au portail (MyWay ou PCM)
                 * Correspond au code de l'application
                 *
                 * @return {IPromesse<boolean>}
                 * Promesse indiquant si oui(true) ou non(false) l'application a correctement démarrée sinon retourne une **erreur**
                 *
                 * #### Listes des erreurs
                 * | codeLibelle                               | libelle                                                        |
                 * | ----------------------------------------- |:-------------------------------------------------------------- |
                 * | ERREUR_APPLICATION_TYPE_INCONNU           | Le type de l'application n'est pas pris en charge              |
                 * | ERREUR_APPLICATION_DEMARRAGE_IMPOSSIBLE   | L'application n'a pas pu être démarrée                         |
                 * | ERREUR_APPLICATION_CODE_NON_RENSEIGNE     | Le code de l'application n'est pas renseigné                   |
                 * | ERREUR_APPLICATION_MAINTENANCE            | L'application est indisponible temporairement pour maintenance |
        
                 */
                ApplicationAgent.prototype.DemarrerProcessus = function (codeProcessus, delegationPortail, initData, valeurDepart) {
                    if (delegationPortail === void 0) { delegationPortail = null; }
                    if (valeurDepart === void 0) { valeurDepart = null; }
                    return this.sendMessage(Application.Messages.ApplicationMessageSubject.DemarrerProcessus, {
                        codeProcessus: codeProcessus,
                        delegationPortail: delegationPortail,
                        initData: initData,
                        valeurDepart: valeurDepart,
                    });
                };
                return ApplicationAgent;
            }(Services.Components.ComponentAgentBase));
            Application.ApplicationAgent = ApplicationAgent;
            Services.Components.RegistryAgent.getInstance().register(ApplicationAgent);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgentExtended, 'LisaTechAgent', {
            get: function () {
                return this._techLibrary.LisaTechAgent;
            }
        });
        Services.TechAgentExtended.prototype.StartProcess = function (processCode, initData, valeurDepart) {
            return this._techLibrary.StartProcess(processCode, initData, valeurDepart);
        };
        Services.TechAgentExtended.prototype.StartSubProcess = function (processCode, valeurDepart) {
            return this._techLibrary.StartSubProcess(processCode, valeurDepart);
        };
        Services.TechAgentExtended.prototype.StartExternalApp = function (name, url, standAlone) {
            return this._techLibrary.StartExternalApp(name, url, standAlone);
        };
        Services.TechAgentExtended.prototype.GetProcesses = function () {
            return this._techLibrary.GetProcesses();
        };
        Services.TechAgentExtended.prototype.GetTools = function () {
            return this._techLibrary.GetTools();
        };
        /**
        * Récupère les codes des processus LISA
        */
        Services.TechAgentExtended.prototype.GetCodesProcessus = function () {
            return this._techLibrary.GetCodesProcessus();
        };
        /**
        * Récupère les infos d'un processus LISA
        * @param {string}   codeProcessus
        * code du processus
        */
        Services.TechAgentExtended.prototype.GetInfoProcessus = function (codeProcessus) {
            return this._techLibrary.GetInfoProcessus(codeProcessus);
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.TechAgent, 'LisaTechAgent', {
            get: function () {
                return this._techLibrary.LisaTechAgent;
            }
        });
        Services.TechAgent.prototype.StartProcess = function (processCode, initData, valeurDepart) {
            return this.LisaTechAgent.StartProcess(processCode, initData, valeurDepart);
        };
        Services.TechAgent.prototype.StartSubProcess = function (processCode, valeurDepart) {
            return this.LisaTechAgent.StartSubProcess(processCode, valeurDepart);
        };
        Services.TechAgent.prototype.StartExternalApp = function (name, url, standAlone) {
            return this.LisaTechAgent.StartExternalApp(name, url, standAlone);
        };
        Services.TechAgent.prototype.GetProcesses = function () {
            return this.LisaTechAgent.GetProcesses();
        };
        Services.TechAgent.prototype.GetTools = function () {
            return this.LisaTechAgent.GetTools();
        };
        /**
        * Récupère les codes des processus LISA
        */
        Services.TechAgent.prototype.GetCodesProcessus = function () {
            return this.LisaTechAgent.GetCodesProcessus();
        };
        /**
        * Récupère les infos d'un processus LISA
        * @param {string}   codeProcessus
        * code du processus
        */
        Services.TechAgent.prototype.GetInfoProcessus = function (codeProcessus) {
            return this.LisaTechAgent.GetInfoProcessus(codeProcessus);
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.TechLibrary.addInitListener(function (pInstance, library) {
            pInstance.LisaTechAgent = library.Lisa;
        });
        Services.TechLibrary.prototype.StartProcess = function (processCode, initData, valeurDepart) {
            return this.LisaTechAgent.StartProcess(processCode, initData, valeurDepart);
        };
        Services.TechLibrary.prototype.StartSubProcess = function (processCode, valeurDepart) {
            return this.LisaTechAgent.StartSubProcess(processCode, valeurDepart);
        };
        Services.TechLibrary.prototype.StartExternalApp = function (name, url, standAlone) {
            return this.LisaTechAgent.StartExternalApp(name, url, standAlone);
        };
        Services.TechLibrary.prototype.GetProcesses = function () {
            return this.LisaTechAgent.GetProcesses();
        };
        Services.TechLibrary.prototype.GetTools = function () {
            return this.LisaTechAgent.GetTools();
        };
        /**
        * Récupère les codes des processus LISA
        */
        Services.TechLibrary.prototype.GetCodesProcessus = function () {
            return this.LisaTechAgent.GetCodesProcessus();
        };
        /**
        * Récupère les infos d'un processus LISA
        * @param {string}   codeProcessus
        * code du processus
        */
        Services.TechLibrary.prototype.GetInfoProcessus = function (codeProcessus) {
            return this.LisaTechAgent.GetInfoProcessus(codeProcessus);
        };
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var LisaTechAgent = /** @class */ (function (_super) {
                __extends(LisaTechAgent, _super);
                function LisaTechAgent() {
                    return _super.call(this) || this;
                }
                LisaTechAgent.prototype.StartProcess = function (processCode, initData, valeurDepart) {
                    return this.sendMessage(Lisa.Messages.LisaMessageSubject.StartProcess, {
                        processCode: processCode,
                        initData: initData,
                        valeurDepart: valeurDepart
                    });
                };
                LisaTechAgent.prototype.StartSubProcess = function (processCode, valeurDepart) {
                    return this.sendMessage(Lisa.Messages.LisaMessageSubject.StartSubProcess, {
                        processCode: processCode,
                        valeurDepart: valeurDepart
                    });
                };
                LisaTechAgent.prototype.StartExternalApp = function (name, url, standAlone) {
                    return this.sendMessage(Lisa.Messages.LisaMessageSubject.StartExternalApp, {
                        name: name,
                        url: url,
                        standAlone: standAlone
                    });
                };
                /* istanbul ignore next */
                LisaTechAgent.prototype.GetProcesses = function () {
                    return this.library.Core.createPromiseSelfError(new Services.Erreur("Not implemented"));
                };
                LisaTechAgent.prototype.GetTools = function () {
                    return this.sendMessage(Lisa.Messages.LisaMessageSubject.GetTools, {});
                };
                /**
                * Récupère les codes des processus LISA
                */
                LisaTechAgent.prototype.GetCodesProcessus = function () {
                    return this.sendMessage(Lisa.Messages.LisaMessageSubject.GetCodesProcessus, {});
                };
                /**
                * Récupère les infos d'un processus LISA
                * @param {string}   codeProcessus
                * code du processus
                */
                LisaTechAgent.prototype.GetInfoProcessus = function (codeProcessus) {
                    return this.sendMessage(Lisa.Messages.LisaMessageSubject.GetInfoProcessus, {
                        codeProcessus: codeProcessus
                    });
                };
                return LisaTechAgent;
            }(Lisa.LisaAgent));
            Lisa.LisaTechAgent = LisaTechAgent;
            Services.Components.RegistryAgent.getInstance().register(LisaTechAgent);
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des capacités (module commun aux agents et aux managers)
* @module MyWay.Services.Capacites
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Capacites;
        (function (Capacites) {
            /**
             * Classe de gestion des règles
             */
            var CapacitesApi = /** @class */ (function (_super) {
                __extends(CapacitesApi, _super);
                function CapacitesApi() {
                    var _this = _super.call(this, Services.Components.ComponentType.Capacites) || this;
                    _this._isTotemCapable = true;
                    return _this;
                }
                CapacitesApi.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    this.capabilities = pCapabilities;
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer);
                };
                CapacitesApi.prototype.setTotemCapable = function (pIsTotemCapable) {
                    this._isTotemCapable = pIsTotemCapable;
                };
                /**
                 * Permet de tester une règle (enum REGLE) en fonction de critères métiers
                 *
                 * @param {enum} REGLE
                 * @return {IPromesse<boolean>} : returne 'true' si on a la capacité de la règle passée en paramètre, sinon 'false'
                 */
                CapacitesApi.prototype.resolve = function (regle) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    switch (regle) {
                        case Capacites.REGLE.MODIFIER_HABILITATION:
                            // Si l'URL contient "myway-" suivi de l'environnement qui commence par "P" ou "p" on est en environnement de PROD et
                            // l'on a pas le droit de modification, sinon dans les autres cas on a les droits de modifications
                            var urlSpa = this.libraryManager.Context.GetFromContext(CapacitesApi.URL_SPA_KEY);
                            var formatUrl = /myway-[pP]+/;
                            if (formatUrl.test(urlSpa)) {
                                deferred.resolve(false);
                            }
                            else {
                                deferred.resolve(true);
                            }
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.MODIFIER_HABILITATION');
                            CapacitesApi.logger.debug('GetFromContext of URL_SPA_KEY Success');
                            break;
                        case Capacites.REGLE.CAISSE_AUTO:
                            //Retourne 'true' si on a au moins une caisse auto. détectée sur le poste
                            this.libraryManager.Mobilite.getPeripheriquesParType(Services.Mobilite.TYPE_PERIPHERIQUE.CAISSE_AUTO)
                                .then(function (result) {
                                if (result.length > 0) {
                                    deferred.resolve(true);
                                }
                                else {
                                    deferred.resolve(false);
                                }
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.CAISSE_AUTO');
                                CapacitesApi.logger.debug('getPeripheriquesParType Success');
                            })
                                .catch(function (erreur) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.CAISSE_AUTO');
                                CapacitesApi.logger.error('getPeripheriquesParType failed - %1', JSON.stringify(erreur));
                                deferred.reject(erreur);
                            });
                            break;
                        case Capacites.REGLE.ECRAN_COMPATIBLE_MYWAY:
                            // On vérifie que la résolution de l'écran utilisateur est égale ou supérieur aux valeurs minimale Myway
                            // Les valeurs proviennent de la charte d'ergonomie MyWay v2.03 
                            this.libraryManager.Mobilite.getInfoMachine()
                                .then(function (result) {
                                var rule = result.hauteurEcran
                                    && result.hauteurEcran >= CapacitesApi.HAUTEUR_MINIMALE_MYWAY
                                    && result.largeurEcran
                                    && result.largeurEcran >= CapacitesApi.LARGEUR_MINIMALE_MYWAY;
                                if (rule === true) {
                                    deferred.resolve(true);
                                }
                                else {
                                    deferred.resolve(false);
                                }
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.ECRAN_COMPATIBLE_MYWAY');
                                CapacitesApi.logger.debug('getInfoMachine Success - %1', rule);
                            })
                                .catch(function (erreur) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.ECRAN_COMPATIBLE_MYWAY');
                                CapacitesApi.logger.error('getInfoMachine failed - %1', JSON.stringify(erreur));
                                deferred.reject(erreur);
                            });
                            break;
                        case Capacites.REGLE.INTEROP_APPLI_BANCAIRE:
                            //Si on est Siris alors on a bien un poste de travail avec les applications bancaires CE
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.INTEROP_APPLI_BANCAIRE');
                            CapacitesApi.logger.debug('deviceCapabilities.InteropAppliBancaire Success - %1', this.capabilities.InteropAppliBancaire);
                            deferred.resolve(this.capabilities.InteropAppliBancaire);
                            break;
                        case Capacites.REGLE.INTEROP_WINDOWS:
                            //Si on est Siris alors on a bien un poste de travail avec le service local de lancé
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.INTEROP_WINDOWS');
                            CapacitesApi.logger.debug('deviceCapabilities.ServiceLocal Success - %1', this.capabilities.ServiceLocal);
                            deferred.resolve(this.capabilities.ServiceLocal);
                            break;
                        case Capacites.REGLE.RESEAU_INTERNE:
                            //Si on obtient réseau filaire, réseau wifi agence ou réseau VPN alors on est bien sur un réseau interne
                            this.libraryManager.Mobilite.getReseau()
                                .then(function (result) {
                                if (result === Services.Mobilite.TYPE_RESEAU.FILAIRE || result === Services.Mobilite.TYPE_RESEAU.WIFI_AGENCE || result === Services.Mobilite.TYPE_RESEAU.VPN) {
                                    deferred.resolve(true);
                                }
                                else {
                                    deferred.resolve(false);
                                }
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.RESEAU_INTERNE');
                                CapacitesApi.logger.debug('getReseau Success - %1', result);
                            })
                                .catch(function (erreur) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.RESEAU_INTERNE');
                                CapacitesApi.logger.error('getReseau failed - %1', JSON.stringify(erreur));
                                deferred.reject(erreur);
                            });
                            break;
                        case Capacites.REGLE.TABLETTE_SIGNATURE:
                            //Retourne 'true' si on a au moins une tablette de signature Wacom détectée sur le poste
                            this.libraryManager.Mobilite.getPeripheriquesParType(Services.Mobilite.TYPE_PERIPHERIQUE.TABLETTE_SIGNATURE)
                                .then(function (result) {
                                if (result.length > 0) {
                                    deferred.resolve(true);
                                }
                                else {
                                    deferred.resolve(false);
                                }
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.TABLETTE_SIGNATURE');
                                CapacitesApi.logger.debug('getPeripheriquesParType Success - %1', JSON.stringify(result));
                            })
                                .catch(function (erreur) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.TABLETTE_SIGNATURE');
                                CapacitesApi.logger.error('getPeripheriquesParType failed - %1', JSON.stringify(erreur));
                                deferred.reject(erreur);
                            });
                            break;
                        case Capacites.REGLE.CONNECTE:
                            //Si on obtient le statut Offline alors on retourne 'false'
                            //sinon, cela signifie que l'on est connecté à un réseau et donc on retourne 'true'
                            this.libraryManager.Mobilite.getReseau()
                                .then(function (result) {
                                if (result !== Services.Mobilite.TYPE_RESEAU.DECONNECTE) {
                                    deferred.resolve(true);
                                }
                                else {
                                    deferred.resolve(false);
                                }
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.CONNECTE');
                                CapacitesApi.logger.debug('getReseau Success - %1', result);
                            })
                                .catch(function (erreur) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.CONNECTE');
                                CapacitesApi.logger.error('getReseau failed - %1', JSON.stringify(erreur));
                                deferred.reject(erreur);
                            });
                            break;
                        case Capacites.REGLE.PORTAIL_MYWAY:
                            //Si iSTotemCapable est à "true" alors on est sur le portail MyWay sinon on est en PCM
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'REGLE.PORTAIL_MYWAY');
                            CapacitesApi.logger.debug('deviceCapabilities.PORTAIL_MYWAY Success - %1', this._isTotemCapable);
                            deferred.resolve(this._isTotemCapable);
                            break;
                        default:
                            var erreur = new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_CAPACITES_REGLE_INCONNU);
                            CapacitesApi.logger.error('Règle capacité inconnue');
                            deferred.reject(erreur);
                            break;
                    }
                    return deferred.promise;
                };
                CapacitesApi.CLASS_NAME = 'MyWay.Services.Capacites.CapacitesApi';
                CapacitesApi.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(CapacitesApi.CLASS_NAME);
                CapacitesApi.URL_SPA_KEY = "URL-SPA";
                CapacitesApi.LARGEUR_MINIMALE_MYWAY = 1280;
                CapacitesApi.HAUTEUR_MINIMALE_MYWAY = 800;
                return CapacitesApi;
            }(Services.Components.ComponentApiBase));
            Capacites.CapacitesApi = CapacitesApi;
            Services.Components.RegistryApi.getInstance().register(CapacitesApi);
        })(Capacites = Services.Capacites || (Services.Capacites = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des impressions
* @module MyWay.Services.Impression
* @classe ImpressionManager - public - Classe permettant la gestion impressions
* @classe ImpressionParamObligatoires - public - Classe permettant de définir les paramètres d'impression
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Impression;
        (function (Impression) {
            /**
            * Classe permettant la gestion des impressions
            * @classe ImpressionManager
            * @methode gererErreur – private - Permet de gérer les erreurs captés
            * @methode generer – public - Permet de lancer une génération de document
            * @methode imprimer – public - Permet de lancer une impression de document
            * @methode imprimerLot - public - Permet de lancer une impression de document par lot
            * @methode genererImprimer – public - Permet de lancer une génération de document et une impression
            */
            var ImpressionManager = /** @class */ (function (_super) {
                __extends(ImpressionManager, _super);
                /**
                * Constructeur de la classe ImpressionManager
                * @param managerLibrary {ManagerLibrary} La librairie d'impression du manager
                */
                function ImpressionManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Impression) || this;
                    _this.api = null;
                    return _this;
                }
                /**
                 * Initialisation
                 * @param pManagerLibrary
                 * @param pMessageService
                 * @param pManagerInitializer
                 * @param pApi
                 */
                ImpressionManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
                };
                /**
                * Obtenir les informations d'authentification
                */
                ImpressionManager.prototype.getAuthentificationInfo = function () {
                    return this.library.Context.getAuthentificationInfo().catch(function (e) {
                        ImpressionManager.logger.error("Les données d'authentification n'ont pas pu être récupérées");
                        throw new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, ["Les données d'authentification n'ont pas pu être récupérées"]);
                    });
                };
                /**
                * Permet de gérer les erreurs captés
                * @param erreur {string} Le message d'erreur
                */
                ImpressionManager.prototype.gererErreur = function (libelleErreur) {
                    ImpressionManager.logger.error(libelleErreur);
                    return this.library.Core.createPromiseSelfError(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, [libelleErreur]));
                };
                /**
                * Permet de lancer une génération de document
                * @param data {any} Données à envoyer pour la génération du document d'impression
                * @param generationParams {GenerationParams} Paramètres pour la génération du document d'impression
                */
                ImpressionManager.prototype.generer = function (data, generationParams) {
                    var _this = this;
                    ImpressionManager.logger.debug("Start API Impression.generer");
                    // Déclarations
                    var erreurParams;
                    // Contôles
                    if ((erreurParams = Impression.controleGenerer(data, generationParams)) !== "") {
                        return this.gererErreur(erreurParams);
                    }
                    // Récupération du contexte
                    return this.getAuthentificationInfo().then(function (authentificationInfo) {
                        // Paramétrage
                        // var params: GenerationParamObligatoires = new GenerationParamObligatoires(generationParams.systeme, generationParams.obligatoires.action, generationParams.obligatoires.parametresGenerationFichier.typeFichier, generationParams.obligatoires.parametresGenerationFichier.restitutionVersion, generationParams.obligatoires.parametresGenerationFichier.sousRepModele, generationParams.optionnels.archivage);
                        var params = new GenerationParamObligatoires(generationParams);
                        // Appel du service de génération
                        return _this.api.genererDocument(data, params, authentificationInfo).then(function (document) {
                            ImpressionManager.logger.debug("ServiceApi.Impression.genererDocument success");
                            return document;
                        }, function (erreur) {
                            ImpressionManager.logger.error("ServiceApi.Impression.genererDocument failed - %1", JSON.stringify(erreur));
                            throw erreur;
                        });
                    });
                };
                /**
                * Permet de lancer une impression de document
                * @param data {any} Données à envoyer pour l'impression (uniquement PDF)
                * @param impressionParams {ImpressionParams} Paramètres d'impression du document
                */
                ImpressionManager.prototype.imprimer = function (data, impressionParams) {
                    ImpressionManager.logger.debug("Start API Impression.imprimer");
                    // Déclarations
                    var erreurParams;
                    // Contôles
                    if ((erreurParams = Impression.controleImprimer(data, impressionParams)) !== "") {
                        return this.gererErreur(erreurParams);
                    }
                    var params = new ImpressionParamObligatoires(impressionParams);
                    return this.api.imprimerDocument(data, params);
                };
                /**
                * Permet de lancer une impression de document par lot
                * @param data {DocumentImpressionLot[]} Lot de documents à envoyer pour l'impression (uniquement PDF, avec possibilité de les récupérer en GED)
                * @param parametresActiveXGlobaux {ParametresActiveXGlobaux} Paramètres globaux de l'ActiveX d'impression
                */
                ImpressionManager.prototype.imprimerLot = function (data, parametresActiveXGlobaux) {
                    var _this = this;
                    ImpressionManager.logger.debug("Start API Impression.imprimerLot");
                    // Déclarations
                    var erreurParams;
                    // var documentsAImprimer: DocumentImpressionLot[] = [];
                    // var indexDocumentAImprimerCourant: number = 0;
                    // Contôles
                    if ((erreurParams = Impression.controleImprimerLot(data, parametresActiveXGlobaux)) !== "") {
                        return this.gererErreur(erreurParams);
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        // Récupération des informations d'authentification à partir du contexte
                        _this.getAuthentificationInfo().then(function (authentificationInfo) {
                            // Ouverture de la modale
                            _this.library.Libelle.afficherMessage('Récupération des documents en GED en cours. Merci de patienter.', Services.Libelle.TYPE_AFFICHAGE.VIDE, null, 0, null, function () {
                                // Appel du service de récupération de fichier en GED
                                _this.api.getDocumentGEDLot(data, authentificationInfo).then(function (documents) {
                                    data = documents;
                                    // On ferme la modale
                                    _this.library.Display.FermerModalMessage();
                                }).then(function () {
                                    var params = new ParametresActiveXGlobauxREST(parametresActiveXGlobaux);
                                    return _this.api.imprimerDocumentLot(data, params).then(pDefer.resolve, pDefer.reject);
                                }).catch(function (erreur) {
                                    var messageErreur = 'Une erreur est survenue lors de la récupération de document en GED : {0}';
                                    messageErreur = messageErreur.replace('{0}', erreur.codeLibelle);
                                    // On ferme la modale
                                    _this.library.Display.FermerModalMessage();
                                    _this.gererErreur(messageErreur).then(pDefer.resolve, pDefer.reject);
                                });
                            });
                        }, pDefer.reject);
                    });
                };
                /**
                * Permet de lancer une génération document et une impression
                * @param data {any} Données à envoyer pour la génération et l'impression
                * @param generationImpressionParams {generationImpressionParams} Paramètres de génération et d'impression du document
                */
                ImpressionManager.prototype.genererImprimer = function (data, generationImpressionParams) {
                    var _this = this;
                    ImpressionManager.logger.debug("Start API Impression.genererImprimer");
                    // Déclarations
                    var erreurParams;
                    // Contôles
                    if ((erreurParams = Impression.controleGenererImprimer(data, generationImpressionParams)) !== "") {
                        return this.gererErreur(erreurParams);
                    }
                    // Récupération du contexte
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.getAuthentificationInfo().then(function (authentificationInfo) {
                            // Paramétrage Génération
                            // var paramsGeneration: GenerationParamObligatoires = new GenerationParamObligatoires(generationImpressionParams.systeme, generationImpressionParams.obligatoires.action, generationImpressionParams.obligatoires.parametresGenerationFichier.typeFichier, generationImpressionParams.obligatoires.parametresGenerationFichier.restitutionVersion, generationImpressionParams.obligatoires.parametresGenerationFichier.sousRepModele, generationImpressionParams.optionnels.archivage);
                            var paramsGeneration = new GenerationParamObligatoires(generationImpressionParams);
                            // Paramétrage Impression
                            var paramsImpression = new ImpressionParamObligatoires(generationImpressionParams);
                            ImpressionManager.logger.debug("Contrôle de paramètres OK");
                            // Ouverture de la modale
                            _this.library.Libelle.afficherMessage(Services.Libelle.LibelleModel.TEC.IMPRESSION_GENERATION_IMPRESSION_EN_COURS, Services.Libelle.TYPE_AFFICHAGE.VIDE, null, 0, null, function () {
                                ImpressionManager.logger.debug("Modale ouverte -> Appel au service de génération");
                                // Appel du service de génération
                                _this.api.genererDocument(data, paramsGeneration, authentificationInfo).then(function (document) {
                                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(document)) {
                                        _this.api.imprimerDocument(document.Fichier, paramsImpression).then(function () {
                                            _this.library.Display.FermerModalMessage();
                                            pDefer.resolve(document);
                                        }, function (erreur) {
                                            _this.library.Display.FermerModalMessage();
                                            ImpressionManager.logger.error("ServiceApi.Impression.genererDocument Failed - %1", JSON.stringify(erreur));
                                            pDefer.reject(erreur);
                                        });
                                    }
                                    else {
                                        _this.gererErreur("Erreur: document non généré").then(pDefer.resolve, function (erreur) {
                                            _this.library.Display.FermerModalMessage();
                                            ImpressionManager.logger.error("ServiceApi.Impression.genererDocument Failed - %1", JSON.stringify(erreur));
                                            pDefer.reject(erreur);
                                        });
                                    }
                                }, function (erreur) {
                                    // On ferme la modale
                                    _this.library.Display.FermerModalMessage();
                                    ImpressionManager.logger.error("ServiceApi.Impression.genererDocument Failed - %1", JSON.stringify(erreur));
                                    pDefer.reject(erreur);
                                });
                            });
                        });
                    });
                };
                /**
                 * Permet de convertir les data en JSON compris pas les API
                 * @param data {any} La data à convertir
                 */
                ImpressionManager.prototype.getJsonConverti = function (data) {
                    return this.api.getJsonConverti(data).
                        then(function (result) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', result);
                        ImpressionManager.logger.debug('getJsonConverti Success');
                        return Services.Promesses.createPromiseSelfResolved(result);
                    })
                        .catch(function (error) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', data);
                        ImpressionManager.logger.error('getJsonConverti failed - %1', JSON.stringify(error));
                        return Services.Promesses.createPromiseSelfError(error);
                    });
                };
                ImpressionManager.CLASS_NAME = 'MyWay.Services.Impression.ImpressionManager';
                ImpressionManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ImpressionManager.CLASS_NAME);
                return ImpressionManager;
            }(Services.Components.ComponentManagerBase));
            Impression.ImpressionManager = ImpressionManager;
            /**
            * Classe permettant de définir les paramètres de génération obligatoires
            * @classe GenerationParamObligatoires
            */
            var GenerationParamObligatoires = /** @class */ (function () {
                /*
                * @DELETE Constructeur de la classe GenerationParamObligatoires
                * @param dataType {string}
                * @param dataLibrairie {string}
                * @param nomFichier {string}
                * @param format {string}
                */
                // constructor(parametreGenerationSysteme: ParametresGenerationSysteme, action: GENERATION_ACTION | GENERATION_IMPRESSION_ACTION, typeFichier: Fichier.TYPE_FICHIER, restitutionVersion: RESTITUTION_VERSION, sousRepModele: string, archivage: Archivage) {
                /**
                * Constructeur de la classe GenerationParamObligatoires
                * @param params {GenerationParams | GenerationImpressionParams} Paramètres de génération d'un document
                */
                function GenerationParamObligatoires(params) {
                    this.serializedGenerationParams = {};
                    this.serializedGenerationParams.parametreGenerationSysteme = params.systeme;
                    this.serializedGenerationParams.parametresGenerationObligatoires = {};
                    this.serializedGenerationParams.parametresGenerationObligatoires.action = MyWay.Services.CoreCommon.EnumUtils.getName(Impression.GENERATION_ACTION, params.obligatoires.action);
                    this.serializedGenerationParams.parametresGenerationObligatoires.parametresGenerationFichier = {
                        typeFichier: MyWay.Services.CoreCommon.EnumUtils.getName(Services.Fichier.TYPE_FICHIER, params.obligatoires.parametresGenerationFichier.typeFichier),
                        restitutionVersion: params.obligatoires.parametresGenerationFichier.restitutionVersion,
                        sousRepModele: params.obligatoires.parametresGenerationFichier.sousRepModele
                    };
                    this.serializedGenerationParams.parametresGenerationOptionnels = {
                        archivage: params.optionnels.archivage,
                        blocGenerique: null
                    };
                }
                return GenerationParamObligatoires;
            }());
            /**
            * Classe permettant de définir les paramètres d'impression obligatoires
            * @classe ImpressionParamObligatoires
            */
            var ImpressionParamObligatoires = /** @class */ (function () {
                /**
                * Constructeur de la classe ImpressionParamObligatoires
                * @param impressionParams {ImpressionParams | GenerationImpressionParams} Les paramètres d'impression à sérialiser pour le service local
                */
                function ImpressionParamObligatoires(impressionParams) {
                    this.serializedImpressionParams = {};
                    this.serializedImpressionParams.obligatoires = {
                        nomFichier: impressionParams.obligatoires.nomFichier
                    };
                    this.serializedImpressionParams.optionnels = {};
                    this.serializedImpressionParams.optionnels.parametreActiveX = {
                        annul: false,
                        voir: false,
                        enregistrer: false,
                        blocnbex: false,
                        // mincop = 0,
                        nbcopiesdef: 0,
                    };
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(impressionParams.optionnels.parametreActiveX) && Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(impressionParams.optionnels.parametreActiveX)) {
                        if (Services.Controle.StaticBooleanControle.isBoolean(impressionParams.optionnels.parametreActiveX.annul))
                            this.serializedImpressionParams.optionnels.parametreActiveX.annul = impressionParams.optionnels.parametreActiveX.annul;
                        if (Services.Controle.StaticBooleanControle.isBoolean(impressionParams.optionnels.parametreActiveX.voir))
                            this.serializedImpressionParams.optionnels.parametreActiveX.voir = impressionParams.optionnels.parametreActiveX.voir;
                        if (Services.Controle.StaticBooleanControle.isBoolean(impressionParams.optionnels.parametreActiveX.enregistrer))
                            this.serializedImpressionParams.optionnels.parametreActiveX.enregistrer = impressionParams.optionnels.parametreActiveX.enregistrer;
                        if (Services.Controle.StaticBooleanControle.isBoolean(impressionParams.optionnels.parametreActiveX.blocnbex))
                            this.serializedImpressionParams.optionnels.parametreActiveX.blocnbex = impressionParams.optionnels.parametreActiveX.blocnbex;
                        if (Services.Controle.StaticNumberControle.isNumber(impressionParams.optionnels.parametreActiveX.mincop))
                            this.serializedImpressionParams.optionnels.parametreActiveX.mincop = impressionParams.optionnels.parametreActiveX.mincop;
                        if (Services.Controle.StaticNumberControle.isNumber(impressionParams.optionnels.parametreActiveX.nbcopiesdef))
                            this.serializedImpressionParams.optionnels.parametreActiveX.nbcopiesdef = (impressionParams.optionnels.parametreActiveX.nbcopiesdef >= this.serializedImpressionParams.optionnels.parametreActiveX.mincop ?
                                impressionParams.optionnels.parametreActiveX.nbcopiesdef :
                                this.serializedImpressionParams.optionnels.parametreActiveX.mincop);
                        if (Services.Controle.StaticNumberControle.isNumber(impressionParams.optionnels.parametreActiveX.maxcop))
                            this.serializedImpressionParams.optionnels.parametreActiveX.maxcop = impressionParams.optionnels.parametreActiveX.maxcop;
                    }
                }
                return ImpressionParamObligatoires;
            }());
            /**
            * Classe permettant de définir les paramètres Globaux pour l'ActiveX
            * @classe ParametresActiveXGlobauxREST
            */
            var ParametresActiveXGlobauxREST = /** @class */ (function () {
                /**
                * Constructeur de la classe ParametresActiveXGlobauxREST
                * @param impressionParams {ParametresActiveXGlobaux} Les paramètres globaux de l'ActiveX à sérialier pour le service local
                */
                function ParametresActiveXGlobauxREST(parametresActiveXGlobaux) {
                    this.serializedImpressionParams = {
                        annul: false,
                        impdef: false,
                        affred: false,
                        reimp: false
                    };
                    if (Services.Controle.StaticAnyControle.isNotUndefinedAndNotNull(parametresActiveXGlobaux)) {
                        if (Services.Controle.StaticBooleanControle.isBoolean(parametresActiveXGlobaux.annul))
                            this.serializedImpressionParams.annul = parametresActiveXGlobaux.annul;
                        if (Services.Controle.StaticBooleanControle.isBoolean(parametresActiveXGlobaux.impdef))
                            this.serializedImpressionParams.impdef = parametresActiveXGlobaux.impdef;
                        if (Services.Controle.StaticBooleanControle.isBoolean(parametresActiveXGlobaux.affred))
                            this.serializedImpressionParams.affred = parametresActiveXGlobaux.affred;
                        if (Services.Controle.StaticBooleanControle.isBoolean(parametresActiveXGlobaux.reimp))
                            this.serializedImpressionParams.reimp = parametresActiveXGlobaux.reimp;
                    }
                }
                return ParametresActiveXGlobauxREST;
            }());
            Services.Components.RegistryManager.getInstance().register(ImpressionManager);
        })(Impression = Services.Impression || (Services.Impression = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            var MobiliteManagerMessage = /** @class */ (function (_super) {
                __extends(MobiliteManagerMessage, _super);
                function MobiliteManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Mobilite) || this;
                }
                MobiliteManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Mobilite.Messages.MobiliteMessageSubject.GetInfoMachine: {
                            var lContent = pMessage.message;
                            return this.managerInstance.getInfoMachine();
                        }
                        case Mobilite.Messages.MobiliteMessageSubject.GetPeripheriques: {
                            var lContent = pMessage.message;
                            return this.managerInstance.getPeripheriques();
                        }
                        case Mobilite.Messages.MobiliteMessageSubject.GetPeripheriquesParType: {
                            var lContent = pMessage.message;
                            var typePeripherique = lContent.typePeripherique;
                            return this.managerInstance.getPeripheriquesParType(typePeripherique);
                        }
                        case Mobilite.Messages.MobiliteMessageSubject.GetReseau: {
                            var lContent = pMessage.message;
                            return this.managerInstance.getReseau();
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                MobiliteManagerMessage.CLASS_NAME = 'MyWay.Services.Mobilite.MobiliteManagerMessage';
                MobiliteManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(MobiliteManagerMessage.CLASS_NAME);
                return MobiliteManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Mobilite.MobiliteManagerMessage = MobiliteManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(MobiliteManagerMessage);
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraceSuivi;
        (function (TraceSuivi) {
            TraceSuivi.VERSION_BASE = 10;
            TraceSuivi.DB_TRACES_NAME = "DBTraceSuivi";
            TraceSuivi.DB_TABLE_TRACES = "tracessuivi";
        })(TraceSuivi = Services.TraceSuivi || (Services.TraceSuivi = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraceSuivi;
        (function (TraceSuivi) {
            var EventSizeChangeType;
            (function (EventSizeChangeType) {
                EventSizeChangeType[EventSizeChangeType["SET"] = 0] = "SET";
                EventSizeChangeType[EventSizeChangeType["ADD"] = 1] = "ADD";
            })(EventSizeChangeType = TraceSuivi.EventSizeChangeType || (TraceSuivi.EventSizeChangeType = {}));
            var TraceSuiviDB = /** @class */ (function () {
                function TraceSuiviDB(hasIndexedDb, library, onSizeChange) {
                    this.hasIndexedDb = hasIndexedDb;
                    this.library = library;
                    this.onSizeChange = onSizeChange;
                    this.memoryDB = [];
                    this.memoryDBAutoincrement = 0;
                }
                TraceSuiviDB.prototype.get = function (pKeys) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lResultats_10 = [];
                        this.memoryDB.forEach(function (pTraceDB) {
                            var lTraceFound = null;
                            pKeys.every(function (pKey) {
                                if (pKey === pTraceDB.id) {
                                    lTraceFound = pTraceDB;
                                }
                                return lTraceFound === null;
                            });
                            lResultats_10.push(_this.elementToInstanceAvecCle(lTraceFound));
                        });
                        return this.library.Core.createPromiseSelfResolved(lResultats_10);
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceSuiviDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceSuiviDB.TABLE_NOM);
                            var lResultats = [];
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pKeys.length) {
                                    pDefer.resolve(lResultats);
                                    return;
                                }
                                var lKey = pKeys[pCurrentIndex];
                                var lRequestRead = lTable.get(lKey);
                                lRequestRead.onsuccess = function (pEventRead) {
                                    if (!lRequestRead.result) {
                                        lResultats.push(null);
                                        console.warn("Trace " + lKey + " isn't found!");
                                    }
                                    else {
                                        lResultats.push({
                                            cle: lKey,
                                            element: lRequestRead.result
                                        });
                                    }
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lRequestRead.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors de la purge des traces de la base de données - Moment de la lecture"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                TraceSuiviDB.prototype.getAll = function () {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lResultats_11 = [];
                        this.memoryDB.forEach(function (pElement) {
                            lResultats_11.push(_this.elementToInstanceAvecCle(pElement));
                        });
                        return this.library.Core.createPromiseSelfResolved(lResultats_11);
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceSuiviDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceSuiviDB.TABLE_NOM);
                            var lRequestCursor = lTable.openCursor();
                            var lResultats = [];
                            lRequestCursor.onsuccess = function (pEvent) {
                                var lCursor = pEvent.target.result;
                                if (lCursor) {
                                    var lTraceSuiviEnregistrement = lCursor.value;
                                    var lKey = lCursor.key;
                                    lResultats.push({
                                        cle: lKey,
                                        element: lTraceSuiviEnregistrement
                                    });
                                    lCursor.continue();
                                }
                                else {
                                    pDefer.resolve(lResultats);
                                }
                            };
                            lRequestCursor.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors du comptage du nombre de traces"));
                            };
                        });
                    });
                };
                TraceSuiviDB.prototype.chercher = function (pText) {
                    var _this = this;
                    if (!pText) {
                        return this.getAll();
                    }
                    if (!this.hasIndexedDb) {
                        var lResultats_12 = [];
                        this.memoryDB.forEach(function (pTrace) {
                            if (_this.testTrace(pTrace, pText)) {
                                lResultats_12.push(_this.elementToInstanceAvecCle(pTrace));
                            }
                        });
                        return this.library.Core.createPromiseSelfResolved(lResultats_12);
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceSuiviDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceSuiviDB.TABLE_NOM);
                            var lRequestCursor = lTable.openCursor();
                            var lResultats = [];
                            lRequestCursor.onsuccess = function (pEvent) {
                                var lCursor = pEvent.target.result;
                                if (lCursor) {
                                    var lTraceSuiviEnregistrement = lCursor.value;
                                    if (_this.testTrace(lTraceSuiviEnregistrement, pText)) {
                                        var lKey = lCursor.key;
                                        lResultats.push({
                                            cle: lKey,
                                            element: lTraceSuiviEnregistrement
                                        });
                                    }
                                    lCursor.continue();
                                }
                                else {
                                    pDefer.resolve(lResultats);
                                }
                            };
                            lRequestCursor.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors du comptage du nombre de traces"));
                            };
                        });
                    });
                };
                TraceSuiviDB.prototype.count = function (pText) {
                    var _this = this;
                    if (pText || !this.hasIndexedDb) {
                        return this.chercher(pText).then(function (pTraces) {
                            return pTraces.length;
                        });
                    }
                    // Ici : Indexeddb et pas de criètère => Utilise la méthode count de indexeddb, optimisée!
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceSuiviDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceSuiviDB.TABLE_NOM);
                            var lRequestCount = lTable.count();
                            lRequestCount.onsuccess = function () {
                                var lNbElements = lRequestCount.result;
                                pDefer.resolve(lNbElements);
                            };
                            lRequestCount.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors du comptage du nombre de traces"));
                            };
                        });
                    });
                };
                TraceSuiviDB.prototype.ajouter = function (pTraces) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        pTraces.forEach(function (pTrace) {
                            if (pTrace.id === undefined) {
                                pTrace.id = _this.memoryDBAutoincrement++;
                            }
                            else if (pTrace.id > _this.memoryDBAutoincrement) {
                                _this.memoryDBAutoincrement = pTrace.id + 1;
                            }
                            _this.memoryDB.push(pTrace);
                        });
                        return this.library.Core.getPromesseSelfResoved();
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceSuiviDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceSuiviDB.TABLE_NOM);
                            var lAddSize = 0;
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pTraces.length) {
                                    _this.onSizeChange(lAddSize, EventSizeChangeType.ADD);
                                    pDefer.resolve();
                                    return;
                                }
                                var lTrace = pTraces[pCurrentIndex];
                                lAddSize += JSON.stringify(lTrace.trace).length;
                                var lAddRequest = lTable.add(lTrace);
                                lAddRequest.onsuccess = function () {
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lAddRequest.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors de la sauvegarde d'une trace"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                TraceSuiviDB.prototype.supprimer = function (pKeys) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lMemoryDB_4 = [];
                        this.memoryDB.forEach(function (pTraceDB) {
                            var lIsFound = false;
                            pKeys.every(function (pKey) {
                                lIsFound = pKey === pTraceDB.id;
                                return !lIsFound;
                            });
                            if (!lIsFound) {
                                lMemoryDB_4.push(pTraceDB);
                            }
                        });
                        this.memoryDB = lMemoryDB_4;
                        return this.library.Core.getPromesseSelfResoved();
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceSuiviDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceSuiviDB.TABLE_NOM);
                            var lSizeRemoved = 0;
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pKeys.length) {
                                    _this.onSizeChange(lSizeRemoved * -1, EventSizeChangeType.ADD);
                                    pDefer.resolve();
                                    return;
                                }
                                var lKey = pKeys[pCurrentIndex];
                                var lRequestRead = lTable.get(lKey);
                                lRequestRead.onsuccess = function (pEventRead) {
                                    if (!lRequestRead.result) {
                                        console.warn("Trace " + lKey + " isn't found!");
                                        lCallbackSaveNext(pCurrentIndex + 1);
                                        return;
                                    }
                                    lSizeRemoved += JSON.stringify(lRequestRead.result.trace).length;
                                    var lRequestDelete = lTable.delete(lKey);
                                    lRequestDelete.onsuccess = function () {
                                        lCallbackSaveNext(pCurrentIndex + 1);
                                    };
                                    lRequestDelete.onerror = function (ev) {
                                        console.error(ev);
                                        pDefer.reject(new Services.Erreur("Erreur lors de la purge des traces de la base de données - Moment de la suppression"));
                                    };
                                };
                                lRequestRead.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors de la purge des traces de la base de données - Moment de la lecture"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                TraceSuiviDB.prototype.mettreAJour = function (pElements) {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        var lDataToAdd_4 = [];
                        pElements.forEach(function (pElement) {
                            var lIsFound = false;
                            _this.memoryDB.every(function (pTableDB, pIndex) {
                                if (pElement.cle === pTableDB.id) {
                                    _this.memoryDB[pIndex] = pElement.element;
                                    lIsFound = true;
                                }
                                return !lIsFound;
                            });
                            if (!lIsFound) {
                                lDataToAdd_4.push(pElement.element);
                            }
                        });
                        if (lDataToAdd_4.length > 0) {
                            return this.ajouter(lDataToAdd_4);
                        }
                        else {
                            return this.library.Core.getPromesseSelfResoved();
                        }
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceSuiviDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceSuiviDB.TABLE_NOM);
                            var lCallbackSaveNext = function (pCurrentIndex) {
                                if (pCurrentIndex >= pElements.length) {
                                    //Terminé
                                    pDefer.resolve();
                                    return;
                                }
                                var lElement = pElements[pCurrentIndex];
                                var lRequestPut = lTable.put(lElement.element, lElement.cle);
                                lRequestPut.onsuccess = function () {
                                    lCallbackSaveNext(pCurrentIndex + 1);
                                };
                                lRequestPut.onerror = function (ev) {
                                    console.error(ev);
                                    pDefer.reject(new Services.Erreur("Erreur lors du reset de la base de données"));
                                };
                            };
                            lCallbackSaveNext(0);
                        });
                    });
                };
                TraceSuiviDB.prototype.resetAll = function () {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        this.memoryDB.length = 0;
                        return this.library.Core.getPromesseSelfResoved();
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceSuiviDB.TABLE_NOM], "readwrite");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceSuiviDB.TABLE_NOM);
                            var lRequestClear = lTable.clear();
                            lRequestClear.onsuccess = function (pEvent) {
                                _this.onSizeChange(0, EventSizeChangeType.SET);
                                pDefer.resolve();
                            };
                            lRequestClear.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors du reset de la base de données"));
                            };
                        });
                    });
                };
                TraceSuiviDB.prototype.getTracesToPurge = function () {
                    var _this = this;
                    if (!this.hasIndexedDb) {
                        return this.library.Core.createPromiseSelfResolved(this.memoryDB);
                    }
                    var lTraces = [];
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.actionOnDB(function (pDB) {
                            var lTransation = pDB.transaction([TraceSuiviDB.TABLE_NOM], "readonly");
                            lTransation.oncomplete = function () {
                                pDB.close();
                            };
                            lTransation.onabort = lTransation.oncomplete;
                            var lTable = lTransation.objectStore(TraceSuiviDB.TABLE_NOM);
                            var lRequestCursor = lTable.openCursor();
                            lRequestCursor.onsuccess = function (pEvent) {
                                var lCursor = pEvent.target.result;
                                if (lCursor) {
                                    var lTraceSuiviEnregistrement = lCursor.value;
                                    lTraceSuiviEnregistrement.id = lCursor.key;
                                    lTraces.push(lTraceSuiviEnregistrement);
                                    lCursor.continue();
                                }
                                else {
                                    pDefer.resolve(lTraces);
                                }
                            };
                            lRequestCursor.onerror = function (ev) {
                                console.error(ev);
                                pDefer.reject(new Services.Erreur("Erreur lors de la récupération des traces à purger"));
                            };
                        });
                    });
                };
                TraceSuiviDB.prototype.actionOnDB = function (pCallback) {
                    var lOpenAction = window.indexedDB.open("myway_stc_traces_suivis", TraceSuiviDB.VERSION);
                    lOpenAction.onupgradeneeded = function (ev) {
                        var lDB = ev.target.result;
                        switch (ev.oldVersion) {
                            case 0:
                                var lObjectStore = lDB.createObjectStore("traces_suivis", {
                                    autoIncrement: true
                                });
                                break;
                        }
                    };
                    lOpenAction.onsuccess = function (ev) {
                        var lDB = ev.target.result;
                        pCallback(lDB);
                    };
                };
                TraceSuiviDB.prototype.testTrace = function (pTrace, pText) {
                    if (pTrace.trace.processIdCurrent.match(pText)) {
                        return true;
                    }
                    return false;
                };
                TraceSuiviDB.prototype.elementToInstanceAvecCle = function (pElement) {
                    if (pElement) {
                        return {
                            cle: pElement.id,
                            element: pElement
                        };
                    }
                    else {
                        return null;
                    }
                };
                TraceSuiviDB.VERSION = 1;
                TraceSuiviDB.TABLE_NOM = "traces_suivis";
                return TraceSuiviDB;
            }());
            TraceSuivi.TraceSuiviDB = TraceSuiviDB;
        })(TraceSuivi = Services.TraceSuivi || (Services.TraceSuivi = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraceSuivi;
        (function (TraceSuivi) {
            var NB_ESSAIS_MAX_TRACES = 5;
            var isPurgeEnCours = false;
            var nbPurgesError = 0;
            var tailleTracesSuivisBD = 0;
            var EVENT_PURGE_ACTION;
            (function (EVENT_PURGE_ACTION) {
                EVENT_PURGE_ACTION[EVENT_PURGE_ACTION["DEBUT"] = 'DEBUT'] = "DEBUT";
                EVENT_PURGE_ACTION[EVENT_PURGE_ACTION["FIN"] = 'FIN'] = "FIN";
            })(EVENT_PURGE_ACTION || (EVENT_PURGE_ACTION = {}));
            /*
            * Crée les traces directement par appel des méthodes debug, etc. ou par envoi de message
            */
            var TraceSuiviManager = /** @class */ (function (_super) {
                __extends(TraceSuiviManager, _super);
                function TraceSuiviManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.TraceSuivi) || this;
                    // variable d'état précisant si une purge est en cours, et depuis combien de temps
                    _this.tempsDePurgeMax = 60 * 2; // 120s maximum pour une purge avant d'en retenter une
                    _this.storageInstanceSize = null;
                    _this.storageInstancePurge = null;
                    _this.nombreMaximumDeTraceAvantPurge = 20;
                    _this.traceSuiviDB = null;
                    _this.api = null;
                    _this.timerRunPurge = null;
                    _this.PURGE_TIME_WAIT_NEXT_TRACE = 2000; //Temps d'attente avant de purger réellement afin que les traces de suivis puissent partir par salve
                    _this.onCallbackOnFinProcessus = function (process) {
                        var lCallback = function (process) {
                            var trace;
                            for (var i in process.subElements) {
                                var elem = process.subElements[i];
                                if (elem.getPath() === process.getPath()) {
                                    if (elem.type === 'ProcessStep') {
                                        trace = new TraceSuivi.TraceSuiviModel();
                                        trace.state = 'FE';
                                        _this.library.TraceSuivi.SetProcessAndStepId(trace, elem.getPath(), false);
                                        _this.library.TraceSuivi.tracer(trace, false);
                                    }
                                    else if (elem.type == 'Process') {
                                        _this.onCallbackOnFinProcessus(elem);
                                    }
                                    break;
                                }
                            }
                            trace = new TraceSuivi.TraceSuiviModel();
                            var processid;
                            if (process.isSubProcess) {
                                trace.state = 'FS';
                                processid = process.id + "|";
                            }
                            else {
                                trace.state = 'FP';
                                processid = process.id + "|" + process.id + "|";
                            }
                            _this.library.TraceSuivi.SetProcessAndStepId(trace, processid, false);
                            _this.library.TraceSuivi.tracer(trace, false);
                        };
                        lCallback(process);
                        _this.library.TraceSuivi.purgerTraces();
                    };
                    _this.ecrituresTracesEnCours = [];
                    _this.doitRelancerPurge = false;
                    return _this;
                }
                TraceSuiviManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                        _this.storageInstanceSize = _this.library.Persistence.addStorage("traces_suivis_size", function (pOnTraceSizeEvent) {
                            tailleTracesSuivisBD = pOnTraceSizeEvent.newSize;
                        });
                        _this.storageInstancePurge = _this.library.Persistence.addStorage("traces_suivis_size", function (pOnTraceSizeEvent) {
                            isPurgeEnCours = pOnTraceSizeEvent.action === EVENT_PURGE_ACTION.FIN;
                            nbPurgesError = pOnTraceSizeEvent.nbPurgesError;
                        });
                        return Services.BaseDeDonnees.Generique.Factory.testImplementationIndexeddb().then(function (pIndexedDBIsImplemented) {
                            //Initialise la base de données
                            _this.traceSuiviDB = new TraceSuivi.TraceSuiviDB(pIndexedDBIsImplemented, _this.library, function (pNewSize, pType) {
                                if (!pIndexedDBIsImplemented) {
                                    // Non partagé entre les instances du navigateur!
                                    return;
                                }
                                switch (pType) {
                                    case TraceSuivi.EventSizeChangeType.ADD:
                                        tailleTracesSuivisBD += pNewSize;
                                        break;
                                    case TraceSuivi.EventSizeChangeType.SET:
                                        tailleTracesSuivisBD = pNewSize;
                                        break;
                                    default:
                                        TraceSuiviManager.logger.error("L'evennement de type %1 n'est pas geré par le callback onSizeChanged() sur la base de données des traces de suivis", pType);
                                }
                                _this.storageInstanceSize.saveValue({
                                    newSize: tailleTracesSuivisBD
                                });
                            });
                            _this.library.BaseDeDonnees.enregistrerDB("TRACE_SUIVIS", {
                                version: TraceSuivi.TraceSuiviDB.VERSION,
                                implementation: pIndexedDBIsImplemented ? Services.BaseDeDonnees.BaseDeDonneesImplementation.INDEXEDDB : Services.BaseDeDonnees.BaseDeDonneesImplementation.MEMORY,
                                getTables: function () {
                                    return [TraceSuivi.TraceSuiviDB.TABLE_NOM];
                                },
                                getTable: function (pNom) {
                                    switch (pNom) {
                                        case TraceSuivi.TraceSuiviDB.TABLE_NOM:
                                            return _this.traceSuiviDB;
                                        default:
                                            return null;
                                    }
                                }
                            });
                            //Recalcule la taille de la DB
                            return _this.traceSuiviDB.getAll().then(function (pTraces) {
                                var lSize = 0;
                                pTraces.forEach(function (pTrace) {
                                    if (!pTrace) {
                                        return;
                                    }
                                    lSize += JSON.stringify(pTrace.element.trace).length;
                                });
                                tailleTracesSuivisBD = lSize;
                                _this.storageInstanceSize.saveValue({
                                    newSize: tailleTracesSuivisBD
                                });
                            });
                        });
                    }).then(function () {
                        //S'inscrit au context pour tracer les fins de processus
                        _this.library.Context.addListenerOnTerminerProcessus(_this.onCallbackOnFinProcessus);
                    });
                };
                TraceSuiviManager.prototype.dispose = function () {
                    this.library.Context.removeListenerOnTerminerProcessus(this.onCallbackOnFinProcessus);
                    return _super.prototype.dispose.call(this);
                };
                /**
                 * Complète l'objet de trace fourni en paramètre
                 * @param {TraceSuiviModel} trace L'objet à compléter
                 */
                TraceSuiviManager.prototype.recupererInfos = function (trace, pLaisserValeursDefaut) {
                    if (this.library.Context) {
                        //- le quartet : Code Agent, code établissement, code agence, EDS + le client (nom du poste)
                        var authentificationInfo = this.library.Context.GetAuthentificationInfo();
                        if (authentificationInfo) {
                            trace.establishment = pLaisserValeursDefaut && trace.establishment !== undefined ? trace.establishment : authentificationInfo.codeEtablissement;
                            trace.deviceId = pLaisserValeursDefaut && trace.deviceId !== undefined ? trace.deviceId : authentificationInfo.numeroStationTravail;
                            if (authentificationInfo.agentConnecte) {
                                trace.agentCode = pLaisserValeursDefaut && trace.agentCode !== undefined ? trace.agentCode : authentificationInfo.agentConnecte.referenceExterneAgent;
                                trace.computerEdsInternalId = pLaisserValeursDefaut && trace.computerEdsInternalId !== undefined ? trace.computerEdsInternalId : authentificationInfo.agentConnecte.numeroInterneEds;
                                trace.agentEdsType = pLaisserValeursDefaut && trace.agentEdsType !== undefined ? trace.agentEdsType : authentificationInfo.agentConnecte.typeEdsRattachement;
                                trace.agentEdsCode = pLaisserValeursDefaut && trace.agentEdsCode !== undefined ? trace.agentEdsCode : authentificationInfo.agentConnecte.referenceExterneEdsRattachemen;
                                trace.agentEdsInternalRef = pLaisserValeursDefaut && trace.agentEdsInternalRef !== undefined ? trace.agentEdsInternalRef : authentificationInfo.agentConnecte.numeroEdsSuperieur;
                            }
                        }
                        var d = new Date();
                        var lTimezoneNumber = d.getTimezoneOffset();
                        var lTimezoneHeures = Math.floor(Math.abs(lTimezoneNumber / 60));
                        var lTimezoneMinutes = Math.abs(lTimezoneNumber) - (lTimezoneHeures * 60);
                        var lTimezoneHeuresFormatee = Services.CoreCommon.StringUtils.leftPad(lTimezoneHeures, "0", 2);
                        var lTimezoneMinutesFormatee = Services.CoreCommon.StringUtils.leftPad(lTimezoneMinutes, "0", 2);
                        var timezoneOffsetHours = ((lTimezoneNumber < 0) ? '+' : '-') + lTimezoneHeuresFormatee + lTimezoneMinutesFormatee;
                        if (trace.dateUse === null || trace.dateUse === undefined)
                            trace.dateUse = d.getTime();
                        // trace.timezone = "+0200";
                        trace.timezone = pLaisserValeursDefaut && trace.timezone !== undefined ? trace.timezone : timezoneOffsetHours;
                        trace.computerSi = pLaisserValeursDefaut && trace.computerSi !== undefined ? trace.computerSi : Services.CoreCommon.VersionMySys;
                        // L'id du processus principal et le chemin courant des instances
                        //Donnees.StaticStringExtension.getEmptyStringIfNotStringOrGetItSelf(
                        var currentPath = this.library.Context.GetPortalContext().currentPath;
                        this.SetProcessAndStepId(trace, currentPath, pLaisserValeursDefaut);
                        if (trace.data === null || trace.data === undefined)
                            trace.data = {};
                        var stepInfo = this.library.Context.GetCurrentStepInfo();
                        if (stepInfo && stepInfo.BusinessCode) {
                            trace.processIdBusiness = pLaisserValeursDefaut && trace.processIdBusiness !== undefined ? trace.processIdBusiness : stepInfo.BusinessCode;
                        }
                        else {
                            trace.processIdBusiness = pLaisserValeursDefaut && trace.processIdBusiness !== undefined ? trace.processIdBusiness : "";
                        }
                        if (stepInfo && stepInfo.Contrats) {
                            for (var i = 0; i < stepInfo.Contrats.length; i++) {
                                var contrat = stepInfo.Contrats[i];
                                if (contrat) {
                                    var key = contrat.NomData;
                                    if (contrat.NomData.indexOf('=>') > 0) {
                                        var parts = contrat.NomData.split('=>');
                                        key = parts[1];
                                    }
                                    var value = this.library.Context.GetFromContext(key);
                                    if (value !== null && value !== undefined) {
                                        var length = 0;
                                        if (typeof value === 'object') {
                                            length = JSON.stringify(value).length;
                                        }
                                        else if (typeof value === 'string') {
                                            length = value.trim().length;
                                        }
                                        if (length > 0 && length < 50)
                                            trace.data[key] = pLaisserValeursDefaut && trace.data[key] !== undefined ? trace.data[key] : value;
                                    }
                                }
                            }
                        }
                        return this.library.Mobilite.getReseau().then(function (result) {
                            switch (result) {
                                case Services.Mobilite.TYPE_RESEAU.CONNECTE:
                                case Services.Mobilite.TYPE_RESEAU.INCONNU:
                                    trace.deviceType = 'I';
                                    break;
                                case Services.Mobilite.TYPE_RESEAU.DECONNECTE:
                                    trace.deviceType = 'D';
                                    break;
                                case Services.Mobilite.TYPE_RESEAU.FILAIRE:
                                    trace.deviceType = 'F';
                                    break;
                                case Services.Mobilite.TYPE_RESEAU.VPN:
                                    trace.deviceType = 'V';
                                    break;
                                case Services.Mobilite.TYPE_RESEAU.WIFI_AGENCE:
                                    trace.deviceType = 'W';
                                    break;
                                default:
                                    trace.deviceType = 'I';
                            }
                        }).catch(function () {
                            trace.deviceType = 'I';
                        }).then(function () {
                            return trace;
                        });
                    }
                    else {
                        var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                        lDefer.resolve(trace);
                        return lDefer.promise;
                    }
                };
                TraceSuiviManager.prototype.SetProcessAndStepId = function (trace, currentPath, pLaisserValeursDefaut) {
                    var mainProcessId = Services.Context.PortalContext.GetPathPart(currentPath, Services.Context.PATH_PART.MAIN_PROCESS_ID);
                    var processId = Services.Context.PortalContext.GetPathPart(currentPath, Services.Context.PATH_PART.LAST_PROCESS_ID);
                    var stepId = Services.Context.PortalContext.GetPathPart(currentPath, Services.Context.PATH_PART.STEP_ID);
                    trace.processIdMaster = pLaisserValeursDefaut && trace.processIdMaster !== undefined ? trace.processIdMaster : this.CleanProcessId(mainProcessId, 20);
                    trace.processIdCurrent = pLaisserValeursDefaut && trace.processIdCurrent !== undefined ? trace.processIdCurrent : this.CleanProcessId(processId, 20);
                    trace.stepIdCurrent = pLaisserValeursDefaut && trace.stepIdCurrent !== undefined ? trace.stepIdCurrent : this.CleanStepId(stepId, 20, 24);
                };
                TraceSuiviManager.prototype.GetCodeAndUId = function (id, separator) {
                    if (!id)
                        return null;
                    var li = id.lastIndexOf(separator);
                    if (li >= 0) {
                        var code = id.substring(0, li);
                        var uid = id.substring(li + 1, id.length);
                        return { code: code, uid: uid };
                    }
                    else {
                        return null;
                    }
                };
                TraceSuiviManager.prototype.CleanProcessId = function (processId, max) {
                    if (!processId)
                        return processId;
                    var codeAndUid = this.GetCodeAndUId(processId, '-');
                    if (codeAndUid) {
                        var code = codeAndUid.code;
                        var uid = codeAndUid.uid;
                        if (code.length > max)
                            code = code.substring(0, max);
                        return code + '-' + uid;
                    }
                    else {
                        if (processId.length > max + 9)
                            return processId.substring(0, max + 9);
                        return processId;
                    }
                };
                TraceSuiviManager.prototype.CleanStepId = function (stepId, max1, max2) {
                    if (!stepId)
                        return stepId;
                    var codeAndUid = this.GetCodeAndUId(stepId, '-');
                    if (codeAndUid) {
                        var code = codeAndUid.code;
                        var uid = codeAndUid.uid;
                        var code1And2 = this.GetCodeAndUId(code, ':');
                        if (code1And2) {
                            var code1 = code1And2.code;
                            var code2 = code1And2.uid;
                            if (code1.length > max1)
                                code1 = code1.substring(0, max1);
                            var code2AndInc = this.GetCodeAndUId(code2, '_');
                            if (code2AndInc) {
                                var code22 = code2AndInc.code;
                                var code2I = code2AndInc.uid;
                                if (code22.length > max1)
                                    code22 = code22.substring(0, max1);
                                code2 = code22 + '_' + code2I;
                            }
                            else {
                                if (code2.length > max1)
                                    code2 = code2.substring(0, max1);
                            }
                            code = code1 + ':' + code2;
                        }
                        else {
                            if (code.length > max1 + max2 + 1)
                                code = code.substring(0, max1 + max2 + 1);
                        }
                        return code + '-' + uid;
                    }
                    else {
                        if (stepId.length > max1 + max2 + 1 + 9)
                            return stepId.substring(0, max1 + max2 + 1 + 9);
                        return stepId;
                    }
                };
                /**
                 * Complète l'objet de trace (sauf si spécifié) et l'envoie à l'API de trace de suivi si IndexedDB indisponible, ou l'enregistre si présent
                 * @param trace L'objet à compléter et tracer
                 * @param pCompleterTrace Indique s'il faut ou pas compléter l'objet trace. Si explicitement FALSE alors la trace ne sera pas complétée.
                 * @return Une promesse d'écriture
                 */
                TraceSuiviManager.prototype.tracer = function (trace, pCompleterTrace) {
                    var _this = this;
                    var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                    this.ecrituresTracesEnCours.push(lDefer.promise);
                    return this.recupererInfos(trace, pCompleterTrace === false).then(function (pTrace) {
                        if (!pTrace.processIdMaster || pTrace.processIdMaster.indexOf("TECH_") !== 0) {
                            return _this.recordInIDB(pTrace).then(function (pNbTraces) {
                                lDefer.resolve();
                                return pNbTraces;
                            });
                        }
                        else {
                            lDefer.resolve();
                            return _this.checkTailleDB();
                        }
                    });
                };
                /**
                 * Enregistre une trace
                 * @param {TraceSuiviModel} trace L'objet à tracer
                 */
                TraceSuiviManager.prototype.recordInIDB = function (trace) {
                    var _this = this;
                    TraceSuiviManager.logger.debug("Ecriture d'une trace de suivi %1", JSON.stringify(trace));
                    var lEnregistrement = {
                        trace: trace,
                        datePurge: null,
                        nbEssais: 0
                    };
                    return this.traceSuiviDB.ajouter([lEnregistrement]).then(function () {
                        return _this.checkTailleDB();
                    });
                };
                /**
                 * Vérifie la taille de la base IndexedDB de trace de suivi
                 * Si la taille excède le nombreMaximumDeTraceAvantPurge, lance une purge
                 */
                TraceSuiviManager.prototype.checkTailleDB = function (pForcerPurger) {
                    var _this = this;
                    if (this.timerRunPurge !== null) {
                        clearTimeout(this.timerRunPurge);
                        this.timerRunPurge = null;
                    }
                    this.timerRunPurge = setTimeout(function () {
                        _this.purgerTraces();
                    }, this.PURGE_TIME_WAIT_NEXT_TRACE);
                    return this.library.Core.createPromiseSelfResolved(0);
                };
                /*
                * Purger les traces de la base pour les archiver
                */
                TraceSuiviManager.prototype.purgerTraces = function () {
                    var _this = this;
                    if (isPurgeEnCours) {
                        return;
                    }
                    if (this.timerRunPurge !== null) {
                        clearTimeout(this.timerRunPurge);
                        this.timerRunPurge = null;
                    }
                    isPurgeEnCours = true;
                    this.doitRelancerPurge = false;
                    this.storageInstancePurge.saveValue({
                        action: EVENT_PURGE_ACTION.DEBUT,
                        nbPurgesError: nbPurgesError
                    });
                    var lNbTracesMisesAJour = 0;
                    var lEcrituresTracesEnCours = this.ecrituresTracesEnCours;
                    this.ecrituresTracesEnCours = [];
                    TraceSuiviManager.logger.debug("Demarrage de la purge des traces de suivi");
                    return Services.CoreCommon.ServiceDePromesse.all(lEcrituresTracesEnCours).then(function () {
                        //Necessaire sinon il bug à retourner void[] au lieu de void!
                    }, function (pErreur) {
                        //Ignore les traces mal enregistrées
                    }).then(function () {
                        var lTracesAEnvoyer = [];
                        var lTracesMisesAJour = [];
                        var lIdTracesMisesAJour = [];
                        var lTracesEnregistrement = null;
                        return _this.traceSuiviDB.getTracesToPurge().then(function (pTracesEnregistrement) {
                            lTracesEnregistrement = pTracesEnregistrement;
                            if (pTracesEnregistrement.length === 0) {
                                isPurgeEnCours = false;
                                _this.storageInstancePurge.saveValue({
                                    action: EVENT_PURGE_ACTION.FIN,
                                    nbPurgesError: nbPurgesError
                                });
                                return;
                            }
                            var lTimestampCourant = new Date().getTime();
                            pTracesEnregistrement.forEach(function (pTrace) {
                                pTrace.datePurge = lTimestampCourant;
                                lTracesAEnvoyer.push(pTrace.trace);
                                lTracesMisesAJour.push({
                                    cle: pTrace.id,
                                    element: pTrace
                                });
                                lIdTracesMisesAJour.push(pTrace.id);
                            });
                            return _this.traceSuiviDB.mettreAJour(lTracesMisesAJour);
                        }).then(function () {
                            return _this.library.Context.getAuthentificationInfo();
                        }).then(function (pAuthentificationInfo) {
                            return _this.api.envoyerTracesSuivi(lTracesAEnvoyer, pAuthentificationInfo);
                        }).then(function () {
                            //Tout s'est bien passé, supprime ces traces
                            nbPurgesError = 0;
                            lNbTracesMisesAJour = lIdTracesMisesAJour.length;
                            return _this.traceSuiviDB.supprimer(lIdTracesMisesAJour);
                        }, function (pErreur) {
                            lNbTracesMisesAJour = 0;
                            console.error(pErreur);
                            return _this.finDePurgeFail(lTracesMisesAJour);
                        }).finally(function () {
                            isPurgeEnCours = false;
                            _this.storageInstancePurge.saveValue({
                                action: EVENT_PURGE_ACTION.FIN,
                                nbPurgesError: nbPurgesError
                            });
                            if (_this.doitRelancerPurge) {
                                _this.purgerTraces();
                            }
                        }).then(function () {
                            return lNbTracesMisesAJour;
                        });
                    });
                };
                TraceSuiviManager.prototype.finDePurgeFail = function (pTraces) {
                    var _this = this;
                    nbPurgesError++;
                    if (nbPurgesError >= 5) {
                        //Environnement ne permettant pas de purger les traces, supprime tout!
                        //this.traceSuiviDB.resetAll();
                        return;
                    }
                    var lTracesReportees = [];
                    var lIdTracesSupprimees = [];
                    pTraces.forEach(function (pTrace) {
                        if (pTrace.element.nbEssais < NB_ESSAIS_MAX_TRACES) {
                            pTrace.element.nbEssais++;
                            lTracesReportees.push(pTrace);
                        }
                        else {
                            lIdTracesSupprimees.push(pTrace.cle);
                        }
                    });
                    return this.traceSuiviDB.mettreAJour(lTracesReportees).then(function () {
                        return _this.traceSuiviDB.supprimer(lIdTracesSupprimees);
                    }).then(function () {
                        if (lTracesReportees.length > 0) {
                            TraceSuiviManager.logger.warn("Des traces n'ont pas pu être envoyées, incrémentation de leur compteur de tentative d'envois");
                        }
                        if (lIdTracesSupprimees.length > 0) {
                            TraceSuiviManager.logger.warn("Des traces ont atteint leur quota de tentative d'envois, elles sont donc supprimées");
                        }
                    });
                };
                TraceSuiviManager.CLASS_NAME = 'MyWay.Services.Lisa.TraceSuiviManager';
                TraceSuiviManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(TraceSuiviManager.CLASS_NAME);
                return TraceSuiviManager;
            }(Services.Components.ComponentManagerBase)); // fin TraceSuiviManager
            TraceSuivi.TraceSuiviManager = TraceSuiviManager;
            Services.Components.RegistryManager.getInstance().register(TraceSuiviManager);
        })(TraceSuivi = Services.TraceSuivi || (Services.TraceSuivi = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {})); // fin module
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Numerisation;
        (function (Numerisation) {
            var NumerisationManagerMessage = /** @class */ (function (_super) {
                __extends(NumerisationManagerMessage, _super);
                function NumerisationManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Numerisation) || this;
                }
                NumerisationManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Numerisation.NumerisationMessageSubject.Numeriser: {
                            var lContent = pMessage.message;
                            var data = lContent.data;
                            var numerisationParams = lContent.numerisationParams;
                            return this.managerInstance.numeriser(data, numerisationParams);
                        }
                        case Numerisation.NumerisationMessageSubject.GetSpiFactoryActivationStatut: {
                            var lContent = pMessage.message;
                            return this.managerInstance.getSpiFactoryActivationStatut();
                        }
                        case Numerisation.NumerisationMessageSubject.NumeriserArcade: {
                            var lContent = pMessage.message;
                            var data = lContent.data;
                            var numerisationArcadeParams = lContent.numerisationParams;
                            return this.managerInstance.numeriserArcade(data, numerisationArcadeParams);
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                NumerisationManagerMessage.CLASS_NAME = 'MyWay.Services.Numerisation.NumerisationManagerMessage';
                NumerisationManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(NumerisationManagerMessage.CLASS_NAME);
                return NumerisationManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Numerisation.NumerisationManagerMessage = NumerisationManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(NumerisationManagerMessage);
        })(Numerisation = Services.Numerisation || (Services.Numerisation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Impression;
        (function (Impression) {
            var ImpressionManagerMessage = /** @class */ (function (_super) {
                __extends(ImpressionManagerMessage, _super);
                function ImpressionManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Impression) || this;
                }
                ImpressionManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Impression.Messages.ImpressionMessageSubject.Generer: {
                            var lContent = pMessage.message;
                            var data = lContent.data;
                            var generationParams = lContent.generationParams;
                            return this.managerInstance.generer(data, generationParams);
                        }
                        case Impression.Messages.ImpressionMessageSubject.GetJsonConverti: {
                            var lContent = pMessage.message;
                            var data = lContent.data;
                            return this.managerInstance.getJsonConverti(data);
                        }
                        case Impression.Messages.ImpressionMessageSubject.Imprimer: {
                            var lContent = pMessage.message;
                            var data = lContent.data;
                            var impressionParams = lContent.impressionParams;
                            return this.managerInstance.imprimer(data, impressionParams);
                        }
                        case Impression.Messages.ImpressionMessageSubject.ImprimerLot: {
                            var lContent = pMessage.message;
                            var data = lContent.data;
                            var parametresActiveXGlobaux = lContent.parametresActiveXGlobaux;
                            return this.managerInstance.imprimerLot(data, parametresActiveXGlobaux);
                        }
                        case Impression.Messages.ImpressionMessageSubject.GenererImprimer: {
                            var lContent = pMessage.message;
                            var data = lContent.data;
                            var generationImpressionParams = lContent.generationImpressionParams;
                            return this.managerInstance.genererImprimer(data, generationImpressionParams);
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                ImpressionManagerMessage.CLASS_NAME = 'MyWay.Services.Impression.ImpressionManagerMessage';
                ImpressionManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ImpressionManagerMessage.CLASS_NAME);
                return ImpressionManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Impression.ImpressionManagerMessage = ImpressionManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(ImpressionManagerMessage);
        })(Impression = Services.Impression || (Services.Impression = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*
* Module de gestion des capacités
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Capacites;
        (function (Capacites) {
            /*
            * Class de gestion des capacités
            */
            var CapacitesManager = /** @class */ (function (_super) {
                __extends(CapacitesManager, _super);
                function CapacitesManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Capacites) || this;
                    _this.api = null;
                    return _this;
                }
                CapacitesManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.api = pApi;
                    this.api.setTotemCapable(pManagerInitializer.isTotemCapable);
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer);
                };
                /**
                 * Permet de vérifier si on a la capacité pour une règle donnée.
                 * @return {IPromesse<boolean>} : returne 'true' si on a la capacité, sinon 'false'
                 */
                CapacitesManager.prototype.getCapacite = function (regle) {
                    if (Capacites.REGLE[regle] === undefined) {
                        CapacitesManager.logger.error('Règle capacité inconnue');
                        return Services.Promesses.createPromiseSelfError(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_CAPACITES_REGLE_INCONNU));
                    }
                    else {
                        return this.api.resolve(regle).then(function (result) {
                            CapacitesManager.logger.debug('resolve success - %1', result);
                            return result;
                        })
                            .catch(function (error) {
                            CapacitesManager.logger.error('resolve failed - %1', JSON.stringify(error));
                            throw error;
                        });
                    }
                };
                CapacitesManager.CLASS_NAME = 'MyWay.Services.Capacites.CapacitesManager';
                CapacitesManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(CapacitesManager.CLASS_NAME);
                return CapacitesManager;
            }(Services.Components.ComponentManagerBase));
            Capacites.CapacitesManager = CapacitesManager;
            Services.Components.RegistryManager.getInstance().register(CapacitesManager);
        })(Capacites = Services.Capacites || (Services.Capacites = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraceSuivi;
        (function (TraceSuivi) {
            var TraceSuiviManagerMessage = /** @class */ (function (_super) {
                __extends(TraceSuiviManagerMessage, _super);
                function TraceSuiviManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.TraceSuivi) || this;
                }
                TraceSuiviManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case TraceSuivi.Messages.TraceSuiviMessageSubject.SendTraceSuivi: {
                            var lContent = pMessage.message;
                            var trace = lContent.trace;
                            return this.managerInstance.tracer(trace);
                        }
                        case TraceSuivi.Messages.TraceSuiviMessageSubject.SendTraceSuiviForcee: {
                            var lContent = pMessage.message;
                            var trace = lContent.trace;
                            return this.managerInstance.tracer(trace, false);
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                TraceSuiviManagerMessage.CLASS_NAME = 'MyWay.Services.Lisa.TraceSuiviManagerMessage';
                TraceSuiviManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(TraceSuiviManagerMessage.CLASS_NAME);
                return TraceSuiviManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            TraceSuivi.TraceSuiviManagerMessage = TraceSuiviManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(TraceSuiviManagerMessage);
        })(TraceSuivi = Services.TraceSuivi || (Services.TraceSuivi = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Interop;
        (function (Interop) {
            var InteropManager = /** @class */ (function (_super) {
                __extends(InteropManager, _super);
                function InteropManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Interop) || this;
                    _this.api = null;
                    _this.EndTransition = function (processCode) {
                        InteropManager.logger.debug('Start de EndTransition');
                        _this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.FinDeTransition, processCode));
                        _this.library.Context.SendPortalContext(true, 'Interop: EndTransition');
                        _this.library.Context.DisplayProcesses();
                    };
                    return _this;
                }
                InteropManager.prototype.init = function (pManagerlibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerlibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                        _this._disableStorageEvent = false;
                        _this._messageBus = new Interop.InteropMessageBus();
                        _this.PortalType = pManagerInitializer.PortalType;
                        InteropManager._instance = _this;
                        _this._subscribeToEvent();
                        _this._messageBus.StorageNotification = _this.library.Persistence.addStorage('notifications.interop', function () {
                            _this.OnInteropMessageBusStorageChanged();
                        });
                        return _this._getCommonDataInteropToUpdate();
                    }).then(function () {
                        _this.library.Context.setOnChangePortailType(function (pPortailType) {
                            _this.PortalType += pPortailType;
                        });
                    });
                };
                InteropManager.prototype.dispose = function () {
                    this.library.Context.setOnChangePortailType(null);
                    return _super.prototype.dispose.call(this);
                };
                InteropManager.prototype.Lancer = function (executableWrapper, contexte, parametres, sync, errorCallback) {
                    InteropManager.logger.debug('Start de Lancer');
                    this.api.lancer(executableWrapper, contexte, parametres, sync, errorCallback);
                };
                InteropManager.prototype.AddToContextInterop = function (level, key, value, sendResponseCallback, errorCallback) {
                    InteropManager.logger.debug('Start de AddToContextInterop');
                    this.api.addToContextInterop(level, key, value, function (reponse) { sendResponseCallback(); }, errorCallback);
                };
                InteropManager.prototype.AddListToContextInterop = function (level, datas, sendResponseCallback, errorCallback) {
                    InteropManager.logger.debug('Start de AddListToContextInterop');
                    this.api.addListToContextInterop(level, datas, function (reponse) { sendResponseCallback(); }, errorCallback);
                };
                InteropManager.prototype.GetFromContextInterop = function (level, key, sendResponseCallback, errorCallback) {
                    InteropManager.logger.debug('Start de GetFromContextInterop');
                    this.api.getFromContextInterop(level, key, function (reponse) { sendResponseCallback(); }, errorCallback);
                };
                InteropManager.prototype.GetListFromContextInterop = function (level, datas, sendResponseCallback, errorCallback) {
                    InteropManager.logger.debug('Start de GetFromContextInterop');
                    this.api.getListFromContextInterop(level, datas, function (reponse) { sendResponseCallback(); }, errorCallback);
                };
                //EndStep
                InteropManager.prototype.EndStep = function () {
                    InteropManager.logger.debug('Start de EndStep');
                    var portal = this.library.Context.RemoveCurrentStep();
                    this.api.notifierFinStep(this.library.Context.GetCurrentStepId());
                };
                InteropManager.prototype.NotifyEndProcessus = function (processId) {
                    InteropManager.logger.debug('Start de NotifyEndProcessus - Id du process %1', processId);
                    this.library.TraceSuivi.purgerTraces();
                    this.library.Trace.purgerTraces();
                    var dataInterop = this.library.Context.GetFromContext("CommonDataInterop");
                    var dataInteropValues = this.library.Context.GetListFromContext(JSON.parse(dataInterop));
                    this._notifierFinProcessusInterop(processId, dataInteropValues);
                };
                InteropManager.prototype._notifierFinProcessusInterop = function (processId, datas) {
                    var _this = this;
                    setTimeout(function () {
                        _this.api.notifierFinProcessus(processId, datas);
                    }, 500);
                };
                InteropManager.prototype.NotifyBeginProcessus = function (processId) {
                    InteropManager.logger.debug('Start de NotifyBeginProcessus - Id du process %1', processId);
                    this.api.notifierEtatProcessus(processId, "ON");
                };
                InteropManager.prototype.NotifierChangementNomProcessus = function (processId, nomProcessus) {
                    InteropManager.logger.debug('Start de NotifierChangementNomProcessus - Id du process %1, nom de processus %2', processId, nomProcessus);
                    this.api.notifierChangementNomProcessus(processId, nomProcessus);
                };
                InteropManager.prototype.AfficherWindowParHandle = function (handle, affiche) {
                    InteropManager.logger.debug('Lancement de Afficher Windows par handle - handle: %1, affiche: %2', handle, affiche);
                    this.api.afficherWindowParHandle(handle, affiche);
                };
                InteropManager.prototype.AfficherWindowParPid = function (pid, affiche) {
                    InteropManager.logger.debug('Lancement de Afficher Windows par pid - pid: %1, affiche: %2', pid, affiche);
                    this.api.afficherWindowParPid(pid, affiche);
                };
                InteropManager.prototype.AfficherSynthese = function (numeroClient) {
                    InteropManager.logger.debug('Lancement de Afficher Synthèse - numero client : %1', numeroClient);
                    this.api.afficherSynthese(numeroClient);
                };
                InteropManager.prototype.ActiverApplicationAppelante = function (numeroPlan) {
                    InteropManager.logger.debug('Lancement de activation application appelante - numero plan : %1', numeroPlan);
                    this.api.activerApplicationAppelante(numeroPlan);
                };
                InteropManager.prototype.GetVarEnv = function (nom, callback, errorCallback) {
                    this.api.getVarEnv(nom, function (valeur) {
                        if (callback) {
                            callback(valeur);
                        }
                        InteropManager.logger.debug('GetVarEnv success - %1', valeur);
                    }, function (error) {
                        if (errorCallback) {
                            errorCallback(error);
                        }
                        InteropManager.logger.error('GetVarEnv failed - %1', JSON.stringify(error));
                    });
                };
                InteropManager.prototype.GetRegistryValue = function (niveau, souscle, nom, callback, errorCallback) {
                    this.api.getRegistryValue(niveau, souscle, nom, function (valeur) {
                        if (callback) {
                            callback(valeur);
                        }
                        InteropManager.logger.debug('GetRegistryValue success - %1', valeur);
                    }, function (error) {
                        errorCallback(error);
                        InteropManager.logger.error('GetRegistryValue failed - %1', JSON.stringify(error));
                    });
                };
                InteropManager.prototype.LireFichier = function (nomFichier) {
                    var pathFichier = this.getPathFichier(nomFichier);
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    this.api.lireFichier(pathFichier).then(function (data) {
                        InteropManager.logger.debug('LireFichier success - path Fichier  %1, donnees: %2', pathFichier, data);
                        deferred.resolve(data);
                    }).catch(function (error) {
                        InteropManager.logger.error('LireFichier failed - path Fichier %1, erreurs: %2', pathFichier, JSON.stringify(error));
                        deferred.reject(error);
                    });
                    return deferred.promise;
                };
                InteropManager.prototype.GetInfoFichier = function (pathFichier, callback, errorCallback) {
                    this.api.getInfoFichier(pathFichier, function (infoFichier) {
                        if (callback)
                            callback(infoFichier);
                        InteropManager.logger.debug('GetInfoFichier success - %1', JSON.stringify(infoFichier));
                    }, function (error) {
                        if (errorCallback)
                            errorCallback(error);
                        InteropManager.logger.error('GetInfoFichier failed - %1', JSON.stringify(error));
                    });
                };
                InteropManager.prototype.EcrireFichier = function (nomFichier, fluxdonnees, ajouter, creeDir) {
                    var pathFichier = this.getPathFichier(nomFichier);
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    this.api.ecrireFichier(pathFichier, fluxdonnees, ajouter, creeDir).then(function (data) {
                        InteropManager.logger.debug('EcrireFichier Success - path Fichier  %1, donnees: %2', pathFichier, data);
                        deferred.resolve(data);
                    }).catch(function (error) {
                        InteropManager.logger.error('EcrireFichier failed - %1', JSON.stringify(error));
                        deferred.reject(error);
                    });
                    return deferred.promise;
                };
                InteropManager.prototype._subscribeToEvent = function () {
                    var _this = this;
                    if (this.api) {
                        this.api.subscribeToEvent(InteropManager._onEvent, InteropManager._onAcceptEvent, InteropManager._onConnection);
                    }
                    if (this.library.Context) {
                        this.library.Context.onProcessNameChanged = function (processId, nomProcessus) {
                            _this.NotifierChangementNomProcessus(processId, nomProcessus);
                        };
                    }
                };
                InteropManager._onEvent = function (event, callback) {
                    var self = InteropManager._instance;
                    self.Deliver(event).then(function () {
                        if (callback)
                            callback();
                    }, function () {
                        self._shelveEvent(event);
                        if (callback)
                            callback();
                    });
                };
                InteropManager.prototype._getCommonDataInteropToUpdate = function () {
                    var _this = this;
                    return this.api.getCommonDataInteropToUpdate().then(function (dataInterop) {
                        _this.library.Context.AddToContext(Services.Context.StorageLevel.Global, "CommonDataInterop", JSON.stringify(dataInterop));
                    }).catch(function () { });
                };
                InteropManager._onAcceptEvent = function (event) {
                    var accept = false;
                    var self = InteropManager._instance;
                    var destinataire = event.Contenu.Destinataire;
                    var processLength = self.library.Context.GetPortalContext().processes.length;
                    if (self.PortalType !== destinataire) {
                        //destinataire is a processStepId                
                        var processStep = self.library.Context.GetProcessStepById(destinataire);
                        if (processStep)
                            accept = true;
                        else
                            accept = false;
                    }
                    else {
                        switch (self.PortalType) {
                            case "single":
                                if (event.Subject === "DemarreProcess") {
                                    if (processLength === 0) {
                                        accept = true;
                                    }
                                    else {
                                        accept = false;
                                    }
                                }
                                else {
                                    accept = true;
                                }
                                break;
                            case "portal":
                                accept = true;
                                break;
                            default:
                                accept = false;
                                break;
                        }
                    }
                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                    InteropManager.logger.debug('accept process: portalType=%1, destinataire=%2, subject=%3, processLength=%4 => accept=%5', self.PortalType, destinataire, event.Subject, processLength, accept);
                    self.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.AcceptPhase, { info: accept.toString() }));
                    return accept;
                };
                InteropManager._onConnection = function (connectionId) {
                    var self = InteropManager._instance;
                    self._connectionId = connectionId;
                    self.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.ConnectionSignalR, { info: connectionId }));
                };
                InteropManager.prototype._shelveEvent = function (event) {
                    event.DeliverTries++;
                    this._messageBus.Add(event);
                };
                InteropManager.prototype.Deliver = function (event) {
                    InteropManager.logger.debug('Start de Deliver');
                    if (this.library.Display.CurrentFrame.ProcessId || this.library.Context.IsSingleProcess()) {
                        var currentProcess = this.library.Context.GetCurrentProcess();
                        if (currentProcess) {
                            var currentStep = this.library.Context.GetCurrentStep(currentProcess);
                            if (event.ProcessStepId === currentStep.getPath()) {
                                return this._deliverMessage(event);
                            }
                        }
                    }
                    if (event.ProcessStepId === 'portal' || event.ProcessStepId === 'single' || event.ProcessStepId === this._connectionId) {
                        return this._handlePortalMessage(event);
                    }
                    else {
                        InteropManager.logger.error('Deliver failed');
                        return this.library.Core.createPromiseSelfError(new Services.Erreur("Erreur deliver failed"));
                    }
                };
                InteropManager.prototype.DeliverUndeliveredMessage = function (stepId) {
                    var _this = this;
                    var messageEvents = this._messageBus.SpliceByStepId(stepId);
                    if (messageEvents.length === 0) {
                        return this.library.Core.getPromesseSelfResoved();
                    }
                    else {
                        Services.Loggers.MDC.INSTANCE.setValue('action', 'DeliverUndeliveredMessage');
                        for (var index in messageEvents) {
                            InteropManager.logger.debug(messageEvents[index].Subject);
                        }
                        Services.Loggers.MDC.INSTANCE.remove('action');
                        this._disableStorageEvent = true;
                        return this._deliverMessages(messageEvents).then(function () {
                            _this._disableStorageEvent = false;
                        });
                    }
                };
                InteropManager.prototype._deliverMessages = function (messageEvents) {
                    var _this = this;
                    if (messageEvents.length > 0) {
                        var messageEvent = messageEvents.pop();
                        return this._deliverMessage(messageEvent).then(function () {
                            return _this._deliverMessages(messageEvents);
                        }, function () {
                            _this._shelveEvent(messageEvent);
                            return _this._deliverMessages(messageEvents);
                        });
                    }
                    else {
                        return this.library.Core.getPromesseSelfResoved();
                    }
                };
                InteropManager.prototype._deliverMessage = function (event) {
                    var notif = new Services.NotificationMessage();
                    notif.Sujet = event.Subject;
                    notif.Contenu = event.Contenu;
                    return this.library.Context.Notify(notif);
                };
                InteropManager.prototype._handlePortalMessage = function (event) {
                    var _this = this;
                    switch (event.Subject) {
                        case "Guichet": {
                            if (event.Contenu === 'O')
                                return this.library.Context.GetDonneesLocales();
                            else {
                                this.library.Context.ClearParametresComptables();
                                return this.library.Core.getPromesseSelfResoved();
                            }
                        }
                        case "DemarreProcess": {
                            var code = event.Contenu.Code;
                            var valeurDepart = event.Contenu.ValeurDepart;
                            var initData = JSON.stringify(event.Contenu.InitData);
                            var mgrEvent = new Services.Component.ManagerEvent(Services.Component.ManagerEventType.DemandeDeDemarrageDeProcessus, {
                                demandeDeDemarrageDeProcessusDetail: {
                                    codeProcessus: code, initData: initData, valeurDepart: valeurDepart
                                }
                            });
                            Services.Loggers.FLASH.INSTANCE.setValue('action', '_handlePortalMessage');
                            InteropManager.logger.info('Send event \'DemarreProcess\' : process=%1, valeurDepart=%2, initData=%3', code, valeurDepart, initData);
                            this.SendEvent(mgrEvent);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case "ChangeModeTrace": {
                            var etat = event.Contenu;
                            var isTraceDebug = false;
                            isTraceDebug = (etat == 'ON') ? true : false;
                            InteropManager.logger.info('Positonnement mode debug trace : %1', isTraceDebug);
                            this.library.Trace.setModeDebug(isTraceDebug);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case "Communication": {
                            var mgrEvent = new Services.Component.ManagerEvent(Services.Component.ManagerEventType.Communication, {
                                communicationDetail: {
                                    message: event.Contenu
                                }
                            });
                            Services.Loggers.FLASH.INSTANCE.setValue('action', '_handlePortalMessage');
                            InteropManager.logger.info('Send event \'Communication\' : message=%1', event.Contenu);
                            this.SendEvent(mgrEvent);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case "UpdateContexteClient": {
                            var contenu = event.Contenu;
                            var numeroClient = contenu.NumeroClient;
                            var fluxJSON = contenu.FluxJSON;
                            var contexte = this.library.ContexteClient.nouveauContexte(numeroClient);
                            if (contexte)
                                this.library.ContexteClient.setContenu("interop", numeroClient, JSON.parse(fluxJSON));
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case "DeleteContexteClient": {
                            var contenu = event.Contenu;
                            var numeroClient = contenu.NumeroClient;
                            InteropManager.logger.debug('DeleteContexteclient : contenu=%1 numeroclient=%2', contenu, numeroClient);
                            if (numeroClient === "tous") {
                                this.library.ContexteClient.changeTousContexteMode(MyWay.Services.ContexteClient.Messages.ContexteClientMode.AUTOMATIQUE);
                                this.library.Context.RemoveWaitingProcesses();
                                var lContextes = this.library.ContexteClient.getContextes();
                                InteropManager.logger.debug('DeleteContexteclient : suppression de tous les contextes client');
                                lContextes.forEach(function (pContexte) {
                                    _this.library.ContexteClient.detruireContexte("interop", pContexte.getId());
                                });
                            }
                            else {
                                var contexte = this.library.ContexteClient.getByIdClient(numeroClient);
                                if (contexte) {
                                    //this.library.ContexteClient.detruireContexte("interop", contexte.getId());
                                    InteropManager.logger.debug('DeleteContexteclient : change mode en automatique contexte client=%1 de contexte id=%2', numeroClient, contexte.getId());
                                    this.library.ContexteClient.changeContexteMode(contexte.getId(), MyWay.Services.ContexteClient.Messages.ContexteClientMode.AUTOMATIQUE);
                                }
                            }
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        default:
                            return this.library.Core.getPromesseSelfResoved();
                    }
                };
                InteropManager.prototype.ClearBus = function () {
                    this._messageBus.Clear();
                };
                Object.defineProperty(InteropManager.prototype, "Bus", {
                    get: function () {
                        return this._messageBus;
                    },
                    enumerable: true,
                    configurable: true
                });
                InteropManager.prototype.OnInteropMessageBusStorageChanged = function () {
                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'OnInteropMessageBusStorageChanged');
                    InteropManager.logger.debug('Start de OnInteropMessageBusStorageChanged');
                    if (!this._disableStorageEvent) {
                        if (this.library.Display.CurrentFrame.ProcessId) {
                            var currentProcess = this.library.Context.GetCurrentProcess();
                            if (currentProcess) {
                                var currentStep = this.library.Context.GetCurrentStep(currentProcess);
                                return this.DeliverUndeliveredMessage(currentStep.getPath());
                            }
                        }
                    }
                    return this.library.Core.getPromesseSelfResoved();
                };
                InteropManager.prototype.TestLocalService = function () {
                    InteropManager.logger.debug('Start de TestLocalService');
                    this.api.testLocalService();
                };
                //Notifications
                InteropManager.prototype.TriggerNotifications = function () {
                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'OnInteropMessageBusStorageChanged');
                    InteropManager.logger.debug('TriggerNotifications');
                    var process = this.library.Context.GetCurrentProcess();
                    if (!process)
                        return this.library.Core.getPromesseSelfResoved();
                    else {
                        var step = this.library.Context.GetCurrentStep(process);
                        if (step) {
                            return this.DeliverUndeliveredMessage(step.getPath());
                        }
                        else {
                            return this.library.Core.getPromesseSelfResoved();
                        }
                    }
                };
                /**
                 * Retourne "nomFichier" si le nom du fichier contient C: ou D:
                 * Sinon retourne "%TEMP%\\nomFichier"
                 *
                 * @param nomFichier le fichier
                 * @returns pathFichier le chemin du fichier
                 */
                InteropManager.prototype.getPathFichier = function (nomFichier) {
                    var pathFichier = nomFichier;
                    if (nomFichier.toLowerCase().lastIndexOf('c:', 0) !== 0 && nomFichier.toLowerCase().lastIndexOf('d:', 0) !== 0) {
                        pathFichier = InteropManager.TempFolderPath + nomFichier;
                    }
                    return pathFichier;
                };
                InteropManager.CLASS_NAME = 'MyWay.Services.Interop.InteropManager';
                InteropManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(InteropManager.CLASS_NAME);
                InteropManager.TempFolderPath = '%TEMP%\\';
                return InteropManager;
            }(Services.Components.ComponentManagerBase));
            Interop.InteropManager = InteropManager;
            Services.Components.RegistryManager.getInstance().register(InteropManager);
        })(Interop = Services.Interop || (Services.Interop = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var TraceSuivi;
        (function (TraceSuivi) {
            /**
             * Composant portail pour les traces de suivis
             */
            var TraceSuiviManagerExtended = /** @class */ (function (_super) {
                __extends(TraceSuiviManagerExtended, _super);
                function TraceSuiviManagerExtended() {
                    return _super.call(this, Services.Components.ComponentType.TraceSuivi) || this;
                }
                /**
                 * Ecrit une trace de suivi personalisée.
                 * Attention : Aucun contrôle n'est fait, elle sera envoyée parmis les autres traces de suivis
                 *
                 * @param pTrace Trace à écrire
                 * @return Une promesse résolue à la fin de l'écriture de la trace
                 */
                TraceSuiviManagerExtended.prototype.forcerTrace = function (pTrace) {
                    var _this = this;
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        _this.manager.tracer(pTrace, false).then(function () { pDefer.resolve(); }, pDefer.reject);
                    });
                };
                /**
                 * Déclenchement manuel de la purge des traces
                 *
                 * @return Une promesse qui indique le nombre de traces purgées
                 */
                TraceSuiviManagerExtended.prototype.purgerTraces = function () {
                    return this.manager.checkTailleDB(true);
                };
                return TraceSuiviManagerExtended;
            }(Services.Components.ComponentManagerExtendedBase));
            TraceSuivi.TraceSuiviManagerExtended = TraceSuiviManagerExtended;
            Services.Components.RegistryManagerExtended.getInstance().register(TraceSuiviManagerExtended);
        })(TraceSuivi = Services.TraceSuivi || (Services.TraceSuivi = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Capacites;
        (function (Capacites) {
            var CapacitesManagerMessage = /** @class */ (function (_super) {
                __extends(CapacitesManagerMessage, _super);
                function CapacitesManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Capacites) || this;
                }
                CapacitesManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Capacites.Messages.CapacitesMessageSubject.GetCapacite: {
                            var lContent = pMessage.message;
                            var regle = lContent.regle;
                            return this.managerInstance.getCapacite(regle);
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                CapacitesManagerMessage.CLASS_NAME = 'MyWay.Services.Capacites.CapacitesManagerMessage';
                CapacitesManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(CapacitesManagerMessage.CLASS_NAME);
                return CapacitesManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Capacites.CapacitesManagerMessage = CapacitesManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(CapacitesManagerMessage);
        })(Capacites = Services.Capacites || (Services.Capacites = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des habilitations
* @module MyWay.Services.Habilitation
* @author Mathieu Dartigues
* classe : HabilitationManager - public - Classe permettant la gestion des habilitations
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Habilitation;
        (function (Habilitation) {
            Services.ServiceManager.addActionOnInitialize('Habilitation.ObtenirHabilitations', function (pLibrary) {
                return pLibrary.Habilitation.ObtenirHabilitations().then(function () { });
            }, 'Context.GetDonneesLocales');
            /**
             * Classe permettant la gestion des habilitations
             */
            var HabilitationManager = /** @class */ (function (_super) {
                __extends(HabilitationManager, _super);
                function HabilitationManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Habilitation) || this;
                    _this.isTotemCapable = true;
                    _this.contextKey = 'HABILITATIONS';
                    _this.maximumTimeBeforeReload = 12 * 60 * 60 * 1000;
                    // maximumTimeBeforeReload = 60 * 1000 ;
                    _this.api = null;
                    return _this;
                }
                HabilitationManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.api = pApi;
                    this.isTotemCapable = pManagerInitializer.isTotemCapable;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
                };
                /**
                 * Transforme l'objet DTO du contexte en une liste d'habilitations (Clé/Valeur)
                 *
                 * @param  {HabilitationDTOModel}       dto l'objet DTO du contexte
                 * @return {Object}                     Tableau d'objet avec comme clé le code de l'habilitation, et comme valeur la valeur de l'habilitation
                 */
                HabilitationManager.prototype.transformContextDTOIntoArray = function (dto) {
                    var result = {};
                    for (var index in dto.codesHabilites) {
                        result[dto.codesHabilites[index]] = true;
                    }
                    for (var index in dto.codesNonHabilites) {
                        result[dto.codesNonHabilites[index]] = false;
                    }
                    return result;
                };
                /**
                 * Extrait de l'objet DTO les codes habilitations (autorisées) dans un tableau d'habilitations
                 *
                 * @param  {IHabilitationDTO}       dto l'objet DTO retourné par l'API
                 * @return {Object[]}               Tableau d'objet avec comme clé le code de l'habilitation, et comme valeur la valeur de l'habilitation
                 */
                HabilitationManager.prototype.extractCodesDTOIntoArray = function (dto) {
                    var result = [];
                    var habilitations = this.concatHabilitations(dto);
                    for (var index in habilitations) {
                        result[habilitations[index]] = true;
                    }
                    return result;
                };
                /**
                 * Concaténation des différents domaines des habilitations
                 *
                 * @param  {IHabilitationDTO}       dto l'objet DTO retourné par l'API
                 * @return {string[]}               Tableau d'habilitations
                 */
                HabilitationManager.prototype.concatHabilitations = function (dto) {
                    var habilitations = [];
                    var mysys = dto[MyWay.Services.Habilitation.DOMAIN.MYSYS];
                    var iam = dto[MyWay.Services.Habilitation.DOMAIN.IAM];
                    var cultureNet = dto[MyWay.Services.Habilitation.DOMAIN.CULTURENET];
                    habilitations = habilitations.concat(mysys, iam, cultureNet);
                    return habilitations;
                };
                HabilitationManager.prototype._HabilitationsOK = function (habilitations) {
                    return habilitations
                        && habilitations.timestamp
                        && Date.now() - habilitations.timestamp < this.maximumTimeBeforeReload;
                };
                /**
                 * Permet d'obtenir l'état d'une ou plusieurs habilitations à partir de leurs codes
                 *
                 * @param  {string[]}                 codes Tableau de code habilitation
                 * @return {IPromesse<boolean[]>}     Promesse renvoyant un tableau de booléen correspondant dans l'ordre aux habilitations demandées
                 */
                HabilitationManager.prototype.EstHabilite = function (codes) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var self = this;
                    try {
                        if (this._HabilitationsOK(this.habilitationsContextCache)) {
                            if (this.habilitationsContextCache.codesHabilites) {
                                // on recherche dans les codes habilites
                                var result = [];
                                for (var i = 0; i < codes.length; i++) {
                                    //if (MyWay.Services.CoreCommon.ArrayUtils.keyExists(codes[i], habilitations.codesHabilites)) {
                                    //    result.push(true);
                                    //} else if (MyWay.Services.CoreCommon.ArrayUtils.keyExists(codes[i], habilitations.codesNonHabilites)) {
                                    //    result.push(false);
                                    //} else {
                                    //    result.push(false);
                                    //    //deferred.reject(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_HABILITATION_CODE_INCONNU));
                                    //}
                                    //Optimsation performance
                                    if (this.habilitationsCache && this.habilitationsCache[codes[i]]) {
                                        result.push(true);
                                    }
                                    else {
                                        result.push(false);
                                    }
                                }
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'EstHabilite');
                                Services.Loggers.FLASH.INSTANCE.setValue('details', codes);
                                HabilitationManager.logger.debug('Vérification codes habilitation success - result : %1 ', result);
                                deferred.resolve(result);
                            }
                            else {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'EstHabilite');
                                Services.Loggers.FLASH.INSTANCE.setValue('details', codes);
                                HabilitationManager.logger.error('Codes habilitation format incorrecte');
                                deferred.reject(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_HABILITATION_MAUVAIS_FORMAT));
                            }
                        }
                        else {
                            // on les charge !
                            this.ChargerHabilitations().then(function () {
                                self.EstHabilite(codes).then(function (r) {
                                    deferred.resolve(r);
                                }).catch(function (e) { return deferred.reject(e); });
                            }).catch(function (e) { return deferred.reject(e); });
                        }
                    }
                    catch (error) {
                        HabilitationManager.logger.error('EstHabilite failed %1', JSON.stringify(error));
                        deferred.reject(new Services.Erreur(error));
                    }
                    return deferred.promise;
                };
                HabilitationManager.prototype.chargerHablitationsInternal = function (habilitationType, forcerRechargement) {
                    var _this = this;
                    var authentificationInfo = this.library.Context.GetAuthentificationInfo();
                    var infosUserPoste = this.library.Context.GetInfosUser();
                    if (authentificationInfo !== null) {
                        return this.api.GetHabilitations(habilitationType === Habilitation.EHabilitationType.MYSYS, habilitationType === Habilitation.EHabilitationType.IAM, habilitationType === Habilitation.EHabilitationType.CULTURENET, infosUserPoste, authentificationInfo)
                            .then(function (result) {
                            var oldHabilitations = forcerRechargement === true ? null : JSON.parse(_this.library.Context.GetFromContext(_this.contextKey));
                            var doitRecharger = !oldHabilitations || !_this._HabilitationsOK(oldHabilitations);
                            if (doitRecharger) {
                                oldHabilitations = {
                                    codesHabilites: _this.concatHabilitations(result),
                                    codesNonHabilites: [],
                                    timestamp: Date.now()
                                };
                            }
                            else {
                                switch (habilitationType) {
                                    case Habilitation.EHabilitationType.MYSYS:
                                        if (result.mysys) {
                                            result.mysys.forEach(function (codeHabilitation) {
                                                if (oldHabilitations.codesHabilites.indexOf(codeHabilitation) < 0) {
                                                    oldHabilitations.codesHabilites.push(codeHabilitation);
                                                }
                                            });
                                        }
                                        break;
                                    case Habilitation.EHabilitationType.IAM:
                                        if (result.iam) {
                                            result.iam.forEach(function (codeHabilitation) {
                                                if (oldHabilitations.codesHabilites.indexOf(codeHabilitation) < 0) {
                                                    oldHabilitations.codesHabilites.push(codeHabilitation);
                                                }
                                            });
                                        }
                                        break;
                                    case Habilitation.EHabilitationType.CULTURENET:
                                        if (result.cultureNet) {
                                            result.cultureNet.forEach(function (codeHabilitation) {
                                                if (oldHabilitations.codesHabilites.indexOf(codeHabilitation) < 0) {
                                                    oldHabilitations.codesHabilites.push(codeHabilitation);
                                                }
                                            });
                                        }
                                        break;
                                }
                            }
                            _this.library.Context.AddToContext(Services.Context.StorageLevel.Global, _this.contextKey, JSON.stringify(oldHabilitations));
                            // Optimisation Performance mise en cache des habiliations 
                            _this.habilitationsContextCache = oldHabilitations;
                            _this.habilitationsCache = _this.transformContextDTOIntoArray(oldHabilitations);
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'ChargerHabilitations');
                            Services.Loggers.FLASH.INSTANCE.setValue('details', _this.habilitationsCache);
                            HabilitationManager.logger.debug('GetHabilitations success');
                            if (doitRecharger) {
                                _this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.ResetHabilitations, {}));
                            }
                            return _this.habilitationsCache;
                        }, function (error) {
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'ChargerHabilitations');
                            HabilitationManager.logger.error('GetHabilitations failed %1', JSON.stringify(error));
                            throw error;
                        });
                    }
                    else {
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'ChargerHabilitations');
                        HabilitationManager.logger.error('authentification manquante');
                        return MyWay.Services.CoreCommon.createPromiseSelfError(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_HABILITATION_AUTHENTIFICATION_MANQUANTE));
                    }
                };
                /**
                 * Appelle l'API des habilitations pour récupérer les habilitations du central.
                 * Permet aussi de réinitialiser les habilitations de l'utilisateur connecté.
                 *
                 * @return {IPromesse<any>} Promesse contenant un tableau d'habilitation
                 */
                HabilitationManager.prototype.ChargerHabilitations = function (forcerRechargement) {
                    return this.chargerHablitationsInternal(Habilitation.EHabilitationType.MYSYS, forcerRechargement);
                };
                HabilitationManager.prototype.chargerHabilitationsTypee = function (type, forcerRechargement) {
                    return this.chargerHablitationsInternal(type, forcerRechargement);
                };
                /**
                 * Obtient l'ensemble des habilitations stockées en local (contexte)
                 *
                 * @return {IPromesse<any>} Promesse contenant un tableau d'habilitations
                 */
                HabilitationManager.prototype.ObtenirHabilitations = function () {
                    var _this = this;
                    try {
                        if (this._HabilitationsOK(this.habilitationsContextCache)) {
                            Services.Loggers.FLASH.INSTANCE.setValue('details', this.habilitationsCache);
                            HabilitationManager.logger.debug('ObtenirHabilitations success');
                            return this.library.Core.createPromiseSelfResolved(this.habilitationsCache);
                        }
                        else {
                            // on les charge !
                            return this.ChargerHabilitations().then(function () {
                                return _this.ObtenirHabilitations();
                            });
                        }
                    }
                    catch (error) {
                        HabilitationManager.logger.error('ObtenirHabilitations failed %1', JSON.stringify(error));
                        return this.library.Core.createPromiseSelfError(new Services.Erreur(error));
                    }
                };
                /**
                 * Obtient une habilitation à partir de son code
                 *
                 * @param  {string}                         code Code de l'habilitation demandée
                 * @return {IPromesse<HabilitationModel>}   Promesse contenant l'habilitation demandée (couple code / valeur)
                 */
                HabilitationManager.prototype.ObtenirHabilitation = function (code) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var self = this;
                    try {
                        self.EstHabilite([code]).then(function (r) {
                            HabilitationManager.logger.debug('ObtenirHabilitation(code) success - code: %1, resultat: %2', code, r[0]);
                            deferred.resolve(new Habilitation.HabilitationModel(code, r[0]));
                        }).catch(function (e) {
                            return deferred.reject(e);
                        });
                    }
                    catch (error) {
                        HabilitationManager.logger.error('ObtenirHabilitation(code) failed %1', JSON.stringify(error));
                        deferred.reject(new Services.Erreur(error));
                    }
                    return deferred.promise;
                };
                /**
                 * Modifie une habilitation localement, à partir du code habilitation et de sa valeur
                 *
                 * @param  {string}                       code   Le code habilitation à modifier
                 * @param  {boolean}                      valeur La valeur cible
                 * @return {IPromesse<HabilitationModel>}        Promesse contenant la nouvelle habilitation (couple code / valeur)
                 */
                HabilitationManager.prototype.ModifierHabilitation = function (code, valeur) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var self = this;
                    try {
                        if (this._HabilitationsOK(this.habilitationsContextCache)) {
                            // first delete the habilitation in the right list
                            var indexCodeHabilites = this.habilitationsContextCache.codesHabilites.indexOf(code);
                            var indexCodeNonHabilites = this.habilitationsContextCache.codesNonHabilites.indexOf(code);
                            if (indexCodeHabilites > -1)
                                this.habilitationsContextCache.codesHabilites.splice(indexCodeHabilites, 1);
                            else if (indexCodeNonHabilites > -1)
                                this.habilitationsContextCache.codesNonHabilites.splice(indexCodeNonHabilites, 1);
                            // then insert the new habilitation
                            if (valeur === true)
                                this.habilitationsContextCache.codesHabilites.push(code);
                            else if (valeur === false)
                                this.habilitationsContextCache.codesNonHabilites.push(code);
                            this.library.Context.AddToContext(Services.Context.StorageLevel.Global, this.contextKey, JSON.stringify(this.habilitationsContextCache));
                            HabilitationManager.logger.debug('ModifierHabilitation success - Code: %1, valeur: %2', code, valeur);
                            // Opti Perf - mise a jour des habilitations
                            this.habilitationsCache = this.transformContextDTOIntoArray(this.habilitationsContextCache);
                            deferred.resolve(new Habilitation.HabilitationModel(code, valeur));
                        }
                        else {
                            // get them !
                            this.ChargerHabilitations().then(function () {
                                self.ModifierHabilitation(code, valeur).then(function (r) {
                                    deferred.resolve(r);
                                }).catch(function (e) { return deferred.reject(e); });
                            }).catch(function (e) { return deferred.reject(e); });
                        }
                    }
                    catch (error) {
                        HabilitationManager.logger.error('ModifierHabilitation failed %1', JSON.stringify(error));
                        deferred.reject(new Services.Erreur(error));
                    }
                    return deferred.promise;
                };
                /**
                 * Supprime les habilitations du contexte
                 *
                 * @return {boolean} indique si l'opération de suppression s'est bien déroulée (true) ou pas (false)
                 */
                HabilitationManager.prototype.SupprimerHabilitations = function () {
                    return this.library.Context.RemoveFromContext(Services.Context.StorageLevel.Global, this.contextKey);
                };
                HabilitationManager.CLASS_NAME = 'MyWay.Services.Habilitation.HabilitationManager';
                HabilitationManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(HabilitationManager.CLASS_NAME);
                return HabilitationManager;
            }(Services.Components.ComponentManagerBase));
            Habilitation.HabilitationManager = HabilitationManager;
            Services.Components.RegistryManager.getInstance().register(HabilitationManager);
        })(Habilitation = Services.Habilitation || (Services.Habilitation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.PhantomAgent.addListenerOnInit(function (pInstance, pServiceManager) {
            pInstance.Habilitation = new Services.Habilitation.PhantomHabilitationAgent(pServiceManager);
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des habilitations
* @module MyWay.Services.Habilitation
* classe : HabilitationAgent - public - Classe permettant la gestion des habilitations
*/
(function (MyWay) {
    var Services;
    (function (Services) {
        var Habilitation;
        (function (Habilitation) {
            /**
            * Classe permettant la gestion des habilitations
            */
            var PhantomHabilitationAgent = /** @class */ (function () {
                /**
                 * Constructeur de la classe HabilitationAgent
                 * @param {AgentLibrary}   agentLibrary  [description]
                 * @param {ErreurCallback} errorCallback [description]
                 */
                function PhantomHabilitationAgent(serviceManager) {
                    this.serviceManager = serviceManager;
                }
                PhantomHabilitationAgent.prototype.EstHabilite = function (codeOuCodes) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var isCodeOuCodesArray = Services.Controle.StaticArrayControle.isArray(codeOuCodes);
                    var code = isCodeOuCodesArray ? codeOuCodes : [codeOuCodes];
                    this.serviceManager.Library.Habilitation.EstHabilite(code).then(function (result) {
                        if (isCodeOuCodesArray)
                            deferred.resolve(result);
                        else
                            deferred.resolve(result[0]);
                    }).catch(function (erreur) {
                        deferred.reject(erreur);
                    });
                    return deferred.promise;
                };
                return PhantomHabilitationAgent;
            }());
            Habilitation.PhantomHabilitationAgent = PhantomHabilitationAgent;
        })(Habilitation = Services.Habilitation || (Services.Habilitation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Interop;
        (function (Interop) {
            var InteropManagerExtended = /** @class */ (function (_super) {
                __extends(InteropManagerExtended, _super);
                function InteropManagerExtended() {
                    return _super.call(this, Services.Components.ComponentType.Interop) || this;
                }
                return InteropManagerExtended;
            }(Services.Components.ComponentManagerExtendedBase));
            Interop.InteropManagerExtended = InteropManagerExtended;
            Services.Components.RegistryManagerExtended.getInstance().register(InteropManagerExtended);
        })(Interop = Services.Interop || (Services.Interop = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Interop;
        (function (Interop) {
            var InteropManagerMessage = /** @class */ (function (_super) {
                __extends(InteropManagerMessage, _super);
                function InteropManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Interop) || this;
                }
                InteropManagerMessage.prototype.reception = function (pMessage) {
                    var _this = this;
                    switch (pMessage.subject) {
                        case Interop.Messages.InteropMessageSubject.AfficherWindowParHandle: {
                            var lContent = pMessage.message;
                            var handle = lContent.handle;
                            var affiche = lContent.affiche;
                            this.managerInstance.AfficherWindowParHandle(handle, affiche);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case Interop.Messages.InteropMessageSubject.AfficherWindowParPid: {
                            var lContent = pMessage.message;
                            var pid = lContent.pid;
                            var affiche = lContent.affiche;
                            this.managerInstance.AfficherWindowParPid(pid, affiche);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case Interop.Messages.InteropMessageSubject.AfficherSynthese: {
                            var lContent = pMessage.message;
                            var numeroClient = lContent.numeroClient;
                            this.managerInstance.AfficherSynthese(numeroClient);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case Interop.Messages.InteropMessageSubject.ActiverApplicationAppelante: {
                            var lContent = pMessage.message;
                            var numeroPlan = lContent.numeroPlan;
                            this.managerInstance.ActiverApplicationAppelante(numeroPlan);
                            return this.library.Core.getPromesseSelfResoved();
                        }
                        case Interop.Messages.InteropMessageSubject.AddToContextInterop: {
                            var lContent = pMessage.message;
                            var level_1 = lContent.level;
                            var key_7 = lContent.key;
                            var value_1 = lContent.value;
                            return this.library.Core.promesseTryCatch(function (pDefer) {
                                _this.managerInstance.AddToContextInterop(level_1, key_7, value_1, pDefer.resolve, function (error) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                    InteropManagerMessage.logger.error('Service local indisponible - %1', JSON.stringify(error));
                                    pDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_INTEROP_SERVICE_LOCAL_APPEL_IMPOSSIBLE));
                                });
                            });
                        }
                        case Interop.Messages.InteropMessageSubject.AddListToContextInterop: {
                            var lContent = pMessage.message;
                            var level_2 = lContent.level;
                            var datas_1 = lContent.datas;
                            return this.library.Core.promesseTryCatch(function (pDefer) {
                                _this.managerInstance.AddListToContextInterop(level_2, datas_1, pDefer.resolve, function (error) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                    InteropManagerMessage.logger.error('Service local indisponible - %1', JSON.stringify(error));
                                    pDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_INTEROP_SERVICE_LOCAL_APPEL_IMPOSSIBLE));
                                });
                            });
                        }
                        case Interop.Messages.InteropMessageSubject.GetFromContextInterop: {
                            var lContent = pMessage.message;
                            var level_3 = lContent.level;
                            var key_8 = lContent.key;
                            return this.library.Core.promesseTryCatch(function (pDefer) {
                                _this.managerInstance.GetFromContextInterop(level_3, key_8, pDefer.resolve, function (error) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                    InteropManagerMessage.logger.error('Service local indisponible - %1', JSON.stringify(error));
                                    pDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_INTEROP_SERVICE_LOCAL_APPEL_IMPOSSIBLE));
                                });
                            });
                        }
                        case Interop.Messages.InteropMessageSubject.GetListFromContextInterop: {
                            var lContent = pMessage.message;
                            var level_4 = lContent.level;
                            var datas_2 = lContent.datas;
                            return this.library.Core.promesseTryCatch(function (pDefer) {
                                _this.managerInstance.GetListFromContextInterop(level_4, datas_2, pDefer.resolve, function (error) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                    InteropManagerMessage.logger.error('Service local indisponible - %1', JSON.stringify(error));
                                    pDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_INTEROP_SERVICE_LOCAL_APPEL_IMPOSSIBLE));
                                });
                            });
                        }
                        case Interop.Messages.InteropMessageSubject.Lancer: {
                            var lContent = pMessage.message;
                            var executableWrapper_1 = lContent.executableWrapper;
                            var parametres_1 = lContent.parametres;
                            var sync_1 = lContent.sync;
                            var contexte_1 = lContent.contexte;
                            //TODO why error if not resolve??
                            return this.library.Core.promesseTryCatch(function (pDefer) {
                                _this.managerInstance.Lancer(executableWrapper_1, contexte_1, parametres_1, sync_1, function (error) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                    InteropManagerMessage.logger.error('Service local indisponible - %1', JSON.stringify(error));
                                    pDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_INTEROP_SERVICE_LOCAL_APPEL_IMPOSSIBLE));
                                });
                                pDefer.resolve();
                            });
                        }
                        case Interop.Messages.InteropMessageSubject.EndStep: {
                            var lContent = pMessage.message;
                            return this.library.Core.promesseTryCatch(function (pDefer) {
                                try {
                                    _this.managerInstance.EndStep();
                                    _this.managerInstance.EndTransition(null);
                                    pDefer.resolve();
                                }
                                catch (e) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                    InteropManagerMessage.logger.error('EndStep failed - %1', JSON.stringify(e));
                                    pDefer.reject(new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_FRAMEWORK, ["EndStep failed"]));
                                }
                            });
                        }
                        case Interop.Messages.InteropMessageSubject.TriggerNotifications: {
                            return this.managerInstance.TriggerNotifications();
                        }
                        case Interop.Messages.InteropMessageSubject.LireFichier: {
                            var lContent = pMessage.message;
                            var nomFichier_1 = lContent.nomFichier;
                            return this.managerInstance.LireFichier(nomFichier_1).then(function (pData) {
                                return {
                                    data: pData
                                };
                            });
                        }
                        case Interop.Messages.InteropMessageSubject.EcrireFichier: {
                            var lContent = pMessage.message;
                            var nomFichier = lContent.nomFichier;
                            var fluxdonnees = lContent.fluxdonnees;
                            var ajouter = lContent.ajouter;
                            var creeDir = lContent.creeDir;
                            return this.managerInstance.EcrireFichier(nomFichier, fluxdonnees, ajouter, creeDir).then(function (pData) {
                                return {
                                    data: pData
                                };
                            });
                        }
                        case Interop.Messages.InteropMessageSubject.ClearBus: {
                            var lMessage = pMessage.message;
                            InteropManagerMessage.logger.debug('Efface le bus interop');
                            this.managerInstance.ClearBus();
                            var lDefer = Services.CoreCommon.ServiceDePromesse.defer();
                            lDefer.resolve();
                            return lDefer.promise;
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                InteropManagerMessage.CLASS_NAME = 'MyWay.Services.Interop.InteropManagerMessage';
                InteropManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(InteropManagerMessage.CLASS_NAME);
                return InteropManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Interop.InteropManagerMessage = InteropManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(InteropManagerMessage);
        })(Interop = Services.Interop || (Services.Interop = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Habilitation;
        (function (Habilitation) {
            var HabilitationManagerMessage = /** @class */ (function (_super) {
                __extends(HabilitationManagerMessage, _super);
                function HabilitationManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Habilitation) || this;
                }
                HabilitationManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Habilitation.HabilitationMessageSubject.EstHabilite: {
                            var lContent = pMessage.message;
                            var code = lContent.code;
                            return this.managerInstance.EstHabilite(code);
                        }
                        case Habilitation.HabilitationMessageSubject.ChargerHabilitations: {
                            var lContent = pMessage.message;
                            return this.managerInstance.ChargerHabilitations();
                        }
                        case Habilitation.HabilitationMessageSubject.ObtenirHabilitations: {
                            var lContent = pMessage.message;
                            return this.managerInstance.ObtenirHabilitations();
                        }
                        case Habilitation.HabilitationMessageSubject.ObtenirHabilitation: {
                            var lContent = pMessage.message;
                            var code = lContent.code;
                            return this.managerInstance.ObtenirHabilitation(code);
                        }
                        case Habilitation.HabilitationMessageSubject.ModifierHabilitation: {
                            var lContent = pMessage.message;
                            var code = lContent.code;
                            var valeur = lContent.valeur;
                            return this.managerInstance.ModifierHabilitation(code, valeur);
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                HabilitationManagerMessage.CLASS_NAME = 'MyWay.Services.Habilitation.HabilitationManagerMessage';
                HabilitationManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(HabilitationManagerMessage.CLASS_NAME);
                return HabilitationManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Habilitation.HabilitationManagerMessage = HabilitationManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(HabilitationManagerMessage);
        })(Habilitation = Services.Habilitation || (Services.Habilitation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des habilitations
* @module MyWay.Services.Habilitation
* @author Mathieu Dartigues
* classe : HabilitationManager - public - Classe permettant la gestion des habilitations
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Habilitation;
        (function (Habilitation) {
            var HabilitationManagerExtended = /** @class */ (function (_super) {
                __extends(HabilitationManagerExtended, _super);
                function HabilitationManagerExtended() {
                    return _super.call(this, Services.Components.ComponentType.Habilitation) || this;
                }
                HabilitationManagerExtended.prototype.EstHabilite = function (codes) {
                    return this.manager.EstHabilite(codes);
                };
                HabilitationManagerExtended.prototype.ChargerHabilitations = function () {
                    return this.manager.ChargerHabilitations();
                };
                HabilitationManagerExtended.prototype.chargerHabilitationsTypee = function (type) {
                    return this.manager.chargerHabilitationsTypee(type);
                };
                return HabilitationManagerExtended;
            }(Services.Components.ComponentManagerExtendedBase));
            Habilitation.HabilitationManagerExtended = HabilitationManagerExtended;
            Services.Components.RegistryManagerExtended.getInstance().register(HabilitationManagerExtended);
        })(Habilitation = Services.Habilitation || (Services.Habilitation = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var LisaManager = /** @class */ (function (_super) {
                __extends(LisaManager, _super);
                function LisaManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Lisa) || this;
                    _this.DisplayProcessesOnProcessEnd = false;
                    _this.api = null;
                    _this.endTransition = function (res) {
                        LisaManager.logger.debug('Debut EndTransition');
                        var notifFrame = false;
                        if (res && res.retourEtapePrecedente && res.etapeCourante && res.etapeCourante.maintienIFrameLastAction) {
                            _this.library.Display.CleanLastProcessFrame();
                            notifFrame = true;
                        }
                        _this.library.Context.SendPortalContext(true, 'Lisa: EndTransition');
                        _this.library.Context.DisplayProcesses(res.nouvelleIframe).then(function () {
                            if (notifFrame) {
                                var notif = new Services.NotificationMessage();
                                notif.Sujet = "FrameShownOnComeBack";
                                _this.library.Context.Notify(notif);
                            }
                        }).catch(function (erreur) {
                            //TODO LOG ERREUR
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'EndTransition');
                            Services.Loggers.FLASH.INSTANCE.setValue('details', erreur);
                            LisaManager.logger.error('Erreur DisplayProcesses');
                        });
                    };
                    return _this;
                }
                LisaManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    var _this = this;
                    this._modeVerificationProcessus = pManagerInitializer.ModeVerificationProcessus;
                    this.api = pApi;
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi).then(function () {
                        if (_this.library.Interop) {
                            _this.onFinProcessus = function (processId) {
                                _this.library.Interop.NotifyEndProcessus(processId);
                            };
                        }
                    });
                };
                LisaManager.prototype.startStandaloneProcessWithInitialisation = function (processCode, param1, param2) {
                    var _this = this;
                    LisaManager.logger.debug('Debut StartStandaloneProcessWithInitialisation');
                    var valeurDepart;
                    var initData;
                    if ((typeof param1 === "object") && (param1 !== null)) {
                        valeurDepart = null;
                        initData = param1;
                    }
                    else {
                        valeurDepart = param1;
                        initData = param2;
                    }
                    return this._start(processCode, valeurDepart, '', initData).then(function (res) {
                        _this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.NouveauProcess, {
                            portalContext: _this.library.Context.GetPortalContext(),
                            processusAOuvrirDansUneNouvelleInstance: initData ? initData.processusAOuvrirDansUneNouvelleInstance : false,
                            info: processCode
                        }));
                        LisaManager.logger.debug('Fin StartStandaloneProcessWithInitialisation, res: %1', res);
                        return res;
                    }, function (erreur) {
                        //TODO LOG ERREUR
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'StartStandaloneProcessWithInitialisation');
                        Services.Loggers.FLASH.INSTANCE.setValue('details', erreur);
                        LisaManager.logger.error('Start \'%1\' (%2) demandé mais en echec', processCode, valeurDepart);
                        throw erreur;
                    });
                };
                LisaManager.prototype.startUrl = function (name, url) {
                    var _this = this;
                    LisaManager.logger.debug('Debut StartUrl');
                    var next = new Lisa.StartResult(null);
                    next.CodeProcessus = name;
                    next.ProcessDemarre = new Lisa.ProcessResult({ Nom: name });
                    next.ProcessDemarre.OptionsProcess = '{\"EstApplicationExterne\":true}';
                    var etape = new Lisa.EtapeResult(null);
                    etape.LocalisationAbsolue = url;
                    etape.LocalisationRelative = '';
                    etape.CodeApplication = name;
                    etape.CodeEtape = name;
                    etape.CodeMetier = '';
                    etape.NomApplication = name;
                    etape.TypeApplication = "HTML5";
                    etape.ValeurEntree = 0;
                    next.ProchaineEtape = etape;
                    if (next && next.ProcessDemarre) {
                        try {
                            return this._launchNextStep(next, '', null, null).then(function (res) {
                                if (!res.finDeProcessus)
                                    _this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.NouvelleAppliExterne, { portalContext: _this.library.Context.GetPortalContext() }));
                                LisaManager.logger.debug('Fin StartUrl, res: %1', res);
                                return res;
                            });
                        }
                        catch (e) {
                            //TODO LOG ERREUR
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'StartUrl');
                            Services.Loggers.FLASH.INSTANCE.setValue('details', e);
                            LisaManager.logger.error('_launchNextStep failed - %1', e);
                            return this.library.Core.createPromiseSelfError(e);
                        }
                    }
                    else {
                        //TODO LOG WARN
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'StartUrl');
                        LisaManager.logger.warn("Pas d'url démarrée");
                        this.library.Core.createPromiseSelfResolved(null);
                    }
                };
                LisaManager.prototype.next = function (valeurSortie, previous) {
                    var _this = this;
                    if (previous === void 0) { previous = false; }
                    LisaManager.logger.debug('Debut Next');
                    var currentProcess = this.library.Context.GetCurrentProcess();
                    var currentStep = this.library.Context.GetCurrentStep(currentProcess);
                    if (!currentStep) {
                        //TODO LOG ERREUR
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'Next');
                        LisaManager.logger.error('Aucune étape courante');
                        return this.library.Core.createPromiseSelfError(new Services.Erreur('Aucune étape courante'));
                    }
                    var promise;
                    if (!previous) {
                        LisaManager.logger.info('Demande d\'enchainement depuis \'%1\', valeur de sortie \'%2\'', currentStep.codeEtape, valeurSortie);
                        promise = this.api.next(currentStep.codeEtape, valeurSortie);
                    }
                    else {
                        LisaManager.logger.info('Demande de retour à l\'étape précédente');
                        promise = this._getPrevious(currentProcess, currentStep);
                    }
                    return promise.then(function (next) {
                        try {
                            if (next.ProcessDemarre && next.ProcessDemarre.OptionsProcessAsEtape) {
                                var optionsProcessAsEtape = null;
                                optionsProcessAsEtape = JSON.parse(next.ProcessDemarre.OptionsProcessAsEtape);
                            }
                            if (next.ProcessDemarre && optionsProcessAsEtape != null && optionsProcessAsEtape.HorsProcessus) {
                                return _this._DemarreSousProcessusModeExterne(next);
                            }
                            else {
                                var notificationMessage = new Services.NotificationMessage();
                                notificationMessage.Sujet = "fin d etape";
                                notificationMessage.Contenu = currentProcess.id;
                                var lPromise = _this.library.Core.getPromesseSelfResoved();
                                if (!currentStep.isRouteur) {
                                    lPromise = _this.library.Context.Notify(notificationMessage);
                                }
                                return lPromise.then(function () {
                                    try {
                                        LisaManager.logger.info('FE');
                                        var trace = new Services.TraceSuivi.TraceSuiviModel;
                                        trace.state = 'FE';
                                        _this.library.TraceSuivi.tracer(trace);
                                        if (!currentStep.isRouteur)
                                            currentProcess.lastNextTime = Date.now();
                                        _this.library.Display.FinishSubmit();
                                        return _this._handleNext(currentStep.codeEtape, valeurSortie, next).then(function (res) {
                                            //reset de l'étape en fin d'étape pour pouvoir être relancé si on revient sur cette étape
                                            if (currentStep.etatEtape == Services.Context.EtatEtape.STARTED)
                                                currentStep.etatEtape = Services.Context.EtatEtape.RESET;
                                            if (!res.finDeProcessus)
                                                _this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.NouvelleEtape, { portalContext: _this.library.Context.GetPortalContext() }));
                                            LisaManager.logger.debug('Fin Next, res: %1', res);
                                            return res;
                                        }, function (erreur) {
                                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'Next');
                                            Services.Loggers.FLASH.INSTANCE.setValue('details', erreur);
                                            LisaManager.logger.error('_handleNext failed - %1', erreur);
                                            throw erreur;
                                        });
                                    }
                                    catch (e) {
                                        //TODO LOG ERREUR
                                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'Next');
                                        Services.Loggers.FLASH.INSTANCE.setValue('details', e);
                                        LisaManager.logger.error('Next failed - %1', e);
                                        throw e;
                                    }
                                });
                            }
                        }
                        catch (e) {
                            //TODO LOG ERREUR
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'Next');
                            Services.Loggers.FLASH.INSTANCE.setValue('details', e);
                            LisaManager.logger.error('Next failed - %1, e');
                            throw e;
                        }
                    }).catch(function (erreur) {
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'Next');
                        Services.Loggers.FLASH.INSTANCE.setValue('details', erreur);
                        LisaManager.logger.error('Next failed - %1', erreur);
                        throw erreur;
                    });
                };
                LisaManager.prototype.replaceTokens = function (url, codeContrats) {
                    LisaManager.logger.debug('Debut ReplaceTokens');
                    var translations = [];
                    var reverseTranslations = [];
                    if (codeContrats) {
                        for (var index in codeContrats) {
                            var contrat = codeContrats[index];
                            if (contrat && contrat.indexOf('=>') > 0) {
                                var parts = contrat.split('=>');
                                translations[parts[1]] = parts[0];
                                reverseTranslations[parts[0]] = parts[1];
                            }
                        }
                    }
                    var toReplace = this.library.Core.FindKeysToReplace(url);
                    var toReplaceTranslated = [];
                    for (var index in toReplace) {
                        if (translations[toReplace[index]])
                            toReplaceTranslated.push(translations[toReplace[index]]);
                        else
                            toReplaceTranslated.push(toReplace[index]);
                    }
                    var values = this.library.Context.GetListFromContext(toReplaceTranslated, true, true);
                    for (var index in values) {
                        var kvp = values[index];
                        if (reverseTranslations[kvp.Key])
                            url = url.replace(new RegExp('\\[' + reverseTranslations[kvp.Key] + '\\]', 'g'), kvp.Value);
                        else
                            url = url.replace(new RegExp('\\[' + kvp.Key + '\\]', 'g'), kvp.Value);
                        if (reverseTranslations[kvp.Key])
                            url = url.replace(new RegExp('\\%5B' + reverseTranslations[kvp.Key] + '\\%5D', 'g'), kvp.Value);
                        else
                            url = url.replace(new RegExp('\\%5B' + kvp.Key + '\\%5D', 'g'), kvp.Value);
                    }
                    LisaManager.logger.debug('Fin ReplaceTokens, url: %1', url);
                    return url;
                };
                LisaManager.prototype.start = function (processCode, valeurDepart) {
                    var _this = this;
                    if (valeurDepart === void 0) { valeurDepart = null; }
                    LisaManager.logger.debug('Debut Start');
                    return this._start(processCode, valeurDepart, 'current', null).then(function (res) {
                        _this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.NouveauProcess, { portalContext: _this.library.Context.GetPortalContext(), info: processCode }));
                        LisaManager.logger.debug('Fin Start, res: %1', res);
                        return res;
                    }, function (erreur) {
                        //TODO LOG ERREUR
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'Start');
                        Services.Loggers.FLASH.INSTANCE.setValue('details', erreur);
                        LisaManager.logger.error('Start \'%1\' (%2) demandé mais en echec', processCode, valeurDepart);
                        throw erreur;
                    });
                };
                LisaManager.prototype.startStandaloneProcess = function (processCode, valeurDepart) {
                    var _this = this;
                    if (valeurDepart === void 0) { valeurDepart = null; }
                    LisaManager.logger.debug('Debut StartStandaloneProcess');
                    return this._start(processCode, valeurDepart, '', null).then(function (res) {
                        _this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.NouveauProcess, { portalContext: _this.library.Context.GetPortalContext(), info: processCode }));
                        LisaManager.logger.debug('Fin StartStandaloneProcess, res: %1', res);
                        return res;
                    }, function (erreur) {
                        //TODO LOG ERREUR
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'StartStandaloneProcess');
                        Services.Loggers.FLASH.INSTANCE.setValue('details', erreur);
                        LisaManager.logger.error('Start \'%1\' (%2) demandé mais en echec', processCode, valeurDepart);
                        throw erreur;
                    });
                };
                LisaManager.prototype.previous = function () {
                    return this.next(null, true);
                };
                //AddProcess
                LisaManager.prototype.AddProcess = function (processId, nomProcess, codeProcess, etapesConnues, options, idContexteClient) {
                    var context = this.library.Context.GetPortalContext();
                    for (var i in context.processes) {
                        var process = context.processes[i];
                        if (process.id === processId) {
                            context.currentPath = process.getPath();
                            return;
                        }
                    }
                    var newProcess = new MyWay.Services.Context.Process();
                    newProcess.id = processId;
                    newProcess.icon = 'cog';
                    newProcess.displayName = nomProcess;
                    newProcess.contextStorage = [];
                    newProcess.subElements = [];
                    newProcess.currentInnerElementPath = "";
                    newProcess.knownSteps = etapesConnues;
                    newProcess.codeProcess = codeProcess;
                    newProcess.estApplicationExterne = false;
                    if (idContexteClient) {
                        newProcess.contexteClientId = idContexteClient;
                    }
                    if (options) {
                        if (options.Icon)
                            newProcess.icon = options.Icon;
                        if (options.TypeProcess)
                            newProcess.typeProcess = options.TypeProcess;
                        if (options.EstApplicationExterne)
                            newProcess.estApplicationExterne = true;
                    }
                    var length = context.processes.push(newProcess);
                    context.currentPath = newProcess.getPath();
                    newProcess.lastNextTime = Date.now();
                    this.library.Context.SaveContext();
                    return newProcess;
                };
                LisaManager.prototype.AddSubProcess = function (processId, currentProcess, nomProcess, codeProcess, codeEtape, actions, etapesConnues, options, optionsAsEtape) {
                    var context = this.library.Context.GetPortalContext();
                    for (var i in context.processes) {
                        var process = context.processes[i];
                        if (process.id === processId) {
                            context.currentPath = process.getPath();
                            return;
                        }
                    }
                    var newProcess = new MyWay.Services.Context.Process();
                    newProcess.id = currentProcess.id + '|' + processId;
                    newProcess.icon = 'cog';
                    if (options && options.Icon)
                        newProcess.icon = options.Icon;
                    newProcess.displayName = nomProcess;
                    newProcess.contextStorage = [];
                    newProcess.subElements = [];
                    newProcess.currentInnerElementPath = "";
                    newProcess.knownSteps = etapesConnues;
                    newProcess.codeEtape = codeEtape;
                    newProcess.codeProcess = codeProcess;
                    newProcess.estApplicationExterne = false;
                    if (optionsAsEtape && optionsAsEtape.OutputContracts) {
                        for (var ic in optionsAsEtape.OutputContracts)
                            newProcess.outputContracts.push(optionsAsEtape.OutputContracts[ic]);
                    }
                    newProcess.isSubProcess = true;
                    newProcess.contexteClientId = currentProcess.contexteClientId;
                    this.setAuthorizedOutputs(newProcess, currentProcess, actions);
                    currentProcess.subElements.push(newProcess);
                    context.currentPath = newProcess.getPath();
                    newProcess.lastNextTime = currentProcess.lastNextTime;
                    this.library.Context.SaveContext();
                };
                //AddStep
                LisaManager.prototype.AddStepWithResult = function (etape, url, optionsEtape) {
                    var etapeId = etape.CodeEtape;
                    etapeId += "-" + Services.CoreCommon.creerChaineAleatoire(8);
                    var actions = etape.Actions;
                    var contrats = etape.Contrats;
                    this.AddStep(etapeId, etape.CodeEtape, etape.CodeApplication, etape.CodeMetier, actions, contrats, etape.NomApplication, url, etape.ValeurEntree, optionsEtape, JSON.stringify(etape));
                };
                LisaManager.prototype.AddStep = function (stepId, codeEtape, codeApplication, codeMetier, actions, contrats, nomApplication, url, valeurEntree, stepOptions, etapeResultAsString) {
                    var currentProcess = this.library.Context.GetCurrentProcess();
                    if (!currentProcess) {
                        throw "no current process";
                    }
                    for (var i in currentProcess.subElements) {
                        var subElement = currentProcess.subElements[i];
                        if (subElement.id === stepId) {
                            currentProcess.currentInnerElementPath = stepId;
                            this.library.Context.SaveContext();
                            return this.library.Context.GetPortalContext(false);
                        }
                    }
                    var newStep = new MyWay.Services.Context.ProcessStep();
                    newStep.parentPath = currentProcess.id;
                    newStep.id = stepId;
                    var etatEtape = Services.Context.EtatEtape.RESET;
                    var isRouteur = false;
                    if (url.indexOf(".js") === url.length - 3)
                        isRouteur = true;
                    LisaManager.ProcessStepSetValues(newStep, currentProcess, nomApplication, url, actions, contrats, codeApplication, codeEtape, codeMetier, valeurEntree, null, stepOptions, etapeResultAsString, etatEtape, isRouteur, Date.now());
                    this.setAuthorizedOutputs(newStep, currentProcess, actions);
                    if (stepOptions) {
                        if (stepOptions.MaintienIFrame === true || stepOptions.MaintienIFrame === "true") {
                            newStep.maintienIFrame = true;
                        }
                        if (stepOptions.OutputContracts && stepOptions.OutputContracts.length > 0) {
                            for (var ii in stepOptions.OutputContracts) {
                                currentProcess.outputContracts.push(stepOptions.OutputContracts[ii]);
                            }
                        }
                    }
                    currentProcess.subElements.push(newStep);
                    currentProcess.currentInnerElementPath = newStep.id;
                    if (stepOptions && stepOptions.ChangeTypeProcess && currentProcess.typeProcess !== stepOptions.ChangeTypeProcess) {
                        currentProcess.typeProcess = stepOptions.ChangeTypeProcess;
                    }
                    var context = this.library.Context.GetPortalContext();
                    context.currentPath = currentProcess.getPath();
                    this.SetParentProcessPath(currentProcess);
                    this.library.Context.SaveContext();
                };
                LisaManager.prototype.setAuthorizedOutputs = function (element, currentProcess, actions) {
                    if (currentProcess.isSubProcess) {
                        element.authorizedOutputs = [];
                        for (var ii in actions) {
                            var action = actions[ii];
                            for (var iii in action.ValeursFinProcessPossibles) {
                                var getVal = currentProcess.authorizedOutputs.indexOf(action.ValeursFinProcessPossibles[iii]);
                                var getVal2 = element.authorizedOutputs.indexOf(action.ValeurSortie);
                                if (getVal >= 0 && getVal2 < 0)
                                    element.authorizedOutputs.push(action.ValeurSortie);
                            }
                        }
                    }
                    else {
                        element.authorizedOutputs = [];
                        for (var ii in actions) {
                            var action = actions[ii];
                            var getVal = element.authorizedOutputs.indexOf(action.ValeurSortie);
                            if (getVal < 0)
                                element.authorizedOutputs.push(action.ValeurSortie);
                        }
                    }
                };
                LisaManager.prototype.SetParentProcessPath = function (currentProcess) {
                    var previousProcess = currentProcess;
                    var process = this.library.Context.GetParentProcess(currentProcess);
                    while (process) {
                        var innerPath = previousProcess.getPath().replace(process.id + '|', '');
                        process.currentInnerElementPath = innerPath;
                        previousProcess = process;
                        process = this.library.Context.GetParentProcess(process);
                    }
                };
                LisaManager.prototype.ConvertInitData = function (rawInitdata) {
                    var initData = {};
                    if (typeof rawInitdata === "string")
                        rawInitdata = JSON.parse(rawInitdata);
                    initData.displayName = rawInitdata.displayName;
                    initData.subProcessCode = rawInitdata.subProcessCode;
                    initData.contextArray = [];
                    for (var key in rawInitdata.context) {
                        var value = rawInitdata.context[key];
                        initData.contextArray.push({ Key: key, Value: value });
                    }
                    for (var key in rawInitdata.contextArray) {
                        var kvp = rawInitdata.contextArray[key];
                        initData.contextArray.push({ Key: kvp.Key, Value: kvp.Value });
                    }
                    initData.idClient = rawInitdata.idClient;
                    initData.idContexteClient = rawInitdata.idContexteClient;
                    return initData;
                };
                //AddBoundStep
                LisaManager.prototype.AddBoundStep = function (previousStep, stepId, displayName, url, boundId, isEnd) {
                    var currentProcess = this.library.Context.GetCurrentProcess();
                    if (!currentProcess) {
                        throw "no current process";
                    }
                    var newStep = new MyWay.Services.Context.ProcessStep();
                    newStep.id = stepId;
                    newStep.nomApplication = displayName;
                    newStep.url = url;
                    newStep.boundId = boundId;
                    newStep.isEnd = isEnd;
                    newStep.processName = currentProcess.displayName;
                    if (previousStep)
                        previousStep.nextStep = newStep;
                    currentProcess.subElements.push(newStep);
                    for (var i in currentProcess.subElements) {
                        var step = currentProcess.subElements[i];
                        if (!step.boundId && step.id === boundId) {
                            step.boundId = boundId;
                            break;
                        }
                    }
                    this.library.Context.SaveContext();
                };
                LisaManager.prototype.SwitchToSubProcess = function (id) {
                    var mainProcess = this.library.Context.GetCurrentMainProcess();
                    if (!mainProcess)
                        return null;
                    var foundProcess;
                    for (var index in mainProcess.subElements) {
                        var elem = mainProcess.subElements[index];
                        if (elem.type === 'Process' && elem.id === id) {
                            foundProcess = elem;
                            break;
                        }
                    }
                    if (!foundProcess)
                        throw "process '" + id + "' not found";
                    var context = this.library.Context.GetPortalContext();
                    context.currentPath = foundProcess.getPath();
                    this.SetParentProcessPath(foundProcess);
                    this.library.Context.SaveContext();
                    return context;
                };
                LisaManager.prototype.SwitchToSubProcessAsync = function (id, callback) {
                    //var notificationMessage: NotificationMessage = new NotificationMessage();
                    //var self = this;
                    //notificationMessage.Sujet = "processswitch";
                    //this.Notify(notificationMessage, function () {
                    callback(this.SwitchToSubProcess(id));
                    //});
                };
                LisaManager.prototype.SwitchToMainProcess = function () {
                    var mainProcess = this.library.Context.GetCurrentMainProcess();
                    if (!mainProcess)
                        return null;
                    var lastStep = null;
                    for (var index in mainProcess.subElements) {
                        var elem = mainProcess.subElements[index];
                        if (elem.type !== 'ProcessStep') {
                            continue;
                        }
                        lastStep = elem;
                    }
                    var context = this.library.Context.GetPortalContext();
                    if (lastStep && mainProcess.currentInnerElementPath !== lastStep.id) {
                        mainProcess.currentInnerElementPath = lastStep.id;
                        context.currentPath = mainProcess.getPath();
                        this.library.Context.SaveContext();
                        return context;
                    }
                    return context;
                };
                LisaManager.prototype.SwitchToMainProcessAsync = function (callback) {
                    //var notificationMessage: NotificationMessage = new NotificationMessage();
                    //var self = this;
                    //notificationMessage.Sujet = "processswitch";
                    //this.Notify(notificationMessage, function () {
                    callback(this.SwitchToMainProcess());
                    //});
                };
                //SwitchToStep
                LisaManager.prototype.SwitchToStep = function (stepId, processId) {
                    var context = this.library.Context.GetPortalContext();
                    var currentProcess;
                    var currentStep;
                    currentProcess = this.library.Context.GetCurrentProcess();
                    if (currentProcess)
                        currentStep = this.library.Context.GetCurrentStep(currentProcess);
                    if (!currentProcess) {
                        throw "no current process";
                    }
                    for (var index in currentProcess.subElements) {
                        var step = currentProcess.subElements[index];
                        if (step.id === stepId) {
                            currentProcess.currentInnerElementPath = step.id;
                            //clean step url
                            var keys = this.library.Core.FindKeysToReplace(step.url);
                            if (keys && keys.length > 0) {
                                var kvpList = this.library.Context.GetListFromContext(keys);
                                for (var i in kvpList) {
                                    var kvp = kvpList[i];
                                    step.url = step.url.replace(new RegExp('\\[' + kvp.Key + '\\]', 'g'), kvp.Value);
                                }
                            }
                            this.library.Context.SaveContext();
                            return context;
                        }
                    }
                    throw "step '" + stepId + "' not found";
                };
                //SwitchToStepAsync(stepId: string, processId: string, event: MessageEvent, sendResponse: (MessageEvent, any) => void) {
                //    var callbackParam = this.SwitchToStep(stepId, processId);
                //    sendResponse(event, callbackParam);
                //}
                //SwitchToCurrentProcess
                LisaManager.prototype.SwitchToCurrentProcess = function () {
                    var context = this.library.Context.GetPortalContext();
                    this.library.Context.SwitchToProcess(context.currentPath);
                    var lPortail = this.library.Context.GetPortalContext();
                    return lPortail;
                };
                LisaManager.prototype.SwitchToCurrentProcessAsync = function (callback) {
                    callback(this.SwitchToCurrentProcess());
                };
                LisaManager.prototype.EndSubProcess = function (currentPath) {
                    var context = this.library.Context.GetPortalContext();
                    var processId = Services.Context.PortalContext.GetPathPart(currentPath, Services.Context.PATH_PART.PREVIOUS_PROCESS_ID);
                    var i = currentPath.indexOf(processId);
                    processId = currentPath.substr(0, i) + processId;
                    var subProcessId = Services.Context.PortalContext.GetPathPart(currentPath, Services.Context.PATH_PART.LAST_PROCESS_ID);
                    subProcessId = processId + '|' + subProcessId;
                    this.library.Context.RemoveStep(subProcessId, processId);
                };
                LisaManager.prototype.RemoveSubProcessIfSingle = function (context, id, processElements) {
                    var foundIndex = -1;
                    var mainProcessId = Services.Context.PortalContext.GetPathPart(id, Services.Context.PATH_PART.MAIN_PROCESS_ID);
                    var lastProcessId = Services.Context.PortalContext.GetPathPart(id, Services.Context.PATH_PART.LAST_PROCESS_ID);
                    for (var index = 0; index < processElements.length; index++) {
                        var processElement = processElements[index];
                        if (processElement.type === 'Process') {
                            var process = processElement;
                            var initialProcessId = Services.Context.PortalContext.GetPathPart(process.id, Services.Context.PATH_PART.STEP_ID);
                            if (initialProcessId === mainProcessId) {
                                if (mainProcessId === lastProcessId) {
                                    foundIndex = index;
                                    break;
                                }
                                else
                                    return this.RemoveSubProcessIfSingle(context, id.replace(mainProcessId + '|', ''), process.subElements);
                            }
                        }
                    }
                    var removedProcess = null;
                    if (foundIndex >= 0) {
                        var removedProcess = processElements.splice(foundIndex, 1)[0];
                        var parent = this.library.Context.GetParentProcess(removedProcess);
                        if (processElements.length > 0) {
                            var processElement = processElements[processElements.length - 1];
                            if (processElement.type === 'Process')
                                context.currentPath = processElement.getPath();
                            else {
                                parent.currentInnerElementPath = processElement.id;
                                context.currentPath = parent.id + '|' + processElement.id;
                            }
                        }
                        else
                            context.currentPath = '';
                    }
                    return removedProcess;
                };
                //RemoveCurrentStepAsync(event: MessageEvent, sendResponse: (MessageEvent, any) => void) {
                //    var callbackParam = this.RemoveCurrentStep();
                //    sendResponse(event, callbackParam);
                //}
                //Private methods
                LisaManager.prototype._getPrevious = function (currentProcess, currentStep) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var index = -1;
                    for (var i = 0; i < currentProcess.subElements.length; i++) {
                        var elem = currentProcess.subElements[i];
                        if (elem.id == currentStep.id) {
                            index = i - 1;
                            break;
                        }
                    }
                    var previous = currentProcess.subElements[index];
                    if (previous.type === 'ProcessStep') {
                        var previousStep = previous;
                        var next = new Lisa.NextResult(null);
                        next.FinProcess = false;
                        next.CodeEtape = currentStep.codeEtape;
                        next.ValeurFinProcess = null;
                        next.ValeurSortie = null;
                        next.ProchaineEtape = JSON.parse(previousStep.etapeResultAsString);
                        deferred.resolve(next);
                    }
                    else {
                        deferred.reject(new Services.Erreur('l\'étape précédente n\'est pas une étape applicative'));
                    }
                    return deferred.promise;
                };
                LisaManager.prototype._startSubProcess = function (processCode, valeurDepart) {
                    var _this = this;
                    return this._start(processCode, valeurDepart, 'main', null).then(function (res) {
                        _this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.NouveauSousProcess, { portalContext: _this.library.Context.GetPortalContext() }));
                        return res;
                    });
                };
                /**
                 * Méthode permettant le démarrage d'un processus Lisa
                 * - récupère les données du processus auprès de l'API Lisa
                 * - récupère les données de l'aide flash
                 * - démarre le processus
                 * @param {string}                 processCode   Code du processus Lisa
                 * @param {number}                 valeurDepart  [description]
                 * @param {string}                 inProcessType [description]
                 * @param {IInitialisationData}    initData      [description]
                 * @param {LisaCallbackResult) =>            void}        callback Callback de succès
                 * @param {ErreurCallback}         errorCallback [description]
                 */
                LisaManager.prototype._start = function (processCode, valeurDepart, inProcessType, initData) {
                    var _this = this;
                    LisaManager.logger.info('Demande de démarrage du processus : %1', processCode);
                    var utilisateurHabilite = false;
                    var verifHabilitation;
                    if (this._modeVerificationProcessus === Services.ModeVerificationProcessus.Aucun) {
                        utilisateurHabilite = true;
                        var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                        deferred.resolve();
                        verifHabilitation = deferred.promise;
                    }
                    else {
                        verifHabilitation = this.api.getHabilitationProcessus(processCode).then(function (habilitation) {
                            return _this.library.Habilitation.EstHabilite([habilitation]).then(function (values) {
                                if (values.length === 1) {
                                    if (values[0] === false)
                                        LisaManager.logger.warn("Utilisateur non autorisé à démarrer le processus %1. Habilitation du processus %2 non déclarée", processCode, habilitation);
                                    else {
                                        utilisateurHabilite = true;
                                        LisaManager.logger.debug("Utilisateur autorisé à démarrer le processus %1. Habilitation du processus %2 trouvée", processCode, habilitation);
                                    }
                                }
                                else
                                    LisaManager.logger.warn("Impossible de vérifier si l'utilisateur est habilité au processus %1 (Habilitation %2)", processCode, habilitation);
                            });
                        }).catch(function (erreur) {
                            LisaManager.logger.warn("Impossible de récupérer l'habilitation nécessaire au processus %1", processCode);
                        });
                    }
                    return this.library.Core.promesseTryCatch(function (pDefer) {
                        //TODO
                        //Voir ce qui se passe sur un finally(() => { throw...}) pour savoir si ça déclenche un catch après ou pas.
                        //Dans ce cas on peux directement faire un return de verifHabilitation.finally() afin de virer le this.library.Core.promesseTryCatch
                        verifHabilitation.finally(function () {
                            if (!utilisateurHabilite) {
                                if (_this._modeVerificationProcessus === Services.ModeVerificationProcessus.Erreur) {
                                    var text = "Le processus n'est pas lancé en raison d'un problème d'habilitation";
                                    LisaManager.logger.error(text);
                                    pDefer.reject(new Services.Erreur(text));
                                    return;
                                }
                            }
                            _this.api.start(processCode, valeurDepart)
                                .then(function (start) {
                                if (start && start.ProcessDemarre) {
                                    LisaManager.logger.info('Démarrage du processus : %1', start.ProcessDemarre.Nom);
                                    try {
                                        _this._launchNextStep(start, inProcessType, initData, null).then(function (res) {
                                            try {
                                                if (initData && initData.displayName) {
                                                    _this.library.Context.ChangeProcessName(initData.displayName, res.processId);
                                                }
                                                pDefer.resolve(res);
                                            }
                                            catch (e) {
                                                //TODO LOG ERREUR
                                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'Next');
                                                LisaManager.logger.error('change process name failed');
                                                pDefer.reject(e);
                                            }
                                        });
                                    }
                                    catch (e) {
                                        pDefer.reject(e);
                                    }
                                }
                                else {
                                    //TODO LOG WARN
                                    LisaManager.logger.warn('Aucun processus démarré');
                                    pDefer.resolve(null);
                                }
                            }).catch(pDefer.reject);
                        });
                    });
                };
                /**
                * Récupère les codes des processus LISA
                */
                LisaManager.prototype._getCodesProcessus = function () {
                    return this.api.getCodesProcessus();
                };
                /**
                * Récupère les infos d'un processus LISA
                * @param {string}   codeProcessus
                * code du processus
                */
                LisaManager.prototype._getInfoProcessus = function (codeProcessus) {
                    return this.api.getInfoProcessus(codeProcessus);
                };
                LisaManager.prototype._getTools = function () {
                    var _this = this;
                    return this.api.getTools().then(function (tools) {
                        for (var index in tools) {
                            var tool = tools[index];
                            tool.Url = _this.replaceTokens(tool.Url, null);
                        }
                        return tools;
                    });
                };
                LisaManager.prototype._handleNext = function (stepCode, valeurSortie, next) {
                    var _this = this;
                    if (next && next.FinProcess) {
                        var currentProcess = this.library.Context.GetCurrentProcess();
                        var portalContext = this.library.Context.GetPortalContext();
                        var currentPath = portalContext.currentPath;
                        if (currentProcess.codeEtape) {
                            return this.api.next(currentProcess.codeEtape, next.ValeurFinProcess).then(function (innerNext) {
                                if (innerNext) {
                                    var contractTransfer = [];
                                    currentProcess = _this.library.Context.GetCurrentProcess();
                                    if (currentProcess.outputContracts) {
                                        for (var ic in currentProcess.outputContracts) {
                                            var key = currentProcess.outputContracts[ic];
                                            var value = _this.library.Context.GetFromContext(key);
                                            contractTransfer.push({ Key: key, Value: value });
                                        }
                                    }
                                    if (contractTransfer.length > 0) {
                                        _this.library.Context.AddListToContext(Services.Context.StorageLevel.Process, contractTransfer, _this.library.Context.GetParentProcess(currentProcess).id);
                                    }
                                    LisaManager.logger.info('FSP');
                                    var trace = new Services.TraceSuivi.TraceSuiviModel();
                                    trace.state = 'FS';
                                    _this.library.TraceSuivi.tracer(trace);
                                    var lastNextTime = currentProcess.lastNextTime;
                                    _this.EndSubProcess(currentPath);
                                    var process = _this.library.Context.GetCurrentProcess();
                                    process.lastNextTime = lastNextTime;
                                    return _this._handleNext(stepCode, valeurSortie, innerNext);
                                }
                                else {
                                    LisaManager.logger.info('FP');
                                    //Détache le processus du contexte client courant
                                    if (currentProcess.contexteClientId) {
                                        _this.library.ContexteClient.changeContexteOfProcess(null, currentProcess.id, null);
                                    }
                                    var trace = new Services.TraceSuivi.TraceSuiviModel;
                                    trace.state = 'FP';
                                    _this.library.TraceSuivi.tracer(trace);
                                    _this._notifyEndProcessus();
                                    _this.library.Context.RemoveCurrentProcess();
                                    var portalContext = _this.library.Context.GetPortalContext();
                                    _this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.FinDeProcessus, { portalContext: portalContext }));
                                    if (_this.DisplayProcessesOnProcessEnd) {
                                        if (portalContext.processes.length > 0)
                                            _this.library.Context.DisplayProcesses();
                                        else
                                            _this.library.Display.DisplayBaseFrame();
                                    }
                                    var res = new Lisa.LisaCallbackResult();
                                    res.finDeProcessus = true;
                                    return _this.library.Core.createPromiseSelfResolved(res);
                                }
                            });
                        }
                        else {
                            LisaManager.logger.info('FP');
                            var trace = new Services.TraceSuivi.TraceSuiviModel;
                            ////Détache le processus du contexte client courant
                            if (currentProcess.contexteClientId) {
                                this.library.ContexteClient.changeContexteOfProcess(null, currentProcess.id, null);
                            }
                            trace.state = 'FP';
                            this.library.TraceSuivi.tracer(trace);
                            this._notifyEndProcessus();
                            this.library.Context.RemoveCurrentProcess();
                            var portalContext = this.library.Context.GetPortalContext();
                            this.SendEvent(new Services.Component.ManagerEvent(Services.Component.ManagerEventType.FinDeProcessus, { portalContext: portalContext }));
                            if (this.DisplayProcessesOnProcessEnd) {
                                if (portalContext.processes.length > 0)
                                    this.library.Context.DisplayProcesses();
                                else
                                    this.library.Display.DisplayBaseFrame();
                            }
                            var res = new Lisa.LisaCallbackResult();
                            res.finDeProcessus = true;
                            return this.library.Core.createPromiseSelfResolved(res);
                        }
                    }
                    else if (next) {
                        if (!next.ProchaineEtape) {
                            return this.library.Core.createPromiseSelfError(new Services.Erreur("Aucune prochaine etape trouvée pour l'enchainement de " + stepCode + " sortie " + valeurSortie));
                        }
                        return this._launchNextStep(next, 'current', null, valeurSortie);
                    }
                    else {
                        //TODO LOG ERREUR
                        Services.Loggers.FLASH.INSTANCE.setValue('action', 'Next');
                        LisaManager.logger.error('pas de next trouvé pour etape %1, valeur %2', stepCode, valeurSortie);
                        return this.library.Core.createPromiseSelfResolved(null);
                    }
                };
                LisaManager.prototype._notifyEndProcessus = function () {
                    if (this.onFinProcessus) {
                        try {
                            this.onFinProcessus(this.library.Context.GetMainProcessId());
                        }
                        catch (e) {
                            //TODO LOG ERREUR
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'NotifyEndProcessus');
                            Services.Loggers.FLASH.INSTANCE.setValue('details', e);
                            LisaManager.logger.error('une erreur est survenue lors de la notification de fin de processus');
                        }
                    }
                };
                LisaManager.prototype._launchNextStep = function (next, inProcessType, initData, pValeurSortie) {
                    var _this = this;
                    var codeContrats = [];
                    for (var index in next.ProchaineEtape.Contrats) {
                        var contrat = next.ProchaineEtape.Contrats[index];
                        if (contrat.Mode === 'IN')
                            codeContrats.push(contrat.Code);
                    }
                    var etape = next.ProchaineEtape;
                    var currentProcess;
                    if (inProcessType === 'current')
                        currentProcess = this.library.Context.GetCurrentProcess();
                    else if (inProcessType === 'main')
                        currentProcess = this.library.Context.GetCurrentMainProcess();
                    var currentStep = this.library.Context.GetCurrentStep(currentProcess);
                    if (currentProcess) {
                        var cbR = this._handlePreviousSteps(next, currentProcess);
                        if (cbR) {
                            return this.library.Core.createPromiseSelfResolved(cbR);
                        }
                    }
                    var actions = etape.Actions;
                    var contrats = etape.Contrats;
                    var callbackResult = new Lisa.LisaCallbackResult();
                    var typeProcessDemarre = null;
                    var idClient = null;
                    if (next.ProcessDemarre) {
                        //manage processes
                        var processId = next.ProcessDemarre.Code;
                        processId += "-" + Services.CoreCommon.creerChaineAleatoire(8);
                        var processOptions = null;
                        if (next.ProcessDemarre.OptionsProcess) {
                            processOptions = JSON.parse(next.ProcessDemarre.OptionsProcess);
                        }
                        var name = next.ProcessDemarre.Nom;
                        if (initData && initData.displayName)
                            name = initData.displayName;
                        if (currentProcess) {
                            var processOptionsAsEtape = null;
                            if (next.ProcessDemarre.OptionsProcessAsEtape) {
                                processOptionsAsEtape = JSON.parse(next.ProcessDemarre.OptionsProcessAsEtape);
                            }
                            this.AddSubProcess(processId, currentProcess, name, next.ProcessDemarre.Code, next.ProcessDemarre.CodeEtape, next.ProcessDemarre.Actions, next.ProcessDemarre.EtapesConnues, processOptions, processOptionsAsEtape);
                            if (processOptionsAsEtape && processOptionsAsEtape.Mappage) {
                                this._translateContext(processOptionsAsEtape.Mappage, Services.Context.StorageLevel.Process);
                            }
                            LisaManager.logger.info('DSP');
                            var trace = new Services.TraceSuivi.TraceSuiviModel;
                            trace.state = 'DS';
                            this.library.TraceSuivi.tracer(trace);
                        }
                        else {
                            //Ajout contexte client
                            var contexteClient = null;
                            if (initData) {
                                var idClient = initData.idClient;
                                var idContexteClient = initData.idContexteClient;
                                if (idClient) {
                                    contexteClient = this.library.ContexteClient.nouveauContexte(idClient);
                                }
                                else if (idContexteClient) {
                                    contexteClient = this.library.ContexteClient.getContexte(idContexteClient);
                                }
                                else if (idClient === '') {
                                    contexteClient = this.library.ContexteClient.nouveauContexte();
                                }
                            }
                            var lProcessCree = this.AddProcess(processId, name, next.ProcessDemarre.Code, next.ProcessDemarre.EtapesConnues, processOptions, contexteClient ? contexteClient.getId() : null);
                            if (contexteClient) {
                                contexteClient.ajouterProcessus(lProcessCree);
                            }
                            this.library.Interop.NotifyBeginProcessus(processId);
                            LisaManager.logger.info('DP');
                            var trace = new Services.TraceSuivi.TraceSuiviModel;
                            trace.state = 'DP';
                            this.library.TraceSuivi.tracer(trace);
                            if (processOptions)
                                typeProcessDemarre = processOptions.TypeProcess;
                        }
                        callbackResult.processId = processId;
                        callbackResult.codeProcessus = next.ProcessDemarre.Code;
                        if (initData && initData.contextArray) {
                            this.library.Context.AddListToContext(Services.Context.StorageLevel.Process, initData.contextArray);
                            for (var index in initData.contextArray) {
                                var kvp = initData.contextArray[index];
                                if (kvp.Key === 'IDCLIENT') {
                                    idClient = kvp.Value;
                                    break;
                                }
                            }
                        }
                    }
                    //manage processes
                    var etape = next.ProchaineEtape;
                    var url = this._evaluateUrl(etape);
                    var optionsEtape = null;
                    if (etape.OptionsEtape) {
                        optionsEtape = JSON.parse(etape.OptionsEtape);
                    }
                    if (!optionsEtape) {
                        optionsEtape = {};
                    }
                    if (currentStep) {
                        currentStep.maintienIFrameLastAction = currentStep.maintienIFrame;
                        if (currentStep.actions) {
                            currentStep.actions.every(function (pAction) {
                                if (pAction.ValeurSortie === pValeurSortie) {
                                    var lOptionsAction = {};
                                    try {
                                        lOptionsAction = JSON.parse(pAction.Options);
                                    }
                                    catch (e) { }
                                    ;
                                    if (lOptionsAction.MaintienIFrame === true || lOptionsAction.MaintienIFrame === 'true') {
                                        currentStep.maintienIFrameLastAction = true;
                                    }
                                    else if (lOptionsAction.MaintienIFrame === false || lOptionsAction.MaintienIFrame === 'false') {
                                        currentStep.maintienIFrameLastAction = false;
                                    }
                                    return false;
                                }
                                return true;
                            });
                        }
                    }
                    if (currentStep && currentStep.maintienIFrameLastAction === true) {
                        //si l'étape suivante est un routeur, il faut prolonger l'option d'étape de maintien d'iframe
                        //sinon indiquer que l'étape doit s'ouvrir dans une nouvelle iframe
                        if (url.indexOf(".js") === url.length - 3) {
                            optionsEtape.MaintienIFrame = true;
                        }
                        else {
                            optionsEtape.NouvelleIFrame = true;
                        }
                    }
                    this.AddStepWithResult(etape, url, optionsEtape);
                    if (optionsEtape && optionsEtape.Mappage) {
                        this._translateContext(optionsEtape.Mappage, Services.Context.StorageLevel.Step);
                    }
                    LisaManager.logger.info('DE');
                    LisaManager.logger.info('Nouvelle etape : %1, options: %2', etape.CodeEtape, JSON.stringify(optionsEtape));
                    var trace = new Services.TraceSuivi.TraceSuiviModel;
                    trace.state = 'DE';
                    this.library.TraceSuivi.tracer(trace);
                    callbackResult.codeEtape = etape.CodeEtape;
                    if (optionsEtape && optionsEtape.NouvelleIFrame)
                        callbackResult.nouvelleIframe = true;
                    else
                        callbackResult.nouvelleIframe = false;
                    if (initData && initData.subProcessCode) {
                        // pour mémoire, refacto lié à la suppression de l'api client
                        return this._start(initData.subProcessCode, null, 'current', null).then(function (res2) {
                            callbackResult.sousProcessusDemarre = res2.codeProcessus;
                            _this._finalizeCallbackResultValues(callbackResult);
                            return callbackResult;
                        }, function (erreur) {
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'Next');
                            Services.Loggers.FLASH.INSTANCE.setValue('details', erreur);
                            LisaManager.logger.error('sous processus \'%1\' demandé mais en echec', initData.subProcessCode);
                            return callbackResult;
                        });
                    }
                    else {
                        this._finalizeCallbackResultValues(callbackResult);
                        return this.library.Core.createPromiseSelfResolved(callbackResult);
                    }
                };
                LisaManager.prototype._evaluateUrl = function (etape) {
                    var codeContrats = [];
                    for (var index in etape.Contrats) {
                        var contrat = etape.Contrats[index];
                        if (contrat.Mode === 'IN')
                            codeContrats.push(contrat.Code);
                    }
                    this._translateContext(codeContrats, Services.Context.StorageLevel.Process);
                    var url = '';
                    if (etape.LocalisationAbsolue)
                        url += etape.LocalisationAbsolue;
                    if (etape.LocalisationRelative)
                        url += etape.LocalisationRelative;
                    url = this.replaceTokens(url, codeContrats);
                    //cas PMM
                    if (etape.TypeApplication === "PMM") {
                        url = this._addModeMyWay(url);
                    }
                    return url;
                };
                LisaManager.prototype._addModeMyWay = function (url) {
                    if (url.indexOf('?') > 0)
                        url += '&';
                    else
                        url += '?';
                    var environnement = MyWay.Services.PortalServiceParameters.Instance().Environnement.toLowerCase();
                    var version = this.library.Context.GetFromContext("VERS");
                    if (version)
                        version = version.substring(1);
                    var modeMyWay = { environnement: environnement, version: version };
                    url += "modeMyWay=" + JSON.stringify(modeMyWay);
                    return url;
                };
                LisaManager.prototype._finalizeCallbackResultValues = function (callbackResult) {
                    var currentProcess = this.library.Context.GetCurrentProcess();
                    callbackResult.etapeCourante = this.library.Context.GetCurrentStep(currentProcess);
                    var params = new Services.Aide.InfobulleAfficheeParametres();
                    var authentInfo = this.library.Context.GetAuthentificationInfo();
                    if (authentInfo)
                        params.codeEtablissement = authentInfo.codeEtablissement;
                    params.codeEtape = callbackResult.codeEtape;
                    params.codeProcessus = callbackResult.codeProcessus;
                    this.library.Aide.displayAideFlash(params);
                };
                LisaManager.prototype._handlePreviousSteps = function (next, currentProcess) {
                    var foundElem;
                    if (next.ProcessDemarre)
                        return null;
                    for (var index in currentProcess.subElements) {
                        var elem = currentProcess.subElements[index];
                        if (elem.codeEtape === next.ProchaineEtape.CodeEtape) {
                            foundElem = elem;
                            break;
                        }
                    }
                    if (foundElem) {
                        var portalContext = this.library.Context.GetPortalContext();
                        var process = portalContext.GetCurrentProcess();
                        var step = portalContext.GetCurrentStep(process);
                        while (step && step.codeEtape !== next.ProchaineEtape.CodeEtape) {
                            portalContext = this.library.Context.RemoveCurrentStep(step.codeEtape);
                            process = portalContext.GetCurrentProcess();
                            step = portalContext.GetCurrentStep(process);
                        }
                        var newCurrentProcess = this.library.Context.GetCurrentProcess();
                        var newCurrentStep = this.library.Context.GetCurrentStep(newCurrentProcess);
                        /*Modification de l'url*/
                        if (newCurrentStep.etapeResultAsString) {
                            var etapeResult = JSON.parse(newCurrentStep.etapeResultAsString);
                            newCurrentStep.url = this._evaluateUrl(etapeResult);
                        }
                        var callbackResult = new Lisa.LisaCallbackResult();
                        callbackResult.codeEtape = newCurrentStep.codeEtape;
                        callbackResult.codeProcessus = newCurrentProcess.codeProcess;
                        callbackResult.etapeCourante = newCurrentStep;
                        callbackResult.finDeProcessus = false;
                        callbackResult.processId = newCurrentProcess.id;
                        callbackResult.sousProcessusDemarre = null;
                        callbackResult.retourEtapePrecedente = true;
                        return callbackResult;
                    }
                    else {
                    }
                };
                LisaManager.prototype._translateContext = function (codeContrats, level) {
                    var translations = [];
                    var reverseTranslations = [];
                    var keys = [];
                    if (codeContrats) {
                        for (var index in codeContrats) {
                            var contrat = codeContrats[index];
                            if (contrat && contrat.indexOf('=>') > 0) {
                                var parts = contrat.split('=>');
                                translations[parts[1]] = parts[0];
                                keys.push(parts[0]);
                                reverseTranslations[parts[0]] = parts[1];
                            }
                        }
                    }
                    var values = this.library.Context.GetListFromContext(keys, true);
                    var translatedKvps = [];
                    for (var index in values) {
                        var kvp = values[index];
                        if (reverseTranslations[kvp.Key])
                            translatedKvps.push({ Key: reverseTranslations[kvp.Key], Value: kvp.Value });
                    }
                    this.library.Context.AddListToContext(level, translatedKvps);
                };
                LisaManager.prototype._prepareNavigation = function (nextEtapes, processId, callback) {
                    if (nextEtapes && nextEtapes.length > 0) {
                        LisaManager._setNextSteps(this, this.library, processId, nextEtapes, processId, function () {
                            if (callback)
                                callback(processId);
                        });
                    }
                    else {
                        if (callback)
                            callback(processId);
                    }
                };
                LisaManager._setNextSteps = function (lisaClientPortailInstance, managerLibrary, stepId, nextEtapes, boundId, endCallback) {
                    var foundStep;
                    var process = managerLibrary.Context.GetCurrentProcess();
                    for (var j in process.subElements) {
                        var step = process.subElements[j];
                        if (step.id === stepId) {
                            foundStep = step;
                            break;
                        }
                    }
                    if (foundStep) {
                        LisaManager._setNextStep(lisaClientPortailInstance, managerLibrary, foundStep, nextEtapes.shift(), nextEtapes, boundId, LisaManager._setNextSteps, endCallback);
                    }
                };
                LisaManager._setNextStep = function (lisaClientPortailInstance, managerLibrary, step, nextEtape, nextEtapes, boundId, continueCallback, endCallback) {
                    var url = '';
                    if (nextEtape.LocalisationAbsolue)
                        url += nextEtape.LocalisationAbsolue;
                    if (nextEtape.LocalisationRelative)
                        url += nextEtape.LocalisationRelative;
                    url = lisaClientPortailInstance.replaceTokens(url, null);
                    //manage processes
                    var stepId = nextEtape.CodeEtape;
                    stepId += "-" + Services.CoreCommon.creerChaineAleatoire(8);
                    var isEnd = nextEtapes.length == 0;
                    var modifiedProcesses = managerLibrary.Lisa.AddBoundStep(step, stepId, nextEtape.NomApplication, url, boundId, isEnd);
                    if (nextEtapes.length > 0)
                        continueCallback(lisaClientPortailInstance, managerLibrary, stepId, nextEtapes, boundId, endCallback);
                    else
                        endCallback();
                };
                LisaManager.prototype._portail_StartProcess = function (processCode, standAlone, initData, valeurDepart) {
                    var _this = this;
                    var _initData = initData || {};
                    return this.startStandaloneProcessWithInitialisation(processCode, valeurDepart, initData).then(function (res) {
                        if (standAlone) {
                            _this.library.Context.PutProcessInWait(res.processId);
                            _this.library.Context.SetSingleProcess(res.processId);
                        }
                        _this.library.Context.DisplayProcesses();
                        return res;
                    });
                };
                LisaManager.prototype._portail_StartUrl = function (name, url, standAlone) {
                    var _this = this;
                    return this.startUrl(name, url).then(function (res) {
                        if (standAlone) {
                            _this.library.Context.PutProcessInWait(res.processId);
                            _this.library.Context.SetSingleProcess(res.processId);
                        }
                        _this.library.Context.DisplayProcesses();
                        return res;
                    });
                };
                LisaManager.prototype._portail_Next = function (valeurSortie) {
                    var _this = this;
                    return this.next(valeurSortie).then(function (res) {
                        _this.endTransition(res);
                        return res;
                    });
                };
                LisaManager.prototype._DemarreSousProcessusModeExterne = function (next) {
                    var _this = this;
                    var promise;
                    var lpromise;
                    var initData;
                    var processOptionsAsEtape = null;
                    var OptionsEtape = null;
                    var valeurDepart;
                    var codeProcessus;
                    var horsPortail;
                    var surTablette;
                    codeProcessus = next.ProcessDemarre.Code;
                    valeurDepart = next.ProcessDemarre.ValeurDepart.toString();
                    if (next.ProchaineEtape && next.ProchaineEtape.OptionsEtape) {
                        OptionsEtape = JSON.parse(next.ProchaineEtape.OptionsEtape);
                    }
                    if (next.ProcessDemarre.OptionsProcessAsEtape) {
                        processOptionsAsEtape = JSON.parse(next.ProcessDemarre.OptionsProcessAsEtape);
                    }
                    if (processOptionsAsEtape && processOptionsAsEtape.Mappage) {
                        this._translateContext(processOptionsAsEtape.Mappage, Services.Context.StorageLevel.Process);
                    }
                    if (processOptionsAsEtape && processOptionsAsEtape.HorsPortail) {
                        horsPortail = (processOptionsAsEtape.HorsPortail == "true" || processOptionsAsEtape.HorsPortail ? true : false);
                    }
                    if (processOptionsAsEtape && processOptionsAsEtape.SurTablette) {
                        surTablette = (processOptionsAsEtape.SurTablette == "true" || processOptionsAsEtape.SurTablette ? true : false);
                    }
                    else
                        horsPortail = false;
                    initData = this._FormateInitData(next.ProchaineEtape.Contrats);
                    initData.processusAOuvrirDansUneNouvelleInstance = horsPortail;
                    lpromise = this.api.DemarrerSousProcessusExterne(codeProcessus, true, initData, valeurDepart, horsPortail, surTablette);
                    return lpromise.then(function (lancementOk) {
                        if (lancementOk) {
                            var callbackResult = new Lisa.LisaCallbackResult();
                            callbackResult.codeProcessus = next.ProcessDemarre.Code;
                            return callbackResult;
                        }
                        else {
                            Services.Loggers.FLASH.INSTANCE.setValue('action', 'DemarrerSousProcessusExterne');
                            LisaManager.logger.error("Le sous processus n'a pas pu démarrer en mode externe");
                            return _this.library.Core.createPromiseSelfError(new Services.Erreur("Le sous processus n'a pas pu démarrer en mode externe"));
                        }
                    });
                };
                LisaManager.prototype._FormateInitData = function (contratsResult) {
                    var initData = {};
                    var contratsValues = [];
                    var contrats = [];
                    if (contratsResult) {
                        var contratsResultLength = contratsResult.length;
                        for (var j = 0; j < contratsResultLength; j++) {
                            var contratResult = contratsResult[j];
                            contrats.push(contratResult.Code);
                        }
                        contratsValues = this.library.Context.GetListFromContext(contrats);
                        initData.contextArray = contratsValues;
                    }
                    return initData;
                };
                LisaManager.ProcessStepSetValues = function (step, currentProcess, nomApplication, url, actions, contrats, codeApplication, codeEtape, codeMetier, valeurEntree, boundId, stepOptions, etapeResultAsString, etatEtape, isRouteur, creationDate) {
                    step.codeEtape = codeEtape;
                    step.codeMetier = codeMetier;
                    step.codeApplication = codeApplication;
                    step.nomApplication = nomApplication;
                    step.valeurEntree = valeurEntree;
                    step.url = url;
                    step.boundId = boundId;
                    step.actions = [];
                    step.contextStorage = [];
                    step.processName = currentProcess.displayName;
                    if (actions) {
                        var actionsLength = actions.length;
                        for (var j = 0; j < actionsLength; j++) {
                            var action = actions[j];
                            var stepAction = new Services.Context.StepAction();
                            stepAction.EstExterne = action.EstExterne;
                            stepAction.Nom = action.NomExterne;
                            stepAction.Options = action.OptionsAction;
                            stepAction.ValeurSortie = action.ValeurSortie;
                            stepAction.CodeEtape = codeEtape;
                            step.actions.push(stepAction);
                        }
                    }
                    step.contrats = [];
                    if (contrats) {
                        var contratsLength = contrats.length;
                        for (var j = 0; j < contratsLength; j++) {
                            var contrat = contrats[j];
                            var stepContrat = new Services.Context.StepContrat();
                            stepContrat.Code = contrat.Code;
                            stepContrat.Longueur = contrat.Longueur;
                            stepContrat.Mode = contrat.Mode;
                            stepContrat.Nullable = contrat.Nullable;
                            stepContrat.Type = contrat.Type;
                            step.contrats.push(stepContrat);
                        }
                    }
                    step.etapeResultAsString = etapeResultAsString;
                    step.isRouteur = isRouteur;
                    step.etatEtape = etatEtape;
                    step.creationDate = creationDate;
                    if (stepOptions && stepOptions.ProcessusMaitre)
                        step.processusMaitre = stepOptions.ProcessusMaitre;
                    step.diagnosticTraceSentForStep = false;
                };
                LisaManager.CLASS_NAME = 'MyWay.Services.Lisa.LisaManager';
                LisaManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(LisaManager.CLASS_NAME);
                return LisaManager;
            }(Services.Components.ComponentManagerBase));
            Lisa.LisaManager = LisaManager;
            Services.Components.RegistryManager.getInstance().register(LisaManager);
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.PhantomAgent.addListenerOnInit(function (pInstance, pServiceManager) {
            pInstance.Lisa = new Services.Lisa.PhantomLisaAgent(pServiceManager);
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var PhantomLisaAgent = /** @class */ (function () {
                function PhantomLisaAgent(serviceManager) {
                    this.serviceManager = serviceManager;
                }
                PhantomLisaAgent.prototype.Next = function (valeurSortie) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    this.serviceManager.Library.Lisa.next(valeurSortie);
                    return deferred.promise;
                };
                PhantomLisaAgent.prototype.NextWithStep = function (stepCode, valeurSortie) {
                    return this.Next(valeurSortie);
                };
                return PhantomLisaAgent;
            }());
            Lisa.PhantomLisaAgent = PhantomLisaAgent;
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var RouteurAgentImpl = /** @class */ (function () {
                function RouteurAgentImpl() {
                }
                Object.defineProperty(RouteurAgentImpl.prototype, "StepInfo", {
                    get: function () {
                        return MyWay.Services.ServiceManager.Instance().Library.Context.GetCurrentStepInfo();
                    },
                    enumerable: true,
                    configurable: true
                });
                RouteurAgentImpl.prototype.Next = function (valeurSortie) {
                    MyWay.Services.ServiceManager.Instance().Library.Lisa.next(valeurSortie).then(function (res) {
                        MyWay.Services.ServiceManager.Instance().Library.Lisa.endTransition(res);
                    }, function (erreur) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', erreur);
                        RouteurAgentImpl.logger.error("une erreur est survenue");
                    });
                };
                RouteurAgentImpl.prototype.AddToContext = function (key, value) {
                    MyWay.Services.ServiceManager.Instance().Library.Context.AddToContext(Services.Context.StorageLevel.Process, key, value);
                };
                RouteurAgentImpl.prototype.GetFromContext = function (key) {
                    return MyWay.Services.ServiceManager.Instance().Library.Context.GetFromContext(key);
                };
                RouteurAgentImpl.prototype.LireFichier = function (nomFichier) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    MyWay.Services.ServiceManager.Instance().Library.Interop.LireFichier(nomFichier).then(function (data) {
                        deferred.resolve(data);
                    }).catch(function (error) {
                        deferred.reject(error);
                    });
                    return deferred.promise;
                };
                RouteurAgentImpl.prototype.Previous = function () {
                    MyWay.Services.ServiceManager.Instance().Library.Lisa.previous().then(function (res) {
                        MyWay.Services.ServiceManager.Instance().Library.Lisa.endTransition(res);
                    }, function (erreur) {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', erreur);
                        RouteurAgentImpl.logger.error("une erreur est survenue");
                    });
                };
                RouteurAgentImpl.CLASS_NAME = 'MyWay.Services.RouteurAgent';
                RouteurAgentImpl.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(RouteurAgentImpl.CLASS_NAME);
                return RouteurAgentImpl;
            }());
            Lisa.RouteurAgentImpl = RouteurAgentImpl;
            Services.RouteurAgent.setImplementation(new RouteurAgentImpl());
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.ServiceAgentMobileExtended.addActionPostInit(function (pLibraryManager) {
            var processId = Services.ServiceManager.Instance().Library.Context.GetFromContext('MobileProcessId');
            var process = Services.ServiceManager.Instance().Library.Context.GetProcessByIdFromAllPortails(processId);
            if (!process) {
                if (processId) {
                    Services.ServiceManager.Instance().Library.Context.AddToContext(Services.Context.StorageLevel.Global, 'MobileProcessId', null);
                }
                return Services.ServiceManager.Instance().Library.Lisa.startUrl('MobileProcess', '').then(function (res) {
                    Services.ServiceManager.Instance().Library.Context.PutProcessInWait(res.processId);
                    Services.ServiceManager.Instance().Library.Context.SetSingleProcess(res.processId);
                    Services.ServiceManager.Instance().Library.Context.AddToContext(Services.Context.StorageLevel.Global, 'MobileProcessId', res.processId);
                    return;
                }, function (error) {
                    // Ignore les erreurs
                    return;
                });
            }
            Services.ServiceManager.Instance().Library.Context.PutProcessInWait(processId);
            Services.ServiceManager.Instance().Library.Context.SetSingleProcess(processId);
            return pLibraryManager.Core.getPromesseSelfResoved();
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var LisaManagerMessage = /** @class */ (function (_super) {
                __extends(LisaManagerMessage, _super);
                function LisaManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Lisa) || this;
                }
                LisaManagerMessage.prototype.reception = function (pMessage) {
                    var _this = this;
                    switch (pMessage.subject) {
                        case Lisa.Messages.LisaMessageSubject.Next: {
                            var lContent = pMessage.message;
                            var valeurSortie = lContent.valeurSortie;
                            return this.managerInstance.next(valeurSortie).then(function (res) {
                                _this.managerInstance.endTransition(res);
                                // Ne pas envoyer de réponse pour pas qu'il y est de message envoyé après un changement de frame
                                // Pour cela je créé un nouveau "defer" que je ne résous jamais!
                                return _this.library.Core.getServiceDePromesse().defer().promise;
                            }, function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                                LisaManagerMessage.logger.error('Next failed - %1', error);
                                throw new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_LISA_NEXT_IMPOSSIBLE);
                            });
                        }
                        case Lisa.Messages.LisaMessageSubject.StartProcess: {
                            var lContent = pMessage.message;
                            var processCode = lContent.processCode;
                            var valeurDepart = lContent.valeurDepart;
                            var initData = lContent.initData;
                            return this.managerInstance.startStandaloneProcessWithInitialisation(processCode, valeurDepart, initData).then(function (res) {
                                _this.managerInstance.endTransition;
                                return res;
                            }, function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                                LisaManagerMessage.logger.error('StartStandaloneProcess failed - %1', error);
                                throw new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_LISA_START_IMPOSSIBLE);
                            });
                        }
                        case Lisa.Messages.LisaMessageSubject.StartProcessPortal: {
                            var lContent = pMessage.message;
                            var processCode = lContent.processCode;
                            var valeurDepart = lContent.valeurDepart;
                            var initData = lContent.initData;
                            return this.managerInstance._portail_StartProcess(processCode, false, initData, valeurDepart);
                        }
                        case Lisa.Messages.LisaMessageSubject.StartSubProcess: {
                            var lContent = pMessage.message;
                            var processCode = lContent.processCode;
                            var valeurDepart = lContent.valeurDepart;
                            return this.managerInstance._startSubProcess(processCode, valeurDepart).then(this.managerInstance.endTransition, function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                                LisaManagerMessage.logger.error('StartSubProcess failed - %1', error);
                                throw new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_LISA_START_IMPOSSIBLE);
                            });
                        }
                        case Lisa.Messages.LisaMessageSubject.StartUrl: {
                            var lContent = pMessage.message;
                            var name = lContent.name;
                            var url = lContent.url;
                            return this.managerInstance.startUrl(name, url).then(function (res) {
                                _this.managerInstance.endTransition;
                                return res;
                            }, function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                                LisaManagerMessage.logger.error('StartExternalApp failed - %1', error);
                                throw new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_LISA_START_IMPOSSIBLE);
                            });
                        }
                        case Lisa.Messages.LisaMessageSubject.StartUrlPortal: {
                            var lContent = pMessage.message;
                            var name = lContent.name;
                            var url = lContent.url;
                            return this.managerInstance._portail_StartUrl(name, url, false);
                        }
                        case Lisa.Messages.LisaMessageSubject.StartExternalApp: {
                            var lContent = pMessage.message;
                            var name = lContent.name;
                            var url = lContent.url;
                            var standAlone = lContent.standAlone;
                            if (!standAlone) {
                                return this.managerInstance.startUrl(name, url).then(function (res) {
                                    _this.managerInstance.endTransition;
                                    return res;
                                }, function (error) {
                                    Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                    Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                                    LisaManagerMessage.logger.error('StartExternalApp failed - %1', error);
                                    throw new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_LISA_START_IMPOSSIBLE);
                                });
                            }
                            else {
                                //ouverture de la fenêtre
                                var urlSpa = Services.PrivatePortalServiceParameters.Instance().LisaPlaceholders["URL-SPA"];
                                var urlPortail = Services.PrivatePortalServiceParameters.Instance().LisaPlaceholders["ALIASPORTAIL"];
                                var processUrl = urlSpa + urlPortail + '/' + '?u=' + encodeURIComponent(url) + '&n=' + name;
                                window.open(processUrl);
                                this.managerInstance.endTransition(null);
                                return this.library.Core.getPromesseSelfResoved();
                            }
                        }
                        case Lisa.Messages.LisaMessageSubject.GetTools: {
                            var lContent = pMessage.message;
                            return this.managerInstance._getTools().catch(function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                                LisaManagerMessage.logger.error('GetTools failed - %1', error.codeLibelle);
                                throw new Services.Erreur(Services.Libelle.LibelleModel.COM.ERREUR_LISA_GETTOOLS_IMPOSSIBLE);
                            });
                        }
                        case Lisa.Messages.LisaMessageSubject.GetCodesProcessus: {
                            var lContent = pMessage.message;
                            return this.managerInstance._getCodesProcessus().catch(function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                                LisaManagerMessage.logger.error('GetCodesProcessus failed - %1', error.codeLibelle);
                                throw new Services.Erreur("GetCodesProcessus failed");
                            });
                        }
                        case Lisa.Messages.LisaMessageSubject.GetInfoProcessus: {
                            var lContent = pMessage.message;
                            return this.managerInstance._getInfoProcessus(lContent.codeProcessus).catch(function (error) {
                                Services.Loggers.FLASH.INSTANCE.setValue('action', 'HandleMessage');
                                Services.Loggers.FLASH.INSTANCE.setValue('details', error);
                                LisaManagerMessage.logger.error('GetInfoProcessus failed - %1', error.codeLibelle);
                                throw new Services.Erreur("GetInfoProcessus failed");
                            });
                        }
                        default:
                            return _super.prototype.reception.call(this, pMessage);
                    }
                };
                LisaManagerMessage.CLASS_NAME = 'MyWay.Services.Lisa.LisaManagerMessage';
                LisaManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(LisaManagerMessage.CLASS_NAME);
                return LisaManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Lisa.LisaManagerMessage = LisaManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(LisaManagerMessage);
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var LisaManagerExtended = /** @class */ (function (_super) {
                __extends(LisaManagerExtended, _super);
                function LisaManagerExtended() {
                    return _super.call(this, Services.Components.ComponentType.Lisa) || this;
                }
                LisaManagerExtended.prototype.StartProcess = function (processCode, standAlone, initData, valeurDepart) {
                    return this.manager._portail_StartProcess(processCode, standAlone, initData, valeurDepart);
                };
                LisaManagerExtended.prototype.StartUrl = function (name, url, standAlone) {
                    return this.manager._portail_StartUrl(name, url, standAlone);
                };
                LisaManagerExtended.prototype.Next = function (valeurSortie) {
                    return this.manager._portail_Next(valeurSortie);
                    ;
                };
                return LisaManagerExtended;
            }(Services.Components.ComponentManagerExtendedBase));
            Lisa.LisaManagerExtended = LisaManagerExtended;
            Services.Components.RegistryManagerExtended.getInstance().register(LisaManagerExtended);
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des applications
* @module MyWay.Services.Application
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            /**
            * Classe permettant la gestion des applications
            */
            var ApplicationApiBase = /** @class */ (function () {
                function ApplicationApiBase() {
                    this.libraryManager = null;
                    this.privatePortalServiceParameters = null;
                    this._localServiceUrl = Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl;
                }
                ApplicationApiBase.prototype.init = function (pLibraryManager, pApiInitializer) {
                    this.libraryManager = pLibraryManager;
                    this.privatePortalServiceParameters = pApiInitializer.privatePortalServiceParameters;
                };
                /**
                 * [GetApplication description]
                 * @param  {string}            codeApplication         Code de l'application à démarrer référencé dans les applications du portail
                 * @return {IPromesse<ApplicationDTO>}                 DTO reçu par le SR
                 */
                ApplicationApiBase.prototype.GetApplication = function (codeApplication, authentificationInfo) {
                    if (codeApplication) {
                        return this.libraryManager.Core.sendRequest({
                            url: Services.PrivatePortalServiceParameters.Instance().ApplicationUrl + '/?codeApplication=' + codeApplication + '&versionDebutPublication=' + Services.CoreCommon.VersionMySys,
                            method: Services.MethodEnum.GET,
                            authentificationInfo: authentificationInfo
                        }).then(function (result) {
                            Services.Loggers.FLASH.INSTANCE.setValue('details', result);
                            ApplicationApiBase.loggerApplicationApiBase.debug('GetApplication Success');
                            return result;
                        }, function (error) {
                            ApplicationApiBase.loggerApplicationApiBase.error('GetApplication failed - %1', JSON.stringify(error));
                            throw error;
                        });
                    }
                    else {
                        return this.libraryManager.Core.createPromiseSelfError(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_APPLICATION_CODE_NON_RENSEIGNE));
                    }
                };
                ApplicationApiBase.prototype.Demarrer = function (application) {
                    return this.libraryManager.Core.createPromiseSelfResolved(false);
                };
                ApplicationApiBase.prototype.Lancer = function (executableWrapper, parametres, sync) {
                    if (!this.privatePortalServiceParameters.LocalServiceDisabled) {
                        var executableWrapperJson = JSON.stringify(executableWrapper);
                        var contexteJson = JSON.stringify('null');
                        return this.libraryManager.Core.sendRequest({
                            url: this._localServiceUrl + '/lanceur/lancer?exec=' + executableWrapperJson + '&parametres=' + JSON.stringify(parametres) + "&contexte=" + contexteJson + "&sync=" + sync,
                            contentType: Services.ContentTypeEnum.JSON,
                            method: Services.MethodEnum.POST,
                            cache: false
                        }).then(function () {
                            Services.Loggers.FLASH.INSTANCE.setValue('details', parametres);
                            ApplicationApiBase.loggerApplicationApiBase.debug('Lancer du Service Local - Success');
                            return true;
                        }, function () {
                            ApplicationApiBase.loggerApplicationApiBase.error('Lancer du Service Local - Failed');
                            return false;
                        });
                    }
                    else {
                        this.warnLocalServiceUnavailability();
                        return this.libraryManager.Core.createPromiseSelfError(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_APPLICATION_DEMARRAGE_IMPO));
                    }
                };
                ApplicationApiBase.prototype.OuvrirUrl = function (result, isTotemCapable) {
                    var _this = this;
                    // si c'est une appli compatible MyWay, et si on dispose du totem
                    if (result.codeExecutableConteneurMyway === 1 && isTotemCapable) {
                        return this.libraryManager.Lisa.startUrl(result.libelleNomApplication, result.libelleCheminExecution).then(function (res) {
                            _this.libraryManager.Lisa.endTransition(res);
                            ApplicationApiBase.loggerApplicationApiBase.debug('Start URL Success');
                            return true;
                        }, function (erreur) {
                            ApplicationApiBase.loggerApplicationApiBase.error('Start URL failed - %1', JSON.stringify(erreur));
                            throw erreur;
                        });
                    }
                    else {
                        // sinon, ouverture dans une nouvelle instance du navigateur
                        this.libraryManager.Display.OuvrirUrl(result.libelleCheminExecution);
                        ApplicationApiBase.loggerApplicationApiBase.debug('OuvrirUrl Success');
                        return this.libraryManager.Core.createPromiseSelfResolved(true);
                    }
                };
                ApplicationApiBase.prototype.LancerApplicationClientLourd = function (result, parametres) {
                    var execapp = new MyWay.Services.Interop.ExecApp(result.libelleCheminExecution);
                    var executableWrapper = new MyWay.Services.Interop.ExecutableWrapper(execapp, null, null, null);
                    var contexte = new MyWay.Services.Interop.ContexteMyway(null, null);
                    return this.Lancer(executableWrapper, parametres, false)
                        .then(function (result) {
                        ApplicationApiBase.loggerApplicationApiBase.debug('API Lancer - Success');
                        return result;
                    }, function (erreur) {
                        var erreur = new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_APPLICATION_DEMARRAGE_IMPO);
                        ApplicationApiBase.loggerApplicationApiBase.error('API Lancer - failed - %1', JSON.stringify(erreur));
                        throw erreur;
                    });
                };
                ApplicationApiBase.prototype.DemarrerProcessus = function (codeProcessus, delegationPortail, initData, valeurDepart) {
                    var _this = this;
                    var valeurDepartInt;
                    if (delegationPortail) {
                        var initDataAsString = JSON.stringify(initData);
                        var demarrageDetail = {};
                        demarrageDetail.codeProcessus = codeProcessus;
                        if (valeurDepart)
                            demarrageDetail.valeurDepart = valeurDepart.toString();
                        demarrageDetail.initData = initDataAsString;
                        var eventDetail = {};
                        eventDetail.demandeDeDemarrageDeProcessusDetail = demarrageDetail;
                        var mgrEvent = new Services.Component.ManagerEvent(Services.Component.ManagerEventType.DemandeDeDemarrageDeProcessus, eventDetail);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', '_handlePortalMessage');
                        ApplicationApiBase.loggerApplicationApiBase.debug('Send event \'DemarreProcess\' : process=%1, valeurDepart=%2, initData=%3', codeProcessus, valeurDepart, initDataAsString);
                        this.libraryManager.Evennements.SendEvent(mgrEvent);
                        return this.libraryManager.Core.createPromiseSelfResolved(true);
                    }
                    else {
                        /*
                                        if (result.codeClientIdentifie && result.codeClientIdentifie === 1) {
                                            var lNouveauContexte: ContexteClient.ContexteClientClass = this.libraryManager.ContexteClient.nouveauContexte();
                                            var lIdNouveauContexte: string = lNouveauContexte.getId();
                                            initData.idContexteClient = lIdNouveauContexte;
                                        }
                        */
                        valeurDepartInt = (valeurDepart == null ? null : parseInt(valeurDepart));
                        return this.libraryManager.Lisa.startStandaloneProcessWithInitialisation(codeProcessus, valeurDepartInt, initData).then(function (result) {
                            if (initData.processusAOuvrirDansUneNouvelleInstance) {
                                _this.libraryManager.Context.PutProcessInWait(result.processId);
                            }
                            _this.libraryManager.Lisa.endTransition(result);
                            ApplicationApiBase.loggerApplicationApiBase.debug('StartStandaloneProcessWithInitialisation Success');
                            return true;
                        }, function () {
                            var erreur = new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_APPLICATION_DEMARRAGE_IMPO);
                            ApplicationApiBase.loggerApplicationApiBase.error('StartStandaloneProcessWithInitialisation failed - %1', JSON.stringify(erreur));
                            throw erreur;
                        });
                    }
                };
                ApplicationApiBase.prototype.warnLocalServiceUnavailability = function () {
                    ApplicationApiBase.loggerApplicationApiBase.warn("Le service local n'a pu être joint et a été désactivé. Veuillez redémarrer le service local et recharger le portail");
                };
                ApplicationApiBase.CLASS_NAME_BASE = 'MyWay.Services.Application.ApplicationApiBase';
                ApplicationApiBase.loggerApplicationApiBase = Services.Loggers.LoggerFactory.INSTANCE.getClass(ApplicationApiBase.CLASS_NAME_BASE);
                return ApplicationApiBase;
            }());
            Application.ApplicationApiBase = ApplicationApiBase;
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des applications
* @module MyWay.Services.Application
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            /**
            * Classe permettant la gestion des applications
            */
            var ApplicationApiFactory = /** @class */ (function (_super) {
                __extends(ApplicationApiFactory, _super);
                function ApplicationApiFactory() {
                    var _this = _super.call(this, Services.Components.ComponentType.Application) || this;
                    _this.api = null;
                    return _this;
                }
                ApplicationApiFactory.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    var _this = this;
                    if (pCapabilities.ServiceLocal) {
                        if (pCapabilities.InteropAppliBancaire) {
                            this.api = new Application.ApplicationApiPetra();
                        }
                        else {
                            this.api = new Application.ApplicationApiWindows();
                        }
                    }
                    else {
                        this.api = new Application.ApplicationApiFullWeb();
                    }
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer).then(function () {
                        _this.api.init(pLibraryManager, pApiInitializer);
                    });
                };
                ApplicationApiFactory.prototype.dispose = function () {
                    return this.libraryManager.Core.getPromesseSelfResoved();
                };
                ApplicationApiFactory.prototype.GetApplication = function (codeApplication, authenficationInfo) {
                    return this.api.GetApplication(codeApplication, authenficationInfo);
                };
                ApplicationApiFactory.prototype.Demarrer = function (application) {
                    return this.api.Demarrer(application);
                };
                ApplicationApiFactory.prototype.Lancer = function (executableWrapper, parametres, sync) {
                    return this.api.Lancer(executableWrapper, parametres, sync);
                };
                ApplicationApiFactory.prototype.OuvrirUrl = function (result, isTotemCapable) {
                    return this.api.OuvrirUrl(result, isTotemCapable);
                };
                ApplicationApiFactory.prototype.LancerApplicationClientLourd = function (result, parametres) {
                    return this.api.LancerApplicationClientLourd(result, parametres);
                };
                ApplicationApiFactory.prototype.DemarrerProcessus = function (codeProcessus, delegationPortail, initData, valeurDepart) {
                    return this.api.DemarrerProcessus(codeProcessus, delegationPortail, initData, valeurDepart);
                };
                return ApplicationApiFactory;
            }(Services.Components.ComponentApiBase));
            Application.ApplicationApiFactory = ApplicationApiFactory;
            Services.Components.RegistryApi.getInstance().register(ApplicationApiFactory);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des applications
* @module MyWay.Services.Application
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            /**
            * Classe permettant la gestion des applications
            */
            var ApplicationApiFullWeb = /** @class */ (function (_super) {
                __extends(ApplicationApiFullWeb, _super);
                function ApplicationApiFullWeb() {
                    return _super.call(this) || this;
                }
                ApplicationApiFullWeb.prototype.LancerApplicationClientLourd = function (result) {
                    this.warnLocalServiceUnavailability();
                    return this.libraryManager.Core.createPromiseSelfError(new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_APPLICATION_DEMARRAGE_IMPO));
                };
                ApplicationApiFullWeb.CLASS_NAME = 'MyWay.Services.Application.ApplicationApiFullWeb';
                ApplicationApiFullWeb.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ApplicationApiFullWeb.CLASS_NAME);
                return ApplicationApiFullWeb;
            }(Application.ApplicationApiBase));
            Application.ApplicationApiFullWeb = ApplicationApiFullWeb;
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des applications
* @module MyWay.Services.Application
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            /**
            * Classe permettant la gestion des applications
            */
            var ApplicationApiPetra = /** @class */ (function (_super) {
                __extends(ApplicationApiPetra, _super);
                function ApplicationApiPetra() {
                    return _super.call(this) || this;
                }
                ApplicationApiPetra.prototype.DemarrerProcessus = function (codeProcessus, delegationPortail, initData, valeurDepart) {
                    var initDataAsString = JSON.stringify(initData);
                    return this.libraryManager.Core.sendRequest({
                        url: this.privatePortalServiceParameters.LocalServiceUrl + '/lanceur/DemarrerProcessus?codeProcessus=' + codeProcessus + '&initData=' + initDataAsString + "&valeurEntree=" + (valeurDepart == null ? "" : valeurDepart),
                        contentType: Services.ContentTypeEnum.JSON,
                        method: Services.MethodEnum.GET,
                        cache: false
                    }).then(function () {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', codeProcessus);
                        ApplicationApiPetra.logger.debug('DemarrerProcessus du Service Local - Success');
                        return true;
                    }, function () {
                        ApplicationApiPetra.logger.error('DemarrerProcessus du Service Local - Failed');
                        return false;
                    });
                };
                ApplicationApiPetra.prototype.OuvrirUrl = function (result) {
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    var execweb = new MyWay.Services.Interop.ExecWeb(result.libelleCheminExecution, result.libelleNomApplication);
                    var executableWrapper = new MyWay.Services.Interop.ExecutableWrapper(null, null, null, execweb);
                    var contexte = new MyWay.Services.Interop.ContexteMyway(null, null);
                    return this.Lancer(executableWrapper, [], false)
                        .then(function (result) {
                        ApplicationApiPetra.logger.debug('API Ouvrir URL - Success');
                        return result;
                    }, function (erreur) {
                        var erreur = new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_APPLICATION_DEMARRAGE_IMPO);
                        ApplicationApiPetra.logger.error('API Ouvrir URL - failed - %1', JSON.stringify(erreur));
                        throw erreur;
                    });
                };
                ApplicationApiPetra.CLASS_NAME = 'MyWay.Services.Application.ApplicationApiPetra';
                ApplicationApiPetra.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ApplicationApiPetra.CLASS_NAME);
                return ApplicationApiPetra;
            }(Application.ApplicationApiBase));
            Application.ApplicationApiPetra = ApplicationApiPetra;
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des applications
* @module MyWay.Services.Application
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            /**
            * Classe permettant la gestion des applications
            */
            var ApplicationApiWindows = /** @class */ (function (_super) {
                __extends(ApplicationApiWindows, _super);
                function ApplicationApiWindows() {
                    return _super.call(this) || this;
                }
                ApplicationApiWindows.prototype.DemarrerProcessus = function (codeProcessus, delegationPortail, initData, valeurDepart) {
                    var _this = this;
                    var initData = {};
                    var valeurDepartInt;
                    if (delegationPortail) {
                        var initDataAsString = JSON.stringify(initData);
                        var demarrageDetail = {};
                        demarrageDetail.codeProcessus = codeProcessus;
                        if (valeurDepart)
                            demarrageDetail.valeurDepart = valeurDepart.toString();
                        demarrageDetail.initData = initDataAsString;
                        var eventDetail = {};
                        eventDetail.demandeDeDemarrageDeProcessusDetail = demarrageDetail;
                        var mgrEvent = new Services.Component.ManagerEvent(Services.Component.ManagerEventType.DemandeDeDemarrageDeProcessus, eventDetail);
                        Services.Loggers.FLASH.INSTANCE.setValue('action', '_handlePortalMessage');
                        ApplicationApiWindows.logger.debug('Send event \'DemarreProcess\' : process=%1, valeurDepart=%2, initData=%3', codeProcessus, valeurDepart, initDataAsString);
                        this.libraryManager.Evennements.SendEvent(mgrEvent);
                        return this.libraryManager.Core.createPromiseSelfResolved(true);
                    }
                    else {
                        valeurDepartInt = (valeurDepart == null ? null : parseInt(valeurDepart));
                        return this.libraryManager.Lisa.startStandaloneProcessWithInitialisation(codeProcessus, valeurDepartInt, initData).then(function (result) {
                            if (initData.processusAOuvrirDansUneNouvelleInstance) {
                                _this.LancerProcessusAvecServiceLocal(codeProcessus, delegationPortail, initData, valeurDepart);
                                /* this.LancerProcessusAvecServiceLocal (codeProcessus, delegationPortail, initData, valeurDepart).then((bool)=>{
                                    console.log("Enter the : " , bool);
                                }); */
                            }
                            _this.libraryManager.Lisa.endTransition(result);
                            ApplicationApiWindows.logger.debug('StartStandaloneProcessWithInitialisation Success');
                            return true;
                        }, function () {
                            var erreur = new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_APPLICATION_DEMARRAGE_IMPO);
                            ApplicationApiWindows.logger.error('StartStandaloneProcessWithInitialisation failed - %1', JSON.stringify(erreur));
                            throw erreur;
                        });
                    }
                };
                ApplicationApiWindows.prototype.LancerProcessusAvecServiceLocal = function (codeProcessus, delegationPortail, initData, valeurDepart) {
                    var initDataAsString = JSON.stringify(initData);
                    return this.libraryManager.Core.sendRequest({
                        url: this.privatePortalServiceParameters.LocalServiceUrl + '/lanceur/DemarrerProcessus?codeProcessus=' + codeProcessus + '&initData=' + initDataAsString + "&valeurEntree=" + (valeurDepart == null ? "" : valeurDepart),
                        contentType: Services.ContentTypeEnum.JSON,
                        method: Services.MethodEnum.GET,
                        cache: false
                    }).then(function () {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', codeProcessus);
                        ApplicationApiWindows.logger.debug('DemarrerProcessus du Service Local - Success');
                        return true;
                    }, function () {
                        ApplicationApiWindows.logger.error('DemarrerProcessus du Service Local - Failed');
                        return false;
                    });
                };
                ApplicationApiWindows.CLASS_NAME = 'MyWay.Services.Application.ApplicationApiWindows';
                ApplicationApiWindows.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ApplicationApiWindows.CLASS_NAME);
                return ApplicationApiWindows;
            }(Application.ApplicationApiBase));
            Application.ApplicationApiWindows = ApplicationApiWindows;
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            Application.TYPE_URL_GET = 'G';
            Application.TYPE_URL_POST = 'P';
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des habilitations
* @module MyWay.Services.Application
* @author Mathieu Dartigues && Laurie Marchaterre
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            /**
            * Classe permettant la gestion des applications
            */
            var ApplicationManager = /** @class */ (function (_super) {
                __extends(ApplicationManager, _super);
                function ApplicationManager() {
                    var _this = _super.call(this, Services.Components.ComponentType.Application) || this;
                    _this.contextKey = 'APPLICATIONS';
                    _this.isTotemCapable = true;
                    _this.delegationPortail = false;
                    _this.api = null;
                    return _this;
                }
                ApplicationManager.prototype.init = function (pManagerLibrary, pMessageService, pManagerInitializer, pApi) {
                    this.api = pApi;
                    this.isTotemCapable = pManagerInitializer.isTotemCapable;
                    if (pManagerInitializer.delegationPortail) {
                        this.delegationPortail = pManagerInitializer.delegationPortail;
                    }
                    return _super.prototype.init.call(this, pManagerLibrary, pMessageService, pManagerInitializer, pApi);
                };
                ApplicationManager.prototype.remplacerVariablesContexte = function (chaineCaractere) {
                    return this.library.Lisa.replaceTokens(chaineCaractere, null).replace(new RegExp('[[]+[a-zA-Z0-9]+]|undefined', 'g'), '');
                };
                /**
                 * Permet d'encoder des paramètres pour les passer à une URL
                 * @param  {string[]} params Tableau de paramètres à encoder
                 * @return {string}          Chaine de caractères à ajouter à l'url
                 */
                ApplicationManager.prototype.creerUrlAvecParametres = function (params) {
                    var _this = this;
                    var paramsUrl;
                    paramsUrl = params.map(function (value) {
                        value.nomVariablePost = _this.remplacerVariablesContexte(value.nomVariablePost);
                        value.valeurVariablePost = _this.remplacerVariablesContexte(value.valeurVariablePost);
                        return Services.CoreCommon.encoderURL(value.nomVariablePost) + '=' + Services.CoreCommon.encoderURL(value.valeurVariablePost);
                    }).join('&');
                    return paramsUrl;
                };
                /**
                 * Permet de démarrer une application, en récupérant les données correspondantes
                 * et en adoptant la bonne stratégie par rapport au type d'application
                 *     - 1 : URL (GET)
                 *     - 2 : Fichier de type .pdf/.ica/.doc (avec une URL en http)
                 *     - 3 : Application lourde (le Service Local est nécessaire)
                 *     - 4 : Processus
                 *     - 5 : URL Culturenet
                 *
                 * @param {string} codeApplication Le code de référence de l'Application
                 * @param {string} initData Données de contexte passées pour lancer un processus
                 * @param {boolean} delegationPortail Indicateur pour savoir si on délègue le lancement du processus au portail (MyWay ou PCM)
                 *
                 * ~~~ts
                 * // Démarrage de l'application AC1
                 * serviceManager.Application.Demarrer('AC1').then((result: boolean) => {
                 * ...
                 * }).catch((erreur: MyWay.Services.Erreur) => {
                 * ...
                 * });
                 * ~~~
                 * @return {IPromesse<boolean>}
                 * Promesse indiquant si oui(true) ou non(false) l'application a correctement démarrée sinon retourne une **erreur**
                 *
                 * #### Listes des erreurs
                 * | codeLibelle                               | libelle                                                        |
                 * | ----------------------------------------- |:-------------------------------------------------------------- |
                 * | ERREUR_APPLICATION_TYPE_INCONNU           | Le type de l'application n'est pas pris en charge              |
                 * | ERREUR_APPLICATION_DEMARRAGE_IMPOSSIBLE   | L'application n'a pas pu être démarrée                         |
                 * | ERREUR_APPLICATION_CODE_NON_RENSEIGNE     | Le code de l'application n'est pas renseigné                   |
                 * | ERREUR_APPLICATION_MAINTENANCE            | L'application est indisponible temporairement pour maintenance |
                 */
                ApplicationManager.prototype.Demarrer = function (codeApplication, delegationPortail, initData) {
                    var _this = this;
                    if (delegationPortail === void 0) { delegationPortail = null; }
                    if (delegationPortail === null) {
                        delegationPortail = this.delegationPortail;
                    }
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    if (codeApplication) {
                        this.ObtenirInformationsApplication(codeApplication)
                            .then(function (result) {
                            if (result.codeApplicationMaintenance === 1) {
                                var erreurMaintenance = new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_APPLICATION_MAINTENANCE);
                                if (result.libelleMessageMaintenance) {
                                    erreurMaintenance.libelle = result.libelleMessageMaintenance;
                                }
                                Services.Loggers.FLASH.INSTANCE.setValue('details', erreurMaintenance);
                                ApplicationManager.logger.debug('Application en maintenance');
                                return deferred.reject(erreurMaintenance);
                            }
                            switch (result.codeTypeApplication) {
                                // TypeApplication = 1 : URL
                                // TypeApplication = 2 : URL FILE
                                // TypeApplication = 5 : Culturenet
                                case 1:
                                case 2:
                                case 5:
                                    //Remplace les variables de contexte dans l'url   
                                    result.libelleCheminExecution = _this.remplacerVariablesContexte(result.libelleCheminExecution);
                                    //si c'est une url avec des parametres
                                    if (result.libelleValeurParametre2 === Application.TYPE_URL_GET && result.listeApplicationUrlValeur.length > 0) {
                                        var paramsUrl = _this.creerUrlAvecParametres(result.listeApplicationUrlValeur);
                                        result.libelleCheminExecution += '?' + paramsUrl;
                                    }
                                    _this.api.OuvrirUrl(result, _this.isTotemCapable).then(function (result) {
                                        deferred.resolve(result);
                                    })
                                        .catch(function (erreur) {
                                        deferred.reject(erreur);
                                    });
                                    break;
                                // TypeApplication = 3 : application client lourd
                                case 3:
                                    var parametres = [];
                                    if (result.libelleValeurParametre1 !== null) {
                                        result.libelleValeurParametre1 = _this.remplacerVariablesContexte(result.libelleValeurParametre1);
                                        parametres.push(result.libelleValeurParametre1);
                                    }
                                    _this.api.LancerApplicationClientLourd(result, parametres).then(function (result) {
                                        deferred.resolve(result);
                                    })
                                        .catch(function (erreur) {
                                        deferred.reject(erreur);
                                    });
                                    break;
                                // TypeApplication = 4 : Processus
                                /*                            case 4:
                                
                                                                this.api.DemarrerProcessus(result, delegationPortail, initData).then((result: boolean) => {
                                                                    deferred.resolve(result);
                                                                }).catch((erreur) => {
                                                                    deferred.reject(erreur);
                                                                });
                                                                break;
                                  */
                                default:
                                    var erreur = new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_APPLICATION_TYPE_INCONNU);
                                    ApplicationManager.logger.error('ObtenirInformationsApplication failed  %1', JSON.stringify(erreur));
                                    deferred.reject(erreur);
                                    break;
                            }
                        })
                            .catch(function (erreur) {
                            deferred.reject(erreur);
                        });
                    }
                    else {
                        var erreur = new Services.Erreur(MyWay.Services.Libelle.LibelleModel.COM.ERREUR_APPLICATION_CODE_NON_RENSEIGNE);
                        ApplicationManager.logger.error('Demarrer %1', JSON.stringify(erreur));
                        deferred.reject(erreur);
                    }
                    return deferred.promise;
                };
                /**
                 * Permet de démarrer un processus
                 *
                 * @param {string} codeApplication Le code de référence de l'Application
                 * @param {string} initData Données de contexte passées pour lancer un processus
                 * @param {string} valeurDepart Valeur LISA d'entrée dans le processus
                 * @param {boolean} delegationPortail Indicateur pour savoir si on délègue le lancement du processus au portail (MyWay ou PCM)
                 *
                 * ~~~ts
                 * // Démarrage du processus SYNTH_CLI
                 * serviceManager.Application.DemarrerProcessus('SYNTH_CLI',true,{"idClient":"1111111111","context": {"identifiantPersonne": "11111111111"}}).then((result: boolean) => {
                 * ...
                 * }).catch((erreur: MyWay.Services.Erreur) => {
                 * ...
                 * });
                 * ~~~
                 * @return {IPromesse<boolean>}
                 * Promesse indiquant si oui(true) ou non(false) l'application a correctement démarrée sinon retourne une **erreur**
                 *
                 * #### Listes des erreurs
                 * | codeLibelle                               | libelle                                                        |
                 * | ----------------------------------------- |:-------------------------------------------------------------- |
                 * | ERREUR_APPLICATION_TYPE_INCONNU           | Le type de l'application n'est pas pris en charge              |
                 * | ERREUR_APPLICATION_DEMARRAGE_IMPOSSIBLE   | L'application n'a pas pu être démarrée                         |
                 * | ERREUR_APPLICATION_CODE_NON_RENSEIGNE     | Le code de l'application n'est pas renseigné                   |
                 * | ERREUR_APPLICATION_MAINTENANCE            | L'application est indisponible temporairement pour maintenance |
                 */
                ApplicationManager.prototype.DemarrerProcessus = function (codeProcessus, delegationPortail, initData, valeurDepart) {
                    if (delegationPortail === void 0) { delegationPortail = null; }
                    if (valeurDepart === void 0) { valeurDepart = null; }
                    if (delegationPortail === null) {
                        delegationPortail = this.delegationPortail;
                    }
                    var deferred = Services.CoreCommon.ServiceDePromesse.defer();
                    this.api.DemarrerProcessus(codeProcessus, delegationPortail, initData, valeurDepart).then(function (result) {
                        deferred.resolve(result);
                    }).catch(function (erreur) {
                        deferred.reject(erreur);
                    });
                    return deferred.promise;
                };
                /**
                 * Permet de récupérer les informations d'une application,
                 * à partir de son code, en appelant l'API correspondante
                 * @param {string} codeApplication : Le code de référence de l'application
                 * @return {IPromesse<any>} objet contenant les informations de l'application
                 */
                ApplicationManager.prototype.ObtenirInformationsApplication = function (codeApplication) {
                    return this.api.GetApplication(codeApplication, this.library.Context.GetAuthentificationInfo());
                };
                ApplicationManager.CLASS_NAME = 'MyWay.Services.Application.ApplicationManager';
                ApplicationManager.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ApplicationManager.CLASS_NAME);
                return ApplicationManager;
            }(Services.Components.ComponentManagerBase));
            Application.ApplicationManager = ApplicationManager;
            Services.Components.RegistryManager.getInstance().register(ApplicationManager);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion des habilitations
* @module MyWay.Services.Application
* @author Mathieu Dartigues && Laurie Marchaterre
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            var ApplicationManagerExtended = /** @class */ (function (_super) {
                __extends(ApplicationManagerExtended, _super);
                function ApplicationManagerExtended() {
                    return _super.call(this, Services.Components.ComponentType.Application) || this;
                }
                ApplicationManagerExtended.prototype.Demarrer = function (codeApplication) {
                    return this.manager.Demarrer(codeApplication, null);
                };
                ApplicationManagerExtended.prototype.DemarrerProcessus = function (codeProcessus, delegationPortail, initData, valeurDepart) {
                    if (delegationPortail === void 0) { delegationPortail = null; }
                    if (valeurDepart === void 0) { valeurDepart = null; }
                    return this.manager.DemarrerProcessus(codeProcessus, delegationPortail, initData, valeurDepart);
                };
                return ApplicationManagerExtended;
            }(Services.Components.ComponentManagerExtendedBase));
            Application.ApplicationManagerExtended = ApplicationManagerExtended;
            Services.Components.RegistryManagerExtended.getInstance().register(ApplicationManagerExtended);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Application;
        (function (Application) {
            var ApplicationManagerMessage = /** @class */ (function (_super) {
                __extends(ApplicationManagerMessage, _super);
                function ApplicationManagerMessage() {
                    return _super.call(this, Services.Components.ComponentType.Application) || this;
                }
                ApplicationManagerMessage.prototype.onDemarrer = function (pMessage) {
                    return this.managerInstance.Demarrer(pMessage.codeApplication);
                };
                ApplicationManagerMessage.prototype.onDemarrerProcessus = function (pMessage) {
                    return this.managerInstance.DemarrerProcessus(pMessage.codeProcessus, pMessage.delegationPortail, pMessage.initData, pMessage.valeurDepart);
                };
                ApplicationManagerMessage.prototype.reception = function (pMessage) {
                    switch (pMessage.subject) {
                        case Application.Messages.ApplicationMessageSubject.Demarrer: {
                            return this.onDemarrer(pMessage.message);
                        }
                        case Application.Messages.ApplicationMessageSubject.DemarrerProcessus: {
                            return this.onDemarrerProcessus(pMessage.message);
                        }
                        default:
                            _super.prototype.reception.call(this, pMessage);
                    }
                };
                ApplicationManagerMessage.CLASS_NAME = 'MyWay.Services.Application.ApplicationManagerMessage';
                ApplicationManagerMessage.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(ApplicationManagerMessage.CLASS_NAME);
                return ApplicationManagerMessage;
            }(Services.Components.ComponentManagerMessageBase));
            Application.ApplicationManagerMessage = ApplicationManagerMessage;
            Services.Components.RegistryManagerMessage.getInstance().register(ApplicationManagerMessage);
        })(Application = Services.Application || (Services.Application = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            'use strict';
            var ComponentType;
            (function (ComponentType) {
            })(ComponentType = Components.ComponentType || (Components.ComponentType = {}));
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        if (typeof angular != 'undefined') {
            Services.moduleAgent = angular.module("moduleAgent", ["ng"]);
        }
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            'use strict';
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            'use strict';
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            'use strict';
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Components;
        (function (Components) {
            'use strict';
        })(Components = Services.Components || (Services.Components = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la Communication
* @module MyWay.Services.Communication
* classe : CommunicationAPI - public - Classe permettant la gestion de la Communication
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Communication;
        (function (Communication) {
            var CommunicationApiFactory = /** @class */ (function (_super) {
                __extends(CommunicationApiFactory, _super);
                function CommunicationApiFactory() {
                    var _this = _super.call(this, Services.Components.ComponentType.Communication) || this;
                    _this.wrapped = null;
                    return _this;
                }
                CommunicationApiFactory.prototype.init = function (pCapabilities, pLibraryManager, pApiInitializer) {
                    var _this = this;
                    if (pCapabilities.ServiceLocal) {
                        this.wrapped = new Communication.CommunicationApiWindows();
                    }
                    else {
                        this.wrapped = new Communication.CommunicationApiFullWeb();
                    }
                    return _super.prototype.init.call(this, pCapabilities, pLibraryManager, pApiInitializer).then(function () {
                        return _this.wrapped.initApi(pLibraryManager);
                    });
                };
                CommunicationApiFactory.prototype.initApi = function (libraryManagerApi) {
                };
                CommunicationApiFactory.prototype.declencherAppel = function (call, authentificationInfo) {
                    return this.wrapped.declencherAppel(call, authentificationInfo);
                };
                CommunicationApiFactory.prototype.raccrocherAppel = function (authentificationInfo) {
                    return this.wrapped.raccrocherAppel(authentificationInfo);
                };
                CommunicationApiFactory.prototype.envoyerMessageAppliKiosque = function (messageAgent) {
                    return this.wrapped.envoyerMessageAppliKiosque(messageAgent);
                };
                return CommunicationApiFactory;
            }(Services.Components.ComponentApiBase));
            Communication.CommunicationApiFactory = CommunicationApiFactory;
            Services.Components.RegistryApi.getInstance().register(CommunicationApiFactory);
        })(Communication = Services.Communication || (Services.Communication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Communication;
        (function (Communication) {
            var CommunicationApiWindows = /** @class */ (function (_super) {
                __extends(CommunicationApiWindows, _super);
                function CommunicationApiWindows() {
                    var _this = _super.call(this) || this;
                    _this._localServiceUrl = Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl;
                    return _this;
                }
                CommunicationApiWindows.prototype.envoyerMessageAppliKiosque = function (messageAgent) {
                    var settings = {
                        url: this._localServiceUrl + '/com/SendMessage',
                        method: Services.MethodEnum.POST,
                        async: true,
                        contentType: Services.ContentTypeEnum.JSON,
                        data: messageAgent,
                        cache: false
                    };
                    CommunicationApiWindows.logger.debug("Envoi du message " + messageAgent + "à l'application externe");
                    return this.libraryManager.Core.sendRequest(settings).then(function () {
                        CommunicationApiWindows.logger.debug("Message envoyé à l'application externe - Success");
                        return "Message Envoyé à l'agent";
                    }, function () {
                        CommunicationApiWindows.logger.error("Message non envoyé à l'application externe - Failed");
                        return "Message non Envoyé à l'agent";
                    });
                };
                CommunicationApiWindows.CLASS_NAME = 'MyWay.Services.Communication.CommunicationApiWindows';
                CommunicationApiWindows.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(CommunicationApiWindows.CLASS_NAME);
                return CommunicationApiWindows;
            }(Communication.CommunicationApiBase));
            Communication.CommunicationApiWindows = CommunicationApiWindows;
        })(Communication = Services.Communication || (Services.Communication = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la Communication
* INTERFACE IConfigDetailsCommunication
* @module MyWay.Services.Communication
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
// Type definitions for jQuery 1.10.x / 2.0.x
// Project: http://jquery.com/
// Definitions by: Boris Yankov <https://github.com/borisyankov/>, Christian Hoffmeister <https://github.com/choffmeister>, Steve Fenton, Diullei Gomes <https://github.com/Diullei>, Tass Iliopoulos <https://github.com/tasoili>, Jason Swearingen, Sean Hill <https://github.com/seanski>, Guus Goossens <https://github.com/Guuz>, Kelly Summerlin <https://github.com/ksummerlin>, Basarat Ali Syed <https://github.com/basarat>, Nicholas Wolverson <https://github.com/nwolverson>, Derek Cicerone <https://github.com/derekcicerone>, Andrew Gaspar <https://github.com/AndrewGaspar>, James Harrison Fisher <https://github.com/jameshfisher>, Seikichi Kondo <https://github.com/seikichi>, Benjamin Jackman <https://github.com/benjaminjackman>, Poul Sorensen <https://github.com/s093294>, Josh Strobl <https://github.com/JoshStrobl>, John Reilly <https://github.com/johnnyreilly/>
// Definitions: https://github.com/borisyankov/DefinitelyTyped
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
// Type definitions for Angular JS 1.3+
// Project: http://angularjs.org
// Definitions by: Diego Vilar <http://github.com/diegovilar>
// Definitions: https://github.com/borisyankov/DefinitelyTyped
/// <reference path="../jquery/jquery.ts" />
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/*!
 * jQuery JavaScript Library v1.10.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:48Z
 */
(function (window, undefined) {
    // Can't do this because several apps including ASP.NET trace
    // the stack via arguments.caller.callee and Firefox dies if
    // you try to trace through "use strict" call chains. (#13335)
    // Support: Firefox 18+
    //"use strict";
    var 
    // The deferred used on DOM ready
    readyList, 
    // A central reference to the root jQuery(document)
    rootjQuery, 
    // Support: IE<10
    // For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
    core_strundefined = typeof undefined, 
    // Use the correct document accordingly with window argument (sandbox)
    location = window.location, document = window.document, docElem = document.documentElement, 
    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery, 
    // Map over the $ in case of overwrite
    _$ = window.$, 
    // [[Class]] -> type pairs
    class2type = {}, 
    // List of deleted data cache ids, so we can reuse them
    core_deletedIds = [], core_version = "1.10.2", 
    // Save a reference to some core methods
    core_concat = core_deletedIds.concat, core_push = core_deletedIds.push, core_slice = core_deletedIds.slice, core_indexOf = core_deletedIds.indexOf, core_toString = class2type.toString, core_hasOwn = class2type.hasOwnProperty, core_trim = core_version.trim, 
    // Define a local copy of jQuery
    jQuery = function (selector, context) {
        // The jQuery object is actually just the init constructor 'enhanced'
        return new jQuery.fn.init(selector, context, rootjQuery);
    }, 
    // Used for matching numbers
    core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, 
    // Used for splitting on whitespace
    core_rnotwhite = /\S+/g, 
    // Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, 
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, 
    // Match a standalone tag
    rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, 
    // JSON RegExp
    rvalidchars = /^[\],:{}\s]*$/, rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g, rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g, rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g, 
    // Matches dashed string for camelizing
    rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, 
    // Used by jQuery.camelCase as callback to replace()
    fcamelCase = function (all, letter) {
        return letter.toUpperCase();
    }, 
    // The ready event handler
    completed = function (event) {
        // readyState === "complete" is good enough for us to call the dom ready in oldIE
        if (document.addEventListener || event.type === "load" || document.readyState === "complete") {
            detach();
            jQuery.ready();
        }
    }, 
    // Clean-up method for dom ready events
    detach = function () {
        if (document.addEventListener) {
            document.removeEventListener("DOMContentLoaded", completed, false);
            window.removeEventListener("load", completed, false);
        }
        else {
            document.detachEvent("onreadystatechange", completed);
            window.detachEvent("onload", completed);
        }
    };
    jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: core_version,
        constructor: jQuery,
        init: function (selector, context, rootjQuery) {
            var match, elem;
            // HANDLE: $(""), $(null), $(undefined), $(false)
            if (!selector) {
                return this;
            }
            // Handle HTML strings
            if (typeof selector === "string") {
                if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [null, selector, null];
                }
                else {
                    match = rquickExpr.exec(selector);
                }
                // Match html or make sure no context is specified for #id
                if (match && (match[1] || !context)) {
                    // HANDLE: $(html) -> $(array)
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;
                        // scripts is true for back-compat
                        jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                        // HANDLE: $(html, props)
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {
                                // Properties of context are called as methods if possible
                                if (jQuery.isFunction(this[match])) {
                                    this[match](context[match]);
                                    // ...and otherwise set as attributes
                                }
                                else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }
                        return this;
                        // HANDLE: $(#id)
                    }
                    else {
                        elem = document.getElementById(match[2]);
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        if (elem && elem.parentNode) {
                            // Handle the case where IE and Opera return items
                            // by name instead of ID
                            if (elem.id !== match[2]) {
                                return rootjQuery.find(selector);
                            }
                            // Otherwise, we inject the element directly into the jQuery object
                            this.length = 1;
                            this[0] = elem;
                        }
                        this.context = document;
                        this.selector = selector;
                        return this;
                    }
                    // HANDLE: $(expr, $(...))
                }
                else if (!context || context.jquery) {
                    return (context || rootjQuery).find(selector);
                    // HANDLE: $(expr, context)
                    // (which is just equivalent to: $(context).find(expr)
                }
                else {
                    return this.constructor(context).find(selector);
                }
                // HANDLE: $(DOMElement)
            }
            else if (selector.nodeType) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;
                // HANDLE: $(function)
                // Shortcut for document ready
            }
            else if (jQuery.isFunction(selector)) {
                return rootjQuery.ready(selector);
            }
            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context;
            }
            return jQuery.makeArray(selector, this);
        },
        // Start with an empty selector
        selector: "",
        // The default length of a jQuery object is 0
        length: 0,
        toArray: function () {
            return core_slice.call(this);
        },
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function (num) {
            return num == null ?
                // Return a 'clean' array
                this.toArray() :
                // Return just the object
                (num < 0 ? this[this.length + num] : this[num]);
        },
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function (elems) {
            // Build a new jQuery matched element set
            var ret = jQuery.merge(this.constructor(), elems);
            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
            ret.context = this.context;
            // Return the newly-formed element set
            return ret;
        },
        // Execute a callback for every element in the matched set.
        // (You can seed the arguments with an array of args, but this is
        // only used internally.)
        each: function (callback, args) {
            return jQuery.each(this, callback, args);
        },
        ready: function (fn) {
            // Add the callback
            jQuery.ready.promise().done(fn);
            return this;
        },
        slice: function () {
            return this.pushStack(core_slice.apply(this, arguments));
        },
        first: function () {
            return this.eq(0);
        },
        last: function () {
            return this.eq(-1);
        },
        eq: function (i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        map: function (callback) {
            return this.pushStack(jQuery.map(this, function (elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        end: function () {
            return this.prevObject || this.constructor(null);
        },
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: core_push,
        sort: [].sort,
        splice: [].splice
    };
    // Give the init function the jQuery prototype for later instantiation
    jQuery.fn.init.prototype = jQuery.fn;
    jQuery.extend = jQuery.fn.extend = function () {
        var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        // Handle a deep copy situation
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[1] || {};
            // skip the boolean and the target
            i = 2;
        }
        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }
        // extend jQuery itself if only one argument is passed
        if (length === i) {
            target = this;
            --i;
        }
        for (; i < length; i++) {
            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) {
                // Extend the base object
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    // Prevent never-ending loop
                    if (target === copy) {
                        continue;
                    }
                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
                        }
                        else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        // Never move original objects, clone them
                        target[name] = jQuery.extend(deep, clone, copy);
                        // Don't bring in undefined values
                    }
                    else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        // Return the modified object
        return target;
    };
    jQuery.extend({
        // Unique for each copy of jQuery on the page
        // Non-digits removed to match rinlinejQuery
        expando: "jQuery" + (core_version + Math.random()).replace(/\D/g, ""),
        noConflict: function (deep) {
            if (window.$ === jQuery) {
                window.$ = _$;
            }
            if (deep && window.jQuery === jQuery) {
                window.jQuery = _jQuery;
            }
            return jQuery;
        },
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
        // Hold (or release) the ready event
        holdReady: function (hold) {
            if (hold) {
                jQuery.readyWait++;
            }
            else {
                jQuery.ready(true);
            }
        },
        // Handle when the DOM is ready
        ready: function (wait) {
            // Abort if there are pending holds or we're already ready
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
            if (!document.body) {
                return setTimeout(jQuery.ready);
            }
            // Remember that the DOM is ready
            jQuery.isReady = true;
            // If a normal DOM Ready event fired, decrement, and wait if need be
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            // If there are functions bound, to execute
            readyList.resolveWith(document, [jQuery]);
            // Trigger any bound ready events
            if (jQuery.fn.trigger) {
                jQuery(document).trigger("ready").off("ready");
            }
        },
        // See test/unit/core.js for details concerning isFunction.
        // Since version 1.3, DOM methods and functions like alert
        // aren't supported. They return false on IE (#2968).
        isFunction: function (obj) {
            return jQuery.type(obj) === "function";
        },
        isArray: Array.isArray || function (obj) {
            return jQuery.type(obj) === "array";
        },
        isWindow: function (obj) {
            /* jshint eqeqeq: false */
            return obj != null && obj == obj.window;
        },
        isNumeric: function (obj) {
            return !isNaN(parseFloat(obj)) && isFinite(obj);
        },
        type: function (obj) {
            if (obj == null) {
                return String(obj);
            }
            return typeof obj === "object" || typeof obj === "function" ?
                class2type[core_toString.call(obj)] || "object" :
                typeof obj;
        },
        isPlainObject: function (obj) {
            var key;
            // Must be an Object.
            // Because of IE, we also have to check the presence of the constructor property.
            // Make sure that DOM nodes and window objects don't pass through, as well
            if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }
            try {
                // Not own constructor property must be Object
                if (obj.constructor &&
                    !core_hasOwn.call(obj, "constructor") &&
                    !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                    return false;
                }
            }
            catch (e) {
                // IE8,9 Will throw exceptions on certain host objects #9897
                return false;
            }
            // Support: IE<9
            // Handle iteration over inherited properties before own properties.
            if (jQuery.support.ownLast) {
                for (key in obj) {
                    return core_hasOwn.call(obj, key);
                }
            }
            // Own properties are enumerated firstly, so to speed up,
            // if last one is own, then all properties are own.
            for (key in obj) { }
            return key === undefined || core_hasOwn.call(obj, key);
        },
        isEmptyObject: function (obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        error: function (msg) {
            throw new Error(msg);
        },
        // data: string of html
        // context (optional): If specified, the fragment will be created in this context, defaults to document
        // keepScripts (optional): If true, will include scripts passed in the html string
        parseHTML: function (data, context, keepScripts) {
            if (!data || typeof data !== "string") {
                return null;
            }
            if (typeof context === "boolean") {
                keepScripts = context;
                context = false;
            }
            context = context || document;
            var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
            // Single tag
            if (parsed) {
                return [context.createElement(parsed[1])];
            }
            parsed = jQuery.buildFragment([data], context, scripts);
            if (scripts) {
                jQuery(scripts).remove();
            }
            return jQuery.merge([], parsed.childNodes);
        },
        parseJSON: function (data) {
            // Attempt to parse using the native JSON parser first
            if (window.JSON && window.JSON.parse) {
                return window.JSON.parse(data);
            }
            if (data === null) {
                return data;
            }
            if (typeof data === "string") {
                // Make sure leading/trailing whitespace is removed (IE can't handle it)
                data = jQuery.trim(data);
                if (data) {
                    // Make sure the incoming data is actual JSON
                    // Logic borrowed from http://json.org/json2.js
                    if (rvalidchars.test(data.replace(rvalidescape, "@")
                        .replace(rvalidtokens, "]")
                        .replace(rvalidbraces, ""))) {
                        return (new Function("return " + data))();
                    }
                }
            }
            jQuery.error("Invalid JSON: " + data);
        },
        // Cross-browser xml parsing
        parseXML: function (data) {
            var xml, tmp;
            if (!data || typeof data !== "string") {
                return null;
            }
            try {
                if (window.DOMParser) {
                    tmp = new DOMParser();
                    xml = tmp.parseFromString(data, "text/xml");
                }
                else {
                    xml = new ActiveXObject("Microsoft.XMLDOM");
                    xml.async = "false";
                    xml.loadXML(data);
                }
            }
            catch (e) {
                xml = undefined;
            }
            if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
                jQuery.error("Invalid XML: " + data);
            }
            return xml;
        },
        noop: function () { },
        // Evaluates a script in a global context
        // Workarounds based on findings by Jim Driscoll
        // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
        globalEval: function (data) {
            if (data && jQuery.trim(data)) {
                // We use execScript on Internet Explorer
                // We use an anonymous function so that context is window
                // rather than jQuery in Firefox
                (window.execScript || function (data) {
                    window["eval"].call(window, data);
                })(data);
            }
        },
        // Convert dashed to camelCase; used by the css and data modules
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function (string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },
        nodeName: function (elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        // args is for internal usage only
        each: function (obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                }
                else {
                    for (i in obj) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                }
                // A special, fast, case for the most common use of each
            }
            else {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                }
                else {
                    for (i in obj) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                }
            }
            return obj;
        },
        // Use native String.trim function wherever possible
        trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
            function (text) {
                return text == null ?
                    "" :
                    core_trim.call(text);
            } :
            // Otherwise use our own trimming functionality
            function (text) {
                return text == null ?
                    "" :
                    (text + "").replace(rtrim, "");
            },
        // results is for internal usage only
        makeArray: function (arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === "string" ?
                        [arr] : arr);
                }
                else {
                    core_push.call(ret, arr);
                }
            }
            return ret;
        },
        inArray: function (elem, arr, i) {
            var len;
            if (arr) {
                if (core_indexOf) {
                    return core_indexOf.call(arr, elem, i);
                }
                len = arr.length;
                i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                for (; i < len; i++) {
                    // Skip accessing in sparse arrays
                    if (i in arr && arr[i] === elem) {
                        return i;
                    }
                }
            }
            return -1;
        },
        merge: function (first, second) {
            var l = second.length, i = first.length, j = 0;
            if (typeof l === "number") {
                for (; j < l; j++) {
                    first[i++] = second[j];
                }
            }
            else {
                while (second[j] !== undefined) {
                    first[i++] = second[j++];
                }
            }
            first.length = i;
            return first;
        },
        grep: function (elems, callback, inv) {
            var retVal, ret = [], i = 0, length = elems.length;
            inv = !!inv;
            // Go through the array, only saving the items
            // that pass the validator function
            for (; i < length; i++) {
                retVal = !!callback(elems[i], i);
                if (inv !== retVal) {
                    ret.push(elems[i]);
                }
            }
            return ret;
        },
        // arg is for internal usage only
        map: function (elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
            // Go through the array, translating each of the items to their
            if (isArray) {
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret[ret.length] = value;
                    }
                }
                // Go through every key on the object,
            }
            else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret[ret.length] = value;
                    }
                }
            }
            // Flatten any nested arrays
            return core_concat.apply([], ret);
        },
        // A global GUID counter for objects
        guid: 1,
        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function (fn, context) {
            var args, proxy, tmp;
            if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            // Quick check to determine if target is callable, in the spec
            // this throws a TypeError, but we will just return undefined.
            if (!jQuery.isFunction(fn)) {
                return undefined;
            }
            // Simulated bind
            args = core_slice.call(arguments, 2);
            proxy = function () {
                return fn.apply(context || this, args.concat(core_slice.call(arguments)));
            };
            // Set the guid of unique handler to the same of original handler, so it can be removed
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy;
        },
        // Multifunctional method to get and set values of a collection
        // The value/s can optionally be executed if it's a function
        access: function (elems, fn, key, value, chainable, emptyGet, raw) {
            var i = 0, length = elems.length, bulk = key == null;
            // Sets many values
            if (jQuery.type(key) === "object") {
                chainable = true;
                for (i in key) {
                    jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
                }
                // Sets one value
            }
            else if (value !== undefined) {
                chainable = true;
                if (!jQuery.isFunction(value)) {
                    raw = true;
                }
                if (bulk) {
                    // Bulk operations run against the entire set
                    if (raw) {
                        fn.call(elems, value);
                        fn = null;
                        // ...except when executing function values
                    }
                    else {
                        bulk = fn;
                        fn = function (elem, key, value) {
                            return bulk.call(jQuery(elem), value);
                        };
                    }
                }
                if (fn) {
                    for (; i < length; i++) {
                        fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                    }
                }
            }
            return chainable ?
                elems :
                // Gets
                bulk ?
                    fn.call(elems) :
                    length ? fn(elems[0], key) : emptyGet;
        },
        now: function () {
            return (new Date()).getTime();
        },
        // A method for quickly swapping in/out CSS properties to get correct calculations.
        // Note: this method belongs to the css module but it's needed here for the support module.
        // If support gets modularized, this method should be moved back to the css module.
        swap: function (elem, options, callback, args) {
            var ret, name, old = {};
            // Remember the old values, and insert the new ones
            for (name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name];
            }
            ret = callback.apply(elem, args || []);
            // Revert the old values
            for (name in options) {
                elem.style[name] = old[name];
            }
            return ret;
        }
    });
    jQuery.ready.promise = function (obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            // Catch cases where $(document).ready() is called after the browser event has already occurred.
            // we once tried to use readyState "interactive" here, but it caused issues like the one
            // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
            if (document.readyState === "complete") {
                // Handle it asynchronously to allow scripts the opportunity to delay ready
                setTimeout(jQuery.ready);
                // Standards-based browsers support DOMContentLoaded
            }
            else if (document.addEventListener) {
                // Use the handy event callback
                document.addEventListener("DOMContentLoaded", completed, false);
                // A fallback to window.onload, that will always work
                window.addEventListener("load", completed, false);
                // If IE event model is used
            }
            else {
                // Ensure firing before onload, maybe late but safe also for iframes
                document.attachEvent("onreadystatechange", completed);
                // A fallback to window.onload, that will always work
                window.attachEvent("onload", completed);
                // If IE and not a frame
                // continually check to see if the document is ready
                var top = false;
                try {
                    top = window.frameElement == null && document.documentElement;
                }
                catch (e) { }
                if (top && top.doScroll) {
                    (function doScrollCheck() {
                        if (!jQuery.isReady) {
                            try {
                                // Use the trick by Diego Perini
                                // http://javascript.nwbox.com/IEContentLoaded/
                                top.doScroll("left");
                            }
                            catch (e) {
                                return setTimeout(doScrollCheck, 50);
                            }
                            // detach all dom ready events
                            detach();
                            // and execute any waiting functions
                            jQuery.ready();
                        }
                    })();
                }
            }
        }
        return readyList.promise(obj);
    };
    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    function isArraylike(obj) {
        var length = obj.length, type = jQuery.type(obj);
        if (jQuery.isWindow(obj)) {
            return false;
        }
        if (obj.nodeType === 1 && length) {
            return true;
        }
        return type === "array" || type !== "function" &&
            (length === 0 ||
                typeof length === "number" && length > 0 && (length - 1) in obj);
    }
    // All jQuery objects should point back to these
    rootjQuery = jQuery(document);
    /*!
     * Sizzle CSS Selector Engine v1.10.2
     * http://sizzlejs.com/
     *
     * Copyright 2013 jQuery Foundation, Inc. and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     *
     * Date: 2013-07-03
     */
    (function (window, undefined) {
        var i, support, cachedruns, Expr, getText, isXML, compile, outermostContext, sortInput, 
        // Local document vars
        setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, 
        // Instance-specific data
        expando = "sizzle" + -(new Date()), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), hasDuplicate = false, sortOrder = function (a, b) {
            if (a === b) {
                hasDuplicate = true;
                return 0;
            }
            return 0;
        }, 
        // General-purpose constants
        strundefined = typeof undefined, MAX_NEGATIVE = 1 << 31, 
        // Instance methods
        hasOwn = ({}).hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, 
        // Use a stripped-down indexOf if we can't use a native one
        indexOf = arr.indexOf || function (elem) {
            var i = 0, len = this.length;
            for (; i < len; i++) {
                if (this[i] === elem) {
                    return i;
                }
            }
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", 
        // Regular expressions
        // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = "[\\x20\\t\\r\\n\\f]", 
        // http://www.w3.org/TR/css3-syntax/#characters
        characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", 
        // Loosely modeled on CSS identifier characters
        // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
        // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
        identifier = characterEncoding.replace("w", "w#"), 
        // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
        attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
            "*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]", 
        // Prefer arguments quoted,
        //   then not containing pseudos/brackets,
        //   then attribute selectors/non-parenthetical expressions,
        //   then anything else
        // These preferences are here to reduce the number of selectors
        //   needing tokenize in the PSEUDO preFilter
        pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace(3, 8) + ")*)|.*)\\)|)", 
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rsibling = new RegExp(whitespace + "*[+~]"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            "ID": new RegExp("^#(" + characterEncoding + ")"),
            "CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
            "TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
            "ATTR": new RegExp("^" + attributes),
            "PSEUDO": new RegExp("^" + pseudos),
            "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            "bool": new RegExp("^(?:" + booleans + ")$", "i"),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rnative = /^[^{]+\{\s*\[native \w/, 
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rescape = /'|\\/g, 
        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function (_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 0x10000;
            // NaN means non-codepoint
            // Support: Firefox
            // Workaround erroneous numeric interpretation of +"0x"
            return high !== high || escapedWhitespace ?
                escaped :
                // BMP codepoint
                high < 0 ?
                    String.fromCharCode(high + 0x10000) :
                    // Supplemental Plane codepoint (surrogate pair)
                    String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
        };
        // Optimize for push.apply( _, NodeList )
        try {
            push.apply((arr = slice.call(preferredDoc.childNodes)), preferredDoc.childNodes);
            // Support: Android<4.0
            // Detect silently failing push.apply
            arr[preferredDoc.childNodes.length].nodeType;
        }
        catch (e) {
            push = { apply: arr.length ?
                    // Leverage slice if possible
                    function (target, els) {
                        push_native.apply(target, slice.call(els));
                    } :
                    // Support: IE<9
                    // Otherwise append directly
                    function (target, els) {
                        var j = target.length, i = 0;
                        // Can't trust NodeList.length
                        while ((target[j++] = els[i++])) { }
                        target.length = j - 1;
                    }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, 
            // QSA vars
            i, groups, old, nid, newContext, newSelector;
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                setDocument(context);
            }
            context = context || document;
            results = results || [];
            if (!selector || typeof selector !== "string") {
                return results;
            }
            if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
                return [];
            }
            if (documentIsHTML && !seed) {
                // Shortcuts
                if ((match = rquickExpr.exec(selector))) {
                    // Speed-up: Sizzle("#ID")
                    if ((m = match[1])) {
                        if (nodeType === 9) {
                            elem = context.getElementById(m);
                            // Check parentNode to catch when Blackberry 4.6 returns
                            // nodes that are no longer in the document #6963
                            if (elem && elem.parentNode) {
                                // Handle the case where IE, Opera, and Webkit return items
                                // by name instead of ID
                                if (elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            }
                            else {
                                return results;
                            }
                        }
                        else {
                            // Context is not a document
                            if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) &&
                                contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        }
                        // Speed-up: Sizzle("TAG")
                    }
                    else if (match[2]) {
                        push.apply(results, context.getElementsByTagName(selector));
                        return results;
                        // Speed-up: Sizzle(".CLASS")
                    }
                    else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                    }
                }
                // QSA path
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = nodeType === 9 && selector;
                    // qSA works strangely on Element-rooted queries
                    // We can work around this by specifying an extra ID on the root
                    // and working up from there (Thanks to Andrew Dupont for the technique)
                    // IE 8 doesn't work on object elements
                    if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                        groups = tokenize(selector);
                        if ((old = context.getAttribute("id"))) {
                            nid = old.replace(rescape, "\\$&");
                        }
                        else {
                            context.setAttribute("id", nid);
                        }
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        while (i--) {
                            groups[i] = nid + toSelector(groups[i]);
                        }
                        newContext = rsibling.test(selector) && context.parentNode || context;
                        newSelector = groups.join(",");
                    }
                    if (newSelector) {
                        try {
                            push.apply(results, newContext.querySelectorAll(newSelector));
                            return results;
                        }
                        catch (qsaError) {
                        }
                        finally {
                            if (!old) {
                                context.removeAttribute("id");
                            }
                        }
                    }
                }
            }
            // All others
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        /**
         * Create key-value caches of limited size
         * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
         *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
         *	deleting the oldest entry
         */
        function createCache() {
            var keys = [];
            function cache(key, value) {
                // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                if (keys.push(key += " ") > Expr.cacheLength) {
                    // Only keep the most recent entries
                    delete cache[keys.shift()];
                }
                return (cache[key] = value);
            }
            return cache;
        }
        /**
         * Mark a function for special use by Sizzle
         * @param {Function} fn The function to mark
         */
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        /**
         * Support testing using an element
         * @param {Function} fn Passed the created div and expects a boolean result
         */
        function assert(fn) {
            var div = document.createElement("div");
            try {
                return !!fn(div);
            }
            catch (e) {
                return false;
            }
            finally {
                // Remove from its parent by default
                if (div.parentNode) {
                    div.parentNode.removeChild(div);
                }
                // release memory in IE
                div = null;
            }
        }
        /**
         * Adds the same handler for all of the specified attrs
         * @param {String} attrs Pipe-separated list of attributes
         * @param {Function} handler The method that will be applied
         */
        function addHandle(attrs, handler) {
            var arr = attrs.split("|"), i = attrs.length;
            while (i--) {
                Expr.attrHandle[arr[i]] = handler;
            }
        }
        /**
         * Checks document order of two siblings
         * @param {Element} a
         * @param {Element} b
         * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
         */
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
                (~b.sourceIndex || MAX_NEGATIVE) -
                    (~a.sourceIndex || MAX_NEGATIVE);
            // Use IE sourceIndex if available on both nodes
            if (diff) {
                return diff;
            }
            // Check if b follows a
            if (cur) {
                while ((cur = cur.nextSibling)) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        /**
         * Returns a function to use in pseudos for input types
         * @param {String} type
         */
        function createInputPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }
        /**
         * Returns a function to use in pseudos for buttons
         * @param {String} type
         */
        function createButtonPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }
        /**
         * Returns a function to use in pseudos for positionals
         * @param {Function} fn
         */
        function createPositionalPseudo(fn) {
            return markFunction(function (argument) {
                argument = +argument;
                return markFunction(function (seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    // Match elements found at the specified indexes
                    while (i--) {
                        if (seed[(j = matchIndexes[i])]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        /**
         * Detect xml
         * @param {Element|Object} elem An element or a document
         */
        isXML = Sizzle.isXML = function (elem) {
            // documentElement is verified for cases where it doesn't yet exist
            // (such as loading iframes in IE - #4833)
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };
        // Expose support vars for convenience
        support = Sizzle.support = {};
        /**
         * Sets document-related variables once based on the current document
         * @param {Element|Object} [doc] An element or document object to use to set the document
         * @returns {Object} Returns the current document
         */
        setDocument = Sizzle.setDocument = function (node) {
            var doc = node ? node.ownerDocument || node : preferredDoc, parent = doc.defaultView;
            // If no document and documentElement is available, return
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }
            // Set our document
            document = doc;
            docElem = doc.documentElement;
            // Support tests
            documentIsHTML = !isXML(doc);
            // Support: IE>8
            // If iframe document is assigned to "document" variable and if iframe has been reloaded,
            // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
            // IE6-8 do not support the defaultView property so parent will be undefined
            if (parent && parent.attachEvent && parent !== parent.top) {
                parent.attachEvent("onbeforeunload", function () {
                    setDocument();
                });
            }
            /* Attributes
            ---------------------------------------------------------------------- */
            // Support: IE<8
            // Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
            support.attributes = assert(function (div) {
                div.className = "i";
                return !div.getAttribute("className");
            });
            /* getElement(s)By*
            ---------------------------------------------------------------------- */
            // Check if getElementsByTagName("*") returns only elements
            support.getElementsByTagName = assert(function (div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });
            // Check if getElementsByClassName can be trusted
            support.getElementsByClassName = assert(function (div) {
                div.innerHTML = "<div class='a'></div><div class='a i'></div>";
                // Support: Safari<4
                // Catch class over-caching
                div.firstChild.className = "i";
                // Support: Opera<10
                // Catch gEBCN failure to find non-leading classes
                return div.getElementsByClassName("i").length === 2;
            });
            // Support: IE<10
            // Check if getElementById returns elements by name
            // The broken getElementById methods don't pick up programatically-set names,
            // so use a roundabout getElementsByName test
            support.getById = assert(function (div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length;
            });
            // ID find and filter
            if (support.getById) {
                Expr.find["ID"] = function (id, context) {
                    if (typeof context.getElementById !== strundefined && documentIsHTML) {
                        var m = context.getElementById(id);
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        return m && m.parentNode ? [m] : [];
                    }
                };
                Expr.filter["ID"] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            }
            else {
                // Support: IE6/7
                // getElementById is not reliable as a find shortcut
                delete Expr.find["ID"];
                Expr.filter["ID"] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
            }
            // Tag
            Expr.find["TAG"] = support.getElementsByTagName ?
                function (tag, context) {
                    if (typeof context.getElementsByTagName !== strundefined) {
                        return context.getElementsByTagName(tag);
                    }
                } :
                function (tag, context) {
                    var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                    // Filter out possible comments
                    if (tag === "*") {
                        while ((elem = results[i++])) {
                            if (elem.nodeType === 1) {
                                tmp.push(elem);
                            }
                        }
                        return tmp;
                    }
                    return results;
                };
            // Class
            Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
                if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) {
                    return context.getElementsByClassName(className);
                }
            };
            /* QSA/matchesSelector
            ---------------------------------------------------------------------- */
            // QSA and matchesSelector support
            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
            rbuggyMatches = [];
            // qSa(:focus) reports false when true (Chrome 21)
            // We allow this because of a bug in IE8/9 that throws an error
            // whenever `document.activeElement` is accessed on an iframe
            // So, we allow :focus to pass through QSA all the time to avoid the IE error
            // See http://bugs.jquery.com/ticket/13378
            rbuggyQSA = [];
            if ((support.qsa = rnative.test(doc.querySelectorAll))) {
                // Build QSA regex
                // Regex strategy adopted from Diego Perini
                assert(function (div) {
                    // Select is set to empty string on purpose
                    // This is to test IE's treatment of not explicitly
                    // setting a boolean content attribute,
                    // since its presence should be enough
                    // http://bugs.jquery.com/ticket/12359
                    div.innerHTML = "<select><option selected=''></option></select>";
                    // Support: IE8
                    // Boolean attributes and "value" are not treated correctly
                    if (!div.querySelectorAll("[selected]").length) {
                        rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    }
                    // Webkit/Opera - :checked should return selected option elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    // IE8 throws error here and will not see later tests
                    if (!div.querySelectorAll(":checked").length) {
                        rbuggyQSA.push(":checked");
                    }
                });
                assert(function (div) {
                    // Support: Opera 10-12/IE8
                    // ^= $= *= and empty values
                    // Should not select anything
                    // Support: Windows 8 Native Apps
                    // The type attribute is restricted during .innerHTML assignment
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("t", "");
                    if (div.querySelectorAll("[t^='']").length) {
                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    }
                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                    // IE8 throws error here and will not see later tests
                    if (!div.querySelectorAll(":enabled").length) {
                        rbuggyQSA.push(":enabled", ":disabled");
                    }
                    // Opera 10-11 does not throw on post-comma invalid pseudos
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            if ((support.matchesSelector = rnative.test((matches = docElem.webkitMatchesSelector ||
                docElem.mozMatchesSelector ||
                docElem.oMatchesSelector ||
                docElem.msMatchesSelector)))) {
                assert(function (div) {
                    // Check to see if it's possible to do matchesSelector
                    // on a disconnected node (IE 9)
                    support.disconnectedMatch = matches.call(div, "div");
                    // This should fail with an exception
                    // Gecko does not error, returns false instead
                    matches.call(div, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            /* Contains
            ---------------------------------------------------------------------- */
            // Element contains another
            // Purposefully does not implement inclusive descendent
            // As in, an element does not contain itself
            contains = rnative.test(docElem.contains) || docElem.compareDocumentPosition ?
                function (a, b) {
                    var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                    return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ?
                        adown.contains(bup) :
                        a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
                } :
                function (a, b) {
                    if (b) {
                        while ((b = b.parentNode)) {
                            if (b === a) {
                                return true;
                            }
                        }
                    }
                    return false;
                };
            /* Sorting
            ---------------------------------------------------------------------- */
            // Document order sorting
            sortOrder = docElem.compareDocumentPosition ?
                function (a, b) {
                    // Flag for duplicate removal
                    if (a === b) {
                        hasDuplicate = true;
                        return 0;
                    }
                    var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b);
                    if (compare) {
                        // Disconnected nodes
                        if (compare & 1 ||
                            (!support.sortDetached && b.compareDocumentPosition(a) === compare)) {
                            // Choose the first element that is related to our preferred document
                            if (a === doc || contains(preferredDoc, a)) {
                                return -1;
                            }
                            if (b === doc || contains(preferredDoc, b)) {
                                return 1;
                            }
                            // Maintain original order
                            return sortInput ?
                                (indexOf.call(sortInput, a) - indexOf.call(sortInput, b)) :
                                0;
                        }
                        return compare & 4 ? -1 : 1;
                    }
                    // Not directly comparable, sort on existence of method
                    return a.compareDocumentPosition ? -1 : 1;
                } :
                function (a, b) {
                    var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
                    // Exit early if the nodes are identical
                    if (a === b) {
                        hasDuplicate = true;
                        return 0;
                        // Parentless nodes are either documents or disconnected
                    }
                    else if (!aup || !bup) {
                        return a === doc ? -1 :
                            b === doc ? 1 :
                                aup ? -1 :
                                    bup ? 1 :
                                        sortInput ?
                                            (indexOf.call(sortInput, a) - indexOf.call(sortInput, b)) :
                                            0;
                        // If the nodes are siblings, we can do a quick check
                    }
                    else if (aup === bup) {
                        return siblingCheck(a, b);
                    }
                    // Otherwise we need full lists of their ancestors for comparison
                    cur = a;
                    while ((cur = cur.parentNode)) {
                        ap.unshift(cur);
                    }
                    cur = b;
                    while ((cur = cur.parentNode)) {
                        bp.unshift(cur);
                    }
                    // Walk down the tree looking for a discrepancy
                    while (ap[i] === bp[i]) {
                        i++;
                    }
                    return i ?
                        // Do a sibling check if the nodes have a common ancestor
                        siblingCheck(ap[i], bp[i]) :
                        // Otherwise nodes in our document sort first
                        ap[i] === preferredDoc ? -1 :
                            bp[i] === preferredDoc ? 1 :
                                0;
                };
            return doc;
        };
        Sizzle.matches = function (expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function (elem, expr) {
            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            // Make sure that attribute selectors are quoted
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML &&
                (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
                (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                    var ret = matches.call(elem, expr);
                    // IE 9's matchesSelector returns false on disconnected nodes
                    if (ret || support.disconnectedMatch ||
                        // As well, disconnected nodes are said to be in a document
                        // fragment in IE 9
                        elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                }
                catch (e) { }
            }
            return Sizzle(expr, document, null, [elem]).length > 0;
        };
        Sizzle.contains = function (context, elem) {
            // Set document vars if needed
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };
        Sizzle.attr = function (elem, name) {
            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], 
            // Don't get fooled by Object.prototype properties (jQuery #13807)
            val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ?
                fn(elem, name, !documentIsHTML) :
                undefined;
            return val === undefined ?
                support.attributes || !documentIsHTML ?
                    elem.getAttribute(name) :
                    (val = elem.getAttributeNode(name)) && val.specified ?
                        val.value :
                        null :
                val;
        };
        Sizzle.error = function (msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        /**
         * Document sorting and removing duplicates
         * @param {ArrayLike} results
         */
        Sizzle.uniqueSort = function (results) {
            var elem, duplicates = [], j = 0, i = 0;
            // Unless we *know* we can detect duplicates, assume their presence
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while ((elem = results[i++])) {
                    if (elem === results[i]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }
            return results;
        };
        /**
         * Utility function for retrieving the text value of an array of DOM nodes
         * @param {Array|Element} elem
         */
        getText = Sizzle.getText = function (elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
                // If no nodeType, this is expected to be an array
                for (; (node = elem[i]); i++) {
                    // Do not traverse comment nodes
                    ret += getText(node);
                }
            }
            else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                // Use textContent for elements
                // innerText usage removed for consistency of new lines (see #11153)
                if (typeof elem.textContent === "string") {
                    return elem.textContent;
                }
                else {
                    // Traverse its children
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            }
            else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            // Do not include comment or processing instruction nodes
            return ret;
        };
        Expr = Sizzle.selectors = {
            // Can be adjusted by the user
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": { dir: "parentNode", first: true },
                " ": { dir: "parentNode" },
                "+": { dir: "previousSibling", first: true },
                "~": { dir: "previousSibling" }
            },
            preFilter: {
                "ATTR": function (match) {
                    match[1] = match[1].replace(runescape, funescape);
                    // Move the given value to match[3] whether quoted or unquoted
                    match[3] = (match[4] || match[5] || "").replace(runescape, funescape);
                    if (match[2] === "~=") {
                        match[3] = " " + match[3] + " ";
                    }
                    return match.slice(0, 4);
                },
                "CHILD": function (match) {
                    /* matches from matchExpr["CHILD"]
                        1 type (only|nth|...)
                        2 what (child|of-type)
                        3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                        4 xn-component of xn+y argument ([+-]?\d*n|)
                        5 sign of xn-component
                        6 x of xn-component
                        7 sign of y-component
                        8 y of y-component
                    */
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === "nth") {
                        // nth-* requires argument
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }
                        // numeric x and y parameters for Expr.filter.CHILD
                        // remember that false/true cast respectively to 0/1
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +((match[7] + match[8]) || match[3] === "odd");
                        // other types prohibit arguments
                    }
                    else if (match[3]) {
                        Sizzle.error(match[0]);
                    }
                    return match;
                },
                "PSEUDO": function (match) {
                    var excess, unquoted = !match[5] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) {
                        return null;
                    }
                    // Accept quoted arguments as-is
                    if (match[3] && match[4] !== undefined) {
                        match[2] = match[4];
                        // Strip excess characters from unquoted arguments
                    }
                    else if (unquoted && rpseudo.test(unquoted) &&
                        // Get excess from tokenize (recursively)
                        (excess = tokenize(unquoted, true)) &&
                        // advance to the next closing parenthesis
                        (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        // excess is a negative index
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    // Return only captures needed by the pseudo filter method (type and argument)
                    return match.slice(0, 3);
                }
            },
            filter: {
                "TAG": function (nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ?
                        function () { return true; } :
                        function (elem) {
                            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                        };
                },
                "CLASS": function (className) {
                    var pattern = classCache[className + " "];
                    return pattern ||
                        (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&
                            classCache(className, function (elem) {
                                return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "");
                            });
                },
                "ATTR": function (name, operator, check) {
                    return function (elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === "!=";
                        }
                        if (!operator) {
                            return true;
                        }
                        result += "";
                        return operator === "=" ? result === check :
                            operator === "!=" ? result !== check :
                                operator === "^=" ? check && result.indexOf(check) === 0 :
                                    operator === "*=" ? check && result.indexOf(check) > -1 :
                                        operator === "$=" ? check && result.slice(-check.length) === check :
                                            operator === "~=" ? (" " + result + " ").indexOf(check) > -1 :
                                                operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" :
                                                    false;
                    };
                },
                "CHILD": function (type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                    return first === 1 && last === 0 ?
                        // Shortcut for :nth-*(n)
                        function (elem) {
                            return !!elem.parentNode;
                        } :
                        function (elem, context, xml) {
                            var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                            if (parent) {
                                // :(first|last|only)-(child|of-type)
                                if (simple) {
                                    while (dir) {
                                        node = elem;
                                        while ((node = node[dir])) {
                                            if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                                return false;
                                            }
                                        }
                                        // Reverse direction for :only-* (if we haven't yet done so)
                                        start = dir = type === "only" && !start && "nextSibling";
                                    }
                                    return true;
                                }
                                start = [forward ? parent.firstChild : parent.lastChild];
                                // non-xml :nth-child(...) stores cache data on `parent`
                                if (forward && useCache) {
                                    // Seek `elem` from a previously-cached index
                                    outerCache = parent[expando] || (parent[expando] = {});
                                    cache = outerCache[type] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = cache[0] === dirruns && cache[2];
                                    node = nodeIndex && parent.childNodes[nodeIndex];
                                    while ((node = ++nodeIndex && node && node[dir] ||
                                        // Fallback to seeking `elem` from the start
                                        (diff = nodeIndex = 0) || start.pop())) {
                                        // When found, cache indexes on `parent` and break
                                        if (node.nodeType === 1 && ++diff && node === elem) {
                                            outerCache[type] = [dirruns, nodeIndex, diff];
                                            break;
                                        }
                                    }
                                    // Use previously-cached element index if available
                                }
                                else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                    diff = cache[1];
                                    // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                }
                                else {
                                    // Use the same loop as above to seek `elem` from the start
                                    while ((node = ++nodeIndex && node && node[dir] ||
                                        (diff = nodeIndex = 0) || start.pop())) {
                                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                            // Cache the index of each encountered element
                                            if (useCache) {
                                                (node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
                                            }
                                            if (node === elem) {
                                                break;
                                            }
                                        }
                                    }
                                }
                                // Incorporate the offset, then check against cycle size
                                diff -= last;
                                return diff === first || (diff % first === 0 && diff / first >= 0);
                            }
                        };
                },
                "PSEUDO": function (pseudo, argument) {
                    // pseudo-class names are case-insensitive
                    // http://www.w3.org/TR/selectors/#pseudo-classes
                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                    // Remember that setFilters inherits from pseudos
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
                        Sizzle.error("unsupported pseudo: " + pseudo);
                    // The user may use createPseudo to indicate that
                    // arguments are needed to create the filter function
                    // just as Sizzle does
                    if (fn[expando]) {
                        return fn(argument);
                    }
                    // But maintain support for old signatures
                    if (fn.length > 1) {
                        args = [pseudo, pseudo, "", argument];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ?
                            markFunction(function (seed, matches) {
                                var idx, matched = fn(seed, argument), i = matched.length;
                                while (i--) {
                                    idx = indexOf.call(seed, matched[i]);
                                    seed[idx] = !(matches[idx] = matched[i]);
                                }
                            }) :
                            function (elem) {
                                return fn(elem, 0, args);
                            };
                    }
                    return fn;
                }
            },
            pseudos: {
                // Potentially complex pseudos
                "not": markFunction(function (selector) {
                    // Trim the selector passed to compile
                    // to avoid treating leading and trailing
                    // spaces as combinators
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ?
                        markFunction(function (seed, matches, context, xml) {
                            var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                            // Match elements unmatched by `matcher`
                            while (i--) {
                                if ((elem = unmatched[i])) {
                                    seed[i] = !(matches[i] = elem);
                                }
                            }
                        }) :
                        function (elem, context, xml) {
                            input[0] = elem;
                            matcher(input, null, xml, results);
                            return !results.pop();
                        };
                }),
                "has": markFunction(function (selector) {
                    return function (elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                "contains": markFunction(function (text) {
                    return function (elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                // "Whether an element is represented by a :lang() selector
                // is based solely on the element's language value
                // being equal to the identifier C,
                // or beginning with the identifier C immediately followed by "-".
                // The matching of C against the element's language value is performed case-insensitively.
                // The identifier C does not have to be a valid language name."
                // http://www.w3.org/TR/selectors/#lang-pseudo
                "lang": markFunction(function (lang) {
                    // lang value must be a valid identifier
                    if (!ridentifier.test(lang || "")) {
                        Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                        var elemLang;
                        do {
                            if ((elemLang = documentIsHTML ?
                                elem.lang :
                                elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                // Miscellaneous
                "target": function (elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                "root": function (elem) {
                    return elem === docElem;
                },
                "focus": function (elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                // Boolean properties
                "enabled": function (elem) {
                    return elem.disabled === false;
                },
                "disabled": function (elem) {
                    return elem.disabled === true;
                },
                "checked": function (elem) {
                    // In CSS3, :checked should return both checked and selected elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    var nodeName = elem.nodeName.toLowerCase();
                    return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
                },
                "selected": function (elem) {
                    // Accessing this property makes selected-by-default
                    // options in Safari work properly
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },
                // Contents
                "empty": function (elem) {
                    // http://www.w3.org/TR/selectors/#empty-pseudo
                    // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
                    //   not comment, processing instructions, or others
                    // Thanks to Diego Perini for the nodeName shortcut
                    //   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4) {
                            return false;
                        }
                    }
                    return true;
                },
                "parent": function (elem) {
                    return !Expr.pseudos["empty"](elem);
                },
                // Element/input types
                "header": function (elem) {
                    return rheader.test(elem.nodeName);
                },
                "input": function (elem) {
                    return rinputs.test(elem.nodeName);
                },
                "button": function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },
                "text": function (elem) {
                    var attr;
                    // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
                    // use getAttribute instead to test this case
                    return elem.nodeName.toLowerCase() === "input" &&
                        elem.type === "text" &&
                        ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type);
                },
                // Position-in-collection
                "first": createPositionalPseudo(function () {
                    return [0];
                }),
                "last": createPositionalPseudo(function (matchIndexes, length) {
                    return [length - 1];
                }),
                "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
                    return [argument < 0 ? argument + length : argument];
                }),
                "even": createPositionalPseudo(function (matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                "odd": createPositionalPseudo(function (matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; --i >= 0;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        // Add button/input type pseudos
        for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in { submit: true, reset: true }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        // Easy API for creating new setFilters
        function setFilters() { }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        function tokenize(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                // Comma and first run
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        // Don't consume trailing commas as valid
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                matched = false;
                // Combinators
                if ((match = rcombinators.exec(soFar))) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        // Cast descendant combinators to space
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                // Filters
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||
                        (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }
                if (!matched) {
                    break;
                }
            }
            // Return the length of the invalid excess
            // if we're just parsing
            // Otherwise, throw an error or return tokens
            return parseOnly ?
                soFar.length :
                soFar ?
                    Sizzle.error(selector) :
                    // Cache the tokens
                    tokenCache(selector, groups).slice(0);
        }
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = "";
            for (; i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && dir === "parentNode", doneName = done++;
            return combinator.first ?
                // Check against closest ancestor/preceding element
                function (elem, context, xml) {
                    while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            return matcher(elem, context, xml);
                        }
                    }
                } :
                // Check against all ancestor/preceding elements
                function (elem, context, xml) {
                    var data, cache, outerCache, dirkey = dirruns + " " + doneName;
                    // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
                    if (xml) {
                        while ((elem = elem[dir])) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                if (matcher(elem, context, xml)) {
                                    return true;
                                }
                            }
                        }
                    }
                    else {
                        while ((elem = elem[dir])) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                outerCache = elem[expando] || (elem[expando] = {});
                                if ((cache = outerCache[dir]) && cache[0] === dirkey) {
                                    if ((data = cache[1]) === true || data === cachedruns) {
                                        return data === true;
                                    }
                                }
                                else {
                                    cache = outerCache[dir] = [dirkey];
                                    cache[1] = matcher(elem, context, xml) || cachedruns;
                                    if (cache[1] === true) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ?
                function (elem, context, xml) {
                    var i = matchers.length;
                    while (i--) {
                        if (!matchers[i](elem, context, xml)) {
                            return false;
                        }
                    }
                    return true;
                } :
                matchers[0];
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (; i < len; i++) {
                if ((elem = unmatched[i])) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function (seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, 
                // Get initial elements from seed or context
                elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []), 
                // Prefilter to get matcher input, preserving a map for seed-results synchronization
                matcherIn = preFilter && (seed || !selector) ?
                    condense(elems, preMap, preFilter, context, xml) :
                    elems, matcherOut = matcher ?
                    // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                    postFinder || (seed ? preFilter : preexisting || postFilter) ?
                        // ...intermediate processing is necessary
                        [] :
                        // ...otherwise use results directly
                        results :
                    matcherIn;
                // Find primary matches
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }
                // Apply postFilter
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    // Un-match failing elements by moving them back to matcherIn
                    i = temp.length;
                    while (i--) {
                        if ((elem = temp[i])) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            // Get the final matcherOut by condensing this intermediate into postFinder contexts
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if ((elem = matcherOut[i])) {
                                    // Restore matcherIn since elem is not yet a final match
                                    temp.push((matcherIn[i] = elem));
                                }
                            }
                            postFinder(null, (matcherOut = []), temp, xml);
                        }
                        // Move matched elements from seed to results to keep them synchronized
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) &&
                                (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }
                    // Add elements to results, through postFinder if defined
                }
                else {
                    matcherOut = condense(matcherOut === results ?
                        matcherOut.splice(preexisting, matcherOut.length) :
                        matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    }
                    else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, 
            // The foundational matcher ensures that elements are reachable from top-level context(s)
            matchContext = addCombinator(function (elem) {
                return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
                return indexOf.call(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [function (elem, context, xml) {
                    return (!leadingRelative && (xml || context !== outermostContext)) || ((checkContext = context).nodeType ?
                        matchContext(elem, context, xml) :
                        matchAnyContext(elem, context, xml));
                }];
            for (; i < len; i++) {
                if ((matcher = Expr.relative[tokens[i].type])) {
                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                }
                else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    // Return special upon seeing a positional matcher
                    if (matcher[expando]) {
                        // Find the next relative operator (if any) for proper handling
                        j = ++i;
                        for (; j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
                        // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                        tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens((tokens = tokens.slice(j))), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            // A counter to specify which element is currently being matched
            var matcherCachedRuns = 0, bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, expandContext) {
                var elem, j, matcher, setMatched = [], matchedCount = 0, i = "0", unmatched = seed && [], outermost = expandContext != null, contextBackup = outermostContext, 
                // We must always have either seed elements or context
                elems = seed || byElement && Expr.find["TAG"]("*", expandContext && context.parentNode || context), 
                // Use integer dirruns iff this is the outermost matcher
                dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);
                if (outermost) {
                    outermostContext = context !== document && context;
                    cachedruns = matcherCachedRuns;
                }
                // Add elements passing elementMatchers directly to results
                // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
                for (; (elem = elems[i]) != null; i++) {
                    if (byElement && elem) {
                        j = 0;
                        while ((matcher = elementMatchers[j++])) {
                            if (matcher(elem, context, xml)) {
                                results.push(elem);
                                break;
                            }
                        }
                        if (outermost) {
                            dirruns = dirrunsUnique;
                            cachedruns = ++matcherCachedRuns;
                        }
                    }
                    // Track unmatched elements for set filters
                    if (bySet) {
                        // They will have gone through all possible matchers
                        if ((elem = !matcher && elem)) {
                            matchedCount--;
                        }
                        // Lengthen the array for every element, matched or not
                        if (seed) {
                            unmatched.push(elem);
                        }
                    }
                }
                // Apply set filters to unmatched elements
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while ((matcher = setMatchers[j++])) {
                        matcher(unmatched, setMatched, context, xml);
                    }
                    if (seed) {
                        // Reintegrate element matches to eliminate the need for sorting
                        if (matchedCount > 0) {
                            while (i--) {
                                if (!(unmatched[i] || setMatched[i])) {
                                    setMatched[i] = pop.call(results);
                                }
                            }
                        }
                        // Discard index placeholder values to get only actual matches
                        setMatched = condense(setMatched);
                    }
                    // Add matches to results
                    push.apply(results, setMatched);
                    // Seedless set matches succeeding multiple successful matchers stipulate sorting
                    if (outermost && !seed && setMatched.length > 0 &&
                        (matchedCount + setMatchers.length) > 1) {
                        Sizzle.uniqueSort(results);
                    }
                }
                // Override manipulation of globals by nested matchers
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ?
                markFunction(superMatcher) :
                superMatcher;
        }
        compile = Sizzle.compile = function (selector, group /* Internal Use Only */) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                // Generate a function of recursive functions that can be used to check each element
                if (!group) {
                    group = tokenize(selector);
                }
                i = group.length;
                while (i--) {
                    cached = matcherFromTokens(group[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    }
                    else {
                        elementMatchers.push(cached);
                    }
                }
                // Cache the compiled function
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            }
            return cached;
        };
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (; i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        function select(selector, context, results, seed) {
            var i, tokens, token, type, find, match = tokenize(selector);
            if (!seed) {
                // Try to minimize operations if there is only one group
                if (match.length === 1) {
                    // Take a shortcut and set the context if the root selector is an ID
                    tokens = match[0] = match[0].slice(0);
                    if (tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                        support.getById && context.nodeType === 9 && documentIsHTML &&
                        Expr.relative[tokens[1].type]) {
                        context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                        if (!context) {
                            return results;
                        }
                        selector = selector.slice(tokens.shift().value.length);
                    }
                    // Fetch a seed set for right-to-left matching
                    i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                    while (i--) {
                        token = tokens[i];
                        // Abort if we hit a combinator
                        if (Expr.relative[(type = token.type)]) {
                            break;
                        }
                        if ((find = Expr.find[type])) {
                            // Search, expanding context for leading sibling combinators
                            if ((seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && context.parentNode || context))) {
                                // If seed is empty or no tokens remain, we can return early
                                tokens.splice(i, 1);
                                selector = seed.length && toSelector(tokens);
                                if (!selector) {
                                    push.apply(results, seed);
                                    return results;
                                }
                                break;
                            }
                        }
                    }
                }
            }
            // Compile and execute a filtering function
            // Provide `match` to avoid retokenization if we modified the selector above
            compile(selector, match)(seed, context, !documentIsHTML, results, rsibling.test(selector));
            return results;
        }
        // One-time assignments
        // Sort stability
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        // Support: Chrome<14
        // Always assume duplicates if they aren't passed to the comparison function
        support.detectDuplicates = hasDuplicate;
        // Initialize against the default document
        setDocument();
        // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
        // Detached nodes confoundingly follow *each other*
        support.sortDetached = assert(function (div1) {
            // Should return 1, but returns 4 (following)
            return div1.compareDocumentPosition(document.createElement("div")) & 1;
        });
        // Support: IE<8
        // Prevent attribute/property "interpolation"
        // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
        if (!assert(function (div) {
            div.innerHTML = "<a href='#'></a>";
            return div.firstChild.getAttribute("href") === "#";
        })) {
            addHandle("type|href|height|width", function (elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                }
            });
        }
        // Support: IE<9
        // Use defaultValue in place of getAttribute("value")
        if (!support.attributes || !assert(function (div) {
            div.innerHTML = "<input/>";
            div.firstChild.setAttribute("value", "");
            return div.firstChild.getAttribute("value") === "";
        })) {
            addHandle("value", function (elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === "input") {
                    return elem.defaultValue;
                }
            });
        }
        // Support: IE<9
        // Use getAttributeNode to fetch booleans when getAttribute lies
        if (!assert(function (div) {
            return div.getAttribute("disabled") == null;
        })) {
            addHandle(booleans, function (elem, name, isXML) {
                var val;
                if (!isXML) {
                    return (val = elem.getAttributeNode(name)) && val.specified ?
                        val.value :
                        elem[name] === true ? name.toLowerCase() : null;
                }
            });
        }
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.pseudos;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;
    })(window);
    // String to Object options format cache
    var optionsCache = {};
    // Convert String-formatted options into Object-formatted ones and store in cache
    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(core_rnotwhite) || [], function (_, flag) {
            object[flag] = true;
        });
        return object;
    }
    /*
     * Create a callback list using the following parameters:
     *
     *	options: an optional list of space-separated options that will change how
     *			the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *
     *	memory:			will keep track of previous values and will call any callback added
     *					after the list has been fired right away with the latest "memorized"
     *					values (like a Deferred)
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     *
     */
    jQuery.Callbacks = function (options) {
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ?
            (optionsCache[options] || createOptions(options)) :
            jQuery.extend({}, options);
        var // Flag to know if list is currently firing
        firing, 
        // Last fire value (for non-forgettable lists)
        memory, 
        // Flag to know if list was already fired
        fired, 
        // End of the loop when firing
        firingLength, 
        // Index of currently firing callback (modified by remove if needed)
        firingIndex, 
        // First callback to fire (used internally by add and fireWith)
        firingStart, 
        // Actual callback list
        list = [], 
        // Stack of fire calls for repeatable lists
        stack = !options.once && [], 
        // Fire callbacks
        fire = function (data) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for (; list && firingIndex < firingLength; firingIndex++) {
                if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                    memory = false; // To prevent further calls using add
                    break;
                }
            }
            firing = false;
            if (list) {
                if (stack) {
                    if (stack.length) {
                        fire(stack.shift());
                    }
                }
                else if (memory) {
                    list = [];
                }
                else {
                    self.disable();
                }
            }
        }, 
        // Actual Callbacks object
        self = {
            // Add a callback or a collection of callbacks to the list
            add: function () {
                if (list) {
                    // First, we save the current length
                    var start = list.length;
                    (function add(args) {
                        jQuery.each(args, function (_, arg) {
                            var type = jQuery.type(arg);
                            if (type === "function") {
                                if (!options.unique || !self.has(arg)) {
                                    list.push(arg);
                                }
                            }
                            else if (arg && arg.length && type !== "string") {
                                // Inspect recursively
                                add(arg);
                            }
                        });
                    })(arguments);
                    // Do we need to add the callbacks to the
                    // current firing batch?
                    if (firing) {
                        firingLength = list.length;
                        // With memory, if we're not firing then
                        // we should call right away
                    }
                    else if (memory) {
                        firingStart = start;
                        fire(memory);
                    }
                }
                return this;
            },
            // Remove a callback from the list
            remove: function () {
                if (list) {
                    jQuery.each(arguments, function (_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);
                            // Handle firing indexes
                            if (firing) {
                                if (index <= firingLength) {
                                    firingLength--;
                                }
                                if (index <= firingIndex) {
                                    firingIndex--;
                                }
                            }
                        }
                    });
                }
                return this;
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function (fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
            },
            // Remove all callbacks from the list
            empty: function () {
                list = [];
                firingLength = 0;
                return this;
            },
            // Have the list do nothing anymore
            disable: function () {
                list = stack = memory = undefined;
                return this;
            },
            // Is it disabled?
            disabled: function () {
                return !list;
            },
            // Lock the list in its current state
            lock: function () {
                stack = undefined;
                if (!memory) {
                    self.disable();
                }
                return this;
            },
            // Is it locked?
            locked: function () {
                return !stack;
            },
            // Call all callbacks with the given context and arguments
            fireWith: function (context, args) {
                if (list && (!fired || stack)) {
                    args = args || [];
                    args = [context, args.slice ? args.slice() : args];
                    if (firing) {
                        stack.push(args);
                    }
                    else {
                        fire(args);
                    }
                }
                return this;
            },
            // Call all the callbacks with the given arguments
            fire: function () {
                self.fireWith(this, arguments);
                return this;
            },
            // To know if the callbacks have already been called at least once
            fired: function () {
                return !!fired;
            }
        };
        return self;
    };
    jQuery.extend({
        Deferred: function (func) {
            var tuples = [
                // action, add listener, listener list, final state
                ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
                ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
                ["notify", "progress", jQuery.Callbacks("memory")]
            ], state = "pending", promise = {
                state: function () {
                    return state;
                },
                always: function () {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                then: function () {
                    var fns = arguments;
                    return jQuery.Deferred(function (newDefer) {
                        jQuery.each(tuples, function (i, tuple) {
                            var action = tuple[0], fn = jQuery.isFunction(fns[i]) && fns[i];
                            // deferred[ done | fail | progress ] for forwarding actions to newDefer
                            deferred[tuple[1]](function () {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && jQuery.isFunction(returned.promise)) {
                                    returned.promise()
                                        .done(newDefer.resolve)
                                        .fail(newDefer.reject)
                                        .progress(newDefer.notify);
                                }
                                else {
                                    newDefer[action + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                                }
                            });
                        });
                        fns = null;
                    }).promise();
                },
                // Get a promise for this deferred
                // If obj is provided, the promise aspect is added to the object
                promise: function (obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred = {};
            // Keep pipe for back-compat
            promise.pipe = promise.then;
            // Add list-specific methods
            jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                // promise[ done | fail | progress ] = list.add
                promise[tuple[1]] = list.add;
                // Handle state
                if (stateString) {
                    list.add(function () {
                        // state = [ resolved | rejected ]
                        state = stateString;
                        // [ reject_list | resolve_list ].disable; progress_list.lock
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }
                // deferred[ resolve | reject | notify ]
                deferred[tuple[0]] = function () {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });
            // Make the deferred a promise
            promise.promise(deferred);
            // Call given func if any
            if (func) {
                func.call(deferred, deferred);
            }
            // All done!
            return deferred;
        },
        // Deferred helper
        when: function (subordinate /* , ..., subordinateN */) {
            var i = 0, resolveValues = core_slice.call(arguments), length = resolveValues.length, 
            // the count of uncompleted subordinates
            remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0, 
            // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
            deferred = remaining === 1 ? subordinate : jQuery.Deferred(), 
            // Update function for both resolve and progress values
            updateFunc = function (i, contexts, values) {
                return function (value) {
                    contexts[i] = this;
                    values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                    if (values === progressValues) {
                        deferred.notifyWith(contexts, values);
                    }
                    else if (!(--remaining)) {
                        deferred.resolveWith(contexts, values);
                    }
                };
            }, progressValues, progressContexts, resolveContexts;
            // add listeners to Deferred subordinates; treat others as resolved
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (; i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise()
                            .done(updateFunc(i, resolveContexts, resolveValues))
                            .fail(deferred.reject)
                            .progress(updateFunc(i, progressContexts, progressValues));
                    }
                    else {
                        --remaining;
                    }
                }
            }
            // if we're not waiting on anything, resolve the master
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }
            return deferred.promise();
        }
    });
    jQuery.support = (function (support) {
        var all, a, input, select, fragment, opt, eventName, isSupported, i, div = document.createElement("div");
        // Setup
        div.setAttribute("className", "t");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        // Finish early in limited (non-browser) environments
        all = div.getElementsByTagName("*") || [];
        a = div.getElementsByTagName("a")[0];
        if (!a || !a.style || !all.length) {
            return support;
        }
        // First batch of tests
        select = document.createElement("select");
        opt = select.appendChild(document.createElement("option"));
        input = div.getElementsByTagName("input")[0];
        a.style.cssText = "top:1px;float:left;opacity:.5";
        // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
        support.getSetAttribute = div.className !== "t";
        // IE strips leading whitespace when .innerHTML is used
        support.leadingWhitespace = div.firstChild.nodeType === 3;
        // Make sure that tbody elements aren't automatically inserted
        // IE will insert them into empty tables
        support.tbody = !div.getElementsByTagName("tbody").length;
        // Make sure that link elements get serialized correctly by innerHTML
        // This requires a wrapper element in IE
        support.htmlSerialize = !!div.getElementsByTagName("link").length;
        // Get the style information from getAttribute
        // (IE uses .cssText instead)
        support.style = /top/.test(a.getAttribute("style"));
        // Make sure that URLs aren't manipulated
        // (IE normalizes it by default)
        support.hrefNormalized = a.getAttribute("href") === "/a";
        // Make sure that element opacity exists
        // (IE uses filter instead)
        // Use a regex to work around a WebKit issue. See #5145
        support.opacity = /^0.5/.test(a.style.opacity);
        // Verify style float existence
        // (IE uses styleFloat instead of cssFloat)
        support.cssFloat = !!a.style.cssFloat;
        // Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
        support.checkOn = !!input.value;
        // Make sure that a selected-by-default option has a working selected property.
        // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
        support.optSelected = opt.selected;
        // Tests for enctype support on a form (#6743)
        support.enctype = !!document.createElement("form").enctype;
        // Makes sure cloning an html5 element does not cause problems
        // Where outerHTML is undefined, this still works
        support.html5Clone = document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>";
        // Will be defined later
        support.inlineBlockNeedsLayout = false;
        support.shrinkWrapBlocks = false;
        support.pixelPosition = false;
        support.deleteExpando = true;
        support.noCloneEvent = true;
        support.reliableMarginRight = true;
        support.boxSizingReliable = true;
        // Make sure checked status is properly cloned
        input.checked = true;
        support.noCloneChecked = input.cloneNode(true).checked;
        // Make sure that the options inside disabled selects aren't marked as disabled
        // (WebKit marks them as disabled)
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        // Support: IE<9
        try {
            delete div.test;
        }
        catch (e) {
            support.deleteExpando = false;
        }
        // Check if we can trust getAttribute("value")
        input = document.createElement("input");
        input.setAttribute("value", "");
        support.input = input.getAttribute("value") === "";
        // Check if an input maintains its value after becoming a radio
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = input.value === "t";
        // #11217 - WebKit loses check when the name is after the checked attribute
        input.setAttribute("checked", "t");
        input.setAttribute("name", "t");
        fragment = document.createDocumentFragment();
        fragment.appendChild(input);
        // Check if a disconnected checkbox will retain its checked
        // value of true after appended to the DOM (IE6/7)
        support.appendChecked = input.checked;
        // WebKit doesn't clone checked state correctly in fragments
        support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
        // Support: IE<9
        // Opera does not clone events (and typeof div.attachEvent === undefined).
        // IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
        if (div.attachEvent) {
            div.attachEvent("onclick", function () {
                support.noCloneEvent = false;
            });
            div.cloneNode(true).click();
        }
        // Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
        // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
        for (i in { submit: true, change: true, focusin: true }) {
            div.setAttribute(eventName = "on" + i, "t");
            support[i + "Bubbles"] = eventName in window || div.attributes[eventName].expando === false;
        }
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        // Support: IE<9
        // Iteration over object's inherited properties before its own.
        for (i in jQuery(support)) {
            break;
        }
        support.ownLast = i !== "0";
        // Run tests that need a body at doc ready
        jQuery(function () {
            var container, marginDiv, tds, divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;", body = document.getElementsByTagName("body")[0];
            if (!body) {
                // Return for frameset docs that don't have a body
                return;
            }
            container = document.createElement("div");
            container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";
            body.appendChild(container).appendChild(div);
            // Support: IE8
            // Check if table cells still have offsetWidth/Height when they are set
            // to display:none and there are still other visible table cells in a
            // table row; if so, offsetWidth/Height are not reliable for use when
            // determining if an element has been hidden directly using
            // display:none (it is still safe to use offsets if a parent element is
            // hidden; don safety goggles and see bug #4512 for more information).
            div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
            tds = div.getElementsByTagName("td");
            tds[0].style.cssText = "padding:0;margin:0;border:0;display:none";
            isSupported = (tds[0].offsetHeight === 0);
            tds[0].style.display = "";
            tds[1].style.display = "none";
            // Support: IE8
            // Check if empty table cells still have offsetWidth/Height
            support.reliableHiddenOffsets = isSupported && (tds[0].offsetHeight === 0);
            // Check box-sizing and margin behavior.
            div.innerHTML = "";
            div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
            // Workaround failing boxSizing test due to offsetWidth returning wrong value
            // with some non-1 values of body zoom, ticket #13543
            jQuery.swap(body, body.style.zoom != null ? { zoom: 1 } : {}, function () {
                support.boxSizing = div.offsetWidth === 4;
            });
            // Use window.getComputedStyle because jsdom on node.js will break without it.
            if (window.getComputedStyle) {
                support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== "1%";
                support.boxSizingReliable = (window.getComputedStyle(div, null) || { width: "4px" }).width === "4px";
                // Check if div with explicit width and no margin-right incorrectly
                // gets computed margin-right based on width of container. (#3333)
                // Fails in WebKit before Feb 2011 nightlies
                // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                marginDiv = div.appendChild(document.createElement("div"));
                marginDiv.style.cssText = div.style.cssText = divReset;
                marginDiv.style.marginRight = marginDiv.style.width = "0";
                div.style.width = "1px";
                support.reliableMarginRight =
                    !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);
            }
            if (typeof div.style.zoom !== core_strundefined) {
                // Support: IE<8
                // Check if natively block-level elements act like inline-block
                // elements when setting their display to 'inline' and giving
                // them layout
                div.innerHTML = "";
                div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
                support.inlineBlockNeedsLayout = (div.offsetWidth === 3);
                // Support: IE6
                // Check if elements with layout shrink-wrap their children
                div.style.display = "block";
                div.innerHTML = "<div></div>";
                div.firstChild.style.width = "5px";
                support.shrinkWrapBlocks = (div.offsetWidth !== 3);
                if (support.inlineBlockNeedsLayout) {
                    // Prevent IE 6 from affecting layout for positioned elements #11048
                    // Prevent IE from shrinking the body in IE 7 mode #12869
                    // Support: IE<8
                    body.style.zoom = 1;
                }
            }
            body.removeChild(container);
            // Null elements to avoid leaks in IE
            container = div = tds = marginDiv = null;
        });
        // Null elements to avoid leaks in IE
        all = select = fragment = opt = a = input = null;
        return support;
    })({});
    var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/, rmultiDash = /([A-Z])/g;
    function internalData(elem, name, data, pvt /* Internal Use Only */) {
        if (!jQuery.acceptData(elem)) {
            return;
        }
        var ret, thisCache, internalKey = jQuery.expando, 
        // We have to handle DOM nodes and JS objects differently because IE6-7
        // can't GC object references properly across the DOM-JS boundary
        isNode = elem.nodeType, 
        // Only DOM nodes need the global jQuery cache; JS object data is
        // attached directly to the object so GC can occur automatically
        cache = isNode ? jQuery.cache : elem, 
        // Only defining an ID for JS objects if its cache already exists allows
        // the code to shortcut on the same path as a DOM node with no cache
        id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
        // Avoid doing any more work than we need to when trying to get data on an
        // object that has no data at all
        if ((!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string") {
            return;
        }
        if (!id) {
            // Only DOM nodes need a new unique ID for each element since their data
            // ends up in the global cache
            if (isNode) {
                id = elem[internalKey] = core_deletedIds.pop() || jQuery.guid++;
            }
            else {
                id = internalKey;
            }
        }
        if (!cache[id]) {
            // Avoid exposing jQuery metadata on plain JS objects when the object
            // is serialized using JSON.stringify
            cache[id] = isNode ? {} : { toJSON: jQuery.noop };
        }
        // An object can be passed to jQuery.data instead of a key/value pair; this gets
        // shallow copied over onto the existing cache
        if (typeof name === "object" || typeof name === "function") {
            if (pvt) {
                cache[id] = jQuery.extend(cache[id], name);
            }
            else {
                cache[id].data = jQuery.extend(cache[id].data, name);
            }
        }
        thisCache = cache[id];
        // jQuery data() is stored in a separate object inside the object's internal data
        // cache in order to avoid key collisions between internal data and user-defined
        // data.
        if (!pvt) {
            if (!thisCache.data) {
                thisCache.data = {};
            }
            thisCache = thisCache.data;
        }
        if (data !== undefined) {
            thisCache[jQuery.camelCase(name)] = data;
        }
        // Check for both converted-to-camel and non-converted data property names
        // If a data property was specified
        if (typeof name === "string") {
            // First Try to find as-is property data
            ret = thisCache[name];
            // Test for null|undefined property data
            if (ret == null) {
                // Try to find the camelCased property
                ret = thisCache[jQuery.camelCase(name)];
            }
        }
        else {
            ret = thisCache;
        }
        return ret;
    }
    function internalRemoveData(elem, name, pvt) {
        if (!jQuery.acceptData(elem)) {
            return;
        }
        var thisCache, i, isNode = elem.nodeType, 
        // See jQuery.data for more information
        cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
        // If there is already no cache entry for this object, there is no
        // purpose in continuing
        if (!cache[id]) {
            return;
        }
        if (name) {
            thisCache = pvt ? cache[id] : cache[id].data;
            if (thisCache) {
                // Support array or space separated string names for data keys
                if (!jQuery.isArray(name)) {
                    // try the string as a key before any manipulation
                    if (name in thisCache) {
                        name = [name];
                    }
                    else {
                        // split the camel cased version by spaces unless a key with the spaces exists
                        name = jQuery.camelCase(name);
                        if (name in thisCache) {
                            name = [name];
                        }
                        else {
                            name = name.split(" ");
                        }
                    }
                }
                else {
                    // If "name" is an array of keys...
                    // When data is initially created, via ("key", "val") signature,
                    // keys will be converted to camelCase.
                    // Since there is no way to tell _how_ a key was added, remove
                    // both plain key and camelCase key. #12786
                    // This will only penalize the array argument path.
                    name = name.concat(jQuery.map(name, jQuery.camelCase));
                }
                i = name.length;
                while (i--) {
                    delete thisCache[name[i]];
                }
                // If there is no data left in the cache, we want to continue
                // and let the cache object itself get destroyed
                if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {
                    return;
                }
            }
        }
        // See jQuery.data for more information
        if (!pvt) {
            delete cache[id].data;
            // Don't destroy the parent cache unless the internal data object
            // had been the only thing left in it
            if (!isEmptyDataObject(cache[id])) {
                return;
            }
        }
        // Destroy the cache
        if (isNode) {
            jQuery.cleanData([elem], true);
            // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
            /* jshint eqeqeq: false */
        }
        else if (jQuery.support.deleteExpando || cache != cache.window) {
            /* jshint eqeqeq: true */
            delete cache[id];
            // When all else fails, null
        }
        else {
            cache[id] = null;
        }
    }
    jQuery.extend({
        cache: {},
        // The following elements throw uncatchable exceptions if you
        // attempt to add expando properties to them.
        noData: {
            "applet": true,
            "embed": true,
            // Ban all objects except for Flash (which handle expandos)
            "object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        hasData: function (elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem);
        },
        data: function (elem, name, data) {
            return internalData(elem, name, data);
        },
        removeData: function (elem, name) {
            return internalRemoveData(elem, name);
        },
        // For internal use only.
        _data: function (elem, name, data) {
            return internalData(elem, name, data, true);
        },
        _removeData: function (elem, name) {
            return internalRemoveData(elem, name, true);
        },
        // A method for determining if a DOM node can handle the data expando
        acceptData: function (elem) {
            // Do not set data on non-element because it will not be cleared (#8335).
            if (elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9) {
                return false;
            }
            var noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];
            // nodes accept data unless otherwise specified; rejection can be conditional
            return !noData || noData !== true && elem.getAttribute("classid") === noData;
        }
    });
    jQuery.fn.extend({
        data: function (key, value) {
            var attrs, name, data = null, i = 0, elem = this[0];
            // Special expections of .data basically thwart jQuery.access,
            // so implement the relevant behavior ourselves
            // Gets all values
            if (key === undefined) {
                if (this.length) {
                    data = jQuery.data(elem);
                    if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
                        attrs = elem.attributes;
                        for (; i < attrs.length; i++) {
                            name = attrs[i].name;
                            if (name.indexOf("data-") === 0) {
                                name = jQuery.camelCase(name.slice(5));
                                dataAttr(elem, name, data[name]);
                            }
                        }
                        jQuery._data(elem, "parsedAttrs", true);
                    }
                }
                return data;
            }
            // Sets multiple values
            if (typeof key === "object") {
                return this.each(function () {
                    jQuery.data(this, key);
                });
            }
            return arguments.length > 1 ?
                // Sets one value
                this.each(function () {
                    jQuery.data(this, key, value);
                }) :
                // Gets one value
                // Try to fetch any internally stored data first
                elem ? dataAttr(elem, key, jQuery.data(elem, key)) : null;
        },
        removeData: function (key) {
            return this.each(function () {
                jQuery.removeData(this, key);
            });
        }
    });
    function dataAttr(elem, key, data) {
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = data === "true" ? true :
                        data === "false" ? false :
                            data === "null" ? null :
                                // Only convert to a number if it doesn't change the string
                                +data + "" === data ? +data :
                                    rbrace.test(data) ? jQuery.parseJSON(data) :
                                        data;
                }
                catch (e) { }
                // Make sure we set the data so it isn't changed later
                jQuery.data(elem, key, data);
            }
            else {
                data = undefined;
            }
        }
        return data;
    }
    // checks a cache object for emptiness
    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) {
            // if the public data object is empty, the private is still empty
            if (name === "data" && jQuery.isEmptyObject(obj[name])) {
                continue;
            }
            if (name !== "toJSON") {
                return false;
            }
        }
        return true;
    }
    jQuery.extend({
        queue: function (elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = jQuery._data(elem, type);
                // Speed up dequeue by getting out quickly if this is just a lookup
                if (data) {
                    if (!queue || jQuery.isArray(data)) {
                        queue = jQuery._data(elem, type, jQuery.makeArray(data));
                    }
                    else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        dequeue: function (elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
                jQuery.dequeue(elem, type);
            };
            // If the fx queue is dequeued, always remove the progress sentinel
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if (type === "fx") {
                    queue.unshift("inprogress");
                }
                // clear up the last queue stop function
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        // not intended for public consumption - generates a queueHooks object, or returns the current one
        _queueHooks: function (elem, type) {
            var key = type + "queueHooks";
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function () {
                    jQuery._removeData(elem, type + "queue");
                    jQuery._removeData(elem, key);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function (type, data) {
            var setter = 2;
            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }
            return data === undefined ?
                this :
                this.each(function () {
                    var queue = jQuery.queue(this, type, data);
                    // ensure a hooks for this queue
                    jQuery._queueHooks(this, type);
                    if (type === "fx" && queue[0] !== "inprogress") {
                        jQuery.dequeue(this, type);
                    }
                });
        },
        dequeue: function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type);
            });
        },
        // Based off of the plugin by Clint Helfers, with permission.
        // http://blindsignals.com/index.php/2009/07/jquery-delay/
        delay: function (time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || "fx";
            return this.queue(type, function (next, hooks) {
                var timeout = setTimeout(next, time);
                hooks.stop = function () {
                    clearTimeout(timeout);
                };
            });
        },
        clearQueue: function (type) {
            return this.queue(type || "fx", []);
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function (type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
                if (!(--count)) {
                    defer.resolveWith(elements, [elements]);
                }
            };
            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
            while (i--) {
                tmp = jQuery._data(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var nodeHook, boolHook, rclass = /[\t\r\n\f]/g, rreturn = /\r/g, rfocusable = /^(?:input|select|textarea|button|object)$/i, rclickable = /^(?:a|area)$/i, ruseDefault = /^(?:checked|selected)$/i, getSetAttribute = jQuery.support.getSetAttribute, getSetInput = jQuery.support.input;
    jQuery.fn.extend({
        attr: function (name, value) {
            return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name);
            });
        },
        prop: function (name, value) {
            return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function (name) {
            name = jQuery.propFix[name] || name;
            return this.each(function () {
                // try/catch handles cases where IE balks (such as removing a property on window)
                try {
                    this[name] = undefined;
                    delete this[name];
                }
                catch (e) { }
            });
        },
        addClass: function (value) {
            var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = typeof value === "string" && value;
            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                // The disjunction here is for better compressibility (see removeClass)
                classes = (value || "").match(core_rnotwhite) || [];
                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ?
                        (" " + elem.className + " ").replace(rclass, " ") :
                        " ");
                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }
                        elem.className = jQuery.trim(cur);
                    }
                }
            }
            return this;
        },
        removeClass: function (value) {
            var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = arguments.length === 0 || typeof value === "string" && value;
            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || "").match(core_rnotwhite) || [];
                for (; i < len; i++) {
                    elem = this[i];
                    // This expression is here for better compressibility (see addClass)
                    cur = elem.nodeType === 1 && (elem.className ?
                        (" " + elem.className + " ").replace(rclass, " ") :
                        "");
                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            // Remove *all* instances
                            while (cur.indexOf(" " + clazz + " ") >= 0) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }
                        elem.className = value ? jQuery.trim(cur) : "";
                    }
                }
            }
            return this;
        },
        toggleClass: function (value, stateVal) {
            var type = typeof value;
            if (typeof stateVal === "boolean" && type === "string") {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (jQuery.isFunction(value)) {
                return this.each(function (i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                });
            }
            return this.each(function () {
                if (type === "string") {
                    // toggle individual class names
                    var className, i = 0, self = jQuery(this), classNames = value.match(core_rnotwhite) || [];
                    while ((className = classNames[i++])) {
                        // check each className given, space separated list
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        }
                        else {
                            self.addClass(className);
                        }
                    }
                    // Toggle whole class name
                }
                else if (type === core_strundefined || type === "boolean") {
                    if (this.className) {
                        // store className if set
                        jQuery._data(this, "__className__", this.className);
                    }
                    // If the element has a class name or if we're passed "false",
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
                }
            });
        },
        hasClass: function (selector) {
            var className = " " + selector + " ", i = 0, l = this.length;
            for (; i < l; i++) {
                if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
                    return true;
                }
            }
            return false;
        },
        val: function (value) {
            var ret, hooks, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    return typeof ret === "string" ?
                        // handle most common string cases
                        ret.replace(rreturn, "") :
                        // handle cases where value is null/undef or number
                        ret == null ? "" : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function (i) {
                var val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (isFunction) {
                    val = value.call(this, i, jQuery(this).val());
                }
                else {
                    val = value;
                }
                // Treat null/undefined as ""; convert numbers to string
                if (val == null) {
                    val = "";
                }
                else if (typeof val === "number") {
                    val += "";
                }
                else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                        return value == null ? "" : value + "";
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                // If set returns undefined, fall back to normal setting
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function (elem) {
                    // Use proper attribute retrieval(#6932, #12072)
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ?
                        val :
                        elem.text;
                }
            },
            select: {
                get: function (elem) {
                    var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one" || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ?
                        max :
                        one ? index : 0;
                    // Loop through all the selected options
                    for (; i < max; i++) {
                        option = options[i];
                        // oldIE doesn't update selected after form reset (#2551)
                        if ((option.selected || i === index) &&
                            // Don't return options that are disabled or in a disabled optgroup
                            (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
                            (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            // Get the specific value for the option
                            value = jQuery(option).val();
                            // We don't need an array for one selects
                            if (one) {
                                return value;
                            }
                            // Multi-Selects return an array
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function (elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if ((option.selected = jQuery.inArray(jQuery(option).val(), values) >= 0)) {
                            optionSet = true;
                        }
                    }
                    // force browsers to behave consistently when non-matching value is set
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        },
        attr: function (elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            // don't get/set attributes on text, comment and attribute nodes
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            // Fallback to prop when attributes are not supported
            if (typeof elem.getAttribute === core_strundefined) {
                return jQuery.prop(elem, name, value);
            }
            // All attributes are lowercase
            // Grab necessary hook if one is defined
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] ||
                    (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                }
                else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                else {
                    elem.setAttribute(name, value + "");
                    return value;
                }
            }
            else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            else {
                ret = jQuery.find.attr(elem, name);
                // Non-existent attributes return null, we normalize to undefined
                return ret == null ?
                    undefined :
                    ret;
            }
        },
        removeAttr: function (elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(core_rnotwhite);
            if (attrNames && elem.nodeType === 1) {
                while ((name = attrNames[i++])) {
                    propName = jQuery.propFix[name] || name;
                    // Boolean attributes get special treatment (#10870)
                    if (jQuery.expr.match.bool.test(name)) {
                        // Set corresponding property to false
                        if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                            elem[propName] = false;
                            // Support: IE<9
                            // Also clear defaultChecked/defaultSelected (if appropriate)
                        }
                        else {
                            elem[jQuery.camelCase("default-" + name)] =
                                elem[propName] = false;
                        }
                        // See #9699 for explanation of this approach (setting first, then removal)
                    }
                    else {
                        jQuery.attr(elem, name, "");
                    }
                    elem.removeAttribute(getSetAttribute ? name : propName);
                }
            }
        },
        attrHooks: {
            type: {
                set: function (elem, value) {
                    if (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                        // Setting the type on a radio button after the value resets the value in IE6-9
                        // Reset value to default in case type is set after value during creation
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function (elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            // don't get/set properties on text, comment and attribute nodes
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {
                // Fix name and attach hooks
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ?
                    ret :
                    (elem[name] = value);
            }
            else {
                return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ?
                    ret :
                    elem[name];
            }
        },
        propHooks: {
            tabIndex: {
                get: function (elem) {
                    // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
                    // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                    // Use proper attribute retrieval(#12072)
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    return tabindex ?
                        parseInt(tabindex, 10) :
                        rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ?
                            0 :
                            -1;
                }
            }
        }
    });
    // Hooks for boolean attributes
    boolHook = {
        set: function (elem, value, name) {
            if (value === false) {
                // Remove boolean attributes when set to false
                jQuery.removeAttr(elem, name);
            }
            else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                // IE<8 needs the *property* name
                elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);
                // Use defaultChecked and defaultSelected for oldIE
            }
            else {
                elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = jQuery.expr.attrHandle[name] || jQuery.find.attr;
        jQuery.expr.attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ?
            function (elem, name, isXML) {
                var fn = jQuery.expr.attrHandle[name], ret = isXML ?
                    undefined :
                    /* jshint eqeqeq: false */
                    (jQuery.expr.attrHandle[name] = undefined) !=
                        getter(elem, name, isXML) ?
                        name.toLowerCase() :
                        null;
                jQuery.expr.attrHandle[name] = fn;
                return ret;
            } :
            function (elem, name, isXML) {
                return isXML ?
                    undefined :
                    elem[jQuery.camelCase("default-" + name)] ?
                        name.toLowerCase() :
                        null;
            };
    });
    // fix oldIE attroperties
    if (!getSetInput || !getSetAttribute) {
        jQuery.attrHooks.value = {
            set: function (elem, value, name) {
                if (jQuery.nodeName(elem, "input")) {
                    // Does not return so that setAttribute is also used
                    elem.defaultValue = value;
                }
                else {
                    // Use nodeHook if defined (#1954); otherwise setAttribute is fine
                    return nodeHook && nodeHook.set(elem, value, name);
                }
            }
        };
    }
    // IE6/7 do not support getting/setting some attributes with get/setAttribute
    if (!getSetAttribute) {
        // Use this for any attribute in IE6/7
        // This fixes almost every IE6/7 issue
        nodeHook = {
            set: function (elem, value, name) {
                // Set the existing or create a new attribute node
                var ret = elem.getAttributeNode(name);
                if (!ret) {
                    elem.setAttributeNode((ret = elem.ownerDocument.createAttribute(name)));
                }
                ret.value = value += "";
                // Break association with cloned elements by also using setAttribute (#9646)
                return name === "value" || value === elem.getAttribute(name) ?
                    value :
                    undefined;
            }
        };
        jQuery.expr.attrHandle.id = jQuery.expr.attrHandle.name = jQuery.expr.attrHandle.coords =
            // Some attributes are constructed with empty-string values when not defined
            function (elem, name, isXML) {
                var ret;
                return isXML ?
                    undefined :
                    (ret = elem.getAttributeNode(name)) && ret.value !== "" ?
                        ret.value :
                        null;
            };
        jQuery.valHooks.button = {
            get: function (elem, name) {
                var ret = elem.getAttributeNode(name);
                return ret && ret.specified ?
                    ret.value :
                    undefined;
            },
            set: nodeHook.set
        };
        // Set contenteditable to false on removals(#10429)
        // Setting to empty string throws an error as an invalid value
        jQuery.attrHooks.contenteditable = {
            set: function (elem, value, name) {
                nodeHook.set(elem, value === "" ? false : value, name);
            }
        };
        // Set width and height to auto instead of 0 on empty string( Bug #8150 )
        // This is for removals
        jQuery.each(["width", "height"], function (i, name) {
            jQuery.attrHooks[name] = {
                set: function (elem, value) {
                    if (value === "") {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }
            };
        });
    }
    // Some attributes require a special call on IE
    // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
    if (!jQuery.support.hrefNormalized) {
        // href/src property should get the full normalized URL (#10299/#12915)
        jQuery.each(["href", "src"], function (i, name) {
            jQuery.propHooks[name] = {
                get: function (elem) {
                    return elem.getAttribute(name, 4);
                }
            };
        });
    }
    if (!jQuery.support.style) {
        jQuery.attrHooks.style = {
            get: function (elem) {
                // Return undefined in the case of empty string
                // Note: IE uppercases css property names, but if we were to .toLowerCase()
                // .cssText, that would destroy case senstitivity in URL's, like in "background"
                return elem.style.cssText || undefined;
            },
            set: function (elem, value) {
                return (elem.style.cssText = value + "");
            }
        };
    }
    // Safari mis-reports the default selected property of an option
    // Accessing the parent's selectedIndex property fixes it
    if (!jQuery.support.optSelected) {
        jQuery.propHooks.selected = {
            get: function (elem) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    // Make sure that it also works with optgroups, see #5701
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
                return null;
            }
        };
    }
    jQuery.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
    ], function () {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    // IE6/7 call enctype encoding
    if (!jQuery.support.enctype) {
        jQuery.propFix.enctype = "encoding";
    }
    // Radios and checkboxes getter/setter
    jQuery.each(["radio", "checkbox"], function () {
        jQuery.valHooks[this] = {
            set: function (elem, value) {
                if (jQuery.isArray(value)) {
                    return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0);
                }
            }
        };
        if (!jQuery.support.checkOn) {
            jQuery.valHooks[this].get = function (elem) {
                // Support: Webkit
                // "" is returned instead of "on" if a value isn't specified
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });
    var rformElems = /^(?:input|select|textarea)$/i, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        }
        catch (err) { }
    }
    /*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */
    jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn, special, eventHandle, handleObj, handlers, type, namespaces, origType, elemData = jQuery._data(elem);
            // Don't attach events to noData or text/comment nodes (but allow plain objects)
            if (!elemData) {
                return;
            }
            // Caller can pass in an object of custom data in lieu of the handler
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            // Make sure that the handler has a unique ID, used to find/remove it later
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            // Init the element's event structure and main handler, if this is the first
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {
                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
                        jQuery.event.dispatch.apply(eventHandle.elem, arguments) :
                        undefined;
                };
                // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
                eventHandle.elem = elem;
            }
            // Handle multiple events separated by a space
            types = (types || "").match(core_rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                // There *must* be a type, no attaching namespace-only handlers
                if (!type) {
                    continue;
                }
                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[type] || {};
                // If selector defined, determine special event api type, otherwise given type
                type = (selector ? special.delegateType : special.bindType) || type;
                // Update special based on newly reset type
                special = jQuery.event.special[type] || {};
                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                // Init the event handler queue if we're the first
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    // Only use addEventListener/attachEvent if the special events handler returns false
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        // Bind the global event handler to the element
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);
                        }
                        else if (elem.attachEvent) {
                            elem.attachEvent("on" + type, eventHandle);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                // Add to the element's handler list, delegates in front
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                }
                else {
                    handlers.push(handleObj);
                }
                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[type] = true;
            }
            // Nullify elem to prevent memory leaks in IE
            elem = null;
        },
        // Detach an event or set of events from an element
        remove: function (elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp, origCount, t, events, special, handlers, type, namespaces, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            // Once for each type.namespace in types; type may be omitted
            types = (types || "").match(core_rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                // Remove matching events
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) &&
                        (!handler || handler.guid === handleObj.guid) &&
                        (!tmp || tmp.test(handleObj.namespace)) &&
                        (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            // Remove the expando if it's no longer used
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;
                // removeData also checks for emptiness and clears the expando if empty
                // so use it instead of delete
                jQuery._removeData(elem, "events");
            }
        },
        trigger: function (event, data, elem, onlyHandlers) {
            var handle, ontype, cur, bubbleType, special, tmp, i, eventPath = [elem || document], type = core_hasOwn.call(event, "type") ? event.type : event, namespaces = core_hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            // Don't do events on text and comment nodes
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf(".") >= 0) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[jQuery.expando] ?
                event :
                new jQuery.Event(type, typeof event === "object" && event);
            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ?
                new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") :
                null;
            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ?
                [event] :
                jQuery.makeArray(data, [event]);
            // Allow special events to draw outside the lines
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            // Fire handlers on the event path
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ?
                    bubbleType :
                    special.bindType || type;
                // jQuery handler
                handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }
                // Native handler
                handle = ontype && cur[ontype];
                if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {
                    event.preventDefault();
                }
            }
            event.type = type;
            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) &&
                    jQuery.acceptData(elem)) {
                    // Call a native DOM method on the target with the same name name as the event.
                    // Can't use an .isFunction() check here because IE6/7 fails that test.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    if (ontype && elem[type] && !jQuery.isWindow(elem)) {
                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        try {
                            elem[type]();
                        }
                        catch (e) {
                            // IE<9 dies on focus/blur to hidden element (#1486,#12518)
                            // only reproducible on winXP IE8 native, not IE9 in IE8 mode
                        }
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        dispatch: function (event) {
            // Make a writable jQuery.Event from the native event object
            event = jQuery.event.fix(event);
            var i, ret, handleObj, matched, j, handlerQueue = [], args = core_slice.call(arguments), handlers = (jQuery._data(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            event.delegateTarget = this;
            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }
            // Determine handlers
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    // Triggered event must either 1) have no namespace, or
                    // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler)
                            .apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            // Call the postDispatch hook for the mapped type
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function (event, handlers) {
            var sel, handleObj, matches, i, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            // Find delegate handlers
            // Black-hole SVG <use> instance trees (#13180)
            // Avoid non-left-click bubbling in Firefox (#3861)
            if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
                /* jshint eqeqeq: false */
                for (; cur != this; cur = cur.parentNode || this) {
                    /* jshint eqeqeq: true */
                    // Don't check non-elements (#13208)
                    // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                    if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            // Don't conflict with Object.prototype properties (#13203)
                            sel = handleObj.selector + " ";
                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ?
                                    jQuery(sel, this).index(cur) >= 0 :
                                    jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({ elem: cur, handlers: matches });
                        }
                    }
                }
            }
            // Add the remaining (directly-bound) handlers
            if (delegateCount < handlers.length) {
                handlerQueue.push({ elem: this, handlers: handlers.slice(delegateCount) });
            }
            return handlerQueue;
        },
        fix: function (event) {
            if (event[jQuery.expando]) {
                return event;
            }
            // Create a writable copy of the event object and normalize some properties
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            if (!fixHook) {
                this.fixHooks[type] = fixHook =
                    rmouseEvent.test(type) ? this.mouseHooks :
                        rkeyEvent.test(type) ? this.keyHooks :
                            {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }
            // Support: IE<9
            // Fix target property (#1925)
            if (!event.target) {
                event.target = originalEvent.srcElement || document;
            }
            // Support: Chrome 23+, Safari?
            // Target should not be a text node (#504, #13143)
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }
            // Support: IE<9
            // For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
            event.metaKey = !!event.metaKey;
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        // Includes some event props shared by KeyEvent and MouseEvent
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function (event, original) {
                // Add which for key events
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }
                return event;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function (event, original) {
                var body, eventDoc, doc, button = original.button, fromElement = original.fromElement;
                // Calculate pageX/Y if missing and clientX/Y available
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                // Add relatedTarget, if necessary
                if (!event.relatedTarget && fromElement) {
                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                }
                // Add which for click: 1 === left; 2 === middle; 3 === right
                // Note: button is not normalized, so don't use it
                if (!event.which && button !== undefined) {
                    event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
                }
                return event;
            }
        },
        special: {
            load: {
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            focus: {
                // Fire native event if possible so blur/focus sequence is correct
                trigger: function () {
                    if (this !== safeActiveElement() && this.focus) {
                        try {
                            this.focus();
                            return false;
                        }
                        catch (e) {
                            // Support: IE<9
                            // If we error on focus to hidden element (#1486, #12518),
                            // let .trigger() run the handlers
                        }
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function () {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                // For checkbox, fire native event so checked state will be right
                trigger: function () {
                    if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
                        this.click();
                        return false;
                    }
                },
                // For cross-browser consistency, don't fire native .click() on links
                _default: function (event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function (event) {
                    // Even when returnValue equals to undefined Firefox will still show alert
                    if (event.result !== undefined) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },
        simulate: function (type, elem, event, bubble) {
            // Piggyback on a donor event to simulate a different one.
            // Fake originalEvent to avoid donor's stopPropagation, but if the
            // simulated event prevents default then we do the same on the donor.
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true,
                originalEvent: {}
            });
            if (bubble) {
                jQuery.event.trigger(e, null, elem);
            }
            else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };
    jQuery.removeEvent = document.removeEventListener ?
        function (elem, type, handle) {
            if (elem.removeEventListener) {
                elem.removeEventListener(type, handle, false);
            }
        } :
        function (elem, type, handle) {
            var name = "on" + type;
            if (elem.detachEvent) {
                // #8545, #7054, preventing memory leaks for custom events in IE6-8
                // detachEvent needed property on element, by name of that event, to properly expose it to GC
                if (typeof elem[name] === core_strundefined) {
                    elem[name] = null;
                }
                elem.detachEvent(name, handle);
            }
        };
    jQuery.Event = function (src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        // Event object
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = (src.defaultPrevented || src.returnValue === false ||
                src.getPreventDefault && src.getPreventDefault()) ? returnTrue : returnFalse;
            // Event type
        }
        else {
            this.type = src;
        }
        // Put explicitly provided properties onto the event object
        if (props) {
            jQuery.extend(this, props);
        }
        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();
        // Mark it as fixed
        this[jQuery.expando] = true;
    };
    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function () {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (!e) {
                return;
            }
            // If preventDefault exists, run it on the original event
            if (e.preventDefault) {
                e.preventDefault();
                // Support: IE
                // Otherwise set the returnValue property of the original event to false
            }
            else {
                e.returnValue = false;
            }
        },
        stopPropagation: function () {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (!e) {
                return;
            }
            // If stopPropagation exists, run it on the original event
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            // Support: IE
            // Set the cancelBubble property of the original event to true
            e.cancelBubble = true;
        },
        stopImmediatePropagation: function () {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation();
        }
    };
    // Create mouseenter/leave events using mouseover/out and event-time checks
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function (event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                // For mousenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if (!related || (related !== target && !jQuery.contains(target, related))) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    // IE submit delegation
    if (!jQuery.support.submitBubbles) {
        jQuery.event.special.submit = {
            setup: function () {
                // Only need this for delegated form submit events
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }
                // Lazy-add a submit handler when a descendant form may potentially be submitted
                jQuery.event.add(this, "click._submit keypress._submit", function (e) {
                    // Node name check avoids a VML-related crash in IE (#9807)
                    var elem = e.target, form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
                    if (form && !jQuery._data(form, "submitBubbles")) {
                        jQuery.event.add(form, "submit._submit", function (event) {
                            event._submit_bubble = true;
                        });
                        jQuery._data(form, "submitBubbles", true);
                    }
                });
                // return undefined since we don't need an event listener
            },
            postDispatch: function (event) {
                // If form was submitted by the user, bubble the event up the tree
                if (event._submit_bubble) {
                    delete event._submit_bubble;
                    if (this.parentNode && !event.isTrigger) {
                        jQuery.event.simulate("submit", this.parentNode, event, true);
                    }
                }
            },
            teardown: function () {
                // Only need this for delegated form submit events
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }
                // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
                jQuery.event.remove(this, "._submit");
            }
        };
    }
    // IE change delegation and checkbox/radio fix
    if (!jQuery.support.changeBubbles) {
        jQuery.event.special.change = {
            setup: function () {
                if (rformElems.test(this.nodeName)) {
                    // IE doesn't fire change on a check/radio until blur; trigger it on click
                    // after a propertychange. Eat the blur-change in special.change.handle.
                    // This still fires onchange a second time for check/radio after blur.
                    if (this.type === "checkbox" || this.type === "radio") {
                        jQuery.event.add(this, "propertychange._change", function (event) {
                            if (event.originalEvent.propertyName === "checked") {
                                this._just_changed = true;
                            }
                        });
                        jQuery.event.add(this, "click._change", function (event) {
                            if (this._just_changed && !event.isTrigger) {
                                this._just_changed = false;
                            }
                            // Allow triggered, simulated change events (#11500)
                            jQuery.event.simulate("change", this, event, true);
                        });
                    }
                    return false;
                }
                // Delegated event; lazy-add a change handler on descendant inputs
                jQuery.event.add(this, "beforeactivate._change", function (e) {
                    var elem = e.target;
                    if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
                        jQuery.event.add(elem, "change._change", function (event) {
                            if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                jQuery.event.simulate("change", this.parentNode, event, true);
                            }
                        });
                        jQuery._data(elem, "changeBubbles", true);
                    }
                });
            },
            handle: function (event) {
                var elem = event.target;
                // Swallow native change events from checkbox/radio, we already triggered them above
                if (this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox")) {
                    return event.handleObj.handler.apply(this, arguments);
                }
            },
            teardown: function () {
                jQuery.event.remove(this, "._change");
                return !rformElems.test(this.nodeName);
            }
        };
    }
    // Create "bubbling" focus and blur events
    if (!jQuery.support.focusinBubbles) {
        jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {
            // Attach a single capturing handler while someone wants focusin/focusout
            var attaches = 0, handler = function (event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
            };
            jQuery.event.special[fix] = {
                setup: function () {
                    if (attaches++ === 0) {
                        document.addEventListener(orig, handler, true);
                    }
                },
                teardown: function () {
                    if (--attaches === 0) {
                        document.removeEventListener(orig, handler, true);
                    }
                }
            };
        });
    }
    jQuery.fn.extend({
        on: function (types, selector, data, fn, /*INTERNAL*/ one) {
            var type, origFn;
            // Types can be a map of types/handlers
            if (typeof types === "object") {
                // ( types-Object, selector, data )
                if (typeof selector !== "string") {
                    // ( types-Object, data )
                    data = data || selector;
                    selector = undefined;
                }
                for (type in types) {
                    this.on(type, selector, data, types[type], one);
                }
                return this;
            }
            if (data == null && fn == null) {
                // ( types, fn )
                fn = selector;
                data = selector = undefined;
            }
            else if (fn == null) {
                if (typeof selector === "string") {
                    // ( types, selector, fn )
                    fn = data;
                    data = undefined;
                }
                else {
                    // ( types, data, fn )
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if (fn === false) {
                fn = returnFalse;
            }
            else if (!fn) {
                return this;
            }
            if (one === 1) {
                origFn = fn;
                fn = function (event) {
                    // Can use an empty set, since event contains the info
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                // Use same guid so caller can remove using origFn
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function () {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function (types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function (types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === "object") {
                // ( types-object [, selector] )
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function () {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function (type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    var isSimple = /^.[^:#\[\.,]*$/, rparentsprev = /^(?:parents|prev(?:Until|All))/, rneedsContext = jQuery.expr.match.needsContext, 
    // methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.fn.extend({
        find: function (selector) {
            var i, ret = [], self = this, len = self.length;
            if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function () {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }
            // Needed because $( selector, context ) becomes $( context ).find( selector )
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        has: function (target) {
            var i, targets = jQuery(target, this), len = targets.length;
            return this.filter(function () {
                for (i = 0; i < len; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        not: function (selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        filter: function (selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        is: function (selector) {
            return !!winnow(this, 
            // If this is a positional/relative selector, check membership in the returned set
            // so $("p:first").is("p:last") won't return true for a doc with two "p".
            typeof selector === "string" && rneedsContext.test(selector) ?
                jQuery(selector) :
                selector || [], false).length;
        },
        closest: function (selectors, context) {
            var cur, i = 0, l = this.length, ret = [], pos = rneedsContext.test(selectors) || typeof selectors !== "string" ?
                jQuery(selectors, context || this.context) :
                0;
            for (; i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                    // Always skip document fragments
                    if (cur.nodeType < 11 && (pos ?
                        pos.index(cur) > -1 :
                        // Don't pass non-elements to Sizzle
                        cur.nodeType === 1 &&
                            jQuery.find.matchesSelector(cur, selectors))) {
                        cur = ret.push(cur);
                        break;
                    }
                }
            }
            return this.pushStack(ret.length > 1 ? jQuery.unique(ret) : ret);
        },
        // Determine the position of an element within
        // the matched set of elements
        index: function (elem) {
            // No argument, return index in parent
            if (!elem) {
                return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
            }
            // index in selector
            if (typeof elem === "string") {
                return jQuery.inArray(this[0], jQuery(elem));
            }
            // Locate the position of the desired element
            return jQuery.inArray(
            // If it receives a jQuery object, the first element is used
            elem.jquery ? elem[0] : elem, this);
        },
        add: function (selector, context) {
            var set = typeof selector === "string" ?
                jQuery(selector, context) :
                jQuery.makeArray(selector && selector.nodeType ? [selector] : selector), all = jQuery.merge(this.get(), set);
            return this.pushStack(jQuery.unique(all));
        },
        addBack: function (selector) {
            return this.add(selector == null ?
                this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        do {
            cur = cur[dir];
        } while (cur && cur.nodeType !== 1);
        return cur;
    }
    jQuery.each({
        parent: function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function (elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function (elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function (elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function (elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function (elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function (elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function (elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function (elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function (elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function (elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function (elem) {
            return jQuery.nodeName(elem, "iframe") ?
                elem.contentDocument || elem.contentWindow.document :
                jQuery.merge([], elem.childNodes);
        }
    }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
            var ret = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
                selector = until;
            }
            if (selector && typeof selector === "string") {
                ret = jQuery.filter(selector, ret);
            }
            if (this.length > 1) {
                // Remove duplicates
                if (!guaranteedUnique[name]) {
                    ret = jQuery.unique(ret);
                }
                // Reverse order for parents* and prev-derivatives
                if (rparentsprev.test(name)) {
                    ret = ret.reverse();
                }
            }
            return this.pushStack(ret);
        };
    });
    jQuery.extend({
        filter: function (expr, elems, not) {
            var elem = elems[0];
            if (not) {
                expr = ":not(" + expr + ")";
            }
            return elems.length === 1 && elem.nodeType === 1 ?
                jQuery.find.matchesSelector(elem, expr) ? [elem] : [] :
                jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
                    return elem.nodeType === 1;
                }));
        },
        dir: function (elem, dir, until) {
            var matched = [], cur = elem[dir];
            while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                if (cur.nodeType === 1) {
                    matched.push(cur);
                }
                cur = cur[dir];
            }
            return matched;
        },
        sibling: function (n, elem) {
            var r = [];
            for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    r.push(n);
                }
            }
            return r;
        }
    });
    // Implement the identical functionality for filter and not
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
                /* jshint -W018 */
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function (elem) {
                return (elem === qualifier) !== not;
            });
        }
        if (typeof qualifier === "string") {
            if (isSimple.test(qualifier)) {
                return jQuery.filter(qualifier, elements, not);
            }
            qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function (elem) {
            return (jQuery.inArray(elem, qualifier) >= 0) !== not;
        });
    }
    function createSafeFragment(document) {
        var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment();
        if (safeFrag.createElement) {
            while (list.length) {
                safeFrag.createElement(list.pop());
            }
        }
        return safeFrag;
    }
    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
        "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g, rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"), rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, manipulation_rcheckableType = /^(?:checkbox|radio)$/i, 
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, 
    // We have to close these tags to support XHTML (#13200)
    wrapMap = {
        option: [1, "<select multiple='multiple'>", "</select>"],
        legend: [1, "<fieldset>", "</fieldset>"],
        area: [1, "<map>", "</map>"],
        param: [1, "<object>", "</object>"],
        thead: [1, "<table>", "</table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
        // unless wrapped in a div with non-breaking characters in front of it.
        _default: jQuery.support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
    }, safeFragment = createSafeFragment(document), fragmentDiv = safeFragment.appendChild(document.createElement("div"));
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    jQuery.fn.extend({
        text: function (value) {
            return jQuery.access(this, function (value) {
                return value === undefined ?
                    jQuery.text(this) :
                    this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
            }, null, value, arguments.length);
        },
        append: function () {
            return this.domManip(arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function () {
            return this.domManip(arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function () {
            return this.domManip(arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function () {
            return this.domManip(arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        // keepData is for internal use only--do not document
        remove: function (selector, keepData) {
            var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
            for (; (elem = elems[i]) != null; i++) {
                if (!keepData && elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem));
                }
                if (elem.parentNode) {
                    if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                        setGlobalEval(getAll(elem, "script"));
                    }
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        empty: function () {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
                // Remove element nodes and prevent memory leaks
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                }
                // Remove any remaining nodes
                while (elem.firstChild) {
                    elem.removeChild(elem.firstChild);
                }
                // If this is a select, ensure that it displays empty (#12336)
                // Support: IE<9
                if (elem.options && jQuery.nodeName(elem, "select")) {
                    elem.options.length = 0;
                }
            }
            return this;
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function (value) {
            return jQuery.access(this, function (value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined) {
                    return elem.nodeType === 1 ?
                        elem.innerHTML.replace(rinlinejQuery, "") :
                        undefined;
                }
                // See if we can take a shortcut and just use innerHTML
                if (typeof value === "string" && !rnoInnerhtml.test(value) &&
                    (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) &&
                    (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) &&
                    !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (; i < l; i++) {
                            // Remove element nodes and prevent memory leaks
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                        // If using innerHTML throws an exception, use the fallback method
                    }
                    catch (e) { }
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function () {
            var 
            // Snapshot the DOM in case .domManip sweeps something relevant into its fragment
            args = jQuery.map(this, function (elem) {
                return [elem.nextSibling, elem.parentNode];
            }), i = 0;
            // Make the changes, replacing each context element with the new content
            this.domManip(arguments, function (elem) {
                var next = args[i++], parent = args[i++];
                if (parent) {
                    // Don't use the snapshot next if it has moved (#13810)
                    if (next && next.parentNode !== parent) {
                        next = this.nextSibling;
                    }
                    jQuery(this).remove();
                    parent.insertBefore(elem, next);
                }
                // Allow new content to include elements from the context set
            }, true);
            // Force removal if there was no new content (e.g., from empty arguments)
            return i ? this : this.remove();
        },
        detach: function (selector) {
            return this.remove(selector, true);
        },
        domManip: function (args, callback, allowIntersection) {
            // Flatten any nested arrays
            args = core_concat.apply([], args);
            var first, node, hasScripts, scripts, doc, fragment, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            // We can't cloneNode fragments that contain checked, in WebKit
            if (isFunction || !(l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test(value))) {
                return this.each(function (index) {
                    var self = set.eq(index);
                    if (isFunction) {
                        args[0] = value.call(this, index, self.html());
                    }
                    self.domManip(args, callback, allowIntersection);
                });
            }
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, !allowIntersection && this);
                first = fragment.firstChild;
                if (fragment.childNodes.length === 1) {
                    fragment = first;
                }
                if (first) {
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;
                    // Use the original fragment for the last item instead of the first because it can end up
                    // being emptied incorrectly in certain situations (#8070).
                    for (; i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);
                            // Keep references to cloned scripts for later restoration
                            if (hasScripts) {
                                jQuery.merge(scripts, getAll(node, "script"));
                            }
                        }
                        callback.call(this[i], node, i);
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        // Reenable scripts
                        jQuery.map(scripts, restoreScript);
                        // Evaluate executable scripts on first document insertion
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || "") &&
                                !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {
                                if (node.src) {
                                    // Hope ajax is available...
                                    jQuery._evalUrl(node.src);
                                }
                                else {
                                    jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
                                }
                            }
                        }
                    }
                    // Fix #11809: Avoid leaking memory
                    fragment = first = null;
                }
            }
            return this;
        }
    });
    // Support: IE<8
    // Manipulating tables requires a tbody
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") &&
            jQuery.nodeName(content.nodeType === 1 ? content : content.firstChild, "tr") ?
            elem.getElementsByTagName("tbody")[0] ||
                elem.appendChild(elem.ownerDocument.createElement("tbody")) :
            elem;
    }
    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript(elem) {
        elem.type = (jQuery.find.attr(elem, "type") !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1];
        }
        else {
            elem.removeAttribute("type");
        }
        return elem;
    }
    // Mark scripts as having already been evaluated
    function setGlobalEval(elems, refElements) {
        var elem, i = 0;
        for (; (elem = elems[i]) != null; i++) {
            jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
        }
    }
    function cloneCopyEvent(src, dest) {
        if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
            return;
        }
        var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
        if (events) {
            delete curData.handle;
            curData.events = {};
            for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                    jQuery.event.add(dest, type, events[type][i]);
                }
            }
        }
        // make the cloned public data object a copy from the original
        if (curData.data) {
            curData.data = jQuery.extend({}, curData.data);
        }
    }
    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;
        // We do not need to do anything for non-Elements
        if (dest.nodeType !== 1) {
            return;
        }
        nodeName = dest.nodeName.toLowerCase();
        // IE6-8 copies events bound via attachEvent when using cloneNode.
        if (!jQuery.support.noCloneEvent && dest[jQuery.expando]) {
            data = jQuery._data(dest);
            for (e in data.events) {
                jQuery.removeEvent(dest, e, data.handle);
            }
            // Event data gets referenced instead of copied if the expando gets copied too
            dest.removeAttribute(jQuery.expando);
        }
        // IE blanks contents when cloning scripts, and tries to evaluate newly-set text
        if (nodeName === "script" && dest.text !== src.text) {
            disableScript(dest).text = src.text;
            restoreScript(dest);
            // IE6-10 improperly clones children of object elements using classid.
            // IE10 throws NoModificationAllowedError if parent is null, #12132.
        }
        else if (nodeName === "object") {
            if (dest.parentNode) {
                dest.outerHTML = src.outerHTML;
            }
            // This path appears unavoidable for IE9. When cloning an object
            // element in IE9, the outerHTML strategy above is not sufficient.
            // If the src has innerHTML and the destination does not,
            // copy the src.innerHTML into the dest.innerHTML. #10324
            if (jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))) {
                dest.innerHTML = src.innerHTML;
            }
        }
        else if (nodeName === "input" && manipulation_rcheckableType.test(src.type)) {
            // IE6-8 fails to persist the checked state of a cloned checkbox
            // or radio button. Worse, IE6-7 fail to give the cloned element
            // a checked appearance if the defaultChecked value isn't also set
            dest.defaultChecked = dest.checked = src.checked;
            // IE6-7 get confused and end up setting the value of a cloned
            // checkbox/radio button to an empty string instead of "on"
            if (dest.value !== src.value) {
                dest.value = src.value;
            }
            // IE6-8 fails to return the selected option to the default selected
            // state when cloning options
        }
        else if (nodeName === "option") {
            dest.defaultSelected = dest.selected = src.defaultSelected;
            // IE6-8 fails to set the defaultValue to the correct value when
            // cloning other types of input fields
        }
        else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function (name, original) {
        jQuery.fn[name] = function (selector) {
            var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1;
            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                // Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
                core_push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    function getAll(context, tag) {
        var elems, elem, i = 0, found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName(tag || "*") :
            typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll(tag || "*") :
                undefined;
        if (!found) {
            for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {
                if (!tag || jQuery.nodeName(elem, tag)) {
                    found.push(elem);
                }
                else {
                    jQuery.merge(found, getAll(elem, tag));
                }
            }
        }
        return tag === undefined || tag && jQuery.nodeName(context, tag) ?
            jQuery.merge([context], found) :
            found;
    }
    // Used in buildFragment, fixes the defaultChecked property
    function fixDefaultChecked(elem) {
        if (manipulation_rcheckableType.test(elem.type)) {
            elem.defaultChecked = elem.checked;
        }
    }
    jQuery.extend({
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements, inPage = jQuery.contains(elem.ownerDocument, elem);
            if (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
                clone = elem.cloneNode(true);
                // IE<=8 does not properly clone detached, unknown element nodes
            }
            else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
            }
            if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
                (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
                destElements = getAll(clone);
                srcElements = getAll(elem);
                // Fix all IE cloning issues
                for (i = 0; (node = srcElements[i]) != null; ++i) {
                    // Ensure that the destination node is not null; Fixes #9587
                    if (destElements[i]) {
                        fixCloneNodeIssues(node, destElements[i]);
                    }
                }
            }
            // Copy the events from the original to the clone
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0; (node = srcElements[i]) != null; i++) {
                        cloneCopyEvent(node, destElements[i]);
                    }
                }
                else {
                    cloneCopyEvent(elem, clone);
                }
            }
            // Preserve script evaluation history
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            destElements = srcElements = node = null;
            // Return the cloned set
            return clone;
        },
        buildFragment: function (elems, context, scripts, selection) {
            var j, elem, contains, tmp, tag, tbody, wrap, l = elems.length, 
            // Ensure a safe fragment
            safe = createSafeFragment(context), nodes = [], i = 0;
            for (; i < l; i++) {
                elem = elems[i];
                if (elem || elem === 0) {
                    // Add nodes directly
                    if (jQuery.type(elem) === "object") {
                        jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
                        // Convert non-html into a text node
                    }
                    else if (!rhtml.test(elem)) {
                        nodes.push(context.createTextNode(elem));
                        // Convert html into DOM nodes
                    }
                    else {
                        tmp = tmp || safe.appendChild(context.createElement("div"));
                        // Deserialize a standard representation
                        tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                        wrap = wrapMap[tag] || wrapMap._default;
                        tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                        // Descend through wrappers to the right content
                        j = wrap[0];
                        while (j--) {
                            tmp = tmp.lastChild;
                        }
                        // Manually add leading whitespace removed by IE
                        if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                            nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
                        }
                        // Remove IE's autoinserted <tbody> from table fragments
                        if (!jQuery.support.tbody) {
                            // String was a <table>, *may* have spurious <tbody>
                            elem = tag === "table" && !rtbody.test(elem) ?
                                tmp.firstChild :
                                // String was a bare <thead> or <tfoot>
                                wrap[1] === "<table>" && !rtbody.test(elem) ?
                                    tmp :
                                    0;
                            j = elem && elem.childNodes.length;
                            while (j--) {
                                if (jQuery.nodeName((tbody = elem.childNodes[j]), "tbody") && !tbody.childNodes.length) {
                                    elem.removeChild(tbody);
                                }
                            }
                        }
                        jQuery.merge(nodes, tmp.childNodes);
                        // Fix #12392 for WebKit and IE > 9
                        tmp.textContent = "";
                        // Fix #12392 for oldIE
                        while (tmp.firstChild) {
                            tmp.removeChild(tmp.firstChild);
                        }
                        // Remember the top-level container for proper cleanup
                        tmp = safe.lastChild;
                    }
                }
            }
            // Fix #11356: Clear elements from fragment
            if (tmp) {
                safe.removeChild(tmp);
            }
            // Reset defaultChecked for any radios and checkboxes
            // about to be appended to the DOM in IE 6/7 (#8060)
            if (!jQuery.support.appendChecked) {
                jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
            }
            i = 0;
            while ((elem = nodes[i++])) {
                // #4087 - If origin and destination elements are the same, and this is
                // that element, do not do anything
                if (selection && jQuery.inArray(elem, selection) !== -1) {
                    continue;
                }
                contains = jQuery.contains(elem.ownerDocument, elem);
                // Append to fragment
                tmp = getAll(safe.appendChild(elem), "script");
                // Preserve script evaluation history
                if (contains) {
                    setGlobalEval(tmp);
                }
                // Capture executables
                if (scripts) {
                    j = 0;
                    while ((elem = tmp[j++])) {
                        if (rscriptType.test(elem.type || "")) {
                            scripts.push(elem);
                        }
                    }
                }
            }
            tmp = null;
            return safe;
        },
        cleanData: function (elems, /* internal */ acceptData) {
            var elem, type, id, data, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, deleteExpando = jQuery.support.deleteExpando, special = jQuery.event.special;
            for (; (elem = elems[i]) != null; i++) {
                if (acceptData || jQuery.acceptData(elem)) {
                    id = elem[internalKey];
                    data = id && cache[id];
                    if (data) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                    // This is a shortcut to avoid jQuery.event.remove's overhead
                                }
                                else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        // Remove cache only if it was not already removed by jQuery.event.remove
                        if (cache[id]) {
                            delete cache[id];
                            // IE does not allow us to delete expando properties from nodes,
                            // nor does it have a removeAttribute function on Document nodes;
                            // we must handle all of these cases
                            if (deleteExpando) {
                                delete elem[internalKey];
                            }
                            else if (typeof elem.removeAttribute !== core_strundefined) {
                                elem.removeAttribute(internalKey);
                            }
                            else {
                                elem[internalKey] = null;
                            }
                            core_deletedIds.push(id);
                        }
                    }
                }
            }
        },
        _evalUrl: function (url) {
            return jQuery.ajax({
                url: url,
                type: "GET",
                dataType: "script",
                async: false,
                global: false,
                "throws": true
            });
        }
    });
    jQuery.fn.extend({
        wrapAll: function (html) {
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }
            if (this[0]) {
                // The elements to wrap the target around
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function () {
                    var elem = this;
                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function (html) {
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function () {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                }
                else {
                    self.append(html);
                }
            });
        },
        wrap: function (html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function (i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function () {
            return this.parent().each(function () {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        }
    });
    var iframe, getStyles, curCSS, ralpha = /alpha\([^)]*\)/i, ropacity = /opacity\s*=\s*([^)]*)/, rposition = /^(top|right|bottom|left)$/, 
    // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/, rmargin = /^margin/, rnumsplit = new RegExp("^(" + core_pnum + ")(.*)$", "i"), rnumnonpx = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i"), rrelNum = new RegExp("^([+-])=(" + core_pnum + ")", "i"), elemdisplay = { BODY: "block" }, cssShow = { position: "absolute", visibility: "hidden", display: "block" }, cssNormalTransform = {
        letterSpacing: 0,
        fontWeight: 400
    }, cssExpand = ["Top", "Right", "Bottom", "Left"], cssPrefixes = ["Webkit", "O", "Moz", "ms"];
    // return a css property mapped to a potentially vendor prefixed property
    function vendorPropName(style, name) {
        // shortcut for names that are not vendor prefixed
        if (name in style) {
            return name;
        }
        // check for vendor prefixed names
        var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) {
                return name;
            }
        }
        return origName;
    }
    function isHidden(elem, el) {
        // isHidden might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
    }
    function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            values[index] = jQuery._data(elem, "olddisplay");
            display = elem.style.display;
            if (show) {
                // Reset the inline display of this element to learn if it is
                // being hidden by cascaded rules or not
                if (!values[index] && display === "none") {
                    elem.style.display = "";
                }
                // Set elements which have been overridden with display: none
                // in a stylesheet to whatever the default browser style is
                // for such an element
                if (elem.style.display === "" && isHidden(elem)) {
                    values[index] = jQuery._data(elem, "olddisplay", css_defaultDisplay(elem.nodeName));
                }
            }
            else {
                if (!values[index]) {
                    hidden = isHidden(elem);
                    if (display && display !== "none" || !hidden) {
                        jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
                    }
                }
            }
        }
        // Set the display of most of the elements in a second loop
        // to avoid the constant reflow
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            if (!show || elem.style.display === "none" || elem.style.display === "") {
                elem.style.display = show ? values[index] || "" : "none";
            }
        }
        return elements;
    }
    jQuery.fn.extend({
        css: function (name, value) {
            return jQuery.access(this, function (elem, name, value) {
                var len, styles, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ?
                    jQuery.style(elem, name, value) :
                    jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function () {
            return showHide(this, true);
        },
        hide: function () {
            return showHide(this);
        },
        toggle: function (state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
            }
            return this.each(function () {
                if (isHidden(this)) {
                    jQuery(this).show();
                }
                else {
                    jQuery(this).hide();
                }
            });
        }
    });
    jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function (elem, computed) {
                    if (computed) {
                        // We should always get a number back from opacity
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
            "columnCount": true,
            "fillOpacity": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {
            // normalize float css property
            "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
        },
        // Get and set the style property on a DOM Node
        style: function (elem, name, value, extra) {
            // Don't set styles on text and comment nodes
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            // Make sure that we're working with the right name
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            // Check if we're setting a value
            if (value !== undefined) {
                type = typeof value;
                // convert relative number strings (+= or -=) to relative numbers. #7345
                if (type === "string" && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    // Fixes bug #9237
                    type = "number";
                }
                // Make sure that NaN and null values aren't set. See: #7116
                if (value == null || type === "number" && isNaN(value)) {
                    return;
                }
                // If a number was passed in, add 'px' to the (except for certain CSS properties)
                if (type === "number" && !jQuery.cssNumber[origName]) {
                    value += "px";
                }
                // Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
                // but it would mean to define eight (for every problematic property) identical functions
                if (!jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit";
                }
                // If a hook was provided, use that value, otherwise just set the specified value
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    // Wrapped to prevent IE from throwing errors when 'invalid' values are provided
                    // Fixes bug #5509
                    try {
                        style[name] = value;
                    }
                    catch (e) { }
                }
            }
            else {
                // If a hook was provided get the non-computed value from there
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                // Otherwise just get the value from the style object
                return style[name];
            }
        },
        css: function (elem, name, extra, styles) {
            var num, val, hooks, origName = jQuery.camelCase(name);
            // Make sure that we're working with the right name
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            // If a hook was provided get the computed value from there
            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
            }
            // Otherwise, if a way to get the computed value exists, use that
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            //convert "normal" to computed value
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            // Return, converting to number if forced or a qualifier was provided and val looks numeric
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        }
    });
    // NOTE: we've included the "window" in window.getComputedStyle
    // because jsdom on node.js will break without it.
    if (window.getComputedStyle) {
        getStyles = function (elem) {
            return window.getComputedStyle(elem, null);
        };
        curCSS = function (elem, name, _computed) {
            var width, minWidth, maxWidth, computed = _computed || getStyles(elem), 
            // getPropertyValue is only needed for .css('filter') in IE9, see #12537
            ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined, style = elem.style;
            if (computed) {
                if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                    ret = jQuery.style(elem, name);
                }
                // A tribute to the "awesome hack by Dean Edwards"
                // Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
                // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
                // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
                if (rnumnonpx.test(ret) && rmargin.test(name)) {
                    // Remember the original values
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
                    // Put in the new values to get a computed value out
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
                    // Revert the changed values
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }
            return ret;
        };
    }
    else if (document.documentElement.currentStyle) {
        getStyles = function (elem) {
            return elem.currentStyle;
        };
        curCSS = function (elem, name, _computed) {
            var left, rs, rsLeft, computed = _computed || getStyles(elem), ret = computed ? computed[name] : undefined, style = elem.style;
            // Avoid setting ret to empty string here
            // so we don't default to auto
            if (ret == null && style && style[name]) {
                ret = style[name];
            }
            // From the awesome hack by Dean Edwards
            // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
            // If we're not dealing with a regular pixel number
            // but a number that has a weird ending, we need to convert it to pixels
            // but not position css attributes, as those are proportional to the parent element instead
            // and we can't measure the parent instead because it might trigger a "stacking dolls" problem
            if (rnumnonpx.test(ret) && !rposition.test(name)) {
                // Remember the original values
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;
                // Put in the new values to get a computed value out
                if (rsLeft) {
                    rs.left = elem.currentStyle.left;
                }
                style.left = name === "fontSize" ? "1em" : ret;
                ret = style.pixelLeft + "px";
                // Revert the changed values
                style.left = left;
                if (rsLeft) {
                    rs.left = rsLeft;
                }
            }
            return ret === "" ? "auto" : ret;
        };
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ?
            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") :
            value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ?
            // If we already have the right measurement, avoid augmentation
            4 :
            // Otherwise initialize for horizontal or vertical properties
            name === "width" ? 1 : 0, val = 0;
        for (; i < 4; i += 2) {
            // both box models exclude margin, so add it if we want it
            if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }
            if (isBorderBox) {
                // border-box includes padding, so remove it if we want content
                if (extra === "content") {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }
                // at this point, extra isn't border nor margin, so remove border
                if (extra !== "margin") {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
            else {
                // at this point, extra isn't content, so add padding
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                // at this point, extra isn't content nor padding, so add border
                if (extra !== "padding") {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        // Start with offset property, which is equivalent to the border-box value
        var valueIsBorderBox = true, val = name === "width" ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";
        // some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if (val <= 0 || val == null) {
            // Fall back to computed then uncomputed css if necessary
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }
            // Computed unit is not pixels. Stop here and return.
            if (rnumnonpx.test(val)) {
                return val;
            }
            // we need the check for style in case a browser which returns unreliable values
            // for getComputedStyle silently falls back to the reliable elem.style
            valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);
            // Normalize "", auto, and prepare for extra
            val = parseFloat(val) || 0;
        }
        // use the active box-sizing model to add/subtract irrelevant styles
        return (val +
            augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles)) + "px";
    }
    // Try to determine the default display value of an element
    function css_defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            // If the simple way fails, read from inside an iframe
            if (display === "none" || !display) {
                // Use the already-created iframe if possible
                iframe = (iframe ||
                    jQuery("<iframe frameborder='0' width='0' height='0'/>")
                        .css("cssText", "display:block !important")).appendTo(doc.documentElement);
                // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write("<!doctype html><html><body>");
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            // Store the correct default display
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    // Called ONLY from within css_defaultDisplay
    function actualDisplay(name, doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = jQuery.css(elem[0], "display");
        elem.remove();
        return display;
    }
    jQuery.each(["height", "width"], function (i, name) {
        jQuery.cssHooks[name] = {
            get: function (elem, computed, extra) {
                if (computed) {
                    // certain elements can have dimension info if we invisibly show them
                    // however, it must have a current display style that would benefit from this
                    return elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, "display")) ?
                        jQuery.swap(elem, cssShow, function () {
                            return getWidthOrHeight(elem, name, extra);
                        }) :
                        getWidthOrHeight(elem, name, extra);
                }
            },
            set: function (elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ?
                    augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
            }
        };
    });
    if (!jQuery.support.opacity) {
        jQuery.cssHooks.opacity = {
            get: function (elem, computed) {
                // IE uses filters for opacity
                return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ?
                    (0.01 * parseFloat(RegExp.$1)) + "" :
                    computed ? "1" : "";
            },
            set: function (elem, value) {
                var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";
                // IE has trouble with opacity if it does not have layout
                // Force it by setting the zoom level
                style.zoom = 1;
                // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
                // if value === "", then remove inline opacity #12685
                if ((value >= 1 || value === "") &&
                    jQuery.trim(filter.replace(ralpha, "")) === "" &&
                    style.removeAttribute) {
                    // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
                    // if "filter:" is present at all, clearType is disabled, we want to avoid this
                    // style.removeAttribute is IE Only, but so apparently is this code path...
                    style.removeAttribute("filter");
                    // if there is no filter style applied in a css rule or unset inline opacity, we are done
                    if (value === "" || currentStyle && !currentStyle.filter) {
                        return;
                    }
                }
                // otherwise, set new filter values
                style.filter = ralpha.test(filter) ?
                    filter.replace(ralpha, opacity) :
                    filter + " " + opacity;
            }
        };
    }
    // These hooks cannot be added until DOM ready because the support test
    // for it is not run until after DOM ready
    jQuery(function () {
        if (!jQuery.support.reliableMarginRight) {
            jQuery.cssHooks.marginRight = {
                get: function (elem, computed) {
                    if (computed) {
                        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                        // Work around by temporarily setting element display to inline-block
                        return jQuery.swap(elem, { "display": "inline-block" }, curCSS, [elem, "marginRight"]);
                    }
                }
            };
        }
        // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
        // getComputedStyle returns percent when specified for top/left/bottom/right
        // rather than make the css module depend on the offset module, we just check for it here
        if (!jQuery.support.pixelPosition && jQuery.fn.position) {
            jQuery.each(["top", "left"], function (i, prop) {
                jQuery.cssHooks[prop] = {
                    get: function (elem, computed) {
                        if (computed) {
                            computed = curCSS(elem, prop);
                            // if curCSS returns percentage, fallback to offset
                            return rnumnonpx.test(computed) ?
                                jQuery(elem).position()[prop] + "px" :
                                computed;
                        }
                    }
                };
            });
        }
    });
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function (elem) {
            // Support: Opera <= 12.12
            // Opera reports offsetWidths and offsetHeights less than zero on some elements
            return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
                (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css(elem, "display")) === "none");
        };
        jQuery.expr.filters.visible = function (elem) {
            return !jQuery.expr.filters.hidden(elem);
        };
    }
    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function (value) {
                var i = 0, expanded = {}, 
                // assumes a single number if not a string
                parts = typeof value === "string" ? value.split(" ") : [value];
                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] =
                        parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    jQuery.fn.extend({
        serialize: function () {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function () {
            return this.map(function () {
                // Can add propHook for "elements" to filter or add form elements
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            })
                .filter(function () {
                var type = this.type;
                // Use .is(":disabled") so that fieldset[disabled] works
                return this.name && !jQuery(this).is(":disabled") &&
                    rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) &&
                    (this.checked || !manipulation_rcheckableType.test(type));
            })
                .map(function (i, elem) {
                var val = jQuery(this).val();
                return val == null ?
                    null :
                    jQuery.isArray(val) ?
                        jQuery.map(val, function (val) {
                            return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
                        }) :
                        { name: elem.name, value: val.replace(rCRLF, "\r\n") };
            }).get();
        }
    });
    //Serialize an array of form elements or a set of
    //key/values into a query string
    jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, value) {
            // If value is a function, invoke it and return its value
            value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
        };
        // Set traditional to true for jQuery <= 1.3.2 behavior.
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
        // If an array was passed in, assume that it is an array of form elements.
        if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
            // Serialize the form elements
            jQuery.each(a, function () {
                add(this.name, this.value);
            });
        }
        else {
            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        // Return the resulting serialization
        return s.join("&").replace(r20, "+");
    };
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
            // Serialize array item.
            jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {
                    // Treat each array item as a scalar.
                    add(prefix, v);
                }
                else {
                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
                }
            });
        }
        else if (!traditional && jQuery.type(obj) === "object") {
            // Serialize object item.
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
        }
        else {
            // Serialize scalar item.
            add(prefix, obj);
        }
    }
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " +
        "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
        "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {
        // Handle event binding
        jQuery.fn[name] = function (data, fn) {
            return arguments.length > 0 ?
                this.on(name, null, data, fn) :
                this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function (types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function (types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function (selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function (selector, types, fn) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    var 
    // Document location
    ajaxLocParts, ajaxLocation, ajax_nonce = jQuery.now(), ajax_rquery = /\?/, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/, 
    // Keep a copy of the old load method
    _load = jQuery.fn.load, 
    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {}, 
    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {}, 
    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = "*/".concat("*");
    // #8138, IE may throw an exception when accessing
    // a field from window.location if document.domain has been set
    try {
        ajaxLocation = location.href;
    }
    catch (e) {
        // Use the href attribute of an A element
        // since IE will modify it given document.location
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }
    // Segment location into parts
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {
        // dataTypeExpression is optional and defaults to "*"
        return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];
            if (jQuery.isFunction(func)) {
                // For each dataType in the dataTypeExpression
                while ((dataType = dataTypes[i++])) {
                    // Prepend if requested
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                        // Otherwise append
                    }
                    else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = (structure === transports);
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                }
                else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend(target, src) {
        var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    jQuery.fn.load = function (url, params, callback) {
        if (typeof url !== "string" && _load) {
            return _load.apply(this, arguments);
        }
        var selector, response, type, self = this, off = url.indexOf(" ");
        if (off >= 0) {
            selector = url.slice(off, url.length);
            url = url.slice(0, off);
        }
        // If it's a function
        if (jQuery.isFunction(params)) {
            // We assume that it's the callback
            callback = params;
            params = undefined;
            // Otherwise, build a param string
        }
        else if (params && typeof params === "object") {
            type = "POST";
        }
        // If we have elements to modify, make the request
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                // if "type" variable is undefined, then "GET" method will be used
                type: type,
                dataType: "html",
                data: params
            }).done(function (responseText) {
                // Save response for use in complete callback
                response = arguments;
                self.html(selector ?
                    // If a selector was specified, locate the right elements in a dummy div
                    // Exclude scripts to avoid IE 'Permission Denied' errors
                    jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :
                    // Otherwise use the full result
                    responseText);
            }).complete(callback && function (jqXHR, status) {
                self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
            });
        }
        return this;
    };
    // Attach a bunch of functions for handling common AJAX events
    jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
        jQuery.fn[type] = function (fn) {
            return this.on(type, fn);
        };
    });
    jQuery.extend({
        // Counter for holding the number of active queries
        active: 0,
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
                // Convert anything to text
                "* text": String,
                // Text to html (true = no transformation)
                "text html": true,
                // Evaluate text as a json expression
                "text json": jQuery.parseJSON,
                // Parse text as xml
                "text xml": jQuery.parseXML
            },
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function (target, settings) {
            return settings ?
                // Building a settings object
                ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :
                // Extending ajaxSettings
                ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        // Main method
        ajax: function (url, options) {
            // If url is an object, simulate pre-1.5 signature
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }
            // Force options to be an object
            options = options || {};
            var // Cross-domain detection vars
            parts, 
            // Loop variable
            i, 
            // URL without anti-cache param
            cacheURL, 
            // Response headers as string
            responseHeadersString, 
            // timeout handle
            timeoutTimer, 
            // To know if global events are to be dispatched
            fireGlobals, transport, 
            // Response headers
            responseHeaders, 
            // Create the final options object
            s = jQuery.ajaxSetup({}, options), 
            // Callbacks context
            callbackContext = s.context || s, 
            // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ?
                jQuery(callbackContext) :
                jQuery.event, 
            // Deferreds
            deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), 
            // Status-dependent callbacks
            statusCode = s.statusCode || {}, 
            // Headers (they are sent all at once)
            requestHeaders = {}, requestHeadersNames = {}, 
            // The jqXHR state
            state = 0, 
            // Default abort message
            strAbort = "canceled", 
            // Fake xhr
            jqXHR = {
                readyState: 0,
                // Builds headers hashtable if needed
                getResponseHeader: function (key) {
                    var match;
                    if (state === 2) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while ((match = rheaders.exec(responseHeadersString))) {
                                responseHeaders[match[1].toLowerCase()] = match[2];
                            }
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return match == null ? null : match;
                },
                // Raw string
                getAllResponseHeaders: function () {
                    return state === 2 ? responseHeadersString : null;
                },
                // Caches the header
                setRequestHeader: function (name, value) {
                    var lname = name.toLowerCase();
                    if (!state) {
                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                // Overrides response content-type header
                overrideMimeType: function (type) {
                    if (!state) {
                        s.mimeType = type;
                    }
                    return this;
                },
                // Status-dependent callbacks
                statusCode: function (map) {
                    var code;
                    if (map) {
                        if (state < 2) {
                            for (code in map) {
                                // Lazy-add the new callback in a way that preserves old ones
                                statusCode[code] = [statusCode[code], map[code]];
                            }
                        }
                        else {
                            // Execute the appropriate callbacks
                            jqXHR.always(map[jqXHR.status]);
                        }
                    }
                    return this;
                },
                // Cancel the request
                abort: function (statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) {
                        transport.abort(finalText);
                    }
                    done(0, finalText);
                    return this;
                }
            };
            // Attach deferreds
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            // Remove hash character (#7531: and string promotion)
            // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;
            // Extract dataTypes list
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(core_rnotwhite) || [""];
            // A cross-domain request is in order when we have a protocol:host:port mismatch
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts &&
                    (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] ||
                        (parts[3] || (parts[1] === "http:" ? "80" : "443")) !==
                            (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
            }
            // Convert data if not already a string
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }
            // Apply prefilters
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            // If request was aborted inside a prefilter, stop there
            if (state === 2) {
                return jqXHR;
            }
            // We can fire global events as of now if asked to
            fireGlobals = s.global;
            // Watch for a new set of requests
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }
            // Uppercase the type
            s.type = s.type.toUpperCase();
            // Determine if request has content
            s.hasContent = !rnoContent.test(s.type);
            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            cacheURL = s.url;
            // More options handling for requests with no content
            if (!s.hasContent) {
                // If data is available, append data to url
                if (s.data) {
                    cacheURL = (s.url += (ajax_rquery.test(cacheURL) ? "&" : "?") + s.data);
                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }
                // Add anti-cache in url if needed
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ?
                        // If there is already a '_' parameter, set its value
                        cacheURL.replace(rts, "$1_=" + ajax_nonce++) :
                        // Otherwise add one to the end
                        cacheURL + (ajax_rquery.test(cacheURL) ? "&" : "?") + "_=" + ajax_nonce++;
                }
            }
            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }
            // Set the correct header, if data is being sent
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
                s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
                s.accepts["*"]);
            // Check for headers option
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            // Allow custom headers/mimetypes and early abort
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                // Abort if not done already and return
                return jqXHR.abort();
            }
            // aborting is no longer a cancellation
            strAbort = "abort";
            // Install callbacks on deferreds
            for (i in { success: 1, error: 1, complete: 1 }) {
                jqXHR[i](s[i]);
            }
            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            // If no transport, we auto-abort
            if (!transport) {
                done(-1, "No Transport");
            }
            else {
                jqXHR.readyState = 1;
                // Send global event
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }
                // Timeout
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function () {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                }
                catch (e) {
                    // Propagate exception as error if not done
                    if (state < 2) {
                        done(-1, e);
                        // Simply rethrow otherwise
                    }
                    else {
                        throw e;
                    }
                }
            }
            // Callback for when everything is done
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                // Called once
                if (state === 2) {
                    return;
                }
                // State is "done" now
                state = 2;
                // Clear timeout if it exists
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }
                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;
                // Cache response headers
                responseHeadersString = headers || "";
                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;
                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;
                // Get response data
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                // If successful, handle type chaining
                if (isSuccess) {
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    // if no content
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";
                        // if not modified
                    }
                    else if (status === 304) {
                        statusText = "notmodified";
                        // If we have data, let's convert it
                    }
                    else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                }
                else {
                    // We extract error from statusText
                    // then normalize statusText and status for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                // Success/Error
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                }
                else {
                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                }
                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
                }
                // Complete
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                    // Handle the global AJAX counter
                    if (!(--jQuery.active)) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function (url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });
    jQuery.each(["get", "post"], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
            // shift arguments if data argument was omitted
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });
    /* Handles responses to an ajax request:
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses(s, jqXHR, responses) {
        var firstDataType, ct, finalDataType, type, contents = s.contents, dataTypes = s.dataTypes;
        // Remove auto dataType and get content-type in the process
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }
        // Check if we're dealing with a known content-type
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        }
        else {
            // Try convertible dataTypes
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }
        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    /* Chain conversions given the request and the original response
     * Also sets the responseXXX fields on the jqXHR instance
     */
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, 
        // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice();
        // Create converters map with lowercased keys
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        // Convert to each sequential dataType
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            // Apply the dataFilter if provided
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                // There's only work to do if current dataType is non-auto
                if (current === "*") {
                    current = prev;
                    // Convert response if prev dataType is non-auto and differs from current
                }
                else if (prev !== "*" && prev !== current) {
                    // Seek a direct converter
                    conv = converters[prev + " " + current] || converters["* " + current];
                    // If none found, seek a pair
                    if (!conv) {
                        for (conv2 in converters) {
                            // If conv2 outputs current
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {
                                // If prev can be converted to accepted input
                                conv = converters[prev + " " + tmp[0]] ||
                                    converters["* " + tmp[0]];
                                if (conv) {
                                    // Condense equivalence converters
                                    if (conv === true) {
                                        conv = converters[conv2];
                                        // Otherwise, insert the intermediate dataType
                                    }
                                    else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    // Apply converter (if not an equivalence)
                    if (conv !== true) {
                        // Unless errors are allowed to bubble, catch and return them
                        if (conv && s["throws"]) {
                            response = conv(response);
                        }
                        else {
                            try {
                                response = conv(response);
                            }
                            catch (e) {
                                return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
                            }
                        }
                    }
                }
            }
        }
        return { state: "success", data: response };
    }
    // Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function (text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    // Handle cache's special case and global
    jQuery.ajaxPrefilter("script", function (s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false;
        }
    });
    // Bind script tag hack transport
    jQuery.ajaxTransport("script", function (s) {
        // This transport only deals with cross domain requests
        if (s.crossDomain) {
            var script, head = document.head || jQuery("head")[0] || document.documentElement;
            return {
                send: function (_, callback) {
                    script = document.createElement("script");
                    script.async = true;
                    if (s.scriptCharset) {
                        script.charset = s.scriptCharset;
                    }
                    script.src = s.url;
                    // Attach handlers for all browsers
                    script.onload = script.onreadystatechange = function (_, isAbort) {
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                            // Handle memory leak in IE
                            script.onload = script.onreadystatechange = null;
                            // Remove the script
                            if (script.parentNode) {
                                script.parentNode.removeChild(script);
                            }
                            // Dereference the script
                            script = null;
                            // Callback if not abort
                            if (!isAbort) {
                                callback(200, "success");
                            }
                        }
                    };
                    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    head.insertBefore(script, head.firstChild);
                },
                abort: function () {
                    if (script) {
                        script.onload(undefined, true);
                    }
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function () {
            var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (ajax_nonce++));
            this[callback] = true;
            return callback;
        }
    });
    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?
            "url" :
            typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === "jsonp") {
            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?
                s.jsonpCallback() :
                s.jsonpCallback;
            // Insert callback into url or form data
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            }
            else if (s.jsonp !== false) {
                s.url += (ajax_rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function () {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };
            // force json dataType
            s.dataTypes[0] = "json";
            // Install callback
            overwritten = window[callbackName];
            window[callbackName] = function () {
                responseContainer = arguments;
            };
            // Clean-up function (fires after converters)
            jqXHR.always(function () {
                // Restore preexisting value
                window[callbackName] = overwritten;
                // Save back as free
                if (s[callbackName]) {
                    // make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    // save the callback name for future use
                    oldCallbacks.push(callbackName);
                }
                // Call if it was a function and we have a response
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            // Delegate to script
            return "script";
        }
    });
    var xhrCallbacks, xhrSupported, xhrId = 0, 
    // #5280: Internet Explorer will keep connections alive if we don't abort on unload
    xhrOnUnloadAbort = window.ActiveXObject && function () {
        // Abort all pending requests
        var key;
        for (key in xhrCallbacks) {
            xhrCallbacks[key](undefined, true);
        }
    };
    // Functions to create xhrs
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        }
        catch (e) { }
    }
    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        }
        catch (e) { }
    }
    // Create the request object
    // (This is still attached to ajaxSettings for backward compatibility)
    jQuery.ajaxSettings.xhr = window.ActiveXObject ?
        /* Microsoft failed to properly
         * implement the XMLHttpRequest in IE7 (can't request local files),
         * so we use the ActiveXObject when it is available
         * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
         * we need a fallback.
         */
        function () {
            return !this.isLocal && createStandardXHR() || createActiveXHR();
        } :
        // For all other browsers, use the standard XMLHttpRequest object
        createStandardXHR;
    // Determine support properties
    xhrSupported = jQuery.ajaxSettings.xhr();
    jQuery.support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
    xhrSupported = jQuery.support.ajax = !!xhrSupported;
    // Create transport if the browser can provide an xhr
    if (xhrSupported) {
        jQuery.ajaxTransport(function (s) {
            // Cross domain only allowed if supported through XMLHttpRequest
            if (!s.crossDomain || jQuery.support.cors) {
                var callback;
                return {
                    send: function (headers, complete) {
                        // Get a new xhr
                        var handle, i, xhr = s.xhr();
                        // Open the socket
                        // Passing null username, generates a login popup on Opera (#2865)
                        if (s.username) {
                            xhr.open(s.type, s.url, s.async, s.username, s.password);
                        }
                        else {
                            xhr.open(s.type, s.url, s.async);
                        }
                        // Apply custom fields if provided
                        if (s.xhrFields) {
                            for (i in s.xhrFields) {
                                xhr[i] = s.xhrFields[i];
                            }
                        }
                        // Override mime type if needed
                        if (s.mimeType && xhr.overrideMimeType) {
                            xhr.overrideMimeType(s.mimeType);
                        }
                        // X-Requested-With header
                        // For cross-domain requests, seeing as conditions for a preflight are
                        // akin to a jigsaw puzzle, we simply never set it to be sure.
                        // (it can always be set on a per-request basis or even using ajaxSetup)
                        // For same-domain requests, won't change header if already provided.
                        if (!s.crossDomain && !headers["X-Requested-With"]) {
                            headers["X-Requested-With"] = "XMLHttpRequest";
                        }
                        // Need an extra try/catch for cross domain requests in Firefox 3
                        try {
                            for (i in headers) {
                                xhr.setRequestHeader(i, headers[i]);
                            }
                        }
                        catch (err) { }
                        // Do send the request
                        // This may raise an exception which is actually
                        // handled in jQuery.ajax (so no try/catch here)
                        xhr.send((s.hasContent && s.data) || null);
                        // Listener
                        callback = function (_, isAbort) {
                            var status, responseHeaders, statusText, responses;
                            // Firefox throws exceptions when accessing properties
                            // of an xhr when a network error occurred
                            // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
                            try {
                                // Was never called and is aborted or complete
                                if (callback && (isAbort || xhr.readyState === 4)) {
                                    // Only called once
                                    callback = undefined;
                                    // Do not keep as active anymore
                                    if (handle) {
                                        xhr.onreadystatechange = jQuery.noop;
                                        if (xhrOnUnloadAbort) {
                                            delete xhrCallbacks[handle];
                                        }
                                    }
                                    // If it's an abort
                                    if (isAbort) {
                                        // Abort it manually if needed
                                        if (xhr.readyState !== 4) {
                                            xhr.abort();
                                        }
                                    }
                                    else {
                                        responses = {};
                                        status = xhr.status;
                                        responseHeaders = xhr.getAllResponseHeaders();
                                        // When requesting binary data, IE6-9 will throw an exception
                                        // on any attempt to access responseText (#11426)
                                        if (typeof xhr.responseText === "string") {
                                            responses.text = xhr.responseText;
                                        }
                                        // Firefox throws an exception when accessing
                                        // statusText for faulty cross-domain requests
                                        try {
                                            statusText = xhr.statusText;
                                        }
                                        catch (e) {
                                            // We normalize with Webkit giving an empty statusText
                                            statusText = "";
                                        }
                                        // Filter status for non standard behaviors
                                        // If the request is local and we have data: assume a success
                                        // (success with no data won't get notified, that's the best we
                                        // can do given current implementations)
                                        if (!status && s.isLocal && !s.crossDomain) {
                                            status = responses.text ? 200 : 404;
                                            // IE - #1450: sometimes returns 1223 when it should be 204
                                        }
                                        else if (status === 1223) {
                                            status = 204;
                                        }
                                    }
                                }
                            }
                            catch (firefoxAccessException) {
                                if (!isAbort) {
                                    complete(-1, firefoxAccessException);
                                }
                            }
                            // Call complete if needed
                            if (responses) {
                                complete(status, statusText, responses, responseHeaders);
                            }
                        };
                        if (!s.async) {
                            // if we're in sync mode we fire the callback
                            callback();
                        }
                        else if (xhr.readyState === 4) {
                            // (IE6 & IE7) if it's in cache and has been
                            // retrieved directly we need to fire the callback
                            setTimeout(callback);
                        }
                        else {
                            handle = ++xhrId;
                            if (xhrOnUnloadAbort) {
                                // Create the active xhrs callbacks list if needed
                                // and attach the unload handler
                                if (!xhrCallbacks) {
                                    xhrCallbacks = {};
                                    jQuery(window).unload(xhrOnUnloadAbort);
                                }
                                // Add to list of active xhrs callbacks
                                xhrCallbacks[handle] = callback;
                            }
                            xhr.onreadystatechange = callback;
                        }
                    },
                    abort: function () {
                        if (callback) {
                            callback(undefined, true);
                        }
                    }
                };
            }
        });
    }
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i"), rrun = /queueHooks$/, animationPrefilters = [defaultPrefilter], tweeners = {
        "*": [function (prop, value) {
                var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"), 
                // Starting value computation is required for potential unit mismatches
                start = (jQuery.cssNumber[prop] || unit !== "px" && +target) &&
                    rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
                if (start && start[3] !== unit) {
                    // Trust units reported by jQuery.css
                    unit = unit || start[3];
                    // Make sure we update the tween properties later on
                    parts = parts || [];
                    // Iteratively approximate from a nonzero starting point
                    start = +target || 1;
                    do {
                        // If previous iteration zeroed out, double until we get *something*
                        // Use a string for doubling factor so we don't accidentally see scale as unchanged below
                        scale = scale || ".5";
                        // Adjust and apply
                        start = start / scale;
                        jQuery.style(tween.elem, prop, start + unit);
                        // Update scale, tolerating zero or NaN from tween.cur()
                        // And breaking the loop if scale is unchanged or perfect, or if we've just had enough
                    } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
                }
                // Update tween properties
                if (parts) {
                    start = tween.start = +start || +target || 0;
                    tween.unit = unit;
                    // If a +=/-= token was provided, we're doing a relative animation
                    tween.end = parts[1] ?
                        start + (parts[1] + 1) * parts[2] :
                        +parts[2];
                }
                return tween;
            }]
    };
    // Animations created synchronously will run synchronously
    function createFxNow() {
        setTimeout(function () {
            fxNow = undefined;
        });
        return (fxNow = jQuery.now());
    }
    function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]), index = 0, length = collection.length;
        for (; index < length; index++) {
            if ((tween = collection[index].call(animation, prop, value))) {
                // we're done with this property
                return tween;
            }
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function () {
            // don't match elem in the :animated selector
            delete tick.elem;
        }), tick = function () {
            if (stopped) {
                return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), 
            // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
            temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (; index < length; index++) {
                animation.tweens[index].run(percent);
            }
            deferred.notifyWith(elem, [animation, percent, remaining]);
            if (percent < 1 && length) {
                return remaining;
            }
            else {
                deferred.resolveWith(elem, [animation]);
                return false;
            }
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, { specialEasing: {} }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function (prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function (gotoEnd) {
                var index = 0, 
                // if we are going to the end, we want to run all the tweens
                // otherwise we skip this part
                length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) {
                    return this;
                }
                stopped = true;
                for (; index < length; index++) {
                    animation.tweens[index].run(1);
                }
                // resolve when we played the last frame
                // otherwise, reject
                if (gotoEnd) {
                    deferred.resolveWith(elem, [animation, gotoEnd]);
                }
                else {
                    deferred.rejectWith(elem, [animation, gotoEnd]);
                }
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        // attach callbacks from options
        return animation.progress(animation.opts.progress)
            .done(animation.opts.done, animation.opts.complete)
            .fail(animation.opts.fail)
            .always(animation.opts.always);
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        // camelCase, specialEasing and expand cssHook pass
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                // not quite $.extend, this wont overwrite keys already present.
                // also - reusing 'index' from above because we have the correct "name"
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            }
            else {
                specialEasing[name] = easing;
            }
        }
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweener: function (props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = ["*"];
            }
            else {
                props = props.split(" ");
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        prefilter: function (callback, prepend) {
            if (prepend) {
                animationPrefilters.unshift(callback);
            }
            else {
                animationPrefilters.push(callback);
            }
        }
    });
    function defaultPrefilter(elem, props, opts) {
        /* jshint validthis: true */
        var prop, value, toggle, tween, hooks, oldfire, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = jQuery._data(elem, "fxshow");
        // handle queue: false promises
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function () {
                // doing this makes sure that the complete handler will be called
                // before this completes
                anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        // height/width overflow pass
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
            // Make sure that nothing sneaks out
            // Record all 3 overflow attributes because IE does not
            // change the overflow attribute when overflowX and
            // overflowY are set to the same value
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];
            // Set display property to inline-block for height/width
            // animations on inline elements that are having width/height animated
            if (jQuery.css(elem, "display") === "inline" &&
                jQuery.css(elem, "float") === "none") {
                // inline-level elements accept inline-block;
                // block-level elements need to be inline with layout
                if (!jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === "inline") {
                    style.display = "inline-block";
                }
                else {
                    style.zoom = 1;
                }
            }
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            if (!jQuery.support.shrinkWrapBlocks) {
                anim.always(function () {
                    style.overflow = opts.overflow[0];
                    style.overflowX = opts.overflow[1];
                    style.overflowY = opts.overflow[2];
                });
            }
        }
        // show/hide pass
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                    continue;
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }
        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ("hidden" in dataShow) {
                    hidden = dataShow.hidden;
                }
            }
            else {
                dataShow = jQuery._data(elem, "fxshow", {});
            }
            // store state if its toggle - enables .stop().toggle() to "reverse"
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            }
            else {
                anim.done(function () {
                    jQuery(elem).hide();
                });
            }
            anim.done(function () {
                var prop;
                jQuery._removeData(elem, "fxshow");
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }
        }
    }
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function () {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ?
                hooks.get(this) :
                Tween.propHooks._default.get(this);
        },
        run: function (percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            }
            else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            }
            else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function (tween) {
                var result;
                if (tween.elem[tween.prop] != null &&
                    (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                    return tween.elem[tween.prop];
                }
                // passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails
                // so, simple values such as "10px" are parsed to Float.
                // complex values such as "rotate(1rad)" are returned as is.
                result = jQuery.css(tween.elem, tween.prop, "");
                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function (tween) {
                // use step hook for back compat - use cssHook if its there - use .style if its
                // available and use plain properties where available
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                }
                else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                }
                else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    // Support: IE <=9
    // Panic based approach to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.each(["toggle", "show", "hide"], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ?
                cssFn.apply(this, arguments) :
                this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
            // show any hidden elements after setting opacity to 0
            return this.filter(isHidden).css("opacity", 0).show()
                .end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function (prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
                // Operate on a copy of prop so per-property easing won't be lost
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                // Empty animations, or finishing resolves immediately
                if (empty || jQuery._data(this, "finish")) {
                    anim.stop(true);
                }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ?
                this.each(doAnimation) :
                this.queue(optall.queue, doAnimation);
        },
        stop: function (type, clearQueue, gotoEnd) {
            var stopQueue = function (hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }
            return this.each(function () {
                var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = jQuery._data(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                }
                else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                // start the next in the queue if the last step wasn't forced
                // timers currently will call their complete callbacks, which will dequeue
                // but only if they were gotoEnd
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function (type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function () {
                var index, data = jQuery._data(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                // enable finishing flag on private data
                data.finish = true;
                // empty the queue first
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }
                // look for any active animations, and finish them
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                // look for any animations in the old queue and finish them
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                // turn off finishing flag
                delete data.finish;
            });
        }
    });
    // Generate parameters to create a standard animation
    function genFx(type, includeWidth) {
        var which, attrs = { height: type }, i = 0;
        // if we include width, step value is 1 to do all cssExpand values,
        // if we don't include width, step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" }
    }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing ||
                jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
            opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        // normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }
        // Queueing
        opt.old = opt.complete;
        opt.complete = function () {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.easing = {
        linear: function (p) {
            return p;
        },
        swing: function (p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        }
    };
    jQuery.timers = [];
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.tick = function () {
        var timer, timers = jQuery.timers, i = 0;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
            timer = timers[i];
            // Checks the timer has not already been removed
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function (timer) {
        if (timer() && jQuery.timers.push(timer)) {
            jQuery.fx.start();
        }
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function () {
        if (!timerId) {
            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };
    jQuery.fx.stop = function () {
        clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
    };
    // Back Compat <1.8 extension point
    jQuery.fx.step = {};
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.animated = function (elem) {
            return jQuery.grep(jQuery.timers, function (fn) {
                return elem === fn.elem;
            }).length;
        };
    }
    jQuery.fn.offset = function (options) {
        if (arguments.length) {
            return options === undefined ?
                this :
                this.each(function (i) {
                    jQuery.offset.setOffset(this, options, i);
                });
        }
        var docElem, win, box = { top: 0, left: 0 }, elem = this[0], doc = elem && elem.ownerDocument;
        if (!doc) {
            return;
        }
        docElem = doc.documentElement;
        // Make sure it's not a disconnected DOM node
        if (!jQuery.contains(docElem, elem)) {
            return box;
        }
        // If we don't have gBCR, just use 0,0 rather than error
        // BlackBerry 5, iOS 3 (original iPhone)
        if (typeof elem.getBoundingClientRect !== core_strundefined) {
            box = elem.getBoundingClientRect();
        }
        win = getWindow(doc);
        return {
            top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
            left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
        };
    };
    jQuery.offset = {
        setOffset: function (elem, options, i) {
            var position = jQuery.css(elem, "position");
            // set position first, in-case top/left are set even on static elem
            if (position === "static") {
                elem.style.position = "relative";
            }
            var curElem = jQuery(elem), curOffset = curElem.offset(), curCSSTop = jQuery.css(elem, "top"), curCSSLeft = jQuery.css(elem, "left"), calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1, props = {}, curPosition = {}, curTop, curLeft;
            // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            }
            else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }
            if (options.top != null) {
                props.top = (options.top - curOffset.top) + curTop;
            }
            if (options.left != null) {
                props.left = (options.left - curOffset.left) + curLeft;
            }
            if ("using" in options) {
                options.using.call(elem, props);
            }
            else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        position: function () {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, parentOffset = { top: 0, left: 0 }, elem = this[0];
            // fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
            if (jQuery.css(elem, "position") === "fixed") {
                // we assume that getBoundingClientRect is available when computed position is fixed
                offset = elem.getBoundingClientRect();
            }
            else {
                // Get *real* offsetParent
                offsetParent = this.offsetParent();
                // Get correct offsets
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) {
                    parentOffset = offsetParent.offset();
                }
                // Add offsetParent borders
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
            }
            // Subtract parent offsets and element margins
            // note: when an element has margin: auto the offsetLeft and marginLeft
            // are the same in Safari causing offset.left to incorrectly be 0
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent || docElem;
                while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || docElem;
            });
        }
    });
    // Create scrollLeft and scrollTop methods
    jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
        var top = /Y/.test(prop);
        jQuery.fn[method] = function (val) {
            return jQuery.access(this, function (elem, method, val) {
                var win = getWindow(elem);
                if (val === undefined) {
                    return win ? (prop in win) ? win[prop] :
                        win.document.documentElement[method] :
                        elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());
                }
                else {
                    elem[method] = val;
                }
            }, method, val, arguments.length, null);
        };
    });
    function getWindow(elem) {
        return jQuery.isWindow(elem) ?
            elem :
            elem.nodeType === 9 ?
                elem.defaultView || elem.parentWindow :
                false;
    }
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
        jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {
            // margin is only for outerHeight, outerWidth
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return jQuery.access(this, function (elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) {
                        // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                        // isn't a whole lot we can do. See pull request at this URL for discussion:
                        // https://github.com/jquery/jquery/pull/764
                        return elem.document.documentElement["client" + name];
                    }
                    // Get document width or height
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
                        // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return value === undefined ?
                        // Get width or height on the element, requesting but not forcing parseFloat
                        jQuery.css(elem, type, extra) :
                        // Set width or height on the element
                        jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable, null);
            };
        });
    });
    // Limit scope pollution from any deprecated API
    // (function() {
    // The number of elements contained in the matched element set
    jQuery.fn.size = function () {
        return this.length;
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    // })();
    if (typeof module === "object" && module && typeof module.exports === "object") {
        // Expose jQuery as module.exports in loaders that implement the Node
        // module pattern (including browserify). Do not create the global, since
        // the user will be storing it themselves locally, and globals are frowned
        // upon in the Node module world.
        module.exports = jQuery;
    }
    else {
        // Otherwise expose jQuery to the global object as usual
        window.jQuery = window.$ = jQuery;
        // Register as a named AMD module, since jQuery can be concatenated with other
        // files that may use define, but not via a proper concatenation script that
        // understands anonymous AMD modules. A named AMD is safest and most robust
        // way to register. Lowercase jquery is used because AMD module names are
        // derived from file names, and jQuery is normally delivered in a lowercase
        // file name. Do this after creating the global so that if an AMD module wants
        // to call noConflict to hide this version of jQuery, it will work.
        if (typeof define === "function" && define.amd) {
            define("jquery", [], function () { return jQuery; });
        }
    }
})(window);
/**
 * @license AngularJS v1.3.5
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, document, undefined) {
    'use strict';
    /**
     * @description
     *
     * This object provides a utility for producing rich Error messages within
     * Angular. It can be called as follows:
     *
     * var exampleMinErr = minErr('example');
     * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
     *
     * The above creates an instance of minErr in the example namespace. The
     * resulting error will have a namespaced error code of example.one.  The
     * resulting error will replace {0} with the value of foo, and {1} with the
     * value of bar. The object is not restricted in the number of arguments it can
     * take.
     *
     * If fewer arguments are specified than necessary for interpolation, the extra
     * interpolation markers will be preserved in the final string.
     *
     * Since data will be parsed statically during a build step, some restrictions
     * are applied with respect to how minErr instances are created and called.
     * Instances should have names of the form namespaceMinErr for a minErr created
     * using minErr('namespace') . Error codes, namespaces and template strings
     * should all be static strings, not variables or general expressions.
     *
     * @param {string} module The namespace to use for the new minErr instance.
     * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
     *   error from returned function, for cases when a particular type of error is useful.
     * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
     */
    function minErr(module, ErrorConstructor) {
        ErrorConstructor = ErrorConstructor || Error;
        return function () {
            var code = arguments[0], prefix = '[' + (module ? module + ':' : '') + code + '] ', template = arguments[1], templateArgs = arguments, message, i;
            message = prefix + template.replace(/\{\d+\}/g, function (match) {
                var index = +match.slice(1, -1), arg;
                if (index + 2 < templateArgs.length) {
                    return toDebugString(templateArgs[index + 2]);
                }
                return match;
            });
            message = message + '\nhttp://errors.angularjs.org/1.3.5/' +
                (module ? module + '/' : '') + code;
            for (i = 2; i < arguments.length; i++) {
                message = message + (i == 2 ? '?' : '&') + 'p' + (i - 2) + '=' +
                    encodeURIComponent(toDebugString(arguments[i]));
            }
            return new ErrorConstructor(message);
        };
    }
    /* We need to tell jshint what variables are being exported */
    /* global angular: true,
      msie: true,
      jqLite: true,
      jQuery: true,
      slice: true,
      splice: true,
      push: true,
      toString: true,
      ngMinErr: true,
      angularModule: true,
      uid: true,
      REGEX_STRING_REGEXP: true,
      VALIDITY_STATE_PROPERTY: true,
    
      lowercase: true,
      uppercase: true,
      manualLowercase: true,
      manualUppercase: true,
      nodeName_: true,
      isArrayLike: true,
      forEach: true,
      sortedKeys: true,
      forEachSorted: true,
      reverseParams: true,
      nextUid: true,
      setHashKey: true,
      extend: true,
      int: true,
      inherit: true,
      noop: true,
      identity: true,
      valueFn: true,
      isUndefined: true,
      isDefined: true,
      isObject: true,
      isString: true,
      isNumber: true,
      isDate: true,
      isArray: true,
      isFunction: true,
      isRegExp: true,
      isWindow: true,
      isScope: true,
      isFile: true,
      isBlob: true,
      isBoolean: true,
      isPromiseLike: true,
      trim: true,
      escapeForRegexp: true,
      isElement: true,
      makeMap: true,
      includes: true,
      arrayRemove: true,
      copy: true,
      shallowCopy: true,
      equals: true,
      csp: true,
      concat: true,
      sliceArgs: true,
      bind: true,
      toJsonReplacer: true,
      toJson: true,
      fromJson: true,
      startingTag: true,
      tryDecodeURIComponent: true,
      parseKeyValue: true,
      toKeyValue: true,
      encodeUriSegment: true,
      encodeUriQuery: true,
      angularInit: true,
      bootstrap: true,
      getTestability: true,
      snake_case: true,
      bindJQuery: true,
      assertArg: true,
      assertArgFn: true,
      assertNotHasOwnProperty: true,
      getter: true,
      getBlockNodes: true,
      hasOwnProperty: true,
      createMap: true,
    
      NODE_TYPE_ELEMENT: true,
      NODE_TYPE_TEXT: true,
      NODE_TYPE_COMMENT: true,
      NODE_TYPE_DOCUMENT: true,
      NODE_TYPE_DOCUMENT_FRAGMENT: true,
    */
    ////////////////////////////////////
    /**
     * @ngdoc module
     * @name ng
     * @module ng
     * @description
     *
     * # ng (core module)
     * The ng module is loaded by default when an AngularJS application is started. The module itself
     * contains the essential components for an AngularJS application to function. The table below
     * lists a high level breakdown of each of the services/factories, filters, directives and testing
     * components available within this core module.
     *
     * <div doc-module-components="ng"></div>
     */
    var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;
    // The name of a form control's ValidityState property.
    // This is used so that it's possible for internal tests to create mock ValidityStates.
    var VALIDITY_STATE_PROPERTY = 'validity';
    /**
     * @ngdoc function
     * @name angular.lowercase
     * @module ng
     * @kind function
     *
     * @description Converts the specified string to lowercase.
     * @param {string} string String to be converted to lowercase.
     * @returns {string} Lowercased string.
     */
    var lowercase = function (string) { return isString(string) ? string.toLowerCase() : string; };
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /**
     * @ngdoc function
     * @name angular.uppercase
     * @module ng
     * @kind function
     *
     * @description Converts the specified string to uppercase.
     * @param {string} string String to be converted to uppercase.
     * @returns {string} Uppercased string.
     */
    var uppercase = function (string) { return isString(string) ? string.toUpperCase() : string; };
    var manualLowercase = function (s) {
        /* jshint bitwise: false */
        return isString(s)
            ? s.replace(/[A-Z]/g, function (ch) { return String.fromCharCode(ch.charCodeAt(0) | 32); })
            : s;
    };
    var manualUppercase = function (s) {
        /* jshint bitwise: false */
        return isString(s)
            ? s.replace(/[a-z]/g, function (ch) { return String.fromCharCode(ch.charCodeAt(0) & ~32); })
            : s;
    };
    // String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
    // locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
    // with correct but slower alternatives.
    if ('i' !== 'I'.toLowerCase()) {
        lowercase = manualLowercase;
        uppercase = manualUppercase;
    }
    var msie, // holds major version number for IE, or NaN if UA is not IE.
    jqLite, // delay binding since jQuery could be loaded after us.
    jQuery, // delay binding
    slice = [].slice, splice = [].splice, push = [].push, toString = Object.prototype.toString, ngMinErr = minErr('ng'), 
    /** @name angular */
    angular = window.angular || (window.angular = {}), angularModule, uid = 0;
    /**
     * documentMode is an IE-only property
     * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
     */
    msie = document.documentMode;
    /**
     * @private
     * @param {*} obj
     * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
     *                   String ...)
     */
    function isArrayLike(obj) {
        if (obj == null || isWindow(obj)) {
            return false;
        }
        var length = obj.length;
        if (obj.nodeType === NODE_TYPE_ELEMENT && length) {
            return true;
        }
        return isString(obj) || isArray(obj) || length === 0 ||
            typeof length === 'number' && length > 0 && (length - 1) in obj;
    }
    /**
     * @ngdoc function
     * @name angular.forEach
     * @module ng
     * @kind function
     *
     * @description
     * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
     * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
     * is the value of an object property or an array element, `key` is the object property key or
     * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
     *
     * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
     * using the `hasOwnProperty` method.
     *
     * Unlike ES262's
     * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
     * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
     * return the value provided.
     *
       ```js
         var values = {name: 'misko', gender: 'male'};
         var log = [];
         angular.forEach(values, function(value, key) {
           this.push(key + ': ' + value);
         }, log);
         expect(log).toEqual(['name: misko', 'gender: male']);
       ```
     *
     * @param {Object|Array} obj Object to iterate over.
     * @param {Function} iterator Iterator function.
     * @param {Object=} context Object to become context (`this`) for the iterator function.
     * @returns {Object|Array} Reference to `obj`.
     */
    function forEach(obj, iterator, context) {
        var key, length;
        if (obj) {
            if (isFunction(obj)) {
                for (key in obj) {
                    // Need to check if hasOwnProperty exists,
                    // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
                    if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
                        iterator.call(context, obj[key], key, obj);
                    }
                }
            }
            else if (isArray(obj) || isArrayLike(obj)) {
                var isPrimitive = typeof obj !== 'object';
                for (key = 0, length = obj.length; key < length; key++) {
                    if (isPrimitive || key in obj) {
                        iterator.call(context, obj[key], key, obj);
                    }
                }
            }
            else if (obj.forEach && obj.forEach !== forEach) {
                obj.forEach(iterator, context, obj);
            }
            else {
                for (key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        iterator.call(context, obj[key], key, obj);
                    }
                }
            }
        }
        return obj;
    }
    function sortedKeys(obj) {
        return Object.keys(obj).sort();
    }
    function forEachSorted(obj, iterator, context) {
        var keys = sortedKeys(obj);
        for (var i = 0; i < keys.length; i++) {
            iterator.call(context, obj[keys[i]], keys[i]);
        }
        return keys;
    }
    /**
     * when using forEach the params are value, key, but it is often useful to have key, value.
     * @param {function(string, *)} iteratorFn
     * @returns {function(*, string)}
     */
    function reverseParams(iteratorFn) {
        return function (value, key) { iteratorFn(key, value); };
    }
    /**
     * A consistent way of creating unique IDs in angular.
     *
     * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
     * we hit number precision issues in JavaScript.
     *
     * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
     *
     * @returns {number} an unique alpha-numeric string
     */
    function nextUid() {
        return ++uid;
    }
    /**
     * Set or clear the hashkey for an object.
     * @param obj object
     * @param h the hashkey (!truthy to delete the hashkey)
     */
    function setHashKey(obj, h) {
        if (h) {
            obj.$$hashKey = h;
        }
        else {
            delete obj.$$hashKey;
        }
    }
    /**
     * @ngdoc function
     * @name angular.extend
     * @module ng
     * @kind function
     *
     * @description
     * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
     * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
     * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
     * Note: Keep in mind that `angular.extend` does not support recursive merge (deep copy).
     *
     * @param {Object} dst Destination object.
     * @param {...Object} src Source object(s).
     * @returns {Object} Reference to `dst`.
     */
    function extend(dst) {
        var h = dst.$$hashKey;
        for (var i = 1, ii = arguments.length; i < ii; i++) {
            var obj = arguments[i];
            if (obj) {
                var keys = Object.keys(obj);
                for (var j = 0, jj = keys.length; j < jj; j++) {
                    var key = keys[j];
                    dst[key] = obj[key];
                }
            }
        }
        setHashKey(dst, h);
        return dst;
    }
    function int(str) {
        return parseInt(str, 10);
    }
    function inherit(parent, extra) {
        return extend(Object.create(parent), extra);
    }
    /**
     * @ngdoc function
     * @name angular.noop
     * @module ng
     * @kind function
     *
     * @description
     * A function that performs no operations. This function can be useful when writing code in the
     * functional style.
       ```js
         function foo(callback) {
           var result = calculateResult();
           (callback || angular.noop)(result);
         }
       ```
     */
    function noop() { }
    noop.$inject = [];
    /**
     * @ngdoc function
     * @name angular.identity
     * @module ng
     * @kind function
     *
     * @description
     * A function that returns its first argument. This function is useful when writing code in the
     * functional style.
     *
       ```js
         function transformer(transformationFn, value) {
           return (transformationFn || angular.identity)(value);
         };
       ```
     */
    function identity($) { return $; }
    identity.$inject = [];
    function valueFn(value) { return function () { return value; }; }
    /**
     * @ngdoc function
     * @name angular.isUndefined
     * @module ng
     * @kind function
     *
     * @description
     * Determines if a reference is undefined.
     *
     * @param {*} value Reference to check.
     * @returns {boolean} True if `value` is undefined.
     */
    function isUndefined(value) { return typeof value === 'undefined'; }
    /**
     * @ngdoc function
     * @name angular.isDefined
     * @module ng
     * @kind function
     *
     * @description
     * Determines if a reference is defined.
     *
     * @param {*} value Reference to check.
     * @returns {boolean} True if `value` is defined.
     */
    function isDefined(value) { return typeof value !== 'undefined'; }
    /**
     * @ngdoc function
     * @name angular.isObject
     * @module ng
     * @kind function
     *
     * @description
     * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
     * considered to be objects. Note that JavaScript arrays are objects.
     *
     * @param {*} value Reference to check.
     * @returns {boolean} True if `value` is an `Object` but not `null`.
     */
    function isObject(value) {
        // http://jsperf.com/isobject4
        return value !== null && typeof value === 'object';
    }
    /**
     * @ngdoc function
     * @name angular.isString
     * @module ng
     * @kind function
     *
     * @description
     * Determines if a reference is a `String`.
     *
     * @param {*} value Reference to check.
     * @returns {boolean} True if `value` is a `String`.
     */
    function isString(value) { return typeof value === 'string'; }
    /**
     * @ngdoc function
     * @name angular.isNumber
     * @module ng
     * @kind function
     *
     * @description
     * Determines if a reference is a `Number`.
     *
     * @param {*} value Reference to check.
     * @returns {boolean} True if `value` is a `Number`.
     */
    function isNumber(value) { return typeof value === 'number'; }
    /**
     * @ngdoc function
     * @name angular.isDate
     * @module ng
     * @kind function
     *
     * @description
     * Determines if a value is a date.
     *
     * @param {*} value Reference to check.
     * @returns {boolean} True if `value` is a `Date`.
     */
    function isDate(value) {
        return toString.call(value) === '[object Date]';
    }
    /**
     * @ngdoc function
     * @name angular.isArray
     * @module ng
     * @kind function
     *
     * @description
     * Determines if a reference is an `Array`.
     *
     * @param {*} value Reference to check.
     * @returns {boolean} True if `value` is an `Array`.
     */
    var isArray = Array.isArray;
    /**
     * @ngdoc function
     * @name angular.isFunction
     * @module ng
     * @kind function
     *
     * @description
     * Determines if a reference is a `Function`.
     *
     * @param {*} value Reference to check.
     * @returns {boolean} True if `value` is a `Function`.
     */
    function isFunction(value) { return typeof value === 'function'; }
    /**
     * Determines if a value is a regular expression object.
     *
     * @private
     * @param {*} value Reference to check.
     * @returns {boolean} True if `value` is a `RegExp`.
     */
    function isRegExp(value) {
        return toString.call(value) === '[object RegExp]';
    }
    /**
     * Checks if `obj` is a window object.
     *
     * @private
     * @param {*} obj Object to check
     * @returns {boolean} True if `obj` is a window obj.
     */
    function isWindow(obj) {
        return obj && obj.window === obj;
    }
    function isScope(obj) {
        return obj && obj.$evalAsync && obj.$watch;
    }
    function isFile(obj) {
        return toString.call(obj) === '[object File]';
    }
    function isBlob(obj) {
        return toString.call(obj) === '[object Blob]';
    }
    function isBoolean(value) {
        return typeof value === 'boolean';
    }
    function isPromiseLike(obj) {
        return obj && isFunction(obj.then);
    }
    var trim = function (value) {
        return isString(value) ? value.trim() : value;
    };
    // Copied from:
    // http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
    // Prereq: s is a string.
    var escapeForRegexp = function (s) {
        return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
            replace(/\x08/g, '\\x08');
    };
    /**
     * @ngdoc function
     * @name angular.isElement
     * @module ng
     * @kind function
     *
     * @description
     * Determines if a reference is a DOM element (or wrapped jQuery element).
     *
     * @param {*} value Reference to check.
     * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
     */
    function isElement(node) {
        return !!(node &&
            (node.nodeName // we are a direct element
                || (node.prop && node.attr && node.find))); // we have an on and find method part of jQuery API
    }
    /**
     * @param str 'key1,key2,...'
     * @returns {object} in the form of {key1:true, key2:true, ...}
     */
    function makeMap(str) {
        var obj = {}, items = str.split(","), i;
        for (i = 0; i < items.length; i++)
            obj[items[i]] = true;
        return obj;
    }
    function nodeName_(element) {
        return lowercase(element.nodeName || (element[0] && element[0].nodeName));
    }
    function includes(array, obj) {
        return Array.prototype.indexOf.call(array, obj) != -1;
    }
    function arrayRemove(array, value) {
        var index = array.indexOf(value);
        if (index >= 0)
            array.splice(index, 1);
        return value;
    }
    /**
     * @ngdoc function
     * @name angular.copy
     * @module ng
     * @kind function
     *
     * @description
     * Creates a deep copy of `source`, which should be an object or an array.
     *
     * * If no destination is supplied, a copy of the object or array is created.
     * * If a destination is provided, all of its elements (for array) or properties (for objects)
     *   are deleted and then all elements/properties from the source are copied to it.
     * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
     * * If `source` is identical to 'destination' an exception will be thrown.
     *
     * @param {*} source The source that will be used to make a copy.
     *                   Can be any type, including primitives, `null`, and `undefined`.
     * @param {(Object|Array)=} destination Destination into which the source is copied. If
     *     provided, must be of the same type as `source`.
     * @returns {*} The copy or updated `destination`, if `destination` was specified.
     *
     * @example
     <example module="copyExample">
     <file name="index.html">
     <div ng-controller="ExampleController">
     <form novalidate class="simple-form">
     Name: <input type="text" ng-model="user.name" /><br />
     E-mail: <input type="email" ng-model="user.email" /><br />
     Gender: <input type="radio" ng-model="user.gender" value="male" />male
     <input type="radio" ng-model="user.gender" value="female" />female<br />
     <button ng-click="reset()">RESET</button>
     <button ng-click="update(user)">SAVE</button>
     </form>
     <pre>form = {{user | json}}</pre>
     <pre>master = {{master | json}}</pre>
     </div>
    
     <script>
      angular.module('copyExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.master= {};
    
          $scope.update = function(user) {
            // Example with 1 argument
            $scope.master= angular.copy(user);
          };
    
          $scope.reset = function() {
            // Example with 2 arguments
            angular.copy($scope.master, $scope.user);
          };
    
          $scope.reset();
        }]);
     </script>
     </file>
     </example>
     */
    function copy(source, destination, stackSource, stackDest) {
        if (isWindow(source) || isScope(source)) {
            throw ngMinErr('cpws', "Can't copy! Making copies of Window or Scope instances is not supported.");
        }
        if (!destination) {
            destination = source;
            if (source) {
                if (isArray(source)) {
                    destination = copy(source, [], stackSource, stackDest);
                }
                else if (isDate(source)) {
                    destination = new Date(source.getTime());
                }
                else if (isRegExp(source)) {
                    destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
                    destination.lastIndex = source.lastIndex;
                }
                else if (isObject(source)) {
                    var emptyObject = Object.create(Object.getPrototypeOf(source));
                    destination = copy(source, emptyObject, stackSource, stackDest);
                }
            }
        }
        else {
            if (source === destination)
                throw ngMinErr('cpi', "Can't copy! Source and destination are identical.");
            stackSource = stackSource || [];
            stackDest = stackDest || [];
            if (isObject(source)) {
                var index = stackSource.indexOf(source);
                if (index !== -1)
                    return stackDest[index];
                stackSource.push(source);
                stackDest.push(destination);
            }
            var result;
            if (isArray(source)) {
                destination.length = 0;
                for (var i = 0; i < source.length; i++) {
                    result = copy(source[i], null, stackSource, stackDest);
                    if (isObject(source[i])) {
                        stackSource.push(source[i]);
                        stackDest.push(result);
                    }
                    destination.push(result);
                }
            }
            else {
                var h = destination.$$hashKey;
                if (isArray(destination)) {
                    destination.length = 0;
                }
                else {
                    forEach(destination, function (value, key) {
                        delete destination[key];
                    });
                }
                for (var key in source) {
                    if (source.hasOwnProperty(key)) {
                        result = copy(source[key], null, stackSource, stackDest);
                        if (isObject(source[key])) {
                            stackSource.push(source[key]);
                            stackDest.push(result);
                        }
                        destination[key] = result;
                    }
                }
                setHashKey(destination, h);
            }
        }
        return destination;
    }
    /**
     * Creates a shallow copy of an object, an array or a primitive.
     *
     * Assumes that there are no proto properties for objects.
     */
    function shallowCopy(src, dst) {
        if (isArray(src)) {
            dst = dst || [];
            for (var i = 0, ii = src.length; i < ii; i++) {
                dst[i] = src[i];
            }
        }
        else if (isObject(src)) {
            dst = dst || {};
            for (var key in src) {
                if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
                    dst[key] = src[key];
                }
            }
        }
        return dst || src;
    }
    /**
     * @ngdoc function
     * @name angular.equals
     * @module ng
     * @kind function
     *
     * @description
     * Determines if two objects or two values are equivalent. Supports value types, regular
     * expressions, arrays and objects.
     *
     * Two objects or values are considered equivalent if at least one of the following is true:
     *
     * * Both objects or values pass `===` comparison.
     * * Both objects or values are of the same type and all of their properties are equal by
     *   comparing them with `angular.equals`.
     * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
     * * Both values represent the same regular expression (In JavaScript,
     *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
     *   representation matches).
     *
     * During a property comparison, properties of `function` type and properties with names
     * that begin with `$` are ignored.
     *
     * Scope and DOMWindow objects are being compared only by identify (`===`).
     *
     * @param {*} o1 Object or value to compare.
     * @param {*} o2 Object or value to compare.
     * @returns {boolean} True if arguments are equal.
     */
    function equals(o1, o2) {
        if (o1 === o2)
            return true;
        if (o1 === null || o2 === null)
            return false;
        if (o1 !== o1 && o2 !== o2)
            return true; // NaN === NaN
        var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
        if (t1 == t2) {
            if (t1 == 'object') {
                if (isArray(o1)) {
                    if (!isArray(o2))
                        return false;
                    if ((length = o1.length) == o2.length) {
                        for (key = 0; key < length; key++) {
                            if (!equals(o1[key], o2[key]))
                                return false;
                        }
                        return true;
                    }
                }
                else if (isDate(o1)) {
                    if (!isDate(o2))
                        return false;
                    return equals(o1.getTime(), o2.getTime());
                }
                else if (isRegExp(o1) && isRegExp(o2)) {
                    return o1.toString() == o2.toString();
                }
                else {
                    if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2))
                        return false;
                    keySet = {};
                    for (key in o1) {
                        if (key.charAt(0) === '$' || isFunction(o1[key]))
                            continue;
                        if (!equals(o1[key], o2[key]))
                            return false;
                        keySet[key] = true;
                    }
                    for (key in o2) {
                        if (!keySet.hasOwnProperty(key) &&
                            key.charAt(0) !== '$' &&
                            o2[key] !== undefined &&
                            !isFunction(o2[key]))
                            return false;
                    }
                    return true;
                }
            }
        }
        return false;
    }
    var csp = function () {
        if (isDefined(csp.isActive_))
            return csp.isActive_;
        var active = !!(document.querySelector('[ng-csp]') ||
            document.querySelector('[data-ng-csp]'));
        if (!active) {
            try {
                /* jshint -W031, -W054 */
                new Function('');
                /* jshint +W031, +W054 */
            }
            catch (e) {
                active = true;
            }
        }
        return (csp.isActive_ = active);
    };
    function concat(array1, array2, index) {
        return array1.concat(slice.call(array2, index));
    }
    function sliceArgs(args, startIndex) {
        return slice.call(args, startIndex || 0);
    }
    /* jshint -W101 */
    /**
     * @ngdoc function
     * @name angular.bind
     * @module ng
     * @kind function
     *
     * @description
     * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
     * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
     * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
     * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
     *
     * @param {Object} self Context which `fn` should be evaluated in.
     * @param {function()} fn Function to be bound.
     * @param {...*} args Optional arguments to be prebound to the `fn` function call.
     * @returns {function()} Function that wraps the `fn` with all the specified bindings.
     */
    /* jshint +W101 */
    function bind(self, fn) {
        var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
        if (isFunction(fn) && !(fn instanceof RegExp)) {
            return curryArgs.length
                ? function () {
                    return arguments.length
                        ? fn.apply(self, concat(curryArgs, arguments, 0))
                        : fn.apply(self, curryArgs);
                }
                : function () {
                    return arguments.length
                        ? fn.apply(self, arguments)
                        : fn.call(self);
                };
        }
        else {
            // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
            return fn;
        }
    }
    function toJsonReplacer(key, value) {
        var val = value;
        if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
            val = undefined;
        }
        else if (isWindow(value)) {
            val = '$WINDOW';
        }
        else if (value && document === value) {
            val = '$DOCUMENT';
        }
        else if (isScope(value)) {
            val = '$SCOPE';
        }
        return val;
    }
    /**
     * @ngdoc function
     * @name angular.toJson
     * @module ng
     * @kind function
     *
     * @description
     * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
     * stripped since angular uses this notation internally.
     *
     * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
     * @param {boolean=} pretty If set to true, the JSON output will contain newlines and whitespace.
     * @returns {string|undefined} JSON-ified string representing `obj`.
     */
    function toJson(obj, pretty) {
        if (typeof obj === 'undefined')
            return undefined;
        return JSON.stringify(obj, toJsonReplacer, pretty ? '  ' : null);
    }
    /**
     * @ngdoc function
     * @name angular.fromJson
     * @module ng
     * @kind function
     *
     * @description
     * Deserializes a JSON string.
     *
     * @param {string} json JSON string to deserialize.
     * @returns {Object|Array|string|number} Deserialized thingy.
     */
    function fromJson(json) {
        return isString(json)
            ? JSON.parse(json)
            : json;
    }
    /**
     * @returns {string} Returns the string representation of the element.
     */
    function startingTag(element) {
        element = jqLite(element).clone();
        try {
            // turns out IE does not let you set .html() on elements which
            // are not allowed to have children. So we just ignore it.
            element.empty();
        }
        catch (e) { }
        var elemHtml = jqLite('<div>').append(element).html();
        try {
            return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
                elemHtml.
                    match(/^(<[^>]+>)/)[1].
                    replace(/^<([\w\-]+)/, function (match, nodeName) { return '<' + lowercase(nodeName); });
        }
        catch (e) {
            return lowercase(elemHtml);
        }
    }
    /////////////////////////////////////////////////
    /**
     * Tries to decode the URI component without throwing an exception.
     *
     * @private
     * @param str value potential URI component to check.
     * @returns {boolean} True if `value` can be decoded
     * with the decodeURIComponent function.
     */
    function tryDecodeURIComponent(value) {
        try {
            return decodeURIComponent(value);
        }
        catch (e) {
            // Ignore any invalid uri component
        }
    }
    /**
     * Parses an escaped url query string into key-value pairs.
     * @returns {Object.<string,boolean|Array>}
     */
    function parseKeyValue(/**string*/ keyValue) {
        var obj = {}, key_value, key;
        forEach((keyValue || "").split('&'), function (keyValue) {
            if (keyValue) {
                key_value = keyValue.replace(/\+/g, '%20').split('=');
                key = tryDecodeURIComponent(key_value[0]);
                if (isDefined(key)) {
                    var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
                    if (!hasOwnProperty.call(obj, key)) {
                        obj[key] = val;
                    }
                    else if (isArray(obj[key])) {
                        obj[key].push(val);
                    }
                    else {
                        obj[key] = [obj[key], val];
                    }
                }
            }
        });
        return obj;
    }
    function toKeyValue(obj) {
        var parts = [];
        forEach(obj, function (value, key) {
            if (isArray(value)) {
                forEach(value, function (arrayValue) {
                    parts.push(encodeUriQuery(key, true) +
                        (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
                });
            }
            else {
                parts.push(encodeUriQuery(key, true) +
                    (value === true ? '' : '=' + encodeUriQuery(value, true)));
            }
        });
        return parts.length ? parts.join('&') : '';
    }
    /**
     * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
     * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
     * segments:
     *    segment       = *pchar
     *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
     *    pct-encoded   = "%" HEXDIG HEXDIG
     *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
     *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
     *                     / "*" / "+" / "," / ";" / "="
     */
    function encodeUriSegment(val) {
        return encodeUriQuery(val, true).
            replace(/%26/gi, '&').
            replace(/%3D/gi, '=').
            replace(/%2B/gi, '+');
    }
    /**
     * This method is intended for encoding *key* or *value* parts of query component. We need a custom
     * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
     * encoded per http://tools.ietf.org/html/rfc3986:
     *    query       = *( pchar / "/" / "?" )
     *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
     *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
     *    pct-encoded   = "%" HEXDIG HEXDIG
     *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
     *                     / "*" / "+" / "," / ";" / "="
     */
    function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).
            replace(/%40/gi, '@').
            replace(/%3A/gi, ':').
            replace(/%24/g, '$').
            replace(/%2C/gi, ',').
            replace(/%3B/gi, ';').
            replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
    }
    var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];
    function getNgAttribute(element, ngAttr) {
        var attr, i, ii = ngAttrPrefixes.length;
        element = jqLite(element);
        for (i = 0; i < ii; ++i) {
            attr = ngAttrPrefixes[i] + ngAttr;
            if (isString(attr = element.attr(attr))) {
                return attr;
            }
        }
        return null;
    }
    /**
     * @ngdoc directive
     * @name ngApp
     * @module ng
     *
     * @element ANY
     * @param {angular.Module} ngApp an optional application
     *   {@link angular.module module} name to load.
     * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
     *   created in "strict-di" mode. This means that the application will fail to invoke functions which
     *   do not use explicit function annotation (and are thus unsuitable for minification), as described
     *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
     *   tracking down the root of these bugs.
     *
     * @description
     *
     * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
     * designates the **root element** of the application and is typically placed near the root element
     * of the page - e.g. on the `<body>` or `<html>` tags.
     *
     * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
     * found in the document will be used to define the root element to auto-bootstrap as an
     * application. To run multiple applications in an HTML document you must manually bootstrap them using
     * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
     *
     * You can specify an **AngularJS module** to be used as the root module for the application.  This
     * module will be loaded into the {@link auto.$injector} when the application is bootstrapped and
     * should contain the application code needed or have dependencies on other modules that will
     * contain the code. See {@link angular.module} for more information.
     *
     * In the example below if the `ngApp` directive were not placed on the `html` element then the
     * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
     * would not be resolved to `3`.
     *
     * `ngApp` is the easiest, and most common, way to bootstrap an application.
     *
     <example module="ngAppDemo">
       <file name="index.html">
       <div ng-controller="ngAppDemoController">
         I can add: {{a}} + {{b}} =  {{ a+b }}
       </div>
       </file>
       <file name="script.js">
       angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
         $scope.a = 1;
         $scope.b = 2;
       });
       </file>
     </example>
     *
     * Using `ngStrictDi`, you would see something like this:
     *
     <example ng-app-included="true">
       <file name="index.html">
       <div ng-app="ngAppStrictDemo" ng-strict-di>
           <div ng-controller="GoodController1">
               I can add: {{a}} + {{b}} =  {{ a+b }}
    
               <p>This renders because the controller does not fail to
                  instantiate, by using explicit annotation style (see
                  script.js for details)
               </p>
           </div>
    
           <div ng-controller="GoodController2">
               Name: <input ng-model="name"><br />
               Hello, {{name}}!
    
               <p>This renders because the controller does not fail to
                  instantiate, by using explicit annotation style
                  (see script.js for details)
               </p>
           </div>
    
           <div ng-controller="BadController">
               I can add: {{a}} + {{b}} =  {{ a+b }}
    
               <p>The controller could not be instantiated, due to relying
                  on automatic function annotations (which are disabled in
                  strict mode). As such, the content of this section is not
                  interpolated, and there should be an error in your web console.
               </p>
           </div>
       </div>
       </file>
       <file name="script.js">
       angular.module('ngAppStrictDemo', [])
         // BadController will fail to instantiate, due to relying on automatic function annotation,
         // rather than an explicit annotation
         .controller('BadController', function($scope) {
           $scope.a = 1;
           $scope.b = 2;
         })
         // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
         // due to using explicit annotations using the array style and $inject property, respectively.
         .controller('GoodController1', ['$scope', function($scope) {
           $scope.a = 1;
           $scope.b = 2;
         }])
         .controller('GoodController2', GoodController2);
         function GoodController2($scope) {
           $scope.name = "World";
         }
         GoodController2.$inject = ['$scope'];
       </file>
       <file name="style.css">
       div[ng-controller] {
           margin-bottom: 1em;
           -webkit-border-radius: 4px;
           border-radius: 4px;
           border: 1px solid;
           padding: .5em;
       }
       div[ng-controller^=Good] {
           border-color: #d6e9c6;
           background-color: #dff0d8;
           color: #3c763d;
       }
       div[ng-controller^=Bad] {
           border-color: #ebccd1;
           background-color: #f2dede;
           color: #a94442;
           margin-bottom: 0;
       }
       </file>
     </example>
     */
    function angularInit(element, bootstrap) {
        var appElement, module, config = {};
        // The element `element` has priority over any other element
        forEach(ngAttrPrefixes, function (prefix) {
            var name = prefix + 'app';
            if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
                appElement = element;
                module = element.getAttribute(name);
            }
        });
        forEach(ngAttrPrefixes, function (prefix) {
            var name = prefix + 'app';
            var candidate;
            if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
                appElement = candidate;
                module = candidate.getAttribute(name);
            }
        });
        if (appElement) {
            config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
            bootstrap(appElement, module ? [module] : [], config);
        }
    }
    /**
     * @ngdoc function
     * @name angular.bootstrap
     * @module ng
     * @description
     * Use this function to manually start up angular application.
     *
     * See: {@link guide/bootstrap Bootstrap}
     *
     * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.
     * They must use {@link ng.directive:ngApp ngApp}.
     *
     * Angular will detect if it has been loaded into the browser more than once and only allow the
     * first loaded script to be bootstrapped and will report a warning to the browser console for
     * each of the subsequent scripts. This prevents strange results in applications, where otherwise
     * multiple instances of Angular try to work on the DOM.
     *
     * ```html
     * <!doctype html>
     * <html>
     * <body>
     * <div ng-controller="WelcomeController">
     *   {{greeting}}
     * </div>
     *
     * <script src="angular.js"></script>
     * <script>
     *   var app = angular.module('demo', [])
     *   .controller('WelcomeController', function($scope) {
     *       $scope.greeting = 'Welcome!';
     *   });
     *   angular.bootstrap(document, ['demo']);
     * </script>
     * </body>
     * </html>
     * ```
     *
     * @param {DOMElement} element DOM element which is the root of angular application.
     * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
     *     Each item in the array should be the name of a predefined module or a (DI annotated)
     *     function that will be invoked by the injector as a run block.
     *     See: {@link angular.module modules}
     * @param {Object=} config an object for defining configuration options for the application. The
     *     following keys are supported:
     *
     * * `strictDi` - disable automatic function annotation for the application. This is meant to
     *   assist in finding bugs which break minified code. Defaults to `false`.
     *
     * @returns {auto.$injector} Returns the newly created injector for this app.
     */
    function bootstrap(element, modules, config) {
        if (!isObject(config))
            config = {};
        var defaultConfig = {
            strictDi: false
        };
        config = extend(defaultConfig, config);
        var doBootstrap = function () {
            element = jqLite(element);
            if (element.injector()) {
                var tag = (element[0] === document) ? 'document' : startingTag(element);
                //Encode angle brackets to prevent input from being sanitized to empty string #8683
                throw ngMinErr('btstrpd', "App Already Bootstrapped with this Element '{0}'", tag.replace(/</, '&lt;').replace(/>/, '&gt;'));
            }
            modules = modules || [];
            modules.unshift(['$provide', function ($provide) {
                    $provide.value('$rootElement', element);
                }]);
            if (config.debugInfoEnabled) {
                // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
                modules.push(['$compileProvider', function ($compileProvider) {
                        $compileProvider.debugInfoEnabled(true);
                    }]);
            }
            modules.unshift('ng');
            var injector = createInjector(modules, config.strictDi);
            injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
                function bootstrapApply(scope, element, compile, injector) {
                    scope.$apply(function () {
                        element.data('$injector', injector);
                        compile(element)(scope);
                    });
                }]);
            return injector;
        };
        var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
        var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
        if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
            config.debugInfoEnabled = true;
            window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
        }
        if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
            return doBootstrap();
        }
        window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
        angular.resumeBootstrap = function (extraModules) {
            forEach(extraModules, function (module) {
                modules.push(module);
            });
            doBootstrap();
        };
    }
    /**
     * @ngdoc function
     * @name angular.reloadWithDebugInfo
     * @module ng
     * @description
     * Use this function to reload the current application with debug information turned on.
     * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
     *
     * See {@link ng.$compileProvider#debugInfoEnabled} for more.
     */
    function reloadWithDebugInfo() {
        window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
        window.location.reload();
    }
    /**
     * @name angular.getTestability
     * @module ng
     * @description
     * Get the testability service for the instance of Angular on the given
     * element.
     * @param {DOMElement} element DOM element which is the root of angular application.
     */
    function getTestability(rootElement) {
        return angular.element(rootElement).injector().get('$$testability');
    }
    var SNAKE_CASE_REGEXP = /[A-Z]/g;
    function snake_case(name, separator) {
        separator = separator || '_';
        return name.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
            return (pos ? separator : '') + letter.toLowerCase();
        });
    }
    var bindJQueryFired = false;
    var skipDestroyOnNextJQueryCleanData;
    function bindJQuery() {
        var originalCleanData;
        if (bindJQueryFired) {
            return;
        }
        // bind to jQuery if present;
        jQuery = window.jQuery;
        // Use jQuery if it exists with proper functionality, otherwise default to us.
        // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
        // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
        // versions. It will not work for sure with jQuery <1.7, though.
        if (jQuery && jQuery.fn.on) {
            jqLite = jQuery;
            extend(jQuery.fn, {
                scope: JQLitePrototype.scope,
                isolateScope: JQLitePrototype.isolateScope,
                controller: JQLitePrototype.controller,
                injector: JQLitePrototype.injector,
                inheritedData: JQLitePrototype.inheritedData
            });
            // All nodes removed from the DOM via various jQuery APIs like .remove()
            // are passed through jQuery.cleanData. Monkey-patch this method to fire
            // the $destroy event on all removed nodes.
            originalCleanData = jQuery.cleanData;
            jQuery.cleanData = function (elems) {
                var events;
                if (!skipDestroyOnNextJQueryCleanData) {
                    for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                        events = jQuery._data(elem, "events");
                        if (events && events.$destroy) {
                            jQuery(elem).triggerHandler('$destroy');
                        }
                    }
                }
                else {
                    skipDestroyOnNextJQueryCleanData = false;
                }
                originalCleanData(elems);
            };
        }
        else {
            jqLite = JQLite;
        }
        angular.element = jqLite;
        // Prevent double-proxying.
        bindJQueryFired = true;
    }
    /**
     * throw error if the argument is falsy.
     */
    function assertArg(arg, name, reason) {
        if (!arg) {
            throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
        }
        return arg;
    }
    function assertArgFn(arg, name, acceptArrayAnnotation) {
        if (acceptArrayAnnotation && isArray(arg)) {
            arg = arg[arg.length - 1];
        }
        assertArg(isFunction(arg), name, 'not a function, got ' +
            (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
        return arg;
    }
    /**
     * throw error if the name given is hasOwnProperty
     * @param  {String} name    the name to test
     * @param  {String} context the context in which the name is used, such as module or directive
     */
    function assertNotHasOwnProperty(name, context) {
        if (name === 'hasOwnProperty') {
            throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
        }
    }
    /**
     * Return the value accessible from the object by path. Any undefined traversals are ignored
     * @param {Object} obj starting object
     * @param {String} path path to traverse
     * @param {boolean} [bindFnToScope=true]
     * @returns {Object} value as accessible by path
     */
    //TODO(misko): this function needs to be removed
    function getter(obj, path, bindFnToScope) {
        if (!path)
            return obj;
        var keys = path.split('.');
        var key;
        var lastInstance = obj;
        var len = keys.length;
        for (var i = 0; i < len; i++) {
            key = keys[i];
            if (obj) {
                obj = (lastInstance = obj)[key];
            }
        }
        if (!bindFnToScope && isFunction(obj)) {
            return bind(lastInstance, obj);
        }
        return obj;
    }
    /**
     * Return the DOM siblings between the first and last node in the given array.
     * @param {Array} array like object
     * @returns {jqLite} jqLite collection containing the nodes
     */
    function getBlockNodes(nodes) {
        // TODO(perf): just check if all items in `nodes` are siblings and if they are return the original
        //             collection, otherwise update the original collection.
        var node = nodes[0];
        var endNode = nodes[nodes.length - 1];
        var blockNodes = [node];
        do {
            node = node.nextSibling;
            if (!node)
                break;
            blockNodes.push(node);
        } while (node !== endNode);
        return jqLite(blockNodes);
    }
    /**
     * Creates a new object without a prototype. This object is useful for lookup without having to
     * guard against prototypically inherited properties via hasOwnProperty.
     *
     * Related micro-benchmarks:
     * - http://jsperf.com/object-create2
     * - http://jsperf.com/proto-map-lookup/2
     * - http://jsperf.com/for-in-vs-object-keys2
     *
     * @returns {Object}
     */
    function createMap() {
        return Object.create(null);
    }
    var NODE_TYPE_ELEMENT = 1;
    var NODE_TYPE_TEXT = 3;
    var NODE_TYPE_COMMENT = 8;
    var NODE_TYPE_DOCUMENT = 9;
    var NODE_TYPE_DOCUMENT_FRAGMENT = 11;
    /**
     * @ngdoc type
     * @name angular.Module
     * @module ng
     * @description
     *
     * Interface for configuring angular {@link angular.module modules}.
     */
    function setupModuleLoader(window) {
        var $injectorMinErr = minErr('$injector');
        var ngMinErr = minErr('ng');
        function ensure(obj, name, factory) {
            return obj[name] || (obj[name] = factory());
        }
        var angular = ensure(window, 'angular', Object);
        // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
        angular.$$minErr = angular.$$minErr || minErr;
        return ensure(angular, 'module', function () {
            /** @type {Object.<string, angular.Module>} */
            var modules = {};
            /**
             * @ngdoc function
             * @name angular.module
             * @module ng
             * @description
             *
             * The `angular.module` is a global place for creating, registering and retrieving Angular
             * modules.
             * All modules (angular core or 3rd party) that should be available to an application must be
             * registered using this mechanism.
             *
             * When passed two or more arguments, a new module is created.  If passed only one argument, an
             * existing module (the name passed as the first argument to `module`) is retrieved.
             *
             *
             * # Module
             *
             * A module is a collection of services, directives, controllers, filters, and configuration information.
             * `angular.module` is used to configure the {@link auto.$injector $injector}.
             *
             * ```js
             * // Create a new module
             * var myModule = angular.module('myModule', []);
             *
             * // register a new service
             * myModule.value('appName', 'MyCoolApp');
             *
             * // configure existing services inside initialization blocks.
             * myModule.config(['$locationProvider', function($locationProvider) {
             *   // Configure existing providers
             *   $locationProvider.hashPrefix('!');
             * }]);
             * ```
             *
             * Then you can create an injector and load your modules like this:
             *
             * ```js
             * var injector = angular.injector(['ng', 'myModule'])
             * ```
             *
             * However it's more likely that you'll just use
             * {@link ng.directive:ngApp ngApp} or
             * {@link angular.bootstrap} to simplify this process for you.
             *
             * @param {!string} name The name of the module to create or retrieve.
             * @param {!Array.<string>=} requires If specified then new module is being created. If
             *        unspecified then the module is being retrieved for further configuration.
             * @param {Function=} configFn Optional configuration function for the module. Same as
             *        {@link angular.Module#config Module#config()}.
             * @returns {module} new module with the {@link angular.Module} api.
             */
            return function module(name, requires, configFn) {
                var assertNotHasOwnProperty = function (name, context) {
                    if (name === 'hasOwnProperty') {
                        throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
                    }
                };
                assertNotHasOwnProperty(name, 'module');
                if (requires && modules.hasOwnProperty(name)) {
                    modules[name] = null;
                }
                return ensure(modules, name, function () {
                    if (!requires) {
                        throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
                            "the module name or forgot to load it. If registering a module ensure that you " +
                            "specify the dependencies as the second argument.", name);
                    }
                    /** @type {!Array.<Array.<*>>} */
                    var invokeQueue = [];
                    /** @type {!Array.<Function>} */
                    var configBlocks = [];
                    /** @type {!Array.<Function>} */
                    var runBlocks = [];
                    var config = invokeLater('$injector', 'invoke', 'push', configBlocks);
                    /** @type {angular.Module} */
                    var moduleInstance = {
                        // Private state
                        _invokeQueue: invokeQueue,
                        _configBlocks: configBlocks,
                        _runBlocks: runBlocks,
                        /**
                         * @ngdoc property
                         * @name angular.Module#requires
                         * @module ng
                         *
                         * @description
                         * Holds the list of modules which the injector will load before the current module is
                         * loaded.
                         */
                        requires: requires,
                        /**
                         * @ngdoc property
                         * @name angular.Module#name
                         * @module ng
                         *
                         * @description
                         * Name of the module.
                         */
                        name: name,
                        /**
                         * @ngdoc method
                         * @name angular.Module#provider
                         * @module ng
                         * @param {string} name service name
                         * @param {Function} providerType Construction function for creating new instance of the
                         *                                service.
                         * @description
                         * See {@link auto.$provide#provider $provide.provider()}.
                         */
                        provider: invokeLater('$provide', 'provider'),
                        /**
                         * @ngdoc method
                         * @name angular.Module#factory
                         * @module ng
                         * @param {string} name service name
                         * @param {Function} providerFunction Function for creating new instance of the service.
                         * @description
                         * See {@link auto.$provide#factory $provide.factory()}.
                         */
                        factory: invokeLater('$provide', 'factory'),
                        /**
                         * @ngdoc method
                         * @name angular.Module#service
                         * @module ng
                         * @param {string} name service name
                         * @param {Function} constructor A constructor function that will be instantiated.
                         * @description
                         * See {@link auto.$provide#service $provide.service()}.
                         */
                        service: invokeLater('$provide', 'service'),
                        /**
                         * @ngdoc method
                         * @name angular.Module#value
                         * @module ng
                         * @param {string} name service name
                         * @param {*} object Service instance object.
                         * @description
                         * See {@link auto.$provide#value $provide.value()}.
                         */
                        value: invokeLater('$provide', 'value'),
                        /**
                         * @ngdoc method
                         * @name angular.Module#constant
                         * @module ng
                         * @param {string} name constant name
                         * @param {*} object Constant value.
                         * @description
                         * Because the constant are fixed, they get applied before other provide methods.
                         * See {@link auto.$provide#constant $provide.constant()}.
                         */
                        constant: invokeLater('$provide', 'constant', 'unshift'),
                        /**
                         * @ngdoc method
                         * @name angular.Module#animation
                         * @module ng
                         * @param {string} name animation name
                         * @param {Function} animationFactory Factory function for creating new instance of an
                         *                                    animation.
                         * @description
                         *
                         * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
                         *
                         *
                         * Defines an animation hook that can be later used with
                         * {@link ngAnimate.$animate $animate} service and directives that use this service.
                         *
                         * ```js
                         * module.animation('.animation-name', function($inject1, $inject2) {
                         *   return {
                         *     eventName : function(element, done) {
                         *       //code to run the animation
                         *       //once complete, then run done()
                         *       return function cancellationFunction(element) {
                         *         //code to cancel the animation
                         *       }
                         *     }
                         *   }
                         * })
                         * ```
                         *
                         * See {@link ng.$animateProvider#register $animateProvider.register()} and
                         * {@link ngAnimate ngAnimate module} for more information.
                         */
                        animation: invokeLater('$animateProvider', 'register'),
                        /**
                         * @ngdoc method
                         * @name angular.Module#filter
                         * @module ng
                         * @param {string} name Filter name.
                         * @param {Function} filterFactory Factory function for creating new instance of filter.
                         * @description
                         * See {@link ng.$filterProvider#register $filterProvider.register()}.
                         */
                        filter: invokeLater('$filterProvider', 'register'),
                        /**
                         * @ngdoc method
                         * @name angular.Module#controller
                         * @module ng
                         * @param {string|Object} name Controller name, or an object map of controllers where the
                         *    keys are the names and the values are the constructors.
                         * @param {Function} constructor Controller constructor function.
                         * @description
                         * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
                         */
                        controller: invokeLater('$controllerProvider', 'register'),
                        /**
                         * @ngdoc method
                         * @name angular.Module#directive
                         * @module ng
                         * @param {string|Object} name Directive name, or an object map of directives where the
                         *    keys are the names and the values are the factories.
                         * @param {Function} directiveFactory Factory function for creating new instance of
                         * directives.
                         * @description
                         * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
                         */
                        directive: invokeLater('$compileProvider', 'directive'),
                        /**
                         * @ngdoc method
                         * @name angular.Module#config
                         * @module ng
                         * @param {Function} configFn Execute this function on module load. Useful for service
                         *    configuration.
                         * @description
                         * Use this method to register work which needs to be performed on module loading.
                         * For more about how to configure services, see
                         * {@link providers#provider-recipe Provider Recipe}.
                         */
                        config: config,
                        /**
                         * @ngdoc method
                         * @name angular.Module#run
                         * @module ng
                         * @param {Function} initializationFn Execute this function after injector creation.
                         *    Useful for application initialization.
                         * @description
                         * Use this method to register work which should be performed when the injector is done
                         * loading all modules.
                         */
                        run: function (block) {
                            runBlocks.push(block);
                            return this;
                        }
                    };
                    if (configFn) {
                        config(configFn);
                    }
                    return moduleInstance;
                    /**
                     * @param {string} provider
                     * @param {string} method
                     * @param {String=} insertMethod
                     * @returns {angular.Module}
                     */
                    function invokeLater(provider, method, insertMethod, queue) {
                        if (!queue)
                            queue = invokeQueue;
                        return function () {
                            queue[insertMethod || 'push']([provider, method, arguments]);
                            return moduleInstance;
                        };
                    }
                });
            };
        });
    }
    /* global: toDebugString: true */
    function serializeObject(obj) {
        var seen = [];
        return JSON.stringify(obj, function (key, val) {
            val = toJsonReplacer(key, val);
            if (isObject(val)) {
                if (seen.indexOf(val) >= 0)
                    return '<<already seen>>';
                seen.push(val);
            }
            return val;
        });
    }
    function toDebugString(obj) {
        if (typeof obj === 'function') {
            return obj.toString().replace(/ \{[\s\S]*$/, '');
        }
        else if (typeof obj === 'undefined') {
            return 'undefined';
        }
        else if (typeof obj !== 'string') {
            return serializeObject(obj);
        }
        return obj;
    }
    /* global angularModule: true,
      version: true,
    
      $LocaleProvider,
      $CompileProvider,
    
      htmlAnchorDirective,
      inputDirective,
      inputDirective,
      formDirective,
      scriptDirective,
      selectDirective,
      styleDirective,
      optionDirective,
      ngBindDirective,
      ngBindHtmlDirective,
      ngBindTemplateDirective,
      ngClassDirective,
      ngClassEvenDirective,
      ngClassOddDirective,
      ngCspDirective,
      ngCloakDirective,
      ngControllerDirective,
      ngFormDirective,
      ngHideDirective,
      ngIfDirective,
      ngIncludeDirective,
      ngIncludeFillContentDirective,
      ngInitDirective,
      ngNonBindableDirective,
      ngPluralizeDirective,
      ngRepeatDirective,
      ngShowDirective,
      ngStyleDirective,
      ngSwitchDirective,
      ngSwitchWhenDirective,
      ngSwitchDefaultDirective,
      ngOptionsDirective,
      ngTranscludeDirective,
      ngModelDirective,
      ngListDirective,
      ngChangeDirective,
      patternDirective,
      patternDirective,
      requiredDirective,
      requiredDirective,
      minlengthDirective,
      minlengthDirective,
      maxlengthDirective,
      maxlengthDirective,
      ngValueDirective,
      ngModelOptionsDirective,
      ngAttributeAliasDirectives,
      ngEventDirectives,
    
      $AnchorScrollProvider,
      $AnimateProvider,
      $BrowserProvider,
      $CacheFactoryProvider,
      $ControllerProvider,
      $DocumentProvider,
      $ExceptionHandlerProvider,
      $FilterProvider,
      $InterpolateProvider,
      $IntervalProvider,
      $HttpProvider,
      $HttpBackendProvider,
      $LocationProvider,
      $LogProvider,
      $ParseProvider,
      $RootScopeProvider,
      $QProvider,
      $$QProvider,
      $$SanitizeUriProvider,
      $SceProvider,
      $SceDelegateProvider,
      $SnifferProvider,
      $TemplateCacheProvider,
      $TemplateRequestProvider,
      $$TestabilityProvider,
      $TimeoutProvider,
      $$RAFProvider,
      $$AsyncCallbackProvider,
      $WindowProvider
    */
    /**
     * @ngdoc object
     * @name angular.version
     * @module ng
     * @description
     * An object that contains information about the current AngularJS version. This object has the
     * following properties:
     *
     * - `full` – `{string}` – Full version string, such as "0.9.18".
     * - `major` – `{number}` – Major version number, such as "0".
     * - `minor` – `{number}` – Minor version number, such as "9".
     * - `dot` – `{number}` – Dot version number, such as "18".
     * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
     */
    var version = {
        full: '1.3.5',
        major: 1,
        minor: 3,
        dot: 5,
        codeName: 'cybernetic-mercantilism'
    };
    function publishExternalAPI(angular) {
        extend(angular, {
            'bootstrap': bootstrap,
            'copy': copy,
            'extend': extend,
            'equals': equals,
            'element': jqLite,
            'forEach': forEach,
            'injector': createInjector,
            'noop': noop,
            'bind': bind,
            'toJson': toJson,
            'fromJson': fromJson,
            'identity': identity,
            'isUndefined': isUndefined,
            'isDefined': isDefined,
            'isString': isString,
            'isFunction': isFunction,
            'isObject': isObject,
            'isNumber': isNumber,
            'isElement': isElement,
            'isArray': isArray,
            'version': version,
            'isDate': isDate,
            'lowercase': lowercase,
            'uppercase': uppercase,
            'callbacks': { counter: 0 },
            'getTestability': getTestability,
            '$$minErr': minErr,
            '$$csp': csp,
            'reloadWithDebugInfo': reloadWithDebugInfo
        });
        angularModule = setupModuleLoader(window);
        try {
            angularModule('ngLocale');
        }
        catch (e) {
            angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
        }
        angularModule('ng', ['ngLocale'], ['$provide',
            function ngModule($provide) {
                // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
                $provide.provider({
                    $$sanitizeUri: $$SanitizeUriProvider
                });
                $provide.provider('$compile', $CompileProvider).
                    directive({
                    a: htmlAnchorDirective,
                    input: inputDirective,
                    textarea: inputDirective,
                    form: formDirective,
                    script: scriptDirective,
                    select: selectDirective,
                    style: styleDirective,
                    option: optionDirective,
                    ngBind: ngBindDirective,
                    ngBindHtml: ngBindHtmlDirective,
                    ngBindTemplate: ngBindTemplateDirective,
                    ngClass: ngClassDirective,
                    ngClassEven: ngClassEvenDirective,
                    ngClassOdd: ngClassOddDirective,
                    ngCloak: ngCloakDirective,
                    ngController: ngControllerDirective,
                    ngForm: ngFormDirective,
                    ngHide: ngHideDirective,
                    ngIf: ngIfDirective,
                    ngInclude: ngIncludeDirective,
                    ngInit: ngInitDirective,
                    ngNonBindable: ngNonBindableDirective,
                    ngPluralize: ngPluralizeDirective,
                    ngRepeat: ngRepeatDirective,
                    ngShow: ngShowDirective,
                    ngStyle: ngStyleDirective,
                    ngSwitch: ngSwitchDirective,
                    ngSwitchWhen: ngSwitchWhenDirective,
                    ngSwitchDefault: ngSwitchDefaultDirective,
                    ngOptions: ngOptionsDirective,
                    ngTransclude: ngTranscludeDirective,
                    ngModel: ngModelDirective,
                    ngList: ngListDirective,
                    ngChange: ngChangeDirective,
                    pattern: patternDirective,
                    ngPattern: patternDirective,
                    required: requiredDirective,
                    ngRequired: requiredDirective,
                    minlength: minlengthDirective,
                    ngMinlength: minlengthDirective,
                    maxlength: maxlengthDirective,
                    ngMaxlength: maxlengthDirective,
                    ngValue: ngValueDirective,
                    ngModelOptions: ngModelOptionsDirective
                }).
                    directive({
                    ngInclude: ngIncludeFillContentDirective
                }).
                    directive(ngAttributeAliasDirectives).
                    directive(ngEventDirectives);
                $provide.provider({
                    $anchorScroll: $AnchorScrollProvider,
                    $animate: $AnimateProvider,
                    $browser: $BrowserProvider,
                    $cacheFactory: $CacheFactoryProvider,
                    $controller: $ControllerProvider,
                    $document: $DocumentProvider,
                    $exceptionHandler: $ExceptionHandlerProvider,
                    $filter: $FilterProvider,
                    $interpolate: $InterpolateProvider,
                    $interval: $IntervalProvider,
                    $http: $HttpProvider,
                    $httpBackend: $HttpBackendProvider,
                    $location: $LocationProvider,
                    $log: $LogProvider,
                    $parse: $ParseProvider,
                    $rootScope: $RootScopeProvider,
                    $q: $QProvider,
                    $$q: $$QProvider,
                    $sce: $SceProvider,
                    $sceDelegate: $SceDelegateProvider,
                    $sniffer: $SnifferProvider,
                    $templateCache: $TemplateCacheProvider,
                    $templateRequest: $TemplateRequestProvider,
                    $$testability: $$TestabilityProvider,
                    $timeout: $TimeoutProvider,
                    $window: $WindowProvider,
                    $$rAF: $$RAFProvider,
                    $$asyncCallback: $$AsyncCallbackProvider
                });
            }
        ]);
    }
    /* global JQLitePrototype: true,
      addEventListenerFn: true,
      removeEventListenerFn: true,
      BOOLEAN_ATTR: true,
      ALIASED_ATTR: true,
    */
    //////////////////////////////////
    //JQLite
    //////////////////////////////////
    /**
     * @ngdoc function
     * @name angular.element
     * @module ng
     * @kind function
     *
     * @description
     * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
     *
     * If jQuery is available, `angular.element` is an alias for the
     * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
     * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
     *
     * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
     * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
     * commonly needed functionality with the goal of having a very small footprint.</div>
     *
     * To use jQuery, simply load it before `DOMContentLoaded` event fired.
     *
     * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
     * jqLite; they are never raw DOM references.</div>
     *
     * ## Angular's jqLite
     * jqLite provides only the following jQuery methods:
     *
     * - [`addClass()`](http://api.jquery.com/addClass/)
     * - [`after()`](http://api.jquery.com/after/)
     * - [`append()`](http://api.jquery.com/append/)
     * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
     * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
     * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
     * - [`clone()`](http://api.jquery.com/clone/)
     * - [`contents()`](http://api.jquery.com/contents/)
     * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`
     * - [`data()`](http://api.jquery.com/data/)
     * - [`detach()`](http://api.jquery.com/detach/)
     * - [`empty()`](http://api.jquery.com/empty/)
     * - [`eq()`](http://api.jquery.com/eq/)
     * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
     * - [`hasClass()`](http://api.jquery.com/hasClass/)
     * - [`html()`](http://api.jquery.com/html/)
     * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
     * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
     * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors
     * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
     * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
     * - [`prepend()`](http://api.jquery.com/prepend/)
     * - [`prop()`](http://api.jquery.com/prop/)
     * - [`ready()`](http://api.jquery.com/ready/)
     * - [`remove()`](http://api.jquery.com/remove/)
     * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
     * - [`removeClass()`](http://api.jquery.com/removeClass/)
     * - [`removeData()`](http://api.jquery.com/removeData/)
     * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
     * - [`text()`](http://api.jquery.com/text/)
     * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
     * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
     * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces
     * - [`val()`](http://api.jquery.com/val/)
     * - [`wrap()`](http://api.jquery.com/wrap/)
     *
     * ## jQuery/jqLite Extras
     * Angular also provides the following additional methods and events to both jQuery and jqLite:
     *
     * ### Events
     * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
     *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
     *    element before it is removed.
     *
     * ### Methods
     * - `controller(name)` - retrieves the controller of the current element or its parent. By default
     *   retrieves controller associated with the `ngController` directive. If `name` is provided as
     *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
     *   `'ngModel'`).
     * - `injector()` - retrieves the injector of the current element or its parent.
     * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
     *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
     *   be enabled.
     * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
     *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
     *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
     *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
     * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
     *   parent element is reached.
     *
     * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
     * @returns {Object} jQuery object.
     */
    JQLite.expando = 'ng339';
    var jqCache = JQLite.cache = {}, jqId = 1, addEventListenerFn = function (element, type, fn) {
        element.addEventListener(type, fn, false);
    }, removeEventListenerFn = function (element, type, fn) {
        element.removeEventListener(type, fn, false);
    };
    /*
     * !!! This is an undocumented "private" function !!!
     */
    JQLite._data = function (node) {
        //jQuery always returns an object on cache miss
        return this.cache[node[this.expando]] || {};
    };
    function jqNextId() { return ++jqId; }
    var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
    var MOZ_HACK_REGEXP = /^moz([A-Z])/;
    var MOUSE_EVENT_MAP = { mouseleave: "mouseout", mouseenter: "mouseover" };
    var jqLiteMinErr = minErr('jqLite');
    /**
     * Converts snake_case to camelCase.
     * Also there is special case for Moz prefix starting with upper case letter.
     * @param name Name to normalize
     */
    function camelCase(name) {
        return name.
            replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
            return offset ? letter.toUpperCase() : letter;
        }).
            replace(MOZ_HACK_REGEXP, 'Moz$1');
    }
    var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
    var HTML_REGEXP = /<|&#?\w+;/;
    var TAG_NAME_REGEXP = /<([\w:]+)/;
    var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;
    var wrapMap = {
        'option': [1, '<select multiple="multiple">', '</select>'],
        'thead': [1, '<table>', '</table>'],
        'col': [2, '<table><colgroup>', '</colgroup></table>'],
        'tr': [2, '<table><tbody>', '</tbody></table>'],
        'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
        '_default': [0, "", ""]
    };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function jqLiteIsTextNode(html) {
        return !HTML_REGEXP.test(html);
    }
    function jqLiteAcceptsData(node) {
        // The window object can accept data but has no nodeType
        // Otherwise we are only interested in elements (1) and documents (9)
        var nodeType = node.nodeType;
        return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
    }
    function jqLiteBuildFragment(html, context) {
        var tmp, tag, wrap, fragment = context.createDocumentFragment(), nodes = [], i;
        if (jqLiteIsTextNode(html)) {
            // Convert non-html into a text node
            nodes.push(context.createTextNode(html));
        }
        else {
            // Convert html into DOM nodes
            tmp = tmp || fragment.appendChild(context.createElement("div"));
            tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
            wrap = wrapMap[tag] || wrapMap._default;
            tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];
            // Descend through wrappers to the right content
            i = wrap[0];
            while (i--) {
                tmp = tmp.lastChild;
            }
            nodes = concat(nodes, tmp.childNodes);
            tmp = fragment.firstChild;
            tmp.textContent = "";
        }
        // Remove wrapper from fragment
        fragment.textContent = "";
        fragment.innerHTML = ""; // Clear inner HTML
        forEach(nodes, function (node) {
            fragment.appendChild(node);
        });
        return fragment;
    }
    function jqLiteParseHTML(html, context) {
        context = context || document;
        var parsed;
        if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
            return [context.createElement(parsed[1])];
        }
        if ((parsed = jqLiteBuildFragment(html, context))) {
            return parsed.childNodes;
        }
        return [];
    }
    /////////////////////////////////////////////
    function JQLite(element) {
        if (element instanceof JQLite) {
            return element;
        }
        var argIsString;
        if (isString(element)) {
            element = trim(element);
            argIsString = true;
        }
        if (!(this instanceof JQLite)) {
            if (argIsString && element.charAt(0) != '<') {
                throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
            }
            return new JQLite(element);
        }
        if (argIsString) {
            jqLiteAddNodes(this, jqLiteParseHTML(element));
        }
        else {
            jqLiteAddNodes(this, element);
        }
    }
    function jqLiteClone(element) {
        return element.cloneNode(true);
    }
    function jqLiteDealoc(element, onlyDescendants) {
        if (!onlyDescendants)
            jqLiteRemoveData(element);
        if (element.querySelectorAll) {
            var descendants = element.querySelectorAll('*');
            for (var i = 0, l = descendants.length; i < l; i++) {
                jqLiteRemoveData(descendants[i]);
            }
        }
    }
    function jqLiteOff(element, type, fn, unsupported) {
        if (isDefined(unsupported))
            throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');
        var expandoStore = jqLiteExpandoStore(element);
        var events = expandoStore && expandoStore.events;
        var handle = expandoStore && expandoStore.handle;
        if (!handle)
            return; //no listeners registered
        if (!type) {
            for (type in events) {
                if (type !== '$destroy') {
                    removeEventListenerFn(element, type, handle);
                }
                delete events[type];
            }
        }
        else {
            forEach(type.split(' '), function (type) {
                if (isDefined(fn)) {
                    var listenerFns = events[type];
                    arrayRemove(listenerFns || [], fn);
                    if (listenerFns && listenerFns.length > 0) {
                        return;
                    }
                }
                removeEventListenerFn(element, type, handle);
                delete events[type];
            });
        }
    }
    function jqLiteRemoveData(element, name) {
        var expandoId = element.ng339;
        var expandoStore = expandoId && jqCache[expandoId];
        if (expandoStore) {
            if (name) {
                delete expandoStore.data[name];
                return;
            }
            if (expandoStore.handle) {
                if (expandoStore.events.$destroy) {
                    expandoStore.handle({}, '$destroy');
                }
                jqLiteOff(element);
            }
            delete jqCache[expandoId];
            element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
        }
    }
    function jqLiteExpandoStore(element, createIfNecessary) {
        var expandoId = element.ng339, expandoStore = expandoId && jqCache[expandoId];
        if (createIfNecessary && !expandoStore) {
            element.ng339 = expandoId = jqNextId();
            expandoStore = jqCache[expandoId] = { events: {}, data: {}, handle: undefined };
        }
        return expandoStore;
    }
    function jqLiteData(element, key, value) {
        if (jqLiteAcceptsData(element)) {
            var isSimpleSetter = isDefined(value);
            var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
            var massGetter = !key;
            var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
            var data = expandoStore && expandoStore.data;
            if (isSimpleSetter) {
                data[key] = value;
            }
            else {
                if (massGetter) {
                    return data;
                }
                else {
                    if (isSimpleGetter) {
                        // don't force creation of expandoStore if it doesn't exist yet
                        return data && data[key];
                    }
                    else {
                        extend(data, key);
                    }
                }
            }
        }
    }
    function jqLiteHasClass(element, selector) {
        if (!element.getAttribute)
            return false;
        return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
            indexOf(" " + selector + " ") > -1);
    }
    function jqLiteRemoveClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
            forEach(cssClasses.split(' '), function (cssClass) {
                element.setAttribute('class', trim((" " + (element.getAttribute('class') || '') + " ")
                    .replace(/[\n\t]/g, " ")
                    .replace(" " + trim(cssClass) + " ", " ")));
            });
        }
    }
    function jqLiteAddClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
            var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
                .replace(/[\n\t]/g, " ");
            forEach(cssClasses.split(' '), function (cssClass) {
                cssClass = trim(cssClass);
                if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
                    existingClasses += cssClass + ' ';
                }
            });
            element.setAttribute('class', trim(existingClasses));
        }
    }
    function jqLiteAddNodes(root, elements) {
        // THIS CODE IS VERY HOT. Don't make changes without benchmarking.
        if (elements) {
            // if a Node (the most common case)
            if (elements.nodeType) {
                root[root.length++] = elements;
            }
            else {
                var length = elements.length;
                // if an Array or NodeList and not a Window
                if (typeof length === 'number' && elements.window !== elements) {
                    if (length) {
                        for (var i = 0; i < length; i++) {
                            root[root.length++] = elements[i];
                        }
                    }
                }
                else {
                    root[root.length++] = elements;
                }
            }
        }
    }
    function jqLiteController(element, name) {
        return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
    }
    function jqLiteInheritedData(element, name, value) {
        // if element is the document object work with the html element instead
        // this makes $(document).scope() possible
        if (element.nodeType == NODE_TYPE_DOCUMENT) {
            element = element.documentElement;
        }
        var names = isArray(name) ? name : [name];
        while (element) {
            for (var i = 0, ii = names.length; i < ii; i++) {
                if ((value = jqLite.data(element, names[i])) !== undefined)
                    return value;
            }
            // If dealing with a document fragment node with a host element, and no parent, use the host
            // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
            // to lookup parent controllers.
            element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
        }
    }
    function jqLiteEmpty(element) {
        jqLiteDealoc(element, true);
        while (element.firstChild) {
            element.removeChild(element.firstChild);
        }
    }
    function jqLiteRemove(element, keepData) {
        if (!keepData)
            jqLiteDealoc(element);
        var parent = element.parentNode;
        if (parent)
            parent.removeChild(element);
    }
    function jqLiteDocumentLoaded(action, win) {
        win = win || window;
        if (win.document.readyState === 'complete') {
            // Force the action to be run async for consistent behaviour
            // from the action's point of view
            // i.e. it will definitely not be in a $apply
            win.setTimeout(action);
        }
        else {
            // No need to unbind this handler as load is only ever called once
            jqLite(win).on('load', action);
        }
    }
    //////////////////////////////////////////
    // Functions which are declared directly.
    //////////////////////////////////////////
    var JQLitePrototype = JQLite.prototype = {
        ready: function (fn) {
            var fired = false;
            function trigger() {
                if (fired)
                    return;
                fired = true;
                fn();
            }
            // check if document is already loaded
            if (document.readyState === 'complete') {
                setTimeout(trigger);
            }
            else {
                this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
                // we can not use jqLite since we are not done loading and jQuery could be loaded later.
                // jshint -W064
                JQLite(window).on('load', trigger); // fallback to window.onload for others
                // jshint +W064
            }
        },
        toString: function () {
            var value = [];
            forEach(this, function (e) { value.push('' + e); });
            return '[' + value.join(', ') + ']';
        },
        eq: function (index) {
            return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
        },
        length: 0,
        push: push,
        sort: [].sort,
        splice: [].splice
    };
    //////////////////////////////////////////
    // Functions iterating getter/setters.
    // these functions return self on setter and
    // value on get.
    //////////////////////////////////////////
    var BOOLEAN_ATTR = {};
    forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function (value) {
        BOOLEAN_ATTR[lowercase(value)] = value;
    });
    var BOOLEAN_ELEMENTS = {};
    forEach('input,select,option,textarea,button,form,details'.split(','), function (value) {
        BOOLEAN_ELEMENTS[value] = true;
    });
    var ALIASED_ATTR = {
        'ngMinlength': 'minlength',
        'ngMaxlength': 'maxlength',
        'ngMin': 'min',
        'ngMax': 'max',
        'ngPattern': 'pattern'
    };
    function getBooleanAttrName(element, name) {
        // check dom last since we will most likely fail on name
        var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
        // booleanAttr is here twice to minimize DOM access
        return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
    }
    function getAliasedAttrName(element, name) {
        var nodeName = element.nodeName;
        return (nodeName === 'INPUT' || nodeName === 'TEXTAREA') && ALIASED_ATTR[name];
    }
    forEach({
        data: jqLiteData,
        removeData: jqLiteRemoveData
    }, function (fn, name) {
        JQLite[name] = fn;
    });
    forEach({
        data: jqLiteData,
        inheritedData: jqLiteInheritedData,
        scope: function (element) {
            // Can't use jqLiteData here directly so we stay compatible with jQuery!
            return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
        },
        isolateScope: function (element) {
            // Can't use jqLiteData here directly so we stay compatible with jQuery!
            return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
        },
        controller: jqLiteController,
        injector: function (element) {
            return jqLiteInheritedData(element, '$injector');
        },
        removeAttr: function (element, name) {
            element.removeAttribute(name);
        },
        hasClass: jqLiteHasClass,
        css: function (element, name, value) {
            name = camelCase(name);
            if (isDefined(value)) {
                element.style[name] = value;
            }
            else {
                return element.style[name];
            }
        },
        attr: function (element, name, value) {
            var lowercasedName = lowercase(name);
            if (BOOLEAN_ATTR[lowercasedName]) {
                if (isDefined(value)) {
                    if (!!value) {
                        element[name] = true;
                        element.setAttribute(name, lowercasedName);
                    }
                    else {
                        element[name] = false;
                        element.removeAttribute(lowercasedName);
                    }
                }
                else {
                    return (element[name] ||
                        (element.attributes.getNamedItem(name) || noop).specified)
                        ? lowercasedName
                        : undefined;
                }
            }
            else if (isDefined(value)) {
                element.setAttribute(name, value);
            }
            else if (element.getAttribute) {
                // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
                // some elements (e.g. Document) don't have get attribute, so return undefined
                var ret = element.getAttribute(name, 2);
                // normalize non-existing attributes to undefined (as jQuery)
                return ret === null ? undefined : ret;
            }
        },
        prop: function (element, name, value) {
            if (isDefined(value)) {
                element[name] = value;
            }
            else {
                return element[name];
            }
        },
        text: (function () {
            getText.$dv = '';
            return getText;
            function getText(element, value) {
                if (isUndefined(value)) {
                    var nodeType = element.nodeType;
                    return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
                }
                element.textContent = value;
            }
        })(),
        val: function (element, value) {
            if (isUndefined(value)) {
                if (element.multiple && nodeName_(element) === 'select') {
                    var result = [];
                    forEach(element.options, function (option) {
                        if (option.selected) {
                            result.push(option.value || option.text);
                        }
                    });
                    return result.length === 0 ? null : result;
                }
                return element.value;
            }
            element.value = value;
        },
        html: function (element, value) {
            if (isUndefined(value)) {
                return element.innerHTML;
            }
            jqLiteDealoc(element, true);
            element.innerHTML = value;
        },
        empty: jqLiteEmpty
    }, function (fn, name) {
        /**
         * Properties: writes return selection, reads return first value
         */
        JQLite.prototype[name] = function (arg1, arg2) {
            var i, key;
            var nodeCount = this.length;
            // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
            // in a way that survives minification.
            // jqLiteEmpty takes no arguments but is a setter.
            if (fn !== jqLiteEmpty &&
                (((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {
                if (isObject(arg1)) {
                    // we are a write, but the object properties are the key/values
                    for (i = 0; i < nodeCount; i++) {
                        if (fn === jqLiteData) {
                            // data() takes the whole object in jQuery
                            fn(this[i], arg1);
                        }
                        else {
                            for (key in arg1) {
                                fn(this[i], key, arg1[key]);
                            }
                        }
                    }
                    // return self for chaining
                    return this;
                }
                else {
                    // we are a read, so read the first child.
                    // TODO: do we still need this?
                    var value = fn.$dv;
                    // Only if we have $dv do we iterate over all, otherwise it is just the first element.
                    var jj = (value === undefined) ? Math.min(nodeCount, 1) : nodeCount;
                    for (var j = 0; j < jj; j++) {
                        var nodeValue = fn(this[j], arg1, arg2);
                        value = value ? value + nodeValue : nodeValue;
                    }
                    return value;
                }
            }
            else {
                // we are a write, so apply to all children
                for (i = 0; i < nodeCount; i++) {
                    fn(this[i], arg1, arg2);
                }
                // return self for chaining
                return this;
            }
        };
    });
    function createEventHandler(element, events) {
        var eventHandler = function (event, type) {
            // jQuery specific api
            event.isDefaultPrevented = function () {
                return event.defaultPrevented;
            };
            var eventFns = events[type || event.type];
            var eventFnsLength = eventFns ? eventFns.length : 0;
            if (!eventFnsLength)
                return;
            if (isUndefined(event.immediatePropagationStopped)) {
                var originalStopImmediatePropagation = event.stopImmediatePropagation;
                event.stopImmediatePropagation = function () {
                    event.immediatePropagationStopped = true;
                    if (event.stopPropagation) {
                        event.stopPropagation();
                    }
                    if (originalStopImmediatePropagation) {
                        originalStopImmediatePropagation.call(event);
                    }
                };
            }
            event.isImmediatePropagationStopped = function () {
                return event.immediatePropagationStopped === true;
            };
            // Copy event handlers in case event handlers array is modified during execution.
            if ((eventFnsLength > 1)) {
                eventFns = shallowCopy(eventFns);
            }
            for (var i = 0; i < eventFnsLength; i++) {
                if (!event.isImmediatePropagationStopped()) {
                    eventFns[i].call(element, event);
                }
            }
        };
        // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
        //       events on `element`
        eventHandler.elem = element;
        return eventHandler;
    }
    //////////////////////////////////////////
    // Functions iterating traversal.
    // These functions chain results into a single
    // selector.
    //////////////////////////////////////////
    forEach({
        removeData: jqLiteRemoveData,
        on: function jqLiteOn(element, type, fn, unsupported) {
            if (isDefined(unsupported))
                throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
            // Do not add event handlers to non-elements because they will not be cleaned up.
            if (!jqLiteAcceptsData(element)) {
                return;
            }
            var expandoStore = jqLiteExpandoStore(element, true);
            var events = expandoStore.events;
            var handle = expandoStore.handle;
            if (!handle) {
                handle = expandoStore.handle = createEventHandler(element, events);
            }
            // http://jsperf.com/string-indexof-vs-split
            var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
            var i = types.length;
            while (i--) {
                type = types[i];
                var eventFns = events[type];
                if (!eventFns) {
                    events[type] = [];
                    if (type === 'mouseenter' || type === 'mouseleave') {
                        // Refer to jQuery's implementation of mouseenter & mouseleave
                        // Read about mouseenter and mouseleave:
                        // http://www.quirksmode.org/js/events_mouse.html#link8
                        jqLiteOn(element, MOUSE_EVENT_MAP[type], function (event) {
                            var target = this, related = event.relatedTarget;
                            // For mousenter/leave call the handler if related is outside the target.
                            // NB: No relatedTarget if the mouse left/entered the browser window
                            if (!related || (related !== target && !target.contains(related))) {
                                handle(event, type);
                            }
                        });
                    }
                    else {
                        if (type !== '$destroy') {
                            addEventListenerFn(element, type, handle);
                        }
                    }
                    eventFns = events[type];
                }
                eventFns.push(fn);
            }
        },
        off: jqLiteOff,
        one: function (element, type, fn) {
            element = jqLite(element);
            //add the listener twice so that when it is called
            //you can remove the original function and still be
            //able to call element.off(ev, fn) normally
            element.on(type, function onFn() {
                element.off(type, fn);
                element.off(type, onFn);
            });
            element.on(type, fn);
        },
        replaceWith: function (element, replaceNode) {
            var index, parent = element.parentNode;
            jqLiteDealoc(element);
            forEach(new JQLite(replaceNode), function (node) {
                if (index) {
                    parent.insertBefore(node, index.nextSibling);
                }
                else {
                    parent.replaceChild(node, element);
                }
                index = node;
            });
        },
        children: function (element) {
            var children = [];
            forEach(element.childNodes, function (element) {
                if (element.nodeType === NODE_TYPE_ELEMENT)
                    children.push(element);
            });
            return children;
        },
        contents: function (element) {
            return element.contentDocument || element.childNodes || [];
        },
        append: function (element, node) {
            var nodeType = element.nodeType;
            if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT)
                return;
            node = new JQLite(node);
            for (var i = 0, ii = node.length; i < ii; i++) {
                var child = node[i];
                element.appendChild(child);
            }
        },
        prepend: function (element, node) {
            if (element.nodeType === NODE_TYPE_ELEMENT) {
                var index = element.firstChild;
                forEach(new JQLite(node), function (child) {
                    element.insertBefore(child, index);
                });
            }
        },
        wrap: function (element, wrapNode) {
            wrapNode = jqLite(wrapNode).eq(0).clone()[0];
            var parent = element.parentNode;
            if (parent) {
                parent.replaceChild(wrapNode, element);
            }
            wrapNode.appendChild(element);
        },
        remove: jqLiteRemove,
        detach: function (element) {
            jqLiteRemove(element, true);
        },
        after: function (element, newElement) {
            var index = element, parent = element.parentNode;
            newElement = new JQLite(newElement);
            for (var i = 0, ii = newElement.length; i < ii; i++) {
                var node = newElement[i];
                parent.insertBefore(node, index.nextSibling);
                index = node;
            }
        },
        addClass: jqLiteAddClass,
        removeClass: jqLiteRemoveClass,
        toggleClass: function (element, selector, condition) {
            if (selector) {
                forEach(selector.split(' '), function (className) {
                    var classCondition = condition;
                    if (isUndefined(classCondition)) {
                        classCondition = !jqLiteHasClass(element, className);
                    }
                    (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
                });
            }
        },
        parent: function (element) {
            var parent = element.parentNode;
            return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
        },
        next: function (element) {
            return element.nextElementSibling;
        },
        find: function (element, selector) {
            if (element.getElementsByTagName) {
                return element.getElementsByTagName(selector);
            }
            else {
                return [];
            }
        },
        clone: jqLiteClone,
        triggerHandler: function (element, event, extraParameters) {
            var dummyEvent, eventFnsCopy, handlerArgs;
            var eventName = event.type || event;
            var expandoStore = jqLiteExpandoStore(element);
            var events = expandoStore && expandoStore.events;
            var eventFns = events && events[eventName];
            if (eventFns) {
                // Create a dummy event to pass to the handlers
                dummyEvent = {
                    preventDefault: function () { this.defaultPrevented = true; },
                    isDefaultPrevented: function () { return this.defaultPrevented === true; },
                    stopImmediatePropagation: function () { this.immediatePropagationStopped = true; },
                    isImmediatePropagationStopped: function () { return this.immediatePropagationStopped === true; },
                    stopPropagation: noop,
                    type: eventName,
                    target: element
                };
                // If a custom event was provided then extend our dummy event with it
                if (event.type) {
                    dummyEvent = extend(dummyEvent, event);
                }
                // Copy event handlers in case event handlers array is modified during execution.
                eventFnsCopy = shallowCopy(eventFns);
                handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];
                forEach(eventFnsCopy, function (fn) {
                    if (!dummyEvent.isImmediatePropagationStopped()) {
                        fn.apply(element, handlerArgs);
                    }
                });
            }
        }
    }, function (fn, name) {
        /**
         * chaining functions
         */
        JQLite.prototype[name] = function (arg1, arg2, arg3) {
            var value;
            for (var i = 0, ii = this.length; i < ii; i++) {
                if (isUndefined(value)) {
                    value = fn(this[i], arg1, arg2, arg3);
                    if (isDefined(value)) {
                        // any function which returns a value needs to be wrapped
                        value = jqLite(value);
                    }
                }
                else {
                    jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
                }
            }
            return isDefined(value) ? value : this;
        };
        // bind legacy bind/unbind to on/off
        JQLite.prototype.bind = JQLite.prototype.on;
        JQLite.prototype.unbind = JQLite.prototype.off;
    });
    /**
     * Computes a hash of an 'obj'.
     * Hash of a:
     *  string is string
     *  number is number as string
     *  object is either result of calling $$hashKey function on the object or uniquely generated id,
     *         that is also assigned to the $$hashKey property of the object.
     *
     * @param obj
     * @returns {string} hash string such that the same input will have the same hash string.
     *         The resulting string key is in 'type:hashKey' format.
     */
    function hashKey(obj, nextUidFn) {
        var key = obj && obj.$$hashKey;
        if (key) {
            if (typeof key === 'function') {
                key = obj.$$hashKey();
            }
            return key;
        }
        var objType = typeof obj;
        if (objType == 'function' || (objType == 'object' && obj !== null)) {
            key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
        }
        else {
            key = objType + ':' + obj;
        }
        return key;
    }
    /**
     * HashMap which can use objects as keys
     */
    function HashMap(array, isolatedUid) {
        if (isolatedUid) {
            var uid = 0;
            this.nextUid = function () {
                return ++uid;
            };
        }
        forEach(array, this.put, this);
    }
    HashMap.prototype = {
        /**
         * Store key value pair
         * @param key key to store can be any type
         * @param value value to store can be any type
         */
        put: function (key, value) {
            this[hashKey(key, this.nextUid)] = value;
        },
        /**
         * @param key
         * @returns {Object} the value for the key
         */
        get: function (key) {
            return this[hashKey(key, this.nextUid)];
        },
        /**
         * Remove the key/value pair
         * @param key
         */
        remove: function (key) {
            var value = this[key = hashKey(key, this.nextUid)];
            delete this[key];
            return value;
        }
    };
    /**
     * @ngdoc function
     * @module ng
     * @name angular.injector
     * @kind function
     *
     * @description
     * Creates an injector object that can be used for retrieving services as well as for
     * dependency injection (see {@link guide/di dependency injection}).
     *
     * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
     *     {@link angular.module}. The `ng` module must be explicitly added.
     * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
     *     disallows argument name annotation inference.
     * @returns {injector} Injector object. See {@link auto.$injector $injector}.
     *
     * @example
     * Typical usage
     * ```js
     *   // create an injector
     *   var $injector = angular.injector(['ng']);
     *
     *   // use the injector to kick off your application
     *   // use the type inference to auto inject arguments, or use implicit injection
     *   $injector.invoke(function($rootScope, $compile, $document) {
     *     $compile($document)($rootScope);
     *     $rootScope.$digest();
     *   });
     * ```
     *
     * Sometimes you want to get access to the injector of a currently running Angular app
     * from outside Angular. Perhaps, you want to inject and compile some markup after the
     * application has been bootstrapped. You can do this using the extra `injector()` added
     * to JQuery/jqLite elements. See {@link angular.element}.
     *
     * *This is fairly rare but could be the case if a third party library is injecting the
     * markup.*
     *
     * In the following example a new block of HTML containing a `ng-controller`
     * directive is added to the end of the document body by JQuery. We then compile and link
     * it into the current AngularJS scope.
     *
     * ```js
     * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
     * $(document.body).append($div);
     *
     * angular.element(document).injector().invoke(function($compile) {
     *   var scope = angular.element($div).scope();
     *   $compile($div)(scope);
     * });
     * ```
     */
    /**
     * @ngdoc module
     * @name auto
     * @description
     *
     * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
     */
    var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
    var FN_ARG_SPLIT = /,/;
    var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
    var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
    var $injectorMinErr = minErr('$injector');
    function anonFn(fn) {
        // For anonymous functions, showing at the very least the function signature can help in
        // debugging.
        var fnText = fn.toString().replace(STRIP_COMMENTS, ''), args = fnText.match(FN_ARGS);
        if (args) {
            return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
        }
        return 'fn';
    }
    function annotate(fn, strictDi, name) {
        var $inject, fnText, argDecl, last;
        if (typeof fn === 'function') {
            if (!($inject = fn.$inject)) {
                $inject = [];
                if (fn.length) {
                    if (strictDi) {
                        if (!isString(name) || !name) {
                            name = fn.name || anonFn(fn);
                        }
                        throw $injectorMinErr('strictdi', '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
                    }
                    fnText = fn.toString().replace(STRIP_COMMENTS, '');
                    argDecl = fnText.match(FN_ARGS);
                    forEach(argDecl[1].split(FN_ARG_SPLIT), function (arg) {
                        arg.replace(FN_ARG, function (all, underscore, name) {
                            $inject.push(name);
                        });
                    });
                }
                fn.$inject = $inject;
            }
        }
        else if (isArray(fn)) {
            last = fn.length - 1;
            assertArgFn(fn[last], 'fn');
            $inject = fn.slice(0, last);
        }
        else {
            assertArgFn(fn, 'fn', true);
        }
        return $inject;
    }
    ///////////////////////////////////////
    /**
     * @ngdoc service
     * @name $injector
     *
     * @description
     *
     * `$injector` is used to retrieve object instances as defined by
     * {@link auto.$provide provider}, instantiate types, invoke methods,
     * and load modules.
     *
     * The following always holds true:
     *
     * ```js
     *   var $injector = angular.injector();
     *   expect($injector.get('$injector')).toBe($injector);
     *   expect($injector.invoke(function($injector) {
     *     return $injector;
     *   })).toBe($injector);
     * ```
     *
     * # Injection Function Annotation
     *
     * JavaScript does not have annotations, and annotations are needed for dependency injection. The
     * following are all valid ways of annotating function with injection arguments and are equivalent.
     *
     * ```js
     *   // inferred (only works if code not minified/obfuscated)
     *   $injector.invoke(function(serviceA){});
     *
     *   // annotated
     *   function explicit(serviceA) {};
     *   explicit.$inject = ['serviceA'];
     *   $injector.invoke(explicit);
     *
     *   // inline
     *   $injector.invoke(['serviceA', function(serviceA){}]);
     * ```
     *
     * ## Inference
     *
     * In JavaScript calling `toString()` on a function returns the function definition. The definition
     * can then be parsed and the function arguments can be extracted. This method of discovering
     * annotations is disallowed when the injector is in strict mode.
     * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
     * argument names.
     *
     * ## `$inject` Annotation
     * By adding an `$inject` property onto a function the injection parameters can be specified.
     *
     * ## Inline
     * As an array of injection names, where the last item in the array is the function to call.
     */
    /**
     * @ngdoc method
     * @name $injector#get
     *
     * @description
     * Return an instance of the service.
     *
     * @param {string} name The name of the instance to retrieve.
     * @return {*} The instance.
     */
    /**
     * @ngdoc method
     * @name $injector#invoke
     *
     * @description
     * Invoke the method and supply the method arguments from the `$injector`.
     *
     * @param {!Function} fn The function to invoke. Function parameters are injected according to the
     *   {@link guide/di $inject Annotation} rules.
     * @param {Object=} self The `this` for the invoked method.
     * @param {Object=} locals Optional object. If preset then any argument names are read from this
     *                         object first, before the `$injector` is consulted.
     * @returns {*} the value returned by the invoked `fn` function.
     */
    /**
     * @ngdoc method
     * @name $injector#has
     *
     * @description
     * Allows the user to query if the particular service exists.
     *
     * @param {string} name Name of the service to query.
     * @returns {boolean} `true` if injector has given service.
     */
    /**
     * @ngdoc method
     * @name $injector#instantiate
     * @description
     * Create a new instance of JS type. The method takes a constructor function, invokes the new
     * operator, and supplies all of the arguments to the constructor function as specified by the
     * constructor annotation.
     *
     * @param {Function} Type Annotated constructor function.
     * @param {Object=} locals Optional object. If preset then any argument names are read from this
     * object first, before the `$injector` is consulted.
     * @returns {Object} new instance of `Type`.
     */
    /**
     * @ngdoc method
     * @name $injector#annotate
     *
     * @description
     * Returns an array of service names which the function is requesting for injection. This API is
     * used by the injector to determine which services need to be injected into the function when the
     * function is invoked. There are three ways in which the function can be annotated with the needed
     * dependencies.
     *
     * # Argument names
     *
     * The simplest form is to extract the dependencies from the arguments of the function. This is done
     * by converting the function into a string using `toString()` method and extracting the argument
     * names.
     * ```js
     *   // Given
     *   function MyController($scope, $route) {
     *     // ...
     *   }
     *
     *   // Then
     *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
     * ```
     *
     * You can disallow this method by using strict injection mode.
     *
     * This method does not work with code minification / obfuscation. For this reason the following
     * annotation strategies are supported.
     *
     * # The `$inject` property
     *
     * If a function has an `$inject` property and its value is an array of strings, then the strings
     * represent names of services to be injected into the function.
     * ```js
     *   // Given
     *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
     *     // ...
     *   }
     *   // Define function dependencies
     *   MyController['$inject'] = ['$scope', '$route'];
     *
     *   // Then
     *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
     * ```
     *
     * # The array notation
     *
     * It is often desirable to inline Injected functions and that's when setting the `$inject` property
     * is very inconvenient. In these situations using the array notation to specify the dependencies in
     * a way that survives minification is a better choice:
     *
     * ```js
     *   // We wish to write this (not minification / obfuscation safe)
     *   injector.invoke(function($compile, $rootScope) {
     *     // ...
     *   });
     *
     *   // We are forced to write break inlining
     *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
     *     // ...
     *   };
     *   tmpFn.$inject = ['$compile', '$rootScope'];
     *   injector.invoke(tmpFn);
     *
     *   // To better support inline function the inline annotation is supported
     *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
     *     // ...
     *   }]);
     *
     *   // Therefore
     *   expect(injector.annotate(
     *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
     *    ).toEqual(['$compile', '$rootScope']);
     * ```
     *
     * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
     * be retrieved as described above.
     *
     * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
     *
     * @returns {Array.<string>} The names of the services which the function requires.
     */
    /**
     * @ngdoc service
     * @name $provide
     *
     * @description
     *
     * The {@link auto.$provide $provide} service has a number of methods for registering components
     * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
     * {@link angular.Module}.
     *
     * An Angular **service** is a singleton object created by a **service factory**.  These **service
     * factories** are functions which, in turn, are created by a **service provider**.
     * The **service providers** are constructor functions. When instantiated they must contain a
     * property called `$get`, which holds the **service factory** function.
     *
     * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
     * correct **service provider**, instantiating it and then calling its `$get` **service factory**
     * function to get the instance of the **service**.
     *
     * Often services have no configuration options and there is no need to add methods to the service
     * provider.  The provider will be no more than a constructor function with a `$get` property. For
     * these cases the {@link auto.$provide $provide} service has additional helper methods to register
     * services without specifying a provider.
     *
     * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
     *     {@link auto.$injector $injector}
     * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
     *     providers and services.
     * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
     *     services, not providers.
     * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
     *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
     *     given factory function.
     * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
     *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
     *      a new object using the given constructor function.
     *
     * See the individual methods for more information and examples.
     */
    /**
     * @ngdoc method
     * @name $provide#provider
     * @description
     *
     * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
     * are constructor functions, whose instances are responsible for "providing" a factory for a
     * service.
     *
     * Service provider names start with the name of the service they provide followed by `Provider`.
     * For example, the {@link ng.$log $log} service has a provider called
     * {@link ng.$logProvider $logProvider}.
     *
     * Service provider objects can have additional methods which allow configuration of the provider
     * and its service. Importantly, you can configure what kind of service is created by the `$get`
     * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
     * method {@link ng.$logProvider#debugEnabled debugEnabled}
     * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
     * console or not.
     *
     * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                            'Provider'` key.
     * @param {(Object|function())} provider If the provider is:
     *
     *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
     *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
     *   - `Constructor`: a new instance of the provider will be created using
     *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
     *
     * @returns {Object} registered provider instance
    
     * @example
     *
     * The following example shows how to create a simple event tracking service and register it using
     * {@link auto.$provide#provider $provide.provider()}.
     *
     * ```js
     *  // Define the eventTracker provider
     *  function EventTrackerProvider() {
     *    var trackingUrl = '/track';
     *
     *    // A provider method for configuring where the tracked events should been saved
     *    this.setTrackingUrl = function(url) {
     *      trackingUrl = url;
     *    };
     *
     *    // The service factory function
     *    this.$get = ['$http', function($http) {
     *      var trackedEvents = {};
     *      return {
     *        // Call this to track an event
     *        event: function(event) {
     *          var count = trackedEvents[event] || 0;
     *          count += 1;
     *          trackedEvents[event] = count;
     *          return count;
     *        },
     *        // Call this to save the tracked events to the trackingUrl
     *        save: function() {
     *          $http.post(trackingUrl, trackedEvents);
     *        }
     *      };
     *    }];
     *  }
     *
     *  describe('eventTracker', function() {
     *    var postSpy;
     *
     *    beforeEach(module(function($provide) {
     *      // Register the eventTracker provider
     *      $provide.provider('eventTracker', EventTrackerProvider);
     *    }));
     *
     *    beforeEach(module(function(eventTrackerProvider) {
     *      // Configure eventTracker provider
     *      eventTrackerProvider.setTrackingUrl('/custom-track');
     *    }));
     *
     *    it('tracks events', inject(function(eventTracker) {
     *      expect(eventTracker.event('login')).toEqual(1);
     *      expect(eventTracker.event('login')).toEqual(2);
     *    }));
     *
     *    it('saves to the tracking url', inject(function(eventTracker, $http) {
     *      postSpy = spyOn($http, 'post');
     *      eventTracker.event('login');
     *      eventTracker.save();
     *      expect(postSpy).toHaveBeenCalled();
     *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
     *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
     *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
     *    }));
     *  });
     * ```
     */
    /**
     * @ngdoc method
     * @name $provide#factory
     * @description
     *
     * Register a **service factory**, which will be called to return the service instance.
     * This is short for registering a service where its provider consists of only a `$get` property,
     * which is the given service factory function.
     * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
     * configure your service in a provider.
     *
     * @param {string} name The name of the instance.
     * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand
     *                            for `$provide.provider(name, {$get: $getFn})`.
     * @returns {Object} registered provider instance
     *
     * @example
     * Here is an example of registering a service
     * ```js
     *   $provide.factory('ping', ['$http', function($http) {
     *     return function ping() {
     *       return $http.send('/ping');
     *     };
     *   }]);
     * ```
     * You would then inject and use this service like this:
     * ```js
     *   someModule.controller('Ctrl', ['ping', function(ping) {
     *     ping();
     *   }]);
     * ```
     */
    /**
     * @ngdoc method
     * @name $provide#service
     * @description
     *
     * Register a **service constructor**, which will be invoked with `new` to create the service
     * instance.
     * This is short for registering a service where its provider's `$get` property is the service
     * constructor function that will be used to instantiate the service instance.
     *
     * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
     * as a type/class.
     *
     * @param {string} name The name of the instance.
     * @param {Function} constructor A class (constructor function) that will be instantiated.
     * @returns {Object} registered provider instance
     *
     * @example
     * Here is an example of registering a service using
     * {@link auto.$provide#service $provide.service(class)}.
     * ```js
     *   var Ping = function($http) {
     *     this.$http = $http;
     *   };
     *
     *   Ping.$inject = ['$http'];
     *
     *   Ping.prototype.send = function() {
     *     return this.$http.get('/ping');
     *   };
     *   $provide.service('ping', Ping);
     * ```
     * You would then inject and use this service like this:
     * ```js
     *   someModule.controller('Ctrl', ['ping', function(ping) {
     *     ping.send();
     *   }]);
     * ```
     */
    /**
     * @ngdoc method
     * @name $provide#value
     * @description
     *
     * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
     * number, an array, an object or a function.  This is short for registering a service where its
     * provider's `$get` property is a factory function that takes no arguments and returns the **value
     * service**.
     *
     * Value services are similar to constant services, except that they cannot be injected into a
     * module configuration function (see {@link angular.Module#config}) but they can be overridden by
     * an Angular
     * {@link auto.$provide#decorator decorator}.
     *
     * @param {string} name The name of the instance.
     * @param {*} value The value.
     * @returns {Object} registered provider instance
     *
     * @example
     * Here are some examples of creating value services.
     * ```js
     *   $provide.value('ADMIN_USER', 'admin');
     *
     *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
     *
     *   $provide.value('halfOf', function(value) {
     *     return value / 2;
     *   });
     * ```
     */
    /**
     * @ngdoc method
     * @name $provide#constant
     * @description
     *
     * Register a **constant service**, such as a string, a number, an array, an object or a function,
     * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
     * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
     * be overridden by an Angular {@link auto.$provide#decorator decorator}.
     *
     * @param {string} name The name of the constant.
     * @param {*} value The constant value.
     * @returns {Object} registered instance
     *
     * @example
     * Here a some examples of creating constants:
     * ```js
     *   $provide.constant('SHARD_HEIGHT', 306);
     *
     *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
     *
     *   $provide.constant('double', function(value) {
     *     return value * 2;
     *   });
     * ```
     */
    /**
     * @ngdoc method
     * @name $provide#decorator
     * @description
     *
     * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
     * intercepts the creation of a service, allowing it to override or modify the behaviour of the
     * service. The object returned by the decorator may be the original service, or a new service
     * object which replaces or wraps and delegates to the original service.
     *
     * @param {string} name The name of the service to decorate.
     * @param {function()} decorator This function will be invoked when the service needs to be
     *    instantiated and should return the decorated service instance. The function is called using
     *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
     *    Local injection arguments:
     *
     *    * `$delegate` - The original service instance, which can be monkey patched, configured,
     *      decorated or delegated to.
     *
     * @example
     * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
     * calls to {@link ng.$log#error $log.warn()}.
     * ```js
     *   $provide.decorator('$log', ['$delegate', function($delegate) {
     *     $delegate.warn = $delegate.error;
     *     return $delegate;
     *   }]);
     * ```
     */
    function createInjector(modulesToLoad, strictDi) {
        strictDi = (strictDi === true);
        var INSTANTIATING = {}, providerSuffix = 'Provider', path = [], loadedModules = new HashMap([], true), providerCache = {
            $provide: {
                provider: supportObject(provider),
                factory: supportObject(factory),
                service: supportObject(service),
                value: supportObject(value),
                constant: supportObject(constant),
                decorator: decorator
            }
        }, providerInjector = (providerCache.$injector =
            createInternalInjector(providerCache, function () {
                throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
            })), instanceCache = {}, instanceInjector = (instanceCache.$injector =
            createInternalInjector(instanceCache, function (servicename) {
                var provider = providerInjector.get(servicename + providerSuffix);
                return instanceInjector.invoke(provider.$get, provider, undefined, servicename);
            }));
        forEach(loadModules(modulesToLoad), function (fn) { instanceInjector.invoke(fn || noop); });
        return instanceInjector;
        ////////////////////////////////////
        // $provider
        ////////////////////////////////////
        function supportObject(delegate) {
            return function (key, value) {
                if (isObject(key)) {
                    forEach(key, reverseParams(delegate));
                }
                else {
                    return delegate(key, value);
                }
            };
        }
        function provider(name, provider_) {
            assertNotHasOwnProperty(name, 'service');
            if (isFunction(provider_) || isArray(provider_)) {
                provider_ = providerInjector.instantiate(provider_);
            }
            if (!provider_.$get) {
                throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
            }
            return providerCache[name + providerSuffix] = provider_;
        }
        function enforceReturnValue(name, factory) {
            return function enforcedReturnValue() {
                var result = instanceInjector.invoke(factory, this, undefined, name);
                if (isUndefined(result)) {
                    throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
                }
                return result;
            };
        }
        function factory(name, factoryFn, enforce) {
            return provider(name, {
                $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
            });
        }
        function service(name, constructor) {
            return factory(name, ['$injector', function ($injector) {
                    return $injector.instantiate(constructor);
                }]);
        }
        function value(name, val) { return factory(name, valueFn(val), false); }
        function constant(name, value) {
            assertNotHasOwnProperty(name, 'constant');
            providerCache[name] = value;
            instanceCache[name] = value;
        }
        function decorator(serviceName, decorFn) {
            var origProvider = providerInjector.get(serviceName + providerSuffix), orig$get = origProvider.$get;
            origProvider.$get = function () {
                var origInstance = instanceInjector.invoke(orig$get, origProvider);
                return instanceInjector.invoke(decorFn, null, { $delegate: origInstance });
            };
        }
        ////////////////////////////////////
        // Module Loading
        ////////////////////////////////////
        function loadModules(modulesToLoad) {
            var runBlocks = [], moduleFn;
            forEach(modulesToLoad, function (module) {
                if (loadedModules.get(module))
                    return;
                loadedModules.put(module, true);
                function runInvokeQueue(queue) {
                    var i, ii;
                    for (i = 0, ii = queue.length; i < ii; i++) {
                        var invokeArgs = queue[i], provider = providerInjector.get(invokeArgs[0]);
                        provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
                    }
                }
                try {
                    if (isString(module)) {
                        moduleFn = angularModule(module);
                        runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
                        runInvokeQueue(moduleFn._invokeQueue);
                        runInvokeQueue(moduleFn._configBlocks);
                    }
                    else if (isFunction(module)) {
                        runBlocks.push(providerInjector.invoke(module));
                    }
                    else if (isArray(module)) {
                        runBlocks.push(providerInjector.invoke(module));
                    }
                    else {
                        assertArgFn(module, 'module');
                    }
                }
                catch (e) {
                    if (isArray(module)) {
                        module = module[module.length - 1];
                    }
                    if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
                        // Safari & FF's stack traces don't contain error.message content
                        // unlike those of Chrome and IE
                        // So if stack doesn't contain message, we create a new string that contains both.
                        // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
                        /* jshint -W022 */
                        e = e.message + '\n' + e.stack;
                    }
                    throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}", module, e.stack || e.message || e);
                }
            });
            return runBlocks;
        }
        ////////////////////////////////////
        // internal Injector
        ////////////////////////////////////
        function createInternalInjector(cache, factory) {
            function getService(serviceName) {
                if (cache.hasOwnProperty(serviceName)) {
                    if (cache[serviceName] === INSTANTIATING) {
                        throw $injectorMinErr('cdep', 'Circular dependency found: {0}', serviceName + ' <- ' + path.join(' <- '));
                    }
                    return cache[serviceName];
                }
                else {
                    try {
                        path.unshift(serviceName);
                        cache[serviceName] = INSTANTIATING;
                        return cache[serviceName] = factory(serviceName);
                    }
                    catch (err) {
                        if (cache[serviceName] === INSTANTIATING) {
                            delete cache[serviceName];
                        }
                        throw err;
                    }
                    finally {
                        path.shift();
                    }
                }
            }
            function invoke(fn, self, locals, serviceName) {
                if (typeof locals === 'string') {
                    serviceName = locals;
                    locals = null;
                }
                var args = [], $inject = annotate(fn, strictDi, serviceName), length, i, key;
                for (i = 0, length = $inject.length; i < length; i++) {
                    key = $inject[i];
                    if (typeof key !== 'string') {
                        throw $injectorMinErr('itkn', 'Incorrect injection token! Expected service name as string, got {0}', key);
                    }
                    args.push(locals && locals.hasOwnProperty(key)
                        ? locals[key]
                        : getService(key));
                }
                if (isArray(fn)) {
                    fn = fn[length];
                }
                // http://jsperf.com/angularjs-invoke-apply-vs-switch
                // #5388
                return fn.apply(self, args);
            }
            function instantiate(Type, locals, serviceName) {
                // Check if Type is annotated and use just the given function at n-1 as parameter
                // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
                // Object creation: http://jsperf.com/create-constructor/2
                var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype);
                var returnedValue = invoke(Type, instance, locals, serviceName);
                return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
            }
            return {
                invoke: invoke,
                instantiate: instantiate,
                get: getService,
                annotate: annotate,
                has: function (name) {
                    return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
                }
            };
        }
    }
    createInjector.$$annotate = annotate;
    /**
     * @ngdoc provider
     * @name $anchorScrollProvider
     *
     * @description
     * Use `$anchorScrollProvider` to disable automatic scrolling whenever
     * {@link ng.$location#hash $location.hash()} changes.
     */
    function $AnchorScrollProvider() {
        var autoScrollingEnabled = true;
        /**
         * @ngdoc method
         * @name $anchorScrollProvider#disableAutoScrolling
         *
         * @description
         * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
         * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
         * Use this method to disable automatic scrolling.
         *
         * If automatic scrolling is disabled, one must explicitly call
         * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
         * current hash.
         */
        this.disableAutoScrolling = function () {
            autoScrollingEnabled = false;
        };
        /**
         * @ngdoc service
         * @name $anchorScroll
         * @kind function
         * @requires $window
         * @requires $location
         * @requires $rootScope
         *
         * @description
         * When called, it checks the current value of {@link ng.$location#hash $location.hash()} and
         * scrolls to the related element, according to the rules specified in the
         * [Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
         *
         * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
         * match any anchor whenever it changes. This can be disabled by calling
         * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
         *
         * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
         * vertical scroll-offset (either fixed or dynamic).
         *
         * @property {(number|function|jqLite)} yOffset
         * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
         * positioned elements at the top of the page, such as navbars, headers etc.
         *
         * `yOffset` can be specified in various ways:
         * - **number**: A fixed number of pixels to be used as offset.<br /><br />
         * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
         *   a number representing the offset (in pixels).<br /><br />
         * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
         *   the top of the page to the element's bottom will be used as offset.<br />
         *   **Note**: The element will be taken into account only as long as its `position` is set to
         *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
         *   their height and/or positioning according to the viewport's size.
         *
         * <br />
         * <div class="alert alert-warning">
         * In order for `yOffset` to work properly, scrolling should take place on the document's root and
         * not some child element.
         * </div>
         *
         * @example
           <example module="anchorScrollExample">
             <file name="index.html">
               <div id="scrollArea" ng-controller="ScrollController">
                 <a ng-click="gotoBottom()">Go to bottom</a>
                 <a id="bottom"></a> You're at the bottom!
               </div>
             </file>
             <file name="script.js">
               angular.module('anchorScrollExample', [])
                 .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
                   function ($scope, $location, $anchorScroll) {
                     $scope.gotoBottom = function() {
                       // set the location.hash to the id of
                       // the element you wish to scroll to.
                       $location.hash('bottom');
      
                       // call $anchorScroll()
                       $anchorScroll();
                     };
                   }]);
             </file>
             <file name="style.css">
               #scrollArea {
                 height: 280px;
                 overflow: auto;
               }
      
               #bottom {
                 display: block;
                 margin-top: 2000px;
               }
             </file>
           </example>
         *
         * <hr />
         * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
         * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
         *
         * @example
           <example module="anchorScrollOffsetExample">
             <file name="index.html">
               <div class="fixed-header" ng-controller="headerCtrl">
                 <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
                   Go to anchor {{x}}
                 </a>
               </div>
               <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
                 Anchor {{x}} of 5
               </div>
             </file>
             <file name="script.js">
               angular.module('anchorScrollOffsetExample', [])
                 .run(['$anchorScroll', function($anchorScroll) {
                   $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
                 }])
                 .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
                   function ($anchorScroll, $location, $scope) {
                     $scope.gotoAnchor = function(x) {
                       var newHash = 'anchor' + x;
                       if ($location.hash() !== newHash) {
                         // set the $location.hash to `newHash` and
                         // $anchorScroll will automatically scroll to it
                         $location.hash('anchor' + x);
                       } else {
                         // call $anchorScroll() explicitly,
                         // since $location.hash hasn't changed
                         $anchorScroll();
                       }
                     };
                   }
                 ]);
             </file>
             <file name="style.css">
               body {
                 padding-top: 50px;
               }
      
               .anchor {
                 border: 2px dashed DarkOrchid;
                 padding: 10px 10px 200px 10px;
               }
      
               .fixed-header {
                 background-color: rgba(0, 0, 0, 0.2);
                 height: 50px;
                 position: fixed;
                 top: 0; left: 0; right: 0;
               }
      
               .fixed-header > a {
                 display: inline-block;
                 margin: 5px 15px;
               }
             </file>
           </example>
         */
        this.$get = ['$window', '$location', '$rootScope', function ($window, $location, $rootScope) {
                var document = $window.document;
                // Helper function to get first anchor from a NodeList
                // (using `Array#some()` instead of `angular#forEach()` since it's more performant
                //  and working in all supported browsers.)
                function getFirstAnchor(list) {
                    var result = null;
                    Array.prototype.some.call(list, function (element) {
                        if (nodeName_(element) === 'a') {
                            result = element;
                            return true;
                        }
                    });
                    return result;
                }
                function getYOffset() {
                    var offset = scroll.yOffset;
                    if (isFunction(offset)) {
                        offset = offset();
                    }
                    else if (isElement(offset)) {
                        var elem = offset[0];
                        var style = $window.getComputedStyle(elem);
                        if (style.position !== 'fixed') {
                            offset = 0;
                        }
                        else {
                            offset = elem.getBoundingClientRect().bottom;
                        }
                    }
                    else if (!isNumber(offset)) {
                        offset = 0;
                    }
                    return offset;
                }
                function scrollTo(elem) {
                    if (elem) {
                        elem.scrollIntoView();
                        var offset = getYOffset();
                        if (offset) {
                            // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
                            // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
                            // top of the viewport.
                            //
                            // IF the number of pixels from the top of `elem` to the end of the page's content is less
                            // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
                            // way down the page.
                            //
                            // This is often the case for elements near the bottom of the page.
                            //
                            // In such cases we do not need to scroll the whole `offset` up, just the difference between
                            // the top of the element and the offset, which is enough to align the top of `elem` at the
                            // desired position.
                            var elemTop = elem.getBoundingClientRect().top;
                            $window.scrollBy(0, elemTop - offset);
                        }
                    }
                    else {
                        $window.scrollTo(0, 0);
                    }
                }
                function scroll() {
                    var hash = $location.hash(), elm;
                    // empty hash, scroll to the top of the page
                    if (!hash)
                        scrollTo(null);
                    else if ((elm = document.getElementById(hash)))
                        scrollTo(elm);
                    else if ((elm = getFirstAnchor(document.getElementsByName(hash))))
                        scrollTo(elm);
                    else if (hash === 'top')
                        scrollTo(null);
                }
                // does not scroll when user clicks on anchor link that is currently on
                // (no url change, no $location.hash() change), browser native does scroll
                if (autoScrollingEnabled) {
                    $rootScope.$watch(function autoScrollWatch() { return $location.hash(); }, function autoScrollWatchAction(newVal, oldVal) {
                        // skip the initial scroll if $location.hash is empty
                        if (newVal === oldVal && newVal === '')
                            return;
                        jqLiteDocumentLoaded(function () {
                            $rootScope.$evalAsync(scroll);
                        });
                    });
                }
                return scroll;
            }];
    }
    var $animateMinErr = minErr('$animate');
    /**
     * @ngdoc provider
     * @name $animateProvider
     *
     * @description
     * Default implementation of $animate that doesn't perform any animations, instead just
     * synchronously performs DOM
     * updates and calls done() callbacks.
     *
     * In order to enable animations the ngAnimate module has to be loaded.
     *
     * To see the functional implementation check out src/ngAnimate/animate.js
     */
    var $AnimateProvider = ['$provide', function ($provide) {
            this.$$selectors = {};
            /**
             * @ngdoc method
             * @name $animateProvider#register
             *
             * @description
             * Registers a new injectable animation factory function. The factory function produces the
             * animation object which contains callback functions for each event that is expected to be
             * animated.
             *
             *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`
             *   must be called once the element animation is complete. If a function is returned then the
             *   animation service will use this function to cancel the animation whenever a cancel event is
             *   triggered.
             *
             *
             * ```js
             *   return {
               *     eventFn : function(element, done) {
               *       //code to run the animation
               *       //once complete, then run done()
               *       return function cancellationFunction() {
               *         //code to cancel the animation
               *       }
               *     }
               *   }
             * ```
             *
             * @param {string} name The name of the animation.
             * @param {Function} factory The factory function that will be executed to return the animation
             *                           object.
             */
            this.register = function (name, factory) {
                var key = name + '-animation';
                if (name && name.charAt(0) != '.')
                    throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);
                this.$$selectors[name.substr(1)] = key;
                $provide.factory(key, factory);
            };
            /**
             * @ngdoc method
             * @name $animateProvider#classNameFilter
             *
             * @description
             * Sets and/or returns the CSS class regular expression that is checked when performing
             * an animation. Upon bootstrap the classNameFilter value is not set at all and will
             * therefore enable $animate to attempt to perform an animation on any element.
             * When setting the classNameFilter value, animations will only be performed on elements
             * that successfully match the filter expression. This in turn can boost performance
             * for low-powered devices as well as applications containing a lot of structural operations.
             * @param {RegExp=} expression The className expression which will be checked against all animations
             * @return {RegExp} The current CSS className expression value. If null then there is no expression value
             */
            this.classNameFilter = function (expression) {
                if (arguments.length === 1) {
                    this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
                }
                return this.$$classNameFilter;
            };
            this.$get = ['$$q', '$$asyncCallback', '$rootScope', function ($$q, $$asyncCallback, $rootScope) {
                    var currentDefer;
                    function runAnimationPostDigest(fn) {
                        var cancelFn, defer = $$q.defer();
                        defer.promise.$$cancelFn = function ngAnimateMaybeCancel() {
                            cancelFn && cancelFn();
                        };
                        $rootScope.$$postDigest(function ngAnimatePostDigest() {
                            cancelFn = fn(function ngAnimateNotifyComplete() {
                                defer.resolve();
                            });
                        });
                        return defer.promise;
                    }
                    function resolveElementClasses(element, classes) {
                        var toAdd = [], toRemove = [];
                        var hasClasses = createMap();
                        forEach((element.attr('class') || '').split(/\s+/), function (className) {
                            hasClasses[className] = true;
                        });
                        forEach(classes, function (status, className) {
                            var hasClass = hasClasses[className];
                            // If the most recent class manipulation (via $animate) was to remove the class, and the
                            // element currently has the class, the class is scheduled for removal. Otherwise, if
                            // the most recent class manipulation (via $animate) was to add the class, and the
                            // element does not currently have the class, the class is scheduled to be added.
                            if (status === false && hasClass) {
                                toRemove.push(className);
                            }
                            else if (status === true && !hasClass) {
                                toAdd.push(className);
                            }
                        });
                        return (toAdd.length + toRemove.length) > 0 &&
                            [toAdd.length ? toAdd : null, toRemove.length ? toRemove : null];
                    }
                    function cachedClassManipulation(cache, classes, op) {
                        for (var i = 0, ii = classes.length; i < ii; ++i) {
                            var className = classes[i];
                            cache[className] = op;
                        }
                    }
                    function asyncPromise() {
                        // only serve one instance of a promise in order to save CPU cycles
                        if (!currentDefer) {
                            currentDefer = $$q.defer();
                            $$asyncCallback(function () {
                                currentDefer.resolve();
                                currentDefer = null;
                            });
                        }
                        return currentDefer.promise;
                    }
                    function applyStyles(element, options) {
                        if (angular.isObject(options)) {
                            var styles = extend(options.from || {}, options.to || {});
                            element.css(styles);
                        }
                    }
                    /**
                     *
                     * @ngdoc service
                     * @name $animate
                     * @description The $animate service provides rudimentary DOM manipulation functions to
                     * insert, remove and move elements within the DOM, as well as adding and removing classes.
                     * This service is the core service used by the ngAnimate $animator service which provides
                     * high-level animation hooks for CSS and JavaScript.
                     *
                     * $animate is available in the AngularJS core, however, the ngAnimate module must be included
                     * to enable full out animation support. Otherwise, $animate will only perform simple DOM
                     * manipulation operations.
                     *
                     * To learn more about enabling animation support, click here to visit the {@link ngAnimate
                     * ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service
                     * page}.
                     */
                    return {
                        animate: function (element, from, to) {
                            applyStyles(element, { from: from, to: to });
                            return asyncPromise();
                        },
                        /**
                         *
                         * @ngdoc method
                         * @name $animate#enter
                         * @kind function
                         * @description Inserts the element into the DOM either after the `after` element or
                         * as the first child within the `parent` element. When the function is called a promise
                         * is returned that will be resolved at a later time.
                         * @param {DOMElement} element the element which will be inserted into the DOM
                         * @param {DOMElement} parent the parent element which will append the element as
                         *   a child (if the after element is not present)
                         * @param {DOMElement} after the sibling element which will append the element
                         *   after itself
                         * @param {object=} options an optional collection of styles that will be applied to the element.
                         * @return {Promise} the animation callback promise
                         */
                        enter: function (element, parent, after, options) {
                            applyStyles(element, options);
                            after ? after.after(element)
                                : parent.prepend(element);
                            return asyncPromise();
                        },
                        /**
                         *
                         * @ngdoc method
                         * @name $animate#leave
                         * @kind function
                         * @description Removes the element from the DOM. When the function is called a promise
                         * is returned that will be resolved at a later time.
                         * @param {DOMElement} element the element which will be removed from the DOM
                         * @param {object=} options an optional collection of options that will be applied to the element.
                         * @return {Promise} the animation callback promise
                         */
                        leave: function (element, options) {
                            element.remove();
                            return asyncPromise();
                        },
                        /**
                         *
                         * @ngdoc method
                         * @name $animate#move
                         * @kind function
                         * @description Moves the position of the provided element within the DOM to be placed
                         * either after the `after` element or inside of the `parent` element. When the function
                         * is called a promise is returned that will be resolved at a later time.
                         *
                         * @param {DOMElement} element the element which will be moved around within the
                         *   DOM
                         * @param {DOMElement} parent the parent element where the element will be
                         *   inserted into (if the after element is not present)
                         * @param {DOMElement} after the sibling element where the element will be
                         *   positioned next to
                         * @param {object=} options an optional collection of options that will be applied to the element.
                         * @return {Promise} the animation callback promise
                         */
                        move: function (element, parent, after, options) {
                            // Do not remove element before insert. Removing will cause data associated with the
                            // element to be dropped. Insert will implicitly do the remove.
                            return this.enter(element, parent, after, options);
                        },
                        /**
                         *
                         * @ngdoc method
                         * @name $animate#addClass
                         * @kind function
                         * @description Adds the provided className CSS class value to the provided element.
                         * When the function is called a promise is returned that will be resolved at a later time.
                         * @param {DOMElement} element the element which will have the className value
                         *   added to it
                         * @param {string} className the CSS class which will be added to the element
                         * @param {object=} options an optional collection of options that will be applied to the element.
                         * @return {Promise} the animation callback promise
                         */
                        addClass: function (element, className, options) {
                            return this.setClass(element, className, [], options);
                        },
                        $$addClassImmediately: function (element, className, options) {
                            element = jqLite(element);
                            className = !isString(className)
                                ? (isArray(className) ? className.join(' ') : '')
                                : className;
                            forEach(element, function (element) {
                                jqLiteAddClass(element, className);
                            });
                            applyStyles(element, options);
                            return asyncPromise();
                        },
                        /**
                         *
                         * @ngdoc method
                         * @name $animate#removeClass
                         * @kind function
                         * @description Removes the provided className CSS class value from the provided element.
                         * When the function is called a promise is returned that will be resolved at a later time.
                         * @param {DOMElement} element the element which will have the className value
                         *   removed from it
                         * @param {string} className the CSS class which will be removed from the element
                         * @param {object=} options an optional collection of options that will be applied to the element.
                         * @return {Promise} the animation callback promise
                         */
                        removeClass: function (element, className, options) {
                            return this.setClass(element, [], className, options);
                        },
                        $$removeClassImmediately: function (element, className, options) {
                            element = jqLite(element);
                            className = !isString(className)
                                ? (isArray(className) ? className.join(' ') : '')
                                : className;
                            forEach(element, function (element) {
                                jqLiteRemoveClass(element, className);
                            });
                            applyStyles(element, options);
                            return asyncPromise();
                        },
                        /**
                         *
                         * @ngdoc method
                         * @name $animate#setClass
                         * @kind function
                         * @description Adds and/or removes the given CSS classes to and from the element.
                         * When the function is called a promise is returned that will be resolved at a later time.
                         * @param {DOMElement} element the element which will have its CSS classes changed
                         *   removed from it
                         * @param {string} add the CSS classes which will be added to the element
                         * @param {string} remove the CSS class which will be removed from the element
                         * @param {object=} options an optional collection of options that will be applied to the element.
                         * @return {Promise} the animation callback promise
                         */
                        setClass: function (element, add, remove, options) {
                            var self = this;
                            var STORAGE_KEY = '$$animateClasses';
                            var createdCache = false;
                            element = jqLite(element);
                            var cache = element.data(STORAGE_KEY);
                            if (!cache) {
                                cache = {
                                    classes: {},
                                    options: options
                                };
                                createdCache = true;
                            }
                            else if (options && cache.options) {
                                cache.options = angular.extend(cache.options || {}, options);
                            }
                            var classes = cache.classes;
                            add = isArray(add) ? add : add.split(' ');
                            remove = isArray(remove) ? remove : remove.split(' ');
                            cachedClassManipulation(classes, add, true);
                            cachedClassManipulation(classes, remove, false);
                            if (createdCache) {
                                cache.promise = runAnimationPostDigest(function (done) {
                                    var cache = element.data(STORAGE_KEY);
                                    element.removeData(STORAGE_KEY);
                                    // in the event that the element is removed before postDigest
                                    // is run then the cache will be undefined and there will be
                                    // no need anymore to add or remove and of the element classes
                                    if (cache) {
                                        var classes = resolveElementClasses(element, cache.classes);
                                        if (classes) {
                                            self.$$setClassImmediately(element, classes[0], classes[1], cache.options);
                                        }
                                    }
                                    done();
                                });
                                element.data(STORAGE_KEY, cache);
                            }
                            return cache.promise;
                        },
                        $$setClassImmediately: function (element, add, remove, options) {
                            add && this.$$addClassImmediately(element, add);
                            remove && this.$$removeClassImmediately(element, remove);
                            applyStyles(element, options);
                            return asyncPromise();
                        },
                        enabled: noop,
                        cancel: noop
                    };
                }];
        }];
    function $$AsyncCallbackProvider() {
        this.$get = ['$$rAF', '$timeout', function ($$rAF, $timeout) {
                return $$rAF.supported
                    ? function (fn) { return $$rAF(fn); }
                    : function (fn) {
                        return $timeout(fn, 0, false);
                    };
            }];
    }
    /* global stripHash: true */
    /**
     * ! This is a private undocumented service !
     *
     * @name $browser
     * @requires $log
     * @description
     * This object has two goals:
     *
     * - hide all the global state in the browser caused by the window object
     * - abstract away all the browser specific features and inconsistencies
     *
     * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
     * service, which can be used for convenient testing of the application without the interaction with
     * the real browser apis.
     */
    /**
     * @param {object} window The global window object.
     * @param {object} document jQuery wrapped document.
     * @param {object} $log window.console or an object with the same interface.
     * @param {object} $sniffer $sniffer service
     */
    function Browser(window, document, $log, $sniffer) {
        var self = this, rawDocument = document[0], location = window.location, history = window.history, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, pendingDeferIds = {};
        self.isMock = false;
        var outstandingRequestCount = 0;
        var outstandingRequestCallbacks = [];
        // TODO(vojta): remove this temporary api
        self.$$completeOutstandingRequest = completeOutstandingRequest;
        self.$$incOutstandingRequestCount = function () { outstandingRequestCount++; };
        /**
         * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
         * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
         */
        function completeOutstandingRequest(fn) {
            try {
                fn.apply(null, sliceArgs(arguments, 1));
            }
            finally {
                outstandingRequestCount--;
                if (outstandingRequestCount === 0) {
                    while (outstandingRequestCallbacks.length) {
                        try {
                            outstandingRequestCallbacks.pop()();
                        }
                        catch (e) {
                            $log.error(e);
                        }
                    }
                }
            }
        }
        /**
         * @private
         * Note: this method is used only by scenario runner
         * TODO(vojta): prefix this method with $$ ?
         * @param {function()} callback Function that will be called when no outstanding request
         */
        self.notifyWhenNoOutstandingRequests = function (callback) {
            // force browser to execute all pollFns - this is needed so that cookies and other pollers fire
            // at some deterministic time in respect to the test runner's actions. Leaving things up to the
            // regular poller would result in flaky tests.
            forEach(pollFns, function (pollFn) { pollFn(); });
            if (outstandingRequestCount === 0) {
                callback();
            }
            else {
                outstandingRequestCallbacks.push(callback);
            }
        };
        //////////////////////////////////////////////////////////////
        // Poll Watcher API
        //////////////////////////////////////////////////////////////
        var pollFns = [], pollTimeout;
        /**
         * @name $browser#addPollFn
         *
         * @param {function()} fn Poll function to add
         *
         * @description
         * Adds a function to the list of functions that poller periodically executes,
         * and starts polling if not started yet.
         *
         * @returns {function()} the added function
         */
        self.addPollFn = function (fn) {
            if (isUndefined(pollTimeout))
                startPoller(100, setTimeout);
            pollFns.push(fn);
            return fn;
        };
        /**
         * @param {number} interval How often should browser call poll functions (ms)
         * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.
         *
         * @description
         * Configures the poller to run in the specified intervals, using the specified
         * setTimeout fn and kicks it off.
         */
        function startPoller(interval, setTimeout) {
            (function check() {
                forEach(pollFns, function (pollFn) { pollFn(); });
                pollTimeout = setTimeout(check, interval);
            })();
        }
        //////////////////////////////////////////////////////////////
        // URL API
        //////////////////////////////////////////////////////////////
        var cachedState, lastHistoryState, lastBrowserUrl = location.href, baseElement = document.find('base'), reloadLocation = null;
        cacheState();
        lastHistoryState = cachedState;
        /**
         * @name $browser#url
         *
         * @description
         * GETTER:
         * Without any argument, this method just returns current value of location.href.
         *
         * SETTER:
         * With at least one argument, this method sets url to new value.
         * If html5 history api supported, pushState/replaceState is used, otherwise
         * location.href/location.replace is used.
         * Returns its own instance to allow chaining
         *
         * NOTE: this api is intended for use only by the $location service. Please use the
         * {@link ng.$location $location service} to change url.
         *
         * @param {string} url New url (when used as setter)
         * @param {boolean=} replace Should new url replace current history record?
         * @param {object=} state object to use with pushState/replaceState
         */
        self.url = function (url, replace, state) {
            // In modern browsers `history.state` is `null` by default; treating it separately
            // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
            // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
            if (isUndefined(state)) {
                state = null;
            }
            // Android Browser BFCache causes location, history reference to become stale.
            if (location !== window.location)
                location = window.location;
            if (history !== window.history)
                history = window.history;
            // setter
            if (url) {
                var sameState = lastHistoryState === state;
                // Don't change anything if previous and current URLs and states match. This also prevents
                // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
                // See https://github.com/angular/angular.js/commit/ffb2701
                if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
                    return self;
                }
                var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
                lastBrowserUrl = url;
                lastHistoryState = state;
                // Don't use history API if only the hash changed
                // due to a bug in IE10/IE11 which leads
                // to not firing a `hashchange` nor `popstate` event
                // in some cases (see #9143).
                if ($sniffer.history && (!sameBase || !sameState)) {
                    history[replace ? 'replaceState' : 'pushState'](state, '', url);
                    cacheState();
                    // Do the assignment again so that those two variables are referentially identical.
                    lastHistoryState = cachedState;
                }
                else {
                    if (!sameBase) {
                        reloadLocation = url;
                    }
                    if (replace) {
                        location.replace(url);
                    }
                    else {
                        location.href = url;
                    }
                }
                return self;
                // getter
            }
            else {
                // - reloadLocation is needed as browsers don't allow to read out
                //   the new location.href if a reload happened.
                // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
                return reloadLocation || location.href.replace(/%27/g, "'");
            }
        };
        /**
         * @name $browser#state
         *
         * @description
         * This method is a getter.
         *
         * Return history.state or null if history.state is undefined.
         *
         * @returns {object} state
         */
        self.state = function () {
            return cachedState;
        };
        var urlChangeListeners = [], urlChangeInit = false;
        function cacheStateAndFireUrlChange() {
            cacheState();
            fireUrlChange();
        }
        // This variable should be used *only* inside the cacheState function.
        var lastCachedState = null;
        function cacheState() {
            // This should be the only place in $browser where `history.state` is read.
            try {
                cachedState = window.history.state;
            }
            catch (e) {
                // MSIE can reportedly throw when there is no state (UNCONFIRMED).
            }
            cachedState = isUndefined(cachedState) ? null : cachedState;
            // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
            if (equals(cachedState, lastCachedState)) {
                cachedState = lastCachedState;
            }
            lastCachedState = cachedState;
        }
        function fireUrlChange() {
            if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
                return;
            }
            lastBrowserUrl = self.url();
            lastHistoryState = cachedState;
            forEach(urlChangeListeners, function (listener) {
                listener(self.url(), cachedState);
            });
        }
        /**
         * @name $browser#onUrlChange
         *
         * @description
         * Register callback function that will be called, when url changes.
         *
         * It's only called when the url is changed from outside of angular:
         * - user types different url into address bar
         * - user clicks on history (forward/back) button
         * - user clicks on a link
         *
         * It's not called when url is changed by $browser.url() method
         *
         * The listener gets called with new url as parameter.
         *
         * NOTE: this api is intended for use only by the $location service. Please use the
         * {@link ng.$location $location service} to monitor url changes in angular apps.
         *
         * @param {function(string)} listener Listener function to be called when url changes.
         * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
         */
        self.onUrlChange = function (callback) {
            // TODO(vojta): refactor to use node's syntax for events
            if (!urlChangeInit) {
                // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
                // don't fire popstate when user change the address bar and don't fire hashchange when url
                // changed by push/replaceState
                // html5 history api - popstate event
                if ($sniffer.history)
                    jqLite(window).on('popstate', cacheStateAndFireUrlChange);
                // hashchange event
                jqLite(window).on('hashchange', cacheStateAndFireUrlChange);
                urlChangeInit = true;
            }
            urlChangeListeners.push(callback);
            return callback;
        };
        /**
         * Checks whether the url has changed outside of Angular.
         * Needs to be exported to be able to check for changes that have been done in sync,
         * as hashchange/popstate events fire in async.
         */
        self.$$checkUrlChange = fireUrlChange;
        //////////////////////////////////////////////////////////////
        // Misc API
        //////////////////////////////////////////////////////////////
        /**
         * @name $browser#baseHref
         *
         * @description
         * Returns current <base href>
         * (always relative - without domain)
         *
         * @returns {string} The current base href
         */
        self.baseHref = function () {
            var href = baseElement.attr('href');
            return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
        };
        //////////////////////////////////////////////////////////////
        // Cookies API
        //////////////////////////////////////////////////////////////
        var lastCookies = {};
        var lastCookieString = '';
        var cookiePath = self.baseHref();
        function safeDecodeURIComponent(str) {
            try {
                return decodeURIComponent(str);
            }
            catch (e) {
                return str;
            }
        }
        /**
         * @name $browser#cookies
         *
         * @param {string=} name Cookie name
         * @param {string=} value Cookie value
         *
         * @description
         * The cookies method provides a 'private' low level access to browser cookies.
         * It is not meant to be used directly, use the $cookie service instead.
         *
         * The return values vary depending on the arguments that the method was called with as follows:
         *
         * - cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify
         *   it
         * - cookies(name, value) -> set name to value, if value is undefined delete the cookie
         * - cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that
         *   way)
         *
         * @returns {Object} Hash of all cookies (if called without any parameter)
         */
        self.cookies = function (name, value) {
            var cookieLength, cookieArray, cookie, i, index;
            if (name) {
                if (value === undefined) {
                    rawDocument.cookie = encodeURIComponent(name) + "=;path=" + cookiePath +
                        ";expires=Thu, 01 Jan 1970 00:00:00 GMT";
                }
                else {
                    if (isString(value)) {
                        cookieLength = (rawDocument.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) +
                            ';path=' + cookiePath).length + 1;
                        // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
                        // - 300 cookies
                        // - 20 cookies per unique domain
                        // - 4096 bytes per cookie
                        if (cookieLength > 4096) {
                            $log.warn("Cookie '" + name +
                                "' possibly not set or overflowed because it was too large (" +
                                cookieLength + " > 4096 bytes)!");
                        }
                    }
                }
            }
            else {
                if (rawDocument.cookie !== lastCookieString) {
                    lastCookieString = rawDocument.cookie;
                    cookieArray = lastCookieString.split("; ");
                    lastCookies = {};
                    for (i = 0; i < cookieArray.length; i++) {
                        cookie = cookieArray[i];
                        index = cookie.indexOf('=');
                        if (index > 0) {
                            name = safeDecodeURIComponent(cookie.substring(0, index));
                            // the first value that is seen for a cookie is the most
                            // specific one.  values for the same cookie name that
                            // follow are for less specific paths.
                            if (lastCookies[name] === undefined) {
                                lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
                            }
                        }
                    }
                }
                return lastCookies;
            }
        };
        /**
         * @name $browser#defer
         * @param {function()} fn A function, who's execution should be deferred.
         * @param {number=} [delay=0] of milliseconds to defer the function execution.
         * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
         *
         * @description
         * Executes a fn asynchronously via `setTimeout(fn, delay)`.
         *
         * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
         * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
         * via `$browser.defer.flush()`.
         *
         */
        self.defer = function (fn, delay) {
            var timeoutId;
            outstandingRequestCount++;
            timeoutId = setTimeout(function () {
                delete pendingDeferIds[timeoutId];
                completeOutstandingRequest(fn);
            }, delay || 0);
            pendingDeferIds[timeoutId] = true;
            return timeoutId;
        };
        /**
         * @name $browser#defer.cancel
         *
         * @description
         * Cancels a deferred task identified with `deferId`.
         *
         * @param {*} deferId Token returned by the `$browser.defer` function.
         * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
         *                    canceled.
         */
        self.defer.cancel = function (deferId) {
            if (pendingDeferIds[deferId]) {
                delete pendingDeferIds[deferId];
                clearTimeout(deferId);
                completeOutstandingRequest(noop);
                return true;
            }
            return false;
        };
    }
    function $BrowserProvider() {
        this.$get = ['$window', '$log', '$sniffer', '$document',
            function ($window, $log, $sniffer, $document) {
                return new Browser($window, $document, $log, $sniffer);
            }];
    }
    /**
     * @ngdoc service
     * @name $cacheFactory
     *
     * @description
     * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
     * them.
     *
     * ```js
     *
     *  var cache = $cacheFactory('cacheId');
     *  expect($cacheFactory.get('cacheId')).toBe(cache);
     *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
     *
     *  cache.put("key", "value");
     *  cache.put("another key", "another value");
     *
     *  // We've specified no options on creation
     *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
     *
     * ```
     *
     *
     * @param {string} cacheId Name or id of the newly created cache.
     * @param {object=} options Options object that specifies the cache behavior. Properties:
     *
     *   - `{number=}` `capacity` — turns the cache into LRU cache.
     *
     * @returns {object} Newly created cache object with the following set of methods:
     *
     * - `{object}` `info()` — Returns id, size, and options of cache.
     * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
     *   it.
     * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
     * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
     * - `{void}` `removeAll()` — Removes all cached values.
     * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
     *
     * @example
       <example module="cacheExampleApp">
         <file name="index.html">
           <div ng-controller="CacheController">
             <input ng-model="newCacheKey" placeholder="Key">
             <input ng-model="newCacheValue" placeholder="Value">
             <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>
    
             <p ng-if="keys.length">Cached Values</p>
             <div ng-repeat="key in keys">
               <span ng-bind="key"></span>
               <span>: </span>
               <b ng-bind="cache.get(key)"></b>
             </div>
    
             <p>Cache Info</p>
             <div ng-repeat="(key, value) in cache.info()">
               <span ng-bind="key"></span>
               <span>: </span>
               <b ng-bind="value"></b>
             </div>
           </div>
         </file>
         <file name="script.js">
           angular.module('cacheExampleApp', []).
             controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
               $scope.keys = [];
               $scope.cache = $cacheFactory('cacheId');
               $scope.put = function(key, value) {
                 if ($scope.cache.get(key) === undefined) {
                   $scope.keys.push(key);
                 }
                 $scope.cache.put(key, value === undefined ? null : value);
               };
             }]);
         </file>
         <file name="style.css">
           p {
             margin: 10px 0 3px;
           }
         </file>
       </example>
     */
    function $CacheFactoryProvider() {
        this.$get = function () {
            var caches = {};
            function cacheFactory(cacheId, options) {
                if (cacheId in caches) {
                    throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
                }
                var size = 0, stats = extend({}, options, { id: cacheId }), data = {}, capacity = (options && options.capacity) || Number.MAX_VALUE, lruHash = {}, freshEnd = null, staleEnd = null;
                /**
                 * @ngdoc type
                 * @name $cacheFactory.Cache
                 *
                 * @description
                 * A cache object used to store and retrieve data, primarily used by
                 * {@link $http $http} and the {@link ng.directive:script script} directive to cache
                 * templates and other data.
                 *
                 * ```js
                 *  angular.module('superCache')
                 *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
                 *      return $cacheFactory('super-cache');
                 *    }]);
                 * ```
                 *
                 * Example test:
                 *
                 * ```js
                 *  it('should behave like a cache', inject(function(superCache) {
                 *    superCache.put('key', 'value');
                 *    superCache.put('another key', 'another value');
                 *
                 *    expect(superCache.info()).toEqual({
                 *      id: 'super-cache',
                 *      size: 2
                 *    });
                 *
                 *    superCache.remove('another key');
                 *    expect(superCache.get('another key')).toBeUndefined();
                 *
                 *    superCache.removeAll();
                 *    expect(superCache.info()).toEqual({
                 *      id: 'super-cache',
                 *      size: 0
                 *    });
                 *  }));
                 * ```
                 */
                return caches[cacheId] = {
                    /**
                     * @ngdoc method
                     * @name $cacheFactory.Cache#put
                     * @kind function
                     *
                     * @description
                     * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
                     * retrieved later, and incrementing the size of the cache if the key was not already
                     * present in the cache. If behaving like an LRU cache, it will also remove stale
                     * entries from the set.
                     *
                     * It will not insert undefined values into the cache.
                     *
                     * @param {string} key the key under which the cached data is stored.
                     * @param {*} value the value to store alongside the key. If it is undefined, the key
                     *    will not be stored.
                     * @returns {*} the value stored.
                     */
                    put: function (key, value) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key] || (lruHash[key] = { key: key });
                            refresh(lruEntry);
                        }
                        if (isUndefined(value))
                            return;
                        if (!(key in data))
                            size++;
                        data[key] = value;
                        if (size > capacity) {
                            this.remove(staleEnd.key);
                        }
                        return value;
                    },
                    /**
                     * @ngdoc method
                     * @name $cacheFactory.Cache#get
                     * @kind function
                     *
                     * @description
                     * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
                     *
                     * @param {string} key the key of the data to be retrieved
                     * @returns {*} the value stored.
                     */
                    get: function (key) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key];
                            if (!lruEntry)
                                return;
                            refresh(lruEntry);
                        }
                        return data[key];
                    },
                    /**
                     * @ngdoc method
                     * @name $cacheFactory.Cache#remove
                     * @kind function
                     *
                     * @description
                     * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
                     *
                     * @param {string} key the key of the entry to be removed
                     */
                    remove: function (key) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key];
                            if (!lruEntry)
                                return;
                            if (lruEntry == freshEnd)
                                freshEnd = lruEntry.p;
                            if (lruEntry == staleEnd)
                                staleEnd = lruEntry.n;
                            link(lruEntry.n, lruEntry.p);
                            delete lruHash[key];
                        }
                        delete data[key];
                        size--;
                    },
                    /**
                     * @ngdoc method
                     * @name $cacheFactory.Cache#removeAll
                     * @kind function
                     *
                     * @description
                     * Clears the cache object of any entries.
                     */
                    removeAll: function () {
                        data = {};
                        size = 0;
                        lruHash = {};
                        freshEnd = staleEnd = null;
                    },
                    /**
                     * @ngdoc method
                     * @name $cacheFactory.Cache#destroy
                     * @kind function
                     *
                     * @description
                     * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
                     * removing it from the {@link $cacheFactory $cacheFactory} set.
                     */
                    destroy: function () {
                        data = null;
                        stats = null;
                        lruHash = null;
                        delete caches[cacheId];
                    },
                    /**
                     * @ngdoc method
                     * @name $cacheFactory.Cache#info
                     * @kind function
                     *
                     * @description
                     * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
                     *
                     * @returns {object} an object with the following properties:
                     *   <ul>
                     *     <li>**id**: the id of the cache instance</li>
                     *     <li>**size**: the number of entries kept in the cache instance</li>
                     *     <li>**...**: any additional properties from the options object when creating the
                     *       cache.</li>
                     *   </ul>
                     */
                    info: function () {
                        return extend({}, stats, { size: size });
                    }
                };
                /**
                 * makes the `entry` the freshEnd of the LRU linked list
                 */
                function refresh(entry) {
                    if (entry != freshEnd) {
                        if (!staleEnd) {
                            staleEnd = entry;
                        }
                        else if (staleEnd == entry) {
                            staleEnd = entry.n;
                        }
                        link(entry.n, entry.p);
                        link(entry, freshEnd);
                        freshEnd = entry;
                        freshEnd.n = null;
                    }
                }
                /**
                 * bidirectionally links two entries of the LRU linked list
                 */
                function link(nextEntry, prevEntry) {
                    if (nextEntry != prevEntry) {
                        if (nextEntry)
                            nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
                        if (prevEntry)
                            prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
                    }
                }
            }
            /**
             * @ngdoc method
             * @name $cacheFactory#info
             *
             * @description
             * Get information about all the caches that have been created
             *
             * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
             */
            cacheFactory.info = function () {
                var info = {};
                forEach(caches, function (cache, cacheId) {
                    info[cacheId] = cache.info();
                });
                return info;
            };
            /**
             * @ngdoc method
             * @name $cacheFactory#get
             *
             * @description
             * Get access to a cache object by the `cacheId` used when it was created.
             *
             * @param {string} cacheId Name or id of a cache to access.
             * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
             */
            cacheFactory.get = function (cacheId) {
                return caches[cacheId];
            };
            return cacheFactory;
        };
    }
    /**
     * @ngdoc service
     * @name $templateCache
     *
     * @description
     * The first time a template is used, it is loaded in the template cache for quick retrieval. You
     * can load templates directly into the cache in a `script` tag, or by consuming the
     * `$templateCache` service directly.
     *
     * Adding via the `script` tag:
     *
     * ```html
     *   <script type="text/ng-template" id="templateId.html">
     *     <p>This is the content of the template</p>
     *   </script>
     * ```
     *
     * **Note:** the `script` tag containing the template does not need to be included in the `head` of
     * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
     * element with ng-app attribute), otherwise the template will be ignored.
     *
     * Adding via the $templateCache service:
     *
     * ```js
     * var myApp = angular.module('myApp', []);
     * myApp.run(function($templateCache) {
     *   $templateCache.put('templateId.html', 'This is the content of the template');
     * });
     * ```
     *
     * To retrieve the template later, simply use it in your HTML:
     * ```html
     * <div ng-include=" 'templateId.html' "></div>
     * ```
     *
     * or get it via Javascript:
     * ```js
     * $templateCache.get('templateId.html')
     * ```
     *
     * See {@link ng.$cacheFactory $cacheFactory}.
     *
     */
    function $TemplateCacheProvider() {
        this.$get = ['$cacheFactory', function ($cacheFactory) {
                return $cacheFactory('templates');
            }];
    }
    /* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
     *
     * DOM-related variables:
     *
     * - "node" - DOM Node
     * - "element" - DOM Element or Node
     * - "$node" or "$element" - jqLite-wrapped node or element
     *
     *
     * Compiler related stuff:
     *
     * - "linkFn" - linking fn of a single directive
     * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
     * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
     * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
     */
    /**
     * @ngdoc service
     * @name $compile
     * @kind function
     *
     * @description
     * Compiles an HTML string or DOM into a template and produces a template function, which
     * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
     *
     * The compilation is a process of walking the DOM tree and matching DOM elements to
     * {@link ng.$compileProvider#directive directives}.
     *
     * <div class="alert alert-warning">
     * **Note:** This document is an in-depth reference of all directive options.
     * For a gentle introduction to directives with examples of common use cases,
     * see the {@link guide/directive directive guide}.
     * </div>
     *
     * ## Comprehensive Directive API
     *
     * There are many different options for a directive.
     *
     * The difference resides in the return value of the factory function.
     * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
     * or just the `postLink` function (all other properties will have the default values).
     *
     * <div class="alert alert-success">
     * **Best Practice:** It's recommended to use the "directive definition object" form.
     * </div>
     *
     * Here's an example directive declared with a Directive Definition Object:
     *
     * ```js
     *   var myModule = angular.module(...);
     *
     *   myModule.directive('directiveName', function factory(injectables) {
     *     var directiveDefinitionObject = {
     *       priority: 0,
     *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
     *       // or
     *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
     *       transclude: false,
     *       restrict: 'A',
     *       templateNamespace: 'html',
     *       scope: false,
     *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
     *       controllerAs: 'stringAlias',
     *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
     *       compile: function compile(tElement, tAttrs, transclude) {
     *         return {
     *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
     *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
     *         }
     *         // or
     *         // return function postLink( ... ) { ... }
     *       },
     *       // or
     *       // link: {
     *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
     *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
     *       // }
     *       // or
     *       // link: function postLink( ... ) { ... }
     *     };
     *     return directiveDefinitionObject;
     *   });
     * ```
     *
     * <div class="alert alert-warning">
     * **Note:** Any unspecified options will use the default value. You can see the default values below.
     * </div>
     *
     * Therefore the above can be simplified as:
     *
     * ```js
     *   var myModule = angular.module(...);
     *
     *   myModule.directive('directiveName', function factory(injectables) {
     *     var directiveDefinitionObject = {
     *       link: function postLink(scope, iElement, iAttrs) { ... }
     *     };
     *     return directiveDefinitionObject;
     *     // or
     *     // return function postLink(scope, iElement, iAttrs) { ... }
     *   });
     * ```
     *
     *
     *
     * ### Directive Definition Object
     *
     * The directive definition object provides instructions to the {@link ng.$compile
     * compiler}. The attributes are:
     *
     * #### `multiElement`
     * When this property is set to true, the HTML compiler will collect DOM nodes between
     * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
     * together as the directive elements. It is recomended that this feature be used on directives
     * which are not strictly behavioural (such as {@link ngClick}), and which
     * do not manipulate or replace child nodes (such as {@link ngInclude}).
     *
     * #### `priority`
     * When there are multiple directives defined on a single DOM element, sometimes it
     * is necessary to specify the order in which the directives are applied. The `priority` is used
     * to sort the directives before their `compile` functions get called. Priority is defined as a
     * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
     * are also run in priority order, but post-link functions are run in reverse order. The order
     * of directives with the same priority is undefined. The default priority is `0`.
     *
     * #### `terminal`
     * If set to true then the current `priority` will be the last set of directives
     * which will execute (any directives at the current priority will still execute
     * as the order of execution on same `priority` is undefined). Note that expressions
     * and other directives used in the directive's template will also be excluded from execution.
     *
     * #### `scope`
     * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the
     * same element request a new scope, only one new scope is created. The new scope rule does not
     * apply for the root of the template since the root of the template always gets a new scope.
     *
     * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from
     * normal scope in that it does not prototypically inherit from the parent scope. This is useful
     * when creating reusable components, which should not accidentally read or modify data in the
     * parent scope.
     *
     * The 'isolate' scope takes an object hash which defines a set of local scope properties
     * derived from the parent scope. These local properties are useful for aliasing values for
     * templates. Locals definition is a hash of local scope property to its source:
     *
     * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
     *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
     *   attribute name is assumed to be the same as the local name.
     *   Given `<widget my-attr="hello {{name}}">` and widget definition
     *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
     *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
     *   `localName` property on the widget scope. The `name` is read from the parent scope (not
     *   component scope).
     *
     * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
     *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
     *   name is specified then the attribute name is assumed to be the same as the local name.
     *   Given `<widget my-attr="parentModel">` and widget definition of
     *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
     *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
     *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
     *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
     *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If
     *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use
     *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).
     *
     * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
     *   If no `attr` name is specified then the attribute name is assumed to be the same as the
     *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
     *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
     *   a function wrapper for the `count = count + value` expression. Often it's desirable to
     *   pass data from the isolated scope via an expression to the parent scope, this can be
     *   done by passing a map of local variable names and values into the expression wrapper fn.
     *   For example, if the expression is `increment(amount)` then we can specify the amount value
     *   by calling the `localFn` as `localFn({amount: 22})`.
     *
     *
     * #### `bindToController`
     * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
     * allow a component to have its properties bound to the controller, rather than to scope. When the controller
     * is instantiated, the initial values of the isolate scope bindings are already available.
     *
     * #### `controller`
     * Controller constructor function. The controller is instantiated before the
     * pre-linking phase and it is shared with other directives (see
     * `require` attribute). This allows the directives to communicate with each other and augment
     * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
     *
     * * `$scope` - Current scope associated with the element
     * * `$element` - Current element
     * * `$attrs` - Current attributes object for the element
     * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
     *   `function([scope], cloneLinkingFn, futureParentElement)`.
     *    * `scope`: optional argument to override the scope.
     *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.
     *    * `futureParentElement`:
     *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
     *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
     *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
     *          and when the `cloneLinkinFn` is passed,
     *          as those elements need to created and cloned in a special way when they are defined outside their
     *          usual containers (e.g. like `<svg>`).
     *        * See also the `directive.templateNamespace` property.
     *
     *
     * #### `require`
     * Require another directive and inject its controller as the fourth argument to the linking function. The
     * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
     * injected argument will be an array in corresponding order. If no such directive can be
     * found, or if the directive does not have a controller, then an error is raised. The name can be prefixed with:
     *
     * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
     * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
     * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
     * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
     * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
     *   `null` to the `link` fn if not found.
     * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
     *   `null` to the `link` fn if not found.
     *
     *
     * #### `controllerAs`
     * Controller alias at the directive scope. An alias for the controller so it
     * can be referenced at the directive template. The directive needs to define a scope for this
     * configuration to be used. Useful in the case when directive is used as component.
     *
     *
     * #### `restrict`
     * String of subset of `EACM` which restricts the directive to a specific directive
     * declaration style. If omitted, the defaults (elements and attributes) are used.
     *
     * * `E` - Element name (default): `<my-directive></my-directive>`
     * * `A` - Attribute (default): `<div my-directive="exp"></div>`
     * * `C` - Class: `<div class="my-directive: exp;"></div>`
     * * `M` - Comment: `<!-- directive: my-directive exp -->`
     *
     *
     * #### `templateNamespace`
     * String representing the document type used by the markup in the template.
     * AngularJS needs this information as those elements need to be created and cloned
     * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
     *
     * * `html` - All root nodes in the template are HTML. Root nodes may also be
     *   top-level elements such as `<svg>` or `<math>`.
     * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
     * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
     *
     * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
     *
     * #### `template`
     * HTML markup that may:
     * * Replace the contents of the directive's element (default).
     * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
     * * Wrap the contents of the directive's element (if `transclude` is true).
     *
     * Value may be:
     *
     * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
     * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
     *   function api below) and returns a string value.
     *
     *
     * #### `templateUrl`
     * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
     *
     * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
     * for later when the template has been resolved.  In the meantime it will continue to compile and link
     * sibling and parent elements as though this element had not contained any directives.
     *
     * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
     * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
     * case when only one deeply nested directive has `templateUrl`.
     *
     * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
     *
     * You can specify `templateUrl` as a string representing the URL or as a function which takes two
     * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
     * a string value representing the url.  In either case, the template URL is passed through {@link
     * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
     *
     *
     * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
     * specify what the template should replace. Defaults to `false`.
     *
     * * `true` - the template will replace the directive's element.
     * * `false` - the template will replace the contents of the directive's element.
     *
     * The replacement process migrates all of the attributes / classes from the old element to the new
     * one. See the {@link guide/directive#template-expanding-directive
     * Directives Guide} for an example.
     *
     * There are very few scenarios where element replacement is required for the application function,
     * the main one being reusable custom components that are used within SVG contexts
     * (because SVG doesn't work with custom elements in the DOM tree).
     *
     * #### `transclude`
     * Extract the contents of the element where the directive appears and make it available to the directive.
     * The contents are compiled and provided to the directive as a **transclusion function**. See the
     * {@link $compile#transclusion Transclusion} section below.
     *
     * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the
     * directive's element or the entire element:
     *
     * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
     * * `'element'` - transclude the whole of the directive's element including any directives on this
     *   element that defined at a lower priority than this directive. When used, the `template`
     *   property is ignored.
     *
     *
     * #### `compile`
     *
     * ```js
     *   function compile(tElement, tAttrs, transclude) { ... }
     * ```
     *
     * The compile function deals with transforming the template DOM. Since most directives do not do
     * template transformation, it is not used often. The compile function takes the following arguments:
     *
     *   * `tElement` - template element - The element where the directive has been declared. It is
     *     safe to do template transformation on the element and child elements only.
     *
     *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
     *     between all directive compile functions.
     *
     *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
     *
     * <div class="alert alert-warning">
     * **Note:** The template instance and the link instance may be different objects if the template has
     * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
     * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
     * should be done in a linking function rather than in a compile function.
     * </div>
    
     * <div class="alert alert-warning">
     * **Note:** The compile function cannot handle directives that recursively use themselves in their
     * own templates or compile functions. Compiling these directives results in an infinite loop and a
     * stack overflow errors.
     *
     * This can be avoided by manually using $compile in the postLink function to imperatively compile
     * a directive's template instead of relying on automatic template compilation via `template` or
     * `templateUrl` declaration or manual compilation inside the compile function.
     * </div>
     *
     * <div class="alert alert-error">
     * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
     *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
     *   to the link function instead.
     * </div>
    
     * A compile function can have a return value which can be either a function or an object.
     *
     * * returning a (post-link) function - is equivalent to registering the linking function via the
     *   `link` property of the config object when the compile function is empty.
     *
     * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
     *   control when a linking function should be called during the linking phase. See info about
     *   pre-linking and post-linking functions below.
     *
     *
     * #### `link`
     * This property is used only if the `compile` property is not defined.
     *
     * ```js
     *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
     * ```
     *
     * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
     * executed after the template has been cloned. This is where most of the directive logic will be
     * put.
     *
     *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
     *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
     *
     *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
     *     manipulate the children of the element only in `postLink` function since the children have
     *     already been linked.
     *
     *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
     *     between all directive linking functions.
     *
     *   * `controller` - a controller instance - A controller instance if at least one directive on the
     *     element defines a controller. The controller is shared among all the directives, which allows
     *     the directives to use the controllers as a communication channel.
     *
     *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
     *     This is the same as the `$transclude`
     *     parameter of directive controllers, see there for details.
     *     `function([scope], cloneLinkingFn, futureParentElement)`.
     *
     * #### Pre-linking function
     *
     * Executed before the child elements are linked. Not safe to do DOM transformation since the
     * compiler linking function will fail to locate the correct elements for linking.
     *
     * #### Post-linking function
     *
     * Executed after the child elements are linked.
     *
     * Note that child elements that contain `templateUrl` directives will not have been compiled
     * and linked since they are waiting for their template to load asynchronously and their own
     * compilation and linking has been suspended until that occurs.
     *
     * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
     * for their async templates to be resolved.
     *
     *
     * ### Transclusion
     *
     * Transclusion is the process of extracting a collection of DOM element from one part of the DOM and
     * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
     * scope from where they were taken.
     *
     * Transclusion is used (often with {@link ngTransclude}) to insert the
     * original contents of a directive's element into a specified place in the template of the directive.
     * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
     * content has access to the properties on the scope from which it was taken, even if the directive
     * has isolated scope.
     * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
     *
     * This makes it possible for the widget to have private state for its template, while the transcluded
     * content has access to its originating scope.
     *
     * <div class="alert alert-warning">
     * **Note:** When testing an element transclude directive you must not place the directive at the root of the
     * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
     * Testing Transclusion Directives}.
     * </div>
     *
     * #### Transclusion Functions
     *
     * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
     * function** to the directive's `link` function and `controller`. This transclusion function is a special
     * **linking function** that will return the compiled contents linked to a new transclusion scope.
     *
     * <div class="alert alert-info">
     * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
     * ngTransclude will deal with it for us.
     * </div>
     *
     * If you want to manually control the insertion and removal of the transcluded content in your directive
     * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
     * object that contains the compiled DOM, which is linked to the correct transclusion scope.
     *
     * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
     * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
     * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
     *
     * <div class="alert alert-info">
     * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function
     * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
     * </div>
     *
     * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
     * attach function**:
     *
     * ```js
     * var transcludedContent, transclusionScope;
     *
     * $transclude(function(clone, scope) {
     *   element.append(clone);
     *   transcludedContent = clone;
     *   transclusionScope = scope;
     * });
     * ```
     *
     * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
     * associated transclusion scope:
     *
     * ```js
     * transcludedContent.remove();
     * transclusionScope.$destroy();
     * ```
     *
     * <div class="alert alert-info">
     * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
     * (by calling the transclude function to get the DOM and and calling `element.remove()` to remove it),
     * then you are also responsible for calling `$destroy` on the transclusion scope.
     * </div>
     *
     * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
     * automatically destroy their transluded clones as necessary so you do not need to worry about this if
     * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
     *
     *
     * #### Transclusion Scopes
     *
     * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
     * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
     * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
     * was taken.
     *
     * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
     * like this:
     *
     * ```html
     * <div ng-app>
     *   <div isolate>
     *     <div transclusion>
     *     </div>
     *   </div>
     * </div>
     * ```
     *
     * The `$parent` scope hierarchy will look like this:
     *
     * ```
     * - $rootScope
     *   - isolate
     *     - transclusion
     * ```
     *
     * but the scopes will inherit prototypically from different scopes to their `$parent`.
     *
     * ```
     * - $rootScope
     *   - transclusion
     * - isolate
     * ```
     *
     *
     * ### Attributes
     *
     * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
     * `link()` or `compile()` functions. It has a variety of uses.
     *
     * accessing *Normalized attribute names:*
     * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
     * the attributes object allows for normalized access to
     *   the attributes.
     *
     * * *Directive inter-communication:* All directives share the same instance of the attributes
     *   object which allows the directives to use the attributes object as inter directive
     *   communication.
     *
     * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
     *   allowing other directives to read the interpolated value.
     *
     * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
     *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
     *   the only way to easily get the actual value because during the linking phase the interpolation
     *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
     *
     * ```js
     * function linkingFn(scope, elm, attrs, ctrl) {
     *   // get the attribute value
     *   console.log(attrs.ngModel);
     *
     *   // change the attribute
     *   attrs.$set('ngModel', 'new value');
     *
     *   // observe changes to interpolated attribute
     *   attrs.$observe('ngModel', function(value) {
     *     console.log('ngModel has changed value to ' + value);
     *   });
     * }
     * ```
     *
     * ## Example
     *
     * <div class="alert alert-warning">
     * **Note**: Typically directives are registered with `module.directive`. The example below is
     * to illustrate how `$compile` works.
     * </div>
     *
     <example module="compileExample">
       <file name="index.html">
        <script>
          angular.module('compileExample', [], function($compileProvider) {
            // configure new 'compile' directive by passing a directive
            // factory function. The factory function injects the '$compile'
            $compileProvider.directive('compile', function($compile) {
              // directive factory creates a link function
              return function(scope, element, attrs) {
                scope.$watch(
                  function(scope) {
                     // watch the 'compile' expression for changes
                    return scope.$eval(attrs.compile);
                  },
                  function(value) {
                    // when the 'compile' expression changes
                    // assign it into the current DOM
                    element.html(value);
    
                    // compile the new DOM and link it to the current
                    // scope.
                    // NOTE: we only compile .childNodes so that
                    // we don't get into infinite loop compiling ourselves
                    $compile(element.contents())(scope);
                  }
                );
              };
            });
          })
          .controller('GreeterController', ['$scope', function($scope) {
            $scope.name = 'Angular';
            $scope.html = 'Hello {{name}}';
          }]);
        </script>
        <div ng-controller="GreeterController">
          <input ng-model="name"> <br>
          <textarea ng-model="html"></textarea> <br>
          <div compile="html"></div>
        </div>
       </file>
       <file name="protractor.js" type="protractor">
         it('should auto compile', function() {
           var textarea = $('textarea');
           var output = $('div[compile]');
           // The initial state reads 'Hello Angular'.
           expect(output.getText()).toBe('Hello Angular');
           textarea.clear();
           textarea.sendKeys('{{name}}!');
           expect(output.getText()).toBe('Angular!');
         });
       </file>
     </example>
    
     *
     *
     * @param {string|DOMElement} element Element or HTML string to compile into a template function.
     * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
     *
     * <div class="alert alert-error">
     * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
     *   e.g. will not use the right outer scope. Please pass the transclude function as a
     *   `parentBoundTranscludeFn` to the link function instead.
     * </div>
     *
     * @param {number} maxPriority only apply directives lower than given priority (Only effects the
     *                 root element(s), not their children)
     * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
     * (a DOM element/tree) to a scope. Where:
     *
     *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
     *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
     *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
     *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
     *  called as: <br> `cloneAttachFn(clonedElement, scope)` where:
     *
     *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
     *      * `scope` - is the current scope with which the linking function is working with.
     *
     *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
     *  keys may be used to control linking behavior:
     *
     *      * `parentBoundTranscludeFn` - the transclude function made available to
     *        directives; if given, it will be passed through to the link functions of
     *        directives found in `element` during compilation.
     *      * `transcludeControllers` - an object hash with keys that map controller names
     *        to controller instances; if given, it will make the controllers
     *        available to directives.
     *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
     *        the cloned elements; only needed for transcludes that are allowed to contain non html
     *        elements (e.g. SVG elements). See also the directive.controller property.
     *
     * Calling the linking function returns the element of the template. It is either the original
     * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
     *
     * After linking the view is not updated until after a call to $digest which typically is done by
     * Angular automatically.
     *
     * If you need access to the bound view, there are two ways to do it:
     *
     * - If you are not asking the linking function to clone the template, create the DOM element(s)
     *   before you send them to the compiler and keep this reference around.
     *   ```js
     *     var element = $compile('<p>{{total}}</p>')(scope);
     *   ```
     *
     * - if on the other hand, you need the element to be cloned, the view reference from the original
     *   example would not point to the clone, but rather to the original template that was cloned. In
     *   this case, you can access the clone via the cloneAttachFn:
     *   ```js
     *     var templateElement = angular.element('<p>{{total}}</p>'),
     *         scope = ....;
     *
     *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
     *       //attach the clone to DOM document at the right place
     *     });
     *
     *     //now we have reference to the cloned DOM via `clonedElement`
     *   ```
     *
     *
     * For information on how the compiler works, see the
     * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
     */
    var $compileMinErr = minErr('$compile');
    /**
     * @ngdoc provider
     * @name $compileProvider
     *
     * @description
     */
    $CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
    function $CompileProvider($provide, $$sanitizeUriProvider) {
        var hasDirectives = {}, Suffix = 'Directive', COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/, CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/, ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'), REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;
        // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
        // The assumption is that future DOM event attribute names will begin with
        // 'on' and be composed of only English letters.
        var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
        function parseIsolateBindings(scope, directiveName) {
            var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;
            var bindings = {};
            forEach(scope, function (definition, scopeName) {
                var match = definition.match(LOCAL_REGEXP);
                if (!match) {
                    throw $compileMinErr('iscp', "Invalid isolate scope definition for directive '{0}'." +
                        " Definition: {... {1}: '{2}' ...}", directiveName, scopeName, definition);
                }
                bindings[scopeName] = {
                    mode: match[1][0],
                    collection: match[2] === '*',
                    optional: match[3] === '?',
                    attrName: match[4] || scopeName
                };
            });
            return bindings;
        }
        /**
         * @ngdoc method
         * @name $compileProvider#directive
         * @kind function
         *
         * @description
         * Register a new directive with the compiler.
         *
         * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
         *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
         *    names and the values are the factories.
         * @param {Function|Array} directiveFactory An injectable directive factory function. See
         *    {@link guide/directive} for more info.
         * @returns {ng.$compileProvider} Self for chaining.
         */
        this.directive = function registerDirective(name, directiveFactory) {
            assertNotHasOwnProperty(name, 'directive');
            if (isString(name)) {
                assertArg(directiveFactory, 'directiveFactory');
                if (!hasDirectives.hasOwnProperty(name)) {
                    hasDirectives[name] = [];
                    $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
                        function ($injector, $exceptionHandler) {
                            var directives = [];
                            forEach(hasDirectives[name], function (directiveFactory, index) {
                                try {
                                    var directive = $injector.invoke(directiveFactory);
                                    if (isFunction(directive)) {
                                        directive = { compile: valueFn(directive) };
                                    }
                                    else if (!directive.compile && directive.link) {
                                        directive.compile = valueFn(directive.link);
                                    }
                                    directive.priority = directive.priority || 0;
                                    directive.index = index;
                                    directive.name = directive.name || name;
                                    directive.require = directive.require || (directive.controller && directive.name);
                                    directive.restrict = directive.restrict || 'EA';
                                    if (isObject(directive.scope)) {
                                        directive.$$isolateBindings = parseIsolateBindings(directive.scope, directive.name);
                                    }
                                    directives.push(directive);
                                }
                                catch (e) {
                                    $exceptionHandler(e);
                                }
                            });
                            return directives;
                        }]);
                }
                hasDirectives[name].push(directiveFactory);
            }
            else {
                forEach(name, reverseParams(registerDirective));
            }
            return this;
        };
        /**
         * @ngdoc method
         * @name $compileProvider#aHrefSanitizationWhitelist
         * @kind function
         *
         * @description
         * Retrieves or overrides the default regular expression that is used for whitelisting of safe
         * urls during a[href] sanitization.
         *
         * The sanitization is a security measure aimed at preventing XSS attacks via html links.
         *
         * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
         * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
         * regular expression. If a match is found, the original url is written into the dom. Otherwise,
         * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
         *
         * @param {RegExp=} regexp New regexp to whitelist urls with.
         * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
         *    chaining otherwise.
         */
        this.aHrefSanitizationWhitelist = function (regexp) {
            if (isDefined(regexp)) {
                $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
                return this;
            }
            else {
                return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
            }
        };
        /**
         * @ngdoc method
         * @name $compileProvider#imgSrcSanitizationWhitelist
         * @kind function
         *
         * @description
         * Retrieves or overrides the default regular expression that is used for whitelisting of safe
         * urls during img[src] sanitization.
         *
         * The sanitization is a security measure aimed at prevent XSS attacks via html links.
         *
         * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
         * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
         * regular expression. If a match is found, the original url is written into the dom. Otherwise,
         * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
         *
         * @param {RegExp=} regexp New regexp to whitelist urls with.
         * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
         *    chaining otherwise.
         */
        this.imgSrcSanitizationWhitelist = function (regexp) {
            if (isDefined(regexp)) {
                $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
                return this;
            }
            else {
                return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
            }
        };
        /**
         * @ngdoc method
         * @name  $compileProvider#debugInfoEnabled
         *
         * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
         * current debugInfoEnabled state
         * @returns {*} current value if used as getter or itself (chaining) if used as setter
         *
         * @kind function
         *
         * @description
         * Call this method to enable/disable various debug runtime information in the compiler such as adding
         * binding information and a reference to the current scope on to DOM elements.
         * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
         * * `ng-binding` CSS class
         * * `$binding` data property containing an array of the binding expressions
         *
         * You may want to disable this in production for a significant performance boost. See
         * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
         *
         * The default value is true.
         */
        var debugInfoEnabled = true;
        this.debugInfoEnabled = function (enabled) {
            if (isDefined(enabled)) {
                debugInfoEnabled = enabled;
                return this;
            }
            return debugInfoEnabled;
        };
        this.$get = [
            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',
            function ($injector, $interpolate, $exceptionHandler, $templateRequest, $parse, $controller, $rootScope, $document, $sce, $animate, $$sanitizeUri) {
                var Attributes = function (element, attributesToCopy) {
                    if (attributesToCopy) {
                        var keys = Object.keys(attributesToCopy);
                        var i, l, key;
                        for (i = 0, l = keys.length; i < l; i++) {
                            key = keys[i];
                            this[key] = attributesToCopy[key];
                        }
                    }
                    else {
                        this.$attr = {};
                    }
                    this.$$element = element;
                };
                Attributes.prototype = {
                    $normalize: directiveNormalize,
                    /**
                     * @ngdoc method
                     * @name $compile.directive.Attributes#$addClass
                     * @kind function
                     *
                     * @description
                     * Adds the CSS class value specified by the classVal parameter to the element. If animations
                     * are enabled then an animation will be triggered for the class addition.
                     *
                     * @param {string} classVal The className value that will be added to the element
                     */
                    $addClass: function (classVal) {
                        if (classVal && classVal.length > 0) {
                            $animate.addClass(this.$$element, classVal);
                        }
                    },
                    /**
                     * @ngdoc method
                     * @name $compile.directive.Attributes#$removeClass
                     * @kind function
                     *
                     * @description
                     * Removes the CSS class value specified by the classVal parameter from the element. If
                     * animations are enabled then an animation will be triggered for the class removal.
                     *
                     * @param {string} classVal The className value that will be removed from the element
                     */
                    $removeClass: function (classVal) {
                        if (classVal && classVal.length > 0) {
                            $animate.removeClass(this.$$element, classVal);
                        }
                    },
                    /**
                     * @ngdoc method
                     * @name $compile.directive.Attributes#$updateClass
                     * @kind function
                     *
                     * @description
                     * Adds and removes the appropriate CSS class values to the element based on the difference
                     * between the new and old CSS class values (specified as newClasses and oldClasses).
                     *
                     * @param {string} newClasses The current CSS className value
                     * @param {string} oldClasses The former CSS className value
                     */
                    $updateClass: function (newClasses, oldClasses) {
                        var toAdd = tokenDifference(newClasses, oldClasses);
                        if (toAdd && toAdd.length) {
                            $animate.addClass(this.$$element, toAdd);
                        }
                        var toRemove = tokenDifference(oldClasses, newClasses);
                        if (toRemove && toRemove.length) {
                            $animate.removeClass(this.$$element, toRemove);
                        }
                    },
                    /**
                     * Set a normalized attribute on the element in a way such that all directives
                     * can share the attribute. This function properly handles boolean attributes.
                     * @param {string} key Normalized key. (ie ngAttribute)
                     * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
                     * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
                     *     Defaults to true.
                     * @param {string=} attrName Optional none normalized name. Defaults to key.
                     */
                    $set: function (key, value, writeAttr, attrName) {
                        // TODO: decide whether or not to throw an error if "class"
                        //is set through this function since it may cause $updateClass to
                        //become unstable.
                        var node = this.$$element[0], booleanKey = getBooleanAttrName(node, key), aliasedKey = getAliasedAttrName(node, key), observer = key, nodeName;
                        if (booleanKey) {
                            this.$$element.prop(key, value);
                            attrName = booleanKey;
                        }
                        else if (aliasedKey) {
                            this[aliasedKey] = value;
                            observer = aliasedKey;
                        }
                        this[key] = value;
                        // translate normalized key to actual key
                        if (attrName) {
                            this.$attr[key] = attrName;
                        }
                        else {
                            attrName = this.$attr[key];
                            if (!attrName) {
                                this.$attr[key] = attrName = snake_case(key, '-');
                            }
                        }
                        nodeName = nodeName_(this.$$element);
                        if ((nodeName === 'a' && key === 'href') ||
                            (nodeName === 'img' && key === 'src')) {
                            // sanitize a[href] and img[src] values
                            this[key] = value = $$sanitizeUri(value, key === 'src');
                        }
                        else if (nodeName === 'img' && key === 'srcset') {
                            // sanitize img[srcset] values
                            var result = "";
                            // first check if there are spaces because it's not the same pattern
                            var trimmedSrcset = trim(value);
                            //                (   999x   ,|   999w   ,|   ,|,   )
                            var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
                            var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;
                            // split srcset into tuple of uri and descriptor except for the last item
                            var rawUris = trimmedSrcset.split(pattern);
                            // for each tuples
                            var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
                            for (var i = 0; i < nbrUrisWith2parts; i++) {
                                var innerIdx = i * 2;
                                // sanitize the uri
                                result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
                                // add the descriptor
                                result += (" " + trim(rawUris[innerIdx + 1]));
                            }
                            // split the last item into uri and descriptor
                            var lastTuple = trim(rawUris[i * 2]).split(/\s/);
                            // sanitize the last uri
                            result += $$sanitizeUri(trim(lastTuple[0]), true);
                            // and add the last descriptor if any
                            if (lastTuple.length === 2) {
                                result += (" " + trim(lastTuple[1]));
                            }
                            this[key] = value = result;
                        }
                        if (writeAttr !== false) {
                            if (value === null || value === undefined) {
                                this.$$element.removeAttr(attrName);
                            }
                            else {
                                this.$$element.attr(attrName, value);
                            }
                        }
                        // fire observers
                        var $$observers = this.$$observers;
                        $$observers && forEach($$observers[observer], function (fn) {
                            try {
                                fn(value);
                            }
                            catch (e) {
                                $exceptionHandler(e);
                            }
                        });
                    },
                    /**
                     * @ngdoc method
                     * @name $compile.directive.Attributes#$observe
                     * @kind function
                     *
                     * @description
                     * Observes an interpolated attribute.
                     *
                     * The observer function will be invoked once during the next `$digest` following
                     * compilation. The observer is then invoked whenever the interpolated value
                     * changes.
                     *
                     * @param {string} key Normalized key. (ie ngAttribute) .
                     * @param {function(interpolatedValue)} fn Function that will be called whenever
                              the interpolated value of the attribute changes.
                     *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.
                     * @returns {function()} Returns a deregistration function for this observer.
                     */
                    $observe: function (key, fn) {
                        var attrs = this, $$observers = (attrs.$$observers || (attrs.$$observers = createMap())), listeners = ($$observers[key] || ($$observers[key] = []));
                        listeners.push(fn);
                        $rootScope.$evalAsync(function () {
                            if (!listeners.$$inter && attrs.hasOwnProperty(key)) {
                                // no one registered attribute interpolation function, so lets call it manually
                                fn(attrs[key]);
                            }
                        });
                        return function () {
                            arrayRemove(listeners, fn);
                        };
                    }
                };
                function safeAddClass($element, className) {
                    try {
                        $element.addClass(className);
                    }
                    catch (e) {
                        // ignore, since it means that we are trying to set class on
                        // SVG element, where class name is read-only.
                    }
                }
                var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), denormalizeTemplate = (startSymbol == '{{' || endSymbol == '}}')
                    ? identity
                    : function denormalizeTemplate(template) {
                        return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
                    }, NG_ATTR_BINDING = /^ngAttr[A-Z]/;
                compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
                    var bindings = $element.data('$binding') || [];
                    if (isArray(binding)) {
                        bindings = bindings.concat(binding);
                    }
                    else {
                        bindings.push(binding);
                    }
                    $element.data('$binding', bindings);
                } : noop;
                compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
                    safeAddClass($element, 'ng-binding');
                } : noop;
                compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
                    var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
                    $element.data(dataName, scope);
                } : noop;
                compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
                    safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
                } : noop;
                return compile;
                //================================
                function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
                    if (!($compileNodes instanceof jqLite)) {
                        // jquery always rewraps, whereas we need to preserve the original selector so that we can
                        // modify it.
                        $compileNodes = jqLite($compileNodes);
                    }
                    // We can not compile top level text elements since text nodes can be merged and we will
                    // not be able to attach scope data to them, so we will wrap them in <span>
                    forEach($compileNodes, function (node, index) {
                        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */) {
                            $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];
                        }
                    });
                    var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority, ignoreDirective, previousCompileContext);
                    compile.$$addScopeClass($compileNodes);
                    var namespace = null;
                    return function publicLinkFn(scope, cloneConnectFn, options) {
                        assertArg(scope, 'scope');
                        options = options || {};
                        var parentBoundTranscludeFn = options.parentBoundTranscludeFn, transcludeControllers = options.transcludeControllers, futureParentElement = options.futureParentElement;
                        // When `parentBoundTranscludeFn` is passed, it is a
                        // `controllersBoundTransclude` function (it was previously passed
                        // as `transclude` to directive.link) so we must unwrap it to get
                        // its `boundTranscludeFn`
                        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
                            parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
                        }
                        if (!namespace) {
                            namespace = detectNamespaceForChildElements(futureParentElement);
                        }
                        var $linkNode;
                        if (namespace !== 'html') {
                            // When using a directive with replace:true and templateUrl the $compileNodes
                            // (or a child element inside of them)
                            // might change, so we need to recreate the namespace adapted compileNodes
                            // for call to the link function.
                            // Note: This will already clone the nodes...
                            $linkNode = jqLite(wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html()));
                        }
                        else if (cloneConnectFn) {
                            // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
                            // and sometimes changes the structure of the DOM.
                            $linkNode = JQLitePrototype.clone.call($compileNodes);
                        }
                        else {
                            $linkNode = $compileNodes;
                        }
                        if (transcludeControllers) {
                            for (var controllerName in transcludeControllers) {
                                $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
                            }
                        }
                        compile.$$addScopeInfo($linkNode, scope);
                        if (cloneConnectFn)
                            cloneConnectFn($linkNode, scope);
                        if (compositeLinkFn)
                            compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
                        return $linkNode;
                    };
                }
                function detectNamespaceForChildElements(parentElement) {
                    // TODO: Make this detect MathML as well...
                    var node = parentElement && parentElement[0];
                    if (!node) {
                        return 'html';
                    }
                    else {
                        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';
                    }
                }
                /**
                 * Compile function matches each node in nodeList against the directives. Once all directives
                 * for a particular node are collected their compile functions are executed. The compile
                 * functions return values - the linking functions - are combined into a composite linking
                 * function, which is the a linking function for the node.
                 *
                 * @param {NodeList} nodeList an array of nodes or NodeList to compile
                 * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
                 *        scope argument is auto-generated to the new child of the transcluded parent scope.
                 * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
                 *        the rootElement must be set the jqLite collection of the compile root. This is
                 *        needed so that the jqLite collection items can be replaced with widgets.
                 * @param {number=} maxPriority Max directive priority.
                 * @returns {Function} A composite linking function of all of the matched directives or null.
                 */
                function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective, previousCompileContext) {
                    var linkFns = [], attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;
                    for (var i = 0; i < nodeList.length; i++) {
                        attrs = new Attributes();
                        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
                        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined, ignoreDirective);
                        nodeLinkFn = (directives.length)
                            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement, null, [], [], previousCompileContext)
                            : null;
                        if (nodeLinkFn && nodeLinkFn.scope) {
                            compile.$$addScopeClass(attrs.$$element);
                        }
                        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
                            !(childNodes = nodeList[i].childNodes) ||
                            !childNodes.length)
                            ? null
                            : compileNodes(childNodes, nodeLinkFn ? ((nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
                                && nodeLinkFn.transclude) : transcludeFn);
                        if (nodeLinkFn || childLinkFn) {
                            linkFns.push(i, nodeLinkFn, childLinkFn);
                            linkFnFound = true;
                            nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
                        }
                        //use the previous context only for the first element in the virtual group
                        previousCompileContext = null;
                    }
                    // return a linking function if we have found anything, null otherwise
                    return linkFnFound ? compositeLinkFn : null;
                    function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
                        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
                        var stableNodeList;
                        if (nodeLinkFnFound) {
                            // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
                            // offsets don't get screwed up
                            var nodeListLength = nodeList.length;
                            stableNodeList = new Array(nodeListLength);
                            // create a sparse array by only copying the elements which have a linkFn
                            for (i = 0; i < linkFns.length; i += 3) {
                                idx = linkFns[i];
                                stableNodeList[idx] = nodeList[idx];
                            }
                        }
                        else {
                            stableNodeList = nodeList;
                        }
                        for (i = 0, ii = linkFns.length; i < ii;) {
                            node = stableNodeList[linkFns[i++]];
                            nodeLinkFn = linkFns[i++];
                            childLinkFn = linkFns[i++];
                            if (nodeLinkFn) {
                                if (nodeLinkFn.scope) {
                                    childScope = scope.$new();
                                    compile.$$addScopeInfo(jqLite(node), childScope);
                                }
                                else {
                                    childScope = scope;
                                }
                                if (nodeLinkFn.transcludeOnThisElement) {
                                    childBoundTranscludeFn = createBoundTranscludeFn(scope, nodeLinkFn.transclude, parentBoundTranscludeFn, nodeLinkFn.elementTranscludeOnThisElement);
                                }
                                else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
                                    childBoundTranscludeFn = parentBoundTranscludeFn;
                                }
                                else if (!parentBoundTranscludeFn && transcludeFn) {
                                    childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);
                                }
                                else {
                                    childBoundTranscludeFn = null;
                                }
                                nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);
                            }
                            else if (childLinkFn) {
                                childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
                            }
                        }
                    }
                }
                function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn, elementTransclusion) {
                    var boundTranscludeFn = function (transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {
                        if (!transcludedScope) {
                            transcludedScope = scope.$new(false, containingScope);
                            transcludedScope.$$transcluded = true;
                        }
                        return transcludeFn(transcludedScope, cloneFn, {
                            parentBoundTranscludeFn: previousBoundTranscludeFn,
                            transcludeControllers: controllers,
                            futureParentElement: futureParentElement
                        });
                    };
                    return boundTranscludeFn;
                }
                /**
                 * Looks for directives on the given node and adds them to the directive collection which is
                 * sorted.
                 *
                 * @param node Node to search.
                 * @param directives An array to which the directives are added to. This array is sorted before
                 *        the function returns.
                 * @param attrs The shared attrs object which is used to populate the normalized attributes.
                 * @param {number=} maxPriority Max directive priority.
                 */
                function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
                    var nodeType = node.nodeType, attrsMap = attrs.$attr, match, className;
                    switch (nodeType) {
                        case NODE_TYPE_ELEMENT:/* Element */ 
                            // use the node name: <directive>
                            addDirective(directives, directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);
                            // iterate over the attributes
                            for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes, j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
                                var attrStartName = false;
                                var attrEndName = false;
                                attr = nAttrs[j];
                                name = attr.name;
                                value = trim(attr.value);
                                // support ngAttr attribute binding
                                ngAttrName = directiveNormalize(name);
                                if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
                                    name = snake_case(ngAttrName.substr(6), '-');
                                }
                                var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
                                if (directiveIsMultiElement(directiveNName)) {
                                    if (ngAttrName === directiveNName + 'Start') {
                                        attrStartName = name;
                                        attrEndName = name.substr(0, name.length - 5) + 'end';
                                        name = name.substr(0, name.length - 6);
                                    }
                                }
                                nName = directiveNormalize(name.toLowerCase());
                                attrsMap[nName] = name;
                                if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                                    attrs[nName] = value;
                                    if (getBooleanAttrName(node, nName)) {
                                        attrs[nName] = true; // presence means true
                                    }
                                }
                                addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
                                addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName, attrEndName);
                            }
                            // use class as directive
                            className = node.className;
                            if (isString(className) && className !== '') {
                                while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
                                    nName = directiveNormalize(match[2]);
                                    if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                                        attrs[nName] = trim(match[3]);
                                    }
                                    className = className.substr(match.index + match[0].length);
                                }
                            }
                            break;
                        case NODE_TYPE_TEXT:/* Text Node */ 
                            addTextInterpolateDirective(directives, node.nodeValue);
                            break;
                        case NODE_TYPE_COMMENT:/* Comment */ 
                            try {
                                match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
                                if (match) {
                                    nName = directiveNormalize(match[1]);
                                    if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                                        attrs[nName] = trim(match[2]);
                                    }
                                }
                            }
                            catch (e) {
                                // turns out that under some circumstances IE9 throws errors when one attempts to read
                                // comment's node value.
                                // Just ignore it and continue. (Can't seem to reproduce in test case.)
                            }
                            break;
                    }
                    directives.sort(byPriority);
                    return directives;
                }
                /**
                 * Given a node with an directive-start it collects all of the siblings until it finds
                 * directive-end.
                 * @param node
                 * @param attrStart
                 * @param attrEnd
                 * @returns {*}
                 */
                function groupScan(node, attrStart, attrEnd) {
                    var nodes = [];
                    var depth = 0;
                    if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
                        do {
                            if (!node) {
                                throw $compileMinErr('uterdir', "Unterminated attribute, found '{0}' but no matching '{1}' found.", attrStart, attrEnd);
                            }
                            if (node.nodeType == NODE_TYPE_ELEMENT) {
                                if (node.hasAttribute(attrStart))
                                    depth++;
                                if (node.hasAttribute(attrEnd))
                                    depth--;
                            }
                            nodes.push(node);
                            node = node.nextSibling;
                        } while (depth > 0);
                    }
                    else {
                        nodes.push(node);
                    }
                    return jqLite(nodes);
                }
                /**
                 * Wrapper for linking function which converts normal linking function into a grouped
                 * linking function.
                 * @param linkFn
                 * @param attrStart
                 * @param attrEnd
                 * @returns {Function}
                 */
                function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
                    return function (scope, element, attrs, controllers, transcludeFn) {
                        element = groupScan(element[0], attrStart, attrEnd);
                        return linkFn(scope, element, attrs, controllers, transcludeFn);
                    };
                }
                /**
                 * Once the directives have been collected, their compile functions are executed. This method
                 * is responsible for inlining directive templates as well as terminating the application
                 * of the directives if the terminal directive has been reached.
                 *
                 * @param {Array} directives Array of collected directives to execute their compile function.
                 *        this needs to be pre-sorted by priority order.
                 * @param {Node} compileNode The raw DOM node to apply the compile functions to
                 * @param {Object} templateAttrs The shared attribute function
                 * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
                 *                                                  scope argument is auto-generated to the new
                 *                                                  child of the transcluded parent scope.
                 * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
                 *                              argument has the root jqLite array so that we can replace nodes
                 *                              on it.
                 * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
                 *                                           compiling the transclusion.
                 * @param {Array.<Function>} preLinkFns
                 * @param {Array.<Function>} postLinkFns
                 * @param {Object} previousCompileContext Context used for previous compilation of the current
                 *                                        node
                 * @returns {Function} linkFn
                 */
                function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective, preLinkFns, postLinkFns, previousCompileContext) {
                    previousCompileContext = previousCompileContext || {};
                    var terminalPriority = -Number.MAX_VALUE, newScopeDirective, controllerDirectives = previousCompileContext.controllerDirectives, controllers, newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective, templateDirective = previousCompileContext.templateDirective, nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective, hasTranscludeDirective = false, hasTemplate = false, hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective, $compileNode = templateAttrs.$$element = jqLite(compileNode), directive, directiveName, $template, replaceDirective = originalReplaceDirective, childTranscludeFn = transcludeFn, linkFn, directiveValue;
                    // executes all directives on the current element
                    for (var i = 0, ii = directives.length; i < ii; i++) {
                        directive = directives[i];
                        var attrStart = directive.$$start;
                        var attrEnd = directive.$$end;
                        // collect multiblock sections
                        if (attrStart) {
                            $compileNode = groupScan(compileNode, attrStart, attrEnd);
                        }
                        $template = undefined;
                        if (terminalPriority > directive.priority) {
                            break; // prevent further processing of directives
                        }
                        if (directiveValue = directive.scope) {
                            // skip the check for directives with async templates, we'll check the derived sync
                            // directive when the template arrives
                            if (!directive.templateUrl) {
                                if (isObject(directiveValue)) {
                                    // This directive is trying to add an isolated scope.
                                    // Check that there is no scope of any kind already
                                    assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective, directive, $compileNode);
                                    newIsolateScopeDirective = directive;
                                }
                                else {
                                    // This directive is trying to add a child scope.
                                    // Check that there is no isolated scope already
                                    assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive, $compileNode);
                                }
                            }
                            newScopeDirective = newScopeDirective || directive;
                        }
                        directiveName = directive.name;
                        if (!directive.templateUrl && directive.controller) {
                            directiveValue = directive.controller;
                            controllerDirectives = controllerDirectives || {};
                            assertNoDuplicate("'" + directiveName + "' controller", controllerDirectives[directiveName], directive, $compileNode);
                            controllerDirectives[directiveName] = directive;
                        }
                        if (directiveValue = directive.transclude) {
                            hasTranscludeDirective = true;
                            // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
                            // This option should only be used by directives that know how to safely handle element transclusion,
                            // where the transcluded nodes are added or replaced after linking.
                            if (!directive.$$tlb) {
                                assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
                                nonTlbTranscludeDirective = directive;
                            }
                            if (directiveValue == 'element') {
                                hasElementTranscludeDirective = true;
                                terminalPriority = directive.priority;
                                $template = $compileNode;
                                $compileNode = templateAttrs.$$element =
                                    jqLite(document.createComment(' ' + directiveName + ': ' +
                                        templateAttrs[directiveName] + ' '));
                                compileNode = $compileNode[0];
                                replaceWith(jqCollection, sliceArgs($template), compileNode);
                                childTranscludeFn = compile($template, transcludeFn, terminalPriority, replaceDirective && replaceDirective.name, {
                                    // Don't pass in:
                                    // - controllerDirectives - otherwise we'll create duplicates controllers
                                    // - newIsolateScopeDirective or templateDirective - combining templates with
                                    //   element transclusion doesn't make sense.
                                    //
                                    // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                    // on the same element more than once.
                                    nonTlbTranscludeDirective: nonTlbTranscludeDirective
                                });
                            }
                            else {
                                $template = jqLite(jqLiteClone(compileNode)).contents();
                                $compileNode.empty(); // clear contents
                                childTranscludeFn = compile($template, transcludeFn);
                            }
                        }
                        if (directive.template) {
                            hasTemplate = true;
                            assertNoDuplicate('template', templateDirective, directive, $compileNode);
                            templateDirective = directive;
                            directiveValue = (isFunction(directive.template))
                                ? directive.template($compileNode, templateAttrs)
                                : directive.template;
                            directiveValue = denormalizeTemplate(directiveValue);
                            if (directive.replace) {
                                replaceDirective = directive;
                                if (jqLiteIsTextNode(directiveValue)) {
                                    $template = [];
                                }
                                else {
                                    $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
                                }
                                compileNode = $template[0];
                                if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                                    throw $compileMinErr('tplrt', "Template for directive '{0}' must have exactly one root element. {1}", directiveName, '');
                                }
                                replaceWith(jqCollection, $compileNode, compileNode);
                                var newTemplateAttrs = { $attr: {} };
                                // combine directives from the original node and from the template:
                                // - take the array of directives for this element
                                // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
                                // - collect directives from the template and sort them by priority
                                // - combine directives as: processed + template + unprocessed
                                var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
                                var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
                                if (newIsolateScopeDirective) {
                                    markDirectivesAsIsolate(templateDirectives);
                                }
                                directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
                                mergeTemplateAttributes(templateAttrs, newTemplateAttrs);
                                ii = directives.length;
                            }
                            else {
                                $compileNode.html(directiveValue);
                            }
                        }
                        if (directive.templateUrl) {
                            hasTemplate = true;
                            assertNoDuplicate('template', templateDirective, directive, $compileNode);
                            templateDirective = directive;
                            if (directive.replace) {
                                replaceDirective = directive;
                            }
                            nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode, templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                                controllerDirectives: controllerDirectives,
                                newIsolateScopeDirective: newIsolateScopeDirective,
                                templateDirective: templateDirective,
                                nonTlbTranscludeDirective: nonTlbTranscludeDirective
                            });
                            ii = directives.length;
                        }
                        else if (directive.compile) {
                            try {
                                linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
                                if (isFunction(linkFn)) {
                                    addLinkFns(null, linkFn, attrStart, attrEnd);
                                }
                                else if (linkFn) {
                                    addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
                                }
                            }
                            catch (e) {
                                $exceptionHandler(e, startingTag($compileNode));
                            }
                        }
                        if (directive.terminal) {
                            nodeLinkFn.terminal = true;
                            terminalPriority = Math.max(terminalPriority, directive.priority);
                        }
                    }
                    nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
                    nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
                    nodeLinkFn.elementTranscludeOnThisElement = hasElementTranscludeDirective;
                    nodeLinkFn.templateOnThisElement = hasTemplate;
                    nodeLinkFn.transclude = childTranscludeFn;
                    previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;
                    // might be normal or delayed nodeLinkFn depending on if templateUrl is present
                    return nodeLinkFn;
                    ////////////////////
                    function addLinkFns(pre, post, attrStart, attrEnd) {
                        if (pre) {
                            if (attrStart)
                                pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
                            pre.require = directive.require;
                            pre.directiveName = directiveName;
                            if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                                pre = cloneAndAnnotateFn(pre, { isolateScope: true });
                            }
                            preLinkFns.push(pre);
                        }
                        if (post) {
                            if (attrStart)
                                post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
                            post.require = directive.require;
                            post.directiveName = directiveName;
                            if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                                post = cloneAndAnnotateFn(post, { isolateScope: true });
                            }
                            postLinkFns.push(post);
                        }
                    }
                    function getControllers(directiveName, require, $element, elementControllers) {
                        var value, retrievalMethod = 'data', optional = false;
                        var $searchElement = $element;
                        var match;
                        if (isString(require)) {
                            match = require.match(REQUIRE_PREFIX_REGEXP);
                            require = require.substring(match[0].length);
                            if (match[3]) {
                                if (match[1])
                                    match[3] = null;
                                else
                                    match[1] = match[3];
                            }
                            if (match[1] === '^') {
                                retrievalMethod = 'inheritedData';
                            }
                            else if (match[1] === '^^') {
                                retrievalMethod = 'inheritedData';
                                $searchElement = $element.parent();
                            }
                            if (match[2] === '?') {
                                optional = true;
                            }
                            value = null;
                            if (elementControllers && retrievalMethod === 'data') {
                                if (value = elementControllers[require]) {
                                    value = value.instance;
                                }
                            }
                            value = value || $searchElement[retrievalMethod]('$' + require + 'Controller');
                            if (!value && !optional) {
                                throw $compileMinErr('ctreq', "Controller '{0}', required by directive '{1}', can't be found!", require, directiveName);
                            }
                            return value || null;
                        }
                        else if (isArray(require)) {
                            value = [];
                            forEach(require, function (require) {
                                value.push(getControllers(directiveName, require, $element, elementControllers));
                            });
                        }
                        return value;
                    }
                    function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
                        var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element, attrs;
                        if (compileNode === linkNode) {
                            attrs = templateAttrs;
                            $element = templateAttrs.$$element;
                        }
                        else {
                            $element = jqLite(linkNode);
                            attrs = new Attributes($element, templateAttrs);
                        }
                        if (newIsolateScopeDirective) {
                            isolateScope = scope.$new(true);
                        }
                        if (boundTranscludeFn) {
                            // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
                            // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
                            transcludeFn = controllersBoundTransclude;
                            transcludeFn.$$boundTransclude = boundTranscludeFn;
                        }
                        if (controllerDirectives) {
                            // TODO: merge `controllers` and `elementControllers` into single object.
                            controllers = {};
                            elementControllers = {};
                            forEach(controllerDirectives, function (directive) {
                                var locals = {
                                    $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                                    $element: $element,
                                    $attrs: attrs,
                                    $transclude: transcludeFn
                                }, controllerInstance;
                                controller = directive.controller;
                                if (controller == '@') {
                                    controller = attrs[directive.name];
                                }
                                controllerInstance = $controller(controller, locals, true, directive.controllerAs);
                                // For directives with element transclusion the element is a comment,
                                // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
                                // clean up (http://bugs.jquery.com/ticket/8335).
                                // Instead, we save the controllers for the element in a local hash and attach to .data
                                // later, once we have the actual element.
                                elementControllers[directive.name] = controllerInstance;
                                if (!hasElementTranscludeDirective) {
                                    $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
                                }
                                controllers[directive.name] = controllerInstance;
                            });
                        }
                        if (newIsolateScopeDirective) {
                            compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
                                templateDirective === newIsolateScopeDirective.$$originalDirective)));
                            compile.$$addScopeClass($element, true);
                            var isolateScopeController = controllers && controllers[newIsolateScopeDirective.name];
                            var isolateBindingContext = isolateScope;
                            if (isolateScopeController && isolateScopeController.identifier &&
                                newIsolateScopeDirective.bindToController === true) {
                                isolateBindingContext = isolateScopeController.instance;
                            }
                            forEach(isolateScope.$$isolateBindings = newIsolateScopeDirective.$$isolateBindings, function (definition, scopeName) {
                                var attrName = definition.attrName, optional = definition.optional, mode = definition.mode, // @, =, or &
                                lastValue, parentGet, parentSet, compare;
                                switch (mode) {
                                    case '@':
                                        attrs.$observe(attrName, function (value) {
                                            isolateBindingContext[scopeName] = value;
                                        });
                                        attrs.$$observers[attrName].$$scope = scope;
                                        if (attrs[attrName]) {
                                            // If the attribute has been provided then we trigger an interpolation to ensure
                                            // the value is there for use in the link fn
                                            isolateBindingContext[scopeName] = $interpolate(attrs[attrName])(scope);
                                        }
                                        break;
                                    case '=':
                                        if (optional && !attrs[attrName]) {
                                            return;
                                        }
                                        parentGet = $parse(attrs[attrName]);
                                        if (parentGet.literal) {
                                            compare = equals;
                                        }
                                        else {
                                            compare = function (a, b) { return a === b || (a !== a && b !== b); };
                                        }
                                        parentSet = parentGet.assign || function () {
                                            // reset the change, or we will throw this exception on every $digest
                                            lastValue = isolateBindingContext[scopeName] = parentGet(scope);
                                            throw $compileMinErr('nonassign', "Expression '{0}' used with directive '{1}' is non-assignable!", attrs[attrName], newIsolateScopeDirective.name);
                                        };
                                        lastValue = isolateBindingContext[scopeName] = parentGet(scope);
                                        var parentValueWatch = function parentValueWatch(parentValue) {
                                            if (!compare(parentValue, isolateBindingContext[scopeName])) {
                                                // we are out of sync and need to copy
                                                if (!compare(parentValue, lastValue)) {
                                                    // parent changed and it has precedence
                                                    isolateBindingContext[scopeName] = parentValue;
                                                }
                                                else {
                                                    // if the parent can be assigned then do so
                                                    parentSet(scope, parentValue = isolateBindingContext[scopeName]);
                                                }
                                            }
                                            return lastValue = parentValue;
                                        };
                                        parentValueWatch.$stateful = true;
                                        var unwatch;
                                        if (definition.collection) {
                                            unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
                                        }
                                        else {
                                            unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
                                        }
                                        isolateScope.$on('$destroy', unwatch);
                                        break;
                                    case '&':
                                        parentGet = $parse(attrs[attrName]);
                                        isolateBindingContext[scopeName] = function (locals) {
                                            return parentGet(scope, locals);
                                        };
                                        break;
                                }
                            });
                        }
                        if (controllers) {
                            forEach(controllers, function (controller) {
                                controller();
                            });
                            controllers = null;
                        }
                        // PRELINKING
                        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
                            linkFn = preLinkFns[i];
                            invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
                        }
                        // RECURSION
                        // We only pass the isolate scope, if the isolate directive has a template,
                        // otherwise the child elements do not belong to the isolate directive.
                        var scopeToChild = scope;
                        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
                            scopeToChild = isolateScope;
                        }
                        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
                        // POSTLINKING
                        for (i = postLinkFns.length - 1; i >= 0; i--) {
                            linkFn = postLinkFns[i];
                            invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
                        }
                        // This is the function that is injected as `$transclude`.
                        // Note: all arguments are optional!
                        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {
                            var transcludeControllers;
                            // No scope passed in:
                            if (!isScope(scope)) {
                                futureParentElement = cloneAttachFn;
                                cloneAttachFn = scope;
                                scope = undefined;
                            }
                            if (hasElementTranscludeDirective) {
                                transcludeControllers = elementControllers;
                            }
                            if (!futureParentElement) {
                                futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
                            }
                            return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
                        }
                    }
                }
                function markDirectivesAsIsolate(directives) {
                    // mark all directives as needing isolate scope.
                    for (var j = 0, jj = directives.length; j < jj; j++) {
                        directives[j] = inherit(directives[j], { $$isolateScope: true });
                    }
                }
                /**
                 * looks up the directive and decorates it with exception handling and proper parameters. We
                 * call this the boundDirective.
                 *
                 * @param {string} name name of the directive to look up.
                 * @param {string} location The directive must be found in specific format.
                 *   String containing any of theses characters:
                 *
                 *   * `E`: element name
                 *   * `A': attribute
                 *   * `C`: class
                 *   * `M`: comment
                 * @returns {boolean} true if directive was added.
                 */
                function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName) {
                    if (name === ignoreDirective)
                        return null;
                    var match = null;
                    if (hasDirectives.hasOwnProperty(name)) {
                        for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
                            try {
                                directive = directives[i];
                                if ((maxPriority === undefined || maxPriority > directive.priority) &&
                                    directive.restrict.indexOf(location) != -1) {
                                    if (startAttrName) {
                                        directive = inherit(directive, { $$start: startAttrName, $$end: endAttrName });
                                    }
                                    tDirectives.push(directive);
                                    match = directive;
                                }
                            }
                            catch (e) {
                                $exceptionHandler(e);
                            }
                        }
                    }
                    return match;
                }
                /**
                 * looks up the directive and returns true if it is a multi-element directive,
                 * and therefore requires DOM nodes between -start and -end markers to be grouped
                 * together.
                 *
                 * @param {string} name name of the directive to look up.
                 * @returns true if directive was registered as multi-element.
                 */
                function directiveIsMultiElement(name) {
                    if (hasDirectives.hasOwnProperty(name)) {
                        for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
                            directive = directives[i];
                            if (directive.multiElement) {
                                return true;
                            }
                        }
                    }
                    return false;
                }
                /**
                 * When the element is replaced with HTML template then the new attributes
                 * on the template need to be merged with the existing attributes in the DOM.
                 * The desired effect is to have both of the attributes present.
                 *
                 * @param {object} dst destination attributes (original DOM)
                 * @param {object} src source attributes (from the directive template)
                 */
                function mergeTemplateAttributes(dst, src) {
                    var srcAttr = src.$attr, dstAttr = dst.$attr, $element = dst.$$element;
                    // reapply the old attributes to the new element
                    forEach(dst, function (value, key) {
                        if (key.charAt(0) != '$') {
                            if (src[key] && src[key] !== value) {
                                value += (key === 'style' ? ';' : ' ') + src[key];
                            }
                            dst.$set(key, value, true, srcAttr[key]);
                        }
                    });
                    // copy the new attributes on the old attrs object
                    forEach(src, function (value, key) {
                        if (key == 'class') {
                            safeAddClass($element, value);
                            dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
                        }
                        else if (key == 'style') {
                            $element.attr('style', $element.attr('style') + ';' + value);
                            dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
                            // `dst` will never contain hasOwnProperty as DOM parser won't let it.
                            // You will get an "InvalidCharacterError: DOM Exception 5" error if you
                            // have an attribute like "has-own-property" or "data-has-own-property", etc.
                        }
                        else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
                            dst[key] = value;
                            dstAttr[key] = srcAttr[key];
                        }
                    });
                }
                function compileTemplateUrl(directives, $compileNode, tAttrs, $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
                    var linkQueue = [], afterTemplateNodeLinkFn, afterTemplateChildLinkFn, beforeTemplateCompileNode = $compileNode[0], origAsyncDirective = directives.shift(), 
                    // The fact that we have to copy and patch the directive seems wrong!
                    derivedSyncDirective = extend({}, origAsyncDirective, {
                        templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
                    }), templateUrl = (isFunction(origAsyncDirective.templateUrl))
                        ? origAsyncDirective.templateUrl($compileNode, tAttrs)
                        : origAsyncDirective.templateUrl, templateNamespace = origAsyncDirective.templateNamespace;
                    $compileNode.empty();
                    $templateRequest($sce.getTrustedResourceUrl(templateUrl))
                        .then(function (content) {
                        var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
                        content = denormalizeTemplate(content);
                        if (origAsyncDirective.replace) {
                            if (jqLiteIsTextNode(content)) {
                                $template = [];
                            }
                            else {
                                $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
                            }
                            compileNode = $template[0];
                            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                                throw $compileMinErr('tplrt', "Template for directive '{0}' must have exactly one root element. {1}", origAsyncDirective.name, templateUrl);
                            }
                            tempTemplateAttrs = { $attr: {} };
                            replaceWith($rootElement, $compileNode, compileNode);
                            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
                            if (isObject(origAsyncDirective.scope)) {
                                markDirectivesAsIsolate(templateDirectives);
                            }
                            directives = templateDirectives.concat(directives);
                            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
                        }
                        else {
                            compileNode = beforeTemplateCompileNode;
                            $compileNode.html(content);
                        }
                        directives.unshift(derivedSyncDirective);
                        afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns, previousCompileContext);
                        forEach($rootElement, function (node, i) {
                            if (node == compileNode) {
                                $rootElement[i] = $compileNode[0];
                            }
                        });
                        afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);
                        while (linkQueue.length) {
                            var scope = linkQueue.shift(), beforeTemplateLinkNode = linkQueue.shift(), linkRootElement = linkQueue.shift(), boundTranscludeFn = linkQueue.shift(), linkNode = $compileNode[0];
                            if (scope.$$destroyed)
                                continue;
                            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                                var oldClasses = beforeTemplateLinkNode.className;
                                if (!(previousCompileContext.hasElementTranscludeDirective &&
                                    origAsyncDirective.replace)) {
                                    // it was cloned therefore we have to clone as well.
                                    linkNode = jqLiteClone(compileNode);
                                }
                                replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
                                // Copy in CSS classes from original node
                                safeAddClass(jqLite(linkNode), oldClasses);
                            }
                            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                                childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
                            }
                            else {
                                childBoundTranscludeFn = boundTranscludeFn;
                            }
                            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, childBoundTranscludeFn);
                        }
                        linkQueue = null;
                    });
                    return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
                        var childBoundTranscludeFn = boundTranscludeFn;
                        if (scope.$$destroyed)
                            return;
                        if (linkQueue) {
                            linkQueue.push(scope, node, rootElement, childBoundTranscludeFn);
                        }
                        else {
                            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                                childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
                            }
                            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
                        }
                    };
                }
                /**
                 * Sorting function for bound directives.
                 */
                function byPriority(a, b) {
                    var diff = b.priority - a.priority;
                    if (diff !== 0)
                        return diff;
                    if (a.name !== b.name)
                        return (a.name < b.name) ? -1 : 1;
                    return a.index - b.index;
                }
                function assertNoDuplicate(what, previousDirective, directive, element) {
                    if (previousDirective) {
                        throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}', previousDirective.name, directive.name, what, startingTag(element));
                    }
                }
                function addTextInterpolateDirective(directives, text) {
                    var interpolateFn = $interpolate(text, true);
                    if (interpolateFn) {
                        directives.push({
                            priority: 0,
                            compile: function textInterpolateCompileFn(templateNode) {
                                var templateNodeParent = templateNode.parent(), hasCompileParent = !!templateNodeParent.length;
                                // When transcluding a template that has bindings in the root
                                // we don't have a parent and thus need to add the class during linking fn.
                                if (hasCompileParent)
                                    compile.$$addBindingClass(templateNodeParent);
                                return function textInterpolateLinkFn(scope, node) {
                                    var parent = node.parent();
                                    if (!hasCompileParent)
                                        compile.$$addBindingClass(parent);
                                    compile.$$addBindingInfo(parent, interpolateFn.expressions);
                                    scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                                        node[0].nodeValue = value;
                                    });
                                };
                            }
                        });
                    }
                }
                function wrapTemplate(type, template) {
                    type = lowercase(type || 'html');
                    switch (type) {
                        case 'svg':
                        case 'math':
                            var wrapper = document.createElement('div');
                            wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
                            return wrapper.childNodes[0].childNodes;
                        default:
                            return template;
                    }
                }
                function getTrustedContext(node, attrNormalizedName) {
                    if (attrNormalizedName == "srcdoc") {
                        return $sce.HTML;
                    }
                    var tag = nodeName_(node);
                    // maction[xlink:href] can source SVG.  It's not limited to <maction>.
                    if (attrNormalizedName == "xlinkHref" ||
                        (tag == "form" && attrNormalizedName == "action") ||
                        (tag != "img" && (attrNormalizedName == "src" ||
                            attrNormalizedName == "ngSrc"))) {
                        return $sce.RESOURCE_URL;
                    }
                }
                function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
                    var interpolateFn = $interpolate(value, true);
                    // no interpolation found -> ignore
                    if (!interpolateFn)
                        return;
                    if (name === "multiple" && nodeName_(node) === "select") {
                        throw $compileMinErr("selmulti", "Binding to the 'multiple' attribute is not supported. Element: {0}", startingTag(node));
                    }
                    directives.push({
                        priority: 100,
                        compile: function () {
                            return {
                                pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                                    var $$observers = (attr.$$observers || (attr.$$observers = {}));
                                    if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                                        throw $compileMinErr('nodomevents', "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
                                            "ng- versions (such as ng-click instead of onclick) instead.");
                                    }
                                    // If the attribute was removed, then we are done
                                    if (!attr[name]) {
                                        return;
                                    }
                                    // we need to interpolate again, in case the attribute value has been updated
                                    // (e.g. by another directive's compile function)
                                    interpolateFn = $interpolate(attr[name], true, getTrustedContext(node, name), ALL_OR_NOTHING_ATTRS[name] || allOrNothing);
                                    // if attribute was updated so that there is no interpolation going on we don't want to
                                    // register any observers
                                    if (!interpolateFn)
                                        return;
                                    // initialize attr object so that it's ready in case we need the value for isolate
                                    // scope initialization, otherwise the value would not be available from isolate
                                    // directive's linking fn during linking phase
                                    attr[name] = interpolateFn(scope);
                                    ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                                    (attr.$$observers && attr.$$observers[name].$$scope || scope).
                                        $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                                        //special case for class attribute addition + removal
                                        //so that class changes can tap into the animation
                                        //hooks provided by the $animate service. Be sure to
                                        //skip animations when the first digest occurs (when
                                        //both the new and the old values are the same) since
                                        //the CSS classes are the non-interpolated values
                                        if (name === 'class' && newValue != oldValue) {
                                            attr.$updateClass(newValue, oldValue);
                                        }
                                        else {
                                            attr.$set(name, newValue);
                                        }
                                    });
                                }
                            };
                        }
                    });
                }
                /**
                 * This is a special jqLite.replaceWith, which can replace items which
                 * have no parents, provided that the containing jqLite collection is provided.
                 *
                 * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
                 *                               in the root of the tree.
                 * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
                 *                                  the shell, but replace its DOM node reference.
                 * @param {Node} newNode The new DOM node.
                 */
                function replaceWith($rootElement, elementsToRemove, newNode) {
                    var firstElementToRemove = elementsToRemove[0], removeCount = elementsToRemove.length, parent = firstElementToRemove.parentNode, i, ii;
                    if ($rootElement) {
                        for (i = 0, ii = $rootElement.length; i < ii; i++) {
                            if ($rootElement[i] == firstElementToRemove) {
                                $rootElement[i++] = newNode;
                                for (var j = i, j2 = j + removeCount - 1, jj = $rootElement.length; j < jj; j++, j2++) {
                                    if (j2 < jj) {
                                        $rootElement[j] = $rootElement[j2];
                                    }
                                    else {
                                        delete $rootElement[j];
                                    }
                                }
                                $rootElement.length -= removeCount - 1;
                                // If the replaced element is also the jQuery .context then replace it
                                // .context is a deprecated jQuery api, so we should set it only when jQuery set it
                                // http://api.jquery.com/context/
                                if ($rootElement.context === firstElementToRemove) {
                                    $rootElement.context = newNode;
                                }
                                break;
                            }
                        }
                    }
                    if (parent) {
                        parent.replaceChild(newNode, firstElementToRemove);
                    }
                    // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?
                    var fragment = document.createDocumentFragment();
                    fragment.appendChild(firstElementToRemove);
                    // Copy over user data (that includes Angular's $scope etc.). Don't copy private
                    // data here because there's no public interface in jQuery to do that and copying over
                    // event listeners (which is the main use of private data) wouldn't work anyway.
                    jqLite(newNode).data(jqLite(firstElementToRemove).data());
                    // Remove data of the replaced element. We cannot just call .remove()
                    // on the element it since that would deallocate scope that is needed
                    // for the new node. Instead, remove the data "manually".
                    if (!jQuery) {
                        delete jqLite.cache[firstElementToRemove[jqLite.expando]];
                    }
                    else {
                        // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after
                        // the replaced element. The cleanData version monkey-patched by Angular would cause
                        // the scope to be trashed and we do need the very same scope to work with the new
                        // element. However, we cannot just cache the non-patched version and use it here as
                        // that would break if another library patches the method after Angular does (one
                        // example is jQuery UI). Instead, set a flag indicating scope destroying should be
                        // skipped this one time.
                        skipDestroyOnNextJQueryCleanData = true;
                        jQuery.cleanData([firstElementToRemove]);
                    }
                    for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
                        var element = elementsToRemove[k];
                        jqLite(element).remove(); // must do this way to clean up expando
                        fragment.appendChild(element);
                        delete elementsToRemove[k];
                    }
                    elementsToRemove[0] = newNode;
                    elementsToRemove.length = 1;
                }
                function cloneAndAnnotateFn(fn, annotation) {
                    return extend(function () { return fn.apply(null, arguments); }, fn, annotation);
                }
                function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
                    try {
                        linkFn(scope, $element, attrs, controllers, transcludeFn);
                    }
                    catch (e) {
                        $exceptionHandler(e, startingTag($element));
                    }
                }
            }
        ];
    }
    var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
    /**
     * Converts all accepted directives format into proper directive name.
     * All of these will become 'myDirective':
     *   my:Directive
     *   my-directive
     *   x-my-directive
     *   data-my:directive
     *
     * Also there is special case for Moz prefix starting with upper case letter.
     * @param name Name to normalize
     */
    function directiveNormalize(name) {
        return camelCase(name.replace(PREFIX_REGEXP, ''));
    }
    /**
     * @ngdoc type
     * @name $compile.directive.Attributes
     *
     * @description
     * A shared object between directive compile / linking functions which contains normalized DOM
     * element attributes. The values reflect current binding state `{{ }}`. The normalization is
     * needed since all of these are treated as equivalent in Angular:
     *
     * ```
     *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
     * ```
     */
    /**
     * @ngdoc property
     * @name $compile.directive.Attributes#$attr
     *
     * @description
     * A map of DOM element attribute names to the normalized name. This is
     * needed to do reverse lookup from normalized name back to actual name.
     */
    /**
     * @ngdoc method
     * @name $compile.directive.Attributes#$set
     * @kind function
     *
     * @description
     * Set DOM element attribute value.
     *
     *
     * @param {string} name Normalized element attribute name of the property to modify. The name is
     *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
     *          property to the original name.
     * @param {string} value Value to set the attribute to. The value can be an interpolated string.
     */
    /**
     * Closure compiler type information
     */
    function nodesetLinkingFn(
    /* angular.Scope */ scope, 
    /* NodeList */ nodeList, 
    /* Element */ rootElement, 
    /* function(Function) */ boundTranscludeFn) { }
    function directiveLinkingFn(
    /* nodesetLinkingFn */ nodesetLinkingFn, 
    /* angular.Scope */ scope, 
    /* Node */ node, 
    /* Element */ rootElement, 
    /* function(Function) */ boundTranscludeFn) { }
    function tokenDifference(str1, str2) {
        var values = '', tokens1 = str1.split(/\s+/), tokens2 = str2.split(/\s+/);
        outer: for (var i = 0; i < tokens1.length; i++) {
            var token = tokens1[i];
            for (var j = 0; j < tokens2.length; j++) {
                if (token == tokens2[j])
                    continue outer;
            }
            values += (values.length > 0 ? ' ' : '') + token;
        }
        return values;
    }
    function removeComments(jqNodes) {
        jqNodes = jqLite(jqNodes);
        var i = jqNodes.length;
        if (i <= 1) {
            return jqNodes;
        }
        while (i--) {
            var node = jqNodes[i];
            if (node.nodeType === NODE_TYPE_COMMENT) {
                splice.call(jqNodes, i, 1);
            }
        }
        return jqNodes;
    }
    /**
     * @ngdoc provider
     * @name $controllerProvider
     * @description
     * The {@link ng.$controller $controller service} is used by Angular to create new
     * controllers.
     *
     * This provider allows controller registration via the
     * {@link ng.$controllerProvider#register register} method.
     */
    function $ControllerProvider() {
        var controllers = {}, globals = false, CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;
        /**
         * @ngdoc method
         * @name $controllerProvider#register
         * @param {string|Object} name Controller name, or an object map of controllers where the keys are
         *    the names and the values are the constructors.
         * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
         *    annotations in the array notation).
         */
        this.register = function (name, constructor) {
            assertNotHasOwnProperty(name, 'controller');
            if (isObject(name)) {
                extend(controllers, name);
            }
            else {
                controllers[name] = constructor;
            }
        };
        /**
         * @ngdoc method
         * @name $controllerProvider#allowGlobals
         * @description If called, allows `$controller` to find controller constructors on `window`
         */
        this.allowGlobals = function () {
            globals = true;
        };
        this.$get = ['$injector', '$window', function ($injector, $window) {
                /**
                 * @ngdoc service
                 * @name $controller
                 * @requires $injector
                 *
                 * @param {Function|string} constructor If called with a function then it's considered to be the
                 *    controller constructor function. Otherwise it's considered to be a string which is used
                 *    to retrieve the controller constructor using the following steps:
                 *
                 *    * check if a controller with given name is registered via `$controllerProvider`
                 *    * check if evaluating the string on the current scope returns a constructor
                 *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
                 *      `window` object (not recommended)
                 *
                 *    The string can use the `controller as property` syntax, where the controller instance is published
                 *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
                 *    to work correctly.
                 *
                 * @param {Object} locals Injection locals for Controller.
                 * @return {Object} Instance of given controller.
                 *
                 * @description
                 * `$controller` service is responsible for instantiating controllers.
                 *
                 * It's just a simple call to {@link auto.$injector $injector}, but extracted into
                 * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
                 */
                return function (expression, locals, later, ident) {
                    // PRIVATE API:
                    //   param `later` --- indicates that the controller's constructor is invoked at a later time.
                    //                     If true, $controller will allocate the object with the correct
                    //                     prototype chain, but will not invoke the controller until a returned
                    //                     callback is invoked.
                    //   param `ident` --- An optional label which overrides the label parsed from the controller
                    //                     expression, if any.
                    var instance, match, constructor, identifier;
                    later = later === true;
                    if (ident && isString(ident)) {
                        identifier = ident;
                    }
                    if (isString(expression)) {
                        match = expression.match(CNTRL_REG),
                            constructor = match[1],
                            identifier = identifier || match[3];
                        expression = controllers.hasOwnProperty(constructor)
                            ? controllers[constructor]
                            : getter(locals.$scope, constructor, true) ||
                                (globals ? getter($window, constructor, true) : undefined);
                        assertArgFn(expression, constructor, true);
                    }
                    if (later) {
                        // Instantiate controller later:
                        // This machinery is used to create an instance of the object before calling the
                        // controller's constructor itself.
                        //
                        // This allows properties to be added to the controller before the constructor is
                        // invoked. Primarily, this is used for isolate scope bindings in $compile.
                        //
                        // This feature is not intended for use by applications, and is thus not documented
                        // publicly.
                        // Object creation: http://jsperf.com/create-constructor/2
                        var controllerPrototype = (isArray(expression) ?
                            expression[expression.length - 1] : expression).prototype;
                        instance = Object.create(controllerPrototype);
                        if (identifier) {
                            addIdentifier(locals, identifier, instance, constructor || expression.name);
                        }
                        return extend(function () {
                            $injector.invoke(expression, instance, locals, constructor);
                            return instance;
                        }, {
                            instance: instance,
                            identifier: identifier
                        });
                    }
                    instance = $injector.instantiate(expression, locals, constructor);
                    if (identifier) {
                        addIdentifier(locals, identifier, instance, constructor || expression.name);
                    }
                    return instance;
                };
                function addIdentifier(locals, identifier, instance, name) {
                    if (!(locals && isObject(locals.$scope))) {
                        throw minErr('$controller')('noscp', "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.", name, identifier);
                    }
                    locals.$scope[identifier] = instance;
                }
            }];
    }
    /**
     * @ngdoc service
     * @name $document
     * @requires $window
     *
     * @description
     * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
     *
     * @example
       <example module="documentExample">
         <file name="index.html">
           <div ng-controller="ExampleController">
             <p>$document title: <b ng-bind="title"></b></p>
             <p>window.document title: <b ng-bind="windowTitle"></b></p>
           </div>
         </file>
         <file name="script.js">
           angular.module('documentExample', [])
             .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
               $scope.title = $document[0].title;
               $scope.windowTitle = angular.element(window.document)[0].title;
             }]);
         </file>
       </example>
     */
    function $DocumentProvider() {
        this.$get = ['$window', function (window) {
                return jqLite(window.document);
            }];
    }
    /**
     * @ngdoc service
     * @name $exceptionHandler
     * @requires ng.$log
     *
     * @description
     * Any uncaught exception in angular expressions is delegated to this service.
     * The default implementation simply delegates to `$log.error` which logs it into
     * the browser console.
     *
     * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
     * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
     *
     * ## Example:
     *
     * ```js
     *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
     *     return function(exception, cause) {
     *       exception.message += ' (caused by "' + cause + '")';
     *       throw exception;
     *     };
     *   });
     * ```
     *
     * This example will override the normal action of `$exceptionHandler`, to make angular
     * exceptions fail hard when they happen, instead of just logging to the console.
     *
     * <hr />
     * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
     * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
     * (unless executed during a digest).
     *
     * If you wish, you can manually delegate exceptions, e.g.
     * `try { ... } catch(e) { $exceptionHandler(e); }`
     *
     * @param {Error} exception Exception associated with the error.
     * @param {string=} cause optional information about the context in which
     *       the error was thrown.
     *
     */
    function $ExceptionHandlerProvider() {
        this.$get = ['$log', function ($log) {
                return function (exception, cause) {
                    $log.error.apply($log, arguments);
                };
            }];
    }
    var APPLICATION_JSON = 'application/json';
    var CONTENT_TYPE_APPLICATION_JSON = { 'Content-Type': APPLICATION_JSON + ';charset=utf-8' };
    var JSON_START = /^\s*(\[|\{[^\{])/;
    var JSON_END = /[\}\]]\s*$/;
    var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;
    function defaultHttpResponseTransform(data, headers) {
        if (isString(data)) {
            // strip json vulnerability protection prefix
            data = data.replace(JSON_PROTECTION_PREFIX, '');
            var contentType = headers('Content-Type');
            if ((contentType && contentType.indexOf(APPLICATION_JSON) === 0 && data.trim()) ||
                (JSON_START.test(data) && JSON_END.test(data))) {
                data = fromJson(data);
            }
        }
        return data;
    }
    /**
     * Parse headers into key value object
     *
     * @param {string} headers Raw headers as a string
     * @returns {Object} Parsed headers as key value object
     */
    function parseHeaders(headers) {
        var parsed = createMap(), key, val, i;
        if (!headers)
            return parsed;
        forEach(headers.split('\n'), function (line) {
            i = line.indexOf(':');
            key = lowercase(trim(line.substr(0, i)));
            val = trim(line.substr(i + 1));
            if (key) {
                parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
            }
        });
        return parsed;
    }
    /**
     * Returns a function that provides access to parsed headers.
     *
     * Headers are lazy parsed when first requested.
     * @see parseHeaders
     *
     * @param {(string|Object)} headers Headers to provide access to.
     * @returns {function(string=)} Returns a getter function which if called with:
     *
     *   - if called with single an argument returns a single header value or null
     *   - if called with no arguments returns an object containing all headers.
     */
    function headersGetter(headers) {
        var headersObj = isObject(headers) ? headers : undefined;
        return function (name) {
            if (!headersObj)
                headersObj = parseHeaders(headers);
            if (name) {
                var value = headersObj[lowercase(name)];
                if (value === void 0) {
                    value = null;
                }
                return value;
            }
            return headersObj;
        };
    }
    /**
     * Chain all given functions
     *
     * This function is used for both request and response transforming
     *
     * @param {*} data Data to transform.
     * @param {function(string=)} headers Http headers getter fn.
     * @param {(Function|Array.<Function>)} fns Function or an array of functions.
     * @returns {*} Transformed data.
     */
    function transformData(data, headers, fns) {
        if (isFunction(fns))
            return fns(data, headers);
        forEach(fns, function (fn) {
            data = fn(data, headers);
        });
        return data;
    }
    function isSuccess(status) {
        return 200 <= status && status < 300;
    }
    /**
     * @ngdoc provider
     * @name $httpProvider
     * @description
     * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
     * */
    function $HttpProvider() {
        /**
         * @ngdoc property
         * @name $httpProvider#defaults
         * @description
         *
         * Object containing default values for all {@link ng.$http $http} requests.
         *
         * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}
         * that will provide the cache for all requests who set their `cache` property to `true`.
         * If you set the `default.cache = false` then only requests that specify their own custom
         * cache object will be cached. See {@link $http#caching $http Caching} for more information.
         *
         * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
         * Defaults value is `'XSRF-TOKEN'`.
         *
         * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
         * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
         *
         * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
         * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
         * setting default headers.
         *     - **`defaults.headers.common`**
         *     - **`defaults.headers.post`**
         *     - **`defaults.headers.put`**
         *     - **`defaults.headers.patch`**
         *
         **/
        var defaults = this.defaults = {
            // transform incoming response data
            transformResponse: [defaultHttpResponseTransform],
            // transform outgoing request data
            transformRequest: [function (d) {
                    return isObject(d) && !isFile(d) && !isBlob(d) ? toJson(d) : d;
                }],
            // default headers
            headers: {
                common: {
                    'Accept': 'application/json, text/plain, */*'
                },
                post: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
                put: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
                patch: shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
            },
            xsrfCookieName: 'XSRF-TOKEN',
            xsrfHeaderName: 'X-XSRF-TOKEN'
        };
        var useApplyAsync = false;
        /**
         * @ngdoc method
         * @name $httpProvider#useApplyAsync
         * @description
         *
         * Configure $http service to combine processing of multiple http responses received at around
         * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
         * significant performance improvement for bigger applications that make many HTTP requests
         * concurrently (common during application bootstrap).
         *
         * Defaults to false. If no value is specifed, returns the current configured value.
         *
         * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
         *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
         *    to load and share the same digest cycle.
         *
         * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
         *    otherwise, returns the current configured value.
         **/
        this.useApplyAsync = function (value) {
            if (isDefined(value)) {
                useApplyAsync = !!value;
                return this;
            }
            return useApplyAsync;
        };
        /**
         * @ngdoc property
         * @name $httpProvider#interceptors
         * @description
         *
         * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
         * pre-processing of request or postprocessing of responses.
         *
         * These service factories are ordered by request, i.e. they are applied in the same order as the
         * array, on request, but reverse order, on response.
         *
         * {@link ng.$http#interceptors Interceptors detailed info}
         **/
        var interceptorFactories = this.interceptors = [];
        this.$get = ['$httpBackend', '$browser', '$cacheFactory', '$rootScope', '$q', '$injector',
            function ($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {
                var defaultCache = $cacheFactory('$http');
                /**
                 * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
                 * The reversal is needed so that we can build up the interception chain around the
                 * server request.
                 */
                var reversedInterceptors = [];
                forEach(interceptorFactories, function (interceptorFactory) {
                    reversedInterceptors.unshift(isString(interceptorFactory)
                        ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
                });
                /**
                 * @ngdoc service
                 * @kind function
                 * @name $http
                 * @requires ng.$httpBackend
                 * @requires $cacheFactory
                 * @requires $rootScope
                 * @requires $q
                 * @requires $injector
                 *
                 * @description
                 * The `$http` service is a core Angular service that facilitates communication with the remote
                 * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
                 * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
                 *
                 * For unit testing applications that use `$http` service, see
                 * {@link ngMock.$httpBackend $httpBackend mock}.
                 *
                 * For a higher level of abstraction, please check out the {@link ngResource.$resource
                 * $resource} service.
                 *
                 * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
                 * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
                 * it is important to familiarize yourself with these APIs and the guarantees they provide.
                 *
                 *
                 * ## General usage
                 * The `$http` service is a function which takes a single argument — a configuration object —
                 * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
                 * with two $http specific methods: `success` and `error`.
                 *
                 * ```js
                 *   // Simple GET request example :
                 *   $http.get('/someUrl').
                 *     success(function(data, status, headers, config) {
                 *       // this callback will be called asynchronously
                 *       // when the response is available
                 *     }).
                 *     error(function(data, status, headers, config) {
                 *       // called asynchronously if an error occurs
                 *       // or server returns response with an error status.
                 *     });
                 * ```
                 *
                 * ```js
                 *   // Simple POST request example (passing data) :
                 *   $http.post('/someUrl', {msg:'hello word!'}).
                 *     success(function(data, status, headers, config) {
                 *       // this callback will be called asynchronously
                 *       // when the response is available
                 *     }).
                 *     error(function(data, status, headers, config) {
                 *       // called asynchronously if an error occurs
                 *       // or server returns response with an error status.
                 *     });
                 * ```
                 *
                 *
                 * Since the returned value of calling the $http function is a `promise`, you can also use
                 * the `then` method to register callbacks, and these callbacks will receive a single argument –
                 * an object representing the response. See the API signature and type info below for more
                 * details.
                 *
                 * A response status code between 200 and 299 is considered a success status and
                 * will result in the success callback being called. Note that if the response is a redirect,
                 * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
                 * called for such responses.
                 *
                 * ## Writing Unit Tests that use $http
                 * When unit testing (using {@link ngMock ngMock}), it is necessary to call
                 * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
                 * request using trained responses.
                 *
                 * ```
                 * $httpBackend.expectGET(...);
                 * $http.get(...);
                 * $httpBackend.flush();
                 * ```
                 *
                 * ## Shortcut methods
                 *
                 * Shortcut methods are also available. All shortcut methods require passing in the URL, and
                 * request data must be passed in for POST/PUT requests.
                 *
                 * ```js
                 *   $http.get('/someUrl').success(successCallback);
                 *   $http.post('/someUrl', data).success(successCallback);
                 * ```
                 *
                 * Complete list of shortcut methods:
                 *
                 * - {@link ng.$http#get $http.get}
                 * - {@link ng.$http#head $http.head}
                 * - {@link ng.$http#post $http.post}
                 * - {@link ng.$http#put $http.put}
                 * - {@link ng.$http#delete $http.delete}
                 * - {@link ng.$http#jsonp $http.jsonp}
                 * - {@link ng.$http#patch $http.patch}
                 *
                 *
                 * ## Setting HTTP Headers
                 *
                 * The $http service will automatically add certain HTTP headers to all requests. These defaults
                 * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
                 * object, which currently contains this default configuration:
                 *
                 * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
                 *   - `Accept: application/json, text/plain, * / *`
                 * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
                 *   - `Content-Type: application/json`
                 * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
                 *   - `Content-Type: application/json`
                 *
                 * To add or overwrite these defaults, simply add or remove a property from these configuration
                 * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
                 * with the lowercased HTTP method name as the key, e.g.
                 * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.
                 *
                 * The defaults can also be set at runtime via the `$http.defaults` object in the same
                 * fashion. For example:
                 *
                 * ```
                 * module.run(function($http) {
                 *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
                 * });
                 * ```
                 *
                 * In addition, you can supply a `headers` property in the config object passed when
                 * calling `$http(config)`, which overrides the defaults without changing them globally.
                 *
                 * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
                 * Use the `headers` property, setting the desired header to `undefined`. For example:
                 *
                 * ```js
                 * var req = {
                 *  method: 'POST',
                 *  url: 'http://example.com',
                 *  headers: {
                 *    'Content-Type': undefined
                 *  },
                 *  data: { test: 'test' },
                 * }
                 *
                 * $http(req).success(function(){...}).error(function(){...});
                 * ```
                 *
                 * ## Transforming Requests and Responses
                 *
                 * Both requests and responses can be transformed using transformation functions: `transformRequest`
                 * and `transformResponse`. These properties can be a single function that returns
                 * the transformed value (`{function(data, headersGetter)`) or an array of such transformation functions,
                 * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
                 *
                 * ### Default Transformations
                 *
                 * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
                 * `defaults.transformResponse` properties. If a request does not provide its own transformations
                 * then these will be applied.
                 *
                 * You can augment or replace the default transformations by modifying these properties by adding to or
                 * replacing the array.
                 *
                 * Angular provides the following default transformations:
                 *
                 * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
                 *
                 * - If the `data` property of the request configuration object contains an object, serialize it
                 *   into JSON format.
                 *
                 * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
                 *
                 *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
                 *  - If JSON response is detected, deserialize it using a JSON parser.
                 *
                 *
                 * ### Overriding the Default Transformations Per Request
                 *
                 * If you wish override the request/response transformations only for a single request then provide
                 * `transformRequest` and/or `transformResponse` properties on the configuration object passed
                 * into `$http`.
                 *
                 * Note that if you provide these properties on the config object the default transformations will be
                 * overwritten. If you wish to augment the default transformations then you must include them in your
                 * local transformation array.
                 *
                 * The following code demonstrates adding a new response transformation to be run after the default response
                 * transformations have been run.
                 *
                 * ```js
                 * function appendTransform(defaults, transform) {
                 *
                 *   // We can't guarantee that the default transformation is an array
                 *   defaults = angular.isArray(defaults) ? defaults : [defaults];
                 *
                 *   // Append the new transformation to the defaults
                 *   return defaults.concat(transform);
                 * }
                 *
                 * $http({
                 *   url: '...',
                 *   method: 'GET',
                 *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
                 *     return doTransform(value);
                 *   })
                 * });
                 * ```
                 *
                 *
                 * ## Caching
                 *
                 * To enable caching, set the request configuration `cache` property to `true` (to use default
                 * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
                 * When the cache is enabled, `$http` stores the response from the server in the specified
                 * cache. The next time the same request is made, the response is served from the cache without
                 * sending a request to the server.
                 *
                 * Note that even if the response is served from cache, delivery of the data is asynchronous in
                 * the same way that real requests are.
                 *
                 * If there are multiple GET requests for the same URL that should be cached using the same
                 * cache, but the cache is not populated yet, only one request to the server will be made and
                 * the remaining requests will be fulfilled using the response from the first request.
                 *
                 * You can change the default cache to a new object (built with
                 * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
                 * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set
                 * their `cache` property to `true` will now use this cache object.
                 *
                 * If you set the default cache to `false` then only requests that specify their own custom
                 * cache object will be cached.
                 *
                 * ## Interceptors
                 *
                 * Before you start creating interceptors, be sure to understand the
                 * {@link ng.$q $q and deferred/promise APIs}.
                 *
                 * For purposes of global error handling, authentication, or any kind of synchronous or
                 * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
                 * able to intercept requests before they are handed to the server and
                 * responses before they are handed over to the application code that
                 * initiated these requests. The interceptors leverage the {@link ng.$q
                 * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
                 *
                 * The interceptors are service factories that are registered with the `$httpProvider` by
                 * adding them to the `$httpProvider.interceptors` array. The factory is called and
                 * injected with dependencies (if specified) and returns the interceptor.
                 *
                 * There are two kinds of interceptors (and two kinds of rejection interceptors):
                 *
                 *   * `request`: interceptors get called with a http `config` object. The function is free to
                 *     modify the `config` object or create a new one. The function needs to return the `config`
                 *     object directly, or a promise containing the `config` or a new `config` object.
                 *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
                 *     resolved with a rejection.
                 *   * `response`: interceptors get called with http `response` object. The function is free to
                 *     modify the `response` object or create a new one. The function needs to return the `response`
                 *     object directly, or as a promise containing the `response` or a new `response` object.
                 *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
                 *     resolved with a rejection.
                 *
                 *
                 * ```js
                 *   // register the interceptor as a service
                 *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
                 *     return {
                 *       // optional method
                 *       'request': function(config) {
                 *         // do something on success
                 *         return config;
                 *       },
                 *
                 *       // optional method
                 *      'requestError': function(rejection) {
                 *         // do something on error
                 *         if (canRecover(rejection)) {
                 *           return responseOrNewPromise
                 *         }
                 *         return $q.reject(rejection);
                 *       },
                 *
                 *
                 *
                 *       // optional method
                 *       'response': function(response) {
                 *         // do something on success
                 *         return response;
                 *       },
                 *
                 *       // optional method
                 *      'responseError': function(rejection) {
                 *         // do something on error
                 *         if (canRecover(rejection)) {
                 *           return responseOrNewPromise
                 *         }
                 *         return $q.reject(rejection);
                 *       }
                 *     };
                 *   });
                 *
                 *   $httpProvider.interceptors.push('myHttpInterceptor');
                 *
                 *
                 *   // alternatively, register the interceptor via an anonymous factory
                 *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
                 *     return {
                 *      'request': function(config) {
                 *          // same as above
                 *       },
                 *
                 *       'response': function(response) {
                 *          // same as above
                 *       }
                 *     };
                 *   });
                 * ```
                 *
                 * ## Security Considerations
                 *
                 * When designing web applications, consider security threats from:
                 *
                 * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
                 * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
                 *
                 * Both server and the client must cooperate in order to eliminate these threats. Angular comes
                 * pre-configured with strategies that address these issues, but for this to work backend server
                 * cooperation is required.
                 *
                 * ### JSON Vulnerability Protection
                 *
                 * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
                 * allows third party website to turn your JSON resource URL into
                 * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
                 * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
                 * Angular will automatically strip the prefix before processing it as JSON.
                 *
                 * For example if your server needs to return:
                 * ```js
                 * ['one','two']
                 * ```
                 *
                 * which is vulnerable to attack, your server can return:
                 * ```js
                 * )]}',
                 * ['one','two']
                 * ```
                 *
                 * Angular will strip the prefix, before processing the JSON.
                 *
                 *
                 * ### Cross Site Request Forgery (XSRF) Protection
                 *
                 * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
                 * an unauthorized site can gain your user's private data. Angular provides a mechanism
                 * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
                 * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
                 * JavaScript that runs on your domain could read the cookie, your server can be assured that
                 * the XHR came from JavaScript running on your domain. The header will not be set for
                 * cross-domain requests.
                 *
                 * To take advantage of this, your server needs to set a token in a JavaScript readable session
                 * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
                 * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
                 * that only JavaScript running on your domain could have sent the request. The token must be
                 * unique for each user and must be verifiable by the server (to prevent the JavaScript from
                 * making up its own tokens). We recommend that the token is a digest of your site's
                 * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
                 * for added security.
                 *
                 * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
                 * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
                 * or the per-request config object.
                 *
                 *
                 * @param {object} config Object describing the request to be made and how it should be
                 *    processed. The object has following properties:
                 *
                 *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
                 *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
                 *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned
                 *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be
                 *      JSONified.
                 *    - **data** – `{string|Object}` – Data to be sent as the request message data.
                 *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
                 *      HTTP headers to send to the server. If the return value of a function is null, the
                 *      header will not be sent.
                 *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
                 *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
                 *    - **transformRequest** –
                 *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
                 *      transform function or an array of such functions. The transform function takes the http
                 *      request body and headers and returns its transformed (typically serialized) version.
                 *      See {@link ng.$http#overriding-the-default-transformations-per-request
                 *      Overriding the Default Transformations}
                 *    - **transformResponse** –
                 *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
                 *      transform function or an array of such functions. The transform function takes the http
                 *      response body and headers and returns its transformed (typically deserialized) version.
                 *      See {@link ng.$http#overriding-the-default-transformations-per-request
                 *      Overriding the Default Transformations}
                 *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
                 *      GET request, otherwise if a cache instance built with
                 *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
                 *      caching.
                 *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
                 *      that should abort the request when resolved.
                 *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
                 *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
                 *      for more information.
                 *    - **responseType** - `{string}` - see
                 *      [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
                 *
                 * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
                 *   standard `then` method and two http specific methods: `success` and `error`. The `then`
                 *   method takes two arguments a success and an error callback which will be called with a
                 *   response object. The `success` and `error` methods take a single argument - a function that
                 *   will be called when the request succeeds or fails respectively. The arguments passed into
                 *   these functions are destructured representation of the response object passed into the
                 *   `then` method. The response object has these properties:
                 *
                 *   - **data** – `{string|Object}` – The response body transformed with the transform
                 *     functions.
                 *   - **status** – `{number}` – HTTP status code of the response.
                 *   - **headers** – `{function([headerName])}` – Header getter function.
                 *   - **config** – `{Object}` – The configuration object that was used to generate the request.
                 *   - **statusText** – `{string}` – HTTP status text of the response.
                 *
                 * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
                 *   requests. This is primarily meant to be used for debugging purposes.
                 *
                 *
                 * @example
            <example module="httpExample">
            <file name="index.html">
              <div ng-controller="FetchController">
                <select ng-model="method">
                  <option>GET</option>
                  <option>JSONP</option>
                </select>
                <input type="text" ng-model="url" size="80"/>
                <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
                <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
                <button id="samplejsonpbtn"
                  ng-click="updateModel('JSONP',
                                'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
                  Sample JSONP
                </button>
                <button id="invalidjsonpbtn"
                  ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
                    Invalid JSONP
                  </button>
                <pre>http status code: {{status}}</pre>
                <pre>http response data: {{data}}</pre>
              </div>
            </file>
            <file name="script.js">
              angular.module('httpExample', [])
                .controller('FetchController', ['$scope', '$http', '$templateCache',
                  function($scope, $http, $templateCache) {
                    $scope.method = 'GET';
                    $scope.url = 'http-hello.html';
            
                    $scope.fetch = function() {
                      $scope.code = null;
                      $scope.response = null;
            
                      $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
                        success(function(data, status) {
                          $scope.status = status;
                          $scope.data = data;
                        }).
                        error(function(data, status) {
                          $scope.data = data || "Request failed";
                          $scope.status = status;
                      });
                    };
            
                    $scope.updateModel = function(method, url) {
                      $scope.method = method;
                      $scope.url = url;
                    };
                  }]);
            </file>
            <file name="http-hello.html">
              Hello, $http!
            </file>
            <file name="protractor.js" type="protractor">
              var status = element(by.binding('status'));
              var data = element(by.binding('data'));
              var fetchBtn = element(by.id('fetchbtn'));
              var sampleGetBtn = element(by.id('samplegetbtn'));
              var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
              var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));
            
              it('should make an xhr GET request', function() {
                sampleGetBtn.click();
                fetchBtn.click();
                expect(status.getText()).toMatch('200');
                expect(data.getText()).toMatch(/Hello, \$http!/);
              });
            
            // Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
            // it('should make a JSONP request to angularjs.org', function() {
            //   sampleJsonpBtn.click();
            //   fetchBtn.click();
            //   expect(status.getText()).toMatch('200');
            //   expect(data.getText()).toMatch(/Super Hero!/);
            // });
            
              it('should make JSONP request to invalid URL and invoke the error handler',
                  function() {
                invalidJsonpBtn.click();
                fetchBtn.click();
                expect(status.getText()).toMatch('0');
                expect(data.getText()).toMatch('Request failed');
              });
            </file>
            </example>
                 */
                function $http(requestConfig) {
                    var config = {
                        method: 'get',
                        transformRequest: defaults.transformRequest,
                        transformResponse: defaults.transformResponse
                    };
                    var headers = mergeHeaders(requestConfig);
                    if (!angular.isObject(requestConfig)) {
                        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
                    }
                    extend(config, requestConfig);
                    config.headers = headers;
                    config.method = uppercase(config.method);
                    var serverRequest = function (config) {
                        headers = config.headers;
                        var reqData = transformData(config.data, headersGetter(headers), config.transformRequest);
                        // strip content-type if data is undefined
                        if (isUndefined(reqData)) {
                            forEach(headers, function (value, header) {
                                if (lowercase(header) === 'content-type') {
                                    delete headers[header];
                                }
                            });
                        }
                        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
                            config.withCredentials = defaults.withCredentials;
                        }
                        // send request
                        return sendReq(config, reqData, headers).then(transformResponse, transformResponse);
                    };
                    var chain = [serverRequest, undefined];
                    var promise = $q.when(config);
                    // apply interceptors
                    forEach(reversedInterceptors, function (interceptor) {
                        if (interceptor.request || interceptor.requestError) {
                            chain.unshift(interceptor.request, interceptor.requestError);
                        }
                        if (interceptor.response || interceptor.responseError) {
                            chain.push(interceptor.response, interceptor.responseError);
                        }
                    });
                    while (chain.length) {
                        var thenFn = chain.shift();
                        var rejectFn = chain.shift();
                        promise = promise.then(thenFn, rejectFn);
                    }
                    promise.success = function (fn) {
                        promise.then(function (response) {
                            fn(response.data, response.status, response.headers, config);
                        });
                        return promise;
                    };
                    promise.error = function (fn) {
                        promise.then(null, function (response) {
                            fn(response.data, response.status, response.headers, config);
                        });
                        return promise;
                    };
                    return promise;
                    function transformResponse(response) {
                        // make a copy since the response must be cacheable
                        var resp = extend({}, response);
                        if (!response.data) {
                            resp.data = response.data;
                        }
                        else {
                            resp.data = transformData(response.data, response.headers, config.transformResponse);
                        }
                        return (isSuccess(response.status))
                            ? resp
                            : $q.reject(resp);
                    }
                    function mergeHeaders(config) {
                        var defHeaders = defaults.headers, reqHeaders = extend({}, config.headers), defHeaderName, lowercaseDefHeaderName, reqHeaderName;
                        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);
                        // using for-in instead of forEach to avoid unecessary iteration after header has been found
                        defaultHeadersIteration: for (defHeaderName in defHeaders) {
                            lowercaseDefHeaderName = lowercase(defHeaderName);
                            for (reqHeaderName in reqHeaders) {
                                if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
                                    continue defaultHeadersIteration;
                                }
                            }
                            reqHeaders[defHeaderName] = defHeaders[defHeaderName];
                        }
                        // execute if header value is a function for merged headers
                        execHeaders(reqHeaders);
                        return reqHeaders;
                        function execHeaders(headers) {
                            var headerContent;
                            forEach(headers, function (headerFn, header) {
                                if (isFunction(headerFn)) {
                                    headerContent = headerFn();
                                    if (headerContent != null) {
                                        headers[header] = headerContent;
                                    }
                                    else {
                                        delete headers[header];
                                    }
                                }
                            });
                        }
                    }
                }
                $http.pendingRequests = [];
                /**
                 * @ngdoc method
                 * @name $http#get
                 *
                 * @description
                 * Shortcut method to perform `GET` request.
                 *
                 * @param {string} url Relative or absolute URL specifying the destination of the request
                 * @param {Object=} config Optional configuration object
                 * @returns {HttpPromise} Future object
                 */
                /**
                 * @ngdoc method
                 * @name $http#delete
                 *
                 * @description
                 * Shortcut method to perform `DELETE` request.
                 *
                 * @param {string} url Relative or absolute URL specifying the destination of the request
                 * @param {Object=} config Optional configuration object
                 * @returns {HttpPromise} Future object
                 */
                /**
                 * @ngdoc method
                 * @name $http#head
                 *
                 * @description
                 * Shortcut method to perform `HEAD` request.
                 *
                 * @param {string} url Relative or absolute URL specifying the destination of the request
                 * @param {Object=} config Optional configuration object
                 * @returns {HttpPromise} Future object
                 */
                /**
                 * @ngdoc method
                 * @name $http#jsonp
                 *
                 * @description
                 * Shortcut method to perform `JSONP` request.
                 *
                 * @param {string} url Relative or absolute URL specifying the destination of the request.
                 *                     The name of the callback should be the string `JSON_CALLBACK`.
                 * @param {Object=} config Optional configuration object
                 * @returns {HttpPromise} Future object
                 */
                createShortMethods('get', 'delete', 'head', 'jsonp');
                /**
                 * @ngdoc method
                 * @name $http#post
                 *
                 * @description
                 * Shortcut method to perform `POST` request.
                 *
                 * @param {string} url Relative or absolute URL specifying the destination of the request
                 * @param {*} data Request content
                 * @param {Object=} config Optional configuration object
                 * @returns {HttpPromise} Future object
                 */
                /**
                 * @ngdoc method
                 * @name $http#put
                 *
                 * @description
                 * Shortcut method to perform `PUT` request.
                 *
                 * @param {string} url Relative or absolute URL specifying the destination of the request
                 * @param {*} data Request content
                 * @param {Object=} config Optional configuration object
                 * @returns {HttpPromise} Future object
                 */
                /**
                 * @ngdoc method
                 * @name $http#patch
                 *
                 * @description
                 * Shortcut method to perform `PATCH` request.
                 *
                 * @param {string} url Relative or absolute URL specifying the destination of the request
                 * @param {*} data Request content
                 * @param {Object=} config Optional configuration object
                 * @returns {HttpPromise} Future object
                 */
                createShortMethodsWithData('post', 'put', 'patch');
                /**
                 * @ngdoc property
                 * @name $http#defaults
                 *
                 * @description
                 * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
                 * default headers, withCredentials as well as request and response transformations.
                 *
                 * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
                 */
                $http.defaults = defaults;
                return $http;
                function createShortMethods(names) {
                    forEach(arguments, function (name) {
                        $http[name] = function (url, config) {
                            return $http(extend(config || {}, {
                                method: name,
                                url: url
                            }));
                        };
                    });
                }
                function createShortMethodsWithData(name) {
                    forEach(arguments, function (name) {
                        $http[name] = function (url, data, config) {
                            return $http(extend(config || {}, {
                                method: name,
                                url: url,
                                data: data
                            }));
                        };
                    });
                }
                /**
                 * Makes the request.
                 *
                 * !!! ACCESSES CLOSURE VARS:
                 * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
                 */
                function sendReq(config, reqData, reqHeaders) {
                    var deferred = $q.defer(), promise = deferred.promise, cache, cachedResp, url = buildUrl(config.url, config.params);
                    $http.pendingRequests.push(config);
                    promise.then(removePendingReq, removePendingReq);
                    if ((config.cache || defaults.cache) && config.cache !== false &&
                        (config.method === 'GET' || config.method === 'JSONP')) {
                        cache = isObject(config.cache) ? config.cache
                            : isObject(defaults.cache) ? defaults.cache
                                : defaultCache;
                    }
                    if (cache) {
                        cachedResp = cache.get(url);
                        if (isDefined(cachedResp)) {
                            if (isPromiseLike(cachedResp)) {
                                // cached request has already been sent, but there is no response yet
                                cachedResp.then(removePendingReq, removePendingReq);
                                return cachedResp;
                            }
                            else {
                                // serving from cache
                                if (isArray(cachedResp)) {
                                    resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
                                }
                                else {
                                    resolvePromise(cachedResp, 200, {}, 'OK');
                                }
                            }
                        }
                        else {
                            // put the promise for the non-transformed response into cache as a placeholder
                            cache.put(url, promise);
                        }
                    }
                    // if we won't have the response in cache, set the xsrf headers and
                    // send the request to the backend
                    if (isUndefined(cachedResp)) {
                        var xsrfValue = urlIsSameOrigin(config.url)
                            ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName]
                            : undefined;
                        if (xsrfValue) {
                            reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
                        }
                        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout, config.withCredentials, config.responseType);
                    }
                    return promise;
                    /**
                     * Callback registered to $httpBackend():
                     *  - caches the response if desired
                     *  - resolves the raw $http promise
                     *  - calls $apply
                     */
                    function done(status, response, headersString, statusText) {
                        if (cache) {
                            if (isSuccess(status)) {
                                cache.put(url, [status, response, parseHeaders(headersString), statusText]);
                            }
                            else {
                                // remove promise from the cache
                                cache.remove(url);
                            }
                        }
                        function resolveHttpPromise() {
                            resolvePromise(response, status, headersString, statusText);
                        }
                        if (useApplyAsync) {
                            $rootScope.$applyAsync(resolveHttpPromise);
                        }
                        else {
                            resolveHttpPromise();
                            if (!$rootScope.$$phase)
                                $rootScope.$apply();
                        }
                    }
                    /**
                     * Resolves the raw $http promise.
                     */
                    function resolvePromise(response, status, headers, statusText) {
                        // normalize internal statuses to 0
                        status = Math.max(status, 0);
                        (isSuccess(status) ? deferred.resolve : deferred.reject)({
                            data: response,
                            status: status,
                            headers: headersGetter(headers),
                            config: config,
                            statusText: statusText
                        });
                    }
                    function removePendingReq() {
                        var idx = $http.pendingRequests.indexOf(config);
                        if (idx !== -1)
                            $http.pendingRequests.splice(idx, 1);
                    }
                }
                function buildUrl(url, params) {
                    if (!params)
                        return url;
                    var parts = [];
                    forEachSorted(params, function (value, key) {
                        if (value === null || isUndefined(value))
                            return;
                        if (!isArray(value))
                            value = [value];
                        forEach(value, function (v) {
                            if (isObject(v)) {
                                if (isDate(v)) {
                                    v = v.toISOString();
                                }
                                else {
                                    v = toJson(v);
                                }
                            }
                            parts.push(encodeUriQuery(key) + '=' +
                                encodeUriQuery(v));
                        });
                    });
                    if (parts.length > 0) {
                        url += ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');
                    }
                    return url;
                }
            }];
    }
    function createXhr() {
        return new window.XMLHttpRequest();
    }
    /**
     * @ngdoc service
     * @name $httpBackend
     * @requires $window
     * @requires $document
     *
     * @description
     * HTTP backend used by the {@link ng.$http service} that delegates to
     * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
     *
     * You should never need to use this service directly, instead use the higher-level abstractions:
     * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
     *
     * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
     * $httpBackend} which can be trained with responses.
     */
    function $HttpBackendProvider() {
        this.$get = ['$browser', '$window', '$document', function ($browser, $window, $document) {
                return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
            }];
    }
    function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
        // TODO(vojta): fix the signature
        return function (method, url, post, callback, headers, timeout, withCredentials, responseType) {
            $browser.$$incOutstandingRequestCount();
            url = url || $browser.url();
            if (lowercase(method) == 'jsonp') {
                var callbackId = '_' + (callbacks.counter++).toString(36);
                callbacks[callbackId] = function (data) {
                    callbacks[callbackId].data = data;
                    callbacks[callbackId].called = true;
                };
                var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId), callbackId, function (status, text) {
                    completeRequest(callback, status, callbacks[callbackId].data, "", text);
                    callbacks[callbackId] = noop;
                });
            }
            else {
                var xhr = createXhr();
                xhr.open(method, url, true);
                forEach(headers, function (value, key) {
                    if (isDefined(value)) {
                        xhr.setRequestHeader(key, value);
                    }
                });
                xhr.onload = function requestLoaded() {
                    var statusText = xhr.statusText || '';
                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)
                    // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
                    var response = ('response' in xhr) ? xhr.response : xhr.responseText;
                    // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                    var status = xhr.status === 1223 ? 204 : xhr.status;
                    // fix status code when it is 0 (0 status is undocumented).
                    // Occurs when accessing file resources or on Android 4.1 stock browser
                    // while retrieving files from application cache.
                    if (status === 0) {
                        status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
                    }
                    completeRequest(callback, status, response, xhr.getAllResponseHeaders(), statusText);
                };
                var requestError = function () {
                    // The response is always empty
                    // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
                    completeRequest(callback, -1, null, null, '');
                };
                xhr.onerror = requestError;
                xhr.onabort = requestError;
                if (withCredentials) {
                    xhr.withCredentials = true;
                }
                if (responseType) {
                    try {
                        xhr.responseType = responseType;
                    }
                    catch (e) {
                        // WebKit added support for the json responseType value on 09/03/2013
                        // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
                        // known to throw when setting the value "json" as the response type. Other older
                        // browsers implementing the responseType
                        //
                        // The json response type can be ignored if not supported, because JSON payloads are
                        // parsed on the client-side regardless.
                        if (responseType !== 'json') {
                            throw e;
                        }
                    }
                }
                xhr.send(post || null);
            }
            if (timeout > 0) {
                var timeoutId = $browserDefer(timeoutRequest, timeout);
            }
            else if (isPromiseLike(timeout)) {
                timeout.then(timeoutRequest);
            }
            function timeoutRequest() {
                jsonpDone && jsonpDone();
                xhr && xhr.abort();
            }
            function completeRequest(callback, status, response, headersString, statusText) {
                // cancel timeout and subsequent timeout promise resolution
                if (timeoutId !== undefined) {
                    $browserDefer.cancel(timeoutId);
                }
                jsonpDone = xhr = null;
                callback(status, response, headersString, statusText);
                $browser.$$completeOutstandingRequest(noop);
            }
        };
        function jsonpReq(url, callbackId, done) {
            // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:
            // - fetches local scripts via XHR and evals them
            // - adds and immediately removes script elements from the document
            var script = rawDocument.createElement('script'), callback = null;
            script.type = "text/javascript";
            script.src = url;
            script.async = true;
            callback = function (event) {
                removeEventListenerFn(script, "load", callback);
                removeEventListenerFn(script, "error", callback);
                rawDocument.body.removeChild(script);
                script = null;
                var status = -1;
                var text = "unknown";
                if (event) {
                    if (event.type === "load" && !callbacks[callbackId].called) {
                        event = { type: "error" };
                    }
                    text = event.type;
                    status = event.type === "error" ? 404 : 200;
                }
                if (done) {
                    done(status, text);
                }
            };
            addEventListenerFn(script, "load", callback);
            addEventListenerFn(script, "error", callback);
            rawDocument.body.appendChild(script);
            return callback;
        }
    }
    var $interpolateMinErr = minErr('$interpolate');
    /**
     * @ngdoc provider
     * @name $interpolateProvider
     *
     * @description
     *
     * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
     *
     * @example
    <example module="customInterpolationApp">
    <file name="index.html">
    <script>
      var customInterpolationApp = angular.module('customInterpolationApp', []);
    
      customInterpolationApp.config(function($interpolateProvider) {
        $interpolateProvider.startSymbol('//');
        $interpolateProvider.endSymbol('//');
      });
    
    
      customInterpolationApp.controller('DemoController', function() {
          this.label = "This binding is brought you by // interpolation symbols.";
      });
    </script>
    <div ng-app="App" ng-controller="DemoController as demo">
        //demo.label//
    </div>
    </file>
    <file name="protractor.js" type="protractor">
      it('should interpolate binding with custom symbols', function() {
        expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
      });
    </file>
    </example>
     */
    function $InterpolateProvider() {
        var startSymbol = '{{';
        var endSymbol = '}}';
        /**
         * @ngdoc method
         * @name $interpolateProvider#startSymbol
         * @description
         * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
         *
         * @param {string=} value new value to set the starting symbol to.
         * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
         */
        this.startSymbol = function (value) {
            if (value) {
                startSymbol = value;
                return this;
            }
            else {
                return startSymbol;
            }
        };
        /**
         * @ngdoc method
         * @name $interpolateProvider#endSymbol
         * @description
         * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
         *
         * @param {string=} value new value to set the ending symbol to.
         * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
         */
        this.endSymbol = function (value) {
            if (value) {
                endSymbol = value;
                return this;
            }
            else {
                return endSymbol;
            }
        };
        this.$get = ['$parse', '$exceptionHandler', '$sce', function ($parse, $exceptionHandler, $sce) {
                var startSymbolLength = startSymbol.length, endSymbolLength = endSymbol.length, escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'), escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');
                function escape(ch) {
                    return '\\\\\\' + ch;
                }
                /**
                 * @ngdoc service
                 * @name $interpolate
                 * @kind function
                 *
                 * @requires $parse
                 * @requires $sce
                 *
                 * @description
                 *
                 * Compiles a string with markup into an interpolation function. This service is used by the
                 * HTML {@link ng.$compile $compile} service for data binding. See
                 * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
                 * interpolation markup.
                 *
                 *
                 * ```js
                 *   var $interpolate = ...; // injected
                 *   var exp = $interpolate('Hello {{name | uppercase}}!');
                 *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');
                 * ```
                 *
                 * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
                 * `true`, the interpolation function will return `undefined` unless all embedded expressions
                 * evaluate to a value other than `undefined`.
                 *
                 * ```js
                 *   var $interpolate = ...; // injected
                 *   var context = {greeting: 'Hello', name: undefined };
                 *
                 *   // default "forgiving" mode
                 *   var exp = $interpolate('{{greeting}} {{name}}!');
                 *   expect(exp(context)).toEqual('Hello !');
                 *
                 *   // "allOrNothing" mode
                 *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
                 *   expect(exp(context)).toBeUndefined();
                 *   context.name = 'Angular';
                 *   expect(exp(context)).toEqual('Hello Angular!');
                 * ```
                 *
                 * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
                 *
                 * ####Escaped Interpolation
                 * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
                 * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
                 * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
                 * or binding.
                 *
                 * This enables web-servers to prevent script injection attacks and defacing attacks, to some
                 * degree, while also enabling code examples to work without relying on the
                 * {@link ng.directive:ngNonBindable ngNonBindable} directive.
                 *
                 * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
                 * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
                 * interpolation start/end markers with their escaped counterparts.**
                 *
                 * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
                 * output when the $interpolate service processes the text. So, for HTML elements interpolated
                 * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
                 * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
                 * this is typically useful only when user-data is used in rendering a template from the server, or
                 * when otherwise untrusted data is used by a directive.
                 *
                 * <example>
                 *  <file name="index.html">
                 *    <div ng-init="username='A user'">
                 *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
                 *        </p>
                 *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
                 *        application, but fails to accomplish their task, because the server has correctly
                 *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
                 *        characters.</p>
                 *      <p>Instead, the result of the attempted script injection is visible, and can be removed
                 *        from the database by an administrator.</p>
                 *    </div>
                 *  </file>
                 * </example>
                 *
                 * @param {string} text The text with markup to interpolate.
                 * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
                 *    embedded expression in order to return an interpolation function. Strings with no
                 *    embedded expression will return null for the interpolation function.
                 * @param {string=} trustedContext when provided, the returned function passes the interpolated
                 *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
                 *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
                 *    provides Strict Contextual Escaping for details.
                 * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
                 *    unless all embedded expressions evaluate to a value other than `undefined`.
                 * @returns {function(context)} an interpolation function which is used to compute the
                 *    interpolated string. The function has these parameters:
                 *
                 * - `context`: evaluation context for all expressions embedded in the interpolated text
                 */
                function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
                    allOrNothing = !!allOrNothing;
                    var startIndex, endIndex, index = 0, expressions = [], parseFns = [], textLength = text.length, exp, concat = [], expressionPositions = [];
                    while (index < textLength) {
                        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&
                            ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {
                            if (index !== startIndex) {
                                concat.push(unescapeText(text.substring(index, startIndex)));
                            }
                            exp = text.substring(startIndex + startSymbolLength, endIndex);
                            expressions.push(exp);
                            parseFns.push($parse(exp, parseStringifyInterceptor));
                            index = endIndex + endSymbolLength;
                            expressionPositions.push(concat.length);
                            concat.push('');
                        }
                        else {
                            // we did not find an interpolation, so we have to add the remainder to the separators array
                            if (index !== textLength) {
                                concat.push(unescapeText(text.substring(index)));
                            }
                            break;
                        }
                    }
                    // Concatenating expressions makes it hard to reason about whether some combination of
                    // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
                    // single expression be used for iframe[src], object[src], etc., we ensure that the value
                    // that's used is assigned or constructed by some JS code somewhere that is more testable or
                    // make it obvious that you bound the value to some user controlled value.  This helps reduce
                    // the load when auditing for XSS issues.
                    if (trustedContext && concat.length > 1) {
                        throw $interpolateMinErr('noconcat', "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
                            "interpolations that concatenate multiple expressions when a trusted value is " +
                            "required.  See http://docs.angularjs.org/api/ng.$sce", text);
                    }
                    if (!mustHaveExpression || expressions.length) {
                        var compute = function (values) {
                            for (var i = 0, ii = expressions.length; i < ii; i++) {
                                if (allOrNothing && isUndefined(values[i]))
                                    return;
                                concat[expressionPositions[i]] = values[i];
                            }
                            return concat.join('');
                        };
                        var getValue = function (value) {
                            return trustedContext ?
                                $sce.getTrusted(trustedContext, value) :
                                $sce.valueOf(value);
                        };
                        var stringify = function (value) {
                            if (value == null) {
                                return '';
                            }
                            switch (typeof value) {
                                case 'string':
                                    break;
                                case 'number':
                                    value = '' + value;
                                    break;
                                default:
                                    value = toJson(value);
                            }
                            return value;
                        };
                        return extend(function interpolationFn(context) {
                            var i = 0;
                            var ii = expressions.length;
                            var values = new Array(ii);
                            try {
                                for (; i < ii; i++) {
                                    values[i] = parseFns[i](context);
                                }
                                return compute(values);
                            }
                            catch (err) {
                                var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());
                                $exceptionHandler(newErr);
                            }
                        }, {
                            // all of these properties are undocumented for now
                            exp: text,
                            expressions: expressions,
                            $$watchDelegate: function (scope, listener, objectEquality) {
                                var lastValue;
                                return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
                                    var currValue = compute(values);
                                    if (isFunction(listener)) {
                                        listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
                                    }
                                    lastValue = currValue;
                                }, objectEquality);
                            }
                        });
                    }
                    function unescapeText(text) {
                        return text.replace(escapedStartRegexp, startSymbol).
                            replace(escapedEndRegexp, endSymbol);
                    }
                    function parseStringifyInterceptor(value) {
                        try {
                            value = getValue(value);
                            return allOrNothing && !isDefined(value) ? value : stringify(value);
                        }
                        catch (err) {
                            var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());
                            $exceptionHandler(newErr);
                        }
                    }
                }
                /**
                 * @ngdoc method
                 * @name $interpolate#startSymbol
                 * @description
                 * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
                 *
                 * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
                 * the symbol.
                 *
                 * @returns {string} start symbol.
                 */
                $interpolate.startSymbol = function () {
                    return startSymbol;
                };
                /**
                 * @ngdoc method
                 * @name $interpolate#endSymbol
                 * @description
                 * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
                 *
                 * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
                 * the symbol.
                 *
                 * @returns {string} end symbol.
                 */
                $interpolate.endSymbol = function () {
                    return endSymbol;
                };
                return $interpolate;
            }];
    }
    function $IntervalProvider() {
        this.$get = ['$rootScope', '$window', '$q', '$$q',
            function ($rootScope, $window, $q, $$q) {
                var intervals = {};
                /**
                 * @ngdoc service
                 * @name $interval
                 *
                 * @description
                 * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
                 * milliseconds.
                 *
                 * The return value of registering an interval function is a promise. This promise will be
                 * notified upon each tick of the interval, and will be resolved after `count` iterations, or
                 * run indefinitely if `count` is not defined. The value of the notification will be the
                 * number of iterations that have run.
                 * To cancel an interval, call `$interval.cancel(promise)`.
                 *
                 * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
                 * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
                 * time.
                 *
                 * <div class="alert alert-warning">
                 * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
                 * with them.  In particular they are not automatically destroyed when a controller's scope or a
                 * directive's element are destroyed.
                 * You should take this into consideration and make sure to always cancel the interval at the
                 * appropriate moment.  See the example below for more details on how and when to do this.
                 * </div>
                 *
                 * @param {function()} fn A function that should be called repeatedly.
                 * @param {number} delay Number of milliseconds between each function call.
                 * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
                 *   indefinitely.
                 * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
                 *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
                 * @returns {promise} A promise which will be notified on each iteration.
                 *
                 * @example
                 * <example module="intervalExample">
                 * <file name="index.html">
                 *   <script>
                 *     angular.module('intervalExample', [])
                 *       .controller('ExampleController', ['$scope', '$interval',
                 *         function($scope, $interval) {
                 *           $scope.format = 'M/d/yy h:mm:ss a';
                 *           $scope.blood_1 = 100;
                 *           $scope.blood_2 = 120;
                 *
                 *           var stop;
                 *           $scope.fight = function() {
                 *             // Don't start a new fight if we are already fighting
                 *             if ( angular.isDefined(stop) ) return;
                 *
                 *           stop = $interval(function() {
                 *             if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
                 *               $scope.blood_1 = $scope.blood_1 - 3;
                 *               $scope.blood_2 = $scope.blood_2 - 4;
                 *             } else {
                 *               $scope.stopFight();
                 *             }
                 *           }, 100);
                 *         };
                 *
                 *         $scope.stopFight = function() {
                 *           if (angular.isDefined(stop)) {
                 *             $interval.cancel(stop);
                 *             stop = undefined;
                 *           }
                 *         };
                 *
                 *         $scope.resetFight = function() {
                 *           $scope.blood_1 = 100;
                 *           $scope.blood_2 = 120;
                 *         };
                 *
                 *         $scope.$on('$destroy', function() {
                 *           // Make sure that the interval is destroyed too
                 *           $scope.stopFight();
                 *         });
                 *       }])
                 *       // Register the 'myCurrentTime' directive factory method.
                 *       // We inject $interval and dateFilter service since the factory method is DI.
                 *       .directive('myCurrentTime', ['$interval', 'dateFilter',
                 *         function($interval, dateFilter) {
                 *           // return the directive link function. (compile function not needed)
                 *           return function(scope, element, attrs) {
                 *             var format,  // date format
                 *                 stopTime; // so that we can cancel the time updates
                 *
                 *             // used to update the UI
                 *             function updateTime() {
                 *               element.text(dateFilter(new Date(), format));
                 *             }
                 *
                 *             // watch the expression, and update the UI on change.
                 *             scope.$watch(attrs.myCurrentTime, function(value) {
                 *               format = value;
                 *               updateTime();
                 *             });
                 *
                 *             stopTime = $interval(updateTime, 1000);
                 *
                 *             // listen on DOM destroy (removal) event, and cancel the next UI update
                 *             // to prevent updating time after the DOM element was removed.
                 *             element.on('$destroy', function() {
                 *               $interval.cancel(stopTime);
                 *             });
                 *           }
                 *         }]);
                 *   </script>
                 *
                 *   <div>
                 *     <div ng-controller="ExampleController">
                 *       Date format: <input ng-model="format"> <hr/>
                 *       Current time is: <span my-current-time="format"></span>
                 *       <hr/>
                 *       Blood 1 : <font color='red'>{{blood_1}}</font>
                 *       Blood 2 : <font color='red'>{{blood_2}}</font>
                 *       <button type="button" data-ng-click="fight()">Fight</button>
                 *       <button type="button" data-ng-click="stopFight()">StopFight</button>
                 *       <button type="button" data-ng-click="resetFight()">resetFight</button>
                 *     </div>
                 *   </div>
                 *
                 * </file>
                 * </example>
                 */
                function interval(fn, delay, count, invokeApply) {
                    var setInterval = $window.setInterval, clearInterval = $window.clearInterval, iteration = 0, skipApply = (isDefined(invokeApply) && !invokeApply), deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise;
                    count = isDefined(count) ? count : 0;
                    promise.then(null, null, fn);
                    promise.$$intervalId = setInterval(function tick() {
                        deferred.notify(iteration++);
                        if (count > 0 && iteration >= count) {
                            deferred.resolve(iteration);
                            clearInterval(promise.$$intervalId);
                            delete intervals[promise.$$intervalId];
                        }
                        if (!skipApply)
                            $rootScope.$apply();
                    }, delay);
                    intervals[promise.$$intervalId] = deferred;
                    return promise;
                }
                /**
                 * @ngdoc method
                 * @name $interval#cancel
                 *
                 * @description
                 * Cancels a task associated with the `promise`.
                 *
                 * @param {promise} promise returned by the `$interval` function.
                 * @returns {boolean} Returns `true` if the task was successfully canceled.
                 */
                interval.cancel = function (promise) {
                    if (promise && promise.$$intervalId in intervals) {
                        intervals[promise.$$intervalId].reject('canceled');
                        $window.clearInterval(promise.$$intervalId);
                        delete intervals[promise.$$intervalId];
                        return true;
                    }
                    return false;
                };
                return interval;
            }];
    }
    /**
     * @ngdoc service
     * @name $locale
     *
     * @description
     * $locale service provides localization rules for various Angular components. As of right now the
     * only public api is:
     *
     * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
     */
    function $LocaleProvider() {
        this.$get = function () {
            return {
                id: 'en-us',
                NUMBER_FORMATS: {
                    DECIMAL_SEP: '.',
                    GROUP_SEP: ',',
                    PATTERNS: [
                        {
                            minInt: 1,
                            minFrac: 0,
                            maxFrac: 3,
                            posPre: '',
                            posSuf: '',
                            negPre: '-',
                            negSuf: '',
                            gSize: 3,
                            lgSize: 3
                        }, {
                            minInt: 1,
                            minFrac: 2,
                            maxFrac: 2,
                            posPre: '\u00A4',
                            posSuf: '',
                            negPre: '(\u00A4',
                            negSuf: ')',
                            gSize: 3,
                            lgSize: 3
                        }
                    ],
                    CURRENCY_SYM: '$'
                },
                DATETIME_FORMATS: {
                    MONTH: 'January,February,March,April,May,June,July,August,September,October,November,December'
                        .split(','),
                    SHORTMONTH: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
                    DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
                    SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
                    AMPMS: ['AM', 'PM'],
                    medium: 'MMM d, y h:mm:ss a',
                    'short': 'M/d/yy h:mm a',
                    fullDate: 'EEEE, MMMM d, y',
                    longDate: 'MMMM d, y',
                    mediumDate: 'MMM d, y',
                    shortDate: 'M/d/yy',
                    mediumTime: 'h:mm:ss a',
                    shortTime: 'h:mm a'
                },
                pluralCat: function (num) {
                    if (num === 1) {
                        return 'one';
                    }
                    return 'other';
                }
            };
        };
    }
    var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/, DEFAULT_PORTS = { 'http': 80, 'https': 443, 'ftp': 21 };
    var $locationMinErr = minErr('$location');
    /**
     * Encode path using encodeUriSegment, ignoring forward slashes
     *
     * @param {string} path Path to encode
     * @returns {string}
     */
    function encodePath(path) {
        var segments = path.split('/'), i = segments.length;
        while (i--) {
            segments[i] = encodeUriSegment(segments[i]);
        }
        return segments.join('/');
    }
    function parseAbsoluteUrl(absoluteUrl, locationObj) {
        var parsedUrl = urlResolve(absoluteUrl);
        locationObj.$$protocol = parsedUrl.protocol;
        locationObj.$$host = parsedUrl.hostname;
        locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
    }
    function parseAppUrl(relativeUrl, locationObj) {
        var prefixed = (relativeUrl.charAt(0) !== '/');
        if (prefixed) {
            relativeUrl = '/' + relativeUrl;
        }
        var match = urlResolve(relativeUrl);
        locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
            match.pathname.substring(1) : match.pathname);
        locationObj.$$search = parseKeyValue(match.search);
        locationObj.$$hash = decodeURIComponent(match.hash);
        // make sure path starts with '/';
        if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
            locationObj.$$path = '/' + locationObj.$$path;
        }
    }
    /**
     *
     * @param {string} begin
     * @param {string} whole
     * @returns {string} returns text from whole after begin or undefined if it does not begin with
     *                   expected string.
     */
    function beginsWith(begin, whole) {
        if (whole.indexOf(begin) === 0) {
            return whole.substr(begin.length);
        }
    }
    function stripHash(url) {
        var index = url.indexOf('#');
        return index == -1 ? url : url.substr(0, index);
    }
    function stripFile(url) {
        return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
    }
    /* return the server only (scheme://host:port) */
    function serverBase(url) {
        return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
    }
    /**
     * LocationHtml5Url represents an url
     * This object is exposed as $location service when HTML5 mode is enabled and supported
     *
     * @constructor
     * @param {string} appBase application base URL
     * @param {string} basePrefix url path prefix
     */
    function LocationHtml5Url(appBase, basePrefix) {
        this.$$html5 = true;
        basePrefix = basePrefix || '';
        var appBaseNoFile = stripFile(appBase);
        parseAbsoluteUrl(appBase, this);
        /**
         * Parse given html5 (regular) url string into properties
         * @param {string} url HTML5 url
         * @private
         */
        this.$$parse = function (url) {
            var pathUrl = beginsWith(appBaseNoFile, url);
            if (!isString(pathUrl)) {
                throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url, appBaseNoFile);
            }
            parseAppUrl(pathUrl, this);
            if (!this.$$path) {
                this.$$path = '/';
            }
            this.$$compose();
        };
        /**
         * Compose url and update `absUrl` property
         * @private
         */
        this.$$compose = function () {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
            this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
            this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
        };
        this.$$parseLinkUrl = function (url, relHref) {
            if (relHref && relHref[0] === '#') {
                // special case for links to hash fragments:
                // keep the old url and only replace the hash fragment
                this.hash(relHref.slice(1));
                return true;
            }
            var appUrl, prevAppUrl;
            var rewrittenUrl;
            if ((appUrl = beginsWith(appBase, url)) !== undefined) {
                prevAppUrl = appUrl;
                if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {
                    rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
                }
                else {
                    rewrittenUrl = appBase + prevAppUrl;
                }
            }
            else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {
                rewrittenUrl = appBaseNoFile + appUrl;
            }
            else if (appBaseNoFile == url + '/') {
                rewrittenUrl = appBaseNoFile;
            }
            if (rewrittenUrl) {
                this.$$parse(rewrittenUrl);
            }
            return !!rewrittenUrl;
        };
    }
    /**
     * LocationHashbangUrl represents url
     * This object is exposed as $location service when developer doesn't opt into html5 mode.
     * It also serves as the base class for html5 mode fallback on legacy browsers.
     *
     * @constructor
     * @param {string} appBase application base URL
     * @param {string} hashPrefix hashbang prefix
     */
    function LocationHashbangUrl(appBase, hashPrefix) {
        var appBaseNoFile = stripFile(appBase);
        parseAbsoluteUrl(appBase, this);
        /**
         * Parse given hashbang url into properties
         * @param {string} url Hashbang url
         * @private
         */
        this.$$parse = function (url) {
            var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
            var withoutHashUrl = withoutBaseUrl.charAt(0) == '#'
                ? beginsWith(hashPrefix, withoutBaseUrl)
                : (this.$$html5)
                    ? withoutBaseUrl
                    : '';
            if (!isString(withoutHashUrl)) {
                throw $locationMinErr('ihshprfx', 'Invalid url "{0}", missing hash prefix "{1}".', url, hashPrefix);
            }
            parseAppUrl(withoutHashUrl, this);
            this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);
            this.$$compose();
            /*
             * In Windows, on an anchor node on documents loaded from
             * the filesystem, the browser will return a pathname
             * prefixed with the drive name ('/C:/path') when a
             * pathname without a drive is set:
             *  * a.setAttribute('href', '/foo')
             *   * a.pathname === '/C:/foo' //true
             *
             * Inside of Angular, we're always using pathnames that
             * do not include drive names for routing.
             */
            function removeWindowsDriveName(path, url, base) {
                /*
                Matches paths for file protocol on windows,
                such as /C:/foo/bar, and captures only /foo/bar.
                */
                var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;
                var firstPathSegmentMatch;
                //Get the relative path from the input URL.
                if (url.indexOf(base) === 0) {
                    url = url.replace(base, '');
                }
                // The input URL intentionally contains a first path segment that ends with a colon.
                if (windowsFilePathExp.exec(url)) {
                    return path;
                }
                firstPathSegmentMatch = windowsFilePathExp.exec(path);
                return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
            }
        };
        /**
         * Compose hashbang url and update `absUrl` property
         * @private
         */
        this.$$compose = function () {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
            this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
            this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
        };
        this.$$parseLinkUrl = function (url, relHref) {
            if (stripHash(appBase) == stripHash(url)) {
                this.$$parse(url);
                return true;
            }
            return false;
        };
    }
    /**
     * LocationHashbangUrl represents url
     * This object is exposed as $location service when html5 history api is enabled but the browser
     * does not support it.
     *
     * @constructor
     * @param {string} appBase application base URL
     * @param {string} hashPrefix hashbang prefix
     */
    function LocationHashbangInHtml5Url(appBase, hashPrefix) {
        this.$$html5 = true;
        LocationHashbangUrl.apply(this, arguments);
        var appBaseNoFile = stripFile(appBase);
        this.$$parseLinkUrl = function (url, relHref) {
            if (relHref && relHref[0] === '#') {
                // special case for links to hash fragments:
                // keep the old url and only replace the hash fragment
                this.hash(relHref.slice(1));
                return true;
            }
            var rewrittenUrl;
            var appUrl;
            if (appBase == stripHash(url)) {
                rewrittenUrl = url;
            }
            else if ((appUrl = beginsWith(appBaseNoFile, url))) {
                rewrittenUrl = appBase + hashPrefix + appUrl;
            }
            else if (appBaseNoFile === url + '/') {
                rewrittenUrl = appBaseNoFile;
            }
            if (rewrittenUrl) {
                this.$$parse(rewrittenUrl);
            }
            return !!rewrittenUrl;
        };
        this.$$compose = function () {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
            this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
            // include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'
            this.$$absUrl = appBase + hashPrefix + this.$$url;
        };
    }
    var locationPrototype = {
        /**
         * Are we in html5 mode?
         * @private
         */
        $$html5: false,
        /**
         * Has any change been replacing?
         * @private
         */
        $$replace: false,
        /**
         * @ngdoc method
         * @name $location#absUrl
         *
         * @description
         * This method is getter only.
         *
         * Return full url representation with all segments encoded according to rules specified in
         * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var absUrl = $location.absUrl();
         * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
         * ```
         *
         * @return {string} full url
         */
        absUrl: locationGetter('$$absUrl'),
        /**
         * @ngdoc method
         * @name $location#url
         *
         * @description
         * This method is getter / setter.
         *
         * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
         *
         * Change path, search and hash, when called with parameter and return `$location`.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var url = $location.url();
         * // => "/some/path?foo=bar&baz=xoxo"
         * ```
         *
         * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
         * @return {string} url
         */
        url: function (url) {
            if (isUndefined(url))
                return this.$$url;
            var match = PATH_MATCH.exec(url);
            if (match[1] || url === '')
                this.path(decodeURIComponent(match[1]));
            if (match[2] || match[1] || url === '')
                this.search(match[3] || '');
            this.hash(match[5] || '');
            return this;
        },
        /**
         * @ngdoc method
         * @name $location#protocol
         *
         * @description
         * This method is getter only.
         *
         * Return protocol of current url.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var protocol = $location.protocol();
         * // => "http"
         * ```
         *
         * @return {string} protocol of current url
         */
        protocol: locationGetter('$$protocol'),
        /**
         * @ngdoc method
         * @name $location#host
         *
         * @description
         * This method is getter only.
         *
         * Return host of current url.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var host = $location.host();
         * // => "example.com"
         * ```
         *
         * @return {string} host of current url.
         */
        host: locationGetter('$$host'),
        /**
         * @ngdoc method
         * @name $location#port
         *
         * @description
         * This method is getter only.
         *
         * Return port of current url.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var port = $location.port();
         * // => 80
         * ```
         *
         * @return {Number} port
         */
        port: locationGetter('$$port'),
        /**
         * @ngdoc method
         * @name $location#path
         *
         * @description
         * This method is getter / setter.
         *
         * Return path of current url when called without any parameter.
         *
         * Change path when called with parameter and return `$location`.
         *
         * Note: Path should always begin with forward slash (/), this method will add the forward slash
         * if it is missing.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var path = $location.path();
         * // => "/some/path"
         * ```
         *
         * @param {(string|number)=} path New path
         * @return {string} path
         */
        path: locationGetterSetter('$$path', function (path) {
            path = path !== null ? path.toString() : '';
            return path.charAt(0) == '/' ? path : '/' + path;
        }),
        /**
         * @ngdoc method
         * @name $location#search
         *
         * @description
         * This method is getter / setter.
         *
         * Return search part (as object) of current url when called without any parameter.
         *
         * Change search part when called with parameter and return `$location`.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var searchObject = $location.search();
         * // => {foo: 'bar', baz: 'xoxo'}
         *
         * // set foo to 'yipee'
         * $location.search('foo', 'yipee');
         * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
         * ```
         *
         * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
         * hash object.
         *
         * When called with a single argument the method acts as a setter, setting the `search` component
         * of `$location` to the specified value.
         *
         * If the argument is a hash object containing an array of values, these values will be encoded
         * as duplicate search parameters in the url.
         *
         * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
         * will override only a single search property.
         *
         * If `paramValue` is an array, it will override the property of the `search` component of
         * `$location` specified via the first argument.
         *
         * If `paramValue` is `null`, the property specified via the first argument will be deleted.
         *
         * If `paramValue` is `true`, the property specified via the first argument will be added with no
         * value nor trailing equal sign.
         *
         * @return {Object} If called with no arguments returns the parsed `search` object. If called with
         * one or more arguments returns `$location` object itself.
         */
        search: function (search, paramValue) {
            switch (arguments.length) {
                case 0:
                    return this.$$search;
                case 1:
                    if (isString(search) || isNumber(search)) {
                        search = search.toString();
                        this.$$search = parseKeyValue(search);
                    }
                    else if (isObject(search)) {
                        search = copy(search, {});
                        // remove object undefined or null properties
                        forEach(search, function (value, key) {
                            if (value == null)
                                delete search[key];
                        });
                        this.$$search = search;
                    }
                    else {
                        throw $locationMinErr('isrcharg', 'The first argument of the `$location#search()` call must be a string or an object.');
                    }
                    break;
                default:
                    if (isUndefined(paramValue) || paramValue === null) {
                        delete this.$$search[search];
                    }
                    else {
                        this.$$search[search] = paramValue;
                    }
            }
            this.$$compose();
            return this;
        },
        /**
         * @ngdoc method
         * @name $location#hash
         *
         * @description
         * This method is getter / setter.
         *
         * Return hash fragment when called without any parameter.
         *
         * Change hash fragment when called with parameter and return `$location`.
         *
         *
         * ```js
         * // given url http://example.com/some/path?foo=bar&baz=xoxo#hashValue
         * var hash = $location.hash();
         * // => "hashValue"
         * ```
         *
         * @param {(string|number)=} hash New hash fragment
         * @return {string} hash
         */
        hash: locationGetterSetter('$$hash', function (hash) {
            return hash !== null ? hash.toString() : '';
        }),
        /**
         * @ngdoc method
         * @name $location#replace
         *
         * @description
         * If called, all changes to $location during current `$digest` will be replacing current history
         * record, instead of adding new one.
         */
        replace: function () {
            this.$$replace = true;
            return this;
        }
    };
    forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function (Location) {
        Location.prototype = Object.create(locationPrototype);
        /**
         * @ngdoc method
         * @name $location#state
         *
         * @description
         * This method is getter / setter.
         *
         * Return the history state object when called without any parameter.
         *
         * Change the history state object when called with one parameter and return `$location`.
         * The state object is later passed to `pushState` or `replaceState`.
         *
         * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
         * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
         * older browsers (like IE9 or Android < 4.0), don't use this method.
         *
         * @param {object=} state State object for pushState or replaceState
         * @return {object} state
         */
        Location.prototype.state = function (state) {
            if (!arguments.length)
                return this.$$state;
            if (Location !== LocationHtml5Url || !this.$$html5) {
                throw $locationMinErr('nostate', 'History API state support is available only ' +
                    'in HTML5 mode and only in browsers supporting HTML5 History API');
            }
            // The user might modify `stateObject` after invoking `$location.state(stateObject)`
            // but we're changing the $$state reference to $browser.state() during the $digest
            // so the modification window is narrow.
            this.$$state = isUndefined(state) ? null : state;
            return this;
        };
    });
    function locationGetter(property) {
        return function () {
            return this[property];
        };
    }
    function locationGetterSetter(property, preprocess) {
        return function (value) {
            if (isUndefined(value))
                return this[property];
            this[property] = preprocess(value);
            this.$$compose();
            return this;
        };
    }
    /**
     * @ngdoc service
     * @name $location
     *
     * @requires $rootElement
     *
     * @description
     * The $location service parses the URL in the browser address bar (based on the
     * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
     * available to your application. Changes to the URL in the address bar are reflected into
     * $location service and changes to $location are reflected into the browser address bar.
     *
     * **The $location service:**
     *
     * - Exposes the current URL in the browser address bar, so you can
     *   - Watch and observe the URL.
     *   - Change the URL.
     * - Synchronizes the URL with the browser when the user
     *   - Changes the address bar.
     *   - Clicks the back or forward button (or clicks a History link).
     *   - Clicks on a link.
     * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
     *
     * For more information see {@link guide/$location Developer Guide: Using $location}
     */
    /**
     * @ngdoc provider
     * @name $locationProvider
     * @description
     * Use the `$locationProvider` to configure how the application deep linking paths are stored.
     */
    function $LocationProvider() {
        var hashPrefix = '', html5Mode = {
            enabled: false,
            requireBase: true,
            rewriteLinks: true
        };
        /**
         * @ngdoc method
         * @name $locationProvider#hashPrefix
         * @description
         * @param {string=} prefix Prefix for hash part (containing path and search)
         * @returns {*} current value if used as getter or itself (chaining) if used as setter
         */
        this.hashPrefix = function (prefix) {
            if (isDefined(prefix)) {
                hashPrefix = prefix;
                return this;
            }
            else {
                return hashPrefix;
            }
        };
        /**
         * @ngdoc method
         * @name $locationProvider#html5Mode
         * @description
         * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
         *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
         *   properties:
         *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
         *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
         *     support `pushState`.
         *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
         *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
         *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
         *     See the {@link guide/$location $location guide for more information}
         *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
         *     enables/disables url rewriting for relative links.
         *
         * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
         */
        this.html5Mode = function (mode) {
            if (isBoolean(mode)) {
                html5Mode.enabled = mode;
                return this;
            }
            else if (isObject(mode)) {
                if (isBoolean(mode.enabled)) {
                    html5Mode.enabled = mode.enabled;
                }
                if (isBoolean(mode.requireBase)) {
                    html5Mode.requireBase = mode.requireBase;
                }
                if (isBoolean(mode.rewriteLinks)) {
                    html5Mode.rewriteLinks = mode.rewriteLinks;
                }
                return this;
            }
            else {
                return html5Mode;
            }
        };
        /**
         * @ngdoc event
         * @name $location#$locationChangeStart
         * @eventType broadcast on root scope
         * @description
         * Broadcasted before a URL will change.
         *
         * This change can be prevented by calling
         * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
         * details about event object. Upon successful change
         * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
         *
         * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
         * the browser supports the HTML5 History API.
         *
         * @param {Object} angularEvent Synthetic event object.
         * @param {string} newUrl New URL
         * @param {string=} oldUrl URL that was before it was changed.
         * @param {string=} newState New history state object
         * @param {string=} oldState History state object that was before it was changed.
         */
        /**
         * @ngdoc event
         * @name $location#$locationChangeSuccess
         * @eventType broadcast on root scope
         * @description
         * Broadcasted after a URL was changed.
         *
         * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
         * the browser supports the HTML5 History API.
         *
         * @param {Object} angularEvent Synthetic event object.
         * @param {string} newUrl New URL
         * @param {string=} oldUrl URL that was before it was changed.
         * @param {string=} newState New history state object
         * @param {string=} oldState History state object that was before it was changed.
         */
        this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement',
            function ($rootScope, $browser, $sniffer, $rootElement) {
                var $location, LocationMode, baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
                initialUrl = $browser.url(), appBase;
                if (html5Mode.enabled) {
                    if (!baseHref && html5Mode.requireBase) {
                        throw $locationMinErr('nobase', "$location in HTML5 mode requires a <base> tag to be present!");
                    }
                    appBase = serverBase(initialUrl) + (baseHref || '/');
                    LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
                }
                else {
                    appBase = stripHash(initialUrl);
                    LocationMode = LocationHashbangUrl;
                }
                $location = new LocationMode(appBase, '#' + hashPrefix);
                $location.$$parseLinkUrl(initialUrl, initialUrl);
                $location.$$state = $browser.state();
                var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;
                function setBrowserUrlWithFallback(url, replace, state) {
                    var oldUrl = $location.url();
                    var oldState = $location.$$state;
                    try {
                        $browser.url(url, replace, state);
                        // Make sure $location.state() returns referentially identical (not just deeply equal)
                        // state object; this makes possible quick checking if the state changed in the digest
                        // loop. Checking deep equality would be too expensive.
                        $location.$$state = $browser.state();
                    }
                    catch (e) {
                        // Restore old values if pushState fails
                        $location.url(oldUrl);
                        $location.$$state = oldState;
                        throw e;
                    }
                }
                $rootElement.on('click', function (event) {
                    // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
                    // currently we open nice url link and redirect then
                    if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.which == 2)
                        return;
                    var elm = jqLite(event.target);
                    // traverse the DOM up to find first A tag
                    while (nodeName_(elm[0]) !== 'a') {
                        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
                        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0])
                            return;
                    }
                    var absHref = elm.prop('href');
                    // get the actual href attribute - see
                    // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
                    var relHref = elm.attr('href') || elm.attr('xlink:href');
                    if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
                        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
                        // an animation.
                        absHref = urlResolve(absHref.animVal).href;
                    }
                    // Ignore when url is started with javascript: or mailto:
                    if (IGNORE_URI_REGEXP.test(absHref))
                        return;
                    if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
                        if ($location.$$parseLinkUrl(absHref, relHref)) {
                            // We do a preventDefault for all urls that are part of the angular application,
                            // in html5mode and also without, so that we are able to abort navigation without
                            // getting double entries in the location history.
                            event.preventDefault();
                            // update location manually
                            if ($location.absUrl() != $browser.url()) {
                                $rootScope.$apply();
                                // hack to work around FF6 bug 684208 when scenario runner clicks on links
                                window.angular['ff-684208-preventDefault'] = true;
                            }
                        }
                    }
                });
                // rewrite hashbang url <> html5 url
                if ($location.absUrl() != initialUrl) {
                    $browser.url($location.absUrl(), true);
                }
                var initializing = true;
                // update $location when $browser url changes
                $browser.onUrlChange(function (newUrl, newState) {
                    $rootScope.$evalAsync(function () {
                        var oldUrl = $location.absUrl();
                        var oldState = $location.$$state;
                        var defaultPrevented;
                        $location.$$parse(newUrl);
                        $location.$$state = newState;
                        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl, newState, oldState).defaultPrevented;
                        // if the location was changed by a `$locationChangeStart` handler then stop
                        // processing this location change
                        if ($location.absUrl() !== newUrl)
                            return;
                        if (defaultPrevented) {
                            $location.$$parse(oldUrl);
                            $location.$$state = oldState;
                            setBrowserUrlWithFallback(oldUrl, false, oldState);
                        }
                        else {
                            initializing = false;
                            afterLocationChange(oldUrl, oldState);
                        }
                    });
                    if (!$rootScope.$$phase)
                        $rootScope.$digest();
                });
                // update browser
                $rootScope.$watch(function $locationWatch() {
                    var oldUrl = $browser.url();
                    var oldState = $browser.state();
                    var currentReplace = $location.$$replace;
                    var urlOrStateChanged = oldUrl !== $location.absUrl() ||
                        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);
                    if (initializing || urlOrStateChanged) {
                        initializing = false;
                        $rootScope.$evalAsync(function () {
                            var newUrl = $location.absUrl();
                            var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl, $location.$$state, oldState).defaultPrevented;
                            // if the location was changed by a `$locationChangeStart` handler then stop
                            // processing this location change
                            if ($location.absUrl() !== newUrl)
                                return;
                            if (defaultPrevented) {
                                $location.$$parse(oldUrl);
                                $location.$$state = oldState;
                            }
                            else {
                                if (urlOrStateChanged) {
                                    setBrowserUrlWithFallback(newUrl, currentReplace, oldState === $location.$$state ? null : $location.$$state);
                                }
                                afterLocationChange(oldUrl, oldState);
                            }
                        });
                    }
                    $location.$$replace = false;
                    // we don't need to return anything because $evalAsync will make the digest loop dirty when
                    // there is a change
                });
                return $location;
                function afterLocationChange(oldUrl, oldState) {
                    $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl, $location.$$state, oldState);
                }
            }];
    }
    /**
     * @ngdoc service
     * @name $log
     * @requires $window
     *
     * @description
     * Simple service for logging. Default implementation safely writes the message
     * into the browser's console (if present).
     *
     * The main purpose of this service is to simplify debugging and troubleshooting.
     *
     * The default is to log `debug` messages. You can use
     * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
     *
     * @example
       <example module="logExample">
         <file name="script.js">
           angular.module('logExample', [])
             .controller('LogController', ['$scope', '$log', function($scope, $log) {
               $scope.$log = $log;
               $scope.message = 'Hello World!';
             }]);
         </file>
         <file name="index.html">
           <div ng-controller="LogController">
             <p>Reload this page with open console, enter text and hit the log button...</p>
             Message:
             <input type="text" ng-model="message"/>
             <button ng-click="$log.log(message)">log</button>
             <button ng-click="$log.warn(message)">warn</button>
             <button ng-click="$log.info(message)">info</button>
             <button ng-click="$log.error(message)">error</button>
           </div>
         </file>
       </example>
     */
    /**
     * @ngdoc provider
     * @name $logProvider
     * @description
     * Use the `$logProvider` to configure how the application logs messages
     */
    function $LogProvider() {
        var debug = true, self = this;
        /**
         * @ngdoc method
         * @name $logProvider#debugEnabled
         * @description
         * @param {boolean=} flag enable or disable debug level messages
         * @returns {*} current value if used as getter or itself (chaining) if used as setter
         */
        this.debugEnabled = function (flag) {
            if (isDefined(flag)) {
                debug = flag;
                return this;
            }
            else {
                return debug;
            }
        };
        this.$get = ['$window', function ($window) {
                return {
                    /**
                     * @ngdoc method
                     * @name $log#log
                     *
                     * @description
                     * Write a log message
                     */
                    log: consoleLog('log'),
                    /**
                     * @ngdoc method
                     * @name $log#info
                     *
                     * @description
                     * Write an information message
                     */
                    info: consoleLog('info'),
                    /**
                     * @ngdoc method
                     * @name $log#warn
                     *
                     * @description
                     * Write a warning message
                     */
                    warn: consoleLog('warn'),
                    /**
                     * @ngdoc method
                     * @name $log#error
                     *
                     * @description
                     * Write an error message
                     */
                    error: consoleLog('error'),
                    /**
                     * @ngdoc method
                     * @name $log#debug
                     *
                     * @description
                     * Write a debug message
                     */
                    debug: (function () {
                        var fn = consoleLog('debug');
                        return function () {
                            if (debug) {
                                fn.apply(self, arguments);
                            }
                        };
                    }())
                };
                function formatError(arg) {
                    if (arg instanceof Error) {
                        if (arg.stack) {
                            arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
                                ? 'Error: ' + arg.message + '\n' + arg.stack
                                : arg.stack;
                        }
                        else if (arg.sourceURL) {
                            arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
                        }
                    }
                    return arg;
                }
                function consoleLog(type) {
                    var console = $window.console || {}, logFn = console[type] || console.log || noop, hasApply = false;
                    // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
                    // The reason behind this is that console.log has type "object" in IE8...
                    try {
                        hasApply = !!logFn.apply;
                    }
                    catch (e) { }
                    if (hasApply) {
                        return function () {
                            var args = [];
                            forEach(arguments, function (arg) {
                                args.push(formatError(arg));
                            });
                            return logFn.apply(console, args);
                        };
                    }
                    // we are IE which either doesn't have window.console => this is noop and we do nothing,
                    // or we are IE where console.log doesn't have apply so we log at least first 2 args
                    return function (arg1, arg2) {
                        logFn(arg1, arg2 == null ? '' : arg2);
                    };
                }
            }];
    }
    var $parseMinErr = minErr('$parse');
    // Sandboxing Angular Expressions
    // ------------------------------
    // Angular expressions are generally considered safe because these expressions only have direct
    // access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
    // obtaining a reference to native JS functions such as the Function constructor.
    //
    // As an example, consider the following Angular expression:
    //
    //   {}.toString.constructor('alert("evil JS code")')
    //
    // This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
    // against the expression language, but not to prevent exploits that were enabled by exposing
    // sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
    // practice and therefore we are not even trying to protect against interaction with an object
    // explicitly exposed in this way.
    //
    // In general, it is not possible to access a Window object from an angular expression unless a
    // window or some DOM object that has a reference to window is published onto a Scope.
    // Similarly we prevent invocations of function known to be dangerous, as well as assignments to
    // native objects.
    //
    // See https://docs.angularjs.org/guide/security
    function ensureSafeMemberName(name, fullExpression) {
        if (name === "__defineGetter__" || name === "__defineSetter__"
            || name === "__lookupGetter__" || name === "__lookupSetter__"
            || name === "__proto__") {
            throw $parseMinErr('isecfld', 'Attempting to access a disallowed field in Angular expressions! '
                + 'Expression: {0}', fullExpression);
        }
        return name;
    }
    function ensureSafeObject(obj, fullExpression) {
        // nifty check if obj is Function that is fast and works across iframes and other contexts
        if (obj) {
            if (obj.constructor === obj) {
                throw $parseMinErr('isecfn', 'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
            }
            else if (obj.window === obj) {
                throw $parseMinErr('isecwindow', 'Referencing the Window in Angular expressions is disallowed! Expression: {0}', fullExpression);
            }
            else if (obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
                throw $parseMinErr('isecdom', 'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}', fullExpression);
            }
            else if (obj === Object) {
                throw $parseMinErr('isecobj', 'Referencing Object in Angular expressions is disallowed! Expression: {0}', fullExpression);
            }
        }
        return obj;
    }
    var CALL = Function.prototype.call;
    var APPLY = Function.prototype.apply;
    var BIND = Function.prototype.bind;
    function ensureSafeFunction(obj, fullExpression) {
        if (obj) {
            if (obj.constructor === obj) {
                throw $parseMinErr('isecfn', 'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
            }
            else if (obj === CALL || obj === APPLY || obj === BIND) {
                throw $parseMinErr('isecff', 'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}', fullExpression);
            }
        }
    }
    //Keyword constants
    var CONSTANTS = createMap();
    forEach({
        'null': function () { return null; },
        'true': function () { return true; },
        'false': function () { return false; },
        'undefined': function () { }
    }, function (constantGetter, name) {
        constantGetter.constant = constantGetter.literal = constantGetter.sharedGetter = true;
        CONSTANTS[name] = constantGetter;
    });
    //Not quite a constant, but can be lex/parsed the same
    CONSTANTS['this'] = function (self) { return self; };
    CONSTANTS['this'].sharedGetter = true;
    //Operators - will be wrapped by binaryFn/unaryFn/assignment/filter
    var OPERATORS = extend(createMap(), {
        '+': function (self, locals, a, b) {
            a = a(self, locals);
            b = b(self, locals);
            if (isDefined(a)) {
                if (isDefined(b)) {
                    return a + b;
                }
                return a;
            }
            return isDefined(b) ? b : undefined;
        },
        '-': function (self, locals, a, b) {
            a = a(self, locals);
            b = b(self, locals);
            return (isDefined(a) ? a : 0) - (isDefined(b) ? b : 0);
        },
        '*': function (self, locals, a, b) { return a(self, locals) * b(self, locals); },
        '/': function (self, locals, a, b) { return a(self, locals) / b(self, locals); },
        '%': function (self, locals, a, b) { return a(self, locals) % b(self, locals); },
        '===': function (self, locals, a, b) { return a(self, locals) === b(self, locals); },
        '!==': function (self, locals, a, b) { return a(self, locals) !== b(self, locals); },
        '==': function (self, locals, a, b) { return a(self, locals) == b(self, locals); },
        '!=': function (self, locals, a, b) { return a(self, locals) != b(self, locals); },
        '<': function (self, locals, a, b) { return a(self, locals) < b(self, locals); },
        '>': function (self, locals, a, b) { return a(self, locals) > b(self, locals); },
        '<=': function (self, locals, a, b) { return a(self, locals) <= b(self, locals); },
        '>=': function (self, locals, a, b) { return a(self, locals) >= b(self, locals); },
        '&&': function (self, locals, a, b) { return a(self, locals) && b(self, locals); },
        '||': function (self, locals, a, b) { return a(self, locals) || b(self, locals); },
        '!': function (self, locals, a) { return !a(self, locals); },
        //Tokenized as operators but parsed as assignment/filters
        '=': true,
        '|': true
    });
    var ESCAPE = { "n": "\n", "f": "\f", "r": "\r", "t": "\t", "v": "\v", "'": "'", '"': '"' };
    /////////////////////////////////////////
    /**
     * @constructor
     */
    var Lexer = function (options) {
        this.options = options;
    };
    Lexer.prototype = {
        constructor: Lexer,
        lex: function (text) {
            this.text = text;
            this.index = 0;
            this.tokens = [];
            while (this.index < this.text.length) {
                var ch = this.text.charAt(this.index);
                if (ch === '"' || ch === "'") {
                    this.readString(ch);
                }
                else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
                    this.readNumber();
                }
                else if (this.isIdent(ch)) {
                    this.readIdent();
                }
                else if (this.is(ch, '(){}[].,;:?')) {
                    this.tokens.push({ index: this.index, text: ch });
                    this.index++;
                }
                else if (this.isWhitespace(ch)) {
                    this.index++;
                }
                else {
                    var ch2 = ch + this.peek();
                    var ch3 = ch2 + this.peek(2);
                    var op1 = OPERATORS[ch];
                    var op2 = OPERATORS[ch2];
                    var op3 = OPERATORS[ch3];
                    if (op1 || op2 || op3) {
                        var token = op3 ? ch3 : (op2 ? ch2 : ch);
                        this.tokens.push({ index: this.index, text: token, operator: true });
                        this.index += token.length;
                    }
                    else {
                        this.throwError('Unexpected next character ', this.index, this.index + 1);
                    }
                }
            }
            return this.tokens;
        },
        is: function (ch, chars) {
            return chars.indexOf(ch) !== -1;
        },
        peek: function (i) {
            var num = i || 1;
            return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
        },
        isNumber: function (ch) {
            return ('0' <= ch && ch <= '9') && typeof ch === "string";
        },
        isWhitespace: function (ch) {
            // IE treats non-breaking space as \u00A0
            return (ch === ' ' || ch === '\r' || ch === '\t' ||
                ch === '\n' || ch === '\v' || ch === '\u00A0');
        },
        isIdent: function (ch) {
            return ('a' <= ch && ch <= 'z' ||
                'A' <= ch && ch <= 'Z' ||
                '_' === ch || ch === '$');
        },
        isExpOperator: function (ch) {
            return (ch === '-' || ch === '+' || this.isNumber(ch));
        },
        throwError: function (error, start, end) {
            end = end || this.index;
            var colStr = (isDefined(start)
                ? 's ' + start + '-' + this.index + ' [' + this.text.substring(start, end) + ']'
                : ' ' + end);
            throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].', error, colStr, this.text);
        },
        readNumber: function () {
            var number = '';
            var start = this.index;
            while (this.index < this.text.length) {
                var ch = lowercase(this.text.charAt(this.index));
                if (ch == '.' || this.isNumber(ch)) {
                    number += ch;
                }
                else {
                    var peekCh = this.peek();
                    if (ch == 'e' && this.isExpOperator(peekCh)) {
                        number += ch;
                    }
                    else if (this.isExpOperator(ch) &&
                        peekCh && this.isNumber(peekCh) &&
                        number.charAt(number.length - 1) == 'e') {
                        number += ch;
                    }
                    else if (this.isExpOperator(ch) &&
                        (!peekCh || !this.isNumber(peekCh)) &&
                        number.charAt(number.length - 1) == 'e') {
                        this.throwError('Invalid exponent');
                    }
                    else {
                        break;
                    }
                }
                this.index++;
            }
            this.tokens.push({
                index: start,
                text: number,
                constant: true,
                value: Number(number)
            });
        },
        readIdent: function () {
            var start = this.index;
            while (this.index < this.text.length) {
                var ch = this.text.charAt(this.index);
                if (!(this.isIdent(ch) || this.isNumber(ch))) {
                    break;
                }
                this.index++;
            }
            this.tokens.push({
                index: start,
                text: this.text.slice(start, this.index),
                identifier: true
            });
        },
        readString: function (quote) {
            var start = this.index;
            this.index++;
            var string = '';
            var rawString = quote;
            var escape = false;
            while (this.index < this.text.length) {
                var ch = this.text.charAt(this.index);
                rawString += ch;
                if (escape) {
                    if (ch === 'u') {
                        var hex = this.text.substring(this.index + 1, this.index + 5);
                        if (!hex.match(/[\da-f]{4}/i))
                            this.throwError('Invalid unicode escape [\\u' + hex + ']');
                        this.index += 4;
                        string += String.fromCharCode(parseInt(hex, 16));
                    }
                    else {
                        var rep = ESCAPE[ch];
                        string = string + (rep || ch);
                    }
                    escape = false;
                }
                else if (ch === '\\') {
                    escape = true;
                }
                else if (ch === quote) {
                    this.index++;
                    this.tokens.push({
                        index: start,
                        text: rawString,
                        constant: true,
                        value: string
                    });
                    return;
                }
                else {
                    string += ch;
                }
                this.index++;
            }
            this.throwError('Unterminated quote', start);
        }
    };
    function isConstant(exp) {
        return exp.constant;
    }
    /**
     * @constructor
     */
    var Parser = function (lexer, $filter, options) {
        this.lexer = lexer;
        this.$filter = $filter;
        this.options = options;
    };
    Parser.ZERO = extend(function () {
        return 0;
    }, {
        sharedGetter: true,
        constant: true
    });
    Parser.prototype = {
        constructor: Parser,
        parse: function (text) {
            this.text = text;
            this.tokens = this.lexer.lex(text);
            var value = this.statements();
            if (this.tokens.length !== 0) {
                this.throwError('is an unexpected token', this.tokens[0]);
            }
            value.literal = !!value.literal;
            value.constant = !!value.constant;
            return value;
        },
        primary: function () {
            var primary;
            if (this.expect('(')) {
                primary = this.filterChain();
                this.consume(')');
            }
            else if (this.expect('[')) {
                primary = this.arrayDeclaration();
            }
            else if (this.expect('{')) {
                primary = this.object();
            }
            else if (this.peek().identifier) {
                primary = this.identifier();
            }
            else if (this.peek().constant) {
                primary = this.constant();
            }
            else {
                this.throwError('not a primary expression', this.peek());
            }
            var next, context;
            while ((next = this.expect('(', '[', '.'))) {
                if (next.text === '(') {
                    primary = this.functionCall(primary, context);
                    context = null;
                }
                else if (next.text === '[') {
                    context = primary;
                    primary = this.objectIndex(primary);
                }
                else if (next.text === '.') {
                    context = primary;
                    primary = this.fieldAccess(primary);
                }
                else {
                    this.throwError('IMPOSSIBLE');
                }
            }
            return primary;
        },
        throwError: function (msg, token) {
            throw $parseMinErr('syntax', 'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].', token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
        },
        peekToken: function () {
            if (this.tokens.length === 0)
                throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
            return this.tokens[0];
        },
        peek: function (e1, e2, e3, e4) {
            return this.peekAhead(0, e1, e2, e3, e4);
        },
        peekAhead: function (i, e1, e2, e3, e4) {
            if (this.tokens.length > i) {
                var token = this.tokens[i];
                var t = token.text;
                if (t === e1 || t === e2 || t === e3 || t === e4 ||
                    (!e1 && !e2 && !e3 && !e4)) {
                    return token;
                }
            }
            return false;
        },
        expect: function (e1, e2, e3, e4) {
            var token = this.peek(e1, e2, e3, e4);
            if (token) {
                this.tokens.shift();
                return token;
            }
            return false;
        },
        consume: function (e1) {
            if (this.tokens.length === 0) {
                throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
            }
            var token = this.expect(e1);
            if (!token) {
                this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
            }
            return token;
        },
        unaryFn: function (op, right) {
            var fn = OPERATORS[op];
            return extend(function $parseUnaryFn(self, locals) {
                return fn(self, locals, right);
            }, {
                constant: right.constant,
                inputs: [right]
            });
        },
        binaryFn: function (left, op, right, isBranching) {
            var fn = OPERATORS[op];
            return extend(function $parseBinaryFn(self, locals) {
                return fn(self, locals, left, right);
            }, {
                constant: left.constant && right.constant,
                inputs: !isBranching && [left, right]
            });
        },
        identifier: function () {
            var id = this.consume().text;
            //Continue reading each `.identifier` unless it is a method invocation
            while (this.peek('.') && this.peekAhead(1).identifier && !this.peekAhead(2, '(')) {
                id += this.consume().text + this.consume().text;
            }
            return CONSTANTS[id] || getterFn(id, this.options, this.text);
        },
        constant: function () {
            var value = this.consume().value;
            return extend(function $parseConstant() {
                return value;
            }, {
                constant: true,
                literal: true
            });
        },
        statements: function () {
            var statements = [];
            while (true) {
                if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
                    statements.push(this.filterChain());
                if (!this.expect(';')) {
                    // optimize for the common case where there is only one statement.
                    // TODO(size): maybe we should not support multiple statements?
                    return (statements.length === 1)
                        ? statements[0]
                        : function $parseStatements(self, locals) {
                            var value;
                            for (var i = 0, ii = statements.length; i < ii; i++) {
                                value = statements[i](self, locals);
                            }
                            return value;
                        };
                }
            }
        },
        filterChain: function () {
            var left = this.expression();
            var token;
            while ((token = this.expect('|'))) {
                left = this.filter(left);
            }
            return left;
        },
        filter: function (inputFn) {
            var fn = this.$filter(this.consume().text);
            var argsFn;
            var args;
            if (this.peek(':')) {
                argsFn = [];
                args = []; // we can safely reuse the array
                while (this.expect(':')) {
                    argsFn.push(this.expression());
                }
            }
            var inputs = [inputFn].concat(argsFn || []);
            return extend(function $parseFilter(self, locals) {
                var input = inputFn(self, locals);
                if (args) {
                    args[0] = input;
                    var i = argsFn.length;
                    while (i--) {
                        args[i + 1] = argsFn[i](self, locals);
                    }
                    return fn.apply(undefined, args);
                }
                return fn(input);
            }, {
                constant: !fn.$stateful && inputs.every(isConstant),
                inputs: !fn.$stateful && inputs
            });
        },
        expression: function () {
            return this.assignment();
        },
        assignment: function () {
            var left = this.ternary();
            var right;
            var token;
            if ((token = this.expect('='))) {
                if (!left.assign) {
                    this.throwError('implies assignment but [' +
                        this.text.substring(0, token.index) + '] can not be assigned to', token);
                }
                right = this.ternary();
                return extend(function $parseAssignment(scope, locals) {
                    return left.assign(scope, right(scope, locals), locals);
                }, {
                    inputs: [left, right]
                });
            }
            return left;
        },
        ternary: function () {
            var left = this.logicalOR();
            var middle;
            var token;
            if ((token = this.expect('?'))) {
                middle = this.assignment();
                if (this.consume(':')) {
                    var right = this.assignment();
                    return extend(function $parseTernary(self, locals) {
                        return left(self, locals) ? middle(self, locals) : right(self, locals);
                    }, {
                        constant: left.constant && middle.constant && right.constant
                    });
                }
            }
            return left;
        },
        logicalOR: function () {
            var left = this.logicalAND();
            var token;
            while ((token = this.expect('||'))) {
                left = this.binaryFn(left, token.text, this.logicalAND(), true);
            }
            return left;
        },
        logicalAND: function () {
            var left = this.equality();
            var token;
            if ((token = this.expect('&&'))) {
                left = this.binaryFn(left, token.text, this.logicalAND(), true);
            }
            return left;
        },
        equality: function () {
            var left = this.relational();
            var token;
            if ((token = this.expect('==', '!=', '===', '!=='))) {
                left = this.binaryFn(left, token.text, this.equality());
            }
            return left;
        },
        relational: function () {
            var left = this.additive();
            var token;
            if ((token = this.expect('<', '>', '<=', '>='))) {
                left = this.binaryFn(left, token.text, this.relational());
            }
            return left;
        },
        additive: function () {
            var left = this.multiplicative();
            var token;
            while ((token = this.expect('+', '-'))) {
                left = this.binaryFn(left, token.text, this.multiplicative());
            }
            return left;
        },
        multiplicative: function () {
            var left = this.unary();
            var token;
            while ((token = this.expect('*', '/', '%'))) {
                left = this.binaryFn(left, token.text, this.unary());
            }
            return left;
        },
        unary: function () {
            var token;
            if (this.expect('+')) {
                return this.primary();
            }
            else if ((token = this.expect('-'))) {
                return this.binaryFn(Parser.ZERO, token.text, this.unary());
            }
            else if ((token = this.expect('!'))) {
                return this.unaryFn(token.text, this.unary());
            }
            else {
                return this.primary();
            }
        },
        fieldAccess: function (object) {
            var expression = this.text;
            var field = this.consume().text;
            var getter = getterFn(field, this.options, expression);
            return extend(function $parseFieldAccess(scope, locals, self) {
                return getter(self || object(scope, locals));
            }, {
                assign: function (scope, value, locals) {
                    var o = object(scope, locals);
                    if (!o)
                        object.assign(scope, o = {});
                    return setter(o, field, value, expression);
                }
            });
        },
        objectIndex: function (obj) {
            var expression = this.text;
            var indexFn = this.expression();
            this.consume(']');
            return extend(function $parseObjectIndex(self, locals) {
                var o = obj(self, locals), i = indexFn(self, locals), v;
                ensureSafeMemberName(i, expression);
                if (!o)
                    return undefined;
                v = ensureSafeObject(o[i], expression);
                return v;
            }, {
                assign: function (self, value, locals) {
                    var key = ensureSafeMemberName(indexFn(self, locals), expression);
                    // prevent overwriting of Function.constructor which would break ensureSafeObject check
                    var o = ensureSafeObject(obj(self, locals), expression);
                    if (!o)
                        obj.assign(self, o = {});
                    return o[key] = value;
                }
            });
        },
        functionCall: function (fnGetter, contextGetter) {
            var argsFn = [];
            if (this.peekToken().text !== ')') {
                do {
                    argsFn.push(this.expression());
                } while (this.expect(','));
            }
            this.consume(')');
            var expressionText = this.text;
            // we can safely reuse the array across invocations
            var args = argsFn.length ? [] : null;
            return function $parseFunctionCall(scope, locals) {
                var context = contextGetter ? contextGetter(scope, locals) : scope;
                var fn = fnGetter(scope, locals, context) || noop;
                if (args) {
                    var i = argsFn.length;
                    while (i--) {
                        args[i] = ensureSafeObject(argsFn[i](scope, locals), expressionText);
                    }
                }
                ensureSafeObject(context, expressionText);
                ensureSafeFunction(fn, expressionText);
                // IE doesn't have apply for some native functions
                var v = fn.apply
                    ? fn.apply(context, args)
                    : fn(args[0], args[1], args[2], args[3], args[4]);
                return ensureSafeObject(v, expressionText);
            };
        },
        // This is used with json array declaration
        arrayDeclaration: function () {
            var elementFns = [];
            if (this.peekToken().text !== ']') {
                do {
                    if (this.peek(']')) {
                        // Support trailing commas per ES5.1.
                        break;
                    }
                    elementFns.push(this.expression());
                } while (this.expect(','));
            }
            this.consume(']');
            return extend(function $parseArrayLiteral(self, locals) {
                var array = [];
                for (var i = 0, ii = elementFns.length; i < ii; i++) {
                    array.push(elementFns[i](self, locals));
                }
                return array;
            }, {
                literal: true,
                constant: elementFns.every(isConstant),
                inputs: elementFns
            });
        },
        object: function () {
            var keys = [], valueFns = [];
            if (this.peekToken().text !== '}') {
                do {
                    if (this.peek('}')) {
                        // Support trailing commas per ES5.1.
                        break;
                    }
                    var token = this.consume();
                    if (token.constant) {
                        keys.push(token.value);
                    }
                    else if (token.identifier) {
                        keys.push(token.text);
                    }
                    else {
                        this.throwError("invalid key", token);
                    }
                    this.consume(':');
                    valueFns.push(this.expression());
                } while (this.expect(','));
            }
            this.consume('}');
            return extend(function $parseObjectLiteral(self, locals) {
                var object = {};
                for (var i = 0, ii = valueFns.length; i < ii; i++) {
                    object[keys[i]] = valueFns[i](self, locals);
                }
                return object;
            }, {
                literal: true,
                constant: valueFns.every(isConstant),
                inputs: valueFns
            });
        }
    };
    //////////////////////////////////////////////////
    // Parser helper functions
    //////////////////////////////////////////////////
    function setter(obj, path, setValue, fullExp) {
        ensureSafeObject(obj, fullExp);
        var element = path.split('.'), key;
        for (var i = 0; element.length > 1; i++) {
            key = ensureSafeMemberName(element.shift(), fullExp);
            var propertyObj = ensureSafeObject(obj[key], fullExp);
            if (!propertyObj) {
                propertyObj = {};
                obj[key] = propertyObj;
            }
            obj = propertyObj;
        }
        key = ensureSafeMemberName(element.shift(), fullExp);
        ensureSafeObject(obj[key], fullExp);
        obj[key] = setValue;
        return setValue;
    }
    var getterFnCacheDefault = createMap();
    var getterFnCacheExpensive = createMap();
    function isPossiblyDangerousMemberName(name) {
        return name == 'constructor';
    }
    /**
     * Implementation of the "Black Hole" variant from:
     * - http://jsperf.com/angularjs-parse-getter/4
     * - http://jsperf.com/path-evaluation-simplified/7
     */
    function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, expensiveChecks) {
        ensureSafeMemberName(key0, fullExp);
        ensureSafeMemberName(key1, fullExp);
        ensureSafeMemberName(key2, fullExp);
        ensureSafeMemberName(key3, fullExp);
        ensureSafeMemberName(key4, fullExp);
        var eso = function (o) {
            return ensureSafeObject(o, fullExp);
        };
        var eso0 = (expensiveChecks || isPossiblyDangerousMemberName(key0)) ? eso : identity;
        var eso1 = (expensiveChecks || isPossiblyDangerousMemberName(key1)) ? eso : identity;
        var eso2 = (expensiveChecks || isPossiblyDangerousMemberName(key2)) ? eso : identity;
        var eso3 = (expensiveChecks || isPossiblyDangerousMemberName(key3)) ? eso : identity;
        var eso4 = (expensiveChecks || isPossiblyDangerousMemberName(key4)) ? eso : identity;
        return function cspSafeGetter(scope, locals) {
            var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope;
            if (pathVal == null)
                return pathVal;
            pathVal = eso0(pathVal[key0]);
            if (!key1)
                return pathVal;
            if (pathVal == null)
                return undefined;
            pathVal = eso1(pathVal[key1]);
            if (!key2)
                return pathVal;
            if (pathVal == null)
                return undefined;
            pathVal = eso2(pathVal[key2]);
            if (!key3)
                return pathVal;
            if (pathVal == null)
                return undefined;
            pathVal = eso3(pathVal[key3]);
            if (!key4)
                return pathVal;
            if (pathVal == null)
                return undefined;
            pathVal = eso4(pathVal[key4]);
            return pathVal;
        };
    }
    function getterFnWithEnsureSafeObject(fn, fullExpression) {
        return function (s, l) {
            return fn(s, l, ensureSafeObject, fullExpression);
        };
    }
    function getterFn(path, options, fullExp) {
        var expensiveChecks = options.expensiveChecks;
        var getterFnCache = (expensiveChecks ? getterFnCacheExpensive : getterFnCacheDefault);
        var fn = getterFnCache[path];
        if (fn)
            return fn;
        var pathKeys = path.split('.'), pathKeysLength = pathKeys.length;
        // http://jsperf.com/angularjs-parse-getter/6
        if (options.csp) {
            if (pathKeysLength < 6) {
                fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp, expensiveChecks);
            }
            else {
                fn = function cspSafeGetter(scope, locals) {
                    var i = 0, val;
                    do {
                        val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], fullExp, expensiveChecks)(scope, locals);
                        locals = undefined; // clear after first iteration
                        scope = val;
                    } while (i < pathKeysLength);
                    return val;
                };
            }
        }
        else {
            var code = '';
            if (expensiveChecks) {
                code += 's = eso(s, fe);\nl = eso(l, fe);\n';
            }
            var needsEnsureSafeObject = expensiveChecks;
            forEach(pathKeys, function (key, index) {
                ensureSafeMemberName(key, fullExp);
                var lookupJs = (index
                    // we simply dereference 's' on any .dot notation
                    ? 's'
                    // but if we are first then we check locals first, and if so read it first
                    : '((l&&l.hasOwnProperty("' + key + '"))?l:s)') + '.' + key;
                if (expensiveChecks || isPossiblyDangerousMemberName(key)) {
                    lookupJs = 'eso(' + lookupJs + ', fe)';
                    needsEnsureSafeObject = true;
                }
                code += 'if(s == null) return undefined;\n' +
                    's=' + lookupJs + ';\n';
            });
            code += 'return s;';
            /* jshint -W054 */
            var evaledFnGetter = new Function('s', 'l', 'eso', 'fe', code); // s=scope, l=locals, eso=ensureSafeObject
            /* jshint +W054 */
            evaledFnGetter.toString = valueFn(code);
            if (needsEnsureSafeObject) {
                evaledFnGetter = getterFnWithEnsureSafeObject(evaledFnGetter, fullExp);
            }
            fn = evaledFnGetter;
        }
        fn.sharedGetter = true;
        fn.assign = function (self, value) {
            return setter(self, path, value, path);
        };
        getterFnCache[path] = fn;
        return fn;
    }
    var objectValueOf = Object.prototype.valueOf;
    function getValueOf(value) {
        return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
    }
    ///////////////////////////////////
    /**
     * @ngdoc service
     * @name $parse
     * @kind function
     *
     * @description
     *
     * Converts Angular {@link guide/expression expression} into a function.
     *
     * ```js
     *   var getter = $parse('user.name');
     *   var setter = getter.assign;
     *   var context = {user:{name:'angular'}};
     *   var locals = {user:{name:'local'}};
     *
     *   expect(getter(context)).toEqual('angular');
     *   setter(context, 'newValue');
     *   expect(context.user.name).toEqual('newValue');
     *   expect(getter(context, locals)).toEqual('local');
     * ```
     *
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     *
     *    The returned function also has the following properties:
     *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
     *        literal.
     *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
     *        constant literals.
     *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
     *        set to a function to change its value on the given context.
     *
     */
    /**
     * @ngdoc provider
     * @name $parseProvider
     *
     * @description
     * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
     *  service.
     */
    function $ParseProvider() {
        var cacheDefault = createMap();
        var cacheExpensive = createMap();
        this.$get = ['$filter', '$sniffer', function ($filter, $sniffer) {
                var $parseOptions = {
                    csp: $sniffer.csp,
                    expensiveChecks: false
                }, $parseOptionsExpensive = {
                    csp: $sniffer.csp,
                    expensiveChecks: true
                };
                function wrapSharedExpression(exp) {
                    var wrapped = exp;
                    if (exp.sharedGetter) {
                        wrapped = function $parseWrapper(self, locals) {
                            return exp(self, locals);
                        };
                        wrapped.literal = exp.literal;
                        wrapped.constant = exp.constant;
                        wrapped.assign = exp.assign;
                    }
                    return wrapped;
                }
                return function $parse(exp, interceptorFn, expensiveChecks) {
                    var parsedExpression, oneTime, cacheKey;
                    switch (typeof exp) {
                        case 'string':
                            cacheKey = exp = exp.trim();
                            var cache = (expensiveChecks ? cacheExpensive : cacheDefault);
                            parsedExpression = cache[cacheKey];
                            if (!parsedExpression) {
                                if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
                                    oneTime = true;
                                    exp = exp.substring(2);
                                }
                                var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
                                var lexer = new Lexer(parseOptions);
                                var parser = new Parser(lexer, $filter, parseOptions);
                                parsedExpression = parser.parse(exp);
                                if (parsedExpression.constant) {
                                    parsedExpression.$$watchDelegate = constantWatchDelegate;
                                }
                                else if (oneTime) {
                                    //oneTime is not part of the exp passed to the Parser so we may have to
                                    //wrap the parsedExpression before adding a $$watchDelegate
                                    parsedExpression = wrapSharedExpression(parsedExpression);
                                    parsedExpression.$$watchDelegate = parsedExpression.literal ?
                                        oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
                                }
                                else if (parsedExpression.inputs) {
                                    parsedExpression.$$watchDelegate = inputsWatchDelegate;
                                }
                                cache[cacheKey] = parsedExpression;
                            }
                            return addInterceptor(parsedExpression, interceptorFn);
                        case 'function':
                            return addInterceptor(exp, interceptorFn);
                        default:
                            return addInterceptor(noop, interceptorFn);
                    }
                };
                function collectExpressionInputs(inputs, list) {
                    for (var i = 0, ii = inputs.length; i < ii; i++) {
                        var input = inputs[i];
                        if (!input.constant) {
                            if (input.inputs) {
                                collectExpressionInputs(input.inputs, list);
                            }
                            else if (list.indexOf(input) === -1) {
                                list.push(input);
                            }
                        }
                    }
                    return list;
                }
                function expressionInputDirtyCheck(newValue, oldValueOfValue) {
                    if (newValue == null || oldValueOfValue == null) {
                        return newValue === oldValueOfValue;
                    }
                    if (typeof newValue === 'object') {
                        // attempt to convert the value to a primitive type
                        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
                        //             be cheaply dirty-checked
                        newValue = getValueOf(newValue);
                        if (typeof newValue === 'object') {
                            // objects/arrays are not supported - deep-watching them would be too expensive
                            return false;
                        }
                        // fall-through to the primitive equality check
                    }
                    //Primitive or NaN
                    return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
                }
                function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression) {
                    var inputExpressions = parsedExpression.$$inputs ||
                        (parsedExpression.$$inputs = collectExpressionInputs(parsedExpression.inputs, []));
                    var lastResult;
                    if (inputExpressions.length === 1) {
                        var oldInputValue = expressionInputDirtyCheck; // init to something unique so that equals check fails
                        inputExpressions = inputExpressions[0];
                        return scope.$watch(function expressionInputWatch(scope) {
                            var newInputValue = inputExpressions(scope);
                            if (!expressionInputDirtyCheck(newInputValue, oldInputValue)) {
                                lastResult = parsedExpression(scope);
                                oldInputValue = newInputValue && getValueOf(newInputValue);
                            }
                            return lastResult;
                        }, listener, objectEquality);
                    }
                    var oldInputValueOfValues = [];
                    for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
                        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
                    }
                    return scope.$watch(function expressionInputsWatch(scope) {
                        var changed = false;
                        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
                            var newInputValue = inputExpressions[i](scope);
                            if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
                                oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
                            }
                        }
                        if (changed) {
                            lastResult = parsedExpression(scope);
                        }
                        return lastResult;
                    }, listener, objectEquality);
                }
                function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
                    var unwatch, lastValue;
                    return unwatch = scope.$watch(function oneTimeWatch(scope) {
                        return parsedExpression(scope);
                    }, function oneTimeListener(value, old, scope) {
                        lastValue = value;
                        if (isFunction(listener)) {
                            listener.apply(this, arguments);
                        }
                        if (isDefined(value)) {
                            scope.$$postDigest(function () {
                                if (isDefined(lastValue)) {
                                    unwatch();
                                }
                            });
                        }
                    }, objectEquality);
                }
                function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
                    var unwatch, lastValue;
                    return unwatch = scope.$watch(function oneTimeWatch(scope) {
                        return parsedExpression(scope);
                    }, function oneTimeListener(value, old, scope) {
                        lastValue = value;
                        if (isFunction(listener)) {
                            listener.call(this, value, old, scope);
                        }
                        if (isAllDefined(value)) {
                            scope.$$postDigest(function () {
                                if (isAllDefined(lastValue))
                                    unwatch();
                            });
                        }
                    }, objectEquality);
                    function isAllDefined(value) {
                        var allDefined = true;
                        forEach(value, function (val) {
                            if (!isDefined(val))
                                allDefined = false;
                        });
                        return allDefined;
                    }
                }
                function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
                    var unwatch;
                    return unwatch = scope.$watch(function constantWatch(scope) {
                        return parsedExpression(scope);
                    }, function constantListener(value, old, scope) {
                        if (isFunction(listener)) {
                            listener.apply(this, arguments);
                        }
                        unwatch();
                    }, objectEquality);
                }
                function addInterceptor(parsedExpression, interceptorFn) {
                    if (!interceptorFn)
                        return parsedExpression;
                    var watchDelegate = parsedExpression.$$watchDelegate;
                    var regularWatch = watchDelegate !== oneTimeLiteralWatchDelegate &&
                        watchDelegate !== oneTimeWatchDelegate;
                    var fn = regularWatch ? function regularInterceptedExpression(scope, locals) {
                        var value = parsedExpression(scope, locals);
                        return interceptorFn(value, scope, locals);
                    } : function oneTimeInterceptedExpression(scope, locals) {
                        var value = parsedExpression(scope, locals);
                        var result = interceptorFn(value, scope, locals);
                        // we only return the interceptor's result if the
                        // initial value is defined (for bind-once)
                        return isDefined(value) ? result : value;
                    };
                    // Propagate $$watchDelegates other then inputsWatchDelegate
                    if (parsedExpression.$$watchDelegate &&
                        parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
                        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
                    }
                    else if (!interceptorFn.$stateful) {
                        // If there is an interceptor, but no watchDelegate then treat the interceptor like
                        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
                        fn.$$watchDelegate = inputsWatchDelegate;
                        fn.inputs = [parsedExpression];
                    }
                    return fn;
                }
            }];
    }
    /**
     * @ngdoc service
     * @name $q
     * @requires $rootScope
     *
     * @description
     * A service that helps you run functions asynchronously, and use their return values (or exceptions)
     * when they are done processing.
     *
     * This is an implementation of promises/deferred objects inspired by
     * [Kris Kowal's Q](https://github.com/kriskowal/q).
     *
     * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
     * implementations, and the other which resembles ES6 promises to some degree.
     *
     * # $q constructor
     *
     * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
     * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,
     * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
     *
     * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are
     * available yet.
     *
     * It can be used like so:
     *
     * ```js
     *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
     *   // are available in the current lexical scope (they could have been injected or passed in).
     *
     *   function asyncGreet(name) {
     *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
     *     return $q(function(resolve, reject) {
     *       setTimeout(function() {
     *         if (okToGreet(name)) {
     *           resolve('Hello, ' + name + '!');
     *         } else {
     *           reject('Greeting ' + name + ' is not allowed.');
     *         }
     *       }, 1000);
     *     });
     *   }
     *
     *   var promise = asyncGreet('Robin Hood');
     *   promise.then(function(greeting) {
     *     alert('Success: ' + greeting);
     *   }, function(reason) {
     *     alert('Failed: ' + reason);
     *   });
     * ```
     *
     * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
     *
     * However, the more traditional CommonJS-style usage is still available, and documented below.
     *
     * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
     * interface for interacting with an object that represents the result of an action that is
     * performed asynchronously, and may or may not be finished at any given point in time.
     *
     * From the perspective of dealing with error handling, deferred and promise APIs are to
     * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
     *
     * ```js
     *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
     *   // are available in the current lexical scope (they could have been injected or passed in).
     *
     *   function asyncGreet(name) {
     *     var deferred = $q.defer();
     *
     *     setTimeout(function() {
     *       deferred.notify('About to greet ' + name + '.');
     *
     *       if (okToGreet(name)) {
     *         deferred.resolve('Hello, ' + name + '!');
     *       } else {
     *         deferred.reject('Greeting ' + name + ' is not allowed.');
     *       }
     *     }, 1000);
     *
     *     return deferred.promise;
     *   }
     *
     *   var promise = asyncGreet('Robin Hood');
     *   promise.then(function(greeting) {
     *     alert('Success: ' + greeting);
     *   }, function(reason) {
     *     alert('Failed: ' + reason);
     *   }, function(update) {
     *     alert('Got notification: ' + update);
     *   });
     * ```
     *
     * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
     * comes in the way of guarantees that promise and deferred APIs make, see
     * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
     *
     * Additionally the promise api allows for composition that is very hard to do with the
     * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
     * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
     * section on serial or parallel joining of promises.
     *
     * # The Deferred API
     *
     * A new instance of deferred is constructed by calling `$q.defer()`.
     *
     * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
     * that can be used for signaling the successful or unsuccessful completion, as well as the status
     * of the task.
     *
     * **Methods**
     *
     * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
     *   constructed via `$q.reject`, the promise will be rejected instead.
     * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
     *   resolving it with a rejection constructed via `$q.reject`.
     * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
     *   multiple times before the promise is either resolved or rejected.
     *
     * **Properties**
     *
     * - promise – `{Promise}` – promise object associated with this deferred.
     *
     *
     * # The Promise API
     *
     * A new promise instance is created when a deferred instance is created and can be retrieved by
     * calling `deferred.promise`.
     *
     * The purpose of the promise object is to allow for interested parties to get access to the result
     * of the deferred task when it completes.
     *
     * **Methods**
     *
     * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
     *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
     *   as soon as the result is available. The callbacks are called with a single argument: the result
     *   or rejection reason. Additionally, the notify callback may be called zero or more times to
     *   provide a progress indication, before the promise is resolved or rejected.
     *
     *   This method *returns a new promise* which is resolved or rejected via the return value of the
     *   `successCallback`, `errorCallback`. It also notifies via the return value of the
     *   `notifyCallback` method. The promise cannot be resolved or rejected from the notifyCallback
     *   method.
     *
     * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
     *
     * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
     *   but to do so without modifying the final value. This is useful to release resources or do some
     *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
     *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
     *   more information.
     *
     * # Chaining promises
     *
     * Because calling the `then` method of a promise returns a new derived promise, it is easily
     * possible to create a chain of promises:
     *
     * ```js
     *   promiseB = promiseA.then(function(result) {
     *     return result + 1;
     *   });
     *
     *   // promiseB will be resolved immediately after promiseA is resolved and its value
     *   // will be the result of promiseA incremented by 1
     * ```
     *
     * It is possible to create chains of any length and since a promise can be resolved with another
     * promise (which will defer its resolution further), it is possible to pause/defer resolution of
     * the promises at any point in the chain. This makes it possible to implement powerful APIs like
     * $http's response interceptors.
     *
     *
     * # Differences between Kris Kowal's Q and $q
     *
     *  There are two main differences:
     *
     * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
     *   mechanism in angular, which means faster propagation of resolution or rejection into your
     *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
     * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
     *   all the important functionality needed for common async tasks.
     *
     *  # Testing
     *
     *  ```js
     *    it('should simulate promise', inject(function($q, $rootScope) {
     *      var deferred = $q.defer();
     *      var promise = deferred.promise;
     *      var resolvedValue;
     *
     *      promise.then(function(value) { resolvedValue = value; });
     *      expect(resolvedValue).toBeUndefined();
     *
     *      // Simulate resolving of promise
     *      deferred.resolve(123);
     *      // Note that the 'then' function does not get called synchronously.
     *      // This is because we want the promise API to always be async, whether or not
     *      // it got called synchronously or asynchronously.
     *      expect(resolvedValue).toBeUndefined();
     *
     *      // Propagate promise resolution to 'then' functions using $apply().
     *      $rootScope.$apply();
     *      expect(resolvedValue).toEqual(123);
     *    }));
     *  ```
     *
     * @param {function(function, function)} resolver Function which is responsible for resolving or
     *   rejecting the newly created promise. The first parameter is a function which resolves the
     *   promise, the second parameter is a function which rejects the promise.
     *
     * @returns {Promise} The newly created promise.
     */
    function $QProvider() {
        this.$get = ['$rootScope', '$exceptionHandler', function ($rootScope, $exceptionHandler) {
                return qFactory(function (callback) {
                    $rootScope.$evalAsync(callback);
                }, $exceptionHandler);
            }];
    }
    function $$QProvider() {
        this.$get = ['$browser', '$exceptionHandler', function ($browser, $exceptionHandler) {
                return qFactory(function (callback) {
                    $browser.defer(callback);
                }, $exceptionHandler);
            }];
    }
    /**
     * Constructs a promise manager.
     *
     * @param {function(function)} nextTick Function for executing functions in the next turn.
     * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
     *     debugging purposes.
     * @returns {object} Promise manager.
     */
    function qFactory(nextTick, exceptionHandler) {
        var $qMinErr = minErr('$q', TypeError);
        function callOnce(self, resolveFn, rejectFn) {
            var called = false;
            function wrap(fn) {
                return function (value) {
                    if (called)
                        return;
                    called = true;
                    fn.call(self, value);
                };
            }
            return [wrap(resolveFn), wrap(rejectFn)];
        }
        /**
         * @ngdoc method
         * @name ng.$q#defer
         * @kind function
         *
         * @description
         * Creates a `Deferred` object which represents a task which will finish in the future.
         *
         * @returns {Deferred} Returns a new instance of deferred.
         */
        var defer = function () {
            return new Deferred();
        };
        function Promise() {
            this.$$state = { status: 0 };
        }
        Promise.prototype = {
            then: function (onFulfilled, onRejected, progressBack) {
                var result = new Deferred();
                this.$$state.pending = this.$$state.pending || [];
                this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
                if (this.$$state.status > 0)
                    scheduleProcessQueue(this.$$state);
                return result.promise;
            },
            "catch": function (callback) {
                return this.then(null, callback);
            },
            "finally": function (callback, progressBack) {
                return this.then(function (value) {
                    return handleCallback(value, true, callback);
                }, function (error) {
                    return handleCallback(error, false, callback);
                }, progressBack);
            }
        };
        //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
        function simpleBind(context, fn) {
            return function (value) {
                fn.call(context, value);
            };
        }
        function processQueue(state) {
            var fn, promise, pending;
            pending = state.pending;
            state.processScheduled = false;
            state.pending = undefined;
            for (var i = 0, ii = pending.length; i < ii; ++i) {
                promise = pending[i][0];
                fn = pending[i][state.status];
                try {
                    if (isFunction(fn)) {
                        promise.resolve(fn(state.value));
                    }
                    else if (state.status === 1) {
                        promise.resolve(state.value);
                    }
                    else {
                        promise.reject(state.value);
                    }
                }
                catch (e) {
                    promise.reject(e);
                    exceptionHandler(e);
                }
            }
        }
        function scheduleProcessQueue(state) {
            if (state.processScheduled || !state.pending)
                return;
            state.processScheduled = true;
            nextTick(function () { processQueue(state); });
        }
        function Deferred() {
            this.promise = new Promise();
            //Necessary to support unbound execution :/
            this.resolve = simpleBind(this, this.resolve);
            this.reject = simpleBind(this, this.reject);
            this.notify = simpleBind(this, this.notify);
        }
        Deferred.prototype = {
            resolve: function (val) {
                if (this.promise.$$state.status)
                    return;
                if (val === this.promise) {
                    this.$$reject($qMinErr('qcycle', "Expected promise to be resolved with value other than itself '{0}'", val));
                }
                else {
                    this.$$resolve(val);
                }
            },
            $$resolve: function (val) {
                var then, fns;
                fns = callOnce(this, this.$$resolve, this.$$reject);
                try {
                    if ((isObject(val) || isFunction(val)))
                        then = val && val.then;
                    if (isFunction(then)) {
                        this.promise.$$state.status = -1;
                        then.call(val, fns[0], fns[1], this.notify);
                    }
                    else {
                        this.promise.$$state.value = val;
                        this.promise.$$state.status = 1;
                        scheduleProcessQueue(this.promise.$$state);
                    }
                }
                catch (e) {
                    fns[1](e);
                    exceptionHandler(e);
                }
            },
            reject: function (reason) {
                if (this.promise.$$state.status)
                    return;
                this.$$reject(reason);
            },
            $$reject: function (reason) {
                this.promise.$$state.value = reason;
                this.promise.$$state.status = 2;
                scheduleProcessQueue(this.promise.$$state);
            },
            notify: function (progress) {
                var callbacks = this.promise.$$state.pending;
                if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {
                    nextTick(function () {
                        var callback, result;
                        for (var i = 0, ii = callbacks.length; i < ii; i++) {
                            result = callbacks[i][0];
                            callback = callbacks[i][3];
                            try {
                                result.notify(isFunction(callback) ? callback(progress) : progress);
                            }
                            catch (e) {
                                exceptionHandler(e);
                            }
                        }
                    });
                }
            }
        };
        /**
         * @ngdoc method
         * @name $q#reject
         * @kind function
         *
         * @description
         * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
         * used to forward rejection in a chain of promises. If you are dealing with the last promise in
         * a promise chain, you don't need to worry about it.
         *
         * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
         * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
         * a promise error callback and you want to forward the error to the promise derived from the
         * current promise, you have to "rethrow" the error by returning a rejection constructed via
         * `reject`.
         *
         * ```js
         *   promiseB = promiseA.then(function(result) {
         *     // success: do something and resolve promiseB
         *     //          with the old or a new result
         *     return result;
         *   }, function(reason) {
         *     // error: handle the error if possible and
         *     //        resolve promiseB with newPromiseOrValue,
         *     //        otherwise forward the rejection to promiseB
         *     if (canHandle(reason)) {
         *      // handle the error and recover
         *      return newPromiseOrValue;
         *     }
         *     return $q.reject(reason);
         *   });
         * ```
         *
         * @param {*} reason Constant, message, exception or an object representing the rejection reason.
         * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
         */
        var reject = function (reason) {
            var result = new Deferred();
            result.reject(reason);
            return result.promise;
        };
        var makePromise = function makePromise(value, resolved) {
            var result = new Deferred();
            if (resolved) {
                result.resolve(value);
            }
            else {
                result.reject(value);
            }
            return result.promise;
        };
        var handleCallback = function handleCallback(value, isResolved, callback) {
            var callbackOutput = null;
            try {
                if (isFunction(callback))
                    callbackOutput = callback();
            }
            catch (e) {
                return makePromise(e, false);
            }
            if (isPromiseLike(callbackOutput)) {
                return callbackOutput.then(function () {
                    return makePromise(value, isResolved);
                }, function (error) {
                    return makePromise(error, false);
                });
            }
            else {
                return makePromise(value, isResolved);
            }
        };
        /**
         * @ngdoc method
         * @name $q#when
         * @kind function
         *
         * @description
         * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
         * This is useful when you are dealing with an object that might or might not be a promise, or if
         * the promise comes from a source that can't be trusted.
         *
         * @param {*} value Value or a promise
         * @returns {Promise} Returns a promise of the passed value or promise
         */
        var when = function (value, callback, errback, progressBack) {
            var result = new Deferred();
            result.resolve(value);
            return result.promise.then(callback, errback, progressBack);
        };
        /**
         * @ngdoc method
         * @name $q#all
         * @kind function
         *
         * @description
         * Combines multiple promises into a single promise that is resolved when all of the input
         * promises are resolved.
         *
         * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
         * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
         *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
         *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
         *   with the same rejection value.
         */
        function all(promises) {
            var deferred = new Deferred(), counter = 0, results = isArray(promises) ? [] : {};
            forEach(promises, function (promise, key) {
                counter++;
                when(promise).then(function (value) {
                    if (results.hasOwnProperty(key))
                        return;
                    results[key] = value;
                    if (!(--counter))
                        deferred.resolve(results);
                }, function (reason) {
                    if (results.hasOwnProperty(key))
                        return;
                    deferred.reject(reason);
                });
            });
            if (counter === 0) {
                deferred.resolve(results);
            }
            return deferred.promise;
        }
        var $Q = function Q(resolver) {
            if (!isFunction(resolver)) {
                throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
            }
            if (!(this instanceof Q)) {
                // More useful when $Q is the Promise itself.
                return new Q(resolver);
            }
            var deferred = new Deferred();
            function resolveFn(value) {
                deferred.resolve(value);
            }
            function rejectFn(reason) {
                deferred.reject(reason);
            }
            resolver(resolveFn, rejectFn);
            return deferred.promise;
        };
        $Q.defer = defer;
        $Q.reject = reject;
        $Q.when = when;
        $Q.all = all;
        return $Q;
    }
    function $$RAFProvider() {
        this.$get = ['$window', '$timeout', function ($window, $timeout) {
                var requestAnimationFrame = $window.requestAnimationFrame ||
                    $window.webkitRequestAnimationFrame ||
                    $window.mozRequestAnimationFrame;
                var cancelAnimationFrame = $window.cancelAnimationFrame ||
                    $window.webkitCancelAnimationFrame ||
                    $window.mozCancelAnimationFrame ||
                    $window.webkitCancelRequestAnimationFrame;
                var rafSupported = !!requestAnimationFrame;
                var raf = rafSupported
                    ? function (fn) {
                        var id = requestAnimationFrame(fn);
                        return function () {
                            cancelAnimationFrame(id);
                        };
                    }
                    : function (fn) {
                        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
                        return function () {
                            $timeout.cancel(timer);
                        };
                    };
                raf.supported = rafSupported;
                return raf;
            }];
    }
    /**
     * DESIGN NOTES
     *
     * The design decisions behind the scope are heavily favored for speed and memory consumption.
     *
     * The typical use of scope is to watch the expressions, which most of the time return the same
     * value as last time so we optimize the operation.
     *
     * Closures construction is expensive in terms of speed as well as memory:
     *   - No closures, instead use prototypical inheritance for API
     *   - Internal state needs to be stored on scope directly, which means that private state is
     *     exposed as $$____ properties
     *
     * Loop operations are optimized by using while(count--) { ... }
     *   - this means that in order to keep the same order of execution as addition we have to add
     *     items to the array at the beginning (unshift) instead of at the end (push)
     *
     * Child scopes are created and removed often
     *   - Using an array would be slow since inserts in middle are expensive so we use linked list
     *
     * There are few watches then a lot of observers. This is why you don't want the observer to be
     * implemented in the same way as watch. Watch requires return of initialization function which
     * are expensive to construct.
     */
    /**
     * @ngdoc provider
     * @name $rootScopeProvider
     * @description
     *
     * Provider for the $rootScope service.
     */
    /**
     * @ngdoc method
     * @name $rootScopeProvider#digestTtl
     * @description
     *
     * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
     * assuming that the model is unstable.
     *
     * The current default is 10 iterations.
     *
     * In complex applications it's possible that the dependencies between `$watch`s will result in
     * several digest iterations. However if an application needs more than the default 10 digest
     * iterations for its model to stabilize then you should investigate what is causing the model to
     * continuously change during the digest.
     *
     * Increasing the TTL could have performance implications, so you should not change it without
     * proper justification.
     *
     * @param {number} limit The number of digest iterations.
     */
    /**
     * @ngdoc service
     * @name $rootScope
     * @description
     *
     * Every application has a single root {@link ng.$rootScope.Scope scope}.
     * All other scopes are descendant scopes of the root scope. Scopes provide separation
     * between the model and the view, via a mechanism for watching the model for changes.
     * They also provide an event emission/broadcast and subscription facility. See the
     * {@link guide/scope developer guide on scopes}.
     */
    function $RootScopeProvider() {
        var TTL = 10;
        var $rootScopeMinErr = minErr('$rootScope');
        var lastDirtyWatch = null;
        var applyAsyncId = null;
        this.digestTtl = function (value) {
            if (arguments.length) {
                TTL = value;
            }
            return TTL;
        };
        this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',
            function ($injector, $exceptionHandler, $parse, $browser) {
                /**
                 * @ngdoc type
                 * @name $rootScope.Scope
                 *
                 * @description
                 * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
                 * {@link auto.$injector $injector}. Child scopes are created using the
                 * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
                 * compiled HTML template is executed.)
                 *
                 * Here is a simple scope snippet to show how you can interact with the scope.
                 * ```html
                 * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
                 * ```
                 *
                 * # Inheritance
                 * A scope can inherit from a parent scope, as in this example:
                 * ```js
                     var parent = $rootScope;
                     var child = parent.$new();
            
                     parent.salutation = "Hello";
                     child.name = "World";
                     expect(child.salutation).toEqual('Hello');
            
                     child.salutation = "Welcome";
                     expect(child.salutation).toEqual('Welcome');
                     expect(parent.salutation).toEqual('Hello');
                 * ```
                 *
                 * When interacting with `Scope` in tests, additional helper methods are available on the
                 * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
                 * details.
                 *
                 *
                 * @param {Object.<string, function()>=} providers Map of service factory which need to be
                 *                                       provided for the current scope. Defaults to {@link ng}.
                 * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
                 *                              append/override services provided by `providers`. This is handy
                 *                              when unit-testing and having the need to override a default
                 *                              service.
                 * @returns {Object} Newly created scope.
                 *
                 */
                function Scope() {
                    this.$id = nextUid();
                    this.$$phase = this.$parent = this.$$watchers =
                        this.$$nextSibling = this.$$prevSibling =
                            this.$$childHead = this.$$childTail = null;
                    this.$root = this;
                    this.$$destroyed = false;
                    this.$$listeners = {};
                    this.$$listenerCount = {};
                    this.$$isolateBindings = null;
                }
                /**
                 * @ngdoc property
                 * @name $rootScope.Scope#$id
                 *
                 * @description
                 * Unique scope ID (monotonically increasing) useful for debugging.
                 */
                /**
                 * @ngdoc property
                 * @name $rootScope.Scope#$parent
                 *
                 * @description
                 * Reference to the parent scope.
                 */
                /**
                 * @ngdoc property
                 * @name $rootScope.Scope#$root
                 *
                 * @description
                 * Reference to the root scope.
                 */
                Scope.prototype = {
                    constructor: Scope,
                    /**
                     * @ngdoc method
                     * @name $rootScope.Scope#$new
                     * @kind function
                     *
                     * @description
                     * Creates a new child {@link ng.$rootScope.Scope scope}.
                     *
                     * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
                     * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
                     *
                     * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
                     * desired for the scope and its child scopes to be permanently detached from the parent and
                     * thus stop participating in model change detection and listener notification by invoking.
                     *
                     * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
                     *         parent scope. The scope is isolated, as it can not see parent scope properties.
                     *         When creating widgets, it is useful for the widget to not accidentally read parent
                     *         state.
                     *
                     * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
                     *                              of the newly created scope. Defaults to `this` scope if not provided.
                     *                              This is used when creating a transclude scope to correctly place it
                     *                              in the scope hierarchy while maintaining the correct prototypical
                     *                              inheritance.
                     *
                     * @returns {Object} The newly created child scope.
                     *
                     */
                    $new: function (isolate, parent) {
                        var child;
                        parent = parent || this;
                        if (isolate) {
                            child = new Scope();
                            child.$root = this.$root;
                        }
                        else {
                            // Only create a child scope class if somebody asks for one,
                            // but cache it to allow the VM to optimize lookups.
                            if (!this.$$ChildScope) {
                                this.$$ChildScope = function ChildScope() {
                                    this.$$watchers = this.$$nextSibling =
                                        this.$$childHead = this.$$childTail = null;
                                    this.$$listeners = {};
                                    this.$$listenerCount = {};
                                    this.$id = nextUid();
                                    this.$$ChildScope = null;
                                };
                                this.$$ChildScope.prototype = this;
                            }
                            child = new this.$$ChildScope();
                        }
                        child.$parent = parent;
                        child.$$prevSibling = parent.$$childTail;
                        if (parent.$$childHead) {
                            parent.$$childTail.$$nextSibling = child;
                            parent.$$childTail = child;
                        }
                        else {
                            parent.$$childHead = parent.$$childTail = child;
                        }
                        // When the new scope is not isolated or we inherit from `this`, and
                        // the parent scope is destroyed, the property `$$destroyed` is inherited
                        // prototypically. In all other cases, this property needs to be set
                        // when the parent scope is destroyed.
                        // The listener needs to be added after the parent is set
                        if (isolate || parent != this)
                            child.$on('$destroy', destroyChild);
                        return child;
                        function destroyChild() {
                            child.$$destroyed = true;
                        }
                    },
                    /**
                     * @ngdoc method
                     * @name $rootScope.Scope#$watch
                     * @kind function
                     *
                     * @description
                     * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
                     *
                     * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
                     *   $digest()} and should return the value that will be watched. (Since
                     *   {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the
                     *   `watchExpression` can execute multiple times per
                     *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)
                     * - The `listener` is called only when the value from the current `watchExpression` and the
                     *   previous call to `watchExpression` are not equal (with the exception of the initial run,
                     *   see below). Inequality is determined according to reference inequality,
                     *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
                     *    via the `!==` Javascript operator, unless `objectEquality == true`
                     *   (see next point)
                     * - When `objectEquality == true`, inequality of the `watchExpression` is determined
                     *   according to the {@link angular.equals} function. To save the value of the object for
                     *   later comparison, the {@link angular.copy} function is used. This therefore means that
                     *   watching complex objects will have adverse memory and performance implications.
                     * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
                     *   This is achieved by rerunning the watchers until no changes are detected. The rerun
                     *   iteration limit is 10 to prevent an infinite loop deadlock.
                     *
                     *
                     * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
                     * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`
                     * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a
                     * change is detected, be prepared for multiple calls to your listener.)
                     *
                     * After a watcher is registered with the scope, the `listener` fn is called asynchronously
                     * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
                     * watcher. In rare cases, this is undesirable because the listener is called when the result
                     * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
                     * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
                     * listener was called due to initialization.
                     *
                     *
                     *
                     * # Example
                     * ```js
                         // let's assume that scope was dependency injected as the $rootScope
                         var scope = $rootScope;
                         scope.name = 'misko';
                         scope.counter = 0;
              
                         expect(scope.counter).toEqual(0);
                         scope.$watch('name', function(newValue, oldValue) {
                           scope.counter = scope.counter + 1;
                         });
                         expect(scope.counter).toEqual(0);
              
                         scope.$digest();
                         // the listener is always called during the first $digest loop after it was registered
                         expect(scope.counter).toEqual(1);
              
                         scope.$digest();
                         // but now it will not be called unless the value changes
                         expect(scope.counter).toEqual(1);
              
                         scope.name = 'adam';
                         scope.$digest();
                         expect(scope.counter).toEqual(2);
              
              
              
                         // Using a function as a watchExpression
                         var food;
                         scope.foodCounter = 0;
                         expect(scope.foodCounter).toEqual(0);
                         scope.$watch(
                           // This function returns the value being watched. It is called for each turn of the $digest loop
                           function() { return food; },
                           // This is the change listener, called when the value returned from the above function changes
                           function(newValue, oldValue) {
                             if ( newValue !== oldValue ) {
                               // Only increment the counter if the value changed
                               scope.foodCounter = scope.foodCounter + 1;
                             }
                           }
                         );
                         // No digest has been run so the counter will be zero
                         expect(scope.foodCounter).toEqual(0);
              
                         // Run the digest but since food has not changed count will still be zero
                         scope.$digest();
                         expect(scope.foodCounter).toEqual(0);
              
                         // Update food and run digest.  Now the counter will increment
                         food = 'cheeseburger';
                         scope.$digest();
                         expect(scope.foodCounter).toEqual(1);
              
                     * ```
                     *
                     *
                     *
                     * @param {(function()|string)} watchExpression Expression that is evaluated on each
                     *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
                     *    a call to the `listener`.
                     *
                     *    - `string`: Evaluated as {@link guide/expression expression}
                     *    - `function(scope)`: called with current `scope` as a parameter.
                     * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
                     *    of `watchExpression` changes.
                     *
                     *    - `newVal` contains the current value of the `watchExpression`
                     *    - `oldVal` contains the previous value of the `watchExpression`
                     *    - `scope` refers to the current scope
                     * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of
                     *     comparing for reference equality.
                     * @returns {function()} Returns a deregistration function for this listener.
                     */
                    $watch: function (watchExp, listener, objectEquality) {
                        var get = $parse(watchExp);
                        if (get.$$watchDelegate) {
                            return get.$$watchDelegate(this, listener, objectEquality, get);
                        }
                        var scope = this, array = scope.$$watchers, watcher = {
                            fn: listener,
                            last: initWatchVal,
                            get: get,
                            exp: watchExp,
                            eq: !!objectEquality
                        };
                        lastDirtyWatch = null;
                        if (!isFunction(listener)) {
                            watcher.fn = noop;
                        }
                        if (!array) {
                            array = scope.$$watchers = [];
                        }
                        // we use unshift since we use a while loop in $digest for speed.
                        // the while loop reads in reverse order.
                        array.unshift(watcher);
                        return function deregisterWatch() {
                            arrayRemove(array, watcher);
                            lastDirtyWatch = null;
                        };
                    },
                    /**
                     * @ngdoc method
                     * @name $rootScope.Scope#$watchGroup
                     * @kind function
                     *
                     * @description
                     * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
                     * If any one expression in the collection changes the `listener` is executed.
                     *
                     * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
                     *   call to $digest() to see if any items changes.
                     * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
                     *
                     * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
                     * watched using {@link ng.$rootScope.Scope#$watch $watch()}
                     *
                     * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
                     *    expression in `watchExpressions` changes
                     *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
                     *    those of `watchExpression`
                     *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
                     *    those of `watchExpression`
                     *    The `scope` refers to the current scope.
                     * @returns {function()} Returns a de-registration function for all listeners.
                     */
                    $watchGroup: function (watchExpressions, listener) {
                        var oldValues = new Array(watchExpressions.length);
                        var newValues = new Array(watchExpressions.length);
                        var deregisterFns = [];
                        var self = this;
                        var changeReactionScheduled = false;
                        var firstRun = true;
                        if (!watchExpressions.length) {
                            // No expressions means we call the listener ASAP
                            var shouldCall = true;
                            self.$evalAsync(function () {
                                if (shouldCall)
                                    listener(newValues, newValues, self);
                            });
                            return function deregisterWatchGroup() {
                                shouldCall = false;
                            };
                        }
                        if (watchExpressions.length === 1) {
                            // Special case size of one
                            return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
                                newValues[0] = value;
                                oldValues[0] = oldValue;
                                listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
                            });
                        }
                        forEach(watchExpressions, function (expr, i) {
                            var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
                                newValues[i] = value;
                                oldValues[i] = oldValue;
                                if (!changeReactionScheduled) {
                                    changeReactionScheduled = true;
                                    self.$evalAsync(watchGroupAction);
                                }
                            });
                            deregisterFns.push(unwatchFn);
                        });
                        function watchGroupAction() {
                            changeReactionScheduled = false;
                            if (firstRun) {
                                firstRun = false;
                                listener(newValues, newValues, self);
                            }
                            else {
                                listener(newValues, oldValues, self);
                            }
                        }
                        return function deregisterWatchGroup() {
                            while (deregisterFns.length) {
                                deregisterFns.shift()();
                            }
                        };
                    },
                    /**
                     * @ngdoc method
                     * @name $rootScope.Scope#$watchCollection
                     * @kind function
                     *
                     * @description
                     * Shallow watches the properties of an object and fires whenever any of the properties change
                     * (for arrays, this implies watching the array items; for object maps, this implies watching
                     * the properties). If a change is detected, the `listener` callback is fired.
                     *
                     * - The `obj` collection is observed via standard $watch operation and is examined on every
                     *   call to $digest() to see if any items have been added, removed, or moved.
                     * - The `listener` is called whenever anything within the `obj` has changed. Examples include
                     *   adding, removing, and moving items belonging to an object or array.
                     *
                     *
                     * # Example
                     * ```js
                        $scope.names = ['igor', 'matias', 'misko', 'james'];
                        $scope.dataCount = 4;
              
                        $scope.$watchCollection('names', function(newNames, oldNames) {
                          $scope.dataCount = newNames.length;
                        });
              
                        expect($scope.dataCount).toEqual(4);
                        $scope.$digest();
              
                        //still at 4 ... no changes
                        expect($scope.dataCount).toEqual(4);
              
                        $scope.names.pop();
                        $scope.$digest();
              
                        //now there's been a change
                        expect($scope.dataCount).toEqual(3);
                     * ```
                     *
                     *
                     * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
                     *    expression value should evaluate to an object or an array which is observed on each
                     *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
                     *    collection will trigger a call to the `listener`.
                     *
                     * @param {function(newCollection, oldCollection, scope)} listener a callback function called
                     *    when a change is detected.
                     *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
                     *    - The `oldCollection` object is a copy of the former collection data.
                     *      Due to performance considerations, the`oldCollection` value is computed only if the
                     *      `listener` function declares two or more arguments.
                     *    - The `scope` argument refers to the current scope.
                     *
                     * @returns {function()} Returns a de-registration function for this listener. When the
                     *    de-registration function is executed, the internal watch operation is terminated.
                     */
                    $watchCollection: function (obj, listener) {
                        $watchCollectionInterceptor.$stateful = true;
                        var self = this;
                        // the current value, updated on each dirty-check run
                        var newValue;
                        // a shallow copy of the newValue from the last dirty-check run,
                        // updated to match newValue during dirty-check run
                        var oldValue;
                        // a shallow copy of the newValue from when the last change happened
                        var veryOldValue;
                        // only track veryOldValue if the listener is asking for it
                        var trackVeryOldValue = (listener.length > 1);
                        var changeDetected = 0;
                        var changeDetector = $parse(obj, $watchCollectionInterceptor);
                        var internalArray = [];
                        var internalObject = {};
                        var initRun = true;
                        var oldLength = 0;
                        function $watchCollectionInterceptor(_value) {
                            newValue = _value;
                            var newLength, key, bothNaN, newItem, oldItem;
                            // If the new value is undefined, then return undefined as the watch may be a one-time watch
                            if (isUndefined(newValue))
                                return;
                            if (!isObject(newValue)) {
                                if (oldValue !== newValue) {
                                    oldValue = newValue;
                                    changeDetected++;
                                }
                            }
                            else if (isArrayLike(newValue)) {
                                if (oldValue !== internalArray) {
                                    // we are transitioning from something which was not an array into array.
                                    oldValue = internalArray;
                                    oldLength = oldValue.length = 0;
                                    changeDetected++;
                                }
                                newLength = newValue.length;
                                if (oldLength !== newLength) {
                                    // if lengths do not match we need to trigger change notification
                                    changeDetected++;
                                    oldValue.length = oldLength = newLength;
                                }
                                // copy the items to oldValue and look for changes.
                                for (var i = 0; i < newLength; i++) {
                                    oldItem = oldValue[i];
                                    newItem = newValue[i];
                                    bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
                                    if (!bothNaN && (oldItem !== newItem)) {
                                        changeDetected++;
                                        oldValue[i] = newItem;
                                    }
                                }
                            }
                            else {
                                if (oldValue !== internalObject) {
                                    // we are transitioning from something which was not an object into object.
                                    oldValue = internalObject = {};
                                    oldLength = 0;
                                    changeDetected++;
                                }
                                // copy the items to oldValue and look for changes.
                                newLength = 0;
                                for (key in newValue) {
                                    if (newValue.hasOwnProperty(key)) {
                                        newLength++;
                                        newItem = newValue[key];
                                        oldItem = oldValue[key];
                                        if (key in oldValue) {
                                            bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
                                            if (!bothNaN && (oldItem !== newItem)) {
                                                changeDetected++;
                                                oldValue[key] = newItem;
                                            }
                                        }
                                        else {
                                            oldLength++;
                                            oldValue[key] = newItem;
                                            changeDetected++;
                                        }
                                    }
                                }
                                if (oldLength > newLength) {
                                    // we used to have more keys, need to find them and destroy them.
                                    changeDetected++;
                                    for (key in oldValue) {
                                        if (!newValue.hasOwnProperty(key)) {
                                            oldLength--;
                                            delete oldValue[key];
                                        }
                                    }
                                }
                            }
                            return changeDetected;
                        }
                        function $watchCollectionAction() {
                            if (initRun) {
                                initRun = false;
                                listener(newValue, newValue, self);
                            }
                            else {
                                listener(newValue, veryOldValue, self);
                            }
                            // make a copy for the next time a collection is changed
                            if (trackVeryOldValue) {
                                if (!isObject(newValue)) {
                                    //primitive
                                    veryOldValue = newValue;
                                }
                                else if (isArrayLike(newValue)) {
                                    veryOldValue = new Array(newValue.length);
                                    for (var i = 0; i < newValue.length; i++) {
                                        veryOldValue[i] = newValue[i];
                                    }
                                }
                                else {
                                    veryOldValue = {};
                                    for (var key in newValue) {
                                        if (hasOwnProperty.call(newValue, key)) {
                                            veryOldValue[key] = newValue[key];
                                        }
                                    }
                                }
                            }
                        }
                        return this.$watch(changeDetector, $watchCollectionAction);
                    },
                    /**
                     * @ngdoc method
                     * @name $rootScope.Scope#$digest
                     * @kind function
                     *
                     * @description
                     * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
                     * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
                     * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
                     * until no more listeners are firing. This means that it is possible to get into an infinite
                     * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
                     * iterations exceeds 10.
                     *
                     * Usually, you don't call `$digest()` directly in
                     * {@link ng.directive:ngController controllers} or in
                     * {@link ng.$compileProvider#directive directives}.
                     * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
                     * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
                     *
                     * If you want to be notified whenever `$digest()` is called,
                     * you can register a `watchExpression` function with
                     * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
                     *
                     * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
                     *
                     * # Example
                     * ```js
                         var scope = ...;
                         scope.name = 'misko';
                         scope.counter = 0;
              
                         expect(scope.counter).toEqual(0);
                         scope.$watch('name', function(newValue, oldValue) {
                           scope.counter = scope.counter + 1;
                         });
                         expect(scope.counter).toEqual(0);
              
                         scope.$digest();
                         // the listener is always called during the first $digest loop after it was registered
                         expect(scope.counter).toEqual(1);
              
                         scope.$digest();
                         // but now it will not be called unless the value changes
                         expect(scope.counter).toEqual(1);
              
                         scope.name = 'adam';
                         scope.$digest();
                         expect(scope.counter).toEqual(2);
                     * ```
                     *
                     */
                    $digest: function () {
                        var watch, value, last, watchers, length, dirty, ttl = TTL, next, current, target = this, watchLog = [], logIdx, logMsg, asyncTask;
                        beginPhase('$digest');
                        // Check for changes to browser url that happened in sync before the call to $digest
                        $browser.$$checkUrlChange();
                        if (this === $rootScope && applyAsyncId !== null) {
                            // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
                            // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
                            $browser.defer.cancel(applyAsyncId);
                            flushApplyAsync();
                        }
                        lastDirtyWatch = null;
                        do {
                            dirty = false;
                            current = target;
                            while (asyncQueue.length) {
                                try {
                                    asyncTask = asyncQueue.shift();
                                    asyncTask.scope.$eval(asyncTask.expression);
                                }
                                catch (e) {
                                    $exceptionHandler(e);
                                }
                                lastDirtyWatch = null;
                            }
                            traverseScopesLoop: do {
                                if ((watchers = current.$$watchers)) {
                                    // process our watches
                                    length = watchers.length;
                                    while (length--) {
                                        try {
                                            watch = watchers[length];
                                            // Most common watches are on primitives, in which case we can short
                                            // circuit it with === operator, only when === fails do we use .equals
                                            if (watch) {
                                                if ((value = watch.get(current)) !== (last = watch.last) &&
                                                    !(watch.eq
                                                        ? equals(value, last)
                                                        : (typeof value === 'number' && typeof last === 'number'
                                                            && isNaN(value) && isNaN(last)))) {
                                                    dirty = true;
                                                    lastDirtyWatch = watch;
                                                    watch.last = watch.eq ? copy(value, null) : value;
                                                    watch.fn(value, ((last === initWatchVal) ? value : last), current);
                                                    if (ttl < 5) {
                                                        logIdx = 4 - ttl;
                                                        if (!watchLog[logIdx])
                                                            watchLog[logIdx] = [];
                                                        watchLog[logIdx].push({
                                                            msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
                                                            newVal: value,
                                                            oldVal: last
                                                        });
                                                    }
                                                }
                                                else if (watch === lastDirtyWatch) {
                                                    // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                                                    // have already been tested.
                                                    dirty = false;
                                                    break traverseScopesLoop;
                                                }
                                            }
                                        }
                                        catch (e) {
                                            $exceptionHandler(e);
                                        }
                                    }
                                }
                                // Insanity Warning: scope depth-first traversal
                                // yes, this code is a bit crazy, but it works and we have tests to prove it!
                                // this piece should be kept in sync with the traversal in $broadcast
                                if (!(next = (current.$$childHead ||
                                    (current !== target && current.$$nextSibling)))) {
                                    while (current !== target && !(next = current.$$nextSibling)) {
                                        current = current.$parent;
                                    }
                                }
                            } while ((current = next));
                            // `break traverseScopesLoop;` takes us to here
                            if ((dirty || asyncQueue.length) && !(ttl--)) {
                                clearPhase();
                                throw $rootScopeMinErr('infdig', '{0} $digest() iterations reached. Aborting!\n' +
                                    'Watchers fired in the last 5 iterations: {1}', TTL, watchLog);
                            }
                        } while (dirty || asyncQueue.length);
                        clearPhase();
                        while (postDigestQueue.length) {
                            try {
                                postDigestQueue.shift()();
                            }
                            catch (e) {
                                $exceptionHandler(e);
                            }
                        }
                    },
                    /**
                     * @ngdoc event
                     * @name $rootScope.Scope#$destroy
                     * @eventType broadcast on scope being destroyed
                     *
                     * @description
                     * Broadcasted when a scope and its children are being destroyed.
                     *
                     * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
                     * clean up DOM bindings before an element is removed from the DOM.
                     */
                    /**
                     * @ngdoc method
                     * @name $rootScope.Scope#$destroy
                     * @kind function
                     *
                     * @description
                     * Removes the current scope (and all of its children) from the parent scope. Removal implies
                     * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
                     * propagate to the current scope and its children. Removal also implies that the current
                     * scope is eligible for garbage collection.
                     *
                     * The `$destroy()` is usually used by directives such as
                     * {@link ng.directive:ngRepeat ngRepeat} for managing the
                     * unrolling of the loop.
                     *
                     * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
                     * Application code can register a `$destroy` event handler that will give it a chance to
                     * perform any necessary cleanup.
                     *
                     * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
                     * clean up DOM bindings before an element is removed from the DOM.
                     */
                    $destroy: function () {
                        // we can't destroy the root scope or a scope that has been already destroyed
                        if (this.$$destroyed)
                            return;
                        var parent = this.$parent;
                        this.$broadcast('$destroy');
                        this.$$destroyed = true;
                        if (this === $rootScope)
                            return;
                        for (var eventName in this.$$listenerCount) {
                            decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
                        }
                        // sever all the references to parent scopes (after this cleanup, the current scope should
                        // not be retained by any of our references and should be eligible for garbage collection)
                        if (parent.$$childHead == this)
                            parent.$$childHead = this.$$nextSibling;
                        if (parent.$$childTail == this)
                            parent.$$childTail = this.$$prevSibling;
                        if (this.$$prevSibling)
                            this.$$prevSibling.$$nextSibling = this.$$nextSibling;
                        if (this.$$nextSibling)
                            this.$$nextSibling.$$prevSibling = this.$$prevSibling;
                        // Disable listeners, watchers and apply/digest methods
                        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
                        this.$on = this.$watch = this.$watchGroup = function () { return noop; };
                        this.$$listeners = {};
                        // All of the code below is bogus code that works around V8's memory leak via optimized code
                        // and inline caches.
                        //
                        // see:
                        // - https://code.google.com/p/v8/issues/detail?id=2073#c26
                        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
                        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
                        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =
                            this.$$childTail = this.$root = this.$$watchers = null;
                    },
                    /**
                     * @ngdoc method
                     * @name $rootScope.Scope#$eval
                     * @kind function
                     *
                     * @description
                     * Executes the `expression` on the current scope and returns the result. Any exceptions in
                     * the expression are propagated (uncaught). This is useful when evaluating Angular
                     * expressions.
                     *
                     * # Example
                     * ```js
                         var scope = ng.$rootScope.Scope();
                         scope.a = 1;
                         scope.b = 2;
              
                         expect(scope.$eval('a+b')).toEqual(3);
                         expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
                     * ```
                     *
                     * @param {(string|function())=} expression An angular expression to be executed.
                     *
                     *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
                     *    - `function(scope)`: execute the function with the current `scope` parameter.
                     *
                     * @param {(object)=} locals Local variables object, useful for overriding values in scope.
                     * @returns {*} The result of evaluating the expression.
                     */
                    $eval: function (expr, locals) {
                        return $parse(expr)(this, locals);
                    },
                    /**
                     * @ngdoc method
                     * @name $rootScope.Scope#$evalAsync
                     * @kind function
                     *
                     * @description
                     * Executes the expression on the current scope at a later point in time.
                     *
                     * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
                     * that:
                     *
                     *   - it will execute after the function that scheduled the evaluation (preferably before DOM
                     *     rendering).
                     *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
                     *     `expression` execution.
                     *
                     * Any exceptions from the execution of the expression are forwarded to the
                     * {@link ng.$exceptionHandler $exceptionHandler} service.
                     *
                     * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
                     * will be scheduled. However, it is encouraged to always call code that changes the model
                     * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
                     *
                     * @param {(string|function())=} expression An angular expression to be executed.
                     *
                     *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
                     *    - `function(scope)`: execute the function with the current `scope` parameter.
                     *
                     */
                    $evalAsync: function (expr) {
                        // if we are outside of an $digest loop and this is the first time we are scheduling async
                        // task also schedule async auto-flush
                        if (!$rootScope.$$phase && !asyncQueue.length) {
                            $browser.defer(function () {
                                if (asyncQueue.length) {
                                    $rootScope.$digest();
                                }
                            });
                        }
                        asyncQueue.push({ scope: this, expression: expr });
                    },
                    $$postDigest: function (fn) {
                        postDigestQueue.push(fn);
                    },
                    /**
                     * @ngdoc method
                     * @name $rootScope.Scope#$apply
                     * @kind function
                     *
                     * @description
                     * `$apply()` is used to execute an expression in angular from outside of the angular
                     * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
                     * Because we are calling into the angular framework we need to perform proper scope life
                     * cycle of {@link ng.$exceptionHandler exception handling},
                     * {@link ng.$rootScope.Scope#$digest executing watches}.
                     *
                     * ## Life cycle
                     *
                     * # Pseudo-Code of `$apply()`
                     * ```js
                         function $apply(expr) {
                           try {
                             return $eval(expr);
                           } catch (e) {
                             $exceptionHandler(e);
                           } finally {
                             $root.$digest();
                           }
                         }
                     * ```
                     *
                     *
                     * Scope's `$apply()` method transitions through the following stages:
                     *
                     * 1. The {@link guide/expression expression} is executed using the
                     *    {@link ng.$rootScope.Scope#$eval $eval()} method.
                     * 2. Any exceptions from the execution of the expression are forwarded to the
                     *    {@link ng.$exceptionHandler $exceptionHandler} service.
                     * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
                     *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
                     *
                     *
                     * @param {(string|function())=} exp An angular expression to be executed.
                     *
                     *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
                     *    - `function(scope)`: execute the function with current `scope` parameter.
                     *
                     * @returns {*} The result of evaluating the expression.
                     */
                    $apply: function (expr) {
                        try {
                            beginPhase('$apply');
                            return this.$eval(expr);
                        }
                        catch (e) {
                            $exceptionHandler(e);
                        }
                        finally {
                            clearPhase();
                            try {
                                $rootScope.$digest();
                            }
                            catch (e) {
                                $exceptionHandler(e);
                                throw e;
                            }
                        }
                    },
                    /**
                     * @ngdoc method
                     * @name $rootScope.Scope#$applyAsync
                     * @kind function
                     *
                     * @description
                     * Schedule the invokation of $apply to occur at a later time. The actual time difference
                     * varies across browsers, but is typically around ~10 milliseconds.
                     *
                     * This can be used to queue up multiple expressions which need to be evaluated in the same
                     * digest.
                     *
                     * @param {(string|function())=} exp An angular expression to be executed.
                     *
                     *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
                     *    - `function(scope)`: execute the function with current `scope` parameter.
                     */
                    $applyAsync: function (expr) {
                        var scope = this;
                        expr && applyAsyncQueue.push($applyAsyncExpression);
                        scheduleApplyAsync();
                        function $applyAsyncExpression() {
                            scope.$eval(expr);
                        }
                    },
                    /**
                     * @ngdoc method
                     * @name $rootScope.Scope#$on
                     * @kind function
                     *
                     * @description
                     * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
                     * discussion of event life cycle.
                     *
                     * The event listener function format is: `function(event, args...)`. The `event` object
                     * passed into the listener has the following attributes:
                     *
                     *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
                     *     `$broadcast`-ed.
                     *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
                     *     event propagates through the scope hierarchy, this property is set to null.
                     *   - `name` - `{string}`: name of the event.
                     *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
                     *     further event propagation (available only for events that were `$emit`-ed).
                     *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
                     *     to true.
                     *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
                     *
                     * @param {string} name Event name to listen on.
                     * @param {function(event, ...args)} listener Function to call when the event is emitted.
                     * @returns {function()} Returns a deregistration function for this listener.
                     */
                    $on: function (name, listener) {
                        var namedListeners = this.$$listeners[name];
                        if (!namedListeners) {
                            this.$$listeners[name] = namedListeners = [];
                        }
                        namedListeners.push(listener);
                        var current = this;
                        do {
                            if (!current.$$listenerCount[name]) {
                                current.$$listenerCount[name] = 0;
                            }
                            current.$$listenerCount[name]++;
                        } while ((current = current.$parent));
                        var self = this;
                        return function () {
                            var indexOfListener = namedListeners.indexOf(listener);
                            if (indexOfListener !== -1) {
                                namedListeners[indexOfListener] = null;
                                decrementListenerCount(self, 1, name);
                            }
                        };
                    },
                    /**
                     * @ngdoc method
                     * @name $rootScope.Scope#$emit
                     * @kind function
                     *
                     * @description
                     * Dispatches an event `name` upwards through the scope hierarchy notifying the
                     * registered {@link ng.$rootScope.Scope#$on} listeners.
                     *
                     * The event life cycle starts at the scope on which `$emit` was called. All
                     * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
                     * notified. Afterwards, the event traverses upwards toward the root scope and calls all
                     * registered listeners along the way. The event will stop propagating if one of the listeners
                     * cancels it.
                     *
                     * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
                     * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
                     *
                     * @param {string} name Event name to emit.
                     * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
                     * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
                     */
                    $emit: function (name, args) {
                        var empty = [], namedListeners, scope = this, stopPropagation = false, event = {
                            name: name,
                            targetScope: scope,
                            stopPropagation: function () { stopPropagation = true; },
                            preventDefault: function () {
                                event.defaultPrevented = true;
                            },
                            defaultPrevented: false
                        }, listenerArgs = concat([event], arguments, 1), i, length;
                        do {
                            namedListeners = scope.$$listeners[name] || empty;
                            event.currentScope = scope;
                            for (i = 0, length = namedListeners.length; i < length; i++) {
                                // if listeners were deregistered, defragment the array
                                if (!namedListeners[i]) {
                                    namedListeners.splice(i, 1);
                                    i--;
                                    length--;
                                    continue;
                                }
                                try {
                                    //allow all listeners attached to the current scope to run
                                    namedListeners[i].apply(null, listenerArgs);
                                }
                                catch (e) {
                                    $exceptionHandler(e);
                                }
                            }
                            //if any listener on the current scope stops propagation, prevent bubbling
                            if (stopPropagation) {
                                event.currentScope = null;
                                return event;
                            }
                            //traverse upwards
                            scope = scope.$parent;
                        } while (scope);
                        event.currentScope = null;
                        return event;
                    },
                    /**
                     * @ngdoc method
                     * @name $rootScope.Scope#$broadcast
                     * @kind function
                     *
                     * @description
                     * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
                     * registered {@link ng.$rootScope.Scope#$on} listeners.
                     *
                     * The event life cycle starts at the scope on which `$broadcast` was called. All
                     * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
                     * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
                     * scope and calls all registered listeners along the way. The event cannot be canceled.
                     *
                     * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
                     * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
                     *
                     * @param {string} name Event name to broadcast.
                     * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
                     * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
                     */
                    $broadcast: function (name, args) {
                        var target = this, current = target, next = target, event = {
                            name: name,
                            targetScope: target,
                            preventDefault: function () {
                                event.defaultPrevented = true;
                            },
                            defaultPrevented: false
                        };
                        if (!target.$$listenerCount[name])
                            return event;
                        var listenerArgs = concat([event], arguments, 1), listeners, i, length;
                        //down while you can, then up and next sibling or up and next sibling until back at root
                        while ((current = next)) {
                            event.currentScope = current;
                            listeners = current.$$listeners[name] || [];
                            for (i = 0, length = listeners.length; i < length; i++) {
                                // if listeners were deregistered, defragment the array
                                if (!listeners[i]) {
                                    listeners.splice(i, 1);
                                    i--;
                                    length--;
                                    continue;
                                }
                                try {
                                    listeners[i].apply(null, listenerArgs);
                                }
                                catch (e) {
                                    $exceptionHandler(e);
                                }
                            }
                            // Insanity Warning: scope depth-first traversal
                            // yes, this code is a bit crazy, but it works and we have tests to prove it!
                            // this piece should be kept in sync with the traversal in $digest
                            // (though it differs due to having the extra check for $$listenerCount)
                            if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
                                (current !== target && current.$$nextSibling)))) {
                                while (current !== target && !(next = current.$$nextSibling)) {
                                    current = current.$parent;
                                }
                            }
                        }
                        event.currentScope = null;
                        return event;
                    }
                };
                var $rootScope = new Scope();
                //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
                var asyncQueue = $rootScope.$$asyncQueue = [];
                var postDigestQueue = $rootScope.$$postDigestQueue = [];
                var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];
                return $rootScope;
                function beginPhase(phase) {
                    if ($rootScope.$$phase) {
                        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
                    }
                    $rootScope.$$phase = phase;
                }
                function clearPhase() {
                    $rootScope.$$phase = null;
                }
                function decrementListenerCount(current, count, name) {
                    do {
                        current.$$listenerCount[name] -= count;
                        if (current.$$listenerCount[name] === 0) {
                            delete current.$$listenerCount[name];
                        }
                    } while ((current = current.$parent));
                }
                /**
                 * function used as an initial value for watchers.
                 * because it's unique we can easily tell it apart from other values
                 */
                function initWatchVal() { }
                function flushApplyAsync() {
                    while (applyAsyncQueue.length) {
                        try {
                            applyAsyncQueue.shift()();
                        }
                        catch (e) {
                            $exceptionHandler(e);
                        }
                    }
                    applyAsyncId = null;
                }
                function scheduleApplyAsync() {
                    if (applyAsyncId === null) {
                        applyAsyncId = $browser.defer(function () {
                            $rootScope.$apply(flushApplyAsync);
                        });
                    }
                }
            }];
    }
    /**
     * @description
     * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
     */
    function $$SanitizeUriProvider() {
        var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/, imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;
        /**
         * @description
         * Retrieves or overrides the default regular expression that is used for whitelisting of safe
         * urls during a[href] sanitization.
         *
         * The sanitization is a security measure aimed at prevent XSS attacks via html links.
         *
         * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
         * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
         * regular expression. If a match is found, the original url is written into the dom. Otherwise,
         * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
         *
         * @param {RegExp=} regexp New regexp to whitelist urls with.
         * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
         *    chaining otherwise.
         */
        this.aHrefSanitizationWhitelist = function (regexp) {
            if (isDefined(regexp)) {
                aHrefSanitizationWhitelist = regexp;
                return this;
            }
            return aHrefSanitizationWhitelist;
        };
        /**
         * @description
         * Retrieves or overrides the default regular expression that is used for whitelisting of safe
         * urls during img[src] sanitization.
         *
         * The sanitization is a security measure aimed at prevent XSS attacks via html links.
         *
         * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
         * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
         * regular expression. If a match is found, the original url is written into the dom. Otherwise,
         * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
         *
         * @param {RegExp=} regexp New regexp to whitelist urls with.
         * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
         *    chaining otherwise.
         */
        this.imgSrcSanitizationWhitelist = function (regexp) {
            if (isDefined(regexp)) {
                imgSrcSanitizationWhitelist = regexp;
                return this;
            }
            return imgSrcSanitizationWhitelist;
        };
        this.$get = function () {
            return function sanitizeUri(uri, isImage) {
                var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
                var normalizedVal;
                normalizedVal = urlResolve(uri).href;
                if (normalizedVal !== '' && !normalizedVal.match(regex)) {
                    return 'unsafe:' + normalizedVal;
                }
                return uri;
            };
        };
    }
    var $sceMinErr = minErr('$sce');
    var SCE_CONTEXTS = {
        HTML: 'html',
        CSS: 'css',
        URL: 'url',
        // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
        // url.  (e.g. ng-include, script src, templateUrl)
        RESOURCE_URL: 'resourceUrl',
        JS: 'js'
    };
    // Helper functions follow.
    function adjustMatcher(matcher) {
        if (matcher === 'self') {
            return matcher;
        }
        else if (isString(matcher)) {
            // Strings match exactly except for 2 wildcards - '*' and '**'.
            // '*' matches any character except those from the set ':/.?&'.
            // '**' matches any character (like .* in a RegExp).
            // More than 2 *'s raises an error as it's ill defined.
            if (matcher.indexOf('***') > -1) {
                throw $sceMinErr('iwcard', 'Illegal sequence *** in string matcher.  String: {0}', matcher);
            }
            matcher = escapeForRegexp(matcher).
                replace('\\*\\*', '.*').
                replace('\\*', '[^:/.?&;]*');
            return new RegExp('^' + matcher + '$');
        }
        else if (isRegExp(matcher)) {
            // The only other type of matcher allowed is a Regexp.
            // Match entire URL / disallow partial matches.
            // Flags are reset (i.e. no global, ignoreCase or multiline)
            return new RegExp('^' + matcher.source + '$');
        }
        else {
            throw $sceMinErr('imatcher', 'Matchers may only be "self", string patterns or RegExp objects');
        }
    }
    function adjustMatchers(matchers) {
        var adjustedMatchers = [];
        if (isDefined(matchers)) {
            forEach(matchers, function (matcher) {
                adjustedMatchers.push(adjustMatcher(matcher));
            });
        }
        return adjustedMatchers;
    }
    /**
     * @ngdoc service
     * @name $sceDelegate
     * @kind function
     *
     * @description
     *
     * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
     * Contextual Escaping (SCE)} services to AngularJS.
     *
     * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
     * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
     * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
     * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
     * work because `$sce` delegates to `$sceDelegate` for these operations.
     *
     * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
     *
     * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
     * can override it completely to change the behavior of `$sce`, the common case would
     * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
     * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
     * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
     * $sceDelegateProvider.resourceUrlWhitelist} and {@link
     * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
     */
    /**
     * @ngdoc provider
     * @name $sceDelegateProvider
     * @description
     *
     * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
     * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
     * that the URLs used for sourcing Angular templates are safe.  Refer {@link
     * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
     * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
     *
     * For the general details about this service in Angular, read the main page for {@link ng.$sce
     * Strict Contextual Escaping (SCE)}.
     *
     * **Example**:  Consider the following case. <a name="example"></a>
     *
     * - your app is hosted at url `http://myapp.example.com/`
     * - but some of your templates are hosted on other domains you control such as
     *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
     * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
     *
     * Here is what a secure configuration for this scenario might look like:
     *
     * ```
     *  angular.module('myApp', []).config(function($sceDelegateProvider) {
     *    $sceDelegateProvider.resourceUrlWhitelist([
     *      // Allow same origin resource loads.
     *      'self',
     *      // Allow loading from our assets domain.  Notice the difference between * and **.
     *      'http://srv*.assets.example.com/**'
     *    ]);
     *
     *    // The blacklist overrides the whitelist so the open redirect here is blocked.
     *    $sceDelegateProvider.resourceUrlBlacklist([
     *      'http://myapp.example.com/clickThru**'
     *    ]);
     *  });
     * ```
     */
    function $SceDelegateProvider() {
        this.SCE_CONTEXTS = SCE_CONTEXTS;
        // Resource URLs can also be trusted by policy.
        var resourceUrlWhitelist = ['self'], resourceUrlBlacklist = [];
        /**
         * @ngdoc method
         * @name $sceDelegateProvider#resourceUrlWhitelist
         * @kind function
         *
         * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
         *     provided.  This must be an array or null.  A snapshot of this array is used so further
         *     changes to the array are ignored.
         *
         *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
         *     allowed in this array.
         *
         *     Note: **an empty whitelist array will block all URLs**!
         *
         * @return {Array} the currently set whitelist array.
         *
         * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
         * same origin resource requests.
         *
         * @description
         * Sets/Gets the whitelist of trusted resource URLs.
         */
        this.resourceUrlWhitelist = function (value) {
            if (arguments.length) {
                resourceUrlWhitelist = adjustMatchers(value);
            }
            return resourceUrlWhitelist;
        };
        /**
         * @ngdoc method
         * @name $sceDelegateProvider#resourceUrlBlacklist
         * @kind function
         *
         * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
         *     provided.  This must be an array or null.  A snapshot of this array is used so further
         *     changes to the array are ignored.
         *
         *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
         *     allowed in this array.
         *
         *     The typical usage for the blacklist is to **block
         *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
         *     these would otherwise be trusted but actually return content from the redirected domain.
         *
         *     Finally, **the blacklist overrides the whitelist** and has the final say.
         *
         * @return {Array} the currently set blacklist array.
         *
         * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
         * is no blacklist.)
         *
         * @description
         * Sets/Gets the blacklist of trusted resource URLs.
         */
        this.resourceUrlBlacklist = function (value) {
            if (arguments.length) {
                resourceUrlBlacklist = adjustMatchers(value);
            }
            return resourceUrlBlacklist;
        };
        this.$get = ['$injector', function ($injector) {
                var htmlSanitizer = function htmlSanitizer(html) {
                    throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
                };
                if ($injector.has('$sanitize')) {
                    htmlSanitizer = $injector.get('$sanitize');
                }
                function matchUrl(matcher, parsedUrl) {
                    if (matcher === 'self') {
                        return urlIsSameOrigin(parsedUrl);
                    }
                    else {
                        // definitely a regex.  See adjustMatchers()
                        return !!matcher.exec(parsedUrl.href);
                    }
                }
                function isResourceUrlAllowedByPolicy(url) {
                    var parsedUrl = urlResolve(url.toString());
                    var i, n, allowed = false;
                    // Ensure that at least one item from the whitelist allows this url.
                    for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
                        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
                            allowed = true;
                            break;
                        }
                    }
                    if (allowed) {
                        // Ensure that no item from the blacklist blocked this url.
                        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
                            if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
                                allowed = false;
                                break;
                            }
                        }
                    }
                    return allowed;
                }
                function generateHolderType(Base) {
                    var holderType = function TrustedValueHolderType(trustedValue) {
                        this.$$unwrapTrustedValue = function () {
                            return trustedValue;
                        };
                    };
                    if (Base) {
                        holderType.prototype = new Base();
                    }
                    holderType.prototype.valueOf = function sceValueOf() {
                        return this.$$unwrapTrustedValue();
                    };
                    holderType.prototype.toString = function sceToString() {
                        return this.$$unwrapTrustedValue().toString();
                    };
                    return holderType;
                }
                var trustedValueHolderBase = generateHolderType(), byType = {};
                byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
                byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
                byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
                byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
                byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);
                /**
                 * @ngdoc method
                 * @name $sceDelegate#trustAs
                 *
                 * @description
                 * Returns an object that is trusted by angular for use in specified strict
                 * contextual escaping contexts (such as ng-bind-html, ng-include, any src
                 * attribute interpolation, any dom event binding attribute interpolation
                 * such as for onclick,  etc.) that uses the provided value.
                 * See {@link ng.$sce $sce} for enabling strict contextual escaping.
                 *
                 * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
                 *   resourceUrl, html, js and css.
                 * @param {*} value The value that that should be considered trusted/safe.
                 * @returns {*} A value that can be used to stand in for the provided `value` in places
                 * where Angular expects a $sce.trustAs() return value.
                 */
                function trustAs(type, trustedValue) {
                    var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
                    if (!Constructor) {
                        throw $sceMinErr('icontext', 'Attempted to trust a value in invalid context. Context: {0}; Value: {1}', type, trustedValue);
                    }
                    if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
                        return trustedValue;
                    }
                    // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
                    // mutable objects, we ensure here that the value passed in is actually a string.
                    if (typeof trustedValue !== 'string') {
                        throw $sceMinErr('itype', 'Attempted to trust a non-string value in a content requiring a string: Context: {0}', type);
                    }
                    return new Constructor(trustedValue);
                }
                /**
                 * @ngdoc method
                 * @name $sceDelegate#valueOf
                 *
                 * @description
                 * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
                 * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
                 * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
                 *
                 * If the passed parameter is not a value that had been returned by {@link
                 * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
                 *
                 * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
                 *      call or anything else.
                 * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
                 *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
                 *     `value` unchanged.
                 */
                function valueOf(maybeTrusted) {
                    if (maybeTrusted instanceof trustedValueHolderBase) {
                        return maybeTrusted.$$unwrapTrustedValue();
                    }
                    else {
                        return maybeTrusted;
                    }
                }
                /**
                 * @ngdoc method
                 * @name $sceDelegate#getTrusted
                 *
                 * @description
                 * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
                 * returns the originally supplied value if the queried context type is a supertype of the
                 * created type.  If this condition isn't satisfied, throws an exception.
                 *
                 * @param {string} type The kind of context in which this value is to be used.
                 * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
                 *     `$sceDelegate.trustAs`} call.
                 * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
                 *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
                 */
                function getTrusted(type, maybeTrusted) {
                    if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
                        return maybeTrusted;
                    }
                    var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
                    if (constructor && maybeTrusted instanceof constructor) {
                        return maybeTrusted.$$unwrapTrustedValue();
                    }
                    // If we get here, then we may only take one of two actions.
                    // 1. sanitize the value for the requested type, or
                    // 2. throw an exception.
                    if (type === SCE_CONTEXTS.RESOURCE_URL) {
                        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
                            return maybeTrusted;
                        }
                        else {
                            throw $sceMinErr('insecurl', 'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}', maybeTrusted.toString());
                        }
                    }
                    else if (type === SCE_CONTEXTS.HTML) {
                        return htmlSanitizer(maybeTrusted);
                    }
                    throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
                }
                return { trustAs: trustAs,
                    getTrusted: getTrusted,
                    valueOf: valueOf };
            }];
    }
    /**
     * @ngdoc provider
     * @name $sceProvider
     * @description
     *
     * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
     * -   enable/disable Strict Contextual Escaping (SCE) in a module
     * -   override the default implementation with a custom delegate
     *
     * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
     */
    /* jshint maxlen: false*/
    /**
     * @ngdoc service
     * @name $sce
     * @kind function
     *
     * @description
     *
     * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
     *
     * # Strict Contextual Escaping
     *
     * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
     * contexts to result in a value that is marked as safe to use for that context.  One example of
     * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
     * to these contexts as privileged or SCE contexts.
     *
     * As of version 1.2, Angular ships with SCE enabled by default.
     *
     * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
     * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
     * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
     * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
     * to the top of your HTML document.
     *
     * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
     * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
     *
     * Here's an example of a binding in a privileged context:
     *
     * ```
     * <input ng-model="userHtml">
     * <div ng-bind-html="userHtml"></div>
     * ```
     *
     * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
     * disabled, this application allows the user to render arbitrary HTML into the DIV.
     * In a more realistic example, one may be rendering user comments, blog articles, etc. via
     * bindings.  (HTML is just one example of a context where rendering user controlled input creates
     * security vulnerabilities.)
     *
     * For the case of HTML, you might use a library, either on the client side, or on the server side,
     * to sanitize unsafe HTML before binding to the value and rendering it in the document.
     *
     * How would you ensure that every place that used these types of bindings was bound to a value that
     * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
     * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
     * properties/fields and forgot to update the binding to the sanitized value?
     *
     * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
     * determine that something explicitly says it's safe to use a value for binding in that
     * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
     * for those values that you can easily tell are safe - because they were received from your server,
     * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
     * allowing only the files in a specific directory to do this.  Ensuring that the internal API
     * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
     *
     * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
     * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
     * obtain values that will be accepted by SCE / privileged contexts.
     *
     *
     * ## How does it work?
     *
     * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
     * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
     * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
     * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
     *
     * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
     * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
     * simplified):
     *
     * ```
     * var ngBindHtmlDirective = ['$sce', function($sce) {
     *   return function(scope, element, attr) {
     *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
     *       element.html(value || '');
     *     });
     *   };
     * }];
     * ```
     *
     * ## Impact on loading templates
     *
     * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
     * `templateUrl`'s specified by {@link guide/directive directives}.
     *
     * By default, Angular only loads templates from the same domain and protocol as the application
     * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
     * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
     * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
     * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
     *
     * *Please note*:
     * The browser's
     * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
     * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
     * policy apply in addition to this and may further restrict whether the template is successfully
     * loaded.  This means that without the right CORS policy, loading templates from a different domain
     * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
     * browsers.
     *
     * ## This feels like too much overhead
     *
     * It's important to remember that SCE only applies to interpolation expressions.
     *
     * If your expressions are constant literals, they're automatically trusted and you don't need to
     * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
     * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
     *
     * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
     * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
     *
     * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
     * templates in `ng-include` from your application's domain without having to even know about SCE.
     * It blocks loading templates from other domains or loading templates over http from an https
     * served document.  You can change these by setting your own custom {@link
     * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
     * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
     *
     * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
     * application that's secure and can be audited to verify that with much more ease than bolting
     * security onto an application later.
     *
     * <a name="contexts"></a>
     * ## What trusted context types are supported?
     *
     * | Context             | Notes          |
     * |---------------------|----------------|
     * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
     * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
     * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
     * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
     * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
     *
     * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
     *
     *  Each element in these arrays must be one of the following:
     *
     *  - **'self'**
     *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
     *      domain** as the application document using the **same protocol**.
     *  - **String** (except the special value `'self'`)
     *    - The string is matched against the full *normalized / absolute URL* of the resource
     *      being tested (substring matches are not good enough.)
     *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
     *      match themselves.
     *    - `*`: matches zero or more occurrences of any character other than one of the following 6
     *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use
     *      in a whitelist.
     *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
     *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.
     *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
     *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
     *      http://foo.example.com/templates/**).
     *  - **RegExp** (*see caveat below*)
     *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
     *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
     *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
     *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a
     *      small number of cases.  A `.` character in the regex used when matching the scheme or a
     *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
     *      is highly recommended to use the string patterns and only fall back to regular expressions
     *      if they as a last resort.
     *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
     *      matched against the **entire** *normalized / absolute URL* of the resource being tested
     *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
     *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
     *    - If you are generating your JavaScript from some other templating engine (not
     *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
     *      remember to escape your regular expression (and be aware that you might need more than
     *      one level of escaping depending on your templating engine and the way you interpolated
     *      the value.)  Do make use of your platform's escaping mechanism as it might be good
     *      enough before coding your own.  e.g. Ruby has
     *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
     *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
     *      Javascript lacks a similar built in function for escaping.  Take a look at Google
     *      Closure library's [goog.string.regExpEscape(s)](
     *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
     *
     * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
     *
     * ## Show me an example using SCE.
     *
     * <example module="mySceApp" deps="angular-sanitize.js">
     * <file name="index.html">
     *   <div ng-controller="AppController as myCtrl">
     *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
     *     <b>User comments</b><br>
     *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
     *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
     *     exploit.
     *     <div class="well">
     *       <div ng-repeat="userComment in myCtrl.userComments">
     *         <b>{{userComment.name}}</b>:
     *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
     *         <br>
     *       </div>
     *     </div>
     *   </div>
     * </file>
     *
     * <file name="script.js">
     *   angular.module('mySceApp', ['ngSanitize'])
     *     .controller('AppController', ['$http', '$templateCache', '$sce',
     *       function($http, $templateCache, $sce) {
     *         var self = this;
     *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
     *           self.userComments = userComments;
     *         });
     *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
     *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
     *             'sanitization.&quot;">Hover over this text.</span>');
     *       }]);
     * </file>
     *
     * <file name="test_data.json">
     * [
     *   { "name": "Alice",
     *     "htmlComment":
     *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
     *   },
     *   { "name": "Bob",
     *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
     *   }
     * ]
     * </file>
     *
     * <file name="protractor.js" type="protractor">
     *   describe('SCE doc demo', function() {
     *     it('should sanitize untrusted values', function() {
     *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
     *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
     *     });
     *
     *     it('should NOT sanitize explicitly trusted values', function() {
     *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
     *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
     *           'sanitization.&quot;">Hover over this text.</span>');
     *     });
     *   });
     * </file>
     * </example>
     *
     *
     *
     * ## Can I disable SCE completely?
     *
     * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
     * for little coding overhead.  It will be much harder to take an SCE disabled application and
     * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
     * for cases where you have a lot of existing code that was written before SCE was introduced and
     * you're migrating them a module at a time.
     *
     * That said, here's how you can completely disable SCE:
     *
     * ```
     * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
     *   // Completely disable SCE.  For demonstration purposes only!
     *   // Do not use in new projects.
     *   $sceProvider.enabled(false);
     * });
     * ```
     *
     */
    /* jshint maxlen: 100 */
    function $SceProvider() {
        var enabled = true;
        /**
         * @ngdoc method
         * @name $sceProvider#enabled
         * @kind function
         *
         * @param {boolean=} value If provided, then enables/disables SCE.
         * @return {boolean} true if SCE is enabled, false otherwise.
         *
         * @description
         * Enables/disables SCE and returns the current value.
         */
        this.enabled = function (value) {
            if (arguments.length) {
                enabled = !!value;
            }
            return enabled;
        };
        /* Design notes on the default implementation for SCE.
         *
         * The API contract for the SCE delegate
         * -------------------------------------
         * The SCE delegate object must provide the following 3 methods:
         *
         * - trustAs(contextEnum, value)
         *     This method is used to tell the SCE service that the provided value is OK to use in the
         *     contexts specified by contextEnum.  It must return an object that will be accepted by
         *     getTrusted() for a compatible contextEnum and return this value.
         *
         * - valueOf(value)
         *     For values that were not produced by trustAs(), return them as is.  For values that were
         *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
         *     trustAs is wrapping the given values into some type, this operation unwraps it when given
         *     such a value.
         *
         * - getTrusted(contextEnum, value)
         *     This function should return the a value that is safe to use in the context specified by
         *     contextEnum or throw and exception otherwise.
         *
         * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
         * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
         * instance, an implementation could maintain a registry of all trusted objects by context.  In
         * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
         * return the same object passed in if it was found in the registry under a compatible context or
         * throw an exception otherwise.  An implementation might only wrap values some of the time based
         * on some criteria.  getTrusted() might return a value and not throw an exception for special
         * constants or objects even if not wrapped.  All such implementations fulfill this contract.
         *
         *
         * A note on the inheritance model for SCE contexts
         * ------------------------------------------------
         * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
         * is purely an implementation details.
         *
         * The contract is simply this:
         *
         *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
         *     will also succeed.
         *
         * Inheritance happens to capture this in a natural way.  In some future, we
         * may not use inheritance anymore.  That is OK because no code outside of
         * sce.js and sceSpecs.js would need to be aware of this detail.
         */
        this.$get = ['$parse', '$sceDelegate', function ($parse, $sceDelegate) {
                // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
                // the "expression(javascript expression)" syntax which is insecure.
                if (enabled && msie < 8) {
                    throw $sceMinErr('iequirks', 'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
                        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
                        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
                }
                var sce = shallowCopy(SCE_CONTEXTS);
                /**
                 * @ngdoc method
                 * @name $sce#isEnabled
                 * @kind function
                 *
                 * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
                 * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
                 *
                 * @description
                 * Returns a boolean indicating if SCE is enabled.
                 */
                sce.isEnabled = function () {
                    return enabled;
                };
                sce.trustAs = $sceDelegate.trustAs;
                sce.getTrusted = $sceDelegate.getTrusted;
                sce.valueOf = $sceDelegate.valueOf;
                if (!enabled) {
                    sce.trustAs = sce.getTrusted = function (type, value) { return value; };
                    sce.valueOf = identity;
                }
                /**
                 * @ngdoc method
                 * @name $sce#parseAs
                 *
                 * @description
                 * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
                 * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
                 * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
                 * *result*)}
                 *
                 * @param {string} type The kind of SCE context in which this result will be used.
                 * @param {string} expression String expression to compile.
                 * @returns {function(context, locals)} a function which represents the compiled expression:
                 *
                 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
                 *      are evaluated against (typically a scope object).
                 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
                 *      `context`.
                 */
                sce.parseAs = function sceParseAs(type, expr) {
                    var parsed = $parse(expr);
                    if (parsed.literal && parsed.constant) {
                        return parsed;
                    }
                    else {
                        return $parse(expr, function (value) {
                            return sce.getTrusted(type, value);
                        });
                    }
                };
                /**
                 * @ngdoc method
                 * @name $sce#trustAs
                 *
                 * @description
                 * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
                 * returns an object that is trusted by angular for use in specified strict contextual
                 * escaping contexts (such as ng-bind-html, ng-include, any src attribute
                 * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
                 * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
                 * escaping.
                 *
                 * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
                 *   resource_url, html, js and css.
                 * @param {*} value The value that that should be considered trusted/safe.
                 * @returns {*} A value that can be used to stand in for the provided `value` in places
                 * where Angular expects a $sce.trustAs() return value.
                 */
                /**
                 * @ngdoc method
                 * @name $sce#trustAsHtml
                 *
                 * @description
                 * Shorthand method.  `$sce.trustAsHtml(value)` →
                 *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
                 *
                 * @param {*} value The value to trustAs.
                 * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
                 *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
                 *     only accept expressions that are either literal constants or are the
                 *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
                 */
                /**
                 * @ngdoc method
                 * @name $sce#trustAsUrl
                 *
                 * @description
                 * Shorthand method.  `$sce.trustAsUrl(value)` →
                 *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
                 *
                 * @param {*} value The value to trustAs.
                 * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
                 *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
                 *     only accept expressions that are either literal constants or are the
                 *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
                 */
                /**
                 * @ngdoc method
                 * @name $sce#trustAsResourceUrl
                 *
                 * @description
                 * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
                 *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
                 *
                 * @param {*} value The value to trustAs.
                 * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
                 *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
                 *     only accept expressions that are either literal constants or are the return
                 *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
                 */
                /**
                 * @ngdoc method
                 * @name $sce#trustAsJs
                 *
                 * @description
                 * Shorthand method.  `$sce.trustAsJs(value)` →
                 *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
                 *
                 * @param {*} value The value to trustAs.
                 * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
                 *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
                 *     only accept expressions that are either literal constants or are the
                 *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
                 */
                /**
                 * @ngdoc method
                 * @name $sce#getTrusted
                 *
                 * @description
                 * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
                 * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
                 * originally supplied value if the queried context type is a supertype of the created type.
                 * If this condition isn't satisfied, throws an exception.
                 *
                 * @param {string} type The kind of context in which this value is to be used.
                 * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
                 *                         call.
                 * @returns {*} The value the was originally provided to
                 *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
                 *              Otherwise, throws an exception.
                 */
                /**
                 * @ngdoc method
                 * @name $sce#getTrustedHtml
                 *
                 * @description
                 * Shorthand method.  `$sce.getTrustedHtml(value)` →
                 *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
                 *
                 * @param {*} value The value to pass to `$sce.getTrusted`.
                 * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
                 */
                /**
                 * @ngdoc method
                 * @name $sce#getTrustedCss
                 *
                 * @description
                 * Shorthand method.  `$sce.getTrustedCss(value)` →
                 *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
                 *
                 * @param {*} value The value to pass to `$sce.getTrusted`.
                 * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
                 */
                /**
                 * @ngdoc method
                 * @name $sce#getTrustedUrl
                 *
                 * @description
                 * Shorthand method.  `$sce.getTrustedUrl(value)` →
                 *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
                 *
                 * @param {*} value The value to pass to `$sce.getTrusted`.
                 * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
                 */
                /**
                 * @ngdoc method
                 * @name $sce#getTrustedResourceUrl
                 *
                 * @description
                 * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
                 *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
                 *
                 * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
                 * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
                 */
                /**
                 * @ngdoc method
                 * @name $sce#getTrustedJs
                 *
                 * @description
                 * Shorthand method.  `$sce.getTrustedJs(value)` →
                 *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
                 *
                 * @param {*} value The value to pass to `$sce.getTrusted`.
                 * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
                 */
                /**
                 * @ngdoc method
                 * @name $sce#parseAsHtml
                 *
                 * @description
                 * Shorthand method.  `$sce.parseAsHtml(expression string)` →
                 *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
                 *
                 * @param {string} expression String expression to compile.
                 * @returns {function(context, locals)} a function which represents the compiled expression:
                 *
                 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
                 *      are evaluated against (typically a scope object).
                 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
                 *      `context`.
                 */
                /**
                 * @ngdoc method
                 * @name $sce#parseAsCss
                 *
                 * @description
                 * Shorthand method.  `$sce.parseAsCss(value)` →
                 *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
                 *
                 * @param {string} expression String expression to compile.
                 * @returns {function(context, locals)} a function which represents the compiled expression:
                 *
                 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
                 *      are evaluated against (typically a scope object).
                 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
                 *      `context`.
                 */
                /**
                 * @ngdoc method
                 * @name $sce#parseAsUrl
                 *
                 * @description
                 * Shorthand method.  `$sce.parseAsUrl(value)` →
                 *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
                 *
                 * @param {string} expression String expression to compile.
                 * @returns {function(context, locals)} a function which represents the compiled expression:
                 *
                 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
                 *      are evaluated against (typically a scope object).
                 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
                 *      `context`.
                 */
                /**
                 * @ngdoc method
                 * @name $sce#parseAsResourceUrl
                 *
                 * @description
                 * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
                 *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
                 *
                 * @param {string} expression String expression to compile.
                 * @returns {function(context, locals)} a function which represents the compiled expression:
                 *
                 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
                 *      are evaluated against (typically a scope object).
                 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
                 *      `context`.
                 */
                /**
                 * @ngdoc method
                 * @name $sce#parseAsJs
                 *
                 * @description
                 * Shorthand method.  `$sce.parseAsJs(value)` →
                 *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
                 *
                 * @param {string} expression String expression to compile.
                 * @returns {function(context, locals)} a function which represents the compiled expression:
                 *
                 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
                 *      are evaluated against (typically a scope object).
                 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
                 *      `context`.
                 */
                // Shorthand delegations.
                var parse = sce.parseAs, getTrusted = sce.getTrusted, trustAs = sce.trustAs;
                forEach(SCE_CONTEXTS, function (enumValue, name) {
                    var lName = lowercase(name);
                    sce[camelCase("parse_as_" + lName)] = function (expr) {
                        return parse(enumValue, expr);
                    };
                    sce[camelCase("get_trusted_" + lName)] = function (value) {
                        return getTrusted(enumValue, value);
                    };
                    sce[camelCase("trust_as_" + lName)] = function (value) {
                        return trustAs(enumValue, value);
                    };
                });
                return sce;
            }];
    }
    /**
     * !!! This is an undocumented "private" service !!!
     *
     * @name $sniffer
     * @requires $window
     * @requires $document
     *
     * @property {boolean} history Does the browser support html5 history api ?
     * @property {boolean} transitions Does the browser support CSS transition events ?
     * @property {boolean} animations Does the browser support CSS animation events ?
     *
     * @description
     * This is very simple implementation of testing browser's features.
     */
    function $SnifferProvider() {
        this.$get = ['$window', '$document', function ($window, $document) {
                var eventSupport = {}, android = int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]), boxee = /Boxee/i.test(($window.navigator || {}).userAgent), document = $document[0] || {}, vendorPrefix, vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/, bodyStyle = document.body && document.body.style, transitions = false, animations = false, match;
                if (bodyStyle) {
                    for (var prop in bodyStyle) {
                        if (match = vendorRegex.exec(prop)) {
                            vendorPrefix = match[0];
                            vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
                            break;
                        }
                    }
                    if (!vendorPrefix) {
                        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
                    }
                    transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
                    animations = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));
                    if (android && (!transitions || !animations)) {
                        transitions = isString(document.body.style.webkitTransition);
                        animations = isString(document.body.style.webkitAnimation);
                    }
                }
                return {
                    // Android has history.pushState, but it does not update location correctly
                    // so let's not use the history API at all.
                    // http://code.google.com/p/android/issues/detail?id=17471
                    // https://github.com/angular/angular.js/issues/904
                    // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
                    // so let's not use the history API also
                    // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
                    // jshint -W018
                    history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
                    // jshint +W018
                    hasEvent: function (event) {
                        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
                        // it. In particular the event is not fired when backspace or delete key are pressed or
                        // when cut operation is performed.
                        if (event == 'input' && msie == 9)
                            return false;
                        if (isUndefined(eventSupport[event])) {
                            var divElm = document.createElement('div');
                            eventSupport[event] = 'on' + event in divElm;
                        }
                        return eventSupport[event];
                    },
                    csp: csp(),
                    vendorPrefix: vendorPrefix,
                    transitions: transitions,
                    animations: animations,
                    android: android
                };
            }];
    }
    var $compileMinErr = minErr('$compile');
    /**
     * @ngdoc service
     * @name $templateRequest
     *
     * @description
     * The `$templateRequest` service downloads the provided template using `$http` and, upon success,
     * stores the contents inside of `$templateCache`. If the HTTP request fails or the response data
     * of the HTTP request is empty then a `$compile` error will be thrown (the exception can be thwarted
     * by setting the 2nd parameter of the function to true).
     *
     * @param {string} tpl The HTTP request template URL
     * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
     *
     * @return {Promise} the HTTP Promise for the given.
     *
     * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
     */
    function $TemplateRequestProvider() {
        this.$get = ['$templateCache', '$http', '$q', function ($templateCache, $http, $q) {
                function handleRequestFn(tpl, ignoreRequestError) {
                    var self = handleRequestFn;
                    self.totalPendingRequests++;
                    var transformResponse = $http.defaults && $http.defaults.transformResponse;
                    if (isArray(transformResponse)) {
                        transformResponse = transformResponse.filter(function (transformer) {
                            return transformer !== defaultHttpResponseTransform;
                        });
                    }
                    else if (transformResponse === defaultHttpResponseTransform) {
                        transformResponse = null;
                    }
                    var httpOptions = {
                        cache: $templateCache,
                        transformResponse: transformResponse
                    };
                    return $http.get(tpl, httpOptions)
                        .then(function (response) {
                        var html = response.data;
                        self.totalPendingRequests--;
                        $templateCache.put(tpl, html);
                        return html;
                    }, handleError);
                    function handleError(resp) {
                        self.totalPendingRequests--;
                        if (!ignoreRequestError) {
                            throw $compileMinErr('tpload', 'Failed to load template: {0}', tpl);
                        }
                        return $q.reject(resp);
                    }
                }
                handleRequestFn.totalPendingRequests = 0;
                return handleRequestFn;
            }];
    }
    function $$TestabilityProvider() {
        this.$get = ['$rootScope', '$browser', '$location',
            function ($rootScope, $browser, $location) {
                /**
                 * @name $testability
                 *
                 * @description
                 * The private $$testability service provides a collection of methods for use when debugging
                 * or by automated test and debugging tools.
                 */
                var testability = {};
                /**
                 * @name $$testability#findBindings
                 *
                 * @description
                 * Returns an array of elements that are bound (via ng-bind or {{}})
                 * to expressions matching the input.
                 *
                 * @param {Element} element The element root to search from.
                 * @param {string} expression The binding expression to match.
                 * @param {boolean} opt_exactMatch If true, only returns exact matches
                 *     for the expression. Filters and whitespace are ignored.
                 */
                testability.findBindings = function (element, expression, opt_exactMatch) {
                    var bindings = element.getElementsByClassName('ng-binding');
                    var matches = [];
                    forEach(bindings, function (binding) {
                        var dataBinding = angular.element(binding).data('$binding');
                        if (dataBinding) {
                            forEach(dataBinding, function (bindingName) {
                                if (opt_exactMatch) {
                                    var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
                                    if (matcher.test(bindingName)) {
                                        matches.push(binding);
                                    }
                                }
                                else {
                                    if (bindingName.indexOf(expression) != -1) {
                                        matches.push(binding);
                                    }
                                }
                            });
                        }
                    });
                    return matches;
                };
                /**
                 * @name $$testability#findModels
                 *
                 * @description
                 * Returns an array of elements that are two-way found via ng-model to
                 * expressions matching the input.
                 *
                 * @param {Element} element The element root to search from.
                 * @param {string} expression The model expression to match.
                 * @param {boolean} opt_exactMatch If true, only returns exact matches
                 *     for the expression.
                 */
                testability.findModels = function (element, expression, opt_exactMatch) {
                    var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
                    for (var p = 0; p < prefixes.length; ++p) {
                        var attributeEquals = opt_exactMatch ? '=' : '*=';
                        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
                        var elements = element.querySelectorAll(selector);
                        if (elements.length) {
                            return elements;
                        }
                    }
                };
                /**
                 * @name $$testability#getLocation
                 *
                 * @description
                 * Shortcut for getting the location in a browser agnostic way. Returns
                 *     the path, search, and hash. (e.g. /path?a=b#hash)
                 */
                testability.getLocation = function () {
                    return $location.url();
                };
                /**
                 * @name $$testability#setLocation
                 *
                 * @description
                 * Shortcut for navigating to a location without doing a full page reload.
                 *
                 * @param {string} url The location url (path, search and hash,
                 *     e.g. /path?a=b#hash) to go to.
                 */
                testability.setLocation = function (url) {
                    if (url !== $location.url()) {
                        $location.url(url);
                        $rootScope.$digest();
                    }
                };
                /**
                 * @name $$testability#whenStable
                 *
                 * @description
                 * Calls the callback when $timeout and $http requests are completed.
                 *
                 * @param {function} callback
                 */
                testability.whenStable = function (callback) {
                    $browser.notifyWhenNoOutstandingRequests(callback);
                };
                return testability;
            }];
    }
    function $TimeoutProvider() {
        this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
            function ($rootScope, $browser, $q, $$q, $exceptionHandler) {
                var deferreds = {};
                /**
                 * @ngdoc service
                 * @name $timeout
                 *
                 * @description
                 * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
                 * block and delegates any exceptions to
                 * {@link ng.$exceptionHandler $exceptionHandler} service.
                 *
                 * The return value of registering a timeout function is a promise, which will be resolved when
                 * the timeout is reached and the timeout function is executed.
                 *
                 * To cancel a timeout request, call `$timeout.cancel(promise)`.
                 *
                 * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
                 * synchronously flush the queue of deferred functions.
                 *
                 * @param {function()} fn A function, whose execution should be delayed.
                 * @param {number=} [delay=0] Delay in milliseconds.
                 * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
                 *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
                 * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
                 *   promise will be resolved with is the return value of the `fn` function.
                 *
                 */
                function timeout(fn, delay, invokeApply) {
                    var skipApply = (isDefined(invokeApply) && !invokeApply), deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise, timeoutId;
                    timeoutId = $browser.defer(function () {
                        try {
                            deferred.resolve(fn());
                        }
                        catch (e) {
                            deferred.reject(e);
                            $exceptionHandler(e);
                        }
                        finally {
                            delete deferreds[promise.$$timeoutId];
                        }
                        if (!skipApply)
                            $rootScope.$apply();
                    }, delay);
                    promise.$$timeoutId = timeoutId;
                    deferreds[timeoutId] = deferred;
                    return promise;
                }
                /**
                 * @ngdoc method
                 * @name $timeout#cancel
                 *
                 * @description
                 * Cancels a task associated with the `promise`. As a result of this, the promise will be
                 * resolved with a rejection.
                 *
                 * @param {Promise=} promise Promise returned by the `$timeout` function.
                 * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
                 *   canceled.
                 */
                timeout.cancel = function (promise) {
                    if (promise && promise.$$timeoutId in deferreds) {
                        deferreds[promise.$$timeoutId].reject('canceled');
                        delete deferreds[promise.$$timeoutId];
                        return $browser.defer.cancel(promise.$$timeoutId);
                    }
                    return false;
                };
                return timeout;
            }];
    }
    // NOTE:  The usage of window and document instead of $window and $document here is
    // deliberate.  This service depends on the specific behavior of anchor nodes created by the
    // browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
    // cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
    // doesn't know about mocked locations and resolves URLs to the real document - which is
    // exactly the behavior needed here.  There is little value is mocking these out for this
    // service.
    var urlParsingNode = document.createElement("a");
    var originUrl = urlResolve(window.location.href);
    /**
     *
     * Implementation Notes for non-IE browsers
     * ----------------------------------------
     * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
     * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
     * URL will be resolved into an absolute URL in the context of the application document.
     * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
     * properties are all populated to reflect the normalized URL.  This approach has wide
     * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
     * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
     *
     * Implementation Notes for IE
     * ---------------------------
     * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
     * browsers.  However, the parsed components will not be set if the URL assigned did not specify
     * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
     * work around that by performing the parsing in a 2nd step by taking a previously normalized
     * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
     * properties such as protocol, hostname, port, etc.
     *
     * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
     * uses the inner HTML approach to assign the URL as part of an HTML snippet -
     * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
     * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
     * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
     * method and IE < 8 is unsupported.
     *
     * References:
     *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
     *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
     *   http://url.spec.whatwg.org/#urlutils
     *   https://github.com/angular/angular.js/pull/2902
     *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
     *
     * @kind function
     * @param {string} url The URL to be parsed.
     * @description Normalizes and parses a URL.
     * @returns {object} Returns the normalized URL as a dictionary.
     *
     *   | member name   | Description    |
     *   |---------------|----------------|
     *   | href          | A normalized version of the provided URL if it was not an absolute URL |
     *   | protocol      | The protocol including the trailing colon                              |
     *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
     *   | search        | The search params, minus the question mark                             |
     *   | hash          | The hash string, minus the hash symbol
     *   | hostname      | The hostname
     *   | port          | The port, without ":"
     *   | pathname      | The pathname, beginning with "/"
     *
     */
    function urlResolve(url) {
        var href = url;
        if (msie) {
            // Normalize before parse.  Refer Implementation Notes on why this is
            // done in two steps on IE.
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute('href', href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: (urlParsingNode.pathname.charAt(0) === '/')
                ? urlParsingNode.pathname
                : '/' + urlParsingNode.pathname
        };
    }
    /**
     * Parse a request URL and determine whether this is a same-origin request as the application document.
     *
     * @param {string|object} requestUrl The url of the request as a string that will be resolved
     * or a parsed URL object.
     * @returns {boolean} Whether the request is for the same origin as the application document.
     */
    function urlIsSameOrigin(requestUrl) {
        var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
        return (parsed.protocol === originUrl.protocol &&
            parsed.host === originUrl.host);
    }
    /**
     * @ngdoc service
     * @name $window
     *
     * @description
     * A reference to the browser's `window` object. While `window`
     * is globally available in JavaScript, it causes testability problems, because
     * it is a global variable. In angular we always refer to it through the
     * `$window` service, so it may be overridden, removed or mocked for testing.
     *
     * Expressions, like the one defined for the `ngClick` directive in the example
     * below, are evaluated with respect to the current scope.  Therefore, there is
     * no risk of inadvertently coding in a dependency on a global value in such an
     * expression.
     *
     * @example
       <example module="windowExample">
         <file name="index.html">
           <script>
             angular.module('windowExample', [])
               .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
                 $scope.greeting = 'Hello, World!';
                 $scope.doGreeting = function(greeting) {
                   $window.alert(greeting);
                 };
               }]);
           </script>
           <div ng-controller="ExampleController">
             <input type="text" ng-model="greeting" />
             <button ng-click="doGreeting(greeting)">ALERT</button>
           </div>
         </file>
         <file name="protractor.js" type="protractor">
          it('should display the greeting in the input box', function() {
           element(by.model('greeting')).sendKeys('Hello, E2E Tests');
           // If we click the button it will block the test runner
           // element(':button').click();
          });
         </file>
       </example>
     */
    function $WindowProvider() {
        this.$get = valueFn(window);
    }
    /* global currencyFilter: true,
     dateFilter: true,
     filterFilter: true,
     jsonFilter: true,
     limitToFilter: true,
     lowercaseFilter: true,
     numberFilter: true,
     orderByFilter: true,
     uppercaseFilter: true,
     */
    /**
     * @ngdoc provider
     * @name $filterProvider
     * @description
     *
     * Filters are just functions which transform input to an output. However filters need to be
     * Dependency Injected. To achieve this a filter definition consists of a factory function which is
     * annotated with dependencies and is responsible for creating a filter function.
     *
     * ```js
     *   // Filter registration
     *   function MyModule($provide, $filterProvider) {
     *     // create a service to demonstrate injection (not always needed)
     *     $provide.value('greet', function(name){
     *       return 'Hello ' + name + '!';
     *     });
     *
     *     // register a filter factory which uses the
     *     // greet service to demonstrate DI.
     *     $filterProvider.register('greet', function(greet){
     *       // return the filter function which uses the greet service
     *       // to generate salutation
     *       return function(text) {
     *         // filters need to be forgiving so check input validity
     *         return text && greet(text) || text;
     *       };
     *     });
     *   }
     * ```
     *
     * The filter function is registered with the `$injector` under the filter name suffix with
     * `Filter`.
     *
     * ```js
     *   it('should be the same instance', inject(
     *     function($filterProvider) {
     *       $filterProvider.register('reverse', function(){
     *         return ...;
     *       });
     *     },
     *     function($filter, reverseFilter) {
     *       expect($filter('reverse')).toBe(reverseFilter);
     *     });
     * ```
     *
     *
     * For more information about how angular filters work, and how to create your own filters, see
     * {@link guide/filter Filters} in the Angular Developer Guide.
     */
    /**
     * @ngdoc service
     * @name $filter
     * @kind function
     * @description
     * Filters are used for formatting data displayed to the user.
     *
     * The general syntax in templates is as follows:
     *
     *         {{ expression [| filter_name[:parameter_value] ... ] }}
     *
     * @param {String} name Name of the filter function to retrieve
     * @return {Function} the filter function
     * @example
       <example name="$filter" module="filterExample">
         <file name="index.html">
           <div ng-controller="MainCtrl">
            <h3>{{ originalText }}</h3>
            <h3>{{ filteredText }}</h3>
           </div>
         </file>
    
         <file name="script.js">
          angular.module('filterExample', [])
          .controller('MainCtrl', function($scope, $filter) {
            $scope.originalText = 'hello';
            $scope.filteredText = $filter('uppercase')($scope.originalText);
          });
         </file>
       </example>
      */
    $FilterProvider.$inject = ['$provide'];
    function $FilterProvider($provide) {
        var suffix = 'Filter';
        /**
         * @ngdoc method
         * @name $filterProvider#register
         * @param {string|Object} name Name of the filter function, or an object map of filters where
         *    the keys are the filter names and the values are the filter factories.
         * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
         *    of the registered filter instances.
         */
        function register(name, factory) {
            if (isObject(name)) {
                var filters = {};
                forEach(name, function (filter, key) {
                    filters[key] = register(key, filter);
                });
                return filters;
            }
            else {
                return $provide.factory(name + suffix, factory);
            }
        }
        this.register = register;
        this.$get = ['$injector', function ($injector) {
                return function (name) {
                    return $injector.get(name + suffix);
                };
            }];
        ////////////////////////////////////////
        /* global
          currencyFilter: false,
          dateFilter: false,
          filterFilter: false,
          jsonFilter: false,
          limitToFilter: false,
          lowercaseFilter: false,
          numberFilter: false,
          orderByFilter: false,
          uppercaseFilter: false,
        */
        register('currency', currencyFilter);
        register('date', dateFilter);
        register('filter', filterFilter);
        register('json', jsonFilter);
        register('limitTo', limitToFilter);
        register('lowercase', lowercaseFilter);
        register('number', numberFilter);
        register('orderBy', orderByFilter);
        register('uppercase', uppercaseFilter);
    }
    /**
     * @ngdoc filter
     * @name filter
     * @kind function
     *
     * @description
     * Selects a subset of items from `array` and returns it as a new array.
     *
     * @param {Array} array The source array.
     * @param {string|Object|function()} expression The predicate to be used for selecting items from
     *   `array`.
     *
     *   Can be one of:
     *
     *   - `string`: The string is evaluated as an expression and the resulting value is used for substring match against
     *     the contents of the `array`. All strings or objects with string properties in `array` that contain this string
     *     will be returned. The predicate can be negated by prefixing the string with `!`.
     *
     *   - `Object`: A pattern object can be used to filter specific properties on objects contained
     *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
     *     which have property `name` containing "M" and property `phone` containing "1". A special
     *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
     *     property of the object. That's equivalent to the simple substring match with a `string`
     *     as described above. The predicate can be negated by prefixing the string with `!`.
     *     For Example `{name: "!M"}` predicate will return an array of items which have property `name`
     *     not containing "M".
     *
     *   - `function(value, index)`: A predicate function can be used to write arbitrary filters. The
     *     function is called for each element of `array`. The final result is an array of those
     *     elements that the predicate returned true for.
     *
     * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
     *     determining if the expected value (from the filter expression) and actual value (from
     *     the object in the array) should be considered a match.
     *
     *   Can be one of:
     *
     *   - `function(actual, expected)`:
     *     The function will be given the object value and the predicate value to compare and
     *     should return true if the item should be included in filtered result.
     *
     *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(expected, actual)}`.
     *     this is essentially strict comparison of expected and actual.
     *
     *   - `false|undefined`: A short hand for a function which will look for a substring match in case
     *     insensitive way.
     *
     * @example
       <example>
         <file name="index.html">
           <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                    {name:'Mary', phone:'800-BIG-MARY'},
                                    {name:'Mike', phone:'555-4321'},
                                    {name:'Adam', phone:'555-5678'},
                                    {name:'Julie', phone:'555-8765'},
                                    {name:'Juliette', phone:'555-5678'}]"></div>
    
           Search: <input ng-model="searchText">
           <table id="searchTextResults">
             <tr><th>Name</th><th>Phone</th></tr>
             <tr ng-repeat="friend in friends | filter:searchText">
               <td>{{friend.name}}</td>
               <td>{{friend.phone}}</td>
             </tr>
           </table>
           <hr>
           Any: <input ng-model="search.$"> <br>
           Name only <input ng-model="search.name"><br>
           Phone only <input ng-model="search.phone"><br>
           Equality <input type="checkbox" ng-model="strict"><br>
           <table id="searchObjResults">
             <tr><th>Name</th><th>Phone</th></tr>
             <tr ng-repeat="friendObj in friends | filter:search:strict">
               <td>{{friendObj.name}}</td>
               <td>{{friendObj.phone}}</td>
             </tr>
           </table>
         </file>
         <file name="protractor.js" type="protractor">
           var expectFriendNames = function(expectedNames, key) {
             element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
               arr.forEach(function(wd, i) {
                 expect(wd.getText()).toMatch(expectedNames[i]);
               });
             });
           };
    
           it('should search across all fields when filtering with a string', function() {
             var searchText = element(by.model('searchText'));
             searchText.clear();
             searchText.sendKeys('m');
             expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');
    
             searchText.clear();
             searchText.sendKeys('76');
             expectFriendNames(['John', 'Julie'], 'friend');
           });
    
           it('should search in specific fields when filtering with a predicate object', function() {
             var searchAny = element(by.model('search.$'));
             searchAny.clear();
             searchAny.sendKeys('i');
             expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
           });
           it('should use a equal comparison when comparator is true', function() {
             var searchName = element(by.model('search.name'));
             var strict = element(by.model('strict'));
             searchName.clear();
             searchName.sendKeys('Julie');
             strict.click();
             expectFriendNames(['Julie'], 'friendObj');
           });
         </file>
       </example>
     */
    function filterFilter() {
        return function (array, expression, comparator) {
            if (!isArray(array))
                return array;
            var comparatorType = typeof (comparator), predicates = [];
            predicates.check = function (value, index) {
                for (var j = 0; j < predicates.length; j++) {
                    if (!predicates[j](value, index)) {
                        return false;
                    }
                }
                return true;
            };
            if (comparatorType !== 'function') {
                if (comparatorType === 'boolean' && comparator) {
                    comparator = function (obj, text) {
                        return angular.equals(obj, text);
                    };
                }
                else {
                    comparator = function (obj, text) {
                        if (obj && text && typeof obj === 'object' && typeof text === 'object') {
                            for (var objKey in obj) {
                                if (objKey.charAt(0) !== '$' && hasOwnProperty.call(obj, objKey) &&
                                    comparator(obj[objKey], text[objKey])) {
                                    return true;
                                }
                            }
                            return false;
                        }
                        text = ('' + text).toLowerCase();
                        return ('' + obj).toLowerCase().indexOf(text) > -1;
                    };
                }
            }
            var search = function (obj, text) {
                if (typeof text === 'string' && text.charAt(0) === '!') {
                    return !search(obj, text.substr(1));
                }
                switch (typeof obj) {
                    case 'boolean':
                    case 'number':
                    case 'string':
                        return comparator(obj, text);
                    case 'object':
                        switch (typeof text) {
                            case 'object':
                                return comparator(obj, text);
                            default:
                                for (var objKey in obj) {
                                    if (objKey.charAt(0) !== '$' && search(obj[objKey], text)) {
                                        return true;
                                    }
                                }
                                break;
                        }
                        return false;
                    case 'array':
                        for (var i = 0; i < obj.length; i++) {
                            if (search(obj[i], text)) {
                                return true;
                            }
                        }
                        return false;
                    default:
                        return false;
                }
            };
            switch (typeof expression) {
                case 'boolean':
                case 'number':
                case 'string':
                    // Set up expression object and fall through
                    expression = { $: expression };
                // jshint -W086
                case 'object':
                    // jshint +W086
                    for (var key in expression) {
                        (function (path) {
                            if (typeof expression[path] === 'undefined')
                                return;
                            predicates.push(function (value) {
                                return search(path == '$' ? value : (value && value[path]), expression[path]);
                            });
                        })(key);
                    }
                    break;
                case 'function':
                    predicates.push(expression);
                    break;
                default:
                    return array;
            }
            var filtered = [];
            for (var j = 0; j < array.length; j++) {
                var value = array[j];
                if (predicates.check(value, j)) {
                    filtered.push(value);
                }
            }
            return filtered;
        };
    }
    /**
     * @ngdoc filter
     * @name currency
     * @kind function
     *
     * @description
     * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
     * symbol for current locale is used.
     *
     * @param {number} amount Input to filter.
     * @param {string=} symbol Currency symbol or identifier to be displayed.
     * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
     * @returns {string} Formatted number.
     *
     *
     * @example
       <example module="currencyExample">
         <file name="index.html">
           <script>
             angular.module('currencyExample', [])
               .controller('ExampleController', ['$scope', function($scope) {
                 $scope.amount = 1234.56;
               }]);
           </script>
           <div ng-controller="ExampleController">
             <input type="number" ng-model="amount"> <br>
             default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
             custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
             no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
           </div>
         </file>
         <file name="protractor.js" type="protractor">
           it('should init with 1234.56', function() {
             expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
             expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
             expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
           });
           it('should update', function() {
             if (browser.params.browser == 'safari') {
               // Safari does not understand the minus key. See
               // https://github.com/angular/protractor/issues/481
               return;
             }
             element(by.model('amount')).clear();
             element(by.model('amount')).sendKeys('-1234');
             expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');
             expect(element(by.id('currency-custom')).getText()).toBe('(USD$1,234.00)');
             expect(element(by.id('currency-no-fractions')).getText()).toBe('(USD$1,234)');
           });
         </file>
       </example>
     */
    currencyFilter.$inject = ['$locale'];
    function currencyFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function (amount, currencySymbol, fractionSize) {
            if (isUndefined(currencySymbol)) {
                currencySymbol = formats.CURRENCY_SYM;
            }
            if (isUndefined(fractionSize)) {
                fractionSize = formats.PATTERNS[1].maxFrac;
            }
            // if null or undefined pass it through
            return (amount == null)
                ? amount
                : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
                    replace(/\u00A4/g, currencySymbol);
        };
    }
    /**
     * @ngdoc filter
     * @name number
     * @kind function
     *
     * @description
     * Formats a number as text.
     *
     * If the input is not a number an empty string is returned.
     *
     * @param {number|string} number Number to format.
     * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
     * If this is not provided then the fraction size is computed from the current locale's number
     * formatting pattern. In the case of the default locale, it will be 3.
     * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
     *
     * @example
       <example module="numberFilterExample">
         <file name="index.html">
           <script>
             angular.module('numberFilterExample', [])
               .controller('ExampleController', ['$scope', function($scope) {
                 $scope.val = 1234.56789;
               }]);
           </script>
           <div ng-controller="ExampleController">
             Enter number: <input ng-model='val'><br>
             Default formatting: <span id='number-default'>{{val | number}}</span><br>
             No fractions: <span>{{val | number:0}}</span><br>
             Negative number: <span>{{-val | number:4}}</span>
           </div>
         </file>
         <file name="protractor.js" type="protractor">
           it('should format numbers', function() {
             expect(element(by.id('number-default')).getText()).toBe('1,234.568');
             expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
             expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
           });
    
           it('should update', function() {
             element(by.model('val')).clear();
             element(by.model('val')).sendKeys('3374.333');
             expect(element(by.id('number-default')).getText()).toBe('3,374.333');
             expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
             expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
          });
         </file>
       </example>
     */
    numberFilter.$inject = ['$locale'];
    function numberFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function (number, fractionSize) {
            // if null or undefined pass it through
            return (number == null)
                ? number
                : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize);
        };
    }
    var DECIMAL_SEP = '.';
    function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
        if (!isFinite(number) || isObject(number))
            return '';
        var isNegative = number < 0;
        number = Math.abs(number);
        var numStr = number + '', formatedText = '', parts = [];
        var hasExponent = false;
        if (numStr.indexOf('e') !== -1) {
            var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
            if (match && match[2] == '-' && match[3] > fractionSize + 1) {
                numStr = '0';
                number = 0;
            }
            else {
                formatedText = numStr;
                hasExponent = true;
            }
        }
        if (!hasExponent) {
            var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;
            // determine fractionSize if it is not specified
            if (isUndefined(fractionSize)) {
                fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
            }
            // safely round numbers in JS without hitting imprecisions of floating-point arithmetics
            // inspired by:
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
            number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);
            if (number === 0) {
                isNegative = false;
            }
            var fraction = ('' + number).split(DECIMAL_SEP);
            var whole = fraction[0];
            fraction = fraction[1] || '';
            var i, pos = 0, lgroup = pattern.lgSize, group = pattern.gSize;
            if (whole.length >= (lgroup + group)) {
                pos = whole.length - lgroup;
                for (i = 0; i < pos; i++) {
                    if ((pos - i) % group === 0 && i !== 0) {
                        formatedText += groupSep;
                    }
                    formatedText += whole.charAt(i);
                }
            }
            for (i = pos; i < whole.length; i++) {
                if ((whole.length - i) % lgroup === 0 && i !== 0) {
                    formatedText += groupSep;
                }
                formatedText += whole.charAt(i);
            }
            // format fraction part.
            while (fraction.length < fractionSize) {
                fraction += '0';
            }
            if (fractionSize && fractionSize !== "0")
                formatedText += decimalSep + fraction.substr(0, fractionSize);
        }
        else {
            if (fractionSize > 0 && number > -1 && number < 1) {
                formatedText = number.toFixed(fractionSize);
            }
        }
        parts.push(isNegative ? pattern.negPre : pattern.posPre, formatedText, isNegative ? pattern.negSuf : pattern.posSuf);
        return parts.join('');
    }
    function padNumber(num, digits, trim) {
        var neg = '';
        if (num < 0) {
            neg = '-';
            num = -num;
        }
        num = '' + num;
        while (num.length < digits)
            num = '0' + num;
        if (trim)
            num = num.substr(num.length - digits);
        return neg + num;
    }
    function dateGetter(name, size, offset, trim) {
        offset = offset || 0;
        return function (date) {
            var value = date['get' + name]();
            if (offset > 0 || value > -offset)
                value += offset;
            if (value === 0 && offset == -12)
                value = 12;
            return padNumber(value, size, trim);
        };
    }
    function dateStrGetter(name, shortForm) {
        return function (date, formats) {
            var value = date['get' + name]();
            var get = uppercase(shortForm ? ('SHORT' + name) : name);
            return formats[get][value];
        };
    }
    function timeZoneGetter(date) {
        var zone = -1 * date.getTimezoneOffset();
        var paddedZone = (zone >= 0) ? "+" : "";
        paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
            padNumber(Math.abs(zone % 60), 2);
        return paddedZone;
    }
    function getFirstThursdayOfYear(year) {
        // 0 = index of January
        var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
        // 4 = index of Thursday (+1 to account for 1st = 5)
        // 11 = index of *next* Thursday (+1 account for 1st = 12)
        return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
    }
    function getThursdayThisWeek(datetime) {
        return new Date(datetime.getFullYear(), datetime.getMonth(), 
        // 4 = index of Thursday
        datetime.getDate() + (4 - datetime.getDay()));
    }
    function weekGetter(size) {
        return function (date) {
            var firstThurs = getFirstThursdayOfYear(date.getFullYear()), thisThurs = getThursdayThisWeek(date);
            var diff = +thisThurs - +firstThurs, result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week
            return padNumber(result, size);
        };
    }
    function ampmGetter(date, formats) {
        return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
    }
    var DATE_FORMATS = {
        yyyy: dateGetter('FullYear', 4),
        yy: dateGetter('FullYear', 2, 0, true),
        y: dateGetter('FullYear', 1),
        MMMM: dateStrGetter('Month'),
        MMM: dateStrGetter('Month', true),
        MM: dateGetter('Month', 2, 1),
        M: dateGetter('Month', 1, 1),
        dd: dateGetter('Date', 2),
        d: dateGetter('Date', 1),
        HH: dateGetter('Hours', 2),
        H: dateGetter('Hours', 1),
        hh: dateGetter('Hours', 2, -12),
        h: dateGetter('Hours', 1, -12),
        mm: dateGetter('Minutes', 2),
        m: dateGetter('Minutes', 1),
        ss: dateGetter('Seconds', 2),
        s: dateGetter('Seconds', 1),
        // while ISO 8601 requires fractions to be prefixed with `.` or `,`
        // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
        sss: dateGetter('Milliseconds', 3),
        EEEE: dateStrGetter('Day'),
        EEE: dateStrGetter('Day', true),
        a: ampmGetter,
        Z: timeZoneGetter,
        ww: weekGetter(2),
        w: weekGetter(1)
    };
    var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEw']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|w+))(.*)/, NUMBER_STRING = /^\-?\d+$/;
    /**
     * @ngdoc filter
     * @name date
     * @kind function
     *
     * @description
     *   Formats `date` to a string based on the requested `format`.
     *
     *   `format` string can be composed of the following elements:
     *
     *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
     *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
     *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
     *   * `'MMMM'`: Month in year (January-December)
     *   * `'MMM'`: Month in year (Jan-Dec)
     *   * `'MM'`: Month in year, padded (01-12)
     *   * `'M'`: Month in year (1-12)
     *   * `'dd'`: Day in month, padded (01-31)
     *   * `'d'`: Day in month (1-31)
     *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
     *   * `'EEE'`: Day in Week, (Sun-Sat)
     *   * `'HH'`: Hour in day, padded (00-23)
     *   * `'H'`: Hour in day (0-23)
     *   * `'hh'`: Hour in AM/PM, padded (01-12)
     *   * `'h'`: Hour in AM/PM, (1-12)
     *   * `'mm'`: Minute in hour, padded (00-59)
     *   * `'m'`: Minute in hour (0-59)
     *   * `'ss'`: Second in minute, padded (00-59)
     *   * `'s'`: Second in minute (0-59)
     *   * `'.sss' or ',sss'`: Millisecond in second, padded (000-999)
     *   * `'a'`: AM/PM marker
     *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
     *   * `'ww'`: ISO-8601 week of year (00-53)
     *   * `'w'`: ISO-8601 week of year (0-53)
     *
     *   `format` string can also be one of the following predefined
     *   {@link guide/i18n localizable formats}:
     *
     *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
     *     (e.g. Sep 3, 2010 12:05:08 PM)
     *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
     *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
     *     (e.g. Friday, September 3, 2010)
     *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
     *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
     *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
     *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
     *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
     *
     *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
     *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
     *   (e.g. `"h 'o''clock'"`).
     *
     * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
     *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
     *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
     *    specified in the string input, the time is considered to be in the local timezone.
     * @param {string=} format Formatting rules (see Description). If not specified,
     *    `mediumDate` is used.
     * @param {string=} timezone Timezone to be used for formatting. Right now, only `'UTC'` is supported.
     *    If not specified, the timezone of the browser will be used.
     * @returns {string} Formatted string or the input if input is not recognized as date/millis.
     *
     * @example
       <example>
         <file name="index.html">
           <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
               <span>{{1288323623006 | date:'medium'}}</span><br>
           <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
              <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
           <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
              <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
           <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
              <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
         </file>
         <file name="protractor.js" type="protractor">
           it('should format date', function() {
             expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
                toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
             expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
                toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
             expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
                toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
             expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
                toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
           });
         </file>
       </example>
     */
    dateFilter.$inject = ['$locale'];
    function dateFilter($locale) {
        var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
        // 1        2       3         4          5          6          7          8  9     10      11
        function jsonStringToDate(string) {
            var match;
            if (match = string.match(R_ISO8601_STR)) {
                var date = new Date(0), tzHour = 0, tzMin = 0, dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear, timeSetter = match[8] ? date.setUTCHours : date.setHours;
                if (match[9]) {
                    tzHour = int(match[9] + match[10]);
                    tzMin = int(match[9] + match[11]);
                }
                dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));
                var h = int(match[4] || 0) - tzHour;
                var m = int(match[5] || 0) - tzMin;
                var s = int(match[6] || 0);
                var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
                timeSetter.call(date, h, m, s, ms);
                return date;
            }
            return string;
        }
        return function (date, format, timezone) {
            var text = '', parts = [], fn, match;
            format = format || 'mediumDate';
            format = $locale.DATETIME_FORMATS[format] || format;
            if (isString(date)) {
                date = NUMBER_STRING.test(date) ? int(date) : jsonStringToDate(date);
            }
            if (isNumber(date)) {
                date = new Date(date);
            }
            if (!isDate(date)) {
                return date;
            }
            while (format) {
                match = DATE_FORMATS_SPLIT.exec(format);
                if (match) {
                    parts = concat(parts, match, 1);
                    format = parts.pop();
                }
                else {
                    parts.push(format);
                    format = null;
                }
            }
            if (timezone && timezone === 'UTC') {
                date = new Date(date.getTime());
                date.setMinutes(date.getMinutes() + date.getTimezoneOffset());
            }
            forEach(parts, function (value) {
                fn = DATE_FORMATS[value];
                text += fn ? fn(date, $locale.DATETIME_FORMATS)
                    : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
            });
            return text;
        };
    }
    /**
     * @ngdoc filter
     * @name json
     * @kind function
     *
     * @description
     *   Allows you to convert a JavaScript object into JSON string.
     *
     *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
     *   the binding is automatically converted to JSON.
     *
     * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
     * @returns {string} JSON string.
     *
     *
     * @example
       <example>
         <file name="index.html">
           <pre>{{ {'name':'value'} | json }}</pre>
         </file>
         <file name="protractor.js" type="protractor">
           it('should jsonify filtered objects', function() {
             expect(element(by.binding("{'name':'value'}")).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
           });
         </file>
       </example>
     *
     */
    function jsonFilter() {
        return function (object) {
            return toJson(object, true);
        };
    }
    /**
     * @ngdoc filter
     * @name lowercase
     * @kind function
     * @description
     * Converts string to lowercase.
     * @see angular.lowercase
     */
    var lowercaseFilter = valueFn(lowercase);
    /**
     * @ngdoc filter
     * @name uppercase
     * @kind function
     * @description
     * Converts string to uppercase.
     * @see angular.uppercase
     */
    var uppercaseFilter = valueFn(uppercase);
    /**
     * @ngdoc filter
     * @name limitTo
     * @kind function
     *
     * @description
     * Creates a new array or string containing only a specified number of elements. The elements
     * are taken from either the beginning or the end of the source array, string or number, as specified by
     * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
     * converted to a string.
     *
     * @param {Array|string|number} input Source array, string or number to be limited.
     * @param {string|number} limit The length of the returned array or string. If the `limit` number
     *     is positive, `limit` number of items from the beginning of the source array/string are copied.
     *     If the number is negative, `limit` number  of items from the end of the source array/string
     *     are copied. The `limit` will be trimmed if it exceeds `array.length`
     * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
     *     had less than `limit` elements.
     *
     * @example
       <example module="limitToExample">
         <file name="index.html">
           <script>
             angular.module('limitToExample', [])
               .controller('ExampleController', ['$scope', function($scope) {
                 $scope.numbers = [1,2,3,4,5,6,7,8,9];
                 $scope.letters = "abcdefghi";
                 $scope.longNumber = 2345432342;
                 $scope.numLimit = 3;
                 $scope.letterLimit = 3;
                 $scope.longNumberLimit = 3;
               }]);
           </script>
           <div ng-controller="ExampleController">
             Limit {{numbers}} to: <input type="number" step="1" ng-model="numLimit">
             <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
             Limit {{letters}} to: <input type="number" step="1" ng-model="letterLimit">
             <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
             Limit {{longNumber}} to: <input type="number" step="1" ng-model="longNumberLimit">
             <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
           </div>
         </file>
         <file name="protractor.js" type="protractor">
           var numLimitInput = element(by.model('numLimit'));
           var letterLimitInput = element(by.model('letterLimit'));
           var longNumberLimitInput = element(by.model('longNumberLimit'));
           var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
           var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
           var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));
    
           it('should limit the number array to first three items', function() {
             expect(numLimitInput.getAttribute('value')).toBe('3');
             expect(letterLimitInput.getAttribute('value')).toBe('3');
             expect(longNumberLimitInput.getAttribute('value')).toBe('3');
             expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
             expect(limitedLetters.getText()).toEqual('Output letters: abc');
             expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
           });
    
           // There is a bug in safari and protractor that doesn't like the minus key
           // it('should update the output when -3 is entered', function() {
           //   numLimitInput.clear();
           //   numLimitInput.sendKeys('-3');
           //   letterLimitInput.clear();
           //   letterLimitInput.sendKeys('-3');
           //   longNumberLimitInput.clear();
           //   longNumberLimitInput.sendKeys('-3');
           //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
           //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
           //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
           // });
    
           it('should not exceed the maximum size of input array', function() {
             numLimitInput.clear();
             numLimitInput.sendKeys('100');
             letterLimitInput.clear();
             letterLimitInput.sendKeys('100');
             longNumberLimitInput.clear();
             longNumberLimitInput.sendKeys('100');
             expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
             expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
             expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
           });
         </file>
       </example>
    */
    function limitToFilter() {
        return function (input, limit) {
            if (isNumber(input))
                input = input.toString();
            if (!isArray(input) && !isString(input))
                return input;
            if (Math.abs(Number(limit)) === Infinity) {
                limit = Number(limit);
            }
            else {
                limit = int(limit);
            }
            if (isString(input)) {
                //NaN check on limit
                if (limit) {
                    return limit >= 0 ? input.slice(0, limit) : input.slice(limit, input.length);
                }
                else {
                    return "";
                }
            }
            var out = [], i, n;
            // if abs(limit) exceeds maximum length, trim it
            if (limit > input.length)
                limit = input.length;
            else if (limit < -input.length)
                limit = -input.length;
            if (limit > 0) {
                i = 0;
                n = limit;
            }
            else {
                i = input.length + limit;
                n = input.length;
            }
            for (; i < n; i++) {
                out.push(input[i]);
            }
            return out;
        };
    }
    /**
     * @ngdoc filter
     * @name orderBy
     * @kind function
     *
     * @description
     * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
     * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
     * correctly, make sure they are actually being saved as numbers and not strings.
     *
     * @param {Array} array The array to sort.
     * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
     *    used by the comparator to determine the order of elements.
     *
     *    Can be one of:
     *
     *    - `function`: Getter function. The result of this function will be sorted using the
     *      `<`, `=`, `>` operator.
     *    - `string`: An Angular expression. The result of this expression is used to compare elements
     *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
     *      3 first characters of a property called `name`). The result of a constant expression
     *      is interpreted as a property name to be used in comparisons (for example `"special name"`
     *      to sort object by the value of their `special name` property). An expression can be
     *      optionally prefixed with `+` or `-` to control ascending or descending sort order
     *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
     *      element itself is used to compare where sorting.
     *    - `Array`: An array of function or string predicates. The first predicate in the array
     *      is used for sorting, but when two items are equivalent, the next predicate is used.
     *
     *    If the predicate is missing or empty then it defaults to `'+'`.
     *
     * @param {boolean=} reverse Reverse the order of the array.
     * @returns {Array} Sorted copy of the source array.
     *
     * @example
       <example module="orderByExample">
         <file name="index.html">
           <script>
             angular.module('orderByExample', [])
               .controller('ExampleController', ['$scope', function($scope) {
                 $scope.friends =
                     [{name:'John', phone:'555-1212', age:10},
                      {name:'Mary', phone:'555-9876', age:19},
                      {name:'Mike', phone:'555-4321', age:21},
                      {name:'Adam', phone:'555-5678', age:35},
                      {name:'Julie', phone:'555-8765', age:29}];
                 $scope.predicate = '-age';
               }]);
           </script>
           <div ng-controller="ExampleController">
             <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
             <hr/>
             [ <a href="" ng-click="predicate=''">unsorted</a> ]
             <table class="friend">
               <tr>
                 <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>
                     (<a href="" ng-click="predicate = '-name'; reverse=false">^</a>)</th>
                 <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>
                 <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>
               </tr>
               <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
                 <td>{{friend.name}}</td>
                 <td>{{friend.phone}}</td>
                 <td>{{friend.age}}</td>
               </tr>
             </table>
           </div>
         </file>
       </example>
     *
     * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
     * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
     * desired parameters.
     *
     * Example:
     *
     * @example
      <example module="orderByExample">
        <file name="index.html">
          <div ng-controller="ExampleController">
            <table class="friend">
              <tr>
                <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
                  (<a href="" ng-click="order('-name',false)">^</a>)</th>
                <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
                <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
              </tr>
              <tr ng-repeat="friend in friends">
                <td>{{friend.name}}</td>
                <td>{{friend.phone}}</td>
                <td>{{friend.age}}</td>
              </tr>
            </table>
          </div>
        </file>
    
        <file name="script.js">
          angular.module('orderByExample', [])
            .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
              var orderBy = $filter('orderBy');
              $scope.friends = [
                { name: 'John',    phone: '555-1212',    age: 10 },
                { name: 'Mary',    phone: '555-9876',    age: 19 },
                { name: 'Mike',    phone: '555-4321',    age: 21 },
                { name: 'Adam',    phone: '555-5678',    age: 35 },
                { name: 'Julie',   phone: '555-8765',    age: 29 }
              ];
              $scope.order = function(predicate, reverse) {
                $scope.friends = orderBy($scope.friends, predicate, reverse);
              };
              $scope.order('-age',false);
            }]);
        </file>
    </example>
     */
    orderByFilter.$inject = ['$parse'];
    function orderByFilter($parse) {
        return function (array, sortPredicate, reverseOrder) {
            if (!(isArrayLike(array)))
                return array;
            sortPredicate = isArray(sortPredicate) ? sortPredicate : [sortPredicate];
            if (sortPredicate.length === 0) {
                sortPredicate = ['+'];
            }
            sortPredicate = sortPredicate.map(function (predicate) {
                var descending = false, get = predicate || identity;
                if (isString(predicate)) {
                    if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
                        descending = predicate.charAt(0) == '-';
                        predicate = predicate.substring(1);
                    }
                    if (predicate === '') {
                        // Effectively no predicate was passed so we compare identity
                        return reverseComparator(function (a, b) {
                            return compare(a, b);
                        }, descending);
                    }
                    get = $parse(predicate);
                    if (get.constant) {
                        var key = get();
                        return reverseComparator(function (a, b) {
                            return compare(a[key], b[key]);
                        }, descending);
                    }
                }
                return reverseComparator(function (a, b) {
                    return compare(get(a), get(b));
                }, descending);
            });
            return slice.call(array).sort(reverseComparator(comparator, reverseOrder));
            function comparator(o1, o2) {
                for (var i = 0; i < sortPredicate.length; i++) {
                    var comp = sortPredicate[i](o1, o2);
                    if (comp !== 0)
                        return comp;
                }
                return 0;
            }
            function reverseComparator(comp, descending) {
                return descending
                    ? function (a, b) { return comp(b, a); }
                    : comp;
            }
            function compare(v1, v2) {
                var t1 = typeof v1;
                var t2 = typeof v2;
                if (t1 == t2) {
                    if (isDate(v1) && isDate(v2)) {
                        v1 = v1.valueOf();
                        v2 = v2.valueOf();
                    }
                    if (t1 == "string") {
                        v1 = v1.toLowerCase();
                        v2 = v2.toLowerCase();
                    }
                    if (v1 === v2)
                        return 0;
                    return v1 < v2 ? -1 : 1;
                }
                else {
                    return t1 < t2 ? -1 : 1;
                }
            }
        };
    }
    function ngDirective(directive) {
        if (isFunction(directive)) {
            directive = {
                link: directive
            };
        }
        directive.restrict = directive.restrict || 'AC';
        return valueFn(directive);
    }
    /**
     * @ngdoc directive
     * @name a
     * @restrict E
     *
     * @description
     * Modifies the default behavior of the html A tag so that the default action is prevented when
     * the href attribute is empty.
     *
     * This change permits the easy creation of action links with the `ngClick` directive
     * without changing the location or causing page reloads, e.g.:
     * `<a href="" ng-click="list.addItem()">Add Item</a>`
     */
    var htmlAnchorDirective = valueFn({
        restrict: 'E',
        compile: function (element, attr) {
            if (!attr.href && !attr.xlinkHref && !attr.name) {
                return function (scope, element) {
                    // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
                    var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
                        'xlink:href' : 'href';
                    element.on('click', function (event) {
                        // if we have no href url, then don't navigate anywhere.
                        if (!element.attr(href)) {
                            event.preventDefault();
                        }
                    });
                };
            }
        }
    });
    /**
     * @ngdoc directive
     * @name ngHref
     * @restrict A
     * @priority 99
     *
     * @description
     * Using Angular markup like `{{hash}}` in an href attribute will
     * make the link go to the wrong URL if the user clicks it before
     * Angular has a chance to replace the `{{hash}}` markup with its
     * value. Until Angular replaces the markup the link will be broken
     * and will most likely return a 404 error. The `ngHref` directive
     * solves this problem.
     *
     * The wrong way to write it:
     * ```html
     * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
     * ```
     *
     * The correct way to write it:
     * ```html
     * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
     * ```
     *
     * @element A
     * @param {template} ngHref any string which can contain `{{}}` markup.
     *
     * @example
     * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
     * in links and their different behaviors:
        <example>
          <file name="index.html">
            <input ng-model="value" /><br />
            <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
            <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
            <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
            <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
            <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
            <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
          </file>
          <file name="protractor.js" type="protractor">
            it('should execute ng-click but not reload when href without value', function() {
              element(by.id('link-1')).click();
              expect(element(by.model('value')).getAttribute('value')).toEqual('1');
              expect(element(by.id('link-1')).getAttribute('href')).toBe('');
            });
    
            it('should execute ng-click but not reload when href empty string', function() {
              element(by.id('link-2')).click();
              expect(element(by.model('value')).getAttribute('value')).toEqual('2');
              expect(element(by.id('link-2')).getAttribute('href')).toBe('');
            });
    
            it('should execute ng-click and change url when ng-href specified', function() {
              expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);
    
              element(by.id('link-3')).click();
    
              // At this point, we navigate away from an Angular page, so we need
              // to use browser.driver to get the base webdriver.
    
              browser.wait(function() {
                return browser.driver.getCurrentUrl().then(function(url) {
                  return url.match(/\/123$/);
                });
              }, 5000, 'page should navigate to /123');
            });
    
            xit('should execute ng-click but not reload when href empty string and name specified', function() {
              element(by.id('link-4')).click();
              expect(element(by.model('value')).getAttribute('value')).toEqual('4');
              expect(element(by.id('link-4')).getAttribute('href')).toBe('');
            });
    
            it('should execute ng-click but not reload when no href but name specified', function() {
              element(by.id('link-5')).click();
              expect(element(by.model('value')).getAttribute('value')).toEqual('5');
              expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
            });
    
            it('should only change url when only ng-href', function() {
              element(by.model('value')).clear();
              element(by.model('value')).sendKeys('6');
              expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);
    
              element(by.id('link-6')).click();
    
              // At this point, we navigate away from an Angular page, so we need
              // to use browser.driver to get the base webdriver.
              browser.wait(function() {
                return browser.driver.getCurrentUrl().then(function(url) {
                  return url.match(/\/6$/);
                });
              }, 5000, 'page should navigate to /6');
            });
          </file>
        </example>
     */
    /**
     * @ngdoc directive
     * @name ngSrc
     * @restrict A
     * @priority 99
     *
     * @description
     * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
     * work right: The browser will fetch from the URL with the literal
     * text `{{hash}}` until Angular replaces the expression inside
     * `{{hash}}`. The `ngSrc` directive solves this problem.
     *
     * The buggy way to write it:
     * ```html
     * <img src="http://www.gravatar.com/avatar/{{hash}}"/>
     * ```
     *
     * The correct way to write it:
     * ```html
     * <img ng-src="http://www.gravatar.com/avatar/{{hash}}"/>
     * ```
     *
     * @element IMG
     * @param {template} ngSrc any string which can contain `{{}}` markup.
     */
    /**
     * @ngdoc directive
     * @name ngSrcset
     * @restrict A
     * @priority 99
     *
     * @description
     * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
     * work right: The browser will fetch from the URL with the literal
     * text `{{hash}}` until Angular replaces the expression inside
     * `{{hash}}`. The `ngSrcset` directive solves this problem.
     *
     * The buggy way to write it:
     * ```html
     * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
     * ```
     *
     * The correct way to write it:
     * ```html
     * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
     * ```
     *
     * @element IMG
     * @param {template} ngSrcset any string which can contain `{{}}` markup.
     */
    /**
     * @ngdoc directive
     * @name ngDisabled
     * @restrict A
     * @priority 100
     *
     * @description
     *
     * We shouldn't do this, because it will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:
     * ```html
     * <div ng-init="scope = { isDisabled: false }">
     *  <button disabled="{{scope.isDisabled}}">Disabled</button>
     * </div>
     * ```
     *
     * The HTML specification does not require browsers to preserve the values of boolean attributes
     * such as disabled. (Their presence means true and their absence means false.)
     * If we put an Angular interpolation expression into such an attribute then the
     * binding information would be lost when the browser removes the attribute.
     * The `ngDisabled` directive solves this problem for the `disabled` attribute.
     * This complementary directive is not removed by the browser and so provides
     * a permanent reliable place to store the binding information.
     *
     * @example
        <example>
          <file name="index.html">
            Click me to toggle: <input type="checkbox" ng-model="checked"><br/>
            <button ng-model="button" ng-disabled="checked">Button</button>
          </file>
          <file name="protractor.js" type="protractor">
            it('should toggle button', function() {
              expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
              element(by.model('checked')).click();
              expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
            });
          </file>
        </example>
     *
     * @element INPUT
     * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
     *     then special attribute "disabled" will be set on the element
     */
    /**
     * @ngdoc directive
     * @name ngChecked
     * @restrict A
     * @priority 100
     *
     * @description
     * The HTML specification does not require browsers to preserve the values of boolean attributes
     * such as checked. (Their presence means true and their absence means false.)
     * If we put an Angular interpolation expression into such an attribute then the
     * binding information would be lost when the browser removes the attribute.
     * The `ngChecked` directive solves this problem for the `checked` attribute.
     * This complementary directive is not removed by the browser and so provides
     * a permanent reliable place to store the binding information.
     * @example
        <example>
          <file name="index.html">
            Check me to check both: <input type="checkbox" ng-model="master"><br/>
            <input id="checkSlave" type="checkbox" ng-checked="master">
          </file>
          <file name="protractor.js" type="protractor">
            it('should check both checkBoxes', function() {
              expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
              element(by.model('master')).click();
              expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
            });
          </file>
        </example>
     *
     * @element INPUT
     * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
     *     then special attribute "checked" will be set on the element
     */
    /**
     * @ngdoc directive
     * @name ngReadonly
     * @restrict A
     * @priority 100
     *
     * @description
     * The HTML specification does not require browsers to preserve the values of boolean attributes
     * such as readonly. (Their presence means true and their absence means false.)
     * If we put an Angular interpolation expression into such an attribute then the
     * binding information would be lost when the browser removes the attribute.
     * The `ngReadonly` directive solves this problem for the `readonly` attribute.
     * This complementary directive is not removed by the browser and so provides
     * a permanent reliable place to store the binding information.
     * @example
        <example>
          <file name="index.html">
            Check me to make text readonly: <input type="checkbox" ng-model="checked"><br/>
            <input type="text" ng-readonly="checked" value="I'm Angular"/>
          </file>
          <file name="protractor.js" type="protractor">
            it('should toggle readonly attr', function() {
              expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
              element(by.model('checked')).click();
              expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
            });
          </file>
        </example>
     *
     * @element INPUT
     * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
     *     then special attribute "readonly" will be set on the element
     */
    /**
     * @ngdoc directive
     * @name ngSelected
     * @restrict A
     * @priority 100
     *
     * @description
     * The HTML specification does not require browsers to preserve the values of boolean attributes
     * such as selected. (Their presence means true and their absence means false.)
     * If we put an Angular interpolation expression into such an attribute then the
     * binding information would be lost when the browser removes the attribute.
     * The `ngSelected` directive solves this problem for the `selected` attribute.
     * This complementary directive is not removed by the browser and so provides
     * a permanent reliable place to store the binding information.
     *
     * @example
        <example>
          <file name="index.html">
            Check me to select: <input type="checkbox" ng-model="selected"><br/>
            <select>
              <option>Hello!</option>
              <option id="greet" ng-selected="selected">Greetings!</option>
            </select>
          </file>
          <file name="protractor.js" type="protractor">
            it('should select Greetings!', function() {
              expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
              element(by.model('selected')).click();
              expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
            });
          </file>
        </example>
     *
     * @element OPTION
     * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
     *     then special attribute "selected" will be set on the element
     */
    /**
     * @ngdoc directive
     * @name ngOpen
     * @restrict A
     * @priority 100
     *
     * @description
     * The HTML specification does not require browsers to preserve the values of boolean attributes
     * such as open. (Their presence means true and their absence means false.)
     * If we put an Angular interpolation expression into such an attribute then the
     * binding information would be lost when the browser removes the attribute.
     * The `ngOpen` directive solves this problem for the `open` attribute.
     * This complementary directive is not removed by the browser and so provides
     * a permanent reliable place to store the binding information.
     * @example
         <example>
           <file name="index.html">
             Check me check multiple: <input type="checkbox" ng-model="open"><br/>
             <details id="details" ng-open="open">
                <summary>Show/Hide me</summary>
             </details>
           </file>
           <file name="protractor.js" type="protractor">
             it('should toggle open', function() {
               expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
               element(by.model('open')).click();
               expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
             });
           </file>
         </example>
     *
     * @element DETAILS
     * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
     *     then special attribute "open" will be set on the element
     */
    var ngAttributeAliasDirectives = {};
    // boolean attrs are evaluated
    forEach(BOOLEAN_ATTR, function (propName, attrName) {
        // binding to multiple is not supported
        if (propName == "multiple")
            return;
        var normalized = directiveNormalize('ng-' + attrName);
        ngAttributeAliasDirectives[normalized] = function () {
            return {
                restrict: 'A',
                priority: 100,
                link: function (scope, element, attr) {
                    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
                        attr.$set(attrName, !!value);
                    });
                }
            };
        };
    });
    // aliased input attrs are evaluated
    forEach(ALIASED_ATTR, function (htmlAttr, ngAttr) {
        ngAttributeAliasDirectives[ngAttr] = function () {
            return {
                priority: 100,
                link: function (scope, element, attr) {
                    //special case ngPattern when a literal regular expression value
                    //is used as the expression (this way we don't have to watch anything).
                    if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
                        var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
                        if (match) {
                            attr.$set("ngPattern", new RegExp(match[1], match[2]));
                            return;
                        }
                    }
                    scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
                        attr.$set(ngAttr, value);
                    });
                }
            };
        };
    });
    // ng-src, ng-srcset, ng-href are interpolated
    forEach(['src', 'srcset', 'href'], function (attrName) {
        var normalized = directiveNormalize('ng-' + attrName);
        ngAttributeAliasDirectives[normalized] = function () {
            return {
                priority: 99,
                link: function (scope, element, attr) {
                    var propName = attrName, name = attrName;
                    if (attrName === 'href' &&
                        toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
                        name = 'xlinkHref';
                        attr.$attr[name] = 'xlink:href';
                        propName = null;
                    }
                    attr.$observe(normalized, function (value) {
                        if (!value) {
                            if (attrName === 'href') {
                                attr.$set(name, null);
                            }
                            return;
                        }
                        attr.$set(name, value);
                        // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
                        // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
                        // to set the property as well to achieve the desired effect.
                        // we use attr[attrName] value since $set can sanitize the url.
                        if (msie && propName)
                            element.prop(propName, attr[name]);
                    });
                }
            };
        };
    });
    /* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
     */
    var nullFormCtrl = {
        $addControl: noop,
        $$renameControl: nullFormRenameControl,
        $removeControl: noop,
        $setValidity: noop,
        $setDirty: noop,
        $setPristine: noop,
        $setSubmitted: noop
    }, SUBMITTED_CLASS = 'ng-submitted';
    function nullFormRenameControl(control, name) {
        control.$name = name;
    }
    /**
     * @ngdoc type
     * @name form.FormController
     *
     * @property {boolean} $pristine True if user has not interacted with the form yet.
     * @property {boolean} $dirty True if user has already interacted with the form.
     * @property {boolean} $valid True if all of the containing forms and controls are valid.
     * @property {boolean} $invalid True if at least one containing control or form is invalid.
     * @property {boolean} $submitted True if user has submitted the form even if its invalid.
     *
     * @property {Object} $error Is an object hash, containing references to controls or
     *  forms with failing validators, where:
     *
     *  - keys are validation tokens (error names),
     *  - values are arrays of controls or forms that have a failing validator for given error name.
     *
     *  Built-in validation tokens:
     *
     *  - `email`
     *  - `max`
     *  - `maxlength`
     *  - `min`
     *  - `minlength`
     *  - `number`
     *  - `pattern`
     *  - `required`
     *  - `url`
     *  - `date`
     *  - `datetimelocal`
     *  - `time`
     *  - `week`
     *  - `month`
     *
     * @description
     * `FormController` keeps track of all its controls and nested forms as well as the state of them,
     * such as being valid/invalid or dirty/pristine.
     *
     * Each {@link ng.directive:form form} directive creates an instance
     * of `FormController`.
     *
     */
    //asks for $scope to fool the BC controller module
    FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
    function FormController(element, attrs, $scope, $animate, $interpolate) {
        var form = this, controls = [];
        var parentForm = form.$$parentForm = element.parent().controller('form') || nullFormCtrl;
        // init state
        form.$error = {};
        form.$$success = {};
        form.$pending = undefined;
        form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
        form.$dirty = false;
        form.$pristine = true;
        form.$valid = true;
        form.$invalid = false;
        form.$submitted = false;
        parentForm.$addControl(form);
        /**
         * @ngdoc method
         * @name form.FormController#$rollbackViewValue
         *
         * @description
         * Rollback all form controls pending updates to the `$modelValue`.
         *
         * Updates may be pending by a debounced event or because the input is waiting for a some future
         * event defined in `ng-model-options`. This method is typically needed by the reset button of
         * a form that uses `ng-model-options` to pend updates.
         */
        form.$rollbackViewValue = function () {
            forEach(controls, function (control) {
                control.$rollbackViewValue();
            });
        };
        /**
         * @ngdoc method
         * @name form.FormController#$commitViewValue
         *
         * @description
         * Commit all form controls pending updates to the `$modelValue`.
         *
         * Updates may be pending by a debounced event or because the input is waiting for a some future
         * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
         * usually handles calling this in response to input events.
         */
        form.$commitViewValue = function () {
            forEach(controls, function (control) {
                control.$commitViewValue();
            });
        };
        /**
         * @ngdoc method
         * @name form.FormController#$addControl
         *
         * @description
         * Register a control with the form.
         *
         * Input elements using ngModelController do this automatically when they are linked.
         */
        form.$addControl = function (control) {
            // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
            // and not added to the scope.  Now we throw an error.
            assertNotHasOwnProperty(control.$name, 'input');
            controls.push(control);
            if (control.$name) {
                form[control.$name] = control;
            }
        };
        // Private API: rename a form control
        form.$$renameControl = function (control, newName) {
            var oldName = control.$name;
            if (form[oldName] === control) {
                delete form[oldName];
            }
            form[newName] = control;
            control.$name = newName;
        };
        /**
         * @ngdoc method
         * @name form.FormController#$removeControl
         *
         * @description
         * Deregister a control from the form.
         *
         * Input elements using ngModelController do this automatically when they are destroyed.
         */
        form.$removeControl = function (control) {
            if (control.$name && form[control.$name] === control) {
                delete form[control.$name];
            }
            forEach(form.$pending, function (value, name) {
                form.$setValidity(name, null, control);
            });
            forEach(form.$error, function (value, name) {
                form.$setValidity(name, null, control);
            });
            arrayRemove(controls, control);
        };
        /**
         * @ngdoc method
         * @name form.FormController#$setValidity
         *
         * @description
         * Sets the validity of a form control.
         *
         * This method will also propagate to parent forms.
         */
        addSetValidityMethod({
            ctrl: this,
            $element: element,
            set: function (object, property, control) {
                var list = object[property];
                if (!list) {
                    object[property] = [control];
                }
                else {
                    var index = list.indexOf(control);
                    if (index === -1) {
                        list.push(control);
                    }
                }
            },
            unset: function (object, property, control) {
                var list = object[property];
                if (!list) {
                    return;
                }
                arrayRemove(list, control);
                if (list.length === 0) {
                    delete object[property];
                }
            },
            parentForm: parentForm,
            $animate: $animate
        });
        /**
         * @ngdoc method
         * @name form.FormController#$setDirty
         *
         * @description
         * Sets the form to a dirty state.
         *
         * This method can be called to add the 'ng-dirty' class and set the form to a dirty
         * state (ng-dirty class). This method will also propagate to parent forms.
         */
        form.$setDirty = function () {
            $animate.removeClass(element, PRISTINE_CLASS);
            $animate.addClass(element, DIRTY_CLASS);
            form.$dirty = true;
            form.$pristine = false;
            parentForm.$setDirty();
        };
        /**
         * @ngdoc method
         * @name form.FormController#$setPristine
         *
         * @description
         * Sets the form to its pristine state.
         *
         * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
         * state (ng-pristine class). This method will also propagate to all the controls contained
         * in this form.
         *
         * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
         * saving or resetting it.
         */
        form.$setPristine = function () {
            $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
            form.$dirty = false;
            form.$pristine = true;
            form.$submitted = false;
            forEach(controls, function (control) {
                control.$setPristine();
            });
        };
        /**
         * @ngdoc method
         * @name form.FormController#$setUntouched
         *
         * @description
         * Sets the form to its untouched state.
         *
         * This method can be called to remove the 'ng-touched' class and set the form controls to their
         * untouched state (ng-untouched class).
         *
         * Setting a form controls back to their untouched state is often useful when setting the form
         * back to its pristine state.
         */
        form.$setUntouched = function () {
            forEach(controls, function (control) {
                control.$setUntouched();
            });
        };
        /**
         * @ngdoc method
         * @name form.FormController#$setSubmitted
         *
         * @description
         * Sets the form to its submitted state.
         */
        form.$setSubmitted = function () {
            $animate.addClass(element, SUBMITTED_CLASS);
            form.$submitted = true;
            parentForm.$setSubmitted();
        };
    }
    /**
     * @ngdoc directive
     * @name ngForm
     * @restrict EAC
     *
     * @description
     * Nestable alias of {@link ng.directive:form `form`} directive. HTML
     * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
     * sub-group of controls needs to be determined.
     *
     * Note: the purpose of `ngForm` is to group controls,
     * but not to be a replacement for the `<form>` tag with all of its capabilities
     * (e.g. posting to the server, ...).
     *
     * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
     *                       related scope, under this name.
     *
     */
    /**
    * @ngdoc directive
    * @name form
    * @restrict E
    *
    * @description
    * Directive that instantiates
    * {@link form.FormController FormController}.
    *
    * If the `name` attribute is specified, the form controller is published onto the current scope under
    * this name.
    *
    * # Alias: {@link ng.directive:ngForm `ngForm`}
    *
    * In Angular forms can be nested. This means that the outer form is valid when all of the child
    * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
    * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
    * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
    * using Angular validation directives in forms that are dynamically generated using the
    * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
    * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
    * `ngForm` directive and nest these in an outer `form` element.
    *
    *
    * # CSS classes
    *  - `ng-valid` is set if the form is valid.
    *  - `ng-invalid` is set if the form is invalid.
    *  - `ng-pristine` is set if the form is pristine.
    *  - `ng-dirty` is set if the form is dirty.
    *  - `ng-submitted` is set if the form was submitted.
    *
    * Keep in mind that ngAnimate can detect each of these classes when added and removed.
    *
    *
    * # Submitting a form and preventing the default action
    *
    * Since the role of forms in client-side Angular applications is different than in classical
    * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
    * page reload that sends the data to the server. Instead some javascript logic should be triggered
    * to handle the form submission in an application-specific way.
    *
    * For this reason, Angular prevents the default action (form submission to the server) unless the
    * `<form>` element has an `action` attribute specified.
    *
    * You can use one of the following two ways to specify what javascript method should be called when
    * a form is submitted:
    *
    * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
    * - {@link ng.directive:ngClick ngClick} directive on the first
     *  button or input field of type submit (input[type=submit])
    *
    * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
    * or {@link ng.directive:ngClick ngClick} directives.
    * This is because of the following form submission rules in the HTML specification:
    *
    * - If a form has only one input field then hitting enter in this field triggers form submit
    * (`ngSubmit`)
    * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
    * doesn't trigger submit
    * - if a form has one or more input fields and one or more buttons or input[type=submit] then
    * hitting enter in any of the input fields will trigger the click handler on the *first* button or
    * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
    *
    * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
    * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
    * to have access to the updated model.
    *
    * ## Animation Hooks
    *
    * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
    * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
    * other validations that are performed within the form. Animations in ngForm are similar to how
    * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
    * as JS animations.
    *
    * The following example shows a simple way to utilize CSS transitions to style a form element
    * that has been rendered as invalid after it has been validated:
    *
    * <pre>
    * //be sure to include ngAnimate as a module to hook into more
    * //advanced animations
    * .my-form {
    *   transition:0.5s linear all;
    *   background: white;
    * }
    * .my-form.ng-invalid {
    *   background: red;
    *   color:white;
    * }
    * </pre>
    *
    * @example
       <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
         <file name="index.html">
          <script>
            angular.module('formExample', [])
              .controller('FormController', ['$scope', function($scope) {
                $scope.userType = 'guest';
              }]);
          </script>
          <style>
           .my-form {
             -webkit-transition:all linear 0.5s;
             transition:all linear 0.5s;
             background: transparent;
           }
           .my-form.ng-invalid {
             background: red;
           }
          </style>
          <form name="myForm" ng-controller="FormController" class="my-form">
            userType: <input name="input" ng-model="userType" required>
            <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
            <tt>userType = {{userType}}</tt><br>
            <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>
            <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>
            <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
            <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
           </form>
         </file>
         <file name="protractor.js" type="protractor">
           it('should initialize to model', function() {
             var userType = element(by.binding('userType'));
             var valid = element(by.binding('myForm.input.$valid'));
   
             expect(userType.getText()).toContain('guest');
             expect(valid.getText()).toContain('true');
           });
   
           it('should be invalid if empty', function() {
             var userType = element(by.binding('userType'));
             var valid = element(by.binding('myForm.input.$valid'));
             var userInput = element(by.model('userType'));
   
             userInput.clear();
             userInput.sendKeys('');
   
             expect(userType.getText()).toEqual('userType =');
             expect(valid.getText()).toContain('false');
           });
         </file>
       </example>
    *
    * @param {string=} name Name of the form. If specified, the form controller will be published into
    *                       related scope, under this name.
    */
    var formDirectiveFactory = function (isNgForm) {
        return ['$timeout', function ($timeout) {
                var formDirective = {
                    name: 'form',
                    restrict: isNgForm ? 'EAC' : 'E',
                    controller: FormController,
                    compile: function ngFormCompile(formElement) {
                        // Setup initial state of the control
                        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);
                        return {
                            pre: function ngFormPreLink(scope, formElement, attr, controller) {
                                // if `action` attr is not present on the form, prevent the default action (submission)
                                if (!('action' in attr)) {
                                    // we can't use jq events because if a form is destroyed during submission the default
                                    // action is not prevented. see #1238
                                    //
                                    // IE 9 is not affected because it doesn't fire a submit event and try to do a full
                                    // page reload if the form was destroyed by submission of the form via a click handler
                                    // on a button in the form. Looks like an IE9 specific bug.
                                    var handleFormSubmission = function (event) {
                                        scope.$apply(function () {
                                            controller.$commitViewValue();
                                            controller.$setSubmitted();
                                        });
                                        event.preventDefault();
                                    };
                                    addEventListenerFn(formElement[0], 'submit', handleFormSubmission);
                                    // unregister the preventDefault listener so that we don't not leak memory but in a
                                    // way that will achieve the prevention of the default action.
                                    formElement.on('$destroy', function () {
                                        $timeout(function () {
                                            removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
                                        }, 0, false);
                                    });
                                }
                                var parentFormCtrl = controller.$$parentForm, alias = controller.$name;
                                if (alias) {
                                    setter(scope, alias, controller, alias);
                                    attr.$observe(attr.name ? 'name' : 'ngForm', function (newValue) {
                                        if (alias === newValue)
                                            return;
                                        setter(scope, alias, undefined, alias);
                                        alias = newValue;
                                        setter(scope, alias, controller, alias);
                                        parentFormCtrl.$$renameControl(controller, alias);
                                    });
                                }
                                formElement.on('$destroy', function () {
                                    parentFormCtrl.$removeControl(controller);
                                    if (alias) {
                                        setter(scope, alias, undefined, alias);
                                    }
                                    extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
                                });
                            }
                        };
                    }
                };
                return formDirective;
            }];
    };
    var formDirective = formDirectiveFactory();
    var ngFormDirective = formDirectiveFactory(true);
    /* global VALID_CLASS: true,
      INVALID_CLASS: true,
      PRISTINE_CLASS: true,
      DIRTY_CLASS: true,
      UNTOUCHED_CLASS: true,
      TOUCHED_CLASS: true,
    */
    // Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
    var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;
    var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
    var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
    var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;
    var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;
    var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
    var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;
    var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;
    var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
    var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;
    var $ngModelMinErr = new minErr('ngModel');
    var inputType = {
        /**
         * @ngdoc input
         * @name input[text]
         *
         * @description
         * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
         *
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} required Adds `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
         *    minlength.
         * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
         *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
         *    any length.
         * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
         *    that contains the regular expression body that will be converted to a regular expression
         *    as in the ngPattern directive.
         * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
         *    a RegExp found by evaluating the Angular expression given in the attribute value.
         *    If the expression evaluates to a RegExp object then this is used directly.
         *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
         *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
         *    This parameter is ignored for input[type=password] controls, which will never trim the
         *    input.
         *
         * @example
            <example name="text-input-directive" module="textInputExample">
              <file name="index.html">
               <script>
                 angular.module('textInputExample', [])
                   .controller('ExampleController', ['$scope', function($scope) {
                     $scope.text = 'guest';
                     $scope.word = /^\s*\w*\s*$/;
                   }]);
               </script>
               <form name="myForm" ng-controller="ExampleController">
                 Single word: <input type="text" name="input" ng-model="text"
                                     ng-pattern="word" required ng-trim="false">
                 <span class="error" ng-show="myForm.input.$error.required">
                   Required!</span>
                 <span class="error" ng-show="myForm.input.$error.pattern">
                   Single word only!</span>
      
                 <tt>text = {{text}}</tt><br/>
                 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
                 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
                 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
                 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
                </form>
              </file>
              <file name="protractor.js" type="protractor">
                var text = element(by.binding('text'));
                var valid = element(by.binding('myForm.input.$valid'));
                var input = element(by.model('text'));
      
                it('should initialize to model', function() {
                  expect(text.getText()).toContain('guest');
                  expect(valid.getText()).toContain('true');
                });
      
                it('should be invalid if empty', function() {
                  input.clear();
                  input.sendKeys('');
      
                  expect(text.getText()).toEqual('text =');
                  expect(valid.getText()).toContain('false');
                });
      
                it('should be invalid if multi word', function() {
                  input.clear();
                  input.sendKeys('hello world');
      
                  expect(valid.getText()).toContain('false');
                });
              </file>
            </example>
         */
        'text': textInputType,
        /**
         * @ngdoc input
         * @name input[date]
         *
         * @description
         * Input with date validation and transformation. In browsers that do not yet support
         * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
         * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
         * modern browsers do not yet support this input type, it is important to provide cues to users on the
         * expected input format via a placeholder or label.
         *
         * The model must always be a Date object, otherwise Angular will throw an error.
         * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
         *
         * The timezone to be used to read/write the `Date` instance in the model can be defined using
         * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
         * valid ISO date string (yyyy-MM-dd).
         * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
         * a valid ISO date string (yyyy-MM-dd).
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
         <example name="date-input-directive" module="dateInputExample">
         <file name="index.html">
           <script>
              angular.module('dateInputExample', [])
                .controller('DateController', ['$scope', function($scope) {
                  $scope.value = new Date(2013, 9, 22);
                }]);
           </script>
           <form name="myForm" ng-controller="DateController as dateCtrl">
              Pick a date in 2013:
              <input type="date" id="exampleInput" name="input" ng-model="value"
                  placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
              <span class="error" ng-show="myForm.input.$error.required">
                  Required!</span>
              <span class="error" ng-show="myForm.input.$error.date">
                  Not a valid date!</span>
               <tt>value = {{value | date: "yyyy-MM-dd"}}</tt><br/>
               <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
               <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
               <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
               <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           </form>
         </file>
         <file name="protractor.js" type="protractor">
            var value = element(by.binding('value | date: "yyyy-MM-dd"'));
            var valid = element(by.binding('myForm.input.$valid'));
            var input = element(by.model('value'));
    
            // currently protractor/webdriver does not support
            // sending keys to all known HTML5 input controls
            // for various browsers (see https://github.com/angular/protractor/issues/562).
            function setInput(val) {
              // set the value of the element and force validation.
              var scr = "var ipt = document.getElementById('exampleInput'); " +
              "ipt.value = '" + val + "';" +
              "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
              browser.executeScript(scr);
            }
    
            it('should initialize to model', function() {
              expect(value.getText()).toContain('2013-10-22');
              expect(valid.getText()).toContain('myForm.input.$valid = true');
            });
    
            it('should be invalid if empty', function() {
              setInput('');
              expect(value.getText()).toEqual('value =');
              expect(valid.getText()).toContain('myForm.input.$valid = false');
            });
    
            it('should be invalid if over max', function() {
              setInput('2015-01-01');
              expect(value.getText()).toContain('');
              expect(valid.getText()).toContain('myForm.input.$valid = false');
            });
         </file>
         </example>
         */
        'date': createDateInputType('date', DATE_REGEXP, createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']), 'yyyy-MM-dd'),
        /**
         * @ngdoc input
         * @name input[datetime-local]
         *
         * @description
         * Input with datetime validation and transformation. In browsers that do not yet support
         * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
         * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
         *
         * The model must always be a Date object, otherwise Angular will throw an error.
         * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
         *
         * The timezone to be used to read/write the `Date` instance in the model can be defined using
         * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
         * valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).
         * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
         * a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
         <example name="datetimelocal-input-directive" module="dateExample">
         <file name="index.html">
           <script>
             angular.module('dateExample', [])
               .controller('DateController', ['$scope', function($scope) {
                 $scope.value = new Date(2010, 11, 28, 14, 57);
               }]);
           </script>
           <form name="myForm" ng-controller="DateController as dateCtrl">
             Pick a date between in 2013:
             <input type="datetime-local" id="exampleInput" name="input" ng-model="value"
                 placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
             <span class="error" ng-show="myForm.input.$error.required">
                 Required!</span>
             <span class="error" ng-show="myForm.input.$error.datetimelocal">
                 Not a valid date!</span>
             <tt>value = {{value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           </form>
         </file>
         <file name="protractor.js" type="protractor">
           var value = element(by.binding('value | date: "yyyy-MM-ddTHH:mm:ss"'));
           var valid = element(by.binding('myForm.input.$valid'));
           var input = element(by.model('value'));
     
           // currently protractor/webdriver does not support
           // sending keys to all known HTML5 input controls
           // for various browsers (https://github.com/angular/protractor/issues/562).
           function setInput(val) {
             // set the value of the element and force validation.
             var scr = "var ipt = document.getElementById('exampleInput'); " +
             "ipt.value = '" + val + "';" +
             "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
             browser.executeScript(scr);
           }
     
           it('should initialize to model', function() {
             expect(value.getText()).toContain('2010-12-28T14:57:00');
             expect(valid.getText()).toContain('myForm.input.$valid = true');
           });
     
           it('should be invalid if empty', function() {
             setInput('');
             expect(value.getText()).toEqual('value =');
             expect(valid.getText()).toContain('myForm.input.$valid = false');
           });
     
           it('should be invalid if over max', function() {
             setInput('2015-01-01T23:59:00');
             expect(value.getText()).toContain('');
             expect(valid.getText()).toContain('myForm.input.$valid = false');
           });
         </file>
         </example>
         */
        'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP, createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']), 'yyyy-MM-ddTHH:mm:ss.sss'),
        /**
         * @ngdoc input
         * @name input[time]
         *
         * @description
         * Input with time validation and transformation. In browsers that do not yet support
         * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
         * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
         * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
         *
         * The model must always be a Date object, otherwise Angular will throw an error.
         * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
         *
         * The timezone to be used to read/write the `Date` instance in the model can be defined using
         * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
         * valid ISO time format (HH:mm:ss).
         * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be a
         * valid ISO time format (HH:mm:ss).
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
         <example name="time-input-directive" module="timeExample">
         <file name="index.html">
           <script>
            angular.module('timeExample', [])
              .controller('DateController', ['$scope', function($scope) {
                $scope.value = new Date(1970, 0, 1, 14, 57, 0);
              }]);
           </script>
           <form name="myForm" ng-controller="DateController as dateCtrl">
              Pick a between 8am and 5pm:
              <input type="time" id="exampleInput" name="input" ng-model="value"
                  placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
              <span class="error" ng-show="myForm.input.$error.required">
                  Required!</span>
              <span class="error" ng-show="myForm.input.$error.time">
                  Not a valid date!</span>
              <tt>value = {{value | date: "HH:mm:ss"}}</tt><br/>
              <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
              <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
              <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
              <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           </form>
         </file>
         <file name="protractor.js" type="protractor">
            var value = element(by.binding('value | date: "HH:mm:ss"'));
            var valid = element(by.binding('myForm.input.$valid'));
            var input = element(by.model('value'));
      
            // currently protractor/webdriver does not support
            // sending keys to all known HTML5 input controls
            // for various browsers (https://github.com/angular/protractor/issues/562).
            function setInput(val) {
              // set the value of the element and force validation.
              var scr = "var ipt = document.getElementById('exampleInput'); " +
              "ipt.value = '" + val + "';" +
              "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
              browser.executeScript(scr);
            }
      
            it('should initialize to model', function() {
              expect(value.getText()).toContain('14:57:00');
              expect(valid.getText()).toContain('myForm.input.$valid = true');
            });
      
            it('should be invalid if empty', function() {
              setInput('');
              expect(value.getText()).toEqual('value =');
              expect(valid.getText()).toContain('myForm.input.$valid = false');
            });
      
            it('should be invalid if over max', function() {
              setInput('23:59:00');
              expect(value.getText()).toContain('');
              expect(valid.getText()).toContain('myForm.input.$valid = false');
            });
         </file>
         </example>
         */
        'time': createDateInputType('time', TIME_REGEXP, createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']), 'HH:mm:ss.sss'),
        /**
         * @ngdoc input
         * @name input[week]
         *
         * @description
         * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
         * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
         * week format (yyyy-W##), for example: `2013-W02`.
         *
         * The model must always be a Date object, otherwise Angular will throw an error.
         * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
         *
         * The timezone to be used to read/write the `Date` instance in the model can be defined using
         * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
         * valid ISO week format (yyyy-W##).
         * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
         * a valid ISO week format (yyyy-W##).
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
         <example name="week-input-directive" module="weekExample">
         <file name="index.html">
           <script>
           angular.module('weekExample', [])
             .controller('DateController', ['$scope', function($scope) {
               $scope.value = new Date(2013, 0, 3);
             }]);
           </script>
           <form name="myForm" ng-controller="DateController as dateCtrl">
             Pick a date between in 2013:
             <input id="exampleInput" type="week" name="input" ng-model="value"
                 placeholder="YYYY-W##" min="2012-W32" max="2013-W52" required />
             <span class="error" ng-show="myForm.input.$error.required">
                 Required!</span>
             <span class="error" ng-show="myForm.input.$error.week">
                 Not a valid date!</span>
             <tt>value = {{value | date: "yyyy-Www"}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           </form>
         </file>
         <file name="protractor.js" type="protractor">
           var value = element(by.binding('value | date: "yyyy-Www"'));
           var valid = element(by.binding('myForm.input.$valid'));
           var input = element(by.model('value'));
     
           // currently protractor/webdriver does not support
           // sending keys to all known HTML5 input controls
           // for various browsers (https://github.com/angular/protractor/issues/562).
           function setInput(val) {
             // set the value of the element and force validation.
             var scr = "var ipt = document.getElementById('exampleInput'); " +
             "ipt.value = '" + val + "';" +
             "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
             browser.executeScript(scr);
           }
     
           it('should initialize to model', function() {
             expect(value.getText()).toContain('2013-W01');
             expect(valid.getText()).toContain('myForm.input.$valid = true');
           });
     
           it('should be invalid if empty', function() {
             setInput('');
             expect(value.getText()).toEqual('value =');
             expect(valid.getText()).toContain('myForm.input.$valid = false');
           });
     
           it('should be invalid if over max', function() {
             setInput('2015-W01');
             expect(value.getText()).toContain('');
             expect(valid.getText()).toContain('myForm.input.$valid = false');
           });
         </file>
         </example>
         */
        'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),
        /**
         * @ngdoc input
         * @name input[month]
         *
         * @description
         * Input with month validation and transformation. In browsers that do not yet support
         * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
         * month format (yyyy-MM), for example: `2009-01`.
         *
         * The model must always be a Date object, otherwise Angular will throw an error.
         * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
         * If the model is not set to the first of the month, the next view to model update will set it
         * to the first of the month.
         *
         * The timezone to be used to read/write the `Date` instance in the model can be defined using
         * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be
         * a valid ISO month format (yyyy-MM).
         * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must
         * be a valid ISO month format (yyyy-MM).
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
         <example name="month-input-directive" module="monthExample">
         <file name="index.html">
           <script>
            angular.module('monthExample', [])
              .controller('DateController', ['$scope', function($scope) {
                $scope.value = new Date(2013, 9, 1);
              }]);
           </script>
           <form name="myForm" ng-controller="DateController as dateCtrl">
             Pick a month int 2013:
             <input id="exampleInput" type="month" name="input" ng-model="value"
                placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
             <span class="error" ng-show="myForm.input.$error.required">
                Required!</span>
             <span class="error" ng-show="myForm.input.$error.month">
                Not a valid month!</span>
             <tt>value = {{value | date: "yyyy-MM"}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           </form>
         </file>
         <file name="protractor.js" type="protractor">
            var value = element(by.binding('value | date: "yyyy-MM"'));
            var valid = element(by.binding('myForm.input.$valid'));
            var input = element(by.model('value'));
      
            // currently protractor/webdriver does not support
            // sending keys to all known HTML5 input controls
            // for various browsers (https://github.com/angular/protractor/issues/562).
            function setInput(val) {
              // set the value of the element and force validation.
              var scr = "var ipt = document.getElementById('exampleInput'); " +
              "ipt.value = '" + val + "';" +
              "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
              browser.executeScript(scr);
            }
      
            it('should initialize to model', function() {
              expect(value.getText()).toContain('2013-10');
              expect(valid.getText()).toContain('myForm.input.$valid = true');
            });
      
            it('should be invalid if empty', function() {
              setInput('');
              expect(value.getText()).toEqual('value =');
              expect(valid.getText()).toContain('myForm.input.$valid = false');
            });
      
            it('should be invalid if over max', function() {
              setInput('2015-01');
              expect(value.getText()).toContain('');
              expect(valid.getText()).toContain('myForm.input.$valid = false');
            });
         </file>
         </example>
         */
        'month': createDateInputType('month', MONTH_REGEXP, createDateParser(MONTH_REGEXP, ['yyyy', 'MM']), 'yyyy-MM'),
        /**
         * @ngdoc input
         * @name input[number]
         *
         * @description
         * Text input with number validation and transformation. Sets the `number` validation
         * error if not a valid number.
         *
         * The model must always be a number, otherwise Angular will throw an error.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
         * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
         *    minlength.
         * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
         *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
         *    any length.
         * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
         *    that contains the regular expression body that will be converted to a regular expression
         *    as in the ngPattern directive.
         * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
         *    a RegExp found by evaluating the Angular expression given in the attribute value.
         *    If the expression evaluates to a RegExp object then this is used directly.
         *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
         *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
            <example name="number-input-directive" module="numberExample">
              <file name="index.html">
               <script>
                 angular.module('numberExample', [])
                   .controller('ExampleController', ['$scope', function($scope) {
                     $scope.value = 12;
                   }]);
               </script>
               <form name="myForm" ng-controller="ExampleController">
                 Number: <input type="number" name="input" ng-model="value"
                                min="0" max="99" required>
                 <span class="error" ng-show="myForm.input.$error.required">
                   Required!</span>
                 <span class="error" ng-show="myForm.input.$error.number">
                   Not valid number!</span>
                 <tt>value = {{value}}</tt><br/>
                 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
                 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
                 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
                 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
                </form>
              </file>
              <file name="protractor.js" type="protractor">
                var value = element(by.binding('value'));
                var valid = element(by.binding('myForm.input.$valid'));
                var input = element(by.model('value'));
      
                it('should initialize to model', function() {
                  expect(value.getText()).toContain('12');
                  expect(valid.getText()).toContain('true');
                });
      
                it('should be invalid if empty', function() {
                  input.clear();
                  input.sendKeys('');
                  expect(value.getText()).toEqual('value =');
                  expect(valid.getText()).toContain('false');
                });
      
                it('should be invalid if over max', function() {
                  input.clear();
                  input.sendKeys('123');
                  expect(value.getText()).toEqual('value =');
                  expect(valid.getText()).toContain('false');
                });
              </file>
            </example>
         */
        'number': numberInputType,
        /**
         * @ngdoc input
         * @name input[url]
         *
         * @description
         * Text input with URL validation. Sets the `url` validation error key if the content is not a
         * valid URL.
         *
         * <div class="alert alert-warning">
         * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
         * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
         * the built-in validators (see the {@link guide/forms Forms guide})
         * </div>
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
         *    minlength.
         * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
         *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
         *    any length.
         * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
         *    that contains the regular expression body that will be converted to a regular expression
         *    as in the ngPattern directive.
         * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
         *    a RegExp found by evaluating the Angular expression given in the attribute value.
         *    If the expression evaluates to a RegExp object then this is used directly.
         *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
         *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
            <example name="url-input-directive" module="urlExample">
              <file name="index.html">
               <script>
                 angular.module('urlExample', [])
                   .controller('ExampleController', ['$scope', function($scope) {
                     $scope.text = 'http://google.com';
                   }]);
               </script>
               <form name="myForm" ng-controller="ExampleController">
                 URL: <input type="url" name="input" ng-model="text" required>
                 <span class="error" ng-show="myForm.input.$error.required">
                   Required!</span>
                 <span class="error" ng-show="myForm.input.$error.url">
                   Not valid url!</span>
                 <tt>text = {{text}}</tt><br/>
                 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
                 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
                 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
                 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
                 <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
                </form>
              </file>
              <file name="protractor.js" type="protractor">
                var text = element(by.binding('text'));
                var valid = element(by.binding('myForm.input.$valid'));
                var input = element(by.model('text'));
      
                it('should initialize to model', function() {
                  expect(text.getText()).toContain('http://google.com');
                  expect(valid.getText()).toContain('true');
                });
      
                it('should be invalid if empty', function() {
                  input.clear();
                  input.sendKeys('');
      
                  expect(text.getText()).toEqual('text =');
                  expect(valid.getText()).toContain('false');
                });
      
                it('should be invalid if not url', function() {
                  input.clear();
                  input.sendKeys('box');
      
                  expect(valid.getText()).toContain('false');
                });
              </file>
            </example>
         */
        'url': urlInputType,
        /**
         * @ngdoc input
         * @name input[email]
         *
         * @description
         * Text input with email validation. Sets the `email` validation error key if not a valid email
         * address.
         *
         * <div class="alert alert-warning">
         * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
         * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
         * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
         * </div>
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
         *    minlength.
         * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
         *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
         *    any length.
         * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
         *    that contains the regular expression body that will be converted to a regular expression
         *    as in the ngPattern directive.
         * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
         *    a RegExp found by evaluating the Angular expression given in the attribute value.
         *    If the expression evaluates to a RegExp object then this is used directly.
         *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
         *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
            <example name="email-input-directive" module="emailExample">
              <file name="index.html">
               <script>
                 angular.module('emailExample', [])
                   .controller('ExampleController', ['$scope', function($scope) {
                     $scope.text = 'me@example.com';
                   }]);
               </script>
                 <form name="myForm" ng-controller="ExampleController">
                   Email: <input type="email" name="input" ng-model="text" required>
                   <span class="error" ng-show="myForm.input.$error.required">
                     Required!</span>
                   <span class="error" ng-show="myForm.input.$error.email">
                     Not valid email!</span>
                   <tt>text = {{text}}</tt><br/>
                   <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
                   <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
                   <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
                   <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
                   <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
                 </form>
               </file>
              <file name="protractor.js" type="protractor">
                var text = element(by.binding('text'));
                var valid = element(by.binding('myForm.input.$valid'));
                var input = element(by.model('text'));
      
                it('should initialize to model', function() {
                  expect(text.getText()).toContain('me@example.com');
                  expect(valid.getText()).toContain('true');
                });
      
                it('should be invalid if empty', function() {
                  input.clear();
                  input.sendKeys('');
                  expect(text.getText()).toEqual('text =');
                  expect(valid.getText()).toContain('false');
                });
      
                it('should be invalid if not email', function() {
                  input.clear();
                  input.sendKeys('xxx');
      
                  expect(valid.getText()).toContain('false');
                });
              </file>
            </example>
         */
        'email': emailInputType,
        /**
         * @ngdoc input
         * @name input[radio]
         *
         * @description
         * HTML radio button.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string} value The value to which the expression should be set when selected.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         * @param {string} ngValue Angular expression which sets the value to which the expression should
         *    be set when selected.
         *
         * @example
            <example name="radio-input-directive" module="radioExample">
              <file name="index.html">
               <script>
                 angular.module('radioExample', [])
                   .controller('ExampleController', ['$scope', function($scope) {
                     $scope.color = 'blue';
                     $scope.specialValue = {
                       "id": "12345",
                       "value": "green"
                     };
                   }]);
               </script>
               <form name="myForm" ng-controller="ExampleController">
                 <input type="radio" ng-model="color" value="red">  Red <br/>
                 <input type="radio" ng-model="color" ng-value="specialValue"> Green <br/>
                 <input type="radio" ng-model="color" value="blue"> Blue <br/>
                 <tt>color = {{color | json}}</tt><br/>
                </form>
                Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
              </file>
              <file name="protractor.js" type="protractor">
                it('should change state', function() {
                  var color = element(by.binding('color'));
      
                  expect(color.getText()).toContain('blue');
      
                  element.all(by.model('color')).get(0).click();
      
                  expect(color.getText()).toContain('red');
                });
              </file>
            </example>
         */
        'radio': radioInputType,
        /**
         * @ngdoc input
         * @name input[checkbox]
         *
         * @description
         * HTML checkbox.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
         * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
            <example name="checkbox-input-directive" module="checkboxExample">
              <file name="index.html">
               <script>
                 angular.module('checkboxExample', [])
                   .controller('ExampleController', ['$scope', function($scope) {
                     $scope.value1 = true;
                     $scope.value2 = 'YES'
                   }]);
               </script>
               <form name="myForm" ng-controller="ExampleController">
                 Value1: <input type="checkbox" ng-model="value1"> <br/>
                 Value2: <input type="checkbox" ng-model="value2"
                                ng-true-value="'YES'" ng-false-value="'NO'"> <br/>
                 <tt>value1 = {{value1}}</tt><br/>
                 <tt>value2 = {{value2}}</tt><br/>
                </form>
              </file>
              <file name="protractor.js" type="protractor">
                it('should change state', function() {
                  var value1 = element(by.binding('value1'));
                  var value2 = element(by.binding('value2'));
      
                  expect(value1.getText()).toContain('true');
                  expect(value2.getText()).toContain('YES');
      
                  element(by.model('value1')).click();
                  element(by.model('value2')).click();
      
                  expect(value1.getText()).toContain('false');
                  expect(value2.getText()).toContain('NO');
                });
              </file>
            </example>
         */
        'checkbox': checkboxInputType,
        'hidden': noop,
        'button': noop,
        'submit': noop,
        'reset': noop,
        'file': noop
    };
    function stringBasedInputType(ctrl) {
        ctrl.$formatters.push(function (value) {
            return ctrl.$isEmpty(value) ? value : value.toString();
        });
    }
    function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
    }
    function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        var placeholder = element[0].placeholder, noevent = {};
        var type = lowercase(element[0].type);
        // In composition mode, users are still inputing intermediate text buffer,
        // hold the listener until composition is done.
        // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
        if (!$sniffer.android) {
            var composing = false;
            element.on('compositionstart', function (data) {
                composing = true;
            });
            element.on('compositionend', function () {
                composing = false;
                listener();
            });
        }
        var listener = function (ev) {
            if (composing)
                return;
            var value = element.val(), event = ev && ev.type;
            // IE (11 and under) seem to emit an 'input' event if the placeholder value changes.
            // We don't want to dirty the value when this happens, so we abort here. Unfortunately,
            // IE also sends input events for other non-input-related things, (such as focusing on a
            // form control), so this change is not entirely enough to solve this.
            if (msie && (ev || noevent).type === 'input' && element[0].placeholder !== placeholder) {
                placeholder = element[0].placeholder;
                return;
            }
            // By default we will trim the value
            // If the attribute ng-trim exists we will avoid trimming
            // If input type is 'password', the value is never trimmed
            if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
                value = trim(value);
            }
            // If a control is suffering from bad input (due to native validators), browsers discard its
            // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
            // control's value is the same empty value twice in a row.
            if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
                ctrl.$setViewValue(value, event);
            }
        };
        // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
        // input event on backspace, delete or cut
        if ($sniffer.hasEvent('input')) {
            element.on('input', listener);
        }
        else {
            var timeout;
            var deferListener = function (ev) {
                if (!timeout) {
                    timeout = $browser.defer(function () {
                        listener(ev);
                        timeout = null;
                    });
                }
            };
            element.on('keydown', function (event) {
                var key = event.keyCode;
                // ignore
                //    command            modifiers                   arrows
                if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40))
                    return;
                deferListener(event);
            });
            // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
            if ($sniffer.hasEvent('paste')) {
                element.on('paste cut', deferListener);
            }
        }
        // if user paste into input using mouse on older browser
        // or form autocomplete on newer browser, we need "change" event to catch it
        element.on('change', listener);
        ctrl.$render = function () {
            element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
        };
    }
    function weekParser(isoWeek, existingDate) {
        if (isDate(isoWeek)) {
            return isoWeek;
        }
        if (isString(isoWeek)) {
            WEEK_REGEXP.lastIndex = 0;
            var parts = WEEK_REGEXP.exec(isoWeek);
            if (parts) {
                var year = +parts[1], week = +parts[2], hours = 0, minutes = 0, seconds = 0, milliseconds = 0, firstThurs = getFirstThursdayOfYear(year), addDays = (week - 1) * 7;
                if (existingDate) {
                    hours = existingDate.getHours();
                    minutes = existingDate.getMinutes();
                    seconds = existingDate.getSeconds();
                    milliseconds = existingDate.getMilliseconds();
                }
                return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
            }
        }
        return NaN;
    }
    function createDateParser(regexp, mapping) {
        return function (iso, date) {
            var parts, map;
            if (isDate(iso)) {
                return iso;
            }
            if (isString(iso)) {
                // When a date is JSON'ified to wraps itself inside of an extra
                // set of double quotes. This makes the date parsing code unable
                // to match the date string and parse it as a date.
                if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
                    iso = iso.substring(1, iso.length - 1);
                }
                if (ISO_DATE_REGEXP.test(iso)) {
                    return new Date(iso);
                }
                regexp.lastIndex = 0;
                parts = regexp.exec(iso);
                if (parts) {
                    parts.shift();
                    if (date) {
                        map = {
                            yyyy: date.getFullYear(),
                            MM: date.getMonth() + 1,
                            dd: date.getDate(),
                            HH: date.getHours(),
                            mm: date.getMinutes(),
                            ss: date.getSeconds(),
                            sss: date.getMilliseconds() / 1000
                        };
                    }
                    else {
                        map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
                    }
                    forEach(parts, function (part, index) {
                        if (index < mapping.length) {
                            map[mapping[index]] = +part;
                        }
                    });
                    return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
                }
            }
            return NaN;
        };
    }
    function createDateInputType(type, regexp, parseDate, format) {
        return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
            badInputChecker(scope, element, attr, ctrl);
            baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
            var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
            var previousDate;
            ctrl.$$parserName = type;
            ctrl.$parsers.push(function (value) {
                if (ctrl.$isEmpty(value))
                    return null;
                if (regexp.test(value)) {
                    // Note: We cannot read ctrl.$modelValue, as there might be a different
                    // parser/formatter in the processing chain so that the model
                    // contains some different data format!
                    var parsedDate = parseDate(value, previousDate);
                    if (timezone === 'UTC') {
                        parsedDate.setMinutes(parsedDate.getMinutes() - parsedDate.getTimezoneOffset());
                    }
                    return parsedDate;
                }
                return undefined;
            });
            ctrl.$formatters.push(function (value) {
                if (value && !isDate(value)) {
                    throw $ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
                }
                if (isValidDate(value)) {
                    previousDate = value;
                    if (previousDate && timezone === 'UTC') {
                        var timezoneOffset = 60000 * previousDate.getTimezoneOffset();
                        previousDate = new Date(previousDate.getTime() + timezoneOffset);
                    }
                    return $filter('date')(value, format, timezone);
                }
                else {
                    previousDate = null;
                    return '';
                }
            });
            if (isDefined(attr.min) || attr.ngMin) {
                var minVal;
                ctrl.$validators.min = function (value) {
                    return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
                };
                attr.$observe('min', function (val) {
                    minVal = parseObservedDateValue(val);
                    ctrl.$validate();
                });
            }
            if (isDefined(attr.max) || attr.ngMax) {
                var maxVal;
                ctrl.$validators.max = function (value) {
                    return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
                };
                attr.$observe('max', function (val) {
                    maxVal = parseObservedDateValue(val);
                    ctrl.$validate();
                });
            }
            function isValidDate(value) {
                // Invalid Date: getTime() returns NaN
                return value && !(value.getTime && value.getTime() !== value.getTime());
            }
            function parseObservedDateValue(val) {
                return isDefined(val) ? (isDate(val) ? val : parseDate(val)) : undefined;
            }
        };
    }
    function badInputChecker(scope, element, attr, ctrl) {
        var node = element[0];
        var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
        if (nativeValidation) {
            ctrl.$parsers.push(function (value) {
                var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
                // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):
                // - also sets validity.badInput (should only be validity.typeMismatch).
                // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)
                // - can ignore this case as we can still read out the erroneous email...
                return validity.badInput && !validity.typeMismatch ? undefined : value;
            });
        }
    }
    function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        badInputChecker(scope, element, attr, ctrl);
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        ctrl.$$parserName = 'number';
        ctrl.$parsers.push(function (value) {
            if (ctrl.$isEmpty(value))
                return null;
            if (NUMBER_REGEXP.test(value))
                return parseFloat(value);
            return undefined;
        });
        ctrl.$formatters.push(function (value) {
            if (!ctrl.$isEmpty(value)) {
                if (!isNumber(value)) {
                    throw $ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
                }
                value = value.toString();
            }
            return value;
        });
        if (attr.min || attr.ngMin) {
            var minVal;
            ctrl.$validators.min = function (value) {
                return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
            };
            attr.$observe('min', function (val) {
                if (isDefined(val) && !isNumber(val)) {
                    val = parseFloat(val, 10);
                }
                minVal = isNumber(val) && !isNaN(val) ? val : undefined;
                // TODO(matsko): implement validateLater to reduce number of validations
                ctrl.$validate();
            });
        }
        if (attr.max || attr.ngMax) {
            var maxVal;
            ctrl.$validators.max = function (value) {
                return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
            };
            attr.$observe('max', function (val) {
                if (isDefined(val) && !isNumber(val)) {
                    val = parseFloat(val, 10);
                }
                maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
                // TODO(matsko): implement validateLater to reduce number of validations
                ctrl.$validate();
            });
        }
    }
    function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        // Note: no badInputChecker here by purpose as `url` is only a validation
        // in browsers, i.e. we can always read out input.value even if it is not valid!
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
        ctrl.$$parserName = 'url';
        ctrl.$validators.url = function (modelValue, viewValue) {
            var value = modelValue || viewValue;
            return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
        };
    }
    function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        // Note: no badInputChecker here by purpose as `url` is only a validation
        // in browsers, i.e. we can always read out input.value even if it is not valid!
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
        ctrl.$$parserName = 'email';
        ctrl.$validators.email = function (modelValue, viewValue) {
            var value = modelValue || viewValue;
            return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
        };
    }
    function radioInputType(scope, element, attr, ctrl) {
        // make the name unique, if not defined
        if (isUndefined(attr.name)) {
            element.attr('name', nextUid());
        }
        var listener = function (ev) {
            if (element[0].checked) {
                ctrl.$setViewValue(attr.value, ev && ev.type);
            }
        };
        element.on('click', listener);
        ctrl.$render = function () {
            var value = attr.value;
            element[0].checked = (value == ctrl.$viewValue);
        };
        attr.$observe('value', ctrl.$render);
    }
    function parseConstantExpr($parse, context, name, expression, fallback) {
        var parseFn;
        if (isDefined(expression)) {
            parseFn = $parse(expression);
            if (!parseFn.constant) {
                throw minErr('ngModel')('constexpr', 'Expected constant expression for `{0}`, but saw ' +
                    '`{1}`.', name, expression);
            }
            return parseFn(context);
        }
        return fallback;
    }
    function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
        var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
        var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);
        var listener = function (ev) {
            ctrl.$setViewValue(element[0].checked, ev && ev.type);
        };
        element.on('click', listener);
        ctrl.$render = function () {
            element[0].checked = ctrl.$viewValue;
        };
        // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
        // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
        // it to a boolean.
        ctrl.$isEmpty = function (value) {
            return value === false;
        };
        ctrl.$formatters.push(function (value) {
            return equals(value, trueValue);
        });
        ctrl.$parsers.push(function (value) {
            return value ? trueValue : falseValue;
        });
    }
    /**
     * @ngdoc directive
     * @name textarea
     * @restrict E
     *
     * @description
     * HTML textarea element control with angular data-binding. The data-binding and validation
     * properties of this element are exactly the same as those of the
     * {@link ng.directive:input input element}.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
     *    minlength.
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
     *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
     *    length.
     * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
     *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
     *    patterns defined as scope expressions.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
     */
    /**
     * @ngdoc directive
     * @name input
     * @restrict E
     *
     * @description
     * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
     * input state control, and validation.
     * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
     *
     * <div class="alert alert-warning">
     * **Note:** Not every feature offered is available for all input types.
     * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
     * </div>
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {boolean=} ngRequired Sets `required` attribute if set to true
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
     *    minlength.
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
     *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
     *    length.
     * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
     *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
     *    patterns defined as scope expressions.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
     *    This parameter is ignored for input[type=password] controls, which will never trim the
     *    input.
     *
     * @example
        <example name="input-directive" module="inputExample">
          <file name="index.html">
           <script>
              angular.module('inputExample', [])
                .controller('ExampleController', ['$scope', function($scope) {
                  $scope.user = {name: 'guest', last: 'visitor'};
                }]);
           </script>
           <div ng-controller="ExampleController">
             <form name="myForm">
               User name: <input type="text" name="userName" ng-model="user.name" required>
               <span class="error" ng-show="myForm.userName.$error.required">
                 Required!</span><br>
               Last name: <input type="text" name="lastName" ng-model="user.last"
                 ng-minlength="3" ng-maxlength="10">
               <span class="error" ng-show="myForm.lastName.$error.minlength">
                 Too short!</span>
               <span class="error" ng-show="myForm.lastName.$error.maxlength">
                 Too long!</span><br>
             </form>
             <hr>
             <tt>user = {{user}}</tt><br/>
             <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>
             <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>
             <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>
             <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
             <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>
             <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>
           </div>
          </file>
          <file name="protractor.js" type="protractor">
            var user = element(by.exactBinding('user'));
            var userNameValid = element(by.binding('myForm.userName.$valid'));
            var lastNameValid = element(by.binding('myForm.lastName.$valid'));
            var lastNameError = element(by.binding('myForm.lastName.$error'));
            var formValid = element(by.binding('myForm.$valid'));
            var userNameInput = element(by.model('user.name'));
            var userLastInput = element(by.model('user.last'));
    
            it('should initialize to model', function() {
              expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
              expect(userNameValid.getText()).toContain('true');
              expect(formValid.getText()).toContain('true');
            });
    
            it('should be invalid if empty when required', function() {
              userNameInput.clear();
              userNameInput.sendKeys('');
    
              expect(user.getText()).toContain('{"last":"visitor"}');
              expect(userNameValid.getText()).toContain('false');
              expect(formValid.getText()).toContain('false');
            });
    
            it('should be valid if empty when min length is set', function() {
              userLastInput.clear();
              userLastInput.sendKeys('');
    
              expect(user.getText()).toContain('{"name":"guest","last":""}');
              expect(lastNameValid.getText()).toContain('true');
              expect(formValid.getText()).toContain('true');
            });
    
            it('should be invalid if less than required min length', function() {
              userLastInput.clear();
              userLastInput.sendKeys('xx');
    
              expect(user.getText()).toContain('{"name":"guest"}');
              expect(lastNameValid.getText()).toContain('false');
              expect(lastNameError.getText()).toContain('minlength');
              expect(formValid.getText()).toContain('false');
            });
    
            it('should be invalid if longer than max length', function() {
              userLastInput.clear();
              userLastInput.sendKeys('some ridiculously long name');
    
              expect(user.getText()).toContain('{"name":"guest"}');
              expect(lastNameValid.getText()).toContain('false');
              expect(lastNameError.getText()).toContain('maxlength');
              expect(formValid.getText()).toContain('false');
            });
          </file>
        </example>
     */
    var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
        function ($browser, $sniffer, $filter, $parse) {
            return {
                restrict: 'E',
                require: ['?ngModel'],
                link: {
                    pre: function (scope, element, attr, ctrls) {
                        if (ctrls[0]) {
                            (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer, $browser, $filter, $parse);
                        }
                    }
                }
            };
        }];
    var VALID_CLASS = 'ng-valid', INVALID_CLASS = 'ng-invalid', PRISTINE_CLASS = 'ng-pristine', DIRTY_CLASS = 'ng-dirty', UNTOUCHED_CLASS = 'ng-untouched', TOUCHED_CLASS = 'ng-touched', PENDING_CLASS = 'ng-pending';
    /**
     * @ngdoc type
     * @name ngModel.NgModelController
     *
     * @property {string} $viewValue Actual string value in the view.
     * @property {*} $modelValue The value in the model that the control is bound to.
     * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
           the control reads value from the DOM. The functions are called in array order, each passing
           its return value through to the next. The last return value is forwarded to the
           {@link ngModel.NgModelController#$validators `$validators`} collection.
    
    Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
    `$viewValue`}.
    
    Returning `undefined` from a parser means a parse error occurred. In that case,
    no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
    will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
    is set to `true`. The parse error is stored in `ngModel.$error.parse`.
    
     *
     * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
           the model value changes. The functions are called in reverse array order, each passing the value through to the
           next. The last return value is used as the actual DOM value.
           Used to format / convert values for display in the control.
     * ```js
     * function formatter(value) {
     *   if (value) {
     *     return value.toUpperCase();
     *   }
     * }
     * ngModel.$formatters.push(formatter);
     * ```
     *
     * @property {Object.<string, function>} $validators A collection of validators that are applied
     *      whenever the model value changes. The key value within the object refers to the name of the
     *      validator while the function refers to the validation operation. The validation operation is
     *      provided with the model value as an argument and must return a true or false value depending
     *      on the response of that validation.
     *
     * ```js
     * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
     *   var value = modelValue || viewValue;
     *   return /[0-9]+/.test(value) &&
     *          /[a-z]+/.test(value) &&
     *          /[A-Z]+/.test(value) &&
     *          /\W+/.test(value);
     * };
     * ```
     *
     * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
     *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
     *      is expected to return a promise when it is run during the model validation process. Once the promise
     *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
     *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
     *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
     *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
     *      will only run once all synchronous validators have passed.
     *
     * Please note that if $http is used then it is important that the server returns a success HTTP response code
     * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
     *
     * ```js
     * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
     *   var value = modelValue || viewValue;
     *
     *   // Lookup user by username
     *   return $http.get('/api/users/' + value).
     *      then(function resolved() {
     *        //username exists, this means validation fails
     *        return $q.reject('exists');
     *      }, function rejected() {
     *        //username does not exist, therefore this validation passes
     *        return true;
     *      });
     * };
     * ```
     *
     * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
     *     view value has changed. It is called with no arguments, and its return value is ignored.
     *     This can be used in place of additional $watches against the model value.
     *
     * @property {Object} $error An object hash with all failing validator ids as keys.
     * @property {Object} $pending An object hash with all pending validator ids as keys.
     *
     * @property {boolean} $untouched True if control has not lost focus yet.
     * @property {boolean} $touched True if control has lost focus.
     * @property {boolean} $pristine True if user has not interacted with the control yet.
     * @property {boolean} $dirty True if user has already interacted with the control.
     * @property {boolean} $valid True if there is no error.
     * @property {boolean} $invalid True if at least one error on the control.
     * @property {string} $name The name attribute of the control.
     *
     * @description
     *
     * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
     * The controller contains services for data-binding, validation, CSS updates, and value formatting
     * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
     * listening to DOM events.
     * Such DOM related logic should be provided by other directives which make use of
     * `NgModelController` for data-binding to control elements.
     * Angular provides this DOM logic for most {@link input `input`} elements.
     * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
     * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
     *
     * @example
     * ### Custom Control Example
     * This example shows how to use `NgModelController` with a custom control to achieve
     * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
     * collaborate together to achieve the desired result.
     *
     * Note that `contenteditable` is an HTML5 attribute, which tells the browser to let the element
     * contents be edited in place by the user.  This will not work on older browsers.
     *
     * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
     * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
     * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
     * that content using the `$sce` service.
     *
     * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
        <file name="style.css">
          [contenteditable] {
            border: 1px solid black;
            background-color: white;
            min-height: 20px;
          }
    
          .ng-invalid {
            border: 1px solid red;
          }
    
        </file>
        <file name="script.js">
          angular.module('customControl', ['ngSanitize']).
            directive('contenteditable', ['$sce', function($sce) {
              return {
                restrict: 'A', // only activate on element attribute
                require: '?ngModel', // get a hold of NgModelController
                link: function(scope, element, attrs, ngModel) {
                  if (!ngModel) return; // do nothing if no ng-model
    
                  // Specify how UI should be updated
                  ngModel.$render = function() {
                    element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
                  };
    
                  // Listen for change events to enable binding
                  element.on('blur keyup change', function() {
                    scope.$evalAsync(read);
                  });
                  read(); // initialize
    
                  // Write data to the model
                  function read() {
                    var html = element.html();
                    // When we clear the content editable the browser leaves a <br> behind
                    // If strip-br attribute is provided then we strip this out
                    if ( attrs.stripBr && html == '<br>' ) {
                      html = '';
                    }
                    ngModel.$setViewValue(html);
                  }
                }
              };
            }]);
        </file>
        <file name="index.html">
          <form name="myForm">
           <div contenteditable
                name="myWidget" ng-model="userContent"
                strip-br="true"
                required>Change me!</div>
            <span ng-show="myForm.myWidget.$error.required">Required!</span>
           <hr>
           <textarea ng-model="userContent"></textarea>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
        it('should data-bind and become invalid', function() {
          if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
            // SafariDriver can't handle contenteditable
            // and Firefox driver can't clear contenteditables very well
            return;
          }
          var contentEditable = element(by.css('[contenteditable]'));
          var content = 'Change me!';
    
          expect(contentEditable.getText()).toEqual(content);
    
          contentEditable.clear();
          contentEditable.sendKeys(protractor.Key.BACK_SPACE);
          expect(contentEditable.getText()).toEqual('');
          expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
        });
        </file>
     * </example>
     *
     *
     */
    var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
        function ($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
            this.$viewValue = Number.NaN;
            this.$modelValue = Number.NaN;
            this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
            this.$validators = {};
            this.$asyncValidators = {};
            this.$parsers = [];
            this.$formatters = [];
            this.$viewChangeListeners = [];
            this.$untouched = true;
            this.$touched = false;
            this.$pristine = true;
            this.$dirty = false;
            this.$valid = true;
            this.$invalid = false;
            this.$error = {}; // keep invalid keys here
            this.$$success = {}; // keep valid keys here
            this.$pending = undefined; // keep pending keys here
            this.$name = $interpolate($attr.name || '', false)($scope);
            var parsedNgModel = $parse($attr.ngModel), parsedNgModelAssign = parsedNgModel.assign, ngModelGet = parsedNgModel, ngModelSet = parsedNgModelAssign, pendingDebounce = null, ctrl = this;
            this.$$setOptions = function (options) {
                ctrl.$options = options;
                if (options && options.getterSetter) {
                    var invokeModelGetter = $parse($attr.ngModel + '()'), invokeModelSetter = $parse($attr.ngModel + '($$$p)');
                    ngModelGet = function ($scope) {
                        var modelValue = parsedNgModel($scope);
                        if (isFunction(modelValue)) {
                            modelValue = invokeModelGetter($scope);
                        }
                        return modelValue;
                    };
                    ngModelSet = function ($scope, newValue) {
                        if (isFunction(parsedNgModel($scope))) {
                            invokeModelSetter($scope, { $$$p: ctrl.$modelValue });
                        }
                        else {
                            parsedNgModelAssign($scope, ctrl.$modelValue);
                        }
                    };
                }
                else if (!parsedNgModel.assign) {
                    throw $ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}", $attr.ngModel, startingTag($element));
                }
            };
            /**
             * @ngdoc method
             * @name ngModel.NgModelController#$render
             *
             * @description
             * Called when the view needs to be updated. It is expected that the user of the ng-model
             * directive will implement this method.
             *
             * The `$render()` method is invoked in the following situations:
             *
             * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
             *   committed value then `$render()` is called to update the input control.
             * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
             *   the `$viewValue` are different to last time.
             *
             * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
             * `$modelValue` and `$viewValue` are actually different to their previous value. If `$modelValue`
             * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
             * invoked if you only change a property on the objects.
             */
            this.$render = noop;
            /**
             * @ngdoc method
             * @name ngModel.NgModelController#$isEmpty
             *
             * @description
             * This is called when we need to determine if the value of an input is empty.
             *
             * For instance, the required directive does this to work out if the input has data or not.
             *
             * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
             *
             * You can override this for input directives whose concept of being empty is different to the
             * default. The `checkboxInputType` directive does this because in its case a value of `false`
             * implies empty.
             *
             * @param {*} value The value of the input to check for emptiness.
             * @returns {boolean} True if `value` is "empty".
             */
            this.$isEmpty = function (value) {
                return isUndefined(value) || value === '' || value === null || value !== value;
            };
            var parentForm = $element.inheritedData('$formController') || nullFormCtrl, currentValidationRunId = 0;
            /**
             * @ngdoc method
             * @name ngModel.NgModelController#$setValidity
             *
             * @description
             * Change the validity state, and notify the form.
             *
             * This method can be called within $parsers/$formatters or a custom validation implementation.
             * However, in most cases it should be sufficient to use the `ngModel.$validators` and
             * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
             *
             * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
             *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
             *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
             *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
             *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
             *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
             * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
             *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
             *                          Skipped is used by Angular when validators do not run because of parse errors and
             *                          when `$asyncValidators` do not run because any of the `$validators` failed.
             */
            addSetValidityMethod({
                ctrl: this,
                $element: $element,
                set: function (object, property) {
                    object[property] = true;
                },
                unset: function (object, property) {
                    delete object[property];
                },
                parentForm: parentForm,
                $animate: $animate
            });
            /**
             * @ngdoc method
             * @name ngModel.NgModelController#$setPristine
             *
             * @description
             * Sets the control to its pristine state.
             *
             * This method can be called to remove the `ng-dirty` class and set the control to its pristine
             * state (`ng-pristine` class). A model is considered to be pristine when the control
             * has not been changed from when first compiled.
             */
            this.$setPristine = function () {
                ctrl.$dirty = false;
                ctrl.$pristine = true;
                $animate.removeClass($element, DIRTY_CLASS);
                $animate.addClass($element, PRISTINE_CLASS);
            };
            /**
             * @ngdoc method
             * @name ngModel.NgModelController#$setDirty
             *
             * @description
             * Sets the control to its dirty state.
             *
             * This method can be called to remove the `ng-pristine` class and set the control to its dirty
             * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
             * from when first compiled.
             */
            this.$setDirty = function () {
                ctrl.$dirty = true;
                ctrl.$pristine = false;
                $animate.removeClass($element, PRISTINE_CLASS);
                $animate.addClass($element, DIRTY_CLASS);
                parentForm.$setDirty();
            };
            /**
             * @ngdoc method
             * @name ngModel.NgModelController#$setUntouched
             *
             * @description
             * Sets the control to its untouched state.
             *
             * This method can be called to remove the `ng-touched` class and set the control to its
             * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
             * by default, however this function can be used to restore that state if the model has
             * already been touched by the user.
             */
            this.$setUntouched = function () {
                ctrl.$touched = false;
                ctrl.$untouched = true;
                $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
            };
            /**
             * @ngdoc method
             * @name ngModel.NgModelController#$setTouched
             *
             * @description
             * Sets the control to its touched state.
             *
             * This method can be called to remove the `ng-untouched` class and set the control to its
             * touched state (`ng-touched` class). A model is considered to be touched when the user has
             * first focused the control element and then shifted focus away from the control (blur event).
             */
            this.$setTouched = function () {
                ctrl.$touched = true;
                ctrl.$untouched = false;
                $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
            };
            /**
             * @ngdoc method
             * @name ngModel.NgModelController#$rollbackViewValue
             *
             * @description
             * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
             * which may be caused by a pending debounced event or because the input is waiting for a some
             * future event.
             *
             * If you have an input that uses `ng-model-options` to set up debounced events or events such
             * as blur you can have a situation where there is a period when the `$viewValue`
             * is out of synch with the ngModel's `$modelValue`.
             *
             * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`
             * programmatically before these debounced/future events have resolved/occurred, because Angular's
             * dirty checking mechanism is not able to tell whether the model has actually changed or not.
             *
             * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
             * input which may have such events pending. This is important in order to make sure that the
             * input field will be updated with the new model value and any pending operations are cancelled.
             *
             * <example name="ng-model-cancel-update" module="cancel-update-example">
             *   <file name="app.js">
             *     angular.module('cancel-update-example', [])
             *
             *     .controller('CancelUpdateController', ['$scope', function($scope) {
             *       $scope.resetWithCancel = function(e) {
             *         if (e.keyCode == 27) {
             *           $scope.myForm.myInput1.$rollbackViewValue();
             *           $scope.myValue = '';
             *         }
             *       };
             *       $scope.resetWithoutCancel = function(e) {
             *         if (e.keyCode == 27) {
             *           $scope.myValue = '';
             *         }
             *       };
             *     }]);
             *   </file>
             *   <file name="index.html">
             *     <div ng-controller="CancelUpdateController">
             *       <p>Try typing something in each input.  See that the model only updates when you
             *          blur off the input.
             *        </p>
             *        <p>Now see what happens if you start typing then press the Escape key</p>
             *
             *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
             *         <p>With $rollbackViewValue()</p>
             *         <input name="myInput1" ng-model="myValue" ng-keydown="resetWithCancel($event)"><br/>
             *         myValue: "{{ myValue }}"
             *
             *         <p>Without $rollbackViewValue()</p>
             *         <input name="myInput2" ng-model="myValue" ng-keydown="resetWithoutCancel($event)"><br/>
             *         myValue: "{{ myValue }}"
             *       </form>
             *     </div>
             *   </file>
             * </example>
             */
            this.$rollbackViewValue = function () {
                $timeout.cancel(pendingDebounce);
                ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
                ctrl.$render();
            };
            /**
             * @ngdoc method
             * @name ngModel.NgModelController#$validate
             *
             * @description
             * Runs each of the registered validators (first synchronous validators and then
             * asynchronous validators).
             * If the validity changes to invalid, the model will be set to `undefined`,
             * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
             * If the validity changes to valid, it will set the model to the last available valid
             * modelValue, i.e. either the last parsed value or the last value set from the scope.
             */
            this.$validate = function () {
                // ignore $validate before model is initialized
                if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
                    return;
                }
                var viewValue = ctrl.$$lastCommittedViewValue;
                // Note: we use the $$rawModelValue as $modelValue might have been
                // set to undefined during a view -> model update that found validation
                // errors. We can't parse the view here, since that could change
                // the model although neither viewValue nor the model on the scope changed
                var modelValue = ctrl.$$rawModelValue;
                // Check if the there's a parse error, so we don't unset it accidentially
                var parserName = ctrl.$$parserName || 'parse';
                var parserValid = ctrl.$error[parserName] ? false : undefined;
                var prevValid = ctrl.$valid;
                var prevModelValue = ctrl.$modelValue;
                var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
                ctrl.$$runValidators(parserValid, modelValue, viewValue, function (allValid) {
                    // If there was no change in validity, don't update the model
                    // This prevents changing an invalid modelValue to undefined
                    if (!allowInvalid && prevValid !== allValid) {
                        // Note: Don't check ctrl.$valid here, as we could have
                        // external validators (e.g. calculated on the server),
                        // that just call $setValidity and need the model value
                        // to calculate their validity.
                        ctrl.$modelValue = allValid ? modelValue : undefined;
                        if (ctrl.$modelValue !== prevModelValue) {
                            ctrl.$$writeModelToScope();
                        }
                    }
                });
            };
            this.$$runValidators = function (parseValid, modelValue, viewValue, doneCallback) {
                currentValidationRunId++;
                var localValidationRunId = currentValidationRunId;
                // check parser error
                if (!processParseErrors(parseValid)) {
                    validationDone(false);
                    return;
                }
                if (!processSyncValidators()) {
                    validationDone(false);
                    return;
                }
                processAsyncValidators();
                function processParseErrors(parseValid) {
                    var errorKey = ctrl.$$parserName || 'parse';
                    if (parseValid === undefined) {
                        setValidity(errorKey, null);
                    }
                    else {
                        setValidity(errorKey, parseValid);
                        if (!parseValid) {
                            forEach(ctrl.$validators, function (v, name) {
                                setValidity(name, null);
                            });
                            forEach(ctrl.$asyncValidators, function (v, name) {
                                setValidity(name, null);
                            });
                            return false;
                        }
                    }
                    return true;
                }
                function processSyncValidators() {
                    var syncValidatorsValid = true;
                    forEach(ctrl.$validators, function (validator, name) {
                        var result = validator(modelValue, viewValue);
                        syncValidatorsValid = syncValidatorsValid && result;
                        setValidity(name, result);
                    });
                    if (!syncValidatorsValid) {
                        forEach(ctrl.$asyncValidators, function (v, name) {
                            setValidity(name, null);
                        });
                        return false;
                    }
                    return true;
                }
                function processAsyncValidators() {
                    var validatorPromises = [];
                    var allValid = true;
                    forEach(ctrl.$asyncValidators, function (validator, name) {
                        var promise = validator(modelValue, viewValue);
                        if (!isPromiseLike(promise)) {
                            throw $ngModelMinErr("$asyncValidators", "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
                        }
                        setValidity(name, undefined);
                        validatorPromises.push(promise.then(function () {
                            setValidity(name, true);
                        }, function (error) {
                            allValid = false;
                            setValidity(name, false);
                        }));
                    });
                    if (!validatorPromises.length) {
                        validationDone(true);
                    }
                    else {
                        $q.all(validatorPromises).then(function () {
                            validationDone(allValid);
                        }, noop);
                    }
                }
                function setValidity(name, isValid) {
                    if (localValidationRunId === currentValidationRunId) {
                        ctrl.$setValidity(name, isValid);
                    }
                }
                function validationDone(allValid) {
                    if (localValidationRunId === currentValidationRunId) {
                        doneCallback(allValid);
                    }
                }
            };
            /**
             * @ngdoc method
             * @name ngModel.NgModelController#$commitViewValue
             *
             * @description
             * Commit a pending update to the `$modelValue`.
             *
             * Updates may be pending by a debounced event or because the input is waiting for a some future
             * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
             * usually handles calling this in response to input events.
             */
            this.$commitViewValue = function () {
                var viewValue = ctrl.$viewValue;
                $timeout.cancel(pendingDebounce);
                // If the view value has not changed then we should just exit, except in the case where there is
                // a native validator on the element. In this case the validation state may have changed even though
                // the viewValue has stayed empty.
                if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
                    return;
                }
                ctrl.$$lastCommittedViewValue = viewValue;
                // change to dirty
                if (ctrl.$pristine) {
                    this.$setDirty();
                }
                this.$$parseAndValidate();
            };
            this.$$parseAndValidate = function () {
                var viewValue = ctrl.$$lastCommittedViewValue;
                var modelValue = viewValue;
                var parserValid = isUndefined(modelValue) ? undefined : true;
                if (parserValid) {
                    for (var i = 0; i < ctrl.$parsers.length; i++) {
                        modelValue = ctrl.$parsers[i](modelValue);
                        if (isUndefined(modelValue)) {
                            parserValid = false;
                            break;
                        }
                    }
                }
                if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
                    // ctrl.$modelValue has not been touched yet...
                    ctrl.$modelValue = ngModelGet($scope);
                }
                var prevModelValue = ctrl.$modelValue;
                var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
                ctrl.$$rawModelValue = modelValue;
                if (allowInvalid) {
                    ctrl.$modelValue = modelValue;
                    writeToModelIfNeeded();
                }
                ctrl.$$runValidators(parserValid, modelValue, viewValue, function (allValid) {
                    if (!allowInvalid) {
                        // Note: Don't check ctrl.$valid here, as we could have
                        // external validators (e.g. calculated on the server),
                        // that just call $setValidity and need the model value
                        // to calculate their validity.
                        ctrl.$modelValue = allValid ? modelValue : undefined;
                        writeToModelIfNeeded();
                    }
                });
                function writeToModelIfNeeded() {
                    if (ctrl.$modelValue !== prevModelValue) {
                        ctrl.$$writeModelToScope();
                    }
                }
            };
            this.$$writeModelToScope = function () {
                ngModelSet($scope, ctrl.$modelValue);
                forEach(ctrl.$viewChangeListeners, function (listener) {
                    try {
                        listener();
                    }
                    catch (e) {
                        $exceptionHandler(e);
                    }
                });
            };
            /**
             * @ngdoc method
             * @name ngModel.NgModelController#$setViewValue
             *
             * @description
             * Update the view value.
             *
             * This method should be called when an input directive want to change the view value; typically,
             * this is done from within a DOM event handler.
             *
             * For example {@link ng.directive:input input} calls it when the value of the input changes and
             * {@link ng.directive:select select} calls it when an option is selected.
             *
             * If the new `value` is an object (rather than a string or a number), we should make a copy of the
             * object before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep
             * watch of objects, it only looks for a change of identity. If you only change the property of
             * the object then ngModel will not realise that the object has changed and will not invoke the
             * `$parsers` and `$validators` pipelines.
             *
             * For this reason, you should not change properties of the copy once it has been passed to
             * `$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.
             *
             * When this method is called, the new `value` will be staged for committing through the `$parsers`
             * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
             * value sent directly for processing, finally to be applied to `$modelValue` and then the
             * **expression** specified in the `ng-model` attribute.
             *
             * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.
             *
             * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
             * and the `default` trigger is not listed, all those actions will remain pending until one of the
             * `updateOn` events is triggered on the DOM element.
             * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
             * directive is used with a custom debounce for this particular event.
             *
             * Note that calling this function does not trigger a `$digest`.
             *
             * @param {string} value Value from the view.
             * @param {string} trigger Event that triggered the update.
             */
            this.$setViewValue = function (value, trigger) {
                ctrl.$viewValue = value;
                if (!ctrl.$options || ctrl.$options.updateOnDefault) {
                    ctrl.$$debounceViewValueCommit(trigger);
                }
            };
            this.$$debounceViewValueCommit = function (trigger) {
                var debounceDelay = 0, options = ctrl.$options, debounce;
                if (options && isDefined(options.debounce)) {
                    debounce = options.debounce;
                    if (isNumber(debounce)) {
                        debounceDelay = debounce;
                    }
                    else if (isNumber(debounce[trigger])) {
                        debounceDelay = debounce[trigger];
                    }
                    else if (isNumber(debounce['default'])) {
                        debounceDelay = debounce['default'];
                    }
                }
                $timeout.cancel(pendingDebounce);
                if (debounceDelay) {
                    pendingDebounce = $timeout(function () {
                        ctrl.$commitViewValue();
                    }, debounceDelay);
                }
                else if ($rootScope.$$phase) {
                    ctrl.$commitViewValue();
                }
                else {
                    $scope.$apply(function () {
                        ctrl.$commitViewValue();
                    });
                }
            };
            // model -> value
            // Note: we cannot use a normal scope.$watch as we want to detect the following:
            // 1. scope value is 'a'
            // 2. user enters 'b'
            // 3. ng-change kicks in and reverts scope value to 'a'
            //    -> scope value did not change since the last digest as
            //       ng-change executes in apply phase
            // 4. view should be changed back to 'a'
            $scope.$watch(function ngModelWatch() {
                var modelValue = ngModelGet($scope);
                // if scope model value and ngModel value are out of sync
                // TODO(perf): why not move this to the action fn?
                if (modelValue !== ctrl.$modelValue) {
                    ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
                    var formatters = ctrl.$formatters, idx = formatters.length;
                    var viewValue = modelValue;
                    while (idx--) {
                        viewValue = formatters[idx](viewValue);
                    }
                    if (ctrl.$viewValue !== viewValue) {
                        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
                        ctrl.$render();
                        ctrl.$$runValidators(undefined, modelValue, viewValue, noop);
                    }
                }
                return modelValue;
            });
        }];
    /**
     * @ngdoc directive
     * @name ngModel
     *
     * @element input
     * @priority 1
     *
     * @description
     * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
     * property on the scope using {@link ngModel.NgModelController NgModelController},
     * which is created and exposed by this directive.
     *
     * `ngModel` is responsible for:
     *
     * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
     *   require.
     * - Providing validation behavior (i.e. required, number, email, url).
     * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
     * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
     * - Registering the control with its parent {@link ng.directive:form form}.
     *
     * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
     * current scope. If the property doesn't already exist on this scope, it will be created
     * implicitly and added to the scope.
     *
     * For best practices on using `ngModel`, see:
     *
     *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
     *
     * For basic examples, how to use `ngModel`, see:
     *
     *  - {@link ng.directive:input input}
     *    - {@link input[text] text}
     *    - {@link input[checkbox] checkbox}
     *    - {@link input[radio] radio}
     *    - {@link input[number] number}
     *    - {@link input[email] email}
     *    - {@link input[url] url}
     *    - {@link input[date] date}
     *    - {@link input[datetime-local] datetime-local}
     *    - {@link input[time] time}
     *    - {@link input[month] month}
     *    - {@link input[week] week}
     *  - {@link ng.directive:select select}
     *  - {@link ng.directive:textarea textarea}
     *
     * # CSS classes
     * The following CSS classes are added and removed on the associated input/select/textarea element
     * depending on the validity of the model.
     *
     *  - `ng-valid`: the model is valid
     *  - `ng-invalid`: the model is invalid
     *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
     *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
     *  - `ng-pristine`: the control hasn't been interacted with yet
     *  - `ng-dirty`: the control has been interacted with
     *  - `ng-touched`: the control has been blurred
     *  - `ng-untouched`: the control hasn't been blurred
     *  - `ng-pending`: any `$asyncValidators` are unfulfilled
     *
     * Keep in mind that ngAnimate can detect each of these classes when added and removed.
     *
     * ## Animation Hooks
     *
     * Animations within models are triggered when any of the associated CSS classes are added and removed
     * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
     * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
     * The animations that are triggered within ngModel are similar to how they work in ngClass and
     * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
     *
     * The following example shows a simple way to utilize CSS transitions to style an input element
     * that has been rendered as invalid after it has been validated:
     *
     * <pre>
     * //be sure to include ngAnimate as a module to hook into more
     * //advanced animations
     * .my-input {
     *   transition:0.5s linear all;
     *   background: white;
     * }
     * .my-input.ng-invalid {
     *   background: red;
     *   color:white;
     * }
     * </pre>
     *
     * @example
     * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
         <file name="index.html">
           <script>
            angular.module('inputExample', [])
              .controller('ExampleController', ['$scope', function($scope) {
                $scope.val = '1';
              }]);
           </script>
           <style>
             .my-input {
               -webkit-transition:all linear 0.5s;
               transition:all linear 0.5s;
               background: transparent;
             }
             .my-input.ng-invalid {
               color:white;
               background: red;
             }
           </style>
           Update input to see transitions when valid/invalid.
           Integer is a valid value.
           <form name="testForm" ng-controller="ExampleController">
             <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input" />
           </form>
         </file>
     * </example>
     *
     * ## Binding to a getter/setter
     *
     * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
     * function that returns a representation of the model when called with zero arguments, and sets
     * the internal state of a model when called with an argument. It's sometimes useful to use this
     * for models that have an internal representation that's different than what the model exposes
     * to the view.
     *
     * <div class="alert alert-success">
     * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
     * frequently than other parts of your code.
     * </div>
     *
     * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
     * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
     * a `<form>`, which will enable this behavior for all `<input>`s within it. See
     * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
     *
     * The following example shows how to use `ngModel` with a getter/setter:
     *
     * @example
     * <example name="ngModel-getter-setter" module="getterSetterExample">
         <file name="index.html">
           <div ng-controller="ExampleController">
             <form name="userForm">
               Name:
               <input type="text" name="userName"
                      ng-model="user.name"
                      ng-model-options="{ getterSetter: true }" />
             </form>
             <pre>user.name = <span ng-bind="user.name()"></span></pre>
           </div>
         </file>
         <file name="app.js">
           angular.module('getterSetterExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               var _name = 'Brian';
               $scope.user = {
                 name: function(newName) {
                   if (angular.isDefined(newName)) {
                     _name = newName;
                   }
                   return _name;
                 }
               };
             }]);
         </file>
     * </example>
     */
    var ngModelDirective = ['$rootScope', function ($rootScope) {
            return {
                restrict: 'A',
                require: ['ngModel', '^?form', '^?ngModelOptions'],
                controller: NgModelController,
                // Prelink needs to run before any input directive
                // so that we can set the NgModelOptions in NgModelController
                // before anyone else uses it.
                priority: 1,
                compile: function ngModelCompile(element) {
                    // Setup initial state of the control
                    element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);
                    return {
                        pre: function ngModelPreLink(scope, element, attr, ctrls) {
                            var modelCtrl = ctrls[0], formCtrl = ctrls[1] || nullFormCtrl;
                            modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);
                            // notify others, especially parent forms
                            formCtrl.$addControl(modelCtrl);
                            attr.$observe('name', function (newValue) {
                                if (modelCtrl.$name !== newValue) {
                                    formCtrl.$$renameControl(modelCtrl, newValue);
                                }
                            });
                            scope.$on('$destroy', function () {
                                formCtrl.$removeControl(modelCtrl);
                            });
                        },
                        post: function ngModelPostLink(scope, element, attr, ctrls) {
                            var modelCtrl = ctrls[0];
                            if (modelCtrl.$options && modelCtrl.$options.updateOn) {
                                element.on(modelCtrl.$options.updateOn, function (ev) {
                                    modelCtrl.$$debounceViewValueCommit(ev && ev.type);
                                });
                            }
                            element.on('blur', function (ev) {
                                if (modelCtrl.$touched)
                                    return;
                                if ($rootScope.$$phase) {
                                    scope.$evalAsync(modelCtrl.$setTouched);
                                }
                                else {
                                    scope.$apply(modelCtrl.$setTouched);
                                }
                            });
                        }
                    };
                }
            };
        }];
    /**
     * @ngdoc directive
     * @name ngChange
     *
     * @description
     * Evaluate the given expression when the user changes the input.
     * The expression is evaluated immediately, unlike the JavaScript onchange event
     * which only triggers at the end of a change (usually, when the user leaves the
     * form element or presses the return key).
     *
     * The `ngChange` expression is only evaluated when a change in the input value causes
     * a new value to be committed to the model.
     *
     * It will not be evaluated:
     * * if the value returned from the `$parsers` transformation pipeline has not changed
     * * if the input has continued to be invalid since the model will stay `null`
     * * if the model is changed programmatically and not by a change to the input value
     *
     *
     * Note, this directive requires `ngModel` to be present.
     *
     * @element input
     * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
     * in input value.
     *
     * @example
     * <example name="ngChange-directive" module="changeExample">
     *   <file name="index.html">
     *     <script>
     *       angular.module('changeExample', [])
     *         .controller('ExampleController', ['$scope', function($scope) {
     *           $scope.counter = 0;
     *           $scope.change = function() {
     *             $scope.counter++;
     *           };
     *         }]);
     *     </script>
     *     <div ng-controller="ExampleController">
     *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
     *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
     *       <label for="ng-change-example2">Confirmed</label><br />
     *       <tt>debug = {{confirmed}}</tt><br/>
     *       <tt>counter = {{counter}}</tt><br/>
     *     </div>
     *   </file>
     *   <file name="protractor.js" type="protractor">
     *     var counter = element(by.binding('counter'));
     *     var debug = element(by.binding('confirmed'));
     *
     *     it('should evaluate the expression if changing from view', function() {
     *       expect(counter.getText()).toContain('0');
     *
     *       element(by.id('ng-change-example1')).click();
     *
     *       expect(counter.getText()).toContain('1');
     *       expect(debug.getText()).toContain('true');
     *     });
     *
     *     it('should not evaluate the expression if changing from model', function() {
     *       element(by.id('ng-change-example2')).click();
    
     *       expect(counter.getText()).toContain('0');
     *       expect(debug.getText()).toContain('true');
     *     });
     *   </file>
     * </example>
     */
    var ngChangeDirective = valueFn({
        restrict: 'A',
        require: 'ngModel',
        link: function (scope, element, attr, ctrl) {
            ctrl.$viewChangeListeners.push(function () {
                scope.$eval(attr.ngChange);
            });
        }
    });
    var requiredDirective = function () {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, elm, attr, ctrl) {
                if (!ctrl)
                    return;
                attr.required = true; // force truthy in case we are on non input element
                ctrl.$validators.required = function (modelValue, viewValue) {
                    return !attr.required || !ctrl.$isEmpty(viewValue);
                };
                attr.$observe('required', function () {
                    ctrl.$validate();
                });
            }
        };
    };
    var patternDirective = function () {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, elm, attr, ctrl) {
                if (!ctrl)
                    return;
                var regexp, patternExp = attr.ngPattern || attr.pattern;
                attr.$observe('pattern', function (regex) {
                    if (isString(regex) && regex.length > 0) {
                        regex = new RegExp('^' + regex + '$');
                    }
                    if (regex && !regex.test) {
                        throw minErr('ngPattern')('noregexp', 'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp, regex, startingTag(elm));
                    }
                    regexp = regex || undefined;
                    ctrl.$validate();
                });
                ctrl.$validators.pattern = function (value) {
                    return ctrl.$isEmpty(value) || isUndefined(regexp) || regexp.test(value);
                };
            }
        };
    };
    var maxlengthDirective = function () {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, elm, attr, ctrl) {
                if (!ctrl)
                    return;
                var maxlength = -1;
                attr.$observe('maxlength', function (value) {
                    var intVal = int(value);
                    maxlength = isNaN(intVal) ? -1 : intVal;
                    ctrl.$validate();
                });
                ctrl.$validators.maxlength = function (modelValue, viewValue) {
                    return (maxlength < 0) || ctrl.$isEmpty(modelValue) || (viewValue.length <= maxlength);
                };
            }
        };
    };
    var minlengthDirective = function () {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, elm, attr, ctrl) {
                if (!ctrl)
                    return;
                var minlength = 0;
                attr.$observe('minlength', function (value) {
                    minlength = int(value) || 0;
                    ctrl.$validate();
                });
                ctrl.$validators.minlength = function (modelValue, viewValue) {
                    return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
                };
            }
        };
    };
    /**
     * @ngdoc directive
     * @name ngList
     *
     * @description
     * Text input that converts between a delimited string and an array of strings. The default
     * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
     * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
     *
     * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
     * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
     *   list item is respected. This implies that the user of the directive is responsible for
     *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
     *   tab or newline character.
     * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
     *   when joining the list items back together) and whitespace around each list item is stripped
     *   before it is added to the model.
     *
     * ### Example with Validation
     *
     * <example name="ngList-directive" module="listExample">
     *   <file name="app.js">
     *      angular.module('listExample', [])
     *        .controller('ExampleController', ['$scope', function($scope) {
     *          $scope.names = ['morpheus', 'neo', 'trinity'];
     *        }]);
     *   </file>
     *   <file name="index.html">
     *    <form name="myForm" ng-controller="ExampleController">
     *      List: <input name="namesInput" ng-model="names" ng-list required>
     *      <span class="error" ng-show="myForm.namesInput.$error.required">
     *        Required!</span>
     *      <br>
     *      <tt>names = {{names}}</tt><br/>
     *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
     *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
     *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
     *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     *     </form>
     *   </file>
     *   <file name="protractor.js" type="protractor">
     *     var listInput = element(by.model('names'));
     *     var names = element(by.exactBinding('names'));
     *     var valid = element(by.binding('myForm.namesInput.$valid'));
     *     var error = element(by.css('span.error'));
     *
     *     it('should initialize to model', function() {
     *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
     *       expect(valid.getText()).toContain('true');
     *       expect(error.getCssValue('display')).toBe('none');
     *     });
     *
     *     it('should be invalid if empty', function() {
     *       listInput.clear();
     *       listInput.sendKeys('');
     *
     *       expect(names.getText()).toContain('');
     *       expect(valid.getText()).toContain('false');
     *       expect(error.getCssValue('display')).not.toBe('none');
     *     });
     *   </file>
     * </example>
     *
     * ### Example - splitting on whitespace
     * <example name="ngList-directive-newlines">
     *   <file name="index.html">
     *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
     *    <pre>{{ list | json }}</pre>
     *   </file>
     *   <file name="protractor.js" type="protractor">
     *     it("should split the text by newlines", function() {
     *       var listInput = element(by.model('list'));
     *       var output = element(by.binding('list | json'));
     *       listInput.sendKeys('abc\ndef\nghi');
     *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
     *     });
     *   </file>
     * </example>
     *
     * @element input
     * @param {string=} ngList optional delimiter that should be used to split the value.
     */
    var ngListDirective = function () {
        return {
            restrict: 'A',
            priority: 100,
            require: 'ngModel',
            link: function (scope, element, attr, ctrl) {
                // We want to control whitespace trimming so we use this convoluted approach
                // to access the ngList attribute, which doesn't pre-trim the attribute
                var ngList = element.attr(attr.$attr.ngList) || ', ';
                var trimValues = attr.ngTrim !== 'false';
                var separator = trimValues ? trim(ngList) : ngList;
                var parse = function (viewValue) {
                    // If the viewValue is invalid (say required but empty) it will be `undefined`
                    if (isUndefined(viewValue))
                        return;
                    var list = [];
                    if (viewValue) {
                        forEach(viewValue.split(separator), function (value) {
                            if (value)
                                list.push(trimValues ? trim(value) : value);
                        });
                    }
                    return list;
                };
                ctrl.$parsers.push(parse);
                ctrl.$formatters.push(function (value) {
                    if (isArray(value)) {
                        return value.join(ngList);
                    }
                    return undefined;
                });
                // Override the standard $isEmpty because an empty array means the input is empty.
                ctrl.$isEmpty = function (value) {
                    return !value || !value.length;
                };
            }
        };
    };
    var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
    /**
     * @ngdoc directive
     * @name ngValue
     *
     * @description
     * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
     * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
     * the bound value.
     *
     * `ngValue` is useful when dynamically generating lists of radio buttons using
     * {@link ngRepeat `ngRepeat`}, as shown below.
     *
     * Likewise, `ngValue` can be used to generate `<option>` elements for
     * the {@link select `select`} element. In that case however, only strings are supported
     * for the `value `attribute, so the resulting `ngModel` will always be a string.
     * Support for `select` models with non-string values is available via `ngOptions`.
     *
     * @element input
     * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
     *   of the `input` element
     *
     * @example
        <example name="ngValue-directive" module="valueExample">
          <file name="index.html">
           <script>
              angular.module('valueExample', [])
                .controller('ExampleController', ['$scope', function($scope) {
                  $scope.names = ['pizza', 'unicorns', 'robots'];
                  $scope.my = { favorite: 'unicorns' };
                }]);
           </script>
            <form ng-controller="ExampleController">
              <h2>Which is your favorite?</h2>
                <label ng-repeat="name in names" for="{{name}}">
                  {{name}}
                  <input type="radio"
                         ng-model="my.favorite"
                         ng-value="name"
                         id="{{name}}"
                         name="favorite">
                </label>
              <div>You chose {{my.favorite}}</div>
            </form>
          </file>
          <file name="protractor.js" type="protractor">
            var favorite = element(by.binding('my.favorite'));
    
            it('should initialize to model', function() {
              expect(favorite.getText()).toContain('unicorns');
            });
            it('should bind the values to the inputs', function() {
              element.all(by.model('my.favorite')).get(0).click();
              expect(favorite.getText()).toContain('pizza');
            });
          </file>
        </example>
     */
    var ngValueDirective = function () {
        return {
            restrict: 'A',
            priority: 100,
            compile: function (tpl, tplAttr) {
                if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
                    return function ngValueConstantLink(scope, elm, attr) {
                        attr.$set('value', scope.$eval(attr.ngValue));
                    };
                }
                else {
                    return function ngValueLink(scope, elm, attr) {
                        scope.$watch(attr.ngValue, function valueWatchAction(value) {
                            attr.$set('value', value);
                        });
                    };
                }
            }
        };
    };
    /**
     * @ngdoc directive
     * @name ngModelOptions
     *
     * @description
     * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
     * events that will trigger a model update and/or a debouncing delay so that the actual update only
     * takes place when a timer expires; this timer will be reset after another change takes place.
     *
     * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
     * be different than the value in the actual model. This means that if you update the model you
     * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
     * order to make sure it is synchronized with the model and that any debounced action is canceled.
     *
     * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
     * method is by making sure the input is placed inside a form that has a `name` attribute. This is
     * important because `form` controllers are published to the related scope under the name in their
     * `name` attribute.
     *
     * Any pending changes will take place immediately when an enclosing form is submitted via the
     * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
     * to have access to the updated model.
     *
     * `ngModelOptions` has an effect on the element it's declared on and its descendants.
     *
     * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
     *   - `updateOn`: string specifying which event should the input be bound to. You can set several
     *     events using an space delimited list. There is a special event called `default` that
     *     matches the default events belonging of the control.
     *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
     *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
     *     custom value for each event. For example:
     *     `ng-model-options="{ updateOn: 'default blur', debounce: {'default': 500, 'blur': 0} }"`
     *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
     *     not validate correctly instead of the default behavior of setting the model to undefined.
     *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
           `ngModel` as getters/setters.
     *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
     *     `<input type="date">`, `<input type="time">`, ... . Right now, the only supported value is `'UTC'`,
     *     otherwise the default timezone of the browser will be used.
     *
     * @example
    
      The following example shows how to override immediate updates. Changes on the inputs within the
      form will update the model only when the control loses focus (blur event). If `escape` key is
      pressed while the input field is focused, the value is reset to the value in the current model.
    
      <example name="ngModelOptions-directive-blur" module="optionsExample">
        <file name="index.html">
          <div ng-controller="ExampleController">
            <form name="userForm">
              Name:
              <input type="text" name="userName"
                     ng-model="user.name"
                     ng-model-options="{ updateOn: 'blur' }"
                     ng-keyup="cancel($event)" /><br />
    
              Other data:
              <input type="text" ng-model="user.data" /><br />
            </form>
            <pre>user.name = <span ng-bind="user.name"></span></pre>
          </div>
        </file>
        <file name="app.js">
          angular.module('optionsExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = { name: 'say', data: '' };
    
              $scope.cancel = function(e) {
                if (e.keyCode == 27) {
                  $scope.userForm.userName.$rollbackViewValue();
                }
              };
            }]);
        </file>
        <file name="protractor.js" type="protractor">
          var model = element(by.binding('user.name'));
          var input = element(by.model('user.name'));
          var other = element(by.model('user.data'));
    
          it('should allow custom events', function() {
            input.sendKeys(' hello');
            input.click();
            expect(model.getText()).toEqual('say');
            other.click();
            expect(model.getText()).toEqual('say hello');
          });
    
          it('should $rollbackViewValue when model changes', function() {
            input.sendKeys(' hello');
            expect(input.getAttribute('value')).toEqual('say hello');
            input.sendKeys(protractor.Key.ESCAPE);
            expect(input.getAttribute('value')).toEqual('say');
            other.click();
            expect(model.getText()).toEqual('say');
          });
        </file>
      </example>
    
      This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
      If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.
    
      <example name="ngModelOptions-directive-debounce" module="optionsExample">
        <file name="index.html">
          <div ng-controller="ExampleController">
            <form name="userForm">
              Name:
              <input type="text" name="userName"
                     ng-model="user.name"
                     ng-model-options="{ debounce: 1000 }" />
              <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button><br />
            </form>
            <pre>user.name = <span ng-bind="user.name"></span></pre>
          </div>
        </file>
        <file name="app.js">
          angular.module('optionsExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = { name: 'say' };
            }]);
        </file>
      </example>
    
      This one shows how to bind to getter/setters:
    
      <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
        <file name="index.html">
          <div ng-controller="ExampleController">
            <form name="userForm">
              Name:
              <input type="text" name="userName"
                     ng-model="user.name"
                     ng-model-options="{ getterSetter: true }" />
            </form>
            <pre>user.name = <span ng-bind="user.name()"></span></pre>
          </div>
        </file>
        <file name="app.js">
          angular.module('getterSetterExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              var _name = 'Brian';
              $scope.user = {
                name: function(newName) {
                  return angular.isDefined(newName) ? (_name = newName) : _name;
                }
              };
            }]);
        </file>
      </example>
     */
    var ngModelOptionsDirective = function () {
        return {
            restrict: 'A',
            controller: ['$scope', '$attrs', function ($scope, $attrs) {
                    var that = this;
                    this.$options = $scope.$eval($attrs.ngModelOptions);
                    // Allow adding/overriding bound events
                    if (this.$options.updateOn !== undefined) {
                        this.$options.updateOnDefault = false;
                        // extract "default" pseudo-event from list of events that can trigger a model update
                        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function () {
                            that.$options.updateOnDefault = true;
                            return ' ';
                        }));
                    }
                    else {
                        this.$options.updateOnDefault = true;
                    }
                }]
        };
    };
    // helper methods
    function addSetValidityMethod(context) {
        var ctrl = context.ctrl, $element = context.$element, classCache = {}, set = context.set, unset = context.unset, parentForm = context.parentForm, $animate = context.$animate;
        classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));
        ctrl.$setValidity = setValidity;
        function setValidity(validationErrorKey, state, options) {
            if (state === undefined) {
                createAndSet('$pending', validationErrorKey, options);
            }
            else {
                unsetAndCleanup('$pending', validationErrorKey, options);
            }
            if (!isBoolean(state)) {
                unset(ctrl.$error, validationErrorKey, options);
                unset(ctrl.$$success, validationErrorKey, options);
            }
            else {
                if (state) {
                    unset(ctrl.$error, validationErrorKey, options);
                    set(ctrl.$$success, validationErrorKey, options);
                }
                else {
                    set(ctrl.$error, validationErrorKey, options);
                    unset(ctrl.$$success, validationErrorKey, options);
                }
            }
            if (ctrl.$pending) {
                cachedToggleClass(PENDING_CLASS, true);
                ctrl.$valid = ctrl.$invalid = undefined;
                toggleValidationCss('', null);
            }
            else {
                cachedToggleClass(PENDING_CLASS, false);
                ctrl.$valid = isObjectEmpty(ctrl.$error);
                ctrl.$invalid = !ctrl.$valid;
                toggleValidationCss('', ctrl.$valid);
            }
            // re-read the state as the set/unset methods could have
            // combined state in ctrl.$error[validationError] (used for forms),
            // where setting/unsetting only increments/decrements the value,
            // and does not replace it.
            var combinedState;
            if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
                combinedState = undefined;
            }
            else if (ctrl.$error[validationErrorKey]) {
                combinedState = false;
            }
            else if (ctrl.$$success[validationErrorKey]) {
                combinedState = true;
            }
            else {
                combinedState = null;
            }
            toggleValidationCss(validationErrorKey, combinedState);
            parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
        }
        function createAndSet(name, value, options) {
            if (!ctrl[name]) {
                ctrl[name] = {};
            }
            set(ctrl[name], value, options);
        }
        function unsetAndCleanup(name, value, options) {
            if (ctrl[name]) {
                unset(ctrl[name], value, options);
            }
            if (isObjectEmpty(ctrl[name])) {
                ctrl[name] = undefined;
            }
        }
        function cachedToggleClass(className, switchValue) {
            if (switchValue && !classCache[className]) {
                $animate.addClass($element, className);
                classCache[className] = true;
            }
            else if (!switchValue && classCache[className]) {
                $animate.removeClass($element, className);
                classCache[className] = false;
            }
        }
        function toggleValidationCss(validationErrorKey, isValid) {
            validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
            cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
            cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
        }
    }
    function isObjectEmpty(obj) {
        if (obj) {
            for (var prop in obj) {
                return false;
            }
        }
        return true;
    }
    /**
     * @ngdoc directive
     * @name ngBind
     * @restrict AC
     *
     * @description
     * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
     * with the value of a given expression, and to update the text content when the value of that
     * expression changes.
     *
     * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
     * `{{ expression }}` which is similar but less verbose.
     *
     * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
     * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
     * element attribute, it makes the bindings invisible to the user while the page is loading.
     *
     * An alternative solution to this problem would be using the
     * {@link ng.directive:ngCloak ngCloak} directive.
     *
     *
     * @element ANY
     * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
     *
     * @example
     * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
       <example module="bindExample">
         <file name="index.html">
           <script>
             angular.module('bindExample', [])
               .controller('ExampleController', ['$scope', function($scope) {
                 $scope.name = 'Whirled';
               }]);
           </script>
           <div ng-controller="ExampleController">
             Enter name: <input type="text" ng-model="name"><br>
             Hello <span ng-bind="name"></span>!
           </div>
         </file>
         <file name="protractor.js" type="protractor">
           it('should check ng-bind', function() {
             var nameInput = element(by.model('name'));
    
             expect(element(by.binding('name')).getText()).toBe('Whirled');
             nameInput.clear();
             nameInput.sendKeys('world');
             expect(element(by.binding('name')).getText()).toBe('world');
           });
         </file>
       </example>
     */
    var ngBindDirective = ['$compile', function ($compile) {
            return {
                restrict: 'AC',
                compile: function ngBindCompile(templateElement) {
                    $compile.$$addBindingClass(templateElement);
                    return function ngBindLink(scope, element, attr) {
                        $compile.$$addBindingInfo(element, attr.ngBind);
                        element = element[0];
                        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
                            element.textContent = value === undefined ? '' : value;
                        });
                    };
                }
            };
        }];
    /**
     * @ngdoc directive
     * @name ngBindTemplate
     *
     * @description
     * The `ngBindTemplate` directive specifies that the element
     * text content should be replaced with the interpolation of the template
     * in the `ngBindTemplate` attribute.
     * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
     * expressions. This directive is needed since some HTML elements
     * (such as TITLE and OPTION) cannot contain SPAN elements.
     *
     * @element ANY
     * @param {string} ngBindTemplate template of form
     *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
     *
     * @example
     * Try it here: enter text in text box and watch the greeting change.
       <example module="bindExample">
         <file name="index.html">
           <script>
             angular.module('bindExample', [])
               .controller('ExampleController', ['$scope', function($scope) {
                 $scope.salutation = 'Hello';
                 $scope.name = 'World';
               }]);
           </script>
           <div ng-controller="ExampleController">
            Salutation: <input type="text" ng-model="salutation"><br>
            Name: <input type="text" ng-model="name"><br>
            <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
           </div>
         </file>
         <file name="protractor.js" type="protractor">
           it('should check ng-bind', function() {
             var salutationElem = element(by.binding('salutation'));
             var salutationInput = element(by.model('salutation'));
             var nameInput = element(by.model('name'));
    
             expect(salutationElem.getText()).toBe('Hello World!');
    
             salutationInput.clear();
             salutationInput.sendKeys('Greetings');
             nameInput.clear();
             nameInput.sendKeys('user');
    
             expect(salutationElem.getText()).toBe('Greetings user!');
           });
         </file>
       </example>
     */
    var ngBindTemplateDirective = ['$interpolate', '$compile', function ($interpolate, $compile) {
            return {
                compile: function ngBindTemplateCompile(templateElement) {
                    $compile.$$addBindingClass(templateElement);
                    return function ngBindTemplateLink(scope, element, attr) {
                        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
                        $compile.$$addBindingInfo(element, interpolateFn.expressions);
                        element = element[0];
                        attr.$observe('ngBindTemplate', function (value) {
                            element.textContent = value === undefined ? '' : value;
                        });
                    };
                }
            };
        }];
    /**
     * @ngdoc directive
     * @name ngBindHtml
     *
     * @description
     * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
     * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
     * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
     * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
     * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
     *
     * You may also bypass sanitization for values you know are safe. To do so, bind to
     * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
     * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
     *
     * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
     * will have an exception (instead of an exploit.)
     *
     * @element ANY
     * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
     *
     * @example
    
       <example module="bindHtmlExample" deps="angular-sanitize.js">
         <file name="index.html">
           <div ng-controller="ExampleController">
            <p ng-bind-html="myHTML"></p>
           </div>
         </file>
    
         <file name="script.js">
           angular.module('bindHtmlExample', ['ngSanitize'])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.myHTML =
                  'I am an <code>HTML</code>string with ' +
                  '<a href="#">links!</a> and other <em>stuff</em>';
             }]);
         </file>
    
         <file name="protractor.js" type="protractor">
           it('should check ng-bind-html', function() {
             expect(element(by.binding('myHTML')).getText()).toBe(
                 'I am an HTMLstring with links! and other stuff');
           });
         </file>
       </example>
     */
    var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function ($sce, $parse, $compile) {
            return {
                restrict: 'A',
                compile: function ngBindHtmlCompile(tElement, tAttrs) {
                    var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
                    var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {
                        return (value || '').toString();
                    });
                    $compile.$$addBindingClass(tElement);
                    return function ngBindHtmlLink(scope, element, attr) {
                        $compile.$$addBindingInfo(element, attr.ngBindHtml);
                        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
                            // we re-evaluate the expr because we want a TrustedValueHolderType
                            // for $sce, not a string
                            element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');
                        });
                    };
                }
            };
        }];
    function classDirective(name, selector) {
        name = 'ngClass' + name;
        return ['$animate', function ($animate) {
                return {
                    restrict: 'AC',
                    link: function (scope, element, attr) {
                        var oldVal;
                        scope.$watch(attr[name], ngClassWatchAction, true);
                        attr.$observe('class', function (value) {
                            ngClassWatchAction(scope.$eval(attr[name]));
                        });
                        if (name !== 'ngClass') {
                            scope.$watch('$index', function ($index, old$index) {
                                // jshint bitwise: false
                                var mod = $index & 1;
                                if (mod !== (old$index & 1)) {
                                    var classes = arrayClasses(scope.$eval(attr[name]));
                                    mod === selector ?
                                        addClasses(classes) :
                                        removeClasses(classes);
                                }
                            });
                        }
                        function addClasses(classes) {
                            var newClasses = digestClassCounts(classes, 1);
                            attr.$addClass(newClasses);
                        }
                        function removeClasses(classes) {
                            var newClasses = digestClassCounts(classes, -1);
                            attr.$removeClass(newClasses);
                        }
                        function digestClassCounts(classes, count) {
                            var classCounts = element.data('$classCounts') || {};
                            var classesToUpdate = [];
                            forEach(classes, function (className) {
                                if (count > 0 || classCounts[className]) {
                                    classCounts[className] = (classCounts[className] || 0) + count;
                                    if (classCounts[className] === +(count > 0)) {
                                        classesToUpdate.push(className);
                                    }
                                }
                            });
                            element.data('$classCounts', classCounts);
                            return classesToUpdate.join(' ');
                        }
                        function updateClasses(oldClasses, newClasses) {
                            var toAdd = arrayDifference(newClasses, oldClasses);
                            var toRemove = arrayDifference(oldClasses, newClasses);
                            toAdd = digestClassCounts(toAdd, 1);
                            toRemove = digestClassCounts(toRemove, -1);
                            if (toAdd && toAdd.length) {
                                $animate.addClass(element, toAdd);
                            }
                            if (toRemove && toRemove.length) {
                                $animate.removeClass(element, toRemove);
                            }
                        }
                        function ngClassWatchAction(newVal) {
                            if (selector === true || scope.$index % 2 === selector) {
                                var newClasses = arrayClasses(newVal || []);
                                if (!oldVal) {
                                    addClasses(newClasses);
                                }
                                else if (!equals(newVal, oldVal)) {
                                    var oldClasses = arrayClasses(oldVal);
                                    updateClasses(oldClasses, newClasses);
                                }
                            }
                            oldVal = shallowCopy(newVal);
                        }
                    }
                };
                function arrayDifference(tokens1, tokens2) {
                    var values = [];
                    outer: for (var i = 0; i < tokens1.length; i++) {
                        var token = tokens1[i];
                        for (var j = 0; j < tokens2.length; j++) {
                            if (token == tokens2[j])
                                continue outer;
                        }
                        values.push(token);
                    }
                    return values;
                }
                function arrayClasses(classVal) {
                    if (isArray(classVal)) {
                        return classVal;
                    }
                    else if (isString(classVal)) {
                        return classVal.split(' ');
                    }
                    else if (isObject(classVal)) {
                        var classes = [];
                        forEach(classVal, function (v, k) {
                            if (v) {
                                classes = classes.concat(k.split(' '));
                            }
                        });
                        return classes;
                    }
                    return classVal;
                }
            }];
    }
    /**
     * @ngdoc directive
     * @name ngClass
     * @restrict AC
     *
     * @description
     * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
     * an expression that represents all classes to be added.
     *
     * The directive operates in three different ways, depending on which of three types the expression
     * evaluates to:
     *
     * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
     * names.
     *
     * 2. If the expression evaluates to an array, each element of the array should be a string that is
     * one or more space-delimited class names.
     *
     * 3. If the expression evaluates to an object, then for each key-value pair of the
     * object with a truthy value the corresponding key is used as a class name.
     *
     * The directive won't add duplicate classes if a particular class was already set.
     *
     * When the expression changes, the previously added classes are removed and only then the
     * new classes are added.
     *
     * @animations
     * add - happens just before the class is applied to the element
     * remove - happens just before the class is removed from the element
     *
     * @element ANY
     * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
     *   of the evaluation can be a string representing space delimited class
     *   names, an array, or a map of class names to boolean values. In the case of a map, the
     *   names of the properties whose values are truthy will be added as css classes to the
     *   element.
     *
     * @example Example that demonstrates basic bindings via ngClass directive.
       <example>
         <file name="index.html">
           <p ng-class="{strike: deleted, bold: important, red: error}">Map Syntax Example</p>
           <input type="checkbox" ng-model="deleted"> deleted (apply "strike" class)<br>
           <input type="checkbox" ng-model="important"> important (apply "bold" class)<br>
           <input type="checkbox" ng-model="error"> error (apply "red" class)
           <hr>
           <p ng-class="style">Using String Syntax</p>
           <input type="text" ng-model="style" placeholder="Type: bold strike red">
           <hr>
           <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
           <input ng-model="style1" placeholder="Type: bold, strike or red"><br>
           <input ng-model="style2" placeholder="Type: bold, strike or red"><br>
           <input ng-model="style3" placeholder="Type: bold, strike or red"><br>
         </file>
         <file name="style.css">
           .strike {
             text-decoration: line-through;
           }
           .bold {
               font-weight: bold;
           }
           .red {
               color: red;
           }
         </file>
         <file name="protractor.js" type="protractor">
           var ps = element.all(by.css('p'));
    
           it('should let you toggle the class', function() {
    
             expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
             expect(ps.first().getAttribute('class')).not.toMatch(/red/);
    
             element(by.model('important')).click();
             expect(ps.first().getAttribute('class')).toMatch(/bold/);
    
             element(by.model('error')).click();
             expect(ps.first().getAttribute('class')).toMatch(/red/);
           });
    
           it('should let you toggle string example', function() {
             expect(ps.get(1).getAttribute('class')).toBe('');
             element(by.model('style')).clear();
             element(by.model('style')).sendKeys('red');
             expect(ps.get(1).getAttribute('class')).toBe('red');
           });
    
           it('array example should have 3 classes', function() {
             expect(ps.last().getAttribute('class')).toBe('');
             element(by.model('style1')).sendKeys('bold');
             element(by.model('style2')).sendKeys('strike');
             element(by.model('style3')).sendKeys('red');
             expect(ps.last().getAttribute('class')).toBe('bold strike red');
           });
         </file>
       </example>
    
       ## Animations
    
       The example below demonstrates how to perform animations using ngClass.
    
       <example module="ngAnimate" deps="angular-animate.js" animations="true">
         <file name="index.html">
          <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
          <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
          <br>
          <span class="base-class" ng-class="myVar">Sample Text</span>
         </file>
         <file name="style.css">
           .base-class {
             -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
             transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
           }
    
           .base-class.my-class {
             color: red;
             font-size:3em;
           }
         </file>
         <file name="protractor.js" type="protractor">
           it('should check ng-class', function() {
             expect(element(by.css('.base-class')).getAttribute('class')).not.
               toMatch(/my-class/);
    
             element(by.id('setbtn')).click();
    
             expect(element(by.css('.base-class')).getAttribute('class')).
               toMatch(/my-class/);
    
             element(by.id('clearbtn')).click();
    
             expect(element(by.css('.base-class')).getAttribute('class')).not.
               toMatch(/my-class/);
           });
         </file>
       </example>
    
    
       ## ngClass and pre-existing CSS3 Transitions/Animations
       The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
       Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
       any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
       to view the step by step details of {@link ng.$animate#addClass $animate.addClass} and
       {@link ng.$animate#removeClass $animate.removeClass}.
     */
    var ngClassDirective = classDirective('', true);
    /**
     * @ngdoc directive
     * @name ngClassOdd
     * @restrict AC
     *
     * @description
     * The `ngClassOdd` and `ngClassEven` directives work exactly as
     * {@link ng.directive:ngClass ngClass}, except they work in
     * conjunction with `ngRepeat` and take effect only on odd (even) rows.
     *
     * This directive can be applied only within the scope of an
     * {@link ng.directive:ngRepeat ngRepeat}.
     *
     * @element ANY
     * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
     *   of the evaluation can be a string representing space delimited class names or an array.
     *
     * @example
       <example>
         <file name="index.html">
            <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
              <li ng-repeat="name in names">
               <span ng-class-odd="'odd'" ng-class-even="'even'">
                 {{name}}
               </span>
              </li>
            </ol>
         </file>
         <file name="style.css">
           .odd {
             color: red;
           }
           .even {
             color: blue;
           }
         </file>
         <file name="protractor.js" type="protractor">
           it('should check ng-class-odd and ng-class-even', function() {
             expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
               toMatch(/odd/);
             expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
               toMatch(/even/);
           });
         </file>
       </example>
     */
    var ngClassOddDirective = classDirective('Odd', 0);
    /**
     * @ngdoc directive
     * @name ngClassEven
     * @restrict AC
     *
     * @description
     * The `ngClassOdd` and `ngClassEven` directives work exactly as
     * {@link ng.directive:ngClass ngClass}, except they work in
     * conjunction with `ngRepeat` and take effect only on odd (even) rows.
     *
     * This directive can be applied only within the scope of an
     * {@link ng.directive:ngRepeat ngRepeat}.
     *
     * @element ANY
     * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
     *   result of the evaluation can be a string representing space delimited class names or an array.
     *
     * @example
       <example>
         <file name="index.html">
            <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
              <li ng-repeat="name in names">
               <span ng-class-odd="'odd'" ng-class-even="'even'">
                 {{name}} &nbsp; &nbsp; &nbsp;
               </span>
              </li>
            </ol>
         </file>
         <file name="style.css">
           .odd {
             color: red;
           }
           .even {
             color: blue;
           }
         </file>
         <file name="protractor.js" type="protractor">
           it('should check ng-class-odd and ng-class-even', function() {
             expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
               toMatch(/odd/);
             expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
               toMatch(/even/);
           });
         </file>
       </example>
     */
    var ngClassEvenDirective = classDirective('Even', 1);
    /**
     * @ngdoc directive
     * @name ngCloak
     * @restrict AC
     *
     * @description
     * The `ngCloak` directive is used to prevent the Angular html template from being briefly
     * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
     * directive to avoid the undesirable flicker effect caused by the html template display.
     *
     * The directive can be applied to the `<body>` element, but the preferred usage is to apply
     * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
     * of the browser view.
     *
     * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
     * `angular.min.js`.
     * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
     *
     * ```css
     * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
     *   display: none !important;
     * }
     * ```
     *
     * When this css rule is loaded by the browser, all html elements (including their children) that
     * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
     * during the compilation of the template it deletes the `ngCloak` element attribute, making
     * the compiled element visible.
     *
     * For the best result, the `angular.js` script must be loaded in the head section of the html
     * document; alternatively, the css rule above must be included in the external stylesheet of the
     * application.
     *
     * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they
     * cannot match the `[ng\:cloak]` selector. To work around this limitation, you must add the css
     * class `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.
     *
     * @element ANY
     *
     * @example
       <example>
         <file name="index.html">
            <div id="template1" ng-cloak>{{ 'hello' }}</div>
            <div id="template2" ng-cloak class="ng-cloak">{{ 'hello IE7' }}</div>
         </file>
         <file name="protractor.js" type="protractor">
           it('should remove the template directive and css class', function() {
             expect($('#template1').getAttribute('ng-cloak')).
               toBeNull();
             expect($('#template2').getAttribute('ng-cloak')).
               toBeNull();
           });
         </file>
       </example>
     *
     */
    var ngCloakDirective = ngDirective({
        compile: function (element, attr) {
            attr.$set('ngCloak', undefined);
            element.removeClass('ng-cloak');
        }
    });
    /**
     * @ngdoc directive
     * @name ngController
     *
     * @description
     * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
     * supports the principles behind the Model-View-Controller design pattern.
     *
     * MVC components in angular:
     *
     * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
     *   are accessed through bindings.
     * * View — The template (HTML with data bindings) that is rendered into the View.
     * * Controller — The `ngController` directive specifies a Controller class; the class contains business
     *   logic behind the application to decorate the scope with functions and values
     *
     * Note that you can also attach controllers to the DOM by declaring it in a route definition
     * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
     * again using `ng-controller` in the template itself.  This will cause the controller to be attached
     * and executed twice.
     *
     * @element ANY
     * @scope
     * @priority 500
     * @param {expression} ngController Name of a constructor function registered with the current
     * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
     * that on the current scope evaluates to a constructor function.
     *
     * The controller instance can be published into a scope property by specifying
     * `ng-controller="as propertyName"`.
     *
     * If the current `$controllerProvider` is configured to use globals (via
     * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
     * also be the name of a globally accessible constructor function (not recommended).
     *
     * @example
     * Here is a simple form for editing user contact information. Adding, removing, clearing, and
     * greeting are methods declared on the controller (see source tab). These methods can
     * easily be called from the angular markup. Any changes to the data are automatically reflected
     * in the View without the need for a manual update.
     *
     * Two different declaration styles are included below:
     *
     * * one binds methods and properties directly onto the controller using `this`:
     * `ng-controller="SettingsController1 as settings"`
     * * one injects `$scope` into the controller:
     * `ng-controller="SettingsController2"`
     *
     * The second option is more common in the Angular community, and is generally used in boilerplates
     * and in this guide. However, there are advantages to binding properties directly to the controller
     * and avoiding scope.
     *
     * * Using `controller as` makes it obvious which controller you are accessing in the template when
     * multiple controllers apply to an element.
     * * If you are writing your controllers as classes you have easier access to the properties and
     * methods, which will appear on the scope, from inside the controller code.
     * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
     * inheritance masking primitives.
     *
     * This example demonstrates the `controller as` syntax.
     *
     * <example name="ngControllerAs" module="controllerAsExample">
     *   <file name="index.html">
     *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
     *      Name: <input type="text" ng-model="settings.name"/>
     *      [ <a href="" ng-click="settings.greet()">greet</a> ]<br/>
     *      Contact:
     *      <ul>
     *        <li ng-repeat="contact in settings.contacts">
     *          <select ng-model="contact.type">
     *             <option>phone</option>
     *             <option>email</option>
     *          </select>
     *          <input type="text" ng-model="contact.value"/>
     *          [ <a href="" ng-click="settings.clearContact(contact)">clear</a>
     *          | <a href="" ng-click="settings.removeContact(contact)">X</a> ]
     *        </li>
     *        <li>[ <a href="" ng-click="settings.addContact()">add</a> ]</li>
     *     </ul>
     *    </div>
     *   </file>
     *   <file name="app.js">
     *    angular.module('controllerAsExample', [])
     *      .controller('SettingsController1', SettingsController1);
     *
     *    function SettingsController1() {
     *      this.name = "John Smith";
     *      this.contacts = [
     *        {type: 'phone', value: '408 555 1212'},
     *        {type: 'email', value: 'john.smith@example.org'} ];
     *    }
     *
     *    SettingsController1.prototype.greet = function() {
     *      alert(this.name);
     *    };
     *
     *    SettingsController1.prototype.addContact = function() {
     *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
     *    };
     *
     *    SettingsController1.prototype.removeContact = function(contactToRemove) {
     *     var index = this.contacts.indexOf(contactToRemove);
     *      this.contacts.splice(index, 1);
     *    };
     *
     *    SettingsController1.prototype.clearContact = function(contact) {
     *      contact.type = 'phone';
     *      contact.value = '';
     *    };
     *   </file>
     *   <file name="protractor.js" type="protractor">
     *     it('should check controller as', function() {
     *       var container = element(by.id('ctrl-as-exmpl'));
     *         expect(container.element(by.model('settings.name'))
     *           .getAttribute('value')).toBe('John Smith');
     *
     *       var firstRepeat =
     *           container.element(by.repeater('contact in settings.contacts').row(0));
     *       var secondRepeat =
     *           container.element(by.repeater('contact in settings.contacts').row(1));
     *
     *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
     *           .toBe('408 555 1212');
     *
     *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
     *           .toBe('john.smith@example.org');
     *
     *       firstRepeat.element(by.linkText('clear')).click();
     *
     *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
     *           .toBe('');
     *
     *       container.element(by.linkText('add')).click();
     *
     *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
     *           .element(by.model('contact.value'))
     *           .getAttribute('value'))
     *           .toBe('yourname@example.org');
     *     });
     *   </file>
     * </example>
     *
     * This example demonstrates the "attach to `$scope`" style of controller.
     *
     * <example name="ngController" module="controllerExample">
     *  <file name="index.html">
     *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
     *     Name: <input type="text" ng-model="name"/>
     *     [ <a href="" ng-click="greet()">greet</a> ]<br/>
     *     Contact:
     *     <ul>
     *       <li ng-repeat="contact in contacts">
     *         <select ng-model="contact.type">
     *            <option>phone</option>
     *            <option>email</option>
     *         </select>
     *         <input type="text" ng-model="contact.value"/>
     *         [ <a href="" ng-click="clearContact(contact)">clear</a>
     *         | <a href="" ng-click="removeContact(contact)">X</a> ]
     *       </li>
     *       <li>[ <a href="" ng-click="addContact()">add</a> ]</li>
     *    </ul>
     *   </div>
     *  </file>
     *  <file name="app.js">
     *   angular.module('controllerExample', [])
     *     .controller('SettingsController2', ['$scope', SettingsController2]);
     *
     *   function SettingsController2($scope) {
     *     $scope.name = "John Smith";
     *     $scope.contacts = [
     *       {type:'phone', value:'408 555 1212'},
     *       {type:'email', value:'john.smith@example.org'} ];
     *
     *     $scope.greet = function() {
     *       alert($scope.name);
     *     };
     *
     *     $scope.addContact = function() {
     *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
     *     };
     *
     *     $scope.removeContact = function(contactToRemove) {
     *       var index = $scope.contacts.indexOf(contactToRemove);
     *       $scope.contacts.splice(index, 1);
     *     };
     *
     *     $scope.clearContact = function(contact) {
     *       contact.type = 'phone';
     *       contact.value = '';
     *     };
     *   }
     *  </file>
     *  <file name="protractor.js" type="protractor">
     *    it('should check controller', function() {
     *      var container = element(by.id('ctrl-exmpl'));
     *
     *      expect(container.element(by.model('name'))
     *          .getAttribute('value')).toBe('John Smith');
     *
     *      var firstRepeat =
     *          container.element(by.repeater('contact in contacts').row(0));
     *      var secondRepeat =
     *          container.element(by.repeater('contact in contacts').row(1));
     *
     *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
     *          .toBe('408 555 1212');
     *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
     *          .toBe('john.smith@example.org');
     *
     *      firstRepeat.element(by.linkText('clear')).click();
     *
     *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
     *          .toBe('');
     *
     *      container.element(by.linkText('add')).click();
     *
     *      expect(container.element(by.repeater('contact in contacts').row(2))
     *          .element(by.model('contact.value'))
     *          .getAttribute('value'))
     *          .toBe('yourname@example.org');
     *    });
     *  </file>
     *</example>
    
     */
    var ngControllerDirective = [function () {
            return {
                restrict: 'A',
                scope: true,
                controller: '@',
                priority: 500
            };
        }];
    /**
     * @ngdoc directive
     * @name ngCsp
     *
     * @element html
     * @description
     * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
     *
     * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
     *
     * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
     * For Angular to be CSP compatible there are only two things that we need to do differently:
     *
     * - don't use `Function` constructor to generate optimized value getters
     * - don't inject custom stylesheet into the document
     *
     * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`
     * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will
     * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
     * be raised.
     *
     * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically
     * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).
     * To make those directives work in CSP mode, include the `angular-csp.css` manually.
     *
     * Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This
     * autodetection however triggers a CSP error to be logged in the console:
     *
     * ```
     * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
     * script in the following Content Security Policy directive: "default-src 'self'". Note that
     * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
     * ```
     *
     * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
     * directive on the root element of the application or on the `angular.js` script tag, whichever
     * appears first in the html document.
     *
     * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
     *
     * @example
     * This example shows how to apply the `ngCsp` directive to the `html` tag.
       ```html
         <!doctype html>
         <html ng-app ng-csp>
         ...
         ...
         </html>
       ```
      * @example
          // Note: the suffix `.csp` in the example name triggers
          // csp mode in our http server!
          <example name="example.csp" module="cspExample" ng-csp="true">
            <file name="index.html">
              <div ng-controller="MainController as ctrl">
                <div>
                  <button ng-click="ctrl.inc()" id="inc">Increment</button>
                  <span id="counter">
                    {{ctrl.counter}}
                  </span>
                </div>
    
                <div>
                  <button ng-click="ctrl.evil()" id="evil">Evil</button>
                  <span id="evilError">
                    {{ctrl.evilError}}
                  </span>
                </div>
              </div>
            </file>
            <file name="script.js">
               angular.module('cspExample', [])
                 .controller('MainController', function() {
                    this.counter = 0;
                    this.inc = function() {
                      this.counter++;
                    };
                    this.evil = function() {
                      // jshint evil:true
                      try {
                        eval('1+2');
                      } catch (e) {
                        this.evilError = e.message;
                      }
                    };
                  });
            </file>
            <file name="protractor.js" type="protractor">
              var util, webdriver;
    
              var incBtn = element(by.id('inc'));
              var counter = element(by.id('counter'));
              var evilBtn = element(by.id('evil'));
              var evilError = element(by.id('evilError'));
    
              function getAndClearSevereErrors() {
                return browser.manage().logs().get('browser').then(function(browserLog) {
                  return browserLog.filter(function(logEntry) {
                    return logEntry.level.value > webdriver.logging.Level.WARNING.value;
                  });
                });
              }
    
              function clearErrors() {
                getAndClearSevereErrors();
              }
    
              function expectNoErrors() {
                getAndClearSevereErrors().then(function(filteredLog) {
                  expect(filteredLog.length).toEqual(0);
                  if (filteredLog.length) {
                    console.log('browser console errors: ' + util.inspect(filteredLog));
                  }
                });
              }
    
              function expectError(regex) {
                getAndClearSevereErrors().then(function(filteredLog) {
                  var found = false;
                  filteredLog.forEach(function(log) {
                    if (log.message.match(regex)) {
                      found = true;
                    }
                  });
                  if (!found) {
                    throw new Error('expected an error that matches ' + regex);
                  }
                });
              }
    
              beforeEach(function() {
                util = require('util');
                webdriver = require('protractor/node_modules/selenium-webdriver');
              });
    
              // For now, we only test on Chrome,
              // as Safari does not load the page with Protractor's injected scripts,
              // and Firefox webdriver always disables content security policy (#6358)
              if (browser.params.browser !== 'chrome') {
                return;
              }
    
              it('should not report errors when the page is loaded', function() {
                // clear errors so we are not dependent on previous tests
                clearErrors();
                // Need to reload the page as the page is already loaded when
                // we come here
                browser.driver.getCurrentUrl().then(function(url) {
                  browser.get(url);
                });
                expectNoErrors();
              });
    
              it('should evaluate expressions', function() {
                expect(counter.getText()).toEqual('0');
                incBtn.click();
                expect(counter.getText()).toEqual('1');
                expectNoErrors();
              });
    
              it('should throw and report an error when using "eval"', function() {
                evilBtn.click();
                expect(evilError.getText()).toMatch(/Content Security Policy/);
                expectError(/Content Security Policy/);
              });
            </file>
          </example>
      */
    // ngCsp is not implemented as a proper directive any more, because we need it be processed while we
    // bootstrap the system (before $parse is instantiated), for this reason we just have
    // the csp.isActive() fn that looks for ng-csp attribute anywhere in the current doc
    /**
     * @ngdoc directive
     * @name ngClick
     *
     * @description
     * The ngClick directive allows you to specify custom behavior when
     * an element is clicked.
     *
     * @element ANY
     * @priority 0
     * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
     * click. ({@link guide/expression#-event- Event object is available as `$event`})
     *
     * @example
       <example>
         <file name="index.html">
          <button ng-click="count = count + 1" ng-init="count=0">
            Increment
          </button>
          <span>
            count: {{count}}
          </span>
         </file>
         <file name="protractor.js" type="protractor">
           it('should check ng-click', function() {
             expect(element(by.binding('count')).getText()).toMatch('0');
             element(by.css('button')).click();
             expect(element(by.binding('count')).getText()).toMatch('1');
           });
         </file>
       </example>
     */
    /*
     * A collection of directives that allows creation of custom event handlers that are defined as
     * angular expressions and are compiled and executed within the current scope.
     */
    var ngEventDirectives = {};
    // For events that might fire synchronously during DOM manipulation
    // we need to execute their event handlers asynchronously using $evalAsync,
    // so that they are not executed in an inconsistent state.
    var forceAsyncEvents = {
        'blur': true,
        'focus': true
    };
    forEach('click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '), function (eventName) {
        var directiveName = directiveNormalize('ng-' + eventName);
        ngEventDirectives[directiveName] = ['$parse', '$rootScope', function ($parse, $rootScope) {
                return {
                    restrict: 'A',
                    compile: function ($element, attr) {
                        // We expose the powerful $event object on the scope that provides access to the Window,
                        // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
                        // checks at the cost of speed since event handler expressions are not executed as
                        // frequently as regular change detection.
                        var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
                        return function ngEventHandler(scope, element) {
                            element.on(eventName, function (event) {
                                var callback = function () {
                                    fn(scope, { $event: event });
                                };
                                if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
                                    scope.$evalAsync(callback);
                                }
                                else {
                                    scope.$apply(callback);
                                }
                            });
                        };
                    }
                };
            }];
    });
    /**
     * @ngdoc directive
     * @name ngDblclick
     *
     * @description
     * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
     *
     * @element ANY
     * @priority 0
     * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
     * a dblclick. (The Event object is available as `$event`)
     *
     * @example
       <example>
         <file name="index.html">
          <button ng-dblclick="count = count + 1" ng-init="count=0">
            Increment (on double click)
          </button>
          count: {{count}}
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngMousedown
     *
     * @description
     * The ngMousedown directive allows you to specify custom behavior on mousedown event.
     *
     * @element ANY
     * @priority 0
     * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
     * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
     *
     * @example
       <example>
         <file name="index.html">
          <button ng-mousedown="count = count + 1" ng-init="count=0">
            Increment (on mouse down)
          </button>
          count: {{count}}
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngMouseup
     *
     * @description
     * Specify custom behavior on mouseup event.
     *
     * @element ANY
     * @priority 0
     * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
     * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
     *
     * @example
       <example>
         <file name="index.html">
          <button ng-mouseup="count = count + 1" ng-init="count=0">
            Increment (on mouse up)
          </button>
          count: {{count}}
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngMouseover
     *
     * @description
     * Specify custom behavior on mouseover event.
     *
     * @element ANY
     * @priority 0
     * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
     * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
     *
     * @example
       <example>
         <file name="index.html">
          <button ng-mouseover="count = count + 1" ng-init="count=0">
            Increment (when mouse is over)
          </button>
          count: {{count}}
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngMouseenter
     *
     * @description
     * Specify custom behavior on mouseenter event.
     *
     * @element ANY
     * @priority 0
     * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
     * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
     *
     * @example
       <example>
         <file name="index.html">
          <button ng-mouseenter="count = count + 1" ng-init="count=0">
            Increment (when mouse enters)
          </button>
          count: {{count}}
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngMouseleave
     *
     * @description
     * Specify custom behavior on mouseleave event.
     *
     * @element ANY
     * @priority 0
     * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
     * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
     *
     * @example
       <example>
         <file name="index.html">
          <button ng-mouseleave="count = count + 1" ng-init="count=0">
            Increment (when mouse leaves)
          </button>
          count: {{count}}
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngMousemove
     *
     * @description
     * Specify custom behavior on mousemove event.
     *
     * @element ANY
     * @priority 0
     * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
     * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
     *
     * @example
       <example>
         <file name="index.html">
          <button ng-mousemove="count = count + 1" ng-init="count=0">
            Increment (when mouse moves)
          </button>
          count: {{count}}
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngKeydown
     *
     * @description
     * Specify custom behavior on keydown event.
     *
     * @element ANY
     * @priority 0
     * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
     * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
     *
     * @example
       <example>
         <file name="index.html">
          <input ng-keydown="count = count + 1" ng-init="count=0">
          key down count: {{count}}
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngKeyup
     *
     * @description
     * Specify custom behavior on keyup event.
     *
     * @element ANY
     * @priority 0
     * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
     * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
     *
     * @example
       <example>
         <file name="index.html">
           <p>Typing in the input box below updates the key count</p>
           <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}
    
           <p>Typing in the input box below updates the keycode</p>
           <input ng-keyup="event=$event">
           <p>event keyCode: {{ event.keyCode }}</p>
           <p>event altKey: {{ event.altKey }}</p>
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngKeypress
     *
     * @description
     * Specify custom behavior on keypress event.
     *
     * @element ANY
     * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
     * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
     * and can be interrogated for keyCode, altKey, etc.)
     *
     * @example
       <example>
         <file name="index.html">
          <input ng-keypress="count = count + 1" ng-init="count=0">
          key press count: {{count}}
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngSubmit
     *
     * @description
     * Enables binding angular expressions to onsubmit events.
     *
     * Additionally it prevents the default action (which for form means sending the request to the
     * server and reloading the current page), but only if the form does not contain `action`,
     * `data-action`, or `x-action` attributes.
     *
     * <div class="alert alert-warning">
     * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
     * `ngSubmit` handlers together. See the
     * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
     * for a detailed discussion of when `ngSubmit` may be triggered.
     * </div>
     *
     * @element form
     * @priority 0
     * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
     * ({@link guide/expression#-event- Event object is available as `$event`})
     *
     * @example
       <example module="submitExample">
         <file name="index.html">
          <script>
            angular.module('submitExample', [])
              .controller('ExampleController', ['$scope', function($scope) {
                $scope.list = [];
                $scope.text = 'hello';
                $scope.submit = function() {
                  if ($scope.text) {
                    $scope.list.push(this.text);
                    $scope.text = '';
                  }
                };
              }]);
          </script>
          <form ng-submit="submit()" ng-controller="ExampleController">
            Enter text and hit enter:
            <input type="text" ng-model="text" name="text" />
            <input type="submit" id="submit" value="Submit" />
            <pre>list={{list}}</pre>
          </form>
         </file>
         <file name="protractor.js" type="protractor">
           it('should check ng-submit', function() {
             expect(element(by.binding('list')).getText()).toBe('list=[]');
             element(by.css('#submit')).click();
             expect(element(by.binding('list')).getText()).toContain('hello');
             expect(element(by.model('text')).getAttribute('value')).toBe('');
           });
           it('should ignore empty strings', function() {
             expect(element(by.binding('list')).getText()).toBe('list=[]');
             element(by.css('#submit')).click();
             element(by.css('#submit')).click();
             expect(element(by.binding('list')).getText()).toContain('hello');
            });
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngFocus
     *
     * @description
     * Specify custom behavior on focus event.
     *
     * Note: As the `focus` event is executed synchronously when calling `input.focus()`
     * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
     * during an `$apply` to ensure a consistent state.
     *
     * @element window, input, select, textarea, a
     * @priority 0
     * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
     * focus. ({@link guide/expression#-event- Event object is available as `$event`})
     *
     * @example
     * See {@link ng.directive:ngClick ngClick}
     */
    /**
     * @ngdoc directive
     * @name ngBlur
     *
     * @description
     * Specify custom behavior on blur event.
     *
     * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
     * an element has lost focus.
     *
     * Note: As the `blur` event is executed synchronously also during DOM manipulations
     * (e.g. removing a focussed input),
     * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
     * during an `$apply` to ensure a consistent state.
     *
     * @element window, input, select, textarea, a
     * @priority 0
     * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
     * blur. ({@link guide/expression#-event- Event object is available as `$event`})
     *
     * @example
     * See {@link ng.directive:ngClick ngClick}
     */
    /**
     * @ngdoc directive
     * @name ngCopy
     *
     * @description
     * Specify custom behavior on copy event.
     *
     * @element window, input, select, textarea, a
     * @priority 0
     * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
     * copy. ({@link guide/expression#-event- Event object is available as `$event`})
     *
     * @example
       <example>
         <file name="index.html">
          <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
          copied: {{copied}}
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngCut
     *
     * @description
     * Specify custom behavior on cut event.
     *
     * @element window, input, select, textarea, a
     * @priority 0
     * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
     * cut. ({@link guide/expression#-event- Event object is available as `$event`})
     *
     * @example
       <example>
         <file name="index.html">
          <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
          cut: {{cut}}
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngPaste
     *
     * @description
     * Specify custom behavior on paste event.
     *
     * @element window, input, select, textarea, a
     * @priority 0
     * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
     * paste. ({@link guide/expression#-event- Event object is available as `$event`})
     *
     * @example
       <example>
         <file name="index.html">
          <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
          pasted: {{paste}}
         </file>
       </example>
     */
    /**
     * @ngdoc directive
     * @name ngIf
     * @restrict A
     *
     * @description
     * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
     * {expression}. If the expression assigned to `ngIf` evaluates to a false
     * value then the element is removed from the DOM, otherwise a clone of the
     * element is reinserted into the DOM.
     *
     * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
     * element in the DOM rather than changing its visibility via the `display` css property.  A common
     * case when this difference is significant is when using css selectors that rely on an element's
     * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
     *
     * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
     * is created when the element is restored.  The scope created within `ngIf` inherits from
     * its parent scope using
     * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
     * An important implication of this is if `ngModel` is used within `ngIf` to bind to
     * a javascript primitive defined in the parent scope. In this case any modifications made to the
     * variable within the child scope will override (hide) the value in the parent scope.
     *
     * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
     * is if an element's class attribute is directly modified after it's compiled, using something like
     * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
     * the added class will be lost because the original compiled state is used to regenerate the element.
     *
     * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
     * and `leave` effects.
     *
     * @animations
     * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
     * leave - happens just before the `ngIf` contents are removed from the DOM
     *
     * @element ANY
     * @scope
     * @priority 600
     * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
     *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
     *     element is added to the DOM tree.
     *
     * @example
      <example module="ngAnimate" deps="angular-animate.js" animations="true">
        <file name="index.html">
          Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>
          Show when checked:
          <span ng-if="checked" class="animate-if">
            This is removed when the checkbox is unchecked.
          </span>
        </file>
        <file name="animations.css">
          .animate-if {
            background:white;
            border:1px solid black;
            padding:10px;
          }
    
          .animate-if.ng-enter, .animate-if.ng-leave {
            -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
            transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
          }
    
          .animate-if.ng-enter,
          .animate-if.ng-leave.ng-leave-active {
            opacity:0;
          }
    
          .animate-if.ng-leave,
          .animate-if.ng-enter.ng-enter-active {
            opacity:1;
          }
        </file>
      </example>
     */
    var ngIfDirective = ['$animate', function ($animate) {
            return {
                multiElement: true,
                transclude: 'element',
                priority: 600,
                terminal: true,
                restrict: 'A',
                $$tlb: true,
                link: function ($scope, $element, $attr, ctrl, $transclude) {
                    var block, childScope, previousElements;
                    $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {
                        if (value) {
                            if (!childScope) {
                                $transclude(function (clone, newScope) {
                                    childScope = newScope;
                                    clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                                    // Note: We only need the first/last node of the cloned nodes.
                                    // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                                    // by a directive with templateUrl when its template arrives.
                                    block = {
                                        clone: clone
                                    };
                                    $animate.enter(clone, $element.parent(), $element);
                                });
                            }
                        }
                        else {
                            if (previousElements) {
                                previousElements.remove();
                                previousElements = null;
                            }
                            if (childScope) {
                                childScope.$destroy();
                                childScope = null;
                            }
                            if (block) {
                                previousElements = getBlockNodes(block.clone);
                                $animate.leave(previousElements).then(function () {
                                    previousElements = null;
                                });
                                block = null;
                            }
                        }
                    });
                }
            };
        }];
    /**
     * @ngdoc directive
     * @name ngInclude
     * @restrict ECA
     *
     * @description
     * Fetches, compiles and includes an external HTML fragment.
     *
     * By default, the template URL is restricted to the same domain and protocol as the
     * application document. This is done by calling {@link $sce#getTrustedResourceUrl
     * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
     * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
     * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
     * ng.$sce Strict Contextual Escaping}.
     *
     * In addition, the browser's
     * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
     * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
     * policy may further restrict whether the template is successfully loaded.
     * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
     * access on some browsers.
     *
     * @animations
     * enter - animation is used to bring new content into the browser.
     * leave - animation is used to animate existing content away.
     *
     * The enter and leave animation occur concurrently.
     *
     * @scope
     * @priority 400
     *
     * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
     *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
     * @param {string=} onload Expression to evaluate when a new partial is loaded.
     *
     * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
     *                  $anchorScroll} to scroll the viewport after the content is loaded.
     *
     *                  - If the attribute is not set, disable scrolling.
     *                  - If the attribute is set without value, enable scrolling.
     *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
     *
     * @example
      <example module="includeExample" deps="angular-animate.js" animations="true">
        <file name="index.html">
         <div ng-controller="ExampleController">
           <select ng-model="template" ng-options="t.name for t in templates">
            <option value="">(blank)</option>
           </select>
           url of the template: <tt>{{template.url}}</tt>
           <hr/>
           <div class="slide-animate-container">
             <div class="slide-animate" ng-include="template.url"></div>
           </div>
         </div>
        </file>
        <file name="script.js">
          angular.module('includeExample', ['ngAnimate'])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.templates =
                [ { name: 'template1.html', url: 'template1.html'},
                  { name: 'template2.html', url: 'template2.html'} ];
              $scope.template = $scope.templates[0];
            }]);
         </file>
        <file name="template1.html">
          Content of template1.html
        </file>
        <file name="template2.html">
          Content of template2.html
        </file>
        <file name="animations.css">
          .slide-animate-container {
            position:relative;
            background:white;
            border:1px solid black;
            height:40px;
            overflow:hidden;
          }
    
          .slide-animate {
            padding:10px;
          }
    
          .slide-animate.ng-enter, .slide-animate.ng-leave {
            -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
            transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
    
            position:absolute;
            top:0;
            left:0;
            right:0;
            bottom:0;
            display:block;
            padding:10px;
          }
    
          .slide-animate.ng-enter {
            top:-50px;
          }
          .slide-animate.ng-enter.ng-enter-active {
            top:0;
          }
    
          .slide-animate.ng-leave {
            top:0;
          }
          .slide-animate.ng-leave.ng-leave-active {
            top:50px;
          }
        </file>
        <file name="protractor.js" type="protractor">
          var templateSelect = element(by.model('template'));
          var includeElem = element(by.css('[ng-include]'));
    
          it('should load template1.html', function() {
            expect(includeElem.getText()).toMatch(/Content of template1.html/);
          });
    
          it('should load template2.html', function() {
            if (browser.params.browser == 'firefox') {
              // Firefox can't handle using selects
              // See https://github.com/angular/protractor/issues/480
              return;
            }
            templateSelect.click();
            templateSelect.all(by.css('option')).get(2).click();
            expect(includeElem.getText()).toMatch(/Content of template2.html/);
          });
    
          it('should change to blank', function() {
            if (browser.params.browser == 'firefox') {
              // Firefox can't handle using selects
              return;
            }
            templateSelect.click();
            templateSelect.all(by.css('option')).get(0).click();
            expect(includeElem.isPresent()).toBe(false);
          });
        </file>
      </example>
     */
    /**
     * @ngdoc event
     * @name ngInclude#$includeContentRequested
     * @eventType emit on the scope ngInclude was declared in
     * @description
     * Emitted every time the ngInclude content is requested.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {String} src URL of content to load.
     */
    /**
     * @ngdoc event
     * @name ngInclude#$includeContentLoaded
     * @eventType emit on the current ngInclude scope
     * @description
     * Emitted every time the ngInclude content is reloaded.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {String} src URL of content to load.
     */
    /**
     * @ngdoc event
     * @name ngInclude#$includeContentError
     * @eventType emit on the scope ngInclude was declared in
     * @description
     * Emitted when a template HTTP request yields an erronous response (status < 200 || status > 299)
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {String} src URL of content to load.
     */
    var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate', '$sce',
        function ($templateRequest, $anchorScroll, $animate, $sce) {
            return {
                restrict: 'ECA',
                priority: 400,
                terminal: true,
                transclude: 'element',
                controller: angular.noop,
                compile: function (element, attr) {
                    var srcExp = attr.ngInclude || attr.src, onloadExp = attr.onload || '', autoScrollExp = attr.autoscroll;
                    return function (scope, $element, $attr, ctrl, $transclude) {
                        var changeCounter = 0, currentScope, previousElement, currentElement;
                        var cleanupLastIncludeContent = function () {
                            if (previousElement) {
                                previousElement.remove();
                                previousElement = null;
                            }
                            if (currentScope) {
                                currentScope.$destroy();
                                currentScope = null;
                            }
                            if (currentElement) {
                                $animate.leave(currentElement).then(function () {
                                    previousElement = null;
                                });
                                previousElement = currentElement;
                                currentElement = null;
                            }
                        };
                        scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
                            var afterAnimation = function () {
                                if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                                    $anchorScroll();
                                }
                            };
                            var thisChangeId = ++changeCounter;
                            if (src) {
                                //set the 2nd param to true to ignore the template request error so that the inner
                                //contents and scope can be cleaned up.
                                $templateRequest(src, true).then(function (response) {
                                    if (thisChangeId !== changeCounter)
                                        return;
                                    var newScope = scope.$new();
                                    ctrl.template = response;
                                    // Note: This will also link all children of ng-include that were contained in the original
                                    // html. If that content contains controllers, ... they could pollute/change the scope.
                                    // However, using ng-include on an element with additional content does not make sense...
                                    // Note: We can't remove them in the cloneAttchFn of $transclude as that
                                    // function is called before linking the content, which would apply child
                                    // directives to non existing elements.
                                    var clone = $transclude(newScope, function (clone) {
                                        cleanupLastIncludeContent();
                                        $animate.enter(clone, null, $element).then(afterAnimation);
                                    });
                                    currentScope = newScope;
                                    currentElement = clone;
                                    currentScope.$emit('$includeContentLoaded', src);
                                    scope.$eval(onloadExp);
                                }, function () {
                                    if (thisChangeId === changeCounter) {
                                        cleanupLastIncludeContent();
                                        scope.$emit('$includeContentError', src);
                                    }
                                });
                                scope.$emit('$includeContentRequested', src);
                            }
                            else {
                                cleanupLastIncludeContent();
                                ctrl.template = null;
                            }
                        });
                    };
                }
            };
        }];
    // This directive is called during the $transclude call of the first `ngInclude` directive.
    // It will replace and compile the content of the element with the loaded template.
    // We need this directive so that the element content is already filled when
    // the link function of another directive on the same element as ngInclude
    // is called.
    var ngIncludeFillContentDirective = ['$compile',
        function ($compile) {
            return {
                restrict: 'ECA',
                priority: -400,
                require: 'ngInclude',
                link: function (scope, $element, $attr, ctrl) {
                    if (/SVG/.test($element[0].toString())) {
                        // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
                        // support innerHTML, so detect this here and try to generate the contents
                        // specially.
                        $element.empty();
                        $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope, function namespaceAdaptedClone(clone) {
                            $element.append(clone);
                        }, { futureParentElement: $element });
                        return;
                    }
                    $element.html(ctrl.template);
                    $compile($element.contents())(scope);
                }
            };
        }];
    /**
     * @ngdoc directive
     * @name ngInit
     * @restrict AC
     *
     * @description
     * The `ngInit` directive allows you to evaluate an expression in the
     * current scope.
     *
     * <div class="alert alert-error">
     * The only appropriate use of `ngInit` is for aliasing special properties of
     * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you
     * should use {@link guide/controller controllers} rather than `ngInit`
     * to initialize values on a scope.
     * </div>
     * <div class="alert alert-warning">
     * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make
     * sure you have parenthesis for correct precedence:
     * <pre class="prettyprint">
     *   <div ng-init="test1 = (data | orderBy:'name')"></div>
     * </pre>
     * </div>
     *
     * @priority 450
     *
     * @element ANY
     * @param {expression} ngInit {@link guide/expression Expression} to eval.
     *
     * @example
       <example module="initExample">
         <file name="index.html">
       <script>
         angular.module('initExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.list = [['a', 'b'], ['c', 'd']];
           }]);
       </script>
       <div ng-controller="ExampleController">
         <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
           <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
              <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
           </div>
         </div>
       </div>
         </file>
         <file name="protractor.js" type="protractor">
           it('should alias index positions', function() {
             var elements = element.all(by.css('.example-init'));
             expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
             expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
             expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
             expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
           });
         </file>
       </example>
     */
    var ngInitDirective = ngDirective({
        priority: 450,
        compile: function () {
            return {
                pre: function (scope, element, attrs) {
                    scope.$eval(attrs.ngInit);
                }
            };
        }
    });
    /**
     * @ngdoc directive
     * @name ngNonBindable
     * @restrict AC
     * @priority 1000
     *
     * @description
     * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
     * DOM element. This is useful if the element contains what appears to be Angular directives and
     * bindings but which should be ignored by Angular. This could be the case if you have a site that
     * displays snippets of code, for instance.
     *
     * @element ANY
     *
     * @example
     * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
     * but the one wrapped in `ngNonBindable` is left alone.
     *
     * @example
        <example>
          <file name="index.html">
            <div>Normal: {{1 + 2}}</div>
            <div ng-non-bindable>Ignored: {{1 + 2}}</div>
          </file>
          <file name="protractor.js" type="protractor">
           it('should check ng-non-bindable', function() {
             expect(element(by.binding('1 + 2')).getText()).toContain('3');
             expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
           });
          </file>
        </example>
     */
    var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });
    /**
     * @ngdoc directive
     * @name ngPluralize
     * @restrict EA
     *
     * @description
     * `ngPluralize` is a directive that displays messages according to en-US localization rules.
     * These rules are bundled with angular.js, but can be overridden
     * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
     * by specifying the mappings between
     * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
     * and the strings to be displayed.
     *
     * # Plural categories and explicit number rules
     * There are two
     * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
     * in Angular's default en-US locale: "one" and "other".
     *
     * While a plural category may match many numbers (for example, in en-US locale, "other" can match
     * any number that is not 1), an explicit number rule can only match one number. For example, the
     * explicit number rule for "3" matches the number 3. There are examples of plural categories
     * and explicit number rules throughout the rest of this documentation.
     *
     * # Configuring ngPluralize
     * You configure ngPluralize by providing 2 attributes: `count` and `when`.
     * You can also provide an optional attribute, `offset`.
     *
     * The value of the `count` attribute can be either a string or an {@link guide/expression
     * Angular expression}; these are evaluated on the current scope for its bound value.
     *
     * The `when` attribute specifies the mappings between plural categories and the actual
     * string to be displayed. The value of the attribute should be a JSON object.
     *
     * The following example shows how to configure ngPluralize:
     *
     * ```html
     * <ng-pluralize count="personCount"
                     when="{'0': 'Nobody is viewing.',
     *                      'one': '1 person is viewing.',
     *                      'other': '{} people are viewing.'}">
     * </ng-pluralize>
     *```
     *
     * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
     * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
     * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
     * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
     * show "a dozen people are viewing".
     *
     * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
     * into pluralized strings. In the previous example, Angular will replace `{}` with
     * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
     * for <span ng-non-bindable>{{numberExpression}}</span>.
     *
     * # Configuring ngPluralize with offset
     * The `offset` attribute allows further customization of pluralized text, which can result in
     * a better user experience. For example, instead of the message "4 people are viewing this document",
     * you might display "John, Kate and 2 others are viewing this document".
     * The offset attribute allows you to offset a number by any desired value.
     * Let's take a look at an example:
     *
     * ```html
     * <ng-pluralize count="personCount" offset=2
     *               when="{'0': 'Nobody is viewing.',
     *                      '1': '{{person1}} is viewing.',
     *                      '2': '{{person1}} and {{person2}} are viewing.',
     *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
     *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
     * </ng-pluralize>
     * ```
     *
     * Notice that we are still using two plural categories(one, other), but we added
     * three explicit number rules 0, 1 and 2.
     * When one person, perhaps John, views the document, "John is viewing" will be shown.
     * When three people view the document, no explicit number rule is found, so
     * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
     * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
     * is shown.
     *
     * Note that when you specify offsets, you must provide explicit number rules for
     * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
     * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
     * plural categories "one" and "other".
     *
     * @param {string|expression} count The variable to be bound to.
     * @param {string} when The mapping between plural category to its corresponding strings.
     * @param {number=} offset Offset to deduct from the total number.
     *
     * @example
        <example module="pluralizeExample">
          <file name="index.html">
            <script>
              angular.module('pluralizeExample', [])
                .controller('ExampleController', ['$scope', function($scope) {
                  $scope.person1 = 'Igor';
                  $scope.person2 = 'Misko';
                  $scope.personCount = 1;
                }]);
            </script>
            <div ng-controller="ExampleController">
              Person 1:<input type="text" ng-model="person1" value="Igor" /><br/>
              Person 2:<input type="text" ng-model="person2" value="Misko" /><br/>
              Number of People:<input type="text" ng-model="personCount" value="1" /><br/>
    
              <!--- Example with simple pluralization rules for en locale --->
              Without Offset:
              <ng-pluralize count="personCount"
                            when="{'0': 'Nobody is viewing.',
                                   'one': '1 person is viewing.',
                                   'other': '{} people are viewing.'}">
              </ng-pluralize><br>
    
              <!--- Example with offset --->
              With Offset(2):
              <ng-pluralize count="personCount" offset=2
                            when="{'0': 'Nobody is viewing.',
                                   '1': '{{person1}} is viewing.',
                                   '2': '{{person1}} and {{person2}} are viewing.',
                                   'one': '{{person1}}, {{person2}} and one other person are viewing.',
                                   'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
              </ng-pluralize>
            </div>
          </file>
          <file name="protractor.js" type="protractor">
            it('should show correct pluralized string', function() {
              var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
              var withOffset = element.all(by.css('ng-pluralize')).get(1);
              var countInput = element(by.model('personCount'));
    
              expect(withoutOffset.getText()).toEqual('1 person is viewing.');
              expect(withOffset.getText()).toEqual('Igor is viewing.');
    
              countInput.clear();
              countInput.sendKeys('0');
    
              expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
              expect(withOffset.getText()).toEqual('Nobody is viewing.');
    
              countInput.clear();
              countInput.sendKeys('2');
    
              expect(withoutOffset.getText()).toEqual('2 people are viewing.');
              expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');
    
              countInput.clear();
              countInput.sendKeys('3');
    
              expect(withoutOffset.getText()).toEqual('3 people are viewing.');
              expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');
    
              countInput.clear();
              countInput.sendKeys('4');
    
              expect(withoutOffset.getText()).toEqual('4 people are viewing.');
              expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
            });
            it('should show data-bound names', function() {
              var withOffset = element.all(by.css('ng-pluralize')).get(1);
              var personCount = element(by.model('personCount'));
              var person1 = element(by.model('person1'));
              var person2 = element(by.model('person2'));
              personCount.clear();
              personCount.sendKeys('4');
              person1.clear();
              person1.sendKeys('Di');
              person2.clear();
              person2.sendKeys('Vojta');
              expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
            });
          </file>
        </example>
     */
    var ngPluralizeDirective = ['$locale', '$interpolate', function ($locale, $interpolate) {
            var BRACE = /{}/g, IS_WHEN = /^when(Minus)?(.+)$/;
            return {
                restrict: 'EA',
                link: function (scope, element, attr) {
                    var numberExp = attr.count, whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
                    offset = attr.offset || 0, whens = scope.$eval(whenExp) || {}, whensExpFns = {}, startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol, watchRemover = angular.noop, lastCount;
                    forEach(attr, function (expression, attributeName) {
                        var tmpMatch = IS_WHEN.exec(attributeName);
                        if (tmpMatch) {
                            var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
                            whens[whenKey] = element.attr(attr.$attr[attributeName]);
                        }
                    });
                    forEach(whens, function (expression, key) {
                        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));
                    });
                    scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
                        var count = parseFloat(newVal);
                        var countIsNaN = isNaN(count);
                        if (!countIsNaN && !(count in whens)) {
                            // If an explicit number rule such as 1, 2, 3... is defined, just use it.
                            // Otherwise, check it against pluralization rules in $locale service.
                            count = $locale.pluralCat(count - offset);
                        }
                        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
                        // In JS `NaN !== NaN`, so we have to exlicitly check.
                        if ((count !== lastCount) && !(countIsNaN && isNaN(lastCount))) {
                            watchRemover();
                            watchRemover = scope.$watch(whensExpFns[count], updateElementText);
                            lastCount = count;
                        }
                    });
                    function updateElementText(newText) {
                        element.text(newText || '');
                    }
                }
            };
        }];
    /**
     * @ngdoc directive
     * @name ngRepeat
     *
     * @description
     * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
     * instance gets its own scope, where the given loop variable is set to the current collection item,
     * and `$index` is set to the item index or key.
     *
     * Special properties are exposed on the local scope of each template instance, including:
     *
     * | Variable  | Type            | Details                                                                     |
     * |-----------|-----------------|-----------------------------------------------------------------------------|
     * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
     * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
     * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
     * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
     * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
     * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
     *
     * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
     * This may be useful when, for instance, nesting ngRepeats.
     *
     * # Special repeat start and end points
     * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
     * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
     * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
     * up to and including the ending HTML tag where **ng-repeat-end** is placed.
     *
     * The example below makes use of this feature:
     * ```html
     *   <header ng-repeat-start="item in items">
     *     Header {{ item }}
     *   </header>
     *   <div class="body">
     *     Body {{ item }}
     *   </div>
     *   <footer ng-repeat-end>
     *     Footer {{ item }}
     *   </footer>
     * ```
     *
     * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
     * ```html
     *   <header>
     *     Header A
     *   </header>
     *   <div class="body">
     *     Body A
     *   </div>
     *   <footer>
     *     Footer A
     *   </footer>
     *   <header>
     *     Header B
     *   </header>
     *   <div class="body">
     *     Body B
     *   </div>
     *   <footer>
     *     Footer B
     *   </footer>
     * ```
     *
     * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
     * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
     *
     * @animations
     * **.enter** - when a new item is added to the list or when an item is revealed after a filter
     *
     * **.leave** - when an item is removed from the list or when an item is filtered out
     *
     * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
     *
     * @element ANY
     * @scope
     * @priority 1000
     * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
     *   formats are currently supported:
     *
     *   * `variable in expression` – where variable is the user defined loop variable and `expression`
     *     is a scope expression giving the collection to enumerate.
     *
     *     For example: `album in artist.albums`.
     *
     *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
     *     and `expression` is the scope expression giving the collection to enumerate.
     *
     *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
     *
     *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking function
     *     which can be used to associate the objects in the collection with the DOM elements. If no tracking function
     *     is specified the ng-repeat associates elements by identity in the collection. It is an error to have
     *     more than one tracking function to resolve to the same key. (This would mean that two distinct objects are
     *     mapped to the same DOM element, which is not possible.)  Filters should be applied to the expression,
     *     before specifying a tracking expression.
     *
     *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
     *     will be associated by item identity in the array.
     *
     *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
     *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
     *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
     *     element in the same way in the DOM.
     *
     *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
     *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
     *     property is same.
     *
     *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
     *     to items in conjunction with a tracking expression.
     *
     *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
     *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
     *     when a filter is active on the repeater, but the filtered result set is empty.
     *
     *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
     *     the items have been processed through the filter.
     *
     * @example
     * This example initializes the scope to a list of names and
     * then uses `ngRepeat` to display every person:
      <example module="ngAnimate" deps="angular-animate.js" animations="true">
        <file name="index.html">
          <div ng-init="friends = [
            {name:'John', age:25, gender:'boy'},
            {name:'Jessie', age:30, gender:'girl'},
            {name:'Johanna', age:28, gender:'girl'},
            {name:'Joy', age:15, gender:'girl'},
            {name:'Mary', age:28, gender:'girl'},
            {name:'Peter', age:95, gender:'boy'},
            {name:'Sebastian', age:50, gender:'boy'},
            {name:'Erika', age:27, gender:'girl'},
            {name:'Patrick', age:40, gender:'boy'},
            {name:'Samantha', age:60, gender:'girl'}
          ]">
            I have {{friends.length}} friends. They are:
            <input type="search" ng-model="q" placeholder="filter friends..." />
            <ul class="example-animate-container">
              <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
                [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
              </li>
              <li class="animate-repeat" ng-if="results.length == 0">
                <strong>No results found...</strong>
              </li>
            </ul>
          </div>
        </file>
        <file name="animations.css">
          .example-animate-container {
            background:white;
            border:1px solid black;
            list-style:none;
            margin:0;
            padding:0 10px;
          }
    
          .animate-repeat {
            line-height:40px;
            list-style:none;
            box-sizing:border-box;
          }
    
          .animate-repeat.ng-move,
          .animate-repeat.ng-enter,
          .animate-repeat.ng-leave {
            -webkit-transition:all linear 0.5s;
            transition:all linear 0.5s;
          }
    
          .animate-repeat.ng-leave.ng-leave-active,
          .animate-repeat.ng-move,
          .animate-repeat.ng-enter {
            opacity:0;
            max-height:0;
          }
    
          .animate-repeat.ng-leave,
          .animate-repeat.ng-move.ng-move-active,
          .animate-repeat.ng-enter.ng-enter-active {
            opacity:1;
            max-height:40px;
          }
        </file>
        <file name="protractor.js" type="protractor">
          var friends = element.all(by.repeater('friend in friends'));
    
          it('should render initial data set', function() {
            expect(friends.count()).toBe(10);
            expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
            expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
            expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
            expect(element(by.binding('friends.length')).getText())
                .toMatch("I have 10 friends. They are:");
          });
    
           it('should update repeater when filter predicate changes', function() {
             expect(friends.count()).toBe(10);
    
             element(by.model('q')).sendKeys('ma');
    
             expect(friends.count()).toBe(2);
             expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
             expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
           });
          </file>
        </example>
     */
    var ngRepeatDirective = ['$parse', '$animate', function ($parse, $animate) {
            var NG_REMOVED = '$$NG_REMOVED';
            var ngRepeatMinErr = minErr('ngRepeat');
            var updateScope = function (scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
                // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
                scope[valueIdentifier] = value;
                if (keyIdentifier)
                    scope[keyIdentifier] = key;
                scope.$index = index;
                scope.$first = (index === 0);
                scope.$last = (index === (arrayLength - 1));
                scope.$middle = !(scope.$first || scope.$last);
                // jshint bitwise: false
                scope.$odd = !(scope.$even = (index & 1) === 0);
                // jshint bitwise: true
            };
            var getBlockStart = function (block) {
                return block.clone[0];
            };
            var getBlockEnd = function (block) {
                return block.clone[block.clone.length - 1];
            };
            return {
                restrict: 'A',
                multiElement: true,
                transclude: 'element',
                priority: 1000,
                terminal: true,
                $$tlb: true,
                compile: function ngRepeatCompile($element, $attr) {
                    var expression = $attr.ngRepeat;
                    var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');
                    var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                    if (!match) {
                        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.", expression);
                    }
                    var lhs = match[1];
                    var rhs = match[2];
                    var aliasAs = match[3];
                    var trackByExp = match[4];
                    match = lhs.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);
                    if (!match) {
                        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.", lhs);
                    }
                    var valueIdentifier = match[3] || match[1];
                    var keyIdentifier = match[2];
                    if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
                        /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent)$/.test(aliasAs))) {
                        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.", aliasAs);
                    }
                    var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
                    var hashFnLocals = { $id: hashKey };
                    if (trackByExp) {
                        trackByExpGetter = $parse(trackByExp);
                    }
                    else {
                        trackByIdArrayFn = function (key, value) {
                            return hashKey(value);
                        };
                        trackByIdObjFn = function (key) {
                            return key;
                        };
                    }
                    return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {
                        if (trackByExpGetter) {
                            trackByIdExpFn = function (key, value, index) {
                                // assign key, value, and $index to the locals so that they can be used in hash functions
                                if (keyIdentifier)
                                    hashFnLocals[keyIdentifier] = key;
                                hashFnLocals[valueIdentifier] = value;
                                hashFnLocals.$index = index;
                                return trackByExpGetter($scope, hashFnLocals);
                            };
                        }
                        // Store a list of elements from previous run. This is a hash where key is the item from the
                        // iterator, and the value is objects with following properties.
                        //   - scope: bound scope
                        //   - element: previous element.
                        //   - index: position
                        //
                        // We are using no-proto object so that we don't need to guard against inherited props via
                        // hasOwnProperty.
                        var lastBlockMap = createMap();
                        //watch props
                        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
                            var index, length, previousNode = $element[0], // node that cloned nodes should be inserted after
                            // initialized to the comment node anchor
                            nextNode, 
                            // Same as lastBlockMap but it has the current state. It will become the
                            // lastBlockMap on the next iteration.
                            nextBlockMap = createMap(), collectionLength, key, value, // key/value of iteration
                            trackById, trackByIdFn, collectionKeys, block, // last object information {scope, element, id}
                            nextBlockOrder, elementsToRemove;
                            if (aliasAs) {
                                $scope[aliasAs] = collection;
                            }
                            if (isArrayLike(collection)) {
                                collectionKeys = collection;
                                trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
                            }
                            else {
                                trackByIdFn = trackByIdExpFn || trackByIdObjFn;
                                // if object, extract keys, sort them and use to determine order of iteration over obj props
                                collectionKeys = [];
                                for (var itemKey in collection) {
                                    if (collection.hasOwnProperty(itemKey) && itemKey.charAt(0) != '$') {
                                        collectionKeys.push(itemKey);
                                    }
                                }
                                collectionKeys.sort();
                            }
                            collectionLength = collectionKeys.length;
                            nextBlockOrder = new Array(collectionLength);
                            // locate existing items
                            for (index = 0; index < collectionLength; index++) {
                                key = (collection === collectionKeys) ? index : collectionKeys[index];
                                value = collection[key];
                                trackById = trackByIdFn(key, value, index);
                                if (lastBlockMap[trackById]) {
                                    // found previously seen block
                                    block = lastBlockMap[trackById];
                                    delete lastBlockMap[trackById];
                                    nextBlockMap[trackById] = block;
                                    nextBlockOrder[index] = block;
                                }
                                else if (nextBlockMap[trackById]) {
                                    // if collision detected. restore lastBlockMap and throw an error
                                    forEach(nextBlockOrder, function (block) {
                                        if (block && block.scope)
                                            lastBlockMap[block.id] = block;
                                    });
                                    throw ngRepeatMinErr('dupes', "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}", expression, trackById, value);
                                }
                                else {
                                    // new never before seen block
                                    nextBlockOrder[index] = { id: trackById, scope: undefined, clone: undefined };
                                    nextBlockMap[trackById] = true;
                                }
                            }
                            // remove leftover items
                            for (var blockKey in lastBlockMap) {
                                block = lastBlockMap[blockKey];
                                elementsToRemove = getBlockNodes(block.clone);
                                $animate.leave(elementsToRemove);
                                if (elementsToRemove[0].parentNode) {
                                    // if the element was not removed yet because of pending animation, mark it as deleted
                                    // so that we can ignore it later
                                    for (index = 0, length = elementsToRemove.length; index < length; index++) {
                                        elementsToRemove[index][NG_REMOVED] = true;
                                    }
                                }
                                block.scope.$destroy();
                            }
                            // we are not using forEach for perf reasons (trying to avoid #call)
                            for (index = 0; index < collectionLength; index++) {
                                key = (collection === collectionKeys) ? index : collectionKeys[index];
                                value = collection[key];
                                block = nextBlockOrder[index];
                                if (block.scope) {
                                    // if we have already seen this object, then we need to reuse the
                                    // associated scope/element
                                    nextNode = previousNode;
                                    // skip nodes that are already pending removal via leave animation
                                    do {
                                        nextNode = nextNode.nextSibling;
                                    } while (nextNode && nextNode[NG_REMOVED]);
                                    if (getBlockStart(block) != nextNode) {
                                        // existing item which got moved
                                        $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));
                                    }
                                    previousNode = getBlockEnd(block);
                                    updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                                }
                                else {
                                    // new item which we don't know about
                                    $transclude(function ngRepeatTransclude(clone, scope) {
                                        block.scope = scope;
                                        // http://jsperf.com/clone-vs-createcomment
                                        var endNode = ngRepeatEndComment.cloneNode(false);
                                        clone[clone.length++] = endNode;
                                        // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?
                                        $animate.enter(clone, null, jqLite(previousNode));
                                        previousNode = endNode;
                                        // Note: We only need the first/last node of the cloned nodes.
                                        // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                                        // by a directive with templateUrl when its template arrives.
                                        block.clone = clone;
                                        nextBlockMap[block.id] = block;
                                        updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                                    });
                                }
                            }
                            lastBlockMap = nextBlockMap;
                        });
                    };
                }
            };
        }];
    var NG_HIDE_CLASS = 'ng-hide';
    var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
    /**
     * @ngdoc directive
     * @name ngShow
     *
     * @description
     * The `ngShow` directive shows or hides the given HTML element based on the expression
     * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
     * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
     * in AngularJS and sets the display style to none (using an !important flag).
     * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
     *
     * ```html
     * <!-- when $scope.myValue is truthy (element is visible) -->
     * <div ng-show="myValue"></div>
     *
     * <!-- when $scope.myValue is falsy (element is hidden) -->
     * <div ng-show="myValue" class="ng-hide"></div>
     * ```
     *
     * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
     * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
     * from the element causing the element not to appear hidden.
     *
     * ## Why is !important used?
     *
     * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
     * can be easily overridden by heavier selectors. For example, something as simple
     * as changing the display style on a HTML list item would make hidden elements appear visible.
     * This also becomes a bigger issue when dealing with CSS frameworks.
     *
     * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
     * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
     * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
     *
     * ### Overriding `.ng-hide`
     *
     * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
     * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
     * class in CSS:
     *
     * ```css
     * .ng-hide {
     *   /&#42; this is just another form of hiding an element &#42;/
     *   display: block!important;
     *   position: absolute;
     *   top: -9999px;
     *   left: -9999px;
     * }
     * ```
     *
     * By default you don't need to override in CSS anything and the animations will work around the display style.
     *
     * ## A note about animations with `ngShow`
     *
     * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
     * is true and false. This system works like the animation system present with ngClass except that
     * you must also include the !important flag to override the display property
     * so that you can perform an animation when the element is hidden during the time of the animation.
     *
     * ```css
     * //
     * //a working example can be found at the bottom of this page
     * //
     * .my-element.ng-hide-add, .my-element.ng-hide-remove {
     *   /&#42; this is required as of 1.3x to properly
     *      apply all styling in a show/hide animation &#42;/
     *   transition: 0s linear all;
     * }
     *
     * .my-element.ng-hide-add-active,
     * .my-element.ng-hide-remove-active {
     *   /&#42; the transition is defined in the active class &#42;/
     *   transition: 1s linear all;
     * }
     *
     * .my-element.ng-hide-add { ... }
     * .my-element.ng-hide-add.ng-hide-add-active { ... }
     * .my-element.ng-hide-remove { ... }
     * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
     * ```
     *
     * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
     * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
     *
     * @animations
     * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
     * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
     *
     * @element ANY
     * @param {expression} ngShow If the {@link guide/expression expression} is truthy
     *     then the element is shown or hidden respectively.
     *
     * @example
      <example module="ngAnimate" deps="angular-animate.js" animations="true">
        <file name="index.html">
          Click me: <input type="checkbox" ng-model="checked"><br/>
          <div>
            Show:
            <div class="check-element animate-show" ng-show="checked">
              <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
            </div>
          </div>
          <div>
            Hide:
            <div class="check-element animate-show" ng-hide="checked">
              <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
            </div>
          </div>
        </file>
        <file name="glyphicons.css">
          @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
        </file>
        <file name="animations.css">
          .animate-show {
            line-height: 20px;
            opacity: 1;
            padding: 10px;
            border: 1px solid black;
            background: white;
          }
    
          .animate-show.ng-hide-add.ng-hide-add-active,
          .animate-show.ng-hide-remove.ng-hide-remove-active {
            -webkit-transition: all linear 0.5s;
            transition: all linear 0.5s;
          }
    
          .animate-show.ng-hide {
            line-height: 0;
            opacity: 0;
            padding: 0 10px;
          }
    
          .check-element {
            padding: 10px;
            border: 1px solid black;
            background: white;
          }
        </file>
        <file name="protractor.js" type="protractor">
          var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
          var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));
    
          it('should check ng-show / ng-hide', function() {
            expect(thumbsUp.isDisplayed()).toBeFalsy();
            expect(thumbsDown.isDisplayed()).toBeTruthy();
    
            element(by.model('checked')).click();
    
            expect(thumbsUp.isDisplayed()).toBeTruthy();
            expect(thumbsDown.isDisplayed()).toBeFalsy();
          });
        </file>
      </example>
     */
    var ngShowDirective = ['$animate', function ($animate) {
            return {
                restrict: 'A',
                multiElement: true,
                link: function (scope, element, attr) {
                    scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
                        // we're adding a temporary, animation-specific class for ng-hide since this way
                        // we can control when the element is actually displayed on screen without having
                        // to have a global/greedy CSS selector that breaks when other animations are run.
                        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
                        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
                            tempClasses: NG_HIDE_IN_PROGRESS_CLASS
                        });
                    });
                }
            };
        }];
    /**
     * @ngdoc directive
     * @name ngHide
     *
     * @description
     * The `ngHide` directive shows or hides the given HTML element based on the expression
     * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
     * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
     * in AngularJS and sets the display style to none (using an !important flag).
     * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
     *
     * ```html
     * <!-- when $scope.myValue is truthy (element is hidden) -->
     * <div ng-hide="myValue" class="ng-hide"></div>
     *
     * <!-- when $scope.myValue is falsy (element is visible) -->
     * <div ng-hide="myValue"></div>
     * ```
     *
     * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
     * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
     * from the element causing the element not to appear hidden.
     *
     * ## Why is !important used?
     *
     * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
     * can be easily overridden by heavier selectors. For example, something as simple
     * as changing the display style on a HTML list item would make hidden elements appear visible.
     * This also becomes a bigger issue when dealing with CSS frameworks.
     *
     * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
     * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
     * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
     *
     * ### Overriding `.ng-hide`
     *
     * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
     * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
     * class in CSS:
     *
     * ```css
     * .ng-hide {
     *   /&#42; this is just another form of hiding an element &#42;/
     *   display: block!important;
     *   position: absolute;
     *   top: -9999px;
     *   left: -9999px;
     * }
     * ```
     *
     * By default you don't need to override in CSS anything and the animations will work around the display style.
     *
     * ## A note about animations with `ngHide`
     *
     * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
     * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
     * CSS class is added and removed for you instead of your own CSS class.
     *
     * ```css
     * //
     * //a working example can be found at the bottom of this page
     * //
     * .my-element.ng-hide-add, .my-element.ng-hide-remove {
     *   transition: 0.5s linear all;
     * }
     *
     * .my-element.ng-hide-add { ... }
     * .my-element.ng-hide-add.ng-hide-add-active { ... }
     * .my-element.ng-hide-remove { ... }
     * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
     * ```
     *
     * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
     * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
     *
     * @animations
     * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
     * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
     *
     * @element ANY
     * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
     *     the element is shown or hidden respectively.
     *
     * @example
      <example module="ngAnimate" deps="angular-animate.js" animations="true">
        <file name="index.html">
          Click me: <input type="checkbox" ng-model="checked"><br/>
          <div>
            Show:
            <div class="check-element animate-hide" ng-show="checked">
              <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
            </div>
          </div>
          <div>
            Hide:
            <div class="check-element animate-hide" ng-hide="checked">
              <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
            </div>
          </div>
        </file>
        <file name="glyphicons.css">
          @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
        </file>
        <file name="animations.css">
          .animate-hide {
            -webkit-transition: all linear 0.5s;
            transition: all linear 0.5s;
            line-height: 20px;
            opacity: 1;
            padding: 10px;
            border: 1px solid black;
            background: white;
          }
    
          .animate-hide.ng-hide {
            line-height: 0;
            opacity: 0;
            padding: 0 10px;
          }
    
          .check-element {
            padding: 10px;
            border: 1px solid black;
            background: white;
          }
        </file>
        <file name="protractor.js" type="protractor">
          var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
          var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));
    
          it('should check ng-show / ng-hide', function() {
            expect(thumbsUp.isDisplayed()).toBeFalsy();
            expect(thumbsDown.isDisplayed()).toBeTruthy();
    
            element(by.model('checked')).click();
    
            expect(thumbsUp.isDisplayed()).toBeTruthy();
            expect(thumbsDown.isDisplayed()).toBeFalsy();
          });
        </file>
      </example>
     */
    var ngHideDirective = ['$animate', function ($animate) {
            return {
                restrict: 'A',
                multiElement: true,
                link: function (scope, element, attr) {
                    scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
                        // The comment inside of the ngShowDirective explains why we add and
                        // remove a temporary class for the show/hide animation
                        $animate[value ? 'addClass' : 'removeClass'](element, NG_HIDE_CLASS, {
                            tempClasses: NG_HIDE_IN_PROGRESS_CLASS
                        });
                    });
                }
            };
        }];
    /**
     * @ngdoc directive
     * @name ngStyle
     * @restrict AC
     *
     * @description
     * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
     *
     * @element ANY
     * @param {expression} ngStyle
     *
     * {@link guide/expression Expression} which evals to an
     * object whose keys are CSS style names and values are corresponding values for those CSS
     * keys.
     *
     * Since some CSS style names are not valid keys for an object, they must be quoted.
     * See the 'background-color' style in the example below.
     *
     * @example
       <example>
         <file name="index.html">
            <input type="button" value="set color" ng-click="myStyle={color:'red'}">
            <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
            <input type="button" value="clear" ng-click="myStyle={}">
            <br/>
            <span ng-style="myStyle">Sample Text</span>
            <pre>myStyle={{myStyle}}</pre>
         </file>
         <file name="style.css">
           span {
             color: black;
           }
         </file>
         <file name="protractor.js" type="protractor">
           var colorSpan = element(by.css('span'));
    
           it('should check ng-style', function() {
             expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
             element(by.css('input[value=\'set color\']')).click();
             expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
             element(by.css('input[value=clear]')).click();
             expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
           });
         </file>
       </example>
     */
    var ngStyleDirective = ngDirective(function (scope, element, attr) {
        scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
            if (oldStyles && (newStyles !== oldStyles)) {
                forEach(oldStyles, function (val, style) { element.css(style, ''); });
            }
            if (newStyles)
                element.css(newStyles);
        }, true);
    });
    /**
     * @ngdoc directive
     * @name ngSwitch
     * @restrict EA
     *
     * @description
     * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
     * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
     * as specified in the template.
     *
     * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
     * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
     * matches the value obtained from the evaluated expression. In other words, you define a container element
     * (where you place the directive), place an expression on the **`on="..."` attribute**
     * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
     * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
     * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
     * attribute is displayed.
     *
     * <div class="alert alert-info">
     * Be aware that the attribute values to match against cannot be expressions. They are interpreted
     * as literal string values to match against.
     * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
     * value of the expression `$scope.someVal`.
     * </div>
    
     * @animations
     * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
     * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
     *
     * @usage
     *
     * ```
     * <ANY ng-switch="expression">
     *   <ANY ng-switch-when="matchValue1">...</ANY>
     *   <ANY ng-switch-when="matchValue2">...</ANY>
     *   <ANY ng-switch-default>...</ANY>
     * </ANY>
     * ```
     *
     *
     * @scope
     * @priority 1200
     * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.
     * On child elements add:
     *
     * * `ngSwitchWhen`: the case statement to match against. If match then this
     *   case will be displayed. If the same match appears multiple times, all the
     *   elements will be displayed.
     * * `ngSwitchDefault`: the default case when no other case match. If there
     *   are multiple default cases, all of them will be displayed when no other
     *   case match.
     *
     *
     * @example
      <example module="switchExample" deps="angular-animate.js" animations="true">
        <file name="index.html">
          <div ng-controller="ExampleController">
            <select ng-model="selection" ng-options="item for item in items">
            </select>
            <tt>selection={{selection}}</tt>
            <hr/>
            <div class="animate-switch-container"
              ng-switch on="selection">
                <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
                <div class="animate-switch" ng-switch-when="home">Home Span</div>
                <div class="animate-switch" ng-switch-default>default</div>
            </div>
          </div>
        </file>
        <file name="script.js">
          angular.module('switchExample', ['ngAnimate'])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.items = ['settings', 'home', 'other'];
              $scope.selection = $scope.items[0];
            }]);
        </file>
        <file name="animations.css">
          .animate-switch-container {
            position:relative;
            background:white;
            border:1px solid black;
            height:40px;
            overflow:hidden;
          }
    
          .animate-switch {
            padding:10px;
          }
    
          .animate-switch.ng-animate {
            -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
            transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
    
            position:absolute;
            top:0;
            left:0;
            right:0;
            bottom:0;
          }
    
          .animate-switch.ng-leave.ng-leave-active,
          .animate-switch.ng-enter {
            top:-50px;
          }
          .animate-switch.ng-leave,
          .animate-switch.ng-enter.ng-enter-active {
            top:0;
          }
        </file>
        <file name="protractor.js" type="protractor">
          var switchElem = element(by.css('[ng-switch]'));
          var select = element(by.model('selection'));
    
          it('should start in settings', function() {
            expect(switchElem.getText()).toMatch(/Settings Div/);
          });
          it('should change to home', function() {
            select.all(by.css('option')).get(1).click();
            expect(switchElem.getText()).toMatch(/Home Span/);
          });
          it('should select default', function() {
            select.all(by.css('option')).get(2).click();
            expect(switchElem.getText()).toMatch(/default/);
          });
        </file>
      </example>
     */
    var ngSwitchDirective = ['$animate', function ($animate) {
            return {
                restrict: 'EA',
                require: 'ngSwitch',
                // asks for $scope to fool the BC controller module
                controller: ['$scope', function ngSwitchController() {
                        this.cases = {};
                    }],
                link: function (scope, element, attr, ngSwitchController) {
                    var watchExpr = attr.ngSwitch || attr.on, selectedTranscludes = [], selectedElements = [], previousLeaveAnimations = [], selectedScopes = [];
                    var spliceFactory = function (array, index) {
                        return function () { array.splice(index, 1); };
                    };
                    scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
                        var i, ii;
                        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
                            $animate.cancel(previousLeaveAnimations[i]);
                        }
                        previousLeaveAnimations.length = 0;
                        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
                            var selected = getBlockNodes(selectedElements[i].clone);
                            selectedScopes[i].$destroy();
                            var promise = previousLeaveAnimations[i] = $animate.leave(selected);
                            promise.then(spliceFactory(previousLeaveAnimations, i));
                        }
                        selectedElements.length = 0;
                        selectedScopes.length = 0;
                        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
                            forEach(selectedTranscludes, function (selectedTransclude) {
                                selectedTransclude.transclude(function (caseElement, selectedScope) {
                                    selectedScopes.push(selectedScope);
                                    var anchor = selectedTransclude.element;
                                    caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');
                                    var block = { clone: caseElement };
                                    selectedElements.push(block);
                                    $animate.enter(caseElement, anchor.parent(), anchor);
                                });
                            });
                        }
                    });
                }
            };
        }];
    var ngSwitchWhenDirective = ngDirective({
        transclude: 'element',
        priority: 1200,
        require: '^ngSwitch',
        multiElement: true,
        link: function (scope, element, attrs, ctrl, $transclude) {
            ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
            ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
        }
    });
    var ngSwitchDefaultDirective = ngDirective({
        transclude: 'element',
        priority: 1200,
        require: '^ngSwitch',
        multiElement: true,
        link: function (scope, element, attr, ctrl, $transclude) {
            ctrl.cases['?'] = (ctrl.cases['?'] || []);
            ctrl.cases['?'].push({ transclude: $transclude, element: element });
        }
    });
    /**
     * @ngdoc directive
     * @name ngTransclude
     * @restrict EAC
     *
     * @description
     * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
     *
     * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
     *
     * @element ANY
     *
     * @example
       <example module="transcludeExample">
         <file name="index.html">
           <script>
             angular.module('transcludeExample', [])
              .directive('pane', function(){
                 return {
                   restrict: 'E',
                   transclude: true,
                   scope: { title:'@' },
                   template: '<div style="border: 1px solid black;">' +
                               '<div style="background-color: gray">{{title}}</div>' +
                               '<ng-transclude></ng-transclude>' +
                             '</div>'
                 };
             })
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.title = 'Lorem Ipsum';
               $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
             }]);
           </script>
           <div ng-controller="ExampleController">
             <input ng-model="title"><br>
             <textarea ng-model="text"></textarea> <br/>
             <pane title="{{title}}">{{text}}</pane>
           </div>
         </file>
         <file name="protractor.js" type="protractor">
            it('should have transcluded', function() {
              var titleElement = element(by.model('title'));
              titleElement.clear();
              titleElement.sendKeys('TITLE');
              var textElement = element(by.model('text'));
              textElement.clear();
              textElement.sendKeys('TEXT');
              expect(element(by.binding('title')).getText()).toEqual('TITLE');
              expect(element(by.binding('text')).getText()).toEqual('TEXT');
            });
         </file>
       </example>
     *
     */
    var ngTranscludeDirective = ngDirective({
        restrict: 'EAC',
        link: function ($scope, $element, $attrs, controller, $transclude) {
            if (!$transclude) {
                throw minErr('ngTransclude')('orphan', 'Illegal use of ngTransclude directive in the template! ' +
                    'No parent directive that requires a transclusion found. ' +
                    'Element: {0}', startingTag($element));
            }
            $transclude(function (clone) {
                $element.empty();
                $element.append(clone);
            });
        }
    });
    /**
     * @ngdoc directive
     * @name script
     * @restrict E
     *
     * @description
     * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
     * template can be used by {@link ng.directive:ngInclude `ngInclude`},
     * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
     * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
     * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
     *
     * @param {string} type Must be set to `'text/ng-template'`.
     * @param {string} id Cache name of the template.
     *
     * @example
      <example>
        <file name="index.html">
          <script type="text/ng-template" id="/tpl.html">
            Content of the template.
          </script>
    
          <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
          <div id="tpl-content" ng-include src="currentTpl"></div>
        </file>
        <file name="protractor.js" type="protractor">
          it('should load template defined inside script tag', function() {
            element(by.css('#tpl-link')).click();
            expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
          });
        </file>
      </example>
     */
    var scriptDirective = ['$templateCache', function ($templateCache) {
            return {
                restrict: 'E',
                terminal: true,
                compile: function (element, attr) {
                    if (attr.type == 'text/ng-template') {
                        var templateUrl = attr.id, text = element[0].text;
                        $templateCache.put(templateUrl, text);
                    }
                }
            };
        }];
    var ngOptionsMinErr = minErr('ngOptions');
    /**
     * @ngdoc directive
     * @name select
     * @restrict E
     *
     * @description
     * HTML `SELECT` element with angular data-binding.
     *
     * # `ngOptions`
     *
     * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
     * elements for the `<select>` element using the array or object obtained by evaluating the
     * `ngOptions` comprehension_expression.
     *
     * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
     * similar result. However, the `ngOptions` provides some benefits such as reducing memory and
     * increasing speed by not creating a new scope for each repeated instance, as well as providing
     * more flexibility in how the `select`'s model is assigned via `select as`. `ngOptions` should be
     * used when the `select` model needs to be bound to a non-string value. This is because an option
     * element can only be bound to string values at present.
     *
     * When an item in the `<select>` menu is selected, the array element or object property
     * represented by the selected option will be bound to the model identified by the `ngModel`
     * directive.
     *
     * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
     * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
     * option. See example below for demonstration.
     *
     * <div class="alert alert-warning">
     * **Note:** `ngModel` compares by reference, not value. This is important when binding to an
     * array of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).
     * </div>
     *
     * ## `select as`
     *
     * Using `select as` will bind the result of the `select as` expression to the model, but
     * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
     * or property name (for object data sources) of the value within the collection. If a `track by` expression
     * is used, the result of that expression will be set as the value of the `option` and `select` elements.
     *
     * ### `select as` with `trackexpr`
     *
     * Using `select as` together with `trackexpr` is not recommended. Reasoning:
     *
     * - Example: &lt;select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected"&gt;
     *   values: [{id: 1, label: 'aLabel', subItem: {name: 'aSubItem'}}, {id: 2, label: 'bLabel', subItem: {name: 'bSubItem'}}],
     *   $scope.selected = {name: 'aSubItem'};
     * - track by is always applied to `value`, with the purpose of preserving the selection,
     *   (to `item` in this case)
     * - to calculate whether an item is selected we do the following:
     *   1. apply `track by` to the values in the array, e.g.
     *      In the example: [1,2]
     *   2. apply `track by` to the already selected value in `ngModel`:
     *      In the example: this is not possible, as `track by` refers to `item.id`, but the selected
     *      value from `ngModel` is `{name: aSubItem}`.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} required The control is considered valid only if value is entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {comprehension_expression=} ngOptions in one of the following forms:
     *
     *   * for array data sources:
     *     * `label` **`for`** `value` **`in`** `array`
     *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
     *     * `label`  **`group by`** `group` **`for`** `value` **`in`** `array`
     *     * `select` **`as`** `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
     *   * for object data sources:
     *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
     *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
     *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
     *     * `select` **`as`** `label` **`group by`** `group`
     *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
     *
     * Where:
     *
     *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
     *   * `value`: local variable which will refer to each item in the `array` or each property value
     *      of `object` during iteration.
     *   * `key`: local variable which will refer to a property name in `object` during iteration.
     *   * `label`: The result of this expression will be the label for `<option>` element. The
     *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
     *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
     *      element. If not specified, `select` expression will default to `value`.
     *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
     *      DOM element.
     *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
     *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
     *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
     *      even when the options are recreated (e.g. reloaded from the server).
     *
     * @example
        <example module="selectExample">
          <file name="index.html">
            <script>
            angular.module('selectExample', [])
              .controller('ExampleController', ['$scope', function($scope) {
                $scope.colors = [
                  {name:'black', shade:'dark'},
                  {name:'white', shade:'light'},
                  {name:'red', shade:'dark'},
                  {name:'blue', shade:'dark'},
                  {name:'yellow', shade:'light'}
                ];
                $scope.myColor = $scope.colors[2]; // red
              }]);
            </script>
            <div ng-controller="ExampleController">
              <ul>
                <li ng-repeat="color in colors">
                  Name: <input ng-model="color.name">
                  [<a href ng-click="colors.splice($index, 1)">X</a>]
                </li>
                <li>
                  [<a href ng-click="colors.push({})">add</a>]
                </li>
              </ul>
              <hr/>
              Color (null not allowed):
              <select ng-model="myColor" ng-options="color.name for color in colors"></select><br>
    
              Color (null allowed):
              <span  class="nullable">
                <select ng-model="myColor" ng-options="color.name for color in colors">
                  <option value="">-- choose color --</option>
                </select>
              </span><br/>
    
              Color grouped by shade:
              <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
              </select><br/>
    
    
              Select <a href ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</a>.<br>
              <hr/>
              Currently selected: {{ {selected_color:myColor} }}
              <div style="border:solid 1px black; height:20px"
                   ng-style="{'background-color':myColor.name}">
              </div>
            </div>
          </file>
          <file name="protractor.js" type="protractor">
             it('should check ng-options', function() {
               expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
               element.all(by.model('myColor')).first().click();
               element.all(by.css('select[ng-model="myColor"] option')).first().click();
               expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
               element(by.css('.nullable select[ng-model="myColor"]')).click();
               element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
               expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
             });
          </file>
        </example>
     */
    var ngOptionsDirective = valueFn({
        restrict: 'A',
        terminal: true
    });
    // jshint maxlen: false
    var selectDirective = ['$compile', '$parse', function ($compile, $parse) {
            //000011111111110000000000022222222220000000000000000000003333333333000000000000004444444444444440000000005555555555555550000000666666666666666000000000000000777777777700000000000000000008888888888
            var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/, nullModelCtrl = { $setViewValue: noop };
            // jshint maxlen: 100
            return {
                restrict: 'E',
                require: ['select', '?ngModel'],
                controller: ['$element', '$scope', '$attrs', function ($element, $scope, $attrs) {
                        var self = this, optionsMap = {}, ngModelCtrl = nullModelCtrl, nullOption, unknownOption;
                        self.databound = $attrs.ngModel;
                        self.init = function (ngModelCtrl_, nullOption_, unknownOption_) {
                            ngModelCtrl = ngModelCtrl_;
                            nullOption = nullOption_;
                            unknownOption = unknownOption_;
                        };
                        self.addOption = function (value, element) {
                            assertNotHasOwnProperty(value, '"option value"');
                            optionsMap[value] = true;
                            if (ngModelCtrl.$viewValue == value) {
                                $element.val(value);
                                if (unknownOption.parent())
                                    unknownOption.remove();
                            }
                            // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
                            // Adding an <option selected="selected"> element to a <select required="required"> should
                            // automatically select the new element
                            if (element && element[0].hasAttribute('selected')) {
                                element[0].selected = true;
                            }
                        };
                        self.removeOption = function (value) {
                            if (this.hasOption(value)) {
                                delete optionsMap[value];
                                if (ngModelCtrl.$viewValue === value) {
                                    this.renderUnknownOption(value);
                                }
                            }
                        };
                        self.renderUnknownOption = function (val) {
                            var unknownVal = '? ' + hashKey(val) + ' ?';
                            unknownOption.val(unknownVal);
                            $element.prepend(unknownOption);
                            $element.val(unknownVal);
                            unknownOption.prop('selected', true); // needed for IE
                        };
                        self.hasOption = function (value) {
                            return optionsMap.hasOwnProperty(value);
                        };
                        $scope.$on('$destroy', function () {
                            // disable unknown option so that we don't do work when the whole select is being destroyed
                            self.renderUnknownOption = noop;
                        });
                    }],
                link: function (scope, element, attr, ctrls) {
                    // if ngModel is not defined, we don't need to do anything
                    if (!ctrls[1])
                        return;
                    var selectCtrl = ctrls[0], ngModelCtrl = ctrls[1], multiple = attr.multiple, optionsExp = attr.ngOptions, nullOption = false, // if false, user will not be able to select it (used by ngOptions)
                    emptyOption, renderScheduled = false, 
                    // we can't just jqLite('<option>') since jqLite is not smart enough
                    // to create it in <select> and IE barfs otherwise.
                    optionTemplate = jqLite(document.createElement('option')), optGroupTemplate = jqLite(document.createElement('optgroup')), unknownOption = optionTemplate.clone();
                    // find "null" option
                    for (var i = 0, children = element.children(), ii = children.length; i < ii; i++) {
                        if (children[i].value === '') {
                            emptyOption = nullOption = children.eq(i);
                            break;
                        }
                    }
                    selectCtrl.init(ngModelCtrl, nullOption, unknownOption);
                    // required validator
                    if (multiple) {
                        ngModelCtrl.$isEmpty = function (value) {
                            return !value || value.length === 0;
                        };
                    }
                    if (optionsExp)
                        setupAsOptions(scope, element, ngModelCtrl);
                    else if (multiple)
                        setupAsMultiple(scope, element, ngModelCtrl);
                    else
                        setupAsSingle(scope, element, ngModelCtrl, selectCtrl);
                    ////////////////////////////
                    function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {
                        ngModelCtrl.$render = function () {
                            var viewValue = ngModelCtrl.$viewValue;
                            if (selectCtrl.hasOption(viewValue)) {
                                if (unknownOption.parent())
                                    unknownOption.remove();
                                selectElement.val(viewValue);
                                if (viewValue === '')
                                    emptyOption.prop('selected', true); // to make IE9 happy
                            }
                            else {
                                if (isUndefined(viewValue) && emptyOption) {
                                    selectElement.val('');
                                }
                                else {
                                    selectCtrl.renderUnknownOption(viewValue);
                                }
                            }
                        };
                        selectElement.on('change', function () {
                            scope.$apply(function () {
                                if (unknownOption.parent())
                                    unknownOption.remove();
                                ngModelCtrl.$setViewValue(selectElement.val());
                            });
                        });
                    }
                    function setupAsMultiple(scope, selectElement, ctrl) {
                        var lastView;
                        ctrl.$render = function () {
                            var items = new HashMap(ctrl.$viewValue);
                            forEach(selectElement.find('option'), function (option) {
                                option.selected = isDefined(items.get(option.value));
                            });
                        };
                        // we have to do it on each watch since ngModel watches reference, but
                        // we need to work of an array, so we need to see if anything was inserted/removed
                        scope.$watch(function selectMultipleWatch() {
                            if (!equals(lastView, ctrl.$viewValue)) {
                                lastView = shallowCopy(ctrl.$viewValue);
                                ctrl.$render();
                            }
                        });
                        selectElement.on('change', function () {
                            scope.$apply(function () {
                                var array = [];
                                forEach(selectElement.find('option'), function (option) {
                                    if (option.selected) {
                                        array.push(option.value);
                                    }
                                });
                                ctrl.$setViewValue(array);
                            });
                        });
                    }
                    function setupAsOptions(scope, selectElement, ctrl) {
                        var match;
                        if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {
                            throw ngOptionsMinErr('iexp', "Expected expression in form of " +
                                "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
                                " but got '{0}'. Element: {1}", optionsExp, startingTag(selectElement));
                        }
                        var displayFn = $parse(match[2] || match[1]), valueName = match[4] || match[6], selectAs = / as /.test(match[0]) && match[1], selectAsFn = selectAs ? $parse(selectAs) : null, keyName = match[5], groupByFn = $parse(match[3] || ''), valueFn = $parse(match[2] ? match[1] : valueName), valuesFn = $parse(match[7]), track = match[8], trackFn = track ? $parse(match[8]) : null, trackKeysCache = {}, 
                        // This is an array of array of existing option groups in DOM.
                        // We try to reuse these if possible
                        // - optionGroupsCache[0] is the options with no option group
                        // - optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element
                        optionGroupsCache = [[{ element: selectElement, label: '' }]], 
                        //re-usable object to represent option's locals
                        locals = {};
                        if (nullOption) {
                            // compile the element since there might be bindings in it
                            $compile(nullOption)(scope);
                            // remove the class, which is added automatically because we recompile the element and it
                            // becomes the compilation root
                            nullOption.removeClass('ng-scope');
                            // we need to remove it before calling selectElement.empty() because otherwise IE will
                            // remove the label from the element. wtf?
                            nullOption.remove();
                        }
                        // clear contents, we'll add what's needed based on the model
                        selectElement.empty();
                        selectElement.on('change', selectionChanged);
                        ctrl.$render = render;
                        scope.$watchCollection(valuesFn, scheduleRendering);
                        scope.$watchCollection(getLabels, scheduleRendering);
                        if (multiple) {
                            scope.$watchCollection(function () { return ctrl.$modelValue; }, scheduleRendering);
                        }
                        // ------------------------------------------------------------------ //
                        function callExpression(exprFn, key, value) {
                            locals[valueName] = value;
                            if (keyName)
                                locals[keyName] = key;
                            return exprFn(scope, locals);
                        }
                        function selectionChanged() {
                            scope.$apply(function () {
                                var collection = valuesFn(scope) || [];
                                var viewValue;
                                if (multiple) {
                                    viewValue = [];
                                    forEach(selectElement.val(), function (selectedKey) {
                                        selectedKey = trackFn ? trackKeysCache[selectedKey] : selectedKey;
                                        viewValue.push(getViewValue(selectedKey, collection[selectedKey]));
                                    });
                                }
                                else {
                                    var selectedKey = trackFn ? trackKeysCache[selectElement.val()] : selectElement.val();
                                    viewValue = getViewValue(selectedKey, collection[selectedKey]);
                                }
                                ctrl.$setViewValue(viewValue);
                                render();
                            });
                        }
                        function getViewValue(key, value) {
                            if (key === '?') {
                                return undefined;
                            }
                            else if (key === '') {
                                return null;
                            }
                            else {
                                var viewValueFn = selectAsFn ? selectAsFn : valueFn;
                                return callExpression(viewValueFn, key, value);
                            }
                        }
                        function getLabels() {
                            var values = valuesFn(scope);
                            var toDisplay;
                            if (values && isArray(values)) {
                                toDisplay = new Array(values.length);
                                for (var i = 0, ii = values.length; i < ii; i++) {
                                    toDisplay[i] = callExpression(displayFn, i, values[i]);
                                }
                                return toDisplay;
                            }
                            else if (values) {
                                // TODO: Add a test for this case
                                toDisplay = {};
                                for (var prop in values) {
                                    if (values.hasOwnProperty(prop)) {
                                        toDisplay[prop] = callExpression(displayFn, prop, values[prop]);
                                    }
                                }
                            }
                            return toDisplay;
                        }
                        function createIsSelectedFn(viewValue) {
                            var selectedSet;
                            if (multiple) {
                                if (trackFn && isArray(viewValue)) {
                                    selectedSet = new HashMap([]);
                                    for (var trackIndex = 0; trackIndex < viewValue.length; trackIndex++) {
                                        // tracking by key
                                        selectedSet.put(callExpression(trackFn, null, viewValue[trackIndex]), true);
                                    }
                                }
                                else {
                                    selectedSet = new HashMap(viewValue);
                                }
                            }
                            else if (trackFn) {
                                viewValue = callExpression(trackFn, null, viewValue);
                            }
                            return function isSelected(key, value) {
                                var compareValueFn;
                                if (trackFn) {
                                    compareValueFn = trackFn;
                                }
                                else if (selectAsFn) {
                                    compareValueFn = selectAsFn;
                                }
                                else {
                                    compareValueFn = valueFn;
                                }
                                if (multiple) {
                                    return isDefined(selectedSet.remove(callExpression(compareValueFn, key, value)));
                                }
                                else {
                                    return viewValue === callExpression(compareValueFn, key, value);
                                }
                            };
                        }
                        function scheduleRendering() {
                            if (!renderScheduled) {
                                scope.$$postDigest(render);
                                renderScheduled = true;
                            }
                        }
                        /**
                         * A new labelMap is created with each render.
                         * This function is called for each existing option with added=false,
                         * and each new option with added=true.
                         * - Labels that are passed to this method twice,
                         * (once with added=true and once with added=false) will end up with a value of 0, and
                         * will cause no change to happen to the corresponding option.
                         * - Labels that are passed to this method only once with added=false will end up with a
                         * value of -1 and will eventually be passed to selectCtrl.removeOption()
                         * - Labels that are passed to this method only once with added=true will end up with a
                         * value of 1 and will eventually be passed to selectCtrl.addOption()
                        */
                        function updateLabelMap(labelMap, label, added) {
                            labelMap[label] = labelMap[label] || 0;
                            labelMap[label] += (added ? 1 : -1);
                        }
                        function render() {
                            renderScheduled = false;
                            // Temporary location for the option groups before we render them
                            var optionGroups = { '': [] }, optionGroupNames = [''], optionGroupName, optionGroup, option, existingParent, existingOptions, existingOption, viewValue = ctrl.$viewValue, values = valuesFn(scope) || [], keys = keyName ? sortedKeys(values) : values, key, value, groupLength, length, groupIndex, index, labelMap = {}, selected, isSelected = createIsSelectedFn(viewValue), anySelected = false, lastElement, element, label, optionId;
                            trackKeysCache = {};
                            // We now build up the list of options we need (we merge later)
                            for (index = 0; length = keys.length, index < length; index++) {
                                key = index;
                                if (keyName) {
                                    key = keys[index];
                                    if (key.charAt(0) === '$')
                                        continue;
                                }
                                value = values[key];
                                optionGroupName = callExpression(groupByFn, key, value) || '';
                                if (!(optionGroup = optionGroups[optionGroupName])) {
                                    optionGroup = optionGroups[optionGroupName] = [];
                                    optionGroupNames.push(optionGroupName);
                                }
                                selected = isSelected(key, value);
                                anySelected = anySelected || selected;
                                label = callExpression(displayFn, key, value); // what will be seen by the user
                                // doing displayFn(scope, locals) || '' overwrites zero values
                                label = isDefined(label) ? label : '';
                                optionId = trackFn ? trackFn(scope, locals) : (keyName ? keys[index] : index);
                                if (trackFn) {
                                    trackKeysCache[optionId] = key;
                                }
                                optionGroup.push({
                                    // either the index into array or key from object
                                    id: optionId,
                                    label: label,
                                    selected: selected // determine if we should be selected
                                });
                            }
                            if (!multiple) {
                                if (nullOption || viewValue === null) {
                                    // insert null option if we have a placeholder, or the model is null
                                    optionGroups[''].unshift({ id: '', label: '', selected: !anySelected });
                                }
                                else if (!anySelected) {
                                    // option could not be found, we have to insert the undefined item
                                    optionGroups[''].unshift({ id: '?', label: '', selected: true });
                                }
                            }
                            // Now we need to update the list of DOM nodes to match the optionGroups we computed above
                            for (groupIndex = 0, groupLength = optionGroupNames.length; groupIndex < groupLength; groupIndex++) {
                                // current option group name or '' if no group
                                optionGroupName = optionGroupNames[groupIndex];
                                // list of options for that group. (first item has the parent)
                                optionGroup = optionGroups[optionGroupName];
                                if (optionGroupsCache.length <= groupIndex) {
                                    // we need to grow the optionGroups
                                    existingParent = {
                                        element: optGroupTemplate.clone().attr('label', optionGroupName),
                                        label: optionGroup.label
                                    };
                                    existingOptions = [existingParent];
                                    optionGroupsCache.push(existingOptions);
                                    selectElement.append(existingParent.element);
                                }
                                else {
                                    existingOptions = optionGroupsCache[groupIndex];
                                    existingParent = existingOptions[0]; // either SELECT (no group) or OPTGROUP element
                                    // update the OPTGROUP label if not the same.
                                    if (existingParent.label != optionGroupName) {
                                        existingParent.element.attr('label', existingParent.label = optionGroupName);
                                    }
                                }
                                lastElement = null; // start at the beginning
                                for (index = 0, length = optionGroup.length; index < length; index++) {
                                    option = optionGroup[index];
                                    if ((existingOption = existingOptions[index + 1])) {
                                        // reuse elements
                                        lastElement = existingOption.element;
                                        if (existingOption.label !== option.label) {
                                            updateLabelMap(labelMap, existingOption.label, false);
                                            updateLabelMap(labelMap, option.label, true);
                                            lastElement.text(existingOption.label = option.label);
                                            lastElement.prop('label', existingOption.label);
                                        }
                                        if (existingOption.id !== option.id) {
                                            lastElement.val(existingOption.id = option.id);
                                        }
                                        // lastElement.prop('selected') provided by jQuery has side-effects
                                        if (lastElement[0].selected !== option.selected) {
                                            lastElement.prop('selected', (existingOption.selected = option.selected));
                                            if (msie) {
                                                // See #7692
                                                // The selected item wouldn't visually update on IE without this.
                                                // Tested on Win7: IE9, IE10 and IE11. Future IEs should be tested as well
                                                lastElement.prop('selected', existingOption.selected);
                                            }
                                        }
                                    }
                                    else {
                                        // grow elements
                                        // if it's a null option
                                        if (option.id === '' && nullOption) {
                                            // put back the pre-compiled element
                                            element = nullOption;
                                        }
                                        else {
                                            // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but
                                            // in this version of jQuery on some browser the .text() returns a string
                                            // rather then the element.
                                            (element = optionTemplate.clone())
                                                .val(option.id)
                                                .prop('selected', option.selected)
                                                .attr('selected', option.selected)
                                                .prop('label', option.label)
                                                .text(option.label);
                                        }
                                        existingOptions.push(existingOption = {
                                            element: element,
                                            label: option.label,
                                            id: option.id,
                                            selected: option.selected
                                        });
                                        updateLabelMap(labelMap, option.label, true);
                                        if (lastElement) {
                                            lastElement.after(element);
                                        }
                                        else {
                                            existingParent.element.append(element);
                                        }
                                        lastElement = element;
                                    }
                                }
                                // remove any excessive OPTIONs in a group
                                index++; // increment since the existingOptions[0] is parent element not OPTION
                                while (existingOptions.length > index) {
                                    option = existingOptions.pop();
                                    updateLabelMap(labelMap, option.label, false);
                                    option.element.remove();
                                }
                            }
                            // remove any excessive OPTGROUPs from select
                            while (optionGroupsCache.length > groupIndex) {
                                // remove all the labels in the option group
                                optionGroup = optionGroupsCache.pop();
                                for (index = 1; index < optionGroup.length; ++index) {
                                    updateLabelMap(labelMap, optionGroup[index].label, false);
                                }
                                optionGroup[0].element.remove();
                            }
                            forEach(labelMap, function (count, label) {
                                if (count > 0) {
                                    selectCtrl.addOption(label);
                                }
                                else if (count < 0) {
                                    selectCtrl.removeOption(label);
                                }
                            });
                        }
                    }
                }
            };
        }];
    var optionDirective = ['$interpolate', function ($interpolate) {
            var nullSelectCtrl = {
                addOption: noop,
                removeOption: noop
            };
            return {
                restrict: 'E',
                priority: 100,
                compile: function (element, attr) {
                    if (isUndefined(attr.value)) {
                        var interpolateFn = $interpolate(element.text(), true);
                        if (!interpolateFn) {
                            attr.$set('value', element.text());
                        }
                    }
                    return function (scope, element, attr) {
                        var selectCtrlName = '$selectController', parent = element.parent(), selectCtrl = parent.data(selectCtrlName) ||
                            parent.parent().data(selectCtrlName); // in case we are in optgroup
                        if (!selectCtrl || !selectCtrl.databound) {
                            selectCtrl = nullSelectCtrl;
                        }
                        if (interpolateFn) {
                            scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
                                attr.$set('value', newVal);
                                if (oldVal !== newVal) {
                                    selectCtrl.removeOption(oldVal);
                                }
                                selectCtrl.addOption(newVal, element);
                            });
                        }
                        else {
                            selectCtrl.addOption(attr.value, element);
                        }
                        element.on('$destroy', function () {
                            selectCtrl.removeOption(attr.value);
                        });
                    };
                }
            };
        }];
    var styleDirective = valueFn({
        restrict: 'E',
        terminal: false
    });
    if (window.angular.bootstrap) {
        //AngularJS is already loaded, so we can return here...
        console.log('WARNING: Tried to load angular more than once.');
        return;
    }
    //try to bind to jquery now so that one can write jqLite(document).ready()
    //but we will rebind on bootstrap again.
    bindJQuery();
    publishExternalAPI(angular);
    jqLite(document).ready(function () {
        angularInit(document, bootstrap);
    });
})(window, document);
!window.angular.$$csp() && window.angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}</style>');
// Type definitions for Q
// Project: https://github.com/kriskowal/q
// Definitions by: Barrie Nemetchek <https://github.com/bnemetchek>, Andrew Gaspar <https://github.com/AndrewGaspar/>, John Reilly <https://github.com/johnnyreilly>
// Definitions: https://github.com/borisyankov/DefinitelyTyped  
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Lisa;
        (function (Lisa) {
            var LisaApiPetra = /** @class */ (function (_super) {
                __extends(LisaApiPetra, _super);
                function LisaApiPetra() {
                    var _this = _super.call(this, MyWay.Services.PrivatePortalServiceParameters.Instance().Environnement, MyWay.Services.PrivatePortalServiceParameters.Instance().LisaPlaceholders) || this;
                    _this._localServiceUrl = null;
                    _this._localServiceUrl = Services.PrivatePortalServiceParameters.Instance().LocalServiceUrl;
                    var self = _this;
                    return _this;
                }
                LisaApiPetra.prototype.DemarrerSousProcessusExterne = function (codeProcessus, delegationPortail, initData, valeurDepart, horsPortail, surTablette) {
                    var _this = this;
                    var initDataAsString = JSON.stringify(initData);
                    return this.libraryManager.Core.sendRequest({
                        url: this._localServiceUrl + '/lanceur/DemarrerProcessus?codeProcessus=' + codeProcessus + '&initData=' + initDataAsString + "&valeurEntree=" + (valeurDepart == null ? "" : valeurDepart) + "&horsPortail=" + horsPortail + "&surTablette=" + surTablette,
                        contentType: Services.ContentTypeEnum.JSON,
                        method: Services.MethodEnum.GET,
                        cache: false
                    }).then(function () {
                        Services.Loggers.FLASH.INSTANCE.setValue('details', codeProcessus);
                        LisaApiPetra.logger.debug('DemarrerProcessus du Service Local - Success');
                        return _this.libraryManager.Core.createPromiseSelfResolved(true);
                    }, function () {
                        LisaApiPetra.logger.error('DemarrerProcessus du Service Local - Failed');
                        return _this.libraryManager.Core.createPromiseSelfResolved(false);
                    });
                };
                LisaApiPetra.CLASS_NAME = 'MyWay.Services.Application.LisaApiPetra';
                LisaApiPetra.logger = Services.Loggers.LoggerFactory.INSTANCE.getClass(LisaApiPetra.CLASS_NAME);
                return LisaApiPetra;
            }(Lisa.LisaApiBase));
            Lisa.LisaApiPetra = LisaApiPetra;
        })(Lisa = Services.Lisa || (Services.Lisa = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilite
* INTERFACE IConfigDetailsMobilite : Infos de mobilité présente dans la configuration poste
* @module MyWay.Services.Mobilite
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilite
* INTERFACE IResolutionEcranDTO : DTO des infos la résolution de l'écran principal données par l'API
* @module MyWay.Services.Mobilite
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
/**
* Module de gestion de la mobilite
* INTERFACE ITabletteSignatureDTO : DTO des infos sur les tablettes de signature données par l'API
* @module MyWay.Services.Mobilite
*/
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            ;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            ;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            ;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            ;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            ;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Mobilite;
        (function (Mobilite) {
            ;
        })(Mobilite = Services.Mobilite || (Services.Mobilite = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        Services.Core.defineProperty(Services.PhantomAgent, 'Trace', {
            get: function () {
                return new Services.Trace.Logger("PhantomAgent", "Manager", this._serviceManager.Library);
            }
        });
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
var MyWay;
(function (MyWay) {
    var Services;
    (function (Services) {
        var Bug;
        (function (Bug) {
            var test = 'Rah';
        })(Bug = Services.Bug || (Services.Bug = {}));
    })(Services = MyWay.Services || (MyWay.Services = {}));
})(MyWay || (MyWay = {}));
//# sourceMappingURL=framework-client-mobile.js.map