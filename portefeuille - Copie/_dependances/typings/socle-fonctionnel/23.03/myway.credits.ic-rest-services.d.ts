
declare namespace ICRest.Constantes.Inject {
    namespace Services {
        namespace Common {
            const restService: string;
            const cacheService: string;
        }
        namespace DossierCreditInstruction {
            const accessoiresService: string;
            const ajouterRefusAssuranceExterneService: string;
            const ajouterVersementAttenduService: string;
            const alimDossSignElecGeneService: string;
            const assuranceService: string;
            const avisService: string;
            const bienAVendreService: string;
            const blocNotesService: string;
            const catalogueService: string;
            const clausePersonnaliseeService: string;
            const clientService: string;
            const cnpService: string;
            const contexteEditionService: string;
            const contratEpargneLogementService: string;
            const controleService: string;
            const conventionsAssurancesService: string;
            const creditEpargneLogementService: string;
            const creditService: string;
            const debugService: string;
            const decisionService: string;
            const definirRefenceService: string;
            const definirRemiseTauxService: string;
            const dossierExterneService: string;
            const dossierMRHService: string;
            const dossierNumeriqueService: string;
            const dossierService: string;
            const editerDocumentFC050REFService: string;
            const editerDocumentFZHCOPTService: string;
            const editerDocumentsService: string;
            const editionOffreService: string;
            const elementSchemaService: string;
            const elementService: string;
            const expertisePVHService: string;
            const garantieService: string;
            const impressionService: string;
            const industrialisationService: string;
            const informationPtzService: string;
            const mandatService: string;
            const offreService: string;
            const parametresService: string;
            const payeurService: string;
            const personneService: string;
            const piecesEtControlesService: string;
            const planFinancementService: string;
            const produitService: string;
            const projetImmoService: string;
            const projetService: string;
            const proprietaireService: string;
            const reamenagementService: string;
            const redacteurActeService: string;
            const remiseOffreService: string;
            const rendreDossierService: string;
            const saisiesComplementairesService: string;
            const schemaService: string;
            const signatureElectroniqueService: string;
            const suivisPlanifiesService: string;
            const syntheseService: string;
            const transfertBoService: string;
            const transfertDecisionService: string;
            const transfertService: string;
        }
        namespace CreditParametre {
            const creditParametreService: string;
        }
        namespace CreditService {
            const creditService: string;
        }
        namespace ParametrageApplicatif {
            const parametrageApplicatifService: string;
        }
        namespace Tiers {
            const tiersService: string;
        }
        namespace Eds {
            const edsService: string;
        }
        namespace EntiteTitulaire {
            const entiteTitulaireService: string;
        }
        namespace DossNumCreditService {
            const qualiteDossierService: string;
        }
        namespace DemandeFinancement {
            const demandeService: string;
        }
    }
}

declare module ICRest {
    var app: any;
}

declare namespace ICRest.Constantes.ContexteApplicatif {
    /**
     * Dernière version du wsdl
     * Permet d'accéder à la dernière version des QR
     */
    const derniereVersionWSDL: number;
}

declare namespace ICRest.Constantes.Url {
    namespace Rest {
        const urlCreditParametre: string;
        const urlCreditService: string;
        const urlDossierCreditInstruc: string;
        const urlDossierCreditInstruction: string;
        const urlDossierInstructionService: string;
        const urlEditionInstructionService: string;
        const urlElementInstructionService: string;
        const urlOperationInstructionService: string;
        const urlTiers: string;
        const urlEntiteTitulaireV1: string;
        const urlEntiteTitulaireV2: string;
        const urlEds: string;
        const urlEdsV2: string;
        const urlDossNumCreditService: string;
        const urlDemandeFinancement: string;
    }
    namespace CreditParametre {
        const urlChargerConventionAssurance: string;
        const urlChargerEchellesVersement: string;
        const urlChargerProduitFinancier: string;
        const urlListerAdrFonctionnement: string;
        const urlListerAdrNatureAvantageFiscal: string;
        const urlListerAdrOpposition: string;
        const urlListerAdrParamRubrique: string;
        const urlListerBeneficiaire: string;
        const urlListerCategorieEmprunteur: string;
        const urlListerClausesDeReservesAss: string;
        const urlListerCodePays: string;
        const urlListerConstantes: string;
        const urlListerConventionsBonification: string;
        const urlListerDevise: string;
        const urlListerEtablissements: string;
        const urlListerEligibilites: string;
        const urlListerInfoAgent: string;
        const urlListerLienObjFinanceObjSousJacent: string;
        const urlListerLienParente: string;
        const urlListerLocalites: string;
        const urlListerModalitesImpayes: string;
        const urlListerNatureGarantie: string;
        const urlListerNatureGarRelatifATypeObjet: string;
        const urlListerPaliersDeProgressionParPhase: string;
        const urlListerPaliersDeTauxParPhase: string;
        const urlListerParamCoutTravauxEcoPtz: string;
        const urlListerParametreApplicatif: string;
        const urlListerParametreEtablissement: string;
        const urlListerParametreGarantie: string;
        const urlListerRegimeMatrimonial: string;
        const urlListerRemboursementAnticipe: string;
        const urlListerSuivisPlanifies: string;
        const urlListerTypeAccessoire: string;
        const urlListerTypeAssurance: string;
        const urlListerTypeCharge: string;
        const urlListerTypeDuree: string;
        const urlListerTypeLogement: string;
        const urlListerTypeObjetCommercialiseToc: string;
        const urlListerTypeObjetCommercial: string;
        const urlListerTypeObjetRegemente: string;
        const urlListerTypeReglement: string;
        const urlListerTypeRessource: string;
        const urlListerTypeRole: string;
        const urlListerTypesFraisGarantie: string;
        const urlListerTypologies: string;
        const urlgetListeModTypeDeRoleTiersParAcces: string;
        const urllisteModTiersTypRol: string;
        const urlChargerTypeEdsDecision: string;
        const urlChargerTypeEdsBackOffice: string;
    }
    namespace CreditService {
        const urlCalculerCaracteristiqueCredit: string;
        const urlLirePersonne: string;
        const urlCalculerFraisNotaire: string;
    }
    namespace DossierCreditInstruction {
        const urlAjouterPersonneAvecControle: string;
        const urlAlimDossSignElecGene: string;
        const urlAnnulerActeSignEleGene: string;
        const urlCalculerPiecesEtControles: string;
        const urlConsulterAssurCnp: string;
        const urlConsulterDocumentsDossierCnp: string;
        const urlControlerAppelSGFGAS: string;
        const urlCreerDossierCnp: string;
        const urlCreerDossierExterne: string;
        const urlDefinirEmpAvecCtrl: string;
        const urlDefinirEmprunteur: string;
        const urlDefinirDossierMRH: string;
        const urlDemanderExpertisePVH: string;
        const urlEnvoyerSACCEF: string;
        const urlExecuterCalcDelegDec: string;
        const urlHistorisChangEtatAct: string;
        const urlLancerAppelSGFGAS: string;
        const urlLancerProceSignaElecGene: string;
        const urlLireActeSignatureElectronique: string;
        const urlLireDecisionCnp: string;
        const urlLireDocActSigElecGen: string;
        const urlLireDossierExterne: string;
        const urlListerCollectivitesCnp: string;
        const urlListerDroitsAcquisEL: string;
        const urlListerDroitsAPrets: string;
        const urlListerPersonnes: string;
        const urlRafraichirIntervDoss: string;
        const urlRafraichirEmprunteurDossier: string;
        const urlRafraichirPersonnes: string;
        const urlRecupererContexteCnp: string;
        const urlRecupererContexteEdition: string;
        const urlTesterPresRepCEGC: string;
        const urlTraiterReponseCEGC: string;
        const urlValActeSignEleGene: string;
        const urlLireOffrePretIndustrialisee: string;
        const urlCreerDossEditionGde: string;
        const urlAjouterDocumentsDansDossierEdition: string;
        const urlAnnulerDossierEditio: string;
        const urlLireActeSignElecGene: string;
        const urlTraiterRetourSignSAG: string;
        const urlTraiterExpertisePVH: string;
        const urlSynchroniserAvecSmac: string;
        const urlTransmettrePropCNP: string;
        const urlAjouterAccCompTier: string;
        const urlAjouterAccessoireComplementaire: string;
        const urlAjouterAccessoireLieProduit: string;
        const urlAjouterAssuranceAvecControle: string;
        const urlAjouterAvis: string;
        const urlAjouterCharge: string;
        const urlAjouterClausePersonnalisee: string;
        const urlAjouterComptePersonne: string;
        const urlAjouterContratEpargneLogement: string;
        const urlAjouterCreditBonification: string;
        const urlAjouterCreditExterne: string;
        const urlAjouterCreditInterne: string;
        const urlAjouterEvenement: string;
        const urlAjouterFamilleEpargnePersonne: string;
        const urlAjouterGarantieAvecControle: string;
        const urlAjouterGarantiePersonnelleConventionnee: string;
        const urlAjouterMandat: string;
        const urlAjouterPayeur: string;
        const urlAjouterPhaseCreditExistant: string;
        const urlAjouterPlanFinancement: string;
        const urlAjouterPretReamenage: string;
        const urlAjouterPretReamengbl: string;
        const urlAjouterRefusAssuranceExterne: string;
        const urlAjouterRessource: string;
        const urlAjouterRevenuFiscalEmprunteur: string;
        const urlAjouterSuiviPlanifie: string;
        const urlAjouterVersementAttendu: string;
        const urlAjouterProprietaire: string;
        const urlCalculerBonification: string;
        const urlCalculerCapaciteRemb: string;
        const urlCalculerCreditInterne: string;
        const urlCalculerCreditEL: string;
        const urlCalculerEligibilite: string;
        const urlCalculerFraisHypotheque: string;
        const urlCalculerEncoursEL: string;
        const urlCalculerFraisNotaire: string;
        const urlCalculerModulCredit: string;
        const urlCalculerRevision: string;
        const urlControlerAvantEditionOffre: string;
        const urlControlerCompletude: string;
        const urlControlerCompletudeGarantiesAssurances: string;
        const urlControlerCompletudePvh: string;
        const urlControlerDossier: string;
        const urlCopierPlanFinancement: string;
        const urlCtrlAvantAppelCegc: string;
        const urlDefinirBienAVendre: string;
        const urlDefinirBienPorteEnGarantie: string;
        const urlDefinirBlocNotes: string;
        const urlDefinirComplementDossier: string;
        const urlDefinirDetailCoutObj: string;
        const urlDefinirDroitUtilise: string;
        const urlDefinirPhase: string;
        const urlDefinirProjet: string;
        const urlDefinirReamenagement: string;
        const urlDefinirRedacteurActe: string;
        const urlDefinirReferenceCadastrale: string;
        const urldefPaliersContraints: string;
        const urlDefinirReferenceLot: string;
        const urlDefinirRemiseTaux: string;
        const urlEnregistrerCommentairesPieces: string;
        const urlLireSaisiesComplementaires: string;
        const urlListerCatalogue: string;
        const urlListerConstantes: string;
        const urlListerConventionsAssuranceCompatible: string;
        const urlListerConventionsGarantie: string;
        const urlListerDetailsPretsRea: string;
        const urlListerDocuments: string;
        const urlListerDossier: string;
        const urlListerGammesLissageAutorisees: string;
        const urlListerInformationGarantie: string;
        const urlListerPretsRea: string;
        const urlListerProdEtFamAuto: string;
        const urlListerSynthese: string;
        const urlMajAccessoireComplementaire: string;
        const urlMajAccessoireLieProduit: string;
        const urlMiseAJourDossierNumerique: string;
        const urlMiseAJourPhase: string;
        const urlOuvrirBlocNotes: string;
        const urlPrendreEnCompteDroitAcquis: string;
        const urlRecupererInfoCompPTZ: string;
        const urlRefuserAccessoire: string;
        const urlRetenirPropositionEL: string;
        const urlSauverDossier: string;
        const urlSetDebug: string;
        const urlSignerMandat: string;
        const urlSupprimerTiers: string;
        const urlVerifierComptePayeur: string;
        const urlVerifierEdsDecision: string;
        const urlLireSchemasComplet: string;
        const urlEditerDocumentFC050REF: string;
        const urlEditerDocumentFZHCOPT: string;
        const urlEditerDocuments: string;
        const urlediterDocumentEL: string;
        const urlEditerOffrePret: string;
        const urlCreerDossier: string;
        const urlCreerDossierApplication: string;
        const urlCreerProjet: string;
        const urlDetailAccessoireComplementaire: string;
        const urlDetailAccessoireLieProduit: string;
        const urlLireElements: string;
        const urlLireSchema: string;
        const urlListerRepriseDossier: string;
        const urlMajElement: string;
        const urlMajElements: string;
        const urlOuvrirDossier: string;
        const urlSupprimerElement: string;
        const urlSupprimerElementAvecControle: string;
        const urlSupprimerElements: string;
        const urlAccorderAccessoire: string;
        const urlAnnulerAccordPreteur: string;
        const urlControlerDecision: string;
        const urlControlerEditionOffre: string;
        const urlDefinirOccupant: string;
        const urlDefinirStatutOccup: string;
        const urlDefRattFoyFiscTiers: string;
        const urlFermerDossier: string;
        const urlModifierAccordPreteur: string;
        const urloptimiserPlanFi: string;
        const urlPasserDossierSsSuite: string;
        const urlRefuserAccordPreteur: string;
        const urlRemiseOffre: string;
        const urlRendreDossierViaId: string;
        const urlSignerOffrePret: string;
        const urlTransfererDansApp: string;
        const urlTransfererDossViaId: string;
        const urlTransfererDossViaRes: string;
        const urlValidationAccordClient: string;
        const urlValidationAccordPreteur: string;
        const urlValiderAccordClient: string;
    }
    namespace Tiers {
        const urlGetCorporateActiviteProfessionnelle: string;
        const urlIdentification: string;
    }
    namespace EntiteTitulaire {
        const urlRecherche: string;
        const urlInformationEntiteTitulaire: string;
    }
    namespace Eds {
        const urlRecherche: string;
        const urlContextePoste: string;
    }
    namespace DossNumCreditService {
        const urlQualiteDossier: string;
    }
    namespace DemandeFinancement {
        const urlQualiteDossier: string;
    }
}

declare namespace ICRest.Services.Common {
    interface ICacheService {
        /**
         * Set promise reponse to cache and returns pending promise OR ended promise cached data
         * @param key
         * @param promise
         * @param fromCache: default true. if false reset cache and execute promise
         */
        get<T>(key: string, promise: () => ng.IPromise<T>, fromCache?: boolean): ng.IPromise<T>;
    }
}

declare namespace ICRest.Services {
    interface IRestService {
        /**
         * Exécution de la requête GET
         * @param urlService : url du service appelé
         * @param params : paramètres dans la query
         * @param timeout : optionnel
         */
        sendGetRequest<T, U>(urlService: string, params: U, timeout?: number): ng.IPromise<T>;
        /**
         * Exécution de la requête POST
         * @param urlService : url du service appelé
         * @param data : données dans le body
         * @param params : optionnel, paramètres dans la query
         * @param timeout : optionnel
         */
        sendPostRequest<T, U, V>(urlService: string, data: U, params?: V, timeout?: number, executableDossierFerme?: boolean): ng.IPromise<T>;
        /**
         * Exécution de la requête PUT
         * @param urlService : url du service appelé
         * @param data : données dans le body
         * @param params : optionnel, paramètres dans la query
         * @param timeout : optionnel
         */
        sendPutRequest<T, U, V>(urlService: string, data: U, params?: V, timeout?: number, holdRequestsAfter?: boolean): ng.IPromise<T>;
        /**
         * Exécution de la requête DELETE
         * @param urlService : url du service appelé
         * @param data : optionnel, données dans le body
         */
        sendDeleteRequest<T, U>(urlService: string, data?: U): ng.IPromise<T>;
        letGoAllServices(): void;
        rejectsAllHoldedServices(e: MyWay.Services.Erreur): void;
    }
    /** Classe stockant les appels à mettre en attente */
    class HoldedRequest<T> {
        private $q;
        private request;
        constructor($q: ng.IQService, request: () => ng.IPromise<T>);
        private defer;
        private executed;
        getPromise(): ng.IPromise<T>;
        executePromise(): void;
        rejectPromise(e: MyWay.Services.Erreur): void;
    }
    class RestService implements IRestService {
        private $q;
        private serviceAgentExtended;
        static $inject: Array<string>;
        constructor($q: ng.IQService, serviceAgentExtended: MyWay.Services.ServiceAgentExtended);
        private holdRequests;
        private holdedResquests;
        /** Libération et execution des requests en attente */
        letGoAllServices(): void;
        rejectsAllHoldedServices(e: MyWay.Services.Erreur): void;
        sendGetRequest<T, U>(urlService: string, params: U, timeout?: number): ng.IPromise<T>;
        sendPostRequest<T, U, V>(urlService: string, data: U, params?: V, timeout?: number, executableDossierFerme?: boolean): ng.IPromise<T>;
        sendPutRequest<T, U, V>(urlService: string, data: U, params?: V, timeout?: number, holdRequestsAfter?: boolean): ng.IPromise<T>;
        sendDeleteRequest<T, U>(urlService: string, data?: U): ng.IPromise<T>;
        private exec<T>(call, holdRequestsAfter?, executableDossierFerme?);
        private consume<T, U, V>(typeMethode, urlService, params?, data?, timeout?);
    }
}

declare namespace ICRest.Tools {
    type IElement = Modeles.LireElement.IElementLecture;
    class Element {
        /**
         * Find an element by idws
         * @param elements
         * @param idws
         */
        static findById<T extends IElement>(elements: IElement[], idws: string): T;
        /**
         * Filter elements from a list of idws
         * @param elements
         * @param listIdws
         */
        static filterByIds<T extends IElement>(elements: IElement[], listIdws: string[]): T[];
        /**
         * Filter the elements starting with a codeIdNeo
         * @param elements
         * @param codeIdNeo
         */
        static filterByCodeId<T extends IElement>(elements: IElement[], codeIdNeo: Modeles.ElementSchema.CodeIdNeo): T[];
        /**
         * Construit l'identifiant de classes a renseigner pour une maj
         * @param elementName qui represente un codeIdNeo
         */
        static getMajNames(elementName: string): (acc: string, current: ICRest.Modeles.MajElements.IElementMaj, index: number) => string;
    }
}

declare namespace ICRest.Modeles.SignatureElectroniqueGene {
    interface IEntreeSignatureElectronique {
        /**
         * sIdntDoss
         */
        idDossier: string;
        /**
         * CodeSignature
         */
        codeSignature: number;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IInformationSignataireOffre {
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationSignataireDemandeDeCreditAgence {
        /**
         * DateMiseADispoDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateMiseADispoDemandeDeCredit: string;
        /**
         * DateSignatureDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateSignatureDemandeDeCredit: string;
    }
    interface IInformationSignataireGenerique {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * InformationsSignataireOffre
         */
        informationsSignataireOffre: IInformationSignataireOffre;
        /**
         * InformationSignataireDemandeDeCreditAgence
         */
        informationSignataireDemandeDeCreditAgence: IInformationSignataireDemandeDeCreditAgence;
    }
    interface IInformationDossierSignatureOffre {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierDemandeDeCreditAgence {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierSignatureGenerique {
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataireGenerique>;
        /**
         * InformationsSignatureOffre
         */
        informationsSignatureOffre: IInformationDossierSignatureOffre;
        /**
         * InformationsDemandeDeCreditAgence
         */
        informationsDemandeDeCreditAgence: IInformationDossierDemandeDeCreditAgence;
    }
    interface IDocumentSignatureElectroniqueLecture extends IElementLecture {
        /**
         * IdentifiantDocument
         */
        identifiantDocument: string;
        /**
         * CodeTypeEntite
         */
        codeTypeEntite: string;
        /**
         * IdentifiantIDN
         */
        identifiantIDN: string;
        /**
         * IdentifiantComplet
         */
        identifiantComplet: string;
        /**
         * NomDocument
         */
        nomDocument: string;
        /**
         * RefDocProd
         */
        referenceDocProd: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Origine
         */
        origine: string;
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * FluxBinaire
         */
        fluxBinaire: string;
        /**
         * EstPresent
         */
        estPresent: boolean;
        /**
         * IndicePlan
         */
        indicePlan: number;
        /**
         * IndiceCredit
         */
        indiceCredit: number;
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * LibelleEntiteRattachement
         */
        libelleEntiteRattachement: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Obligatoire
         */
        obligatoire: boolean;
        /**
         * estDocNeo
         */
        estDocNEO: boolean;
        /**
         * EstDocOffre
         */
        estDocOffre: boolean;
        /**
         * Typologie du document
         */
        typologieDocument: number;
    }
    interface ISignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignatureGenerique;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface IInformationSignataire {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationDossierSignature {
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataire>;
    }
    interface IOffreSignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignature;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface IResultatOffreSignatureElectronique {
        /**
         * Action
         */
        action: string;
        /**
         * Code
         */
        code: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * IdentiteActe
         */
        identiteActe: string;
        /**
         * SignatureElectroniqueLecture
         */
        signatureElectroniqueLecture: ISignatureElectroniqueLecture;
        /**
         * OffreSignatureElectroniqueLecture
         */
        offreSignatureElectroniqueLecture: IOffreSignatureElectroniqueLecture;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.SignatureElectronique {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IInformationDossierSignature {
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataire>;
    }
    interface IDocumentSignatureElectroniqueLecture extends IElementLecture {
        /**
         * IdentifiantDocument
         */
        identifiantDocument: string;
        /**
         * CodeTypeEntite
         */
        codeTypeEntite: string;
        /**
         * IdentifiantIDN
         */
        identifiantIDN: string;
        /**
         * IdentifiantComplet
         */
        identifiantComplet: string;
        /**
         * NomDocument
         */
        nomDocument: string;
        /**
         * RefDocProd
         */
        referenceDocProd: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Origine
         */
        origine: string;
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * FluxBinaire
         */
        fluxBinaire: string;
        /**
         * EstPresent
         */
        estPresent: boolean;
        /**
         * IndicePlan
         */
        indicePlan: number;
        /**
         * IndiceCredit
         */
        indiceCredit: number;
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * LibelleEntiteRattachement
         */
        libelleEntiteRattachement: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Obligatoire
         */
        obligatoire: boolean;
        /**
         * estDocNeo
         */
        estDocNEO: boolean;
        /**
         * EstDocOffre
         */
        estDocOffre: boolean;
    }
    interface IOffreSignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignature;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface IInformationSignataire {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
}

declare namespace ICRest.Modeles.AjouterDocDossierIndus {
    interface IAjouterDocumentsDansDossierEditionRequest {
        identifiantDossier: string;
        listeDocOffreIndusMaj: Array<IDocumentOffreIndustrialiseeMaj>;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IDocumentOffreIndustrialiseeMaj extends IElementMaj {
        /**
         * FluxDocument
         */
        fluxDocument: string;
    }
    interface IResultatOffrePretIndustrialisee {
        /**
         * Code
         */
        code: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
    interface IResultatAjoutDocumentPretIndustrialisee {
        /**
         * oResultatAjoutDocPretIndustrialisee
         */
        resultatAjoutDocPretIndustrialisee: IResultatOffrePretIndustrialisee;
        /**
         * IdwsDocument
         */
        idwsDocument: string;
    }
}

declare namespace ICRest.Modeles.AlimDossSignElecgGene {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IAlimDossSignElecGeneRequest {
        entreeSignatureElectronique: IEntreeSignatureElectronique;
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueMaj>;
    }
    interface IEntreeSignatureElectronique {
        /**
         * sIdntDoss
         */
        idDossier: string;
        /**
         * CodeSignature
         */
        codeSignature: number;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IDocumentSignatureElectroniqueMaj extends IElementMaj {
        /**
         * IdentifiantComplet
         */
        identifiantComplet: string;
        /**
         * FluxBinaire
         */
        fluxBinaire: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IInformationSignataireOffre {
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationSignataireDemandeDeCreditAgence {
        /**
         * DateSignatureDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateSignatureDemandeDeCredit: string;
        /**
         * DateMiseADispoDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateMiseADispoDemandeDeCredit: string;
    }
    interface IInformationSignataireGenerique {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * InformationsSignataireOffre
         */
        informationsSignataireOffre: IInformationSignataireOffre;
        /**
         * InformationSignataireDemandeDeCreditAgence
         */
        informationSignataireDemandeDeCreditAgence: IInformationSignataireDemandeDeCreditAgence;
    }
    interface IInformationDossierSignatureOffre {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierDemandeDeCreditAgence {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierSignatureGenerique {
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataireGenerique>;
        /**
         * InformationsSignatureOffre
         */
        informationsSignatureOffre: IInformationDossierSignatureOffre;
        /**
         * InformationsDemandeDeCreditAgence
         */
        informationsDemandeDeCreditAgence: IInformationDossierDemandeDeCreditAgence;
    }
    interface IDocumentSignatureElectroniqueLecture extends IElementLecture {
        /**
         * IdentifiantDocument
         */
        identifiantDocument: string;
        /**
         * CodeTypeEntite
         */
        codeTypeEntite: string;
        /**
         * IdentifiantIDN
         */
        identifiantIDN: string;
        /**
         * IdentifiantComplet
         */
        identifiantComplet: string;
        /**
         * NomDocument
         */
        nomDocument: string;
        /**
         * RefDocProd
         */
        referenceDocProd: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Origine
         */
        origine: string;
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * FluxBinaire
         */
        fluxBinaire: string;
        /**
         * EstPresent
         */
        estPresent: boolean;
        /**
         * IndicePlan
         */
        indicePlan: number;
        /**
         * IndiceCredit
         */
        indiceCredit: number;
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * LibelleEntiteRattachement
         */
        libelleEntiteRattachement: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Obligatoire
         */
        obligatoire: boolean;
        /**
         * estDocNeo
         */
        estDocNEO: boolean;
        /**
         * EstDocOffre
         */
        estDocOffre: boolean;
        /**
         * Case à cocher visible ?
         */
        checkboxVisible: boolean;
        /**
         * Sélectionnable ?
         */
        checkable: boolean;
        /**
         * Possibilité de télécharger ?
         */
        telechargementAutorise: boolean;
        generation: number;
        ajoutLiasse: number;
    }
    interface ISignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignatureGenerique;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface IInformationSignataire {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationDossierSignature {
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataire>;
    }
    interface IOffreSignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignature;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface IResultatOffreSignatureElectronique {
        /**
         * Action
         */
        action: string;
        /**
         * Code
         */
        code: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * IdentiteActe
         */
        identiteActe: string;
        /**
         * SignatureElectroniqueLecture
         */
        signatureElectroniqueLecture: ISignatureElectroniqueLecture;
        /**
         * OffreSignatureElectroniqueLecture
         */
        offreSignatureElectroniqueLecture: IOffreSignatureElectroniqueLecture;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.AnnulerActSigneElecGen {
    interface IAnnActeSignElecGenRequest {
        entreeSignatureElectronique: IEntreeSignatureElectronique;
        /**
         * motif annulation
         */
        motifAnnulation: string;
    }
    interface IEntreeSignatureElectronique {
        /**
         * sIdntDoss
         */
        idDossier: string;
        /**
         * CodeSignature
         */
        codeSignature: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: ICRest.Modeles.IAnomalieLecture[];
    }
    interface IInformationSignataireOffre {
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationSignataireDemandeDeCreditAgence {
        /**
         * DateSignatureDemandeDeCredit
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSignatureDemandeDeCredit: string;
        /**
         * DateMiseADispoDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateMiseADispoDemandeDeCredit: string;
    }
    interface IInformationSignataireGenerique {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * InformationsSignataireOffre
         */
        informationsSignataireOffre: IInformationSignataireOffre;
        /**
         * InformationSignataireDemandeDeCreditAgence
         */
        informationSignataireDemandeDeCreditAgence: IInformationSignataireDemandeDeCreditAgence;
    }
    interface IInformationDossierSignatureOffre {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierDemandeDeCreditAgence {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierSignatureGenerique {
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataireGenerique>;
        /**
         * InformationsSignatureOffre
         */
        informationsSignatureOffre: IInformationDossierSignatureOffre;
        /**
         * InformationsDemandeDeCreditAgence
         */
        informationsDemandeDeCreditAgence: IInformationDossierDemandeDeCreditAgence;
    }
    interface IDocumentSignatureElectroniqueLecture extends IElementLecture {
        /**
         * IdentifiantDocument
         */
        identifiantDocument: string;
        /**
         * CodeTypeEntite
         */
        codeTypeEntite: string;
        /**
         * IdentifiantIDN
         */
        identifiantIDN: string;
        /**
         * IdentifiantComplet
         */
        identifiantComplet: string;
        /**
         * NomDocument
         */
        nomDocument: string;
        /**
         * RefDocProd
         */
        referenceDocProd: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Origine
         */
        origine: string;
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * FluxBinaire
         */
        fluxBinaire: string;
        /**
         * EstPresent
         */
        estPresent: boolean;
        /**
         * IndicePlan
         */
        indicePlan: number;
        /**
         * IndiceCredit
         */
        indiceCredit: number;
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * LibelleEntiteRattachement
         */
        libelleEntiteRattachement: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Obligatoire
         */
        obligatoire: boolean;
        /**
         * estDocNeo
         */
        estDocNEO: boolean;
        /**
         * EstDocOffre
         */
        estDocOffre: boolean;
    }
    interface ISignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignatureGenerique;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface IInformationSignataire {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationDossierSignature {
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataire>;
    }
    interface IOffreSignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignature;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface IResultatOffreSignatureElectronique {
        /**
         * Action
         */
        action: string;
        /**
         * Code
         */
        code: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * IdentiteActe
         */
        identiteActe: string;
        /**
         * SignatureElectroniqueLecture
         */
        signatureElectroniqueLecture: ISignatureElectroniqueLecture;
        /**
         * OffreSignatureElectroniqueLecture
         */
        offreSignatureElectroniqueLecture: IOffreSignatureElectroniqueLecture;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: ICRest.Modeles.IAnomalieLecture[];
    }
}

declare namespace ICRest.Modeles.AnnulerDossierIndus {
    interface IResultatOffrePretIndustrialisee {
        /**
         * Code
         */
        code: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
}

declare namespace ICRest.Modeles.CreerDossierIndus {
    interface IResultatOffrePretIndustrialisee {
        /**
         * Code
         */
        code: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
        /**
         * AnomaliesPassageEnGestionLecture
         */
        anomaliesPassageEnGestionLecture: ICRest.Modeles.IAnomalieLecture[];
        /**
         * AnomaliesLecture
         */
        anomaliesLecture: ICRest.Modeles.IAnomalieLecture[];
    }
    interface ICreerDossierEditionGdeRequest {
        identifiantDossier: string;
        listeIdwsDocOffreIndus: string[];
    }
}

declare namespace ICRest.Modeles.EditionOffre {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IInfoDocument {
        /**
         * sCodeDoc
         */
        codeDoc: string;
        /**
         * sLibDoc
         */
        libelleDoc: string;
        /**
         * cCodeVariance
         */
        codeVariance: number;
        /**
         * iNbEmp
         */
        nombreEmp: number;
        /**
         * iNbNotaire
         */
        nombreNotaire: number;
        /**
         * iNbCaution
         */
        nombreCaution: number;
        /**
         * iNbDossier
         */
        nombreDossier: number;
        /**
         * iNbAutre
         */
        nombreAutre: number;
        /**
         * iNbTotal
         */
        nombreTotal: number;
        /**
         * cTypeTraitement
         */
        typeTraitement: number;
        /**
         * cNiveauTraitement
         */
        niveauTraitement: number;
        /**
         * sModeleTheorique
         */
        modeleTheorique: string;
        /**
         * sCodeProcessus
         */
        codeProcessus: string;
        /**
         * bEstDocOffre
         */
        estDocOffre: boolean;
        /**
         * bEstEditable
         */
        estEditable: boolean;
        /**
         * IdwsElement
         */
        idwsElement: string;
        /**
         * InfoPersonne
         */
        informationPersonne: string;
    }
    interface IResultatListerDocuments {
        /**
         * ListAno
         */
        listeAno: Array<IAnomalieLecture>;
        /**
         * ListInfoDocument
         */
        listeInformationDocument: Array<IInfoDocument>;
    }
    interface IListerDocumentsRequest {
        identifiantDossier: string;
        typeListe: number;
        identifiantPlanFinancement: string;
    }
}

declare namespace ICRest.Modeles.SaisiesComplementaires {
    interface IAnyType {
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IFC003DC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IFC003RE {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IFC004LA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: IChampTextBox;
    }
    interface IFC007ARO {
        /**
         * ContenuConditionsSuspensives
         */
        contenuConditionsSuspensives: IChampTextBox;
    }
    interface ICreditTauxFixeLecture {
        /**
         * ReferenceIndiceCredit
         */
        referenceIndiceCredit: IChampTextBox;
        /**
         * TauxFixeCredit
         */
        tauxFixeCredit: IChampTextBox;
    }
    interface IFC010HS {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeLecture>;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: IChampTextBox;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: IChampTextBox;
        /**
         * DatePourvoirPersoMoraleAssurance
         */
        datePourvoirPersoMoraleAssurance: IChampTextBoxDate;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: IChampTextBox;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: IChampTextBox;
    }
    interface IFC010LI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeLecture>;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: IChampTextBox;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: IChampTextBox;
        /**
         * DatePourvoirPersoMoraleAssurance
         */
        datePourvoirPersoMoraleAssurance: IChampTextBoxDate;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: IChampTextBox;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: IChampTextBox;
    }
    interface IFC017ANL {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017BON {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017CAT {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017CGV {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017CIF {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017SCP {
        /**
         * IndexGarantie
         */
        indexGarantie: number;
        /**
         * ExisteAgrementGarantie
         */
        existeAgrementGarantie: IChampCheckBox;
        /**
         * DateAgrementGarantie
         */
        dateAgrementGarantie: IChampTextBoxDate;
        /**
         * PublierGreffeGarantie
         */
        publierGreffeGarantie: IChampCheckBox;
        /**
         * ConjointsEmprunteursGarantie
         */
        conjointsEmprunteursGarantie: IChampTextBox;
        /**
         * ConjointsCautionsGarantie
         */
        conjointsCautionsGarantie: IChampTextBox;
    }
    interface IFC019AN {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * An1AttestationPTZ
         */
        an1AttestationPTZ: IChampCheckBox;
        /**
         * An2AttestationPTZ
         */
        an2AttestationPTZ: IChampCheckBox;
        /**
         * An3AttestationPTZ
         */
        an3AttestationPTZ: IChampCheckBox;
        /**
         * An4AttestationPTZ
         */
        an4AttestationPTZ: IChampCheckBox;
        /**
         * An5AttestationPTZ
         */
        an5AttestationPTZ: IChampCheckBox;
        /**
         * An6AttestationPTZ
         */
        an6AttestationPTZ: IChampCheckBox;
        /**
         * An7AttestationPTZ
         */
        an7AttestationPTZ: IChampCheckBox;
        /**
         * An8AttestationPTZ
         */
        an8AttestationPTZ: IChampCheckBox;
        /**
         * An9AttestationPTZ
         */
        an9AttestationPTZ: IChampCheckBox;
        /**
         * AnXAttestationPTZ
         */
        anXAttestationPTZ: IChampCheckBox;
        /**
         * AnXIAttestationPTZ
         */
        anXIAttestationPTZ: IChampCheckBox;
        /**
         * AnIIIAttestationPTZ
         */
        anIIIAttestationPTZ: IChampCheckBox;
        /**
         * AnIVAttestationPTZ
         */
        anIVAttestationPTZ: IChampCheckBox;
        /**
         * AnXIVAttestationPTZ
         */
        anXIVAttestationPTZ: IChampCheckBox;
    }
    interface IFC028PNO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: IChampTextBox;
        /**
         * LibelleEtablissementPouvoirNotaire
         */
        libelleEtablissementPouvoirNotaire: IChampTextBox;
        /**
         * DatePouvoirNotaire
         */
        datePouvoirNotaire: IChampTextBoxDate;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: IChampTextBox;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: IChampTextBox;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: IChampTextBox;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: IChampTextBox;
    }
    interface IDonneesCreditLecture {
        /**
         * IdCreditModifie
         */
        idCreditModifie: string;
        /**
         * MontantCreditModifie
         */
        montantCreditModifie: IChampTextBox;
    }
    interface IFC050ACA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: IChampTextBox;
        /**
         * NombreCreditsAModifierACA
         */
        nombreCreditsAModifierACA: number;
        /**
         * ListeDonneesCreditAModifierACA
         */
        listeDonneesCreditAModifierACA: Array<IDonneesCreditLecture>;
    }
    interface IFCX50ACA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: IChampTextBox;
        /**
         * NombreCreditsAModifierACA
         */
        nombreCreditsAModifierACA: number;
        /**
         * ListeDonneesCreditAModifierACA
         */
        listeDonneesCreditAModifierACA: Array<IDonneesCreditLecture>;
    }
    interface IFC050FSC {
        /**
         * DateTransfertBoSuiveuse
         */
        dateTransfertBoSuiveuse: IChampTextBoxDate;
        /**
         * DateDispositionFondsSuiveuse
         */
        dateDispositionFondsSuiveuse: IChampTextBoxDate;
        /**
         * DateEnvoiNumerisationSuiveuse
         */
        dateEnvoiNumerisationSuiveuse: IChampTextBoxDate;
        /**
         * DateSignatureNotaireSuiveuse
         */
        dateSignatureNotaireSuiveuse: IChampTextBoxDate;
        /**
         * EditionSuiveuse
         */
        editionSuiveuse: IChampComboBox;
        /**
         * Statut1Suiveuse
         */
        statut1Suiveuse: IChampCheckBoxList;
        /**
         * Statut2Suiveuse
         */
        statut2Suiveuse: IChampCheckBoxList;
        /**
         * Statut3Suiveuse
         */
        statut3Suiveuse: IChampCheckBoxList;
        /**
         * NumeroDossierAssocieSuiveuse
         */
        numeroDossierAssocieSuiveuse: IChampTextBox;
        /**
         * CorbeilleWorkflowSuiveuse
         */
        corbeilleWorkflowSuiveuse: IChampComboBox;
        /**
         * CommentaireSuiveuse
         */
        commentaireSuiveuse: IChampTextBox;
    }
    interface IFC050FSI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * Messages
         */
        messages: IChampLabelMultiLine;
        /**
         * NumeroOrias
         */
        numeroOrias: IChampCache;
        /**
         * NombreCreditsAModifier
         */
        nombreCreditsAModifier: IChampCache;
        /**
         * ListeDonneesCreditAModifier
         */
        listeDonneesCreditAModifier: Array<IDonneesCreditLecture>;
    }
    interface IFC055FSI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * Messages
         */
        messages: IChampLabelMultiLine;
        /**
         * NumeroOrias
         */
        numeroOrias: IChampCache;
        /**
         * NombreCreditsAModifier
         */
        nombreCreditsAModifier: IChampCache;
        /**
         * ListeDonneesCreditAModifier
         */
        listeDonneesCreditAModifier: Array<IDonneesCreditLecture>;
    }
    interface IFC104LEC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * ListeDonneesCautionPersonneMorale
         */
        listeDonneesCautionPersonneMorale: Array<IDonneesCautionPersonneMoraleLecture>;
    }
    interface IFCM03DC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IFCM03RE {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IFCM04LA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: IChampTextBox;
    }
    interface IFCM10HS {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeLecture>;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: IChampTextBox;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: IChampTextBox;
        /**
         * DatePourvoirPersoMoraleAssurance
         */
        datePourvoirPersoMoraleAssurance: IChampTextBoxDate;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: IChampTextBox;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17ANL {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17BON {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17CAT {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17CGV {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17CIF {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17FDC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: IChampTextBox;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: IChampTextBox;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: IChampTextBox;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: IChampTextBox;
    }
    interface IFCM17NFX {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: IChampTextBox;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: IChampTextBox;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: IChampTextBox;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: IChampTextBox;
    }
    interface IOutilLecture {
        /**
         * MarqueOutil
         */
        marqueOutil: IChampTextBox;
        /**
         * TypeOutil
         */
        typeOutil: IChampTextBox;
        /**
         * DateLivraisonOutil
         */
        dateLivraisonOutil: IChampTextBoxDate;
        /**
         * SerieOutil
         */
        serieOutil: IChampTextBox;
        /**
         * PrixOutil
         */
        prixOutil: IChampTextBox;
        /**
         * VendIntituleOutil
         */
        vendIntituleOutil: IChampTextBox;
        /**
         * VendCpltIntOutil
         */
        vendCpltIntituleOutil: IChampTextBox;
        /**
         * VendAdrOutil
         */
        vendAdresseOutil: IChampTextBox;
        /**
         * VendCpltAdrOutil
         */
        vendCpltAdresseOutil: IChampTextBox;
        /**
         * VendCPOutil
         */
        vendCPOutil: IChampTextBox;
        /**
         * VendVilleOutil
         */
        vendVilleOutil: IChampTextBox;
        /**
         * AdrOutil
         */
        adresseOutil: IChampTextBox;
        /**
         * CpltAdrOutil
         */
        cpltAdresseOutil: IChampTextBox;
        /**
         * CPOutil
         */
        cPOutil: IChampTextBox;
        /**
         * VilleOutil
         */
        villeOutil: IChampTextBox;
        /**
         * DeplacementOutil
         */
        deplacementOutil: IChampCheckBox;
    }
    interface IFCM17OME {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NombreOutils
         */
        nombreOutils: number;
        /**
         * ListeOutil
         */
        listeOutil: Array<IOutilLecture>;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * VilleTribunal
         */
        villeTribunal: IChampTextBox;
    }
    interface IFCM20CLI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * DateDebutLigneInvestissement
         */
        dateDebutLigneInvestissement: IChampTextBoxDate;
        /**
         * DateFinLigneInvestissement
         */
        dateFinLigneInvestissement: IChampTextBoxDate;
        /**
         * ATauxFixeLigneInvestissement
         */
        aTauxFixeLigneInvestissement: IChampRadioButton;
        /**
         * TauxFixeLigneInvestissement
         */
        tauxFixeLigneInvestissement: IChampTextBox;
        /**
         * TauxRevisableLigneInvestissement
         */
        tauxRevisableLigneInvestissement: IChampTextBox;
        /**
         * ReferenceIndiceLigneInvestissement
         */
        referenceIndiceLigneInvestissement: IChampTextBox;
    }
    interface IFCM28PNO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: IChampTextBox;
        /**
         * DatePouvoirNotaire
         */
        datePouvoirNotaire: IChampTextBoxDate;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: IChampTextBox;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: IChampTextBox;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: IChampTextBox;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: IChampTextBox;
    }
    interface IFCM99LEI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
    }
    interface IFCX28PNO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: IChampTextBox;
        /**
         * DatePouvoirNotaire
         */
        datePouvoirNotaire: IChampTextBoxDate;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: IChampTextBox;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: IChampTextBox;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: IChampTextBox;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: IChampTextBox;
    }
    interface IFZ001SI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * AccordPrincipe
         */
        accordPrincipe: IChampCheckBox;
        /**
         * Rdv
         */
        rdv: IChampCheckBox;
        /**
         * Deroulement
         */
        deroulement: IChampCheckBox;
    }
    interface INOTICES {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * AjoutNotices
         */
        ajoutNotices: IChampCheckBox;
    }
    interface ICreditTauxFixeMaj {
        /**
         * ReferenceIndiceCredit
         */
        referenceIndiceCredit: string;
        /**
         * TauxFixeCredit
         */
        tauxFixeCredit: string;
    }
    interface IOutilMaj {
        /**
         * MarqueOutil
         */
        marqueOutil: string;
        /**
         * TypeOutil
         */
        typeOutil: string;
        /**
         * DateLivraisonOutil
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateLivraisonOutil: string;
        /**
         * SerieOutil
         */
        serieOutil: string;
        /**
         * PrixOutil
         */
        prixOutil: string;
        /**
         * VendIntituleOutil
         */
        vendIntituleOutil: string;
        /**
         * VendCpltIntOutil
         */
        vendCpltIntituleOutil: string;
        /**
         * VendAdrOutil
         */
        vendAdresseOutil: string;
        /**
         * VendCpltAdrOutil
         */
        vendCpltAdresseOutil: string;
        /**
         * VendCPOutil
         */
        vendCPOutil: string;
        /**
         * VendVilleOutil
         */
        vendVilleOutil: string;
        /**
         * AdrOutil
         */
        adresseOutil: string;
        /**
         * CpltAdrOutil
         */
        cpltAdresseOutil: string;
        /**
         * CPOutil
         */
        cPOutil: string;
        /**
         * VilleOutil
         */
        villeOutil: string;
        /**
         * DeplacementOutil
         */
        deplacementOutil: boolean;
    }
    interface ISaisiesComplementaireLecture extends IElementLecture {
        /**
         * FC003DC
         */
        fC003DC: IFC003DC;
        /**
         * FC003PC
         */
        fC003PC: IFC003PC;
        /**
         * FC003RE
         */
        fC003RE: IFC003RE;
        /**
         * FC004LA
         */
        fC004LA: IFC004LA;
        /**
         * FC007ARO
         */
        fC007ARO: IFC007ARO;
        /**
         * FC010CP
         */
        fC010CP: IFC010CP;
        /**
         * FC010HS
         */
        fC010HS: IFC010HS;
        /**
         * FC010HSC
         */
        fC010HSC: IFC010HSC;
        /**
         * FC010LCD
         */
        fC010LCD: IFC010LCD;
        /**
         * FC010LCM
         */
        fC010LCM: IFC010LCM;
        /**
         * FC010LI
         */
        fC010LI: IFC010LI;
        /**
         * FC010LIA
         */
        fC010LIA: IFC010LIA;
        /**
         * FC010LIC
         */
        fC010LIC: IFC010LIC;
        /**
         * FC017ANL
         */
        fC017ANL: IFC017ANL;
        /**
         * FC017BON
         */
        fC017BON: IFC017BON;
        /**
         * FC017CAT
         */
        fC017CAT: IFC017CAT;
        /**
         * FC017CGV
         */
        fC017CGV: IFC017CGV;
        /**
         * FC017CIF
         */
        fC017CIF: IFC017CIF;
        /**
         * FC017SCP
         */
        fC017SCP: IFC017SCP;
        /**
         * FC019AN
         */
        fC019AN: IFC019AN;
        /**
         * FC028PNO
         */
        fC028PNO: IFC028PNO;
        /**
         * FC050ACA
         */
        fC050ACA: IFC050ACA;
        /**
         * FCX50ACA
         */
        fCX50ACA: IFCX50ACA;
        /**
         * FC050FSC
         */
        fC050FSC: IFC050FSC;
        /**
         * FC050FSI
         */
        fC050FSI: IFC050FSI;
        /**
         * FC055FSI
         */
        fC055FSI: IFC055FSI;
        /**
         * FC104LEC
         */
        fC104LEC: IFC104LEC;
        /**
         * FCM03DC
         */
        fCM03DC: IFCM03DC;
        /**
         * FCM03RE
         */
        fCM03RE: IFCM03RE;
        /**
         * FCM04LA
         */
        fCM04LA: IFCM04LA;
        /**
         * FCM10HS
         */
        fCM10HS: IFCM10HS;
        /**
         * FCM10HSC
         */
        fCM10HSC: IFCM10HSC;
        /**
         * FCM17ANL
         */
        fCM17ANL: IFCM17ANL;
        /**
         * FCM17BON
         */
        fCM17BON: IFCM17BON;
        /**
         * FCM17CAT
         */
        fCM17CAT: IFCM17CAT;
        /**
         * FCM17CFG
         */
        fCM17CFG: IFCM17CFG;
        /**
         * FCM17CGV
         */
        fCM17CGV: IFCM17CGV;
        /**
         * FCM17CIF
         */
        fCM17CIF: IFCM17CIF;
        /**
         * FCM17FDC
         */
        fCM17FDC: IFCM17FDC;
        /**
         * FCM17OME
         */
        fCM17OME: IFCM17OME;
        /**
         * FCM20CLI
         */
        fCM20CLI: IFCM20CLI;
        /**
         * FCM28PNO
         */
        fCM28PNO: IFCM28PNO;
        /**
         * FCM99LEI
         */
        fCM99LEI: IFCM99LEI;
        /**
         * FCX28PNO
         */
        fCX28PNO: IFCX28PNO;
        /**
         * FZ001SI
         */
        fZ001SI: IFZ001SI;
        /**
         * NOTICES
         */
        nOTICES: INOTICES;
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: string;
        /**
         * An1AttestationPTZ
         */
        an1AttestationPTZ: boolean;
        /**
         * An2AttestationPTZ
         */
        an2AttestationPTZ: boolean;
        /**
         * An3AttestationPTZ
         */
        an3AttestationPTZ: boolean;
        /**
         * An4AttestationPTZ
         */
        an4AttestationPTZ: boolean;
        /**
         * An5AttestationPTZ
         */
        an5AttestationPTZ: boolean;
        /**
         * An6AttestationPTZ
         */
        an6AttestationPTZ: boolean;
        /**
         * An7AttestationPTZ
         */
        an7AttestationPTZ: boolean;
        /**
         * An8AttestationPTZ
         */
        an8AttestationPTZ: boolean;
        /**
         * An9AttestationPTZ
         */
        an9AttestationPTZ: boolean;
        /**
         * AnXAttestationPTZ
         */
        anXAttestationPTZ: boolean;
        /**
         * AnXIAttestationPTZ
         */
        anXIAttestationPTZ: boolean;
        /**
         * AnIIIAttestationPTZ
         */
        anIIIAttestationPTZ: boolean;
        /**
         * AnIVAttestationPTZ
         */
        anIVAttestationPTZ: boolean;
        /**
         * AnXIVAttestationPTZ
         */
        anXIVAttestationPTZ: boolean;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: boolean;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: boolean;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: boolean;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: boolean;
        /**
         * NomCopropriete
         */
        nomCopropriete: string;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: string;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: string;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: string;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: string;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: string;
        /**
         * EffetCopropriete
         */
        effetCopropriete: string;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeMaj>;
        /**
         * ContenuConditionsSuspensives
         */
        contenuConditionsSuspensives: string;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: boolean;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: string;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: boolean;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: string;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: boolean;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: string;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: boolean;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: string;
        /**
         * DateTransfertBoSuiveuse
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateTransfertBoSuiveuse: string;
        /**
         * DateDispositionFondsSuiveuse
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDispositionFondsSuiveuse: string;
        /**
         * DateEnvoiNumerisationSuiveuse
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEnvoiNumerisationSuiveuse: string;
        /**
         * DateSignatureNotaireSuiveuse
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSignatureNotaireSuiveuse: string;
        /**
         * EditionSuiveuse
         */
        editionSuiveuse: string;
        /**
         * Statut1Suiveuse
         */
        statut1Suiveuse: Array<string>;
        /**
         * Statut2Suiveuse
         */
        statut2Suiveuse: Array<string>;
        /**
         * Statut3Suiveuse
         */
        statut3Suiveuse: Array<string>;
        /**
         * NumeroDossierAssocieSuiveuse
         */
        numeroDossierAssocieSuiveuse: string;
        /**
         * CorbeilleWorkflowSuiveuse
         */
        corbeilleWorkflowSuiveuse: string;
        /**
         * CommentaireSuiveuse
         */
        commentaireSuiveuse: string;
        /**
         * IndexGarantie
         */
        indexGarantie: number;
        /**
         * ExisteAgrementGarantie
         */
        existeAgrementGarantie: boolean;
        /**
         * DateAgrementGarantie
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateAgrementGarantie: string;
        /**
         * PublierGreffeGarantie
         */
        publierGreffeGarantie: boolean;
        /**
         * ConjointsEmprunteursGarantie
         */
        conjointsEmprunteursGarantie: string;
        /**
         * ConjointsCautionsGarantie
         */
        conjointsCautionsGarantie: string;
        /**
         * DateDebutLigneInvestissement
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDebutLigneInvestissement: string;
        /**
         * DateFinLigneInvestissement
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateFinLigneInvestissement: string;
        /**
         * ATauxFixeLigneInvestissement
         */
        aTauxFixeLigneInvestissement: boolean;
        /**
         * TauxFixeLigneInvestissement
         */
        tauxFixeLigneInvestissement: string;
        /**
         * TauxRevisableLigneInvestissement
         */
        tauxRevisableLigneInvestissement: string;
        /**
         * ReferenceIndiceLigneInvestissement
         */
        referenceIndiceLigneInvestissement: string;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: string;
        /**
         * NomMandataire
         */
        nomMandataire: string;
        /**
         * VertuMandataire
         */
        vertuMandataire: string;
        /**
         * NombreOutils
         */
        nombreOutils: number;
        /**
         * AjoutNotices
         */
        ajoutNotices: boolean;
        /**
         * NumeroOrias
         */
        numeroOrias: string;
        /**
         * NombreCreditsAModifierFSI
         */
        nombreCreditsAModifierFSI: number;
        /**
         * ListeDonneesCreditAModifierFSI
         */
        listeDonneesCreditAModifierFSI: Array<IDonneesCreditLecture>;
        /**
         * ListeOutil
         */
        listeOutil: Array<IOutilMaj>;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: string;
        /**
         * LibelleEtablissementPouvoirNotaire
         */
        libelleEtablissementPouvoirNotaire: string;
        /**
         * DatePouvoirNotaire
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        datePouvoirNotaire: string;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: string;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: string;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: string;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: string;
        /**
         * RibPretDevise
         */
        ribPretDevise: string;
        /**
         * IdentifiantProduitPretDevise
         */
        identifiantProduitPretDevise: string;
        /**
         * NumCreditPlanPretDevise
         */
        numeroCreditPlanPretDevise: string;
        /**
         * TypePretDevise
         */
        typePretDevise: string;
        /**
         * IdggiPretDevise
         */
        idggiPretDevise: string;
        /**
         * CdngPretDevise
         */
        cdngPretDevise: string;
        /**
         * FraisEnDevises
         */
        fraisEnDevises: string;
        /**
         * DevisePretDevise
         */
        devisePretDevise: string;
        /**
         * FraisContrePartiePretDevise
         */
        fraisContrePartiePretDevise: string;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: string;
        /**
         * AccordPrincipe
         */
        accordPrincipe: boolean;
        /**
         * Rdv
         */
        rdv: boolean;
        /**
         * Deroulement
         */
        deroulement: boolean;
        /**
         * RaisonCaution
         */
        raisonCaution: string;
        /**
         * RepresentantCaution
         */
        representantCaution: string;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: string;
        /**
         * DatePouvoirCaution
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        datePouvoirCaution: string;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: string;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: string;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: string;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: string;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: string;
        /**
         * DateRCSEmprunteurBailleur
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateRCSEmprunteurBailleur: string;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: string;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: string;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: string;
        /**
         * DatePouvoirEmprunteurPersMorale
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        datePouvoirEmprunteurPersonneMorale: string;
        /**
         * PouvoirEmprunteurPersMorale
         */
        pouvoirEmprunteurPersonneMorale: string;
        /**
         * ListeDonneesCautionPersonneMorale
         */
        listeDonneesCautionPersonneMorale: Array<IDonneesCautionPersonneMoraleMaj>;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: string;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: string;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: string;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: string;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: string;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: string;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: string;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: string;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: string;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: string;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: string;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: string;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: string;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: string;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: string;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: string;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: string;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: string;
        /**
         * DatePourvoirPersoMoraleAssurance
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        datePourvoirPersoMoraleAssurance: string;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: string;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: string;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: string;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: string;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: string;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: string;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: string;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: string;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: string;
        /**
         * VilleTribunal
         */
        villeTribunal: string;
        /**
         * mtoDocInfos
         */
        mtoDocInformation: Array<IAnyType>;
        /**
         * FCM17NFX
         */
        fCM17NFX: IFCM17NFX;
        /**
         * FCM17NFO
         */
        fCM17NFO: IFCM17NFO;
        /**
         * FCM17GBM
         */
        fCM17GBM: IFCM17GBM;
        /**
         * NomenclatureBiens
         */
        nomenclatureBiens: string;
        /**
         * LibelleNomenclatureBiens
         */
        libelleNomenclatureBiens: string;
        /**
         * ListeBienMC
         */
        listeBienMC: Array<IBienMaj>;
        /**
         * NombreBiensMC
         */
        nombreBiensMC: number;
        /**
         * FCM07LAN
         */
        fCM07LAN: IFCM07LAN;
    }
    interface ILabel {
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampTextBox {
        /**
         * Text
         */
        text: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampRadioButton {
        /**
         * Checked1
         */
        checked1: boolean;
        /**
         * Checked2
         */
        checked2: boolean;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle1
         */
        libelle1: string;
        /**
         * Libelle2
         */
        libelle2: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampCheckBox {
        /**
         * Checked
         */
        checked: boolean;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampTextBoxDate {
        /**
         * Text
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        text: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampTextArea {
        /**
         * Text
         */
        text: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampComboBox {
        /**
         * ListValue
         */
        listeValue: Array<string>;
        /**
         * SelectedValue
         */
        selectedValue: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampCheckBoxList {
        /**
         * ListValue
         */
        listeValue: Array<string>;
        /**
         * ListSelectedValue
         */
        listeSelectedValue: Array<string>;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampLabelMultiLine {
        /**
         * ListValue
         */
        listeValue: Array<string>;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampCache {
        /**
         * Value
         */
        value: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IPretDevise {
        /**
         * IdentifiantProduitPretDevise
         */
        identifiantProduitPretDevise: IChampTextBox;
        /**
         * NumCreditPlanPretDevise
         */
        numeroCreditPlanPretDevise: IChampTextBox;
        /**
         * TypePretDevise
         */
        typePretDevise: IChampTextBox;
        /**
         * IdggiPretDevise
         */
        idggiPretDevise: IChampTextBox;
        /**
         * CdngPretDevise
         */
        cdngPretDevise: IChampTextBox;
        /**
         * FraisEnDevises
         */
        fraisEnDevises: IChampTextBox;
        /**
         * DevisePretDevise
         */
        devisePretDevise: IChampTextBox;
        /**
         * LabelInfoGarantieDevise
         */
        labelInformationGarantieDevise: ILabel;
        /**
         * FraisContrePartiePretDevise
         */
        fraisContrePartiePretDevise: IChampTextBox;
    }
    interface IDonneesCautionPersonneMoraleMaj {
        /**
         * RepresCautionPersoMorale
         */
        represCautionPersoMorale: string;
        /**
         * AgissantQualiteCaution
         */
        agissantQualiteCaution: string;
        /**
         * AgissantVertuCaution
         */
        agissantVertuCaution: string;
        /**
         * Agissant3Caution
         */
        agissant3Caution: string;
        /**
         * Agissant4Caution
         */
        agissant4Caution: string;
        /**
         * Agissant5Caution
         */
        agissant5Caution: string;
    }
    interface IDonneesCautionPersonneMoraleLecture {
        /**
         * NomCautionPersoMorale
         */
        nomCautionPersoMorale: IChampTextBox;
        /**
         * RepresCautionPersoMorale
         */
        represCautionPersoMorale: IChampTextBox;
        /**
         * AgissantQualiteCaution
         */
        agissantQualiteCaution: IChampTextBox;
        /**
         * AgissantVertuCaution
         */
        agissantVertuCaution: IChampTextBox;
        /**
         * Agissant3Caution
         */
        agissant3Caution: IChampTextBox;
        /**
         * Agissant4Caution
         */
        agissant4Caution: IChampTextBox;
        /**
         * Agissant5Caution
         */
        agissant5Caution: IChampTextBox;
    }
    interface IFC003PC {
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
    }
    interface IFC010CP {
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
    }
    interface IFC010HSC {
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
    }
    interface IFC010LCD {
        /**
         * RibPretDevise
         */
        ribPretDevise: IChampTextBox;
        /**
         * PretDevise
         */
        pretDevise: Array<IPretDevise>;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: IChampTextBox;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
    }
    interface IFC010LCM {
        /**
         * RibPretDevise
         */
        ribPretDevise: IChampTextBox;
        /**
         * PretDevise
         */
        pretDevise: Array<IPretDevise>;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: IChampTextBox;
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
    }
    interface IFC010LIA {
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
        /**
         * PouvoirEmprunteurPersMorale
         */
        pouvoirEmprunteurPersonneMorale: IChampTextArea;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
    }
    interface IFC010LIC {
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
    }
    interface IFCM10HSC {
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
    }
    interface IFCM17CFG {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
    }
    interface IFCM17NFO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: IChampTextBox;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: IChampTextBox;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: IChampTextBox;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: IChampTextBox;
    }
    interface IBienLecture {
        /**
         * NatureBien
         */
        natureBien: IChampTextBox;
        /**
         * QuantiteBien
         */
        quantiteBien: IChampTextBox;
        /**
         * ValeurBien
         */
        valeurBien: IChampTextBox;
        /**
         * LieuSituationBien
         */
        lieuSituationBien: IChampTextBox;
        /**
         * MarqueBien
         */
        marqueBien: IChampTextBox;
        /**
         * NumSerieBien
         */
        numeroSerieBien: IChampTextBox;
    }
    interface IFCM17GBM {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NombreBiensMC
         */
        nombreBiensMC: number;
        /**
         * NomenclatureBiens
         */
        nomenclatureBiens: IChampComboBox;
        /**
         * ListeBienMC
         */
        listeBienMC: Array<IBienLecture>;
        /**
         * RepresPersMoraleGageBienMeuble
         */
        represPersMoraleGageBienMeuble: IChampTextBox;
        /**
         * AgissantPersMoraleGageBienMeuble
         */
        agissantPersMoraleGageBienMeuble: IChampTextBox;
        /**
         * Vertu1PersMoraleGageBienMeuble
         */
        vertu1PersMoraleGageBienMeuble: IChampTextBox;
        /**
         * Vertu2PersMoraleGageBienMeuble
         */
        vertu2PersMoraleGageBienMeuble: IChampTextBox;
        /**
         * VilleTribunal
         */
        villeTribunal: IChampTextBox;
    }
    interface IBienMaj {
        /**
         * NatureBien
         */
        natureBien: string;
        /**
         * QuantiteBien
         */
        quantiteBien: string;
        /**
         * ValeurBien
         */
        valeurBien: string;
        /**
         * LieuSituationBien
         */
        lieuSituationBien: string;
        /**
         * MarqueBien
         */
        marqueBien: string;
        /**
         * NumSerieBien
         */
        numeroSerieBien: string;
    }
    interface IFCM07LAN {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * TypeEnvoi
         */
        typeEnvoi: IChampComboBox;
    }
}

declare namespace ICRest.Modeles.LireDocActSigElecGen {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IResultatLectureDocumentActeSignature {
        /**
         * FluxDocumentIDN
         */
        fluxDocumentIDN: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.OffrePretIndustrialisee {
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: ICRest.Modeles.IAnomalieLecture[];
    }
    interface IDocumentOffreIndustrialiseeLecture extends IElementLecture {
        /**
         * CodeEntiteFonctionnelle
         */
        codeEntiteFonctionnelle: string;
        /**
         * IdEntiteFonctionnelle
         */
        idEntiteFonctionnelle: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * LibelleDocument
         */
        libelleDocument: string;
        /**
         * LibelleAide
         */
        libelleAide: string;
        /**
         * CodeExterneDocument
         */
        codeExterneDocument: string;
        /**
         * IndicateurCasEcheant
         */
        indicateurCasEcheant: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Origine
         */
        origine: string;
        /**
         * DateCreation
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * DateModification
         * Type date au format yyyy-MM-dd
         */
        dateModification: string;
        /**
         * EtatDocument
         */
        etatDocument: string;
        /**
         * DocumentCommun
         */
        documentCommun: string;
        /**
         * Obligatoire
         */
        obligatoire: boolean;
        /**
         * Destinataire
         */
        destinataire: string;
        /**
         * UrlPDF
         */
        urlPDF: string;
        /**
         * EstDocNEO
         */
        estDocNEO: boolean;
        /**
         * EstDocOffre
         */
        estDocOffre: boolean;
    }
    interface IOffrePretIndustrialiseeLecture extends IElementLecture {
        /**
         * EditionEligible
         */
        editionEligible: boolean;
        /**
         * EditionEligibleEnAgence
         */
        editionEligibleEnAgence: boolean;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * DossierGdeACree
         */
        dossierGdeACree: boolean;
        /**
         * EtatDossierEdition
         */
        etatDossierEdition: string;
        /**
         * NbEnveloppesLigne1
         */
        nombreEnveloppesLigne1: number;
        /**
         * NbEnveloppesLigne2
         */
        nombreEnveloppesLigne2: number;
        /**
         * NbEnveloppesLigne3
         */
        nombreEnveloppesLigne3: number;
        /**
         * LibEnveloppeLigne1
         */
        libelleEnveloppeLigne1: string;
        /**
         * LibEnveloppeLigne2
         */
        libelleEnveloppeLigne2: string;
        /**
         * LibEnveloppeLigne3
         */
        libelleEnveloppeLigne3: string;
        /**
         * NbEnveloppesLigne1NO
         */
        nombreEnveloppesLigne1NO: number;
        /**
         * NbEnveloppesLigne2NO
         */
        nombreEnveloppesLigne2NO: number;
        /**
         * NbEnveloppesLigne3NO
         */
        nombreEnveloppesLigne3NO: number;
        /**
         * LibEnveloppeLigne1NO
         */
        libelleEnveloppeLigne1NO: string;
        /**
         * LibEnveloppeLigne2NO
         */
        libelleEnveloppeLigne2NO: string;
        /**
         * LibEnveloppeLigne3NO
         */
        libelleEnveloppeLigne3NO: string;
        /**
         * NbEnveloppesLigne1CA
         */
        nombreEnveloppesLigne1CA: number;
        /**
         * NbEnveloppesLigne2CA
         */
        nombreEnveloppesLigne2CA: number;
        /**
         * NbEnveloppesLigne3CA
         */
        nombreEnveloppesLigne3CA: number;
        /**
         * LibEnveloppeLigne1CA
         */
        libelleEnveloppeLigne1CA: string;
        /**
         * LibEnveloppeLigne2CA
         */
        libelleEnveloppeLigne2CA: string;
        /**
         * LibEnveloppeLigne3CA
         */
        libelleEnveloppeLigne3CA: string;
        /**
         * LibAbregeCaisse
         */
        libelleAbregeCaisse: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * EdsEdition
         */
        eDSEdition: string;
        /**
         * ValidationImplicite
         */
        validationImplicite: boolean;
        /**
         * DocumentGlobalPDF
         */
        documentGlobalPDF: string;
        /**
         * ListeDocIndusLecture
         */
        listeDocIndusLecture: IDocumentOffreIndustrialiseeLecture[];
    }
}

declare namespace ICRest.Services.RemiseOffre {
    interface IEntreeRemettreOffrePret {
        /**
         * IdntDoss
         */
        idDossier: string;
        /**
         * DateRemiseEmprunteur
         * Type date au format yyyy-MM-dd
         */
        dateRemiseEmprunteur: string;
        /**
         * bForcerVerifDateRemise
         */
        forcerVerifDateRemise: boolean;
        /**
         * bForcerVerifGlobale
         */
        forcerVerifGlobale: boolean;
        /**
         * bAlerteBloquante
         */
        alerteBloquante: boolean;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IRetourRemettreOffrePret {
        /**
         * AnomaliesPassageEnGestionLecture
         */
        anomaliesPassageEnGestionLecture: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlVrifModifDateRemise
         */
        anomaliesControleVrifModifDateRemise: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlVrifGlobale
         */
        anomaliesControleVrifGlobale: Array<IAnomalieLecture>;
        /**
         * Anomalies
         */
        anomalies: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.SignatureElectronique {
    interface IEntreeSignatureElectronique {
        /**
         * sIdntDoss
         */
        idDossier: string;
        /**
         * CodeSignature
         */
        codeSignature: number;
    }
    interface IInformationSignataireOffre {
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationSignataireDemandeDeCreditAgence {
        /**
         * DateSignatureDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateSignatureDemandeDeCredit: string;
        /**
         * DateMiseADispoDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateMiseADispoDemandeDeCredit: string;
    }
    interface IInformationSignataireGenerique {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * InformationsSignataireOffre
         */
        informationsSignataireOffre: IInformationSignataireOffre;
        /**
         * InformationSignataireDemandeDeCreditAgence
         */
        informationSignataireDemandeDeCreditAgence: IInformationSignataireDemandeDeCreditAgence;
    }
    interface IInformationDossierSignatureOffre {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierDemandeDeCreditAgence {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierSignatureGenerique {
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataireGenerique>;
        /**
         * InformationsSignatureOffre
         */
        informationsSignatureOffre: IInformationDossierSignatureOffre;
        /**
         * InformationsDemandeDeCreditAgence
         */
        informationsDemandeDeCreditAgence: IInformationDossierDemandeDeCreditAgence;
    }
    interface ISignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignatureGenerique;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface IResultatTraitementSignature {
        /**
         * SignatureElectroniqueLecture
         */
        signatureElectroniqueLecture: ISignatureElectroniqueLecture;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.ValActeSignEleGene {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IEntreeSignatureElectronique {
        /**
         * sIdntDoss
         */
        idDossier: string;
        /**
         * CodeSignature
         */
        codeSignature: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IInformationSignataireOffre {
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationSignataireDemandeDeCreditAgence {
        /**
         * DateSignatureDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateSignatureDemandeDeCredit: string;
        /**
         * DateMiseADispoDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateMiseADispoDemandeDeCredit: string;
    }
    interface IInformationSignataireGenerique {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * InformationsSignataireOffre
         */
        informationsSignataireOffre: IInformationSignataireOffre;
        /**
         * InformationSignataireDemandeDeCreditAgence
         */
        informationSignataireDemandeDeCreditAgence: IInformationSignataireDemandeDeCreditAgence;
    }
    interface IInformationDossierSignatureOffre {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierDemandeDeCreditAgence {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierSignatureGenerique {
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataireGenerique>;
        /**
         * InformationsSignatureOffre
         */
        informationsSignatureOffre: IInformationDossierSignatureOffre;
        /**
         * InformationsDemandeDeCreditAgence
         */
        informationsDemandeDeCreditAgence: IInformationDossierDemandeDeCreditAgence;
    }
    interface IDocumentSignatureElectroniqueLecture extends IElementLecture {
        /**
         * IdentifiantDocument
         */
        identifiantDocument: string;
        /**
         * CodeTypeEntite
         */
        codeTypeEntite: string;
        /**
         * IdentifiantIDN
         */
        identifiantIDN: string;
        /**
         * IdentifiantComplet
         */
        identifiantComplet: string;
        /**
         * NomDocument
         */
        nomDocument: string;
        /**
         * RefDocProd
         */
        referenceDocProd: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Origine
         */
        origine: string;
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * FluxBinaire
         */
        fluxBinaire: string;
        /**
         * EstPresent
         */
        estPresent: boolean;
        /**
         * IndicePlan
         */
        indicePlan: number;
        /**
         * IndiceCredit
         */
        indiceCredit: number;
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * LibelleEntiteRattachement
         */
        libelleEntiteRattachement: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Obligatoire
         */
        obligatoire: boolean;
        /**
         * estDocNeo
         */
        estDocNEO: boolean;
        /**
         * EstDocOffre
         */
        estDocOffre: boolean;
    }
    interface ISignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignatureGenerique;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface IInformationSignataire {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationDossierSignature {
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataire>;
    }
    interface IOffreSignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignature;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface IResultatOffreSignatureElectronique {
        /**
         * Action
         */
        action: string;
        /**
         * Code
         */
        code: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * IdentiteActe
         */
        identiteActe: string;
        /**
         * SignatureElectroniqueLecture
         */
        signatureElectroniqueLecture: ISignatureElectroniqueLecture;
        /**
         * OffreSignatureElectroniqueLecture
         */
        offreSignatureElectroniqueLecture: IOffreSignatureElectroniqueLecture;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Services.EditionOffre {
    interface IEditionOffreService {
        /**
         * Liste tous les documents disponibles pour l'offre
         * typeListe:
         *      0 dossier
         *      1 Offre
         *      3 Fiche suiveuse
         */
        listerDocuments(idDossier: string, typeListe: number, idProposition: string): ng.IPromise<ICRest.Modeles.EditionOffre.IResultatListerDocuments>;
    }
    class EditionOffreService implements IEditionOffreService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        /**
         * Liste tous les documents disponibles pour l'offre papier
         * typeListe:
         *      0 dossier
         *      1 Offre
         *      3 Fiche suiveuse
         */
        listerDocuments(idDossier: string, typeListe: number, idProposition: string): ng.IPromise<ICRest.Modeles.EditionOffre.IResultatListerDocuments>;
    }
}

declare namespace ICRest.Services.Industrialisation {
    interface IIndustrialisationService {
        lireOffrePretIndustrialisee(idDossier: string): ng.IPromise<ICRest.Modeles.OffrePretIndustrialisee.IOffrePretIndustrialiseeLecture>;
        creerDossEditionGde(idDossier: string, listeIdws: string[]): ng.IPromise<ICRest.Modeles.CreerDossierIndus.IResultatOffrePretIndustrialisee>;
        ajouterDocumentsDansDossierEdition(idDossier: string, listeDoc: ICRest.Modeles.AjouterDocDossierIndus.IDocumentOffreIndustrialiseeMaj[]): ng.IPromise<ICRest.Modeles.AjouterDocDossierIndus.IResultatAjoutDocumentPretIndustrialisee>;
        annulerDossierEditio(idDossier: string): ng.IPromise<ICRest.Modeles.AnnulerDossierIndus.IResultatOffrePretIndustrialisee>;
    }
    /**
     * Classe pour gérer l'offre de prêt industrialisée
     */
    class IndustrialisationService implements IIndustrialisationService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        /**
         * Lecture de l'offre de prêt industrialisée (i.e. liste des documents du dossier industrialisé)
         *
         * @param idDossier identifiant du dossier en instruction
         */
        lireOffrePretIndustrialisee(idDossier: string): ng.IPromise<ICRest.Modeles.OffrePretIndustrialisee.IOffrePretIndustrialiseeLecture>;
        /**
         * Créer du dossier d'industrialisation
         *
         * @param idDossier identifiant du dossier en instruction
         * @param listeIdws liste des identifiants des documents à créer
         */
        creerDossEditionGde(idDossier: string, listeIdws: string[]): ng.IPromise<ICRest.Modeles.CreerDossierIndus.IResultatOffrePretIndustrialisee>;
        /**
         *  Ajout des documents dans le dossier industrialisé
         *
         * @param idDossier identifiant du dossier en instruction
         * @param listeDoc liste des documents à envoyer
         */
        ajouterDocumentsDansDossierEdition(idDossier: string, listeDoc: ICRest.Modeles.AjouterDocDossierIndus.IDocumentOffreIndustrialiseeMaj[]): ng.IPromise<ICRest.Modeles.AjouterDocDossierIndus.IResultatAjoutDocumentPretIndustrialisee>;
        /**
         * Annulation du dossier industrialisé
         *
         * @param idDossier identifiant du dossier en instruction
         */
        annulerDossierEditio(idDossier: string): ng.IPromise<ICRest.Modeles.AnnulerDossierIndus.IResultatOffrePretIndustrialisee>;
    }
}

declare namespace ICRest.Services.RemiseOffre {
    /**
     * Interface pour la remise de l'offre
     */
    interface IRemiseOffreService {
        /**
         * Méthode pour la remise de l'offre ou contrat
         * @param idDossier identifiant du dossier en instruction
         * @param dateRemise date de remise de l'offre/contrat
         * @param forcageVerifDateremise booléen pour forcer la vérification de la date de remise
         * @param forcageVerifGlobale booléen pour forcer la vérification globale
         */
        remettreOffre(idDossier: string, dateRemise: string, forcageVerifDateremise: boolean, forcageVerifGlobale: boolean): ng.IPromise<IRetourRemettreOffrePret>;
    }
    /**
     * Implémentation de l'interface pour la remise de l'offre
     */
    class RemiseOffreService implements IRemiseOffreService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        /**
         * Méthode pour la remise de l'offre ou contrat
         * @param idDossier identifiant du dossier en instruction
         * @param dateRemise date de remise de l'offre/contrat
         * @param forcageVerifDateremise booléen pour forcer la vérification de la date de remise
         * @param forcageVerifGlobale booléen pour forcer la vérification globale
         */
        remettreOffre(idDossier: string, dateRemise: string, forcageVerifDateremise: boolean, forcageVerifGlobal: boolean): ng.IPromise<IRetourRemettreOffrePret>;
    }
}

declare namespace ICRest.Services.SaisiesComplementaires {
    interface ISaisiesComplementairesService {
        /**
         * Appelle la ressource REST qui recupère les saisies complémentaires
         * @param idDossier
         * @param idTheoriqueDocument
         */
        lireSaisiesComplementaires(idDossier: string, idTheoriqueDocument: string): ng.IPromise<ICRest.Modeles.SaisiesComplementaires.ISaisiesComplementaireLecture>;
    }
    class SaisiesComplementairesService implements ISaisiesComplementairesService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        /**
         * Méthode pour lire des éventuelles données complémentaires à donner pour l'édition d'un document
         *
         * @param idDossier identifiant du dossier en instruction
         * @param idTheoriqueDocument identifiant théorique du document (i.e. cett identifiant peut être différent du code affiché du document)
         */
        lireSaisiesComplementaires(idDossier: string, idTheoriqueDocument: string): ng.IPromise<ICRest.Modeles.SaisiesComplementaires.ISaisiesComplementaireLecture>;
    }
}

declare namespace ICRest.Services.SignatureElectronique {
    interface ISignatureElectroniqueService {
        /**
         * Interface pour la méthode de lecture de l'acte de signature électronique
         *
         * @param idDossier identifiant du dossier en instruction
         */
        lireActeSignatureElectronique(idDossier: string): ng.IPromise<ICRest.Modeles.SignatureElectronique.IOffreSignatureElectroniqueLecture>;
        /**
         * Interface pour la méthode pour alimenter le dossier IDN
         *
         * @param idDossier identifiant du dossier en instruction
         * @param codeSignature code signature
         * @param documents liste des documents à mettre à jour
         */
        alimDossSignElecGene(idDossier: string, codeSignature: number, documents: ICRest.Modeles.AlimDossSignElecgGene.IDocumentSignatureElectroniqueMaj[]): ng.IPromise<ICRest.Modeles.AlimDossSignElecgGene.IResultatOffreSignatureElectronique>;
        /**
         * Interface pour la méthode pour lire un document Idn
         *
         * @param identifiantIdn identifiant du document Idn
         */
        lireDocActSigElecGen(identifiantIdn: string): ng.IPromise<ICRest.Modeles.LireDocActSigElecGen.IResultatLectureDocumentActeSignature>;
        /**
         * Interface pour la validation de la signature électronique
         *
         * @param idDossier identifiant du dossier en instruction
         * @param codeSignature code du type de signature
         */
        valActSigneElecGene(idDossier: string, codeSignature: number): ng.IPromise<ICRest.Modeles.ValActeSignEleGene.IResultatOffreSignatureElectronique>;
        /**
         * Interface pour le lancement du processus de la signature électronique
         *
         * @param idDossier identifiant du dossier en instruction
         * @param codeSignature code du type de signature
         */
        lancerProcessusSignElecGene(idDossier: string, codeSignature: number): ng.IPromise<ICRest.Modeles.ValActeSignEleGene.IResultatOffreSignatureElectronique>;
        /**
         *  Interface pour l'annulation du dossier de la signature électronique
         *
         * @param idDossier
         * @param codeSignature
         * @param motifAnnulation
         */
        annulerActSigneElecGen(idDossier: string, codeSignature: number, motifAnnulation: string): ng.IPromise<ICRest.Modeles.AnnulerActSigneElecGen.IResultatOffreSignatureElectronique>;
        /**
         * Interface pour la méthode de lecture d'un acte de signature électronique
         *
         * @param idDossier identifiant du dossier en instruction
         * @param codeSignature code signature
         */
        lireActSigElecGen(idDossier: string, codeSignature: number): ng.IPromise<ICRest.Modeles.SignatureElectroniqueGene.IResultatOffreSignatureElectronique>;
        /**
         * Interface pour le traitement retour de la SAG
         * @param idDossier identifiant du dossier en instruction
         * @param codeSignature code signature
         */
        traiterRetourSignSAG(idDossier: string, codeSignature: number): ng.IPromise<ICRest.Modeles.SignatureElectronique.IResultatTraitementSignature>;
    }
    class SignatureElectroniqueService implements ISignatureElectroniqueService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        /**
         * Méthode de lecture de l'acte de signature électronique
         * @param idDossier identifiant du dossier en instruction
         */
        lireActeSignatureElectronique(idDossier: string): ng.IPromise<ICRest.Modeles.SignatureElectronique.IOffreSignatureElectroniqueLecture>;
        /**
         * Méthode pour alimenter le dossier IDN
         *
         * @param idDossier identifiant du dossier en instruction
         * @param codeSignature code signature
         * @param documents liste des documents à mettre à jour
         */
        alimDossSignElecGene(idDossier: string, codeSignature: number, documents: ICRest.Modeles.AlimDossSignElecgGene.IDocumentSignatureElectroniqueMaj[]): ng.IPromise<ICRest.Modeles.AlimDossSignElecgGene.IResultatOffreSignatureElectronique>;
        /**
         * Méthode pour lire un document Idn
         *
         * @param identifiantIdn identifiant du document Idn
         */
        lireDocActSigElecGen(identifiantIdn: string): ng.IPromise<ICRest.Modeles.LireDocActSigElecGen.IResultatLectureDocumentActeSignature>;
        /**
         * Méthode pour la validation de la signature électronique
         *
         * @param acte données d'entrée pour la signature électronique
         */
        valActSigneElecGene(idDossier: string, codeSignature: number): ng.IPromise<ICRest.Modeles.ValActeSignEleGene.IResultatOffreSignatureElectronique>;
        /**
         * Méthode pour la validation de la signature électronique
         *
         * @param acte données d'entrée pour la signature électronique
         */
        lancerProcessusSignElecGene(idDossier: string, codeSignature: number): ng.IPromise<ICRest.Modeles.ValActeSignEleGene.IResultatOffreSignatureElectronique>;
        /**
         *  Interface pour l'annulation du dossier de la signature électronique
         *
         * @param idDossier identifiant du dossier en instruction
         * @param codeSignature code du type de signature
         * @param motifAnnulation motif de l'annulation
         */
        annulerActSigneElecGen(idDossier: string, codeSignature: number, motifAnnulation: string): ng.IPromise<ICRest.Modeles.AnnulerActSigneElecGen.IResultatOffreSignatureElectronique>;
        /**
         * Interface pour la méthode pour lire un document Idn
         *
         * @param idDossier identifiant du dossier en instruction
         * @param codeSignature code signature
         */
        lireActSigElecGen(idDossier: string, codeSignature: number): ng.IPromise<ICRest.Modeles.SignatureElectroniqueGene.IResultatOffreSignatureElectronique>;
        /**
         * Méthode pour le traitement retour de la SAG
         * @param idDossier identifiant du dossier en instruction
         * @param codeSignature code signature
         */
        traiterRetourSignSAG(idDossier: string, codeSignature: number): ng.IPromise<ICRest.Modeles.SignatureElectronique.IResultatTraitementSignature>;
    }
}

declare namespace ICRest.CreditParametre.Models.AdrFonctionnement {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScAdrParamFonctionnement extends IScElement {
        /**
         * Nbfmvp_ValdPrflRisq
         */
        validiteProfilRisque: number;
        /**
         * Affmco_CodeAffcCott
         */
        codeAffcCotisation: number;
        /**
         * Affmcr_CodeAffcCodeRepn
         */
        codeAffcCodeRepn: number;
        /**
         * Njfmra_DurValdPrflBdf
         */
        dureeValiditeProfilBDF: number;
        /**
         * Cdfmmb_ExstModuApplBdf
         */
        existeModulableApplicationBDF: number;
        /**
         * Nbfmra_RaDelaiMaxFinCrdt
         */
        raDelaiMaximumFinCredit: number;
        /**
         * Tsfmra_RaPoucMaxCrd
         */
        raPourcentageMaximumCRD: number;
        /**
         * Npfmra_RaRatioMaxDur
         */
        raRatioMaximumDuree: number;
        /**
         * Cdfmdv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfpcl_CodeAutrAccesClnt
         */
        codeAutreAccessoireClient: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.AdrOppsition {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScAdrOpposition extends IScElement {
        /**
         * Cdfmop_CodeOppo
         */
        codeOpposition: string;
        /**
         * Lbfmop_LiblOppo
         */
        libelleOpposition: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.Beneficiaire {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScBeneficiaire extends IScElement {
        /**
         * Cdfpim_CodeBenf
         */
        codeBeneficiaire: string;
        /**
         * Ddfcap_DateDebuVald
         * Type date au format yyyy-MM-dd
         */
        dateDebutValidite: string;
        /**
         * Dffcap_DateFinVald
         * Type date au format yyyy-MM-dd
         */
        dateFinValidite: string;
        /**
         * Lbfpne_LiblIhm
         */
        libelleIhm: string;
        /**
         * Lbfpfe_LiblFise
         */
        libelleFise: string;
        /**
         * Cdfper_EstRestEdit
         */
        estRestantEdit: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.CategorieEmprunteur {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScCategorieEmprunteur extends IScElement {
        /**
         * Cdfcke_CodeCatgEmpr
         */
        codeCategorieEmprunt: string;
        /**
         * Ctfcma_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * Lcfcke_LiblCrtCatgEmpr
         */
        libelleCreationCategorieEmprunt: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Lbfcke_LiblCatgEmpr
         */
        libelleCategorieEmprunteur: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.ChargerConventionAssurance {
    interface IAnyType {
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateTraitement: string;
        identifiantConvention: string;
        codeEtablissement: number;
    }
    interface IScElement {
    }
    interface IScConventionResume extends IScElement {
        /**
         * Idfcco_IdntConv
         */
        idConvention: string;
        /**
         * Nufcco_NumrExtnConv
         */
        numeroExterneConvention: string;
        /**
         * Idit_IdntIntv
         */
        idIntervenant: string;
        /**
         * Llfcco_LiblLongConv
         */
        libelleLongConvention: string;
        /**
         * Lcfcco_LiblCrtConv
         */
        libelleCreationConvention: string;
        /**
         * Lbfcco_CommtConv
         */
        commentaireConvention: string;
        /**
         * Lbfcc1_CommtConv
         */
        commentaireConvention1: string;
        /**
         * Cdtg_CodeNatrCaut
         */
        codeNatureCaution: string;
        /**
         * Ddfcco_DatePrsDeffConv
         * Type date au format yyyy-MM-dd
         */
        datePresenceDeffConvention: string;
        /**
         * Dffcco_DateFinDeffConv
         * Type date au format yyyy-MM-dd
         */
        dateFinDeffConvention: string;
        /**
         * Nrfcas_ReglDateDeff
         */
        regleDateDeff: string;
        /**
         * Cnfcga_ModeDexp
         */
        modeDexp: number;
        /**
         * Mpfcas_MtMinCrdtPourConv
         */
        montantMinimumCreditPourConvention: number;
        /**
         * Msfcas_MtMaxCrdtPourConv
         */
        montantMaximumCreditPourConvention: number;
        /**
         * Npfcxa_NbPerdMinCrdt
         */
        nombrePeriodeMinimumCredit: number;
        /**
         * Pefcca_PerdicDexpConv
         */
        periodiciteDexpConvention: number;
        /**
         * Npfcma_NbPerdMaxCrdt
         */
        nombrePeriodeMaximumCredit: number;
        /**
         * Tpfcga_QuotMinParBenf
         */
        quotientMinimumParBeneficiaire: number;
        /**
         * Tsfcga_QuotMaxParBenf
         */
        quotientMaximumParBeneficiaire: number;
        /**
         * Txfcga_PasQuot
         */
        pasQuotient: number;
        /**
         * Mpfcga_MtMinGarnParTete
         */
        montantMinimumGarantieParTete: number;
        /**
         * Msfcga_MtMaxGarnParTete
         */
        montantMaximumGarantieParTete: number;
        /**
         * Mxfcga_PasMtGarn
         */
        pasMontantGarantie: number;
        /**
         * Cnfcpc_NatrPrsChrg
         */
        naturePresenceCharge: number;
        /**
         * Ptfcra_PerdicRecv
         */
        periodiciteRecouvrement: number;
        /**
         * Cdfcdr_CodeDetrDateRecv
         */
        codeDetrDateRecouvrement: number;
        /**
         * Npfcre_DelaiRver
         */
        delaiRver: number;
        /**
         * Cdfccm_CodeCommIntvExt
         */
        codeCommissionIntervenantExterieur: number;
        /**
         * Ttfcas_TxCommCais
         */
        tauxCommissionCaisse: number;
        /**
         * Ctfcar_CodeTypeAsstComm
         */
        codeTypeAssietteCommission: number;
        /**
         * Cdfcrr_CodeModlReglComm
         */
        codeModeleRegleCommission: number;
        /**
         * Cdfgga_CodeTierGarn
         */
        codeTiersGarantie: number;
        /**
         * Cdfgto_CodeTypeDobjAutr
         */
        codeTypeDobjAutre: number;
        /**
         * Cnfcbo_CodeNatrBonf
         */
        codeNatureBonification: number;
        /**
         * Cdfdrg_CodeModeRegl
         */
        codeModeRegle: string;
        /**
         * Mtfcge_MtMaxEncr
         */
        montantMaximumEncours: number;
        /**
         * Npfcmp_NbPerdMaxPf
         */
        nombrePeriodeMaximumPf: number;
        /**
         * Npfcmt_NbPerdMaxDt
         */
        nombrePeriodeMaximumDt: number;
        /**
         * Npfcmd_NbPerdMaxDa
         */
        nombrePeriodeMaximumDa: number;
        /**
         * Npfcmm_NbPerdMaxAm
         */
        nombrePeriodeMaximumAm: number;
        /**
         * Cdfcoc_CodeRestt
         */
        codeRestant: string;
        /**
         * Mpfena_MtPlfnPourDelg
         */
        montantPlafondPourDelegation: number;
        /**
         * Ctfctc_TypeConv
         */
        typeConvention: string;
        /**
         * Nbfcae_AgeMaxiReqsParConv
         */
        ageMaximumRequisParConvention: number;
        /**
         * Nbfcai_AgeMiniReqsParConv
         */
        ageMinimumRequisParConvention: number;
        /**
         * Ctfcea_TypeDacc
         */
        typeDacc: string;
        /**
         * Cdfcdv_CodeDevs
         */
        codeDevise: string;
        /**
         * Llfcc3_LiblLongConvJurd
         */
        libelleLongConventionJuridique: string;
        /**
         * Ctfcaa_TypeDass
         */
        typeDass: string;
        /**
         * Cdfcex_CodeDergAge
         */
        codeDerogationAge: number;
        /**
         * EstExterne
         */
        estExterne: boolean;
        /**
         * EstConventionSaccef
         */
        estConventionSaccef: boolean;
        /**
         * EstConventionFEI
         */
        estConventionFEI: boolean;
        /**
         * EstConventionOSEOEtudiant
         */
        estConventionOSEOEtudiant: boolean;
        /**
         * EstConventionSIAGI
         */
        estConventionSIAGI: boolean;
        /**
         * EstConventionCFG
         */
        estConventionCFG: boolean;
        /**
         * EstAERAS
         */
        estAERAS: boolean;
        /**
         * EstCautionMutuelle
         */
        estCautionMutuelle: boolean;
        /**
         * EstCautionMutuelle_ClausesEditiquePieco
         */
        estCautionMutuelle_ClausesEditiquePieco: boolean;
        /**
         * EstCreditLogementInitio
         */
        estCreditLogementInitio: boolean;
        /**
         * EstCreditLogement
         */
        estCreditLogement: boolean;
        /**
         * EstInterne
         */
        estInterne: boolean;
        /**
         * EstTAEA
         */
        estTAEA: boolean;
        /**
         * EstSFGAS
         */
        estSFGAS: boolean;
        /**
         * LibCompAssr
         */
        libelleCompAssurance: string;
    }
    interface IScCotisationCout extends IScElement {
        /**
         * MtMinRecv
         */
        montantMinimumRecouvrement: number;
        /**
         * MtMinAccs
         */
        montantMinimumAccessoire: number;
        /**
         * MtMaxAccs
         */
        montantMaximumAccessoire: number;
        /**
         * ValrCons
         */
        valeurConsolide: number;
    }
    interface IScCotisationCoutMontantListe extends IScCotisationCout {
        /**
         * ListeValeur
         */
        listeValeur: Array<number>;
        /**
         * MontantReduit
         */
        montantReduit: number;
        /**
         * MontantMajore
         */
        montantMajore: number;
    }
    interface IScCotisationCoutMontantIntervalle extends IScCotisationCout {
        /**
         * Min
         */
        minimum: number;
        /**
         * Max
         */
        maximum: number;
        /**
         * Pas
         */
        pas: number;
        /**
         * Defaut
         */
        defaut: number;
    }
    interface IScCotisationCoutQuotiteListe extends IScCotisationCoutQuotite {
        /**
         * ListeQuotite
         */
        listeQuotite: Array<number>;
        /**
         * TauxReduit
         */
        tauxReduit: number;
        /**
         * TauxMajore
         */
        tauxMajore: number;
        /**
         * TauxNormal
         */
        tauxNormal: number;
    }
    interface IScCotisationCoutQuotiteIntervalle extends IScCotisationCoutQuotite {
        /**
         * Min
         */
        minimum: number;
        /**
         * Max
         */
        maximum: number;
        /**
         * Pas
         */
        pas: number;
        /**
         * Defaut
         */
        defaut: number;
    }
    interface IScCotisationCoutQuotite extends IScCotisationCout {
        /**
         * TypeDass
         */
        typeDass: number;
        /**
         * TxPourLesPersAgs
         */
        tauxPourLesPersonneAge: number;
        /**
         * MtMaxiAssAccs
         */
        montantMaximumAssuranceAccessoire: number;
    }
    interface IScTrancheMontant {
        /**
         * Nufctr_NumrTrch
         */
        numeroTranche: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * CotCout
         */
        cotCout: IScCotisationCout;
    }
    interface IScCotisation extends IScElement {
        /**
         * Ctfcat_SousTypeAcc
         */
        sousTypeAccessoire: string;
        /**
         * Ctfcac_TypeDaccCtfc
         */
        typeDaccCtfc: string;
        /**
         * Cdfcao_ReprsCarObgtFaclCots
         */
        repriseCarObligatoireFacultatifCotisation: number;
        /**
         * Ctfcca_ModeCalcLacc
         */
        modeCalculLacc: number;
        /**
         * Ddfcap_DateDebuDapp
         * Type date au format yyyy-MM-dd
         */
        dateDebutDapp: string;
        /**
         * Dffcap_DateFinDapp
         * Type date au format yyyy-MM-dd
         */
        dateFinDapp: string;
        /**
         * Nrfcmr_ReglDappLacc
         */
        regleDappLacc: string;
        /**
         * Nrfcda_ReglDateDebuDappLacc
         */
        regleDateDebutDappLacc: string;
        /**
         * Nrfcpa_ReglEvnmDeclr
         */
        regleEvenementDeclaration: string;
        /**
         * Pefcac_CodePerdicAppli
         */
        codePeriodiciteApplication: number;
        /**
         * Cdfceh_CodeRecvAccs
         */
        codeRecouvrementAccessoire: number;
        /**
         * Ctfcia_CodeTypeAppliAccs
         */
        codeTypeApplicationAccessoire: number;
        /**
         * Npfcap_NbPerdDappLacc
         */
        nombrePeriodeDappLacc: number;
        /**
         * Pefcap_PerdicDappLacc
         */
        periodiciteDappLacc: number;
        /**
         * Nrfcap_ReglDappAprd
         */
        regleDappAprd: string;
        /**
         * Cdfcat_CodeCalcTeg
         */
        codeCalculteg: number;
        /**
         * Cdfcrb_CodeAccsRembFinCrdt
         */
        codeAccessoireRemboursementFinCredit: boolean;
        /**
         * Cdfcap_CodeApplEchn
         */
        codeApplicationEcheance: boolean;
        /**
         * Cdfctx_CodeModeCalcTx
         */
        codeModeCalculTaux: number;
        /**
         * Nrfccr_ReglCalcLacc
         */
        regleCalculLacc: string;
        /**
         * InfosTxCots
         */
        informationTauxCotisation: Array<number>;
        /**
         * InfosMttCots
         */
        informationMontantCotisation: Array<number>;
        /**
         * Tsfcff_FrctFinnMaxiLacc
         */
        fractionFinancierMaximumLacc: number;
        /**
         * Ctfcai_CompatInstr
         */
        compatibiliteInstruction: boolean;
        /**
         * Ctfcaw_CompatAvnn
         */
        compatibiliteAvenant: boolean;
        /**
         * Ctfcfd_FinnAccCrdt
         */
        financierAccessoireCredit: boolean;
        /**
         * Cifcdb_RetrCodeIndicDerg
         */
        retardCodeIndiceDerogation: number;
        /**
         * Cifcip_CodeIntgPlanFinn
         */
        codeIntegrationPlanFinancier: number;
        /**
         * ListCoutCots
         */
        listeCoutCotisation: Array<IScCotisationCout>;
        /**
         * ListTrncMt
         */
        listeTrancheMontant: Array<IScTrancheMontant>;
    }
    interface IScCotisationPeriode extends IScCotisation {
        /**
         * Nufctr_NumTrch
         */
        numeroTranche: number;
        /**
         * Npfcap_DrPrd
         */
        drProduit: number;
        /**
         * Pefcap_PrdctPrd
         */
        producteurProduit: number;
        /**
         * Npfcel_DrEtlmnt
         */
        drElement: number;
        /**
         * Pefcde_PrdctEtlmnt
         */
        producteurElement: number;
    }
    interface IScCotisationPhase extends IScCotisation {
        /**
         * Ctfcfp_TypePhase
         */
        typePhase: string;
    }
    interface IScCotisationDerogation extends IScCotisation {
        /**
         * Npfcap_DureeDerogation
         */
        dureeDerogation: number;
        /**
         * Pefcap_PrdDerogation
         */
        produitDerogation: number;
        /**
         * Mtfcvp_MttMinCred
         */
        montantMinimumCredit: number;
        /**
         * Msfcvp_MttMaxCred
         */
        montantMaximumCredit: number;
        /**
         * Ctfcps_Personlsbl
         */
        personlsbl: number;
        /**
         * Nufcdo_NumDrgtn
         */
        numeroDirigeant: number;
    }
    interface IScCotisationTrancheAge extends IScCotisation {
        /**
         * Nufctr_NumrTrch
         */
        numeroTranche: number;
        /**
         * Nbfcai_DebuTrchAge
         */
        debutTrancheAge: number;
        /**
         * Nbfcae_FinTrchAge
         */
        finTrancheAge: number;
        /**
         * ListScCotisationDerogation
         */
        listeSousclasseCotisationDerogation: Array<IScCotisationDerogation>;
    }
    interface IScConvention extends IScConventionResume {
        /**
         * ListCots
         */
        listeCotisation: Array<IScCotisation>;
        /**
         * ListCdfcod_CritIdent
         */
        listeCritereId: Array<string>;
    }
    interface IScConventionAssurance extends IScConvention {
        /**
         * Nbfcai_AgeMinEntrAssr
         */
        ageMinimumEntrAssurance: number;
        /**
         * Nbfcae_AgeMaxEntrAssr
         */
        ageMaximumEntrAssurance: number;
        /**
         * Cdfcsd_CodeDestReglSins
         */
        codeDestinataireRegleSinistre: number;
        /**
         * Nufcit_NDomcBanc
         */
        nDomiciliationBancaire: string;
        /**
         * Nbfcco_AgeMaxCouvAsre
         */
        ageMaximumCouvertureAssurance: number;
        /**
         * Nbfcex_AgeMaxAsreDerg
         */
        ageMaximumAssuranceDerogation: number;
    }
}

declare namespace ICRest.CreditParametre.Models.ChargerEchellesVersement {
    interface IScElement {
    }
    interface IScEchelonVersement extends IScElement {
        /**
         * Nufccl_NumOdrClsmnt
         */
        numeroOrdreClassement: number;
        /**
         * Txfcve_TxVrsmt
         */
        tauxVersement: number;
        /**
         * Clfctj_CodEchln
         */
        codeEchelonnement: string;
        /**
         * Llfctj_LibNat
         */
        libelleNature: string;
        /**
         * Lcfctj_LibCrtNat
         */
        libelleCreationNature: string;
    }
    interface IScEchelleVersement extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Ctfcor_TypeObjtReglTor
         */
        typeObjetRegleTor: string;
        /**
         * Nofech_NumrDech
         */
        numeroDech: number;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Cdscpj_SclssPiecJust
         */
        sousclassePieceJustificatif: string;
        /**
         * Lbfech_LiblEchl
         */
        libelleEchelle: string;
        /**
         * Cdfast_CodeTypeAsst
         */
        codeTypeAssiette: number;
        /**
         * Cdfech_CodeTypeEchl
         */
        codeTypeEchelle: number;
        /**
         * Cdfcec_CodeCompmEchl
         */
        codeCompmEchelle: number;
        /**
         * InfrEchl
         */
        informationEchelle: Array<IScEchelonVersement>;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
    }
}

declare namespace ICRest.CreditParametre.Models.ChargerProduitFinancier {
    interface IScElement {
    }
    interface IScProduitFinancierResume extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Lcfcvs_LiblCrtPrdt
         */
        libelleCreationProduit: string;
        /**
         * Lbfccv_CommtPrdt
         */
        commentaireProduit: string;
        /**
         * Lbcvp1_CommtPrdt
         */
        commentaireProduit1: string;
        /**
         * Cefcvp_CodeEtatPrdt
         */
        codeEtatProduit: number;
        /**
         * Dtfcds_DateDebuSuspPrdt
         * Type date au format yyyy-MM-dd
         */
        dateDebutSuspensionProduit: string;
        /**
         * Dtfcms_DateMiseServPrdt
         * Type date au format yyyy-MM-dd
         */
        dateMiseServiceProduit: string;
        /**
         * Dtfmvp_DateFinMiseServPrdt
         * Type date au format yyyy-MM-dd
         */
        dateFinMiseServiceProduit: string;
        /**
         * Dtfcco_DateComlPrdt
         * Type date au format yyyy-MM-dd
         */
        dateCommercialisationProduit: string;
        /**
         * Dtfccr_DateCrtn
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Cdfcdu_CdAutrDuplPrdt
         */
        codeAutreDuplicationProduit: number;
        /**
         * Dtfcam_DateAnnlModf
         * Type date au format yyyy-MM-dd
         */
        dateAnnulationModification: string;
        /**
         * Dtfccl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Txfcfa_QuotFinnAutr
         */
        quotientFinancierAutre: number;
        /**
         * Cdfcer_CodeEnggRctb
         */
        codeEngagementRctb: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfcvp_MtMiniCrdt
         */
        montantMinimumCredit: number;
        /**
         * Msfcvp_MtMaxiCrdt
         */
        montantMaximumCredit: number;
        /**
         * Mtfcpd_PasSurMtCrdt
         */
        pasSurMontantCredit: number;
        /**
         * Pefcfi_UnitDurCrdt
         */
        uniteDureeCredit: number;
        /**
         * Cdfcrf_ModeExprDurCrdt
         */
        modeExpressionDureeCredit: number;
        /**
         * Npfcfi_DurCrdt
         */
        dureeCredit: number;
        /**
         * Npfcf1_DurCrdt
         */
        dureeCredit1: number;
        /**
         * Npfcf2_DurCrdt
         */
        dureeCredit2: number;
        /**
         * Npfcf3_DurCrdt
         */
        dureeCredit3: number;
        /**
         * Npfcf4_DurCrdt
         */
        dureeCredit4: number;
        /**
         * Cdfcdm_CdPossMerMadDevs
         */
        codePossibiliteMERMADDevise: number;
        /**
         * Ctfcpf_CodePossPrfn
         */
        codePossibilitePrefinancement: number;
        /**
         * Cdfcdi_CdPossDiffAmrt
         */
        codePossibiliteDiffereAmortissement: number;
        /**
         * Cdfctt_CodePossDiffTotl
         */
        codePossibiliteDiffereTotal: number;
        /**
         * Nbfcph_NbPhasAmrt
         */
        nombrePhaseAmortissement: number;
        /**
         * Cdfcvp_CodeGarnObgt
         */
        codeGarantieObligatoire: number;
        /**
         * Npfcof_NbPerdValdOffrCont
         */
        nombrePeriodeValiditeOffreContrat: number;
        /**
         * Pefcof_PerBaseValdOffrCont
         */
        periodeBaseValiditeOffreContrat: number;
        /**
         * Cdfcct_CdEchrVerstCont
         */
        codeEcheancierVersementContrat: number;
        /**
         * Nrfcct_NoCalcDateEfftCrdt
         */
        numeroCalculDateEffetCredit: string;
        /**
         * Cdfcve_ModeDetrVerst
         */
        modeDetrVersement: string;
        /**
         * Nrfccv_NoReglCalcMtVerst
         */
        numeroRegleCalculMontantVersement: string;
        /**
         * Nrfcdd_NoReglCalcDatsVerst
         */
        numeroRegleCalculDatsVersement: string;
        /**
         * Nrfcve_EvnmCalcDateLimtVers
         */
        evenementCalculDateLimiteVersement: string;
        /**
         * Npfcve_DurPerdVerst
         */
        dureePeriodeVersement: number;
        /**
         * Pefcve_UnitDurVerst
         */
        uniteDureeVersement: number;
        /**
         * Npfcvp_DurPerdPremVerst
         */
        dureePeriodePremierVersement: number;
        /**
         * Pefcvp_UnitPerdPremVerst
         */
        unitePeriodePremierVersement: number;
        /**
         * Nbfcve_NbMaxiVerst
         */
        nombreMaximumVersement: number;
        /**
         * Mtfcve_MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * Cdfcvv_CodeConfmVerst
         */
        codeConfirmationVersement: number;
        /**
         * Cdfcvd_CodePrimDernVerst
         */
        codePrimeDernierVersement: number;
        /**
         * Npfcvj_DelaiPourJustManqMad
         */
        delaiPourJustificatifManquantMAD: number;
        /**
         * Npvlve_DelaiConfmVerst
         */
        delaiConfirmationVersement: number;
        /**
         * Npfban_DelaiAntcVerst
         */
        delaiAnticipeVersement: number;
        /**
         * Cdfccr_CdTrtIntrIntr
         */
        codeTraitementIntrIntr: number;
        /**
         * Cdinc1_CdTrtIntrIntr
         */
        codeTraitementIntrIntr1: number;
        /**
         * Cdinc2_CdTrtIntrIntr
         */
        codeTraitementIntrIntr2: number;
        /**
         * Cdinc3_CdTrtIntrIntr
         */
        codeTraitementIntrIntr3: number;
        /**
         * Cdinc4_CdTrtIntrIntr
         */
        codeTraitementIntrIntr4: number;
        /**
         * Cdfcia_CdActlIntrIntr
         */
        codeActuarielIntrIntr: number;
        /**
         * Nufcmt_NumrModuCalcTa
         */
        numeroModulableCalculta: string;
        /**
         * Nrfcta_NoReglDateMerZero
         */
        numeroRegleDateMERZero: string;
        /**
         * Dhfccj_JourDateEchn
         */
        jourDateEcheance: string;
        /**
         * Dhfccm_MoisDateEchn
         */
        moisDateEcheance: string;
        /**
         * Dhfcc1_MoisDateEchn
         */
        moisDateEcheance1: string;
        /**
         * Dhfcc2_MoisDateEchn
         */
        moisDateEcheance2: string;
        /**
         * Dhfcc3_MoisDateEchn
         */
        moisDateEcheance3: string;
        /**
         * Dhfcc4_MoisDateEchn
         */
        moisDateEcheance4: string;
        /**
         * Dhfcc5_MoisDateEchn
         */
        moisDateEcheance5: string;
        /**
         * Cdfccp_CodeIntrCompRa
         */
        codeIntrCompRa: number;
        /**
         * Wcptmj_CptrMaj
         */
        compteurMAJ: number;
        /**
         * Cdfcrl_CodeCrdtRels
         */
        codeCreditRelease: number;
        /**
         * Ctfcbs_CodeSclssBafi
         */
        codeSousclasseBafi: string;
        /**
         * Cdfcdo_CodeDestAutrObjt
         */
        codeDestinataireAutreObjet: number;
        /**
         * Cdfctd_CodeTxCrdtDir
         */
        codeTauxCreditDirecteur: number;
        /**
         * Nufcre_RefrRess
         */
        referenceRessource: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Cdfacc_IndicCpteCrrt
         */
        indiceCompteCrrt: number;
        /**
         * Cdfaea_CodeElgbApl
         */
        codeEligibiliteAPL: number;
        /**
         * Ctfcpc_CodeTypePretCbin
         */
        codeTypePretCbin: number;
        /**
         * Cifrvp_CodePrdtRevs
         */
        codeProduitRevision: number;
        /**
         * Cifkba_CodeAccCompBonfAutr
         */
        codeAccessoireCompBonificationAutre: number;
        /**
         * Cifcmn_CodeIndicMargNegc
         */
        codeIndiceMargeNegocie: number;
        /**
         * Cifcdb_CodeIndicDergBorn
         */
        codeIndiceDerogationBorne: number;
        /**
         * Cifcpm_IndPossPhasMobln
         */
        indicateurPossibilitePhaseMobln: number;
        /**
         * Cifcrd_CodeTaCrdReel
         */
        codetaCRDReel: number;
        /**
         * Cdfcfd_CodeFamlCommPres
         */
        codeFamilleCommissionPres: string;
        /**
         * Cdfcfc_CodeFamlCtrl
         */
        codeFamilleControle: string;
    }
    interface IScProduitPhase extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Nofcfp_NoReltPhas
         */
        numeroRelationPhase: number;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Pefcph_UnitDurDunPhas
         */
        uniteDureeDunPhase: number;
        /**
         * Cdfcph_ModeExprDurPhas
         */
        modeExpressionDureePhase: number;
        /**
         * Npfcq1_DurPhasPrdt
         */
        dureePhaseProduit: number;
        /**
         * Npfcq2_DurPhasPrdt
         */
        dureePhaseProduit1: number;
        /**
         * Npfcq3_DurPhasPrdt
         */
        dureePhaseProduit2: number;
        /**
         * Npfcq4_DurDunPhasPas
         */
        dureeDunPhasePas: number;
        /**
         * Ptfcin_PerdicCalcIntr
         */
        periodiciteCalculIntr: number;
        /**
         * Ptfci1_PerdicCalcIntr
         */
        periodiciteCalculIntr1: number;
        /**
         * Ptfci2_PerdicCalcIntr
         */
        periodiciteCalculIntr2: number;
        /**
         * Ptfci3_PerdicCalcIntr
         */
        periodiciteCalculIntr3: number;
        /**
         * Ptfci4_PerdicCalcIntr
         */
        periodiciteCalculIntr4: number;
        /**
         * Ptfcam_PerdicMerAmrt
         */
        periodiciteMERAmortissement: number;
        /**
         * Ptfca1_PerdicMerAmrt
         */
        periodiciteMERAmortissement1: number;
        /**
         * Ptfca2_PerdicMerAmrt
         */
        periodiciteMERAmortissement2: number;
        /**
         * Ptfca3_PerdicMerAmrt
         */
        periodiciteMERAmortissement3: number;
        /**
         * Ptfca4_PerdicMerAmrt
         */
        periodiciteMERAmortissement4: number;
        /**
         * Cdfcpt_CodePerdicDiffMer
         */
        codePeriodiciteDiffereMER: number;
        /**
         * Cdfcei_CdRecvIntrTermEchu
         */
        codeRecouvrementIntrTermeEchu: number;
        /**
         * Cdfcea_CdRecvAmrtTermEchu
         */
        codeRecouvrementAmortissementTermeEchu: number;
        /**
         * Cdfccf_CdTypeConfmTxIntr
         */
        codeTypeConfirmationTauxIntr: number;
        /**
         * Cdfctx_ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * Nbfcaa_NbJourAnnNumrt
         */
        nombreJourAnnulationNumerateur: number;
        /**
         * Cdfcam_ModeCalcAmrt
         */
        modeCalculAmortissement: number;
        /**
         * Mtfckr_CaptRefrTablCste
         */
        capitalReferenceTableConstante: number;
        /**
         * Ctfcrb_TypeAsstRemb
         */
        typeAssietteRemboursement: number;
        /**
         * Cdfcva_CdVerstAutrPendPhas
         */
        codeVersementAutrePendantPhase: number;
        /**
         * Cdfcfp_CodeRedcDurPrfn
         */
        codeReductionDureePrefinancement: number;
        /**
         * Cdfcpr_CodePrlnDurPrfn
         */
        codePrelevementDureePrefinancement: number;
        /**
         * Ctfcpe_CodeTypePrfn
         */
        codeTypePrefinancement: number;
        /**
         * Cdfcip_CodeRecvPartlIntr
         */
        codeRecouvrementPartielIntr: number;
        /**
         * Cdfcir_CodeCalcIntrRepr
         */
        codeCalculIntrRepr: number;
        /**
         * Cdfcki_CodeCaptIntrDiff
         */
        codeCapitalIntrDiffere: number;
        /**
         * Ptfcci_CalcIntrJourReel
         */
        calculIntrJourReel: number;
        /**
         * Ptfcd1_PerdicMerIntr
         */
        periodiciteMERIntr: number;
        /**
         * Ptfcd2_PerdicMerIntr
         */
        periodiciteMERIntr1: number;
        /**
         * Ptfcd3_PerdicMerIntr
         */
        periodiciteMERIntr2: number;
        /**
         * Ptfcd4_PerdicMerIntr
         */
        periodiciteMERIntr3: number;
        /**
         * Ctfck2_ModeCaptIntr
         */
        modeCapitalIntr: number;
        /**
         * Ctfck1_ModeRecvIntr
         */
        modeRecouvrementIntr: number;
        /**
         * Ptfcco_PerdicCompoIntr
         */
        periodiciteCompositionIntr: number;
        /**
         * Cdfcpm_CdModeExprTxMoyePhas
         */
        codeModeExpressionTauxMoyenPhase: number;
        /**
         * Txfcp1_ValrMinTxMoyePhas
         */
        valeurMinimumTauxMoyenPhase: number;
        /**
         * Txfcp2_ValrMaxTxMoyePhas
         */
        valeurMaximumTauxMoyenPhase: number;
        /**
         * Txfcp3_ValrConsTxMoyePhas
         */
        valeurConsolideTauxMoyenPhase: number;
        /**
         * Cdfcth_CodeTxPalrCalc
         */
        codeTauxPalierCalcul: number;
        /**
         * Cdfcin_CodeIndc
         */
        codeIndice: string;
        /**
         * Nbfrvd_NbMaxiPerdVartDur
         */
        nombreMaximumPeriodeVartDuree: number;
        /**
         * Cdfcop_CodeOptnSurPhasPrdt
         */
        codeOptionSurPhaseProduit: number;
        /**
         * Cdfcoo_CodeObjtOptn
         */
        codeObjetOption: number;
        /**
         * Cdfcto_TypeOptn
         */
        typeOption: number;
        /**
         * Cdfcsr_CodeCourPourPrsDopt
         */
        codeCourtPourPresenceDopt: number;
        /**
         * Npfcsr_DelaiCourPrsDopt
         */
        delaiCourtPresenceDopt: number;
        /**
         * Pefcpo_PerdicOptn
         */
        periodiciteOption: number;
        /**
         * Nbjja1_NbJourAnnDenom
         */
        nombreJourAnnulationDenomination: number;
        /**
         * Txfccz_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement: number;
        /**
         * Tpfcc1_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement: number;
        /**
         * Tsfcc1_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement: number;
        /**
         * Pefrie_UnitPerdValrIntIndc
         */
        unitePeriodeValeurIntituleIndice: number;
        /**
         * Npfrie_NbPerdValrIntIndc
         */
        nombrePeriodeValeurIntituleIndice: number;
        /**
         * Ctfcte_CodeTypeTrtDech
         */
        codeTypeTraitementDech: number;
        /**
         * Tsfcif_QuotMaxiCaptIfin
         */
        quotientMaximumCapitalIfin: number;
        /**
         * Txfcca_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement1: number;
        /**
         * Tpfcca_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement1: number;
        /**
         * Tsfcca_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement1: number;
        /**
         * Idfrbd_IdntReglButrDur
         */
        idRegleButoireDuree: string;
    }
    interface IScConditionsDeTaux extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Npfcfm_DurMiniPlagCondTx
         */
        dureeMinimumPlageConditionTaux: number;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Npfcfx_DurMaxiPlagCondTx
         */
        dureeMaximumPlageConditionTaux: number;
        /**
         * Cdfcta_CodeModeExprTx
         */
        codeModeExpressionTaux: number;
        /**
         * Cdfcin_CodeIndc
         */
        codeIndice: string;
        /**
         * Txfck1_TxMoyeMiniCrdt
         */
        tauxMoyenMinimumCredit: number;
        /**
         * Txfck2_TxMoyeMaxiCrdt
         */
        tauxMoyenMaximumCredit: number;
        /**
         * Txfck3_TxMoyeConsCrdt
         */
        tauxMoyenConsolideCredit: number;
        /**
         * Txfcre_TxRess
         */
        tauxRessource: number;
        /**
         * Cdfctm_CodeIndxTxCons
         */
        codeIndexTauxConsolide: string;
        /**
         * Tvfctm_VartLindTxCons
         */
        vartLindTauxConsolide: number;
        /**
         * Cdfytp_CodeTypeParmPond
         */
        codeTypeParametrePondere: number;
        /**
         * Txfrrv_MargFixePourRevs
         */
        margeFixePourRevision: number;
        /**
         * Tvfrrv_VartMargFixePourRevs
         */
        vartMargeFixePourRevision: number;
        /**
         * Ctfct0_CodeTypeTrchPret0
         */
        codeTypeTranchePret0: string;
    }
    interface IScModalitesRemboursementParProduit extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Nofcmc_NumrModlRa
         */
        numeroModeleRa: number;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Idfcrc_IdntCondRa
         */
        idConditionRa: string;
        /**
         * Idfcrm_IdntModlCalcIndmRa
         */
        idModeleCalculIndemniteRa: string;
        /**
         * Txfcrm_PourAssoCalcModlRa
         */
        pourAssociationCalculModeleRa: number;
        /**
         * Txfcrr_PourAssoReglAutrRa
         */
        pourAssociationRegleAutreRa: number;
        /**
         * Txfcra_PctMtMinRaAutr
         */
        pourcentageMontantMinimumRaAutre: number;
        /**
         * Ctfcra_CdTypeAsstMtMinRa
         */
        codeTypeAssietteMontantMinimumRa: number;
        /**
         * Cdfcrt_CdAutrRaTotInfMtMin
         */
        codeAutreRaTotalInferieurMontantMinimum: number;
        /**
         * Txfcsr_SucouTx
         */
        sucouTaux: number;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
    }
    interface IScModalitesCalculHorsConventionParProduit extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Nofcfp_NoReltPhas
         */
        numeroRelationPhase: number;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Cdfcao_CodeAccsObgt
         */
        codeAccessoireObligatoire: number;
        /**
         * Ctfcca_CodeModeCalcAccs
         */
        codeModeCalculAccessoire: number;
        /**
         * Nrfccr_NumrReglCalcAccs
         */
        numeroRegleCalculAccessoire: string;
        /**
         * Mtfcac_MtConsAccs
         */
        montantConsolideAccessoire: number;
        /**
         * Mpfcap_MtMiniPlagAccs
         */
        montantMinimumPlageAccessoire: number;
        /**
         * Msfcap_MtMaxiPlagAccs
         */
        montantMaximumPlageAccessoire: number;
        /**
         * Ctfcas_CodeTypeAsstCalcAccs
         */
        codeTypeAssietteCalculAccessoire: string;
        /**
         * Mtfcmx_MtPlfnTrchCalcAccs
         */
        montantPlafondTrancheCalculAccessoire: number;
        /**
         * Txfcac_TxConsAccs
         */
        tauxConsolideAccessoire: number;
        /**
         * Tpfcac_TxMiniAccs
         */
        tauxMinimumAccessoire: number;
        /**
         * Tsfcac_TxMaxiAccs
         */
        tauxMaximumAccessoire: number;
        /**
         * Mtmxc1_MtPlfnTrchCalcAccs
         */
        montantPlafondTrancheCalculAccessoire1: number;
        /**
         * Txfcl1_TxElmt
         */
        tauxElement: number;
        /**
         * Tpfca1_TxMiniAccs
         */
        tauxMinimumAccessoire1: number;
        /**
         * Tsfca1_TxMaxiAccs
         */
        tauxMaximumAccessoire1: number;
        /**
         * Mtmxc2_MtPlfnTrchCalcAccs
         */
        montantPlafondTrancheCalculAccessoire2: number;
        /**
         * Txfcl2_TxElmt
         */
        tauxElement1: number;
        /**
         * Tpfca2_TxMiniAccs
         */
        tauxMinimumAccessoire2: number;
        /**
         * Tsfca2_TxMaxiAccs
         */
        tauxMaximumAccessoire2: number;
        /**
         * Mtmxc3_MtPlfnTrchCalcAccs
         */
        montantPlafondTrancheCalculAccessoire3: number;
        /**
         * Txfcl3_TxElmt
         */
        tauxElement2: number;
        /**
         * Tpfca3_TxMiniAccs
         */
        tauxMinimumAccessoire3: number;
        /**
         * Tsfca3_TxMaxiAccs
         */
        tauxMaximumAccessoire3: number;
        /**
         * Mtmxc4_MtPlfnTrchCalcAccs
         */
        montantPlafondTrancheCalculAccessoire4: number;
        /**
         * Txfcl4_TxElmt
         */
        tauxElement3: number;
        /**
         * Tpfca4_TxMiniAccs
         */
        tauxMinimumAccessoire4: number;
        /**
         * Tsfca4_TxMaxiAccs
         */
        tauxMaximumAccessoire4: number;
        /**
         * Mpfcac_MtMiniAccsCalc
         */
        montantMinimumAccessoireCalcul: number;
        /**
         * Msfcac_MtMaxiAccsCalc
         */
        montantMaximumAccessoireCalcul: number;
        /**
         * Mpfcpa_MtMinAccsPourRecv
         */
        montantMinimumAccessoirePourRecouvrement: number;
        /**
         * Nrfcmr_NumrReglAppliAccs
         */
        numeroRegleApplicationAccessoire: string;
        /**
         * Nrfcda_ReglDateDebuApplAccs
         */
        regleDateDebutApplicationAccessoire: string;
        /**
         * Nrfcpa_ReglEvnmDecl1ErAppl
         */
        regleEvenementDeclaration1ErApplication: string;
        /**
         * Pefcac_PerdicAppliAccs
         */
        periodiciteApplicationAccessoire: number;
        /**
         * Cdfceh_CodeRecvAcc
         */
        codeRecouvrementAccessoire: number;
        /**
         * Pefcap_UnitDurApplAccs
         */
        uniteDureeApplicationAccessoire: number;
        /**
         * Npfcap_DurAppliAccs
         */
        dureeApplicationAccessoire: number;
        /**
         * Nrfcap_ReglApplAccsAprd
         */
        regleApplicationAccessoireAprd: string;
        /**
         * Cdfcat_CodeAccsCalcTeg
         */
        codeAccessoireCalculteg: number;
        /**
         * Cdfcap_CodeApplEchn
         */
        codeApplicationEcheance: number;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Cifcdb_CodeIndicDergBorn
         */
        codeIndiceDerogationBorne: number;
        /**
         * Tsfcff_FrctFinnMaxi
         */
        fractionFinancierMaximum: number;
        /**
         * Ctfcai_CodeCompAccsInstr
         */
        codeCompAccessoireInstruction: number;
        /**
         * Ctfcaw_CodeCompAccsAvnn
         */
        codeCompAccessoireAvenant: number;
        /**
         * Ctfcfd_CodeFinnFrsParDeft
         */
        codeFinancierFrsParDeft: number;
        /**
         * Cofcca_CodeCanalDistributionEPS
         */
        codeCanalDistributionEPS: number;
    }
    interface IScTranscodifProduit extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Cdfcbp_CodePrdtRestt
         */
        codeProduitRestant: string;
        /**
         * Cdftre_CodeTypeRestt
         */
        codeTypeRestant: string;
        /**
         * Cdfcoc_CodeRestt
         */
        codeRestant: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
    }
    interface IScConditionsSpecifiques extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Idfcvp_IdntPrdt
         */
        idProduit: string;
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Idfccl_IdntClse
         */
        idClasse: string;
        /**
         * Lbfccl_LiblClse
         */
        libelleClasse: string;
        /**
         * Nofccl_NOrdrRatClsePrdt
         */
        nOrdreRatClasseProduit: number;
        /**
         * Nofcpa_NOrdrRatPargClse
         */
        nOrdreRatParagrapheClasse: number;
        /**
         * Llfcpa_TitrParg
         */
        titreParagraphe: string;
        /**
         * Lvfcpa_CorpParg
         */
        corpsParagraphe: string;
        /**
         * Nufcrl_NumrRelt
         */
        numeroRelation: number;
        /**
         * Cdfccl_CodeMiseFormParg
         */
        codeMiseFormeParagraphe: string;
        /**
         * Ctfccs_CodeTypeClse
         */
        codeTypeClasse: string;
    }
    interface IScVariationDuree extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Cdfcbt_CdTypeButrDur
         */
        codeTypeButoireDuree: number;
        /**
         * Nofrji_NumrJeuIndcRevs
         */
        numeroJeuxIndiceRevision: number;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Npfcfm_DurMiniPlagCondTx
         */
        dureeMinimumPlageConditionTaux: number;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Npfcfx_DurMaxiPlagCondTx
         */
        dureeMaximumPlageConditionTaux: number;
        /**
         * Nrfcal_ReglDetrDall
         */
        regleDetrDall: string;
        /**
         * Nbfcal_NbPerdAllgDurCrdt
         */
        nombrePeriodeAllongementDureeCredit: number;
        /**
         * Txfcal_AllgDurCrdt
         */
        allongementDureeCredit: number;
        /**
         * Nbfcam_NbPerMinDallCrdt
         */
        nombrePeriodeMinimumDallCredit: number;
        /**
         * Nbfcax_NbPerMaxDallCrdt
         */
        nombrePeriodeMaximumDallCredit: number;
        /**
         * Nrfcrd_ReglDetrRedc
         */
        regleDetrReduction: string;
        /**
         * Nbfcrd_NbPerdRedcDurCrdt
         */
        nombrePeriodeReductionDureeCredit: number;
        /**
         * Txfcrd_RedcDurCrdt
         */
        reductionDureeCredit: number;
    }
    interface IScProduitParamSimulationRevision extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Tvfrha_VarbSimlHaus
         */
        variableSimulationHausse: number;
        /**
         * Tvfrba_VarbSimlBais
         */
        variableSimulationBaisse: number;
        /**
         * Idfmag_IdntAgnt
         */
        idAgent: string;
        /**
         * Lcfrco_CommtSimlRevs
         */
        commentaireSimulationRevision: string;
    }
    interface IScPhaseProduitS33A extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Nofcfp_NoReltPhas
         */
        numeroRelationPhase: number;
        /**
         * Txfaco_CsteApplqTxOmga
         */
        constanteAppliqueTauxOmga: number;
        /**
         * Nrfcom_ReglDetrTxOmga
         */
        regleDetrTauxOmga: string;
    }
    interface IScNaturesDeGarantieParProduit extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Cdfcng_CodeNatrGarn
         */
        codeNatureGarantie: string;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
    }
    interface IScParamRevisionParProduit extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Nofcfp_NoReltPhas
         */
        numeroRelationPhase: number;
        /**
         * Nofrji_NumrJeuIndcRevs
         */
        numeroJeuxIndiceRevision: number;
        /**
         * Nofrpe_NumrPerdRevs
         */
        numeroPeriodeRevision: number;
        /**
         * Nbfrji_NbJeuxParmRevs
         */
        nombreJeuxParametreRevision: number;
        /**
         * Idfrlr_IdntLoiRevs
         */
        idLoiRevision: string;
        /**
         * Cdfres_CdEchnReclParRevs
         */
        codeEcheanceReclameParRevision: number;
        /**
         * Nxfrpe_EvnmDeclrDebuPerd
         */
        evenementDeclarationDebutPeriode: string;
        /**
         * Pefrpe_CdUnitPerdDebuRevs
         */
        codeUnitePeriodeDebutRevision: number;
        /**
         * Npfrpe_NbPerPourDetDebuPerd
         */
        nombrePeriodePourDeterminationDebutPeriode: number;
        /**
         * Npfrpf_DurPerdRevs
         */
        dureePeriodeRevision: number;
        /**
         * Ptfrpe_UnitDurPerdRev
         */
        uniteDureePeriodeRevision: number;
        /**
         * Nbfrem_NbEchnAvntReclMont
         */
        nombreEcheanceAvenantReclameMontant: number;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Llfrje_LiblJeuRevs
         */
        libelleJeuxRevision: string;
    }
    interface IScProduitFinancier extends IScProduitFinancierResume {
        /**
         * PhssAsscPrdt
         */
        phssAssuranceProduit: Array<IScProduitPhase>;
        /**
         * ListCondTxAsscPrdt
         */
        listeConditionTauxAssuranceProduit: Array<IScConditionsDeTaux>;
        /**
         * ListModlRa
         */
        listeModeleRa: Array<IScModalitesRemboursementParProduit>;
        /**
         * ListModlCalcHorsConv
         */
        listeModeleCalculHorsConvention: Array<IScModalitesCalculHorsConventionParProduit>;
        /**
         * TrnsPrdt
         */
        transfertProduit: Array<IScTranscodifProduit>;
        /**
         * CondSpcfAsscPrdt
         */
        conditionSpecifiqueAssuranceProduit: Array<IScConditionsSpecifiques>;
        /**
         * VartDur
         */
        vartDuree: Array<IScVariationDuree>;
        /**
         * ListInfrParmChatel
         */
        listeInformationParametreChatel: Array<IScProduitParamSimulationRevision>;
        /**
         * PhasPrdt
         */
        phaseProduit: Array<IScPhaseProduitS33A>;
        /**
         * RecpLesNatrGarnPourCePrdt
         */
        recuperationLesNatureGarantiePourCEProduit: Array<IScNaturesDeGarantieParProduit>;
        /**
         * ListParmAsscPrdt
         */
        listeParametreAssuranceProduit: Array<IScParamRevisionParProduit>;
        /**
         * EstModulable
         */
        estModulable: boolean;
        /**
         * EstBonifiableFlat
         */
        estBonifiableFlat: boolean;
        /**
         * EstLissage
         */
        estLissage: boolean;
        /**
         * EstPATZ
         */
        estPATZ: boolean;
        /**
         * EstECOPATZ
         */
        estECOPATZ: boolean;
        /**
         * EstECOPATZCOPRO
         */
        estECOPATZCOPRO: boolean;
        /**
         * EstPC
         */
        estPC: boolean;
        /**
         * EstPAS
         */
        estPAS: boolean;
        /**
         * EstPEL
         */
        estPEL: boolean;
        /**
         * EstCEL
         */
        estCEL: boolean;
        /**
         * EstATauxRevisable
         */
        estATauxRevisable: boolean;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        identifiantProduitFinancier: string;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.Constante {
    interface IScConstante extends IScElement {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
    interface IScElement {
    }
}

declare namespace ICRest.CreditParametre.Models.ListerDevise {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScDevise extends IScElement {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Llfadv_LiblDevs
         */
        libelleDevise: string;
        /**
         * Ddfcdv_DateDebuUtlsDevs
         * Type date au format yyyy-MM-dd
         */
        dateDebutUtilisationDevise: string;
        /**
         * Dffcdv_DateSuspUtlsDevs
         * Type date au format yyyy-MM-dd
         */
        dateSuspensionUtilisationDevise: string;
        /**
         * Nbfcch_NbChffMaxmDevs
         */
        nombreChiffreMaximumDevise: number;
        /**
         * Nbfcar_NivArrdDevs
         */
        niveauArrondiDevise: number;
        /**
         * Lcfadv_LiblCrtDevs
         */
        libelleCreationDevise: string;
        /**
         * Cifcdi_CodeIndicDevsInstr
         */
        codeIndiceDeviseInstruction: number;
        /**
         * Nbfadv_NbDecmDevs
         */
        nombreDecimalDevise: number;
        /**
         * Cdfcse_CodeSeprDec
         */
        codeSeparateurDecimal: number;
        /**
         * Cdfcch_CodeSeprChffMt
         */
        codeSeparateurChiffresMontant: number;
        /**
         * Nofcde_NumrOrdrDevs
         */
        numeroDordreDevise: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerEtablissements {
    interface IScElement {
    }
    interface IScParamEtablissement extends IScElement {
        /**
         * Cdfpbq_CodeEtablissement
         */
        codeEtablissement: string;
        /**
         * Lbfaep_LibelleEtablissement
         */
        libelleEtablissement: string;
    }
    interface IListerEtablissementsRequest {
        dateTraitement: string;
        filtreLibelle: string;
        versionWsdl: number;
    }
}

declare namespace ICRest.CreditParametre.Models.InfoAgent {
    interface IScElement {
    }
    interface IScAutorisationStructure extends IScElement {
        /**
         * Conformite
         */
        conformite: boolean;
        /**
         * Consultation
         */
        consultation: boolean;
        /**
         * Decision
         */
        decision: boolean;
        /**
         * Instruction
         */
        instruction: boolean;
        /**
         * MiseAJour
         */
        miseAJour: boolean;
        /**
         * PriseEnChargeBO
         */
        priseEnChargeBO: boolean;
        /**
         * Transfert
         */
        transfert: boolean;
        /**
         * prorogation
         */
        prorogation: boolean;
    }
    interface IScInformationAgent extends IScElement {
        /**
         * Agent
         */
        agent: IScAgent;
        /**
         * AutorisationStructure
         */
        autorisationStructure: IScAutorisationStructure;
        /**
         * HabitatAutorisee
         */
        habitatAutorisee: boolean;
        /**
         * TresoConsoAutorisee
         */
        tresoConsommationAutorisee: boolean;
        /**
         * ProsAutorisee
         */
        prosAutorisee: boolean;
        /**
         * BlocageDateTraitementFuture
         */
        blocageDateTraitementFuture: boolean;
        /**
         * EstTransfertNeoActive
         */
        estTransfertNeoActive: boolean;
    }
    interface IScPhasePilote extends IScElement {
        /**
         * FonctionsPilote
         */
        fonctionsPilote: Array<string>;
    }
    interface IScAgent extends IScElement {
        /**
         * Idfaen_IdntAgent
         */
        idAgent: string;
        /**
         * Lbfaes_LblAgent
         */
        lblAgent: string;
        /**
         * Idfaeg_IdntEdsGest
         */
        idEDSGestion: string;
        /**
         * Lbfiba_LblAgenceRat
         */
        lblAgenceRat: string;
        /**
         * Cdfaaa_CdeAgentRat
         */
        cdeAgentRat: string;
        /**
         * Ctfauc_TypeUtilisateurCo
         */
        typeUtilisateurCo: number;
        /**
         * Idfies_IdntAgentInterne
         */
        idAgentInterne: string;
        /**
         * Idfce3_EtabBaofCent
         */
        etabBaofCentral: number;
        /**
         * Cdfabo_IdntEdsBaofCent
         */
        idEDSBaofCentral: string;
        /**
         * Cifttv_TechniqueDeVente
         */
        techniqueDeVente: number;
        /**
         * EstAgentBO
         */
        estAgentBO: boolean;
        /**
         * EstBackup
         */
        estBackup: boolean;
        /**
         * EstAgentExterne
         */
        estAgentExterne: boolean;
        /**
         * EstConseillerDeProximite
         */
        estConseillerDeProximite: boolean;
        /**
         * DerogationBornes
         */
        derogationBornes: boolean;
        /**
         * AutoriserForcage
         */
        autoriserForcage: boolean;
        /**
         * AutoriserForcagePIECO
         */
        autoriserForcagePIECO: boolean;
        /**
         * AutoriserInstructionPourX
         */
        autoriserInstructionPourX: boolean;
        /**
         * AutoriserMajPourX
         */
        autoriserMAJPourX: boolean;
        /**
         * AutoriserDateTraitement
         */
        autoriserDateTraitement: boolean;
        /**
         * AutoriserAXANet
         */
        autoriserAXANet: boolean;
        /**
         * AutoriserDevisEcoPTZ
         */
        autoriserDevisEcoPTZ: boolean;
        /**
         * AutoriserCNPNet
         */
        autoriserCNPNet: boolean;
        /**
         * AutoriserCAPI
         */
        autoriserCAPI: boolean;
        /**
         * AutoriserSDPI
         */
        autoriserSDPI: boolean;
        /**
         * AutoriserAgrementAssurance
         */
        autoriserAgrementAssurance: boolean;
        /**
         * AutoriserAccesDNC
         */
        autoriserAccessoireDNC: boolean;
        /**
         * AutoriserGenerationNouvelleDemandeMyFlow
         */
        autoriserGenerationNouvelleDemandeMyFlow: boolean;
        /**
         * AutoriserCnpManuelle
         */
        autoriserCnpManuelle: boolean;
        /**
         * ListeHabilitation
         */
        listeHabilitation: Array<string>;
        /**
         * ExisteDossiersEnAlerte
         */
        existeDossiersEnAlerte: boolean;
        /**
         * EstAgentRefusAssuranceExterne
         */
        estAgentRefusAssuranceExterne: boolean;
        /**
         * ScPhasePilote
         */
        sousclassePhasePilote: IScPhasePilote;
        /**
         * Idfas1_ElemStrc1
         */
        elementStructure1: string;
        /**
         * Idfas2_ElemStrc2
         */
        elementStructure2: string;
        /**
         * Idfas3_ElemStrc3
         */
        elementStructure3: string;
        /**
         * Idfas4_ElemStrc4
         */
        elementStructure4: string;
        /**
         * Idfas5_ElemStrc5
         */
        elementStructure5: string;
        /**
         * Idfas6_ElemStrc6
         */
        elementStructure6: string;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerCodePays {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScCodePays extends IScElement {
        /**
         * Cdfopa_CodePaysLocs
         */
        codePaysLocalisation: string;
        /**
         * Lbfopa_LiblPaysLocs
         */
        libellePaysLocalisation: string;
        /**
         * Lcfopa_LiblCrtPaysLocs
         */
        libelleCreationPaysLocalisation: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerConventionsBonification {
    interface IScElement {
    }
    interface IScConventionBonification extends IScElement {
        /**
         * Idfcco_IdConvention
         */
        idConvention: string;
        /**
         * Lcfcco_LibCourtConv
         */
        libelleCourtConvention: string;
        /**
         * Llfcco_LibLongConv
         */
        libelleLongConvention: string;
        /**
         * Idfpit_IdIntervenant
         */
        idIntervenant: string;
        /**
         * Lbfdpc_LibProduit
         */
        libelleProduit: string;
        /**
         * Ctfdic_CodeTypeInfo
         */
        codeTypeInformation: string;
        /**
         * Ctfctc_CodeTypeConv
         */
        codeTypeConvention: string;
        /**
         * Ctfdpb_CodeTypePartenaire
         */
        codeTypePartenaire: number;
        /**
         * Tmfdpb_PourcentRemisePartenaire
         */
        pourcentageRemisePartenaire: number;
        /**
         * LibelleTypePartenaire
         */
        libelleTypePartenaire: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        identifiantProduit: string;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerEligibilites {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScBonifEligibilite extends IScElement {
        /**
         * Txfabo_TauxCredit
         */
        tauxCredit: number;
        /**
         * Npfcfi_DureeCredit
         */
        dureeCredit: number;
        /**
         * Mpfact_MtMinCredit
         */
        montantMinimumCredit: number;
        /**
         * Msfact_MtMaxCredit
         */
        montantMaximumCredit: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        identifiantProduit: string;
        identifiantConvention: string;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerLienObjFinanceObjSousJacent {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScLienObjetFinanceObjetSousJacent extends IScElement {
        /**
         * Cdfcni_TypeObjtFinnGarn
         */
        typeObjetFinancierGarantie: string;
        /**
         * Ctfcor_TypeObjtReglTor
         */
        typeObjetRegleTor: string;
        /**
         * Ctfcfo_ClssObjt
         */
        classeObjet: string;
        /**
         * Cdfcn1_TypeObjtSousJacn
         */
        typeObjetSousJacent: string;
        /**
         * Ctfco2_TypeObjtReglTor
         */
        typeObjetRegleTor1: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerLienParente {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScLienParente extends IScElement {
        /**
         * Ctfpli_LienParnAvecCedn
         */
        lienParentAvecCedn: number;
        /**
         * Lbfpli_LiblLienParn
         */
        libelleLienParent: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerNatureAvantageFiscal {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScAdrNatureAvantageFiscal extends IScElement {
        /**
         * Cdfofi_CodeNatrAvtgFisc
         */
        codeNatureAvantageFiscal: string;
        /**
         * Lbfofi_LiblNatrAvtgFisc
         */
        libelleNatureAvantageFiscal: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerNatureGarantieRelatifATypeObjet {
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScNatureGarantieRelatifATypeObjet extends IScElement {
        /**
         * Cdfcng_CodeNatrGarn
         */
        codeNatureGarantie: string;
        /**
         * Cdfcni_TypeObjtFinnGarn
         */
        typeObjetFinancierGarantie: string;
        /**
         * Cdftyo_TyplLobj
         */
        typologieLobj: string;
        /**
         * Cdfcn2_TypeGarnBale2
         */
        typeGarantieBale2: string;
        /**
         * Ctfgdo_TypeDocEdit
         */
        typeDocEdit: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
    interface IAnyType {
    }
}

declare namespace ICRest.CreditParametre.Models.ListerNatureGarantie {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScNatureGarantie extends IScElement {
        /**
         * Cdfcng_CodeNatrGarn
         */
        codeNatureGarantie: string;
        /**
         * Lbfcng_LiblNatrGarn
         */
        libelleNatureGarantie: string;
        /**
         * Cdfaan_ActeAuthSurNatrGarn
         */
        acteAuthentiqueSurNatureGarantie: number;
        /**
         * Ctfccg_ClssGarn
         */
        classeGarantie: number;
        /**
         * Lcfcng_LiblCrtNatrGarn
         */
        libelleCreationNatureGarantie: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Ddftva_DateDebuVald
         * Type date au format yyyy-MM-dd
         */
        dateDebutValidite: string;
        /**
         * Dfftva_DateFinVald
         * Type date au format yyyy-MM-dd
         */
        dateFinValidite: string;
        /**
         * Llfgng_LiblLongNatrGarn
         */
        libelleLongNatureGarantie: string;
        /**
         * Cdfghr_CodeHyptRchab
         */
        codeHypothequeRchab: string;
        /**
         * Ctfcsu_TypeSurt
         */
        typeSurete: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerParamCoutTravauxEcoPtz {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScParamCoutTravauxEcoPtz extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Cnfctr_CodeNatrTrvx
         */
        codeNatureTravaux: string;
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * ParamTypologieTravaux
         */
        paramTypologieTravaux: IScParamTypologieTravaux;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
    interface IScParamTypologieTravaux extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Lcfcct_LiblCrtTyplCout
         */
        libelleCreationTypologieCout: string;
        /**
         * Llfcct_LiblLongTyplCout
         */
        libelleLongTypologieCout: string;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerParamGarantie {
    interface IAnyType {
    }
    interface IListerParamGarantieRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScParamGarantie extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Cdfcng_CodeNatrGarn
         */
        codeNatureGarantie: string;
        /**
         * Cdfgdd_CodeDureDeftGarn
         */
        codeDureDeftGarantie: number;
        /**
         * Cdfgup_CodeUtilPactComm
         */
        codeUtilPactCommission: number;
        /**
         * Cdfgvp_CodeVoiePare
         */
        codeVoiePare: number;
        /**
         * Npfgco_DelaiConsGarn
         */
        delaiConsolideGarantie: number;
        /**
         * Npfgmi_DelaiMinGarn
         */
        delaiMinimumGarantie: number;
        /**
         * Npfgmx_DelaiMaxGarn
         */
        delaiMaximumGarantie: number;
        /**
         * Npfgpr_DelaiPrlgGarn
         */
        delaiPrlgGarantie: number;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerTypeFraisAccessoire {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScTypeAccessoire extends IScElement {
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Llfcac_LiblTypeAccs
         */
        libelleTypeAccessoire: string;
        /**
         * Cdfcai_CodeAccsCalcIcne
         */
        codeAccessoireCalculICNE: number;
        /**
         * Cdfcaf_CdAccsCumlFrsTtcCt4R
         */
        codeAccessoireCumuleFrsTTCCt4R: number;
        /**
         * Cnfcac_CodeNatrAccs
         */
        codeNatureAccessoire: string;
        /**
         * Lcfcac_LiblCrtTypeAccs
         */
        libelleCreationTypeAccessoire: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Ctfcah_CodeTyplAccs
         */
        codeTypologieAccessoire: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerTypeLogement {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScTypeLogement extends IScElement {
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * Lbfolo_LiblTypeLogm
         */
        libelleTypeLogement: string;
        /**
         * Nbfwpp_NbPiecPrnc
         */
        nombrePiecePrincipal: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerTypeObjetCommercial {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScTypeObjetCommercialiseToc extends IScElement {
        /**
         * Cdfcni_TypeObjtFinnGarn
         */
        typeObjetFinancierGarantie: string;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * Cdfcfo_CatgReglAttr
         */
        categorieRegleAttribut: string;
        /**
         * Ctfcbv_CodeVntlSclssBafi
         */
        codeVentilationSousclasseBafi: string;
        /**
         * Ctfcaf_CodeAffecObjt
         */
        codeAffectationObjet: number;
        /**
         * Ctfcor_listeTOR
         */
        listeTypeObjetReglemente: Array<string>;
        /**
         * Lcfcni_LbCrtTypeObjtComlToc
         */
        libCreationTypeObjetCommToc: string;
        /**
         * Lbfcni_LiblTypeObjtComlToc
         */
        libTypeObjetCommToc: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.ListerTypeObjetReglemente {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScTypeObjetReglemente extends IScElement {
        /**
         * Ctfcor_TypeObjtReglTor
         */
        typeObjetRegleTor: string;
        /**
         * Lbfcor_LiblTypeObjtReglTor
         */
        libelleTypeObjetRegleTor: string;
        /**
         * Lcfcor_LbCrtTypeObjtReglTor
         */
        libCreationTypeObjetRegleTor: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.Localites {
    interface IScElement {
    }
    interface IScLocalite extends IScElement {
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * ZonePlus
         */
        zonePlus: string;
        /**
         * ZoneDeRobien
         */
        zoneDeRobien: string;
        /**
         * ZoneBourgRural
         */
        zoneBourgadeRural: string;
        /**
         * Cdftro_CodComRob
         */
        codeComRob: string;
    }
    interface ICriteres {
        versionWsdl: number;
        dateTraitement: string;
        codePostaux: Array<string>;
        localites: Array<string>;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.ModalitesImpayes {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScModalitesDImpayesParSecteurEtCatEmprunteur extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Idfcmi_IdntModlCalcImpy
         */
        idModeleCalculImpaye: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Cdfpse_CodeSectRattEmpr
         */
        codeSecteurRattachementEmprunt: string;
        /**
         * Ctfcma_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Nrfcmi_NoReglCalcModlImpy
         */
        numeroRegleCalculModeleImpaye: string;
        /**
         * Lbfcmi_LiblModlCalcImpy
         */
        libelleModeleCalculImpaye: string;
        /**
         * Ctfcmi_CodeTypeTxModlImpy
         */
        codeTypeTauxModeleImpaye: number;
        /**
         * Mpffmi_MtMiniIndmImpy
         */
        montantMinimumIndemniteImpaye: number;
        /**
         * Msffmi_MtMaxiIndmImpy
         */
        montantMaximumIndemniteImpaye: number;
        /**
         * Mtffmi_MtIndmImpy
         */
        montantIndemniteImpaye: number;
        /**
         * Tpffim_TxMiniIntrRetdImpy
         */
        tauxMinimumIntrRetardImpaye: number;
        /**
         * Tsffim_TxMaxiIntrRetdImpy
         */
        tauxMaximumIntrRetardImpaye: number;
        /**
         * Txffim_TxIntrRetdImpy
         */
        tauxIntrRetardImpaye: number;
        /**
         * Txffir_TxRedtIntrRetdImpy
         */
        tauxRedtIntrRetardImpaye: number;
        /**
         * Mpfcpa_MtMinAccsPourRecv
         */
        montantMinimumAccessoirePourRecouvrement: number;
        /**
         * Cdfcsc_CodeCompatLoiScrv
         */
        codeCompatibiliteLoiScrivener: number;
        /**
         * Wcptmj_CptrMaj
         */
        compteurMAJ: number;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfcfc_CodeFamlCtrl
         */
        codeFamilleControle: string;
    }
    interface IListerModalitImpayesRequest {
        dateTraitement: string;
        controle: boolean;
        sousclasseCriteresAccessoire: IScCriteresAcces;
        identifiantCaisse: number;
        typeMarche: number;
        codeSecteurRattachement: string;
        typeLoi: number;
        dateFinApplication: string;
        identifiantModaliteImpaye: string;
        versionWsdl: number;
    }
}

declare namespace ICRest.CreditParametre.Models.ObjetCommercialiseToc {
    interface IAnyType {
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        /**
         * Professionnel : 0,
         * consommation, tréso , étudiant : 1,
         * EPS : 2,
         * Immo : 3
         */
        natureProjet: number;
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScTypeObjetReglemente extends IScElement {
        /**
         * Ctfcor_TypeObjtReglTor
         */
        typeObjetRegleTor: string;
        /**
         * Lbfcor_LiblTypeObjtReglTor
         */
        libelleTypeObjetRegleTor: string;
        /**
         * Lcfcor_LbCrtTypeObjtReglTor
         */
        libelleCreationTypeObjetRegleTor: string;
        /**
         * Lbfomo_LibelleMeta
         */
        libelleMeta: string;
    }
    interface IScTypeObjetCommercialiseToc extends IScElement {
        /**
         * Cdfcni_TypeObjtFinnGarn
         */
        typeObjetFinancierGarantie: string;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * Cdfcfo_CatgReglAttr
         */
        categorieRegleAttribut: string;
        /**
         * Lbfcni_LiblTypeObjtComlToc
         */
        libelleTypeObjetCommercialisationToc: string;
        /**
         * Ctfcbv_CodeVntlSclssBafi
         */
        codeVentilationSousclasseBafi: string;
        /**
         * Ctfcaf_CodeAffecObjt
         */
        codeAffectationObjet: number;
        /**
         * Lcfcni_LbCrtTypeObjtComlToc
         */
        libelleCreationTypeObjetCommercialisationToc: string;
        /**
         * Ctfcor_listeTOR
         */
        listeTOR: Array<string>;
        /**
         * ListTypeObjetReglemente
         */
        listeTypeObjetReglemente: Array<IScTypeObjetReglemente>;
    }
}

declare namespace ICRest.CreditParametre.Models.paliersDeProgressionParPhase {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScPaliersDeProgressionParPhase extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Nofcfp_NoReltPhas
         */
        numeroRelationPhase: number;
        /**
         * Nurl1_NumrRelt
         */
        numeroRelation: number;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Npfcg1_DurMinPalrPrgrAmort
         */
        dureeMinimumPalierProgressifAmort: number;
        /**
         * Npfcg2_DurPalrPrgrAmort
         */
        dureePalierProgressifAmort: number;
        /**
         * Npfcg4_DurPalrPrgrAmort
         */
        dureePalierProgressifAmort1: number;
        /**
         * Ctfcam_CodeTypeTxPrgrAmort
         */
        codeTypeTauxProgressifAmort: number;
        /**
         * Txpga1_TxPrgrAmort
         */
        tauxProgressifAmort: number;
        /**
         * Txpga2_TxPrgrAmort
         */
        tauxProgressifAmort1: number;
        /**
         * Txpga3_TxPrgrAmort
         */
        tauxProgressifAmort2: number;
        /**
         * Ptfcpa_PerdicApplPrgrAmort
         */
        periodiciteApplicationProgressifAmort: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        codeFamilleProduit: string;
        numeroRelationProduit: string;
        codeTypePhase: string;
        numeroRelatifPhase: number;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.PaliersDeTauxParPhase {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScPaliersDeTauxParPhase extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Nofcfp_NoReltPhas
         */
        numeroRelationPhase: number;
        /**
         * Nufcr1_NumrRelt
         */
        numeroRelation: number;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Npfca1_DurMinPalrTx
         */
        dureeMinimumPalierTaux: number;
        /**
         * Npfca2_DurPalrTx
         */
        dureePalierTaux: number;
        /**
         * Npfca4_DurPalrTx
         */
        dureePalierTaux1: number;
        /**
         * Ctfctb_TypeRemb
         */
        typeRemboursement: number;
        /**
         * Ctfcin_CodeTypeTxIntr
         */
        codeTypeTauxIntr: number;
        /**
         * Cdfcin_CodeIndc
         */
        codeIndice: string;
        /**
         * Txfci1_TxIntr
         */
        tauxIntr: number;
        /**
         * Txfci2_TxIntr
         */
        tauxIntr1: number;
        /**
         * Txfci3_TxIntr
         */
        tauxIntr2: number;
        /**
         * Ctfcpg_CodeTypeTxPrgrEchn
         */
        codeTypeTauxProgressifEcheance: number;
        /**
         * Pefcpg_PerdicApplPrgrEchn
         */
        periodiciteApplicationProgressifEcheance: number;
        /**
         * Txfce1_TxPrgrEchn
         */
        tauxProgressifEcheance: number;
        /**
         * Txfce2_TxPrgrEchn
         */
        tauxProgressifEcheance1: number;
        /**
         * Txfce3_TxPrgrEchn
         */
        tauxProgressifEcheance2: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        codeFamilleProduit: string;
        numeroRelationProduit: string;
        codeTypePhase: string;
        numeroRelatifPhase: number;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.ParametrageApplicatif {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScParamApplicatif extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Idfast_IdntElmtStrcInstr
         */
        idElementStructureInstruction: string;
        /**
         * Cdfcpf_CodeParmApplf
         */
        codeParametreApplicatif: string;
        /**
         * Ddftva_DateDebuVald
         * Type date au format yyyy-MM-dd
         */
        dateDebutValidite: string;
        /**
         * Dfftva_DateFinVald
         * Type date au format yyyy-MM-dd
         */
        dateFinValidite: string;
        /**
         * Lbftpa_LiblParm
         */
        libelleParametre: string;
        /**
         * Ctfcpa_CodeTypeParm
         */
        codeTypeParametre: string;
        /**
         * Mtftpa_MtParmMt
         */
        montantParametreMontant: number;
        /**
         * Npfcpp_DurDunParm
         */
        dureeDunParametre: number;
        /**
         * Dtftpa_DateParmDate
         * Type date au format yyyy-MM-dd
         */
        dateParametreDate: string;
        /**
         * Txftt1_TxParmTx
         */
        tauxParametreTaux: number;
        /**
         * Llficl_ValrParm
         */
        valeurParametre: string;
        /**
         * Cdfcnv_CodeVersNeo
         */
        codeVersementNEO: string;
        /**
         * Cdfcnl_CodeRelsNeo
         */
        codeReleaseNEO: string;
        /**
         * VersParm
         */
        versementParametre: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.ParametreEtablissement {
    interface IScElement {
    }
    interface IScParam extends IScElement {
        /**
         * LibelleParam
         */
        libelleParam: string;
        /**
         * ValeurParam
         */
        valeurParam: string;
    }
}

declare namespace ICRest.CreditParametre.Models.ParametreRubrique {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScAdrParamRubrique extends IScElement {
        /**
         * Idfand_NomDonnMcd
         */
        nomDonneurMCD: string;
        /**
         * Ctfmod_OrigDonn
         */
        origineDonneur: number;
        /**
         * Cdfmhf_CarcAffcRubrHabt
         */
        caracteristiqueAffcRubriqueHabitation: number;
        /**
         * Cdfmcf_CarcAffcRubrConso
         */
        caracteristiqueAffcRubriqueConsommation: number;
        /**
         * Cdfmtf_CarcAffcRubrTrsr
         */
        caracteristiqueAffcRubriqueTresorerie: number;
        /**
         * Cdfmdf_UtlsValrParDeft
         */
        utilisationValeurParDeft: number;
        /**
         * Lbfmdf_ValrParDeft
         */
        valeurParDeft: string;
        /**
         * Mtfmdf_MtParDeft
         */
        montantParDeft: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Params {
    interface IListerInfoAgentParams {
        codeCategorieEmprunteur: string;
        codeTypeElementStructure: string;
        identifiantElementStructure: string;
        identifiantEntiteConnecte: string;
        parametreHabilitationTransfert: string;
    }
    interface IListerParametreEtablissement {
        codeEtablissement: number;
        dateDeTraitement: string;
        versionWsdl: number;
    }
}

declare namespace ICRest.CreditParametre.Models.RegimeMatrimonial {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScRegimeMatrimonial extends IScElement {
        /**
         * Cdfprm_CodeRegmMatr
         */
        codeRegimeMatrimonial: string;
        /**
         * Lbfprm_LiblRegmMatr
         */
        libelleRegimeMatrimonial: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.RemboursementAnticipe {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScRemboursementAnticipe extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Nofcmc_NumrModlRa
         */
        numeroModeleRa: number;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Idfcrc_IdntCondRa
         */
        idConditionRa: string;
        /**
         * Idfcrm_IdntModlCalcIndmRa
         */
        idModeleCalculIndemniteRa: string;
        /**
         * Txfcrm_PourAssoCalcModlRa
         */
        pourAssociationCalculModeleRa: number;
        /**
         * Txfcrr_PourAssoReglAutrRa
         */
        pourAssociationRegleAutreRa: number;
        /**
         * Txfcsr_SucouTx
         */
        sucouTaux: number;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Cdfcar_CdAutrRa
         */
        codeAutreRa: number;
        /**
         * Cdfcpa_CdAutrRaPart
         */
        codeAutreRaPart: number;
        /**
         * Cdfcrp_CdAutrRaPref
         */
        codeAutreRaPref: number;
        /**
         * Cdfctr_CdDateDebuAutrRa
         */
        codeDateDebutAutreRa: string;
        /**
         * Ctfcrc_CdModCalcTaSuiteARa
         */
        codeModCalcultaSuiteARa: number;
        /**
         * Nrfcra_CdNumrReglAutrRa
         */
        codeNumeroRegleAutreRa: string;
        /**
         * Cdfcsc_CdCompLoi
         */
        codeCompLoi: number;
        /**
         * Ctfcri_CdModeCalcIndemRa
         */
        codeModeCalculIndemRa: number;
        /**
         * Nrfccr_CdNumReglCalcAccs
         */
        codeNumeroRegleCalculAccessoire: string;
        /**
         * Tpfcac_TxMinAccs
         */
        tauxMinimumAccessoire: number;
        /**
         * Tsfcac_TxMaxAccs
         */
        tauxMaximumAccessoire: number;
        /**
         * Txfcac_TxConsAccs
         */
        tauxConsolideAccessoire: number;
        /**
         * Cdfccp_CdIntrCompRa
         */
        codeIntrCompRa: number;
        /**
         * DetailModalite
         */
        detailModalite: string;
        /**
         * LibelleStandard
         */
        libelleStandard: string;
        /**
         * Cdfcrt_CdAutrRaTotInfMtMin
         */
        codeAutrRaTotalInferieurMntMini: number;
        /**
         * Ctfcas_CdTypeAsstCalcAccs
         */
        codeTypeAssietteCalcAccessoire: string;
        /**
         * Ctfcra_CdTypeAsstMtMinRa
         */
        codeTypeAssietteMntantMinimumRa: number;
        /**
         * Txfcra_PctMtMinRaAutr
         */
        pourcentageMntantMinimumRaAutre: number;
    }
    interface IListerRemboursementAnticipeRequest {
        dateTraitement: string;
        codeProduit: string;
        controle: boolean;
        sousclasseCriteresAccessoire: IScCriteresAcces;
        numeroProduit: string;
        codeInteretCompensateurRA: number;
        typeLoi: number;
        versionWsdl: number;
    }
}

declare namespace ICRest.CreditParametre.Models.Reserves {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScClausesDeReservesAssurance extends IScElement {
        /**
         * Cdfarv_CodeResr
         */
        codeResr: number;
        /**
         * Lbfarv_LiblResrExcl
         */
        libelleResrExclusif: string;
        /**
         * Lcfarv_LiblCrtResrExcl
         */
        libelleCreationResrExclusif: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.RisqueEpargne {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScAdrRisqueEpargne extends IScElement {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Lbfmpr_LiblFamlPrdtAdr
         */
        libelleFamilleProduitAdresse: string;
        /**
         * Cdfmce_CodePrdtCeHorsCe
         */
        codeProduitCEHorsCE: number;
        /**
         * Ctfmep_CodeTypeEparLiqd
         */
        codeTypeEpargneLiquide: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.SuivisPlanifies {
    type IAnyType = any;
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScSuivisPlanifies extends IScElement {
        /**
         * Ctfcrv_CodeTypeSuivPlnf
         */
        codeTypeSuivantPlafond: string;
        /**
         * Cifcai_CodeSuivPlnfAuto
         */
        codeSuivantPlafondAutomatique: number;
        /**
         * Cifcpd_CodePosmtParDeft
         */
        codePositionnementParDeft: number;
        /**
         * Cifcpe_CodeSuivPlnfPerdq
         */
        codeSuivantPlafondPeriodique: number;
        /**
         * Npfcrw_NbSuivPlnf
         */
        nombreSuivantPlafond: number;
        /**
         * Ptfcrv_PerdicSuivPlnf
         */
        periodiciteSuivantPlafond: number;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Npfcrx_DelaiDeclt
         */
        delaiDeclaration: number;
        /**
         * Ptfcrx_PerdicDelaiDeclt
         */
        periodiciteDelaiDeclaration: number;
        /**
         * Ctfcrw_CodeCatgSuivPlnf
         */
        codeCategorieSuivantPlafond: string;
        /**
         * Llfcrv_LiblLongSuivPlnf
         */
        libelleLongSuivantPlafond: string;
        /**
         * Lcfcrv_LiblCrtSuivPlnf
         */
        libelleCreationSuivantPlafond: string;
        /**
         * Ctfcrx_CodeAffecSuivPlan
         */
        codeAffectationSuivantPlan: number;
        /**
         * Idfccl_IdntClse
         */
        idClasse: string;
        /**
         * Llfccl_TitrClse
         */
        titreClasse: string;
        /**
         * Lbfccl_LiblClse
         */
        libelleClasse: string;
        /**
         * Ctfcrd_CodeReglDeclt
         */
        codeRegleDeclaration: string;
        /**
         * Llfcrd_LiblLongReglDeclt
         */
        libelleLongRegleDeclaration: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        codeFamilleProduit: string;
        numeroRelationProduit: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.TypeAssurance {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScTypeAssurance extends IScElement {
        /**
         * Ctfcaa_CodeTypeAssr
         */
        codeTypeAssurance: string;
        /**
         * Llfcaa_LiblTypeAssr
         */
        libelleTypeAssurance: string;
        /**
         * Cdfcoa_CodeNatrEnttAssr
         */
        codeNatureEntiteAssurance: number;
        /**
         * Lcfcaa_LiblCrtTypeAssr
         */
        libelleCreationTypeAssurance: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.TypeCharge {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScTypeCharge extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Ctfpch_TypeChrg
         */
        typeCharge: string;
        /**
         * Lbfpch_LiblChrg
         */
        libelleCharge: string;
        /**
         * Cdfpch_CodeSignChrg
         */
        codeSigneCharge: number;
        /**
         * Txfmrc_TxPondRessChrg
         */
        tauxPondereRessourceCharge: number;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Cdfpcu_CodeUsgTyplChrg
         */
        codeUsageTypologieCharge: number;
        /**
         * Ctfps1_TypRess
         */
        typeRessource: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.TypeDuree {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScParamTypeDuree extends IScElement {
        /**
         * Ctfals_TypeLoiScrv
         */
        typeLoiScrivener: number;
        /**
         * Ddftva_DateDebuVald
         * Type date au format yyyy-MM-dd
         */
        dateDebutValidite: string;
        /**
         * Dfftva_DateFinVald
         * Type date au format yyyy-MM-dd
         */
        dateFinValidite: string;
        /**
         * Lbftpa_LiblParm
         */
        libelleParametre: string;
        /**
         * Npftdj_DurJourLoiScrv
         */
        dureeJourLoiScrivener: number;
        /**
         * Npftvi_DelaiMiniVerstImed
         */
        delaiMinimumVersementImed: number;
        /**
         * Npftao_DelaiMiniDacc
         */
        delaiMinimumDacc: number;
        /**
         * Npfart_DelaiRtrac
         */
        delaiRtrac: number;
        /**
         * Dtfccr_DateCrtn
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Cifttv_CodeTechVent
         */
        codeTechniqueVent: number;
        /**
         * Npftvn_DelaiMiniVerstImed
         */
        delaiMinimumVersementImed1: number;
        /**
         * Ctfttc_CodeTypeCalc
         */
        codeTypeCalcul: number;
        /**
         * Ciftre_CodeRedcDelaiRtrac
         */
        codeReductionDelaiRtrac: number;
    }
    interface IListerParamTypeDureeRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.TypeFraisGarantie {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScTypesDeFraisGarantie extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Cdfcng_CodeNatrGarn
         */
        codeNatureGarantie: string;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Cdfcao_CodeAccsObgt
         */
        codeAccessoireObligatoire: number;
        /**
         * Ctfcca_CodeModeCalcAccs
         */
        codeModeCalculAccessoire: number;
        /**
         * Nrfccr_NumrReglCalcAccs
         */
        numeroRegleCalculAccessoire: string;
        /**
         * Mtfcac_MtConsAccs
         */
        montantConsolideAccessoire: number;
        /**
         * Mpfcap_MtMiniPlagAccs
         */
        montantMinimumPlageAccessoire: number;
        /**
         * Msfcap_MtMaxiPlagAccs
         */
        montantMaximumPlageAccessoire: number;
        /**
         * Ctfcas_CodeTypeAsstCalcAccs
         */
        codeTypeAssietteCalculAccessoire: string;
        /**
         * Mtfcmx_MtPlfnTrchCalcAccs
         */
        montantPlafondTrancheCalculAccessoire: number;
        /**
         * Txfcac_TxConsAccs
         */
        tauxConsolideAccessoire: number;
        /**
         * Tpfcac_TxMiniAccs
         */
        tauxMinimumAccessoire: number;
        /**
         * Tsfcac_TxMaxiAccs
         */
        tauxMaximumAccessoire: number;
        /**
         * Mtmxc1_MtPlfnTrchCalcAccs
         */
        montantPlafondTrancheCalculAccessoire1: number;
        /**
         * Txfcl1_TxElmt
         */
        tauxElement: number;
        /**
         * Tpfca1_TxMiniAccs
         */
        tauxMinimumAccessoire1: number;
        /**
         * Tsfca1_TxMaxiAccs
         */
        tauxMaximumAccessoire1: number;
        /**
         * Mtmxc2_MtPlfnTrchCalcAccs
         */
        montantPlafondTrancheCalculAccessoire2: number;
        /**
         * Txfcl2_TxElmt
         */
        tauxElement1: number;
        /**
         * Tpfca2_TxMiniAccs
         */
        tauxMinimumAccessoire2: number;
        /**
         * Tsfca2_TxMaxiAccs
         */
        tauxMaximumAccessoire2: number;
        /**
         * Mtmxc3_MtPlfnTrchCalcAccs
         */
        montantPlafondTrancheCalculAccessoire3: number;
        /**
         * Txfcl3_TxElmt
         */
        tauxElement2: number;
        /**
         * Tpfca3_TxMiniAccs
         */
        tauxMinimumAccessoire3: number;
        /**
         * Tsfca3_TxMaxiAccs
         */
        tauxMaximumAccessoire3: number;
        /**
         * Mtmxc4_MtPlfnTrchCalcAccs
         */
        montantPlafondTrancheCalculAccessoire4: number;
        /**
         * Txfcl4_TxElmt
         */
        tauxElement3: number;
        /**
         * Tpfca4_TxMiniAccs
         */
        tauxMinimumAccessoire4: number;
        /**
         * Tsfca4_TxMaxiAccs
         */
        tauxMaximumAccessoire4: number;
        /**
         * Mpfcac_MtMiniAccsCalc
         */
        montantMinimumAccessoireCalcul: number;
        /**
         * Msfcac_MtMaxiAccsCalc
         */
        montantMaximumAccessoireCalcul: number;
        /**
         * Nrfcmr_NumrReglAppliAccs
         */
        numeroRegleApplicationAccessoire: string;
        /**
         * Nrfcda_ReglDateDebuApplAccs
         */
        regleDateDebutApplicationAccessoire: string;
        /**
         * Nrfcpa_ReglEvnmDecl1ErAppl
         */
        regleEvenementDeclaration1ErApplication: string;
        /**
         * Pefcac_PerdicAppliAccs
         */
        periodiciteApplicationAccessoire: number;
        /**
         * Cdfceh_CodeRecvAcc
         */
        codeRecouvrementAccessoire: number;
        /**
         * Pefcap_UnitDurApplAccs
         */
        uniteDureeApplicationAccessoire: number;
        /**
         * Npfcap_DurAppliAccs
         */
        dureeApplicationAccessoire: number;
        /**
         * Nrfcap_ReglApplAccsAprd
         */
        regleApplicationAccessoireAprd: string;
        /**
         * Cdfcat_CodeAccsCalcTeg
         */
        codeAccessoireCalculteg: number;
        /**
         * Cdfcap_CodeApplEchn
         */
        codeApplicationEcheance: number;
        /**
         * Cdfccm_CdCommIntvExtn
         */
        codeCommissionIntervenantExterne: number;
        /**
         * Cdfctx_ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * Tsfcff_FrctFinnMaxi
         */
        fractionFinancierMaximum: number;
        /**
         * Ctfcai_CodeCompAccsInstr
         */
        codeCompAccessoireInstruction: number;
        /**
         * Ctfcaw_CodeCompAccsAvnn
         */
        codeCompAccessoireAvenant: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        codeNatureGarantie: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.TypeReglement {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScTypeReglement extends IScElement {
        /**
         * Cdfdrg_CodeModeRegl
         */
        codeModeRegle: string;
        /**
         * Llmreg_LiblLongModeRegl
         */
        libelleLongModeRegle: string;
        /**
         * Lcfdrg_LiblCrtModeRegl
         */
        libelleCreationModeRegle: string;
        /**
         * Ctfctd_CodeTypeDomc
         */
        codeTypeDomiciliation: string;
        /**
         * Cdfcur_CodeUtlsModeRegl
         */
        codeUtilisationModeRegle: number;
        /**
         * Cdfdmt_CodeModeTrt
         */
        codeModeTraitement: string;
        /**
         * Npfcrg_DelaiExctModeRegl
         */
        delaiExactModeRegle: number;
        /**
         * Npfdpa_DelaiRetrPaie
         */
        delaiRetardPaiement: number;
        /**
         * Cdfcrm_CodeModeExctRegl
         */
        codeModeExactRegle: number;
        /**
         * Cdfcri_CodeReglInte
         */
        codeRegleInterieur: number;
        /**
         * Cdfcrd_CodeDomnExctRegl
         */
        codeDomaineExactRegle: string;
        /**
         * Cdmre1_CodeModeReglCompt
         */
        codeModeRegleComptable: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Cdfcrg_CodeRegrEchn
         */
        codeRegrEcheance: number;
        /**
         * Npfdra_DelaiRetrPaieRa
         */
        delaiRetardPaiementRa: number;
        /**
         * Ddftva_DateDebuVald
         * Type date au format yyyy-MM-dd
         */
        dateDebutValidite: string;
        /**
         * Dfftva_DateFinVald
         * Type date au format yyyy-MM-dd
         */
        dateFinValidite: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.TypeRessource {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScTypeRessource extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Lbfpre_CommRess
         */
        commissionRessource: string;
        /**
         * Cdfpre_CodeSignRess
         */
        codeSigneRessource: number;
        /**
         * Txfmrc_TxPondRessChrg
         */
        tauxPondereRessourceCharge: number;
        /**
         * Cdfpru_CodeUsgTyplRess
         */
        codeUsageTypologieRessource: number;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroDordreDeClasse: number;
        /**
         * Ctfps1_TypRess
         */
        typeDeRessource: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        codeEtablissement: number;
    }
}

declare namespace ICRest.CreditParametre.Models.TypeRole {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScTypeRole extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Ctfprp_TypeRolePers
         */
        typeRolePersonne: string;
        /**
         * Lbfprp_RoleLint
         */
        roleLint: string;
        /**
         * Cdfdin_CodeValrLogl
         */
        codeValeurLogiciel: number;
        /**
         * Ctfapr_CodeTypeProc
         */
        codeTypeProcedure: number;
        /**
         * Ctfdce_CodeTypeTablCent
         */
        codeTypeTableCentral: number;
        /**
         * Cdfdid_CodeIntfInstGest
         */
        codeIntfInstructionGestion: number;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.CreditParametre.Models.TypologiesInstruction {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScTypologiesInstruction extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Ctfiaa_TypeTypl
         */
        typeTypologie: string;
        /**
         * Cdfiaa_CodeTypl
         */
        codeTypologie: string;
        /**
         * Lbfiaa_Inttl
         */
        initial: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        criteresAccess: IScCriteresAcces;
        typeDeTypologie: string;
    }
}

declare namespace ICRest.CreditParametre.Services {
    class CreditParametreService implements ICreditParametreService {
        private restService;
        private cacheService;
        static $inject: Array<string>;
        constructor(restService: ICRest.Services.IRestService, cacheService: ICRest.Services.Common.ICacheService);
        chargerProduitFinancier(dateDeTraitement: string, codeEtablissement: number, identifiantProduitFinancier: string): ng.IPromise<Models.ChargerProduitFinancier.IScProduitFinancier>;
        listerTypeObjetReglemente(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.ListerTypeObjetReglemente.IScTypeObjetReglemente[]>;
        /**
         * Liste les TOCs et les TORs associé
         * @param dateDeTraitement Date de traitement
         * @param natureProjet Le type de nature du projet
         */
        listerTypeObjetCommercialiseToc(dateDeTraitement: string, natureProjet: number): ng.IPromise<Models.ObjetCommercialiseToc.IScTypeObjetCommercialiseToc[]>;
        listerLienObjFinanceObjSousJacent(dateDeTraitement: string): ng.IPromise<Models.ListerLienObjFinanceObjSousJacent.IScLienObjetFinanceObjetSousJacent[]>;
        listerTypeObjetCommercial(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.ListerTypeObjetCommercial.IScTypeObjetCommercialiseToc[]>;
        listerAdrParamRubrique(dateDeTraitement: string): ng.IPromise<Models.ParametreRubrique.IScAdrParamRubrique[]>;
        listerLocalites(codeEtablissement: number, dateTraitement: string, codePostaux: string[], localites: string[]): ng.IPromise<Models.Localites.IScLocalite[]>;
        listerTiers(dateTraitement: string, codeEtablissement: string, typeRolePersonne: string, intitule: string, codePostal: string): ng.IPromise<Modeles.listermodtierstyprol.IScModalitesTiersParTypeDeRole[]>;
        /**
         * Frais et accessoires : Rôles du tiers pour l'accessoire complémentaire
         * @param {string} codeSousTypeAccessoire
         */
        listerRoleTiers(idCaisseEpargne: number, codeSousTAccessoireComplement: string, typeRolePersonne: string, roleLint: string): ng.IPromise<Array<Modeles.listerModTypeDeRoleTiersParAcces.IScModalitesTypeDeRoleTiersParAccessoire>>;
        listerTypologies(dateTraitement: string, typologie: string): ng.IPromise<Models.TypologiesInstruction.IScTypologiesInstruction[]>;
        listerCategorieEmprunteur(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.CategorieEmprunteur.IScCategorieEmprunteur[]>;
        listerConstantes(dateDeTraitement: string, identifiantChamp: string): ng.IPromise<Models.Constante.IScConstante[]>;
        listerDevise(codeEtablissement: number, dateDeTraitement: string): ng.IPromise<Models.ListerDevise.IScDevise[]>;
        listerDeviseFiltre(codeEtablissement: number, dateDeTraitement: string, rubriquesFiltre: string, valeursFiltre: string, rubriquesTri: string, valeurTri: string): ng.IPromise<Models.ListerDevise.IScDevise[]>;
        listerEtablissements(dateDeTraitement: string, filtre: string): ng.IPromise<Models.ListerEtablissements.IScParamEtablissement[]>;
        listerInfoAgent(codeCategorieEmprunteur: string, codeTypeElementStructure: string, identifiantElementStructure: string, identifiantEntiteConnecte: string, tranfertNeoActive?: string): ng.IPromise<Models.InfoAgent.IScInformationAgent>;
        listerModalitesImpayes(dateDeTraitement: string, identifiantCaisse: number, identifiantModaliteImpaye: string, codeSecteurRattachement: string, typeMarche: number, typeLoi: number): ng.IPromise<Models.ModalitesImpayes.IScModalitesDImpayesParSecteurEtCatEmprunteur[]>;
        listerParametreEtablissement(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.ParametreEtablissement.IScParam[]>;
        listerRegimeMatrimonial(dateDeTraitement: string): ng.IPromise<Models.RegimeMatrimonial.IScRegimeMatrimonial[]>;
        listerRemboursementAnticipe(dateDeTraitement: string, codeProduit: string, numeroProduit: string, codeInteretCompensateurRA: number, typeLoi: number): ng.IPromise<Models.RemboursementAnticipe.IScRemboursementAnticipe[]>;
        listerTypeCharge(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.TypeCharge.IScTypeCharge[]>;
        listerTypeDuree(dateDeTraitement: string): ng.IPromise<Models.TypeDuree.IScParamTypeDuree[]>;
        listerTypeReglement(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.TypeReglement.IScTypeReglement[]>;
        listerTypeRessource(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.TypeRessource.IScTypeRessource[]>;
        listerTypeRole(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.TypeRole.IScTypeRole[]>;
        listerRolesReversement(dateDeTraitement: string, codeSousTypeAccessoire: string): ng.IPromise<Modeles.listerModTypeDeRoleTiersParAcces.IScModalitesTypeDeRoleTiersParAccessoire[]>;
        listerBeneficiaire(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.Beneficiaire.IScBeneficiaire[]>;
        listerAdrOpposition(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.AdrOppsition.IScAdrOpposition[]>;
        listerTypeAssurance(dateTraitement: string, codeEtablissement: number): ng.IPromise<Models.TypeAssurance.IScTypeAssurance[]>;
        chargerConventionAssurance(dateTraitement: string, identifiantConvention: string, codeEtablissement: number): ng.IPromise<Models.ChargerConventionAssurance.IScConventionAssurance>;
        listerAdrParamFonctionnement(dateDeTraitement: string): ng.IPromise<Models.AdrFonctionnement.IScAdrParamFonctionnement[]>;
        listerClausesDeReservesAss(dateDeTraitement: string): ng.IPromise<Models.Reserves.IScClausesDeReservesAssurance[]>;
        listerPaliersDeProgressionParPhase(dateDeTraitement: string, codeFamilleProduit: string, numeroRelationProduit: string, codeTypePhase: string, numeroRelatifPhase: number): ng.IPromise<Models.paliersDeProgressionParPhase.IScPaliersDeProgressionParPhase[]>;
        listerPaliersDeTauxParPhase(dateDeTraitement: string, codeFamilleProduit: string, numeroRelationProduit: string, codeTypePhase: string, numeroRelatifPhase: number): ng.IPromise<Models.PaliersDeTauxParPhase.IScPaliersDeTauxParPhase[]>;
        listerNatureGarantie(dateTraitement: string, codeEtablissement: number): ng.IPromise<Models.ListerNatureGarantie.IScNatureGarantie[]>;
        listerNatureGarantieRelatifATypeObjet(dateTraitement: string, codeEtablissement: number): ng.IPromise<Models.ListerNatureGarantieRelatifATypeObjet.IScNatureGarantieRelatifATypeObjet[]>;
        listerTypeFraisAccessoire(dateTraitement: string, codeEtablissement: number): ng.IPromise<Models.ListerTypeFraisAccessoire.IScTypeAccessoire[]>;
        listerTypeFraisGarantie(dateTraitement: string, codeEtablissement: number, codeNatureGarantie: string): ng.IPromise<Models.TypeFraisGarantie.IScTypesDeFraisGarantie[]>;
        listerParametresApplicatif(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.ParametrageApplicatif.IScParamApplicatif[]>;
        /**
         * Fonction pour lister le paramétrage applicatif
         * @param date date de référence
         * @param codeEtablissement code de l'établissement
         * @param rubriquesFiltre liste des noms des colonnes de la table sur laquelle faire la recherche
         * @param valeursFiltre liste des valeurs attendues dans les colonnes sélectionnées dans la recherche
         * @param rubriquesTri liste des noms des colonnes de la table sur laquelle faire le tri
         * @param valeurTri liste des valeurs attendues dans les colonnes sélectionnées dans le tri
         */
        listerParametrageApplicatif(date: string, codeEtablissement: number, rubriquesFiltre: Array<string>, valeursFiltre: Array<any>, rubriquesTri: Array<string>, valeurTri: string): ng.IPromise<Array<Models.ParametrageApplicatif.IScParamApplicatif>>;
        listerParamGarantie(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.ListerParamGarantie.IScParamGarantie[]>;
        listerSuivisPlanifies(codeFamilleProduit: string, dateDeTraitement: string, numeroRelationProduit: string, criteresAccess: Models.SuivisPlanifies.IScCriteresAcces): ng.IPromise<Models.SuivisPlanifies.IScSuivisPlanifies[]>;
        listerCodePays(dateDeTraitement: string): ng.IPromise<CreditParametre.Models.ListerCodePays.IScCodePays[]>;
        listerLienParente(dateDeTraitement: string): ng.IPromise<Models.ListerLienParente.IScLienParente[]>;
        listerTypeLogement(dateDeTraitement: string): ng.IPromise<Models.ListerTypeLogement.IScTypeLogement[]>;
        listerParamCoutTravauxEcoPtz(dateDeTraitement: string, rubriquesFiltre: string[], valeursFiltre: string[], rubriquesTri?: string[], valeurTri?: string): ng.IPromise<Models.ListerParamCoutTravauxEcoPtz.IScParamCoutTravauxEcoPtz[]>;
        listerAdrNatureAvantageFiscal(dateTraitement: string): ng.IPromise<Models.ListerNatureAvantageFiscal.IScAdrNatureAvantageFiscal[]>;
        listerConventionsBonification(dateDeTraitement: string, identifiantProduit: string): ng.IPromise<Models.ListerConventionsBonification.IScConventionBonification[]>;
        listerEligibilites(dateDeTraitement: string, identifiantProduit: string, identifiantConvention: string): ng.IPromise<Models.ListerEligibilites.IScBonifEligibilite[]>;
        chargerEchellesVersement(dateDeTraitement: string): ng.IPromise<Models.ChargerEchellesVersement.IScEchelleVersement[]>;
    }
}

declare namespace ICRest.CreditParametre.Services {
    interface ICreditParametreService {
        /**
         * Appelle la ressource REST qui renvoie toutes les informations concernant le produit financier dont l'identifiant est passé en paramètre
         * @param dateDeTraitement
         * @param codeEtablissement
         * @param identifiantProduitFinancier
         */
        chargerProduitFinancier(dateDeTraitement: string, codeEtablissement: number, identifiantProduitFinancier: string): ng.IPromise<Models.ChargerProduitFinancier.IScProduitFinancier>;
        listerClausesDeReservesAss(dateDeTraitement: string): ng.IPromise<Models.Reserves.IScClausesDeReservesAssurance[]>;
        /**
         * Apelle la ressource REST qui renvoie la liste des TOCs (et TORs associés)
         * @param dateDeTraitement
         * @param natureProjet 0 : Pro / 1 : Conso / 2 : EPS / 3 : Immo
         */
        listerTypeObjetCommercialiseToc(dateDeTraitement: string, natureProjet: number): ng.IPromise<Models.ObjetCommercialiseToc.IScTypeObjetCommercialiseToc[]>;
        /**
         * Récupération de la liste des liens objets financés - objets sous jacent
         * @param dateDeTraitement
         */
        listerLienObjFinanceObjSousJacent(dateDeTraitement: string): ng.IPromise<Models.ListerLienObjFinanceObjSousJacent.IScLienObjetFinanceObjetSousJacent[]>;
        listerTypeObjetCommercial(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.ListerTypeObjetCommercial.IScTypeObjetCommercialiseToc[]>;
        listerTypeObjetReglemente(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.ListerTypeObjetReglemente.IScTypeObjetReglemente[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des adresses paramètre rubrique
         * @param dateDeTraitement
         */
        listerAdrParamRubrique(dateDeTraitement: string): ng.IPromise<Models.ParametreRubrique.IScAdrParamRubrique[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des typologies instruction
         */
        listerTypologies(dateTraitement: string, typologie: string): ng.IPromise<Models.TypologiesInstruction.IScTypologiesInstruction[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des localites
         */
        listerLocalites(codeEtablissement: number, dateTraitement: string, codePostaux: string[], localites: string[]): ng.IPromise<Models.Localites.IScLocalite[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des catégories d'emprunteur
         * @param dateDeTraitement
         * @param codeEtablissement
         */
        listerCategorieEmprunteur(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.CategorieEmprunteur.IScCategorieEmprunteur[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des constantes en fonction de l'identifiant passé en paramètre
         * @param dateDeTraitement
         * @param codeEtablissement
         * @param identifiantChamp
         */
        listerConstantes(dateDeTraitement: string, identifiantChamp: string): ng.IPromise<Models.Constante.IScConstante[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des types de role
         */
        listerTypeRole(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.TypeRole.IScTypeRole[]>;
        listerRolesReversement(dateTraitement: string, codeSousTypeAccessoire: string): ng.IPromise<Modeles.listerModTypeDeRoleTiersParAcces.IScModalitesTypeDeRoleTiersParAccessoire[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des types de Mod Tier
         */
        listerTiers(dateTraitement: string, codeEtablissement: string, typeRolePersonne: string, intitule: string, cp: string): ng.IPromise<Modeles.listermodtierstyprol.IScModalitesTiersParTypeDeRole[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des types de role Tier
         */
        listerRoleTiers(idCaisseEpargne: number, codeSousTAccessoireComplement: string, typeRolePersonne: string, roleLint: string): ng.IPromise<Array<Modeles.listerModTypeDeRoleTiersParAcces.IScModalitesTypeDeRoleTiersParAccessoire>>;
        /**
         * Appelle la ressource REST GET qui renvoie la liste des devises
         * @param codeEtablissement
         * @param dateDeTraitement
         */
        listerDevise(codeEtablissement: number, dateDeTraitement: string): ng.IPromise<Models.ListerDevise.IScDevise[]>;
        /**
         * Appelle la ressource REST POST qui renvoie la liste des devises
         * @param codeEtablissement
         * @param dateDeTraitement
         */
        listerDeviseFiltre(codeEtablissement: number, dateDeTraitement: string, rubriquesFiltre: string, valeursFiltre: string, rubriquesTri: string, valeurTri: string): ng.IPromise<Models.ListerDevise.IScDevise[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des établissements suivant le filtre utilisé
         * @param dateDeTraitement
         */
        listerEtablissements(dateDeTraitement: string, filtre: string): ng.IPromise<Models.ListerEtablissements.IScParamEtablissement[]>;
        /**
         * Appelle la ressource REST qui renvoie les informations d'un agent
         * @param identifiantEntiteConnecte
         * @param codeTypeElementStructure
         * @param identifiantElementStructure
         * @param codeCategorieEmprunteur
         */
        listerInfoAgent(codeCategorieEmprunteur: string, codeTypeElementStructure: string, identifiantElementStructure: string, identifiantEntiteConnecte: string, estTranfertNeoActive?: string): ng.IPromise<Models.InfoAgent.IScInformationAgent>;
        /**
         * Appelle la ressource REST qui renvoie la liste des modalités d'impayés
         * @param dateDeTraitement
         * @param identifiantCaisse
         * @param identifiantModaliteImpaye
         * @param codeSecteurRattachement
         * @param typeMarche
         * @param typeLoi
         */
        listerModalitesImpayes(dateDeTraitement: string, identifiantCaisse: number, identifiantModaliteImpaye: string, codeSecteurRattachement: string, typeMarche: number, typeLoi: number): ng.IPromise<Models.ModalitesImpayes.IScModalitesDImpayesParSecteurEtCatEmprunteur[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des paramètres de l'établissement passé en paramètre
         * @param dateDeTraitement
         * @param codeEtablissement
         */
        listerParametreEtablissement(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.ParametreEtablissement.IScParam[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des régimes matrimonial
         * @param dateDeTraitement
         * @param codeEtablissement
         */
        listerRegimeMatrimonial(dateDeTraitement: string): ng.IPromise<Models.RegimeMatrimonial.IScRegimeMatrimonial[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des modalités de remboursement anticipé du produit passé en paramètre
         * @param dateDeTraitement
         * @param codeProduit
         * @param numeroProduit
         * @param codeInteretCompensateurRA
         * @param typeLoi
         */
        listerRemboursementAnticipe(dateDeTraitement: string, codeProduit: string, numeroProduit: string, codeInteretCompensateurRA: number, typeLoi: number): ng.IPromise<Models.RemboursementAnticipe.IScRemboursementAnticipe[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des types de charges
         * @param dateDeTraitement
         * @param codeEtablissement
         */
        listerTypeCharge(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.TypeCharge.IScTypeCharge[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des types "durée"
         * @param dateDeTraitement
         */
        listerTypeDuree(dateDeTraitement: string): ng.IPromise<Models.TypeDuree.IScParamTypeDuree[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des types de règlements
         * @param dateDeTraitement
         * @param codeEtablissement
         */
        listerTypeReglement(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.TypeReglement.IScTypeReglement[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des types de ressources
         * @param dateDeTraitement
         * @param codeEtablissement
         */
        listerTypeRessource(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.TypeRessource.IScTypeRessource[]>;
        /** Appelle la ressource REST qui renvoie la liste des bénéficiaires */
        listerBeneficiaire(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.Beneficiaire.IScBeneficiaire[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des oppositions
         * @param dateDeTraitement
         * @param codeEtablissement
         */
        listerAdrOpposition(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.AdrOppsition.IScAdrOpposition[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des oppositions
         * @param dateDeTraitement
         * @param codeEtablissement
         */
        listerAdrParamFonctionnement(dateDeTraitement: string): ng.IPromise<Models.AdrFonctionnement.IScAdrParamFonctionnement[]>;
        /** Appelle la ressource REST qui renvoie la liste des types d'assurance */
        listerTypeAssurance(dateTraitement: string, codeEtablissement: number): ng.IPromise<Models.TypeAssurance.IScTypeAssurance[]>;
        chargerConventionAssurance(dateTraitement: string, identifiantConvention: string, codeEtablissement: number): ng.IPromise<Models.ChargerConventionAssurance.IScConventionAssurance>;
        listerPaliersDeProgressionParPhase(dateDeTraitement: string, codeFamilleProduit: string, numeroRelationProduit: string, codeTypePhase: string, numeroRelatifPhase: number): ng.IPromise<Models.paliersDeProgressionParPhase.IScPaliersDeProgressionParPhase[]>;
        listerPaliersDeTauxParPhase(dateDeTraitement: string, codeFamilleProduit: string, numeroRelationProduit: string, codeTypePhase: string, numeroRelatifPhase: number): ng.IPromise<Models.PaliersDeTauxParPhase.IScPaliersDeTauxParPhase[]>;
        /**
         * Liste toutes les natures de garanties
         * @param dateTraitement
         * @param codeEtablissement
         */
        listerNatureGarantie(dateTraitement: string, codeEtablissement: number): ng.IPromise<Models.ListerNatureGarantie.IScNatureGarantie[]>;
        /**
         * Liste toutes les natures de garanties
         * @param dateTraitement
         * @param codeEtablissement
         */
        listerNatureGarantieRelatifATypeObjet(dateTraitement: string, codeEtablissement: number): ng.IPromise<Models.ListerNatureGarantieRelatifATypeObjet.IScNatureGarantieRelatifATypeObjet[]>;
        /**
         * Liste les types de frais accessoires
         * @param dateTraitement
         * @param codeEtablissement
         */
        listerTypeFraisAccessoire(dateTraitement: string, codeEtablissement: number): ng.IPromise<Models.ListerTypeFraisAccessoire.IScTypeAccessoire[]>;
        /**
         * Liste les types de frais de garantie
         * @param dateTraitement
         * @param codeEtablissement
         * @param codeNatureGarantie
         */
        listerTypeFraisGarantie(dateTraitement: string, codeEtablissement: number, codeNatureGarantie: string): ng.IPromise<Models.TypeFraisGarantie.IScTypesDeFraisGarantie[]>;
        /**
         * Appelle la ressource REST qui renvoie la liste des paramètres applicatifs
         * @param dateDeTraitement
         * @param codeEtablissement
         */
        listerParametresApplicatif(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.ParametrageApplicatif.IScParamApplicatif[]>;
        /**
         * Interface de la fonction pour lister le paramétrage applicatif
         * @param date
         * @param codeEtablissement
         * @param rubriquesFiltre
         * @param valeursFiltre
         * @param rubriquesTri
         * @param valeurTri
         */
        listerParametrageApplicatif(date: string, codeEtablissement: number, rubriquesFiltre: Array<string>, valeursFiltre: Array<any>, rubriquesTri: Array<string>, valeurTri: string): ng.IPromise<Array<Models.ParametrageApplicatif.IScParamApplicatif>>;
        listerParamGarantie(dateDeTraitement: string, codeEtablissement: number): ng.IPromise<Models.ListerParamGarantie.IScParamGarantie[]>;
        listerCodePays(dateDeTraitement: string): ng.IPromise<CreditParametre.Models.ListerCodePays.IScCodePays[]>;
        listerSuivisPlanifies(codeFamilleProduit: string, dateDeTraitement: string, numeroRelationProduit: string, criteresAccess: Models.SuivisPlanifies.IScCriteresAcces): ng.IPromise<Models.SuivisPlanifies.IScSuivisPlanifies[]>;
        listerLienParente(dateDeTraitement: string): ng.IPromise<Models.ListerLienParente.IScLienParente[]>;
        listerTypeLogement(dateDeTraitement: string): ng.IPromise<Models.ListerTypeLogement.IScTypeLogement[]>;
        /**
         * Permet de récupérer les champs à encoder pour le détail des travaux du projet
         * @param date
         * @param rubriquesFiltre
         * @param valeursFiltre
         * @param rubriquesTri
         * @param valeurTri
         */
        listerParamCoutTravauxEcoPtz(dateDeTraitement: string, rubriquesFiltre: string[], valeursFiltre: any[], rubriquesTri?: string[], valeurTri?: string): ng.IPromise<Models.ListerParamCoutTravauxEcoPtz.IScParamCoutTravauxEcoPtz[]>;
        /**
         * Retourne la liste des natures d'avantage fiscal
         * @param dateTraitement
         */
        listerAdrNatureAvantageFiscal(dateTraitement: string): ng.IPromise<Models.ListerNatureAvantageFiscal.IScAdrNatureAvantageFiscal[]>;
        /**
         * Récupération de la liste des conventions bonification selon l'id du produitFinancier
         * @param dateDeTraitement
         * @param identifiantProduit
         */
        listerConventionsBonification(dateDeTraitement: string, identifiantProduit: string): ng.IPromise<Models.ListerConventionsBonification.IScConventionBonification[]>;
        /**
         * Récupération de la liste des règles d'éligibilités pour un produitFinancier et une convention sélectionnée
         * @param dateDeTraitement
         * @param identifiantProduit
         * @param identifiantConvention
         */
        listerEligibilites(dateDeTraitement: string, identifiantProduit: string, identifiantConvention: string): ng.IPromise<Models.ListerEligibilites.IScBonifEligibilite[]>;
        /**
         * Récupération de la liste des échelles de versement
         * @param dateDeTraitement
         */
        chargerEchellesVersement(dateDeTraitement: string): ng.IPromise<Models.ChargerEchellesVersement.IScEchelleVersement[]>;
    }
}

declare namespace ICRest.Modeles.CalculerCaracteristiqueCredit {
    interface IResultatCalculSimple {
        /**
         * Capt
         */
        capital: number;
        /**
         * Echn
         */
        echeance: number;
        /**
         * Tx
         */
        taux: number;
        /**
         * TypeTx
         */
        typeTaux: number;
        /**
         * NbPerd
         */
        nombrePeriode: number;
        /**
         * Perdic
         */
        periodicite: number;
        /**
         * CoutTotl
         */
        coutTotal: number;
    }
    interface IEcheanceTA {
        /**
         * MtTotlEchn
         */
        montantTotalEcheance: number;
        /**
         * MtIntrEchn
         */
        montantIntrEcheance: number;
        /**
         * MtAmrtEchn
         */
        montantAmortissementEcheance: number;
        /**
         * MtCRDSurEchn
         */
        montantCRDSurEcheance: number;
        /**
         * MtAccsPerdqEchn
         */
        montantAccessoirePeriodiqueEcheance: number;
        /**
         * MtIntrRepr
         */
        montantIntrRepr: number;
        /**
         * DateEchn
         * Type date au format yyyy-MM-dd
         */
        dateEcheance: string;
        /**
         * NumrPhasEchn
         */
        numeroPhaseEcheance: number;
    }
    interface IResultatCalculAvance extends IResultatCalculSimple {
        /**
         * TegProp
         */
        tegProp: number;
        /**
         * TegActu
         */
        tegActu: number;
        /**
         * ListMontAccsTa
         */
        listeMontantAccessoireta: Array<number>;
        /**
         * TxUsur
         */
        tauxUsur: number;
        /**
         * MtPremEchnHorsAssr
         */
        montantPremierEcheanceHorsAssurance: number;
        /**
         * MtPremEchnAvecAssr
         */
        montantPremierEcheanceAvecAssurance: number;
        /**
         * ListEchnTablAmrt
         */
        listeEcheanceTableAmortissement: Array<IEcheanceTA>;
    }
    interface ICalculerCaracteristiqueCreditRequest {
        capitalCredit: number;
        echeanceCredit: number;
        tauxCredit: number;
        typeTaux: number;
        nombrePeriode: number;
        periodicite: number;
    }
}

declare namespace ICRest.Modeles.LirePersonne {
    interface IResultat {
        personnePM: IPersonnePM;
        personnePP: IPersonnePP;
        erreurTp: IErreurTp;
    }
    interface IErreurTp {
        /**
         * Code Retour
         */
        codeRetour: number;
        /**
         * Code Domaine de Gestion PACBASE
         */
        codeDomaineGestionPacbase: string;
        /**
         * Code libelle erreur008
         */
        codeLibelleErreur008: string;
        /**
         * Libelle Message Erreur sur 80 car.
         */
        libelleReponse: string;
    }
    interface IPersonnePP {
        /**
         * IDENTIFIANT PERSONNE
         */
        identifiantPersonne: string;
        /**
         * CODE TYPE DE PERSONNE
         */
        codeTypePersonne: string;
        /**
         * CODE SEXE DE LA PERSONNE
         */
        codeSexePersonne: string;
        /**
         * CODE TITRE DE CIVILITE
         */
        codeTitreCivilite: string;
        /**
         * NOM OU RAISON SOCIALE
         */
        nomRaisonSociale: string;
        /**
         * PRENOMS
         */
        prenoms: string;
        /**
         * NOM DE JEUNE FILLE
         */
        nomJeuneFille: string;
        /**
         * DATE DE NAISSANCE
         * Type date au format yyyy-MM-dd
         */
        dateNaissance: string;
        /**
         * LIEU DE NAISSANCE
         */
        lieuNaissance: string;
        /**
         * Code INSEE pays de naissance
         */
        codeInseePaysNaissance: string;
        /**
         * Code INSEE pays de nationalité
         */
        codeInseePaysNationalite: string;
        /**
         * CODE NATIONALITE
         */
        codeNationalite: string;
        /**
         * CODE CAPACITE JURIDIQUE
         */
        codeCapaciteJuridique: string;
        /**
         * ADRESSE ligne3
         */
        adresseLigne3: string;
        /**
         * ADRESSE ligne4
         */
        adresseLigne4: string;
        /**
         * ADRESSE ligne5
         */
        adresseLigne5: string;
        /**
         * NUMERO DE TELEPHONE
         */
        numeroTelephone: string;
        /**
         * Téléphone portable
         */
        telephonePortable: string;
        /**
         * NUMERO DE TELECOPIE
         */
        numeroTelecopie: string;
        /**
         * adresse e-mail
         */
        adresseEMail: string;
        /**
         * CODE SITUATION FAMILIALE
         */
        codeSituationFamiliale: string;
        /**
         * DATE D EFFET SITUATION FAMILIALE
         * Type date au format yyyy-MM-dd
         */
        dateEffetSituationFamiliale: string;
        /**
         * CODE REGIME MATRIMONIAL
         */
        codeRegimeMatrimonial: string;
        /**
         * Critères de résidence
         */
        criteresResidence: string;
        /**
         * CODE MODE DE LOGEMENT
         */
        codeModeLogement: string;
        /**
         * DATE D'ENTREE DANS LES MURS
         * Type date au format yyyy-MM-dd
         */
        dateEntreeDansLesMurs: string;
        /**
         * CATEGORIE SOCIO-PROFESSIONNELLE
         */
        categorieSocioProfessionnelle: string;
        /**
         * DATE D'EFFET DE LA C.S.P.
         * Type date au format yyyy-MM-dd
         */
        dateEffetCSP: string;
        /**
         * DATE D'EMBAUCHE
         * Type date au format yyyy-MM-dd
         */
        dateEmbauche: string;
        /**
         * DATE DE FIN DE CDD
         * Type date au format yyyy-MM-dd
         */
        dateFinCdd: string;
        /**
         * CODE PRESENCE ACTIVITE SALARIEE
         */
        codePresenceActiviteSalariee: string;
        /**
         * CODE TYPE CONTRAT EMBAUCHE
         */
        codeTypeContratEmbauche: number;
        /**
         * CODE TYPE ACTIVITE SALARIEE
         */
        codeTypeActiviteSalariee: string;
        /**
         * CODE TYPE SECTEUR D'ACTIVITE
         */
        codeTypeSecteurActivite: string;
        /**
         * RAISON SOCIALE DE L'EMPLOYEUR
         */
        raisonSocialeLEmployeur: string;
        /**
         * CODE POSTAL DE L'EMPLOYEUR
         */
        codePostalLEmployeur: string;
        /**
         * Code APE employeur
         */
        codeApeEmployeur: string;
        /**
         * CLE BANQUE DE FRANCE
         */
        cleBanqueFrance: string;
        /**
         * CODE PERSONNEL CAISSE D'EPARGNE
         */
        codePersonnelCaisseEpargne: string;
        /**
         * DATE D'ENTREE EN RELATION
         * Type date au format yyyy-MM-dd
         */
        dateEntreeEnRelation: string;
        /**
         * CODE SALAIRE DOMICILIE EN CE
         */
        codeSalaireDomicilieEnCe: string;
        /**
         * CATEGORIE AGENT ECONOMIQUE
         */
        categorieAgentEconomique: string;
        /**
         * CATEGORIE DE CLIENTELE OU TYPE d'EC'
         */
        categorieClienteleTypeEc: string;
        /**
         * CLASSE AGENT ECONOMIQUE
         */
        classeAgentEconomique: string;
        /**
         * CODE PRESENCE EN SUIVI PERSONNALISE
         */
        codePresenceEnSuiviPersonnalise: string;
        /**
         * LIBELLE LISTE NOIRE
         */
        libelleListeNoire: string;
        /**
         * CODE SAISIE AVIS TIERS DETENTEUR
         */
        codeSaisieAvisTiersDetenteur: string;
        /**
         * CODE ARRET SUR SALAIRE
         */
        codeArretSurSalaire: string;
        /**
         * CODE DEVISE
         */
        codeDevise: string;
        /**
         * enseigne commerciale
         */
        enseigneCommerciale: string;
        /**
         * CODE A.P.E.
         */
        codeAPE: string;
        /**
         * NUMERO INSCRIPTION R.C.S.
         */
        numeroInscriptionRCS: string;
        /**
         * LIEU INSCRIPTION AU R.C.S.
         */
        lieuInscriptionRCS: string;
        /**
         * CODE PAYS DE RESIDENCE EMPRUNTEUR
         */
        codePaysResidenceEmprunteur: string;
        /**
         * CODE PAYS DE LOCALISATION
         */
        codePaysLocalisation: string;
        /**
         * CODE PROFIL
         */
        codeProfil: string;
        /**
         * Code Type Capacité Juridique
         */
        codeTypeCapaciteJuridique: string;
        /**
         * Code NACE INSEE
         */
        codeNaceInsee: string;
        /**
         * Code statut PPE
         */
        codeStatutPpe: string;
        /**
         * Code Indic retour Auto-Déclar PPE
         */
        codeIndicRetourAutoDeclarPpe: string;
        /**
         * Code Niveau Watch-List Locale
         */
        codeNiveauWatchListLocale: string;
        /**
         * Code Niveau Watch-List Nationale
         */
        codeNiveauWatchListNationale: string;
        /**
         * Code Niveau Watch-List Banque réf
         */
        codeNiveauWatchListBanqueRef: string;
        /**
         * Code Etat Complétude dossier
         */
        codeEtatCompletudeDossier: string;
        /**
         * Code Type Personne
         */
        codeTypePersonne1: string;
        /**
         * INTITULE (Ligne 1)
         */
        intituleLigne1: string;
        /**
         * COMPLEMENT INTITULE (ligne 2)
         */
        complementIntituleLigne2: string;
        /**
         * CODE POSTAL (Ligne 6)
         */
        codePostalLigne6: string;
        /**
         * Localité (Ligne 6)
         */
        localiteLigne6: string;
        /**
         * NUMERO TELEPHONE BUREAU PARTICULIER
         */
        numTelephoneBureauParticulier: string;
        /**
         * NUMERO TELEPHONE PORTABLE PROFESSION
         */
        numTelephonePortableProfession: string;
        /**
         * IDENT ELEMENT STRUCTURE GESTIONNAIRE
         */
        idElementStructureGestionnaire: string;
        /**
         * CODE CONTENTIEUX HORS COMPTE PROFESS
         */
        codeContentieuxHorsComptePro: string;
        /**
         * Montant encours SACCEF hors opératio
         */
        montantEncoursSaccefHorsOpe: number;
    }
    interface IPersonnePM {
        /**
         * IDENTIFIANT PERSONNE
         */
        identifiantPersonne: string;
        /**
         * CODE TYPE DE PERSONNE
         */
        codeTypePersonne: string;
        /**
         * NOM OU RAISON SOCIALE
         */
        nomRaisonSociale: string;
        /**
         * NUMERO D'INSEE
         */
        numeroInsee: string;
        /**
         * FORME JURIDIQUE
         */
        formeJuridique: string;
        /**
         * TYPE DROIT DE LA PERSONNE MORALE
         */
        typeDroitPersonneMorale: string;
        /**
         * TYPE ADMINISTRATION PUBLIQUE
         */
        typeAdministrationPublique: string;
        /**
         * NUMERO INSCRIPTION R.C.S.
         */
        numeroInscriptionRCS: string;
        /**
         * DATE INSCRIPTION R.C.S.
         * Type date au format yyyy-MM-dd
         */
        dateInscriptionRCS: string;
        /**
         * LIEU INSCRIPTION AU R.C.S.
         */
        lieuInscriptionRCS: string;
        /**
         * DATE CREATION SOCIETE
         * Type date au format yyyy-MM-dd
         */
        dateCreationSociete: string;
        /**
         * MONTANT DU CAPITAL
         */
        montantCapital: number;
        /**
         * CODE A.P.E.
         */
        codeAPE: string;
        /**
         * enseigne commerciale
         */
        enseigneCommerciale: string;
        /**
         * C.A. HT EXERCICE PRECEDENT
         */
        cAhtExercicePrecedent: number;
        /**
         * NOMBRE DE SALARIES
         */
        nombreSalaries: number;
        /**
         * ADRESSE ligne3
         */
        adresseLigne3: string;
        /**
         * ADRESSE ligne4
         */
        adresseLigne4: string;
        /**
         * ADRESSE ligne5
         */
        adresseLigne5: string;
        /**
         * NUMERO DE TELEPHONE
         */
        numeroTelephone: string;
        /**
         * NUMERO DE TELECOPIE
         */
        numeroTelecopie: string;
        /**
         * adresse e-mail
         */
        adresseEMail: string;
        /**
         * CLE BANQUE DE FRANCE
         */
        cleBanqueFrance: string;
        /**
         * DATE D'ENTREE EN RELATION
         * Type date au format yyyy-MM-dd
         */
        dateEntreeEnRelation: string;
        /**
         * CATEGORIE AGENT ECONOMIQUE
         */
        categorieAgentEconomique: string;
        /**
         * CATEGORIE DE CLIENTELE OU TYPE d'EC'
         */
        categorieClienteleTypeEc: string;
        /**
         * CLASSE AGENT ECONOMIQUE
         */
        classeAgentEconomique: string;
        /**
         * CODE PRESENCE EN SUIVI PERSONNALISE
         */
        codePresenceEnSuiviPersonnalise: string;
        /**
         * Critères de résidence
         */
        criteresResidence: string;
        /**
         * Code NACE INSEE
         */
        codeNaceInsee: string;
        /**
         * Code statut PPE
         */
        codeStatutPpe: string;
        /**
         * Code Indic retour Auto-Déclar PPE
         */
        codeIndicRetourAutoDeclarPpe: string;
        /**
         * Code Niveau Watch-List Locale
         */
        codeNiveauWatchListLocale: string;
        /**
         * Code Niveau Watch-List Nationale
         */
        codeNiveauWatchListNationale: string;
        /**
         * Code Niveau Watch-List Banque réf
         */
        codeNiveauWatchListBanqueRef: string;
        /**
         * Code Etat Complétude dossier
         */
        codeEtatCompletudeDossier: string;
        /**
         * CODE PAYS DE RESIDENCE EMPRUNTEUR
         */
        codePaysResidenceEmprunteur: string;
        /**
         * Code Type Personne
         */
        codeTypePersonne1: string;
        /**
         * INTITULE (Ligne 1)
         */
        intituleLigne1: string;
        /**
         * COMPLEMENT INTITULE (ligne 2)
         */
        complementIntituleLigne2: string;
        /**
         * CODE POSTAL (Ligne 6)
         */
        codePostalLigne6: string;
        /**
         * Localité (Ligne 6)
         */
        localiteLigne6: string;
        /**
         * IDENT ELEMENT STRUCTURE GESTIONNAIRE
         */
        idElementStructureGestionnaire: string;
    }
}

declare namespace ICRest.Modeles.LirePersonne {
    interface IClientParamGetRequest {
        codeEtablissement: string;
    }
    interface IClientParamLirePersonneGetRequest extends IClientParamGetRequest {
        identifiantDossierInstruction: string;
        codeVersion: string;
        codeRelease: string;
        identifiantPersonne: string;
        numeroCarteBancaire: string;
        numeroInsee: string;
        typeRolePersonne: string;
        codeTypePersonne: string;
        idEntiteTitulaireClient: string;
        codeTypeMarche: string;
    }
}

declare namespace ICRest.CreditService.Services {
    class CreditService implements ICreditService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: ICRest.Services.IRestService);
        lirePersonne(codeEtablissement: string, idDossier: string, identifiantPersonne: string, numeroCarteBancaire: string, numeroInsee: string, typeRolePersonne: string, codeTypePersonne: string, idEntiteTitulaireClient: string, codeTypeMarche: string): ng.IPromise<Modeles.LirePersonne.IResultat[]>;
        calculerCaracteristiqueProduit(request: Modeles.CalculerCaracteristiqueCredit.ICalculerCaracteristiqueCreditRequest): ng.IPromise<Modeles.CalculerCaracteristiqueCredit.IResultatCalculSimple>;
    }
}

declare namespace ICRest.CreditService.Services {
    interface ICreditService {
        lirePersonne(codeEtablissement: string, idDossier: string, identifiantPersonne: string, numeroCarteBancaire: string, numeroInsee: string, typeRolePersonne: string, codeTypePersonne: string, idEntiteTitulaireClient: string, codeTypeMarche: string): ng.IPromise<Modeles.LirePersonne.IResultat[]>;
        calculerCaracteristiqueProduit(request: Modeles.CalculerCaracteristiqueCredit.ICalculerCaracteristiqueCreditRequest): ng.IPromise<Modeles.CalculerCaracteristiqueCredit.IResultatCalculSimple>;
    }
}

declare namespace ICRest.Modeles.DemandeFinancement {
    interface IDemande {
        idEtablissement: string;
        idDemande: string;
        listeDetailDemande: Array<IDetailDemande>;
        detailEnveloppe: IDetailEnveloppe;
        listeDetailTirage: Array<IDetailTirage>;
        listeDetailConcours: Array<IDetailConcours>;
        relationEconomique: IRelationEconomique;
        listeDetailMemo: Array<IDetailMemo>;
        listeCommentaireArgumentaire: Array<ICommentaireArgumentaire>;
        listeEtape: Array<IEtape>;
    }
    interface IResultatRecherche {
        demande: IDemande;
        /**
         * Liste des différents messages d'erreurs renvoyés par la QR sur la recherche
         */
        listeMessageErreur: Array<string>;
    }
    interface IRechercheDemande {
        /**
         * Code Recherche Par type d'Identifiant :
         * 1 - Relation
         * 2 - Personne
         * 3 - Demande
         */
        codeRechIdt: string;
        /**
         * Code Traitement :
         * 01 - Restitution des données de la demande en cours
         * 02 - Restitution des ttes les demandes closes(Pers. ou Relation) avec détail complet
         */
        codeTraitement: string;
        etablissement: string;
        idRelation: string;
        idPersonne: string;
        idDemande: string;
        /**
         * Numéro chronologique attribué par le système pour les personnes physiques ayant plusieurs activités en tant que professionnel.
         *  Il a la valeur 1 pour les personnes morales.
         */
        numChronoProf: string;
        cptEnreg: number;
        /**
         * Si positionné à 'true', récuperation libellés produits et objets présents dans la réponse
         */
        indicLibelle: boolean;
    }
    interface IDetailDemande {
        codeAvancementDemande: string;
        codeEtatDemande: string;
        libelleProjet: string;
        libelleDescriptif: string;
        creationDemande: IAction;
        duplication: IAction;
        modification: IAction;
        cloture: IAction;
        dateDernierSynchroClient: string;
        codeTypeEtape: string;
        codeIndTypeDemande: string;
        dateEngagement: string;
        dateReponse: string;
        versionApplicatif: string;
        cptEnregDemandesCloses: number;
        indicExistanceConcoursInst: string;
        cptEnregDemandesAvecConInst: number;
        codeCatDEFI: string;
    }
    interface IDuplication {
        idDemandeDuplication: string;
        codeMotifDuplication: string;
        creationDuplication: IAction;
    }
    interface IDetailEnveloppe {
        libelleDescpEnveloppe: string;
        indicEnvComplete: string;
        creationEnveloppe: IAction;
        modificationEnveloppe: IAction;
        codeDevise: string;
        mtDemande: number;
        mtDisponible: number;
        mtAccorde: number;
        duree: number;
        dateDebut: string;
        dateFin: string;
        pourcentageMargeRetenue: number;
        liblCondPart: string;
        libl2CondPart: string;
        indicEnv: string;
        codeStatus: string;
        pourcentagePartRisque: number;
    }
    interface IDetailConcours {
        idConcours: string;
        typeConcours: string;
        idPersonne: string;
        idEntiteTitulaire: string;
        numChronoPro: string;
        idTirage: string;
        lblDesignationBancaire: string;
        numCredit: string;
        numContratCredit: string;
        codeAction: string;
        idActeurCreation: string;
        idActeurModif: string;
        codeProduitServiceVariante: string;
        codeTypeProduit: string;
        codeCatProduitConcours: string;
        mtFraisDossierSaisi: number;
        codeTauxVariableIndex: string;
        codeNatureTaux: string;
        codeTauxRefinancement: string;
        tauxRefinancement: number;
        codeDevise: string;
        codeObjFinancement: string;
        liblObjetFinancement: string;
        /**
         * Cette date correspond à la date de dernière échéance du Crédit
         * Type date au format yyyy-MM-dd
         */
        dateEcheance: string;
        libl1CondPart: string;
        libl2CondPart: string;
        libl1AutresDonnees: string;
        libl2AutresDonnees: string;
        indicDonneesComplSaisies: string;
        /**
         * Notion d'Enveloppe : Ce terme regroupe la faculté de répartir un crédit sur plusieurs personnes de la
         * relation économique, et donc sur plusieurs concours.
         * Permet d'alerter le Chargé d'Affaire si non saisies.
         * Le Chargé d'Afaire peut cocher les concours qui entrent dans l'enveloppe en question.
         * L'indication sera portée dans la Fiche d'Engagement.
         * Valeurs possibles :
         *
         * 'O' Crédit reparti
         * 'N' Crédit non réparti
         */
        indicEnvGlobale: string;
        /**
         * Montant du concours au moment où la demande de financement DEFI est figée
         */
        mtDemandeConcours: number;
        /**
         * utilisation qui sera faite du crédit sollicité = part utilisée du montant global autorisé pour le crédit
         */
        mtUtiliseConcours: number;
        dateConcours: string;
        idActeurAccord: string;
        /**
         * Montant du concours accordé par la banque, identique au montant demandé ou modifié (à la baisse)
         */
        mtAccorde: number;
        dateMtAccorde: string;
        idActeurMiseEnForce: string;
        mtMisEnForce: number;
        dateMiseEnForce: string;
        /**
         * Identifiant du concours d'origine (lorsqu'un concours est crée par recopie d'un concours existant préalablement, cas des renouvellement).
         */
        idConcoursOrigine: string;
        mtOrigine: number;
        /**
         * Taux de marge conseillé déterminé par le SFNB2 afin de garantir la rentabilité fixée par le GCE pour ce type terme /
         * Capacité d'autofinancement d'opération en fonction du risque encouru. Ce taux de marge entre dans l'indicateur Raroc cible. Uniquement restitué sur les segments de marché PME.
         */
        pourcentageMargeC: number;
        /**
         * Pourcentage marge credit ROE : c'est une constante issue du référentiel CAISSE
         */
        pourcentageMargeCROE: number;
        pourcentageMargeCROEClient: number;
        /**
         * Pourcentage marge credit cible
         */
        pourcentageMargeClient: number;
        pourcentageMargeClientRoe: number;
        pourcentageMargeClientRoeClient: number;
        pourcentageMargeRetenue: number;
        pourcentageMargeRetenueCredit: number;
        pourcentageMargeRetenueClient: number;
        mtPNBCredit: number;
        mtPNBClient: number;
        mtPNBStock: number;
        mtCoutRisque: number;
        mtCapitaleReglementaire: number;
        codeProdNational: string;
        mtConcoursDevise: number;
        refEngagement: string;
        codNivStadeConcours: string;
        idExterne: string;
        dtEvenementConcours: string;
        liblConcours: string;
        codeTypeObjetDefi: string;
        codePostalBienFinance: string;
        indicSyndication: string;
        creation: IAction;
        modification: IAction;
        montantAccorde: IAction;
        miseEnForce: IAction;
        credit: ICredit;
        detailPersonne: IDetailPersonne;
        listeDetailGarantie: Array<IDetailGarantie>;
        listeDetailDonneesTaux: Array<IDetailDonnesTaux>;
        listeDetailAmortissement: Array<IDetailAmortissement>;
    }
    interface ICredit {
        idCptePrelevement: string;
        idPrelevementBIC: string;
        idPrelevementIBAN: string;
        dateDebut: string;
        dateFin: string;
        creditExploitation: ICreditExploitation;
        creditBail: ICreditBail;
        creditMLT: ICreditMLT;
    }
    interface ICreditExploitation {
        duree: number;
        mtEcheanceEstime: number;
        tauxEngagement: number;
    }
    interface ICreditBail {
        codePeriodicite: string;
        mtGlobal: number;
        pourcentagePartRisqueGce: number;
        nbreLoyers: number;
        pourcentageValeurResiduelle: number;
        coefficientLoyer: number;
        mtLoyer: number;
        mtChargeAnnuelle: number;
        mtCommissionApporteur: number;
        pourcentageCommissionRisque: number;
    }
    interface ICreditMLT {
        codeTypeDiffere: string;
        codePeriodicite: string;
        codeTypeEcheance: string;
        codeGestionInterets: string;
        codePeriodiciteCapitaux: string;
        mtChargeAnnuelleEstimee: string;
        lblApporteurAffaire: string;
        mtCommissionApporteur: number;
        codeJourPrelevement: string;
        datePremierPrelevement: string;
        indicRemboursementAnticipe: boolean;
        dureeDiffereePret: number;
        mtModifieRemboursement: number;
        dateEcheanceModifieRemb: string;
        lblConditions: string;
        codeTypeDeblocage: string;
        dateDeblocage: string;
        tauxNominal: number;
        dateDebut: string;
        dateFin: string;
        codeTypeEcheanceCredit: string;
        mtEcheanceCalcule: number;
        indicDureeIndeterminee: boolean;
    }
    interface IDetailPersonne {
        idRelation: string;
        codeClientTiers: string;
        idExtClient: string;
        idTiersGce: string;
        indicLeader: string;
        codeLeaderEntreprise: string;
        ordreAffichageRelation: string;
        codePersonnaliteJuridique: string;
        desgnPersonne: string;
        numTel: string;
        numFax: string;
        adresseMail: string;
        numSiren: string;
        codeTypeCotationFiben: string;
        cotationFiben: string;
        noteBale2Reduite: string;
        dateNotationBale2: string;
        dateDerniereMAJCotation: string;
        lblAgenceDom: string;
        desgnSuiviPar: string;
        adresse: IAdresse;
        mtChiffreAffaire: number;
        indicCoutRisque: string;
        codeSegmentation: string;
        codeEtabPilote: string;
        codeApeInsee: string;
        codeNAF: string;
        mntPnbClient: number;
        mntPnbStock: number;
        idDossierEngagement: string;
        dateCreationPersonne: string;
        dateCreationJuridique: string;
        codeCatgJuridique: string;
        dateEntreeRelation: string;
        dateNotation: string;
        heureNotation: string;
        noteBale2: string;
    }
    interface IAdresse {
        ligne2AdrAfnor: string;
        ligne3AdrAfnor: string;
        ligne4AdrAfnor: string;
        ligne5AdrAfnor: string;
        ligne6AdrAfnor: string;
    }
    interface IDetailGarantie {
        idConcours: string;
        idChronoGarantie: string;
        dateCreationAssoConGarantie: string;
        codeDevise: string;
        typeGarantieGce: string;
        typeSurete: string;
        idGarantie: string;
        mntGarantie: number;
        libl1Commentaire: string;
        lbl2Commentaire: string;
        dateDebuteffetSurete: string;
        mntCapital: number;
        dateFinEffetSurete: string;
        typeGarantie: string;
        bienImmobillier: IBienImmobilier;
        fondsCommerce: IFondsCommerce;
        materiel: IMateriel;
        droitsSociaux: IDroitsSociaux;
        placement: IPlacement;
        societeCaution: ISocieteCaution;
        assurance: IAssurance;
        garantiePersonnelle: IGarantiePersonnelle;
        autreGarantie: IAutreGarantie;
        adresse: IAdresse;
    }
    interface IBienImmobilier {
        valeurEstimeeBienImmo: number;
    }
    interface IFondsCommerce {
        codeNaf2: string;
        lblDomaineActivite: string;
    }
    interface IMateriel {
        lblNatureMateriel: string;
        lblTypeMateriel: string;
    }
    interface IDroitsSociaux {
        nomOuRaisonSociale: string;
        numSiren: string;
        mtCapital: number;
        nbrePartsActionDetenues: number;
        nbrePartsNanties: number;
    }
    interface IPlacement {
        lblNature: string;
        nbTitres: number;
        refExtrerneCompte: string;
        valorisationGarantie: number;
        dateEvaluation: string;
        dateEcheanceContrat: string;
    }
    interface ISocieteCaution {
        typeGarant: string;
        lblAutreGarant: string;
        quotiteGarant: number;
    }
    interface IAssurance {
        dsgnLonguePersonne: string;
        numeroPersonneAssuree: string;
        codeTypeContratAssurance: string;
        codeCompagnie: string;
        lblAutreCompagnie: string;
        codeTypeAssurance: string;
        quotiteAssurance: number;
        indicDelegationBanque: string;
    }
    interface IAutreGarantie {
        liblAutreGarantie: string;
    }
    interface IGarantiePersonnelle {
        dateNaissance: string;
        lblLieuNaissance: string;
        codeRegimeMatrimonial: string;
        numeroSirenPro: string;
        dateFinEngagementCaution: string;
    }
    interface IDetailDonnesTaux {
        idConcours: string;
        numHistoriqueTaux: number;
        idTauxConcours: string;
        codeNatureTaux: string;
        codeTauxVariable: string;
        txRefinancement: number;
        pourcentageMargeRetenue: number;
        txNominal: number;
        mtCoutCAP: number;
        txCAP: number;
        dtHistoTaux: string;
    }
    interface IDetailAmortissement {
        idConcours: string;
        idPhaseAmortissement: string;
        codeTypeAmortissement: string;
        uniteDuree: string;
        dureeInitialeCredit: number;
        tauxInteretMoyen: number;
        margeSurTaux: number;
        mntPremierEcheanceHorsAcces: number;
        mntPremierEcheanceAssurances: number;
        mntPremierEcheanceServices: number;
        mntPremierEcheanceFraisCompl: number;
    }
    interface IRelationEconomique {
        idRelation: string;
        dsgnRelation: string;
        codeSegmentation: string;
        codeCategorieJuridique: string;
    }
    interface IDetailMemo {
        lbl1Memo: string;
        lbl2Memo: string;
        lbl3Memo: string;
        lbl4Memo: string;
        dtCreationMemo: string;
        idActeurCreation: string;
        dtModifMemo: string;
        idActeurModif: string;
    }
    interface ICommentaireArgumentaire {
        indicDemandeArgumentee: string;
    }
    interface IEtape {
        idEtape: string;
        dateCreation: string;
        codeTypeEtape: string;
        codeAvisDecision: string;
        codeEtatDemande: string;
        indicAnnulee: string;
        numCptEtape: string;
        dsgnEtape: IAction;
        saisieEtape: IAction;
        validationEtape: IAction;
    }
    interface IAction {
        identifiant: string;
        refExterneAgent: string;
        codeCivil: string;
        nomPatronymique: string;
        premierPrenomEtatCivil: string;
        nomMarital: string;
        designation: string;
        indicateurGroupe: string;
        date: string;
    }
    interface IDetailTirage {
        idTirage: string;
        liblDescripTirage: string;
        indicTirageSelectionne: string;
        codeStatutTirage: string;
        dateDebutTirage: string;
        dateValidationTirage: string;
        dateAnnulTirage: string;
        dateMAJTirage: string;
        mtGlobalTirage: number;
    }
}

declare namespace ICRest.Services.DemandeFinancement {
    interface IDemandeFinancementService {
        getDemande(rechercheDemande: Modeles.DemandeFinancement.IRechercheDemande): ng.IPromise<Modeles.DemandeFinancement.IResultatRecherche>;
    }
    class DemandeFinancementService implements IDemandeFinancementService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        getDemande(rechercheDemande: Modeles.DemandeFinancement.IRechercheDemande): ng.IPromise<Modeles.DemandeFinancement.IResultatRecherche>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IAccessoiresService {
        ajouterAccessoireLieProduit(idDossier: string, idCredit: string, codeTypeAccessoire: string): ng.IPromise<Modeles.AjouterAccessoireLieProduit.IAccessoireLecture>;
        ajouterAccessoireComp(idDossier: string, idCredit: string, codeTypeAccessoire: string, codeSousTypeAccessoire: string): ng.IPromise<Modeles.AjouterAccessoireComp.IAccessoireComplementaireLecture>;
        ajouterTiersSurAccessoire(identifiantDossier: string, identifiantTiers: string, codeRole: string, idwsAccessoireComplementaire: string): ng.IPromise<Modeles.AjouterAccCompTier.IAccessoireComplementaireLecture>;
        majAccessoireComp(request: Modeles.MajAccessoireComp.IMiseAJourAccessoireComplementaireRequest): ng.IPromise<number>;
        majAccessoireLieProduit(request: Modeles.MajAccessoireLieProd.IMiseAJourAccessoireLieProduitRequest): ng.IPromise<number>;
        detailAccessoireComplementaire(idDossier: string, idAccessoire: string): ng.IPromise<Modeles.DetailAccessoireComplementaire.IAccessoireComplementaireLecture>;
        detailAccessoireLieProduit(idDossier: string, idAccessoire: string): ng.IPromise<Modeles.DetailAccessoireLieProduit.IAccessoireLieProduitLecture>;
        accorderAccessoire(idDossier: string, idAccessoire: string, dateAccord: string, reference: string): ng.IPromise<Modeles.AccorderAccessoire.IAnomalieLecture[]>;
        refuserAccessoire(idDossier: string, idAccessoire: string, dateRefus: string): ng.IPromise<Modeles.RefusAccessoire.IMandatLecture>;
        supprimerTiers(idDossier: string, idAccessoire: string): ng.IPromise<void>;
    }
    class AccessoiresService implements IAccessoiresService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        ajouterAccessoireLieProduit(idDossier: string, idCredit: string, codeTypeAccessoire: string): ng.IPromise<Modeles.AjouterAccessoireLieProduit.IAccessoireLecture>;
        ajouterAccessoireComp(idDossier: string, idCredit: string, codeTypeAccessoire: string, codeSousTypeAccessoire: string): ng.IPromise<Modeles.AjouterAccessoireComp.IAccessoireComplementaireLecture>;
        ajouterTiersSurAccessoire(identifiantDossier: string, identifiantTiers: string, codeRole: string, idwsAccessoireComplementaire: string): ng.IPromise<Modeles.AjouterAccCompTier.IAccessoireComplementaireLecture>;
        majAccessoireComp(request: Modeles.MajAccessoireComp.IMiseAJourAccessoireComplementaireRequest): ng.IPromise<number>;
        majAccessoireLieProduit(request: Modeles.MajAccessoireLieProd.IMiseAJourAccessoireLieProduitRequest): ng.IPromise<number>;
        detailAccessoireLieProduit(idDossier: string, idAccessoire: string): ng.IPromise<Modeles.DetailAccessoireLieProduit.IAccessoireLieProduitLecture>;
        detailAccessoireComplementaire(idDossier: string, idAccessoire: string): ng.IPromise<Modeles.DetailAccessoireComplementaire.IAccessoireComplementaireLecture>;
        refuserAccessoire(idDossier: string, idAccessoire: string, dateRefus: string): ng.IPromise<Modeles.RefusAccessoire.IMandatLecture>;
        accorderAccessoire(idDossier: string, idAccessoire: string, dateAccord: string, reference: string): ng.IPromise<Modeles.AccorderAccessoire.IAnomalieLecture[]>;
        supprimerTiers(idDossier: string, idAccessoire: string): ng.IPromise<void>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IAjouterRefusAssuranceExterneService {
        ajouterRefusAssuranceExterne(idDossier: string, idPersonne: string, idPlan: string, refus: Modeles.AjouterRefusAssExt.IRefusAssuranceExterneMaj): ng.IPromise<Modeles.AjouterRefusAssExt.IRefusAssuranceExterneLecture>;
    }
    class AjouterRefusAssuranceExterneService implements IAjouterRefusAssuranceExterneService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        ajouterRefusAssuranceExterne(idDossier: string, idPersonne: string, idPlan: string, refus: Modeles.AjouterRefusAssExt.IRefusAssuranceExterneMaj): ng.IPromise<Modeles.AjouterRefusAssExt.IRefusAssuranceExterneLecture>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IAjouterVersementAttenduService {
        ajouterVersementAttendu(idDossier: string, idContratAssurance: string, versement: GarantieCredit.DTO.ObjetPorteGarantie.IVersementAttendu): ng.IPromise<Modeles.AjouterVersementAttendu.IVersementAttenduLecture>;
    }
    class AjouterVersementAttenduService implements IAjouterVersementAttenduService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        ajouterVersementAttendu(idDossier: string, idContratAssurance: string, versement: GarantieCredit.DTO.ObjetPorteGarantie.IVersementAttendu): ng.IPromise<Modeles.AjouterVersementAttendu.IVersementAttenduLecture>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IAssuranceService {
        ajouterAssuranceAvecControle(idDossier: string, idPersonne: string, idConvention: string, creditsCouvert: string[]): ng.IPromise<Modeles.AjouterAssuranceControle.IResultatAjouterAssuranceAvecControles>;
        recupererContexteCnp(identifiantDossierCNP: string, identifiantPersonne: string, identifiantPlanFinancement: string, codeCollectiviteCNP: string, forcerAction: boolean): ng.IPromise<Modeles.RecupererContexteCnp.IResultatContexteCnp>;
        listerCollectivitesCnp(idDossier: string, idPersonne: string, idPlanFinancement: string): ng.IPromise<Modeles.ListerCollectivitesCnp.IResultatCollectiviteCNP>;
        creerDossierCnp(idDossier: string, idPersonne: string, idPlan: string, codeCnp: string, forcerCreation: boolean): ng.IPromise<Modeles.CreerDossierCnp.IResultatCreationDossierCNP>;
        lireDecisionCnp(idDossier: string, idPersonne: string, idPlan: string, codeCollectivite: string, forcerDecision: boolean): ng.IPromise<Modeles.LireDecisionCnp.IResultatDecisionCNP>;
        consulterDocsDossCnp(idDossier: string, idPersonne: string, idPlan: string): ng.IPromise<Modeles.ConsulterDocsDossCnp.IResultatDocumentsDossierCNP>;
        transmettrePropCNP(identifiantDossier: string, identifiantExterneAccessoire: string, identifiantPersonne: string, identifiantPropAssuranceCnp: string, forcerControles: boolean): ng.IPromise<Modeles.TransmettrePropCnp.IResultatCreationDossierCNP>;
        consulterAssurCNP(idDossier: string): ng.IPromise<Modeles.ConsulterAssurCNP.IResultatDecisionCNP>;
    }
    class AssuranceService implements IAssuranceService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        consulterDocsDossCnp(idDossier: string, idPersonne: string, idPlan: string): ng.IPromise<Modeles.ConsulterDocsDossCnp.IResultatDocumentsDossierCNP>;
        ajouterAssuranceAvecControle(idDossier: string, idPersonne: string, idConvention: string, creditsCouvert: string[]): ng.IPromise<Modeles.AjouterAssuranceControle.IResultatAjouterAssuranceAvecControles>;
        listerCollectivitesCnp(idDossier: string, idPersonne: string, idPlanFinancement: string): ng.IPromise<Modeles.ListerCollectivitesCnp.IResultatCollectiviteCNP>;
        recupererContexteCnp(identifiantDossierCNP: string, identifiantPersonne: string, identifiantPlanFinancement: string, codeCollectiviteCNP: string, forcerAction: boolean): ng.IPromise<Modeles.RecupererContexteCnp.IResultatContexteCnp>;
        creerDossierCnp(idDossier: string, idPersonne: string, idPlan: string, codeCnp: string, forcerCreation: boolean): ng.IPromise<Modeles.CreerDossierCnp.IResultatCreationDossierCNP>;
        lireDecisionCnp(idDossier: string, idPersonne: string, idPlan: string, codeCollectivite: string, forcerDecision: boolean): ng.IPromise<Modeles.LireDecisionCnp.IResultatDecisionCNP>;
        transmettrePropCNP(identifiantDossier: string, identifiantExterneAccessoire: string, identifiantPersonne: string, identifiantPropAssuranceCnp: string, forcerControles: boolean): ng.IPromise<Modeles.TransmettrePropCnp.IResultatCreationDossierCNP>;
        consulterAssurCNP(idDossier: string): ng.IPromise<Modeles.ConsulterAssurCNP.IResultatDecisionCNP>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IAvisService {
        /**
         * Ajout d'un avis au dossier
         * @param identifiantDossier
         * @param avisMaj
         * @param dossierFerme
         */
        ajouterAvis(identifiantDossier: string, avis: Modeles.AjouterAvis.IAvisMaj, dossierFerme?: boolean): ng.IPromise<Modeles.AjouterAvis.IAvisLecture>;
    }
    class AvisService implements IAvisService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        ajouterAvis(identifiantDossier: string, avis: Modeles.AjouterAvis.IAvisMaj, dossierFerme?: boolean): ng.IPromise<Modeles.AjouterAvis.IAvisLecture>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IBienAVendreService {
        definirBienAVendre(idDossier: string, idProjet: string, hasBienAVendre: boolean): ng.IPromise<Modeles.DefinirBienAVendre.IBienAVendreLecture>;
    }
    class BienAVendreService implements IBienAVendreService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        definirBienAVendre(idDossier: string, idProjet: string, hasBienAVendre: boolean): ng.IPromise<Modeles.DefinirBienAVendre.IBienAVendreLecture>;
    }
}

declare namespace ICRest.Services.BlocNotes {
    interface IBlocNotesService {
        /**
         * Ouvrir le bloc notes
         *
         * @param idDossier identifiant du dossier en instruction
         */
        ouvrirBlocNotes(idDossier: string): ng.IPromise<Modeles.OuvrirBlocNotes.IBlocNotesLecture>;
        /**
         * Enregistrer le bloc notes
         * @param idDossier identifiant du dossier en instruction
         * @param typeBlocNotes "BLOCNOTE" ou "DIVERS"
         * @param valeurBlocNotes contenu du bloc notes
         */
        definirBlocNotes(idDossier: string, typeBlocNotes: string, valeurBlocNotes: string): ng.IPromise<Modeles.DefinirBlocNotes.IBlocNotesLecture>;
    }
    class BlocNotesService implements IBlocNotesService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        ouvrirBlocNotes(idDossier: string): ng.IPromise<Modeles.OuvrirBlocNotes.IBlocNotesLecture>;
        definirBlocNotes(idDossier: string, typeBlocNotes: string, valeurBlocNotes: string): ng.IPromise<Modeles.DefinirBlocNotes.IBlocNotesLecture>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface ICatalogueService {
        listerCatalogue(idDossier: string, request: Modeles.ListerCatalogue.IConstante, idClasse: FiltreIdClasse): ng.IPromise<Modeles.ListerCatalogue.IRetourCatalogue>;
    }
    interface ICatalogueParams {
        identifiantClasse: string;
    }
    type FiltreIdClasse = "filtreAccessoireComplementaire" | "filtreTypeCharge" | "filtreBeneficiaireFraisAccessoire" | "filtreNatureFinancementAutorise" | "filtreAdrRisqueEpargne";
    class CatalogueService implements ICatalogueService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        listerCatalogue(idDossier: string, request: Modeles.ListerCatalogue.IConstante, idClasse: FiltreIdClasse): ng.IPromise<Modeles.ListerCatalogue.IRetourCatalogue>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IClausePersonnaliseeService {
        ajouterClausePersonnalisee(idDossier: string, destinataire: number, texte: string): ng.IPromise<Modeles.AjouterClausePersonnalisee.IClausePersonnaliseeLecture>;
    }
    /**
     * Classe pour la gestion des clauses personnalisées
     * NB: la modification et la suppression d'une clause personnalisee
     *     utilise ElementService (ICRest) dans lib-business
     */
    class ClausePersonnaliseeService implements IClausePersonnaliseeService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        /**
         * Méthode pour l'ajout d'une clause emprunteur ou rédacteur d'acte
         * @param idDossier
         * @param destinataire
         * @param texte
         */
        ajouterClausePersonnalisee(idDossier: string, destinataire: number, texte: string): ng.IPromise<Modeles.AjouterClausePersonnalisee.IClausePersonnaliseeLecture>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IClientService {
        /**
         * Appelle la ressource REST qui ajoute une charge
         * @param identifiantDossier
         * @param identifiantEmprunteur
         * @param charge
         */
        ajouterCharge(identifiantDossier: string, identifiantPersonne: string, charge: Modeles.AjouterCharge.IChargeMaj): ng.IPromise<Modeles.AjouterCharge.IChargeLecture>;
        /**
         * Appelle la ressource REST qui ajoute un compte
         * @param identifiantDossier
         * @param identifiantPersonne
         * @param compte
         */
        ajouterCompte(identifiantDossier: string, identifiantPersonne: string, compte: Modeles.AjouterComptePersonne.ICompteMaj, numeroCompte?: string): ng.IPromise<Modeles.AjouterComptePersonne.ICompteLecture>;
        /**
         * Appelle la ressource REST qui ajoute une famille épargne
         * @param identifiantDossier
         * @param identifiantEmprunteur
         * @param ressource
         */
        ajouterFamilleEpargne(identifiantDossier: string, identifiantPersonne: string, familleEpargne: Modeles.AjouterFamilleEpargne.IFamilleEpargneMaj): ng.IPromise<Modeles.AjouterFamilleEpargne.IFamilleEpargneLecture>;
        /**
         * Appelle la ressource REST qui ajoute une ressource
         * @param identifiantDossier
         * @param idEmprunteur
         * @param ressource
         */
        ajouterRessource(identifiantDossier: string, identifiantPersonne: string, ressource: Modeles.AjouterRessource.IRessourceMaj): ng.IPromise<Modeles.AjouterRessource.IRessourceLecture>;
        /**
         * Appelle la ressource qui ajoute un revenu fiscal
         * @param identifiantDossier
         * @param montantRevenuMenage
         */
        ajouterRevenuFiscalEmprunteur(identifiantDossier: string, montantRevenuMenage: number, typeRevenuMenage: number): ng.IPromise<Modeles.AjouterRevenuFiscalEmprunteur.IRevenuFiscalLecture>;
        /**
         * Appelle la ressource REST qui définit l'emprunteur
         * @param identifiantDossier
         * @param identifiantClientBancaire
         */
        definirEmprunteur(identifiantDossier: string, identifiantClientBancaire: string): ng.IPromise<Modeles.DefinirEmprunteur.IEmprunteurLecture>;
        /**
         * rafraichirEmprDoss
         * @param identifiantDossier
         * @param supprimerRessourceCharge Supprime les ressources est charges existantes pour ne pas avoir de doublon
         */
        rafraichirEmprDoss(identifiantDossier: string, supprimerRessourceCharge: boolean): ng.IPromise<Modeles.RafraichirEmprunteurDossier.IEmprunteurLecture>;
        /**
         *
         * @param identifiantDossier
         * @param listePersonne
         * @param identifiantClasse personneMoraleMaj | personnePhysiqueMaj
         */
        ajouterPersAvecCtrl(identifiantDossier: string, listePersonne: Modeles.AjouterPersonneAvecControles.IPersonneMaj[], identifiantClasse: string): ng.IPromise<Modeles.AjouterPersonneAvecControles.IPersonneLecture[]>;
        /**
         * Rafraichir des personnes quand il n'y a pas de client bancaire. Sinon utiliser rafraichirEmprunteur
         * @param identifiantDossier
         * @param listeIdPersonne
         */
        rafraichirPersonnes(identifiantDossier: string, listeIdPersonne: string[]): ng.IPromise<Modeles.RafraichirPersonnes.ISortieRafraichirPersonne>;
        definirEmpAvecCtrl(identifiantDossier: string, identifiantClientBancaire: string, rattachement: boolean, pourLeCompteDe: string, forcerAjout?: boolean): ng.IPromise<Modeles.DefinirEmpAvecCtrl.IEmprunteurLecture>;
        /**
         * Rafraichir tout les intervenants du dossier (personne, emprunteur et garant)
         * @param idws
         * @param listeIdfppe
         * @param typeRafraichissement
         * @param conserverRCEmprunteur
         * @param forceeControle
         */
        rafraichirIntervDoss(idws: string, listeIdfppe: string[], typeRafraichissement: number, conserverRCEmprunteur: boolean, forceeControle?: boolean): ng.IPromise<Modeles.RafraichirIntervDoss.IRapportRafraichirIntervenant>;
    }
    class ClientService implements IClientService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        ajouterCharge(identifiantDossier: string, identifiantPersonne: string, charge: Modeles.AjouterCharge.IChargeMaj): ng.IPromise<Modeles.AjouterCharge.IChargeLecture>;
        ajouterCompte(identifiantDossier: string, identifiantPersonne: string, compte: Modeles.AjouterComptePersonne.ICompteMaj, numeroCompte?: string): ng.IPromise<Modeles.AjouterComptePersonne.ICompteLecture>;
        ajouterFamilleEpargne(identifiantDossier: string, identifiantPersonne: string, familleEpargne: Modeles.AjouterFamilleEpargne.IFamilleEpargneMaj): ng.IPromise<Modeles.AjouterFamilleEpargne.IFamilleEpargneLecture>;
        ajouterRessource(identifiantDossier: string, identifiantPersonne: string, ressource: Modeles.AjouterRessource.IRessourceMaj): ng.IPromise<Modeles.AjouterRessource.IRessourceLecture>;
        ajouterRevenuFiscalEmprunteur(identifiantDossier: string, montantRevenuMenage: number, typeRevenuMenage: number): ng.IPromise<Modeles.AjouterRevenuFiscalEmprunteur.IRevenuFiscalLecture>;
        definirEmprunteur(identifiantDossier: string, identifiantClientBancaire: string): ng.IPromise<Modeles.DefinirEmprunteur.IEmprunteurLecture>;
        rafraichirEmprDoss(identifiantDossier: string, supprimerRessourceCharge: boolean): ng.IPromise<Modeles.RafraichirEmprunteurDossier.IEmprunteurLecture>;
        ajouterPersAvecCtrl(identifiantDossier: string, listePersonne: Modeles.AjouterPersonneAvecControles.IPersonneMaj[], identifiantClasse: string): ng.IPromise<Modeles.AjouterPersonneAvecControles.IPersonneLecture[]>;
        rafraichirPersonnes(identifiantDossier: string, listeIdPersonne: string[]): ng.IPromise<Modeles.RafraichirPersonnes.ISortieRafraichirPersonne>;
        definirEmpAvecCtrl(identifiantDossier: string, identifiantClientBancaire: string, rattachement: boolean, pourLeCompteDe: string, forcerAjout?: boolean): ng.IPromise<Modeles.DefinirEmpAvecCtrl.IEmprunteurLecture>;
        rafraichirIntervDoss(idws: string, listeIdfppe: string[], typeRafraichissement: number, conserverRCEmprunteur: boolean, forceeControle?: boolean): ng.IPromise<Modeles.RafraichirIntervDoss.IRapportRafraichirIntervenant>;
    }
}

declare namespace ICRest.Services.ContexteEdition {
    interface IContexteEditionService {
        /**
         * Récupère le contexte d'édition
         *
         * @param identifiantDossier
         */
        recupererContexteEdition(identifiantDossier: string): ng.IPromise<Modeles.RecupererContexteEdition.IContexteEditique>;
    }
    class ContexteEditionService implements IContexteEditionService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        recupererContexteEdition(identifiantDossier: string): ng.IPromise<Modeles.RecupererContexteEdition.IContexteEditique>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IContratEpargneLogementService {
        /**
         * Ajout d'un nouveau contrat d'épargne logement
         * @param identifiantDossier
         * @param contratEpargneLogementMAJ
         */
        ajouterContratEpargneLogement(identifiantDossier: string, contratEpargneLogementMAJ: Modeles.AjouterContratEpargneLogement.IContratEpargneLogementMaj): ng.IPromise<Modeles.AjouterContratEpargneLogement.IContratEpargneLogementLecture>;
    }
    class ContratEpargneLogementService implements IContratEpargneLogementService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        ajouterContratEpargneLogement(identifiantDossier: string, contratEpargneLogementMAJ: Modeles.AjouterContratEpargneLogement.IContratEpargneLogementMaj): ng.IPromise<Modeles.AjouterContratEpargneLogement.IContratEpargneLogementLecture>;
    }
}

declare namespace ICRest.Services.Controle {
    interface IControleService {
        controlerCompletude(idDossier: string): ng.IPromise<Modeles.IAnomalieLecture[]>;
        controlerCompletudeGarantieAssurance(idDossier: string): ng.IPromise<Modeles.IAnomalieLecture[]>;
        controlerCompletudePvh(idDossier: string, controlerPrescripteur?: boolean): ng.IPromise<Modeles.IAnomalieLecture[]>;
        controlerDecision(params: Modeles.ControlerDecision.IEntreeControleDecision): ng.IPromise<Modeles.ControlerDecision.IRetourControleDecision>;
        controlerDossier(idDossier: string): ng.IPromise<Modeles.IAnomalieLecture[]>;
        controlerEditionOffre(idDossier: string): ng.IPromise<Modeles.IAnomalieLecture[]>;
        controlerAvantEditionOffre(params: Modeles.ControlerAvantDecisionOffre.IEntreeControleEdition): ng.IPromise<Modeles.ControlerAvantDecisionOffre.IRetourControleEdition>;
    }
    class ControleService implements IControleService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        controlerDossier(idDossier: string): ng.IPromise<Modeles.IAnomalieLecture[]>;
        controlerCompletude(idDossier: string): ng.IPromise<Modeles.IAnomalieLecture[]>;
        controlerCompletudeGarantieAssurance(idDossier: string): ng.IPromise<Modeles.IAnomalieLecture[]>;
        controlerCompletudePvh(idDossier: string, controlerPrescripteur?: boolean): ng.IPromise<Modeles.IAnomalieLecture[]>;
        controlerDecision(params: Modeles.ControlerDecision.IEntreeControleDecision): ng.IPromise<Modeles.ControlerDecision.IRetourControleDecision>;
        controlerEditionOffre(idDossier: string): ng.IPromise<Modeles.IAnomalieLecture[]>;
        /**
         * Contrôle du dossier avant édition de l'offre.
         * @param params
         */
        controlerAvantEditionOffre(params: Modeles.ControlerAvantDecisionOffre.IEntreeControleEdition): ng.IPromise<Modeles.ControlerAvantDecisionOffre.IRetourControleEdition>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IConventionsAssuranceService {
        /** Retourne la liste des conventions d'assurance compatibles avec les crédits et personnes sélectionnées */
        listerConventionsAssuranceCompatible(idDossier: string, listeIdCredit: string[], listeIdPersonnes: string[]): ng.IPromise<Modeles.ListerConventionsAssuranceCompatible.IScConventionResume[]>;
    }
    class ConventionsAssuranceService implements IConventionsAssuranceService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        /** Retourne la liste des conventions d'assurance compatibles avec les crédits et personnes sélectionnées */
        listerConventionsAssuranceCompatible(idDossier: string, listeIdCredit: string[], listeIdPersonne: string[]): ng.IPromise<Modeles.ListerConventionsAssuranceCompatible.IScConventionResume[]>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface ICreditEpargneLogementService {
        /**
         * Calculer les encours épargne logement
         * @param identifiantDossier
         * @param idwsProjet
         * @param idProduit
         */
        calculerEnCoursEL(identifiantDossier: string, idwsProjet: string, idProduit?: string): ng.IPromise<Modeles.CalculerEncoursEL.IResultatCalculEnCoursEL>;
        /**
         * Lister les droits acquis pour l'épargne logement
         * @param identifiantDossier
         * @param idwCredit
         * @param periodicite
         */
        listerDroitsAcquisEL(identifiantDossier: string, idwCredit: string, periodicite: string): ng.IPromise<Modeles.ListerDroitsAcquisEL.IResultatCalculELLecture>;
        /**
         * Calculer le credit EL
         * @param identifiantDossier
         * @param idCredit
         * @param periodicite
         * @param duree
         * @param montant
         * @param estEcheance
         * @param estManuel
         */
        calculerCreditEL(identifiantDossier: string, idCredit: string, periodicite: string, duree: number, montant: number, estEcheance: boolean, estManuel: boolean): ng.IPromise<Modeles.CalculerCreditEL.IResultatCalculELLecture>;
        /**
         * Lister les droits à prêts EL
         * @param idDossier
         * @param idCredit
         * @param periodicite
         */
        listerDroitsAPretEL(idDossier: string, idCredit: string, periodicite: string): ng.IPromise<Modeles.ListerDrotisAPretEL.IDroitAPretELLecture[]>;
        /**
         * Retenir la proposition épargne logement
         *
         * @param identifiantDossier
         * @param idCredit
         * @param periodicite
         * @param duree
         * @param montant
         * @param montantEcheance
         * @param tauxPret
         * @param estEcheance
         * @param estManuel
         */
        retenirPropositionEL(identifiantDossier: string, idwsCredit: string, periodicite: string, duree: number, montant: number, montantEcheance: number, tauxPret: number, estEcheance: boolean, estManuel: boolean): ng.IPromise<void>;
        /**
         * Definir le droit utilisé. On le créé si il n'est pas existant, sinon on mondifie les montant
         * en fonction des valeurs passée en paramètre
         *
         * @param idDossier
         * @param idCredit
         * @param idTranche
         * @param montantAcquis
         * @param montantLimite
         */
        definirDroitUtilise(idDossier: string, idCredit: string, idTranche: string, montantAcquis: number, montantLimite: number): ng.IPromise<Modeles.DefinirDroitUtilise.IDroitUtiliseLecture>;
        /**
         * Prendre en compte le droit acquis dans le calcul de l'épargne logement.
         * Si on prend en compte le droit, la méthode met le montant acquis au maximum (99999999.99) sinon à 0
         *
         * @param idDossier
         * @param idCredit
         * @param idTranche
         * @param prendreEnCompte
         */
        prendreEnCompteDroitAcquis(idDossier: string, idCredit: string, idTranche: string, prendreEnCompte: boolean): ng.IPromise<Modeles.PrendreCompteDroitAcquis.IDroitUtiliseLecture>;
    }
    class CreditEpargneLogementService implements ICreditEpargneLogementService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        calculerEnCoursEL(identifiantDossier: string, idwsProjet: string, idProduit?: string): ng.IPromise<Modeles.CalculerEncoursEL.IResultatCalculEnCoursEL>;
        listerDroitsAcquisEL(identifiantDossier: string, idwCredit: string, periodicite: string): ng.IPromise<Modeles.ListerDroitsAcquisEL.IResultatCalculELLecture>;
        calculerCreditEL(identifiantDossier: string, idwsCredit: string, periodicite: string, duree: number, montant: number, estEcheance: boolean, estManuel: boolean): ng.IPromise<Modeles.CalculerCreditEL.IResultatCalculELLecture>;
        listerDroitsAPretEL(identifiantDossier: string, idwsCredit: string, periodicite: string): ng.IPromise<Modeles.ListerDrotisAPretEL.IDroitAPretELLecture[]>;
        retenirPropositionEL(identifiantDossier: string, idwsCredit: string, periodicite: string, duree: number, montantPret: number, montantEcheance: number, tauxPret: number, estEcheance: boolean, estManuel: boolean): ng.IPromise<void>;
        definirDroitUtilise(idDossier: string, idwsCredit: string, idwsTrancheEpargneLogement: string, montantAcquisUtilise: number, montantLimite: number): ng.IPromise<Modeles.DefinirDroitUtilise.IDroitUtiliseLecture>;
        prendreEnCompteDroitAcquis(idDossier: string, idwsCredit: string, idwsTrancheEpargneLogement: string, prendreEnCompte: boolean): ng.IPromise<Modeles.PrendreCompteDroitAcquis.IDroitUtiliseLecture>;
    }
}

declare namespace ICRest.Services.Dossier {
    type IdentifianClassePhase = "creditPhaseAmortissementMaj" | "creditPhaseDiffereAmortissementMaj" | "creditPhaseDiffereTotalMaj" | "creditPhaseMobilisationMaj" | "creditPhasePrefinancementMaj";
    interface ICreditService {
        /**
         * Appelle la ressource REST qui ajoute un crédit interne
         * @param idDossier Identifiant du dossier
         * @param idPlanFinancement Identifiant du plan de financement
         * @param idProduit Identifiant du produit (Code famille du produit + numéro relation du produit)
         * @param montantEmprunt Montant emprunté
         * @param initMontant Flag indiquant l'initialisation du montant
         * @param enOptim Flag indiquant que le crédit est en optimisation
         * @param tauxMontage Montant du taux de montage
         */
        ajouterCreditInterne(idDossier: string, idPlanFinancement: string, idProduit: string, montantEmprunt: number, initMontant: boolean, enOptim: boolean, tauxMontage: number): ng.IPromise<Modeles.AjouterCreditInterne.ICreditInterneLecture>;
        /**
         * Appelle la ressource REST qui ajoute une phase à un crédit existant
         * @param phase
         */
        ajouterPhaseCreditExistant(data: Modeles.AjouterPhaseCreditExistant.IAjouterPhaseCreditExistant): ng.IPromise<Modeles.AjouterPhaseCreditExistant.IResultatAjoutPhaseCreditExistantLecture>;
        /**
         * Calcule les données d'un crédit
         * @param idDossier Identifiant du dossier
         * @param idCredit Identifiant du crédit
         * @param financeRaf
         */
        calculerCreditInterne(idDossier: string, idCredit: string, financeRaf: boolean): ng.IPromise<Modeles.CalculerCreditInterne.IResultatCalculCreditInterne>;
        /**
         * Création d'un phase facultative sur le credit
         * @param idDossier
         * @param idCredit
         * @param codeTypePhase
         */
        definirPhase(idDossier: string, idCredit: string, codeTypePhase: number): ng.IPromise<Modeles.DefinirPhase.ICreditPhaseLecture>;
        /**
         * Mise à jour d'une phase
         * @param identifiantClasse
         * @param idDossier
         * @param creditPhaseMaj
         * @param complementPhasePretCbinMAJ
         * @param creditParamRevisionPhaseMAJ
         */
        miseAJourPhase(identifiantClasse: IdentifianClassePhase, idDossier: string, creditPhaseMaj: Modeles.MiseAJourPhase.ICreditPhaseMaj, complementPhasePretCbinMAJ?: Modeles.MiseAJourPhase.IComplementPhasePretCombineMaj, creditParamRevisionPhaseMAJ?: Modeles.MiseAJourPhase.ICreditParamRevisionMaj): ng.IPromise<Modeles.MiseAJourPhase.ICreditPhaseLecture>;
        ajouterCreditExterne(idDossier: string, idPlanFinancement: string, creditMaj: Modeles.MajElements.ICreditExterneMaj): ng.IPromise<Modeles.LireElement.ICreditExterneLecture>;
        /**
         * Calculer la modulation de crédit
         * @param identifiantDossier
         * @param identifiantCredit
         * @param entrCalculModn
         */
        calculerModulationCredit(identifiantDossier: string, identifiantCredit: string, entrCalculModn: Modeles.CalculerModulCredit.IEntreeCalculModulation): ng.IPromise<Modeles.CalculerModulCredit.ISortieCalculModulation>;
        /**
         * calculer la révision de crédit
         * @param identifiantDossier
         * @param idwsCredit
         * @param revisionTaux
         * @param revisionTauxDate
         * @param ajustDuree
         * @param valAjustDuree
         */
        calculerRevisionCredit(identifiantDossier: string, idwsCredit: string, revisionTaux: number, revisionTauxDate: number, ajustDuree: boolean, valAjustDuree: number): ng.IPromise<Modeles.CalculerRevision.IResultatCalculRevision>;
        /**
         * Permet de lier une convention bonification à un crédit
         * @param identifiantDossier
         * @param idendifiantCredit
         * @param idConventionBonification
         */
        ajouterCreditBonification(identifiantDossier: string, idendifiantCredit: string, idConventionBonification: string): ng.IPromise<Modeles.AjouterCreditBonification.ICreditBonificationLecture>;
        /**
         * Permet de calculer les montants de la bonification
         * @param identifiantDossier
         * @param idConventionBonification
         */
        calculerBonification(identifiantDossier: string, identifiantBonification: string): ng.IPromise<void>;
    }
    class CreditService implements ICreditService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        ajouterPhaseCreditExistant(data: Modeles.AjouterPhaseCreditExistant.IAjouterPhaseCreditExistant): ng.IPromise<Modeles.AjouterPhaseCreditExistant.IResultatAjoutPhaseCreditExistantLecture>;
        ajouterCreditInterne(idDossier: string, idPlanFinancement: string, idProduit: string, montantEmprunt: number, initMontant: boolean, enOptim: boolean, tauxMontage: number): ng.IPromise<Modeles.AjouterCreditInterne.ICreditInterneLecture>;
        calculerCreditInterne(idDossier: string, idCredit: string, financeRaf: boolean): ng.IPromise<Modeles.CalculerCreditInterne.IResultatCalculCreditInterne>;
        definirPhase(idDossier: string, idCredit: string, codeTypePhase: number): ng.IPromise<Modeles.DefinirPhase.ICreditPhaseLecture>;
        miseAJourPhase(identifiantClasse: IdentifianClassePhase, idDossier: string, creditPhaseMaj: Modeles.MiseAJourPhase.ICreditPhaseMaj, complementPhasePretCbinMAJ?: Modeles.MiseAJourPhase.IComplementPhasePretCombineMaj, creditParamRevisionPhaseMAJ?: Modeles.MiseAJourPhase.ICreditParamRevisionMaj): ng.IPromise<Modeles.MiseAJourPhase.ICreditPhaseLecture>;
        ajouterCreditExterne(idDossier: string, idPlanFinancement: string, creditMaj: Modeles.MajElements.ICreditExterneMaj): ng.IPromise<Modeles.LireElement.ICreditExterneLecture>;
        calculerModulationCredit(identifiantDossier: string, identifiantCredit: string, entrCalculModn: Modeles.CalculerModulCredit.IEntreeCalculModulation): ng.IPromise<Modeles.CalculerModulCredit.ISortieCalculModulation>;
        calculerRevisionCredit(identifiantDossier: string, idwsCredit: string, revisionTaux: number, revisionTauxDate: number, ajustDuree: boolean, valAjustDuree: number): ng.IPromise<Modeles.CalculerRevision.IResultatCalculRevision>;
        ajouterCreditBonification(identifiantDossier: string, idendifiantCredit: string, idConventionBonification: string): ng.IPromise<Modeles.AjouterCreditBonification.ICreditBonificationLecture>;
        calculerBonification(identifiantDossier: string, identifiantBonification: string): ng.IPromise<void>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IDebugService {
        setDebug(activer: boolean, indice?: number): ng.IPromise<Modeles.SetDebug.ISortieDebug>;
    }
    class DebugService implements IDebugService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        setDebug(activer: boolean, indice?: number): ng.IPromise<Modeles.SetDebug.ISortieDebug>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IDecisionService {
        /**
         * Validation de l'accord prêteur.
         *
         * @param identifiantDossier
         * @param dateAccordPreteur
         * @param avis
         * @param forcerControleAvtAccessoirePret
         * @param forcerControleBale2
         * @param forcerControleReglementaire
         */
        validerAccordPreteur(identifiantDossier: string, dateAccordPreteur: string, avis: string, forcerControleAvtAccessoirePret: boolean, forcerControleBale2: boolean, forcerControleReglementaire: boolean): ng.IPromise<Modeles.ValiderAccordPreteur.IRetourPasserAccordPreteur>;
        /**
         * Refus de l'accord prêteur
         * @param identifiantDossier
         * @param dateRefus
         */
        refuserAccordPreteur(identifiantDossier: string, dateRefus: string): ng.IPromise<void>;
        modifierAccordPreteur(params: Modeles.ModifierAccord.IEntreeModificationAccordPreteur): ng.IPromise<Modeles.ModifierAccord.IRetourModificationAccordPreteur>;
        /**
         * Annulation de l'accord prêteur
         * @param identifiantDossier
         * @param dateRefus
         */
        annulerAccordPreteur(identifiantDossier: string): ng.IPromise<Modeles.AnnulerAccordPreteur.IResultatOffrePretIndustrialisee>;
        /**
         * Calcul du niveau de délégation de décision d'un agent
         * @param idDossier identifiant du dossier en instruction
         * @param idAgent identifiant de l'agent
         * @param continu si vrai, on fait abstraction des erreurs
         * @param reponse
         */
        calculerDelegationDecision(idDossier: string, idAgent: string, continu: boolean, reponse: boolean): ng.IPromise<ICRest.Modeles.ExecuterCalculDelegationDecision.IResultatCalculDelegation>;
    }
    class DecisionService implements IDecisionService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        /**
         * Validation de l'accord prêteur.
         *
         * @param identifiantDossier
         * @param dateAccordPreteur
         * @param avis
         * @param forcerControleAvtAccessoirePret
         * @param forcerControleBale2
         * @param forcerControleReglementaire
         */
        validerAccordPreteur(identifiantDossier: string, dateAccordPreteur: string, avis: string, forcerControleAvtAccessoirePret: boolean, forcerControleBale2: boolean, forcerControleReglementaire: boolean): ng.IPromise<Modeles.ValiderAccordPreteur.IRetourPasserAccordPreteur>;
        refuserAccordPreteur(identifiantDossier: string, dateRefus: string): ng.IPromise<void>;
        annulerAccordPreteur(identifiantDossier: string): ng.IPromise<Modeles.AnnulerAccordPreteur.IResultatOffrePretIndustrialisee>;
        modifierAccordPreteur(params: Modeles.ModifierAccord.IEntreeModificationAccordPreteur): ng.IPromise<Modeles.ModifierAccord.IRetourModificationAccordPreteur>;
        calculerDelegationDecision(idDossier: string, idAgent: string, continu: boolean, reponse: boolean): ng.IPromise<ICRest.Modeles.ExecuterCalculDelegationDecision.IResultatCalculDelegation>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IDefinirReferenceService {
        definirReferenceCadastrales(identifiantDossier: string, idwsHypothequeImmo: string, cadastres: Modeles.DefinirReferenceCadastrale.IReferenceCadastraleMaj[]): ng.IPromise<Modeles.DefinirReferenceCadastrale.IReferenceCadastraleLecture>;
        definirReferenceLots(identifiantDossier: string, idwsHypothequeImmo: string, lots: Modeles.DefinirReferenceLot.IReferenceLotMaj[]): ng.IPromise<Modeles.DefinirReferenceLot.IReferenceLotLecture>;
    }
    class DefinirReferenceService implements IDefinirReferenceService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        definirReferenceCadastrales(identifiantDossier: string, idwsHypothequeImmo: string, cadastres: Modeles.DefinirReferenceCadastrale.IReferenceCadastraleMaj[]): ng.IPromise<Modeles.DefinirReferenceCadastrale.IReferenceCadastraleLecture>;
        definirReferenceLots(identifiantDossier: string, idwsHypothequeImmo: string, lots: Modeles.DefinirReferenceLot.IReferenceLotMaj[]): ng.IPromise<Modeles.DefinirReferenceLot.IReferenceLotLecture>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IDefinirRemiseTauxService {
        definirRemiseTaux(idDossier: string, idPlan: string, idCredit: string, typeRemise: number, applicationMarge: boolean): ng.IPromise<boolean>;
    }
    class DefinirRemiseTauxService implements IDefinirRemiseTauxService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        definirRemiseTaux(idDossier: string, idPlan: string, idCredit: string, typeRemise: number, applicationMarge: boolean): ng.IPromise<boolean>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IDossierExterneService {
        creerDossierExterne(idDossier: string, idPlan: string): ng.IPromise<Modeles.CreerDossierExterne.IResultatCreationDossierExterne>;
        lireDossierExterne(idDossier: string, idPlan: string): ng.IPromise<Modeles.LireDossierExterne.IResultatLireDossierExterne>;
    }
    class DossierExterneService implements IDossierExterneService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        creerDossierExterne(idDossier: string, idPlan: string): ng.IPromise<Modeles.CreerDossierExterne.IResultatCreationDossierExterne>;
        lireDossierExterne(idDossier: string, idPlan: string): ng.IPromise<Modeles.LireDossierExterne.IResultatLireDossierExterne>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IDossierMRHService {
        /**
         * Génère le dossier MRH par rapport au dossier de crédit en cours
         * @param identifiantDossier L'identifiant du dossier de crédit
         */
        definirDossierMRH(identifiantDossier: string): ng.IPromise<Modeles.DefinirDossierMRH.IDossierMRHLecture>;
    }
    class DossierMRHService implements IDossierMRHService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        /**
         * Génère le dossier MRH par rapport au dossier de crédit en cours
         * @param identifiantDossier L'identifiant du dossier de crédit
         */
        definirDossierMRH(identifiantDossier: string): ng.IPromise<Modeles.DefinirDossierMRH.IDossierMRHLecture>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IDossierNumeriqueService {
        miseAJourDossierNumerique(identifiantDossier: string): ng.IPromise<void>;
    }
    class DossierNumeriqueService implements IDossierNumeriqueService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        miseAJourDossierNumerique(identifiantDossier: string): ng.IPromise<void>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IDossierService {
        /**
         * Appelle la ressource REST qui crée un projet vierge
         * @param dateDeTraitement
         * @param canalDeCreation
         */
        creerDossier(dateDeTraitement: string, canalDeCreation: string, codeApplication: number, codeDevise: string, pourLeCompteDe?: string): ng.IPromise<Modeles.CreerDossier.IDossierSchema>;
        /**
         * Appelle la ressource REST qui crée un dossier vierge selon le type passé en paramètre
         * @param dateDeTraitement
         * @param canalDeCreation
         * @param codeApplication
         * @param codeDevise
         * @param pourLeCompteDe
         */
        creerDossierApplication(dateDeTraitement: string, canalDeCreation: string, codeApplication: number, codeDevise: string, idClientBancaire: string, codeCanal: string, pourLeCompteDe?: string): ng.IPromise<Modeles.CreerDossierApplication.IResultatCreationDossierApplication>;
        sauverDossier(idDossier: string): ng.IPromise<void>;
        validerAccordClient(idDossier: string, idPlanRet: string): ng.IPromise<void>;
        /**
         * Validation de l'accord client
         * @param idDossier
         * @param idPlanFin
         * @param forcerCtrlAvtAccClient
         */
        validationAccordClient(idDossier: string, idPlanFin: string, forcerCtrlAvtAccClient: boolean): ng.IPromise<Modeles.ValidationAccordClient.ISortieValidationAccordClient>;
        /**
         * Appelle la ressource REST qui ferme le dossier
         * @param identifiantDossier
         * @param sauvegarde
         * @param pourLeCompteDe
         */
        fermerDossier(identifiantDossier: string, sauvegarde: boolean, pourLeCompteDe: string): ng.IPromise<Modeles.FermerDossier.IAnomalieLecture[]>;
        /**
         * Ouvre le dossier dans Neo. Necessaire au préalable de tous les autres appels.
         *  @param identifiantDossier
         *  @param dateDeTraitement
         *  @param codeApplication
         *  @param actionSurDossier
         *  Consultation = 0
         *  Instruction = 1,
         *  Decision = 2,
         *  Maj = 3, (Mise à jour administrative ou conformité)
         *  Conformite = 4, (Ouverture pour controle de conformite)
         *  PriseEnChargeBO = 5 (Action où le l'agent BO se transfère un dossier (par le lien Prendre en charge))
         *
         *  @param pourLeCompteDe
         *  @param ignorerControlModeOuverture
         */
        ouvrirDossier(identifiantDossier: string, dateDeTraitement: string, codeApplication: number, actionSurDossier: number, pourLeCompteDe?: string, ignorerControlModeOuverture?: boolean): ng.IPromise<Modeles.Schema.IDossierSchema>;
        /**
         * Mise à jour du code application du dossier pour celui de NEO ("5")
         * @param identifiantDossier
         * @param visibleNEO
         */
        transfererDossierDansApp(identifiantDossier: string, visibleNEO: boolean): ng.IPromise<Modeles.TransfererDossierDansApp.IResultatTransfererDossierVersApplication>;
        /**
         * Ajout d'un évènement sur un dossier
         * @param idDossier
         * @param codeTypeEvenement
         * @param libelleFacultatif
         */
        ajouterEvenementDossier(idDossier: string, codeTypeEvenement: string, libelleFacultatif: string): ng.IPromise<Modeles.AjouterEvenement.IEvenementLecture>;
        /**
         * Calcul de l'égilibilité
         * @param identifiantDossier
         */
        calculerEligibilite(identifiantDossier: string): ng.IPromise<Modeles.CalculerEligibilite.IResultatEligibilite>;
        /**
         * Créé un dossier avec un projet
         * @param request
         */
        creerProjet(dateTraitement: string, codeApplicationCharge: number, toc: string, tor: string, canalDeCreation: string, codeDevise: string, idClientBancaire?: string, identifiantPourLeCompteDe?: string): ng.IPromise<Modeles.Schema.IDossierSchema>;
        /**
         * Définir les informations complémentaires du dossier
         * @param identifiantDossier
         * @param complementDossierMAJ
         */
        definirComplementDossier(identifiantDossier: string, complementDossierMAJ: Modeles.DefinirComplementDossier.IComplementDossierMaj): ng.IPromise<Modeles.DefinirComplementDossier.IComplementDossierLecture>;
        /**
         * Permet de passer un dossier à sans suite
         * @param identifiantDossier : string
         * @param codeEvenement : string
         * @param dateEvenement : string
         */
        passerDossierSsSuite(identifiantDossier: string, codeEvenement: string, dateEvenement: string): ng.IPromise<void>;
        /**
         * Calcule les frais de notaire d'un dossier
         * @param identifiantDossier
         */
        calculerFraisNotaire(identifiantDossier: string): ng.IPromise<Modeles.CalculerFraisNotaire.IResultatCalculFraisNotaire>;
        listerRepriseDossier(request: Modeles.ListerRepriseDossier.IEntreeRepriseDossier): ng.IPromise<Modeles.ListerRepriseDossier.IResultatListerRepriseDossier>;
        listerDossier(idDossier: string): ng.IPromise<Modeles.ListerDossier.IDossierResume[]>;
    }
    class DossierService implements IDossierService {
        private restService;
        private $q;
        static $inject: Array<string>;
        constructor(restService: IRestService, $q: ng.IQService);
        creerDossier(dateDeTraitement: string, canalDeCreation: string, codeApplication: number, codeDevise: string, pourLeCompteDe?: string): ng.IPromise<Modeles.CreerDossier.IDossierSchema>;
        creerDossierApplication(dateDeTraitement: string, canalDeCreation: string, codeApplication: number, codeDevise: string, idClientBancaire: string, codeCanal: string, pourLeCompteDe?: string): ng.IPromise<Modeles.CreerDossierApplication.IResultatCreationDossierApplication>;
        creerProjet(dateTraitement: string, codeApplicationCharge: number, toc: string, tor: string, canalDeCreation: string, codeDevise: string, idClientBancaire?: string, identifiantPourLeCompteDe?: string): ng.IPromise<Modeles.Schema.IDossierSchema>;
        sauverDossier(idDossier: string): ng.IPromise<void>;
        validerAccordClient(idDossier: string, idPlanRet: string): ng.IPromise<void>;
        /**
         * Validation de l'accord client
         * @param idDossier
         * @param idPlanFin
         * @param forcerCtrlAvtAccClient
         */
        validationAccordClient(idDossier: string, idPlanFin: string, forcerCtrlAvtAccClient: boolean): ng.IPromise<Modeles.ValidationAccordClient.ISortieValidationAccordClient>;
        fermerDossier(identifiantDossier: string, sauvegarde: boolean, pourLeCompteDe: string): ng.IPromise<Modeles.FermerDossier.IAnomalieLecture[]>;
        ouvrirDossier(identifiantDossier: string, dateDeTraitement: string, codeApplication: number, actionSurDossier: number, pourLeCompteDe?: string, ignorerControlModeOuverture?: boolean): ng.IPromise<Modeles.Schema.IDossierSchema>;
        transfererDossierDansApp(identifiantDossier: string, visibleNEO: boolean): ng.IPromise<Modeles.TransfererDossierDansApp.IResultatTransfererDossierVersApplication>;
        ajouterEvenementDossier(idDossier: string, codeTypeEvenement: string, libelleFacultatif: string): ng.IPromise<Modeles.AjouterEvenement.IEvenementLecture>;
        calculerEligibilite(identifiantDossier: string): ng.IPromise<Modeles.CalculerEligibilite.IResultatEligibilite>;
        definirComplementDossier(identifiantDossier: string, complementDossierMAJ: Modeles.DefinirComplementDossier.IComplementDossierMaj): ng.IPromise<Modeles.DefinirComplementDossier.IComplementDossierLecture>;
        passerDossierSsSuite(identifiantDossier: string, codeEvenement: string, dateEvenement: string): ng.IPromise<void>;
        calculerFraisNotaire(identifiantDossier: string): ng.IPromise<Modeles.CalculerFraisNotaire.IResultatCalculFraisNotaire>;
        listerRepriseDossier(request: Modeles.ListerRepriseDossier.IEntreeRepriseDossier): ng.IPromise<Modeles.ListerRepriseDossier.IResultatListerRepriseDossier>;
        /**
         * Utiliser exclusivement pour récupérer des infos sur le dossier passé en param (idDossier) avant son ouverture, notamment savoir si c'est un DEFI ou non
         * @param idDossier
         */
        listerDossier(idDossier: string): ng.IPromise<Modeles.ListerDossier.IDossierResume[]>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IEditerDocumentFC050REFService {
        editerDocumentFC050REF(idDossier: string, idRefus: string, data: Modeles.EditerDocumentFC050REF.IParametreEdition): ng.IPromise<Modeles.EditerDocumentFC050REF.IResultatEditionREFALecture>;
    }
    class EditerDocumentFC050REFService implements IEditerDocumentFC050REFService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        editerDocumentFC050REF(idDossier: string, idRefus: string, data: Modeles.EditerDocumentFC050REF.IParametreEdition): ng.IPromise<Modeles.EditerDocumentFC050REF.IResultatEditionREFALecture>;
    }
}

declare namespace ICRest.Services.Edition {
    interface IEditerDocumentFZHCOPTService {
        /**
         * Imprimer optimisation
         * @param idDossier
         * @param idRefus
         * @param data
         */
        editerDocumentFZHCOPT(request: Modeles.EditerDocumentFZHCOPT.IEditerDocumentFZHCOPTRequest): ng.IPromise<Modeles.EditerDocumentFZHCOPT.IResultatEditionFZHCOPT>;
    }
    class EditerDocumentFZHCOPTService implements IEditerDocumentFZHCOPTService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        editerDocumentFZHCOPT(request: Modeles.EditerDocumentFZHCOPT.IEditerDocumentFZHCOPTRequest): ng.IPromise<Modeles.EditerDocumentFZHCOPT.IResultatEditionFZHCOPT>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IEditerDocumentsService {
        /**
         * Editer un document
         * @param idDossier
         * @param data
         */
        editerDocuments(idDossier: string, data: Modeles.EditerDocuments.IParametreEdition): ng.IPromise<Modeles.EditerDocuments.IResultatEditionDocuments>;
        /**
         * Editer le document epargne logement
         * @param idDossier
         * @param idws identifiant de l'élément sur lequel porte l'édition (Dossier,Plan,Crédit)
         * @param data
         */
        editerDocumentEL(idDossier: string, idws: string, data: Modeles.EditerDocumentEpargneLogement.ISdImpressionEL): ng.IPromise<Modeles.EditerDocumentEpargneLogement.IEditerDocumentFZHCPRETResponse>;
    }
    class EditerDocumentsService implements IEditerDocumentsService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        editerDocuments(idDossier: string, data: Modeles.EditerDocuments.IParametreEdition): ng.IPromise<Modeles.EditerDocuments.IResultatEditionDocuments>;
        editerDocumentEL(idDossier: string, idws: string, data: Modeles.EditerDocumentEpargneLogement.ISdImpressionEL): ng.IPromise<Modeles.EditerDocumentEpargneLogement.IEditerDocumentFZHCPRETResponse>;
    }
}

declare namespace ICRest.Services.ElementSchema {
    interface IElementSchemaService {
        /**
         * Lecture d'éléments de schema à la demande
         * @param identifiantDossier
         * @param descriptionSchema
         */
        lireSchemasComplet(identifiantDossier: string, descriptionSchema: Modeles.SchemaComplet.IEntreeLireSchemaComplet[]): ng.IPromise<Modeles.SchemaComplet.IResultatLireSchemaComplet[]>;
    }
    class ElementSchemaService implements IElementSchemaService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        lireSchemasComplet(identifiantDossier: string, descriptionSchema: Modeles.SchemaComplet.IEntreeLireSchemaComplet[]): ng.IPromise<Modeles.SchemaComplet.IResultatLireSchemaComplet[]>;
    }
}

declare namespace ICRest.Services.Element {
    interface IMiseAJourElementParams {
        identifiantClasse: string;
    }
    interface IElementService {
        /**
         * Appelle la ressource REST qui renvoie la liste des IElementLecture correspondant à la liste d'idws passée en paramètre
         * @param identifiantDossier
         * @param listeIdws
         */
        lireElements(identifiantDossier: string, listeIdws: Array<string>): ng.IPromise<Array<Modeles.LireElement.IElementLecture>>;
        /**
         * Appelle la ressource REST qui met à jour la liste des IElementMaj passés en paramètre
         * @param identifiantDossier
         * @param elements
         */
        majElements(identifiantClasse: string, identifiantDossier: string, elements: Modeles.MajElement.IElementMaj[]): ng.IPromise<void>;
        /**
         * Appelle la ressource REST qui supprime la liste d'éléments dont les identifiants sont passés en paramètre
         * @param identifiantDossier
         * @param listeIdentifiantsElement
         */
        supprimerElements(identifiantDossier: string, listeIdentifiantsElement: string[]): ng.IPromise<void>;
        /**
         * Appel la ressource REST qui permet de supprimer un élément et ses contrôles
         * @param identifiantDossier
         * @param idws
         * @param forceeControle
         */
        supprimerElementAvecControle(identifiantDossier: string, idws: string, forceeControle?: boolean): ng.IPromise<Modeles.SupprimerElementAvecControle.IRapportTransaction>;
    }
    class ElementService implements IElementService {
        private restService;
        private $q;
        static $inject: Array<string>;
        constructor(restService: RestService, $q: ng.IQService);
        lireElements(identifiantDossier: string, listeIdws: Array<string>): ng.IPromise<Array<Modeles.LireElement.IElementLecture>>;
        majElements(identifiantClasse: string, identifiantDossier: string, elements: Modeles.MajElement.IElementMaj[]): ng.IPromise<void>;
        supprimerElements(identifiantDossier: string, listeIdentifiantsElement: string[]): ng.IPromise<void>;
        /**
         * Appel la ressource REST qui permet de supprimer un élément et ses contrôles
         * @param identifiantDossier
         * @param idws
         * @param forceeControle
         */
        supprimerElementAvecControle(identifiantDossier: string, idws: string, forceeControle?: boolean): ng.IPromise<Modeles.SupprimerElementAvecControle.IRapportTransaction>;
    }
}

declare namespace ICRest.Services.Expertise {
    interface IExpertisePVHService {
        demanderExpertisePVH(idDossier: string): ng.IPromise<Modeles.DemanderExpertisePvh.IResultatDemandeExpertisePVH>;
        traiterExpertisePVH(idDossier: string, hypImmoMaj: Modeles.TraiterExpertisePvh.IHypothequeImmobiliereMaj): ng.IPromise<Modeles.TraiterExpertisePvh.IResultatLireExpertisePVH>;
    }
    class ExpertisePVHService implements IExpertisePVHService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        demanderExpertisePVH(idDossier: string): ng.IPromise<Modeles.DemanderExpertisePvh.IResultatDemandeExpertisePVH>;
        traiterExpertisePVH(idDossier: string, hypImmoMaj: Modeles.TraiterExpertisePvh.IHypothequeImmobiliereMaj): ng.IPromise<Modeles.TraiterExpertisePvh.IResultatLireExpertisePVH>;
    }
}

declare namespace ICRest.Services.Garanties {
    interface IGarantieService {
        /**
         *  Liste les informations sur les garanties
         * @param idDossier
         * @param conseille
         * @param listeIdwsCredit
         */
        listerInformationGarantie(idDossier: string, conseille: boolean, listeIdwsCredit: string[]): ng.IPromise<Modeles.ListerInformationGarantie.IScInformationGarantie[]>;
        /**
         * Liste les conventions de garantie
         * @param idDossier
         * @param codeNature
         * @param codeConvention
         * @param libelleNature
         * @param topGarantie
         * @param listeIdwsCredit
         */
        listerConventionsGarantie(idDossier: string, codeNature: string, codeConvention: string, listeIdwsCredit: string[]): ng.IPromise<Modeles.ListerConventionsGarantie.IScConventionGarantie[]>;
        /**
         * Ajouter une garantie personnelle conventionnée
         * @param idDossier
         * @param listeIdwsCreditCouvert
         * @param idConvention
         * @param forcerAjout
         */
        ajouterGarantiePersonnelleConventionnee(idDossier: string, listeIdwsCreditCouvert: string[], idConvention: string, forcerAjout: boolean): ng.IPromise<Modeles.AjoutergarantiePersoConventionnee.IResultatAjouterGarantieAvecControles>;
        /**
         * Ajouter une garantie personnelle conventionnée
         * @param idDossier
         * @param listeIdwsCreditCouvert
         * @param idConvention
         * @param forcerAjout
         */
        ajouterGarantieAvecControle(idDossier: string, identifiantGarantie: string, listeIdwsCreditCouvert: string[], natureGarantie: string, forcerAjout: boolean): ng.IPromise<Modeles.AjouterGarantieAvecControle.IResultatAjouterGarantieAvecControles>;
        /**
         * Définir les bien porté en garantie
         * @param idDossier
         * @param identifiantGarantie
         * @param typeObjetCommercialisation
         */
        definirBienPorteEnGarantie(idDossier: string, identifiantGarantie: string, typeObjetCommercialisation: string): ng.IPromise<Modeles.DefinirBienPorteEnGarantie.IBienPorteEnGarantieLecture>;
        calculerFraisHypotheque(idDossier: string, identifiantGarantie: string): ng.IPromise<Modeles.CalculerFraisHyppotheque.IResultatCalculFraisHypotheque>;
        envoyerSaccef(idDossier: string, idPlanFinancement: string): ng.IPromise<string[]>;
        testerPresenceReponseCEGC(idDossier: string): ng.IPromise<boolean>;
        traiterReponseCEGC(idDossier: string): ng.IPromise<Modeles.TraiterReponseCEGC.IResultatTraitementCegc>;
        controlerAvantAppelCEGC(idDossier: string): ng.IPromise<Modeles.ControleAvantAppelCEGC.IAnomalieLecture[]>;
    }
    class GarantieService implements IGarantieService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        listerInformationGarantie(idDossier: string, conseille: boolean, listeIdwsCredit: string[]): ng.IPromise<Modeles.ListerInformationGarantie.IScInformationGarantie[]>;
        listerConventionsGarantie(idDossier: string, codeNature: string, codeConvention: string, listeIdwsCredit: string[]): ng.IPromise<Modeles.ListerConventionsGarantie.IScConventionGarantie[]>;
        ajouterGarantiePersonnelleConventionnee(idDossier: string, listeIdwsCreditCouvert: string[], idConvention: string, forcerAjout: boolean): ng.IPromise<Modeles.AjoutergarantiePersoConventionnee.IResultatAjouterGarantieAvecControles>;
        ajouterGarantieAvecControle(idDossier: string, identifiantGarantie: string, listeIdwsCreditCouvert: string[], natureGarantie: string, forcerAjout: boolean): ng.IPromise<Modeles.AjouterGarantieAvecControle.IResultatAjouterGarantieAvecControles>;
        definirBienPorteEnGarantie(idDossier: string, identifiantGarantie: string, typeObjetCommercialisation: string): ng.IPromise<Modeles.DefinirBienPorteEnGarantie.IBienPorteEnGarantieLecture>;
        calculerFraisHypotheque(idDossier: string, identifiantGarantie: string): ng.IPromise<Modeles.CalculerFraisHyppotheque.IResultatCalculFraisHypotheque>;
        envoyerSaccef(idDossier: string, idPlanFinancement: string): ng.IPromise<string[]>;
        testerPresenceReponseCEGC(idDossier: string): ng.IPromise<boolean>;
        traiterReponseCEGC(idDossier: string): ng.IPromise<Modeles.TraiterReponseCEGC.IResultatTraitementCegc>;
        controlerAvantAppelCEGC(idDossier: string): ng.IPromise<Modeles.ControleAvantAppelCEGC.IAnomalieLecture[]>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IInformationPtzService {
        definirStatutOccupation(identifiantDossier: string, entreesStatutOccupation: Modeles.DefinirStatutOccup.IEntreeStatutOccupation[], forceeControle?: boolean): ng.IPromise<Modeles.DefinirStatutOccup.IFormulaireStatutOccupationPTZComplet>;
        definirOccupant(identifiantDossier: string, listeOccupant: Modeles.DefinirOccupant.IOccupantMaj[], forceeControle?: boolean): ng.IPromise<Modeles.DefinirOccupant.IFormulaireLienAvecEmprunteurComplet>;
        definirRattachementFoyerFiscalTiers(identifiantDossier: string, listeRattachementFoyerFiscal: Modeles.DefinirRattFoyerFiscalTiers.IEntreeRattachementFoyerFiscal[], forceeControle?: boolean): ng.IPromise<Modeles.DefinirRattFoyerFiscalTiers.IFormulaireRattachementFoyerFiscalComplet>;
        recupererInfoCompPTZ(identifiantDossier: string, identifiantPlan: string): ng.IPromise<Modeles.RecupererInfoCompPTZ.ISortieRecuperationInfoPTZ>;
    }
    class InformationPtzService implements IInformationPtzService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        definirStatutOccupation(identifiantDossier: string, entreesStatutOccupation: Modeles.DefinirStatutOccup.IEntreeStatutOccupation[], forceeControle?: boolean): ng.IPromise<Modeles.DefinirStatutOccup.IFormulaireStatutOccupationPTZComplet>;
        definirOccupant(identifiantDossier: string, listeOccupant: Modeles.DefinirOccupant.IOccupantMaj[], forceeControle?: boolean): ng.IPromise<Modeles.DefinirOccupant.IFormulaireLienAvecEmprunteurComplet>;
        definirRattachementFoyerFiscalTiers(identifiantDossier: string, listeRattachementFoyerFiscal: Modeles.DefinirRattFoyerFiscalTiers.IEntreeRattachementFoyerFiscal[], forceeControle?: boolean): ng.IPromise<Modeles.DefinirRattFoyerFiscalTiers.IFormulaireRattachementFoyerFiscalComplet>;
        recupererInfoCompPTZ(identifiantDossier: string, identifiantPlanFinancement: string): ng.IPromise<Modeles.RecupererInfoCompPTZ.ISortieRecuperationInfoPTZ>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IMandatService {
        /**
         * ajouter un mandat
         * @param identifiantDossier
         * @param identifiantPayeur
         * @param bicIban
         * @param modeReglement
         */
        ajouterMandat(identifiantDossier: string, identifiantPayeur: string, bicIban: string, modeReglement: string): ng.IPromise<Modeles.AjouterMandat.IMandatLecture>;
    }
    class MandatService implements IMandatService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        ajouterMandat(identifiantDossier: string, identifiantPayeur: string, bicIban: string, modeReglement: string): ng.IPromise<Modeles.AjouterMandat.IMandatLecture>;
    }
}

declare namespace ICRest.Services.Offre {
    interface IOffreService {
        /**
         * Appelle la ressource REST qui effectue la signature d'un mandat
         * @param identifiantDossier
         * @param dateSignature
         * @param referenceMandat
         */
        signerMandat(identifiantDossier: string, dateSignature: string, referenceMandat: string): ng.IPromise<void>;
        /**
         * Appelle la ressource REST qui effectue la signature de l'offre de prêt
         * @param identifiantDossier
         * @param numeroOffre
         * @param dateDeSignature
         * @param reponse
         * @param listeIdsPersonne
         * @param forcerCtrlusureLorsSignature
         */
        signerOffrePret(identifiantDossier: string, numeroOffre: string, dateDeSignature: string, reponse: boolean, listeIdsPersonne: string[], forcerCtrlusureLorsSignature: boolean): ng.IPromise<Modeles.SignerOffrePret.IRetourSignatureOffre>;
    }
    class OffreService implements IOffreService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        signerMandat(identifiantDossier: string, dateSignature: string, referenceMandat: string): ng.IPromise<void>;
        signerOffrePret(identifiantDossier: string, numeroOffre: string, dateDeSignature: string, reponse: boolean, listeIdsPersonne: string[], forcerCtrlusureLorsSignature: boolean): ng.IPromise<Modeles.SignerOffrePret.IRetourSignatureOffre>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IListerConstantesParams {
        identifiantClasse: string;
    }
    interface IParametresService {
        /**
         * Appelle la ressource REST qui renvoie la liste des constantes pour l'identifiant passé en paramètre
         * @param identifiantDossier
         * @param identifiantClasse
         * @param constante
         */
        listerConstantes(identifiantDossier: string, identifiantClasse: string, constante?: Modeles.ListerConstantes.IConstante): ng.IPromise<Modeles.ListerConstantes.IRetourConstante>;
    }
    class ParametresService implements IParametresService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        listerConstantes(identifiantDossier: string, identifiantClasse: string, constante?: Modeles.ListerConstantes.IConstante): ng.IPromise<Modeles.ListerConstantes.IRetourConstante>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IVerifierComptePayeurParams {
        idDossier: string;
        modeReglement: string;
        numeroCompte: string;
        typePreSecVer: number;
    }
    interface IPayeurService {
        /**
         * Appelle la ressource REST qui ajoute un payeur
         * @param identifiantDossier
         * @param identifiantCredit
         * @param identifiantPersonne
         * @param payeur
         */
        ajouterPayeur(identifiantDossier: string, identifiantCredit: string, identifiantPersonne: string, payeur: Modeles.AjouterPayeur.IPayeurMaj): ng.IPromise<Modeles.AjouterPayeur.IPayeurLecture>;
        /**
         * Appelle la ressource REST qui véfifie un compte payeur
         * @param identifiantDossier
         * @param modeReglement
         * @param numeroCompte
         * @param typeFluxFinancier (typePreSecVer) prélèvement = 'p', secours = 's', versement = 'v'
         */
        verifierComptePayeur(identifiantDossier: string, modeReglement: string, numeroCompte: string, typeFluxFinancier: number): ng.IPromise<Modeles.IAnomalieLecture>;
    }
    class PayeurService implements IPayeurService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        ajouterPayeur(identifiantDossier: string, identifiantCredit: string, identifiantPersonne: string, payeur: Modeles.AjouterPayeur.IPayeurMaj): ng.IPromise<Modeles.AjouterPayeur.IPayeurLecture>;
        verifierComptePayeur(identifiantDossier: string, modeReglement: string, numeroCompte: string, typeFluxFinancier: number): ng.IPromise<Modeles.IAnomalieLecture>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IPersonneService {
        /**
         * Appelle la ressource REST qui renvoie la liste des personnes correspondant aux critères passés en paramètre
         * @param identifiantDossier
         * @param identifiantPersonne
         * @param dateNaissance
         * @param nom
         * @param numeroCarteBancaire
         * @param numeroCompte
         * @param numeroSiren
         * @param prenom
         * @param rolePersonne
         * @param typePersonne
         */
        listerPersonnes(identifiantDossier: string, identifiantPersonne: string, dateNaissance: string, nom: string, numeroCarteBancaire: string, numeroCompte: string, numeroSiren: string, prenom: string, rolePersonne: string, typePersonne: number): ng.IPromise<Modeles.ListerPersonnes.IPersonneLecture[]>;
    }
    class PersonneService implements IPersonneService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        listerPersonnes(identifiantDossier: string, identifiantPersonne: string, dateNaissance: string, nom: string, numeroCarteBancaire: string, numeroCompte: string, numeroSiren: string, prenom: string, rolePersonne: string, typePersonne: number): ng.IPromise<Modeles.ListerPersonnes.IPersonneLecture[]>;
    }
}

declare namespace ICRest.Services.PiecesEtControles {
    interface IPiecesEtControlesService {
        /**
         * Calculer pièces et contrôles
         *
         * @param identifiantDossier
         * @param identifiantPlan
         * @param estConsulterDNCSeulement
         */
        calculerPiecesEtControles(identifiantDossier: string, identifiantPlan: number, estConsulterDNCSeulement?: boolean): ng.IPromise<ICRest.Modeles.CalculerPiecesEtControles.IResultatPiecesEtControles>;
        /**
         * Enregistrer les commentaires des pièces
         * @param idDossier
         * @param commentaireClient
         * @param commentaireAgence
         */
        enregistrerCommentairesPieces(idDossier: string, commentaireClient: string, commentaireAgence: string): ng.IPromise<void>;
    }
    class PiecesEtControlesService implements IPiecesEtControlesService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        calculerPiecesEtControles(identifiantDossier: string, identifiantPlan: number, estConsulterDNCSeulement?: boolean): ng.IPromise<Modeles.CalculerPiecesEtControles.IResultatPiecesEtControles>;
        enregistrerCommentairesPieces(idDossier: string, commentaireClient: string, commentaireAgence: string): ng.IPromise<void>;
    }
}

declare namespace ICRest.Services.PlanFinancement {
    interface IPlanFinancementService {
        ajouterPlanFinancement(idDossier: string, idProjet: string, planFinancementMaj: Modeles.AjouterPlanFinancement.IPlanFinancementMaj): ng.IPromise<Modeles.AjouterPlanFinancement.IPlanFinancementLecture>;
        copierPlanFinancement(idDossier: string, idPlanFinancement: string): ng.IPromise<Modeles.AjouterPlanFinancement.IPlanFinancementLecture>;
        /**
         * Contrôle le contexte éco PTZ / SGFGAS
         * @param identifiantDossier
         * @param idwsPlanFinancement
         * @param urlRetour
         * @param estDevis
         */
        controlerAppelSGFGAS(identifiantDossier: string, identifiantPlanFinancement: string, urlRetour?: string, estDevis?: boolean): ng.IPromise<Modeles.ControlerAppelSGFGAS.IResultatSGFGAS>;
        /**
         * Lancer appel SGFGAS
         * @param identifiantDossier
         * @param idwsPlanFinancement
         * @param urlRetour
         * @param estDevis
         */
        lancerAppelSGFGAS(identifiantDossier: string, identifiantPlanFinancement: string, estDevis: boolean, urlRetour: string): ng.IPromise<Modeles.LancerAppelSGFGAS.IRetour>;
        calculerCapaciterRemboursement(request: Modeles.CalculerCapaciteRemb.ICalculerCapaciteRemboursementRequest): ng.IPromise<Modeles.CalculerCapaciteRemb.ICapaciteRemboursement>;
        optimiserPlanFinancement(request: Modeles.Optimisation.IRequest): ng.IPromise<Modeles.Optimisation.ISortieOptimisation>;
        defPaliersContraints(request: Modeles.DefPaliersContraints.IDefPaliersContraintsRequest): ng.IPromise<Modeles.DefPaliersContraints.IPalierContraintLecture[]>;
        /**
         * Synchroniser avec smac
         * @param identifiantDossier
         * @param identifiantPlanFinancement
         * @param miseAJourDossierSMAC
         * @param miseAJourDossierNEO
         * @param uIDSmac
         */
        synchroniserAvecSmac(identifiantDossier: string, identifiantPlanFinancement: string, miseAJourDossierSMAC: boolean, miseAJourDossierNEO: boolean, uIDSmac: string): ng.IPromise<Modeles.SynchroniserAvecSmac.IAnomalieLecture[]>;
    }
    class PlanFinancementService implements IPlanFinancementService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        ajouterPlanFinancement(idDossier: string, idProjet: string, planFinancementMaj: Modeles.AjouterPlanFinancement.IPlanFinancementMaj): ng.IPromise<Modeles.AjouterPlanFinancement.IPlanFinancementLecture>;
        copierPlanFinancement(idDossier: string, idPlanFinancement: string): ng.IPromise<Modeles.AjouterPlanFinancement.IPlanFinancementLecture>;
        controlerAppelSGFGAS(identifiantDossier: string, identifiantPlanFinancement: string, urlRetour?: string, estDevis?: boolean): ng.IPromise<Modeles.ControlerAppelSGFGAS.IResultatSGFGAS>;
        lancerAppelSGFGAS(identifiantDossier: string, identifiantPlanFinancement: string, estDevis: boolean, urlRetour: string): ng.IPromise<Modeles.LancerAppelSGFGAS.IRetour>;
        calculerCapaciterRemboursement(request: Modeles.CalculerCapaciteRemb.ICalculerCapaciteRemboursementRequest): ng.IPromise<Modeles.CalculerCapaciteRemb.ICapaciteRemboursement>;
        optimiserPlanFinancement(request: Modeles.Optimisation.IRequest): ng.IPromise<Modeles.Optimisation.ISortieOptimisation>;
        defPaliersContraints(request: Modeles.DefPaliersContraints.IDefPaliersContraintsRequest): ng.IPromise<Modeles.DefPaliersContraints.IPalierContraintLecture[]>;
        synchroniserAvecSmac(identifiantDossier: string, identifiantPlanFinancement: string, miseAJourDossierSMAC: boolean, miseAJourDossierNEO: boolean, uIDSmac: string): ng.IPromise<Modeles.SynchroniserAvecSmac.IAnomalieLecture[]>;
    }
}

declare namespace ICRest.Services.Produit {
    /**
     * Interface du service de projet non immobilier
     */
    interface IProduitService {
        listerProdEtFamAuto(idDossier: string, idProjet: string, idPlanFinancement: string, codeDevise: string, optimisationCredit: boolean, produitLissage: boolean, codeProduit: string): ng.IPromise<Modeles.ListerProdEtFamAuto.IScFamillesDeProduits[]>;
        listerGammesLissageAutorisees(request: Modeles.IListerGammesLissage.IListerGammesLissAutoRequest): ng.IPromise<Modeles.IListerGammesLissage.IGammeLissage[]>;
    }
    /**
     * Service projet non immobilier
     */
    class ProduitService implements IProduitService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        listerProdEtFamAuto(idDossier: string, idProjet: string, idPlanFinancement: string, codeDevise: string, optimisationCredit: boolean, produitLissage: boolean, codeProduit: string): ng.IPromise<Modeles.ListerProdEtFamAuto.IScFamillesDeProduits[]>;
        listerGammesLissageAutorisees(request: Modeles.IListerGammesLissage.IListerGammesLissAutoRequest): ng.IPromise<Modeles.IListerGammesLissage.IGammeLissage[]>;
    }
}

declare namespace ICRest.Services.ProjetImmo {
    /**
     * Interface du service de projet immobilier
     */
    interface IProjetImmoService {
        definirDetailCoutObj(identifiantDossier: string, typeTravaux: string, listeDetailCoutObjetMAJ: Modeles.DefinirDetailCoutObj.IDetailCoutObjetMaj[]): ng.IPromise<Modeles.DefinirDetailCoutObj.IDetailCoutObjetLecture[]>;
    }
    /**
     * Service projet immobilier
     */
    class ProjetImmoService implements IProjetImmoService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        definirDetailCoutObj(identifiantDossier: string, typeTravaux: string, listeDetailCoutObjetMAJ: Modeles.DefinirDetailCoutObj.IDetailCoutObjetMaj[]): ng.IPromise<Modeles.DefinirDetailCoutObj.IDetailCoutObjetLecture[]>;
    }
}

declare namespace ICRest.Services.Projet {
    /**
     * Interface du service de projet non immobilier
     */
    interface IProjetService {
        definirProjet(identifiantDossier: string, typeObjetCommercial: string, typeObjetReglemente: string, classeNeo: string, projetMaj: Modeles.DefinirProjet.IProjetMaj): ng.IPromise<Modeles.DefinirProjet.IProjetLecture>;
    }
    /**
     * Parametres du service projet
     */
    interface IProjetServiceParams {
        identifiantClasse: string;
    }
    /**
     * Service projet non immobilier
     */
    class ProjetService implements IProjetService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        /**
         * Definit le projet rattache a un dossier
         * @param identifiantDossier Identifiant du dossier concerne
         * @param typeObjetCommercial Type d'objet commercial (code TOC)
         * @param typeObjetReglemente Type d'objet reglemente (code TOR)
         * @param projetMaj Donnees du projet
         */
        definirProjet(identifiantDossier: string, typeObjetCommercial: string, typeObjetReglemente: string, classeNeo: string, projetMaj?: Modeles.DefinirProjet.IProjetNonImmobilierMaj): ng.IPromise<Modeles.DefinirProjet.IProjetLecture>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IProprietaireService {
        /**
         * Appelle la ressource REST qui ajoute un Proprietaire
         * @param identifiantDossier
         * @param idwsHypothequeImmobilier
         * @param proprietaireMAJ
         * @param idPersonne
         */
        ajouterProprietaire(identifiantDossier: string, idwsHypothequeImmobilier: string, proprietaireMAJ: Modeles.AjouterProprietaire.IProprietaireMaj, idPersonne: string): ng.IPromise<Modeles.AjouterProprietaire.IProprietaireLecture>;
    }
    class ProprietaireService implements IProprietaireService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        ajouterProprietaire(identifiantDossier: string, idwsHypothequeImmobilier: string, proprietaireMAJ: Modeles.AjouterProprietaire.IProprietaireMaj, idPersonne: string): ng.IPromise<Modeles.AjouterProprietaire.IProprietaireLecture>;
    }
}

declare namespace ICRest.Services.Reamenagement {
    interface IReamenagementService {
        listerPretsRea(request: Modeles.ListerPretsRea.IListerPretsReaRequest): ng.IPromise<Modeles.ListerPretsRea.IResultatListerPretReamenageLecture>;
        listerDetailsPretsRea(request: Modeles.ListerDetailsPretsRea.IListerDetailsPretsReaRequest): ng.IPromise<Modeles.ListerDetailsPretsRea.IResultatListerPretReamenageableLecture>;
        ajouterPretReamenage(request: Modeles.AjouterPretReamenage.IAjouterPretReamenageRequest): ng.IPromise<Modeles.AjouterPretReamenage.IPretReamenageLecture>;
        ajouterPretReamenageable(request: Modeles.AjouterPretReamengbl.IAjoutePretReamenageableRequest): ng.IPromise<Modeles.AjouterPretReamengbl.IRapportAjoutPretReamenageable>;
        definirReamenagement(request: Modeles.DefinirReamenagement.IDefinirReamenagementRequest): ng.IPromise<Modeles.DefinirReamenagement.IReamenagementLecture>;
    }
    class ReamenagementService implements IReamenagementService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        listerPretsRea: (request: Modeles.ListerPretsRea.IListerPretsReaRequest) => ng.IPromise<Modeles.ListerPretsRea.IResultatListerPretReamenageLecture>;
        listerDetailsPretsRea: (request: Modeles.ListerDetailsPretsRea.IListerDetailsPretsReaRequest) => ng.IPromise<Modeles.ListerDetailsPretsRea.IResultatListerPretReamenageableLecture>;
        ajouterPretReamenageable: (request: Modeles.AjouterPretReamengbl.IAjoutePretReamenageableRequest) => ng.IPromise<Modeles.AjouterPretReamengbl.IRapportAjoutPretReamenageable>;
        ajouterPretReamenage: (request: Modeles.AjouterPretReamenage.IAjouterPretReamenageRequest) => ng.IPromise<Modeles.AjouterPretReamenage.IPretReamenageLecture>;
        definirReamenagement: (request: Modeles.DefinirReamenagement.IDefinirReamenagementRequest) => ng.IPromise<Modeles.DefinirReamenagement.IReamenagementLecture>;
    }
}

declare namespace ICRest.Services.Dossier {
    interface IRedacteurActeService {
        /**
         * Appelle la ressource REST qui définit un rédacteur d'acte pour le dossier spécifié
         * @param identifiantDossier
         * @param redacteurActe
         */
        definirRedacteurActe(identifiantDossier: string, redacteurActe: Modeles.DefinirRedacteurActe.IRedacteurActeMaj): ng.IPromise<Modeles.DefinirRedacteurActe.IRedacteurActeLecture>;
    }
    class RedacteurActeService implements IRedacteurActeService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        definirRedacteurActe(identifiantDossier: string, redacteurActe: Modeles.DefinirRedacteurActe.IRedacteurActeMaj): ng.IPromise<Modeles.DefinirRedacteurActe.IRedacteurActeLecture>;
    }
}

declare namespace ICRest.Services.RendreDossier {
    interface IRendreDossierService {
        rendreDossierViaId(identifiantDossier: string, forcee: boolean): ng.IPromise<Modeles.RendreDossierViaId.IRapportTransaction>;
    }
    class RendreDossierService implements IRendreDossierService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        rendreDossierViaId(identifiantDossier: string, forcee: boolean): ng.IPromise<Modeles.RendreDossierViaId.IRapportTransaction>;
    }
}

declare namespace ICRest.Services.Schema {
    interface ISchemaService {
        /**
         * Appelle la ressource REST lireSchemaDossier
         * @param identifiantDossier
         * @param dossierFerme
         */
        lireSchema(identifiantDossier: string, dossierFerme?: boolean): ng.IPromise<Modeles.Schema.IDossierSchema>;
    }
    interface ILireSchemaParams {
        identifiantDossier: string;
        dossierFerme?: boolean;
    }
    class SchemaService implements ISchemaService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: IRestService);
        lireSchema(identifiantDossier: string, dossierFerme?: boolean): ng.IPromise<Modeles.Schema.IDossierSchema>;
    }
}

declare namespace ICRest.Services.SuivisPlanifies {
    interface ISuivisPlanifiesService {
        /**
         * Appelle la ressource REST qui définit un rédacteur d'acte pour le dossier spécifié
         * @param identifiantDossier
         * @param redacteurActe
         */
        ajouterSuiviPlanifie(request: Modeles.SuivisPlanifies.IAjouterSuiviPlanifieRequest): ng.IPromise<Modeles.LireElement.ISuiviPlanifieLecture>;
    }
    class SuivisPlanifiesService implements ISuivisPlanifiesService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        ajouterSuiviPlanifie(request: Modeles.SuivisPlanifies.IAjouterSuiviPlanifieRequest): ng.IPromise<Modeles.LireElement.ISuiviPlanifieLecture>;
    }
}

declare namespace ICRest.Services.Synthese {
    interface ISyntheseService {
        getSynthese(identifiantDossier: string): ng.IPromise<Modeles.ListerSynthese.IRetourSynthese>;
    }
    class SyntheseService implements ISyntheseService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        getSynthese(identifiantDossier: string): ng.IPromise<Modeles.ListerSynthese.IRetourSynthese>;
    }
}

declare namespace ICRest.Services.TransfertBo {
    interface ITransfertBoService {
        chargerTypeEdsBackOffice(dateDeTraitement: string, codeEtablissement: string): ng.IPromise<ICRest.Modeles.TypeEds.IScTypeEds[]>;
    }
    class TransfertBoService implements ITransfertBoService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        /**
         * Méthode pour récupérer les types d'EDS de transfert Back-Office
         *
         * @param dateDeTraitement date de traitement
         * @param codeEtablissement identifiant de l'établissement
         */
        chargerTypeEdsBackOffice(dateDeTraitement: string, codeEtablissement: string): ng.IPromise<ICRest.Modeles.TypeEds.IScTypeEds[]>;
    }
}

declare namespace ICRest.Services.TransfertDecision {
    interface ITransfertDecisionService {
        chargerTypeEdsDecision(dateDeTraitement: string, codeEtablissement: string): ng.IPromise<ICRest.Modeles.TypeEds.IScTypeEds[]>;
        verifierEdsDecision(identifiantDossier: string, codeTypeEds: string, identifiantEds: string): ng.IPromise<boolean>;
    }
    class TransfertDecisionService implements ITransfertDecisionService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        /**
         * Méthode pour récupérer les types d'EDS de décision
         *
         * @param dateDeTraitement date de traitement
         * @param codeEtablissement identifiant de l'établissement
         */
        chargerTypeEdsDecision(dateDeTraitement: string, codeEtablissement: string): ng.IPromise<ICRest.Modeles.TypeEds.IScTypeEds[]>;
        /**
         * Méthode pour vérifier si l'EDS selectionnée pour décision existe
         * @param idDossier
         * @param codeTypeEds
         * @param identifiantEds
         */
        verifierEdsDecision(identifiantDossier: string, codeTypeEds: string, identifiantEds: string): ng.IPromise<boolean>;
    }
}

declare namespace ICRest.Services.Transfert {
    interface ITransfertService {
        transfererDossierViaResume(infoTransfert: ICRest.Modeles.Transfert.ISdInformationTransfert, resume: ICRest.Modeles.Transfert.IDossierResume[]): ng.IPromise<ICRest.Modeles.Transfert.IRetourTranfererDossier>;
        transfererDossierViaIdentifiant(idDossier: string, infoTransfert: ICRest.Modeles.Transfert.ISdInformationTransfert, bLancerControleDossier: boolean): ng.IPromise<ICRest.Modeles.Transfert.IRetourTranfererDossier>;
    }
    class TransfertService implements ITransfertService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        /**
         * Méthode pour transférer un dossier via un résumé
         *
         * @param infoTransfert informations de transfert
         * @param resume tableau de résumés
         */
        transfererDossierViaResume(infoTransfert: ICRest.Modeles.Transfert.ISdInformationTransfert, resumes: ICRest.Modeles.Transfert.IDossierResume[]): ng.IPromise<ICRest.Modeles.Transfert.IRetourTranfererDossier>;
        /**
         * Méthode pour transférer un dossier via un identifiant
         *
         * @param idDossier identifiant du dossier en instruction
         * @param infoTransfert informations de transfert
         * @param bLancerControleDossier booléen pour l'éventuel contrôle du dossier
         */
        transfererDossierViaIdentifiant(idDossier: string, infoTransfert: ICRest.Modeles.Transfert.ISdInformationTransfert, bLancerControleDossier: boolean): ng.IPromise<ICRest.Modeles.Transfert.IRetourTranfererDossier>;
    }
}

declare namespace ICRest.Modeles.AccorderAccessoire {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IAccorderAccessoireRequest {
        identifiantDossier: string;
        identifiantAccessoire: string;
        dateAccord: string;
        reference: string;
    }
}

declare namespace ICRest.Modeles.AjouterAccCompTier {
    interface IAjouterAccCompTiersRequest {
        identifiantDossier: string;
        idwsAccessoireComplementaire: string;
        codeRole: string;
        identifiantTiers: string;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IAccessoireLecture extends IElementLecture {
        /**
         * Idfaaa_IdntAccsGest
         */
        idAccessoireGestion: string;
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Ctfcah_CodeTyplAccs
         */
        codeTypologieAccessoire: string;
        /**
         * Txfipf_PartFinnAccs
         */
        partFinancierAccessoire: number;
        /**
         * CodeIndicAccsAper
         */
        codeIndiceAccessoireAper: boolean;
        /**
         * CodeIndicAccsFinn
         */
        codeIndiceAccessoireFinancier: boolean;
        /**
         * Dtfccr_DateCret
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Ddfaaa_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffaaa_DateFinEfft
         * Type date au format yyyy-MM-dd
         */
        dateFinEffet: string;
        /**
         * Cdfpim_CodeBeneficiaire
         */
        codeBeneficiaire: string;
        /**
         * Cdfpnb_PersonnalisationBeneficiare
         */
        personnalisationBeneficiare: number;
        /**
         * MontantFraisAccessoire
         */
        montantFraisAccessoire: number;
        /**
         * TauxRetenuAccessoire
         */
        tauxRetenuAccessoire: number;
        /**
         * ListIdntCouv
         */
        listeIdCouverture: Array<string>;
        /**
         * ListIdntCots
         */
        listeIdCotisation: Array<string>;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * ListIdntAvisOrgnExtr
         */
        listeIdAvisOrgnExtr: Array<string>;
        /**
         * IdntPlan
         */
        idPlan: string;
    }
    interface IAccessoireComplementaireLecture extends IAccessoireLecture {
        /**
         * Cnfcoi_CodeNatrOrigAccs
         */
        codeNatureOrigineAccessoire: number;
        /**
         * IdntCatlFrsComp
         */
        idCatlFrsComp: string;
        /**
         * IdntCatlParmRverTier
         */
        idCatlParametreRverTiers: string;
        /**
         * Ctfprp_RoleTiers
         */
        roleTiers: string;
        /**
         * Lbfpa1_Intitule
         */
        intitule: string;
    }
}

declare namespace ICRest.Modeles.AjouterAccessoireComp {
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IAccessoireComplementaireRequest {
        identifiantDossier: string;
        identifiantCredit: string;
        codeTypeAccessoire: string;
        codeSousTypeAccessoire: string;
    }
    interface IAccessoireLecture extends IElementLecture {
        /**
         * Idfaaa_IdntAccsGest
         */
        idAccessoireGestion: string;
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Ctfcah_CodeTyplAccs
         */
        codeTypologieAccessoire: string;
        /**
         * Txfipf_PartFinnAccs
         */
        partFinancierAccessoire: number;
        /**
         * CodeIndicAccsAper
         */
        codeIndiceAccessoireAper: boolean;
        /**
         * CodeIndicAccsFinn
         */
        codeIndiceAccessoireFinancier: boolean;
        /**
         * Dtfccr_DateCret
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Ddfaaa_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffaaa_DateFinEfft
         * Type date au format yyyy-MM-dd
         */
        dateFinEffet: string;
        /**
         * Cdfpim_CodeBeneficiaire
         */
        codeBeneficiaire: string;
        /**
         * Cdfpnb_PersonnalisationBeneficiare
         */
        personnalisationBeneficiare: number;
        /**
         * MontantFraisAccessoire
         */
        montantFraisAccessoire: number;
        /**
         * TauxRetenuAccessoire
         */
        tauxRetenuAccessoire: number;
        /**
         * ListIdntCouv
         */
        listeIdCouverture: Array<string>;
        /**
         * ListIdntCots
         */
        listeIdCotisation: Array<string>;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * ListIdntAvisOrgnExtr
         */
        listeIdAvisOrgnExtr: Array<string>;
        /**
         * IdntPlan
         */
        idPlan: string;
    }
    interface IAccessoireComplementaireLecture extends IAccessoireLecture {
        /**
         * Cnfcoi_CodeNatrOrigAccs
         */
        codeNatureOrigineAccessoire: number;
        /**
         * IdntCatlFrsComp
         */
        idCatlFrsComp: string;
        /**
         * IdntCatlParmRverTier
         */
        idCatlParametreRverTiers: string;
        /**
         * Ctfprp_RoleTiers
         */
        roleTiers: string;
        /**
         * Lbfpa1_Intitule
         */
        intitule: string;
    }
}

declare namespace ICRest.Modeles.AjouterAccessoireLieProduit {
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IAccessoireLieProduitLecture extends IAccessoireLecture {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
    }
    interface IAccessoireLieProduitRequest {
        identifiantDossier: string;
        identifiantCredit: string;
        codeTypeAccessoire: string;
    }
    interface IAccessoireLecture extends IElementLecture {
        /**
         * Idfaaa_IdntAccsGest
         */
        idAccessoireGestion: string;
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Ctfcah_CodeTyplAccs
         */
        codeTypologieAccessoire: string;
        /**
         * Txfipf_PartFinnAccs
         */
        partFinancierAccessoire: number;
        /**
         * CodeIndicAccsAper
         */
        codeIndiceAccessoireAper: boolean;
        /**
         * CodeIndicAccsFinn
         */
        codeIndiceAccessoireFinancier: boolean;
        /**
         * Dtfccr_DateCret
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Ddfaaa_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffaaa_DateFinEfft
         * Type date au format yyyy-MM-dd
         */
        dateFinEffet: string;
        /**
         * Cdfpim_CodeBeneficiaire
         */
        codeBeneficiaire: string;
        /**
         * Cdfpnb_PersonnalisationBeneficiare
         */
        personnalisationBeneficiare: number;
        /**
         * MontantFraisAccessoire
         */
        montantFraisAccessoire: number;
        /**
         * TauxRetenuAccessoire
         */
        tauxRetenuAccessoire: number;
        /**
         * ListIdntCouv
         */
        listeIdCouverture: Array<string>;
        /**
         * ListIdntCots
         */
        listeIdCotisation: Array<string>;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * ListIdntAvisOrgnExtr
         */
        listeIdAvisOrgnExtr: Array<string>;
        /**
         * IdntPlan
         */
        idPlan: string;
    }
}

declare namespace ICRest.Modeles.AjouterAssuranceControle {
    interface IAjouterAssuranceAvecControlesRequest {
        identifiantDossier: string;
        listeIdwsCreditCouvertureParAss: Array<string>;
        identifiantPersonne: string;
        identifiantConventionAssurance: string;
    }
    interface IElementSchema {
        /**
         * Idws
         */
        idws: string;
        /**
         * Desc
         */
        description: string;
    }
    interface IRemiseClientSchema extends IElementSchema {
        /**
         * MtAppl
         */
        montantApplication: number;
        /**
         * TxAppl
         */
        tauxApplication: number;
    }
    interface ITrancheMontantSchema extends IElementSchema {
        /**
         * Txfcaa_TxTrchMt
         */
        tauxTrancheMontant: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
    }
    interface ICotisationSchema extends IElementSchema {
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: number;
        /**
         * Npfce1_NbPerdAppliCots
         */
        nombrePeriodeApplicationCotisation: number;
        /**
         * Txfipf_PartFinn
         */
        partFinancier: number;
        /**
         * Mtfgfr_MtFrsGarn
         */
        montantFrsGarantie: number;
        /**
         * Ctfcac_TypeAccs
         */
        typeAccessoire: string;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
        /**
         * TranchesMontant
         */
        tranchesMontant: Array<ITrancheMontantSchema>;
    }
    interface ICotisationTrancheAgeSchema extends ICotisationSchema {
    }
    interface ICotisationPhaseSchema extends ICotisationSchema {
    }
    interface ICotisationPeriodeSchema extends ICotisationSchema {
    }
    interface ICotisationDerogationSchema extends ICotisationSchema {
    }
    interface ICouvertureCreditSchema extends IElementSchema {
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
        /**
         * IdCredit
         */
        idCredit: string;
        /**
         * Cotisations
         */
        cotisations: Array<ICotisationSchema>;
    }
    interface IAccessoireSchema extends IElementSchema {
        /**
         * CouverturesCredits
         */
        couverturesCredits: Array<ICouvertureCreditSchema>;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
    }
    interface IAvisOrganismeExterneSchema extends IElementSchema {
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd
         */
        dateAvis: string;
    }
    interface IAssuranceSchema extends IAccessoireSchema {
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * EstAssuranceAXA
         */
        estAssuranceAXA: boolean;
        /**
         * EstAssuranceCNP
         */
        estAssuranceCNP: boolean;
        /**
         * EstAssuranceGroupePourTAEA
         */
        estAssuranceGroupePourTAEA: boolean;
        /**
         * AvisOrganismeExterne
         */
        avisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * DerniersAvisOrganismeExterne
         */
        derniersAvisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeContrôle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idContrôleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IResultatAjouterAssuranceAvecControles {
        /**
         * AssuranceSchema
         */
        assuranceSchema: IAssuranceSchema;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.AjouterAvis {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IAvisMaj extends IElementMaj {
        /**
         * Dtfaad_DateSaisAvis
         * Type date au format yyyy-MM-dd
         */
        dateSaisieAvis: string;
        /**
         * Lbfaad_LiblAvis
         */
        libelleAvis: string;
        /**
         * Ctfita_CodeTyplAvis
         */
        codeTypologieAvis: string;
        /**
         * Valide
         */
        valide: boolean;
        /**
         * Motif
         */
        motif: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IAvisLecture extends IElementLecture {
        /**
         * Dtfaad_DateSaisAvis
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSaisieAvis: string;
        /**
         * Lbfaad_LiblAvis
         */
        libelleAvis: string;
        /**
         * Idfaen_IdntEnttSaisAvis
         */
        idEntiteSaisieAvis: string;
        /**
         * Lbfaen_LiblEnttSaisAvis
         */
        libelleEntiteSaisieAvis: string;
        /**
         * Ctfita_CodeTyplAvis
         */
        codeTypologieAvis: string;
        /**
         * Nofiav_NumeAvis
         */
        numeroAvis: number;
    }
    interface IAvisRequest {
        identifiantDossier: string;
        avisMiseAJour: IAvisMaj;
        dossierFerme: boolean;
    }
}

declare namespace ICRest.Modeles.AjouterCharge {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IChargeMaj extends IElementMaj {
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Txfmrc_TxPondChrg
         */
        tauxPondereCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Nufpct_NumeContEprg
         */
        numeroContratEpargne: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
    }
    interface ICreditExistantMaj extends IChargeMaj {
        /**
         * Cdfccg_CodeTypeCredCe
         */
        codeTypeCreditCE: string;
        /**
         * Cdfopc_CodePrsCompCred
         */
        codePresenceCompCredit: number;
        /**
         * Cdfimu_InvsUsgLocf
         */
        invsUsageLocf: number;
        /**
         * Ctfmlc_LienPersCred
         */
        lienPersonneCredit: number;
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Ctfmtc_CodeTypeCred
         */
        codeTypeCredit: number;
        /**
         * Mtfaoc_MtOrigCred
         */
        montantOrigineCredit: number;
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
        /**
         * Ddfmam_DateDebtAmrt
         * Type date au format yyyy-MM-dd
         */
        dateDebutAmortissement: string;
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmcp_RefePrdtCe
         */
        referenceProduitCE: string;
        /**
         * Nofmc2_CompRefePrdtCe
         */
        compReferenceProduitCE: string;
        /**
         * Nofmet_NumeEnttTitlCe
         */
        numeroEntiteTitulaireCE: number;
        /**
         * Lbfmet_LiblEnttTitlCe
         */
        libelleEntiteTitulaireCE: string;
        /**
         * Mkfmpc_MtCaptDejaRemb
         */
        montantCapitalDejaRemboursement: number;
        /**
         * Nbfmim_NbImpayes
         */
        nombreImpayes: number;
        /**
         * Nbfmir_NbImpeReglSurLesMoisGlss
         */
        nombreImpeRegleSurLesMoisGlss: number;
        /**
         * Npfmam_DureAmrt
         */
        dureAmortissement: number;
        /**
         * Cifgeh_CodeIndicAInclettHypt
         */
        codeIndiceAInclettHypotheque: boolean;
        /**
         * Mtfggi_MtGarn
         */
        montantGarantie: number;
        /**
         * Cmfmro_MotfRembAntc
         */
        motfRemboursementAnticipe: string;
        /**
         * Cdfmro_RembAvecAntc
         */
        remboursementAvecAnticipe: number;
        /**
         * Lbfmro_LiblMotfRembAntc
         */
        libelleMotfRemboursementAnticipe: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IChargeLecture extends IElementLecture {
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Txfmrc_TxPondChrg
         */
        tauxPondereCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Nufpct_NumeContEprg
         */
        numeroContratEpargne: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * IdntGrpeIntv
         */
        idGrpeIntervenant: string;
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
    }
    interface IAjouterChargeRequest {
        identifiantDossier: string;
        idPersonneEmprunteur: string;
        chargeMiseAJour: IChargeMaj;
    }
    interface ICreditExistantLecture extends IChargeLecture {
        /**
         * Cdfccg_CodeTypeCredCe
         */
        codeTypeCreditCE: string;
        /**
         * Cdfopc_CodePrsCompCred
         */
        codePresenceCompCredit: number;
        /**
         * Cdfimu_InvsUsgLocf
         */
        invsUsageLocf: number;
        /**
         * Ctfmlc_LienPersCred
         */
        lienPersonneCredit: number;
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Ctfmtc_CodeTypeCred
         */
        codeTypeCredit: number;
        /**
         * Mtfaoc_MtOrigCred
         */
        montantOrigineCredit: number;
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
        /**
         * Ddfmam_DateDebtAmrt
         * Type date au format yyyy-MM-dd
         */
        dateDebutAmortissement: string;
        /**
         * Dtfam0_DateMer0
         * Type date au format yyyy-MM-dd
         */
        dateMER0: string;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmcp_RefePrdtCe
         */
        referenceProduitCE: string;
        /**
         * Nofmc2_CompRefePrdtCe
         */
        compReferenceProduitCE: string;
        /**
         * Nofmet_NumeEnttTitlCe
         */
        numeroEntiteTitulaireCE: number;
        /**
         * Lbfmet_LiblEnttTitlCe
         */
        libelleEntiteTitulaireCE: string;
        /**
         * Mkfmpc_MtCaptDejaRemb
         */
        montantCapitalDejaRemboursement: number;
        /**
         * Mefmpe_MtPrcheche
         */
        montantPrcheche: number;
        /**
         * Mefmea_MtPrmeecheAmrt
         */
        montantPrmeecheAmortissement: number;
        /**
         * Mefmpc_MtechePrsComp
         */
        mtechePresenceComp: number;
        /**
         * Nbfmim_NbImpayes
         */
        nombreImpayes: number;
        /**
         * Nbfmir_NbImpeReglSurLesMoisGlss
         */
        nombreImpeRegleSurLesMoisGlss: number;
        /**
         * Ptfmam_PerdAmrt
         */
        periodeAmortissement: number;
        /**
         * Npfmam_DureAmrt
         */
        dureAmortissement: number;
        /**
         * Cifgeh_CodeIndicAInclettHypt
         */
        codeIndiceAInclettHypotheque: boolean;
        /**
         * Mtfggi_MtGarn
         */
        montantGarantie: number;
        /**
         * Cmfmro_MotfRembAntc
         */
        motfRemboursementAnticipe: string;
        /**
         * Cdfmro_RembAvecAntc
         */
        remboursementAvecAnticipe: number;
        /**
         * Lbfmro_LiblMotfRembAntc
         */
        libelleMotfRemboursementAnticipe: string;
        /**
         * InvestissementLocatifVisible
         */
        investissementLocatifVisible: boolean;
        /**
         * InvestissementLocatifAccessible
         */
        investissementLocatifAccessible: boolean;
        /**
         * ListIdntPhssCredExst
         */
        listeIdPhssCreditExiste: Array<string>;
    }
}

declare namespace ICRest.Modeles.AjouterClausePersonnalisee {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IClausePersonnaliseeMaj extends IElementMaj {
        /**
         * DestClsePers
         */
        destinataireClausePersonne: number;
        /**
         * LiblClsePers
         */
        libelleClausePersonne: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IClausePersonnaliseeLecture extends IElementLecture {
        /**
         * DestClsePers
         */
        destinataireClausePersonne: number;
        /**
         * LiblClsePers
         */
        libelleClausePersonne: string;
        /**
         * NumeReltClsePers
         */
        numeroRelationClausePersonne: number;
    }
    interface IAjouterClausePersonnaliseeRequest {
        identifiantDossier: string;
        clausePersonneMiseAJour: IClausePersonnaliseeMaj;
    }
}

declare namespace ICRest.Modeles.AjouterComptePersonne {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface ICompteMaj extends IElementMaj {
        /**
         * Dtfmou_DateOuvr
         * Type date au format yyyy-MM-dd
         */
        dateOuverture: string;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
    }
    interface ICompteProfessionnelMaj extends ICompteMaj {
        /**
         * Nbfmjp_NbJourDepsAutrPourCpteProf
         */
        nombreJourDepsAutrePourCompteProf: number;
        /**
         * Cdfmxp_CodeCtx
         */
        codeCtx: number;
    }
    interface ICompteDepotMaj extends ICompteMaj {
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmet_NumeEnttTitl
         */
        numeroEntiteTitulaire: number;
        /**
         * Lbfmet_LiblEnttTitl
         */
        libelleEntiteTitulaire: string;
        /**
         * Cdfmcp_CodeEttPrdt
         */
        codeEtatProduit: number;
        /**
         * Mtfmmy_SoldMoyeLongTermCpteDepoCe
         */
        soldMoyenLongTermeCompteDepoCE: number;
        /**
         * Mtfmbs_SoldMiniCpteDepoCe
         */
        soldMinimumCompteDepoCE: number;
        /**
         * Mtfmds_SoldRelCpteDepoCe
         */
        soldRelCompteDepoCE: number;
        /**
         * Ctfmca_CodeTypeCart
         */
        codeTypeCartographie: number;
        /**
         * Dtfmca_DateDelvCart
         * Type date au format yyyy-MM-dd
         */
        dateDelvCartographie: string;
        /**
         * Ctfmtd_CodeTypeDecvCpteDepo
         */
        codeTypeDecvCompteDepo: number;
        /**
         * Mtfmde_MtDecvAutrSurCpteDepo
         */
        montantDecvAutreSurCompteDepo: number;
        /**
         * Mtfmvr_MtTotlVerstCredRelsSurCpteDepo
         */
        montantTotalVersementCreditReleaseSurCompteDepo: number;
        /**
         * Nbfmjd_NbJourDepsAutrDecv
         */
        nombreJourDepsAutreDecv: number;
        /**
         * Mtfmpe_MtPrelExteRelsSurCpteDepo
         */
        montantPrelExteReleaseSurCompteDepo: number;
        /**
         * Cdfmdj_CodeDepsJust
         */
        codeDepsJustificatif: number;
        /**
         * Cdfmdi_CodePresDecvIrreSurCpteDepo
         */
        codePresDecvIrreSurCompteDepo: number;
        /**
         * Cdfmae_CodeExstCartBancHorsCe
         */
        codeExisteCartographieBancaireHorsCE: number;
        /**
         * Cdfmrc_CodeComnRelvCpteHorsCe
         */
        codeComnRelvCompteHorsCE: number;
        /**
         * Cdfmch_CodeExstCheq
         */
        codeExisteCheq: number;
        /**
         * Mtfmyc_SoldMoyeMensCrtCpteDepoCe
         */
        soldMoyenMensCreationCompteDepoCE: number;
        /**
         * Mtfmcm_MvtCredMensSurCpteDepo
         */
        mvtCreditMensSurCompteDepo: number;
        /**
         * Ctfmfc_CodeTypeFctCpteDepoCeHorsCe
         */
        codeTypeFctCompteDepoCEHorsCE: number;
        /**
         * Ddfmhc_DateOuerCpteDepoHorsCe
         * Type date au format yyyy-MM-dd
         */
        dateOuerCompteDepoHorsCE: string;
        /**
         * Lifcee_LibEtabHorsCE
         */
        libelleEtablissementHorsCE: string;
        /**
         * Mcffa1_MtTotAgiosM1HorsCE
         */
        montantTotalAgiosM1HorsCE: number;
        /**
         * Mcffa2_MtTotAgiosM2HorsCE
         */
        montantTotalAgiosM2HorsCE: number;
        /**
         * Mcffa3_MtTotAgiosM3HorsCE
         */
        montantTotalAgiosM3HorsCE: number;
        /**
         * Ciffci_IndCommIntCDDHorsCE
         */
        indicateurCommIntervCDDHorsCE: number;
        /**
         * Ciffim_IndImpayeCDDHorsCE
         */
        indicateurImpayeCDDHorsCE: number;
        /**
         * Ciffrc_IndRejetChqCDDHorsCE
         */
        indicateurRejetChequeCDDHorsCE: number;
        /**
         * Ciffrp_IndRejetPrlvtCDDHorsCE
         */
        indicateurRejetPrelevCDDHorsCE: number;
        /**
         * Cifffi_IndFraisDosBDFCDDHorsCE
         */
        indicateurFraisDossBDFCDDHorsCE: number;
        /**
         * Ciffpp_IndPrlvtPartielCDDHorsCE
         */
        indicateurPrelevPartCDDHorsCE: number;
        /**
         * Nbffd1_NbJoursDebM1CDDHorsCE
         */
        nombreJoursDebiteurM1CDDHorsCE: number;
        /**
         * Nbffd2_NbJoursDebM2CDDHorsCE
         */
        nombreJoursDebiteurM2CDDHorsCE: number;
        /**
         * Nbffd3_NbJoursDebM3CDDHorsCE
         */
        nombreJoursDebiteurM3CDDHorsCE: number;
        /**
         * Mtfcsa_MtSoldeArreteM1CDDHorsCE
         */
        montantSoldeArreteM1CDDHorsCE: number;
        /**
         * Mtfcsb_MtSoldeArreteM2CDDHorsCE
         */
        montantSoldeArreteM2CDDHorsCE: number;
        /**
         * Mtfcsc_MtSoldeArreteM3CDDHorsCE
         */
        montantSoldeArreteM3CDDHorsCE: number;
        /**
         * Cdfmmc_CodeCompoEntiteTitulaire
         */
        codeCompositionEntiteTitulaire: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface ICompteLecture extends IElementLecture {
        /**
         * Nufpcp_NumeCpte
         */
        numeroCompte: string;
        /**
         * Dtfmou_DateOuvr
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureProduitCE: string;
        /**
         * Ctfpdt_ModeCompo
         */
        modeComposition: number;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
        /**
         * Cdfppr_TypeCpte
         */
        typeCompte: string;
    }
    interface ICompteProfessionnelLecture extends ICompteLecture {
        /**
         * Nofmcp_RefePrdtCe
         */
        referenceProduitCE: string;
        /**
         * Nbfmjp_NbJourDepsAutrPourCpteProf
         */
        nombreJourDepsAutrePourCompteProf: number;
        /**
         * Cdfmxp_CodeCtx
         */
        codeCtx: number;
    }
    interface ICompteDepotLecture extends ICompteLecture {
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmet_NumeEnttTitl
         */
        numeroEntiteTitulaire: number;
        /**
         * Lbfmet_LiblEnttTitl
         */
        libelleEntiteTitulaire: string;
        /**
         * Cdfmcp_CodeEttPrdt
         */
        codeEtatProduit: number;
        /**
         * Mtfmmy_SoldMoyeLongTermCpteDepoCe
         */
        soldMoyenLongTermeCompteDepoCE: number;
        /**
         * Mtfmbs_SoldMiniCpteDepoCe
         */
        soldMinimumCompteDepoCE: number;
        /**
         * Mtfmds_SoldRelCpteDepoCe
         */
        soldRelCompteDepoCE: number;
        /**
         * Ctfmca_CodeTypeCart
         */
        codeTypeCartographie: number;
        /**
         * Dtfmca_DateDelvCart
         * Type date au format yyyy-MM-dd
         */
        dateDelvCartographie: string;
        /**
         * Ctfmtd_CodeTypeDecvCpteDepo
         */
        codeTypeDecvCompteDepo: number;
        /**
         * Mtfmde_MtDecvAutrSurCpteDepo
         */
        montantDecvAutreSurCompteDepo: number;
        /**
         * Mtfmvr_MtTotlVerstCredRelsSurCpteDepo
         */
        montantTotalVersementCreditReleaseSurCompteDepo: number;
        /**
         * Nbfmjd_NbJourDepsAutrDecv
         */
        nombreJourDepsAutreDecv: number;
        /**
         * Mtfmpe_MtPrelExteRelsSurCpteDepo
         */
        montantPrelExteReleaseSurCompteDepo: number;
        /**
         * Cdfmdj_CodeDepsJust
         */
        codeDepsJustificatif: number;
        /**
         * Cdfmdi_CodePresDecvIrreSurCpteDepo
         */
        codePresDecvIrreSurCompteDepo: number;
        /**
         * Cdfmae_CodeExstCartBancHorsCe
         */
        codeExisteCartographieBancaireHorsCE: number;
        /**
         * Cdfmrc_CodeComnRelvCpteHorsCe
         */
        codeComnRelvCompteHorsCE: number;
        /**
         * Cdfmch_CodeExstCheq
         */
        codeExisteCheq: number;
        /**
         * Mtfmyc_SoldMoyeMensCrtCpteDepoCe
         */
        soldMoyenMensCreationCompteDepoCE: number;
        /**
         * Mtfmcm_MvtCredMensSurCpteDepo
         */
        mvtCreditMensSurCompteDepo: number;
        /**
         * Ctfmfc_CodeTypeFctCpteDepoCeHorsCe
         */
        codeTypeFctCompteDepoCEHorsCE: number;
        /**
         * Ddfmhc_DateOuerCpteDepoHorsCe
         * Type date au format yyyy-MM-dd
         */
        dateOuerCompteDepoHorsCE: string;
        /**
         * Cdfmbq_Codeetbl
         */
        codeEtablissement: string;
        /**
         * Cdfmgu_CodeGuic
         */
        codeGuic: string;
        /**
         * Lifcee_LibEtabHorsCE
         */
        libelleEtablissementHorsCE: string;
        /**
         * Mcffa1_MtTotAgiosM1HorsCE
         */
        montantTotalAgiosM1HorsCE: number;
        /**
         * Mcffa2_MtTotAgiosM2HorsCE
         */
        montantTotalAgiosM2HorsCE: number;
        /**
         * Mcffa3_MtTotAgiosM3HorsCE
         */
        montantTotalAgiosM3HorsCE: number;
        /**
         * Ciffci_IndCommIntCDDHorsCE
         */
        indicateurCommIntervCDDHorsCE: number;
        /**
         * Ciffim_IndImpayeCDDHorsCE
         */
        indicateurImpayeCDDHorsCE: number;
        /**
         * Ciffrc_IndRejetChqCDDHorsCE
         */
        indicateurRejetChequeCDDHorsCE: number;
        /**
         * Ciffrp_IndRejetPrlvtCDDHorsCE
         */
        indicateurRejetPrelevCDDHorsCE: number;
        /**
         * Cifffi_IndFraisDosBDFCDDHorsCE
         */
        indicateurFraisDossBDFCDDHorsCE: number;
        /**
         * Ciffpp_IndPrlvtPartielCDDHorsCE
         */
        indicateurPrelevPartCDDHorsCE: number;
        /**
         * Nbffd1_NbJoursDebM1CDDHorsCE
         */
        nombreJoursDebiteurM1CDDHorsCE: number;
        /**
         * Nbffd2_NbJoursDebM2CDDHorsCE
         */
        nombreJoursDebiteurM2CDDHorsCE: number;
        /**
         * Nbffd3_NbJoursDebM3CDDHorsCE
         */
        nombreJoursDebiteurM3CDDHorsCE: number;
        /**
         * Mtfcsa_MtSoldeArreteM1CDDHorsCE
         */
        montantSoldeArreteM1CDDHorsCE: number;
        /**
         * Mtfcsb_MtSoldeArreteM2CDDHorsCE
         */
        montantSoldeArreteM2CDDHorsCE: number;
        /**
         * Mtfcsc_MtSoldeArreteM3CDDHorsCE
         */
        montantSoldeArreteM3CDDHorsCE: number;
        /**
         * Cdfmmc_CodeCompoEntiteTitulaire
         */
        codeCompositionEntiteTitulaire: number;
    }
    interface IAjouterCompteRequest {
        identifiantDossier: string;
        identifiantPersonne: string;
        numeroCompte: string;
        compteMiseAJour: ICompteMaj;
    }
}

declare namespace ICRest.Modeles.AjouterContratEpargneLogement {
    interface IAjouterContratEpargneLogementRequest {
        identifiantDossier: string;
        contratEpargneLogementMAJ: IContratEpargneLogementMaj;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IContratEpargneLogementMaj extends IElementMaj {
        /**
         * Cdfppr_CodeTypeEL
         */
        codeTypeEL: string;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
        /**
         * Ctfpli_LienParnAvecCedn
         */
        lienParentAvecCedn: number;
        /**
         * Lbfptc_LiblTitlCont
         */
        libelleTitulaireContrat: string;
        /**
         * Cdfpbc_CodeIndicBenePrimEl
         */
        codeIndiceBenePrimeEpargneLogement: number;
        /**
         * Ddfpct_DateOuvrCont
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureContrat: string;
        /**
         * Dtfprf_DateCltrCont
         * Type date au format yyyy-MM-dd
         */
        dateClotureContrat: string;
        /**
         * Cdfifr_CodeForc
         */
        codeForc: number;
        /**
         * Cdfiel_CodeRaptContEparLogm
         */
        codeRaptContratEpargneLogement: number;
        /**
         * Idfppc_IdntPersApprDrtCont
         */
        idPersonneApportDroitContrat: string;
        /**
         * Cdfpdj_CodeDrtJust
         */
        codeDroitJustificatif: number;
        /**
         * Cdfird_CodeResrDrtAcqs
         */
        codeResrDroitAcqs: number;
        /**
         * RapatrierTranche
         */
        rapatrierTranche: boolean;
        /**
         * DroitEstCede
         */
        droitEstCede: boolean;
        /**
         * Nufpct_IdntContEl
         */
        idContratEpargneLogement: string;
        /**
         * AttributionPrime
         */
        attributionPrime: boolean;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IContratEpargneLogementLecture extends IElementLecture {
        /**
         * Cdfppr_CodeTypeEL
         */
        codeTypeEL: number;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
        /**
         * TypeDrt
         */
        typeDroit: number;
        /**
         * Ctfpli_LienParnAvecCedn
         */
        lienParentAvecCedn: number;
        /**
         * Nufpct_IdntContEl
         */
        idContratEpargneLogement: string;
        /**
         * Lbfptc_LiblTitlCont
         */
        libelleTitulaireContrat: string;
        /**
         * Cdfpbc_CodeIndicBenePrimEl
         */
        codeIndiceBenePrimeEpargneLogement: number;
        /**
         * Ddfpct_DateOuvrCont
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureContrat: string;
        /**
         * Dtfprf_DateCltrCont
         * Type date au format yyyy-MM-dd
         */
        dateClotureContrat: string;
        /**
         * Cdfifr_CodeForc
         */
        codeForc: number;
        /**
         * Cdfiel_CodeRaptContEparLogm
         */
        codeRaptContratEpargneLogement: number;
        /**
         * Lbfpet_EtabOrigInte
         */
        etabOrigineInterieur: string;
        /**
         * Idfppc_IdntPersApprDrtCont
         */
        idPersonneApportDroitContrat: string;
        /**
         * Cdfpdj_CodeDrtJust
         */
        codeDroitJustificatif: number;
        /**
         * Cdfird_CodeResrDrtAcqs
         */
        codeResrDroitAcqs: number;
        /**
         * ContratPostReforme
         */
        contratPosteReforme: boolean;
        /**
         * ListIdntTrncEl
         */
        listeIdTrancheEpargneLogement: Array<string>;
        /**
         * IdwsPersBenef
         */
        idPersonneBeneficiaire: string;
    }
}

declare namespace ICRest.Modeles.AjouterCreditBonification {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface ICreditBonificationInfoLecture extends IElementLecture {
        /**
         * Cdfdic_CodeInfo
         */
        codeInformation: string;
        /**
         * sCdfddi_CodeDetail
         */
        codeDetail: string;
    }
    interface ICreditBonificationLecture extends IElementLecture {
        /**
         * Idfdce_IdCreditExterne
         */
        idCreditExterne: string;
        /**
         * Cifdcm_CodeEtat
         */
        codeEtat: number;
        /**
         * Mefdbc_MontantEtablissement
         */
        montantEtablissement: number;
        /**
         * Mefdbr_MontantPartenaire
         */
        montantPartenaire: number;
        /**
         * EstEligible
         */
        estEligible: boolean;
        /**
         * Lbfpnm_NomPartenaire
         */
        nomPartenaire: string;
        /**
         * ModeCalculTaux
         */
        modeCalculTaux: number;
        /**
         * TauxHorsBonif
         */
        tauxHorsBonif: number;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * Infos
         */
        information: Array<ICreditBonificationInfoLecture>;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface IAjouterCreditBonificationRequest {
        identifiantDossier: string;
        idendifiantCredit: string;
        idConventionBonification: string;
    }
}

declare namespace ICRest.Modeles.AjouterCreditExterne {
    interface IAjouterCreditExterneRequest {
        identifiantDossier: string;
        identifiantPlanFinancier: string;
        creditExterneMAJ: MajElements.ICreditExterneMaj;
    }
}

declare namespace ICRest.Modeles.AjouterCreditInterne {
    interface IAjouterCreditInterneRequest {
        identifiantDossier: string;
        identifiantPlanFinancier: string;
        identifiantProduit: string;
        montantEmprunte: number;
        initMontant: boolean;
        enOptim: boolean;
        txMontage: number;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface ITauxInteretAnnuelLecture {
        /**
         * ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * TxActu
         */
        tauxActu: number;
        /**
         * TxProp
         */
        tauxProp: number;
    }
    interface ITauxIndiceLecture extends ITauxInteretAnnuelLecture {
        /**
         * Marg
         */
        marge: number;
        /**
         * ValrIndc
         */
        valeurIndice: number;
    }
    interface ITauxFixeLecture extends ITauxInteretAnnuelLecture {
    }
    interface ITauxMixteLecture extends ITauxInteretAnnuelLecture {
        /**
         * Rpar
         */
        repartition: number;
        /**
         * TxIndcCmpstTxMixt
         */
        tauxIndiceCmpstTauxMixte: ITauxIndiceLecture;
        /**
         * TxFixeCmpstTxMixt
         */
        tauxFixeCmpstTauxMixte: ITauxFixeLecture;
    }
    interface IGroupeJustificationTEGLecture {
        /**
         * LibelleFrais
         */
        libelleFrais: string;
        /**
         * MessagesFrais
         */
        messagesFrais: Array<string>;
    }
    interface IEcheancesJustifieesAssocieesLecture {
        /**
         * TitreCredit
         */
        titreCredit: string;
        /**
         * MessagesInterets
         */
        messagesInterets: Array<string>;
        /**
         * TypesFrais
         */
        typesFrais: Array<IGroupeJustificationTEGLecture>;
    }
    interface IAjustementTauxLecture extends IElementLecture {
        /**
         * RemiseMajoration
         */
        remiseMajoration: number;
        /**
         * NouvelleRemiseMajoration
         */
        nouvelleRemiseMajoration: number;
        /**
         * TauxActuel
         */
        tauxActuel: number;
        /**
         * TauxBonificationMajoration
         */
        tauxBonificationMajoration: number;
        /**
         * TauxConseillePondere
         */
        tauxConseillePondere: number;
        /**
         * MargeRevision
         */
        margeRevision: number;
        /**
         * RemiseTaux
         */
        remiseTaux: boolean;
        /**
         * ChangementTauxConseille
         */
        changementTauxConseille: boolean;
    }
    interface ICreditInterneLecture extends IElementLecture {
        /**
         * IndicEvltTxConsPond
         */
        indiceEvolutionTauxConsolidePondere: number;
        /**
         * Idfccp_IdntConvPres
         */
        idConventionPres: string;
        /**
         * Cdfdae_CodeIndicEnvAvisEche
         */
        codeIndiceEnvoiAvisEcheance: number;
        /**
         * Cifaio_CodeIndicOptmImps
         */
        codeIndiceOptimisationImps: number;
        /**
         * Cnfctx_CodeIndicTxInteRevs
         */
        codeIndiceTauxInterieurRevision: number;
        /**
         * Nofapd_NumeCredPlanFinn
         */
        numeroCreditPlanFinancier: number;
        /**
         * Idfacs_RefeExtnCred
         */
        referenceExterneCredit: string;
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Cdfcfc_CodeFamlContRegl
         */
        codeFamilleContratRegle: string;
        /**
         * Ctfcbs_CodeSclssBafi
         */
        codeSousclasseBafi: string;
        /**
         * Cdfcrl_CodeIndicCredRels
         */
        codeIndiceCreditRelease: number;
        /**
         * Idfcct_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Cdfccr_CodeIndicTrtInteIntr
         */
        codeIndiceTraitementInterieurIntr: number;
        /**
         * Cdfcia_CodeTypeActlInteIntr
         */
        codeTypeActuarielInterieurIntr: number;
        /**
         * Cdfbdv_CodeDevsVerst
         */
        codeDeviseVersement: string;
        /**
         * Cdfbje_CodeIndicExstPiecJustPourDeclechlVerst
         */
        codeIndiceExistePieceJustificatifPourDeclechlVersement: number;
        /**
         * Cdfbju_CodeExistJustDeclVerst
         */
        codeExistJustificatifDeclarationVersement: number;
        /**
         * Cdfbju_CodeTypeRattJustDecl
         */
        codeTypeRattachementJustificatifDeclaration: number;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Dtfam0_DateMer0
         * Type date au format yyyy-MM-dd
         */
        dateMER0: string;
        /**
         * Dtfam1_DateMer1
         * Type date au format yyyy-MM-dd
         */
        dateMER1: string;
        /**
         * Dtfccr_DateCretCred
         * Type date au format yyyy-MM-dd
         */
        dateCreationCredit: string;
        /**
         * Dlfbct_DateLimtVerstFond
         * Type date au format yyyy-MM-dd
         */
        dateLimiteVersementFond: string;
        /**
         * Dhfacj_QuantEche
         */
        jourDateEcheance: number;
        /**
         * Dffb1v_DateLimtPremVerstFond
         * Type date au format yyyy-MM-dd
         */
        dateLimitePremierVersementFond: string;
        /**
         * Cdfaea_CodeIndicElgbApl
         */
        codeIndiceEligibiliteAPL: number;
        /**
         * Cdfcie_CodeIndicelgbAuprInstemss
         */
        codeIndicelgbAuprInstemss: number;
        /**
         * Cdfacc_CodeIndicGestCredAvecCpteCrrt
         */
        codeIndiceGestionCreditAvecCompteCrrt: number;
        /**
         * Dtfcdc_DateDernCalcCred
         * Type date au format yyyy-MM-dd
         */
        dateDernierCalculCredit: string;
        /**
         * Ccfarc_CodeIndicCalcAFaire
         */
        codeIndiceCalculAFaire: number;
        /**
         * Mtfael_MtPrimEparLogm
         */
        montantPrimeEpargneLogement: number;
        /**
         * Txfasr_TxNegcSurcRembAntc
         */
        tauxNegocieSurcRemboursementAnticipe: number;
        /**
         * Txfcpd_TxPondCntExtr
         */
        tauxPondereCntExtr: number;
        /**
         * Txfck4_TxPondCons
         */
        tauxPondereConsolide: number;
        /**
         * Txfrr1_MargPondCons
         */
        margePondereConsolide: number;
        /**
         * Ccfbec_CodeCalcEcheVerst
         */
        codeCalculEcheanceVersement: number;
        /**
         * Cefbec_CodeettEcheVerst
         */
        codeettEcheanceVersement: number;
        /**
         * Cdfbct_CodeIndcNatrEcheVerst
         */
        codeIndiceNatureEcheanceVersement: number;
        /**
         * Lbfpa1_InttCred
         */
        intituleLigneUn: string;
        /**
         * Nufbdt_DomcTres
         */
        domiciliationTres: string;
        /**
         * Nufbve_NumeDomcPourMiseADispFond
         */
        numeroDomiciliationPourMiseADispFond: string;
        /**
         * Mtfcve_MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * Ctfcpc_CodeIndicNatrPretComb
         */
        codeIndiceNaturePretComb: number;
        /**
         * Cifaam_CodeIndicPresUneBonfUneMajreTx
         */
        codeIndicePresUneBonificationUneMajreTaux: number;
        /**
         * Cefad0_CodeConfmRedcDurePTZ
         */
        codeConfirmationReductionDurePTZ: number;
        /**
         * Cefam0_CodeConfmRedcMtPTZ
         */
        codeConfirmationReductionMontantPTZ: number;
        /**
         * Mtfcpz_MtReglPTZ
         */
        montantReglePTZ: number;
        /**
         * MtMinPTZ
         */
        montantMinimumPTZ: number;
        /**
         * Mcface_MtCredEuro
         */
        montantCreditEuro: number;
        /**
         * Msfcpv_MtMaxPretPVH
         */
        montantMaximumPretPVH: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfada_CodeDevsSaccef
         */
        codeDeviseSaccef: string;
        /**
         * Npfcfi_NbPerdCred
         */
        nombrePeriodeCredit: number;
        /**
         * Pefcfi_CodePerdCred
         */
        codePeriodeCredit: number;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
        /**
         * Mefape_MtPrmeEcheHorsAccsCred
         */
        montantPrmeEcheanceHorsAccessoireCredit: number;
        /**
         * Mefacc_MtPrmeEcheAssr
         */
        montantPrmeEcheanceAssurance: number;
        /**
         * Mcafco_MtTotlCredHorsAccsHorsPerdPref
         */
        montantTotalCreditHorsAccessoireHorsPeriodePref: number;
        /**
         * Mcfaac_CoutTotlAccsPostSurCred
         */
        coutTotalAccessoirePosteSurCredit: number;
        /**
         * Mcfafd_CoutTotlFrsDossAsscCred
         */
        coutTotalFrsDossierAssuranceCredit: number;
        /**
         * Mcfgfr_CoutTotlFrsGarnAsscCred
         */
        coutTotalFrsGarantieAssuranceCredit: number;
        /**
         * Mcfacf_CoutTotlFrsCrtgeAsscCred
         */
        coutTotalFrsCrtgeAssuranceCredit: number;
        /**
         * Mcfosp_CoutTotlServSurObjtPerdAsscCred
         */
        coutTotalServiceSurObjetPeriodeAssuranceCredit: number;
        /**
         * Mcfafp_CoutTotlAccsCompPerdAsscCred
         */
        coutTotalAccessoireCompPeriodeAssuranceCredit: number;
        /**
         * Mcfoso_CoutTotlServSurObjtAperAsscCred
         */
        coutTotalServiceSurObjetAperAssuranceCredit: number;
        /**
         * Mcfafr_CoutTotlAccsCompAperAsscCred
         */
        coutTotalAccessoireCompAperAssuranceCredit: number;
        /**
         * Mefoso_MtPrmeEcheServSurObjt
         */
        montantPrmeEcheanceServiceSurObjet: number;
        /**
         * Mefafr_MtPrmeEcheAccsComp
         */
        montantPrmeEcheanceAccessoireComp: number;
        /**
         * Mcfaia_MtTotlAssrPerd
         */
        montantTotalAssurancePeriode: number;
        /**
         * CodeIndicModeCalcTx
         */
        codeIndiceModeCalculTaux: number;
        /**
         * TxMoyeActuHorsBonf
         */
        tauxMoyenActuHorsBonification: number;
        /**
         * TxMoyePropHorsBonf
         */
        tauxMoyenPropHorsBonification: number;
        /**
         * TxFutr
         */
        tauxFutr: ITauxIndiceLecture;
        /**
         * TxIntl
         */
        tauxInitial: ITauxInteretAnnuelLecture;
        /**
         * TxMoyeActu
         */
        tauxMoyenActu: number;
        /**
         * TxMoyeProp
         */
        tauxMoyenProp: number;
        /**
         * TegActu
         */
        tegActu: number;
        /**
         * TegProp
         */
        tegProp: number;
        /**
         * TAEA
         */
        tAEA: number;
        /**
         * Txfamc_TxMontage
         */
        tauxMontage: number;
        /**
         * BornesFraisDossier
         */
        bornesFraisDossier: Array<number>;
        /**
         * TegModeRestitution
         */
        tegModeRestitution: number;
        /**
         * MontantPTZVerrouille
         */
        montantPTZVerrouille: boolean;
        /**
         * DureePTZVerrouillee
         */
        dureePTZVerrouillee: boolean;
        /**
         * EcheancesJustifieesAssociees
         */
        echeancesJustifieesAssociees: IEcheancesJustifieesAssocieesLecture;
        /**
         * EtatForcageFraisDossier
         */
        etatForcageFraisDossier: string;
        /**
         * TxUsure
         */
        tauxUsure: number;
        /**
         * AjustementTaux
         */
        ajustementTaux: IAjustementTauxLecture;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
        /**
         * IdntCpteCrrt
         */
        idCompteCrrt: string;
        /**
         * IdntModl
         */
        idModele: string;
        /**
         * IdntModlVersFrct
         */
        idModeleVersementFraction: string;
        /**
         * IdntRemsClnt
         */
        idRemsClient: string;
        /**
         * ListIdntDrtUtls
         */
        listeIdDroitUtilisation: Array<string>;
        /**
         * ListIdntPayr
         */
        listeIdPayr: Array<string>;
        /**
         * ListIdntPhas
         */
        listeIdPhase: Array<string>;
        /**
         * ListIdntSuivPlnf
         */
        listeIdSuivantPlafond: Array<string>;
        /**
         * ListIdntParmRevs
         */
        listeIdParametreRevision: Array<string>;
        /**
         * ListIdntVartDure
         */
        listeIdVartDure: Array<string>;
        /**
         * ListIdntAccs
         */
        listeIdAccessoire: Array<string>;
        /**
         * ListIdntAssr
         */
        listeIdAssurance: Array<string>;
        /**
         * ListIdntGarn
         */
        listeIdGarantie: Array<string>;
        /**
         * ListIdntAccsComp
         */
        listeIdAccessoireComp: Array<string>;
        /**
         * ListIdntAccsLiesPrdt
         */
        listeIdAccessoireLiesProduit: Array<string>;
        /**
         * ListIdntCreditsEPS
         */
        listeIdCreditsEPS: Array<string>;
        /**
         * IdntComplementEPS
         */
        idComplementEPS: string;
    }
}

declare namespace ICRest.Modeles.AjouterEvenement {
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IEvenementLecture extends IElementLecture {
        /**
         * Nofaed_NumeReltEvenDoss
         */
        numeroRelationEvenDossier: number;
        /**
         * Cefadc_CodeEttDoss
         */
        codeEtatDossier: number;
        /**
         * Dtfaed_DateSaisEven
         * Type date au format yyyy-MM-dd
         */
        dateSaisieEven: string;
        /**
         * Lbfamd_MessEnrgSurEvenDoss
         */
        messEnregistrementSurEvenDossier: string;
        /**
         * Dtfaee_DateEfftEven
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEffetEven: string;
        /**
         * Ctfaev_CodeTypeEven
         */
        codeTypeEven: string;
        /**
         * Idfase_IdntEnttSaisEven
         */
        idEntiteSaisieEven: string;
        /**
         * Lbfase_LiblEnttSaisEven
         */
        libelleEntiteSaisieEven: string;
        /**
         * Cefhgc_CodeIndicGestCentEven
         */
        codeIndiceGestionCentralEven: number;
        /**
         * Cdfabo_ElemStrcGestBackCent
         */
        elementStructureGestionBackCentral: string;
        /**
         * Idfce3_IdntCaisAsscBackCent
         */
        idCaisseAssuranceBackCentral: number;
        /**
         * LiblEven
         */
        libelleEven: string;
        /**
         * CodeNatrEven
         */
        codeNatureEven: string;
        /**
         * IdntAvisAsscEven
         */
        idAvisAssuranceEven: string;
    }
    interface IAjouterEvenementRequest {
        identifiantDossier: string;
        codeTypeEvenement: string;
        libelleFacultatif: string;
    }
}

declare namespace ICRest.Modeles.AjouterFamilleEpargne {
    interface IFamilleEpargnePersonneRequest {
        identifiantDossier: string;
        idPersonne: string;
        familleMiseAJour: IFamilleEpargneMaj;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IFamilleEpargneMaj extends IElementMaj {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Nbfmpr_NbPrdtDetnPourUneFamlPrdtAdr
         */
        nombreProduitDetnPourUneFamilleProduitAdresse: number;
        /**
         * Mtfmve_MtValrEprgAvntOper
         */
        montantValeurEpargneAvenantOper: number;
        /**
         * Lbfcej_LiblCaisEprg
         */
        libelleCaisseEpargne: string;
        /**
         * Dtfmve_DateValrEprg
         * Type date au format yyyy-MM-dd
         */
        dateValeurEpargne: string;
        /**
         * Mtfmep_MtEprgApreOper
         */
        montantEpargneApreOper: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IFamilleEpargneLecture extends IElementLecture {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Nbfmpr_NbPrdtDetnPourUneFamlPrdtAdr
         */
        nombreProduitDetnPourUneFamilleProduitAdresse: number;
        /**
         * Mtfmve_MtValrEprgAvntOper
         */
        montantValeurEpargneAvenantOper: number;
        /**
         * Lbfcej_LiblCaisEprg
         */
        libelleCaisseEpargne: string;
        /**
         * Dtfmve_DateValrEprg
         * Type date au format yyyy-MM-dd
         */
        dateValeurEpargne: string;
        /**
         * Mtfmep_MtEprgApreOper
         */
        montantEpargneApreOper: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * IdntPers
         */
        idPersonne: string;
    }
}

declare namespace ICRest.Modeles.AjouterGarantieAvecControle {
    interface IAjouterGarantieAvecControlesRequest {
        identifiantDossier: string;
        listeIdentifiantCreditCouverture: Array<string>;
        natureGarantie: string;
        identifiantGarantie: string;
        forcerAjout: boolean;
    }
    interface IElementSchema {
        /**
         * Idws
         */
        idws: string;
        /**
         * Desc
         */
        description: string;
    }
    interface IRemiseClientSchema extends IElementSchema {
        /**
         * MtAppl
         */
        montantApplication: number;
        /**
         * TxAppl
         */
        tauxApplication: number;
    }
    interface ITrancheMontantSchema extends IElementSchema {
        /**
         * Txfcaa_TxTrchMt
         */
        tauxTrancheMontant: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
    }
    interface ICotisationSchema extends IElementSchema {
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: number;
        /**
         * Npfce1_NbPerdAppliCots
         */
        nombrePeriodeApplicationCotisation: number;
        /**
         * Txfipf_PartFinn
         */
        partFinancier: number;
        /**
         * Mtfgfr_MtFrsGarn
         */
        montantFrsGarantie: number;
        /**
         * Ctfcac_TypeAccs
         */
        typeAccessoire: string;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
        /**
         * TranchesMontant
         */
        tranchesMontant: Array<ITrancheMontantSchema>;
    }
    interface ICouvertureCreditSchema extends IElementSchema {
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
        /**
         * IdCredit
         */
        idCredit: string;
        /**
         * Cotisations
         */
        cotisations: Array<ICotisationSchema>;
    }
    interface IAccessoireSchema extends IElementSchema {
        /**
         * CouverturesCredits
         */
        couverturesCredits: Array<ICouvertureCreditSchema>;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
    }
    interface IGarantieSchema extends IAccessoireSchema {
        /**
         * IdPersonne
         */
        idPersonne: string;
    }
    interface IBienPorteEnGarantieSchema extends IElementSchema {
    }
    interface IHypothequeAerienneSchema extends IBienPorteEnGarantieSchema {
    }
    interface IBonDeCaisseCapitalisationSchema extends IBienPorteEnGarantieSchema {
    }
    interface IDelegationLoyerSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICessionDaillyAutreSchema extends IBienPorteEnGarantieSchema {
    }
    interface IVersementAttenduSchema extends IElementSchema {
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
    }
    interface IContratAssuranceSchema extends IBienPorteEnGarantieSchema {
        /**
         * VersementsAttendus
         */
        versementsAttendus: Array<IVersementAttenduSchema>;
    }
    interface IAntichreseSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageVehiculeSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageCompteInstrumentFinancierSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementPartSocialeSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementValeurMaterielleSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementValeurMobiliereSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementFondDeCommerceSchema extends IBienPorteEnGarantieSchema {
    }
    interface IProprietaireSchema extends IElementSchema {
    }
    interface IHypothequeImmobiliereSchema extends IBienPorteEnGarantieSchema {
        /**
         * Proprietaires
         */
        proprietaires: Array<IProprietaireSchema>;
    }
    interface IBienDiversSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICessionDaillyLoyerImmeubleSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICreditHDSchema extends IElementSchema {
        /**
         * Idfcct_RefrPret
         */
        referencePret: string;
        /**
         * Mtfaoc_MtPret
         */
        montantPret: number;
        /**
         * IdntCredExnt
         */
        idCreditExnt: string;
    }
    interface IGarantieHDSchema extends IElementSchema {
        /**
         * Cdfcng_NatrGarnHorsDoss
         */
        natureGarantieHorsDossier: string;
        /**
         * Idfgg1_IdntOrigGarnHorsDoss
         */
        idOrigineGarantieHorsDossier: string;
        /**
         * CreditsHD
         */
        creditsHD: Array<ICreditHDSchema>;
    }
    interface IGarantieReelleSchema extends IGarantieSchema {
        /**
         * BienPorteEnGarantie
         */
        bienPorteEnGarantie: IBienPorteEnGarantieSchema;
        /**
         * GarantieHD
         */
        garantieHD: IGarantieHDSchema;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
    }
    interface IAvisOrganismeExterneSchema extends IElementSchema {
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd
         */
        dateAvis: string;
    }
    interface IGarantiePersonnelleSchema extends IGarantieSchema {
        /**
         * AvisOrganismeExterne
         */
        avisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * DerniersAvisOrganismeExterne
         */
        derniersAvisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IResultatAjouterGarantieAvecControles {
        /**
         * GarantieSchema
         */
        garantieSchema: IGarantieSchema;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.AjoutergarantiePersoConventionnee {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IAjouterGarantiePersoConventionneeControlesRequest {
        identifiantDossier: string;
        listeIdwsCreditCouvertureParGarantie: Array<string>;
        identifiantConventionGarantie: string;
        forcerAjout: boolean;
    }
    interface IElementSchema {
        /**
         * Idws
         */
        idws: string;
        /**
         * Desc
         */
        description: string;
    }
    interface IRemiseClientSchema extends IElementSchema {
        /**
         * MtAppl
         */
        montantApplication: number;
        /**
         * TxAppl
         */
        tauxApplication: number;
    }
    interface ITrancheMontantSchema extends IElementSchema {
        /**
         * Txfcaa_TxTrchMt
         */
        tauxTrancheMontant: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
    }
    interface ICotisationSchema extends IElementSchema {
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: number;
        /**
         * Npfce1_NbPerdAppliCots
         */
        nombrePeriodeApplicationCotisation: number;
        /**
         * Txfipf_PartFinn
         */
        partFinancier: number;
        /**
         * Mtfgfr_MtFrsGarn
         */
        montantFrsGarantie: number;
        /**
         * Ctfcac_TypeAccs
         */
        typeAccessoire: string;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
        /**
         * TranchesMontant
         */
        tranchesMontant: Array<ITrancheMontantSchema>;
    }
    interface ICotisationPeriodeSchema extends ICotisationSchema {
    }
    interface ICotisationDerogationSchema extends ICotisationSchema {
    }
    interface ICotisationPhaseSchema extends ICotisationSchema {
    }
    interface ICotisationTrancheAgeSchema extends ICotisationSchema {
    }
    interface ICouvertureCreditSchema extends IElementSchema {
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
        /**
         * IdCredit
         */
        idCredit: string;
        /**
         * Cotisations
         */
        cotisations: Array<ICotisationSchema>;
    }
    interface IAccessoireSchema extends IElementSchema {
        /**
         * CouverturesCredits
         */
        couverturesCredits: Array<ICouvertureCreditSchema>;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
    }
    interface IGarantieSchema extends IAccessoireSchema {
        /**
         * IdPersonne
         */
        idPersonne: string;
    }
    interface IBienPorteEnGarantieSchema extends IElementSchema {
    }
    interface IProprietaireSchema extends IElementSchema {
    }
    interface IHypothequeImmobiliereSchema extends IBienPorteEnGarantieSchema {
        /**
         * Proprietaires
         */
        proprietaires: Array<IProprietaireSchema>;
    }
    interface IHypothequeAerienneSchema extends IBienPorteEnGarantieSchema {
    }
    interface IBonDeCaisseCapitalisationSchema extends IBienPorteEnGarantieSchema {
    }
    interface IDelegationLoyerSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICessionDaillyAutreSchema extends IBienPorteEnGarantieSchema {
    }
    interface IAntichreseSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICessionDaillyLoyerImmeubleSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageVehiculeSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageCompteInstrumentFinancierSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementPartSocialeSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementValeurMaterielleSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementValeurMobiliereSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementFondDeCommerceSchema extends IBienPorteEnGarantieSchema {
    }
    interface IBienDiversSchema extends IBienPorteEnGarantieSchema {
    }
    interface IVersementAttenduSchema extends IElementSchema {
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
    }
    interface IContratAssuranceSchema extends IBienPorteEnGarantieSchema {
        /**
         * VersementsAttendus
         */
        versementsAttendus: Array<IVersementAttenduSchema>;
    }
    interface ICreditHDSchema extends IElementSchema {
        /**
         * Idfcct_RefrPret
         */
        referencePret: string;
        /**
         * Mtfaoc_MtPret
         */
        montantPret: number;
        /**
         * IdntCredExnt
         */
        idCreditExnt: string;
    }
    interface IGarantieHDSchema extends IElementSchema {
        /**
         * Cdfcng_NatrGarnHorsDoss
         */
        natureGarantieHorsDossier: string;
        /**
         * Idfgg1_IdntOrigGarnHorsDoss
         */
        idOrigineGarantieHorsDossier: string;
        /**
         * CreditsHD
         */
        creditsHD: Array<ICreditHDSchema>;
    }
    interface IGarantieReelleSchema extends IGarantieSchema {
        /**
         * BienPorteEnGarantie
         */
        bienPorteEnGarantie: IBienPorteEnGarantieSchema;
        /**
         * GarantieHD
         */
        garantieHD: IGarantieHDSchema;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
    }
    interface IAvisOrganismeExterneSchema extends IElementSchema {
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateAvis: string;
    }
    interface IGarantiePersonnelleSchema extends IGarantieSchema {
        /**
         * AvisOrganismeExterne
         */
        avisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * DerniersAvisOrganismeExterne
         */
        derniersAvisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface IResultatAjouterGarantieAvecControles {
        /**
         * GarantieSchema
         */
        garantieSchema: IGarantieSchema;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.AjouterMandat {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IMandatLecture extends IElementLecture {
        /**
         * Cocxbq_CodeCaisse
         */
        codeCaisse: string;
        /**
         * Dgfdms_DateDeSignature
         * Type date au format yyyy-MM-dd
         */
        dateDeSignature: string;
        /**
         * Ctfdfm_TypeFrequenceMandat
         */
        typeFrequenceMandat: string;
        /**
         * Ctfdma_TypeMandatSepaSdd
         */
        typeMandatSepaSdd: number;
        /**
         * Cnfdma_CodeNatureMandat
         */
        codeNatureMandat: number;
        /**
         * Idfdma_RefeMandat
         */
        referenceMandat: string;
        /**
         * Llfdcr_NomDuCreancier
         */
        nomDuCreancier: string;
        /**
         * Llfdac_AdresseDuCreancier
         */
        adresseDuCreancier: string;
        /**
         * Cofdpc_CodePostalDuCreancier
         */
        codePostalDuCreancier: string;
        /**
         * Lcfdvc_VilleDuCreancier
         */
        villeDuCreancier: string;
        /**
         * Ctfdpa_CodePaysDuCreancier
         */
        codePaysDuCreancier: string;
        /**
         * Llfdpo_LibDuPaysDonneurOrdre
         */
        libelleDuPaysDonneurOrdre: string;
        /**
         * Idfdcr_IdntCreancierSepaDomaine
         */
        idCreancierSepaDomaine: string;
        /**
         * Llfddb_NomDuDebiteur
         */
        nomDuDebiteur: string;
        /**
         * Idfdb3_CodeBicDebiteur
         */
        codeBicDebiteur: string;
        /**
         * Idfdi3_NumeroIbanCompteDebiteur
         */
        numeroIbanCompteDebiteur: string;
        /**
         * Idfddb_IdntDuDebiteur
         */
        idDuDebiteur: string;
        /**
         * Llfdad_AdresseDuDebiteur
         */
        adresseDuDebiteur: string;
        /**
         * Cofdpd_CodePostalDuDebiteur
         */
        codePostalDuDebiteur: string;
        /**
         * Lcfdvd_VilleDuDebiteur
         */
        villeDuDebiteur: string;
        /**
         * Ctfdpd_CodePaysDuDebiteur
         */
        codePaysDuDebiteur: string;
        /**
         * Llfdpd_LibPaysDuDebiteur
         */
        libellePaysDuDebiteur: string;
        /**
         * Llfdci_LibCreancierInitial
         */
        libelleCreancierInitial: string;
        /**
         * Idfdct_IdntCreancierInitial
         */
        idCreancierInitial: string;
        /**
         * Llfddf_LibDebiteurFinal
         */
        libelleDebiteurFinal: string;
        /**
         * Idfddf_IdntDebiteurFinal
         */
        idDebiteurFinal: string;
    }
    interface IAjouterMandatRequest {
        identifiantDossier: string;
        identifiantPayeur: string;
        bicIban: string;
        modeReglement: string;
    }
}

declare namespace ICRest.Modeles.AjouterPayeur {
    interface IAjouterPayeurRequest {
        identifiantDossier: string;
        identifiantCredit: string;
        identifiantPersonne: string;
        payeurMiseAJour: IPayeurMaj;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IPersonneMaj extends IElementMaj {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Cdfprs_CrteResd
         */
        crteResd: number;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_CateTypeAdmnBafi
         */
        cateTypeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Idfpbd_CleBdf
         */
        cleBDF: string;
        /**
         * Dtfper_DateEntrReltAvecCons
         * Type date au format yyyy-MM-dd
         */
        dateEntrRelationAvecConsolide: string;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Cdfpap_CodeAssmPartc
         */
        codeAssmPartc: number;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
        /**
         * Lbfpen_EnsgComm
         */
        ensgCommission: string;
        /**
         * Lbfpir_LieuInscRC
         */
        lieuInscRC: string;
        /**
         * Nufpir_NumeInscRC
         */
        numeroInscRC: string;
    }
    interface IPersonneMoraleMaj extends IPersonneMaj {
        /**
         * Nufpin_NumeInsee
         */
        numeroINSEE: string;
        /**
         * Dtfpir_DateInscRcs
         * Type date au format yyyy-MM-dd
         */
        dateInscRcs: string;
        /**
         * Dtfpcs_DateCretSoce
         * Type date au format yyyy-MM-dd
         */
        dateCreationSoce: string;
        /**
         * Mcfpch_ChffAffrHtExrcPrec
         */
        chiffreAffrHtExrcPrec: number;
        /**
         * Nbfpsa_NbSalr
         */
        nombreSalr: number;
        /**
         * Cdfpfj_FormJurd
         */
        formeJuridique: string;
        /**
         * Cdfpdp_TypeDrtPersMorl
         */
        typeDroitPersonneMorl: number;
        /**
         * Mkfpca_MtCapt
         */
        montantCapital: number;
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
        /**
         * ListRolePersPhys
         */
        listeRolePersonnePhys: Array<string>;
    }
    interface IPersonnePhysiqueMaj extends IPersonneMaj {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfppn_Prnm
         */
        prenom: string;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Lbfpnj_NomJeunFill
         */
        nomJeunFill: string;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNais: string;
        /**
         * Lbfpna_LieuNais
         */
        lieuNais: string;
        /**
         * Cdfpce_CodePersCe
         */
        codePersonneCE: number;
        /**
         * Cdfprm_CodeRegmMatr
         */
        codeRegimeMatrimonial: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpsp_CateSoc
         */
        cateInteret: string;
        /**
         * Dtfpma_DateEfftSittFaml
         * Type date au format yyyy-MM-dd
         */
        dateEffetSituationFamille: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmlo_CodeModeLogm
         */
        codeModeLogement: number;
        /**
         * Dtfmlo_DateEntrLogm
         * Type date au format yyyy-MM-dd
         */
        dateEntrLogement: string;
        /**
         * Cdfmju_CodeCapcJurd
         */
        codeCapcJuridique: number;
        /**
         * Ctfccj_CodeTypeCapJurd
         */
        codeTypeCapJuridique: string;
        /**
         * Cdfmnt_CodeNatn
         */
        codeNational: number;
        /**
         * Cdfmtd_CodeSaisAvisTierDtnr
         */
        codeSaisieAvisTiersDtnr: number;
        /**
         * Cdfmcx_CodeCtx
         */
        codeContentieuxHorsComptCE: number;
        /**
         * Mtfmes_MtEncrSaccefHorsOprt
         */
        montantEncoursSaccefHorsOprt: number;
        /**
         * Cdfmtr_TypeTrspUtls
         */
        typeTrspUtilisation: number;
        /**
         * Cdfmge_CodeGeotAdrsDomc
         */
        codeGeotAdresseDomiciliation: string;
        /**
         * Cdfppb_CodePaysResdEmpr
         */
        codePaysResdEmprunt: string;
        /**
         * Cdfopb_CodePaysLocsEmpr
         */
        codePaysLocalisationEmprunt: string;
        /**
         * Cdfkpa_CodePrflEmpr
         */
        codeProfilEmprunt: number;
        /**
         * Cofcpn_CodePstlLieuNais
         */
        codePstlLieuNais: string;
    }
    interface IPayeurMaj extends IElementMaj {
        /**
         * Mtfdfx_MtPaieCred
         */
        montantPaiementCredit: number;
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
        /**
         * Cdfdrg_ModeReglUtlsParPayr
         */
        modeRegleUtilisationParPayr: string;
        /**
         * Nufddt_NumeCptePayr
         */
        numeroComptePayr: string;
        /**
         * PersonneMaj
         */
        personneMAJ: IPersonneMaj;
        /**
         * Idfdma_RefeUnqMand
         */
        referenceUniqueMand: string;
        /**
         * Dgfdma_DateSignMand
         * Type date au format yyyy-MM-dd
         */
        dateSigneMand: string;
        /**
         * Cdfdrs_ModeReglUtlsParPayrSecours
         */
        modeRegleUtilisationParPayrSecours: string;
        /**
         * NumeroComptePayeurSecours
         */
        numeroComptePayeurSecours: string;
        /**
         * Idfdms_RefeUnqMandSecours
         */
        referenceUniqueMandSecours: string;
        /**
         * Dgfdms_DateSignMandSecours
         * Type date au format yyyy-MM-dd
         */
        dateSigneMandSecours: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IPayeurLecture extends IElementLecture {
        /**
         * Mtfdfx_MtPaieCred
         */
        montantPaiementCredit: number;
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
        /**
         * Cdfdrg_ModeReglUtlsParPayr
         */
        modeRegleUtilisationParPayr: string;
        /**
         * Nufddt_NumeCptePayr
         */
        numeroComptePayr: string;
        /**
         * Idfdma_RefeUnqMand
         */
        referenceUniqueMand: string;
        /**
         * Dgfdma_DateSignMand
         * Type date au format yyyy-MM-dd
         */
        dateSigneMand: string;
        /**
         * Cdfdrs_ModeReglUtlsParPayrSecours
         */
        modeRegleUtilisationParPayrSecours: string;
        /**
         * NumeroComptePayeurSecours
         */
        numeroComptePayeurSecours: string;
        /**
         * Idfdms_RefeUnqMandSecours
         */
        referenceUniqueMandSecours: string;
        /**
         * Dgfdms_DateSignMandSecours
         * Type date au format yyyy-MM-dd
         */
        dateSigneMandSecours: string;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntPersIdntCommPayr
         */
        idPersonneIdCommissionPayr: string;
    }
}

declare namespace ICRest.Modeles.AjouterPersonneAvecControles {
    interface IAjouterPersonneAvecControlesRequest {
        identifiantDossier: string;
        listePersonne: Array<IPersonneMaj>;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IPersonneMaj extends IElementMaj {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Cdfprs_CrteResd
         */
        crteResd: number;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_CateTypeAdmnBafi
         */
        cateTypeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Idfpbd_CleBdf
         */
        cleBDF: string;
        /**
         * Dtfper_DateEntrReltAvecCons
         * Type date au format yyyy-MM-dd
         */
        dateEntrRelationAvecConsolide: string;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Cdfpap_CodeAssmPartc
         */
        codeAssmPartc: number;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
        /**
         * Lbfpen_EnsgComm
         */
        ensgCommission: string;
        /**
         * Lbfpir_LieuInscRC
         */
        lieuInscRC: string;
        /**
         * Nufpir_NumeInscRC
         */
        numeroInscRC: string;
        /**
         * RolePersonne
         */
        rolePersonne: number;
        /**
         * Rattachement
         */
        rattachement: boolean;
        /**
         * ForcerRattachement
         */
        forcerRattachement: boolean;
        /**
         * ForcerAjout
         */
        forcerAjout: boolean;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Hefcsd_DateSignDmdeCred
         * Type date au format yyyy-MM-dd
         */
        dateSigneDmdeCredit: string;
        /**
         * Hefcso_DateSignOffre
         * Type date au format yyyy-MM-dd
         */
        dateSigneOffre: string;
    }
    interface IPersonneMoraleMaj extends IPersonneMaj {
        /**
         * Nufpin_NumeInsee
         */
        numeroINSEE: string;
        /**
         * Dtfpir_DateInscRcs
         * Type date au format yyyy-MM-dd
         */
        dateInscRcs: string;
        /**
         * Dtfpcs_DateCretSoce
         * Type date au format yyyy-MM-dd
         */
        dateCreationSoce: string;
        /**
         * Mcfpch_ChffAffrHtExrcPrec
         */
        chiffreAffrHtExrcPrec: number;
        /**
         * Nbfpsa_NbSalr
         */
        nombreSalr: number;
        /**
         * Cdfpfj_FormJurd
         */
        formeJuridique: string;
        /**
         * Cdfpdp_TypeDrtPersMorl
         */
        typeDroitPersonneMorl: number;
        /**
         * Mkfpca_MtCapt
         */
        montantCapital: number;
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
        /**
         * ListRolePersPhys
         */
        listeRolePersonnePhys: Array<string>;
    }
    interface IPersonnePhysiqueMaj extends IPersonneMaj {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfppn_Prnm
         */
        prenom: string;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Lbfpnj_NomJeunFill
         */
        nomJeunFill: string;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNais: string;
        /**
         * Lbfpna_LieuNais
         */
        lieuNais: string;
        /**
         * Cdfpce_CodePersCe
         */
        codePersonneCE: number;
        /**
         * Cdfprm_CodeRegmMatr
         */
        codeRegimeMatrimonial: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpsp_CateSoc
         */
        cateInteret: string;
        /**
         * Dtfpma_DateEfftSittFaml
         * Type date au format yyyy-MM-dd
         */
        dateEffetSituationFamille: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmlo_CodeModeLogm
         */
        codeModeLogement: number;
        /**
         * Dtfmlo_DateEntrLogm
         * Type date au format yyyy-MM-dd
         */
        dateEntrLogement: string;
        /**
         * Cdfmju_CodeCapcJurd
         */
        codeCapcJuridique: number;
        /**
         * Ctfccj_CodeTypeCapJurd
         */
        codeTypeCapJuridique: string;
        /**
         * Cdfmnt_CodeNatn
         */
        codeNational: number;
        /**
         * Cdfmtd_CodeSaisAvisTierDtnr
         */
        codeSaisieAvisTiersDtnr: number;
        /**
         * Cdfmcx_CodeCtx
         */
        codeContentieuxHorsComptCE: number;
        /**
         * Mtfmes_MtEncrSaccefHorsOprt
         */
        montantEncoursSaccefHorsOprt: number;
        /**
         * Cdfmtr_TypeTrspUtls
         */
        typeTrspUtilisation: number;
        /**
         * Cdfmge_CodeGeotAdrsDomc
         */
        codeGeotAdresseDomiciliation: string;
        /**
         * Cdfppb_CodePaysResdEmpr
         */
        codePaysResdEmprunt: string;
        /**
         * Cdfopb_CodePaysLocsEmpr
         */
        codePaysLocalisationEmprunt: string;
        /**
         * Cdfkpa_CodePrflEmpr
         */
        codeProfilEmprunt: number;
        /**
         * Cofcpn_CodePstlLieuNais
         */
        codePstlLieuNais: string;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IRelationEntrePersonnesLecture extends IElementLecture {
        /**
         * Cnfcrp_CodeNatureRelation
         */
        codeNatureRelation: string;
        /**
         * IdntPers1
         */
        idPersonne1: string;
        /**
         * IdntPers2
         */
        idPersonne2: string;
    }
    interface IPersonneMoraleLecture extends IPersonneLecture {
        /**
         * Nufpin_NumeInsee
         */
        numeroINSEE: string;
        /**
         * Dtfpir_DateInscRcs
         * Type date au format yyyy-MM-dd
         */
        dateInscRcs: string;
        /**
         * Dtfpcs_DateCretSoce
         * Type date au format yyyy-MM-dd
         */
        dateCreationSoce: string;
        /**
         * Mcfpch_ChffAffrHtExrcPrec
         */
        chiffreAffrHtExrcPrec: number;
        /**
         * Nbfpsa_NbSalr
         */
        nombreSalr: number;
        /**
         * Cdfpfj_FormJurd
         */
        formeJuridique: string;
        /**
         * Lbfpfj_LiblFormJurd
         */
        libelleFormeJuridique: string;
        /**
         * Cdfpdp_TypeDrtPersMorl
         */
        typeDroitPersonneMorl: number;
        /**
         * Mkfpca_MtCapt
         */
        montantCapital: number;
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
        /**
         * ListRolePersPhys
         */
        listeRolePersonnePhys: Array<string>;
    }
    interface IEtatDossierAssuranceLecture {
        /**
         * LibelleEtat
         */
        libelleEtat: string;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * LibelleDemande
         */
        libelleDemande: string;
        /**
         * LibelleDateEnvoi
         */
        libelleDateEnvoi: string;
    }
    interface IDecisionDossierAssuranceLecture {
        /**
         * AccesLectureDecision
         */
        accessoireLectureDecision: boolean;
        /**
         * AvisValide
         */
        avisValide: boolean;
        /**
         * CodeDecision
         */
        codeDecision: number;
        /**
         * LibelleCredit
         */
        libelleCredit: string;
        /**
         * LibelleAvis
         */
        libelleAvis: string;
        /**
         * LibelleErreur
         */
        libelleErreur: string;
    }
    interface IDossierAssuranceLecture {
        /**
         * EtatDossierAssurance
         */
        etatDossierAssurance: IEtatDossierAssuranceLecture;
        /**
         * DecisionDossierAssurance
         */
        decisionDossierAssurance: IDecisionDossierAssuranceLecture;
    }
    interface IPersonnePhysiqueLecture extends IPersonneLecture {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpci_LiblTitrCivl
         */
        libelleTitreCivilite: string;
        /**
         * Lbfppn_Prnm
         */
        prenom: string;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Lbfpnj_NomJeunFill
         */
        nomJeunFill: string;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNais: string;
        /**
         * Lbfpna_LieuNais
         */
        lieuNais: string;
        /**
         * Cdfpce_CodePersCe
         */
        codePersonneCE: number;
        /**
         * Cdfprm_CodeRegmMatr
         */
        codeRegimeMatrimonial: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Lbfpsf_LibelleSittFaml
         */
        libelleSituationFamille: string;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpsp_CateSoc
         */
        cateInteret: string;
        /**
         * Lbfmfc_LiblCatSocioPro
         */
        libelleCatSocioPro: string;
        /**
         * Dtfpma_DateEfftSittFaml
         * Type date au format yyyy-MM-dd
         */
        dateEffetSituationFamille: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmlo_CodeModeLogm
         */
        codeModeLogement: number;
        /**
         * Lbfmlo_LibelleModeLogm
         */
        libelleModeLogement: string;
        /**
         * Dtfmlo_DateEntrLogm
         * Type date au format yyyy-MM-dd
         */
        dateEntrLogement: string;
        /**
         * Cdfmju_CodeCapcJurd
         */
        codeCapcJuridique: number;
        /**
         * LibelleCapaciteJurd
         */
        libelle_CapaciteJuridique: string;
        /**
         * Ctfccj_CodeTypeCapJurd
         */
        codeTypeCapJuridique: string;
        /**
         * Cdfmnt_CodeNatn
         */
        codeNational: number;
        /**
         * LibelleNationalite
         */
        libelle_Nationalite: string;
        /**
         * Cdfmtd_CodeSaisAvisTierDtnr
         */
        codeSaisieAvisTiersDtnr: number;
        /**
         * Cdfmcx_CodeCtx
         */
        codeContentieuxHorsComptCE: number;
        /**
         * Mtfmes_MtEncrSaccefHorsOprt
         */
        montantEncoursSaccefHorsOprt: number;
        /**
         * Cdfmtr_TypeTrspUtls
         */
        typeTrspUtilisation: number;
        /**
         * Cdfmge_CodeGeotAdrsDomc
         */
        codeGeotAdresseDomiciliation: string;
        /**
         * Cdfppb_CodePaysResdEmpr
         */
        codePaysResdEmprunt: string;
        /**
         * Cdfopb_CodePaysLocsEmpr
         */
        codePaysLocalisationEmprunt: string;
        /**
         * Cdfkpa_CodePrflEmpr
         */
        codeProfilEmprunt: number;
        /**
         * Cofcpn_CodePstlLieuNais
         */
        codePstlLieuNais: string;
        /**
         * DossierAssurance
         */
        dossierAssurance: IDossierAssuranceLecture;
        /**
         * IdntActv
         */
        idActivite: string;
        /**
         * IdntIntdBanc
         */
        idIntdBancaire: string;
        /**
         * ListIdntOpps
         */
        listeIdOpps: Array<string>;
        /**
         * Lbfce1_LbAdrEPS1
         */
        libelleAdresseEPS1: string;
        /**
         * Lbfce2_LbAdrEPS2
         */
        libelleAdresseEPS2: string;
        /**
         * Lbfce3_LbAdrEPS3
         */
        libelleAdresseEPS3: string;
        /**
         * Lbfce4_LbAdrEPS4
         */
        libelleAdresseEPS4: string;
        /**
         * Lbfce5_LbAdrEPS5
         */
        libelleAdresseEPS5: string;
        /**
         * Codaac_CatSocioPro
         */
        categorieSocioProfessionnelle: string;
        /**
         * Irdqsn_NumSirenEnt
         */
        numeroSirenEntreprise: string;
        /**
         * Lbfprm_LbRegMat
         */
        libelleRegimeMatrimonial: string;
        /**
         * Llfco1_LbClsRegMat
         */
        libelleClauseRegimeMatrimonial: string;
        /**
         * IdntEntrepreneurIndiv
         */
        idEntrepreneurIndiv: string;
        /**
         * IdntSignataire
         */
        idSignataire: string;
    }
    interface IPersonneLecture extends IElementLecture {
        /**
         * Cdfprs_CrteResd
         */
        crteResd: number;
        /**
         * LiblResidence
         */
        libelleResidence: string;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_CateTypeAdmnBafi
         */
        cateTypeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Idfpbd_CleBdf
         */
        cleBDF: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Dtfper_DateEntrReltAvecCons
         * Type date au format yyyy-MM-dd
         */
        dateEntrRelationAvecConsolide: string;
        /**
         * Cdfptp_CodeTypePers
         */
        codeTypePersonne: number;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Cdfpap_CodeAssmPartc
         */
        codeAssmPartc: number;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
        /**
         * Lbfpen_EnsgComm
         */
        ensgCommission: string;
        /**
         * Lbfpir_LieuInscRC
         */
        lieuInscRC: string;
        /**
         * Nufpir_NumeInscRC
         */
        numeroInscRC: string;
        /**
         * Ctfprp_RolsPersPourDoss
         */
        rolsPersonnePourDossier: Array<string>;
        /**
         * PersEstAssr
         */
        personneEstAssurance: boolean;
        /**
         * Nofpem_NumeOrdrPersEmpr
         */
        numeroOrdrePersonneEmprunt: number;
        /**
         * Ctfipe_CodeTypeBasePers
         */
        codeTypeBasePersonne: number;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Hefcsd_DateSignDmdeCred
         * Type date au format yyyy-MM-dd
         */
        dateSigneDmdeCredit: string;
        /**
         * Hefcso_DateSignOffre
         * Type date au format yyyy-MM-dd
         */
        dateSigneOffre: string;
        /**
         * ReltnEntrPers
         */
        reltnEntrPersonne: Array<IRelationEntrePersonnesLecture>;
        /**
         * ListIdntRess
         */
        listeIdRessource: Array<string>;
        /**
         * ListIdntChrg
         */
        listeIdCharge: Array<string>;
        /**
         * ListIdntCpte
         */
        listeIdCompte: Array<string>;
        /**
         * ListIdntFamlEprg
         */
        listeIdFamilleEpargne: Array<string>;
        /**
         * IdntFicheContact
         */
        idFicheContact: string;
    }
}

declare namespace ICRest.Modeles.AjouterPhaseCreditExistant {
    interface IAjouterPhaseCreditExistant {
        identifiantDossier: string;
        idCreditExistant: string;
        codeTypePhase: string;
        periodeAmortissement: number;
        dateDebutPhase: string;
        dureePhase: number;
        montantEcheancePhase: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IChargeLecture extends IElementLecture {
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Txfmrc_TxPondChrg
         */
        tauxPondereCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Nufpct_NumeContEprg
         */
        numeroContratEpargne: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * IdntGrpeIntv
         */
        idGrpeIntervenant: string;
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
    }
    interface IPhaseCreditExistantLecture extends IElementLecture {
        /**
         * Ddfcph_DateDebtPhas
         * Type date au format yyyy-MM-dd
         */
        dateDebutPhase: string;
        /**
         * Dffcph_DateFinPhas
         * Type date au format yyyy-MM-dd
         */
        dateFinPhase: string;
        /**
         * Meface_MtEchePhas
         */
        montantEcheancePhase: number;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Pftmam_PerdAmrt
         */
        periodeAmortissement: number;
        /**
         * IdntCredExst
         */
        idCreditExiste: string;
        /**
         * Duree
         */
        dureePhase: number;
    }
    interface IResultatAjoutPhaseCreditExistantLecture {
        /**
         * CreditExistantLecture
         */
        creditExistantLecture: ICreditExistantLecture;
        /**
         * ListePhaseCreditExistantLecture
         */
        listePhaseCreditExistantLecture: Array<IPhaseCreditExistantLecture>;
    }
    interface ICreditExistantLecture extends IChargeLecture {
        /**
         * Cdfccg_CodeTypeCredCe
         */
        codeTypeCreditCE: string;
        /**
         * Cdfopc_CodePrsCompCred
         */
        codePresenceCompCredit: number;
        /**
         * Cdfimu_InvsUsgLocf
         */
        invsUsageLocf: number;
        /**
         * Ctfmlc_LienPersCred
         */
        lienPersonneCredit: number;
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Ctfmtc_CodeTypeCred
         */
        codeTypeCredit: number;
        /**
         * Mtfaoc_MtOrigCred
         */
        montantOrigineCredit: number;
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
        /**
         * Ddfmam_DateDebtAmrt
         * Type date au format yyyy-MM-dd
         */
        dateDebutAmortissement: string;
        /**
         * Dtfam0_DateMer0
         * Type date au format yyyy-MM-dd
         */
        dateMER0: string;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmcp_RefePrdtCe
         */
        referenceProduitCE: string;
        /**
         * Nofmc2_CompRefePrdtCe
         */
        compReferenceProduitCE: string;
        /**
         * Nofmet_NumeEnttTitlCe
         */
        numeroEntiteTitulaireCE: number;
        /**
         * Lbfmet_LiblEnttTitlCe
         */
        libelleEntiteTitulaireCE: string;
        /**
         * Mkfmpc_MtCaptDejaRemb
         */
        montantCapitalDejaRemboursement: number;
        /**
         * Mefmpe_MtPrcheche
         */
        montantPrcheche: number;
        /**
         * Mefmea_MtPrmeecheAmrt
         */
        montantPrmeecheAmortissement: number;
        /**
         * Mefmpc_MtechePrsComp
         */
        mtechePresenceComp: number;
        /**
         * Nbfmim_NbImpayes
         */
        nombreImpayes: number;
        /**
         * Nbfmir_NbImpeReglSurLesMoisGlss
         */
        nombreImpeRegleSurLesMoisGlss: number;
        /**
         * Ptfmam_PerdAmrt
         */
        periodeAmortissement: number;
        /**
         * Npfmam_DureAmrt
         */
        dureAmortissement: number;
        /**
         * Cifgeh_CodeIndicAInclettHypt
         */
        codeIndiceAInclettHypotheque: boolean;
        /**
         * Mtfggi_MtGarn
         */
        montantGarantie: number;
        /**
         * Cmfmro_MotfRembAntc
         */
        motfRemboursementAnticipe: string;
        /**
         * Cdfmro_RembAvecAntc
         */
        remboursementAvecAnticipe: number;
        /**
         * Lbfmro_LiblMotfRembAntc
         */
        libelleMotfRemboursementAnticipe: string;
        /**
         * InvestissementLocatifVisible
         */
        investissementLocatifVisible: boolean;
        /**
         * InvestissementLocatifAccessible
         */
        investissementLocatifAccessible: boolean;
        /**
         * ListIdntPhssCredExst
         */
        listeIdPhssCreditExiste: Array<string>;
    }
}

declare namespace ICRest.Modeles.AjouterPlanFinancement {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IPlanFinancementMaj extends IElementMaj {
        /**
         * Cifaai_IndicAllt
         */
        indiceAllt: number;
        /**
         * Mtfaap_MtApprPers
         */
        montantApportPersonne: number;
        /**
         * Mtfmpl_MtPretEparLogmTher
         */
        montantPretEpargneLogementTher: number;
        /**
         * Dtfcep_DateEditPropCred
         * Type date au format yyyy-MM-dd
         */
        dateEditPropCredit: string;
        /**
         * Npfamo_DurSouh
         */
        dureeSouh: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IAjouterPlanFinancementRequest {
        identifiantDossier: string;
        identifiantProjet: string;
        planFinancementMiseAJour: IPlanFinancementMaj;
    }
    interface IResultatControle {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Messages
         */
        messages: Array<string>;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IPlanFinancementLecture extends IElementLecture {
        /**
         * Lbfapl_LiblRetrAdr
         */
        libelleRetardAdresse: string;
        /**
         * Mtfaso_MtTotlEmprPlan
         */
        montantTotalEmpruntPlan: number;
        /**
         * Mtfarf_MtRestFinn
         */
        montantRestantFinancier: number;
        /**
         * Cefapl_CodeEttPlanFinn
         */
        codeEtatPlanFinancier: number;
        /**
         * Cdfacp_CodeContPlan
         */
        codeContratPlan: number;
        /**
         * Dtfccr_DateCretPlan
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateCreationPlan: string;
        /**
         * Dtfmva_DateDernAnlsAdr
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDernierAnlsAdresse: string;
        /**
         * Dtfcep_DateEditPropCred
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEditPropCredit: string;
        /**
         * Ntfmba_NotfEnggBale2
         */
        notfEngagementBale2: string;
        /**
         * Cdfmte_CodeAnlsMeneTerm
         */
        codeAnlsMeneTerme: number;
        /**
         * Cdfdsp_CodeDecsSpec
         */
        codeDecisionSpec: number;
        /**
         * Txfita_CorcTarfCalcParAdr
         */
        corcTarfCalculParAdresse: number;
        /**
         * Mtfiar_CottAnlsRisq
         */
        cotisationAnlsRisque: number;
        /**
         * Txfgca_CoefTarfCalcParAdr
         */
        coefficientTarfCalculParAdresse: number;
        /**
         * Cdfwor_CodeOrigPretPrnc
         */
        codeOriginePretPrincipal: number;
        /**
         * Cifaai_IndicAllt
         */
        indiceAllt: number;
        /**
         * Mtfaap_MtApprPers
         */
        montantApportPersonne: number;
        /**
         * Mtfmpl_MtPretEparLogmTher
         */
        montantPretEpargneLogementTher: number;
        /**
         * Idfcsm_NumrDossSmac
         */
        numeroDossierSmac: string;
        /**
         * Ctfico_TypeCritOptim
         */
        typeCritereOptim: number;
        /**
         * Nbfico_ValeurCritOptim
         */
        valeurCritereOptim: number;
        /**
         * AccordDePrincipe
         */
        accordDePrincipe: number;
        /**
         * ListResultatControle
         */
        listeResultatControle: Array<IResultatControle>;
        /**
         * EstEligibleApl
         */
        estEligibleAPL: boolean;
        /**
         * MontantAplModifiable
         */
        montantAPLModifiable: boolean;
        /**
         * NomProposition
         */
        nomProposition: string;
        /**
         * TauxApportPersonnel
         */
        tauxApportPersonnel: number;
        /**
         * LoanToValue
         */
        loanToValue: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * ListIdntCredIntr
         */
        listeIdCreditIntr: Array<string>;
        /**
         * ListIdntCredExtr
         */
        listeIdCreditExtr: Array<string>;
        /**
         * ListIdntAssr
         */
        listeIdAssurance: Array<string>;
        /**
         * ListIdntRefusAssExt
         */
        listeIdRefusAssuranceExterieur: Array<string>;
        /**
         * ListIdntGarn
         */
        listeIdGarantie: Array<string>;
        /**
         * ListIdntAccsComp
         */
        listeIdAccessoireComp: Array<string>;
        /**
         * ListIdntAccsLiesPrdt
         */
        listeIdAccessoireLiesProduit: Array<string>;
        /**
         * ListIdntServSurObjt
         */
        listeIdServiceSurObjet: Array<string>;
        /**
         * ListIdntPalrCont
         */
        listeIdPalierContrat: Array<string>;
        /**
         * IdntApl
         */
        idAPL: string;
        /**
         * IdntSynthesePlanFinancement
         */
        idSynthesePlanFinancement: string;
    }
}

declare namespace ICRest.Modeles.AjouterPretReamenage {
    interface IAjouterPretReamenageRequest {
        identifiantDossier: string;
        idReamenagement: string;
        codeBanque: string;
        idCreditGestion: string;
        pretReamenagementMAJ: IPretReamenageMaj;
        infosRegroupementMAJ: IInfoRegroupementMaj;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IPretReamenageMaj extends IElementMaj {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfao2_IdntDossOrig
         */
        idDossierOrigine: string;
        /**
         * Cdfcpo_CodePrdtetbl
         */
        codePrdtetbl: string;
        /**
         * Cdfars_CodeApparRes
         */
        codeApparRes: boolean;
        /**
         * Ctfars_TypeApparRes
         */
        typeApparRes: number;
        /**
         * Dtfccl_DateCltr
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateCloture: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * Mefacg_MtechePerdPretRefn
         */
        mtechePeriodePretRefn: number;
        /**
         * Peface_Perdeche
         */
        perdeche: number;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Lbfcvs_LiblPrdt
         */
        libelleProduit: string;
        /**
         * Ctfals_TypeRegl
         */
        typeRegle: number;
        /**
         * Ctfmtc_TypeCred
         */
        typeCredit: number;
        /**
         * Lbfaep_NometblPret
         */
        nometblPret: string;
        /**
         * Ctfpag_CodeOrigAppliGestCred
         */
        codeOrigineApplicationGestionCredit: number;
        /**
         * Cdfidr_CodeDev
         */
        codeDev: string;
    }
    interface IInfoRegroupementMaj extends IElementMaj {
        /**
         * Mkfd01_MtCrd
         */
        montantCRD: number;
        /**
         * Cifcao_OrigInfoSurMtCrd
         */
        origineInformationSurMontantCRD: number;
        /**
         * Dtfcer_DateEnvsPourRembAntc
         * Type date au format yyyy-MM-dd
         */
        dateEnvsPourRemboursementAnticipe: string;
        /**
         * Cdfara_CodeExstModlIndmRaSurCred
         */
        codeExisteModeleIndemniteRaSurCredit: number;
        /**
         * Mtfhir_MtEstmRa
         */
        montantEstmRa: number;
        /**
         * Cifca1_OrigInfoSurMtEstmIndmRa
         */
        origineInformationSurMontantEstmIndemniteRa: number;
        /**
         * Cifafr_CodeIndicFinnIndmRa
         */
        codeIndiceFinancierIndemniteRa: number;
        /**
         * Cifamp_CodeModlPrevPourRa
         */
        codeModelePrevPourRa: number;
        /**
         * Cifca2_OrigInfoSurExstPrevCont
         */
        origineInformationSurExistePrevContrat: number;
        /**
         * Npfapr_DelPrevCont
         */
        delPrevContrat: number;
        /**
         * Cifca3_OrigInfoSurDelPrevCont
         */
        origineInformationSurDelPrevContrat: number;
        /**
         * Cifagh_ExstUneGarnHypt
         */
        existeUneGarantieHypotheque: number;
        /**
         * Mtfgmt_MtFrsMainTotlUneGarnHypt
         */
        montantFrsMainTotalUneGarantieHypotheque: number;
        /**
         * Cifac4_OrigInfoSurMtFrsMainTotl
         */
        origineInformationSurMontantFrsMainTotal: number;
        /**
         * Cifafm_CodeFinnFrsMain
         */
        codeFinancierFrsMain: number;
        /**
         * Mtfaid_MtInteDusJusqFinCred
         */
        montantInterieurDusJusqFinCredit: number;
        /**
         * Ctfcaf_CodeAffecTypeObjt
         */
        codeAffectationTypeObjet: number;
        /**
         * Mefepd_MtecheHorsAccs
         */
        mtecheHorsAccessoire: number;
        /**
         * Cifca5_OrigInfoSurMtecheHorsAccs
         */
        origineInformationSurMtecheHorsAccessoire: number;
        /**
         * Trfrtx_TxRefe
         */
        tauxReference: number;
        /**
         * Cifac6_OrigInfoSurTxRefe
         */
        origineInformationSurTauxReference: number;
        /**
         * Dtfari_DateRappDonn
         * Type date au format yyyy-MM-dd
         */
        dateRappDonneur: string;
        /**
         * Cifac7_OrigInfoSurDateFinCred
         */
        origineInformationSurDateFinCredit: number;
        /**
         * Cifac8_OrigInfoSurMtRestDuSuurPretRach
         */
        origineInformationSurMontantRestantDuSuurPretRach: number;
        /**
         * Cifac9_OrigInfoSurTypeLoiScrvCredRach
         */
        origineInformationSurTypeLoiScrivenerCreditRach: number;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IPretReamenageLecture extends IElementLecture {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfao2_IdntDossOrig
         */
        idDossierOrigine: string;
        /**
         * Cdfcpo_CodePrdtetbl
         */
        codePrdtetbl: string;
        /**
         * Cdfars_CodeApparRes
         */
        codeApparRes: boolean;
        /**
         * Ctfars_TypeApparRes
         */
        typeApparRes: number;
        /**
         * Dtfccl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * Mefacg_MtechePerdPretRefn
         */
        mtechePeriodePretRefn: number;
        /**
         * Peface_Perdeche
         */
        perdeche: number;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Lbfcvs_LiblPrdt
         */
        libelleProduit: string;
        /**
         * Ctfals_TypeRegl
         */
        typeRegle: number;
        /**
         * Ctfmtc_TypeCred
         */
        typeCredit: number;
        /**
         * Lbfaep_NometblPret
         */
        nometblPret: string;
        /**
         * Ctfpag_CodeOrigAppliGestCred
         */
        codeOrigineApplicationGestionCredit: number;
        /**
         * Cdfidr_CodeDev
         */
        codeDev: string;
        /**
         * IdntReam
         */
        idReamenagement: string;
        /**
         * IdntInfoCompRegr
         */
        idInformationCompRegr: string;
    }
}

declare namespace ICRest.Modeles.AjouterPretReamengbl {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IAjoutePretReamenageableRequest {
        identifiantDossier: string;
        idwsReamenagement: string;
        listePretReamenageable: Array<IPretReamenageMaj>;
        dateRA: string;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IPretReamenageMaj extends IElementMaj {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfao2_IdntDossOrig
         */
        idDossierOrigine: string;
        /**
         * Cdfcpo_CodePrdtetbl
         */
        codePrdtetbl: string;
        /**
         * Cdfars_CodeApparRes
         */
        codeApparRes: boolean;
        /**
         * Ctfars_TypeApparRes
         */
        typeApparRes: number;
        /**
         * Dtfccl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * Mefacg_MtechePerdPretRefn
         */
        mtechePeriodePretRefn: number;
        /**
         * Peface_Perdeche
         */
        perdeche: number;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Lbfcvs_LiblPrdt
         */
        libelleProduit: string;
        /**
         * Ctfals_TypeRegl
         */
        typeRegle: number;
        /**
         * Ctfmtc_TypeCred
         */
        typeCredit: number;
        /**
         * Lbfaep_NometblPret
         */
        nometblPret: string;
        /**
         * Ctfpag_CodeOrigAppliGestCred
         */
        codeOrigineApplicationGestionCredit: number;
        /**
         * Cdfidr_CodeDev
         */
        codeDev: string;
    }
    interface IRapportTransaction {
        /**
         * OperationReussie
         */
        operationReussie: boolean;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IPretReamenageLecture extends IElementLecture {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfao2_IdntDossOrig
         */
        idDossierOrigine: string;
        /**
         * Cdfcpo_CodePrdtetbl
         */
        codePrdtetbl: string;
        /**
         * Cdfars_CodeApparRes
         */
        codeApparRes: boolean;
        /**
         * Ctfars_TypeApparRes
         */
        typeApparRes: number;
        /**
         * Dtfccl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * Mefacg_MtechePerdPretRefn
         */
        mtechePeriodePretRefn: number;
        /**
         * Peface_Perdeche
         */
        perdeche: number;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Lbfcvs_LiblPrdt
         */
        libelleProduit: string;
        /**
         * Ctfals_TypeRegl
         */
        typeRegle: number;
        /**
         * Ctfmtc_TypeCred
         */
        typeCredit: number;
        /**
         * Lbfaep_NometblPret
         */
        nometblPret: string;
        /**
         * Ctfpag_CodeOrigAppliGestCred
         */
        codeOrigineApplicationGestionCredit: number;
        /**
         * Cdfidr_CodeDev
         */
        codeDev: string;
        /**
         * IdntReam
         */
        idReamenagement: string;
        /**
         * IdntInfoCompRegr
         */
        idInformationCompRegr: string;
    }
    interface IInfoRegroupementLecture extends IElementLecture {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Mkfd01_MtCrd
         */
        montantCRD: number;
        /**
         * Cifcao_OrigInfoSurMtCrd
         */
        origineInformationSurMontantCRD: number;
        /**
         * Dtfcer_DateEnvsPourRembAntc
         * Type date au format yyyy-MM-dd
         */
        dateEnvsPourRemboursementAnticipe: string;
        /**
         * Cdfara_CodeExstModlIndmRaSurCred
         */
        codeExisteModeleIndemniteRaSurCredit: number;
        /**
         * Mtfhir_MtEstmRa
         */
        montantEstmRa: number;
        /**
         * Cifca1_OrigInfoSurMtEstmIndmRa
         */
        origineInformationSurMontantEstmIndemniteRa: number;
        /**
         * Cifafr_CodeIndicFinnIndmRa
         */
        codeIndiceFinancierIndemniteRa: number;
        /**
         * Cifamp_CodeModlPrevPourRa
         */
        codeModelePrevPourRa: number;
        /**
         * Cifca2_OrigInfoSurExstPrevCont
         */
        origineInformationSurExistePrevContrat: number;
        /**
         * Npfapr_DelPrevCont
         */
        delPrevContrat: number;
        /**
         * Cifca3_OrigInfoSurDelPrevCont
         */
        origineInformationSurDelPrevContrat: number;
        /**
         * Cifagh_ExstUneGarnHypt
         */
        existeUneGarantieHypotheque: number;
        /**
         * Mtfgmt_MtFrsMainTotlUneGarnHypt
         */
        montantFrsMainTotalUneGarantieHypotheque: number;
        /**
         * Cifac4_OrigInfoSurMtFrsMainTotl
         */
        origineInformationSurMontantFrsMainTotal: number;
        /**
         * Cifafm_CodeFinnFrsMain
         */
        codeFinancierFrsMain: number;
        /**
         * Mtfaid_MtInteDusJusqFinCred
         */
        montantInterieurDusJusqFinCredit: number;
        /**
         * Ctfcaf_CodeAffecTypeObjt
         */
        codeAffectationTypeObjet: number;
        /**
         * Mefepd_MtecheHorsAccs
         */
        mtecheHorsAccessoire: number;
        /**
         * Cifca5_OrigInfoSurMtecheHorsAccs
         */
        origineInformationSurMtecheHorsAccessoire: number;
        /**
         * Trfrtx_TxRefe
         */
        tauxReference: number;
        /**
         * Cifac6_OrigInfoSurTxRefe
         */
        origineInformationSurTauxReference: number;
        /**
         * Dtfari_DateRappDonn
         * Type date au format yyyy-MM-dd
         */
        dateRappDonneur: string;
        /**
         * Cifac7_OrigInfoSurDateFinCred
         */
        origineInformationSurDateFinCredit: number;
        /**
         * Cifac8_OrigInfoSurMtRestDuSuurPretRach
         */
        origineInformationSurMontantRestantDuSuurPretRach: number;
        /**
         * Cifac9_OrigInfoSurTypeLoiScrvCredRach
         */
        origineInformationSurTypeLoiScrivenerCreditRach: number;
        /**
         * IdntPretReam
         */
        idPretReamenagement: string;
    }
    interface IPretReamenageableLecture extends IElementLecture {
        /**
         * InfoPret
         */
        informationPret: IPretReamenageLecture;
        /**
         * InfoRegroupement
         */
        informationRegroupement: IInfoRegroupementLecture;
    }
    interface IReamenagementLecture extends IElementLecture {
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
        /**
         * Ctfmup_UsgPretTres
         */
        usagePretTres: number;
        /**
         * Mtfmvc_AncnEche
         */
        ancnEcheance: number;
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * Mtfmvd_ValrAchtObjtFinn
         */
        valeurAchtObjetFinancier: number;
        /**
         * Npfmrp_DureResdPretRefn
         */
        dureResdPretRefn: number;
        /**
         * Dtfoac_DateAcqsObjtRefn
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateAcqsObjetRefn: string;
        /**
         * Mtfaoc_CoutAcqsObjtRefn
         */
        coutAcqsObjetRefn: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * ListIdntPretReam
         */
        listeIdPretReamenagement: Array<string>;
    }
    interface IRapportAjoutPretReamenageable extends IRapportTransaction {
        /**
         * ListePretReamenageableLecture
         */
        listePretReamenageableLecture: Array<IPretReamenageableLecture>;
        /**
         * ReamenagementLecture
         */
        reamenagementLecture: IReamenagementLecture;
    }
}

declare namespace ICRest.Modeles.AjouterProprietaire {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IProprietaireMaj extends IElementMaj {
        /**
         * Txffim_QuotPleinProp
         */
        quotientPleinProp: number;
        /**
         * Txfcnp_QuotNueProp
         */
        quotientNueProp: number;
        /**
         * Txfcdu_QuotUsuf
         */
        quotientUsuf: number;
        /**
         * Txfcus_QuotDroiUsag
         */
        quotientDroiUsag: number;
        /**
         * Ctfcdb_CdModDettnBien
         */
        codeModDettnBien: number;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IProprietaireLecture extends IElementLecture {
        /**
         * Txffim_QuotPleinProp
         */
        quotientPleinProp: number;
        /**
         * Txfcnp_QuotNueProp
         */
        quotientNueProp: number;
        /**
         * Txfcdu_QuotUsuf
         */
        quotientUsuf: number;
        /**
         * Txfcus_QuotDroiUsag
         */
        quotientDroiUsag: number;
        /**
         * Ctfcdb_CdModDettnBien
         */
        codeModDettnBien: number;
        /**
         * IdntPersn
         */
        idPersn: string;
    }
    interface IAjouterProprietaireRequest {
        idDossier: string;
        idwsHypothequeImmobilier: string;
        proprietaireMAJ: IProprietaireMaj;
        idPersonne: string;
    }
}

declare namespace ICRest.Modeles.AjouterRefusAssExt {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IRefusAssuranceExterneMaj extends IElementMaj {
        /**
         * Lbfcia_CompagnieAssurance
         */
        compagnieAssurance: string;
        /**
         * Lbfrcc_ReferenceContrat
         */
        referenceContrat: string;
        /**
         * Ddfddr_DateReceptionDemande
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateReceptionDemande: string;
        /**
         * Llfprp_RolePersonne
         */
        rolePersonne: string;
        /**
         * Lvfdmr_MotifRefus
         */
        motifRefus: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IRefusAssuranceExterneLecture extends IElementLecture {
        /**
         * Lvfdmr_MotifRefus
         */
        motifRefus: string;
        /**
         * Idfadi_IdDossierInstruction
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroRelatifPlanDossier
         */
        numeroRelatifPlanDossier: number;
        /**
         * Idfppe_Identifiantpersonne
         */
        identifiantpersonne: string;
        /**
         * Nofrfp_NumRangRefusProposition
         */
        numeroRangRefusProposition: number;
        /**
         * Lbfcia_CompagnieAssurance
         */
        compagnieAssurance: string;
        /**
         * Lbfrcc_ReferenceContrat
         */
        referenceContrat: string;
        /**
         * Ddfddr_DateReceptionDemande
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateReceptionDemande: string;
        /**
         * Ddfpic_DateImpressionDemande
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateImpressionDemande: string;
        /**
         * Cdfdda_CodeDecision
         */
        codeDecision: number;
        /**
         * Llfprp_RolePersonne
         */
        rolePersonne: string;
    }
    interface IAjouterRefusAssuranceExterneRequest {
        identifiantDossier: string;
        identifiantPersonne: string;
        identifiantPlanFinancement: string;
        refusAssurance: IRefusAssuranceExterneMaj;
    }
}

declare namespace ICRest.Modeles.AjouterRessource {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IRessourceMaj extends IElementMaj {
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Mtfpre_MtRess
         */
        montantRessource: number;
        /**
         * Npfpre_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IRessourceLecture extends IElementLecture {
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Mtfpre_MtRess
         */
        montantRessource: number;
        /**
         * Txfmrc_TxPondRess
         */
        tauxPondereRessource: number;
        /**
         * Npfpre_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * IdntGrpeIntv
         */
        idGrpeIntervenant: string;
    }
    interface IAjouterRessourceRequest {
        identifiantDossier: string;
        idPersonneEmprunteur: string;
        ressourceMiseAJour: IRessourceMaj;
    }
}

declare namespace ICRest.Modeles.AjouterRevenuFiscalEmprunteur {
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IRevenuFiscalLecture extends IElementLecture {
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Ctfprm_TypeRevnMeng
         */
        typeRevnMeng: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * IdntEmpr
         */
        idEmprunt: string;
    }
    interface IRevenuFiscalEmprunteurRequest {
        identifiantDossier: string;
        montantRevenuMenage: number;
        typeRevenuMenage: number;
    }
}

declare namespace ICRest.Modeles.AjouterVersementAttendu {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IVersementAttenduMaj extends IElementMaj {
        /**
         * Ctftve_TypeVerst
         */
        typeVersement: string;
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
        /**
         * Dtfdeb_DateDebt
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * Dtfvfn_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Ctfapi_PerdVerst
         */
        periodeVersement: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IVersementAttenduLecture extends IElementLecture {
        /**
         * Nufcrl_NumeReltVerstAttn
         */
        numeroRelationVersementAttn: number;
        /**
         * Ctftve_TypeVerst
         */
        typeVersement: string;
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
        /**
         * Dtfdeb_DateDebt
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * Dtfvfn_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Ctfapi_PerdVerst
         */
        periodeVersement: number;
        /**
         * IdntContAssrGarn
         */
        idContratAssuranceGarantie: string;
    }
    interface IAjouterVersementAttenduRequest {
        identifiantDossier: string;
        identifiantContratAssurance: string;
        versementAttenduMAJ: IVersementAttenduMaj;
    }
}

declare namespace ICRest.Modeles.AnnulerAccordPreteur {
    interface IAnnulerAccordPreteurRequest {
        identifiantDossier: string;
    }
    interface IResultatOffrePretIndustrialisee {
        /**
         * Code
         */
        code: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
}

declare namespace ICRest.Modeles {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
}

declare namespace ICRest.Modeles.CalculerBonification {
    interface ICalculerBonificationRequest {
        identifiantDossier: string;
        identifiantBonification: string;
    }
}

declare namespace ICRest.Modeles.CalculerCapaciteRemb {
    interface ICapaciteRemboursement {
        /**
         * TauxEndettement
         */
        tauxEndettement: number;
        /**
         * MontantResteAVivre
         */
        montantResteAVivre: number;
        /**
         * MontantEcheance
         */
        montantEcheance: number;
    }
    interface ICalculerCapaciteRemboursementRequest {
        identifiantDossier: string;
        montantEcheanceChoisie: number;
        tauxEndettementChoisie: number;
        identifiantPlanFinancement: string;
    }
}

declare namespace ICRest.Modeles.CalculerCreditEL {
    interface ICritereAjustementCreditLecture {
        /**
         * MontantPret
         */
        montantPret: number;
        /**
         * MontantEcheance
         */
        montantEcheance: number;
        /**
         * DureeCredit
         */
        dureeCredit: number;
        /**
         * AlertePrime
         */
        alertePrime: boolean;
        /**
         * TexteAlertePrime
         */
        texteAlertePrime: string;
        /**
         * TauxActuariel
         */
        tauxActuariel: number;
        /**
         * MontantRAF
         */
        montantRAF: number;
    }
    interface IResultatCalculELLecture {
        /**
         * CritereAjustementCreditLecture
         */
        critereAjustementCreditLecture: ICritereAjustementCreditLecture;
        /**
         * ListeDroitAcquisELLecture
         */
        listeDroitAcquisELLecture: Array<IDroitAcquisELLecture>;
    }
    interface ICalculerCreditELRequest {
        identifiantDossier: string;
        idwsCredit: string;
        periodicite: string;
        duree: number;
        montant: number;
        estEcheance: boolean;
        estManuel: boolean;
    }
    interface IDroitAcquisELLecture {
        /**
         * Idfadi_IdDossier
         */
        idDossier: string;
        /**
         * Nufpct_IdContrat
         */
        idContrat: string;
        /**
         * Nofpdp_NumRelatifDossier
         */
        numeroRelatifDossier: number;
        /**
         * IdwsTrancheEL
         */
        idwsTrancheEL: string;
        /**
         * Ddfpct_DateOuvertureContrat
         */
        dateOuvertureContrat: string;
        /**
         * Txfpep_TauxEpargne
         */
        tauxEpargne: number;
        /**
         * Mtfaac_MontantDroitsAcquis
         */
        montantDroitsAcquis: number;
        /**
         * Dtfpae_DateArrete
         */
        dateArrete: string;
        /**
         * Ctfpli_LienParenteAvecCedant
         */
        lienParenteAvecCedant: string;
        /**
         * Cdfadv
         */
        cdfadv: string;
        /**
         * Mtfadu_MtDroitsAcquisUtilises
         */
        montantDroitsAcquisUtilises: number;
        /**
         * Txftpr_TauxPretCatalogue
         */
        tauxPretCatalogue: number;
        /**
         * Mkfmax_CapMaxOct
         */
        capMaximumOct: number;
        /**
         * Mtfaoc_MtPretOctroye
         */
        montantPretOctroye: number;
        /**
         * Mtfmax_EchMaxOct
         */
        echMaximumOct: number;
        /**
         * Mtfape_MtEchUtilise
         */
        montantEchUtilise: number;
        /**
         * Mtfali_MtLimite
         */
        montantLimite: number;
        /**
         * DroitUtilisable
         */
        droitUtilisable: boolean;
        /**
         * PriseEnCompte
         */
        priseEnCompte: string;
        /**
         * ContratPostReforme
         */
        contratPosteReforme: boolean;
    }
}

declare namespace ICRest.Modeles.CalculerCreditInterne {
    interface ICalculerCreditInterneRequest {
        identifiantDossier: string;
        idwsCredit: string;
        financeRAF: boolean;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface ITauxInteretAnnuelLecture {
        /**
         * ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * TxActu
         */
        tauxActu: number;
        /**
         * TxProp
         */
        tauxProp: number;
    }
    interface ITauxIndiceLecture extends ITauxInteretAnnuelLecture {
        /**
         * Marg
         */
        marge: number;
        /**
         * ValrIndc
         */
        valeurIndice: number;
    }
    interface ITauxFixeLecture extends ITauxInteretAnnuelLecture {
    }
    interface ITauxMixteLecture extends ITauxInteretAnnuelLecture {
        /**
         * Rpar
         */
        repartition: number;
        /**
         * TxIndcCmpstTxMixt
         */
        tauxIndiceCmpstTauxMixte: ITauxIndiceLecture;
        /**
         * TxFixeCmpstTxMixt
         */
        tauxFixeCmpstTauxMixte: ITauxFixeLecture;
    }
    interface IGroupeJustificationTEGLecture {
        /**
         * LibelleFrais
         */
        libelleFrais: string;
        /**
         * MessagesFrais
         */
        messagesFrais: Array<string>;
    }
    interface IEcheancesJustifieesAssocieesLecture {
        /**
         * TitreCredit
         */
        titreCredit: string;
        /**
         * MessagesInterets
         */
        messagesInterets: Array<string>;
        /**
         * TypesFrais
         */
        typesFrais: Array<IGroupeJustificationTEGLecture>;
    }
    interface IAjustementTauxLecture extends IElementLecture {
        /**
         * RemiseMajoration
         */
        remiseMajoration: number;
        /**
         * NouvelleRemiseMajoration
         */
        nouvelleRemiseMajoration: number;
        /**
         * TauxActuel
         */
        tauxActuel: number;
        /**
         * TauxBonificationMajoration
         */
        tauxBonificationMajoration: number;
        /**
         * TauxConseillePondere
         */
        tauxConseillePondere: number;
        /**
         * MargeRevision
         */
        margeRevision: number;
        /**
         * RemiseTaux
         */
        remiseTaux: boolean;
        /**
         * ChangementTauxConseille
         */
        changementTauxConseille: boolean;
    }
    interface ICreditInterneLecture extends IElementLecture {
        /**
         * IndicEvltTxConsPond
         */
        indiceEvolutionTauxConsolidePondere: number;
        /**
         * Idfccp_IdntConvPres
         */
        idConventionPres: string;
        /**
         * Cdfdae_CodeIndicEnvAvisEche
         */
        codeIndiceEnvoiAvisEcheance: number;
        /**
         * Cifaio_CodeIndicOptmImps
         */
        codeIndiceOptimisationImps: number;
        /**
         * Cnfctx_CodeIndicTxInteRevs
         */
        codeIndiceTauxInterieurRevision: number;
        /**
         * Nofapd_NumeCredPlanFinn
         */
        numeroCreditPlanFinancier: number;
        /**
         * Idfacs_RefeExtnCred
         */
        referenceExterneCredit: string;
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Cdfcfc_CodeFamlContRegl
         */
        codeFamilleContratRegle: string;
        /**
         * Ctfcbs_CodeSclssBafi
         */
        codeSousclasseBafi: string;
        /**
         * Cdfcrl_CodeIndicCredRels
         */
        codeIndiceCreditRelease: number;
        /**
         * Idfcct_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Cdfccr_CodeIndicTrtInteIntr
         */
        codeIndiceTraitementInterieurIntr: number;
        /**
         * Cdfcia_CodeTypeActlInteIntr
         */
        codeTypeActuarielInterieurIntr: number;
        /**
         * Cdfbdv_CodeDevsVerst
         */
        codeDeviseVersement: string;
        /**
         * Cdfbje_CodeIndicExstPiecJustPourDeclechlVerst
         */
        codeIndiceExistePieceJustificatifPourDeclechlVersement: number;
        /**
         * Cdfbju_CodeTypeRattJustDecl
         */
        codeTypeRattachementJustificatifDeclaration: number;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Dtfam0_DateMer0
         * Type date au format yyyy-MM-dd
         */
        dateMER0: string;
        /**
         * Dtfam1_DateMer1
         * Type date au format yyyy-MM-dd
         */
        dateMER1: string;
        /**
         * Dtfccr_DateCretCred
         * Type date au format yyyy-MM-dd
         */
        dateCreationCredit: string;
        /**
         * Dlfbct_DateLimtVerstFond
         * Type date au format yyyy-MM-dd
         */
        dateLimiteVersementFond: string;
        /**
         * Dhfacj_QuantEche
         */
        jourDateEcheance: number;
        /**
         * Dffb1v_DateLimtPremVerstFond
         * Type date au format yyyy-MM-dd
         */
        dateLimitePremierVersementFond: string;
        /**
         * Cdfaea_CodeIndicElgbApl
         */
        codeIndiceEligibiliteAPL: number;
        /**
         * Cdfcie_CodeIndicelgbAuprInstemss
         */
        codeIndicelgbAuprInstemss: number;
        /**
         * Cdfacc_CodeIndicGestCredAvecCpteCrrt
         */
        codeIndiceGestionCreditAvecCompteCrrt: number;
        /**
         * Dtfcdc_DateDernCalcCred
         * Type date au format yyyy-MM-dd
         */
        dateDernierCalculCredit: string;
        /**
         * Ccfarc_CodeIndicCalcAFaire
         */
        codeIndiceCalculAFaire: number;
        /**
         * Mtfael_MtPrimEparLogm
         */
        montantPrimeEpargneLogement: number;
        /**
         * Txfasr_TxNegcSurcRembAntc
         */
        tauxNegocieSurcRemboursementAnticipe: number;
        /**
         * Txfcpd_TxPondCntExtr
         */
        tauxPondereCntExtr: number;
        /**
         * Txfck4_TxPondCons
         */
        tauxPondereConsolide: number;
        /**
         * Txfrr1_MargPondCons
         */
        margePondereConsolide: number;
        /**
         * Ccfbec_CodeCalcEcheVerst
         */
        codeCalculEcheanceVersement: number;
        /**
         * Cefbec_CodeettEcheVerst
         */
        codeettEcheanceVersement: number;
        /**
         * Cdfbct_CodeIndcNatrEcheVerst
         */
        codeIndiceNatureEcheanceVersement: number;
        /**
         * Lbfpa1_InttCred
         */
        intituleLigneUn: string;
        /**
         * Nufbdt_DomcTres
         */
        domiciliationTres: string;
        /**
         * Nufbve_NumeDomcPourMiseADispFond
         */
        numeroDomiciliationPourMiseADispFond: string;
        /**
         * Mtfcve_MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * Ctfcpc_CodeIndicNatrPretComb
         */
        codeIndiceNaturePretComb: number;
        /**
         * Cifaam_CodeIndicPresUneBonfUneMajreTx
         */
        codeIndicePresUneBonificationUneMajreTaux: number;
        /**
         * Cefad0_CodeConfmRedcDurePTZ
         */
        codeConfirmationReductionDurePTZ: number;
        /**
         * Cefam0_CodeConfmRedcMtPTZ
         */
        codeConfirmationReductionMontantPTZ: number;
        /**
         * Mtfcpz_MtReglPTZ
         */
        montantReglePTZ: number;
        /**
         * MtMinPTZ
         */
        montantMinimumPTZ: number;
        /**
         * Mcface_MtCredEuro
         */
        montantCreditEuro: number;
        /**
         * Msfcpv_MtMaxPretPVH
         */
        montantMaximumPretPVH: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfada_CodeDevsSaccef
         */
        codeDeviseSaccef: string;
        /**
         * Npfcfi_NbPerdCred
         */
        nombrePeriodeCredit: number;
        /**
         * Pefcfi_CodePerdCred
         */
        codePeriodeCredit: number;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
        /**
         * Mefape_MtPrmeEcheHorsAccsCred
         */
        montantPrmeEcheanceHorsAccessoireCredit: number;
        /**
         * Mefacc_MtPrmeEcheAssr
         */
        montantPrmeEcheanceAssurance: number;
        /**
         * Mcafco_MtTotlCredHorsAccsHorsPerdPref
         */
        montantTotalCreditHorsAccessoireHorsPeriodePref: number;
        /**
         * Mcfaac_CoutTotlAccsPostSurCred
         */
        coutTotalAccessoirePosteSurCredit: number;
        /**
         * Mcfafd_CoutTotlFrsDossAsscCred
         */
        coutTotalFrsDossierAssuranceCredit: number;
        /**
         * Mcfgfr_CoutTotlFrsGarnAsscCred
         */
        coutTotalFrsGarantieAssuranceCredit: number;
        /**
         * Mcfacf_CoutTotlFrsCrtgeAsscCred
         */
        coutTotalFrsCrtgeAssuranceCredit: number;
        /**
         * Mcfosp_CoutTotlServSurObjtPerdAsscCred
         */
        coutTotalServiceSurObjetPeriodeAssuranceCredit: number;
        /**
         * Mcfafp_CoutTotlAccsCompPerdAsscCred
         */
        coutTotalAccessoireCompPeriodeAssuranceCredit: number;
        /**
         * Mcfoso_CoutTotlServSurObjtAperAsscCred
         */
        coutTotalServiceSurObjetAperAssuranceCredit: number;
        /**
         * Mcfafr_CoutTotlAccsCompAperAsscCred
         */
        coutTotalAccessoireCompAperAssuranceCredit: number;
        /**
         * Mefoso_MtPrmeEcheServSurObjt
         */
        montantPrmeEcheanceServiceSurObjet: number;
        /**
         * Mefafr_MtPrmeEcheAccsComp
         */
        montantPrmeEcheanceAccessoireComp: number;
        /**
         * Mcfaia_MtTotlAssrPerd
         */
        montantTotalAssurancePeriode: number;
        /**
         * CodeIndicModeCalcTx
         */
        codeIndiceModeCalculTaux: number;
        /**
         * TxMoyeActuHorsBonf
         */
        tauxMoyenActuHorsBonification: number;
        /**
         * TxMoyePropHorsBonf
         */
        tauxMoyenPropHorsBonification: number;
        /**
         * TxFutr
         */
        tauxFutr: ITauxIndiceLecture;
        /**
         * TxIntl
         */
        tauxInitial: ITauxInteretAnnuelLecture;
        /**
         * TxMoyeActu
         */
        tauxMoyenActu: number;
        /**
         * TxMoyeProp
         */
        tauxMoyenProp: number;
        /**
         * TegActu
         */
        tegActu: number;
        /**
         * TegProp
         */
        tegProp: number;
        /**
         * TAEA
         */
        tAEA: number;
        /**
         * Txfamc_TxMontage
         */
        tauxMontage: number;
        /**
         * BornesFraisDossier
         */
        bornesFraisDossier: Array<number>;
        /**
         * TegModeRestitution
         */
        tegModeRestitution: number;
        /**
         * MontantPTZVerrouille
         */
        montantPTZVerrouille: boolean;
        /**
         * DureePTZVerrouillee
         */
        dureePTZVerrouillee: boolean;
        /**
         * EcheancesJustifieesAssociees
         */
        echeancesJustifieesAssociees: IEcheancesJustifieesAssocieesLecture;
        /**
         * EtatForcageFraisDossier
         */
        etatForcageFraisDossier: string;
        /**
         * TxUsure
         */
        tauxUsure: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
        /**
         * IdntCpteCrrt
         */
        idCompteCrrt: string;
        /**
         * IdntModl
         */
        idModele: string;
        /**
         * IdntModlVersFrct
         */
        idModeleVersementFraction: string;
        /**
         * IdntRemsClnt
         */
        idRemsClient: string;
        /**
         * ListIdntDrtUtls
         */
        listeIdDroitUtilisation: Array<string>;
        /**
         * ListIdntPayr
         */
        listeIdPayr: Array<string>;
        /**
         * ListIdntPhas
         */
        listeIdPhase: Array<string>;
        /**
         * ListIdntSuivPlnf
         */
        listeIdSuivantPlafond: Array<string>;
        /**
         * ListIdntParmRevs
         */
        listeIdParametreRevision: Array<string>;
        /**
         * ListIdntVartDure
         */
        listeIdVartDure: Array<string>;
        /**
         * ListIdntAccs
         */
        listeIdAccessoire: Array<string>;
        /**
         * ListIdntAssr
         */
        listeIdAssurance: Array<string>;
        /**
         * ListIdntGarn
         */
        listeIdGarantie: Array<string>;
        /**
         * ListIdntAccsComp
         */
        listeIdAccessoireComp: Array<string>;
        /**
         * ListIdntAccsLiesPrdt
         */
        listeIdAccessoireLiesProduit: Array<string>;
        /**
         * ListIdntCreditsEPS
         */
        listeIdCreditsEPS: Array<string>;
        /**
         * IdntComplementEPS
         */
        idComplementEPS: string;
        /**
         * Cdfbju_CodeExistJustDeclVerst
         */
        codeExistJustificatifDeclarationVersement: number;
        /**
         * AjustementTaux
         */
        ajustementTaux: IAjustementTauxLecture;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
    }
    interface IResultatCalculCreditInterne {
        /**
         * CreditInterneLecture
         */
        creditInterneLecture: ICreditInterneLecture;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.CalculerEligibilite {
    interface ICalculerEligibiliteRequest {
        identifiantDossier: string;
    }
    interface IProfilPhasePTZ {
        /**
         * CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * DurMinPhas
         */
        dureeMinimumPhase: number;
        /**
         * DurMaxPhas
         */
        dureeMaximumPhase: number;
        /**
         * PerdicPhas
         */
        periodicitePhase: number;
        /**
         * QuotAmrt
         */
        quotientAmortissement: number;
        /**
         * MtEchn
         */
        montantEcheance: number;
    }
    interface IProfilProduitPTZ {
        /**
         * IdntPtz
         */
        idPtz: string;
        /**
         * MtMaxPtz
         */
        montantMaximumPtz: number;
        /**
         * MtMinPtz
         */
        montantMinimumPtz: number;
        /**
         * MtMaxMajrePtz
         */
        montantMaximumMajrePtz: number;
        /**
         * MtMaxOprt
         */
        montantMaximumOprt: number;
        /**
         * ListPhssPrdtPtz
         */
        listePhssProduitPtz: Array<IProfilPhasePTZ>;
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
        /**
         * DureeConseillee
         */
        dureeConseillee: number;
        /**
         * MontantRessourcesRetenu
         */
        montantRessourcesRetenu: number;
        /**
         * RFR
         */
        rFR: number;
        /**
         * CoefficientFamilial
         */
        coefficientFamilial: number;
        /**
         * CoefficientPonderation
         */
        coefficientPonderation: number;
        /**
         * CoutOperation
         */
        coutOperation: number;
        /**
         * Messages
         */
        messages: Array<string>;
    }
    interface IProfilEcoPTZ {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
        /**
         * DureeMax
         */
        dureeMaximum: number;
        /**
         * DureeConseillee
         */
        dureeConseillee: number;
        /**
         * MontantMax
         */
        montantMaximum: number;
        /**
         * Messages
         */
        messages: Array<string>;
    }
    interface IProfilProduitsPELCEL {
        /**
         * Idfcvp_IdntPrdtFinnPEL
         */
        idProduitFinancierPEL: string;
        /**
         * Idfcvp_IdntPrdtFinnCEL
         */
        idProduitFinancierCEL: string;
        /**
         * Idfcvp_LibellePrdtFinnPEL
         */
        libelleProduitFinancierPEL: string;
        /**
         * Idfcvp_LibellePrdtFinnCEL
         */
        libelleProduitFinancierCEL: string;
        /**
         * MtMaxPel
         */
        montantMaximumPEL: number;
        /**
         * MtMinPel
         */
        montantMinimumPEL: number;
        /**
         * MtMaxCel
         */
        montantMaximumCel: number;
        /**
         * MtMinCel
         */
        montantMinimumCel: number;
        /**
         * DureeConseilleeProduitPEL
         */
        dureeConseilleeProduitPEL: number;
        /**
         * DureeConseilleeProduitCEL
         */
        dureeConseilleeProduitCEL: number;
        /**
         * Messages
         */
        messages: Array<string>;
    }
    interface IResultatEligibilite {
        /**
         * IndicElgbPtz
         */
        indiceEligibilitePtz: boolean;
        /**
         * IndicElgbPc
         */
        indiceEligibilitePC: boolean;
        /**
         * IndicElgbPas
         */
        indiceEligibilitePas: boolean;
        /**
         * IndicElgbMajrePtz
         */
        indiceEligibiliteMajrePtz: boolean;
        /**
         * IndicElgbPel
         */
        indiceEligibilitePEL: boolean;
        /**
         * IndicElgbCel
         */
        indiceEligibiliteCel: boolean;
        /**
         * IndicElgbEcoPTZ
         */
        indiceEligibiliteEcoPTZ: boolean;
        /**
         * ListAnmlElgbPtz
         */
        listeAnmlEligibilitePtz: Array<string>;
        /**
         * ListAnmlElgbPc
         */
        listeAnmlEligibilitePC: Array<string>;
        /**
         * ListAnmlElgbPas
         */
        listeAnmlEligibilitePas: Array<string>;
        /**
         * ListAnmlElgbPel
         */
        listeAnmlEligibilitePEL: Array<string>;
        /**
         * ListAnmlElgbCel
         */
        listeAnmlEligibiliteCel: Array<string>;
        /**
         * ListAnmlElgbEcoPTZ
         */
        listeAnmlEligibiliteEcoPTZ: Array<string>;
        /**
         * PrflPtzElgb
         */
        profilPtzEligibilite: IProfilProduitPTZ;
        /**
         * PrflEcoPtzElgb
         */
        profilEcoPtzEligibilite: IProfilEcoPTZ;
        /**
         * PrflPelCelElg
         */
        profilPELCelElg: IProfilProduitsPELCEL;
    }
}

declare namespace ICRest.Modeles.CalculerEncoursEL {
    interface IResultatCalculEnCoursEL {
        /**
         * MntMaxAutorisePEL
         */
        mntMaximumAutorisePEL: number;
        /**
         * MntMaxAutoriseCEL
         */
        mntMaximumAutoriseCEL: number;
        /**
         * MntMaxAutorisePELCEL
         */
        mntMaximumAutorisePELCEL: number;
    }
}

declare namespace ICRest.Modeles.CalculerFraisHyppotheque {
    interface ICalculerFraisHypothequeRequest {
        identifiantDossier: string;
        idwsGarantieReelle: string;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IResultatCalculFraisHypotheque {
        /**
         * MontantFraisHypotheque
         */
        montantFraisHypotheque: number;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.CalculerFraisNotaire {
    interface IEntreeCalculFraisNotaire {
        /**
         * IdentifiantDossier
         */
        identifiantDossier: string;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IResultatCalculFraisNotaire {
        /**
         * MontantFraisNotaire
         */
        montantFraisNotaire: number;
        /**
         * MontantFraisNegociation
         */
        montantFraisNegociation: number;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.CalculerModulCredit {
    interface IEntreeCalculModulation {
        /**
         * Annee
         */
        annee: number;
        /**
         * Duree
         */
        duree: number;
        /**
         * bModulationEcheance
         */
        modulationEcheance: boolean;
        /**
         * ValeurModulation
         */
        valeurModulation: number;
    }
    interface IEcheanceModulationTA {
        /**
         * Annee
         */
        annee: number;
        /**
         * MontantEcheance
         */
        montantEcheance: number;
        /**
         * MontantAssurance
         */
        montantAssurance: number;
        /**
         * Periode
         */
        periode: number;
        /**
         * CRD
         */
        cRD: number;
        /**
         * ValeurModulation
         */
        valeurModulation: string;
    }
    interface ISortieCalculModulation {
        /**
         * ListeEcheance
         */
        listeEcheance: Array<IEcheanceModulationTA>;
        /**
         * ResultatDuree
         */
        resultatDuree: number;
        /**
         * ResultatCout
         */
        resultatCout: number;
        /**
         * VariationDuree
         */
        variationDuree: number;
        /**
         * MontantDerniereEcheance
         */
        montantDerniereEcheance: number;
        /**
         * TegProportionnel
         */
        tegProportionnel: boolean;
        /**
         * TegApresModulation
         */
        tegApresModulation: number;
    }
    interface ICalculerModulationsCreditRequest {
        identifiantDossier: string;
        identifiantCredit: string;
        entrCalculModn: IEntreeCalculModulation;
    }
}

declare namespace ICRest.Modeles.CalculerPiecesEtControles {
    interface ICalculerPiecesEtControlesRequest {
        identifiantDossier: string;
        identifiantPlan: number;
        estConsulterDNCSeulement: boolean;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IPieceLecture extends IElementLecture {
        /**
         * IdentifiantPiece
         */
        identifiantPiece: string;
        /**
         * Llfcpt_LiblPiecCtrl
         */
        libellePieceControle: string;
        /**
         * Ctfcth_CodeThm
         */
        codeTheme: string;
        /**
         * Ctfcp1_CodePrcs
         */
        identifiantProcessusAuPlusTard: string;
        /**
         * Cifcch_IndicCasEchn
         */
        indiceCasEcheance: number;
        /**
         * Cifcob_IndicObgt
         */
        indiceObligatoire: number;
        /**
         * Cdfaju_StttPiecCtrl
         */
        stttPieceControle: number;
        /**
         * Dtfarj_DateDernMajSttt
         * Type date au format yyyy-MM-dd
         */
        dateDernierMAJSttt: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Llfcai_LiblAide
         */
        libelleAide: string;
        /**
         * CodeEtatAcquistion
         */
        codeEtatAcquistion: string;
    }
    interface IPieceClientLecture extends IPieceLecture {
    }
    interface IPieceAgenceLecture extends IPieceLecture {
    }
    interface IControleManuelLecture extends IPieceLecture {
        /**
         * Ctfchq_TypeActrOrigCtrl
         */
        typeActrOrigineControle: number;
        /**
         * Llfccm_CommtCtrl
         */
        commentaireControle: string;
        /**
         * HistCtrl
         */
        histControle: Array<IControleManuelLecture>;
    }
    interface IPiecesParTheme {
        /**
         * Ctfcth_CodeThm
         */
        codeTheme: string;
        /**
         * Llfcth_LiblLongThm
         */
        libelleLongTheme: string;
        /**
         * Lcfcth_LiblCrtThm
         */
        libelleCreationTheme: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * ListPiecClnt
         */
        listePieceClient: Array<IPieceClientLecture>;
        /**
         * ListPiecAgnc
         */
        listePieceAgence: Array<IPieceAgenceLecture>;
        /**
         * ListCtrlManl
         */
        listeControleManl: Array<IControleManuelLecture>;
    }
    interface IProcessusMetier {
        /**
         * Ctfcpu_CodePrcs
         */
        codeProcessus: string;
        /**
         * Llfcpm_LiblPrcs
         */
        libelleProcessus: string;
    }
    interface IContexteDossierNumeriqueLecture {
        /**
         * EstDossierNumeriqueActive
         */
        estDossierNumeriqueActive: boolean;
        /**
         * UrlAcquDossierNumerique
         */
        urlAcquDossierNumerique: string;
        /**
         * UrlConsDossierNumerique
         */
        urlConsolideDossierNumerique: string;
        /**
         * ErreurDossierNumerique
         */
        erreurDossierNumerique: boolean;
        /**
         * ListeAnomalieDossierNumerique
         */
        listeAnomalieDossierNumerique: Array<IAnomalieLecture>;
        /**
         * RefRegr
         */
        referenceRegr: string;
    }
    interface IResultatPiecesEtControles {
        /**
         * ListPiecCtrlManlParThm
         */
        listePieceControleManlParTheme: Array<IPiecesParTheme>;
        /**
         * ListPrcsMetrRefr
         */
        listeProcessusMetierReference: Array<IProcessusMetier>;
        /**
         * CommtPiecClnt
         */
        commentairePieceClient: string;
        /**
         * CommtPiecAgnc
         */
        commentairePieceAgence: string;
        /**
         * ContexteDossierNumerique
         */
        contexteDossierNumerique: IContexteDossierNumeriqueLecture;
    }
}

declare namespace ICRest.Modeles.CalculerRevision {
    interface ICalculerRevisionRequest {
        identifiantDossier: string;
        idwsCredit: string;
        revisionTaux: number;
        revisionTauxDate: number;
        ajustDuree: boolean;
        valAjustDuree: number;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IResultatCalculRevision {
        /**
         * MtCaptCrdt
         */
        montantCapitalCredit: number;
        /**
         * DureeCrdt
         */
        dureeCredit: number;
        /**
         * TxPro
         */
        tauxPro: number;
        /**
         * Echn
         */
        echeance: number;
        /**
         * DureeApresRevis
         */
        dureeApresRevis: string;
        /**
         * DureePrlg
         */
        dureePrlg: string;
        /**
         * EchnApresRevis
         */
        echeanceApresRevis: number;
        /**
         * EchnAugm
         */
        echeanceAugm: number;
        /**
         * AnomaliesLecture
         */
        anomaliesLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.ElementSchema {
    enum CodeIdNeo {
        AccessoireComplementaire,
        AccessoireLieProduit,
        ActeIDNSignatureOffre,
        Activite,
        Agent,
        AjustementTaux,
        AlerteEnEntree,
        AlerteEnSortie,
        Antichrese,
        Apl,
        Assurance,
        AutoMoto,
        Avis,
        AvisOrganismeExt,
        BatimentHabitableFinance,
        BatimentSousJacent,
        BienAVendre,
        BienConsoFinance,
        BienDivers,
        BienEquipementPro,
        BienSousJacentSoulte,
        BlocNotes,
        BonDeCaisseCapitalisation,
        ButLocatif,
        CessionDaillyAutre,
        CessionDaillyLoyerImmeuble,
        Charge,
        ClausePersonnalisee,
        ComplementDossier,
        ComplementEPS,
        ComplementFicheContact,
        ComplementPhasePretCombine,
        Compte,
        CompteCourant,
        CompteEpargneLogement,
        ConstructionFinance,
        Contrat,
        ContratAssurance,
        ControleManuel,
        Cotisation,
        CotisationDerogation,
        CotisationPeriode,
        CotisationPhase,
        CotisationTrancheAgeLecture,
        CourrierEPS,
        CouvertureCredit,
        CptDepotParticulier,
        CptProfessionnel,
        CreditBonification,
        CreditBonificationInfo,
        CreditEPS,
        CreditExistant,
        CreditExterne,
        CreditHD,
        CreditInterne,
        CreditLissage,
        CreditModalite,
        CreditPalierProgression,
        CreditPalierTaux,
        CreditParamIndexationParPeriode,
        CreditParamIndexationParPhase,
        CreditParamRevisionParPeriode,
        CreditParamRevisionParPhase,
        CreditPhaseAmortissement,
        CreditPhaseDiffereAmortissement,
        CreditPhaseDiffereTotal,
        CreditPhaseMobilisation,
        CreditPhasePrefinancement,
        CritereOptim,
        DecisionPreteur,
        DelegationLoyer,
        DetailCoutObjet,
        DocumentIDN,
        DocumentOffreIndustrialisee,
        Dossier,
        DroitUtilise,
        EcheanceOptimisation,
        EditionDocuments,
        Emprunteur,
        Endettement,
        EntiteExterneCredit,
        EntrepreneurIndividuel,
        Evenement,
        FamilleEpargne,
        GageCompteInstrumentFinancier,
        GageVehicule,
        Garant,
        GarantieHD,
        GarantiePersonnelle,
        GarantieReelle,
        GestionAdministrative,
        HypothequeAerienne,
        HypothequeImmobiliere,
        InformationComplementaireSCI,
        InterditBancaire,
        MarcheEPS,
        NantissementFondDeCommerce,
        NantissementPartSociale,
        NantissementValeurMateriel,
        NantissementValeurMobiliere,
        OffrePretIndustrialisee,
        Opposition,
        OrigineApport,
        PalierContraint,
        ParametreFonctionnel,
        Payeur,
        Personne,
        PersonneMorale,
        PersonnePhysique,
        PhaseCreditExistant,
        PieceAgence,
        PieceClient,
        PlanEpargneLogement,
        PlanFinancement,
        PoolEPS,
        PretReamenage,
        PretReamenageInfoRegroup,
        ProjetEPS,
        ProjetImmobilier,
        ProjetNonImmobilier,
        PromotionImmobiliere,
        Proprietaire,
        QuestionnairePTZ,
        Reamenagement,
        RedacteurActe,
        ReferenceCadastrale,
        ReferenceLot,
        RefusAssuranceExterne,
        RelationEntrePersonne,
        RemiseClient,
        Ressource,
        RevenuFiscal,
        SaisiesComplementaire,
        ServiceSurObjet,
        Signataire,
        SoulteFinance,
        SuiviEditions,
        SuiviPlanifie,
        SynthesePlanFinancement,
        TACreditEPS,
        TerrainFinance,
        TerrainSousJacent,
        TrancheEL,
        TrancheMontantLecture,
        TravauxFinance,
        TresorerieFinancee,
        Tuteur,
        VariationDuree,
        Versement,
        VersementAttendu,
        VersementFractionne,
        W795,
    }
}

declare namespace ICRest.Modeles.ConsulterAssurCNP {
    interface IEntreeTransmissionProposition {
        /**
         * IdntDoss
         */
        idDossier: string;
        /**
         * Idfaos_IdntPropAssrCnp
         */
        idPropAssuranceCnp: string;
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Idws_IdntPers
         */
        idPersonne: string;
        /**
         * ForcerControles
         */
        forcerControles: boolean;
    }
    interface IEtatDossierAssuranceLecture {
        /**
         * LibelleEtat
         */
        libelleEtat: string;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * LibelleDemande
         */
        libelleDemande: string;
        /**
         * LibelleDateEnvoi
         */
        libelleDateEnvoi: string;
    }
    interface IDecisionDossierAssuranceLecture {
        /**
         * AccesLectureDecision
         */
        accessoireLectureDecision: boolean;
        /**
         * AvisValide
         */
        avisValide: boolean;
        /**
         * CodeDecision
         */
        codeDecision: number;
        /**
         * LibelleCredit
         */
        libelleCredit: string;
        /**
         * LibelleAvis
         */
        libelleAvis: string;
        /**
         * LibelleErreur
         */
        libelleErreur: string;
    }
    interface IDossierAssuranceLecture {
        /**
         * EtatDossierAssurance
         */
        etatDossierAssurance: IEtatDossierAssuranceLecture;
        /**
         * DecisionDossierAssurance
         */
        decisionDossierAssurance: IDecisionDossierAssuranceLecture;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IResultatDecisionCNP {
        /**
         * AssuranceCNP
         */
        assuranceCNP: string;
        /**
         * LibErreur
         */
        libelleErreur: string;
        /**
         * DossierAssurance
         */
        dossierAssurance: IDossierAssuranceLecture;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.ConsulterDocsDossCnp {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IDocumentAssuranceLecture extends IElementLecture {
        /**
         * IdDocument
         */
        idDocument: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * IdContrat
         */
        idContrat: string;
        /**
         * TabDonneesDocument
         */
        tabDonneesDocument: string;
    }
    interface IResultatDocumentsDossierCNP {
        /**
         * LibErreur
         */
        libelleErreur: string;
        /**
         * Documents
         */
        documents: Array<IDocumentAssuranceLecture>;
    }
    interface IConsulterDocumentsDossierCNPRequest {
        identifiantDossier: string;
        identifiantPersonne: string;
        identifiantPlanFinancement: string;
    }
}

declare namespace ICRest.Modeles.ControleAvantAppelCEGC {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
}

declare namespace ICRest.Modeles.ControlerAppelSGFGAS {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IResultatSGFGAS {
        /**
         * ListAno
         */
        listeAno: Array<IAnomalieLecture>;
        /**
         * DevisEcoPTZ
         */
        devisEcoPTZ: boolean;
        /**
         * CreationDossierSGFGAS
         */
        creationDossierSGFGAS: boolean;
    }
    interface IControlerAppelSGFGASRequest {
        identifiantDossier: string;
        identifiantPlanFinancement: string;
        urlRetour: string;
        estDevis: boolean;
    }
}

declare namespace ICRest.Modeles.ControlerAvantDecisionOffre {
    interface IEntreeControleEdition {
        /**
         * IdntDoss
         */
        idDossier: string;
        /**
         * bForcerCtrlCmpltModRecouvrement
         */
        forcerControleCmpltModRecouvrement: boolean;
        /**
         * bForcerCtrlAccesOffre
         */
        forcerControleAccessoireOffre: boolean;
        /**
         * bForcerCtrlMandat
         */
        forcerControleMandat: boolean;
        /**
         * bForcerCtrlEdition
         */
        forcerControleEdition: boolean;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IRetourControleEdition {
        /**
         * Anomalies
         */
        anomalies: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlAccesOffre
         */
        anomaliesControleAccessoireOffre: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlModaliteRecouvrement
         */
        anomaliesControleModaliteRecouvrement: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlMandats
         */
        anomaliesControleMandats: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlEditionOffre
         */
        anomaliesControleEditionOffre: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.ControlerCompletudePvh {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IEntreeCompletudePVH {
        /**
         * IdntDoss
         */
        idDossier: string;
        /**
         * bControlerQuotites
         */
        controlerQuotites: boolean;
        /**
         * bControlerPrescripteur
         */
        controlerPrescripteur: boolean;
    }
}

declare namespace ICRest.Modeles.ControlerDecision {
    interface IEntreeControleDecision {
        /**
         * IdntDoss
         */
        idDossier: string;
        /**
         * DateAccordPreteur
         * Type date au format yyyy-MM-dd
         */
        dateAccordPreteur: string;
        /**
         * bForcerCtrlAvtAccPret
         */
        forcerControleAvtAccessoirePret: boolean;
        /**
         * bForcerCtrlBale2
         */
        forcerControleBale2: boolean;
        /**
         * bForcerCtrlReglementaire
         */
        forcerControleReglementaire: boolean;
    }
    interface IRetourControleDecision {
        /**
         * ValidationPossible
         */
        validationPossible: boolean;
        /**
         * ModificationPossible
         */
        modificationPossible: boolean;
        /**
         * ExisteImpactTarification
         */
        existeImpactTarification: boolean;
        /**
         * TransfertPossible
         */
        transfertPossible: boolean;
        /**
         * VisualisationDetailPossible
         */
        visualisationDetailPossible: boolean;
        /**
         * Anomalies
         */
        anomalies: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlAvtAccPret
         */
        anomaliesControleAvtAccessoirePret: Array<IAnomalieLecture>;
        /**
         * AnomalieImpactTarification
         */
        anomalieImpactTarification: IAnomalieLecture;
        /**
         * NoteBale2
         */
        noteBale2: string;
        /**
         * LibelleRisque
         */
        libelleRisque: string;
        /**
         * Marge
         */
        marge: string;
        /**
         * MargeCom
         */
        margeCom: string;
        /**
         * LibelleErreurDelegationTaux
         */
        libelleErreurDelegationTaux: string;
        /**
         * AnomaliesCtrlBale2
         */
        anomaliesControleBale2: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlReglementaire
         */
        anomaliesControleReglementaire: Array<IAnomalieLecture>;
        /**
         * CtrlReglementaireForcee
         */
        controleReglementaireForcee: boolean;
        /**
         * CtrlCtfprmA3Forcee
         */
        controleCtfprmA3Forcee: boolean;
    }
}

declare namespace ICRest.Modeles.CopierPlanFinancement {
    interface ICopierPlanFinancementRequest {
        identifiantDossier: string;
        idwsPlanFinACopier: string;
    }
}

declare namespace ICRest.Modeles.CreerDossierApplication {
    interface IEntreeParametresPVH {
        /**
         * cAppliChrg
         */
        applicationCharge: number;
        /**
         * cAppliOrigDmde
         */
        applicationOrigineDmde: number;
        /**
         * sIdntClntBanc
         */
        idClientBancaire: string;
        /**
         * sCosxap_CodeCanal
         */
        cosxap_CodeCanal: string;
        /**
         * sCtficc_CanalDeCreation
         */
        canalDeCreation: string;
    }
    interface IEntreeCreationDossierApplication {
        /**
         * iVersWsdl
         */
        versementWsdl: number;
        /**
         * dDateTrt
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateTraitement: string;
        /**
         * sCdfadv_CdeDevs
         */
        cdfadv_CdeDevise: string;
        /**
         * sIdfaes
         */
        idfaes: string;
        /**
         * EntreePVH
         */
        entreePVH: IEntreeParametresPVH;
    }
    interface IElementSchema {
        /**
         * Idws
         */
        idws: string;
        /**
         * Desc
         */
        description: string;
    }
    interface IBlocNotesSchema extends IElementSchema {
        /**
         * Idfwac_TypeBlc
         */
        typeBlocNote: string;
    }
    interface IClausePersonnaliseeSchema extends IElementSchema {
        /**
         * DestClsePers
         */
        destinataireClassePersonne: number;
    }
    interface IAlerteEnSortieSchema extends IElementSchema {
        /**
         * Ctfiax_CodeAlrt
         */
        codeAlerte: string;
        /**
         * Dcfiax_DateEmssAlrt
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEmissionAlerte: string;
    }
    interface IAlerteEnEntreeSchema extends IElementSchema {
        /**
         * Ctfiai_CodeAlrt
         */
        codeAlerte: number;
        /**
         * Dcfiai_DateEmssAlrt
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEmissionAlerte: string;
    }
    interface IAvisSchema extends IElementSchema {
        /**
         * Ctfita_CodeTyplAvis
         */
        codeTypologieAvis: string;
        /**
         * Dtfaad_DateSaisAvis
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSaisieAvis: string;
        /**
         * Idfaen_IdntEnttSaisAvis
         */
        idEntiteSaisieAvis: string;
        /**
         * Lbfaen_LiblEnttSaisAvis
         */
        libelleEntiteSaisieAvis: string;
        /**
         * Nofiav_NumeAvis
         */
        numeroAvis: number;
    }
    interface IEvenementSchema extends IElementSchema {
        /**
         * Ctfaev_CodeTypeEven
         */
        codeTypeEven: string;
        /**
         * Dtfaee_DateEfftEven
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEffetEven: string;
    }
    interface IVersementSchema extends IElementSchema {
        /**
         * Txfave_PctVerst
         */
        pourcentageVersement: number;
    }
    interface IRedacteurActeSchema extends IElementSchema {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
    }
    interface IRessourceSchema extends IElementSchema {
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Mtfpre_MtRess
         */
        montantRessource: number;
        /**
         * Npfpre_NbPerdParAn
         */
        nombrePeriodeParAn: number;
    }
    interface IChargeSchema extends IElementSchema {
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
    }
    interface IPhaseCreditExistantSchema extends IElementSchema {
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
    }
    interface ICreditExistantSchema extends IChargeSchema {
        /**
         * PhasesCreditExistant
         */
        phasesCreditExistant: Array<IPhaseCreditExistantSchema>;
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
    }
    interface ICompteSchema extends IElementSchema {
        /**
         * Composition
         */
        composition: string;
        /**
         * Cdfppr_TypeCpte
         */
        typeCompte: string;
        /**
         * Nufpcp_NumeCpte
         */
        numeroCompte: string;
    }
    interface ICompteProfessionnelSchema extends ICompteSchema {
    }
    interface ICompteDepotSchema extends ICompteSchema {
    }
    interface IRevenuFiscalSchema extends IElementSchema {
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
    }
    interface IPatrimoineImmobilierSchema extends IElementSchema {
        /**
         * Ctfcnp_NatrPtrmImmb
         */
        naturePatrimoineImmobilier: number;
        /**
         * Mtfmvb_ValrActlPtrm
         */
        valeurActuarielPatrimoine: number;
    }
    interface IEmprunteurSchema extends IElementSchema {
        /**
         * IdwsPersonnes
         */
        idwsPersonnes: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
        /**
         * Comptes
         */
        comptes: Array<ICompteSchema>;
        /**
         * RevenusFiscaux
         */
        revenusFiscaux: Array<IRevenuFiscalSchema>;
        /**
         * PatrimoinesImmo
         */
        patrimoinesImmobilier: Array<IPatrimoineImmobilierSchema>;
    }
    interface IGarantSchema extends IElementSchema {
        /**
         * IdwsPersonnes
         */
        idwsPersonnes: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
    }
    interface IFamilleEpargneSchema extends IElementSchema {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Mtfmve_MtValrEprgAvntOper
         */
        montantValeurEpargneAvenantOper: number;
    }
    interface IRelationEntrePersonnesSchema extends IElementSchema {
        /**
         * Cnfcrp_CodeNatureRelation
         */
        codeNatureRelation: string;
        /**
         * IdntPers2
         */
        idPersonne2: string;
    }
    interface IComplementFicheContactSchema extends IElementSchema {
    }
    interface IPersonneSchema extends IElementSchema {
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Roles
         */
        roles: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
        /**
         * FamillesEpargne
         */
        famillesEpargne: Array<IFamilleEpargneSchema>;
        /**
         * Comptes
         */
        comptes: Array<ICompteSchema>;
        /**
         * RelationsEntrePersonnes
         */
        relationsEntrePersonnes: Array<IRelationEntrePersonnesSchema>;
        /**
         * ComplementFicheContact
         */
        complementFicheContact: IComplementFicheContactSchema;
        /**
         * ComptesPrelVersModalite
         */
        comptesPrelVersementModalite: Array<ICompteSchema>;
        /**
         * Cdfptp_CodeTypePers
         */
        codeTypePersonne: number;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
    }
    interface IOppositionSchema extends IElementSchema {
        /**
         * Cdfmop_CodeOppo
         */
        codeOpposition: string;
        /**
         * Ddfmop_DateDebtOppo
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDebutOpposition: string;
        /**
         * Dffmop_DateFinOppo
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateFinOpposition: string;
    }
    interface IInterditBancaireSchema extends IElementSchema {
    }
    interface IActiviteSchema extends IElementSchema {
        /**
         * Cdfmcs_CodeClssRisqCsp
         */
        codeClasseRisqueCSP: number;
    }
    interface IEntrepreneurIndividuelSchema extends IElementSchema {
        /**
         * EstEIRL
         */
        estEIRL: boolean;
        /**
         * IndicateurEIRL
         */
        indicateurEIRL: number;
        /**
         * LibelleEIRL
         */
        libelleEIRL: string;
        /**
         * AccordConjoint
         */
        accordConjoint: boolean;
    }
    interface ISignataireSchema extends IElementSchema {
        /**
         * EmailContact
         */
        emailContact: string;
        /**
         * NumeroContact
         */
        numeroContact: string;
        /**
         * EstSignataireEffectif
         */
        estSignataireEffectif: boolean;
    }
    interface IPersonnePhysiqueSchema extends IPersonneSchema {
        /**
         * Oppositions
         */
        oppositions: Array<IOppositionSchema>;
        /**
         * InterditBancaire
         */
        interditBancaire: IInterditBancaireSchema;
        /**
         * Activite
         */
        activite: IActiviteSchema;
        /**
         * EntrepreneurIndividuel
         */
        entrepreneurIndividuel: IEntrepreneurIndividuelSchema;
        /**
         * Signataire
         */
        signataire: ISignataireSchema;
    }
    interface IPersonneMoraleSchema extends IPersonneSchema {
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
    }
    interface IPersonneAutreSchema extends IPersonneSchema {
    }
    interface IBienAVendreSchema extends IElementSchema {
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Ctfcor_CodeTypeObjtRegl
         */
        codeTypeObjetRegle: string;
        /**
         * Mtfmvc_PrixNetVndr
         */
        prixNetVendeur: number;
    }
    interface ILienEPSTirageSchema extends IElementSchema {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfaps_IdentifiantEPS
         */
        identifiantEPS: string;
        /**
         * Idfcej_Etablissement
         */
        etablissement: number;
    }
    interface IAplSchema extends IElementSchema {
        /**
         * Mtfiba_MtApl
         */
        montantAPL: number;
        /**
         * TypeApl
         */
        typeAPL: number;
    }
    interface ISynthesePlanFinancementSchema extends IElementSchema {
        /**
         * Mcfoof_CoutTotalTTC
         */
        coutTotalTTC: number;
        /**
         * Mcfgfr_CoutTotalFraisGarantie
         */
        coutTotalFraisGarantie: number;
        /**
         * Mcfafd_CoutTotalFraisDossier
         */
        coutTotalFraisDossier: number;
        /**
         * Mtfaap_MtApportPersonnel
         */
        montantApportPersonnel: number;
        /**
         * nMtfaso_MtConcoursInternes
         */
        mtfaso_MontantConcoursInternes: number;
        /**
         * nMkface_MtConcoursExternes
         */
        mkface_MontantConcoursExternes: number;
        /**
         * Mcfacf_CoutTotalFraisCourtage
         */
        coutTotalFraisCourtage: number;
        /**
         * MtMensualiteAvecAssurance
         */
        montantMensualiteAvecAssurance: number;
        /**
         * MtMensualiteNet
         */
        montantMensualiteNet: number;
    }
    interface ICreditExterneSchema extends IElementSchema {
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Txfatg_TegActu
         */
        tegActu: number;
        /**
         * Mkface_MtCapt
         */
        montantCapital: number;
    }
    interface IPalierContraintSchema extends IElementSchema {
        /**
         * Ddpe_DateDebtPerd
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDebutPeriode: string;
        /**
         * Npfpco_DurePalr
         */
        durePalier: number;
        /**
         * Meface_MtEche
         */
        montantEcheance: number;
    }
    interface IRemiseClientSchema extends IElementSchema {
        /**
         * MtAppl
         */
        montantApplication: number;
        /**
         * TxAppl
         */
        tauxApplication: number;
    }
    interface ITrancheMontantSchema extends IElementSchema {
        /**
         * Txfcaa_TxTrchMt
         */
        tauxTrancheMontant: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
    }
    interface ICotisationSchema extends IElementSchema {
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: number;
        /**
         * Npfce1_NbPerdAppliCots
         */
        nombrePeriodeApplicationCotisation: number;
        /**
         * Txfipf_PartFinn
         */
        partFinancier: number;
        /**
         * Mtfgfr_MtFrsGarn
         */
        montantFrsGarantie: number;
        /**
         * Ctfcac_TypeAccs
         */
        typeAccessoire: string;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
        /**
         * TranchesMontant
         */
        tranchesMontant: Array<ITrancheMontantSchema>;
    }
    interface ICotisationTrancheAgeSchema extends ICotisationSchema {
    }
    interface ICotisationPhaseSchema extends ICotisationSchema {
    }
    interface ICotisationPeriodeSchema extends ICotisationSchema {
    }
    interface ICotisationDerogationSchema extends ICotisationSchema {
    }
    interface ICouvertureCreditSchema extends IElementSchema {
        /**
         * dMontantCoutTotalAssurance
         */
        montantCoutTotalAssurance: number;
        /**
         * dMontantEcheanceMaximale
         */
        montantEcheanceMaximale: number;
        /**
         * dMontantEcheanceMinimale
         */
        montantEcheanceMinimale: number;
        /**
         * dMontantMensualiteEcheance
         */
        montantMensualiteEcheance: number;
        /**
         * IdCredit
         */
        idCredit: string;
        /**
         * Cotisations
         */
        cotisations: Array<ICotisationSchema>;
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
    }
    interface IAccessoireSchema extends IElementSchema {
        /**
         * CouverturesCredits
         */
        couverturesCredits: Array<ICouvertureCreditSchema>;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
    }
    interface IAccessoireComplementaireSchema extends IAccessoireSchema {
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
    }
    interface IAccessoireLieProduitSchema extends IAccessoireSchema {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
    }
    interface IAvisOrganismeExterneSchema extends IElementSchema {
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateAvis: string;
    }
    interface IAssuranceSchema extends IAccessoireSchema {
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * EstAssuranceAXA
         */
        estAssuranceAXA: boolean;
        /**
         * EstAssuranceGroupePourTAEA
         */
        estAssuranceGroupePourTAEA: boolean;
        /**
         * AvisOrganismeExterne
         */
        avisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * DerniersAvisOrganismeExterne
         */
        derniersAvisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * EstAssuranceCNP
         */
        estAssuranceCNP: boolean;
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface IGarantieSchema extends IAccessoireSchema {
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * Cdfcng_NatrGarn
         */
        natureGarantie: string;
    }
    interface IBienPorteEnGarantieSchema extends IElementSchema {
    }
    interface INantissementValeurMobiliereSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementValeurMaterielleSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementPartSocialeSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementFondDeCommerceSchema extends IBienPorteEnGarantieSchema {
    }
    interface IProprietaireSchema extends IElementSchema {
    }
    interface IHypothequeImmobiliereSchema extends IBienPorteEnGarantieSchema {
        /**
         * Proprietaires
         */
        proprietaires: Array<IProprietaireSchema>;
    }
    interface IHypothequeAerienneSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageVehiculeSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageCompteInstrumentFinancierSchema extends IBienPorteEnGarantieSchema {
    }
    interface IDelegationLoyerSchema extends IBienPorteEnGarantieSchema {
    }
    interface IVersementAttenduSchema extends IElementSchema {
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
    }
    interface IContratAssuranceSchema extends IBienPorteEnGarantieSchema {
        /**
         * VersementsAttendus
         */
        versementsAttendus: Array<IVersementAttenduSchema>;
    }
    interface ICessionDaillyLoyerImmeubleSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICessionDaillyAutreSchema extends IBienPorteEnGarantieSchema {
    }
    interface IBonDeCaisseCapitalisationSchema extends IBienPorteEnGarantieSchema {
    }
    interface IBienDiversSchema extends IBienPorteEnGarantieSchema {
    }
    interface IAntichreseSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICreditHDSchema extends IElementSchema {
        /**
         * Idfcct_RefrPret
         */
        referencePret: string;
        /**
         * Mtfaoc_MtPret
         */
        montantPret: number;
        /**
         * IdntCredExnt
         */
        idCreditExnt: string;
    }
    interface IGarantieHDSchema extends IElementSchema {
        /**
         * Cdfcng_NatrGarnHorsDoss
         */
        natureGarantieHorsDossier: string;
        /**
         * Idfgg1_IdntOrigGarnHorsDoss
         */
        idOrigineGarantieHorsDossier: string;
        /**
         * CreditsHD
         */
        creditsHD: Array<ICreditHDSchema>;
    }
    interface IGarantieReelleSchema extends IGarantieSchema {
        /**
         * BienPorteEnGarantie
         */
        bienPorteEnGarantie: IBienPorteEnGarantieSchema;
        /**
         * GarantieHD
         */
        garantieHD: IGarantieHDSchema;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
    }
    interface IGarantiePersonnelleSchema extends IGarantieSchema {
        /**
         * AvisOrganismeExterne
         */
        avisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * DerniersAvisOrganismeExterne
         */
        derniersAvisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface IServiceSurObjetSchema extends IAccessoireSchema {
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface ITauxInteretAnnuelLecture {
        /**
         * ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * TxActu
         */
        tauxActu: number;
        /**
         * TxProp
         */
        tauxProp: number;
    }
    interface ITauxIndiceLecture extends ITauxInteretAnnuelLecture {
        /**
         * Marg
         */
        marge: number;
        /**
         * ValrIndc
         */
        valeurIndice: number;
    }
    interface ITauxFixeLecture extends ITauxInteretAnnuelLecture {
    }
    interface ITauxMixteLecture extends ITauxInteretAnnuelLecture {
        /**
         * Rpar
         */
        repartition: number;
        /**
         * TxIndcCmpstTxMixt
         */
        tauxIndiceCmpstTauxMixte: ITauxIndiceLecture;
        /**
         * TxFixeCmpstTxMixt
         */
        tauxFixeCmpstTauxMixte: ITauxFixeLecture;
    }
    interface IEcheanceOptimisationSchema extends IElementSchema {
        /**
         * Mefhcd_MtRembSais
         */
        montantRemboursementSaisie: number;
        /**
         * Ctfhel_CodeTypeElemSais
         */
        codeTypeElementSaisie: number;
    }
    interface ICreditPalierTauxSchema extends IElementSchema {
        /**
         * TxIntePalr
         */
        tauxInterieurPalier: ITauxInteretAnnuelLecture;
        /**
         * Txfcpg_TxPrgrEcheSurPalr
         */
        tauxProgressifEcheanceSurPalier: number;
        /**
         * DureeEnMois
         */
        dureeEnMois: number;
        /**
         * EcheancesOptimisation
         */
        echeancesOptimisation: Array<IEcheanceOptimisationSchema>;
    }
    interface ICreditParamIndexationSchema extends IElementSchema {
        /**
         * Nofrji_NumeIndcRevsCred
         */
        numeroIndiceRevisionCredit: number;
    }
    interface ICreditParamRevisionSchema extends IElementSchema {
        /**
         * Idfrlr_IdntLoiRevs
         */
        idLoiRevision: string;
        /**
         * Nofrji_NumeJeuIndcRevsAsscCred
         */
        numeroJeuxIndiceRevisionAssuranceCredit: number;
        /**
         * CreditParamsIndexation
         */
        creditParamsIndexation: Array<ICreditParamIndexationSchema>;
    }
    interface ICreditParamRevisionParPhaseSchema extends ICreditParamRevisionSchema {
    }
    interface ICreditPhaseSchema extends IElementSchema {
        /**
         * DureeEnMois
         */
        dureeEnMois: number;
        /**
         * CreditPaliersTaux
         */
        creditPaliersTaux: Array<ICreditPalierTauxSchema>;
        /**
         * CreditParamsRevisionParPhase
         */
        creditParamsRevisionParPhase: ICreditParamRevisionParPhaseSchema;
    }
    interface ICreditPhasePrefinancementSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhaseMobilisationSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhaseDiffereTotalSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhaseDiffereAmortissementSchema extends ICreditPhaseSchema {
    }
    interface ICreditPalierProgressionSchema extends IElementSchema {
    }
    interface IComplementPhasePretCombineSchema extends IElementSchema {
    }
    interface ICreditPhaseAmortissementSchema extends ICreditPhaseSchema {
        /**
         * CreditPaliersProgression
         */
        creditPaliersProgression: Array<ICreditPalierProgressionSchema>;
        /**
         * ComplementPhasePretCombine
         */
        complementPhasePretCombine: IComplementPhasePretCombineSchema;
    }
    interface ISuiviPlanifieSchema extends IElementSchema {
    }
    interface IPayeurSchema extends IElementSchema {
        /**
         * IdwsPersonne
         */
        idPersonne: string;
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
    }
    interface ICreditParamRevisionParPeriodeSchema extends ICreditParamRevisionSchema {
    }
    interface ICreditModaliteSchema extends IElementSchema {
        /**
         * Idfcmi_IdntModlCalcImpe
         */
        idModeleCalculImpe: string;
        /**
         * Nofcmc_NumeModlRembAntc
         */
        numeroModeleRemboursementAnticipe: number;
    }
    interface ICreditBonificationInfoSchema extends IElementSchema {
        /**
         * Cdfdic_CodeInfo
         */
        codeInformation: string;
        /**
         * sCdfddi_CodeDetail
         */
        codeDetail: string;
    }
    interface ICreditBonificationSchema extends IElementSchema {
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * Infos
         */
        information: Array<ICreditBonificationInfoSchema>;
    }
    interface IDroitUtiliseSchema extends IElementSchema {
        /**
         * Mtfadu_MtDrtAcqsUtls
         */
        montantDroitAcqsUtilisation: number;
        /**
         * IdntTrancheEL
         */
        idTrancheEL: string;
    }
    interface ICompteCourantSchema extends IElementSchema {
        /**
         * Mtfasc_MtHyptCapt
         */
        montantHypothequeCapital: number;
        /**
         * Cifcmh_CodeIndicBlcgSaisMtHyptCapt
         */
        codeIndiceBlcgSaisieMontantHypothequeCapital: number;
    }
    interface IVariationDureeSchema extends IElementSchema {
        /**
         * Npfarv_NbPerdVartPoss
         */
        nombrePeriodeVartPossibilite: number;
        /**
         * TypeButrVartDure
         */
        typeButoireVartDure: number;
    }
    interface IVersementFractionneSchema extends IElementSchema {
        /**
         * Nbfbvs_NbVerstSouh
         */
        nombreVersementSouh: number;
        /**
         * Mvfbmf_MtVerstFrct
         */
        montantVersementFraction: number;
    }
    interface IMarcheEPSSchema extends IElementSchema {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDoss
         */
        numeroRelPlanDossier: number;
        /**
         * Nofacp_NumRelCreditPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Ctfcme_CodeTypeMarche
         */
        codeTypeMarche: string;
    }
    interface IComplementEPSSchema extends IElementSchema {
        /**
         * Cnfcnb_NatrGarnEps
         */
        natureGarantieEPS: string;
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfapa_RefrExtnDossParn
         */
        referenceExterneDossierParent: string;
        /**
         * Idfcma_IdModeleActeEPS
         */
        idModeleActeEPS: string;
        /**
         * MarchesEPS
         */
        marchesEPS: Array<IMarcheEPSSchema>;
    }
    interface ITACreditEPSSchema extends IElementSchema {
        /**
         * Dtfhpr_DateEchnMER
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEcheanceMER: string;
        /**
         * Mkfh03_MtCaptAmrt
         */
        montantCapitalAmortissement: number;
        /**
         * Mkfd01_MtCaptRestDu
         */
        montantCapitalRestantDu: number;
    }
    interface ICreditEPSSchema extends IElementSchema {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Txfccc_QuotCredCouvParEps
         */
        quotientCreditCouvertureParEPS: number;
        /**
         * Idfaez_RefeExtnCredCouvEps
         */
        referenceExterneCreditCouvertureEPS: string;
        /**
         * TaCredCouvParEps
         */
        taCreditCouvertureParEPS: Array<ITACreditEPSSchema>;
    }
    interface IAjustementTauxSchema extends IElementSchema {
    }
    interface ICreditInterneSchema extends IElementSchema {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
        /**
         * TegProp
         */
        tegProp: number;
        /**
         * Phases
         */
        phases: Array<ICreditPhaseSchema>;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
        /**
         * SuivisPlanifies
         */
        suivisPlanifies: Array<ISuiviPlanifieSchema>;
        /**
         * Payeurs
         */
        payeurs: Array<IPayeurSchema>;
        /**
         * CreditParamsRevision
         */
        creditParamsRevision: Array<ICreditParamRevisionSchema>;
        /**
         * CreditModalite
         */
        creditModalite: ICreditModaliteSchema;
        /**
         * CreditBonification
         */
        creditBonification: ICreditBonificationSchema;
        /**
         * DroitsUtilises
         */
        droitsUtilises: Array<IDroitUtiliseSchema>;
        /**
         * CompteCourant
         */
        compteCourant: ICompteCourantSchema;
        /**
         * VariationsDuree
         */
        variationsDuree: Array<IVariationDureeSchema>;
        /**
         * VersementFractionne
         */
        versementFractionne: IVersementFractionneSchema;
        /**
         * ComplementEPS
         */
        complementEPS: IComplementEPSSchema;
        /**
         * CreditsEPS
         */
        creditsEPS: Array<ICreditEPSSchema>;
        /**
         * AjustementTaux
         */
        ajustementTaux: IAjustementTauxSchema;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
    }
    interface IRefusAssuranceExterneSchema extends IElementSchema {
        /**
         * Idfadi_IdDossierInstruction
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroRelatifPlanDossier
         */
        numeroRelatifPlanDossier: number;
        /**
         * Nofrfp_NumRangRefusProposition
         */
        numeroRangRefusProposition: number;
        /**
         * Idfppe_Identifiantpersonne
         */
        identifiantpersonne: string;
        /**
         * Ddfddr_DateReceptionDemande
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateReceptionDemande: string;
        /**
         * Cdfdda_CodeDecision
         */
        codeDecision: number;
        /**
         * Llfprp_RolePersonne
         */
        rolePersonne: string;
        /**
         * Lbfcia_CompagnieAssurance
         */
        compagnieAssurance: string;
        /**
         * Lbfrcc_ReferenceContrat
         */
        referenceContrat: string;
        /**
         * Ddfpic_DateImpressionDemande
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateImpressionDemande: string;
    }
    interface IOrigineApportSchema extends IElementSchema {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroPlanDossier
         */
        numeroPlanDossier: number;
        /**
         * Cdfoap_CodeOrigine
         */
        codeOrigine: number;
        /**
         * Mtfoap_MontantApportOrigine
         */
        montantApportOrigine: number;
    }
    interface IPlanFinancementSchema extends IElementSchema {
        /**
         * Mteh01_MtPreEchPhse
         */
        montantPreEchPhase: number;
        /**
         * Apl
         */
        aPL: IAplSchema;
        /**
         * SynthesePlanFinancement
         */
        synthesePlanFinancement: ISynthesePlanFinancementSchema;
        /**
         * CreditsExternes
         */
        creditsExternes: Array<ICreditExterneSchema>;
        /**
         * PaliersContraints
         */
        paliersContraints: Array<IPalierContraintSchema>;
        /**
         * AccessoiresComplementaires
         */
        accessoiresComplementaires: Array<IAccessoireComplementaireSchema>;
        /**
         * AccessoiresLiesProduit
         */
        accessoiresLiesProduit: Array<IAccessoireLieProduitSchema>;
        /**
         * Assurances
         */
        assurances: Array<IAssuranceSchema>;
        /**
         * Garanties
         */
        garanties: Array<IGarantieSchema>;
        /**
         * ServicesSurObjet
         */
        servicesSurObjet: Array<IServiceSurObjetSchema>;
        /**
         * CreditsInternes
         */
        creditsInternes: Array<ICreditInterneSchema>;
        /**
         * RefusAssuranceExternes
         */
        refusAssuranceExternes: Array<IRefusAssuranceExterneSchema>;
        /**
         * OriginesApport
         */
        originesApport: Array<IOrigineApportSchema>;
        /**
         * Mtfaap_MtApprPers
         */
        montantApportPersonne: number;
        /**
         * Mtfaso_MtTotlEmprPlan
         */
        montantTotalEmpruntPlan: number;
    }
    interface IInfoRegroupementSchema extends IElementSchema {
    }
    interface IPretReamenageSchema extends IElementSchema {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * InfosRegroupement
         */
        informationRegroupement: IInfoRegroupementSchema;
    }
    interface IReamenagementSchema extends IElementSchema {
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * PretsReamenages
         */
        pretsReamenages: Array<IPretReamenageSchema>;
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
    }
    interface IProjetSchema extends IElementSchema {
        /**
         * BienAVendre
         */
        bienAVendre: IBienAVendreSchema;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * IdntPlanRetn
         */
        idPlanRetn: string;
        /**
         * LienEPSTirage
         */
        lienEPSTirage: ILienEPSTirageSchema;
        /**
         * PlansFinancement
         */
        plansFinancement: Array<IPlanFinancementSchema>;
        /**
         * Reamenagement
         */
        reamenagement: IReamenagementSchema;
        /**
         * Cdfcni_TypeObjtFinn
         */
        typeObjetFinancier: string;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
    }
    interface IBienConsoFinanceSchema extends IElementSchema {
    }
    interface IAutoMotoSchema extends IBienConsoFinanceSchema {
    }
    interface IBienDetailleSchema extends IElementSchema {
    }
    interface IBienEquipementProSchema extends IBienDetailleSchema {
    }
    interface ITresorerieFinanceeSchema extends IBienDetailleSchema {
    }
    interface IProjetNonImmobilierSchema extends IProjetSchema {
        /**
         * BienConsoFinance
         */
        bienConsommationFinance: IBienConsoFinanceSchema;
        /**
         * BienEquipementPro
         */
        bienEquipementPro: IBienEquipementProSchema;
        /**
         * TresorerieFinancee
         */
        tresorerieFinancee: ITresorerieFinanceeSchema;
    }
    interface IPromotionImmobiliereSchema extends IElementSchema {
        /**
         * InttPrgm
         */
        intituleProgramme: string;
        /**
         * SittPrgm
         */
        situationProgramme: number;
    }
    interface ITerrainFinanceSchema extends IElementSchema {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
    }
    interface IBienSousJacentSchema extends IElementSchema {
    }
    interface ITerrainSousJacentSchema extends IBienSousJacentSchema {
    }
    interface ISoulteFinanceeSchema extends IElementSchema {
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
        /**
         * Mtfoac_MtSoul
         */
        montantSoul: number;
    }
    interface IDetailCoutObjetSchema extends IElementSchema {
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Mtfoct_CoutTrvx
         */
        coutTravaux: number;
    }
    interface ITravauxFinancesSchema extends IElementSchema {
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
        /**
         * DetailsCoutObjet
         */
        detailsCoutObjet: Array<IDetailCoutObjetSchema>;
        /**
         * Mtfotr_CoutTrvx
         */
        coutTravaux: number;
    }
    interface IConstructionFinanceeSchema extends IElementSchema {
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
        /**
         * Mtfoco_CoutConstFinn
         */
        coutConstructionFinancier: number;
    }
    interface IBatimentHabitableFinanceSchema extends IElementSchema {
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
        /**
         * Mtfoac_CoutAcqsBatmHabt
         */
        coutAcqsBatimentHabitation: number;
    }
    interface IButLocatifSchema extends IElementSchema {
        /**
         * Mtfolp_MtAnnuLoyePerc
         */
        montantAnnuLoyePerc: number;
    }
    interface ITrancheELSchema extends IElementSchema {
        /**
         * Mtfaac_MtDrtAcqs
         */
        montantDroitAcqs: number;
    }
    interface IContratEpargneLogementSchema extends IElementSchema {
        /**
         * Cdfppr_CodeTypeEL
         */
        codeTypeEL: number;
        /**
         * TranchesEL
         */
        tranchesEL: Array<ITrancheELSchema>;
        /**
         * IdwsPersBenef
         */
        idPersonneBeneficiaire: string;
        /**
         * Nufpct_IdntContEl
         */
        idContratEpargneLogement: string;
    }
    interface IProjetImmobilierSchema extends IProjetSchema {
        /**
         * PromotionImmobiliere
         */
        promotionImmobiliere: IPromotionImmobiliereSchema;
        /**
         * TerrainFinance
         */
        terrainFinance: ITerrainFinanceSchema;
        /**
         * SoulteFinance
         */
        soulteFinance: ISoulteFinanceeSchema;
        /**
         * TravauxFinance
         */
        travauxFinance: ITravauxFinancesSchema;
        /**
         * ConstructionFinance
         */
        constructionFinance: IConstructionFinanceeSchema;
        /**
         * BatimentHabitableFinance
         */
        batimentHabitableFinance: IBatimentHabitableFinanceSchema;
        /**
         * ButLocatif
         */
        butLocatif: IButLocatifSchema;
        /**
         * ContratsEL
         */
        contratsEL: Array<IContratEpargneLogementSchema>;
    }
    interface IProjetEPSSchema extends IProjetSchema {
    }
    interface IComplementDossierSchema extends IElementSchema {
        /**
         * Ctfipt_CodePrrtTrt
         */
        codePrrtTraitement: string;
        /**
         * Dtfisi_DateSaisSurItnt
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSaisieSurInternet: string;
        /**
         * Hefisi_HeurSaisSurItnt
         */
        heureSaisieSurInternet: number;
        /**
         * Llfidr_LiblDelRelsProj
         */
        libelleDelReleaseProjet: string;
    }
    interface IPoolEPSSchema extends IElementSchema {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfaop_IdntOprtCess
         */
        idOprtCess: string;
        /**
         * Idfccf_IdntCadrFinn
         */
        idCadreFinancier: string;
        /**
         * Cnflpo_CodeNatrPool
         */
        codeNaturePool: number;
        /**
         * Cdfcor_CodeOrigCess
         */
        codeOrigineCess: number;
        /**
         * Ctfesr_TypeSousRolePool
         */
        typeSousRolePool: number;
        /**
         * Nofcca_NumVersionCadre
         */
        numeroVersionCadre: number;
    }
    interface IAgentSchema extends IElementSchema {
        /**
         * Idfaen_IdntAgent
         */
        idAgent: string;
        /**
         * Lbfaes_LblAgent
         */
        lblAgent: string;
        /**
         * EstAgentBO
         */
        estAgentBO: boolean;
        /**
         * EstBackup
         */
        estBackup: boolean;
        /**
         * EstAgentExterne
         */
        estAgentExterne: boolean;
        /**
         * Idfaeg_IdntEdsGest
         */
        idEDSGestion: string;
        /**
         * Lbfiba_LblAgenceRat
         */
        lblAgenceRat: string;
        /**
         * Cdfaaa_CdeAgentRat
         */
        cdeAgentRat: string;
        /**
         * Ctfauc_TypeUtilisateurCo
         */
        typeUtilisateurCo: number;
        /**
         * Idfce3_EtabBaofCent
         */
        etabBaofCentral: number;
        /**
         * Cdfabo_IdntEdsBaofCent
         */
        idEDSBaofCentral: string;
        /**
         * Cifttv_TechniqueDeVente
         */
        techniqueDeVente: number;
        /**
         * DerogationBornes
         */
        derogationBornes: boolean;
        /**
         * Role
         */
        role: number;
        /**
         * EstAgentRefusAssuranceExterne
         */
        estAgentRefusAssuranceExterne: boolean;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IDocumentOffreIndustrialiseeSchema extends IElementSchema {
        /**
         * DocumentCommun
         */
        documentCommun: string;
        /**
         * CodeEntiteFonctionnelle
         */
        codeEntiteFonctionnelle: string;
        /**
         * IdEntiteFonctionnelle
         */
        idEntiteFonctionnelle: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * LibelleDocument
         */
        libelleDocument: string;
        /**
         * IndicateurCasEcheant
         */
        indicateurCasEcheant: string;
        /**
         * EtatDocument
         */
        etatDocument: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Origine
         */
        origine: string;
    }
    interface IOffrePretIndustrialiseeSchema extends IElementSchema {
        /**
         * EditionEligible
         */
        editionEligible: boolean;
        /**
         * EditionEligibleEnAgence
         */
        editionEligibleEnAgence: boolean;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * DossierGdeACree
         */
        dossierGdeACree: boolean;
        /**
         * EtatDossierEdition
         */
        etatDossierEdition: string;
        /**
         * ListeDocumentsSchema
         */
        listeDocumentsSchema: Array<IDocumentOffreIndustrialiseeSchema>;
    }
    interface IDossierSchemaSimplifie extends IElementSchema {
        /**
         * Ctfado_EtatDoss
         */
        etatDossier: number;
        /**
         * TypeMoteurADR
         */
        typeMoteurADR: number;
        /**
         * Cefado_SousEtatDoss
         */
        sousEtatDossier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * EstEcoPtzCopro
         */
        estEcoPtzCopro: boolean;
        /**
         * EstDossierPartenaire
         */
        estDossierPartenaire: boolean;
        /**
         * IdentifiantPourLeCompteDe
         */
        identifiantPourLeCompteDe: string;
        /**
         * BlocNotesDivers
         */
        blocNotesDivers: Array<IBlocNotesSchema>;
        /**
         * ClausesPersonnalisees
         */
        clausesPersonnalisees: Array<IClausePersonnaliseeSchema>;
        /**
         * Avis
         */
        avis: Array<IAvisSchema>;
        /**
         * Versements
         */
        versements: Array<IVersementSchema>;
        /**
         * RedacteurActe
         */
        redacteurActe: IRedacteurActeSchema;
        /**
         * Emprunteur
         */
        emprunteur: IEmprunteurSchema;
        /**
         * Garants
         */
        garants: Array<IGarantSchema>;
        /**
         * Personnes
         */
        personnes: Array<IPersonneSchema>;
        /**
         * Projet
         */
        projet: IProjetSchema;
        /**
         * ComplementDossier
         */
        complementDossier: IComplementDossierSchema;
        /**
         * PoolEPS
         */
        poolEPS: IPoolEPSSchema;
        /**
         * Agents
         */
        agents: Array<IAgentSchema>;
        /**
         * AnoCtlOuvrtDossier
         */
        anoCtlOuvrtDossier: Array<IAnomalieLecture>;
        /**
         * OffrePretIndustrialisee
         */
        offrePretIndustrialisee: IOffrePretIndustrialiseeSchema;
    }
    interface IDossierSchemaComplet extends IDossierSchemaSimplifie {
        /**
         * AlertesEnSortie
         */
        alertesEnSortie: Array<IAlerteEnSortieSchema>;
        /**
         * AlertesEnEntree
         */
        alertesEnEntree: Array<IAlerteEnEntreeSchema>;
        /**
         * Evenements
         */
        evenements: Array<IEvenementSchema>;
    }
    interface IDossierSchema extends IElementSchema {
        /**
         * TypeMoteurADR
         */
        typeMoteurADR: number;
        /**
         * EstEcoPtzCopro
         */
        estEcoPtzCopro: boolean;
        /**
         * EstDossierPartenaire
         */
        estDossierPartenaire: boolean;
        /**
         * IdentifiantPourLeCompteDe
         */
        identifiantPourLeCompteDe: string;
        /**
         * BlocNotesDivers
         */
        blocNotesDivers: Array<IBlocNotesSchema>;
        /**
         * ClausesPersonnalisees
         */
        clausesPersonnalisees: Array<IClausePersonnaliseeSchema>;
        /**
         * AlertesEnSortie
         */
        alertesEnSortie: Array<IAlerteEnSortieSchema>;
        /**
         * AlertesEnEntree
         */
        alertesEnEntree: Array<IAlerteEnEntreeSchema>;
        /**
         * Avis
         */
        avis: Array<IAvisSchema>;
        /**
         * Evenements
         */
        evenements: Array<IEvenementSchema>;
        /**
         * Versements
         */
        versements: Array<IVersementSchema>;
        /**
         * RedacteurActe
         */
        redacteurActe: IRedacteurActeSchema;
        /**
         * Emprunteur
         */
        emprunteur: IEmprunteurSchema;
        /**
         * Garants
         */
        garants: Array<IGarantSchema>;
        /**
         * Personnes
         */
        personnes: Array<IPersonneSchema>;
        /**
         * Projet
         */
        projet: IProjetSchema;
        /**
         * ComplementDossier
         */
        complementDossier: IComplementDossierSchema;
        /**
         * PoolEPS
         */
        poolEPS: IPoolEPSSchema;
        /**
         * Agents
         */
        agents: Array<IAgentSchema>;
        /**
         * AnoCtlOuvrtDossier
         */
        anoCtlOuvrtDossier: Array<IAnomalieLecture>;
        /**
         * OffrePretIndustrialisee
         */
        offrePretIndustrialisee: IOffrePretIndustrialiseeSchema;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cefado_SousEtatDoss
         */
        sousEtatDossier: number;
        /**
         * Ctfado_EtatDoss
         */
        etatDossier: number;
    }
    interface IDossierApplicationPVH {
        /**
         * DossierSchema
         */
        dossierSchema: IDossierSchema;
    }
    interface IResultatCreationDossierApplication {
        /**
         * DossierPVH
         */
        dossierPVH: IDossierApplicationPVH;
    }
}

declare namespace ICRest.Modeles.CreerDossierCnp {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IResultatCreationDossierCNP {
        /**
         * IdDossierCNP
         */
        idDossierCNP: string;
        /**
         * LibErreur
         */
        libelleErreur: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface ICreerDossierCNPRequest {
        identifiantDossier: string;
        identifiantPersonne: string;
        identifiantPlanFinancement: string;
        codeCollectiviteCNP: string;
        forcerCreation: boolean;
    }
}

declare namespace ICRest.Modeles.CreerDossierExterne {
    interface IEntreeCreationDossierCBP {
        /**
         * IdntPlanFinancement
         */
        idPlanFinancement: number;
    }
    interface IEntreeCreationDossierExterne {
        /**
         * IdntDoss
         */
        idDossier: string;
        /**
         * EntreeCreationDossierCBP
         */
        entreeCreationDossierCBP: IEntreeCreationDossierCBP;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IResultatCreationDossierCBP {
        /**
         * IdDossierCBP
         */
        idDossierCBP: string;
        /**
         * LienDossierExterne
         */
        lienDossierExterne: string;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
    }
    interface IResultatCreationDossierExterne {
        /**
         * ResultatCreationDossierCBP
         */
        resultatCreationDossierCBP: IResultatCreationDossierCBP;
    }
}

declare namespace ICRest.Modeles.CreerDossier {
    interface ICreerDossierRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        applicationCharge: number;
        canalDeCreation: string;
        pourLeCompteDe: string;
        codeDevise: string;
    }
    interface IElementSchema {
        /**
         * Idws
         */
        idws: string;
        /**
         * Desc
         */
        description: string;
    }
    interface IBlocNotesSchema extends IElementSchema {
        /**
         * Idfwac_TypeBlc
         */
        typeBlocNote: string;
    }
    interface IClausePersonnaliseeSchema extends IElementSchema {
        /**
         * DestClsePers
         */
        destinataireClassePersonne: number;
    }
    interface IAlerteEnSortieSchema extends IElementSchema {
        /**
         * Ctfiax_CodeAlrt
         */
        codeAlerte: string;
        /**
         * Dcfiax_DateEmssAlrt
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEmissionAlerte: string;
    }
    interface IAlerteEnEntreeSchema extends IElementSchema {
        /**
         * Ctfiai_CodeAlrt
         */
        codeAlerte: number;
        /**
         * Dcfiai_DateEmssAlrt
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEmissionAlerte: string;
    }
    interface IAvisSchema extends IElementSchema {
        /**
         * Ctfita_CodeTyplAvis
         */
        codeTypologieAvis: string;
        /**
         * Dtfaad_DateSaisAvis
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSaisieAvis: string;
        /**
         * Idfaen_IdntEnttSaisAvis
         */
        idEntiteSaisieAvis: string;
        /**
         * Lbfaen_LiblEnttSaisAvis
         */
        libelleEntiteSaisieAvis: string;
        /**
         * Nofiav_NumeAvis
         */
        numeroAvis: number;
    }
    interface IEvenementSchema extends IElementSchema {
        /**
         * Ctfaev_CodeTypeEven
         */
        codeTypeEven: string;
        /**
         * Dtfaee_DateEfftEven
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEffetEven: string;
    }
    interface IVersementSchema extends IElementSchema {
        /**
         * Txfave_PctVerst
         */
        pourcentageVersement: number;
    }
    interface IRedacteurActeSchema extends IElementSchema {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
    }
    interface IRessourceSchema extends IElementSchema {
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Mtfpre_MtRess
         */
        montantRessource: number;
        /**
         * Npfpre_NbPerdParAn
         */
        nombrePeriodeParAn: number;
    }
    interface IChargeSchema extends IElementSchema {
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
    }
    interface IPhaseCreditExistantSchema extends IElementSchema {
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
    }
    interface ICreditExistantSchema extends IChargeSchema {
        /**
         * PhasesCreditExistant
         */
        phasesCreditExistant: Array<IPhaseCreditExistantSchema>;
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
    }
    interface ICompteSchema extends IElementSchema {
        /**
         * Composition
         */
        composition: string;
        /**
         * Cdfppr_TypeCpte
         */
        typeCompte: string;
        /**
         * Nufpcp_NumeCpte
         */
        numeroCompte: string;
    }
    interface ICompteProfessionnelSchema extends ICompteSchema {
    }
    interface ICompteDepotSchema extends ICompteSchema {
    }
    interface IRevenuFiscalSchema extends IElementSchema {
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
    }
    interface IPatrimoineImmobilierSchema extends IElementSchema {
        /**
         * Ctfcnp_NatrPtrmImmb
         */
        naturePatrimoineImmobilier: number;
        /**
         * Mtfmvb_ValrActlPtrm
         */
        valeurActuarielPatrimoine: number;
    }
    interface IEmprunteurSchema extends IElementSchema {
        /**
         * IdwsPersonnes
         */
        idwsPersonnes: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
        /**
         * Comptes
         */
        comptes: Array<ICompteSchema>;
        /**
         * RevenusFiscaux
         */
        revenusFiscaux: Array<IRevenuFiscalSchema>;
        /**
         * PatrimoinesImmo
         */
        patrimoinesImmobilier: Array<IPatrimoineImmobilierSchema>;
    }
    interface IGarantSchema extends IElementSchema {
        /**
         * IdwsPersonnes
         */
        idwsPersonnes: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
    }
    interface IFamilleEpargneSchema extends IElementSchema {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Mtfmve_MtValrEprgAvntOper
         */
        montantValeurEpargneAvenantOper: number;
    }
    interface IRelationEntrePersonnesSchema extends IElementSchema {
        /**
         * Cnfcrp_CodeNatureRelation
         */
        codeNatureRelation: string;
        /**
         * IdntPers2
         */
        idPersonne2: string;
    }
    interface IComplementFicheContactSchema extends IElementSchema {
    }
    interface IPersonneSchema extends IElementSchema {
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Roles
         */
        roles: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
        /**
         * FamillesEpargne
         */
        famillesEpargne: Array<IFamilleEpargneSchema>;
        /**
         * Comptes
         */
        comptes: Array<ICompteSchema>;
        /**
         * RelationsEntrePersonnes
         */
        relationsEntrePersonnes: Array<IRelationEntrePersonnesSchema>;
        /**
         * ComplementFicheContact
         */
        complementFicheContact: IComplementFicheContactSchema;
        /**
         * ComptesPrelVersModalite
         */
        comptesPrelVersementModalite: Array<ICompteSchema>;
        /**
         * Cdfptp_CodeTypePers
         */
        codeTypePersonne: number;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
    }
    interface IPersonneMoraleSchema extends IPersonneSchema {
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
    }
    interface IOppositionSchema extends IElementSchema {
        /**
         * Cdfmop_CodeOppo
         */
        codeOpposition: string;
        /**
         * Ddfmop_DateDebtOppo
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDebutOpposition: string;
        /**
         * Dffmop_DateFinOppo
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateFinOpposition: string;
    }
    interface IInterditBancaireSchema extends IElementSchema {
    }
    interface IActiviteSchema extends IElementSchema {
        /**
         * Cdfmcs_CodeClssRisqCsp
         */
        codeClasseRisqueCSP: number;
    }
    interface IEntrepreneurIndividuelSchema extends IElementSchema {
        /**
         * EstEIRL
         */
        estEIRL: boolean;
        /**
         * IndicateurEIRL
         */
        indicateurEIRL: number;
        /**
         * LibelleEIRL
         */
        libelleEIRL: string;
        /**
         * AccordConjoint
         */
        accordConjoint: boolean;
    }
    interface ISignataireSchema extends IElementSchema {
        /**
         * EmailContact
         */
        emailContact: string;
        /**
         * NumeroContact
         */
        numeroContact: string;
        /**
         * EstSignataireEffectif
         */
        estSignataireEffectif: boolean;
    }
    interface IPersonnePhysiqueSchema extends IPersonneSchema {
        /**
         * Oppositions
         */
        oppositions: Array<IOppositionSchema>;
        /**
         * InterditBancaire
         */
        interditBancaire: IInterditBancaireSchema;
        /**
         * Activite
         */
        activite: IActiviteSchema;
        /**
         * EntrepreneurIndividuel
         */
        entrepreneurIndividuel: IEntrepreneurIndividuelSchema;
        /**
         * Signataire
         */
        signataire: ISignataireSchema;
    }
    interface IBienAVendreSchema extends IElementSchema {
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Ctfcor_CodeTypeObjtRegl
         */
        codeTypeObjetRegle: string;
        /**
         * Mtfmvc_PrixNetVndr
         */
        prixNetVendeur: number;
    }
    interface ILienEPSTirageSchema extends IElementSchema {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfaps_IdentifiantEPS
         */
        identifiantEPS: string;
        /**
         * Idfcej_Etablissement
         */
        etablissement: number;
    }
    interface IAplSchema extends IElementSchema {
        /**
         * Mtfiba_MtApl
         */
        montantAPL: number;
        /**
         * TypeApl
         */
        typeAPL: number;
    }
    interface ISynthesePlanFinancementSchema extends IElementSchema {
        /**
         * Mcfoof_CoutTotalTTC
         */
        coutTotalTTC: number;
        /**
         * Mcfgfr_CoutTotalFraisGarantie
         */
        coutTotalFraisGarantie: number;
        /**
         * Mcfafd_CoutTotalFraisDossier
         */
        coutTotalFraisDossier: number;
        /**
         * Mtfaap_MtApportPersonnel
         */
        montantApportPersonnel: number;
        /**
         * nMtfaso_MtConcoursInternes
         */
        mtfaso_MontantConcoursInternes: number;
        /**
         * nMkface_MtConcoursExternes
         */
        mkface_MontantConcoursExternes: number;
        /**
         * Mcfacf_CoutTotalFraisCourtage
         */
        coutTotalFraisCourtage: number;
        /**
         * MtMensualiteAvecAssurance
         */
        montantMensualiteAvecAssurance: number;
        /**
         * MtMensualiteNet
         */
        montantMensualiteNet: number;
    }
    interface ICreditExterneSchema extends IElementSchema {
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Mkface_MtCapt
         */
        montantCapital: number;
        /**
         * Txfatg_TegActu
         */
        tegActu: number;
    }
    interface IPalierContraintSchema extends IElementSchema {
        /**
         * Ddpe_DateDebtPerd
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDebutPeriode: string;
        /**
         * Npfpco_DurePalr
         */
        durePalier: number;
        /**
         * Meface_MtEche
         */
        montantEcheance: number;
    }
    interface IRemiseClientSchema extends IElementSchema {
        /**
         * MtAppl
         */
        montantApplication: number;
        /**
         * TxAppl
         */
        tauxApplication: number;
    }
    interface ITrancheMontantSchema extends IElementSchema {
        /**
         * Txfcaa_TxTrchMt
         */
        tauxTrancheMontant: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
    }
    interface ICotisationSchema extends IElementSchema {
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: number;
        /**
         * Npfce1_NbPerdAppliCots
         */
        nombrePeriodeApplicationCotisation: number;
        /**
         * Txfipf_PartFinn
         */
        partFinancier: number;
        /**
         * Mtfgfr_MtFrsGarn
         */
        montantFrsGarantie: number;
        /**
         * Ctfcac_TypeAccs
         */
        typeAccessoire: string;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
        /**
         * TranchesMontant
         */
        tranchesMontant: Array<ITrancheMontantSchema>;
    }
    interface ICotisationTrancheAgeSchema extends ICotisationSchema {
    }
    interface ICotisationPhaseSchema extends ICotisationSchema {
    }
    interface ICotisationPeriodeSchema extends ICotisationSchema {
    }
    interface ICotisationDerogationSchema extends ICotisationSchema {
    }
    interface ICouvertureCreditSchema extends IElementSchema {
        /**
         * dMontantCoutTotalAssurance
         */
        montantCoutTotalAssurance: number;
        /**
         * dMontantEcheanceMaximale
         */
        montantEcheanceMaximale: number;
        /**
         * dMontantEcheanceMinimale
         */
        montantEcheanceMinimale: number;
        /**
         * dMontantMensualiteEcheance
         */
        montantMensualiteEcheance: number;
        /**
         * IdCredit
         */
        idCredit: string;
        /**
         * Cotisations
         */
        cotisations: Array<ICotisationSchema>;
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
    }
    interface IAccessoireSchema extends IElementSchema {
        /**
         * CouverturesCredits
         */
        couverturesCredits: Array<ICouvertureCreditSchema>;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
    }
    interface IAccessoireComplementaireSchema extends IAccessoireSchema {
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
    }
    interface IAccessoireLieProduitSchema extends IAccessoireSchema {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
    }
    interface IAvisOrganismeExterneSchema extends IElementSchema {
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateAvis: string;
    }
    interface IAssuranceSchema extends IAccessoireSchema {
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * EstAssuranceAXA
         */
        estAssuranceAXA: boolean;
        /**
         * EstAssuranceGroupePourTAEA
         */
        estAssuranceGroupePourTAEA: boolean;
        /**
         * AvisOrganismeExterne
         */
        avisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * DerniersAvisOrganismeExterne
         */
        derniersAvisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * EstAssuranceCNP
         */
        estAssuranceCNP: boolean;
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface IGarantieSchema extends IAccessoireSchema {
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * Cdfcng_NatrGarn
         */
        natureGarantie: string;
    }
    interface IBienPorteEnGarantieSchema extends IElementSchema {
    }
    interface IHypothequeAerienneSchema extends IBienPorteEnGarantieSchema {
    }
    interface IBonDeCaisseCapitalisationSchema extends IBienPorteEnGarantieSchema {
    }
    interface IDelegationLoyerSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICessionDaillyAutreSchema extends IBienPorteEnGarantieSchema {
    }
    interface IVersementAttenduSchema extends IElementSchema {
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
    }
    interface IContratAssuranceSchema extends IBienPorteEnGarantieSchema {
        /**
         * VersementsAttendus
         */
        versementsAttendus: Array<IVersementAttenduSchema>;
    }
    interface IAntichreseSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICessionDaillyLoyerImmeubleSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageVehiculeSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageCompteInstrumentFinancierSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementPartSocialeSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementValeurMaterielleSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementValeurMobiliereSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementFondDeCommerceSchema extends IBienPorteEnGarantieSchema {
    }
    interface IProprietaireSchema extends IElementSchema {
    }
    interface IHypothequeImmobiliereSchema extends IBienPorteEnGarantieSchema {
        /**
         * Proprietaires
         */
        proprietaires: Array<IProprietaireSchema>;
    }
    interface IBienDiversSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICreditHDSchema extends IElementSchema {
        /**
         * Idfcct_RefrPret
         */
        referencePret: string;
        /**
         * Mtfaoc_MtPret
         */
        montantPret: number;
        /**
         * IdntCredExnt
         */
        idCreditExnt: string;
    }
    interface IGarantieHDSchema extends IElementSchema {
        /**
         * Cdfcng_NatrGarnHorsDoss
         */
        natureGarantieHorsDossier: string;
        /**
         * Idfgg1_IdntOrigGarnHorsDoss
         */
        idOrigineGarantieHorsDossier: string;
        /**
         * CreditsHD
         */
        creditsHD: Array<ICreditHDSchema>;
    }
    interface IGarantieReelleSchema extends IGarantieSchema {
        /**
         * BienPorteEnGarantie
         */
        bienPorteEnGarantie: IBienPorteEnGarantieSchema;
        /**
         * GarantieHD
         */
        garantieHD: IGarantieHDSchema;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
    }
    interface IGarantiePersonnelleSchema extends IGarantieSchema {
        /**
         * AvisOrganismeExterne
         */
        avisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * DerniersAvisOrganismeExterne
         */
        derniersAvisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface IServiceSurObjetSchema extends IAccessoireSchema {
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface ITauxInteretAnnuelLecture {
        /**
         * ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * TxActu
         */
        tauxActu: number;
        /**
         * TxProp
         */
        tauxProp: number;
    }
    interface ITauxIndiceLecture extends ITauxInteretAnnuelLecture {
        /**
         * Marg
         */
        marge: number;
        /**
         * ValrIndc
         */
        valeurIndice: number;
    }
    interface ITauxFixeLecture extends ITauxInteretAnnuelLecture {
    }
    interface ITauxMixteLecture extends ITauxInteretAnnuelLecture {
        /**
         * Rpar
         */
        repartition: number;
        /**
         * TxIndcCmpstTxMixt
         */
        tauxIndiceCmpstTauxMixte: ITauxIndiceLecture;
        /**
         * TxFixeCmpstTxMixt
         */
        tauxFixeCmpstTauxMixte: ITauxFixeLecture;
    }
    interface IEcheanceOptimisationSchema extends IElementSchema {
        /**
         * Mefhcd_MtRembSais
         */
        montantRemboursementSaisie: number;
        /**
         * Ctfhel_CodeTypeElemSais
         */
        codeTypeElementSaisie: number;
    }
    interface ICreditPalierTauxSchema extends IElementSchema {
        /**
         * TxIntePalr
         */
        tauxInterieurPalier: ITauxInteretAnnuelLecture;
        /**
         * Txfcpg_TxPrgrEcheSurPalr
         */
        tauxProgressifEcheanceSurPalier: number;
        /**
         * DureeEnMois
         */
        dureeEnMois: number;
        /**
         * EcheancesOptimisation
         */
        echeancesOptimisation: Array<IEcheanceOptimisationSchema>;
    }
    interface ICreditParamIndexationSchema extends IElementSchema {
        /**
         * Nofrji_NumeIndcRevsCred
         */
        numeroIndiceRevisionCredit: number;
    }
    interface ICreditParamRevisionSchema extends IElementSchema {
        /**
         * Idfrlr_IdntLoiRevs
         */
        idLoiRevision: string;
        /**
         * Nofrji_NumeJeuIndcRevsAsscCred
         */
        numeroJeuxIndiceRevisionAssuranceCredit: number;
        /**
         * CreditParamsIndexation
         */
        creditParamsIndexation: Array<ICreditParamIndexationSchema>;
    }
    interface ICreditParamRevisionParPhaseSchema extends ICreditParamRevisionSchema {
    }
    interface ICreditPhaseSchema extends IElementSchema {
        /**
         * DureeEnMois
         */
        dureeEnMois: number;
        /**
         * CreditPaliersTaux
         */
        creditPaliersTaux: Array<ICreditPalierTauxSchema>;
        /**
         * CreditParamsRevisionParPhase
         */
        creditParamsRevisionParPhase: ICreditParamRevisionParPhaseSchema;
    }
    interface ICreditPalierProgressionSchema extends IElementSchema {
    }
    interface IComplementPhasePretCombineSchema extends IElementSchema {
    }
    interface ICreditPhaseAmortissementSchema extends ICreditPhaseSchema {
        /**
         * CreditPaliersProgression
         */
        creditPaliersProgression: Array<ICreditPalierProgressionSchema>;
        /**
         * ComplementPhasePretCombine
         */
        complementPhasePretCombine: IComplementPhasePretCombineSchema;
    }
    interface ICreditPhaseDiffereAmortissementSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhaseDiffereTotalSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhaseMobilisationSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhasePrefinancementSchema extends ICreditPhaseSchema {
    }
    interface ISuiviPlanifieSchema extends IElementSchema {
    }
    interface IPayeurSchema extends IElementSchema {
        /**
         * IdwsPersonne
         */
        idPersonne: string;
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
    }
    interface ICreditParamRevisionParPeriodeSchema extends ICreditParamRevisionSchema {
    }
    interface ICreditModaliteSchema extends IElementSchema {
        /**
         * Idfcmi_IdntModlCalcImpe
         */
        idModeleCalculImpe: string;
        /**
         * Nofcmc_NumeModlRembAntc
         */
        numeroModeleRemboursementAnticipe: number;
    }
    interface ICreditBonificationInfoSchema extends IElementSchema {
        /**
         * Cdfdic_CodeInfo
         */
        codeInformation: string;
        /**
         * sCdfddi_CodeDetail
         */
        codeDetail: string;
    }
    interface ICreditBonificationSchema extends IElementSchema {
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * Infos
         */
        information: Array<ICreditBonificationInfoSchema>;
    }
    interface IDroitUtiliseSchema extends IElementSchema {
        /**
         * Mtfadu_MtDrtAcqsUtls
         */
        montantDroitAcqsUtilisation: number;
        /**
         * IdntTrancheEL
         */
        idTrancheEL: string;
    }
    interface ICompteCourantSchema extends IElementSchema {
        /**
         * Mtfasc_MtHyptCapt
         */
        montantHypothequeCapital: number;
        /**
         * Cifcmh_CodeIndicBlcgSaisMtHyptCapt
         */
        codeIndiceBlcgSaisieMontantHypothequeCapital: number;
    }
    interface IVariationDureeSchema extends IElementSchema {
        /**
         * Npfarv_NbPerdVartPoss
         */
        nombrePeriodeVartPossibilite: number;
        /**
         * TypeButrVartDure
         */
        typeButoireVartDure: number;
    }
    interface IVersementFractionneSchema extends IElementSchema {
        /**
         * Nbfbvs_NbVerstSouh
         */
        nombreVersementSouh: number;
        /**
         * Mvfbmf_MtVerstFrct
         */
        montantVersementFraction: number;
    }
    interface IMarcheEPSSchema extends IElementSchema {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDoss
         */
        numeroRelPlanDossier: number;
        /**
         * Nofacp_NumRelCreditPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Ctfcme_CodeTypeMarche
         */
        codeTypeMarche: string;
    }
    interface IComplementEPSSchema extends IElementSchema {
        /**
         * Cnfcnb_NatrGarnEps
         */
        natureGarantieEPS: string;
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfapa_RefrExtnDossParn
         */
        referenceExterneDossierParent: string;
        /**
         * Idfcma_IdModeleActeEPS
         */
        idModeleActeEPS: string;
        /**
         * MarchesEPS
         */
        marchesEPS: Array<IMarcheEPSSchema>;
    }
    interface ITACreditEPSSchema extends IElementSchema {
        /**
         * Dtfhpr_DateEchnMER
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEcheanceMER: string;
        /**
         * Mkfh03_MtCaptAmrt
         */
        montantCapitalAmortissement: number;
        /**
         * Mkfd01_MtCaptRestDu
         */
        montantCapitalRestantDu: number;
    }
    interface ICreditEPSSchema extends IElementSchema {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Txfccc_QuotCredCouvParEps
         */
        quotientCreditCouvertureParEPS: number;
        /**
         * Idfaez_RefeExtnCredCouvEps
         */
        referenceExterneCreditCouvertureEPS: string;
        /**
         * TaCredCouvParEps
         */
        taCreditCouvertureParEPS: Array<ITACreditEPSSchema>;
    }
    interface IAjustementTauxSchema extends IElementSchema {
    }
    interface ICreditInterneSchema extends IElementSchema {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
        /**
         * TegProp
         */
        tegProp: number;
        /**
         * Phases
         */
        phases: Array<ICreditPhaseSchema>;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
        /**
         * SuivisPlanifies
         */
        suivisPlanifies: Array<ISuiviPlanifieSchema>;
        /**
         * Payeurs
         */
        payeurs: Array<IPayeurSchema>;
        /**
         * CreditParamsRevision
         */
        creditParamsRevision: Array<ICreditParamRevisionSchema>;
        /**
         * CreditModalite
         */
        creditModalite: ICreditModaliteSchema;
        /**
         * CreditBonification
         */
        creditBonification: ICreditBonificationSchema;
        /**
         * DroitsUtilises
         */
        droitsUtilises: Array<IDroitUtiliseSchema>;
        /**
         * CompteCourant
         */
        compteCourant: ICompteCourantSchema;
        /**
         * VariationsDuree
         */
        variationsDuree: Array<IVariationDureeSchema>;
        /**
         * VersementFractionne
         */
        versementFractionne: IVersementFractionneSchema;
        /**
         * ComplementEPS
         */
        complementEPS: IComplementEPSSchema;
        /**
         * CreditsEPS
         */
        creditsEPS: Array<ICreditEPSSchema>;
        /**
         * AjustementTaux
         */
        ajustementTaux: IAjustementTauxSchema;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
    }
    interface IRefusAssuranceExterneSchema extends IElementSchema {
        /**
         * Idfadi_IdDossierInstruction
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroRelatifPlanDossier
         */
        numeroRelatifPlanDossier: number;
        /**
         * Idfppe_Identifiantpersonne
         */
        identifiantpersonne: string;
        /**
         * Nofrfp_NumRangRefusProposition
         */
        numeroRangRefusProposition: number;
        /**
         * Lbfcia_CompagnieAssurance
         */
        compagnieAssurance: string;
        /**
         * Lbfrcc_ReferenceContrat
         */
        referenceContrat: string;
        /**
         * Ddfddr_DateReceptionDemande
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateReceptionDemande: string;
        /**
         * Ddfpic_DateImpressionDemande
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateImpressionDemande: string;
        /**
         * Cdfdda_CodeDecision
         */
        codeDecision: number;
        /**
         * Llfprp_RolePersonne
         */
        rolePersonne: string;
    }
    interface IOrigineApportSchema extends IElementSchema {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroPlanDossier
         */
        numeroPlanDossier: number;
        /**
         * Cdfoap_CodeOrigine
         */
        codeOrigine: number;
        /**
         * Mtfoap_MontantApportOrigine
         */
        montantApportOrigine: number;
    }
    interface IPlanFinancementSchema extends IElementSchema {
        /**
         * Mtfaso_MtTotlEmprPlan
         */
        montantTotalEmpruntPlan: number;
        /**
         * Mteh01_MtPreEchPhse
         */
        montantPreEchPhase: number;
        /**
         * Apl
         */
        aPL: IAplSchema;
        /**
         * SynthesePlanFinancement
         */
        synthesePlanFinancement: ISynthesePlanFinancementSchema;
        /**
         * CreditsExternes
         */
        creditsExternes: Array<ICreditExterneSchema>;
        /**
         * PaliersContraints
         */
        paliersContraints: Array<IPalierContraintSchema>;
        /**
         * AccessoiresComplementaires
         */
        accessoiresComplementaires: Array<IAccessoireComplementaireSchema>;
        /**
         * AccessoiresLiesProduit
         */
        accessoiresLiesProduit: Array<IAccessoireLieProduitSchema>;
        /**
         * Assurances
         */
        assurances: Array<IAssuranceSchema>;
        /**
         * Garanties
         */
        garanties: Array<IGarantieSchema>;
        /**
         * ServicesSurObjet
         */
        servicesSurObjet: Array<IServiceSurObjetSchema>;
        /**
         * CreditsInternes
         */
        creditsInternes: Array<ICreditInterneSchema>;
        /**
         * RefusAssuranceExternes
         */
        refusAssuranceExternes: Array<IRefusAssuranceExterneSchema>;
        /**
         * OriginesApport
         */
        originesApport: Array<IOrigineApportSchema>;
        /**
         * Mtfaap_MtApprPers
         */
        montantApportPersonne: number;
    }
    interface IInfoRegroupementSchema extends IElementSchema {
    }
    interface IPretReamenageSchema extends IElementSchema {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * InfosRegroupement
         */
        informationRegroupement: IInfoRegroupementSchema;
    }
    interface IReamenagementSchema extends IElementSchema {
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * PretsReamenages
         */
        pretsReamenages: Array<IPretReamenageSchema>;
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
    }
    interface IProjetSchema extends IElementSchema {
        /**
         * BienAVendre
         */
        bienAVendre: IBienAVendreSchema;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * IdntPlanRetn
         */
        idPlanRetn: string;
        /**
         * LienEPSTirage
         */
        lienEPSTirage: ILienEPSTirageSchema;
        /**
         * PlansFinancement
         */
        plansFinancement: Array<IPlanFinancementSchema>;
        /**
         * Reamenagement
         */
        reamenagement: IReamenagementSchema;
        /**
         * Cdfcni_TypeObjtFinn
         */
        typeObjetFinancier: string;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
    }
    interface IProjetEPSSchema extends IProjetSchema {
    }
    interface IBienConsoFinanceSchema extends IElementSchema {
    }
    interface IAutoMotoSchema extends IBienConsoFinanceSchema {
    }
    interface IBienDetailleSchema extends IElementSchema {
    }
    interface IBienEquipementProSchema extends IBienDetailleSchema {
    }
    interface ITresorerieFinanceeSchema extends IBienDetailleSchema {
    }
    interface IProjetNonImmobilierSchema extends IProjetSchema {
        /**
         * BienConsoFinance
         */
        bienConsommationFinance: IBienConsoFinanceSchema;
        /**
         * BienEquipementPro
         */
        bienEquipementPro: IBienEquipementProSchema;
        /**
         * TresorerieFinancee
         */
        tresorerieFinancee: ITresorerieFinanceeSchema;
    }
    interface IPromotionImmobiliereSchema extends IElementSchema {
        /**
         * InttPrgm
         */
        intituleProgramme: string;
        /**
         * SittPrgm
         */
        situationProgramme: number;
    }
    interface ITerrainFinanceSchema extends IElementSchema {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
    }
    interface IBienSousJacentSchema extends IElementSchema {
    }
    interface ITerrainSousJacentSchema extends IBienSousJacentSchema {
    }
    interface ISoulteFinanceeSchema extends IElementSchema {
        /**
         * Mtfoac_MtSoul
         */
        montantSoul: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
    }
    interface IDetailCoutObjetSchema extends IElementSchema {
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Mtfoct_CoutTrvx
         */
        coutTravaux: number;
    }
    interface ITravauxFinancesSchema extends IElementSchema {
        /**
         * Mtfotr_CoutTrvx
         */
        coutTravaux: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
        /**
         * DetailsCoutObjet
         */
        detailsCoutObjet: Array<IDetailCoutObjetSchema>;
    }
    interface IConstructionFinanceeSchema extends IElementSchema {
        /**
         * Mtfoco_CoutConstFinn
         */
        coutConstructionFinancier: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
    }
    interface IBatimentHabitableFinanceSchema extends IElementSchema {
        /**
         * Mtfoac_CoutAcqsBatmHabt
         */
        coutAcqsBatimentHabitation: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
    }
    interface IButLocatifSchema extends IElementSchema {
        /**
         * Mtfolp_MtAnnuLoyePerc
         */
        montantAnnuLoyePerc: number;
    }
    interface ITrancheELSchema extends IElementSchema {
        /**
         * Mtfaac_MtDrtAcqs
         */
        montantDroitAcqs: number;
    }
    interface IContratEpargneLogementSchema extends IElementSchema {
        /**
         * Cdfppr_CodeTypeEL
         */
        codeTypeEL: number;
        /**
         * TranchesEL
         */
        tranchesEL: Array<ITrancheELSchema>;
        /**
         * IdwsPersBenef
         */
        idPersonneBeneficiaire: string;
        /**
         * Nufpct_IdntContEl
         */
        idContratEpargneLogement: string;
    }
    interface IProjetImmobilierSchema extends IProjetSchema {
        /**
         * PromotionImmobiliere
         */
        promotionImmobiliere: IPromotionImmobiliereSchema;
        /**
         * TerrainFinance
         */
        terrainFinance: ITerrainFinanceSchema;
        /**
         * SoulteFinance
         */
        soulteFinance: ISoulteFinanceeSchema;
        /**
         * TravauxFinance
         */
        travauxFinance: ITravauxFinancesSchema;
        /**
         * ConstructionFinance
         */
        constructionFinance: IConstructionFinanceeSchema;
        /**
         * BatimentHabitableFinance
         */
        batimentHabitableFinance: IBatimentHabitableFinanceSchema;
        /**
         * ButLocatif
         */
        butLocatif: IButLocatifSchema;
        /**
         * ContratsEL
         */
        contratsEL: Array<IContratEpargneLogementSchema>;
    }
    interface IComplementDossierSchema extends IElementSchema {
        /**
         * Llfidr_LiblDelRelsProj
         */
        libelleDelReleaseProjet: string;
        /**
         * Ctfipt_CodePrrtTrt
         */
        codePrrtTraitement: string;
        /**
         * Dtfisi_DateSaisSurItnt
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSaisieSurInternet: string;
        /**
         * Hefisi_HeurSaisSurItnt
         */
        heureSaisieSurInternet: number;
    }
    interface IPoolEPSSchema extends IElementSchema {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfaop_IdntOprtCess
         */
        idOprtCess: string;
        /**
         * Idfccf_IdntCadrFinn
         */
        idCadreFinancier: string;
        /**
         * Cnflpo_CodeNatrPool
         */
        codeNaturePool: number;
        /**
         * Cdfcor_CodeOrigCess
         */
        codeOrigineCess: number;
        /**
         * Ctfesr_TypeSousRolePool
         */
        typeSousRolePool: number;
        /**
         * Nofcca_NumVersionCadre
         */
        numeroVersionCadre: number;
    }
    interface IAgentSchema extends IElementSchema {
        /**
         * Idfaen_IdntAgent
         */
        idAgent: string;
        /**
         * Lbfaes_LblAgent
         */
        lblAgent: string;
        /**
         * EstAgentBO
         */
        estAgentBO: boolean;
        /**
         * EstBackup
         */
        estBackup: boolean;
        /**
         * EstAgentExterne
         */
        estAgentExterne: boolean;
        /**
         * Idfaeg_IdntEdsGest
         */
        idEDSGestion: string;
        /**
         * Lbfiba_LblAgenceRat
         */
        lblAgenceRat: string;
        /**
         * Cdfaaa_CdeAgentRat
         */
        cdeAgentRat: string;
        /**
         * Ctfauc_TypeUtilisateurCo
         */
        typeUtilisateurCo: number;
        /**
         * Idfce3_EtabBaofCent
         */
        etabBaofCentral: number;
        /**
         * Cdfabo_IdntEdsBaofCent
         */
        idEDSBaofCentral: string;
        /**
         * Cifttv_TechniqueDeVente
         */
        techniqueDeVente: number;
        /**
         * DerogationBornes
         */
        derogationBornes: boolean;
        /**
         * Role
         */
        role: number;
        /**
         * EstAgentRefusAssuranceExterne
         */
        estAgentRefusAssuranceExterne: boolean;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IDocumentOffreIndustrialiseeSchema extends IElementSchema {
        /**
         * DocumentCommun
         */
        documentCommun: string;
        /**
         * CodeEntiteFonctionnelle
         */
        codeEntiteFonctionnelle: string;
        /**
         * IdEntiteFonctionnelle
         */
        idEntiteFonctionnelle: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * LibelleDocument
         */
        libelleDocument: string;
        /**
         * IndicateurCasEcheant
         */
        indicateurCasEcheant: string;
        /**
         * EtatDocument
         */
        etatDocument: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Origine
         */
        origine: string;
    }
    interface IOffrePretIndustrialiseeSchema extends IElementSchema {
        /**
         * EditionEligible
         */
        editionEligible: boolean;
        /**
         * EditionEligibleEnAgence
         */
        editionEligibleEnAgence: boolean;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * DossierGdeACree
         */
        dossierGdeACree: boolean;
        /**
         * EtatDossierEdition
         */
        etatDossierEdition: string;
        /**
         * ListeDocumentsSchema
         */
        listeDocumentsSchema: Array<IDocumentOffreIndustrialiseeSchema>;
    }
    interface IDossierSchema extends IElementSchema {
        /**
         * TypeMoteurADR
         */
        typeMoteurADR: number;
        /**
         * EstEcoPtzCopro
         */
        estEcoPtzCopro: boolean;
        /**
         * EstDossierPartenaire
         */
        estDossierPartenaire: boolean;
        /**
         * IdentifiantPourLeCompteDe
         */
        identifiantPourLeCompteDe: string;
        /**
         * BlocNotesDivers
         */
        blocNotesDivers: Array<IBlocNotesSchema>;
        /**
         * ClausesPersonnalisees
         */
        clausesPersonnalisees: Array<IClausePersonnaliseeSchema>;
        /**
         * AlertesEnSortie
         */
        alertesEnSortie: Array<IAlerteEnSortieSchema>;
        /**
         * AlertesEnEntree
         */
        alertesEnEntree: Array<IAlerteEnEntreeSchema>;
        /**
         * Avis
         */
        avis: Array<IAvisSchema>;
        /**
         * Evenements
         */
        evenements: Array<IEvenementSchema>;
        /**
         * Versements
         */
        versements: Array<IVersementSchema>;
        /**
         * RedacteurActe
         */
        redacteurActe: IRedacteurActeSchema;
        /**
         * Emprunteur
         */
        emprunteur: IEmprunteurSchema;
        /**
         * Garants
         */
        garants: Array<IGarantSchema>;
        /**
         * Personnes
         */
        personnes: Array<IPersonneSchema>;
        /**
         * Projet
         */
        projet: IProjetSchema;
        /**
         * ComplementDossier
         */
        complementDossier: IComplementDossierSchema;
        /**
         * PoolEPS
         */
        poolEPS: IPoolEPSSchema;
        /**
         * Agents
         */
        agents: Array<IAgentSchema>;
        /**
         * AnoCtlOuvrtDossier
         */
        anoCtlOuvrtDossier: Array<IAnomalieLecture>;
        /**
         * OffrePretIndustrialisee
         */
        offrePretIndustrialisee: IOffrePretIndustrialiseeSchema;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cefado_SousEtatDoss
         */
        sousEtatDossier: number;
        /**
         * Ctfado_EtatDoss
         */
        etatDossier: number;
    }
}

declare namespace ICRest.Modeles.CreerProjet {
    interface ICreerProjetRequest {
        versionWsdl: number;
        dateTraitement: string;
        applicationCharge: number;
        idClientBancaire: string;
        typeObjetCommercialisation: string;
        typeObjetReglemente: string;
        coutTotalObjet: number;
        montantApportPersonne: number;
        idProduit: string;
        canalDeCreation: string;
        codeDevise: string;
        identifiantPourLeCompteDe: string;
    }
}

declare namespace ICRest.Modeles.DefPaliersContraints {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IPalierContraintMaj extends IElementMaj {
        /**
         * Dfpe_DateFinPerd
         * Type date au format yyyy-MM-dd
         */
        dateFinPeriode: string;
        /**
         * Meface_MtEche
         */
        montantEcheance: number;
        /**
         * Npfpco_DurePalr
         */
        durePalier: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IPalierContraintLecture extends IElementLecture {
        /**
         * Ddpe_DateDebtPerd
         * Type date au format yyyy-MM-dd
         */
        dateDebutPeriode: string;
        /**
         * Dfpe_DateFinPerd
         * Type date au format yyyy-MM-dd
         */
        dateFinPeriode: string;
        /**
         * Meface_MtEche
         */
        montantEcheance: number;
        /**
         * Npfpco_DurePalr
         */
        durePalier: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
    }
    interface IDefPaliersContraintsRequest {
        identifiantDossier: string;
        idwsPlanFinancier: string;
        listePalierContrat: Array<IPalierContraintMaj>;
    }
}

declare namespace ICRest.Modeles.DefinirBienAVendre {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IBienAVendreMaj extends IElementMaj {
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Ctfcor_CodeTypeObjtRegl
         */
        codeTypeObjetRegle: string;
        /**
         * Ctfmve_TypeVent
         */
        typeVent: number;
        /**
         * Mtfmvc_PrixNetVndr
         */
        prixNetVendeur: number;
        /**
         * Mtfmva_MtCrdSurBienVend
         */
        montantCRDSurBienVend: number;
        /**
         * Mtfgrd_MtCrdRachSurBienVend
         */
        montantCRDRachSurBienVend: number;
        /**
         * Mtfaag_MtComsAgnc
         */
        montantComsAgence: number;
        /**
         * Mtfaoc_MtAcqs
         */
        montantAcqs: number;
        /**
         * Dtfaoc_DateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateAcqs: string;
        /**
         * Ctfmma_ModeAcqs
         */
        modeAcqs: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IBienAVendreLecture extends IElementLecture {
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Ctfcor_CodeTypeObjtRegl
         */
        codeTypeObjetRegle: string;
        /**
         * Ctfmve_TypeVent
         */
        typeVent: number;
        /**
         * Mtfmvc_PrixNetVndr
         */
        prixNetVendeur: number;
        /**
         * Mtfmva_MtCrdSurBienVend
         */
        montantCRDSurBienVend: number;
        /**
         * Mtfgrd_MtCrdRachSurBienVend
         */
        montantCRDRachSurBienVend: number;
        /**
         * Mtfaag_MtComsAgnc
         */
        montantComsAgence: number;
        /**
         * Mtfaoc_MtAcqs
         */
        montantAcqs: number;
        /**
         * Dtfaoc_DateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateAcqs: string;
        /**
         * Ctfmma_ModeAcqs
         */
        modeAcqs: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IDefinirBienAVendreRequest {
        identifiantDossier: string;
        identifiantProjet: string;
        bienAVendre: IBienAVendreMaj;
    }
}

declare namespace ICRest.Modeles.DefinirBienPorteEnGarantie {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IBienPorteEnGarantieLecture extends IElementLecture {
        /**
         * Lbfoof_LiblObjt
         */
        libelleObjet: string;
        /**
         * Cdfcni_TypeObjtComl
         */
        typeObjetCommercialisation: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Mtfgo2_MtEstmPrdn
         */
        montantEstmPrdn: number;
        /**
         * Dtfgo2_DateEstmPrdn
         * Type date au format yyyy-MM-dd
         */
        dateEstmPrdn: string;
        /**
         * Cdfgm2_CodeModlEstmPrdn
         */
        codeModeleEstmPrdn: string;
        /**
         * Cmfgt2_CodeMotfReSPrdn
         */
        codeMotfReSPrdn: string;
        /**
         * Dtfiex_DateExprBienCff
         * Type date au format yyyy-MM-dd
         */
        dateExpressionBienCff: string;
        /**
         * Lbfpex_NoteExprBienCff
         */
        noteExpressionBienCff: number;
        /**
         * Idfoof_IdntObjtGest
         */
        idObjetGestion: string;
        /**
         * PorteSurProjet
         */
        porteSurProjet: boolean;
        /**
         * Cifaan_SouscriptionContratAssurance
         */
        souscriptionContratAssurance: boolean;
        /**
         * IdntGarnReel
         */
        idGarantieReel: string;
    }
    interface IHypothequeAerienneLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeSer
         */
        numeroSer: string;
        /**
         * Lbfolt_NumeImmt
         */
        numeroImmt: string;
    }
    interface IBonDeCaisseCapitalisationLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_NumeSiren
         */
        numeroSiren: string;
        /**
         * Lbfoo2_ValrBonOrig
         */
        valeurBonOrigine: number;
        /**
         * Lbfoo3_NumeContTitr
         */
        numeroContratTitre: string;
        /**
         * Lbfoo4_NatrBon
         */
        natureBon: string;
        /**
         * Lbfoo5_Dateeche
         * Type date au format yyyy-MM-dd
         */
        dateeche: string;
        /**
         * Lbfoo6_TitrNomPrenDeps
         */
        titreNomPrenDeps: string;
    }
    interface IDelegationLoyerLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_MtAnnuLoye
         */
        montantAnnuLoye: number;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_DateExtnBail
         * Type date au format yyyy-MM-dd
         */
        dateExterneBail: string;
        /**
         * Lbfoo2_NomGern
         */
        nomGern: string;
    }
    interface ICessionDaillyAutreLecture extends IBienPorteEnGarantieLecture {
    }
    interface IContratAssuranceLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_DateNaisAssr
         * Type date au format yyyy-MM-dd
         */
        dateNaisAssurance: string;
        /**
         * Lbfolt_NumeContAssr
         */
        numeroContratAssurance: string;
        /**
         * Lbfoo1_NomCieAssr
         */
        nomCieAssurance: string;
        /**
         * Lbfoo2_NumeSiren
         */
        numeroSiren: string;
        /**
         * Lbfoo3_CntrGest
         */
        cntrGestion: string;
        /**
         * Lbfoo4_TypeTechJurd
         */
        typeTechniqueJuridique: string;
        /**
         * Lbfoo5_NomContAssr
         */
        nomContratAssurance: string;
        /**
         * Lbfoo6_ApprPers
         */
        apportPersonne: number;
        /**
         * Lbfoo7_MtMinmVerstSign
         */
        montantMinimumVersementSigne: number;
        /**
         * Cdfvat_CodeIndicAttnVerst
         */
        codeIndiceAttnVersement: number;
        /**
         * ListIdntVerstAttn
         */
        listeIdVersementAttn: Array<string>;
    }
    interface IAntichreseLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_RefeCads
         */
        referenceCads: string;
        /**
         * Lbfolt_NumeLot
         */
        numeroLot: string;
    }
    interface ICessionDaillyLoyerImmeubleLecture extends IBienPorteEnGarantieLecture {
    }
    interface IGageVehiculeLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeSer
         */
        numeroSer: string;
        /**
         * Lbfolt_NumeImmt
         */
        numeroImmt: string;
    }
    interface IGageCompteInstrumentFinancierLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
    }
    interface INantissementPartSocialeLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeEnrg
         */
        numeroEnregistrement: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_TitrInte
         */
        descriptionOtion: string;
    }
    interface INantissementValeurMaterielleLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_TypeValrMatr
         */
        typeValeurMatrimonial: string;
        /**
         * Lbfolt_NumeSer
         */
        numeroRefTypeLot: string;
    }
    interface INantissementValeurMobiliereLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
    }
    interface INantissementFondDeCommerceLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeInscRcs
         */
        numeroInscRcs: string;
        /**
         * Lbfolt_LiblLibr
         */
        libelleLibr: string;
        /**
         * Cdfomo_TitrOccpLocLeqlFondEstExpl
         */
        titreOccpLocLeqlFondEstExpl: number;
    }
    interface IHypothequeImmobiliereLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_RefeCads
         */
        referenceCads: string;
        /**
         * Lbfolt_RefeLot
         */
        referenceLot: string;
        /**
         * Ctfmoi_TypeBien
         */
        typeBien: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * Cdfcdo_DestBien
         */
        destinataireBien: number;
        /**
         * Nbfosh_SurfHabt
         */
        surfHabitation: number;
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfcoi_ZoneImplBien
         */
        zoneImplBien: string;
        /**
         * Cdfqem_QualEmpla
         */
        qualEmpla: number;
        /**
         * Lbfoo1_MtDernMutt
         */
        montantDernierMutt: string;
        /**
         * Lbfoo2_DateDernMutt
         */
        dateDernierMutt: string;
        /**
         * Dtfoco_AnneConst
         */
        anneConstruction: number;
        /**
         * Lbfoo3_MtAnnuLoye
         */
        montantAnnuLoye: string;
        /**
         * Lbfoo5_NumeLotCopr
         */
        numeroLotCopr: string;
        /**
         * Lbfoo4_NumeSctn
         */
        numeroSctn: string;
        /**
         * Cifcoc_OccpActlBien
         */
        occpActuarielBien: number;
        /**
         * Cifcph_CodePresHypt
         */
        codePresHypotheque: number;
        /**
         * Idfceb_IdntExpr
         */
        idExpression: string;
        /**
         * Dtfcde_DateDemnExpr
         * Type date au format yyyy-MM-dd
         */
        dateDemandeExpression: string;
        /**
         * ListIdntProprios
         */
        listeIdProprios: Array<string>;
        /**
         * ListIdntRefCadastrls
         */
        listeIdReferenceCadastrls: Array<string>;
        /**
         * ListIdntRefLot
         */
        listeIdReferenceLot: Array<string>;
    }
    interface IBienDiversLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Refe1
         */
        reference1: string;
        /**
         * Lbfolt_Refe2
         */
        reference2: string;
    }
    interface IDefinirBienPorteEnGarantieRequest {
        identifiantDossier: string;
        idWsGarantie: string;
        typeObjetCommercialisation: string;
    }
}

declare namespace ICRest.Modeles.DefinirBlocNotes {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IBlocNotesLecture extends IElementLecture {
        /**
         * Idfwac_TypeBlc
         */
        typeBlocNote: string;
        /**
         * ContBlc
         */
        contratBlocNote: string;
    }
    interface IDefinirBlocNotesRequest {
        identifiantDossier: string;
        typeBlocNote: string;
        valeurBlocNote: string;
    }
}

declare namespace ICRest.Modeles.DefinirComplementDossier {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IComplementDossierMaj extends IElementMaj {
        /**
         * Llfidr_LiblDelRelsProj
         */
        libelleDelReleaseProjet: string;
        /**
         * Ctfipt_CodePrrtTrt
         */
        codePrrtTraitement: string;
        /**
         * Dtfisi_DateSaisSurItnt
         * Type date au format yyyy-MM-dd
         */
        dateSaisieSurInternet: string;
        /**
         * Hefisi_HeurSaisSurItnt
         */
        heureSaisieSurInternet: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IComplementDossierLecture extends IElementLecture {
        /**
         * Llfidr_LiblDelRelsProj
         */
        libelleDelReleaseProjet: string;
        /**
         * Ctfipt_CodePrrtTrt
         */
        codePrrtTraitement: string;
        /**
         * Dtfisi_DateSaisSurItnt
         * Type date au format yyyy-MM-dd
         */
        dateSaisieSurInternet: string;
        /**
         * Hefisi_HeurSaisSurItnt
         */
        heureSaisieSurInternet: number;
    }
    interface IDefinirComplementDossierRequest {
        identifiantDossier: string;
        complementDossierMAJ: IComplementDossierMaj;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
}

declare namespace ICRest.Modeles.DefinirDetailCoutObj {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IDetailCoutObjetMaj extends IElementMaj {
        /**
         * Cnfctr_CodeNatrTrvx
         */
        codeNatureTravaux: string;
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Mtfoct_CoutTrvx
         */
        coutTravaux: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IDetailCoutObjetLecture extends IElementLecture {
        /**
         * Cnfctr_CodeNatrTrvx
         */
        codeNatureTravaux: string;
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Mtfoct_CoutTrvx
         */
        coutTravaux: number;
        /**
         * IdntTrvxFinn
         */
        idTravauxFinancier: string;
    }
    interface IDefinitDetailCoutObjetRequest {
        identifiantDossier: string;
        typeTravaux: string;
        listeDetailCoutObjetMAJ: Array<IDetailCoutObjetMaj>;
    }
}

declare namespace ICRest.Modeles.DefinirDossierMRH {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IDossierMRHLecture extends IElementLecture {
        /**
         * UrlIHM
         */
        urlIHM: string;
        /**
         * codeReseau
         */
        codeReseau: string;
        /**
         * idInstanceProcessus
         */
        idInstanceProcessus: string;
        /**
         * codeProcessus
         */
        codeProcessus: string;
        /**
         * idEtape
         */
        idEtape: string;
        /**
         * codeEtape
         */
        codeEtape: string;
        /**
         * AgncDomc
         */
        agenceDomiciliation: string;
        /**
         * urlRetour
         */
        urlRetour: string;
        /**
         * Sigle
         */
        sigle: string;
        /**
         * CdPrflAssr
         */
        codeProfilAssurance: string;
        /**
         * IdActrEtab
         */
        idActrEtab: string;
        /**
         * CdOrgnFinnActrEtab
         */
        codeOrgnFinancierActrEtab: string;
        /**
         * NomUsgActrEtab
         */
        nomUsageActrEtab: string;
        /**
         * IdEdsActrEtabl
         */
        idEDSActrEtabl: string;
        /**
         * ModeIntgIhm
         */
        modeIntegrationIhm: number;
        /**
         * CdAffSynth
         */
        codeAffSynth: number;
        /**
         * CdModeAccesSynth
         */
        codeModeAccessoireSynth: number;
        /**
         * CdEtabFinnTier
         */
        codeEtabFinancierTiers: string;
        /**
         * IdTier
         */
        idTiers: string;
        /**
         * CdTypeCanlDistn
         */
        codeTypeCanlDistn: string;
        /**
         * CdTypePerimEnt
         */
        codeTypePerimEnt: string;
        /**
         * CdAppliApl
         */
        codeApplicationAPL: string;
        /**
         * DateAcces
         * Type date au format yyyy-MM-dd
         */
        dateAccessoire: string;
        /**
         * AppelEffectue
         */
        appelEffectue: boolean;
    }
}

declare namespace ICRest.Modeles.DefinirDroitUtilise {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IDroitUtiliseLecture extends IElementLecture {
        /**
         * Mtfadu_MtDrtAcqsUtls
         */
        montantDroitAcqsUtilisation: number;
        /**
         * Mtfali_MtDrtLimt
         */
        montantDroitLimite: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntTrchEparLogm
         */
        idTrancheEpargneLogement: string;
    }
    interface IDefinirDroitUtiliseRequest {
        /**
         * idDossier
         */
        idDossier: string;
        /**
         * idwsCredit
         */
        idwsCredit: string;
        /**
         * idwsTrancheEpargneLogement
         */
        idwsTrancheEpargneLogement: string;
        /**
         * montantAcquisUtilise
         */
        montantAcquisUtilise: number;
        /**
         * montantLimite
         */
        montantLimite: number;
    }
}

declare namespace ICRest.Modeles.DefinirEmpAvecCtrl {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IEmprunteurLecture extends IElementLecture {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * LiblLienPersonne
         */
        libelleLienPersonne: string;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * Mcfpre_MtRessPond
         */
        montantRessourcePondere: number;
        /**
         * Mcfpce_MtChrgEmprHorsPrjtPond
         */
        montantChargeEmpruntHorsProjetPondere: number;
        /**
         * Mcfpac_MtAutrChrgPond
         */
        montantAutreChargePondere: number;
        /**
         * Lbfaem_DenmEmpr
         */
        denmEmprunt: string;
        /**
         * Lnfpem_LiblLongEmpr
         */
        libelleLongEmprunt: string;
        /**
         * Lbfain_IntlcEmpr
         */
        intlcEmprunt: string;
        /**
         * Idfaep_IdntEnttTitlClnt
         */
        idEntiteTitulaireClient: string;
        /**
         * Idfaeg_IdntelemStrcGest
         */
        idElementStructureGestion: string;
        /**
         * Cdfcke_CodeCateEmpr
         */
        codeCateEmprunt: string;
        /**
         * Lbfcke_LiblCateEmpr
         */
        libelleCateEmprunt: string;
        /**
         * Ctfcma_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * Ctfpmp_CodeTypeMarcPers
         */
        codeTypeMarchePersonne: number;
        /**
         * Ctfprm_CodeTypeRevnMeng
         */
        codeTypeRevnMeng: number;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_TypeAdmnBafi
         */
        typeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Lbfpsf_LiblSittFaml
         */
        libelleSituationFamille: string;
        /**
         * Cdfpsr_CodeSittFamlRegl
         */
        codeSituationFamilleRegle: number;
        /**
         * Nbfpnp_NbPersCmpstMeng
         */
        nombrePersonneCmpstMeng: number;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpma_NbActfMeng
         */
        nombreActfMeng: number;
        /**
         * Dtfpen_DateEncrEparLogm
         * Type date au format yyyy-MM-dd
         */
        dateEncoursEpargneLogement: string;
        /**
         * Mtftpl_MtEncrIsssPretPel
         */
        montantEncoursIsssPretPEL: number;
        /**
         * Mtftli_MtEncrIsssPretLel
         */
        montantEncoursIsssPretLEL: number;
        /**
         * Mtftlh_MtEncrLivrAutretbl
         */
        montantEncoursLivrAutretbl: number;
        /**
         * Mtftph_MtEncrPlnsAutretbl
         */
        montantEncoursPlnsAutretbl: number;
        /**
         * Mtfwrt_TotlRevnAnnlNets
         */
        totalRevnAnnulationNets: number;
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Cdfwsl_StttOccpLogmActl
         */
        stttOccpLogementActuariel: number;
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpnm_NomRaisSoclEmpr
         */
        nomRaisonSocialeEmprunt: string;
        /**
         * Lbfpa1_Intt
         */
        intituleLigne1: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_CompIntt
         */
        compIntituleLigne2: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cofopz_CodeCondDergPourPtz
         */
        codeConditionDerogationPourPtz: number;
        /**
         * Cdfpse_CodeSectRatt
         */
        codeSecteurRattachement: string;
        /**
         * Cdfpjm_CodeJeunMeng
         */
        codeJeunMeng: number;
        /**
         * PresUnePersAttnRepnFicp
         */
        presUnePersonneAttnRepnFicp: boolean;
        /**
         * PresUnePersFichFicp
         */
        presUnePersonneFichFicp: boolean;
        /**
         * Qmfcvi_EsperVie
         */
        esperVie: number;
        /**
         * Qmfcvd_EsperVieDec
         */
        esperVieDecision: number;
        /**
         * Qmfcvs_EsperVieStrs
         */
        esperVieStress: number;
        /**
         * MtRessAvntProj
         */
        montantRessourceAvenantProjet: number;
        /**
         * MtChrgEmprAvntProj
         */
        montantChargeEmpruntAvenantProjet: number;
        /**
         * MtAutrChrgAvntProj
         */
        montantAutreChargeAvenantProjet: number;
        /**
         * RestVivrAvntProj
         */
        restantVivrAvenantProjet: number;
        /**
         * IndicRestVivrAvntProj
         */
        indiceRestantVivrAvenantProjet: number;
        /**
         * TxEndtAvntProj
         */
        tauxEndtAvenantProjet: number;
        /**
         * TotalEpargneContractuelle
         */
        totalEpargneContractuelle: number;
        /**
         * TotalEpargneLiquide
         */
        totalEpargneLiquide: number;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * Cdfadv_CodeDeviseEmprunteur
         */
        codeDeviseEmprunteur: string;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntCpteDeptGrpePers
         */
        listeIdCompteDeptGrpePersonne: Array<string>;
        /**
         * ListIdntCptePrfsPers
         */
        listeIdComptePrfsPersonne: Array<string>;
        /**
         * ListIdntRessGrpe
         */
        listeIdRessourceGrpe: Array<string>;
        /**
         * ListIdntChrgGrpe
         */
        listeIdChargeGrpe: Array<string>;
        /**
         * ListIdntCredExstGrpe
         */
        listeIdCreditExisteGrpe: Array<string>;
        /**
         * ListIdntFamlEprgPers
         */
        listeIdFamilleEpargnePersonne: Array<string>;
        /**
         * ListIdntRevnFiscAsscEmpr
         */
        listeIdRevnFiscalAssuranceEmprunt: Array<string>;
        /**
         * ListIdntDonnPtrmImmb
         */
        listeIdDonneurPatrimoineImmobilier: Array<string>;
    }
    interface IForcageDefinitionEmprunteur {
        /**
         * ForcerControleSuppression
         */
        forcerControleSuppression: boolean;
        /**
         * ForcerControleAjout
         */
        forcerControleAjout: boolean;
        /**
         * ForcerControleRattachement
         */
        forcerControleRattachement: boolean;
    }
    interface IDefinirEmprunteurAvecControlesRequest {
        identifiantDossier: string;
        identifiantClientBancaire: string;
        rattachement: boolean;
        forcerControle: IForcageDefinitionEmprunteur;
        pourLeCompteDe: string;
    }
}

declare namespace ICRest.Modeles.DefinirEmprunteur {
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IDefinirEmprunteurRequest {
        idDossier: string;
        idClientBancaire: string;
    }
    interface IEmprunteurLecture extends IElementLecture {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * Mcfpre_MtRessPond
         */
        montantRessourcePondere: number;
        /**
         * Mcfpce_MtChrgEmprHorsPrjtPond
         */
        montantChargeEmpruntHorsProjetPondere: number;
        /**
         * Mcfpac_MtAutrChrgPond
         */
        montantAutreChargePondere: number;
        /**
         * Lbfaem_DenmEmpr
         */
        denmEmprunt: string;
        /**
         * Lnfpem_LiblLongEmpr
         */
        libelleLongEmprunt: string;
        /**
         * Lbfain_IntlcEmpr
         */
        intlcEmprunt: string;
        /**
         * Idfaep_IdntEnttTitlClnt
         */
        idEntiteTitulaireClient: string;
        /**
         * Idfaeg_IdntelemStrcGest
         */
        idElementStructureGestion: string;
        /**
         * Cdfcke_CodeCateEmpr
         */
        codeCateEmprunt: string;
        /**
         * Ctfcma_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * Ctfpmp_CodeTypeMarcPers
         */
        codeTypeMarchePersonne: number;
        /**
         * Ctfprm_CodeTypeRevnMeng
         */
        codeTypeRevnMeng: number;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_TypeAdmnBafi
         */
        typeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Cdfpsr_CodeSittFamlRegl
         */
        codeSituationFamilleRegle: number;
        /**
         * Nbfpnp_NbPersCmpstMeng
         */
        nombrePersonneCmpstMeng: number;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpma_NbActfMeng
         */
        nombreActfMeng: number;
        /**
         * Dtfpen_DateEncrEparLogm
         * Type date au format yyyy-MM-dd
         */
        dateEncoursEpargneLogement: string;
        /**
         * Mtftpl_MtEncrIsssPretPel
         */
        montantEncoursIsssPretPEL: number;
        /**
         * Mtftli_MtEncrIsssPretLel
         */
        montantEncoursIsssPretLEL: number;
        /**
         * Mtfwrt_TotlRevnAnnlNets
         */
        totalRevnAnnulationNets: number;
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Cdfwsl_StttOccpLogmActl
         */
        stttOccpLogementActuariel: number;
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpnm_NomRaisSoclEmpr
         */
        nomRaisonSocialeEmprunt: string;
        /**
         * Lbfpa1_Intt
         */
        intituleLigne1: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_CompIntt
         */
        compIntituleLigne2: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cdfpse_CodeSectRatt
         */
        codeSecteurRattachement: string;
        /**
         * Cdfpjm_CodeJeunMeng
         */
        codeJeunMeng: number;
        /**
         * PresUnePersAttnRepnFicp
         */
        presUnePersonneAttnRepnFicp: boolean;
        /**
         * PresUnePersFichFicp
         */
        presUnePersonneFichFicp: boolean;
        /**
         * Qmfcvi_EsperVie
         */
        esperVie: number;
        /**
         * Qmfcvd_EsperVieDec
         */
        esperVieDecision: number;
        /**
         * Qmfcvs_EsperVieStrs
         */
        esperVieStress: number;
        /**
         * MtRessAvntProj
         */
        montantRessourceAvantProjet: number;
        /**
         * MtChrgEmprAvntProj
         */
        montantChargeEmpruntAvantProjet: number;
        /**
         * MtAutrChrgAvntProj
         */
        montantAutreChargeAvantProjet: number;
        /**
         * RestVivrAvntProj
         */
        restantVivrAvantProjet: number;
        /**
         * IndicRestVivrAvntProj
         */
        indiceRestantVivrAvantProjet: number;
        /**
         * TxEndtAvntProj
         */
        tauxEndtAvantProjet: number;
        /**
         * TotalEpargneContractuelle
         */
        totalEpargneContractuelle: number;
        /**
         * TotalEpargneLiquide
         */
        totalEpargneLiquide: number;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * Cdfadv_CodeDeviseEmprunteur
         */
        codeDeviseEmprunteur: string;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntCpteDeptGrpePers
         */
        listeIdCompteDeptGrpePersonne: Array<string>;
        /**
         * ListIdntCptePrfsPers
         */
        listeIdComptePrfsPersonne: Array<string>;
        /**
         * ListIdntRessGrpe
         */
        listeIdRessourceGrpe: Array<string>;
        /**
         * ListIdntChrgGrpe
         */
        listeIdChargeGrpe: Array<string>;
        /**
         * ListIdntCredExstGrpe
         */
        listeIdCreditExisteGrpe: Array<string>;
        /**
         * ListIdntFamlEprgPers
         */
        listeIdFamilleEpargnePersonne: Array<string>;
        /**
         * ListIdntRevnFiscAsscEmpr
         */
        listeIdRevnFiscalAssuranceEmprunt: Array<string>;
        /**
         * ListIdntDonnPtrmImmb
         */
        listeIdDonneurPatrimoineImmobilier: Array<string>;
        /**
         * Mtftlh_MtEncrLivrAutretbl
         */
        montantEncoursLivrAutrEtbl: number;
        /**
         * Mtftph_MtEncrPlnsAutretbl
         */
        montantEncoursPlnsAutrEtbl: number;
    }
}

declare namespace ICRest.Modeles.DefinirOccupant {
    interface IEntreeTransaction {
        /**
         * ForceeControle
         */
        forceeControle: boolean;
        /**
         * Idws
         */
        idws: string;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IOccupantMaj extends IElementMaj {
        /**
         * LibelleOccupant
         */
        libelleOccupant: string;
        /**
         * Lien
         */
        lien: number;
        /**
         * RevenuFiscal
         */
        revenuFiscal: number;
    }
    interface IEntreeOccupant {
        /**
         * ListeOccupant
         */
        listeOccupant: Array<IOccupantMaj>;
    }
    interface IEntreeDefinirOccupant extends IEntreeTransaction {
        /**
         * EntreeOccupant
         */
        entreeOccupant: IEntreeOccupant;
    }
    interface IElementComplet {
        /**
         * Idws
         */
        idws: string;
    }
    interface IOccupantComplet extends IElementComplet {
        /**
         * LibelleOccupant
         */
        libelleOccupant: string;
        /**
         * Lien
         */
        lien: number;
        /**
         * LibelleLien
         */
        libelleLien: string;
        /**
         * RevenuFiscal
         */
        revenuFiscal: number;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IFormulaireLienAvecEmprunteurComplet extends IElementComplet {
        /**
         * MontantRFRN2
         */
        montantRFRN2: number;
        /**
         * ListeOccupant
         */
        listeOccupant: Array<IOccupantComplet>;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
        /**
         * IdentifiantRattache
         */
        identifiantRattache: string;
    }
}

declare namespace ICRest.Modeles.DefinirPhase {
    interface IDefinirPhaseRequest {
        /**
         * Identifiant du dossier
         */
        identifiantDossier: string;
        /**
         * Identifiant WS du crédit
         */
        idwsCredit: string;
        /**
         * Indicateur type de phase Valeurs possibles : '0' : Phase de préfinancement '1' : Phase de différé total '2' : Phase de différé d'amortissement '3' : Phase de mobilisation
         */
        codeIndiceTypePhase: number;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface ITauxInteretAnnuelLecture {
        /**
         * ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * TxActu
         */
        tauxActu: number;
        /**
         * TxProp
         */
        tauxProp: number;
    }
    interface ITauxIndiceLecture extends ITauxInteretAnnuelLecture {
        /**
         * Marg
         */
        marge: number;
        /**
         * ValrIndc
         */
        valeurIndice: number;
    }
    interface ITauxFixeLecture extends ITauxInteretAnnuelLecture {
    }
    interface ITauxMixteLecture extends ITauxInteretAnnuelLecture {
        /**
         * Rpar
         */
        repartition: number;
        /**
         * TxIndcCmpstTxMixt
         */
        tauxIndiceCmpstTauxMixte: ITauxIndiceLecture;
        /**
         * TxFixeCmpstTxMixt
         */
        tauxFixeCmpstTauxMixte: ITauxFixeLecture;
    }
    interface IScElement {
    }
    interface IScConstante extends IScElement {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
    interface IScProduitPhase extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Nofcfp_NoReltPhas
         */
        numeroRelationPhase: number;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateTraitement: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateFinApplication: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDebutApplication: string;
        /**
         * Pefcph_UnitDurDunPhas
         */
        uniteDureeDunPhase: number;
        /**
         * Cdfcph_ModeExprDurPhas
         */
        modeExpressionDureePhase: number;
        /**
         * Npfcq1_DurPhasPrdt
         */
        dureePhaseProduit: number;
        /**
         * Npfcq2_DurPhasPrdt
         */
        dureePhaseProduit1: number;
        /**
         * Npfcq3_DurPhasPrdt
         */
        dureePhaseProduit2: number;
        /**
         * Npfcq4_DurDunPhasPas
         */
        dureeDunPhasePas: number;
        /**
         * Ptfcin_PerdicCalcIntr
         */
        periodiciteCalculIntr: number;
        /**
         * Ptfci1_PerdicCalcIntr
         */
        periodiciteCalculIntr1: number;
        /**
         * Ptfci2_PerdicCalcIntr
         */
        periodiciteCalculIntr2: number;
        /**
         * Ptfci3_PerdicCalcIntr
         */
        periodiciteCalculIntr3: number;
        /**
         * Ptfci4_PerdicCalcIntr
         */
        periodiciteCalculIntr4: number;
        /**
         * Ptfcam_PerdicMerAmrt
         */
        periodiciteMERAmortissement: number;
        /**
         * Ptfca1_PerdicMerAmrt
         */
        periodiciteMERAmortissement1: number;
        /**
         * Ptfca2_PerdicMerAmrt
         */
        periodiciteMERAmortissement2: number;
        /**
         * Ptfca3_PerdicMerAmrt
         */
        periodiciteMERAmortissement3: number;
        /**
         * Ptfca4_PerdicMerAmrt
         */
        periodiciteMERAmortissement4: number;
        /**
         * Cdfcpt_CodePerdicDiffMer
         */
        codePeriodiciteDiffereMER: number;
        /**
         * Cdfcei_CdRecvIntrTermEchu
         */
        codeRecouvrementIntrTermeEchu: number;
        /**
         * Cdfcea_CdRecvAmrtTermEchu
         */
        codeRecouvrementAmortissementTermeEchu: number;
        /**
         * Cdfccf_CdTypeConfmTxIntr
         */
        codeTypeConfirmationTauxIntr: number;
        /**
         * Cdfctx_ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * Nbfcaa_NbJourAnnNumrt
         */
        nombreJourAnnulationNumerateur: number;
        /**
         * Cdfcam_ModeCalcAmrt
         */
        modeCalculAmortissement: number;
        /**
         * Mtfckr_CaptRefrTablCste
         */
        capitalReferenceTableConstante: number;
        /**
         * Ctfcrb_TypeAsstRemb
         */
        typeAssietteRemboursement: number;
        /**
         * Cdfcva_CdVerstAutrPendPhas
         */
        codeVersementAutrePendantPhase: number;
        /**
         * Cdfcfp_CodeRedcDurPrfn
         */
        codeReductionDureePrefinancement: number;
        /**
         * Cdfcpr_CodePrlnDurPrfn
         */
        codePrelevementDureePrefinancement: number;
        /**
         * Ctfcpe_CodeTypePrfn
         */
        codeTypePrefinancement: number;
        /**
         * Cdfcip_CodeRecvPartlIntr
         */
        codeRecouvrementPartielIntr: number;
        /**
         * Cdfcir_CodeCalcIntrRepr
         */
        codeCalculIntrRepr: number;
        /**
         * Cdfcki_CodeCaptIntrDiff
         */
        codeCapitalIntrDiffere: number;
        /**
         * Ptfcci_CalcIntrJourReel
         */
        calculIntrJourReel: number;
        /**
         * Ptfcd1_PerdicMerIntr
         */
        periodiciteMERIntr: number;
        /**
         * Ptfcd2_PerdicMerIntr
         */
        periodiciteMERIntr1: number;
        /**
         * Ptfcd3_PerdicMerIntr
         */
        periodiciteMERIntr2: number;
        /**
         * Ptfcd4_PerdicMerIntr
         */
        periodiciteMERIntr3: number;
        /**
         * Ctfck2_ModeCaptIntr
         */
        modeCapitalIntr: number;
        /**
         * Ctfck1_ModeRecvIntr
         */
        modeRecouvrementIntr: number;
        /**
         * Ptfcco_PerdicCompoIntr
         */
        periodiciteCompositionIntr: number;
        /**
         * Cdfcpm_CdModeExprTxMoyePhas
         */
        codeModeExpressionTauxMoyenPhase: number;
        /**
         * Txfcp1_ValrMinTxMoyePhas
         */
        valeurMinimumTauxMoyenPhase: number;
        /**
         * Txfcp2_ValrMaxTxMoyePhas
         */
        valeurMaximumTauxMoyenPhase: number;
        /**
         * Txfcp3_ValrConsTxMoyePhas
         */
        valeurConsolideTauxMoyenPhase: number;
        /**
         * Cdfcth_CodeTxPalrCalc
         */
        codeTauxPalierCalcul: number;
        /**
         * Cdfcin_CodeIndc
         */
        codeIndice: string;
        /**
         * Nbfrvd_NbMaxiPerdVartDur
         */
        nombreMaximumPeriodeVartDuree: number;
        /**
         * Cdfcop_CodeOptnSurPhasPrdt
         */
        codeOptionSurPhaseProduit: number;
        /**
         * Cdfcoo_CodeObjtOptn
         */
        codeObjetOption: number;
        /**
         * Cdfcto_TypeOptn
         */
        typeOption: number;
        /**
         * Cdfcsr_CodeCourPourPrsDopt
         */
        codeCourtPourPresenceDopt: number;
        /**
         * Npfcsr_DelaiCourPrsDopt
         */
        delaiCourtPresenceDopt: number;
        /**
         * Pefcpo_PerdicOptn
         */
        periodiciteOption: number;
        /**
         * Nbjja1_NbJourAnnDenom
         */
        nombreJourAnnulationDenomination: number;
        /**
         * Txfccz_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement: number;
        /**
         * Tpfcc1_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement: number;
        /**
         * Tsfcc1_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement: number;
        /**
         * Pefrie_UnitPerdValrIntIndc
         */
        unitePeriodeValeurIntituleIndice: number;
        /**
         * Npfrie_NbPerdValrIntIndc
         */
        nombrePeriodeValeurIntituleIndice: number;
        /**
         * Ctfcte_CodeTypeTrtDech
         */
        codeTypeTraitementDech: number;
        /**
         * Tsfcif_QuotMaxiCaptIfin
         */
        quotientMaximumCapitalIfin: number;
        /**
         * Txfcca_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement1: number;
        /**
         * Tpfcca_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement1: number;
        /**
         * Tsfcca_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement1: number;
        /**
         * Idfrbd_IdntReglButrDur
         */
        idRegleButoireDuree: string;
    }
    interface ICreditPhaseLecture extends IElementLecture {
        /**
         * Cdfcir_CodeCalcInteRepr
         */
        codeCalculInterieurRepr: number;
        /**
         * Ctfcki_ModeCaptRecvInte
         */
        modeCapitalRecouvrementInterieur: number;
        /**
         * Cdfcki_CodeCaptRecvInte
         */
        codeCapitalRecouvrementInterieur: number;
        /**
         * Ptfcin_CodePerdAsscCalcInte
         */
        codePeriodeAssuranceCalculInterieur: number;
        /**
         * Ptfcam_CodePerdCalcMer
         */
        codePeriodeCalculMER: number;
        /**
         * Ptfcci_CodeCalcInteJourRels
         */
        codeCalculInterieurJourRelease: number;
        /**
         * Ptfcco_CodePerdCompoInte
         */
        codePeriodeCompositionInterieur: number;
        /**
         * Mefoso_MtPrmeecheServ
         */
        montantPrmeecheService: number;
        /**
         * Mefafr_MtPrmeecheAccsComp
         */
        montantPrmeecheAccessoireComp: number;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Cdfava_CodeIndicVerstFondAutrPendPhas
         */
        codeIndiceVersementFondAutrePendantPhase: number;
        /**
         * Dtfccr_DateCretPhas
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateCreationPhase: string;
        /**
         * Cdfdcf_CodeConfmTxInteCred
         */
        codeConfirmationTauxInterieurCredit: number;
        /**
         * Npfcph_NbPerdPhas
         */
        nombrePeriodePhase: number;
        /**
         * Pefcph_CodePerdDurePhas
         */
        codePeriodeDurePhase: number;
        /**
         * Txfcmg_Marge
         */
        marge: number;
        /**
         * Txfcvi_Taux
         */
        taux: number;
        /**
         * Tvfrui_Repart
         */
        repart: number;
        /**
         * TxPhasFixe
         */
        tauxPhaseFixe: number;
        /**
         * TxPhasInit
         */
        tauxPhaseInit: number;
        /**
         * DateTraitIndic
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateTraitIndice: string;
        /**
         * MajorBonif
         */
        majorBonif: number;
        /**
         * CalculButoirHausse
         */
        calculButoirHausse: boolean;
        /**
         * CalculButoirBaisse
         */
        calculButoirBaisse: boolean;
        /**
         * PersoButoirHausse
         */
        persoButoirHausse: boolean;
        /**
         * PersoButoirBaisse
         */
        persoButoirBaisse: boolean;
        /**
         * ModeButoirHausse
         */
        modeButoirHausse: string;
        /**
         * ModeButoirBaisse
         */
        modeButoirBaisse: string;
        /**
         * DateButoirHausse
         */
        dateButoirHausse: string;
        /**
         * DateButoirBaisse
         */
        dateButoirBaisse: string;
        /**
         * TauxButoirHausse
         */
        tauxButoirHausse: number;
        /**
         * TauxButoirBaisse
         */
        tauxButoirBaisse: number;
        /**
         * TypeTaux
         */
        typeTaux: string;
        /**
         * TxPhas
         */
        tauxPhase: ITauxInteretAnnuelLecture;
        /**
         * TxPhasHorsBonfMajre
         */
        tauxPhaseHorsBonificationMajre: ITauxInteretAnnuelLecture;
        /**
         * Mefiha_MtPrmeecheHorsAccs
         */
        montantPrmeecheHorsAccessoire: number;
        /**
         * Mtfacc_MtPrmeecheAccsPerd
         */
        montantPrmeecheAccessoirePeriode: number;
        /**
         * InteretsDifferes
         */
        interetsDifferes: boolean;
        /**
         * CodeRecouvCapitInterets
         */
        codeRecouvCapitInterets: number;
        /**
         * ModeRecouvInterets
         */
        modeRecouvInterets: number;
        /**
         * ModeCapitInterets
         */
        modeCapitInterets: number;
        /**
         * CapitActive
         */
        capitActive: boolean;
        /**
         * RecouvActive
         */
        recouvActive: boolean;
        /**
         * ChoixCapitalisation
         */
        choixCapitalisation: boolean;
        /**
         * ChoixRecouvrement
         */
        choixRecouvrement: boolean;
        /**
         * Capitalisation
         */
        capitalisation: boolean;
        /**
         * Recouvrement
         */
        recouvrement: boolean;
        /**
         * MtPremiereEcheance
         */
        montantPremiereEcheance: number;
        /**
         * ChoixPeriode
         */
        choixPeriode: boolean;
        /**
         * ChoixPeriodicite
         */
        choixPeriodicite: boolean;
        /**
         * EstVisibleTaux
         */
        estVisibleTaux: boolean;
        /**
         * EstVisibleMarge
         */
        estVisibleMarge: boolean;
        /**
         * ListeChoixPeriode
         */
        listeChoixPeriode: Array<number>;
        /**
         * EstActifDuree
         */
        estActifDuree: boolean;
        /**
         * EstActifPeriodicite
         */
        estActifPeriodicite: boolean;
        /**
         * EstActifTaux
         */
        estActifTaux: boolean;
        /**
         * EstActifMarge
         */
        estActifMarge: boolean;
        /**
         * ListeModeCapitalisation
         */
        listeModeCapitalisation: Array<IScConstante>;
        /**
         * ListeModeRecouvrement
         */
        listeModeRecouvrement: Array<IScConstante>;
        /**
         * EstVisibleButoirHausse
         */
        estVisibleButoirHausse: boolean;
        /**
         * EstVisibleButoirBaisse
         */
        estVisibleButoirBaisse: boolean;
        /**
         * EstActifButoirHausse
         */
        estActifButoirHausse: boolean;
        /**
         * EstActifButoirBaisse
         */
        estActifButoirBaisse: boolean;
        /**
         * EstVisibleTauxHausse
         */
        estVisibleTauxHausse: boolean;
        /**
         * EstVisibleTauxBaisse
         */
        estVisibleTauxBaisse: boolean;
        /**
         * EstVisibleJeuDeParametres
         */
        estVisibleJeuxDeParametres: boolean;
        /**
         * EstActifJeuDeParametres
         */
        estActifJeuxDeParametres: boolean;
        /**
         * EstVisibleQuotite
         */
        estVisibleQuotite: boolean;
        /**
         * EstActifQuotite
         */
        estActifQuotite: boolean;
        /**
         * ListeJeuxParametresRevision
         */
        listeJeuxParametresRevision: Array<string>;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntParmRevsParPhas
         */
        idParametreRevisionParPhase: string;
        /**
         * ListIdntPalrTx
         */
        listeIdPalierTaux: Array<string>;
        /**
         * PhasePrdt
         */
        phaseProduit: IScProduitPhase;
    }
    interface ICreditPhaseAmortissementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcea_CodeRecvAmrtTermEchu
         */
        codeRecouvrementAmortissementTermeEchu: number;
        /**
         * Txfcqa_QuotAmrt
         */
        quotientAmortissement: number;
        /**
         * Cdfcam_ModeCalcAmrt
         */
        modeCalculAmortissement: number;
        /**
         * Cifapi_CodePrelFinPhas
         */
        codePrelFinPhase: number;
        /**
         * Txfaom_TxConstPhasCred
         */
        tauxConstructionPhaseCredit: number;
        /**
         * AmrtPossible
         */
        amortissementPossible: boolean;
        /**
         * ProgTaux
         */
        progTaux: boolean;
        /**
         * TypePretCombine
         */
        typePretCombine: string;
        /**
         * IdntCompPhasPourPretComb
         */
        idCompPhasePourPretComb: string;
        /**
         * ListIdntPalrPrgrAmrt
         */
        listeIdPalierProgressifAmortissement: Array<string>;
    }
    interface ICreditPhaseDiffereAmortissementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcip_CodeRecvPartlInte
         */
        codeRecouvrementPartielInterieur: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhaseDiffereTotalLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhaseMobilisationLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcip_CodeRecvPartlInte
         */
        codeRecouvrementPartielInterieur: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhasePrefinancementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfppf_CodeRedcDureePref
         */
        codeReductionDureePref: number;
        /**
         * Personnalisable
         */
        personnalisable: boolean;
        /**
         * Reduction
         */
        reduction: boolean;
    }
}

declare namespace ICRest.Modeles.DefinirProjet {
    interface IDefinirProjetRequest {
        identifiantDossier: string;
        typeObjetCommercial: string;
        typeObjetReglemente: string;
        projetMAJ: IProjetMaj;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IProjetEPSMaj extends IProjetMaj {
    }
    interface IProjetNonImmobilierMaj extends IProjetMaj {
        /**
         * DescProjNonImmb
         */
        descriptionProjetNonImmobilier: string;
        /**
         * Dtfbso_DateMiseDispFond
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateMiseDispFond: string;
    }
    interface IProjetImmobilierMaj extends IProjetMaj {
        /**
         * Cifopa_DefnSiEmprEstPrm
         */
        defnSiEmpruntEstPrm: boolean;
        /**
         * Cofopz_CodeCondDergPourPtz
         */
        codeConditionDerogationPourPtz: number;
        /**
         * Cdfose_CodeBatmBassConso
         */
        codeBatimentBassConsommation: number;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cdfomo_CodeModlOccpLogm
         */
        codeModeleOccpLogement: number;
        /**
         * Ctfopm_CodePrixMarc
         */
        codePrixMarche: number;
        /**
         * Ctfmmc_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * Ctfmpo_TypePrpr
         */
        typeProprietaire: number;
        /**
         * Txfmpa_PctPrprApreOper
         */
        pourcentageProprietaireApreOper: number;
        /**
         * Mgfovh_MtInscHypt
         */
        montantInscHypotheque: number;
        /**
         * Cdfqem_QualEmplaProj
         */
        qualEmplaProjet: number;
        /**
         * ZoneReglRobnBien
         */
        zoneRegleRobnBien: string;
        /**
         * ZonePlusLogm
         */
        zonePlusLogement: string;
        /**
         * Cdfozg_CodeZoneGegrRegl
         */
        codeZoneGegrRegle: number;
        /**
         * Cdfizf_CodeZoneFrncSins
         */
        codeZoneFrncSinistre: number;
        /**
         * Cdfwti_TypeImeu
         */
        typeImeu: number;
        /**
         * Idfapi_IdntPrgmImmb
         */
        idProgrammeImmobilier: string;
        /**
         * Idfaap_IdntAccrPourInst
         */
        idAccrPourInstruction: string;
        /**
         * Cifcep_IndicemssNouvPartScpi
         */
        indicemssNouvPartScpi: number;
        /**
         * Ctfcve_CodeTypeMarcPourVent
         */
        codeTypeMarchePourVent: number;
        /**
         * Idfove_NomSoceGest
         */
        nomSoceGestion: string;
        /**
         * Cdfizf_CentreBourgRural
         */
        centreBourgadeRural: boolean;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IScElement {
    }
    interface IScConstante extends IScElement {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
    interface IProjetNonImmobilierLecture extends IProjetLecture {
        /**
         * IndicProjProf
         */
        indiceProjetProf: boolean;
        /**
         * IndicProjConsTres
         */
        indiceProjetConsolideTres: boolean;
        /**
         * ObjTresEtdn
         */
        objTresEtdn: boolean;
        /**
         * ObjFinnConso
         */
        objFinancierConsommation: boolean;
        /**
         * ObjTresPrfs
         */
        objTresPrfs: boolean;
        /**
         * DescProjNonImmb
         */
        descriptionProjetNonImmobilier: string;
        /**
         * Dtfbso_DateMiseDispFond
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateMiseDispFond: string;
        /**
         * IdntBienConso
         */
        idBienConsommation: string;
        /**
         * IdntBienEqpmProf
         */
        idBienEqpmProf: string;
        /**
         * IdntBienTres
         */
        idBienTres: string;
    }
    interface IProjetEPSLecture extends IProjetLecture {
    }
    interface IProjetImmobilierLecture extends IProjetLecture {
        /**
         * Cifopa_DefnSiEmprEstPrm
         */
        defnSiEmpruntEstPrm: boolean;
        /**
         * Cofopz_CodeCondDergPourPtz
         */
        codeConditionDerogationPourPtz: number;
        /**
         * ValdelgbaPrmAccsPourCateReglAttr
         */
        valdelgbaPrmAccessoirePourCateRegleAttribut: boolean;
        /**
         * ElgbPtz
         */
        eligibilitePtz: boolean;
        /**
         * ElgbPc
         */
        eligibilitePC: boolean;
        /**
         * ElgbPas
         */
        eligibilitePas: boolean;
        /**
         * ElgbaEl
         */
        elgbaEpargneLogement: boolean;
        /**
         * ElgbaEcpt
         */
        elgbaEcpt: boolean;
        /**
         * Cdfose_CodeBatmBassConso
         */
        codeBatimentBassConsommation: number;
        /**
         * Cdfomo_CodeModlOccpLogm
         */
        codeModeleOccpLogement: number;
        /**
         * Ctfopm_CodePrixMarc
         */
        codePrixMarche: number;
        /**
         * LibelleCodePrixMarc
         */
        libelleCodePrixMarche: string;
        /**
         * Ctfmmc_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * LibelleCodeTypeMarc
         */
        libelleCodeTypeMarche: string;
        /**
         * Ctfmpo_TypePrpr
         */
        typeProprietaire: number;
        /**
         * LibelleTypePrpr
         */
        libelleTypeProprietaire: string;
        /**
         * Txfmpa_PctPrprApreOper
         */
        pourcentageProprietaireApreOper: number;
        /**
         * Mgfovh_MtInscHypt
         */
        montantInscHypotheque: number;
        /**
         * Cdfqem_QualEmplaProj
         */
        qualEmplaProjet: number;
        /**
         * ZoneReglRobnBien
         */
        zoneRegleRobnBien: string;
        /**
         * ZonePlusLogm
         */
        zonePlusLogement: string;
        /**
         * Cdfozg_CodeZoneGegrRegl
         */
        codeZoneGegrRegle: number;
        /**
         * Cdfwti_TypeImeu
         */
        typeImeu: number;
        /**
         * Cifclh_CodeLogmHlm
         */
        codeLogementHlm: number;
        /**
         * Cifclh_EstLogmHlm
         */
        estLogementHlm: boolean;
        /**
         * Idfapi_IdntPrgmImmb
         */
        idProgrammeImmobilier: string;
        /**
         * Idfaap_IdntAccrPourInst
         */
        idAccrPourInstruction: string;
        /**
         * Cifcep_IndicemssNouvPartScpi
         */
        indicemssNouvPartScpi: number;
        /**
         * Ctfcve_CodeTypeMarcPourVent
         */
        codeTypeMarchePourVent: number;
        /**
         * Idfove_NomSoceGest
         */
        nomSoceGestion: string;
        /**
         * Cdfizf_CentreBourgRural
         */
        centreBourgadeRural: boolean;
        /**
         * DroitAcquisPEL
         */
        droitAcquisPEL: number;
        /**
         * DroitAcquisCEL
         */
        droitAcquisCEL: number;
        /**
         * IdntTerrFinn
         */
        idTerrFinancier: string;
        /**
         * IdntTrvxFinn
         */
        idTravauxFinancier: string;
        /**
         * IdntConstFinn
         */
        idConstructionFinancier: string;
        /**
         * IdntBatmHabtFinn
         */
        idBatimentHabitationFinancier: string;
        /**
         * IdntSoulFinn
         */
        idSoulFinancier: string;
        /**
         * IdntObjtButLocf
         */
        idObjetButLocf: string;
        /**
         * IdntObjtPrmtImmb
         */
        idObjetPrmtImmobilier: string;
    }
    interface IProjetMaj extends IElementMaj {
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Cdfcon_NegcEffcParNotr
         */
        negocieEffcParNotaire: boolean;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Cdfomp_CodeMiseOeuvrProjPro
         */
        codeMiseOeuvrProjetPro: number;
        /**
         * Cdfwrl_IndicAchtRvnt
         */
        indiceAchtRvnt: boolean;
        /**
         * Cifocs_CoutObjtSaisCalcEnvl
         */
        coutObjetSaisieCalculEnvl: number;
        /**
         * Ctfgce_CritElgGarFEI
         */
        critereElgGarFEI: string;
        /**
         * Ctfici_CanalDeDistribution
         */
        canalDeDistribution: string;
        /**
         * Ctfoan_TypeAcqs
         */
        typeAcqs: number;
        /**
         * Ctfonu_NbUnteContPrgmImmb
         */
        nombreUnteContratProgrammeImmobilier: string;
        /**
         * DescriptionProjet
         */
        descriptionProjet: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Lbfoof_DescObjt
         */
        descriptionObjet: string;
        /**
         * CodePaysLocs
         */
        codePaysLocs: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * Mofcpz_CoutRelOper
         */
        coutRelOper: number;
        /**
         * Mtfcra_MtRachCren
         */
        montantRachCren: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Mtfofd_MtFrsDivr
         */
        montantFrsDivr: number;
        /**
         * Mtfofn_CoutFrsNotr
         */
        coutFrsNotaire: number;
        /**
         * Mtfoho_CoutTotlObjtHt
         */
        coutTotalObjetHt: number;
        /**
         * Mtfott_CoutTotlObjtTtc
         */
        coutTotalObjetTTC: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEstmVenl: string;
        /**
         * bFinancementTCC
         */
        financementTCC: boolean;
    }
    interface IProjetLecture extends IElementLecture {
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * BonificationEstValide
         */
        bonificationEstValide: boolean;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cdfcfo_CateReglAttr
         */
        cateRegleAttribut: string;
        /**
         * Cdfcni_TypeObjtFinn
         */
        typeObjetFinancier: string;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * DescriptionProjet
         */
        descriptionProjet: string;
        /**
         * LibelleModlEstVenl
         */
        libelleModeleEstVenl: string;
        /**
         * Cdfomp_CodeMiseOeuvrProjPro
         */
        codeMiseOeuvrProjetPro: number;
        /**
         * LibelleCodeMiseOeuvrProjPro
         */
        libelleCodeMiseOeuvrProjetPro: string;
        /**
         * Cdfonn_NegcEffcParNotr
         */
        negocieEffcParNotaire: boolean;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * Cdfwna_NaturesConcoursExternes
         */
        naturesConcoursExternes: Array<IScConstante>;
        /**
         * Cdfwrl_PresBienAVend
         */
        presBienAVend: boolean;
        /**
         * Cifocs_CoutObjtSaisCalcEnvl
         */
        coutObjetSaisieCalculEnvl: number;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Ctfgce_CritElgGarFEI
         */
        critereElgGarFEI: string;
        /**
         * Ctfifd_InteFrsDivrFinn
         */
        interieurFrsDivrFinancier: string;
        /**
         * Ctfoan_TypeAcqs
         */
        typeAcqs: number;
        /**
         * Ctfonu_NbUnteContPrgmImmb
         */
        nombreUnteContratProgrammeImmobilier: string;
        /**
         * Ctmicr_TypeLoiFICP
         */
        typeLoiFICP: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEstmVenl: string;
        /**
         * FraisDeNotairesSaisissables
         */
        fraisDeNotairesSaisissables: boolean;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Lbfoof_DescObjt
         */
        descriptionObjet: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * Mofcpz_CoutRelOper
         */
        coutRelOper: number;
        /**
         * Mtfcra_MtRachCren
         */
        montantRachCren: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Mtfofd_MtFrsDivr
         */
        montantFrsDivr: number;
        /**
         * Mtfofn_CoutFrsNotr
         */
        coutFrsNotaire: number;
        /**
         * Mtfoho_CoutTotlObjtHt
         */
        coutTotalObjetHt: number;
        /**
         * Mtfott_CoutTotlObjtTtc
         */
        coutTotalObjetTTC: number;
        /**
         * PrendreBienSousJacentPourGarantie
         */
        prendreBienSousJacentPourGarantie: boolean;
        /**
         * RedacteurActeObligatoire
         */
        redacteurActeObligatoire: boolean;
        /**
         * IdntBienAVend
         */
        idBienAVend: string;
        /**
         * IdntLignInvs
         */
        idLigneInvs: string;
        /**
         * IdntLignTirg
         */
        idLigneTirg: string;
        /**
         * IdntPlanRetn
         */
        idPlanRetn: string;
        /**
         * IdntReam
         */
        idReamenagement: string;
        /**
         * ListIdntPlanFinn
         */
        listeIdPlanFinancier: Array<string>;
    }
}

declare namespace ICRest.Modeles.DefinirRattFoyerFiscalTiers {
    interface IEntreeTransaction {
        /**
         * ForceeControle
         */
        forceeControle: boolean;
        /**
         * Idws
         */
        idws: string;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IRattachementFoyerFiscalTiersMaj extends IElementMaj {
        /**
         * Identification
         */
        identification: string;
        /**
         * Annee
         */
        annee: number;
        /**
         * Montant
         */
        montant: number;
    }
    interface IEntreeRattachementFoyerFiscal {
        /**
         * IdentifiantPersonne
         */
        identifiantPersonne: string;
        /**
         * RattachementFoyerFiscal
         */
        rattachementFoyerFiscal: IRattachementFoyerFiscalTiersMaj;
    }
    interface IEntreeDefinirRattachementFoyerFiscal extends IEntreeTransaction {
        /**
         * ListeRattachementFoyerFiscal
         */
        listeRattachementFoyerFiscal: Array<IEntreeRattachementFoyerFiscal>;
    }
    interface IElementComplet {
        /**
         * Idws
         */
        idws: string;
    }
    interface IRattachementFoyerFiscalTiersComplet extends IElementComplet {
        /**
         * Identification
         */
        identification: string;
        /**
         * Annee
         */
        annee: number;
        /**
         * Montant
         */
        montant: number;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IFormulaireRattachementFoyerFiscalComplet extends IElementComplet {
        /**
         * LibellePersonne
         */
        libellePersonne: string;
        /**
         * RattachementFoyerFiscalTiers
         */
        rattachementFoyerFiscalTiers: IRattachementFoyerFiscalTiersComplet;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
        /**
         * IdentifiantRattache
         */
        identifiantRattache: string;
    }
}

declare namespace ICRest.Modeles.DefinirReamenagement {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IReamenagementMaj extends IElementMaj {
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
        /**
         * Ctfmup_UsgPretTres
         */
        usagePretTres: number;
        /**
         * Mtfmvc_AncnEche
         */
        ancnEcheance: number;
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * Mtfmvd_ValrAchtObjtFinn
         */
        valeurAchtObjetFinancier: number;
        /**
         * Npfmrp_DureResdPretRefn
         */
        dureResdPretRefn: number;
        /**
         * Dtfoac_DateAcqsObjtRefn
         * Type date au format yyyy-MM-dd
         */
        dateAcqsObjetRefn: string;
        /**
         * Mtfaoc_CoutAcqsObjtRefn
         */
        coutAcqsObjetRefn: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IReamenagementLecture extends IElementLecture {
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
        /**
         * Ctfmup_UsgPretTres
         */
        usagePretTres: number;
        /**
         * Mtfmvc_AncnEche
         */
        ancnEcheance: number;
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * Mtfmvd_ValrAchtObjtFinn
         */
        valeurAchtObjetFinancier: number;
        /**
         * Npfmrp_DureResdPretRefn
         */
        dureResdPretRefn: number;
        /**
         * Dtfoac_DateAcqsObjtRefn
         * Type date au format yyyy-MM-dd
         */
        dateAcqsObjetRefn: string;
        /**
         * Mtfaoc_CoutAcqsObjtRefn
         */
        coutAcqsObjetRefn: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * ListIdntPretReam
         */
        listeIdPretReamenagement: Array<string>;
    }
    interface IDefinirReamenagementRequest {
        identifiantDossier: string;
        identifiantProjet: string;
        reamenagementMAJ: IReamenagementMaj;
    }
}

declare namespace ICRest.Modeles.DefinirRedacteurActe {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IRedacteurActeMaj extends IElementMaj {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Lbfpnm_NomRedcActe
         */
        nomReductionActe: string;
        /**
         * Lbfppn_PrenRedcActe
         */
        prenReductionActe: string;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
    }
    interface IRedacteurActeLecture extends IElementLecture {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Lbfpnm_NomRedcActe
         */
        nomReductionActe: string;
        /**
         * Lbfppn_PrenRedcActe
         */
        prenReductionActe: string;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
    }
    interface IDefinirRedacteurActeRequest {
        identifiantDossier: string;
        redacteurActeMaj: IRedacteurActeMaj;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.DefinirReferenceCadastrale {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IReferenceCadastraleMaj extends IElementMaj {
        /**
         * Lbfoca_ReferenceCadastre
         */
        referenceCadastre: string;
        /**
         * Lbfcsc_SectionCadastre
         */
        sectionCadastre: string;
        /**
         * Qtfcsc_SurfaceReferenceCadastrale
         */
        surfaceReferenceCadastrale: number;
        /**
         * Llfcob_commentaires
         */
        commentaires: string;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IReferenceCadastraleLecture extends IElementLecture {
        /**
         * Lbfoca_ReferenceCadastre
         */
        referenceCadastre: string;
        /**
         * Lbfcsc_SectionCadastre
         */
        sectionCadastre: string;
        /**
         * Qtfcsc_SurfaceReferenceCadastrale
         */
        surfaceReferenceCadastrale: number;
        /**
         * Llfcob_commentaires
         */
        commentaires: string;
        /**
         * Nufcrl_NumeroRelatif
         */
        numeroRelatif: number;
    }
    interface IDefinirRefCadRequest {
        identifiantDossier: string;
        idwsHypothequeImmo: string;
        referencesCadastrales: Array<IReferenceCadastraleMaj>;
    }
}

declare namespace ICRest.Modeles.DefinirReferenceLot {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IReferenceLotMaj extends IElementMaj {
        /**
         * Lbfolt_ReferenceTypeDeLot
         */
        referenceTypeDeLot: string;
        /**
         * Llfcnl_NatureDuLot
         */
        natureDuLot: string;
        /**
         * Nbftta_Tantieme
         */
        tantieme: number;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IReferenceLotLecture extends IElementLecture {
        /**
         * Lbfolt_ReferenceTypeDeLot
         */
        referenceTypeDeLot: string;
        /**
         * Llfcnl_NatureDuLot
         */
        natureDuLot: string;
        /**
         * Nbftta_Tantieme
         */
        tantieme: number;
        /**
         * Nufcrl_NumeroRelatif
         */
        numeroRelatif: number;
    }
    interface IDefRefLotsRequest {
        identifiantDossier: string;
        idwsHypothequeImmo: string;
        referencesLots: Array<IReferenceLotMaj>;
    }
}

declare namespace ICRest.Modeles.DefinirRemiseTaux {
    interface IDefinirRemiseTauxRequest {
        identifiantDossier: string;
        identifiantPlanFinancement: string;
        identifiantCredit: string;
        typeRemise: number;
        applicationMarge: boolean;
    }
}

declare namespace ICRest.Modeles.DefinirStatutOccup {
    interface IEntreeTransaction {
        /**
         * ForceeControle
         */
        forceeControle: boolean;
        /**
         * Idws
         */
        idws: string;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IInformationOccupationMaj extends IElementMaj {
        /**
         * DateDebut
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * StatutOccupation
         */
        statutOccupation: number;
        /**
         * RattachementAutre
         */
        rattachementAutre: string;
        /**
         * Adresse
         */
        adresse: string;
    }
    interface IEntreeStatutOccupation {
        /**
         * IdentifiantPersonne
         */
        identifiantPersonne: string;
        /**
         * ListeInformationOccupation
         */
        listeInformationOccupation: Array<IInformationOccupationMaj>;
    }
    interface IEntreeDefinirStatutOccupation extends IEntreeTransaction {
        /**
         * ListeStatutOccupation
         */
        listeStatutOccupation: Array<IEntreeStatutOccupation>;
    }
    interface IElementComplet {
        /**
         * Idws
         */
        idws: string;
    }
    interface IInformationOccupationComplet extends IElementComplet {
        /**
         * DateDebutOccupation
         * Type date au format yyyy-MM-dd
         */
        dateDebutOccupation: string;
        /**
         * DateFinOccupation
         * Type date au format yyyy-MM-dd
         */
        dateFinOccupation: string;
        /**
         * StatutOccupation
         */
        statutOccupation: number;
        /**
         * RattachementAutre
         */
        rattachementAutre: string;
        /**
         * Adresse
         */
        adresse: string;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IFormulaireStatutOccupationPTZComplet extends IElementComplet {
        /**
         * LibellePersonne
         */
        libellePersonne: string;
        /**
         * ListeInformationOccupation
         */
        listeInformationOccupation: Array<IInformationOccupationComplet>;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
        /**
         * IdentifiantRattache
         */
        identifiantRattache: string;
    }
}

declare namespace ICRest.Modeles.DemanderExpertisePvh {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IResultatDemandeExpertisePVH {
        /**
         * ListeAnomalies
         */
        listeAnomalies: Array<IAnomalieLecture>;
        /**
         * IdentifiantExpertise
         */
        identifiantExpertise: string;
        /**
         * NumeroCommandeImothep
         */
        numeroCommandeImothep: string;
        /**
         * NumeroDossierImothep
         */
        numeroDossierImothep: string;
        /**
         * DateDemandeExpertise
         * Type date au format yyyy-MM-dd
         */
        dateDemandeExpertise: string;
    }
}

declare namespace ICRest.Modeles.DetailAccessoireComplementaire {
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IAccessoireLecture extends IElementLecture {
        /**
         * Idfaaa_IdntAccsGest
         */
        idAccessoireGestion: string;
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Ctfcah_CodeTyplAccs
         */
        codeTypologieAccessoire: string;
        /**
         * Txfipf_PartFinnAccs
         */
        partFinancierAccessoire: number;
        /**
         * CodeIndicAccsAper
         */
        codeIndiceAccessoireAper: boolean;
        /**
         * CodeIndicAccsFinn
         */
        codeIndiceAccessoireFinancier: boolean;
        /**
         * Dtfccr_DateCret
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Ddfaaa_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffaaa_DateFinEfft
         * Type date au format yyyy-MM-dd
         */
        dateFinEffet: string;
        /**
         * Cdfpim_CodeBeneficiaire
         */
        codeBeneficiaire: string;
        /**
         * Cdfpnb_PersonnalisationBeneficiare
         */
        personnalisationBeneficiare: number;
        /**
         * MontantFraisAccessoire
         */
        montantFraisAccessoire: number;
        /**
         * MontantSouhaite
         */
        montantSouhaite: number;
        /**
         * TauxRetenuAccessoire
         */
        tauxRetenuAccessoire: number;
        /**
         * ListIdntCouv
         */
        listeIdCouverture: Array<string>;
        /**
         * ListIdntCots
         */
        listeIdCotisation: Array<string>;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * ListIdntAvisOrgnExtr
         */
        listeIdAvisOrgnExtr: Array<string>;
        /**
         * IdntPlan
         */
        idPlan: string;
    }
    interface IAccessoireComplementaireLecture extends IAccessoireLecture {
        /**
         * Cnfcoi_CodeNatrOrigAccs
         */
        codeNatureOrigineAccessoire: number;
        /**
         * IdntCatlFrsComp
         */
        idCatlFrsComp: string;
        /**
         * IdntCatlParmRverTier
         */
        idCatlParametreRverTiers: string;
    }
}

declare namespace ICRest.Modeles.DetailAccessoireLieProduit {
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IAccessoireLecture extends IElementLecture {
        /**
         * Idfaaa_IdntAccsGest
         */
        idAccessoireGestion: string;
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Ctfcah_CodeTyplAccs
         */
        codeTypologieAccessoire: string;
        /**
         * Txfipf_PartFinnAccs
         */
        partFinancierAccessoire: number;
        /**
         * CodeIndicAccsAper
         */
        codeIndiceAccessoireAper: boolean;
        /**
         * CodeIndicAccsFinn
         */
        codeIndiceAccessoireFinancier: boolean;
        /**
         * Dtfccr_DateCret
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Ddfaaa_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffaaa_DateFinEfft
         * Type date au format yyyy-MM-dd
         */
        dateFinEffet: string;
        /**
         * Cdfpim_CodeBeneficiaire
         */
        codeBeneficiaire: string;
        /**
         * Cdfpnb_PersonnalisationBeneficiare
         */
        personnalisationBeneficiare: number;
        /**
         * MontantFraisAccessoire
         */
        montantFraisAccessoire: number;
        /**
         * MontantSouhaite
         */
        montantSouhaite: number;
        /**
         * TauxRetenuAccessoire
         */
        tauxRetenuAccessoire: number;
        /**
         * ListIdntCouv
         */
        listeIdCouverture: Array<string>;
        /**
         * ListIdntCots
         */
        listeIdCotisation: Array<string>;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * ListIdntAvisOrgnExtr
         */
        listeIdAvisOrgnExtr: Array<string>;
        /**
         * IdntPlan
         */
        idPlan: string;
    }
    interface IAccessoireLieProduitLecture extends IAccessoireLecture {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
    }
}

declare namespace ICRest.Modeles.EditerDocumentEpargneLogement {
    interface IDroitAcquisELLecture {
        /**
         * Idfadi_IdDossier
         */
        idDossier: string;
        /**
         * Nufpct_IdContrat
         */
        idContrat: string;
        /**
         * Nofpdp_NumRelatifDossier
         */
        numeroRelatifDossier: number;
        /**
         * IdwsTrancheEL
         */
        idwsTrancheEL: string;
        /**
         * Ddfpct_DateOuvertureContrat
         */
        dateOuvertureContrat: string;
        /**
         * Txfpep_TauxEpargne
         */
        tauxEpargne: number;
        /**
         * Mtfaac_MontantDroitsAcquis
         */
        montantDroitsAcquis: number;
        /**
         * Dtfpae_DateArrete
         */
        dateArrete: string;
        /**
         * Ctfpli_LienParenteAvecCedant
         */
        lienParenteAvecCedant: string;
        /**
         * Cdfadv
         */
        cdfadv: string;
        /**
         * Mtfadu_MtDroitsAcquisUtilises
         */
        montantDroitsAcquisUtilises: number;
        /**
         * Txftpr_TauxPretCatalogue
         */
        tauxPretCatalogue: number;
        /**
         * Mkfmax_CapMaxOct
         */
        capMaximumOct: number;
        /**
         * Mtfaoc_MtPretOctroye
         */
        montantPretOctroye: number;
        /**
         * Mtfmax_EchMaxOct
         */
        echMaximumOct: number;
        /**
         * Mtfape_MtEchUtilise
         */
        montantEchUtilise: number;
        /**
         * Mtfali_MtLimite
         */
        montantLimite: number;
        /**
         * DroitUtilisable
         */
        droitUtilisable: boolean;
        /**
         * PriseEnCompte
         */
        priseEnCompte: string;
        /**
         * ContratPostReforme
         */
        contratPosteReforme: boolean;
    }
    interface IDroitAPretELLecture {
        /**
         * Duree
         */
        duree: number;
        /**
         * TauxMoyen
         */
        tauxMoyen: number;
        /**
         * PretMaximum
         */
        pretMaximum: number;
        /**
         * EchHorsAcc
         */
        echHorsAccessoire: number;
        /**
         * EchAvecAcc
         */
        echAvecAccessoire: number;
        /**
         * CoutHorsAcc
         */
        coutHorsAccessoire: number;
        /**
         * CoutAvecAcc
         */
        coutAvecAccessoire: number;
    }
    interface ISdImpressionEL {
        /**
         * TypeContrat
         */
        typeContrat: string;
        /**
         * ListeDroitsAcquis
         */
        listeDroitsAcquis: Array<IDroitAcquisELLecture>;
        /**
         * ListeDroitsAPrets
         */
        listeDroitsAPrets: Array<IDroitAPretELLecture>;
        /**
         * PeriodiciteDroits
         */
        periodiciteDroits: number;
        /**
         * DureeAnneeCredit
         */
        dureeAnneeCredit: number;
        /**
         * Taux
         */
        taux: number;
        /**
         * Montant
         */
        montant: number;
        /**
         * Echeance
         */
        echeance: number;
    }
    interface IEditerDocumentELRequest {
        identifiantDossier: string;
        identifiantWs: string;
        sdImpressionEL: ISdImpressionEL;
    }
    interface IEditerDocumentFZHCPRETResponse {
        data: string;
    }
}

declare namespace ICRest.Modeles.EditerDocumentFC050REF {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IEditerDocumentFC050REFRequest {
        identifiantDossier: string;
        idws: string;
        parametreEdition: IParametreEdition;
    }
    interface IParamEditique {
        /**
         * Id
         */
        id: string;
        /**
         * Data
         */
        data: string;
    }
    interface IParametreEdition {
        /**
         * IdentifiantWsDocument
         */
        identifiantWsDocument: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * CodeSignature
         */
        codeSignature: number;
        /**
         * NiveauTraitement
         */
        niveauTraitement: number;
        /**
         * IdEntiteFonctionnelle
         */
        idEntiteFonctionnelle: string;
        /**
         * CodeTypeEntite
         */
        codeTypeEntite: string;
        /**
         * ModeEdition
         */
        modeEdition: number;
        /**
         * TypeEditique
         */
        typeEditique: number;
        /**
         * FormatEditique
         */
        formatEditique: number;
        /**
         * Params
         */
        params: Array<IParamEditique>;
        /**
         * ForceCtrlEdition
         */
        forceControleEdition: boolean;
        /**
         * ForceCtrlGestion
         */
        forceControleGestion: boolean;
    }
    interface IResultatEditionREFALecture {
        /**
         * FluxImpression
         */
        fluxImpression: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.EditerDocumentFZHCOPT {
    interface ISdImpressionFZHCOPT {
        /**
         * NumProp
         */
        numeroProp: number;
        /**
         * CoutTotal
         */
        coutTotal: number;
        /**
         * MtPremEchHorsAcc
         */
        montantPremierEchHorsAccessoire: number;
        /**
         * MtPremEchAvecAcc
         */
        montantPremierEchAvecAccessoire: number;
        /**
         * Apport
         */
        apport: number;
        /**
         * MtFinancementExt
         */
        montantFinancementExterieur: number;
        /**
         * MtFinancementInt
         */
        montantFinancementIntitule: number;
        /**
         * TYPE_EDITION
         */
        typeEdition: string;
        /**
         * iNofapd
         */
        numeroPlanDossier: number;
    }
    interface IEditerDocumentFZHCOPTRequest {
        identifiantDossier: string;
        idws: string;
        sdImpressionFZHCOPT: ISdImpressionFZHCOPT;
    }
    interface IResultatEditionFZHCOPT {
        /**
         * flux
         */
        fluxImpression: string;
    }
}

declare namespace ICRest.Modeles.EditerDocuments {
    interface IEditerDocumentsRequest {
        identifiantDossier: string;
        parametreEdition: IParametreEdition;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IParamEditique {
        /**
         * Id
         */
        id: string;
        /**
         * Data
         */
        data: string;
    }
    /**
     * @param idDossier identifiant du dossier en instruction
     * @param idDocument identifiant du document (i.e. modèle théorique)
     * @param identifiantWs
     * @param paramsEditiques paramètres d'éditique (i.e. couple clé/valeurs d'éventuelles données complémentaires)
     * @param niveauTraitement niveau de traitement porté dans l'objet InfoDocument permettant de lister les documents affichés pour édition
     *                         3 valeurs sont possibles : 49 pour 1 niveau dossier, 50 pour 2 niveau plan ou 51 pour niveau crédit.
     * @param formatEditique paramètre pour savoir si l'on est en format papier, industrialisé ou signature électronique
     * @param codeSignature code pout  demande de crédit SED (4) ou SAG (3), ou offre (2), ou offre en SAG (1), ou défaut (0) ou non initialisé (-30)
     * @param forcControleGestion booléen pour le forçage des contrôles au passage en gestion
     * @param forceControleEdition booléen pour le contrôle à l'édition de l'offre
     */
    interface IParametreEdition {
        /**
         * IdentifiantWsDocument
         */
        identifiantWsDocument: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * CodeSignature
         */
        codeSignature: number;
        /**
         * NiveauTraitement
         */
        niveauTraitement: number;
        /**
         * IdEntiteFonctionnelle
         */
        idEntiteFonctionnelle: string;
        /**
         * CodeTypeEntite
         */
        codeTypeEntite: string;
        /**
         * ModeEdition
         */
        modeEdition: number;
        /**
         * TypeEditique
         */
        typeEditique: number;
        /**
         * FormatEditique
         */
        formatEditique: number;
        /**
         * Params
         */
        params: Array<IParamEditique>;
        /**
         * ForceCtrlEdition
         */
        forceControleEdition: boolean;
        /**
         * ForceCtrlGestion
         */
        forceControleGestion: boolean;
    }
    interface IDocument {
        /**
         * FluxImpression
         */
        fluxImpression: string;
        /**
         * Nom
         */
        nom: string;
        /**
         * Libelle
         */
        libelle: string;
    }
    interface IResultatEditionDocuments {
        /**
         * ListeDocument
         */
        listeDocument: Array<IDocument>;
        /**
         * AnomaliesLecture
         */
        anomaliesLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.EnregistrerComPieces {
    interface IResultatOffrePretIndustrialisee {
        /**
         * Code
         */
        code: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
    interface IEnregistrerCommentairePiecesRequest {
        identifiantDossier: string;
        commissionPieceClient: string;
        commissionPieceAgence: string;
    }
}

declare namespace ICRest.Modeles.ExecuterCalculDelegationDecision {
    interface IExecuterCalculDelegationDecisionRequest {
        identifiantDossier: string;
        identifiantAgentTransfert: string;
        reponse: boolean;
        continu: boolean;
    }
    interface IErreurDelegation {
        /**
         * Titre
         */
        titre: string;
        /**
         * DescriptionsErreur
         */
        descriptionsErreur: Array<string>;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IResultatCalculDelegation {
        /**
         * MoteurDelegationExterne
         */
        moteurDelegationExterne: boolean;
        /**
         * Nofcdi_NiveauDelegationAgent
         */
        niveauDelegationAgent: string;
        /**
         * Tvfyal_Valeur
         */
        valeur: string;
        /**
         * ReponseAutorisation
         */
        reponseAutorisation: boolean;
        /**
         * LibelleNiveauRequis
         */
        libelleNiveauRequis: string;
        /**
         * Cvfide_NiveauRequis
         */
        niveauRequis: string;
        /**
         * ErreurDelegation
         */
        erreurDelegation: IErreurDelegation;
        /**
         * DateDecision
         * Type date au format yyyy-MM-dd
         */
        dateDecision: string;
        /**
         * EtatDossier
         */
        etatDossier: string;
        /**
         * NotationBale2
         */
        notationBale2: string;
        /**
         * AccesSaccef
         */
        accessoireSaccef: boolean;
        /**
         * AccesEnet
         */
        accessoireEnet: boolean;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.FermerDossier {
    interface IFermerDossierRequest {
        identifiantDossier: string;
        sauvegarde: boolean;
        pourLeCompteDe: string;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
}

declare namespace ICRest.Modeles.HistoriserChangementEtatActe {
    interface IEntreeTransaction {
        /**
         * ForceeControle
         */
        forceeControle: boolean;
        /**
         * Idws
         */
        idws: string;
    }
    interface IEntreeHistorisationActe extends IEntreeTransaction {
        /**
         * CodeSignature
         */
        codeSignature: number;
        /**
         * CodeActionHistorisationActe
         */
        codeActionHistorisationActe: number;
        /**
         * IdentifiantPersonneConcernee
         */
        identifiantPersonneConcernee: string;
        /**
         * IdentifiantProchainSignataire
         */
        identifiantProchainSignataire: string;
        /**
         * DateSignatureActe
         * Type date au format yyyy-MM-dd
         */
        dateSignatureActe: string;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IRapportTransaction {
        /**
         * OperationReussie
         */
        operationReussie: boolean;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
    }
    interface ISortieHistorisationActe extends IRapportTransaction {
    }
}

declare namespace ICRest.Modeles.LancerAppelSGFGAS {
    interface IRetour {
        libelle: string;
    }
    interface ILancerAppelSGFGASRequest {
        identifiantDossier: string;
        identifiantPlanFinancement: string;
        urlRetour: string;
        estDevis: boolean;
    }
}

declare namespace ICRest.Modeles.LireDecisionCnp {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface ILireDecisionCNPRequest {
        identifiantDossier: string;
        identifiantPersonne: string;
        identifiantPlanFinancement: string;
        codeCollectiviteCNP: string;
        forcerDecision: boolean;
    }
    interface IResultatDecisionCNP {
        /**
         * AssuranceCNP
         */
        assuranceCNP: string;
        /**
         * LibErreur
         */
        libelleErreur: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.LireDossierExterne {
    interface IEntreeLireDossierCBP {
        /**
         * IdntPlanFinancement
         */
        idPlanFinancement: number;
    }
    interface IEntreeLireDossierExterne {
        /**
         * IdntDoss
         */
        idDossier: string;
        /**
         * EntreeLireDossierCBP
         */
        entreeLireDossierCBP: IEntreeLireDossierCBP;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IResultatLireDossierCBP {
        /**
         * IdDossierCBP
         */
        idDossierCBP: string;
        /**
         * LienDossierExterne
         */
        lienDossierExterne: string;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
    }
    interface IResultatLireDossierExterne {
        /**
         * ResultatLireDossierCBP
         */
        resultatLireDossierCBP: IResultatLireDossierCBP;
    }
}

declare namespace ICRest.Modeles.LireElement {
    type IAnyType = any;
    interface ILireElementsRequest {
        identifiantDossier: string;
        listeIdentifiantElement: Array<string>;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IAplLecture extends IElementLecture {
        /**
         * Mtfiba_MtApl
         */
        montantAPL: number;
        /**
         * TypeApl
         */
        typeAPL: number;
        /**
         * Ctfape_PerdicApl
         */
        periodiciteAPL: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
    }
    interface ILigneTirageLecture extends IElementLecture {
        /**
         * Idfcej_IdntCaisEprg
         */
        idCaisseEpargne: number;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfcct_IdntCredElem
         */
        idCreditElement: string;
        /**
         * Lbvspo_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Npfbfi_DureCred
         */
        dureCredit: number;
        /**
         * Pefcfi_PerdCred
         */
        periodeCredit: number;
        /**
         * Mtfact_MtActlCred
         */
        montantActuarielCredit: number;
        /**
         * Txfamo_TxActuCred
         */
        tauxActuCredit: number;
    }
    interface ILigneInvestissementLecture extends IElementLecture {
        /**
         * Idfaoe_IdntOperAsscLignInvs
         */
        idOperAssuranceLigneInvs: string;
        /**
         * Dtfano_DateNotfAccr
         * Type date au format yyyy-MM-dd
         */
        dateNotfAccr: string;
        /**
         * Dffano_DateFinValdAccr
         * Type date au format yyyy-MM-dd
         */
        dateFinValiditeAccr: string;
        /**
         * Mtfaso_MtEmprTotlSurPlan
         */
        montantEmpruntTotalSurPlan: number;
        /**
         * Mkfadi_MtRestDisp
         */
        montantRestantDisp: number;
        /**
         * Dtam_DateAnnlModf
         * Type date au format yyyy-MM-dd
         */
        dateAnnulationModification: string;
        /**
         * Cdam_CodeMotfAnnlModf
         */
        codeMotfAnnulationModification: string;
        /**
         * ListIdntLignTirg
         */
        listeIdLigneTirg: Array<string>;
    }
    interface IInfoRegroupementLecture extends IElementLecture {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Mkfd01_MtCrd
         */
        montantCRD: number;
        /**
         * Cifcao_OrigInfoSurMtCrd
         */
        origineInformationSurMontantCRD: number;
        /**
         * Dtfcer_DateEnvsPourRembAntc
         * Type date au format yyyy-MM-dd
         */
        dateEnvsPourRemboursementAnticipe: string;
        /**
         * Cdfara_CodeExstModlIndmRaSurCred
         */
        codeExisteModeleIndemniteRaSurCredit: number;
        /**
         * Mtfhir_MtEstmRa
         */
        montantEstmRa: number;
        /**
         * Cifca1_OrigInfoSurMtEstmIndmRa
         */
        origineInformationSurMontantEstmIndemniteRa: number;
        /**
         * Cifafr_CodeIndicFinnIndmRa
         */
        codeIndiceFinancierIndemniteRa: number;
        /**
         * Cifamp_CodeModlPrevPourRa
         */
        codeModelePrevPourRa: number;
        /**
         * Cifca2_OrigInfoSurExstPrevCont
         */
        origineInformationSurExistePrevContrat: number;
        /**
         * Npfapr_DelPrevCont
         */
        delPrevContrat: number;
        /**
         * Cifca3_OrigInfoSurDelPrevCont
         */
        origineInformationSurDelPrevContrat: number;
        /**
         * Cifagh_ExstUneGarnHypt
         */
        existeUneGarantieHypotheque: number;
        /**
         * Mtfgmt_MtFrsMainTotlUneGarnHypt
         */
        montantFrsMainTotalUneGarantieHypotheque: number;
        /**
         * Cifac4_OrigInfoSurMtFrsMainTotl
         */
        origineInformationSurMontantFrsMainTotal: number;
        /**
         * Cifafm_CodeFinnFrsMain
         */
        codeFinancierFrsMain: number;
        /**
         * Mtfaid_MtInteDusJusqFinCred
         */
        montantInterieurDusJusqFinCredit: number;
        /**
         * Ctfcaf_CodeAffecTypeObjt
         */
        codeAffectationTypeObjet: number;
        /**
         * Mefepd_MtecheHorsAccs
         */
        mtecheHorsAccessoire: number;
        /**
         * Cifca5_OrigInfoSurMtecheHorsAccs
         */
        origineInformationSurMtecheHorsAccessoire: number;
        /**
         * Trfrtx_TxRefe
         */
        tauxReference: number;
        /**
         * Cifac6_OrigInfoSurTxRefe
         */
        origineInformationSurTauxReference: number;
        /**
         * Dtfari_DateRappDonn
         * Type date au format yyyy-MM-dd
         */
        dateRappDonneur: string;
        /**
         * Cifac7_OrigInfoSurDateFinCred
         */
        origineInformationSurDateFinCredit: number;
        /**
         * Cifac8_OrigInfoSurMtRestDuSuurPretRach
         */
        origineInformationSurMontantRestantDuSuurPretRach: number;
        /**
         * Cifac9_OrigInfoSurTypeLoiScrvCredRach
         */
        origineInformationSurTypeLoiScrivenerCreditRach: number;
        /**
         * IdntPretReam
         */
        idPretReamenagement: string;
    }
    interface ICompteProfessionnelLecture extends ICompteLecture {
        /**
         * Nofmcp_RefePrdtCe
         */
        referenceProduitCE: string;
        /**
         * Nbfmjp_NbJourDepsAutrPourCpteProf
         */
        nombreJourDepsAutrePourCompteProf: number;
        /**
         * Cdfmxp_CodeCtx
         */
        codeCtx: number;
    }
    interface ICompteDepotLecture extends ICompteLecture {
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmet_NumeEnttTitl
         */
        numeroEntiteTitulaire: number;
        /**
         * Lbfmet_LiblEnttTitl
         */
        libelleEntiteTitulaire: string;
        /**
         * Cdfmmc_CodeCompoEntiteTitulaire
         */
        codeCompositionEntiteTitulaire: number;
        /**
         * Cdfmcp_CodeEttPrdt
         */
        codeEtatProduit: number;
        /**
         * Mtfmmy_SoldMoyeLongTermCpteDepoCe
         */
        soldMoyenLongTermeCompteDepoCE: number;
        /**
         * Mtfmbs_SoldMiniCpteDepoCe
         */
        soldMinimumCompteDepoCE: number;
        /**
         * Mtfmds_SoldRelCpteDepoCe
         */
        soldRelCompteDepoCE: number;
        /**
         * Ctfmca_CodeTypeCart
         */
        codeTypeCartographie: number;
        /**
         * Dtfmca_DateDelvCart
         * Type date au format yyyy-MM-dd
         */
        dateDelvCartographie: string;
        /**
         * Ctfmtd_CodeTypeDecvCpteDepo
         */
        codeTypeDecvCompteDepo: number;
        /**
         * Mtfmde_MtDecvAutrSurCpteDepo
         */
        montantDecvAutreSurCompteDepo: number;
        /**
         * Mtfmvr_MtTotlVerstCredRelsSurCpteDepo
         */
        montantTotalVersementCreditReleaseSurCompteDepo: number;
        /**
         * Nbfmjd_NbJourDepsAutrDecv
         */
        nombreJourDepsAutreDecv: number;
        /**
         * Mtfmpe_MtPrelExteRelsSurCpteDepo
         */
        montantPrelExteReleaseSurCompteDepo: number;
        /**
         * Cdfmdj_CodeDepsJust
         */
        codeDepsJustificatif: number;
        /**
         * Cdfmdi_CodePresDecvIrreSurCpteDepo
         */
        codePresDecvIrreSurCompteDepo: number;
        /**
         * Cdfmae_CodeExstCartBancHorsCe
         */
        codeExisteCartographieBancaireHorsCE: number;
        /**
         * Cdfmrc_CodeComnRelvCpteHorsCe
         */
        codeComnRelvCompteHorsCE: number;
        /**
         * Cdfmch_CodeExstCheq
         */
        codeExisteCheq: number;
        /**
         * Mtfmyc_SoldMoyeMensCrtCpteDepoCe
         */
        soldMoyenMensCreationCompteDepoCE: number;
        /**
         * Mtfmcm_MvtCredMensSurCpteDepo
         */
        mvtCreditMensSurCompteDepo: number;
        /**
         * Ctfmfc_CodeTypeFctCpteDepoCeHorsCe
         */
        codeTypeFctCompteDepoCEHorsCE: number;
        /**
         * Ddfmhc_DateOuerCpteDepoHorsCe
         * Type date au format yyyy-MM-dd
         */
        dateOuerCompteDepoHorsCE: string;
        /**
         * Cdfmbq_Codeetbl
         */
        codeEtablissement: string;
        /**
         * Cdfmgu_CodeGuic
         */
        codeGuic: string;
        /**
         * LibelleFctCpteDepoCeHorsCe
         */
        libelleFctCpteDepoCeHorsCe: string;
        /**
         * Lifcee_LibEtabHorsCE
         */
        libelleEtablissementHorsCE: string;
        /**
         * Mcffa1_MtTotAgiosM1HorsCE
         */
        montantTotalAgiosM1HorsCE: number;
        /**
         * Mcffa2_MtTotAgiosM2HorsCE
         */
        montantTotalAgiosM2HorsCE: number;
        /**
         * Mcffa3_MtTotAgiosM3HorsCE
         */
        montantTotalAgiosM3HorsCE: number;
        /**
         * Ciffci_IndCommIntCDDHorsCE
         */
        indicateurCommIntervCDDHorsCE: number;
        /**
         * Ciffim_IndImpayeCDDHorsCE
         */
        indicateurImpayeCDDHorsCE: number;
        /**
         * Ciffrc_IndRejetChqCDDHorsCE
         */
        indicateurRejetChequeCDDHorsCE: number;
        /**
         * Ciffrp_IndRejetPrlvtCDDHorsCE
         */
        indicateurRejetPrelevCDDHorsCE: number;
        /**
         * Cifffi_IndFraisDosBDFCDDHorsCE
         */
        indicateurFraisDossBDFCDDHorsCE: number;
        /**
         * Ciffpp_IndPrlvtPartielCDDHorsCE
         */
        indicateurPrelevPartCDDHorsCE: number;
        /**
         * Nbffd1_NbJoursDebM1CDDHorsCE
         */
        nombreJoursDebiteurM1CDDHorsCE: number;
        /**
         * Nbffd2_NbJoursDebM2CDDHorsCE
         */
        nombreJoursDebiteurM2CDDHorsCE: number;
        /**
         * Nbffd3_NbJoursDebM3CDDHorsCE
         */
        nombreJoursDebiteurM3CDDHorsCE: number;
        /**
         * Mtfcsa_MtSoldeArreteM1CDDHorsCE
         */
        montantSoldeArreteM1CDDHorsCE: number;
        /**
         * Mtfcsb_MtSoldeArreteM2CDDHorsCE
         */
        montantSoldeArreteM2CDDHorsCE: number;
        /**
         * Mtfcsc_MtSoldeArreteM3CDDHorsCE
         */
        montantSoldeArreteM3CDDHorsCE: number;
    }
    interface ICompteLecture extends IElementLecture {
        /**
         * Nufpcp_NumeCpte
         */
        numeroCompte: string;
        /**
         * Dtfmou_DateOuvr
         * Type date au format yyyy-MM-dd
         */
        dateOuverture: string;
        /**
         * Ctfpdt_ModeCompo
         */
        modeComposition: number;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
        /**
         * Cdfppr_TypeCpte
         */
        typeCompte: string;
        /**
         * Libelle
         */
        libelle: string;
    }
    interface ICreditExistantLecture extends IChargeLecture {
        /**
         * Cdfccg_CodeTypeCredCe
         */
        codeTypeCreditCE: string;
        /**
         * Cdfopc_CodePrsCompCred
         */
        codePresenceCompCredit: number;
        /**
         * Cdfimu_InvsUsgLocf
         */
        invsUsageLocf: number;
        /**
         * Ctfmlc_LienPersCred
         */
        lienPersonneCredit: number;
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Ctfmtc_CodeTypeCred
         */
        codeTypeCredit: number;
        /**
         * Mtfaoc_MtOrigCred
         */
        montantOrigineCredit: number;
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
        /**
         * Ddfmam_DateDebtAmrt
         * Type date au format yyyy-MM-dd
         */
        dateDebutAmortissement: string;
        /**
         * Dtfam0_DateMer0
         * Type date au format yyyy-MM-dd
         */
        dateMER0: string;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmcp_RefePrdtCe
         */
        referenceProduitCE: string;
        /**
         * Nofmc2_CompRefePrdtCe
         */
        compReferenceProduitCE: string;
        /**
         * Nofmet_NumeEnttTitlCe
         */
        numeroEntiteTitulaireCE: number;
        /**
         * Lbfmet_LiblEnttTitlCe
         */
        libelleEntiteTitulaireCE: string;
        /**
         * Mkfmpc_MtCaptDejaRemb
         */
        montantCapitalDejaRemboursement: number;
        /**
         * Mefmpe_MtPrcheche
         */
        montantPrcheche: number;
        /**
         * Mefmea_MtPrmeecheAmrt
         */
        montantPrmeecheAmortissement: number;
        /**
         * Mefmpc_MtechePrsComp
         */
        mtechePresenceComp: number;
        /**
         * Nbfmim_NbImpayes
         */
        nombreImpayes: number;
        /**
         * Nbfmir_NbImpeReglSurLesMoisGlss
         */
        nombreImpeRegleSurLesMoisGlss: number;
        /**
         * Ptfmam_PerdAmrt
         */
        periodeAmortissement: number;
        /**
         * Npfmam_DureAmrt
         */
        dureAmortissement: number;
        /**
         * Cifgeh_CodeIndicAInclettHypt
         */
        codeIndiceAInclettHypotheque: boolean;
        /**
         * Mtfggi_MtGarn
         */
        montantGarantie: number;
        /**
         * Cmfmro_MotfRembAntc
         */
        motfRemboursementAnticipe: string;
        /**
         * Cdfmro_RembAvecAntc
         */
        remboursementAvecAnticipe: number;
        /**
         * Lbfmro_LiblMotfRembAntc
         */
        libelleMotfRemboursementAnticipe: string;
        /**
         * InvestissementLocatifVisible
         */
        investissementLocatifVisible: boolean;
        /**
         * InvestissementLocatifAccessible
         */
        investissementLocatifAccessible: boolean;
        /**
         * ListIdntPhssCredExst
         */
        listeIdPhssCreditExiste: Array<string>;
        /**
         * LibelleCodeTypeCred
         */
        libelleCodeTypeCred: string;
    }
    interface IChargeLecture extends IElementLecture {
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Txfmrc_TxPondChrg
         */
        tauxPondereCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Nufpct_NumeContEprg
         */
        numeroContratEpargne: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
        /**
         * Lbfpch_LiblCharge
         */
        libelleCharge: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * IdntGrpeIntv
         */
        idGrpeIntervenant: string;
    }
    interface IInterditBancaireLecture extends IElementLecture {
        /**
         * Cdfpbd_CodeRepnBdf
         */
        codeRepnBDF: number;
        /**
         * Cdfpfi_CodeRepnFicp
         */
        codeRepnFicp: number;
        /**
         * Ctfpbd_CodeTypeRepnBdf
         */
        codeTypeRepnBDF: string;
        /**
         * Ctfpfi_CodeTypeRepnFicp
         */
        codeTypeRepnFicp: string;
        /**
         * Dtfpbd_DateApplBdf
         * Type date au format yyyy-MM-dd
         */
        dateApplicationBDF: string;
        /**
         * Dtfpfi_DateApplFicp
         * Type date au format yyyy-MM-dd
         */
        dateApplicationFicp: string;
        /**
         * Lbfpbd_LiblRepnBdf
         */
        libelleRepnBDF: string;
        /**
         * Lbfpfi_LiblRepnFicp
         */
        libelleRepnFicp: string;
        /**
         * Cdfmas_CodeArreSurSalr
         */
        codeArreSurSalr: number;
        /**
         * Dtfpfb_DateApplFbe
         * Type date au format yyyy-MM-dd
         */
        dateApplicationFbe: string;
        /**
         * Cdfpfb_CodeRepnFbe
         */
        codeRepnFbe: number;
        /**
         * Cdfmln_CodePresListnSurCntrTechRegn
         */
        codePresListnSurCntrTechniqueRegn: number;
        /**
         * Lbfmln_LiblListnSurCntrTechRegn
         */
        libelleListnSurCntrTechniqueRegn: string;
        /**
         * Cbfpfb_CodeCottFibenDirg
         */
        codeCotisationFibenDirg: string;
        /**
         * IdntPersPhys
         */
        idPersonnePhys: string;
    }
    interface IActiviteLecture extends IElementLecture {
        /**
         * Cdfmcs_CodeClssRisqCsp
         */
        codeClasseRisqueCSP: number;
        /**
         * Lbfmcs_LibelleClssRisqCsp
         */
        libelleClasseRisqueCSP: string;
        /**
         * Dtfmcs_DateEfftCsp
         * Type date au format yyyy-MM-dd
         */
        dateEffetCSP: string;
        /**
         * Dtfmea_DateEmbc
         * Type date au format yyyy-MM-dd
         */
        dateEmbc: string;
        /**
         * Ctfmce_CodeTypeContEmbc
         */
        codeTypeContratEmbc: number;
        /**
         * LibelleTypeContratEmbc
         */
        libelleTypeContratEmbc: string;
        /**
         * Lbfmpl_RaisSoclEmplr
         */
        raisonSocialeEmplr: string;
        /**
         * Cpfmpl_CodePostEmplr
         */
        codePosteEmplr: string;
        /**
         * Lofmpl_CodeApNEmplr
         */
        codeApNEmplr: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmsa_CodePresActvSalr
         */
        codePresActiviteSalr: number;
        /**
         * Cdfmsu_CodePresSuivPers
         */
        codePresSuivantPersonne: number;
        /**
         * Nbfmkm_NbKilmEtrLogmTrvl
         */
        nombreKilmEntreLogementTrvl: number;
        /**
         * Dffmea_DateFinCdd
         * Type date au format yyyy-MM-dd
         */
        dateFinCdd: string;
        /**
         * Ctfmsa_CodeSectActv
         */
        codeSecteurActivite: number;
        /**
         * LibelleSecteurActv
         */
        libelleSecteurActivite: string;
        /**
         * IdntPersPhys
         */
        idPersonnePhys: string;
    }
    interface IButLocatifLecture extends IElementLecture {
        /**
         * Cdfopl_IndicPretTrnsLocf
         */
        indicePretTransfertLocf: boolean;
        /**
         * Nufofg_NumeDecsFavrGlbl
         */
        numeroDecisionFavrGlbl: number;
        /**
         * Dtfodf_DateDecsFavrLoct
         * Type date au format yyyy-MM-dd
         */
        dateDecisionFavrLoct: string;
        /**
         * Cdfofg_IndicDecsGlblFavr
         */
        indiceDecisionGlblFavr: boolean;
        /**
         * Dtfocl_DateConvLoct
         * Type date au format yyyy-MM-dd
         */
        dateConventionLoct: string;
        /**
         * Cdfofi_NatrAvtgFisc
         */
        natureAvantageFiscal: string;
        /**
         * Mtfofi_MtAvtgFisc
         */
        montantAvantageFiscal: number;
        /**
         * Mtfogl_MtFrsAnnlGestLogm
         */
        montantFrsAnnulationGestionLogement: number;
        /**
         * Mtfoel_MtFrsAnnlEntnLogm
         */
        montantFrsAnnulationEntnLogement: number;
        /**
         * Mtfofo_MtTaxeFonc
         */
        montantTaxeFonc: number;
        /**
         * Cdfolg_PresServVacnLogm
         */
        presServiceVacnLogement: boolean;
        /**
         * Cdfoli_PresUneAssrLoyeImpe
         */
        presUneAssuranceLoyeImpe: boolean;
        /**
         * Mtfolp_MtAnnuLoyePerc
         */
        montantAnnuLoyePerc: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface ISoulteFinanceeLecture extends IElementLecture {
        /**
         * Mtfoac_MtSoul
         */
        montantSoul: number;
        /**
         * Ctfmpt_PermDetrSiSoulFaitSuiteDivo
         */
        permDetrSiSoulFaitSuiteDivo: boolean;
        /**
         * Txfapo_PctPrprOrig
         */
        pourcentageProprietaireOrigine: number;
        /**
         * Mtfmvc_ValrActvCorrValrBienOrig
         */
        valeurActiviteCorrValeurBienOrigine: number;
        /**
         * Nbfosh_SurfHabtBienSous
         */
        surfHabitationBienSous: number;
        /**
         * Dtfoac_DateAcqsBienSous
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBienSous: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * IdntBienSjac
         */
        idBienSousJacent: string;
    }
    interface ITerrainSousJacentLecture extends IBienSousJacentLecture {
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfoft_TerrEstFinnParCred
         */
        terrEstFinancierParCredit: number;
        /**
         * Dtfoat_DateEntrPtrmDateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateEntrPatrimoineDateAcqs: string;
        /**
         * MtLoyeParMois
         */
        montantLoyeParMois: number;
        /**
         * Ctfmma_ModeAcqsTerr
         */
        modeAcqsTerr: number;
    }
    interface IDetailCoutObjetLecture extends IElementLecture {
        /**
         * Cnfctr_CodeNatrTrvx
         */
        codeNatureTravaux: string;
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Mtfoct_CoutTrvx
         */
        coutTravaux: number;
        /**
         * IdntTrvxFinn
         */
        idTravauxFinancier: string;
    }
    interface ITerrainFinanceLecture extends IElementLecture {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
        /**
         * Dtfaot_DateAcqsTerr
         * Type date au format yyyy-MM-dd
         */
        dateAcqsTerr: string;
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfodt_CodeDonTerr
         */
        codeDonTerr: number;
        /**
         * Cdfoft_CodeFinnTerr
         */
        codeFinancierTerr: number;
        /**
         * Mtfcfn_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IDossierLecture extends IElementLecture {
        /**
         * Idfadi_IdntDoss
         */
        idDossier: string;
        /**
         * VersDoss
         */
        versionDossier: number;
        /**
         * EstDossierPartenaire
         */
        estDossierPartenaire: boolean;
        /**
         * Cdfiei_CodeImprParExprVers
         */
        codeImprParExpressionVersement: number;
        /**
         * Cdfiag_CodeAppliChrgDoss
         */
        codeApplicationChargeDossier: number;
        /**
         * Nbfapo_NbPassOffr
         */
        nombrePassOffre: number;
        /**
         * Dtfmva_DateDernReslAdr
         * Type date au format yyyy-MM-dd
         */
        dateDernierReslAdresse: string;
        /**
         * Dgfano_DateHorzProj
         * Type date au format yyyy-MM-dd
         */
        dateHorizonProjet: string;
        /**
         * Cdfado_CodeVisbInstr
         */
        codeVisbInstruction: number;
        /**
         * DossExstCent
         */
        dossierExisteCentral: boolean;
        /**
         * NbPersAssrParDeft
         */
        nombrePersonneAssuranceParDeft: number;
        /**
         * ModfEffcPendSess
         */
        modificationEffcPendantSess: boolean;
        /**
         * ModeOuvrDoss
         */
        modeOuvertureDossier: number;
        /**
         * DossModf
         */
        dossierModification: boolean;
        /**
         * ExisteMandatSEPA
         */
        existeMandatSEPA: boolean;
        /**
         * PjPrealableToutesRecues
         */
        pjPrealableToutesRecues: boolean;
        /**
         * PjSuspensifToutesRecues
         */
        pjSuspensifToutesRecues: boolean;
        /**
         * TypeMoteurADR
         */
        typeMoteurADR: number;
        /**
         * Cifttv_TechVent
         */
        techniqueVent: number;
        /**
         * Cifoli_CodeLivrnImme
         */
        codeLivrnImme: boolean;
        /**
         * Nofaac_NumeAccrCmps
         */
        numeroAccrCmps: number;
        /**
         * Cnfaeg_EnggRevc
         */
        engagementRevc: number;
        /**
         * Dtfasp_DateSignPret
         * Type date au format yyyy-MM-dd
         */
        dateSignePret: string;
        /**
         * EvenMomnVertPourContConf
         */
        evenMomnVertPourContratConf: string;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * DateTrtRegl
         * Type date au format yyyy-MM-dd
         */
        dateTraitementRegle: string;
        /**
         * Cdfbve_ModReglVerst
         */
        modRegleVersement: string;
        /**
         * Cdfiro_IndicPrrgOffr
         */
        indicePrrgOffre: number;
        /**
         * Idfccp_IdntConvPres
         */
        idConventionPres: string;
        /**
         * Idfipp_IdntPres
         */
        idPres: string;
        /**
         * Lbfpen_EnsgnPres
         */
        ensgnPres: string;
        /**
         * Mtfasi_MtSouhIntlEmpr
         */
        montantSouhInitialEmprunt: number;
        /**
         * Ctfaoc_OrigCommProj
         */
        origineCommissionProjet: number;
        /**
         * Cefapd_CodeEttPlns
         */
        codeEtatPlns: number;
        /**
         * Cdfaar_CodeApplAnlsRisq
         */
        codeApplicationAnlsRisque: boolean;
        /**
         * Idfaac_IdntDossGest
         */
        idDossierGestion: string;
        /**
         * Idfaeg_IdntelemStrcGest
         */
        idElementStructureGestion: string;
        /**
         * Idfast_IdntelemStrcInstr
         */
        idElementStructureInstruction: string;
        /**
         * Idfagd_CodeAgntDecd
         */
        codeAgentDecd: string;
        /**
         * Ctfacf_CodeTyplCadrFisc
         */
        codeTypologieCadreFiscal: string;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cifcsb_CodeLevrSecrBanc
         */
        codeLevrSecrBancaire: number;
        /**
         * Dtfccr_DateCretDoss
         * Type date au format yyyy-MM-dd
         */
        dateCreationDossier: string;
        /**
         * Dmfidm_DateDernMaj
         * Type date au format yyyy-MM-dd
         */
        dateDernierMAJ: string;
        /**
         * Ctfado_EtatDoss
         */
        etatDossier: number;
        /**
         * Cefado_SousEtatDoss
         */
        sousEtatDossier: number;
        /**
         * Dtfadf_DateDemnFinn
         * Type date au format yyyy-MM-dd
         */
        dateDemandeFinancier: string;
        /**
         * Dtfaem_DateemssOffr
         * Type date au format yyyy-MM-dd
         */
        dateemssOffre: string;
        /**
         * Dtfirl_DateCiblProj
         * Type date au format yyyy-MM-dd
         */
        dateCiblProjet: string;
        /**
         * Cdfaod_CodeOrigDemn
         */
        codeOrigineDemande: string;
        /**
         * Dtfard_DateAccrPrtr
         * Type date au format yyyy-MM-dd
         */
        dateAccrPrtr: string;
        /**
         * Cefahb_CodeEttEnggHors
         */
        codeEtatEngagementHors: number;
        /**
         * Mtfahb_MtEnggHorsBiln
         */
        montantEngagementHorsBiln: number;
        /**
         * Dffavl_DateFinValdOffr
         * Type date au format yyyy-MM-dd
         */
        dateFinValiditeOffre: string;
        /**
         * Dtfaro_DateRecpOffrParClnt
         * Type date au format yyyy-MM-dd
         */
        dateRecuperationOffreParClient: string;
        /**
         * Dtfaef_DateEfftOffr
         * Type date au format yyyy-MM-dd
         */
        dateEffetOffre: string;
        /**
         * Cdfdrg_ModeRegl
         */
        modeRegle: string;
        /**
         * Nufpr1_NumeCpteSecoPrel
         */
        numeroCompteSecoPrel: string;
        /**
         * Nufddt_DomcTresCpteSeco
         */
        domiciliationTresCompteSeco: string;
        /**
         * Dtfart_DateLimtRetrEmprLoiConso
         * Type date au format yyyy-MM-dd
         */
        dateLimiteRetardEmpruntLoiConsommation: string;
        /**
         * Dffaof_DateLimtRetrOffrLoiConso
         * Type date au format yyyy-MM-dd
         */
        dateLimiteRetardOffreLoiConsommation: string;
        /**
         * Dffaao_DateMiniAccpOffrLoiImmo
         * Type date au format yyyy-MM-dd
         */
        dateMinimumAccpOffreLoiImmobilier: string;
        /**
         * Dtfasg_DateSignEmpr
         * Type date au format yyyy-MM-dd
         */
        dateSigneEmprunt: string;
        /**
         * Dtfare_DateRefuOffrParEmpr
         * Type date au format yyyy-MM-dd
         */
        dateRefuOffreParEmprunt: string;
        /**
         * Dffavi_DateMinnPourVerstFondLoiConso
         * Type date au format yyyy-MM-dd
         */
        dateMinnPourVersementFondLoiConsommation: string;
        /**
         * Dtfieo_DateEdtnOffr
         * Type date au format yyyy-MM-dd
         */
        dateEditionOffre: string;
        /**
         * Idfaex_IdntExtnDoss
         */
        idExterneDossier: string;
        /**
         * Ctfals_TypeLoiScrv
         */
        typeLoiScrivener: number;
        /**
         * Cdfafc_CodeAuthCont
         */
        codeAuthentiqueContrat: boolean;
        /**
         * Npfars_DelRetrScrv1
         */
        delRetardScrivener1: number;
        /**
         * Cdfive_CodeVersCret
         */
        codeVersementCreation: string;
        /**
         * Cdfwve_CodeVersDernModf
         */
        codeVersementDernierModification: string;
        /**
         * Mtfcon_MtVerstCnvn
         */
        montantVersementCnvn: number;
        /**
         * Txaufi_PctFinn
         */
        pourcentageFinancier: number;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Ctfco2_TorechlVerst
         */
        torechlVersement: string;
        /**
         * Cdfali_CodeEtatEnvDossSaccef
         */
        codeEtatEnvoiDossierSaccef: number;
        /**
         * Dtfali_DateLieEnvSaccef
         * Type date au format yyyy-MM-dd
         */
        dateLieEnvoiSaccef: string;
        /**
         * Idfcpo_IdntEnvSaccef
         */
        idEnvoiSaccef: string;
        /**
         * Idfaoc_IdntOrigDemn
         */
        idOrigineDemande: string;
        /**
         * Lbfaoc_LiblOrigDemn
         */
        libelleOrigineDemande: string;
        /**
         * Dgfapn_DatePrevSignNotr
         * Type date au format yyyy-MM-dd
         */
        datePrevSigneNotaire: string;
        /**
         * Nufadn_RefeExtnDoss
         */
        referenceExterneDossier: string;
        /**
         * Idfas5_ElemStrc5
         */
        elementStructure5: string;
        /**
         * Idfas6_ElemStrc6
         */
        elementStructure6: string;
        /**
         * ModeDecn
         */
        modeDecn: boolean;
        /**
         * Llfic1_CritRechAppli1
         */
        critereRechercheApplication1: string;
        /**
         * Llfic2_CritRechAppli2
         */
        critereRechercheApplication2: string;
        /**
         * Llfic3_CritRechAppli3
         */
        critereRechercheApplication3: string;
        /**
         * Llfic4_CritRechAppli4
         */
        critereRechercheApplication4: string;
        /**
         * Llfic5_CritRechAppli5
         */
        critereRechercheApplication5: string;
        /**
         * Ctfaen_CodeTypeEngg
         */
        codeTypeEngagement: string;
        /**
         * Dtfano_DateSignDossEnv
         * Type date au format yyyy-MM-dd
         */
        dateSigneDossierEnvoi: string;
        /**
         * Dffan1_DateFinValdAccr
         * Type date au format yyyy-MM-dd
         */
        dateFinValiditeAccr: string;
        /**
         * IndicOffrPre
         */
        indiceOffrePre: boolean;
        /**
         * Ctfipi_CodePrcsInstr
         */
        codeProcessusInstruction: string;
        /**
         * Ctfitr_CodeTrtComp
         */
        codeTraitementComp: string;
        /**
         * Cefipc_CodeEttPrsChrgDoss
         */
        codeEtatPresenceChargeDossier: number;
        /**
         * Cefiac_CodeEttActvDoss
         */
        codeEtatActiviteDossier: number;
        /**
         * IndicPrsChrgPiecJustParPiec
         */
        indicePresenceChargePieceJustificatifParPiece: number;
        /**
         * Idfabp_IdntAgntBoActlChrgDoss
         */
        idAgentBoActuarielChargeDossier: string;
        /**
         * Idfaes_IdntAgntPrprDoss
         */
        idAgentProprietaireDossier: string;
        /**
         * Idfaei_IdntAgntInstrDoss
         */
        idAgentInstructionDossier: string;
        /**
         * Idfaec_IdntAgntConnDoss
         */
        idAgentConnaissanceDossier: string;
        /**
         * Idfada_IdntAgntPourDecsConf
         */
        idAgentPourDecisionConf: string;
        /**
         * Idfael_IdntEnttDecs
         */
        idEntiteDecision: string;
        /**
         * Idfabi_IdntEnttPourTrnfBo
         */
        idEntitePourTransfertBo: string;
        /**
         * IdentifiantPourLeCompteDe
         */
        identifiantPourLeCompteDe: string;
        /**
         * BlocNotes
         */
        blocNotes: string;
        /**
         * Ctfcse_CodeEtpeSiml
         */
        codeEtapeSimulation: number;
        /**
         * Idfifd_NumeFichPres
         */
        numeroFichPres: string;
        /**
         * Cifapp_CodePrscDossPres
         */
        codePrscDossierPres: number;
        /**
         * Idfdma_ReferenceMandat
         */
        referenceMandat: string;
        /**
         * Dgfdms_DateSignMand
         * Type date au format yyyy-MM-dd
         */
        dateSigneMand: string;
        /**
         * Ctfind_PrecisionTaux
         */
        precisionTaux: number;
        /**
         * Cdficd_CodeDevCredDev
         */
        codeDevCreditDev: string;
        /**
         * Idfics_NumCompteDev
         */
        numeroCompteDev: string;
        /**
         * Ctfimr_ModeReglDev
         */
        modeRegleDev: string;
        /**
         * Ctfimv_ModReglVerstDev
         */
        modRegleVersementDev: string;
        /**
         * IdntComplDoss
         */
        idComplementDossier: string;
        /**
         * Cifiid_IntegrationDossierDeVente
         */
        integrationDossierDeVente: number;
        /**
         * Ctficc_CanalDeCreation
         */
        canalDeCreation: string;
        /**
         * Ctfici_CanalDeDistribution
         */
        canalDeDistribution: string;
        /**
         * Defiag_DateEnvConvAG
         * Type date au format yyyy-MM-dd
         */
        dateEnvoiConventionAG: string;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * Cifpcd_OuvCpteSupEchCred
         */
        ouvertureCompteSupEchCredit: boolean;
        /**
         * CodeTypeEditionAutorisee
         */
        codeTypeEditionAutorisee: string;
        /**
         * EstEcoPtzCopro
         */
        estEcoPtzCopro: boolean;
        /**
         * EstCopro100
         */
        estCopro100: boolean;
        /**
         * AutoriserCalculIndicateurEditionAgence
         */
        autoriserCalculIndicateurEditionAgence: boolean;
        /**
         * Cdfcsg_TypeSignature
         */
        typeSignature: number;
        /**
         * IdntBlcNotsDivr
         */
        idBlocNoteNotsDivr: string;
        /**
         * IdntRedcActe
         */
        idReductionActe: string;
        /**
         * IdntEmpr
         */
        idEmprunt: string;
        /**
         * ListIdntEven
         */
        listeIdEven: Array<string>;
        /**
         * ListIdntAvis
         */
        listeIdAvis: Array<string>;
        /**
         * ListIdntAlrtEntr
         */
        listeIdAlerteEntr: Array<string>;
        /**
         * ListIdntAlrtSort
         */
        listeIdAlerteSort: Array<string>;
        /**
         * ListIdntPrjt
         */
        listeIdProjet: Array<string>;
        /**
         * ListIdntVerst
         */
        listeIdVersement: Array<string>;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntGarants
         */
        listeIdGarants: Array<string>;
        /**
         * ListIdntClssPers
         */
        listeIdClassePersonne: Array<string>;
        /**
         * ListIdntAgents
         */
        listeIdAgents: Array<string>;
        /**
         * IdntPoolEPS
         */
        idPoolEPS: string;
        /**
         * Cdfcsh_CodeTypeSgnDmdeCred
         */
        codeTypeSignDmdCred: number;
        /**
         * Cdfasd_CodeEtatSgnDmdeCred
         */
        codeEtatSignDmdCred: number;
        /**
         * Hefced_DateEdtDmdeCred
         * Type date au format yyyy-MM-dd
         */
        dateEditionDmdCred: string;
        /**
         * Hefcds_DateSignDmdeCred
         * Type date au format yyyy-MM-dd
         */
        dateSignDmdCred: string;
        /**
         * Nofaea_NumEdtDmdeCred
         */
        numEditionDmdCred: number;
        /**
         * Cmmics_MotifConsultFICP
         */
        motifConsultFICP: number;
        /**
         * Mtfaff_MtFraisDebloAuto
         */
        montantFraisDebloAuto: number;
    }
    interface IAjustementTauxLecture extends IElementLecture {
        /**
         * RemiseMajoration
         */
        remiseMajoration: number;
        /**
         * NouvelleRemiseMajoration
         */
        nouvelleRemiseMajoration: number;
        /**
         * TauxActuel
         */
        tauxActuel: number;
        /**
         * TauxBonificationMajoration
         */
        tauxBonificationMajoration: number;
        /**
         * TauxConseillePondere
         */
        tauxConseillePondere: number;
        /**
         * MargeRevision
         */
        margeRevision: number;
        /**
         * RemiseTaux
         */
        remiseTaux: boolean;
        /**
         * ChangementTauxConseille
         */
        changementTauxConseille: boolean;
    }
    interface ISuiviPlanifieLecture extends IElementLecture {
        /**
         * Idfarv_IdntSuivPlnf
         */
        idSuivantPlafond: string;
        /**
         * Ctfcrw_CateSuivPlnf
         */
        cateSuivantPlafond: string;
        /**
         * Ctfcrv_CodeTypeSuivPlnf
         */
        codeTypeSuivantPlafond: string;
        /**
         * Ddfarv_DatePremSuiv
         * Type date au format yyyy-MM-dd
         */
        datePremierSuivant: string;
        /**
         * Dtfarv_DateSuivPlnf
         * Type date au format yyyy-MM-dd
         */
        dateSuivantPlafond: string;
        /**
         * Lbfarw_LiblLibrAsscSuiv
         */
        libelleLibrAssuranceSuivant: string;
        /**
         * Idfccl_IdntClse
         */
        idClasse: string;
        /**
         * Npfcrw_NbPerdSuivPlnf
         */
        nombrePeriodeSuivantPlafond: number;
        /**
         * Ptfcrv_CodePerdSuivPlnf
         */
        codePeriodeSuivantPlafond: number;
        /**
         * Ctfcrd_ReglDeclt
         */
        regleDeclaration: string;
        /**
         * Ctfcfp_TypePhasSuivPlnf
         */
        typePhaseSuivantPlafond: string;
        /**
         * Npfcrx_NbPerdDelDeclSuivPlnf
         */
        nombrePeriodeDelDeclarationSuivantPlafond: number;
        /**
         * Ptfcrx_CodePerdDelDeclSuivPlnf
         */
        codePeriodeDelDeclarationSuivantPlafond: number;
        /**
         * Ctfcrx_CodeAffecSuivPlnfPrdt
         */
        codeAffectationSuivantPlafondProduit: number;
        /**
         * Llfcrv_LiblSuivPlnf
         */
        libelleSuivantPlafond: string;
        /**
         * Llfcrd_LiblRegleDeclmt
         */
        libelleRegleDeclmt: string;
        /**
         * Cifcpe_CodeSuivPlnf
         */
        codeSuivantPlafond: number;
        /**
         * Llfccl_TitreClause
         */
        titreClause: string;
        /**
         * Lbfccl_LiblClause
         */
        libelleClause: string;
        /**
         * Cifcai_CodeSuivPlnfAutoIntr
         */
        codeSuivantPlafondAutomatiqueIntr: number;
        /**
         * Cifcpd_CodePostnmtDefaut
         */
        codePostnmtDefaut: number;
        /**
         * bObligatoire
         */
        obligatoire: boolean;
        /**
         * bAEditer
         */
        aEditer: boolean;
        /**
         * bCompletude
         */
        completude: boolean;
        /**
         * EstActifDateSuiviPlanifie
         */
        estActifDateSuiviPlanifie: boolean;
        /**
         * EstActifAEditer
         */
        estActifAEditer: boolean;
        /**
         * EstVisibleTypePhase
         */
        estVisibleTypePhase: boolean;
        /**
         * EstActifTypePhase
         */
        estActifTypePhase: boolean;
        /**
         * EstVisibleDuree
         */
        estVisibleDuree: boolean;
        /**
         * EstActifDuree
         */
        estActifDuree: boolean;
        /**
         * EstVisiblePeriode
         */
        estVisiblePeriode: boolean;
        /**
         * EstActifPeriodique
         */
        estActifPeriodique: boolean;
        /**
         * EstActifAPeriodique
         */
        estActifAPeriodique: boolean;
        /**
         * EstLienModificationActif
         */
        estLienModificationActif: boolean;
        /**
         * LibelleClause
         */
        libelleClause1: string;
        /**
         * LibellePeriode
         */
        libellePeriode: string;
        /**
         * LibelleDuree
         */
        libelleDuree: string;
        /**
         * LibelleTypePhase
         */
        libelleTypePhase: string;
        /**
         * LibelleDelaiDeclenchement
         */
        libelleDelaiDeclenchement: string;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface IOrigineApportLecture extends IElementLecture {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroPlanDossier
         */
        numeroPlanDossier: number;
        /**
         * Cdfoap_CodeOrigine
         */
        codeOrigine: number;
        /**
         * Mtfoap_MontantApportOrigine
         */
        montantApportOrigine: number;
    }
    interface IGarantLecture extends IElementLecture {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * Mcfpre_MtRessPond
         */
        montantRessourcePondere: number;
        /**
         * Mcfpce_MtChrgEmprHorsPrjtPond
         */
        montantChargeEmpruntHorsProjetPondere: number;
        /**
         * Mcfpac_MtAutrChrgPond
         */
        montantAutreChargePondere: number;
        /**
         * TotalEpargneContractuelle
         */
        totalEpargneContractuelle: number;
        /**
         * TotalEpargneLiquide
         */
        totalEpargneLiquide: number;
        /**
         * MtRessAvntProj
         */
        montantRessourceAvenantProjet: number;
        /**
         * MtChrgEmprAvntProj
         */
        montantChargeEmpruntAvenantProjet: number;
        /**
         * MtAutrChrgAvntProj
         */
        montantAutreChargeAvenantProjet: number;
        /**
         * RestVivrAvntProj
         */
        restantVivrAvenantProjet: number;
        /**
         * TxEndtAvntProj
         */
        tauxEndtAvenantProjet: number;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntCpteDeptGrpePers
         */
        listeIdCompteDeptGrpePersonne: Array<string>;
        /**
         * ListIdntCptePrfsPers
         */
        listeIdComptePrfsPersonne: Array<string>;
        /**
         * ListIdntRessGrpe
         */
        listeIdRessourceGrpe: Array<string>;
        /**
         * ListIdntChrgGrpe
         */
        listeIdChargeGrpe: Array<string>;
        /**
         * ListIdntCredExstGrpe
         */
        listeIdCreditExisteGrpe: Array<string>;
        /**
         * ListIdntFamlEprgPers
         */
        listeIdFamilleEpargnePersonne: Array<string>;
    }
    interface IRefusAssuranceExterneLecture extends IElementLecture {
        /**
         * Lvfdmr_MotifRefus
         */
        motifRefus: string;
        /**
         * Idfadi_IdDossierInstruction
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroRelatifPlanDossier
         */
        numeroRelatifPlanDossier: number;
        /**
         * Idfppe_Identifiantpersonne
         */
        identifiantpersonne: string;
        /**
         * Nofrfp_NumRangRefusProposition
         */
        numeroRangRefusProposition: number;
        /**
         * Lbfcia_CompagnieAssurance
         */
        compagnieAssurance: string;
        /**
         * Lbfrcc_ReferenceContrat
         */
        referenceContrat: string;
        /**
         * Ddfddr_DateReceptionDemande
         * Type date au format yyyy-MM-dd
         */
        dateReceptionDemande: string;
        /**
         * Ddfpic_DateImpressionDemande
         * Type date au format yyyy-MM-dd
         */
        dateImpressionDemande: string;
        /**
         * Cdfdda_CodeDecision
         */
        codeDecision: number;
        /**
         * Llfprp_RolePersonne
         */
        rolePersonne: string;
    }
    interface ILabel {
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampTextBox {
        /**
         * Text
         */
        text: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC003DC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IChampRadioButton {
        /**
         * Checked1
         */
        checked1: boolean;
        /**
         * Checked2
         */
        checked2: boolean;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle1
         */
        libelle1: string;
        /**
         * Libelle2
         */
        libelle2: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampCheckBox {
        /**
         * Checked
         */
        checked: boolean;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampTextBoxDate {
        /**
         * Text
         * Type date au format yyyy-MM-dd
         */
        text: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC003PC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
    }
    interface IFC003RE {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IFC004LA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: IChampTextBox;
    }
    interface IFC007ARO {
        /**
         * ContenuConditionsSuspensives
         */
        contenuConditionsSuspensives: IChampTextBox;
    }
    interface IFC010CP {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
    }
    interface ICreditTauxFixeLecture {
        /**
         * ReferenceIndiceCredit
         */
        referenceIndiceCredit: IChampTextBox;
        /**
         * TauxFixeCredit
         */
        tauxFixeCredit: IChampTextBox;
    }
    interface IFC010HS {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeLecture>;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: IChampTextBox;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: IChampTextBox;
        /**
         * DatePourvoirPersoMoraleAssurance
         */
        datePourvoirPersoMoraleAssurance: IChampTextBoxDate;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: IChampTextBox;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: IChampTextBox;
    }
    interface IFC010HSC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
    }
    interface IPretDevise {
        /**
         * IdentifiantProduitPretDevise
         */
        identifiantProduitPretDevise: IChampTextBox;
        /**
         * NumCreditPlanPretDevise
         */
        numeroCreditPlanPretDevise: IChampTextBox;
        /**
         * TypePretDevise
         */
        typePretDevise: IChampTextBox;
        /**
         * IdggiPretDevise
         */
        idggiPretDevise: IChampTextBox;
        /**
         * CdngPretDevise
         */
        cdngPretDevise: IChampTextBox;
        /**
         * FraisEnDevises
         */
        fraisEnDevises: IChampTextBox;
        /**
         * DevisePretDevise
         */
        devisePretDevise: IChampTextBox;
        /**
         * LabelInfoGarantieDevise
         */
        labelInformationGarantieDevise: ILabel;
        /**
         * FraisContrePartiePretDevise
         */
        fraisContrePartiePretDevise: IChampTextBox;
    }
    interface IFC010LCD {
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * RibPretDevise
         */
        ribPretDevise: IChampTextBox;
        /**
         * PretDevise
         */
        pretDevise: Array<IPretDevise>;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: IChampTextBox;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
    }
    interface IFC010LCM {
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * RibPretDevise
         */
        ribPretDevise: IChampTextBox;
        /**
         * PretDevise
         */
        pretDevise: Array<IPretDevise>;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: IChampTextBox;
    }
    interface IFC010LI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeLecture>;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: IChampTextBox;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: IChampTextBox;
        /**
         * DatePourvoirPersoMoraleAssurance
         */
        datePourvoirPersoMoraleAssurance: IChampTextBoxDate;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: IChampTextBox;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: IChampTextBox;
    }
    interface IFC010LIA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
        /**
         * PouvoirEmprunteurPersMorale
         */
        pouvoirEmprunteurPersonneMorale: IChampTextArea;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
    }
    interface IFC010LIC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
    }
    interface IFC017ANL {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017BON {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017CAT {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017CGV {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017CIF {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017SCP {
        /**
         * IndexGarantie
         */
        indexGarantie: number;
        /**
         * ExisteAgrementGarantie
         */
        existeAgrementGarantie: IChampCheckBox;
        /**
         * DateAgrementGarantie
         */
        dateAgrementGarantie: IChampTextBoxDate;
        /**
         * PublierGreffeGarantie
         */
        publierGreffeGarantie: IChampCheckBox;
        /**
         * ConjointsEmprunteursGarantie
         */
        conjointsEmprunteursGarantie: IChampTextBox;
        /**
         * ConjointsCautionsGarantie
         */
        conjointsCautionsGarantie: IChampTextBox;
    }
    interface IFC019AN {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * An1AttestationPTZ
         */
        an1AttestationPTZ: IChampCheckBox;
        /**
         * An2AttestationPTZ
         */
        an2AttestationPTZ: IChampCheckBox;
        /**
         * An3AttestationPTZ
         */
        an3AttestationPTZ: IChampCheckBox;
        /**
         * An4AttestationPTZ
         */
        an4AttestationPTZ: IChampCheckBox;
        /**
         * An5AttestationPTZ
         */
        an5AttestationPTZ: IChampCheckBox;
        /**
         * An6AttestationPTZ
         */
        an6AttestationPTZ: IChampCheckBox;
        /**
         * An7AttestationPTZ
         */
        an7AttestationPTZ: IChampCheckBox;
        /**
         * An8AttestationPTZ
         */
        an8AttestationPTZ: IChampCheckBox;
        /**
         * An9AttestationPTZ
         */
        an9AttestationPTZ: IChampCheckBox;
        /**
         * AnXAttestationPTZ
         */
        anXAttestationPTZ: IChampCheckBox;
        /**
         * AnXIAttestationPTZ
         */
        anXIAttestationPTZ: IChampCheckBox;
        /**
         * AnIIIAttestationPTZ
         */
        anIIIAttestationPTZ: IChampCheckBox;
        /**
         * AnIVAttestationPTZ
         */
        anIVAttestationPTZ: IChampCheckBox;
        /**
         * AnXIVAttestationPTZ
         */
        anXIVAttestationPTZ: IChampCheckBox;
    }
    interface IFC028PNO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: IChampTextBox;
        /**
         * DatePouvoirNotaire
         */
        datePouvoirNotaire: IChampTextBoxDate;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: IChampTextBox;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: IChampTextBox;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: IChampTextBox;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: IChampTextBox;
    }
    interface IDonneesCreditLecture {
        /**
         * IdCreditModifie
         */
        idCreditModifie: string;
        /**
         * MontantCreditModifie
         */
        montantCreditModifie: IChampTextBox;
    }
    interface IFC050ACA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: IChampTextBox;
        /**
         * NombreCreditsAModifierACA
         */
        nombreCreditsAModifierACA: number;
        /**
         * ListeDonneesCreditAModifierACA
         */
        listeDonneesCreditAModifierACA: Array<IDonneesCreditLecture>;
    }
    interface IChampComboBox {
        /**
         * ListValue
         */
        listeValue: Array<string>;
        /**
         * SelectedValue
         */
        selectedValue: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampCheckBoxList {
        /**
         * ListValue
         */
        listeValue: Array<string>;
        /**
         * ListSelectedValue
         */
        listeSelectedValue: Array<string>;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC050FSC {
        /**
         * DateTransfertBoSuiveuse
         */
        dateTransfertBoSuiveuse: IChampTextBoxDate;
        /**
         * DateDispositionFondsSuiveuse
         */
        dateDispositionFondsSuiveuse: IChampTextBoxDate;
        /**
         * DateEnvoiNumerisationSuiveuse
         */
        dateEnvoiNumerisationSuiveuse: IChampTextBoxDate;
        /**
         * DateSignatureNotaireSuiveuse
         */
        dateSignatureNotaireSuiveuse: IChampTextBoxDate;
        /**
         * EditionSuiveuse
         */
        editionSuiveuse: IChampComboBox;
        /**
         * Statut1Suiveuse
         */
        statut1Suiveuse: IChampCheckBoxList;
        /**
         * Statut2Suiveuse
         */
        statut2Suiveuse: IChampCheckBoxList;
        /**
         * Statut3Suiveuse
         */
        statut3Suiveuse: IChampCheckBoxList;
        /**
         * NumeroDossierAssocieSuiveuse
         */
        numeroDossierAssocieSuiveuse: IChampTextBox;
        /**
         * CorbeilleWorkflowSuiveuse
         */
        corbeilleWorkflowSuiveuse: IChampComboBox;
        /**
         * CommentaireSuiveuse
         */
        commentaireSuiveuse: IChampTextBox;
    }
    interface IChampLabelMultiLine {
        /**
         * ListValue
         */
        listeValue: Array<string>;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampCache {
        /**
         * Value
         */
        value: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC050FSI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * Messages
         */
        messages: IChampLabelMultiLine;
        /**
         * NumeroOrias
         */
        numeroOrias: IChampCache;
        /**
         * NombreCreditsAModifier
         */
        nombreCreditsAModifier: IChampCache;
        /**
         * ListeDonneesCreditAModifier
         */
        listeDonneesCreditAModifier: Array<IDonneesCreditLecture>;
    }
    interface IDonneesCautionPersonneMoraleLecture {
        /**
         * NomCautionPersoMorale
         */
        nomCautionPersoMorale: IChampTextBox;
        /**
         * RepresCautionPersoMorale
         */
        represCautionPersoMorale: IChampTextBox;
        /**
         * AgissantQualiteCaution
         */
        agissantQualiteCaution: IChampTextBox;
        /**
         * AgissantVertuCaution
         */
        agissantVertuCaution: IChampTextBox;
        /**
         * Agissant3Caution
         */
        agissant3Caution: IChampTextBox;
        /**
         * Agissant4Caution
         */
        agissant4Caution: IChampTextBox;
        /**
         * Agissant5Caution
         */
        agissant5Caution: IChampTextBox;
    }
    interface IFC104LEC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * ListeDonneesCautionPersonneMorale
         */
        listeDonneesCautionPersonneMorale: Array<IDonneesCautionPersonneMoraleLecture>;
    }
    interface IFCM03DC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IFCM03RE {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IFCM04LA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: IChampTextBox;
    }
    interface IFCM10HS {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeLecture>;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: IChampTextBox;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: IChampTextBox;
        /**
         * DatePourvoirPersoMoraleAssurance
         */
        datePourvoirPersoMoraleAssurance: IChampTextBoxDate;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: IChampTextBox;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM10HSC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
    }
    interface IFCM17ANL {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17BON {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17CAT {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17CFG {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
    }
    interface IFCM17CGV {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17CIF {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17NFX {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: IChampTextBox;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: IChampTextBox;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: IChampTextBox;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: IChampTextBox;
    }
    interface IFCM17FDC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: IChampTextBox;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: IChampTextBox;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: IChampTextBox;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: IChampTextBox;
    }
    interface IOutilLecture {
        /**
         * MarqueOutil
         */
        marqueOutil: IChampTextBox;
        /**
         * TypeOutil
         */
        typeOutil: IChampTextBox;
        /**
         * DateLivraisonOutil
         */
        dateLivraisonOutil: IChampTextBoxDate;
        /**
         * SerieOutil
         */
        serieOutil: IChampTextBox;
        /**
         * PrixOutil
         */
        prixOutil: IChampTextBox;
        /**
         * VendIntituleOutil
         */
        vendIntituleOutil: IChampTextBox;
        /**
         * VendCpltIntOutil
         */
        vendCpltIntituleOutil: IChampTextBox;
        /**
         * VendAdrOutil
         */
        vendAdresseOutil: IChampTextBox;
        /**
         * VendCpltAdrOutil
         */
        vendCpltAdresseOutil: IChampTextBox;
        /**
         * VendCPOutil
         */
        vendCPOutil: IChampTextBox;
        /**
         * VendVilleOutil
         */
        vendVilleOutil: IChampTextBox;
        /**
         * AdrOutil
         */
        adresseOutil: IChampTextBox;
        /**
         * CpltAdrOutil
         */
        cpltAdresseOutil: IChampTextBox;
        /**
         * CPOutil
         */
        cPOutil: IChampTextBox;
        /**
         * VilleOutil
         */
        villeOutil: IChampTextBox;
        /**
         * DeplacementOutil
         */
        deplacementOutil: IChampCheckBox;
    }
    interface IFCM17OME {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NombreOutils
         */
        nombreOutils: number;
        /**
         * ListeOutil
         */
        listeOutil: Array<IOutilLecture>;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * VilleTribunal
         */
        villeTribunal: IChampTextBox;
    }
    interface IFCM20CLI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * DateDebutLigneInvestissement
         */
        dateDebutLigneInvestissement: IChampTextBoxDate;
        /**
         * DateFinLigneInvestissement
         */
        dateFinLigneInvestissement: IChampTextBoxDate;
        /**
         * ATauxFixeLigneInvestissement
         */
        aTauxFixeLigneInvestissement: IChampRadioButton;
        /**
         * TauxFixeLigneInvestissement
         */
        tauxFixeLigneInvestissement: IChampTextBox;
        /**
         * TauxRevisableLigneInvestissement
         */
        tauxRevisableLigneInvestissement: IChampTextBox;
        /**
         * ReferenceIndiceLigneInvestissement
         */
        referenceIndiceLigneInvestissement: IChampTextBox;
    }
    interface IFCM28PNO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: IChampTextBox;
        /**
         * DatePouvoirNotaire
         */
        datePouvoirNotaire: IChampTextBoxDate;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: IChampTextBox;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: IChampTextBox;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: IChampTextBox;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: IChampTextBox;
    }
    interface IFCM99LEI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
    }
    interface IFCX28PNO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: IChampTextBox;
        /**
         * DatePouvoirNotaire
         */
        datePouvoirNotaire: IChampTextBoxDate;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: IChampTextBox;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: IChampTextBox;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: IChampTextBox;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: IChampTextBox;
    }
    interface IFZ001SI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * AccordPrincipe
         */
        accordPrincipe: IChampCheckBox;
        /**
         * Rdv
         */
        rdv: IChampCheckBox;
        /**
         * Deroulement
         */
        deroulement: IChampCheckBox;
    }
    interface INOTICES {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * AjoutNotices
         */
        ajoutNotices: IChampCheckBox;
    }
    interface ICreditTauxFixeMaj {
        /**
         * ReferenceIndiceCredit
         */
        referenceIndiceCredit: string;
        /**
         * TauxFixeCredit
         */
        tauxFixeCredit: string;
    }
    interface IOutilMaj {
        /**
         * MarqueOutil
         */
        marqueOutil: string;
        /**
         * TypeOutil
         */
        typeOutil: string;
        /**
         * DateLivraisonOutil
         * Type date au format yyyy-MM-dd
         */
        dateLivraisonOutil: string;
        /**
         * SerieOutil
         */
        serieOutil: string;
        /**
         * PrixOutil
         */
        prixOutil: string;
        /**
         * VendIntituleOutil
         */
        vendIntituleOutil: string;
        /**
         * VendCpltIntOutil
         */
        vendCpltIntituleOutil: string;
        /**
         * VendAdrOutil
         */
        vendAdresseOutil: string;
        /**
         * VendCpltAdrOutil
         */
        vendCpltAdresseOutil: string;
        /**
         * VendCPOutil
         */
        vendCPOutil: string;
        /**
         * VendVilleOutil
         */
        vendVilleOutil: string;
        /**
         * AdrOutil
         */
        adresseOutil: string;
        /**
         * CpltAdrOutil
         */
        cpltAdresseOutil: string;
        /**
         * CPOutil
         */
        cPOutil: string;
        /**
         * VilleOutil
         */
        villeOutil: string;
        /**
         * DeplacementOutil
         */
        deplacementOutil: boolean;
    }
    interface IDonneesCautionPersonneMoraleMaj {
        /**
         * RepresCautionPersoMorale
         */
        represCautionPersoMorale: string;
        /**
         * AgissantQualiteCaution
         */
        agissantQualiteCaution: string;
        /**
         * AgissantVertuCaution
         */
        agissantVertuCaution: string;
        /**
         * Agissant3Caution
         */
        agissant3Caution: string;
        /**
         * Agissant4Caution
         */
        agissant4Caution: string;
        /**
         * Agissant5Caution
         */
        agissant5Caution: string;
    }
    interface IChampTextArea {
        /**
         * Text
         */
        text: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC055FSI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * Messages
         */
        messages: IChampLabelMultiLine;
        /**
         * NumeroOrias
         */
        numeroOrias: IChampCache;
        /**
         * NombreCreditsAModifier
         */
        nombreCreditsAModifier: IChampCache;
        /**
         * ListeDonneesCreditAModifier
         */
        listeDonneesCreditAModifier: Array<IDonneesCreditLecture>;
    }
    interface IFCX50ACA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: IChampTextBox;
        /**
         * NombreCreditsAModifierACA
         */
        nombreCreditsAModifierACA: number;
        /**
         * ListeDonneesCreditAModifierACA
         */
        listeDonneesCreditAModifierACA: Array<IDonneesCreditLecture>;
    }
    interface ISaisiesComplementaireLecture extends IElementLecture {
        /**
         * FC003DC
         */
        fC003DC: IFC003DC;
        /**
         * FC003PC
         */
        fC003PC: IFC003PC;
        /**
         * FC003RE
         */
        fC003RE: IFC003RE;
        /**
         * FC004LA
         */
        fC004LA: IFC004LA;
        /**
         * FC007ARO
         */
        fC007ARO: IFC007ARO;
        /**
         * FC010CP
         */
        fC010CP: IFC010CP;
        /**
         * FC010HS
         */
        fC010HS: IFC010HS;
        /**
         * FC010HSC
         */
        fC010HSC: IFC010HSC;
        /**
         * FC010LCD
         */
        fC010LCD: IFC010LCD;
        /**
         * FC010LCM
         */
        fC010LCM: IFC010LCM;
        /**
         * FC010LI
         */
        fC010LI: IFC010LI;
        /**
         * FC010LIA
         */
        fC010LIA: IFC010LIA;
        /**
         * FC010LIC
         */
        fC010LIC: IFC010LIC;
        /**
         * FC017ANL
         */
        fC017ANL: IFC017ANL;
        /**
         * FC017BON
         */
        fC017BON: IFC017BON;
        /**
         * FC017CAT
         */
        fC017CAT: IFC017CAT;
        /**
         * FC017CGV
         */
        fC017CGV: IFC017CGV;
        /**
         * FC017CIF
         */
        fC017CIF: IFC017CIF;
        /**
         * FC017SCP
         */
        fC017SCP: IFC017SCP;
        /**
         * FC019AN
         */
        fC019AN: IFC019AN;
        /**
         * FC028PNO
         */
        fC028PNO: IFC028PNO;
        /**
         * FC050ACA
         */
        fC050ACA: IFC050ACA;
        /**
         * FCX50ACA
         */
        fCX50ACA: IFCX50ACA;
        /**
         * FC050FSC
         */
        fC050FSC: IFC050FSC;
        /**
         * FC050FSI
         */
        fC050FSI: IFC050FSI;
        /**
         * FC055FSI
         */
        fC055FSI: IFC055FSI;
        /**
         * FC104LEC
         */
        fC104LEC: IFC104LEC;
        /**
         * FCM03DC
         */
        fCM03DC: IFCM03DC;
        /**
         * FCM03RE
         */
        fCM03RE: IFCM03RE;
        /**
         * FCM04LA
         */
        fCM04LA: IFCM04LA;
        /**
         * FCM10HS
         */
        fCM10HS: IFCM10HS;
        /**
         * FCM10HSC
         */
        fCM10HSC: IFCM10HSC;
        /**
         * FCM17ANL
         */
        fCM17ANL: IFCM17ANL;
        /**
         * FCM17BON
         */
        fCM17BON: IFCM17BON;
        /**
         * FCM17CAT
         */
        fCM17CAT: IFCM17CAT;
        /**
         * FCM17CFG
         */
        fCM17CFG: IFCM17CFG;
        /**
         * FCM17CGV
         */
        fCM17CGV: IFCM17CGV;
        /**
         * FCM17CIF
         */
        fCM17CIF: IFCM17CIF;
        /**
         * FCM17FDC
         */
        fCM17FDC: IFCM17FDC;
        /**
         * FCM17OME
         */
        fCM17OME: IFCM17OME;
        /**
         * FCM20CLI
         */
        fCM20CLI: IFCM20CLI;
        /**
         * FCM28PNO
         */
        fCM28PNO: IFCM28PNO;
        /**
         * FCM99LEI
         */
        fCM99LEI: IFCM99LEI;
        /**
         * FCX28PNO
         */
        fCX28PNO: IFCX28PNO;
        /**
         * FZ001SI
         */
        fZ001SI: IFZ001SI;
        /**
         * NOTICES
         */
        nOTICES: INOTICES;
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: string;
        /**
         * An1AttestationPTZ
         */
        an1AttestationPTZ: boolean;
        /**
         * An2AttestationPTZ
         */
        an2AttestationPTZ: boolean;
        /**
         * An3AttestationPTZ
         */
        an3AttestationPTZ: boolean;
        /**
         * An4AttestationPTZ
         */
        an4AttestationPTZ: boolean;
        /**
         * An5AttestationPTZ
         */
        an5AttestationPTZ: boolean;
        /**
         * An6AttestationPTZ
         */
        an6AttestationPTZ: boolean;
        /**
         * An7AttestationPTZ
         */
        an7AttestationPTZ: boolean;
        /**
         * An8AttestationPTZ
         */
        an8AttestationPTZ: boolean;
        /**
         * An9AttestationPTZ
         */
        an9AttestationPTZ: boolean;
        /**
         * AnXAttestationPTZ
         */
        anXAttestationPTZ: boolean;
        /**
         * AnXIAttestationPTZ
         */
        anXIAttestationPTZ: boolean;
        /**
         * AnIIIAttestationPTZ
         */
        anIIIAttestationPTZ: boolean;
        /**
         * AnIVAttestationPTZ
         */
        anIVAttestationPTZ: boolean;
        /**
         * AnXIVAttestationPTZ
         */
        anXIVAttestationPTZ: boolean;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: boolean;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: boolean;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: boolean;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: boolean;
        /**
         * NomCopropriete
         */
        nomCopropriete: string;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: string;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: string;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: string;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: string;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: string;
        /**
         * EffetCopropriete
         */
        effetCopropriete: string;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeMaj>;
        /**
         * ContenuConditionsSuspensives
         */
        contenuConditionsSuspensives: string;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: boolean;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: string;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: boolean;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: string;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: boolean;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: string;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: boolean;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: string;
        /**
         * DateTransfertBoSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateTransfertBoSuiveuse: string;
        /**
         * DateDispositionFondsSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateDispositionFondsSuiveuse: string;
        /**
         * DateEnvoiNumerisationSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateEnvoiNumerisationSuiveuse: string;
        /**
         * DateSignatureNotaireSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureNotaireSuiveuse: string;
        /**
         * EditionSuiveuse
         */
        editionSuiveuse: string;
        /**
         * Statut1Suiveuse
         */
        statut1Suiveuse: Array<string>;
        /**
         * Statut2Suiveuse
         */
        statut2Suiveuse: Array<string>;
        /**
         * Statut3Suiveuse
         */
        statut3Suiveuse: Array<string>;
        /**
         * NumeroDossierAssocieSuiveuse
         */
        numeroDossierAssocieSuiveuse: string;
        /**
         * CorbeilleWorkflowSuiveuse
         */
        corbeilleWorkflowSuiveuse: string;
        /**
         * CommentaireSuiveuse
         */
        commentaireSuiveuse: string;
        /**
         * IndexGarantie
         */
        indexGarantie: number;
        /**
         * ExisteAgrementGarantie
         */
        existeAgrementGarantie: boolean;
        /**
         * DateAgrementGarantie
         * Type date au format yyyy-MM-dd
         */
        dateAgrementGarantie: string;
        /**
         * PublierGreffeGarantie
         */
        publierGreffeGarantie: boolean;
        /**
         * ConjointsEmprunteursGarantie
         */
        conjointsEmprunteursGarantie: string;
        /**
         * ConjointsCautionsGarantie
         */
        conjointsCautionsGarantie: string;
        /**
         * DateDebutLigneInvestissement
         * Type date au format yyyy-MM-dd
         */
        dateDebutLigneInvestissement: string;
        /**
         * DateFinLigneInvestissement
         * Type date au format yyyy-MM-dd
         */
        dateFinLigneInvestissement: string;
        /**
         * ATauxFixeLigneInvestissement
         */
        aTauxFixeLigneInvestissement: boolean;
        /**
         * TauxFixeLigneInvestissement
         */
        tauxFixeLigneInvestissement: string;
        /**
         * TauxRevisableLigneInvestissement
         */
        tauxRevisableLigneInvestissement: string;
        /**
         * ReferenceIndiceLigneInvestissement
         */
        referenceIndiceLigneInvestissement: string;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: string;
        /**
         * NomMandataire
         */
        nomMandataire: string;
        /**
         * VertuMandataire
         */
        vertuMandataire: string;
        /**
         * NombreOutils
         */
        nombreOutils: number;
        /**
         * AjoutNotices
         */
        ajoutNotices: boolean;
        /**
         * NumeroOrias
         */
        numeroOrias: string;
        /**
         * NombreCreditsAModifierFSI
         */
        nombreCreditsAModifierFSI: number;
        /**
         * ListeDonneesCreditAModifierFSI
         */
        listeDonneesCreditAModifierFSI: Array<IDonneesCreditLecture>;
        /**
         * ListeOutil
         */
        listeOutil: Array<IOutilMaj>;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: string;
        /**
         * LibelleEtablissementPouvoirNotaire
         */
        libelleEtablissementPouvoirNotaire: string;
        /**
         * DatePouvoirNotaire
         * Type date au format yyyy-MM-dd
         */
        datePouvoirNotaire: string;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: string;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: string;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: string;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: string;
        /**
         * RibPretDevise
         */
        ribPretDevise: string;
        /**
         * IdentifiantProduitPretDevise
         */
        identifiantProduitPretDevise: string;
        /**
         * NumCreditPlanPretDevise
         */
        numeroCreditPlanPretDevise: string;
        /**
         * TypePretDevise
         */
        typePretDevise: string;
        /**
         * IdggiPretDevise
         */
        idggiPretDevise: string;
        /**
         * CdngPretDevise
         */
        cdngPretDevise: string;
        /**
         * FraisEnDevises
         */
        fraisEnDevises: string;
        /**
         * DevisePretDevise
         */
        devisePretDevise: string;
        /**
         * FraisContrePartiePretDevise
         */
        fraisContrePartiePretDevise: string;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: string;
        /**
         * AccordPrincipe
         */
        accordPrincipe: boolean;
        /**
         * Rdv
         */
        rdv: boolean;
        /**
         * Deroulement
         */
        deroulement: boolean;
        /**
         * RaisonCaution
         */
        raisonCaution: string;
        /**
         * RepresentantCaution
         */
        representantCaution: string;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: string;
        /**
         * DatePouvoirCaution
         * Type date au format yyyy-MM-dd
         */
        datePouvoirCaution: string;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: string;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: string;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: string;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: string;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: string;
        /**
         * DateRCSEmprunteurBailleur
         * Type date au format yyyy-MM-dd
         */
        dateRCSEmprunteurBailleur: string;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: string;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: string;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: string;
        /**
         * DatePouvoirEmprunteurPersMorale
         * Type date au format yyyy-MM-dd
         */
        datePouvoirEmprunteurPersonneMorale: string;
        /**
         * PouvoirEmprunteurPersMorale
         */
        pouvoirEmprunteurPersonneMorale: string;
        /**
         * ListeDonneesCautionPersonneMorale
         */
        listeDonneesCautionPersonneMorale: Array<IDonneesCautionPersonneMoraleMaj>;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: string;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: string;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: string;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: string;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: string;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: string;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: string;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: string;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: string;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: string;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: string;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: string;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: string;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: string;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: string;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: string;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: string;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: string;
        /**
         * DatePourvoirPersoMoraleAssurance
         * Type date au format yyyy-MM-dd
         */
        datePourvoirPersoMoraleAssurance: string;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: string;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: string;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: string;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: string;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: string;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: string;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: string;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: string;
        /**
         * FCM17NFX
         */
        fCM17NFX: IFCM17NFX;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: string;
        /**
         * VilleTribunal
         */
        villeTribunal: string;
        /**
         * mtoDocInfos
         */
        mtoDocInformation: Array<IAnyType>;
        /**
         * FCM17NFO
         */
        fCM17NFO: IFCM17NFO;
        /**
         * FCM17GBM
         */
        fCM17GBM: IFCM17GBM;
        /**
         * NomenclatureBiens
         */
        nomenclatureBiens: string;
        /**
         * LibelleNomenclatureBiens
         */
        libelleNomenclatureBiens: string;
        /**
         * ListeBienMC
         */
        listeBienMC: Array<IBienMaj>;
        /**
         * NombreBiensMC
         */
        nombreBiensMC: number;
        /**
         * FCM07LAN
         */
        fCM07LAN: IFCM07LAN;
    }
    interface IAgentLecture extends IElementLecture {
        /**
         * Idfaen_IdntAgent
         */
        idAgent: string;
        /**
         * Lbfaes_LblAgent
         */
        lblAgent: string;
        /**
         * Idfaeg_IdntEdsGest
         */
        idEDSGestion: string;
        /**
         * Lbfiba_LblAgenceRat
         */
        lblAgenceRat: string;
        /**
         * Cdfaaa_CdeAgentRat
         */
        cdeAgentRat: string;
        /**
         * Nofcdi_NivDelegation
         */
        niveauDelegation: string;
        /**
         * Ctfauc_TypeUtilisateurCo
         */
        typeUtilisateurCo: number;
        /**
         * Idfies_IdntAgentInterne
         */
        idAgentInterne: string;
        /**
         * Idfce3_EtabBaofCent
         */
        etabBaofCentral: number;
        /**
         * Cdfabo_IdntEdsBaofCent
         */
        idEDSBaofCentral: string;
        /**
         * Cifttv_TechniqueDeVente
         */
        techniqueDeVente: number;
        /**
         * EstAgentBO
         */
        estAgentBO: boolean;
        /**
         * EstBackup
         */
        estBackup: boolean;
        /**
         * EstAgentExterne
         */
        estAgentExterne: boolean;
        /**
         * DerogationBornes
         */
        derogationBornes: boolean;
        /**
         * AutoriserForcage
         */
        autoriserForcage: boolean;
        /**
         * AutoriserForcagePIECO
         */
        autoriserForcagePIECO: boolean;
        /**
         * AutoriserInstructionPourX
         */
        autoriserInstructionPourX: boolean;
        /**
         * AutoriserMajPourX
         */
        autoriserMAJPourX: boolean;
        /**
         * AutoriserDateTraitement
         */
        autoriserDateTraitement: boolean;
        /**
         * AutoriserAXANet
         */
        autoriserAXANet: boolean;
        /**
         * AutoriserDevisEcoPTZ
         */
        autoriserDevisEcoPTZ: boolean;
        /**
         * AutoriserCNPNet
         */
        autoriserCNPNet: boolean;
        /**
         * AutoriserCAPI
         */
        autoriserCAPI: boolean;
        /**
         * AutoriserSDPI
         */
        autoriserSDPI: boolean;
        /**
         * AutoriserAgrementAssurance
         */
        autoriserAgrementAssurance: boolean;
        /**
         * AutoriserAccesDNC
         */
        autoriserAccesDNC: boolean;
        /**
         * AutoriserGenerationNouvelleDemandeMyFlow
         */
        autoriserGeneNvelleDmdeMyFlow: boolean;
        /**
         * ListerHabilitation
         */
        listerHabilitation: Array<string>;
        /**
         * ListerEtablissementsGcm
         */
        listerEtablissementsGcm: Array<number>;
        /**
         * ExisteDossiersEnAlerte
         */
        existeDossiersEnAlerte: boolean;
        /**
         * EstAgentRefusAssuranceExterne
         */
        estAgentRefusAssuranceExterne: boolean;
        /**
         * ScPhasePilote
         */
        scPhasePilote: IScPhasePilote;
    }
    interface ISynthesePlanFinancementLecture extends IElementLecture {
        /**
         * Mcfoof_CoutTotalTTC
         */
        coutTotalTTC: number;
        /**
         * Mcfgfr_CoutTotalFraisGarantie
         */
        coutTotalFraisGarantie: number;
        /**
         * Mcfafd_CoutTotalFraisDossier
         */
        coutTotalFraisDossier: number;
        /**
         * Mtfaap_MtApportPersonnel
         */
        montantApportPersonnel: number;
        /**
         * nMtfaso_MtConcoursInternes
         */
        montantConcoursInternes: number;
        /**
         * nMkface_MtConcoursExternes
         */
        montantConcoursExternes: number;
        /**
         * Mcfacf_CoutTotalFraisCourtage
         */
        coutTotalFraisCourtage: number;
        /**
         * MtMensualiteAvecAssurance
         */
        montantMensualiteAvecAssurance: number;
        /**
         * MtMensualiteNet
         */
        montantMensualiteNet: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
    }
    interface ICourrierEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumPlanDossier
         */
        numeroPlanDossier: number;
        /**
         * Nofacp_NumCreditPlan
         */
        numeroCreditPlan: number;
        /**
         * Nufcrl_NumRelatif
         */
        numeroRelatif: number;
        /**
         * Ctfclv_TypeLettre
         */
        typeLettre: number;
        /**
         * Cdfpci_CodeCivilite
         */
        codeCivilite: string;
        /**
         * Lbfce1_AdresseLigne1
         */
        adresseLigne1: string;
        /**
         * Lbfce2_AdresseLigne2
         */
        adresseLigne2: string;
        /**
         * Lbfce3_AdresseLigne3
         */
        adresseLigne3: string;
        /**
         * Lbfce4_AdresseLigne4
         */
        adresseLigne4: string;
        /**
         * Lbfce5_AdresseLigne5
         */
        adresseLigne5: string;
        /**
         * Lbfce6_AdresseLigne6
         */
        adresseLigne6: string;
    }
    interface IMarcheEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDoss
         */
        numeroRelPlanDossier: number;
        /**
         * Nofacp_NumRelCreditPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Ctfcme_CodeTypeMarche
         */
        codeTypeMarche: string;
        /**
         * Idfcmb_IdMarche
         */
        idMarche: string;
        /**
         * Idfcmp_IdTiersMarcePrinc
         */
        idTiersMarcePrinc: string;
        /**
         * Lbfcmo_LibMoeMarchePrinc
         */
        libelleMoeMarchePrinc: string;
        /**
         * Lbfcom_LibelleObjetMarche
         */
        libelleObjetMarche: string;
        /**
         * Mtfcmd_MontantMarche
         */
        montantMarche: number;
        /**
         * Dtfcma_DateSignMarche
         * Type date au format yyyy-MM-dd
         */
        dateSigneMarche: string;
        /**
         * Dffcme_DateFinMarche
         * Type date au format yyyy-MM-dd
         */
        dateFinMarche: string;
        /**
         * Lnfagr_NomGroupMarche
         */
        nomGroupMarche: string;
        /**
         * Lbfctr_LibLieuExecTravaux
         */
        libelleLieuExecTravaux: string;
        /**
         * Nxfctr_NumTranMarche
         */
        numeroTranMarche: string;
        /**
         * Nxfclo_NumLotMarche
         */
        numeroLotMarche: string;
        /**
         * Idfamp_refCautionPrincipale
         */
        refCautionPrincipale: string;
        /**
         * Dtfcmp_dateEmisCautionPrinc
         * Type date au format yyyy-MM-dd
         */
        dateEmisCautionPrinc: string;
        /**
         * Mtfccp_montantCautionPrinc
         */
        montantCautionPrinc: number;
        /**
         * Cdfadv_codeDevise
         */
        codeDevise: string;
    }
    interface ITACreditEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDos
         */
        numeroRelPlanDos: number;
        /**
         * Nofacp_NumRelCredPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Nufcrl_NumRelCred
         */
        numeroRelCredit: number;
        /**
         * Dtfhpr_DateEchnMER
         * Type date au format yyyy-MM-dd
         */
        dateEcheanceMER: string;
        /**
         * Mkfh03_MtCaptAmrt
         */
        montantCapitalAmortissement: number;
        /**
         * Mkfd01_MtCaptRestDu
         */
        montantCapitalRestantDu: number;
        /**
         * Nufcet_NumEcheanceTable
         */
        numeroEcheanceTable: number;
    }
    interface IScElement {
    }
    interface IScConstante extends IScElement {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
    interface IProjetNonImmobilierLecture extends IProjetLecture {
        /**
         * IndicProjProf
         */
        indiceProjetProf: boolean;
        /**
         * IndicProjConsTres
         */
        indiceProjetConsolideTres: boolean;
        /**
         * ObjTresEtdn
         */
        objTresEtdn: boolean;
        /**
         * ObjFinnConso
         */
        objFinancierConsommation: boolean;
        /**
         * ObjTresPrfs
         */
        objTresPrfs: boolean;
        /**
         * DescProjNonImmb
         */
        descriptionProjetNonImmobilier: string;
        /**
         * Dtfbso_DateMiseDispFond
         * Type date au format yyyy-MM-dd
         */
        dateMiseDispFond: string;
        /**
         * IdntBienConso
         */
        idBienConsommation: string;
        /**
         * IdntBienEqpmProf
         */
        idBienEqpmProf: string;
        /**
         * IdntBienTres
         */
        idBienTres: string;
    }
    interface IProjetEPSLecture extends IProjetLecture {
    }
    interface ICreditEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDos
         */
        numeroRelPlanDos: number;
        /**
         * Nofacp_NumRelCredPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Nufcrl_NumRelCred
         */
        numeroRelCredit: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Txfccc_QuotCredCouvParEps
         */
        quotientCreditCouvertureParEPS: number;
        /**
         * Idfaez_RefeExtnCredCouvEps
         */
        referenceExterneCreditCouvertureEPS: string;
        /**
         * ListIdntTaCredCouvParEps
         */
        listeIdtaCreditCouvertureParEPS: Array<string>;
    }
    interface IComplementEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumrReltPlanDoss
         */
        numeroRelationPlanDossier: number;
        /**
         * Nofacp_NumrReltCrdtPlan
         */
        numeroRelationCreditPlan: number;
        /**
         * Cnfcnb_NatrGarnEps
         */
        natureGarantieEPS: string;
        /**
         * Idfapa_RefrExtnDossParn
         */
        referenceExterneDossierParent: string;
        /**
         * Ddfaen_DateDebuEngg
         * Type date au format yyyy-MM-dd
         */
        dateDebutEngagement: string;
        /**
         * Dffaen_DateFinEngg
         * Type date au format yyyy-MM-dd
         */
        dateFinEngagement: string;
        /**
         * Mgfggo_MtEnggGlblOrig
         */
        montantEngagementGlblOrigine: number;
        /**
         * Idfagl_IdntEnggGlbl
         */
        idEngagementGlbl: string;
        /**
         * Cifcrg_CodeIndRetrocessionEPS
         */
        codeIndicateurRetrocessionEPS: number;
        /**
         * Cifcrh_CodeIndicRadiationAutoEPS
         */
        codeIndiceRadiationAutomatiqueEPS: number;
        /**
         * Cifcri_CodeIndicEPSAmortissable
         */
        codeIndiceEPSAmortissable: number;
        /**
         * Cifeng_CodeEngagementGlobal
         */
        codeEngagementGlobal: number;
        /**
         * Cnfcnh_CodeTypeObjetEPS
         */
        codeTypeObjetEPS: string;
        /**
         * Cofcca_CodeCanalDistributionEPS
         */
        codeCanalDistributionEPS: string;
        /**
         * Cofcsi_CodeSignatureElectroniqueEPS
         */
        codeSignatureElectroniqueEPS: string;
        /**
         * Dtfcdd_DateDecisionEPS
         * Type date au format yyyy-MM-dd
         */
        dateDecisionEPS: string;
        /**
         * Idfaei_IdEntiteInstructeur
         */
        idEntiteInstructeur: string;
        /**
         * Idfagd_CodeAgentDecideur
         */
        codeAgentDecideur: string;
        /**
         * Idfcma_IdModeleActeEPS
         */
        idModeleActeEPS: string;
        /**
         * Idfcs1_IdEDSSignataire
         */
        idEDSSignataire: string;
        /**
         * Idfcs2_IdEDSSignataire
         */
        idEDSSignataire1: string;
        /**
         * Mtfcad_MontantAssietteCommission
         */
        montantAssietteCommission: number;
        /**
         * Nxfcse_NumSignatureElectroniqueEPS
         */
        numeroSignatureElectroniqueEPS: string;
        /**
         * ListIdntMarcheEPS
         */
        listeIdMarcheEPS: Array<string>;
        /**
         * Idfcfa_IdFamilleEPS
         */
        idFamilleEPS: string;
        /**
         * Dtfcru_DateRadiationEPS
         * Type date au format yyyy-MM-dd
         */
        dateRadiationEPS: string;
        /**
         * Idfaic_IdPreuveICG
         */
        idPreuveICG: string;
        /**
         * Idfapc_IdClientWeb
         */
        idClientWeb: string;
        /**
         * Lbfauc_LibelleUtilisateurWeb
         */
        libelleUtilisateurWeb: string;
        /**
         * Lbfas1_LibelleCiviliteSignataire1
         */
        libelleCiviliteSignataire1: string;
        /**
         * Lbfas3_LibelleCiviliteSignataire2
         */
        libelleCiviliteSignataire2: string;
        /**
         * Lbfas4_LibelleFonctionSignataire2
         */
        libelleFonctionSignataire2: string;
        /**
         * Lbfas2_LibelleFonctionSignataire1
         */
        libelleFonctionSignataire1: string;
        /**
         * Cdfcew_CodeEtatDossierEPSWeb
         */
        codeEtatDossierEPSWeb: string;
    }
    interface ITresorerieFinanceeLecture extends IBienDetailleLecture {
        /**
         * CodeIndicBienConso
         */
        codeIndiceBienConsommation: boolean;
        /**
         * CodeIndicTresProf
         */
        codeIndiceTresProf: boolean;
        /**
         * CodeIndicTresEtdn
         */
        codeIndiceTresEtdn: boolean;
        /**
         * Idfove_IdntVndr
         */
        idVendeur: string;
    }
    interface IBienEquipementProLecture extends IBienDetailleLecture {
    }
    interface IBienDetailleLecture extends IElementLecture {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
        /**
         * Mtfoac_CoutAcqsComlInds
         */
        coutAcqsCommercialisationInds: number;
        /**
         * Mtfoai_CoutAcqsHabt
         */
        coutAcqsHabitation: number;
        /**
         * Mtfoco_CoutConst
         */
        coutConstruction: number;
        /**
         * Mtfotr_CoutTrvxAmen
         */
        coutTravauxAmen: number;
        /**
         * Mtfopp_CoutPasPort
         */
        coutPasPort: number;
        /**
         * Mtfofc_CoutFondComc
         */
        coutFondComc: number;
        /**
         * Mtfomo_CoutEqpmMte
         */
        coutEqpmMte: number;
        /**
         * Mtfovp_CoutVehcPrfs
         */
        coutVehcPrfs: number;
        /**
         * Mtfops_CoutPartSocl
         */
        coutPartSociale: number;
        /**
         * Mtfofg_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * Mtfofn_MtFrsNotr
         */
        montantFrsNotaire: number;
        /**
         * Mtfost_CoutStck
         */
        coutStck: number;
        /**
         * Mtfosc_CoutStckHorsInstr
         */
        coutStckHorsInstruction: number;
        /**
         * Mtfobf_CoutBfr
         */
        coutBfr: number;
        /**
         * Mtfobc_CoutBfrHorsInstr
         */
        coutBfrHorsInstruction: number;
        /**
         * Mtfodv_CoutAutrFrsPrfs
         */
        coutAutreFrsPrfs: number;
        /**
         * Mtfodc_CoutAutrFrsPrfsHorsInstr
         */
        coutAutreFrsPrfsHorsInstruction: number;
        /**
         * Mcfotv_MtTvaFinn
         */
        montantTVAFinancier: number;
        /**
         * Mtfora_MtRachCren
         */
        montantRachCren: number;
        /**
         * Mtfods_CoutPartSoce
         */
        coutPartSoce: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IAutoMotoLecture extends IBienConsoFinanceLecture {
        /**
         * Ctfmov_TypeMotr
         */
        typeMotr: number;
        /**
         * Lbfmov_ModeVehc
         */
        modeVehc: string;
        /**
         * Lbfqov_MarqVehc
         */
        marqVehc: string;
        /**
         * Ctfmvh_TypeVehc
         */
        typeVehc: number;
        /**
         * Ctfmgv_GnreVehc
         */
        gnreVehc: number;
        /**
         * Cdfmpv_PuisFisc
         */
        puisFiscal: number;
        /**
         * Ddfmpc_DatePrmeMiseCircl
         * Type date au format yyyy-MM-dd
         */
        datePrmeMiseCircl: string;
    }
    interface IBienConsoFinanceLecture extends IElementLecture {
        /**
         * Idfove_IdntVndr
         */
        idVendeur: string;
        /**
         * Mgfovh_MtInscHypt
         */
        montantInscHypotheque: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IAlerteEnEntreeLecture extends IElementLecture {
        /**
         * Nofaix_NumeAlrt
         */
        numeroAlerte: number;
        /**
         * Ctfiai_CodeAlrt
         */
        codeAlerte: number;
        /**
         * Cdfiai_CodeTrtAlrt
         */
        codeTraitementAlerte: number;
        /**
         * Dcfiai_DateEmssAlrt
         * Type date au format yyyy-MM-dd
         */
        dateEmissionAlerte: string;
        /**
         * Lbfiai_LiblAlrt
         */
        libelleAlerte: string;
    }
    interface ITauxInteretAnnuelLecture {
        /**
         * ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * TxActu
         */
        tauxActu: number;
        /**
         * TxProp
         */
        tauxProp: number;
    }
    interface ITauxIndiceLecture extends ITauxInteretAnnuelLecture {
        /**
         * Marg
         */
        marge: number;
        /**
         * ValrIndc
         */
        valeurIndice: number;
    }
    interface ITauxFixeLecture extends ITauxInteretAnnuelLecture {
    }
    interface ITauxMixteLecture extends ITauxInteretAnnuelLecture {
        /**
         * Rpar
         */
        repartition: number;
        /**
         * TxIndcCmpstTxMixt
         */
        tauxIndiceCmpstTauxMixte: ITauxIndiceLecture;
        /**
         * TxFixeCmpstTxMixt
         */
        tauxFixeCmpstTauxMixte: ITauxFixeLecture;
    }
    interface ICreditPalierProgressionLecture extends IElementLecture {
        /**
         * Nufape_NumeReltPrmeEchePalrPhas
         */
        numeroRelationPrmeEcheancePalierPhase: number;
        /**
         * Nufapp_NumeReltDernEchePalrPhas
         */
        numeroRelationDernierEcheancePalierPhase: number;
        /**
         * Txfcam_TxPrgrAmrt
         */
        tauxProgressifAmortissement: ITauxInteretAnnuelLecture;
        /**
         * Cdfdcg_CodeIndxTxPrgrAmrt
         */
        codeIndexTauxProgressifAmortissement: number;
        /**
         * Ptfcpa_CodePerdPrgrAmrt
         */
        codePeriodeProgressifAmortissement: number;
        /**
         * Npfca1_NbPerdDureePalrPrgr
         */
        nombrePeriodeDureePalierProgressif: number;
        /**
         * Ctfcam_TypeTauxProgreAmort
         */
        typeTauxProgreAmort: number;
        /**
         * IdntCredPhasAM
         */
        idCreditPhaseAM: string;
        /**
         * IdntPalrPrgrAmrtNivPrdt
         */
        idPalierProgressifAmortissementNiveauProduit: string;
    }
    interface IComplementPhasePretCombineLecture extends IElementLecture {
        /**
         * Mafaqa_MtAmrt
         */
        montantAmortissement: number;
        /**
         * Mkfaif_MtInfine
         */
        montantInfine: number;
        /**
         * Ctfapa_CodeAjtInteCapt
         */
        codeAjtInterieurCapital: number;
        /**
         * Ctfark_ModeSaisReprCapt
         */
        modeSaisieReprCapital: number;
        /**
         * Tafaqa_QuotAmrt
         */
        quotientAmortissement: number;
        /**
         * IdntCredPhasAM
         */
        idCreditPhaseAM: string;
    }
    interface IScProduitPhase extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Nofcfp_NoReltPhas
         */
        numeroRelationPhase: number;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Pefcph_UnitDurDunPhas
         */
        uniteDureeDunPhase: number;
        /**
         * Cdfcph_ModeExprDurPhas
         */
        modeExpressionDureePhase: number;
        /**
         * Npfcq1_DurPhasPrdt
         */
        dureePhaseProduit: number;
        /**
         * Npfcq2_DurPhasPrdt
         */
        dureePhaseProduit1: number;
        /**
         * Npfcq3_DurPhasPrdt
         */
        dureePhaseProduit2: number;
        /**
         * Npfcq4_DurDunPhasPas
         */
        dureeDunPhasePas: number;
        /**
         * Ptfcin_PerdicCalcIntr
         */
        periodiciteCalculIntr: number;
        /**
         * Ptfci1_PerdicCalcIntr
         */
        periodiciteCalculIntr1: number;
        /**
         * Ptfci2_PerdicCalcIntr
         */
        periodiciteCalculIntr2: number;
        /**
         * Ptfci3_PerdicCalcIntr
         */
        periodiciteCalculIntr3: number;
        /**
         * Ptfci4_PerdicCalcIntr
         */
        periodiciteCalculIntr4: number;
        /**
         * Ptfcam_PerdicMerAmrt
         */
        periodiciteMERAmortissement: number;
        /**
         * Ptfca1_PerdicMerAmrt
         */
        periodiciteMERAmortissement1: number;
        /**
         * Ptfca2_PerdicMerAmrt
         */
        periodiciteMERAmortissement2: number;
        /**
         * Ptfca3_PerdicMerAmrt
         */
        periodiciteMERAmortissement3: number;
        /**
         * Ptfca4_PerdicMerAmrt
         */
        periodiciteMERAmortissement4: number;
        /**
         * Cdfcpt_CodePerdicDiffMer
         */
        codePeriodiciteDiffereMER: number;
        /**
         * Cdfcei_CdRecvIntrTermEchu
         */
        codeRecouvrementIntrTermeEchu: number;
        /**
         * Cdfcea_CdRecvAmrtTermEchu
         */
        codeRecouvrementAmortissementTermeEchu: number;
        /**
         * Cdfccf_CdTypeConfmTxIntr
         */
        codeTypeConfirmationTauxIntr: number;
        /**
         * Cdfctx_ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * Nbfcaa_NbJourAnnNumrt
         */
        nombreJourAnnulationNumerateur: number;
        /**
         * Cdfcam_ModeCalcAmrt
         */
        modeCalculAmortissement: number;
        /**
         * Mtfckr_CaptRefrTablCste
         */
        capitalReferenceTableConstante: number;
        /**
         * Ctfcrb_TypeAsstRemb
         */
        typeAssietteRemboursement: number;
        /**
         * Cdfcva_CdVerstAutrPendPhas
         */
        codeVersementAutrePendantPhase: number;
        /**
         * Cdfcfp_CodeRedcDurPrfn
         */
        codeReductionDureePrefinancement: number;
        /**
         * Cdfcpr_CodePrlnDurPrfn
         */
        codePrelevementDureePrefinancement: number;
        /**
         * Ctfcpe_CodeTypePrfn
         */
        codeTypePrefinancement: number;
        /**
         * Cdfcip_CodeRecvPartlIntr
         */
        codeRecouvrementPartielIntr: number;
        /**
         * Cdfcir_CodeCalcIntrRepr
         */
        codeCalculIntrRepr: number;
        /**
         * Cdfcki_CodeCaptIntrDiff
         */
        codeCapitalIntrDiffere: number;
        /**
         * Ptfcci_CalcIntrJourReel
         */
        calculIntrJourReel: number;
        /**
         * Ptfcd1_PerdicMerIntr
         */
        periodiciteMERIntr: number;
        /**
         * Ptfcd2_PerdicMerIntr
         */
        periodiciteMERIntr1: number;
        /**
         * Ptfcd3_PerdicMerIntr
         */
        periodiciteMERIntr2: number;
        /**
         * Ptfcd4_PerdicMerIntr
         */
        periodiciteMERIntr3: number;
        /**
         * Ctfck2_ModeCaptIntr
         */
        modeCapitalIntr: number;
        /**
         * Ctfck1_ModeRecvIntr
         */
        modeRecouvrementIntr: number;
        /**
         * Ptfcco_PerdicCompoIntr
         */
        periodiciteCompositionIntr: number;
        /**
         * Cdfcpm_CdModeExprTxMoyePhas
         */
        codeModeExpressionTauxMoyenPhase: number;
        /**
         * Txfcp1_ValrMinTxMoyePhas
         */
        valeurMinimumTauxMoyenPhase: number;
        /**
         * Txfcp2_ValrMaxTxMoyePhas
         */
        valeurMaximumTauxMoyenPhase: number;
        /**
         * Txfcp3_ValrConsTxMoyePhas
         */
        valeurConsolideTauxMoyenPhase: number;
        /**
         * Cdfcth_CodeTxPalrCalc
         */
        codeTauxPalierCalcul: number;
        /**
         * Cdfcin_CodeIndc
         */
        codeIndice: string;
        /**
         * Nbfrvd_NbMaxiPerdVartDur
         */
        nombreMaximumPeriodeVartDuree: number;
        /**
         * Cdfcop_CodeOptnSurPhasPrdt
         */
        codeOptionSurPhaseProduit: number;
        /**
         * Cdfcoo_CodeObjtOptn
         */
        codeObjetOption: number;
        /**
         * Cdfcto_TypeOptn
         */
        typeOption: number;
        /**
         * Cdfcsr_CodeCourPourPrsDopt
         */
        codeCourtPourPresenceDopt: number;
        /**
         * Npfcsr_DelaiCourPrsDopt
         */
        delaiCourtPresenceDopt: number;
        /**
         * Pefcpo_PerdicOptn
         */
        periodiciteOption: number;
        /**
         * Nbjja1_NbJourAnnDenom
         */
        nombreJourAnnulationDenomination: number;
        /**
         * Txfccz_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement: number;
        /**
         * Tpfcc1_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement: number;
        /**
         * Tsfcc1_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement: number;
        /**
         * Pefrie_UnitPerdValrIntIndc
         */
        unitePeriodeValeurIntituleIndice: number;
        /**
         * Npfrie_NbPerdValrIntIndc
         */
        nombrePeriodeValeurIntituleIndice: number;
        /**
         * Ctfcte_CodeTypeTrtDech
         */
        codeTypeTraitementDech: number;
        /**
         * Tsfcif_QuotMaxiCaptIfin
         */
        quotientMaximumCapitalIfin: number;
        /**
         * Txfcca_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement1: number;
        /**
         * Tpfcca_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement1: number;
        /**
         * Tsfcca_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement1: number;
        /**
         * Idfrbd_IdntReglButrDur
         */
        idRegleButoireDuree: string;
    }
    interface ICreditPhaseAmortissementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcea_CodeRecvAmrtTermEchu
         */
        codeRecouvrementAmortissementTermeEchu: number;
        /**
         * Txfcqa_QuotAmrt
         */
        quotientAmortissement: number;
        /**
         * Cdfcam_ModeCalcAmrt
         */
        modeCalculAmortissement: number;
        /**
         * Cifapi_CodePrelFinPhas
         */
        codePrelFinPhase: number;
        /**
         * Txfaom_TxConstPhasCred
         */
        tauxConstructionPhaseCredit: number;
        /**
         * AmrtPossible
         */
        amortissementPossible: boolean;
        /**
         * ProgTaux
         */
        progTaux: boolean;
        /**
         * TypePretCombine
         */
        typePretCombine: string;
        /**
         * IdntCompPhasPourPretComb
         */
        idCompPhasePourPretComb: string;
        /**
         * ListIdntPalrPrgrAmrt
         */
        listeIdPalierProgressifAmortissement: Array<string>;
    }
    interface ICreditPhaseDiffereAmortissementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcip_CodeRecvPartlInte
         */
        codeRecouvrementPartielInterieur: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhaseDiffereTotalLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhaseMobilisationLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcip_CodeRecvPartlInte
         */
        codeRecouvrementPartielInterieur: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhasePrefinancementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfppf_CodeRedcDureePref
         */
        codeReductionDureePref: number;
        /**
         * Personnalisable
         */
        personnalisable: boolean;
        /**
         * Reduction
         */
        reduction: boolean;
    }
    interface ICreditPhaseLecture extends IElementLecture {
        /**
         * Cdfcir_CodeCalcInteRepr
         */
        codeCalculInterieurRepr: number;
        /**
         * Ctfcki_ModeCaptRecvInte
         */
        modeCapitalRecouvrementInterieur: number;
        /**
         * Cdfcki_CodeCaptRecvInte
         */
        codeCapitalRecouvrementInterieur: number;
        /**
         * Ptfcin_CodePerdAsscCalcInte
         */
        codePeriodeAssuranceCalculInterieur: number;
        /**
         * Ptfcam_CodePerdCalcMer
         */
        codePeriodeCalculMER: number;
        /**
         * Ptfcci_CodeCalcInteJourRels
         */
        codeCalculInterieurJourRelease: number;
        /**
         * Ptfcco_CodePerdCompoInte
         */
        codePeriodeCompositionInterieur: number;
        /**
         * Mefoso_MtPrmeecheServ
         */
        montantPrmeecheService: number;
        /**
         * Mefafr_MtPrmeecheAccsComp
         */
        montantPrmeecheAccessoireComp: number;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Cdfava_CodeIndicVerstFondAutrPendPhas
         */
        codeIndiceVersementFondAutrePendantPhase: number;
        /**
         * Dtfccr_DateCretPhas
         * Type date au format yyyy-MM-dd
         */
        dateCreationPhase: string;
        /**
         * Cdfdcf_CodeConfmTxInteCred
         */
        codeConfirmationTauxInterieurCredit: number;
        /**
         * Npfcph_NbPerdPhas
         */
        nombrePeriodePhase: number;
        /**
         * Pefcph_CodePerdDurePhas
         */
        codePeriodeDurePhase: number;
        /**
         * Txfcmg_Marge
         */
        marge: number;
        /**
         * Txfcvi_Taux
         */
        taux: number;
        /**
         * Tvfrui_Repart
         */
        repart: number;
        /**
         * TxPhasFixe
         */
        tauxPhaseFixe: number;
        /**
         * TxPhasInit
         */
        tauxPhaseInit: number;
        /**
         * DateTraitIndic
         * Type date au format yyyy-MM-dd
         */
        dateTraitIndice: string;
        /**
         * MajorBonif
         */
        majorBonif: number;
        /**
         * CalculButoirHausse
         */
        calculButoirHausse: boolean;
        /**
         * CalculButoirBaisse
         */
        calculButoirBaisse: boolean;
        /**
         * PersoButoirHausse
         */
        persoButoirHausse: boolean;
        /**
         * PersoButoirBaisse
         */
        persoButoirBaisse: boolean;
        /**
         * ModeButoirHausse
         */
        modeButoirHausse: string;
        /**
         * ModeButoirBaisse
         */
        modeButoirBaisse: string;
        /**
         * DateButoirHausse
         */
        dateButoirHausse: string;
        /**
         * DateButoirBaisse
         */
        dateButoirBaisse: string;
        /**
         * TauxButoirHausse
         */
        tauxButoirHausse: number;
        /**
         * TauxButoirBaisse
         */
        tauxButoirBaisse: number;
        /**
         * TypeTaux
         */
        typeTaux: string;
        /**
         * TxPhas
         */
        tauxPhase: ITauxInteretAnnuelLecture;
        /**
         * TxPhasHorsBonfMajre
         */
        tauxPhaseHorsBonificationMajre: ITauxInteretAnnuelLecture;
        /**
         * Mefiha_MtPrmeecheHorsAccs
         */
        montantPrmeecheHorsAccessoire: number;
        /**
         * Mtfacc_MtPrmeecheAccsPerd
         */
        montantPrmeecheAccessoirePeriode: number;
        /**
         * InteretsDifferes
         */
        interetsDifferes: boolean;
        /**
         * CodeRecouvCapitInterets
         */
        codeRecouvCapitInterets: number;
        /**
         * ModeRecouvInterets
         */
        modeRecouvInterets: number;
        /**
         * ModeCapitInterets
         */
        modeCapitInterets: number;
        /**
         * CapitActive
         */
        capitActive: boolean;
        /**
         * RecouvActive
         */
        recouvActive: boolean;
        /**
         * ChoixCapitalisation
         */
        choixCapitalisation: boolean;
        /**
         * ChoixRecouvrement
         */
        choixRecouvrement: boolean;
        /**
         * Capitalisation
         */
        capitalisation: boolean;
        /**
         * Recouvrement
         */
        recouvrement: boolean;
        /**
         * MtPremiereEcheance
         */
        montantPremiereEcheance: number;
        /**
         * ChoixPeriode
         */
        choixPeriode: boolean;
        /**
         * ChoixPeriodicite
         */
        choixPeriodicite: boolean;
        /**
         * EstVisibleTaux
         */
        estVisibleTaux: boolean;
        /**
         * EstVisibleMarge
         */
        estVisibleMarge: boolean;
        /**
         * ListeChoixPeriode
         */
        listeChoixPeriode: Array<number>;
        /**
         * EstActifDuree
         */
        estActifDuree: boolean;
        /**
         * EstActifPeriodicite
         */
        estActifPeriodicite: boolean;
        /**
         * EstActifTaux
         */
        estActifTaux: boolean;
        /**
         * EstActifMarge
         */
        estActifMarge: boolean;
        /**
         * ListeModeCapitalisation
         */
        listeModeCapitalisation: Array<IScConstante>;
        /**
         * ListeModeRecouvrement
         */
        listeModeRecouvrement: Array<IScConstante>;
        /**
         * EstVisibleButoirHausse
         */
        estVisibleButoirHausse: boolean;
        /**
         * EstVisibleButoirBaisse
         */
        estVisibleButoirBaisse: boolean;
        /**
         * EstActifButoirHausse
         */
        estActifButoirHausse: boolean;
        /**
         * EstActifButoirBaisse
         */
        estActifButoirBaisse: boolean;
        /**
         * EstVisibleTauxHausse
         */
        estVisibleTauxHausse: boolean;
        /**
         * EstVisibleTauxBaisse
         */
        estVisibleTauxBaisse: boolean;
        /**
         * EstVisibleJeuDeParametres
         */
        estVisibleJeuxDeParametres: boolean;
        /**
         * EstActifJeuDeParametres
         */
        estActifJeuxDeParametres: boolean;
        /**
         * EstVisibleQuotite
         */
        estVisibleQuotite: boolean;
        /**
         * EstActifQuotite
         */
        estActifQuotite: boolean;
        /**
         * ListeJeuxParametresRevision
         */
        listeJeuxParametresRevision: Array<string>;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntParmRevsParPhas
         */
        idParametreRevisionParPhase: string;
        /**
         * ListIdntPalrTx
         */
        listeIdPalierTaux: Array<string>;
        /**
         * PhasePrdt
         */
        phaseProduit: IScProduitPhase;
    }
    interface ICreditParamIndexationLecture extends IElementLecture {
        /**
         * Nofrpe_NumePerdRevsAsscParmIndx
         */
        numeroPeriodeRevisionAssuranceParametreIndex: number;
        /**
         * Nofcfp_NumePhasPrdtAsscParmIndx
         */
        numeroPhaseProduitAssuranceParametreIndex: number;
        /**
         * Nofrji_NumeIndcRevsCred
         */
        numeroIndiceRevisionCredit: number;
        /**
         * Ctfrri_TypeRolIndc
         */
        typeRolIndice: string;
        /**
         * Cdfcin_CodeIndcRevs
         */
        codeIndiceRevision: string;
        /**
         * Ctfrui_ModeExprUtlsIndc
         */
        modeExpressionUtilisationIndice: number;
        /**
         * Cdfrui_ValrRefeIndc
         */
        valeurReferenceIndice: number;
        /**
         * Tvfrui_ValrCoefParmRevs
         */
        valeurCoefficientParametreRevision: number;
        /**
         * Cdfrop_CodeReptModfeche
         */
        codeReptModfeche: number;
        /**
         * Ctfrop_ModeReptModfeche
         */
        modeReptModfeche: number;
        /**
         * Nrfrrv_EvenDeclRevs
         */
        evenDeclarationRevision: string;
        /**
         * Nrfrr1_EvenDeclPrmeRevs
         */
        evenDeclarationPrmeRevision: string;
        /**
         * Npfrp1_NbPerdDetrPrmePerdRevs
         */
        nombrePeriodeDetrPrmePeriodeRevision: number;
        /**
         * Pefrp1_CodePerdDelUtlsDetrDatePrmeRevs
         */
        codePeriodeDelUtilisationDetrDatePrmeRevision: number;
        /**
         * Cdfrpj_CodeJourRevs
         */
        codeJourRevision: string;
        /**
         * Cdfrpp_CodeMoisRevs
         */
        codeMoisRevision: string;
        /**
         * Qcfrpj_NbJourAjtPourDetrDatePrmeRevs
         */
        nombreJourAjtPourDetrDatePrmeRevision: number;
        /**
         * Cnfrut_NatrLimtVart
         */
        natureLimiteVart: number;
        /**
         * Cdfrut_CodeValrRefeVartMaxi
         */
        codeValeurReferenceVartMaximum: number;
        /**
         * Ctfrut_ModeExprVartTxIndc
         */
        modeExpressionVartTauxIndice: number;
        /**
         * Tvfrut_ValrVartTxIndc
         */
        valeurVartTauxIndice: number;
        /**
         * Nrfrie_CodeEvenPermDetrValrIntlIndc
         */
        codeEvenPermDetrValeurInitialIndice: string;
        /**
         * Dtfrie_DateFixeDetrValrIntlIndc
         * Type date au format yyyy-MM-dd
         */
        dateFixeDetrValeurInitialIndice: string;
        /**
         * Npfrie_NbPerdDelEvenDetrDateValrIntlIndc
         */
        nombrePeriodeDelEvenDetrDateValeurInitialIndice: number;
        /**
         * Pefrie_CodePerdDelUtlsDetrValrIntlIndc
         */
        codePeriodeDelUtilisationDetrValeurInitialIndice: number;
        /**
         * Cdfrve_CodeIndicValrRefeVartEche
         */
        codeIndiceValeurReferenceVartEcheance: number;
        /**
         * Tvfrve_ValrVartMaxiEche
         */
        valeurVartMaximumEcheance: number;
        /**
         * IdntParmRevs
         */
        idParametreRevision: string;
    }
    interface ICreditParamRevisionParPeriodeLecture extends ICreditParamRevisionLecture {
        /**
         * Nofpre_NumePerdPrdt
         */
        numeroPeriodeProduit: number;
        /**
         * Npfrpf_NbPerdDurePerd
         */
        nombrePeriodeDurePeriode: number;
        /**
         * Ptfrpe_CodePerdDurePerd
         */
        codePeriodeDurePeriode: number;
        /**
         * Nxfrpe_EvenDeclDebtPerd
         */
        evenDeclarationDebutPeriode: string;
        /**
         * Npfrpe_NbPerdCmpstDelPremPerdRevs
         */
        nombrePeriodeCmpstDelPremierPeriodeRevision: number;
        /**
         * Pefrpe_CodePerdCorrNbPerdCmpstDel
         */
        codePeriodeCorrNombrePeriodeCmpstDel: number;
    }
    interface ICreditParamRevisionParPhaseLecture extends ICreditParamRevisionLecture {
        /**
         * Ctfcfp_CodeTypePhasAsscParmRevs
         */
        codeTypePhaseAssuranceParametreRevision: string;
    }
    interface ICreditParamRevisionLecture extends IElementLecture {
        /**
         * Idfrlr_IdntLoiRevs
         */
        idLoiRevision: string;
        /**
         * Nofrji_NumeJeuIndcRevsAsscCred
         */
        numeroJeuxIndiceRevisionAssuranceCredit: number;
        /**
         * Cdfres_CodeIndicecheRecl
         */
        codeIndicecheReclame: number;
        /**
         * Ctfrub_ModeExprButrTxBais
         */
        modeExpressionButoireTauxBaisse: number;
        /**
         * Ctfruh_ModeExprButrTxHaus
         */
        modeExpressionButoireTauxHausse: number;
        /**
         * Tvfru1_ValrButrTxBais
         */
        valeurButoireTauxBaisse: number;
        /**
         * Tvfru2_ValrButrTxHaus
         */
        valeurButoireTauxHausse: number;
        /**
         * Llfrlr_LibelleLoiRevision
         */
        libelleLoiRevision: string;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * ListIdntParmIndx
         */
        listeIdParametreIndex: Array<string>;
    }
    interface IEcheanceOptimisationLecture extends IElementLecture {
        /**
         * Mefhcd_MtRembSais
         */
        montantRemboursementSaisie: number;
        /**
         * Ctfhel_CodeTypeElemSais
         */
        codeTypeElementSaisie: number;
        /**
         * IdntPalrTx
         */
        idPalierTaux: string;
    }
    interface ICreditPalierTauxLecture extends IElementLecture {
        /**
         * TxIntePalr
         */
        tauxInterieurPalier: ITauxInteretAnnuelLecture;
        /**
         * Ctfctb_CodeTypeRemb
         */
        codeTypeRemboursement: number;
        /**
         * Txfcpg_TxPrgrEcheSurPalr
         */
        tauxProgressifEcheanceSurPalier: number;
        /**
         * Pefcpg_CodePerdAppliTxPrgrEchePalr
         */
        codePeriodeApplicationTauxProgressifEcheancePalier: number;
        /**
         * Nufape_NumeReltPrmeEchePalr
         */
        numeroRelationPrmeEcheancePalier: number;
        /**
         * Nufapp_NumeReltDernEchePalr
         */
        numeroRelationDernierEcheancePalier: number;
        /**
         * Npfcal_NbPerdDureePalr
         */
        nombrePeriodeDureePalier: number;
        /**
         * IdntCredPhas
         */
        idCreditPhase: string;
        /**
         * ListIdntEcheOptm
         */
        listeIdEcheanceOptimisation: Array<string>;
        /**
         * IdntPalrTxAsscPrdt
         */
        idPalierTauxAssuranceProduit: string;
    }
    interface ITrancheELLecture extends IElementLecture {
        /**
         * Txfpep_TxEpar
         */
        tauxEpargne: number;
        /**
         * Mtfaac_MtDrtAcqs
         */
        montantDroitAcqs: number;
        /**
         * Dtfpae_DateArreEpar
         * Type date au format yyyy-MM-dd
         */
        dateArreEpargne: string;
        /**
         * Lbfpet_LibletblOrigDrtPret
         */
        libletblOrigineDroitPret: string;
        /**
         * Cdfdpj_CodeDrtJust
         */
        codeDroitJustificatif: number;
        /**
         * Cdfiel_CodeRaptContEparLogm
         */
        codeRaptContratEpargneLogement: number;
        /**
         * Mtfida_MtDrtAcqsDepsOrigContEparLogm
         */
        montantDroitAcqsDepsOrigineContratEpargneLogement: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfird_CodeResrDrtAcqs
         */
        codeResrDroitAcqs: number;
        /**
         * IdntDrtUtls
         */
        idDroitUtilisation: string;
        /**
         * IdntContEparLogm
         */
        idContratEpargneLogement: string;
    }
    interface ICreditModaliteLecture extends IElementLecture {
        /**
         * Idfcmi_IdntModlCalcImpe
         */
        idModeleCalculImpe: string;
        /**
         * Txfdri_TxIndmRembAntc
         */
        tauxIndemniteRemboursementAnticipe: number;
        /**
         * Nofcmc_NumeModlRembAntc
         */
        numeroModeleRemboursementAnticipe: number;
        /**
         * Txfcsr_SurcTxParRappRembAntc
         */
        surcTauxParRappRemboursementAnticipe: number;
        /**
         * Txffmi_TxInteRetdImpe
         */
        tauxInterieurRetardImpe: number;
        /**
         * Mtffmi_MtIndmImpe
         */
        montantIndemniteImpe: number;
        /**
         * Cdfccr_CodeTrtInteIntrSurImpe
         */
        codeTraitementInterieurIntrSurImpe: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface ICompteCourantLecture extends IElementLecture {
        /**
         * Mtfasc_MtHyptCapt
         */
        montantHypothequeCapital: number;
        /**
         * Cifcmh_CodeIndicBlcgSaisMtHyptCapt
         */
        codeIndiceBlcgSaisieMontantHypothequeCapital: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface ICreditBonificationInfoLecture extends IElementLecture {
        /**
         * Cdfdic_CodeInfo
         */
        codeInformation: string;
        /**
         * sCdfddi_CodeDetail
         */
        codeDetail: string;
    }
    interface ICreditBonificationLecture extends IElementLecture {
        /**
         * Idfdce_IdCreditExterne
         */
        idCreditExterne: string;
        /**
         * Cifdcm_CodeEtat
         */
        codeEtat: number;
        /**
         * Mefdbc_MontantEtablissement
         */
        montantEtablissement: number;
        /**
         * Mefdbr_MontantPartenaire
         */
        montantPartenaire: number;
        /**
         * EstEligible
         */
        estEligible: boolean;
        /**
         * Lbfpnm_NomPartenaire
         */
        nomPartenaire: string;
        /**
         * ModeCalculTaux
         */
        modeCalculTaux: number;
        /**
         * TauxHorsBonif
         */
        tauxHorsBonif: number;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * Infos
         */
        information: Array<ICreditBonificationInfoLecture>;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface IHypothequeAerienneLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeSer
         */
        numeroSer: string;
        /**
         * Lbfolt_NumeImmt
         */
        numeroImmt: string;
    }
    interface IBonDeCaisseCapitalisationLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_NumeSiren
         */
        numeroSiren: string;
        /**
         * Lbfoo2_ValrBonOrig
         */
        valeurBonOrigine: number;
        /**
         * Lbfoo3_NumeContTitr
         */
        numeroContratTitre: string;
        /**
         * Lbfoo4_NatrBon
         */
        natureBon: string;
        /**
         * Lbfoo5_Dateeche
         * Type date au format yyyy-MM-dd
         */
        dateeche: string;
        /**
         * Lbfoo6_TitrNomPrenDeps
         */
        titreNomPrenDeps: string;
    }
    interface IDelegationLoyerLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_MtAnnuLoye
         */
        montantAnnuLoye: number;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_DateExtnBail
         * Type date au format yyyy-MM-dd
         */
        dateExterneBail: string;
        /**
         * Lbfoo2_NomGern
         */
        nomGern: string;
    }
    interface ICessionDaillyAutreLecture extends IBienPorteEnGarantieLecture {
    }
    interface IContratAssuranceLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_DateNaisAssr
         * Type date au format yyyy-MM-dd
         */
        dateNaisAssurance: string;
        /**
         * Lbfolt_NumeContAssr
         */
        numeroContratAssurance: string;
        /**
         * Lbfoo1_NomCieAssr
         */
        nomCieAssurance: string;
        /**
         * Lbfoo2_NumeSiren
         */
        numeroSiren: string;
        /**
         * Lbfoo3_CntrGest
         */
        cntrGestion: string;
        /**
         * Lbfoo4_TypeTechJurd
         */
        typeTechniqueJuridique: string;
        /**
         * Lbfoo5_NomContAssr
         */
        nomContratAssurance: string;
        /**
         * Lbfoo6_ApprPers
         */
        apportPersonne: number;
        /**
         * Lbfoo7_MtMinmVerstSign
         */
        montantMinimumVersementSigne: number;
        /**
         * Cdfvat_CodeIndicAttnVerst
         */
        codeIndiceAttnVersement: number;
        /**
         * ListIdntVerstAttn
         */
        listeIdVersementAttn: Array<string>;
    }
    interface IAntichreseLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_RefeCads
         */
        referenceCads: string;
        /**
         * Lbfolt_NumeLot
         */
        numeroLot: string;
    }
    interface ICessionDaillyLoyerImmeubleLecture extends IBienPorteEnGarantieLecture {
    }
    interface IGageVehiculeLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeSer
         */
        numeroSer: string;
        /**
         * Lbfolt_NumeImmt
         */
        numeroImmt: string;
    }
    interface IGageCompteInstrumentFinancierLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
    }
    interface INantissementPartSocialeLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeEnrg
         */
        numeroEnregistrement: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_TitrInte
         */
        descriptionOtion: string;
    }
    interface INantissementValeurMaterielleLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_TypeValrMatr
         */
        typeValeurMatrimonial: string;
        /**
         * Lbfolt_NumeSer
         */
        numeroRefTypeLot: string;
    }
    interface INantissementValeurMobiliereLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
    }
    interface INantissementFondDeCommerceLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeInscRcs
         */
        numeroInscRcs: string;
        /**
         * Lbfolt_LiblLibr
         */
        libelleLibr: string;
        /**
         * Cdfomo_TitrOccpLocLeqlFondEstExpl
         */
        titreOccpLocLeqlFondEstExpl: number;
    }
    interface IHypothequeImmobiliereLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_RefeCads
         */
        referenceCads: string;
        /**
         * Lbfolt_RefeLot
         */
        referenceLot: string;
        /**
         * Ctfmoi_TypeBien
         */
        typeBien: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * Cdfcdo_DestBien
         */
        destinataireBien: number;
        /**
         * Nbfosh_SurfHabt
         */
        surfHabitation: number;
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfcoi_ZoneImplBien
         */
        zoneImplBien: string;
        /**
         * Cdfqem_QualEmpla
         */
        qualEmpla: number;
        /**
         * Lbfoo1_MtDernMutt
         */
        montantDernierMutt: string;
        /**
         * Lbfoo2_DateDernMutt
         */
        dateDernierMutt: string;
        /**
         * Dtfoco_AnneConst
         */
        anneConstruction: number;
        /**
         * Lbfoo3_MtAnnuLoye
         */
        montantAnnuLoye: string;
        /**
         * Lbfoo5_NumeLotCopr
         */
        numeroLotCopr: string;
        /**
         * Lbfoo4_NumeSctn
         */
        numeroSctn: string;
        /**
         * Cifcoc_OccpActlBien
         */
        occpActuarielBien: number;
        /**
         * Cifcph_CodePresHypt
         */
        codePresHypotheque: number;
        /**
         * Idfceb_IdntExpr
         */
        idExpression: string;
        /**
         * Dtfcde_DateDemnExpr
         * Type date au format yyyy-MM-dd
         */
        dateDemandeExpression: string;
        /**
         * ListIdntProprios
         */
        listeIdProprios: Array<string>;
        /**
         * ListIdntRefCadastrls
         */
        listeIdReferenceCadastrls: Array<string>;
        /**
         * ListIdntRefLot
         */
        listeIdReferenceLot: Array<string>;
        /**
         * Dtfoac_DateAcquisitio
         * Type date au format yyyy-MM-dd
         */
        dateAcquisition: string;
        /**
         * Mtfoac_CoutAcquisition
         */
        coutAcquisition: number;
        /**
         * Nbfosa_SurfaceAnnexes
         */
        surfaceAnnexes: number;
        /**
         * Cdfomo_ModaliteOccupation
         */
        numeroDeVolume: number;
    }
    interface IBienDiversLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Refe1
         */
        reference1: string;
        /**
         * Lbfolt_Refe2
         */
        reference2: string;
    }
    interface IBienPorteEnGarantieLecture extends IElementLecture {
        /**
         * Lbfoof_LiblObjt
         */
        libelleObjet: string;
        /**
         * Cdfcni_TypeObjtComl
         */
        typeObjetCommercialisation: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Mtfgo2_MtEstmPrdn
         */
        montantEstmPrdn: number;
        /**
         * Dtfgo2_DateEstmPrdn
         * Type date au format yyyy-MM-dd
         */
        dateEstmPrdn: string;
        /**
         * Cdfgm2_CodeModlEstmPrdn
         */
        codeModeleEstmPrdn: string;
        /**
         * Cmfgt2_CodeMotfReSPrdn
         */
        codeMotfReSPrdn: string;
        /**
         * Dtfiex_DateExprBienCff
         * Type date au format yyyy-MM-dd
         */
        dateExpressionBienCff: string;
        /**
         * Lbfpex_NoteExprBienCff
         */
        noteExpressionBienCff: number;
        /**
         * Idfoof_IdntObjtGest
         */
        idObjetGestion: string;
        /**
         * PorteSurProjet
         */
        porteSurProjet: boolean;
        /**
         * Cifaan_SouscriptionContratAssurance
         */
        souscriptionContratAssurance: boolean;
        /**
         * IdntGarnReel
         */
        idGarantieReel: string;
    }
    interface ICreditHDLecture extends IElementLecture {
        /**
         * Txfgcr_Quot
         */
        pourcentCreditCouvert: number;
        /**
         * Mkfaco_CaptCouv
         */
        capitalCouverture: number;
        /**
         * Dtfgaf_DateAffec
         * Type date au format yyyy-MM-dd
         */
        dateAffectation: string;
        /**
         * Dffgaf_DateFinAffec
         * Type date au format yyyy-MM-dd
         */
        dateFinAffectation: string;
        /**
         * Idfcct_RefrPret
         */
        referencePret: string;
        /**
         * Idfadi_IdntDossRefe
         */
        idDossierReference: string;
        /**
         * Lbfcvs_LiblPret
         */
        libellePret: string;
        /**
         * Mtfaoc_MtPret
         */
        montantPret: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cnfctx_CodeRevs
         */
        codeRevision: boolean;
        /**
         * Txfama_Taux
         */
        tauxMoyen: number;
        /**
         * Cdfcin_CodeIndc
         */
        codeIndice: string;
        /**
         * Txfrrv_MargRevs
         */
        margeRevision: number;
        /**
         * Dtfam0_DateMer0
         * Type date au format yyyy-MM-dd
         */
        dateMER0: string;
        /**
         * Dtfaef_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffacr_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Mkfard_Crd
         */
        cRDCredit: number;
        /**
         * Mefmpe_MtEchnTotl
         */
        montantEcheanceTotal: number;
        /**
         * Cdfcno_NatrPret
         */
        naturePret: string;
        /**
         * Nufpct_NumrContEpar
         */
        numeroContratEpargne: string;
        /**
         * Mtfggi_MtIntlGarn
         */
        montantInitialGarantie: number;
        /**
         * EtabPrtr
         */
        etabPrtr: string;
        /**
         * Npfcfi_NbPerdCred
         */
        nombrePeriodeCredit: number;
        /**
         * Pefcfi_CodePerdCred
         */
        codePeriodeCredit: number;
        /**
         * TegModeRestitution
         */
        tegModeRestitution: number;
        /**
         * IdntCrdtExst
         */
        idCreditExiste: string;
    }
    interface IGarantieHDLecture extends IElementLecture {
        /**
         * Cdfcng_NatrGarnHorsDoss
         */
        natureGarantieHorsDossier: string;
        /**
         * Idfgg1_IdntOrigGarnHorsDoss
         */
        idOrigineGarantieHorsDossier: string;
        /**
         * CodeGarnRchab
         */
        codeGarantieRchab: number;
        /**
         * Nofghy_RangPrncHypt
         */
        rangPrincipalHypotheque: number;
        /**
         * Nofgsh_RangSecnHypt
         */
        rangSecnHypotheque: number;
        /**
         * Cdfgrh_CodeCessRangHypt
         */
        codeCessRangHypotheque: number;
        /**
         * IdnttblPrt
         */
        idEtabPreteur: string;
        /**
         * VilleConsvHypt
         */
        villeConsvHypotheque: string;
        /**
         * DatePublHypt
         * Type date au format yyyy-MM-dd
         */
        datePublHypotheque: string;
        /**
         * RfVolm
         */
        refVolume: string;
        /**
         * NumVolm
         */
        numeroVolume: number;
        /**
         * DateEfftHypt
         * Type date au format yyyy-MM-dd
         */
        dateEffetHypotheque: string;
        /**
         * DateFinHypt
         * Type date au format yyyy-MM-dd
         */
        dateFinHypotheque: string;
        /**
         * LiblEmpr
         */
        libelleEmprunt: string;
        /**
         * LiblNotr
         */
        libelleNotaire: string;
        /**
         * VilleNotr
         */
        villeNotaire: string;
        /**
         * MtInscHyptOrig
         */
        montantInscHypothequeOrigine: number;
        /**
         * MtHyptDisp
         */
        montantHypothequeDisp: number;
        /**
         * DateDispMt
         * Type date au format yyyy-MM-dd
         */
        dateDispMontant: string;
        /**
         * Cdfgpc_PactCommr
         */
        pactCommr: string;
        /**
         * Cefggi_CodEttGarn
         */
        codeEtatGarantie: number;
        /**
         * Cdfgex_CodeIndicGarnExtn
         */
        codeIndiceGarantieExterne: number;
        /**
         * CodeIndicTrfoGarn
         */
        codeIndiceTrfoGarantie: number;
        /**
         * Npfgdg_DurIntlMois
         */
        dureeInitialMois: number;
        /**
         * Idfoof_IdntObjtPortGarn
         */
        idObjetPortGarantie: string;
        /**
         * Ctfggm_CodeTypeGarnMyss
         */
        codeTypeGarantieMyss: string;
        /**
         * IdntGarnReel
         */
        idGarantieReel: string;
        /**
         * ListIdntCredExstHorsDoss
         */
        listeIdCreditExisteHorsDossier: Array<string>;
    }
    interface ITrancheMontantLecture extends IElementLecture {
        /**
         * Nufctr_NumeTrchMt
         */
        numeroTrancheMontant: number;
        /**
         * Txfcaa_TxTrchMt
         */
        tauxTrancheMontant: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * IdntCots
         */
        idCotisation: string;
        /**
         * IdntRemsClnt
         */
        idRemsClient: string;
    }
    interface ICotisationDerogationLecture extends ICotisationLecture {
        /**
         * Nufctr_NumeTrchAge
         */
        numeroTrancheAge: number;
        /**
         * Npfcap_NbPerdAppliDerg
         */
        nombrePeriodeApplicationDerogation: number;
        /**
         * Pefcap_PerdAppliDerg
         */
        periodeApplicationDerogation: number;
    }
    interface ICotisationTrancheAgeLecture extends ICotisationLecture {
        /**
         * Nufctr_NumeTrchAge
         */
        numeroTrancheAge: number;
        /**
         * Nbfcai_AgeMini
         */
        ageMinimum: number;
        /**
         * Nbfcae_AgeMaxi
         */
        ageMaximum: number;
    }
    interface ICotisationPhaseLecture extends ICotisationLecture {
        /**
         * IdntPhas
         */
        idPhase: string;
    }
    interface ICotisationPeriodeLecture extends ICotisationLecture {
        /**
         * Nufctr_NumeTrch
         */
        numeroTranche: number;
        /**
         * Npfcap_NbPerdPerd
         */
        nombrePeriodePeriode: number;
        /**
         * Pefcap_PerdPerd
         */
        periodePeriode: number;
        /**
         * Npfcel_NbPerdEtlm
         */
        nombrePeriodeEtlm: number;
        /**
         * Pefcde_PerdEtlm
         */
        periodeEtlm: number;
    }
    interface ICotisationLecture extends IElementLecture {
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: number;
        /**
         * CodeIndicBlcgSaisMont
         */
        codeIndiceBlcgSaisieMontant: number;
        /**
         * Ctfhac_CodeModeCalc
         */
        codeModeCalcul: number;
        /**
         * Cdfcap_CodeIndicApplEche
         */
        codeIndiceApplicationEcheance: boolean;
        /**
         * Pefcac_CodePerdCalc
         */
        codePeriodeCalcul: number;
        /**
         * Dtfhac_DateApplCots
         * Type date au format yyyy-MM-dd
         */
        dateApplicationCotisation: string;
        /**
         * Ddfhac_DateDebtAppliCots
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplicationCotisation: string;
        /**
         * Dffhac_DateFinAppliCots
         * Type date au format yyyy-MM-dd
         */
        dateFinApplicationCotisation: string;
        /**
         * Cdfceh_CodeRecv
         */
        codeRecouvrement: number;
        /**
         * Mtfhac_MtAsst
         */
        montantAssiette: number;
        /**
         * Ctfcac_TypeAccs
         */
        typeAccessoire: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
        /**
         * Ctfcel_CodeTypeAsstCalculElt
         */
        codeTypeAssietteCalculElt: string;
        /**
         * Cdfc1a_CodeRegleEvtPremierAppel
         */
        codeRegleEvenementPremierAppel: string;
        /**
         * Ctftva_CodeTypeTvaAcc
         */
        codeTypeTVAAccessoire: string;
        /**
         * Npfdaa_NbJoursAnneeNumerateur
         */
        nombreJoursAnneeNumerateur: number;
        /**
         * Npfdad_NbJoursAnneeDenominateur
         */
        nombreJoursAnneeDenominateur: number;
        /**
         * Npfce1_NbPerdAppliCots
         */
        nombrePeriodeApplicationCotisation: number;
        /**
         * Pefcde_PerdAppliCots
         */
        periodeApplicationCotisation: number;
        /**
         * Nrfccr_NumeReglCalcCots
         */
        numeroRegleCalculCotisation: string;
        /**
         * Nrfcmr_NumeReglAppliCots
         */
        numeroRegleApplicationCotisation: string;
        /**
         * Ctfcia_CodeTypeAppliCots
         */
        codeTypeApplicationCotisation: number;
        /**
         * Mtfgfr_MtFrsGarn
         */
        montantFrsGarantie: number;
        /**
         * Txfcac_TxConsFrsDoss
         */
        tauxConsolideFrsDossier: number;
        /**
         * Mtfca5_MtConsFrsDoss
         */
        montantConsolideFrsDossier: number;
        /**
         * Txfipf_PartFinn
         */
        partFinancier: number;
        /**
         * CodeIndicDepsBorn
         */
        codeIndiceDepsBorne: number;
        /**
         * Cifcip_CodeIndicIntePlanFinn
         */
        codeIndiceInterieurPlanFinancier: number;
        /**
         * IdntAccs
         */
        idAccessoire: string;
        /**
         * IdntCouv
         */
        idCouverture: string;
        /**
         * ListIdntTrchMt
         */
        listeIdTrancheMontant: Array<string>;
        /**
         * IdntRemsClnt
         */
        idRemsClient: string;
    }
    interface IRemiseClientLecture extends IElementLecture {
        /**
         * Ctfcrm_TypeRemsClnt
         */
        typeRemsClient: string;
        /**
         * MtAppl
         */
        montantApplication: number;
        /**
         * TxAppl
         */
        tauxApplication: number;
        /**
         * MargAppl
         */
        margeApplication: number;
        /**
         * Mtfirm_MtDerg
         */
        montantDerogation: number;
        /**
         * Txfirt_TxDerg
         */
        tauxDerogation: number;
        /**
         * Txfira_MargDerg
         */
        margeDerogation: number;
        /**
         * Mtfcac_MtCons
         */
        montantConsolide: number;
        /**
         * Txfcac_TxCons
         */
        tauxConsolide: number;
        /**
         * Txfcmc_MargCons
         */
        margeConsolide: number;
        /**
         * Cdfctx_ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * Dtfccr_DateCret
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Mtfire_MtRems
         */
        montantRems: number;
        /**
         * Mtfird_MtRemsDerg
         */
        montantRemsDerogation: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntCots
         */
        idCotisation: string;
        /**
         * IdntTrch
         */
        idTranche: string;
    }
    interface IPoolEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfaop_IdntOprtCess
         */
        idOprtCess: string;
        /**
         * Idfccf_IdntCadrFinn
         */
        idCadreFinancier: string;
        /**
         * Cnflpo_CodeNatrPool
         */
        codeNaturePool: number;
        /**
         * Cdfcor_CodeOrigCess
         */
        codeOrigineCess: number;
        /**
         * Ctfesr_TypeSousRolePool
         */
        typeSousRolePool: number;
        /**
         * Nofcca_NumVersionCadre
         */
        numeroVersionCadre: number;
    }
    interface IPayeurLecture extends IElementLecture {
        /**
         * Mtfdfx_MtPaieCred
         */
        montantPaiementCredit: number;
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
        /**
         * Cdfdrg_ModeReglUtlsParPayr
         */
        modeRegleUtilisationParPayr: string;
        /**
         * Nufddt_NumeCptePayr
         */
        numeroComptePayr: string;
        /**
         * Idfdma_RefeUnqMand
         */
        referenceUniqueMand: string;
        /**
         * Dgfdma_DateSignMand
         * Type date au format yyyy-MM-dd
         */
        dateSigneMand: string;
        /**
         * Cdfdrs_ModeReglUtlsParPayrSecours
         */
        modeRegleUtilisationParPayrSecours: string;
        /**
         * NumeroComptePayeurSecours
         */
        numeroComptePayeurSecours: string;
        /**
         * Idfdms_RefeUnqMandSecours
         */
        referenceUniqueMandSecours: string;
        /**
         * Dgfdms_DateSignMandSecours
         * Type date au format yyyy-MM-dd
         */
        dateSigneMandSecours: string;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntPersIdntCommPayr
         */
        idPersonneIdCommissionPayr: string;
    }
    interface IRelationEntrePersonnesLecture extends IElementLecture {
        /**
         * Cnfcrp_CodeNatureRelation
         */
        codeNatureRelation: string;
        /**
         * IdntPers1
         */
        idPersonne1: string;
        /**
         * IdntPers2
         */
        idPersonne2: string;
    }
    interface IPersonneMoraleLecture extends IPersonneLecture {
        /**
         * Nufpin_NumeInsee
         */
        numeroINSEE: string;
        /**
         * Dtfpir_DateInscRcs
         * Type date au format yyyy-MM-dd
         */
        dateInscRcs: string;
        /**
         * Dtfpcs_DateCretSoce
         * Type date au format yyyy-MM-dd
         */
        dateCreationSoce: string;
        /**
         * Mcfpch_ChffAffrHtExrcPrec
         */
        chiffreAffrHtExrcPrec: number;
        /**
         * Nbfpsa_NbSalr
         */
        nombreSalr: number;
        /**
         * Cdfpfj_FormJurd
         */
        formeJuridique: string;
        /**
         * Lbfpfj_LiblFormJurd
         */
        libelleFormeJuridique: string;
        /**
         * Cdfpdp_TypeDrtPersMorl
         */
        typeDroitPersonneMorl: number;
        /**
         * Mkfpca_MtCapt
         */
        montantCapital: number;
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
        /**
         * ListRolePersPhys
         */
        listeRolePersonnePhys: Array<string>;
    }
    interface IEtatDossierAssuranceLecture {
        /**
         * LibelleEtat
         */
        libelleEtat: string;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * LibelleDemande
         */
        libelleDemande: string;
        /**
         * LibelleDateEnvoi
         */
        libelleDateEnvoi: string;
    }
    interface IDecisionDossierAssuranceLecture {
        /**
         * AccesLectureDecision
         */
        accessoireLectureDecision: boolean;
        /**
         * AvisValide
         */
        avisValide: boolean;
        /**
         * CodeDecision
         */
        codeDecision: number;
        /**
         * LibelleCredit
         */
        libelleCredit: string;
        /**
         * LibelleAvis
         */
        libelleAvis: string;
        /**
         * LibelleErreur
         */
        libelleErreur: string;
    }
    interface IDossierAssuranceLecture {
        /**
         * EtatDossierAssurance
         */
        etatDossierAssurance: IEtatDossierAssuranceLecture;
        /**
         * DecisionDossierAssurance
         */
        decisionDossierAssurance: IDecisionDossierAssuranceLecture;
    }
    interface IPersonnePhysiqueLecture extends IPersonneLecture {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpci_LiblTitrCivl
         */
        libelleTitreCivilite: string;
        /**
         * Lbfppn_Prnm
         */
        prenom: string;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Lbfpnj_NomJeunFill
         */
        nomJeunFill: string;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNais: string;
        /**
         * Lbfpna_LieuNais
         */
        lieuNais: string;
        /**
         * Cdfpce_CodePersCe
         */
        codePersonneCE: number;
        /**
         * Cdfprm_CodeRegmMatr
         */
        codeRegimeMatrimonial: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Lbfpsf_LibelleSittFaml
         */
        libelleSituationFamille: string;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpsp_CateSoc
         */
        cateInteret: string;
        /**
         * Lbfmfc_LiblCatSocioPro
         */
        libelleCatSocioPro: string;
        /**
         * Dtfpma_DateEfftSittFaml
         * Type date au format yyyy-MM-dd
         */
        dateEffetSituationFamille: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmlo_CodeModeLogm
         */
        codeModeLogement: number;
        /**
         * Lbfmlo_LibelleModeLogm
         */
        libelleModeLogement: string;
        /**
         * Dtfmlo_DateEntrLogm
         * Type date au format yyyy-MM-dd
         */
        dateEntrLogement: string;
        /**
         * Cdfmju_CodeCapcJurd
         */
        codeCapcJuridique: number;
        /**
         * LibelleCapaciteJurd
         */
        libelleCapaciteJuridique: string;
        /**
         * Ctfccj_CodeTypeCapJurd
         */
        codeTypeCapJuridique: string;
        /**
         * Cdfmnt_CodeNatn
         */
        codeNational: number;
        /**
         * LibelleNationalite
         */
        libelleNationalite: string;
        /**
         * Cdfmtd_CodeSaisAvisTierDtnr
         */
        codeSaisieAvisTiersDtnr: number;
        /**
         * Cdfmcx_CodeCtx
         */
        codeContentieuxHorsComptCE: number;
        /**
         * Mtfmes_MtEncrSaccefHorsOprt
         */
        montantEncoursSaccefHorsOprt: number;
        /**
         * Cdfmtr_TypeTrspUtls
         */
        typeTrspUtilisation: number;
        /**
         * Cdfmge_CodeGeotAdrsDomc
         */
        codeGeotAdresseDomiciliation: string;
        /**
         * Cdfppb_CodePaysResdEmpr
         */
        codePaysResdEmprunt: string;
        /**
         * Cdfopb_CodePaysLocsEmpr
         */
        codePaysLocalisationEmprunt: string;
        /**
         * Cdfkpa_CodePrflEmpr
         */
        codeProfilEmprunt: number;
        /**
         * Cofcpn_CodePstlLieuNais
         */
        codePstlLieuNais: string;
        /**
         * DossierAssurance
         */
        dossierAssurance: IDossierAssuranceLecture;
        /**
         * IdntActv
         */
        idActivite: string;
        /**
         * IdntIntdBanc
         */
        idIntdBancaire: string;
        /**
         * ListIdntOpps
         */
        listeIdOpps: Array<string>;
        /**
         * Lbfce1_LbAdrEPS1
         */
        libelleAdresseEPS1: string;
        /**
         * Lbfce2_LbAdrEPS2
         */
        libelleAdresseEPS2: string;
        /**
         * Lbfce3_LbAdrEPS3
         */
        libelleAdresseEPS3: string;
        /**
         * Lbfce4_LbAdrEPS4
         */
        libelleAdresseEPS4: string;
        /**
         * Lbfce5_LbAdrEPS5
         */
        libelleAdresseEPS5: string;
        /**
         * Codaac_CatSocioPro
         */
        categorieSocioProfessionnelle: string;
        /**
         * Irdqsn_NumSirenEnt
         */
        numeroSirenEntreprise: string;
        /**
         * Lbfprm_LbRegMat
         */
        libelleRegimeMatrimonial: string;
        /**
         * Llfco1_LbClsRegMat
         */
        libelleClauseRegimeMatrimonial: string;
        /**
         * IdntEntrepreneurIndiv
         */
        idEntrepreneurIndiv: string;
        /**
         * IdntSignataire
         */
        idSignataire: string;
    }
    interface IPersonneLecture extends IElementLecture {
        /**
         * Cdfprs_CrteResd
         */
        crteResd: number;
        /**
         * LiblResidence
         */
        libelleResidence: string;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_CateTypeAdmnBafi
         */
        cateTypeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Idfpbd_CleBdf
         */
        cleBDF: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Dtfper_DateEntrReltAvecCons
         * Type date au format yyyy-MM-dd
         */
        dateEntrRelationAvecConsolide: string;
        /**
         * Cdfptp_CodeTypePers
         */
        codeTypePersonne: number;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Cdfpap_CodeAssmPartc
         */
        codeAssmPartc: number;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
        /**
         * Lbfpen_EnsgComm
         */
        ensgCommission: string;
        /**
         * Lbfpir_LieuInscRC
         */
        lieuInscRC: string;
        /**
         * Nufpir_NumeInscRC
         */
        numeroInscRC: string;
        /**
         * Ctfprp_RolsPersPourDoss
         */
        rolsPersonnePourDossier: Array<string>;
        /**
         * PersEstAssr
         */
        personneEstAssurance: boolean;
        /**
         * Nofpem_NumeOrdrPersEmpr
         */
        numeroOrdrePersonneEmprunt: number;
        /**
         * Ctfipe_CodeTypeBasePers
         */
        codeTypeBasePersonne: number;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Hefcsd_DateSignDmdeCred
         * Type date au format yyyy-MM-dd
         */
        dateSigneDmdeCredit: string;
        /**
         * Hefcso_DateSignOffre
         * Type date au format yyyy-MM-dd
         */
        dateSigneOffre: string;
        /**
         * ReltnEntrPers
         */
        reltnEntrPersonne: Array<IRelationEntrePersonnesLecture>;
        /**
         * ListIdntRess
         */
        listeIdRessource: Array<string>;
        /**
         * ListIdntChrg
         */
        listeIdCharge: Array<string>;
        /**
         * ListIdntCpte
         */
        listeIdCompte: Array<string>;
        /**
         * ListIdntFamlEprg
         */
        listeIdFamilleEpargne: Array<string>;
        /**
         * IdntFicheContact
         */
        idFicheContact: string;
    }
    interface IGarantieReelleLecture extends IGarantieLecture {
        /**
         * Cdfghr_CodeGarnRchab
         */
        codeGarantieRchab: number;
        /**
         * Nofgsh_NumeRangSecnHypt
         */
        numeroRangSecnHypotheque: number;
        /**
         * Npfgdg_DureHyptMois
         */
        dureHypothequeMois: number;
        /**
         * Cdfgpc_PactCommr
         */
        pactCommr: number;
        /**
         * Nofghy_RangHypt
         */
        rangHypotheque: number;
        /**
         * Cdfgrh_CodeCessRangHypt
         */
        codeCessRangHypotheque: number;
        /**
         * Mtfghy_MtCouvParHyptRangInfe
         */
        montantCouvertureParHypothequeRangInfe: number;
        /**
         * PortesurProjet
         */
        portesurProjet: boolean;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
        /**
         * IdntGarnHorsDoss
         */
        idGarantieHorsDossier: string;
        /**
         * IdntObjtPortGarn
         */
        idObjetPortGarantie: string;
        /**
         * Llfgvh_VilleConservationHypotheque
         */
        villeConservationHyp: string;
        /**
         * Llfgvo_LibelleReferenceVolume
         */
        lblRefVolume: string;
        /**
         * Dtfgpu_DateDePublication
         * Type date au format yyyy-MM-dd
         */
        datePublication: string;
        /**
         * Nofgvo_NumeroDeVolume
         */
        numeroDeVolume: number;
    }
    interface IGarantiePersonnelleLecture extends IGarantieLecture {
        /**
         * Cdfgtg_CodeNatrCaut
         */
        codeNatureCaution: number;
        /**
         * Montant_Encours
         */
        montantEncours: number;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
        /**
         * CalculSaccefAuto
         */
        calculSaccefAuto: boolean;
        /**
         * ListErrrTechNonBlqn
         */
        listeErrrTechniqueNonBlqn: Array<string>;
    }
    interface IGarantieLecture extends IAccessoireLecture {
        /**
         * Cdfcng_NatrGarn
         */
        natureGarantie: string;
        /**
         * Lbfgga_Commt
         */
        commentaire: string;
        /**
         * Dtfgre_DateLimtRetrCaut
         * Type date au format yyyy-MM-dd
         */
        dateLimiteRetardCaution: string;
        /**
         * Cdfaag_CodeFormActeAuth
         */
        codeFormeActeAuthentique: number;
        /**
         * Ctfcgg_CodeClssGarn
         */
        codeClasseGarantie: number;
        /**
         * Ctfggm_CodeTypeGarantieMysys
         */
        codeTypeGarantieMysys: string;
        /**
         * Ctfcsu_TypeSurt
         */
        typeSurtaxe: number;
        /**
         * SaccefPossible
         */
        saccefPossible: boolean;
        /**
         * bAccesSaccef
         */
        accessoireSaccef: boolean;
        /**
         * EtatBoutonSaccef
         */
        etatBoutonSaccef: number;
        /**
         * bAccesENET
         */
        accessoireENET: boolean;
        /**
         * IdntPers
         */
        idPersonne: string;
    }
    interface IAssuranceLecture extends IAccessoireLecture {
        /**
         * EstAssuranceAXA
         */
        estAssuranceAXA: boolean;
        /**
         * EstAssuranceCNP
         */
        estAssuranceCNP: boolean;
        /**
         * EstAssuranceGroupePourTAEA
         */
        estAssuranceGroupePourTAEA: boolean;
        /**
         * Ctfcaa_TypeAssr
         */
        typeAssurance: string;
        /**
         * Cdasdg_CodeDeleAssr
         */
        codeDeleAssurance: number;
        /**
         * Lbfabe_BenfAssrAvntVerst
         */
        beneficiaireAssuranceAvenantVersement: string;
        /**
         * Cdfaex_CodeCouvExts
         */
        codeCouvertureExts: number;
        /**
         * Ctfarq_TypeRisq
         */
        typeRisque: number;
        /**
         * CodeAssrObgt
         */
        codeAssuranceObligatoire: number;
        /**
         * Cdfaat_CodeAssrPart
         */
        codeAssurancePart: number;
        /**
         * Facultative
         */
        facultative: number;
        /**
         * Obligatoire
         */
        obligatoire: number;
        /**
         * ObligatoirePartielle
         */
        obligatoirePartielle: number;
        /**
         * Cdfarv_CodeResr
         */
        codeResr: number;
        /**
         * Lbfaex_LiblAssrExtn
         */
        libelleAssuranceExterne: string;
        /**
         * Nosrn_NumeSirenCieAssr
         */
        numeroSirenCieAssurance: string;
        /**
         * Nrfcan_NumeReglCalcDateEfft
         */
        numeroRegleCalculDateEffet: string;
        /**
         * Ctfaaa_CodeAgreAssrExtr
         */
        codeAgreAssuranceExtr: number;
        /**
         * Montant_Encours
         */
        montant_Encours: number;
        /**
         * Idfaos_IdntConfOffrAssr
         */
        idConfOffreAssurance: string;
        /**
         * Nrfcrt_NumeReglTarfAssr
         */
        numeroRegleTarfAssurance: string;
        /**
         * Idfaof_IdntCrdtConfCnp
         */
        idCreditConfCnp: string;
        /**
         * Txfaso_TauxSoclAssr
         */
        tauxSocialeAssurance: number;
        /**
         * IdntPersAssr
         */
        idPersonneAssurance: string;
    }
    interface IAccessoireLieProduitLecture extends IAccessoireLecture {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
    }
    interface IAccessoireComplementaireLecture extends IAccessoireLecture {
        /**
         * Cnfcoi_CodeNatrOrigAccs
         */
        codeNatureOrigineAccessoire: number;
        /**
         * IdntCatlFrsComp
         */
        idCatlFrsComp: string;
        /**
         * IdntCatlParmRverTier
         */
        idCatlParametreRverTiers: string;
        /**
         * Ctfprp_RoleTiers
         */
        roleTiers: string;
        /**
         * Lbfpa1_Intitule
         */
        intitule: string;
    }
    interface IServiceSurObjetLecture extends IAccessoireLecture {
        /**
         * Nrfcan_NumeReglCalcDateEfftServ
         */
        numeroRegleCalculDateEffetService: string;
        /**
         * Nofood_NumeReltObjtDossAuqlEstRattServ
         */
        numeroRelationObjetDossierAuqlEstRattachementService: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
        /**
         * IdntObjtServ
         */
        idObjetService: string;
    }
    interface IAccessoireLecture extends IElementLecture {
        /**
         * Idfaaa_IdntAccsGest
         */
        idAccessoireGestion: string;
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Ctfcah_CodeTyplAccs
         */
        codeTypologieAccessoire: string;
        /**
         * Txfipf_PartFinnAccs
         */
        partFinancierAccessoire: number;
        /**
         * CodeIndicAccsAper
         */
        codeIndiceAccessoireAper: boolean;
        /**
         * CodeIndicAccsFinn
         */
        codeIndiceAccessoireFinancier: boolean;
        /**
         * Dtfccr_DateCret
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Ddfaaa_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffaaa_DateFinEfft
         * Type date au format yyyy-MM-dd
         */
        dateFinEffet: string;
        /**
         * Cdfpim_CodeBeneficiaire
         */
        codeBeneficiaire: string;
        /**
         * Cdfpnb_PersonnalisationBeneficiare
         */
        personnalisationBeneficiare: number;
        /**
         * MontantFraisAccessoire
         */
        montantFraisAccessoire: number;
        /**
         * MontantSouhaite
         */
        montantSouhaite: number;
        /**
         * TauxRetenuAccessoire
         */
        tauxRetenuAccessoire: number;
        /**
         * ListIdntCouv
         */
        listeIdCouverture: Array<string>;
        /**
         * ListIdntCots
         */
        listeIdCotisation: Array<string>;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * ListIdntAvisOrgnExtr
         */
        listeIdAvisOrgnExtr: Array<string>;
        /**
         * IdntPlan
         */
        idPlan: string;
    }
    interface IContexteCoproLecture extends IElementLecture {
        /**
         * EstCopro100
         */
        estCopro100: boolean;
    }
    interface IDroitUtiliseLecture extends IElementLecture {
        /**
         * Mtfadu_MtDrtAcqsUtls
         */
        montantDroitAcqsUtilisation: number;
        /**
         * Mtfali_MtDrtLimt
         */
        montantDroitLimite: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntTrchEparLogm
         */
        idTrancheEpargneLogement: string;
    }
    interface IVariationDureeLecture extends IElementLecture {
        /**
         * Npfarv_NbPerdVartPoss
         */
        nombrePeriodeVartPossibilite: number;
        /**
         * TypeButrVartDure
         */
        typeButoireVartDure: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface IPieceClientLecture extends IPieceLecture {
    }
    interface IControleManuelLecture extends IPieceLecture {
        /**
         * Ctfchq_TypeActrOrigCtrl
         */
        typeActrOrigineControle: number;
        /**
         * Llfccm_CommtCtrl
         */
        commentaireControle: string;
        /**
         * HistCtrl
         */
        histControle: Array<IControleManuelLecture>;
    }
    interface IPieceAgenceLecture extends IPieceLecture {
    }
    interface IPieceLecture extends IElementLecture {
        /**
         * IdentifiantPiece
         */
        identifiantPiece: string;
        /**
         * Llfcpt_LiblPiecCtrl
         */
        libellePieceControle: string;
        /**
         * Ctfcth_CodeThm
         */
        codeTheme: string;
        /**
         * Ctfcp1_CodePrcs
         */
        identifiantProcessusAuPlusTard: string;
        /**
         * Cifcch_IndicCasEchn
         */
        indiceCasEcheance: number;
        /**
         * Cifcob_IndicObgt
         */
        indiceObligatoire: number;
        /**
         * Cdfaju_StttPiecCtrl
         */
        stttPieceControle: number;
        /**
         * Dtfarj_DateDernMajSttt
         * Type date au format yyyy-MM-dd
         */
        dateDernierMAJSttt: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Llfcai_LiblAide
         */
        libelleAide: string;
        /**
         * CodeEtatAcquistion
         */
        codeEtatAcquistion: string;
    }
    interface IContratEpargneLogementLecture extends IElementLecture {
        /**
         * Cdfppr_CodeTypeEL
         */
        codeTypeEL: number;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
        /**
         * TypeDrt
         */
        typeDroit: number;
        /**
         * Ctfpli_LienParnAvecCedn
         */
        lienParentAvecCedn: number;
        /**
         * Nufpct_IdntContEl
         */
        idContratEpargneLogement: string;
        /**
         * Lbfptc_LiblTitlCont
         */
        libelleTitulaireContrat: string;
        /**
         * Cdfpbc_CodeIndicBenePrimEl
         */
        codeIndiceBenePrimeEpargneLogement: number;
        /**
         * Ddfpct_DateOuvrCont
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureContrat: string;
        /**
         * Dtfprf_DateCltrCont
         * Type date au format yyyy-MM-dd
         */
        dateClotureContrat: string;
        /**
         * Cdfifr_CodeForc
         */
        codeForc: number;
        /**
         * Cdfiel_CodeRaptContEparLogm
         */
        codeRaptContratEpargneLogement: number;
        /**
         * Lbfpet_EtabOrigInte
         */
        etabOrigineInterieur: string;
        /**
         * Idfppc_IdntPersApprDrtCont
         */
        idPersonneApportDroitContrat: string;
        /**
         * Cdfpdj_CodeDrtJust
         */
        codeDroitJustificatif: number;
        /**
         * Cdfird_CodeResrDrtAcqs
         */
        codeResrDroitAcqs: number;
        /**
         * ContratPostReforme
         */
        contratPosteReforme: boolean;
        /**
         * ListIdntTrncEl
         */
        listeIdTrancheEpargneLogement: Array<string>;
        /**
         * IdwsPersBenef
         */
        idPersonneBeneficiaire: string;
    }
    interface IComplementFicheContactLecture extends IElementLecture {
        /**
         * Hdfcpc_HrDebtPlgHor
         */
        hrDebutPlgHor: number;
        /**
         * Hffcpc_HrFinPlgHor
         */
        hrFinPlgHor: number;
        /**
         * Llfccp_Comentair
         */
        comentair: string;
    }
    interface IPiecoThemeLecture extends IElementLecture {
        /**
         * CodeTheme
         */
        codeTheme: string;
        /**
         * Llfcth_LibelleLong
         */
        libelleLong: string;
        /**
         * Lcfcth_LibelleCourt
         */
        libelleCourt: string;
        /**
         * Nufccl_NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Ctfcet_CodeTypeElement
         */
        codeTypeElement: string;
    }
    interface IPiecoElementLecture extends IElementLecture {
        /**
         * Id
         */
        id: string;
        /**
         * NumRel
         */
        numeroRel: number;
        /**
         * TypeElement
         */
        typeElement: string;
        /**
         * Theme
         */
        theme: IPiecoThemeLecture;
        /**
         * Libelle
         */
        libelle: string;
    }
    interface IMotifEvenementConformiteLecture extends IElementLecture {
        /**
         * Id
         */
        id: string;
        /**
         * Idfadi_Dossier
         */
        dossier: string;
        /**
         * Origine
         */
        origine: IPiecoElementLecture;
        /**
         * Hefima_DateDebut
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * Hefilm_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Dtfar4_DerniereMaj
         * Type date au format yyyy-MM-dd
         */
        derniereMAJ: string;
        /**
         * Idfaen_IdEntite
         */
        idEntite: string;
        /**
         * Nofajd_NumeroRelatif
         */
        numeroRelatif: number;
        /**
         * Cefima_EtatMotif
         */
        etatMotif: number;
        /**
         * Ctfcet_TypeMotif
         */
        typeMotif: string;
        /**
         * MotifActif
         */
        motifActif: boolean;
        /**
         * CtfCth_ThemeRegroupement
         */
        themeRegroupement: string;
        /**
         * Llfcth_LibelleLongTheme
         */
        libelleLongTheme: string;
        /**
         * Qcfima_CptEvenementConformite
         */
        cptEvenementConformite: number;
        /**
         * Llfcpt_LiblPiecCtrl
         */
        libellePieceControle: string;
    }
    interface IEvenementConformiteLecture extends IElementLecture {
        /**
         * Idfadi_Dossier
         */
        dossier: string;
        /**
         * Qcfima_CptEvenementConformite
         */
        cptEvenementConformite: number;
        /**
         * Motifs
         */
        motifs: Array<IMotifEvenementConformiteLecture>;
        /**
         * Hdfima_DateDebut
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * Hffima_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Llfima_Motif
         */
        motif: string;
        /**
         * LibelleType
         */
        libelleType: string;
    }
    interface IDocumentOffreIndustrialiseeLecture extends IElementLecture {
        /**
         * CodeEntiteFonctionnelle
         */
        codeEntiteFonctionnelle: string;
        /**
         * IdEntiteFonctionnelle
         */
        idEntiteFonctionnelle: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * LibelleDocument
         */
        libelleDocument: string;
        /**
         * LibelleAide
         */
        libelleAide: string;
        /**
         * CodeExterneDocument
         */
        codeExterneDocument: string;
        /**
         * IndicateurCasEcheant
         */
        indicateurCasEcheant: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Origine
         */
        origine: string;
        /**
         * DateCreation
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * DateModification
         * Type date au format yyyy-MM-dd
         */
        dateModification: string;
        /**
         * EtatDocument
         */
        etatDocument: string;
        /**
         * DocumentCommun
         */
        documentCommun: string;
        /**
         * Obligatoire
         */
        obligatoire: boolean;
        /**
         * Destinataire
         */
        destinataire: string;
        /**
         * UrlPDF
         */
        urlPDF: string;
        /**
         * EstDocNEO
         */
        estDocNEO: boolean;
        /**
         * EstDocOffre
         */
        estDocOffre: boolean;
    }
    interface IOffrePretIndustrialiseeLecture extends IElementLecture {
        /**
         * EditionEligible
         */
        editionEligible: boolean;
        /**
         * EditionEligibleEnAgence
         */
        editionEligibleEnAgence: boolean;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * DossierGdeACree
         */
        dossierGdeACree: boolean;
        /**
         * EtatDossierEdition
         */
        etatDossierEdition: string;
        /**
         * NbEnveloppesLigne1
         */
        nombreEnveloppesLigne1: number;
        /**
         * NbEnveloppesLigne2
         */
        nombreEnveloppesLigne2: number;
        /**
         * NbEnveloppesLigne3
         */
        nombreEnveloppesLigne3: number;
        /**
         * LibEnveloppeLigne1
         */
        libelleEnveloppeLigne1: string;
        /**
         * LibEnveloppeLigne2
         */
        libelleEnveloppeLigne2: string;
        /**
         * LibEnveloppeLigne3
         */
        libelleEnveloppeLigne3: string;
        /**
         * NbEnveloppesLigne1NO
         */
        nombreEnveloppesLigne1NO: number;
        /**
         * NbEnveloppesLigne2NO
         */
        nombreEnveloppesLigne2NO: number;
        /**
         * NbEnveloppesLigne3NO
         */
        nombreEnveloppesLigne3NO: number;
        /**
         * LibEnveloppeLigne1NO
         */
        libelleEnveloppeLigne1NO: string;
        /**
         * LibEnveloppeLigne2NO
         */
        libelleEnveloppeLigne2NO: string;
        /**
         * LibEnveloppeLigne3NO
         */
        libelleEnveloppeLigne3NO: string;
        /**
         * NbEnveloppesLigne1CA
         */
        nombreEnveloppesLigne1CA: number;
        /**
         * NbEnveloppesLigne2CA
         */
        nombreEnveloppesLigne2CA: number;
        /**
         * NbEnveloppesLigne3CA
         */
        nombreEnveloppesLigne3CA: number;
        /**
         * LibEnveloppeLigne1CA
         */
        libelleEnveloppeLigne1CA: string;
        /**
         * LibEnveloppeLigne2CA
         */
        libelleEnveloppeLigne2CA: string;
        /**
         * LibEnveloppeLigne3CA
         */
        libelleEnveloppeLigne3CA: string;
        /**
         * LibAbregeCaisse
         */
        libelleAbregeCaisse: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * EdsEdition
         */
        eDSEdition: string;
        /**
         * ValidationImplicite
         */
        validationImplicite: boolean;
        /**
         * DocumentGlobalPDF
         */
        documentGlobalPDF: string;
        /**
         * ListeDocIndusLecture
         */
        listeDocIndusLecture: Array<IDocumentOffreIndustrialiseeLecture>;
    }
    interface IDocumentSignatureElectroniqueLecture extends IElementLecture {
        /**
         * IdentifiantDocument
         */
        identifiantDocument: string;
        /**
         * CodeTypeEntite
         */
        codeTypeEntite: string;
        /**
         * IdentifiantIDN
         */
        identifiantIDN: string;
        /**
         * IdentifiantComplet
         */
        identifiantComplet: string;
        /**
         * NomDocument
         */
        nomDocument: string;
        /**
         * RefDocProd
         */
        referenceDocProd: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Origine
         */
        origine: string;
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * FluxBinaire
         */
        fluxBinaire: string;
        /**
         * EstPresent
         */
        estPresent: boolean;
        /**
         * IndicePlan
         */
        indicePlan: number;
        /**
         * IndiceCredit
         */
        indiceCredit: number;
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * LibelleEntiteRattachement
         */
        libelleEntiteRattachement: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Obligatoire
         */
        obligatoire: boolean;
        /**
         * estDocNeo
         */
        estDocNEO: boolean;
        /**
         * EstDocOffre
         */
        estDocOffre: boolean;
    }
    interface IInformationSignataire {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationDossierSignature {
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataire>;
    }
    interface IOffreSignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignature;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface IMandatLecture extends IElementLecture {
        /**
         * Cocxbq_CodeCaisse
         */
        codeCaisse: string;
        /**
         * Dgfdms_DateDeSignature
         * Type date au format yyyy-MM-dd
         */
        dateDeSignature: string;
        /**
         * Ctfdfm_TypeFrequenceMandat
         */
        typeFrequenceMandat: string;
        /**
         * Ctfdma_TypeMandatSepaSdd
         */
        typeMandatSepaSdd: number;
        /**
         * Cnfdma_CodeNatureMandat
         */
        codeNatureMandat: number;
        /**
         * Idfdma_RefeMandat
         */
        referenceMandat: string;
        /**
         * Llfdcr_NomDuCreancier
         */
        nomDuCreancier: string;
        /**
         * Llfdac_AdresseDuCreancier
         */
        adresseDuCreancier: string;
        /**
         * Cofdpc_CodePostalDuCreancier
         */
        codePostalDuCreancier: string;
        /**
         * Lcfdvc_VilleDuCreancier
         */
        villeDuCreancier: string;
        /**
         * Ctfdpa_CodePaysDuCreancier
         */
        codePaysDuCreancier: string;
        /**
         * Llfdpo_LibDuPaysDonneurOrdre
         */
        libelleDuPaysDonneurOrdre: string;
        /**
         * Idfdcr_IdntCreancierSepaDomaine
         */
        idCreancierSepaDomaine: string;
        /**
         * Llfddb_NomDuDebiteur
         */
        nomDuDebiteur: string;
        /**
         * Idfdb3_CodeBicDebiteur
         */
        codeBicDebiteur: string;
        /**
         * Idfdi3_NumeroIbanCompteDebiteur
         */
        numeroIbanCompteDebiteur: string;
        /**
         * Idfddb_IdntDuDebiteur
         */
        idDuDebiteur: string;
        /**
         * Llfdad_AdresseDuDebiteur
         */
        adresseDuDebiteur: string;
        /**
         * Cofdpd_CodePostalDuDebiteur
         */
        codePostalDuDebiteur: string;
        /**
         * Lcfdvd_VilleDuDebiteur
         */
        villeDuDebiteur: string;
        /**
         * Ctfdpd_CodePaysDuDebiteur
         */
        codePaysDuDebiteur: string;
        /**
         * Llfdpd_LibPaysDuDebiteur
         */
        libellePaysDuDebiteur: string;
        /**
         * Llfdci_LibCreancierInitial
         */
        libelleCreancierInitial: string;
        /**
         * Idfdct_IdntCreancierInitial
         */
        idCreancierInitial: string;
        /**
         * Llfddf_LibDebiteurFinal
         */
        libelleDebiteurFinal: string;
        /**
         * Idfddf_IdntDebiteurFinal
         */
        idDebiteurFinal: string;
    }
    interface IDossierMRHLecture extends IElementLecture {
        /**
         * UrlIHM
         */
        urlIHM: string;
        /**
         * codeReseau
         */
        codeReseau: string;
        /**
         * idInstanceProcessus
         */
        idInstanceProcessus: string;
        /**
         * codeProcessus
         */
        codeProcessus: string;
        /**
         * idEtape
         */
        idEtape: string;
        /**
         * codeEtape
         */
        codeEtape: string;
        /**
         * AgncDomc
         */
        agenceDomiciliation: string;
        /**
         * urlRetour
         */
        urlRetour: string;
        /**
         * Sigle
         */
        sigle: string;
        /**
         * CdPrflAssr
         */
        codeProfilAssurance: string;
        /**
         * IdActrEtab
         */
        idActrEtab: string;
        /**
         * CdOrgnFinnActrEtab
         */
        codeOrgnFinancierActrEtab: string;
        /**
         * NomUsgActrEtab
         */
        nomUsageActrEtab: string;
        /**
         * IdEdsActrEtabl
         */
        idEDSActrEtabl: string;
        /**
         * ModeIntgIhm
         */
        modeIntegrationIhm: number;
        /**
         * CdAffSynth
         */
        codeAffSynth: number;
        /**
         * CdModeAccesSynth
         */
        codeModeAccessoireSynth: number;
        /**
         * CdEtabFinnTier
         */
        codeEtabFinancierTiers: string;
        /**
         * IdTier
         */
        idTiers: string;
        /**
         * CdTypeCanlDistn
         */
        codeTypeCanlDistn: string;
        /**
         * CdTypePerimEnt
         */
        codeTypePerimEnt: string;
        /**
         * CdAppliApl
         */
        codeApplicationAPL: string;
        /**
         * DateAcces
         * Type date au format yyyy-MM-dd
         */
        dateAccessoire: string;
        /**
         * AppelEffectue
         */
        appelEffectue: boolean;
    }
    interface IRessourceLecture extends IElementLecture {
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Mtfpre_MtRess
         */
        montantRessource: number;
        /**
         * Txfmrc_TxPondRess
         */
        tauxPondereRessource: number;
        /**
         * Npfpre_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
        /**
         * Lbfpre_LiblRessource
         */
        libelleRessource: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * IdntGrpeIntv
         */
        idGrpeIntervenant: string;
    }
    interface IPhaseCreditExistantLecture extends IElementLecture {
        /**
         * Ddfcph_DateDebtPhas
         * Type date au format yyyy-MM-dd
         */
        dateDebutPhase: string;
        /**
         * Dffcph_DateFinPhas
         * Type date au format yyyy-MM-dd
         */
        dateFinPhase: string;
        /**
         * Meface_MtEchePhas
         */
        montantEcheancePhase: number;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Pftmam_PerdAmrt
         */
        periodeAmortissement: number;
        /**
         * Duree
         */
        duree: number;
        /**
         * IdntCredExst
         */
        idCreditExiste: string;
    }
    interface IFamilleEpargneLecture extends IElementLecture {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Nbfmpr_NbPrdtDetnPourUneFamlPrdtAdr
         */
        nombreProduitDetnPourUneFamilleProduitAdresse: number;
        /**
         * Mtfmve_MtValrEprgAvntOper
         */
        montantValeurEpargneAvenantOper: number;
        /**
         * Lbfcej_LiblCaisEprg
         */
        libelleCaisseEpargne: string;
        /**
         * Dtfmve_DateValrEprg
         * Type date au format yyyy-MM-dd
         */
        dateValeurEpargne: string;
        /**
         * Mtfmep_MtEprgApreOper
         */
        montantEpargneApreOper: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * Cdfmce_CodeProduitCE
         */
        codeProduitCE: number;
        /**
         * Lbfmpr_LibelleProduitAdr
         */
        libelleProduitAdresse: string;
    }
    interface IOppositionLecture extends IElementLecture {
        /**
         * Cdfmop_CodeOppo
         */
        codeOpposition: string;
        /**
         * Ddfmop_DateDebtOppo
         * Type date au format yyyy-MM-dd
         */
        dateDebutOpposition: string;
        /**
         * Dffmop_DateFinOppo
         * Type date au format yyyy-MM-dd
         */
        dateFinOpposition: string;
        /**
         * Lbfmop_LibelleOpposition
         */
        libelleOpposition: string;
        /**
         * IdntPersPhys
         */
        idPersonnePhys: string;
    }
    interface IVersementFractionneLecture extends IElementLecture {
        /**
         * Ptfbmv_PerdicVerst
         */
        periodiciteVersement: number;
        /**
         * Mvfbmv_MtPremVerst
         */
        montantPremierVersement: number;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nufbve_NumrDomcMadFond
         */
        numeroDomiciliationMADFond: string;
        /**
         * Mvfbmf_MtVerstFrct
         */
        montantVersementFraction: number;
        /**
         * Nbfbvs_NbVerstSouh
         */
        nombreVersementSouh: number;
        /**
         * Mvfcpm_MtVerstPerdMaxm
         */
        montantVersementPeriodeMaximum: number;
        /**
         * Mvfcim_MtVerstIntlMaxm
         */
        montantVersementInitialMaximum: number;
        /**
         * Txfcpv_QuotPremVerst
         */
        quotientPremierVersement: number;
        /**
         * Txfcvp_QuotVerstPerd
         */
        quotientVersementPeriode: number;
    }
    interface IBienAVendreLecture extends IElementLecture {
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Ctfcor_CodeTypeObjtRegl
         */
        codeTypeObjetRegle: string;
        /**
         * Ctfmve_TypeVent
         */
        typeVent: number;
        /**
         * Mtfmvc_PrixNetVndr
         */
        prixNetVendeur: number;
        /**
         * Mtfmva_MtCrdSurBienVend
         */
        montantCRDSurBienVend: number;
        /**
         * Mtfgrd_MtCrdRachSurBienVend
         */
        montantCRDRachSurBienVend: number;
        /**
         * Mtfaag_MtComsAgnc
         */
        montantComsAgence: number;
        /**
         * Mtfaoc_MtAcqs
         */
        montantAcqs: number;
        /**
         * Dtfaoc_DateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateAcqs: string;
        /**
         * Ctfmma_ModeAcqs
         */
        modeAcqs: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IComplementDossierLecture extends IElementLecture {
        /**
         * Llfidr_LiblDelRelsProj
         */
        libelleDelReleaseProjet: string;
        /**
         * Ctfipt_CodePrrtTrt
         */
        codePrrtTraitement: string;
        /**
         * Dtfisi_DateSaisSurItnt
         * Type date au format yyyy-MM-dd
         */
        dateSaisieSurInternet: string;
        /**
         * Hefisi_HeurSaisSurItnt
         */
        heureSaisieSurInternet: number;
    }
    interface IReamenagementLecture extends IElementLecture {
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
        /**
         * Ctfmup_UsgPretTres
         */
        usagePretTres: number;
        /**
         * Mtfmvc_AncnEche
         */
        ancnEcheance: number;
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * Mtfmvd_ValrAchtObjtFinn
         */
        valeurAchtObjetFinancier: number;
        /**
         * Npfmrp_DureResdPretRefn
         */
        dureResdPretRefn: number;
        /**
         * Dtfoac_DateAcqsObjtRefn
         * Type date au format yyyy-MM-dd
         */
        dateAcqsObjetRefn: string;
        /**
         * Mtfaoc_CoutAcqsObjtRefn
         */
        coutAcqsObjetRefn: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * ListIdntPretReam
         */
        listeIdPretReamenagement: Array<string>;
    }
    interface IPretReamenageLecture extends IElementLecture {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfao2_IdntDossOrig
         */
        idDossierOrigine: string;
        /**
         * Cdfcpo_CodePrdtetbl
         */
        codePrdtetbl: string;
        /**
         * Cdfars_CodeApparRes
         */
        codeApparRes: boolean;
        /**
         * Ctfars_TypeApparRes
         */
        typeApparRes: number;
        /**
         * Dtfccl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * Mefacg_MtechePerdPretRefn
         */
        mtechePeriodePretRefn: number;
        /**
         * Peface_Perdeche
         */
        perdeche: number;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Lbfcvs_LiblPrdt
         */
        libelleProduit: string;
        /**
         * Ctfals_TypeRegl
         */
        typeRegle: number;
        /**
         * Ctfmtc_TypeCred
         */
        typeCredit: number;
        /**
         * Lbfaep_NometblPret
         */
        nometblPret: string;
        /**
         * Ctfpag_CodeOrigAppliGestCred
         */
        codeOrigineApplicationGestionCredit: number;
        /**
         * Cdfidr_CodeDev
         */
        codeDev: string;
        /**
         * IdntReam
         */
        idReamenagement: string;
        /**
         * IdntInfoCompRegr
         */
        idInformationCompRegr: string;
    }
    interface IPretReamenageableLecture extends IElementLecture {
        /**
         * InfoPret
         */
        informationPret: IPretReamenageLecture;
        /**
         * InfoRegroupement
         */
        informationRegroupement: IInfoRegroupementLecture;
    }
    interface IResultatControle {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Messages
         */
        messages: Array<string>;
    }
    interface IPlanFinancementLecture extends IElementLecture {
        /**
         * Lbfapl_LiblRetrAdr
         */
        libelleRetardAdresse: string;
        /**
         * Mtfaso_MtTotlEmprPlan
         */
        montantTotalEmpruntPlan: number;
        /**
         * Mtfarf_MtRestFinn
         */
        montantRestantFinancier: number;
        /**
         * Cefapl_CodeEttPlanFinn
         */
        codeEtatPlanFinancier: number;
        /**
         * Cdfacp_CodeContPlan
         */
        codeContratPlan: number;
        /**
         * Dtfccr_DateCretPlan
         * Type date au format yyyy-MM-dd
         */
        dateCreationPlan: string;
        /**
         * Dtfmva_DateDernAnlsAdr
         * Type date au format yyyy-MM-dd
         */
        dateDernierAnlsAdresse: string;
        /**
         * Dtfcep_DateEditPropCred
         * Type date au format yyyy-MM-dd
         */
        dateEditPropCredit: string;
        /**
         * Ntfmba_NotfEnggBale2
         */
        notfEngagementBale2: string;
        /**
         * Cdfmte_CodeAnlsMeneTerm
         */
        codeAnlsMeneTerme: number;
        /**
         * Cdfdsp_CodeDecsSpec
         */
        codeDecisionSpec: number;
        /**
         * Txfita_CorcTarfCalcParAdr
         */
        corcTarfCalculParAdresse: number;
        /**
         * Mtfiar_CottAnlsRisq
         */
        cotisationAnlsRisque: number;
        /**
         * Txfgca_CoefTarfCalcParAdr
         */
        coefficientTarfCalculParAdresse: number;
        /**
         * Cdfwor_CodeOrigPretPrnc
         */
        codeOriginePretPrincipal: number;
        /**
         * Cifaai_IndicAllt
         */
        indiceAllt: number;
        /**
         * Mtfaap_MtApprPers
         */
        montantApportPersonne: number;
        /**
         * Mtfmpl_MtPretEparLogmTher
         */
        montantPretEpargneLogementTher: number;
        /**
         * Idfcsm_NumrDossSmac
         */
        numeroDossierSmac: string;
        /**
         * Ctfico_TypeCritOptim
         */
        typeCritereOptim: number;
        /**
         * Nbfico_ValeurCritOptim
         */
        valeurCritereOptim: number;
        /**
         * AccordDePrincipe
         */
        accordDePrincipe: number;
        /**
         * ListResultatControle
         */
        listeResultatControle: Array<IResultatControle>;
        /**
         * EstEligibleApl
         */
        estEligibleAPL: boolean;
        /**
         * MontantAplModifiable
         */
        montantAPLModifiable: boolean;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * ListIdntCredIntr
         */
        listeIdCreditIntr: Array<string>;
        /**
         * ListIdntCredExtr
         */
        listeIdCreditExtr: Array<string>;
        /**
         * ListIdntAssr
         */
        listeIdAssurance: Array<string>;
        /**
         * ListIdntRefusAssExt
         */
        listeIdRefusAssuranceExterieur: Array<string>;
        /**
         * ListIdntGarn
         */
        listeIdGarantie: Array<string>;
        /**
         * ListIdntAccsComp
         */
        listeIdAccessoireComp: Array<string>;
        /**
         * ListIdntAccsLiesPrdt
         */
        listeIdAccessoireLiesProduit: Array<string>;
        /**
         * ListIdntServSurObjt
         */
        listeIdServiceSurObjet: Array<string>;
        /**
         * ListIdntPalrCont
         */
        listeIdPalierContrat: Array<string>;
        /**
         * IdntApl
         */
        idAPL: string;
        /**
         * IdntSynthesePlanFinancement
         */
        idSynthesePlanFinancement: string;
        /**
         * TauxApportPersonnel
         */
        tauxApportPersonnel: number;
        /**
         * LoanToValue
         */
        loanToValue: number;
    }
    interface ICreditExterneLecture extends IElementLecture {
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Npface_DureAmrtMois
         */
        dureAmortissementMois: number;
        /**
         * Txface_TxAmrt
         */
        tauxAmortissement: number;
        /**
         * Mkface_MtCapt
         */
        montantCapital: number;
        /**
         * Meface_MtEcheAmrt
         */
        montantEcheanceAmortissement: number;
        /**
         * Peface_CodePerdAmrt
         */
        codePeriodeAmortissement: number;
        /**
         * Cdfaia_CodeIndicInteTantPPers
         */
        codeIndiceInterieurTantPPersonne: number;
        /**
         * Lbface_LiblLibrSurConcr
         */
        libelleLibrSurConcr: string;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfwna_CodeIndicNatrPret
         */
        codeIndiceNaturePret: number;
        /**
         * Cnfctx_CodeIndicTxRevs
         */
        codeIndiceTauxRevision: number;
        /**
         * Npfwdd_DureDiffMois
         */
        dureDiffereMois: number;
        /**
         * Ctfwsr_TypeSurt
         */
        typeSurtaxe: number;
        /**
         * Cdfwch_CodeIndicPresAssrPertEmpl
         */
        codeIndicePresAssurancePertEmpl: number;
        /**
         * Ctfwtb_CodeIndicTypeRemb
         */
        codeIndiceTypeRemboursement: number;
        /**
         * Txfatg_TegActu
         */
        tegActu: number;
        /**
         * Mefadi_MtecheDiff
         */
        mtecheDiffere: number;
        /**
         * Pefadi_CodePerdDiff
         */
        codePeriodeDiffere: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
        /**
         * EtatBlocPATZ
         */
        etatBlocPATZ: number;
    }
    interface IPalierContraintLecture extends IElementLecture {
        /**
         * Ddpe_DateDebtPerd
         * Type date au format yyyy-MM-dd
         */
        dateDebutPeriode: string;
        /**
         * Dfpe_DateFinPerd
         * Type date au format yyyy-MM-dd
         */
        dateFinPeriode: string;
        /**
         * Meface_MtEche
         */
        montantEcheance: number;
        /**
         * Npfpco_DurePalr
         */
        durePalier: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
    }
    interface IAlerteEnSortieLecture extends IElementLecture {
        /**
         * Nofiax_NumeAlrt
         */
        numeroAlerte: number;
        /**
         * Ctfiax_CodeAlrt
         */
        codeAlerte: string;
        /**
         * Cefiax_CodeTrtAlrt
         */
        codeTraitementAlerte: number;
        /**
         * Dcfiax_DateEmssAlrt
         * Type date au format yyyy-MM-dd
         */
        dateEmissionAlerte: string;
        /**
         * Drfiax_DateRepnAlrt
         * Type date au format yyyy-MM-dd
         */
        dateRepnAlerte: string;
    }
    interface IVersementAttenduLecture extends IElementLecture {
        /**
         * Nufcrl_NumeReltVerstAttn
         */
        numeroRelationVersementAttn: number;
        /**
         * Ctftve_TypeVerst
         */
        typeVersement: string;
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
        /**
         * Dtfdeb_DateDebt
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * Dtfvfn_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Ctfapi_PerdVerst
         */
        periodeVersement: number;
        /**
         * IdntContAssrGarn
         */
        idContratAssuranceGarantie: string;
    }
    interface IProprietaireLecture extends IElementLecture {
        /**
         * Txffim_QuotPleinProp
         */
        quotientPleinProp: number;
        /**
         * Txfcnp_QuotNueProp
         */
        quotientNueProp: number;
        /**
         * Txfcdu_QuotUsuf
         */
        quotientUsuf: number;
        /**
         * Txfcus_QuotDroiUsag
         */
        quotientDroiUsag: number;
        /**
         * Ctfcdb_CdModDettnBien
         */
        codeModDettnBien: number;
        /**
         * IdntPersn
         */
        idPersn: string;
    }
    interface IReferenceCadastraleLecture extends IElementLecture {
        /**
         * Lbfoca_ReferenceCadastre
         */
        referenceCadastre: string;
        /**
         * Lbfcsc_SectionCadastre
         */
        sectionCadastre: string;
        /**
         * Qtfcsc_SurfaceReferenceCadastrale
         */
        surfaceReferenceCadastrale: number;
        /**
         * Llfcob_commentaires
         */
        commentaires: string;
        /**
         * Nufcrl_NumeroRelatif
         */
        numeroRelatif: number;
    }
    interface IReferenceLotLecture extends IElementLecture {
        /**
         * Lbfolt_ReferenceTypeDeLot
         */
        referenceTypeDeLot: string;
        /**
         * Llfcnl_NatureDuLot
         */
        natureDuLot: string;
        /**
         * Nbftta_Tantieme
         */
        tantieme: number;
        /**
         * Nufcrl_NumeroRelatif
         */
        numeroRelatif: number;
    }
    interface ICouvertureCreditLecture extends IElementLecture {
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
        /**
         * Mefaas_MtEcheCouv
         */
        montantEcheanceCouverture: number;
        /**
         * Dffgaf_DateFinAffecCouv
         * Type date au format yyyy-MM-dd
         */
        dateFinAffectationCouverture: string;
        /**
         * IdntAccs
         */
        idAccessoire: string;
        /**
         * IdntCredCouv
         */
        idCreditCouverture: string;
        /**
         * ListIdntCots
         */
        listeIdCotisation: Array<string>;
        /**
         * Idfcoc_IdPretOrgCaution
         */
        idPretOrganismeCaution: string;
        /**
         * Mtfiae_CoutAssExt8Ans
         */
        coutAssuranceExterne8Ans: number;
        /**
         * Mcfiae_CoutTotAssExt
         */
        coutTotalAssuranceExterne: number;
    }
    interface IGroupeJustificationTEGLecture {
        /**
         * LibelleFrais
         */
        libelleFrais: string;
        /**
         * MessagesFrais
         */
        messagesFrais: Array<string>;
    }
    interface IEcheancesJustifieesAssocieesLecture {
        /**
         * TitreCredit
         */
        titreCredit: string;
        /**
         * MessagesInterets
         */
        messagesInterets: Array<string>;
        /**
         * TypesFrais
         */
        typesFrais: Array<IGroupeJustificationTEGLecture>;
    }
    interface ICreditInterneLecture extends IElementLecture {
        /**
         * IndicEvltTxConsPond
         */
        indiceEvolutionTauxConsolidePondere: number;
        /**
         * Idfccp_IdntConvPres
         */
        idConventionPres: string;
        /**
         * Cdfdae_CodeIndicEnvAvisEche
         */
        codeIndiceEnvoiAvisEcheance: number;
        /**
         * Cifaio_CodeIndicOptmImps
         */
        codeIndiceOptimisationImps: number;
        /**
         * Cnfctx_CodeIndicTxInteRevs
         */
        codeIndiceTauxInterieurRevision: number;
        /**
         * Nofapd_NumeCredPlanFinn
         */
        numeroCreditPlanFinancier: number;
        /**
         * Idfacs_RefeExtnCred
         */
        referenceExterneCredit: string;
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Cdfcfc_CodeFamlContRegl
         */
        codeFamilleContratRegle: string;
        /**
         * Ctfcbs_CodeSclssBafi
         */
        codeSousclasseBafi: string;
        /**
         * Cdfcrl_CodeIndicCredRels
         */
        codeIndiceCreditRelease: number;
        /**
         * Idfcct_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Cdfccr_CodeIndicTrtInteIntr
         */
        codeIndiceTraitementInterieurIntr: number;
        /**
         * Cdfcia_CodeTypeActlInteIntr
         */
        codeTypeActuarielInterieurIntr: number;
        /**
         * Cdfbdv_CodeDevsVerst
         */
        codeDeviseVersement: string;
        /**
         * Cdfbje_CodeIndicExstPiecJustPourDeclechlVerst
         */
        codeIndiceExistePieceJustificatifPourDeclechlVersement: number;
        /**
         * Cdfbju_CodeExistJustDeclVerst
         */
        codeExistJustificatifDeclarationVersement: number;
        /**
         * Cdfbju_CodeTypeRattJustDecl
         */
        codeTypeRattachementJustificatifDeclaration: number;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Dtfam0_DateMer0
         * Type date au format yyyy-MM-dd
         */
        dateMER0: string;
        /**
         * Dtfam1_DateMer1
         * Type date au format yyyy-MM-dd
         */
        dateMER1: string;
        /**
         * Dtfccr_DateCretCred
         * Type date au format yyyy-MM-dd
         */
        dateCreationCredit: string;
        /**
         * Dlfbct_DateLimtVerstFond
         * Type date au format yyyy-MM-dd
         */
        dateLimiteVersementFond: string;
        /**
         * Dhfacj_QuantEche
         */
        jourDateEcheance: number;
        /**
         * Dffb1v_DateLimtPremVerstFond
         * Type date au format yyyy-MM-dd
         */
        dateLimitePremierVersementFond: string;
        /**
         * Cdfaea_CodeIndicElgbApl
         */
        codeIndiceEligibiliteAPL: number;
        /**
         * Cdfcie_CodeIndicelgbAuprInstemss
         */
        codeIndicelgbAuprInstemss: number;
        /**
         * Cdfacc_CodeIndicGestCredAvecCpteCrrt
         */
        codeIndiceGestionCreditAvecCompteCrrt: number;
        /**
         * Dtfcdc_DateDernCalcCred
         * Type date au format yyyy-MM-dd
         */
        dateDernierCalculCredit: string;
        /**
         * Ccfarc_CodeIndicCalcAFaire
         */
        codeIndiceCalculAFaire: number;
        /**
         * Mtfael_MtPrimEparLogm
         */
        montantPrimeEpargneLogement: number;
        /**
         * Txfasr_TxNegcSurcRembAntc
         */
        tauxNegocieSurcRemboursementAnticipe: number;
        /**
         * Txfcpd_TxPondCntExtr
         */
        tauxPondereCntExtr: number;
        /**
         * Txfck4_TxPondCons
         */
        tauxPondereConsolide: number;
        /**
         * Txfrr1_MargPondCons
         */
        margePondereConsolide: number;
        /**
         * Ccfbec_CodeCalcEcheVerst
         */
        codeCalculEcheanceVersement: number;
        /**
         * Cefbec_CodeettEcheVerst
         */
        codeettEcheanceVersement: number;
        /**
         * Cdfbct_CodeIndcNatrEcheVerst
         */
        codeIndiceNatureEcheanceVersement: number;
        /**
         * Lbfpa1_InttCred
         */
        intituleLigneUn: string;
        /**
         * Nufbdt_DomcTres
         */
        domiciliationTres: string;
        /**
         * Nufbve_NumeDomcPourMiseADispFond
         */
        numeroDomiciliationPourMiseADispFond: string;
        /**
         * Mtfcve_MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * Ctfcpc_CodeIndicNatrPretComb
         */
        codeIndiceNaturePretComb: number;
        /**
         * Cifaam_CodeIndicPresUneBonfUneMajreTx
         */
        codeIndicePresUneBonificationUneMajreTaux: number;
        /**
         * Cefad0_CodeConfmRedcDurePTZ
         */
        codeConfirmationReductionDurePTZ: number;
        /**
         * Cefam0_CodeConfmRedcMtPTZ
         */
        codeConfirmationReductionMontantPTZ: number;
        /**
         * Mtfcpz_MtReglPTZ
         */
        montantReglePTZ: number;
        /**
         * MtMinPTZ
         */
        montantMinimumPTZ: number;
        /**
         * Mcface_MtCredEuro
         */
        montantCreditEuro: number;
        /**
         * Msfcpv_MtMaxPretPVH
         */
        montantMaximumPretPVH: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfada_CodeDevsSaccef
         */
        codeDeviseSaccef: string;
        /**
         * Npfcfi_NbPerdCred
         */
        nombrePeriodeCredit: number;
        /**
         * Pefcfi_CodePerdCred
         */
        codePeriodeCredit: number;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
        /**
         * Mefape_MtPrmeEcheHorsAccsCred
         */
        montantPrmeEcheanceHorsAccessoireCredit: number;
        /**
         * Mefacc_MtPrmeEcheAssr
         */
        montantPrmeEcheanceAssurance: number;
        /**
         * Mcafco_MtTotlCredHorsAccsHorsPerdPref
         */
        montantTotalCreditHorsAccessoireHorsPeriodePref: number;
        /**
         * Mcfaac_CoutTotlAccsPostSurCred
         */
        coutTotalAccessoirePosteSurCredit: number;
        /**
         * Mcfafd_CoutTotlFrsDossAsscCred
         */
        coutTotalFrsDossierAssuranceCredit: number;
        /**
         * Mcfgfr_CoutTotlFrsGarnAsscCred
         */
        coutTotalFrsGarantieAssuranceCredit: number;
        /**
         * Mcfacf_CoutTotlFrsCrtgeAsscCred
         */
        coutTotalFrsCrtgeAssuranceCredit: number;
        /**
         * Mcfosp_CoutTotlServSurObjtPerdAsscCred
         */
        coutTotalServiceSurObjetPeriodeAssuranceCredit: number;
        /**
         * Mcfafp_CoutTotlAccsCompPerdAsscCred
         */
        coutTotalAccessoireCompPeriodeAssuranceCredit: number;
        /**
         * Mcfoso_CoutTotlServSurObjtAperAsscCred
         */
        coutTotalServiceSurObjetAperAssuranceCredit: number;
        /**
         * Mcfafr_CoutTotlAccsCompAperAsscCred
         */
        coutTotalAccessoireCompAperAssuranceCredit: number;
        /**
         * Mefoso_MtPrmeEcheServSurObjt
         */
        montantPrmeEcheanceServiceSurObjet: number;
        /**
         * Mefafr_MtPrmeEcheAccsComp
         */
        montantPrmeEcheanceAccessoireComp: number;
        /**
         * Mcfaia_MtTotlAssrPerd
         */
        montantTotalAssurancePeriode: number;
        /**
         * CodeIndicModeCalcTx
         */
        codeIndiceModeCalculTaux: number;
        /**
         * TxMoyeActuHorsBonf
         */
        tauxMoyenActuHorsBonification: number;
        /**
         * TxMoyePropHorsBonf
         */
        tauxMoyenPropHorsBonification: number;
        /**
         * TxFutr
         */
        tauxFutr: ITauxIndiceLecture;
        /**
         * TxIntl
         */
        tauxInitial: ITauxInteretAnnuelLecture;
        /**
         * TxMoyeActu
         */
        tauxMoyenActu: number;
        /**
         * TxMoyeProp
         */
        tauxMoyenProp: number;
        /**
         * TegActu
         */
        tegActu: number;
        /**
         * TegProp
         */
        tegProp: number;
        /**
         * TAEA
         */
        tAEA: number;
        /**
         * Txfamc_TxMontage
         */
        tauxMontage: number;
        /**
         * BornesFraisDossier
         */
        bornesFraisDossier: Array<number>;
        /**
         * TegModeRestitution
         */
        tegModeRestitution: number;
        /**
         * MontantPTZVerrouille
         */
        montantPTZVerrouille: boolean;
        /**
         * DureePTZVerrouillee
         */
        dureePTZVerrouillee: boolean;
        /**
         * EcheancesJustifieesAssociees
         */
        echeancesJustifieesAssociees: IEcheancesJustifieesAssocieesLecture;
        /**
         * EtatForcageFraisDossier
         */
        etatForcageFraisDossier: string;
        /**
         * TxUsure
         */
        tauxUsure: number;
        /**
         * AjustementTaux
         */
        ajustementTaux: IAjustementTauxLecture;
        /**
         * MargeRevConseil
         */
        margeRevisionConseil: number;
        /**
         * ExisteAssuranceSurCRD
         */
        existeAssuranceSurCRD: boolean;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
        /**
         * IdntCpteCrrt
         */
        idCompteCrrt: string;
        /**
         * IdntModl
         */
        idModele: string;
        /**
         * IdntModlVersFrct
         */
        idModeleVersementFraction: string;
        /**
         * IdntRemsClnt
         */
        idRemsClient: string;
        /**
         * ListIdntDrtUtls
         */
        listeIdDroitUtilisation: Array<string>;
        /**
         * ListIdntPayr
         */
        listeIdPayr: Array<string>;
        /**
         * ListIdntPhas
         */
        listeIdPhase: Array<string>;
        /**
         * ListIdntSuivPlnf
         */
        listeIdSuivantPlafond: Array<string>;
        /**
         * ListIdntParmRevs
         */
        listeIdParametreRevision: Array<string>;
        /**
         * ListIdntVartDure
         */
        listeIdVartDure: Array<string>;
        /**
         * ListIdntAccs
         */
        listeIdAccessoire: Array<string>;
        /**
         * ListIdntAssr
         */
        listeIdAssurance: Array<string>;
        /**
         * ListIdntGarn
         */
        listeIdGarantie: Array<string>;
        /**
         * ListIdntAccsComp
         */
        listeIdAccessoireComp: Array<string>;
        /**
         * ListIdntAccsLiesPrdt
         */
        listeIdAccessoireLiesProduit: Array<string>;
        /**
         * ListIdntCreditsEPS
         */
        listeIdCreditsEPS: Array<string>;
        /**
         * IdntComplementEPS
         */
        idComplementEPS: string;
    }
    interface IPatrimoineImmobilierLecture extends IElementLecture {
        /**
         * Ctfcnp_NatrPtrmImmb
         */
        naturePatrimoineImmobilier: number;
        /**
         * Cdfcdo_CodeIndicUsgLogm
         */
        codeIndiceUsageLogement: number;
        /**
         * Mtfmvb_ValrActlPtrm
         */
        valeurActuarielPatrimoine: number;
        /**
         * Dtfdac_DateAcqsPtrm
         * Type date au format yyyy-MM-dd
         */
        dateAcqsPatrimoine: string;
        /**
         * Mkfkrd_CaptRestSurPtrm
         */
        capitalRestantSurPatrimoine: number;
        /**
         * Mefhpa_MensPretSurPtrm
         */
        mensPretSurPatrimoine: number;
        /**
         * Dffacr_DateFinPretSurPtrm
         * Type date au format yyyy-MM-dd
         */
        dateFinPretSurPatrimoine: string;
    }
    interface IBlocNotesLecture extends IElementLecture {
        /**
         * Idfwac_TypeBlc
         */
        typeBlocNote: string;
        /**
         * ContBlc
         */
        contratBlocNote: string;
    }
    interface IClausePersonnaliseeLecture extends IElementLecture {
        /**
         * DestClsePers
         */
        destinataireClausePersonne: number;
        /**
         * LiblClsePers
         */
        libelleClausePersonne: string;
        /**
         * NumeReltClsePers
         */
        numeroRelationClausePersonne: number;
    }
    interface IAvisLecture extends IElementLecture {
        /**
         * Dtfaad_DateSaisAvis
         * Type date au format yyyy-MM-dd
         */
        dateSaisieAvis: string;
        /**
         * Lbfaad_LiblAvis
         */
        libelleAvis: string;
        /**
         * Idfaen_IdntEnttSaisAvis
         */
        idEntiteSaisieAvis: string;
        /**
         * Lbfaen_LiblEnttSaisAvis
         */
        libelleEntiteSaisieAvis: string;
        /**
         * Ctfita_CodeTyplAvis
         */
        codeTypologieAvis: string;
        /**
         * Nofiav_NumeAvis
         */
        numeroAvis: number;
    }
    interface IAvisOrganismeExterneLecture extends IElementLecture {
        /**
         * Idfpit_IdntOrgnExtn
         */
        idOrgnExterne: string;
        /**
         * Idfcin_IdntInteEnv
         */
        idInterieurEnvoi: string;
        /**
         * Idfcex_IdntExtnEnv
         */
        idExterneEnvoi: string;
        /**
         * Dtfal1_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd
         */
        dateAvis: string;
        /**
         * Cifctr_CodeIndicTrtEnv
         */
        codeIndiceTraitementEnvoi: number;
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Cdfar2_CodeMotf
         */
        codeMotf: string;
        /**
         * Llfar1_LiblAvisDecs1
         */
        libelleAvisDecision1: string;
        /**
         * Llfar2_LiblAvisDecs2
         */
        libelleAvisDecision2: string;
        /**
         * Lbfpin_NomAgntInstr
         */
        nomAgentInstruction: string;
        /**
         * Nufpt1_NumeTeleInstr
         */
        numeroTeleInstruction: string;
        /**
         * Lbfpma_LiblAdrsMail
         */
        libelleAdresseMail: string;
        /**
         * Nufpt2_NumeFaxInstr
         */
        numeroFaxInstruction: string;
        /**
         * Cdfar1_TypeLiaiSaccefTp
         */
        typeLiaiSaccefTp: number;
        /**
         * Cdfar3_TypeRepnOrgnExtn
         */
        typeRepnOrgnExterne: number;
        /**
         * IdntAccs
         */
        idAccessoire: string;
    }
    interface IEvenementLecture extends IElementLecture {
        /**
         * Nofaed_NumeReltEvenDoss
         */
        numeroRelationEvenDossier: number;
        /**
         * Cefadc_CodeEttDoss
         */
        codeEtatDossier: number;
        /**
         * Dtfaed_DateSaisEven
         * Type date au format yyyy-MM-dd
         */
        dateSaisieEven: string;
        /**
         * Lbfamd_MessEnrgSurEvenDoss
         */
        messEnregistrementSurEvenDossier: string;
        /**
         * Dtfaee_DateEfftEven
         * Type date au format yyyy-MM-dd
         */
        dateEffetEven: string;
        /**
         * Ctfaev_CodeTypeEven
         */
        codeTypeEven: string;
        /**
         * Idfase_IdntEnttSaisEven
         */
        idEntiteSaisieEven: string;
        /**
         * Lbfase_LiblEnttSaisEven
         */
        libelleEntiteSaisieEven: string;
        /**
         * Cefhgc_CodeIndicGestCentEven
         */
        codeIndiceGestionCentralEven: number;
        /**
         * Cdfabo_ElemStrcGestBackCent
         */
        elementStructureGestionBackCentral: string;
        /**
         * Idfce3_IdntCaisAsscBackCent
         */
        idCaisseAssuranceBackCentral: number;
        /**
         * LiblEven
         */
        libelleEven: string;
        /**
         * CodeNatrEven
         */
        codeNatureEven: string;
        /**
         * IdntAvisAsscEven
         */
        idAvisAssuranceEven: string;
    }
    interface IVersementLecture extends IElementLecture {
        /**
         * MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * Txfave_PctVerst
         */
        pourcentageVersement: number;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Nufccl_NumeOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Lbfasa_LiblAvnc
         */
        libelleAvnc: string;
    }
    interface IPromotionImmobiliereLecture extends IElementLecture {
        /**
         * SittPrgm
         */
        situationProgramme: number;
        /**
         * LiblSyntDoss
         */
        libelleSyntDossier: string;
        /**
         * InttPrgm
         */
        intituleProgramme: string;
        /**
         * NomScpi
         */
        nomScpi: string;
        /**
         * DateDiss
         * Type date au format yyyy-MM-dd
         */
        dateDiss: string;
        /**
         * AdrsPrgmImmb
         */
        adresseProgrammeImmobilier: string;
        /**
         * LoclPrgmImmb
         */
        loclProgrammeImmobilier: string;
        /**
         * CodePostPrgmImmb
         */
        codePosteProgrammeImmobilier: string;
        /**
         * CodePays
         */
        codePays: string;
        /**
         * StttCapi
         */
        stttCapitalisation: number;
        /**
         * DateFinComl
         * Type date au format yyyy-MM-dd
         */
        dateFinCommercialisation: string;
        /**
         * IndicAlltDeps
         */
        indiceAlltDeps: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IRedacteurActeLecture extends IElementLecture {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Lbfpnm_NomRedcActe
         */
        nomReductionActe: string;
        /**
         * Lbfppn_PrenRedcActe
         */
        prenReductionActe: string;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
    }
    interface IEmprunteurLecture extends IElementLecture {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * LiblLienPersonne
         */
        libelleLienPersonne: string;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * Mcfpre_MtRessPond
         */
        montantRessourcePondere: number;
        /**
         * Mcfpce_MtChrgEmprHorsPrjtPond
         */
        montantChargeEmpruntHorsProjetPondere: number;
        /**
         * Mcfpac_MtAutrChrgPond
         */
        montantAutreChargePondere: number;
        /**
         * Lbfaem_DenmEmpr
         */
        denmEmprunt: string;
        /**
         * Lnfpem_LiblLongEmpr
         */
        libelleLongEmprunt: string;
        /**
         * Lbfain_IntlcEmpr
         */
        intlcEmprunt: string;
        /**
         * Idfaep_IdntEnttTitlClnt
         */
        idEntiteTitulaireClient: string;
        /**
         * Idfaeg_IdntelemStrcGest
         */
        idElementStructureGestion: string;
        /**
         * Cdfcke_CodeCateEmpr
         */
        codeCateEmprunt: string;
        /**
         * Lbfcke_LiblCateEmpr
         */
        libelleCateEmprunt: string;
        /**
         * Ctfcma_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * Ctfpmp_CodeTypeMarcPers
         */
        codeTypeMarchePersonne: number;
        /**
         * Ctfprm_CodeTypeRevnMeng
         */
        codeTypeRevnMeng: number;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_TypeAdmnBafi
         */
        typeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Lbfpsf_LiblSittFaml
         */
        libelleSituationFamille: string;
        /**
         * Cdfpsr_CodeSittFamlRegl
         */
        codeSituationFamilleRegle: number;
        /**
         * Nbfpnp_NbPersCmpstMeng
         */
        nombrePersonneCmpstMeng: number;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpma_NbActfMeng
         */
        nombreActfMeng: number;
        /**
         * Dtfpen_DateEncrEparLogm
         * Type date au format yyyy-MM-dd
         */
        dateEncoursEpargneLogement: string;
        /**
         * Mtftpl_MtEncrIsssPretPel
         */
        montantEncoursIsssPretPEL: number;
        /**
         * Mtftli_MtEncrIsssPretLel
         */
        montantEncoursIsssPretLEL: number;
        /**
         * Mtftlh_MtEncrLivrAutretbl
         */
        montantEncoursLivrAutretbl: number;
        /**
         * Mtftph_MtEncrPlnsAutretbl
         */
        montantEncoursPlnsAutretbl: number;
        /**
         * Mtfwrt_TotlRevnAnnlNets
         */
        totalRevnAnnulationNets: number;
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Cdfwsl_StttOccpLogmActl
         */
        stttOccpLogementActuariel: number;
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpnm_NomRaisSoclEmpr
         */
        nomRaisonSocialeEmprunt: string;
        /**
         * Lbfpa1_Intt
         */
        intituleLigne1: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_CompIntt
         */
        compIntituleLigne2: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cofopz_CodeCondDergPourPtz
         */
        codeConditionDerogationPourPtz: number;
        /**
         * Cdfpse_CodeSectRatt
         */
        codeSecteurRattachement: string;
        /**
         * Cdfpjm_CodeJeunMeng
         */
        codeJeunMeng: number;
        /**
         * PresUnePersAttnRepnFicp
         */
        presUnePersonneAttnRepnFicp: boolean;
        /**
         * PresUnePersFichFicp
         */
        presUnePersonneFichFicp: boolean;
        /**
         * Qmfcvi_EsperVie
         */
        esperVie: number;
        /**
         * Qmfcvd_EsperVieDec
         */
        esperVieDecision: number;
        /**
         * Qmfcvs_EsperVieStrs
         */
        esperVieStress: number;
        /**
         * MtRessAvntProj
         */
        montantRessourceAvenantProjet: number;
        /**
         * MtChrgEmprAvntProj
         */
        montantChargeEmpruntAvenantProjet: number;
        /**
         * MtAutrChrgAvntProj
         */
        montantAutreChargeAvenantProjet: number;
        /**
         * RestVivrAvntProj
         */
        restantVivrAvenantProjet: number;
        /**
         * IndicRestVivrAvntProj
         */
        indiceRestantVivrAvenantProjet: number;
        /**
         * TxEndtAvntProj
         */
        tauxEndtAvenantProjet: number;
        /**
         * TotalEpargneContractuelle
         */
        totalEpargneContractuelle: number;
        /**
         * TotalEpargneLiquide
         */
        totalEpargneLiquide: number;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * Cdfadv_CodeDeviseEmprunteur
         */
        codeDeviseEmprunteur: string;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntCpteDeptGrpePers
         */
        listeIdCompteDeptGrpePersonne: Array<string>;
        /**
         * ListIdntCptePrfsPers
         */
        listeIdComptePrfsPersonne: Array<string>;
        /**
         * ListIdntRessGrpe
         */
        listeIdRessourceGrpe: Array<string>;
        /**
         * ListIdntChrgGrpe
         */
        listeIdChargeGrpe: Array<string>;
        /**
         * ListIdntCredExstGrpe
         */
        listeIdCreditExisteGrpe: Array<string>;
        /**
         * ListIdntFamlEprgPers
         */
        listeIdFamilleEpargnePersonne: Array<string>;
        /**
         * ListIdntRevnFiscAsscEmpr
         */
        listeIdRevnFiscalAssuranceEmprunt: Array<string>;
        /**
         * ListIdntDonnPtrmImmb
         */
        listeIdDonneurPatrimoineImmobilier: Array<string>;
    }
    interface IRevenuFiscalLecture extends IElementLecture {
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Ctfprm_TypeRevnMeng
         */
        typeRevnMeng: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * IdntEmpr
         */
        idEmprunt: string;
    }
    interface ILienEPSTirageLecture extends IElementLecture {
        /**
         * Idfadi_IdntDossInstr
         */
        sIdntDossier: string;
        /**
         * Idfaps_IdentifiantEPS
         */
        identifiantEPS: string;
        /**
         * Idfcej_Etablissement
         */
        etablissement: number;
    }
    interface ITravauxFinancesLecture extends IElementLecture {
        /**
         * Mtfotr_CoutTrvx
         */
        coutTravaux: number;
        /**
         * Dffotr_DateFinTrvx
         * Type date au format yyyy-MM-dd
         */
        dateFinTravaux: string;
        /**
         * Nbfose_SurfHabtCree
         */
        surfHabitationCree: number;
        /**
         * Cdfoig_TypeTrvxCadrEcpt
         */
        typeTravauxCadreEcpt: number;
        /**
         * SurfHabtTotlApreTrvx
         */
        surfHabitationTotalApreTravaux: number;
        /**
         * Dtfoco_DateConstBatmSjac
         * Type date au format yyyy-MM-dd
         */
        dateConstructionBatimentSousJacent: string;
        /**
         * Nbfosh_SurfHabtBatmSjac
         */
        surfHabitationBatimentSousJacent: number;
        /**
         * Dtfoac_DateAcqsBatmSjac
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBatimentSousJacent: string;
        /**
         * Ctfmoi_TypeLogmBatmSous
         */
        typeLogementBatimentSous: number;
        /**
         * LibelleTypeLogmBatmSous
         */
        libelleTypeLogementBatimentSous: string;
        /**
         * Nbfolo_NbreLogmBatmSous
         */
        nbreLogementBatimentSous: number;
        /**
         * Caftte_TypeEcoPtz
         */
        typeEcoPtz: number;
        /**
         * Mtfap6_MontantEcoPtzInitial
         */
        montantEcoPtzInitial: number;
        /**
         * Dtftde_DateCreationEcoPtzInitial
         * Type date au format yyyy-MM-dd
         */
        dateCreationEcoPtzInitial: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * IdntBienSjac
         */
        idBienSousJacent: string;
        /**
         * ListIdntDetlCoutTrvxEcpt
         */
        listeIdDetlCoutTravauxEcpt: Array<string>;
        /**
         * LibelleTypeTrvxCadrEcpt
         */
        libelleTypeTrvxCadrEcpt: string;
    }
    interface IInformationSignataireOffre {
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationSignataireDemandeDeCreditAgence {
        /**
         * DateMiseADispoDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateMiseADispoDemandeDeCredit: string;
        /**
         * DateSignatureDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateSignatureDemandeDeCredit: string;
    }
    interface IInformationSignataireGenerique {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * InformationsSignataireOffre
         */
        informationsSignataireOffre: IInformationSignataireOffre;
        /**
         * InformationSignataireDemandeDeCreditAgence
         */
        informationSignataireDemandeDeCreditAgence: IInformationSignataireDemandeDeCreditAgence;
    }
    interface IInformationDossierSignatureOffre {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierDemandeDeCreditAgence {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierSignatureGenerique {
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataireGenerique>;
        /**
         * InformationsSignatureOffre
         */
        informationsSignatureOffre: IInformationDossierSignatureOffre;
        /**
         * InformationsDemandeDeCreditAgence
         */
        informationsDemandeDeCreditAgence: IInformationDossierDemandeDeCreditAgence;
    }
    interface ISignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignatureGenerique;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface ISignataireLecture extends IElementLecture {
        /**
         * EmailContact
         */
        emailContact: string;
        /**
         * NumeroContact
         */
        numeroContact: string;
        /**
         * EmailsContactsChoisissables
         */
        emailsContactsChoisissables: Array<string>;
        /**
         * NumerosContactsChoisissables
         */
        numerosContactsChoisissables: string;
        /**
         * EstSignataireEffectif
         */
        estSignataireEffectif: boolean;
        /**
         * EstAutoriseASigner
         */
        estAutoriseASigner: boolean;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * TypeSignataire
         */
        typeSignataire: number;
    }
    interface IProjetImmobilierLecture extends IProjetLecture {
        /**
         * Cifopa_DefnSiEmprEstPrm
         */
        defnSiEmpruntEstPrm: boolean;
        /**
         * Cofopz_CodeCondDergPourPtz
         */
        codeConditionDerogationPourPtz: number;
        /**
         * ValdelgbaPrmAccsPourCateReglAttr
         */
        valdelgbaPrmAccessoirePourCateRegleAttribut: boolean;
        /**
         * ElgbPtz
         */
        eligibilitePtz: boolean;
        /**
         * ElgbPc
         */
        eligibilitePC: boolean;
        /**
         * ElgbPas
         */
        eligibilitePas: boolean;
        /**
         * ElgbaEl
         */
        elgbaEpargneLogement: boolean;
        /**
         * ElgbaEcpt
         */
        elgbaEcpt: boolean;
        /**
         * Cdfose_CodeBatmBassConso
         */
        codeBatimentBassConsommation: number;
        /**
         * Cdfomo_CodeModlOccpLogm
         */
        codeModeleOccpLogement: number;
        /**
         * Ctfopm_CodePrixMarc
         */
        codePrixMarche: number;
        /**
         * LibelleCodePrixMarc
         */
        libelleCodePrixMarche: string;
        /**
         * Ctfmmc_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * LibelleCodeTypeMarc
         */
        libelleCodeTypeMarche: string;
        /**
         * Ctfmpo_TypePrpr
         */
        typeProprietaire: number;
        /**
         * LibelleTypePrpr
         */
        libelleTypeProprietaire: string;
        /**
         * Txfmpa_PctPrprApreOper
         */
        pourcentageProprietaireApreOper: number;
        /**
         * Mgfovh_MtInscHypt
         */
        montantInscHypotheque: number;
        /**
         * Cdfqem_QualEmplaProj
         */
        qualEmplaProjet: number;
        /**
         * ZoneReglRobnBien
         */
        zoneRegleRobnBien: string;
        /**
         * ZonePlusLogm
         */
        zonePlusLogement: string;
        /**
         * Cdfozg_CodeZoneGegrRegl
         */
        codeZoneGegrRegle: number;
        /**
         * Cdfwti_TypeImeu
         */
        typeImeu: number;
        /**
         * Cifclh_CodeLogmHlm
         */
        codeLogementHlm: number;
        /**
         * Cifclh_EstLogmHlm
         */
        estLogementHlm: boolean;
        /**
         * Idfapi_IdntPrgmImmb
         */
        idProgrammeImmobilier: string;
        /**
         * Idfaap_IdntAccrPourInst
         */
        idAccrPourInstruction: string;
        /**
         * Cifcep_IndicemssNouvPartScpi
         */
        indicemssNouvPartScpi: number;
        /**
         * Ctfcve_CodeTypeMarcPourVent
         */
        codeTypeMarchePourVent: number;
        /**
         * Idfove_NomSoceGest
         */
        nomSoceGestion: string;
        /**
         * Cdfizf_CentreBourgRural
         */
        centreBourgadeRural: boolean;
        /**
         * DroitAcquisPEL
         */
        droitAcquisPEL: number;
        /**
         * DroitAcquisCEL
         */
        droitAcquisCEL: number;
        /**
         * IdntTerrFinn
         */
        idTerrFinancier: string;
        /**
         * IdntTrvxFinn
         */
        idTravauxFinancier: string;
        /**
         * IdntConstFinn
         */
        idConstructionFinancier: string;
        /**
         * IdntBatmHabtFinn
         */
        idBatimentHabitationFinancier: string;
        /**
         * IdntSoulFinn
         */
        idSoulFinancier: string;
        /**
         * IdntObjtButLocf
         */
        idObjetButLocf: string;
        /**
         * IdntObjtPrmtImmb
         */
        idObjetPrmtImmobilier: string;
    }
    interface IProjetLecture extends IElementLecture {
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * BonificationEstValide
         */
        bonificationEstValide: boolean;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cdfcfo_CateReglAttr
         */
        cateRegleAttribut: string;
        /**
         * Cdfcni_TypeObjtFinn
         */
        typeObjetFinancier: string;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * LibelleModlEstVenl
         */
        libelleModeleEstVenl: string;
        /**
         * Cdfomp_CodeMiseOeuvrProjPro
         */
        codeMiseOeuvrProjetPro: number;
        /**
         * LibelleCodeMiseOeuvrProjPro
         */
        libelleCodeMiseOeuvrProjetPro: string;
        /**
         * Cdfonn_NegcEffcParNotr
         */
        negocieEffcParNotaire: boolean;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * Cdfwna_NaturesConcoursExternes
         */
        naturesConcoursExternes: Array<IScConstante>;
        /**
         * Cdfwrl_PresBienAVend
         */
        presBienAVend: boolean;
        /**
         * Cifocs_CoutObjtSaisCalcEnvl
         */
        coutObjetSaisieCalculEnvl: number;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Ctfgce_CritElgGarFEI
         */
        critereElgGarFEI: string;
        /**
         * Ctfifd_InteFrsDivrFinn
         */
        interieurFrsDivrFinancier: string;
        /**
         * Ctfoan_TypeAcqs
         */
        typeAcqs: number;
        /**
         * Ctfonu_NbUnteContPrgmImmb
         */
        nombreUnteContratProgrammeImmobilier: string;
        /**
         * Ctmicr_TypeLoiFICP
         */
        typeLoiFICP: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * FraisDeNotairesSaisissables
         */
        fraisDeNotairesSaisissables: boolean;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Lbfoof_DescObjt
         */
        descriptionObjet: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * Mofcpz_CoutRelOper
         */
        coutRelOper: number;
        /**
         * Mtfcra_MtRachCren
         */
        montantRachCren: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Mtfofd_MtFrsDivr
         */
        montantFrsDivr: number;
        /**
         * Mtfofn_CoutFrsNotr
         */
        coutFrsNotaire: number;
        /**
         * Mtfoho_CoutTotlObjtHt
         */
        coutTotalObjetHt: number;
        /**
         * Mtfott_CoutTotlObjtTtc
         */
        coutTotalObjetTTC: number;
        /**
         * PrendreBienSousJacentPourGarantie
         */
        prendreBienSousJacentPourGarantie: boolean;
        /**
         * RedacteurActeObligatoire
         */
        redacteurActeObligatoire: boolean;
        /**
         * IdntBienAVend
         */
        idBienAVend: string;
        /**
         * IdntLignInvs
         */
        idLigneInvs: string;
        /**
         * IdntLignTirg
         */
        idLigneTirg: string;
        /**
         * IdntPlanRetn
         */
        idPlanRetn: string;
        /**
         * IdntReam
         */
        idReamenagement: string;
        /**
         * ListIdntPlanFinn
         */
        listeIdPlanFinancier: Array<string>;
        /**
         * DescriptionProjet
         */
        descriptionProjet: string;
    }
    interface IPersonneAutreLecture extends IPersonneLecture {
        /**
         * Prenoms
         */
        prenoms: string;
    }
    interface IEntrepreneurIndividuelLecture extends IElementLecture {
    }
    interface IDocumentAssuranceLecture extends IElementLecture {
        /**
         * IdDocument
         */
        idDocument: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * IdContrat
         */
        idContrat: string;
        /**
         * TabDonneesDocument
         */
        tabDonneesDocument: string;
    }
    interface IConstructionFinanceeLecture extends IElementLecture {
        /**
         * Mtfoco_CoutConstFinn
         */
        coutConstructionFinancier: number;
        /**
         * Dtfoac_DateDebtConst
         * Type date au format yyyy-MM-dd
         */
        dateDebutConstruction: string;
        /**
         * Dffotr_DateFinConst
         * Type date au format yyyy-MM-dd
         */
        dateFinConstruction: string;
        /**
         * Mtfotm_CoutTrvxAChrgMoa
         */
        coutTravauxAChargeMoa: number;
        /**
         * Mtfotv_MtTvaFinnARemb
         */
        montantTVAFinancierARemboursement: number;
        /**
         * Ctfmcc_TypeContConst
         */
        typeContratConstruction: number;
        /**
         * LibelleTypeContConst
         */
        libelleTypeContratConstruction: string;
        /**
         * Cdfwti_TypeImeu
         */
        typeImeu: number;
        /**
         * Cdfoga_PresUneGarnAcheTrvx
         */
        presUneGarantieAcheTravaux: number;
        /**
         * LibellePresUneGarnAcheTrvx
         */
        libellePresUneGarantieAcheTravaux: string;
        /**
         * Nbfosh_SurfHabtCreeParConst
         */
        surfHabitationCreeParConstruction: number;
        /**
         * Nbfosa_SurfAnnx
         */
        surfAnnx: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * LibelleCtfoloTypeLogement
         */
        libelleTypeLogement: string;
        /**
         * Nbfolo_NbLogmConst
         */
        nombreLogementConstruction: number;
        /**
         * Nbfwpp_NbPiecPrncConst
         */
        nombrePiecePrincipalConstruction: number;
        /**
         * Ctfmoi_TypeLogm
         */
        typeLogement1: number;
        /**
         * LibelleCtfmoiTypeLogement
         */
        libelleTypeLogement1: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * IdntTerrSjac
         */
        idTerrSousJacent: string;
    }
    interface ICalculELLecture extends IElementLecture {
        /**
         * Tranche
         */
        tranche: ITrancheELLecture;
        /**
         * DroitUtilise
         */
        droitUtilise: IDroitUtiliseLecture;
        /**
         * Idfadi_IdDossier
         */
        idDossier: string;
        /**
         * Nufpct_IdContrat
         */
        idContrat: string;
        /**
         * Nofpdp_NumRelatifDossier
         */
        numeroRelatifDossier: number;
        /**
         * Ddfpct_DateOuvertureContrat
         */
        dateOuvertureContrat: string;
        /**
         * Txfpep_TauxEpargne
         */
        tauxEpargne: number;
        /**
         * Mtfaac_MontantDroitsAcquis
         */
        montantDroitsAcquis: number;
        /**
         * Dtfpae_DateArrete
         */
        dateArrete: string;
        /**
         * Ctfpli_LienParenteAvecCedant
         */
        lienParenteAvecCedant: string;
        /**
         * Cdfadv
         */
        cdfadv: string;
        /**
         * Mtfadu_MtDroitsAcquisUtilises
         */
        montantDroitsAcquisUtilises: number;
        /**
         * Txftpr_TauxPretCatalogue
         */
        tauxPretCatalogue: number;
        /**
         * Mkfmax_CapMaxOct
         */
        capMaximumOct: number;
        /**
         * Mtfaoc_MtPretOctroye
         */
        montantPretOctroye: number;
        /**
         * Mtfmax_EchMaxOct
         */
        echMaximumOct: number;
        /**
         * Mtfape_MtEchUtilise
         */
        montantEchUtilise: number;
        /**
         * Mtfali_MtLimite
         */
        montantLimite: number;
        /**
         * bDroitUtilisable
         */
        droitUtilisable: boolean;
    }
    interface IBienSousJacentLecture extends IElementLecture {
        /**
         * Ctfmma_ModeAcqsBien
         */
        modeAcqsBien: number;
        /**
         * LibelleModeAcquisition
         */
        libelleModeAcquisition: string;
        /**
         * Mkfmct_CrdBienSjac
         */
        crdbienSousJacent: number;
        /**
         * Dtfoat_DateEntrCaptDateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateEntrCapitalDateAcqs: string;
        /**
         * Ctfogp_ModeFinn
         */
        modeFinancier: number;
        /**
         * LibelleModeFinancement
         */
        libelleModeFinancement: string;
        /**
         * Cdfcni_TypeObjtComl
         */
        typeObjetCommercialisation: string;
        /**
         * Lbni_LibelleLong
         */
        libelleTypeObjCom: string;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Lbfcor_LibelleLong
         */
        libelleTypeObjReg: string;
        /**
         * Cnfcng_NatrGarnt
         */
        natureGarnt: number;
        /**
         * LibelleNatureGarantie
         */
        libelleNatureGarantie: string;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * LibelleModlEstmVenl
         */
        libelleModeleEstmVenl: string;
        /**
         * IdntBien
         */
        idBien: string;
    }
    interface IBatimentHabitableFinanceLecture extends IElementLecture {
        /**
         * Nbfosh_SurfHabtCreeParConst
         */
        surfHabitationCreeParConstruction: number;
        /**
         * Nbfosa_SurfAnnx
         */
        surfAnnx: number;
        /**
         * Mtfoac_CoutAcqsBatmHabt
         */
        coutAcqsBatimentHabitation: number;
        /**
         * Ctfopm_CodePrixMarcBale2
         */
        codePrixMarcheBale2: number;
        /**
         * Mtfomf_MtMoblFinn
         */
        montantMoblFinancier: number;
        /**
         * Mtfcfn_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * Dtfaoc_DateAcqsBatmHabt
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBatimentHabitation: string;
        /**
         * Dtfoco_DateConstBatmHabt
         * Type date au format yyyy-MM-dd
         */
        dateConstructionBatimentHabitation: string;
        /**
         * Mtfotv_MtTvaFinnARemb
         */
        montantTVAFinancierARemboursement: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * LibelleCtfoloTypeLogement
         */
        libelleTypeLogement: string;
        /**
         * Nbfolo_NbLogmConst
         */
        nombreLogementConstruction: number;
        /**
         * Nbfwpp_NbPiecPrncConst
         */
        nombrePiecePrincipalConstruction: number;
        /**
         * Ctfmoi_TypeLogm
         */
        typeLogement1: number;
        /**
         * LibelleCtfmoiTypeLogement
         */
        libelleTypeLogement1: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * IdntTerrSjac
         */
        idTerrSousJacent: string;
    }
    interface ITuteurLecture extends IElementLecture {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpci_LiblTitrCivl
         */
        libelleTitreCivilite: string;
        /**
         * Lbfppn_Prnm
         */
        libellePrenom: string;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Lbfpnj_NomJeunFill
         */
        libelleNomJeuneFille: string;
        /**
         * Lbfpnm_NomRaisonSociale
         */
        lblNomRaisonSociale: string;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNaissance: string;
        /**
         * Idfppe_IdntPersSI
         */
        identifiantPersonne: string;
        /**
         * IdntPersPhys
         */
        identifiantPersonnePhysique: string;
    }
    interface IFCM17NFO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: IChampTextBox;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: IChampTextBox;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: IChampTextBox;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: IChampTextBox;
    }
    interface IBienLecture {
        /**
         * NatureBien
         */
        natureBien: IChampTextBox;
        /**
         * QuantiteBien
         */
        quantiteBien: IChampTextBox;
        /**
         * ValeurBien
         */
        valeurBien: IChampTextBox;
        /**
         * LieuSituationBien
         */
        lieuSituationBien: IChampTextBox;
        /**
         * MarqueBien
         */
        marqueBien: IChampTextBox;
        /**
         * NumSerieBien
         */
        numeroSerieBien: IChampTextBox;
    }
    interface IFCM17GBM {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NombreBiensMC
         */
        nombreBiensMC: number;
        /**
         * NomenclatureBiens
         */
        nomenclatureBiens: IChampComboBox;
        /**
         * ListeBienMC
         */
        listeBienMC: Array<IBienLecture>;
        /**
         * RepresPersMoraleGageBienMeuble
         */
        represPersMoraleGageBienMeuble: IChampTextBox;
        /**
         * AgissantPersMoraleGageBienMeuble
         */
        agissantPersMoraleGageBienMeuble: IChampTextBox;
        /**
         * Vertu1PersMoraleGageBienMeuble
         */
        vertu1PersMoraleGageBienMeuble: IChampTextBox;
        /**
         * Vertu2PersMoraleGageBienMeuble
         */
        vertu2PersMoraleGageBienMeuble: IChampTextBox;
        /**
         * VilleTribunal
         */
        villeTribunal: IChampTextBox;
    }
    interface IBienMaj {
        /**
         * NatureBien
         */
        natureBien: string;
        /**
         * QuantiteBien
         */
        quantiteBien: string;
        /**
         * ValeurBien
         */
        valeurBien: string;
        /**
         * LieuSituationBien
         */
        lieuSituationBien: string;
        /**
         * MarqueBien
         */
        marqueBien: string;
        /**
         * NumSerieBien
         */
        numeroSerieBien: string;
    }
    interface IFCM07LAN {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * TypeEnvoi
         */
        typeEnvoi: IChampComboBox;
    }
    interface IScPhasePilote extends IScElement {
        /**
         * FonctionsPilote
         */
        fonctionsPilote: Array<string>;
    }
}

declare namespace ICRest.Modeles.LireExpertisePvh {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IResultatLireExpertisePVH {
        /**
         * ListeAnomalies
         */
        listeAnomalies: Array<IAnomalieLecture>;
        /**
         * IdentifiantExpertise
         */
        identifiantExpertise: string;
        /**
         * Note
         */
        note: number;
        /**
         * MontantEstimation
         */
        montantEstimation: number;
        /**
         * DateEstimation
         * Type date au format yyyy-MM-dd
         */
        dateEstimation: string;
        /**
         * Observation
         */
        observation: string;
    }
}

declare namespace ICRest.Modeles.ListerCatalogue {
    interface IConstante {
    }
    interface IFiltreAccessoireComplementaire extends IConstante {
        /**
         * IdwsCreditInterne
         */
        idwsCreditInterne: string;
    }
    interface IFiltreNatureFinancementAutorise extends IConstante {
        /**
         * Cdfcke_CategorieEmprunteur
         */
        categorieEmprunteur: string;
        /**
         * NatureProjet
         */
        natureProjet: number;
    }
    interface IFiltreCategorieEmprunteur extends IConstante {
        /**
         * NatureProjet
         */
        natureProjet: number;
    }
    interface IFiltreCreditParametresTaux extends IConstante {
        /**
         * Npfcfi_DureeCreditInterne
         */
        dureeCreditInterne: number;
        /**
         * IdwsCreditInterne
         */
        idwsCreditInterne: string;
    }
    interface IFiltreStatutOccupationLogement extends IConstante {
        /**
         * Cofopz_ConditionDerogatoirePtz
         */
        conditionDerogatoirePtz: number;
    }
    interface IScElement {
    }
    interface IScConstante extends IScElement {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
    interface IScProduitPhase extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Nofcfp_NoReltPhas
         */
        numeroRelationPhase: number;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Pefcph_UnitDurDunPhas
         */
        uniteDureeDunPhase: number;
        /**
         * Cdfcph_ModeExprDurPhas
         */
        modeExpressionDureePhase: number;
        /**
         * Npfcq1_DurPhasPrdt
         */
        dureePhaseProduit: number;
        /**
         * Npfcq2_DurPhasPrdt
         */
        dureePhaseProduit1: number;
        /**
         * Npfcq3_DurPhasPrdt
         */
        dureePhaseProduit2: number;
        /**
         * Npfcq4_DurDunPhasPas
         */
        dureeDunPhasePas: number;
        /**
         * Ptfcin_PerdicCalcIntr
         */
        periodiciteCalculIntr: number;
        /**
         * Ptfci1_PerdicCalcIntr
         */
        periodiciteCalculIntr1: number;
        /**
         * Ptfci2_PerdicCalcIntr
         */
        periodiciteCalculIntr2: number;
        /**
         * Ptfci3_PerdicCalcIntr
         */
        periodiciteCalculIntr3: number;
        /**
         * Ptfci4_PerdicCalcIntr
         */
        periodiciteCalculIntr4: number;
        /**
         * Ptfcam_PerdicMerAmrt
         */
        periodiciteMERAmortissement: number;
        /**
         * Ptfca1_PerdicMerAmrt
         */
        periodiciteMERAmortissement1: number;
        /**
         * Ptfca2_PerdicMerAmrt
         */
        periodiciteMERAmortissement2: number;
        /**
         * Ptfca3_PerdicMerAmrt
         */
        periodiciteMERAmortissement3: number;
        /**
         * Ptfca4_PerdicMerAmrt
         */
        periodiciteMERAmortissement4: number;
        /**
         * Cdfcpt_CodePerdicDiffMer
         */
        codePeriodiciteDiffereMER: number;
        /**
         * Cdfcei_CdRecvIntrTermEchu
         */
        codeRecouvrementIntrTermeEchu: number;
        /**
         * Cdfcea_CdRecvAmrtTermEchu
         */
        codeRecouvrementAmortissementTermeEchu: number;
        /**
         * Cdfccf_CdTypeConfmTxIntr
         */
        codeTypeConfirmationTauxIntr: number;
        /**
         * Cdfctx_ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * Nbfcaa_NbJourAnnNumrt
         */
        nombreJourAnnulationNumerateur: number;
        /**
         * Cdfcam_ModeCalcAmrt
         */
        modeCalculAmortissement: number;
        /**
         * Mtfckr_CaptRefrTablCste
         */
        capitalReferenceTableConstante: number;
        /**
         * Ctfcrb_TypeAsstRemb
         */
        typeAssietteRemboursement: number;
        /**
         * Cdfcva_CdVerstAutrPendPhas
         */
        codeVersementAutrePendantPhase: number;
        /**
         * Cdfcfp_CodeRedcDurPrfn
         */
        codeReductionDureePrefinancement: number;
        /**
         * Cdfcpr_CodePrlnDurPrfn
         */
        codePrelevementDureePrefinancement: number;
        /**
         * Ctfcpe_CodeTypePrfn
         */
        codeTypePrefinancement: number;
        /**
         * Cdfcip_CodeRecvPartlIntr
         */
        codeRecouvrementPartielIntr: number;
        /**
         * Cdfcir_CodeCalcIntrRepr
         */
        codeCalculIntrRepr: number;
        /**
         * Cdfcki_CodeCaptIntrDiff
         */
        codeCapitalIntrDiffere: number;
        /**
         * Ptfcci_CalcIntrJourReel
         */
        calculIntrJourReel: number;
        /**
         * Ptfcd1_PerdicMerIntr
         */
        periodiciteMERIntr: number;
        /**
         * Ptfcd2_PerdicMerIntr
         */
        periodiciteMERIntr1: number;
        /**
         * Ptfcd3_PerdicMerIntr
         */
        periodiciteMERIntr2: number;
        /**
         * Ptfcd4_PerdicMerIntr
         */
        periodiciteMERIntr3: number;
        /**
         * Ctfck2_ModeCaptIntr
         */
        modeCapitalIntr: number;
        /**
         * Ctfck1_ModeRecvIntr
         */
        modeRecouvrementIntr: number;
        /**
         * Ptfcco_PerdicCompoIntr
         */
        periodiciteCompositionIntr: number;
        /**
         * Cdfcpm_CdModeExprTxMoyePhas
         */
        codeModeExpressionTauxMoyenPhase: number;
        /**
         * Txfcp1_ValrMinTxMoyePhas
         */
        valeurMinimumTauxMoyenPhase: number;
        /**
         * Txfcp2_ValrMaxTxMoyePhas
         */
        valeurMaximumTauxMoyenPhase: number;
        /**
         * Txfcp3_ValrConsTxMoyePhas
         */
        valeurConsolideTauxMoyenPhase: number;
        /**
         * Cdfcth_CodeTxPalrCalc
         */
        codeTauxPalierCalcul: number;
        /**
         * Cdfcin_CodeIndc
         */
        codeIndice: string;
        /**
         * Nbfrvd_NbMaxiPerdVartDur
         */
        nombreMaximumPeriodeVartDuree: number;
        /**
         * Cdfcop_CodeOptnSurPhasPrdt
         */
        codeOptionSurPhaseProduit: number;
        /**
         * Cdfcoo_CodeObjtOptn
         */
        codeObjetOption: number;
        /**
         * Cdfcto_TypeOptn
         */
        typeOption: number;
        /**
         * Cdfcsr_CodeCourPourPrsDopt
         */
        codeCourtPourPresenceDopt: number;
        /**
         * Npfcsr_DelaiCourPrsDopt
         */
        delaiCourtPresenceDopt: number;
        /**
         * Pefcpo_PerdicOptn
         */
        periodiciteOption: number;
        /**
         * Nbjja1_NbJourAnnDenom
         */
        nombreJourAnnulationDenomination: number;
        /**
         * Txfccz_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement: number;
        /**
         * Tpfcc1_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement: number;
        /**
         * Tsfcc1_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement: number;
        /**
         * Pefrie_UnitPerdValrIntIndc
         */
        unitePeriodeValeurIntituleIndice: number;
        /**
         * Npfrie_NbPerdValrIntIndc
         */
        nombrePeriodeValeurIntituleIndice: number;
        /**
         * Ctfcte_CodeTypeTrtDech
         */
        codeTypeTraitementDech: number;
        /**
         * Tsfcif_QuotMaxiCaptIfin
         */
        quotientMaximumCapitalIfin: number;
        /**
         * Txfcca_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement1: number;
        /**
         * Tpfcca_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement1: number;
        /**
         * Tsfcca_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement1: number;
        /**
         * Idfrbd_IdntReglButrDur
         */
        idRegleButoireDuree: string;
    }
    interface IScFraisAutres extends IScElement {
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
        /**
         * Cdfcao_CodeAccsObgt
         */
        codeAccessoireObligatoire: boolean;
        /**
         * LibelleLong
         */
        libelleLong: string;
        /**
         * TypeAccessoire
         */
        typeAccessoire: number;
    }
    interface IScCotisationCoutMontantListe extends IScCotisationCout {
        /**
         * ListeValeur
         */
        listeValeur: Array<number>;
        /**
         * MontantReduit
         */
        montantReduit: number;
        /**
         * MontantMajore
         */
        montantMajore: number;
    }
    interface IScCotisationCoutMontantIntervalle extends IScCotisationCout {
        /**
         * Min
         */
        minimum: number;
        /**
         * Max
         */
        maximum: number;
        /**
         * Pas
         */
        pas: number;
        /**
         * Defaut
         */
        defaut: number;
    }
    interface IScCotisationCoutQuotiteListe extends IScCotisationCoutQuotite {
        /**
         * ListeQuotite
         */
        listeQuotite: Array<number>;
        /**
         * TauxReduit
         */
        tauxReduit: number;
        /**
         * TauxMajore
         */
        tauxMajore: number;
        /**
         * TauxNormal
         */
        tauxNormal: number;
    }
    interface IScCotisationCoutQuotiteIntervalle extends IScCotisationCoutQuotite {
        /**
         * Min
         */
        minimum: number;
        /**
         * Max
         */
        maximum: number;
        /**
         * Pas
         */
        pas: number;
        /**
         * Defaut
         */
        defaut: number;
    }
    interface IScCotisationCoutQuotite extends IScCotisationCout {
        /**
         * TypeDass
         */
        typeDass: number;
        /**
         * TxPourLesPersAgs
         */
        tauxPourLesPersonneAge: number;
        /**
         * MtMaxiAssAccs
         */
        montantMaximumAssuranceAccessoire: number;
    }
    interface IScCotisationCout extends IScElement {
        /**
         * MtMinRecv
         */
        montantMinimumRecouvrement: number;
        /**
         * MtMinAccs
         */
        montantMinimumAccessoire: number;
        /**
         * MtMaxAccs
         */
        montantMaximumAccessoire: number;
        /**
         * ValrCons
         */
        valeurConsolide: number;
    }
    interface IScTrancheMontant {
        /**
         * Nufctr_NumrTrch
         */
        numeroTranche: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * CotCout
         */
        cotCout: IScCotisationCout;
    }
    interface IScCotisationPhase extends IScCotisation {
        /**
         * Ctfcfp_TypePhase
         */
        typePhase: string;
    }
    interface IScCotisationDerogation extends IScCotisation {
        /**
         * Npfcap_DureeDerogation
         */
        dureeDerogation: number;
        /**
         * Pefcap_PrdDerogation
         */
        produitDerogation: number;
        /**
         * Mtfcvp_MttMinCred
         */
        montantMinimumCredit: number;
        /**
         * Msfcvp_MttMaxCred
         */
        montantMaximumCredit: number;
        /**
         * Ctfcps_Personlsbl
         */
        personlsbl: number;
        /**
         * Nufcdo_NumDrgtn
         */
        numeroDirigeant: number;
    }
    interface IScCotisationTrancheAge extends IScCotisation {
        /**
         * Nufctr_NumrTrch
         */
        numeroTranche: number;
        /**
         * Nbfcai_DebuTrchAge
         */
        debutTrancheAge: number;
        /**
         * Nbfcae_FinTrchAge
         */
        finTrancheAge: number;
        /**
         * ListScCotisationDerogation
         */
        listeSousclasseCotisationDerogation: Array<IScCotisationDerogation>;
    }
    interface IScCotisationPeriode extends IScCotisation {
        /**
         * Nufctr_NumTrch
         */
        numeroTranche: number;
        /**
         * Npfcap_DrPrd
         */
        drProduit: number;
        /**
         * Pefcap_PrdctPrd
         */
        producteurProduit: number;
        /**
         * Npfcel_DrEtlmnt
         */
        drElement: number;
        /**
         * Pefcde_PrdctEtlmnt
         */
        producteurElement: number;
    }
    interface IScCotisation extends IScElement {
        /**
         * Ctfcat_SousTypeAcc
         */
        sousTypeAccessoire: string;
        /**
         * Ctfcac_TypeDaccCtfc
         */
        typeDaccCtfc: string;
        /**
         * Cdfcao_ReprsCarObgtFaclCots
         */
        repriseCarObligatoireFacultatifCotisation: number;
        /**
         * Ctfcca_ModeCalcLacc
         */
        modeCalculLacc: number;
        /**
         * Ddfcap_DateDebuDapp
         * Type date au format yyyy-MM-dd
         */
        dateDebutDapp: string;
        /**
         * Dffcap_DateFinDapp
         * Type date au format yyyy-MM-dd
         */
        dateFinDapp: string;
        /**
         * Nrfcmr_ReglDappLacc
         */
        regleDappLacc: string;
        /**
         * Nrfcda_ReglDateDebuDappLacc
         */
        regleDateDebutDappLacc: string;
        /**
         * Nrfcpa_ReglEvnmDeclr
         */
        regleEvenementDeclaration: string;
        /**
         * Pefcac_CodePerdicAppli
         */
        codePeriodiciteApplication: number;
        /**
         * Cdfceh_CodeRecvAccs
         */
        codeRecouvrementAccessoire: number;
        /**
         * Ctfcia_CodeTypeAppliAccs
         */
        codeTypeApplicationAccessoire: number;
        /**
         * Npfcap_NbPerdDappLacc
         */
        nombrePeriodeDappLacc: number;
        /**
         * Pefcap_PerdicDappLacc
         */
        periodiciteDappLacc: number;
        /**
         * Nrfcap_ReglDappAprd
         */
        regleDappAprd: string;
        /**
         * Cdfcat_CodeCalcTeg
         */
        codeCalculteg: number;
        /**
         * Cdfcrb_CodeAccsRembFinCrdt
         */
        codeAccessoireRemboursementFinCredit: boolean;
        /**
         * Cdfcap_CodeApplEchn
         */
        codeApplicationEcheance: boolean;
        /**
         * Cdfctx_CodeModeCalcTx
         */
        codeModeCalculTaux: number;
        /**
         * Nrfccr_ReglCalcLacc
         */
        regleCalculLacc: string;
        /**
         * InfosTxCots
         */
        informationTauxCotisation: Array<number>;
        /**
         * InfosMttCots
         */
        informationMontantCotisation: Array<number>;
        /**
         * Tsfcff_FrctFinnMaxiLacc
         */
        fractionFinancierMaximumLacc: number;
        /**
         * Ctfcai_CompatInstr
         */
        compatibiliteInstruction: boolean;
        /**
         * Ctfcaw_CompatAvnn
         */
        compatibiliteAvenant: boolean;
        /**
         * Ctfcfd_FinnAccCrdt
         */
        financierAccessoireCredit: boolean;
        /**
         * Cifcdb_RetrCodeIndicDerg
         */
        retardCodeIndiceDerogation: number;
        /**
         * Cifcip_CodeIntgPlanFinn
         */
        codeIntegrationPlanFinancier: number;
        /**
         * ListCoutCots
         */
        listeCoutCotisation: Array<IScCotisationCout>;
        /**
         * ListTrncMt
         */
        listeTrancheMontant: Array<IScTrancheMontant>;
    }
    interface IScConventionAssurance extends IScConvention {
        /**
         * Nbfcai_AgeMinEntrAssr
         */
        ageMinimumEntrAssurance: number;
        /**
         * Nbfcae_AgeMaxEntrAssr
         */
        ageMaximumEntrAssurance: number;
        /**
         * Cdfcsd_CodeDestReglSins
         */
        codeDestinataireRegleSinistre: number;
        /**
         * Nufcit_NDomcBanc
         */
        nDomiciliationBancaire: string;
        /**
         * Nbfcco_AgeMaxCouvAsre
         */
        ageMaximumCouvertureAssurance: number;
        /**
         * Nbfcex_AgeMaxAsreDerg
         */
        ageMaximumAssuranceDerogation: number;
    }
    interface IScConventionGarantie extends IScConvention {
        /**
         * Cdfcng_FormGarn
         */
        formeGarantie: string;
        /**
         * Cdfcic_CasImpAutm
         */
        casImpAutomatique: number;
        /**
         * Npfcpc_DelaiInfo
         */
        delaiInformation: number;
        /**
         * Idfpga_IdntPersCouv
         */
        idPersonneCouverture: string;
        /**
         * Cdtg_CodeNatrCautSimpLimt
         */
        codeNatureCautionSimpleLimite: string;
        /**
         * Cdfcmu_ConvCautMutl
         */
        conventionCautionMutuel: number;
    }
    interface IScConvention extends IScConventionResume {
        /**
         * ListCots
         */
        listeCotisation: Array<IScCotisation>;
        /**
         * ListCdfcod_CritIdent
         */
        listeCdfcod_CritereId: Array<string>;
    }
    interface IScConventionResume extends IScElement {
        /**
         * Idfcco_IdntConv
         */
        idConvention: string;
        /**
         * Nufcco_NumrExtnConv
         */
        numeroExterneConvention: string;
        /**
         * Idit_IdntIntv
         */
        idIntervenant: string;
        /**
         * Llfcco_LiblLongConv
         */
        libelleLongConvention: string;
        /**
         * Lcfcco_LiblCrtConv
         */
        libelleCreationConvention: string;
        /**
         * Lbfcco_CommtConv
         */
        commentaireConvention: string;
        /**
         * Lbfcc1_CommtConv
         */
        commentaireConvention1: string;
        /**
         * Cdtg_CodeNatrCaut
         */
        codeNatureCaution: string;
        /**
         * Ddfcco_DatePrsDeffConv
         * Type date au format yyyy-MM-dd
         */
        datePresenceDeffConvention: string;
        /**
         * Dffcco_DateFinDeffConv
         * Type date au format yyyy-MM-dd
         */
        dateFinDeffConvention: string;
        /**
         * Nrfcas_ReglDateDeff
         */
        regleDateDeff: string;
        /**
         * Cnfcga_ModeDexp
         */
        modeDexp: number;
        /**
         * Mpfcas_MtMinCrdtPourConv
         */
        montantMinimumCreditPourConvention: number;
        /**
         * Msfcas_MtMaxCrdtPourConv
         */
        montantMaximumCreditPourConvention: number;
        /**
         * Npfcxa_NbPerdMinCrdt
         */
        nombrePeriodeMinimumCredit: number;
        /**
         * Pefcca_PerdicDexpConv
         */
        periodiciteDexpConvention: number;
        /**
         * Npfcma_NbPerdMaxCrdt
         */
        nombrePeriodeMaximumCredit: number;
        /**
         * Tpfcga_QuotMinParBenf
         */
        quotientMinimumParBeneficiaire: number;
        /**
         * Tsfcga_QuotMaxParBenf
         */
        quotientMaximumParBeneficiaire: number;
        /**
         * Txfcga_PasQuot
         */
        pasQuotient: number;
        /**
         * Mpfcga_MtMinGarnParTete
         */
        montantMinimumGarantieParTete: number;
        /**
         * Msfcga_MtMaxGarnParTete
         */
        montantMaximumGarantieParTete: number;
        /**
         * Mxfcga_PasMtGarn
         */
        pasMontantGarantie: number;
        /**
         * Cnfcpc_NatrPrsChrg
         */
        naturePresenceCharge: number;
        /**
         * Ptfcra_PerdicRecv
         */
        periodiciteRecouvrement: number;
        /**
         * Cdfcdr_CodeDetrDateRecv
         */
        codeDetrDateRecouvrement: number;
        /**
         * Npfcre_DelaiRver
         */
        delaiRver: number;
        /**
         * Cdfccm_CodeCommIntvExt
         */
        codeCommissionIntervenantExterieur: number;
        /**
         * Ttfcas_TxCommCais
         */
        tauxCommissionCaisse: number;
        /**
         * Ctfcar_CodeTypeAsstComm
         */
        codeTypeAssietteCommission: number;
        /**
         * Cdfcrr_CodeModlReglComm
         */
        codeModeleRegleCommission: number;
        /**
         * Cdfgga_CodeTierGarn
         */
        codeTiersGarantie: number;
        /**
         * Cdfgto_CodeTypeDobjAutr
         */
        codeTypeDobjAutre: number;
        /**
         * Cnfcbo_CodeNatrBonf
         */
        codeNatureBonification: number;
        /**
         * Cdfdrg_CodeModeRegl
         */
        codeModeRegle: string;
        /**
         * Mtfcge_MtMaxEncr
         */
        montantMaximumEncours: number;
        /**
         * Npfcmp_NbPerdMaxPf
         */
        nombrePeriodeMaximumPf: number;
        /**
         * Npfcmt_NbPerdMaxDt
         */
        nombrePeriodeMaximumDt: number;
        /**
         * Npfcmd_NbPerdMaxDa
         */
        nombrePeriodeMaximumDa: number;
        /**
         * Npfcmm_NbPerdMaxAm
         */
        nombrePeriodeMaximumAm: number;
        /**
         * Cdfcoc_CodeRestt
         */
        codeRestant: string;
        /**
         * Mpfena_MtPlfnPourDelg
         */
        montantPlafondPourDelegation: number;
        /**
         * Ctfctc_TypeConv
         */
        typeConvention: string;
        /**
         * Nbfcae_AgeMaxiReqsParConv
         */
        ageMaximumRequisParConvention: number;
        /**
         * Nbfcai_AgeMiniReqsParConv
         */
        ageMinimumRequisParConvention: number;
        /**
         * Ctfcea_TypeDacc
         */
        typeDacc: string;
        /**
         * Cdfcdv_CodeDevs
         */
        codeDevise: string;
        /**
         * Llfcc3_LiblLongConvJurd
         */
        libelleLongConventionJuridique: string;
        /**
         * Ctfcaa_TypeDass
         */
        typeDass: string;
        /**
         * Cdfcex_CodeDergAge
         */
        codeDerogationAge: number;
        /**
         * EstExterne
         */
        estExterne: boolean;
        /**
         * EstConventionSaccef
         */
        estConventionSaccef: boolean;
        /**
         * EstConventionFEI
         */
        estConventionFEI: boolean;
        /**
         * EstConventionOSEOEtudiant
         */
        estConventionOSEOEtudiant: boolean;
        /**
         * EstConventionSIAGI
         */
        estConventionSIAGI: boolean;
        /**
         * EstConventionCFG
         */
        estConventionCFG: boolean;
        /**
         * EstAERAS
         */
        estAERAS: boolean;
        /**
         * EstCautionMutuelle
         */
        estCautionMutuelle: boolean;
        /**
         * EstCautionMutuelle_ClausesEditiquePieco
         */
        estCautionMutuelleClausesEditiquePieco: boolean;
        /**
         * EstCreditLogementInitio
         */
        estCreditLogementInitio: boolean;
        /**
         * EstCreditLogement
         */
        estCreditLogement: boolean;
        /**
         * EstInterne
         */
        estInterne: boolean;
        /**
         * EstTAEA
         */
        estTAEA: boolean;
        /**
         * EstSFGAS
         */
        estSFGAS: boolean;
        /**
         * LibCompAssr
         */
        libelleCompAssurance: string;
    }
    interface IScProduitsAutorises extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Cdfcfc_CodeFamlCtrl
         */
        codeFamilleControle: string;
        /**
         * Mtfcvp_MtMiniCrdt
         */
        montantMinimumCredit: number;
        /**
         * Msfcvp_MtMaxiCrdt
         */
        montantMaximumCredit: number;
        /**
         * Npfcfi_DurCrdt
         */
        dureeCredit: number;
        /**
         * Npfcf1_DurCrdt
         */
        dureeCredit1: number;
        /**
         * Txfcfa_QuotFinnAutr
         */
        quotientFinancierAutre: number;
        /**
         * Nbfcph_NbPhasAmrt
         */
        nombrePhaseAmortissement: number;
        /**
         * Cdfctt_CodePossDiffTotl
         */
        codePossibiliteDiffereTotal: number;
        /**
         * Cdfcdi_CdPossDiffAmrt
         */
        codePossibiliteDiffereAmortissement: number;
        /**
         * Cdfcrl_CodeCrdtRels
         */
        codeCreditRelease: number;
        /**
         * Cdfctd_CodeTxCrdtDir
         */
        codeTauxCreditDirecteur: number;
        /**
         * Cifctt_IndicTypeTx
         */
        indiceTypeTaux: number;
        /**
         * Cifccm_IndicCrdtModl
         */
        indiceCreditModele: number;
        /**
         * Cifcpl_IndicPrdtLiss
         */
        indiceProduitLissage: number;
        /**
         * Cifcpc_IndicPrdtCompl
         */
        indiceProduitComplement: number;
        /**
         * Idficl_CleRech
         */
        cleRecherche: string;
        /**
         * Ctfct0_CodeTypeTrchPret0
         */
        codeTypeTranchePret0: string;
        /**
         * Cdfacc_IndicCpte
         */
        indiceCompte: number;
        /**
         * Cdfcce_CodeEnggCnsol
         */
        codeEngagementConsolide: number;
        /**
         * Cdfcbp_CodePrdtRestt
         */
        codeProduitRestant: string;
        /**
         * Dffcap_DateFinValdPrdt
         * Type date au format yyyy-MM-dd
         */
        dateFinValiditeProduit: string;
        /**
         * bActif
         */
        actif: boolean;
    }
    interface IScFamillesDeProduits extends IScElement {
        /**
         * Cdfcke_CodeCatgEmpr
         */
        codeCategorieEmprunt: string;
        /**
         * Cdfcni_TypeObjtFinnGarn
         */
        typeObjetFinancierGarantie: string;
        /**
         * Cdfctp_CodeStrcInstr
         */
        codeStructureInstruction: string;
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Lbfcpo_LiblLongFamlPrdt
         */
        libelleLongFamilleProduit: string;
        /**
         * ListeProduits
         */
        listeProduits: Array<IScProduitsAutorises>;
    }
    interface IScCategorieEmprunteur extends IScElement {
        /**
         * Cdfcke_CodeCatgEmpr
         */
        codeCategorieEmprunt: string;
        /**
         * Lbfcke_LiblCatgEmpr
         */
        libelleCategorieEmprunt: string;
        /**
         * Ctfcma_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * Lcfcke_LiblCrtCatgEmpr
         */
        libelleCreationCategorieEmprunt: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
    }
    interface IRetourCatalogue {
        /**
         * Constante
         */
        constante: IConstante;
        /**
         * ElementCatalogue
         */
        elementCatalogue: Array<IScElement>;
    }
    interface IListerCatalogueRequest {
        /**
         * idDossier
         */
        idDossier: string;
        constante: IConstante;
    }
    interface IFiltreTypeCharge extends IConstante {
        /**
         * Future
         */
        future: boolean;
    }
    interface IScTypeCharge extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Ctfpch_TypeChrg
         */
        typeCharge: string;
        /**
         * Lbfpch_LiblChrg
         */
        libelleCharge: string;
        /**
         * Cdfpch_CodeSignChrg
         */
        codeSigneCharge: number;
        /**
         * Txfmrc_TxPondRessChrg
         */
        tauxPondereRessourceCharge: number;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Cdfpcu_CodeUsgTyplChrg
         */
        codeUsageTypologieCharge: number;
        /**
         * Ctfps1_TypRess
         */
        typeRessource: string;
        /**
         * Ctfpcc_TypeCdtChrg
         */
        typeCdtCharge: string;
    }
    interface IFiltreInteretIntercalaire extends IConstante {
        /**
         * IdwsCreditInterne
         */
        idwsCreditInterne: string;
    }
    interface IFiltreNatureTravaux extends IConstante {
        /**
         * NombreTravaux
         */
        nombreTravaux: number;
    }
    interface IFiltreLienAvecEmprunteur extends IConstante {
    }
    interface IFiltreStatutOccupationPersonne extends IConstante {
    }
    interface IFiltrePerformanceEnergetique extends IConstante {
    }
    interface IFiltreCadreFiscal extends IConstante {
    }
    interface IFiltreCodeExistenceRC extends IConstante {
        /**
         * CodeRessourceCharge
         */
        codeRessourceCharge: number;
        /**
         * TypeCharge
         */
        typeCharge: string;
    }
    interface IFiltreModeOccupation extends IConstante {
        /**
         * Cdfcdo_Destination
         */
        destination: number;
    }
    interface IFiltreUsageDuBien extends IConstante {
        /**
         * Ctfacf_CadreFiscal
         */
        cadreFiscal: string;
    }
    interface IFiltreNatureConcoursExternes extends IConstante {
    }
    interface IFiltrePrimoPTZ extends IConstante {
    }
    interface IFiltreBeneficiaireFraisAccessoire extends IConstante {
        /**
         * CodeRole
         */
        codeRole: string;
        /**
         * Intitule
         */
        intitule: string;
        /**
         * CodePostal
         */
        codePostal: string;
        /**
         * IdwsAccessoireComplementaire
         */
        idwsAccessoireComplementaire: string;
    }
    interface IScModalitesTiersParTypeDeRole extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Idfpti_IdentifiantTiers
         */
        identifiantTiers: string;
        /**
         * Ctfprp_TypeRolePers
         */
        typeRolePersonne: string;
        /**
         * Lbfpa1_Intitule
         */
        intitule: string;
        /**
         * Lbfpa2_AdresseLigne3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdresseLigne4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePostal
         */
        codePostal: string;
        /**
         * Lbfpa5_Localite
         */
        localite: string;
    }
    interface IScTypeObjetReglemente extends IScElement {
        /**
         * Ctfcor_TypeObjtReglTor
         */
        typeObjetRegleTor: string;
        /**
         * Lbfcor_LiblTypeObjtReglTor
         */
        libelleTypeObjetRegleTor: string;
        /**
         * Lcfcor_LbCrtTypeObjtReglTor
         */
        libelleCreationTypeObjetRegleTor: string;
        /**
         * Lbfomo_LibelleMeta
         */
        libelleMeta: string;
    }
    interface IScTypeObjetCommercialiseToc extends IScElement {
        /**
         * Cdfcni_TypeObjtFinnGarn
         */
        typeObjetFinancierGarantie: string;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * Cdfcfo_CatgReglAttr
         */
        categorieRegleAttribut: string;
        /**
         * Lbfcni_LiblTypeObjtComlToc
         */
        libelleTypeObjetCommercialisationToc: string;
        /**
         * Ctfcbv_CodeVntlSclssBafi
         */
        codeVentilationSousclasseBafi: string;
        /**
         * Ctfcaf_CodeAffecObjt
         */
        codeAffectationObjet: number;
        /**
         * Lcfcni_LbCrtTypeObjtComlToc
         */
        libelleCreationTypeObjetCommercialisationToc: string;
        /**
         * Ctfcor_listeTOR
         */
        ctfcor_listeTOR: Array<string>;
        /**
         * LibelleNatureFinancement
         */
        libelleNatureFinancement: string;
        /**
         * ListTypeObjetReglemente
         */
        listeTypeObjetReglemente: Array<IScTypeObjetReglemente>;
    }
    interface IFiltreAdrRisqueEpargne extends IConstante {
        /**
         * CodeProduitCeHorsCe
         */
        codeProduitCEHorsCE: number;
        /**
         * IdwsPersonne
         */
        idPersonne: string;
    }
    interface IScAdrRisqueEpargne extends IScElement {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Lbfmpr_LiblFamlPrdtAdr
         */
        libelleFamilleProduitAdresse: string;
        /**
         * Cdfmce_CodePrdtCeHorsCe
         */
        codeProduitCEHorsCE: number;
        /**
         * Ctfmep_CodeTypeEparLiqd
         */
        codeTypeEpargneLiquide: number;
    }
}

declare namespace ICRest.Modeles.ListerCollectivitesCnp {
    interface IListerCollectivitesRequest {
        identifiantDossier: string;
        identifiantPersonne: string;
        identifiantPlanFinancement: string;
    }
    interface ICollectiviteCNP {
        /**
         * Cle
         */
        cle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
    interface IResultatCollectiviteCNP {
        /**
         * LibErreur
         */
        libelleErreur: string;
        /**
         * ListeCollectiviteCNP
         */
        listeCollectiviteCNP: Array<ICollectiviteCNP>;
    }
}

declare namespace ICRest.Modeles.ListerConstantes {
    interface IListerConstantesRequest {
        /**
         * identifiantDossier
         */
        identifiantDossier: string;
        constante: IConstante;
    }
    interface IConstante {
    }
    interface IFiltrePerformanceEnergetique extends IConstante {
    }
    interface IFiltreLienAvecEmprunteur extends IConstante {
    }
    interface IFiltreStatutOccupationPersonne extends IConstante {
    }
    interface IFiltreCadreFiscal extends IConstante {
    }
    interface IFiltreModeOccupation extends IConstante {
        /**
         * Cdfcdo_Destination
         */
        destination: number;
    }
    interface IFiltreUsageDuBien extends IConstante {
        /**
         * Ctfacf_CadreFiscal
         */
        cadreFiscal: string;
    }
    interface IFiltreNatureFinancementAutorise extends IConstante {
        /**
         * Cdfcke_CategorieEmprunteur
         */
        categorieEmprunteur: string;
        /**
         * NatureProjet
         */
        natureProjet: number;
    }
    interface IFiltreCategorieEmprunteur extends IConstante {
        /**
         * NatureProjet
         */
        natureProjet: number;
    }
    interface IFiltreCreditParametresTaux extends IConstante {
        /**
         * Npfcfi_DureeCreditInterne
         */
        dureeCreditInterne: number;
        /**
         * IdwsCreditInterne
         */
        idwsCreditInterne: string;
    }
    interface IFiltrePrimoPTZ extends IConstante {
    }
    interface IFiltreStatutOccupationLogement extends IConstante {
        /**
         * Cofopz_ConditionDerogatoirePtz
         */
        conditionDerogatoirePtz: number;
    }
    interface IFiltreAccessoireComplementaire extends IConstante {
        /**
         * IdwsCreditInterne
         */
        idwsCreditInterne: string;
    }
    interface IScElement {
    }
    interface IScConstante extends IScElement {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
    interface IRetourConstante {
        /**
         * Constante
         */
        constante: IConstante;
        /**
         * Constantes
         */
        constantes: Array<IScConstante>;
    }
    interface IFiltreNatureTravaux extends IConstante {
        /**
         * NombreTravaux
         */
        nombreTravaux: number;
    }
    interface IFiltreTypeCharge extends IConstante {
        /**
         * Future
         */
        future: boolean;
    }
    interface IFiltreCodeExistenceRC extends IConstante {
        /**
         * CodeRessourceCharge
         */
        codeRessourceCharge: number;
        /**
         * TypeCharge
         */
        typeCharge: string;
    }
    interface IFiltreNatureConcoursExternes extends IConstante {
    }
    interface IFiltreInteretIntercalaire extends IConstante {
        /**
         * IdwsCreditInterne
         */
        idwsCreditInterne: string;
    }
}

declare namespace ICRest.Modeles.ListerConventionsAssuranceCompatible {
    interface IScElement {
    }
    interface IScConventionResume extends IScElement {
        /**
         * Idfcco_IdntConv
         */
        idConvention: string;
        /**
         * Nufcco_NumrExtnConv
         */
        numeroExterneConvention: string;
        /**
         * Idit_IdntIntv
         */
        idIntervenant: string;
        /**
         * Llfcco_LiblLongConv
         */
        libelleLongConvention: string;
        /**
         * Lcfcco_LiblCrtConv
         */
        libelleCreationConvention: string;
        /**
         * Lbfcco_CommtConv
         */
        commentaireConvention: string;
        /**
         * Lbfcc1_CommtConv
         */
        commentaireConvention1: string;
        /**
         * Cdtg_CodeNatrCaut
         */
        codeNatureCaution: string;
        /**
         * Ddfcco_DatePrsDeffConv
         * Type date au format yyyy-MM-dd
         */
        datePresenceDeffConvention: string;
        /**
         * Dffcco_DateFinDeffConv
         * Type date au format yyyy-MM-dd
         */
        dateFinDeffConvention: string;
        /**
         * Nrfcas_ReglDateDeff
         */
        regleDateDeff: string;
        /**
         * Cnfcga_ModeDexp
         */
        modeDexp: number;
        /**
         * Mpfcas_MtMinCrdtPourConv
         */
        montantMinimumCreditPourConvention: number;
        /**
         * Msfcas_MtMaxCrdtPourConv
         */
        montantMaximumCreditPourConvention: number;
        /**
         * Npfcxa_NbPerdMinCrdt
         */
        nombrePeriodeMinimumCredit: number;
        /**
         * Pefcca_PerdicDexpConv
         */
        periodiciteDexpConvention: number;
        /**
         * Npfcma_NbPerdMaxCrdt
         */
        nombrePeriodeMaximumCredit: number;
        /**
         * Tpfcga_QuotMinParBenf
         */
        quotientMinimumParBeneficiaire: number;
        /**
         * Tsfcga_QuotMaxParBenf
         */
        quotientMaximumParBeneficiaire: number;
        /**
         * Txfcga_PasQuot
         */
        pasQuotient: number;
        /**
         * Mpfcga_MtMinGarnParTete
         */
        montantMinimumGarantieParTete: number;
        /**
         * Msfcga_MtMaxGarnParTete
         */
        montantMaximumGarantieParTete: number;
        /**
         * Mxfcga_PasMtGarn
         */
        pasMontantGarantie: number;
        /**
         * Cnfcpc_NatrPrsChrg
         */
        naturePresenceCharge: number;
        /**
         * Ptfcra_PerdicRecv
         */
        periodiciteRecouvrement: number;
        /**
         * Cdfcdr_CodeDetrDateRecv
         */
        codeDetrDateRecouvrement: number;
        /**
         * Npfcre_DelaiRver
         */
        delaiRver: number;
        /**
         * Cdfccm_CodeCommIntvExt
         */
        codeCommissionIntervenantExterieur: number;
        /**
         * Ttfcas_TxCommCais
         */
        tauxCommissionCaisse: number;
        /**
         * Ctfcar_CodeTypeAsstComm
         */
        codeTypeAssietteCommission: number;
        /**
         * Cdfcrr_CodeModlReglComm
         */
        codeModeleRegleCommission: number;
        /**
         * Cdfgga_CodeTierGarn
         */
        codeTiersGarantie: number;
        /**
         * Cdfgto_CodeTypeDobjAutr
         */
        codeTypeDobjAutre: number;
        /**
         * Cnfcbo_CodeNatrBonf
         */
        codeNatureBonification: number;
        /**
         * Cdfdrg_CodeModeRegl
         */
        codeModeRegle: string;
        /**
         * Mtfcge_MtMaxEncr
         */
        montantMaximumEncours: number;
        /**
         * Npfcmp_NbPerdMaxPf
         */
        nombrePeriodeMaximumPf: number;
        /**
         * Npfcmt_NbPerdMaxDt
         */
        nombrePeriodeMaximumDt: number;
        /**
         * Npfcmd_NbPerdMaxDa
         */
        nombrePeriodeMaximumDa: number;
        /**
         * Npfcmm_NbPerdMaxAm
         */
        nombrePeriodeMaximumAm: number;
        /**
         * Cdfcoc_CodeRestt
         */
        codeRestant: string;
        /**
         * Mpfena_MtPlfnPourDelg
         */
        montantPlafondPourDelegation: number;
        /**
         * Ctfctc_TypeConv
         */
        typeConvention: string;
        /**
         * Nbfcae_AgeMaxiReqsParConv
         */
        ageMaximumRequisParConvention: number;
        /**
         * Nbfcai_AgeMiniReqsParConv
         */
        ageMinimumRequisParConvention: number;
        /**
         * Ctfcea_TypeDacc
         */
        typeDacc: string;
        /**
         * Cdfcdv_CodeDevs
         */
        codeDevise: string;
        /**
         * Llfcc3_LiblLongConvJurd
         */
        libelleLongConventionJuridique: string;
        /**
         * Ctfcaa_TypeDass
         */
        typeDass: string;
        /**
         * Cdfcex_CodeDergAge
         */
        codeDerogationAge: number;
        /**
         * EstExterne
         */
        estExterne: boolean;
        /**
         * EstConventionSaccef
         */
        estConventionSaccef: boolean;
        /**
         * EstConventionFEI
         */
        estConventionFEI: boolean;
        /**
         * EstConventionOSEOEtudiant
         */
        estConventionOSEOEtudiant: boolean;
        /**
         * EstConventionSIAGI
         */
        estConventionSIAGI: boolean;
        /**
         * EstConventionCFG
         */
        estConventionCFG: boolean;
        /**
         * EstAERAS
         */
        estAERAS: boolean;
        /**
         * EstCautionMutuelle
         */
        estCautionMutuelle: boolean;
        /**
         * EstCautionMutuelle_ClausesEditiquePieco
         */
        estCautionMutuelleClausesEditiquePieco: boolean;
        /**
         * EstCreditLogementInitio
         */
        estCreditLogementInitio: boolean;
        /**
         * EstCreditLogement
         */
        estCreditLogement: boolean;
        /**
         * EstInterne
         */
        estInterne: boolean;
        /**
         * EstTAEA
         */
        estTAEA: boolean;
        /**
         * EstSFGAS
         */
        estSFGAS: boolean;
        /**
         * LibCompAssr
         */
        libelleCompAssurance: string;
        /**
         * EstConfigurateurCnp
         */
        estConfigurateurCnp: boolean;
    }
    interface IScCotisationCout extends IScElement {
        /**
         * MtMinRecv
         */
        montantMinimumRecouvrement: number;
        /**
         * MtMinAccs
         */
        montantMinimumAccessoire: number;
        /**
         * MtMaxAccs
         */
        montantMaximumAccessoire: number;
        /**
         * ValrCons
         */
        valeurConsolide: number;
    }
    interface IScCotisationCoutMontantListe extends IScCotisationCout {
        /**
         * ListeValeur
         */
        listeValeur: Array<number>;
        /**
         * MontantReduit
         */
        montantReduit: number;
        /**
         * MontantMajore
         */
        montantMajore: number;
    }
    interface IScCotisationCoutMontantIntervalle extends IScCotisationCout {
        /**
         * Min
         */
        minimum: number;
        /**
         * Max
         */
        maximum: number;
        /**
         * Pas
         */
        pas: number;
        /**
         * Defaut
         */
        defaut: number;
    }
    interface IScCotisationCoutQuotiteListe extends IScCotisationCoutQuotite {
        /**
         * ListeQuotite
         */
        listeQuotite: Array<number>;
        /**
         * TauxReduit
         */
        tauxReduit: number;
        /**
         * TauxMajore
         */
        tauxMajore: number;
        /**
         * TauxNormal
         */
        tauxNormal: number;
    }
    interface IScCotisationCoutQuotiteIntervalle extends IScCotisationCoutQuotite {
        /**
         * Min
         */
        minimum: number;
        /**
         * Max
         */
        maximum: number;
        /**
         * Pas
         */
        pas: number;
        /**
         * Defaut
         */
        defaut: number;
    }
    interface IScCotisationCoutQuotite extends IScCotisationCout {
        /**
         * TypeDass
         */
        typeDass: number;
        /**
         * TxPourLesPersAgs
         */
        tauxPourLesPersonneAge: number;
        /**
         * MtMaxiAssAccs
         */
        montantMaximumAssuranceAccessoire: number;
    }
    interface IScTrancheMontant {
        /**
         * Nufctr_NumrTrch
         */
        numeroTranche: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * CotCout
         */
        cotCout: IScCotisationCout;
    }
    interface IScCotisation extends IScElement {
        /**
         * Ctfcat_SousTypeAcc
         */
        sousTypeAccessoire: string;
        /**
         * Ctfcac_TypeDaccCtfc
         */
        typeDaccCtfc: string;
        /**
         * Cdfcao_ReprsCarObgtFaclCots
         */
        repriseCarObligatoireFacultatifCotisation: number;
        /**
         * Ctfcca_ModeCalcLacc
         */
        modeCalculLacc: number;
        /**
         * Ddfcap_DateDebuDapp
         * Type date au format yyyy-MM-dd
         */
        dateDebutDapp: string;
        /**
         * Dffcap_DateFinDapp
         * Type date au format yyyy-MM-dd
         */
        dateFinDapp: string;
        /**
         * Nrfcmr_ReglDappLacc
         */
        regleDappLacc: string;
        /**
         * Nrfcda_ReglDateDebuDappLacc
         */
        regleDateDebutDappLacc: string;
        /**
         * Nrfcpa_ReglEvnmDeclr
         */
        regleEvenementDeclaration: string;
        /**
         * Pefcac_CodePerdicAppli
         */
        codePeriodiciteApplication: number;
        /**
         * Cdfceh_CodeRecvAccs
         */
        codeRecouvrementAccessoire: number;
        /**
         * Ctfcia_CodeTypeAppliAccs
         */
        codeTypeApplicationAccessoire: number;
        /**
         * Npfcap_NbPerdDappLacc
         */
        nombrePeriodeDappLacc: number;
        /**
         * Pefcap_PerdicDappLacc
         */
        periodiciteDappLacc: number;
        /**
         * Nrfcap_ReglDappAprd
         */
        regleDappAprd: string;
        /**
         * Cdfcat_CodeCalcTeg
         */
        codeCalculteg: number;
        /**
         * Cdfcrb_CodeAccsRembFinCrdt
         */
        codeAccessoireRemboursementFinCredit: boolean;
        /**
         * Cdfcap_CodeApplEchn
         */
        codeApplicationEcheance: boolean;
        /**
         * Cdfctx_CodeModeCalcTx
         */
        codeModeCalculTaux: number;
        /**
         * Nrfccr_ReglCalcLacc
         */
        regleCalculLacc: string;
        /**
         * InfosTxCots
         */
        informationTauxCotisation: Array<number>;
        /**
         * InfosMttCots
         */
        informationMontantCotisation: Array<number>;
        /**
         * Tsfcff_FrctFinnMaxiLacc
         */
        fractionFinancierMaximumLacc: number;
        /**
         * Ctfcai_CompatInstr
         */
        compatibiliteInstruction: boolean;
        /**
         * Ctfcaw_CompatAvnn
         */
        compatibiliteAvenant: boolean;
        /**
         * Ctfcfd_FinnAccCrdt
         */
        financierAccessoireCredit: boolean;
        /**
         * Cifcdb_RetrCodeIndicDerg
         */
        retardCodeIndiceDerogation: number;
        /**
         * Cifcip_CodeIntgPlanFinn
         */
        codeIntegrationPlanFinancier: number;
        /**
         * ListCoutCots
         */
        listeCoutCotisation: Array<IScCotisationCout>;
        /**
         * ListTrncMt
         */
        listeTrancheMontant: Array<IScTrancheMontant>;
    }
    interface IScCotisationPhase extends IScCotisation {
        /**
         * Ctfcfp_TypePhase
         */
        typePhase: string;
    }
    interface IScCotisationDerogation extends IScCotisation {
        /**
         * Npfcap_DureeDerogation
         */
        dureeDerogation: number;
        /**
         * Pefcap_PrdDerogation
         */
        produitDerogation: number;
        /**
         * Mtfcvp_MttMinCred
         */
        montantMinimumCredit: number;
        /**
         * Msfcvp_MttMaxCred
         */
        montantMaximumCredit: number;
        /**
         * Ctfcps_Personlsbl
         */
        personlsbl: number;
        /**
         * Nufcdo_NumDrgtn
         */
        numeroDirigeant: number;
    }
    interface IScCotisationTrancheAge extends IScCotisation {
        /**
         * Nufctr_NumrTrch
         */
        numeroTranche: number;
        /**
         * Nbfcai_DebuTrchAge
         */
        debutTrancheAge: number;
        /**
         * Nbfcae_FinTrchAge
         */
        finTrancheAge: number;
        /**
         * ListScCotisationDerogation
         */
        listeSousclasseCotisationDerogation: Array<IScCotisationDerogation>;
    }
    interface IScCotisationPeriode extends IScCotisation {
        /**
         * Nufctr_NumTrch
         */
        numeroTranche: number;
        /**
         * Npfcap_DrPrd
         */
        drProduit: number;
        /**
         * Pefcap_PrdctPrd
         */
        producteurProduit: number;
        /**
         * Npfcel_DrEtlmnt
         */
        drElement: number;
        /**
         * Pefcde_PrdctEtlmnt
         */
        producteurElement: number;
    }
    interface IScConventionAssurance extends IScConvention {
        /**
         * Nbfcai_AgeMinEntrAssr
         */
        ageMinimumEntrAssurance: number;
        /**
         * Nbfcae_AgeMaxEntrAssr
         */
        ageMaximumEntrAssurance: number;
        /**
         * Cdfcsd_CodeDestReglSins
         */
        codeDestinataireRegleSinistre: number;
        /**
         * Nufcit_NDomcBanc
         */
        nDomiciliationBancaire: string;
        /**
         * Nbfcco_AgeMaxCouvAsre
         */
        ageMaximumCouvertureAssurance: number;
        /**
         * Nbfcex_AgeMaxAsreDerg
         */
        ageMaximumAssuranceDerogation: number;
    }
    interface IScConventionGarantie extends IScConvention {
        /**
         * Cdfcng_FormGarn
         */
        formeGarantie: string;
        /**
         * Cdfcic_CasImpAutm
         */
        casImpAutomatique: number;
        /**
         * Npfcpc_DelaiInfo
         */
        delaiInformation: number;
        /**
         * Idfpga_IdntPersCouv
         */
        idPersonneCouverture: string;
        /**
         * Cdtg_CodeNatrCautSimpLimt
         */
        codeNatureCautionSimpleLimite: string;
        /**
         * Cdfcmu_ConvCautMutl
         */
        conventionCautionMutuel: number;
    }
    interface IScConvention extends IScConventionResume {
        /**
         * ListCots
         */
        listeCotisation: Array<IScCotisation>;
        /**
         * ListCdfcod_CritIdent
         */
        listeCritereId: Array<string>;
    }
    interface IListerConventionsAssuranceCompatibleRequest {
        identifiantDossier: string;
        listeIdwsCredit: Array<string>;
        assuranceDeft: boolean;
        listeIdwsPersonne: Array<string>;
    }
}

declare namespace ICRest.Modeles.ListerConventionsGarantie {
    interface IListerConventionsGarantieRequest {
        identifiantDossier: string;
        listeIdwsCredit: Array<string>;
        informationGarantie: IScInformationGarantie;
    }
    interface IScInformationGarantie {
        /**
         * Cdfcod
         */
        cdfcod: string;
        /**
         * Cdfcng
         */
        cdfcng: string;
        /**
         * LibelleLong
         */
        libelleLong: string;
        /**
         * TopGarantie
         */
        topGarantie: boolean;
    }
    interface IScElement {
    }
    interface IScConventionResume extends IScElement {
        /**
         * Idfcco_IdntConv
         */
        idConvention: string;
        /**
         * Nufcco_NumrExtnConv
         */
        numeroExterneConvention: string;
        /**
         * Idit_IdntIntv
         */
        idIntervenant: string;
        /**
         * Llfcco_LiblLongConv
         */
        libelleLongConvention: string;
        /**
         * Lcfcco_LiblCrtConv
         */
        libelleCreationConvention: string;
        /**
         * Lbfcco_CommtConv
         */
        commentaireConvention: string;
        /**
         * Lbfcc1_CommtConv
         */
        commentaireConvention1: string;
        /**
         * Cdtg_CodeNatrCaut
         */
        codeNatureCaution: string;
        /**
         * Ddfcco_DatePrsDeffConv
         * Type date au format yyyy-MM-dd
         */
        datePresenceDeffConvention: string;
        /**
         * Dffcco_DateFinDeffConv
         * Type date au format yyyy-MM-dd
         */
        dateFinDeffConvention: string;
        /**
         * Nrfcas_ReglDateDeff
         */
        regleDateDeff: string;
        /**
         * Cnfcga_ModeDexp
         */
        modeDexp: number;
        /**
         * Mpfcas_MtMinCrdtPourConv
         */
        montantMinimumCreditPourConvention: number;
        /**
         * Msfcas_MtMaxCrdtPourConv
         */
        montantMaximumCreditPourConvention: number;
        /**
         * Npfcxa_NbPerdMinCrdt
         */
        nombrePeriodeMinimumCredit: number;
        /**
         * Pefcca_PerdicDexpConv
         */
        periodiciteDexpConvention: number;
        /**
         * Npfcma_NbPerdMaxCrdt
         */
        nombrePeriodeMaximumCredit: number;
        /**
         * Tpfcga_QuotMinParBenf
         */
        quotientMinimumParBeneficiaire: number;
        /**
         * Tsfcga_QuotMaxParBenf
         */
        quotientMaximumParBeneficiaire: number;
        /**
         * Txfcga_PasQuot
         */
        pasQuotient: number;
        /**
         * Mpfcga_MtMinGarnParTete
         */
        montantMinimumGarantieParTete: number;
        /**
         * Msfcga_MtMaxGarnParTete
         */
        montantMaximumGarantieParTete: number;
        /**
         * Mxfcga_PasMtGarn
         */
        pasMontantGarantie: number;
        /**
         * Cnfcpc_NatrPrsChrg
         */
        naturePresenceCharge: number;
        /**
         * Ptfcra_PerdicRecv
         */
        periodiciteRecouvrement: number;
        /**
         * Cdfcdr_CodeDetrDateRecv
         */
        codeDetrDateRecouvrement: number;
        /**
         * Npfcre_DelaiRver
         */
        delaiRver: number;
        /**
         * Cdfccm_CodeCommIntvExt
         */
        codeCommissionIntervenantExterieur: number;
        /**
         * Ttfcas_TxCommCais
         */
        tauxCommissionCaisse: number;
        /**
         * Ctfcar_CodeTypeAsstComm
         */
        codeTypeAssietteCommission: number;
        /**
         * Cdfcrr_CodeModlReglComm
         */
        codeModeleRegleCommission: number;
        /**
         * Cdfgga_CodeTierGarn
         */
        codeTiersGarantie: number;
        /**
         * Cdfgto_CodeTypeDobjAutr
         */
        codeTypeDobjAutre: number;
        /**
         * Cnfcbo_CodeNatrBonf
         */
        codeNatureBonification: number;
        /**
         * Cdfdrg_CodeModeRegl
         */
        codeModeRegle: string;
        /**
         * Mtfcge_MtMaxEncr
         */
        montantMaximumEncours: number;
        /**
         * Npfcmp_NbPerdMaxPf
         */
        nombrePeriodeMaximumPf: number;
        /**
         * Npfcmt_NbPerdMaxDt
         */
        nombrePeriodeMaximumDt: number;
        /**
         * Npfcmd_NbPerdMaxDa
         */
        nombrePeriodeMaximumDa: number;
        /**
         * Npfcmm_NbPerdMaxAm
         */
        nombrePeriodeMaximumAm: number;
        /**
         * Cdfcoc_CodeRestt
         */
        codeRestant: string;
        /**
         * Mpfena_MtPlfnPourDelg
         */
        montantPlafondPourDelegation: number;
        /**
         * Ctfctc_TypeConv
         */
        typeConvention: string;
        /**
         * Nbfcae_AgeMaxiReqsParConv
         */
        ageMaximumRequisParConvention: number;
        /**
         * Nbfcai_AgeMiniReqsParConv
         */
        ageMinimumRequisParConvention: number;
        /**
         * Ctfcea_TypeDacc
         */
        typeDacc: string;
        /**
         * Cdfcdv_CodeDevs
         */
        codeDevise: string;
        /**
         * Llfcc3_LiblLongConvJurd
         */
        libelleLongConventionJuridique: string;
        /**
         * Ctfcaa_TypeDass
         */
        typeDass: string;
        /**
         * Cdfcex_CodeDergAge
         */
        codeDerogationAge: number;
        /**
         * EstExterne
         */
        estExterne: boolean;
        /**
         * EstConventionSaccef
         */
        estConventionSaccef: boolean;
        /**
         * EstConventionFEI
         */
        estConventionFEI: boolean;
        /**
         * EstConventionOSEOEtudiant
         */
        estConventionOSEOEtudiant: boolean;
        /**
         * EstConventionSIAGI
         */
        estConventionSIAGI: boolean;
        /**
         * EstConventionCFG
         */
        estConventionCFG: boolean;
        /**
         * EstAERAS
         */
        estAERAS: boolean;
        /**
         * EstCautionMutuelle
         */
        estCautionMutuelle: boolean;
        /**
         * EstCautionMutuelle_ClausesEditiquePieco
         */
        estCautionMutuelle_ClausesEditiquePieco: boolean;
        /**
         * EstCreditLogementInitio
         */
        estCreditLogementInitio: boolean;
        /**
         * EstCreditLogement
         */
        estCreditLogement: boolean;
        /**
         * EstInterne
         */
        estInterne: boolean;
        /**
         * EstTAEA
         */
        estTAEA: boolean;
        /**
         * EstSFGAS
         */
        estSFGAS: boolean;
        /**
         * LibCompAssr
         */
        libelleCompAssurance: string;
    }
    interface IScCotisationCout extends IScElement {
        /**
         * MtMinRecv
         */
        montantMinimumRecouvrement: number;
        /**
         * MtMinAccs
         */
        montantMinimumAccessoire: number;
        /**
         * MtMaxAccs
         */
        montantMaximumAccessoire: number;
        /**
         * ValrCons
         */
        valeurConsolide: number;
    }
    interface IScCotisationCoutMontantIntervalle extends IScCotisationCout {
        /**
         * Min
         */
        minimum: number;
        /**
         * Max
         */
        maximum: number;
        /**
         * Pas
         */
        pas: number;
        /**
         * Defaut
         */
        defaut: number;
    }
    interface IScCotisationCoutMontantListe extends IScCotisationCout {
        /**
         * ListeValeur
         */
        listeValeur: Array<number>;
        /**
         * MontantReduit
         */
        montantReduit: number;
        /**
         * MontantMajore
         */
        montantMajore: number;
    }
    interface IScCotisationCoutQuotiteIntervalle extends IScCotisationCoutQuotite {
        /**
         * Min
         */
        minimum: number;
        /**
         * Max
         */
        maximum: number;
        /**
         * Pas
         */
        pas: number;
        /**
         * Defaut
         */
        defaut: number;
    }
    interface IScCotisationCoutQuotiteListe extends IScCotisationCoutQuotite {
        /**
         * ListeQuotite
         */
        listeQuotite: Array<number>;
        /**
         * TauxReduit
         */
        tauxReduit: number;
        /**
         * TauxMajore
         */
        tauxMajore: number;
        /**
         * TauxNormal
         */
        tauxNormal: number;
    }
    interface IScCotisationCoutQuotite extends IScCotisationCout {
        /**
         * TypeDass
         */
        typeDass: number;
        /**
         * TxPourLesPersAgs
         */
        tauxPourLesPersonneAge: number;
        /**
         * MtMaxiAssAccs
         */
        montantMaximumAssuranceAccessoire: number;
    }
    interface IScTrancheMontant {
        /**
         * Nufctr_NumrTrch
         */
        numeroTranche: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * CotCout
         */
        cotCout: IScCotisationCout;
    }
    interface IScCotisation extends IScElement {
        /**
         * Ctfcat_SousTypeAcc
         */
        sousTypeAccessoire: string;
        /**
         * Ctfcac_TypeDaccCtfc
         */
        typeDaccCtfc: string;
        /**
         * Cdfcao_ReprsCarObgtFaclCots
         */
        repriseCarObligatoireFacultatifCotisation: number;
        /**
         * Ctfcca_ModeCalcLacc
         */
        modeCalculLacc: number;
        /**
         * Ddfcap_DateDebuDapp
         * Type date au format yyyy-MM-dd
         */
        dateDebutDapp: string;
        /**
         * Dffcap_DateFinDapp
         * Type date au format yyyy-MM-dd
         */
        dateFinDapp: string;
        /**
         * Nrfcmr_ReglDappLacc
         */
        regleDappLacc: string;
        /**
         * Nrfcda_ReglDateDebuDappLacc
         */
        regleDateDebutDappLacc: string;
        /**
         * Nrfcpa_ReglEvnmDeclr
         */
        regleEvenementDeclaration: string;
        /**
         * Pefcac_CodePerdicAppli
         */
        codePeriodiciteApplication: number;
        /**
         * Cdfceh_CodeRecvAccs
         */
        codeRecouvrementAccessoire: number;
        /**
         * Ctfcia_CodeTypeAppliAccs
         */
        codeTypeApplicationAccessoire: number;
        /**
         * Npfcap_NbPerdDappLacc
         */
        nombrePeriodeDappLacc: number;
        /**
         * Pefcap_PerdicDappLacc
         */
        periodiciteDappLacc: number;
        /**
         * Nrfcap_ReglDappAprd
         */
        regleDappAprd: string;
        /**
         * Cdfcat_CodeCalcTeg
         */
        codeCalculteg: number;
        /**
         * Cdfcrb_CodeAccsRembFinCrdt
         */
        codeAccessoireRemboursementFinCredit: boolean;
        /**
         * Cdfcap_CodeApplEchn
         */
        codeApplicationEcheance: boolean;
        /**
         * Cdfctx_CodeModeCalcTx
         */
        codeModeCalculTaux: number;
        /**
         * Nrfccr_ReglCalcLacc
         */
        regleCalculLacc: string;
        /**
         * InfosTxCots
         */
        informationTauxCotisation: Array<number>;
        /**
         * InfosMttCots
         */
        informationMontantCotisation: Array<number>;
        /**
         * Tsfcff_FrctFinnMaxiLacc
         */
        fractionFinancierMaximumLacc: number;
        /**
         * Ctfcai_CompatInstr
         */
        compatibiliteInstruction: boolean;
        /**
         * Ctfcaw_CompatAvnn
         */
        compatibiliteAvenant: boolean;
        /**
         * Ctfcfd_FinnAccCrdt
         */
        financierAccessoireCredit: boolean;
        /**
         * Cifcdb_RetrCodeIndicDerg
         */
        retardCodeIndiceDerogation: number;
        /**
         * Cifcip_CodeIntgPlanFinn
         */
        codeIntegrationPlanFinancier: number;
        /**
         * ListCoutCots
         */
        listeCoutCotisation: Array<IScCotisationCout>;
        /**
         * ListTrncMt
         */
        listeTrancheMontant: Array<IScTrancheMontant>;
    }
    interface IScCotisationPeriode extends IScCotisation {
        /**
         * Nufctr_NumTrch
         */
        numeroTranche: number;
        /**
         * Npfcap_DrPrd
         */
        drProduit: number;
        /**
         * Pefcap_PrdctPrd
         */
        producteurProduit: number;
        /**
         * Npfcel_DrEtlmnt
         */
        drElement: number;
        /**
         * Pefcde_PrdctEtlmnt
         */
        producteurElement: number;
    }
    interface IScCotisationDerogation extends IScCotisation {
        /**
         * Npfcap_DureeDerogation
         */
        dureeDerogation: number;
        /**
         * Pefcap_PrdDerogation
         */
        produitDerogation: number;
        /**
         * Mtfcvp_MttMinCred
         */
        montantMinimumCredit: number;
        /**
         * Msfcvp_MttMaxCred
         */
        montantMaximumCredit: number;
        /**
         * Ctfcps_Personlsbl
         */
        personlsbl: number;
        /**
         * Nufcdo_NumDrgtn
         */
        numeroDirigeant: number;
    }
    interface IScCotisationTrancheAge extends IScCotisation {
        /**
         * Nufctr_NumrTrch
         */
        numeroTranche: number;
        /**
         * Nbfcai_DebuTrchAge
         */
        debutTrancheAge: number;
        /**
         * Nbfcae_FinTrchAge
         */
        finTrancheAge: number;
        /**
         * ListScCotisationDerogation
         */
        listeSousclasseCotisationDerogation: Array<IScCotisationDerogation>;
    }
    interface IScCotisationPhase extends IScCotisation {
        /**
         * Ctfcfp_TypePhase
         */
        typePhase: string;
    }
    interface IScConvention extends IScConventionResume {
        /**
         * ListCots
         */
        listeCotisation: Array<IScCotisation>;
        /**
         * ListCdfcod_CritIdent
         */
        listeCdfcod_CritereId: Array<string>;
    }
    interface IScConventionGarantie extends IScConvention {
        /**
         * Cdfcng_FormGarn
         */
        formeGarantie: string;
        /**
         * Cdfcic_CasImpAutm
         */
        casImpAutomatique: number;
        /**
         * Npfcpc_DelaiInfo
         */
        delaiInformation: number;
        /**
         * Idfpga_IdntPersCouv
         */
        idPersonneCouverture: string;
        /**
         * Cdtg_CodeNatrCautSimpLimt
         */
        codeNatureCautionSimpleLimite: string;
        /**
         * Cdfcmu_ConvCautMutl
         */
        conventionCautionMutuel: number;
    }
}

declare namespace ICRest.Modeles.ListerDetailsPretsRea {
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IListerDetailsPretsReaRequest {
        identifiantDossier: string;
        idwsReamenagement: string;
        tsListeIdwsCreditRea: Array<string>;
        dateRA: string;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IPretReamenageLecture extends IElementLecture {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfao2_IdntDossOrig
         */
        idDossierOrigine: string;
        /**
         * Cdfcpo_CodePrdtetbl
         */
        codePrdtetbl: string;
        /**
         * Cdfars_CodeApparRes
         */
        codeApparRes: boolean;
        /**
         * Ctfars_TypeApparRes
         */
        typeApparRes: number;
        /**
         * Dtfccl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * Mefacg_MtechePerdPretRefn
         */
        mtechePeriodePretRefn: number;
        /**
         * Peface_Perdeche
         */
        perdeche: number;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Lbfcvs_LiblPrdt
         */
        libelleProduit: string;
        /**
         * Ctfals_TypeRegl
         */
        typeRegle: number;
        /**
         * Ctfmtc_TypeCred
         */
        typeCredit: number;
        /**
         * Lbfaep_NometblPret
         */
        nometblPret: string;
        /**
         * Ctfpag_CodeOrigAppliGestCred
         */
        codeOrigineApplicationGestionCredit: number;
        /**
         * Cdfidr_CodeDev
         */
        codeDev: string;
        /**
         * IdntReam
         */
        idReamenagement: string;
        /**
         * IdntInfoCompRegr
         */
        idInformationCompRegr: string;
    }
    interface IInfoRegroupementLecture extends IElementLecture {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Mkfd01_MtCrd
         */
        montantCRD: number;
        /**
         * Cifcao_OrigInfoSurMtCrd
         */
        origineInformationSurMontantCRD: number;
        /**
         * Dtfcer_DateEnvsPourRembAntc
         * Type date au format yyyy-MM-dd
         */
        dateEnvsPourRemboursementAnticipe: string;
        /**
         * Cdfara_CodeExstModlIndmRaSurCred
         */
        codeExisteModeleIndemniteRaSurCredit: number;
        /**
         * Mtfhir_MtEstmRa
         */
        montantEstmRa: number;
        /**
         * Cifca1_OrigInfoSurMtEstmIndmRa
         */
        origineInformationSurMontantEstmIndemniteRa: number;
        /**
         * Cifafr_CodeIndicFinnIndmRa
         */
        codeIndiceFinancierIndemniteRa: number;
        /**
         * Cifamp_CodeModlPrevPourRa
         */
        codeModelePrevPourRa: number;
        /**
         * Cifca2_OrigInfoSurExstPrevCont
         */
        origineInformationSurExistePrevContrat: number;
        /**
         * Npfapr_DelPrevCont
         */
        delPrevContrat: number;
        /**
         * Cifca3_OrigInfoSurDelPrevCont
         */
        origineInformationSurDelPrevContrat: number;
        /**
         * Cifagh_ExstUneGarnHypt
         */
        existeUneGarantieHypotheque: number;
        /**
         * Mtfgmt_MtFrsMainTotlUneGarnHypt
         */
        montantFrsMainTotalUneGarantieHypotheque: number;
        /**
         * Cifac4_OrigInfoSurMtFrsMainTotl
         */
        origineInformationSurMontantFrsMainTotal: number;
        /**
         * Cifafm_CodeFinnFrsMain
         */
        codeFinancierFrsMain: number;
        /**
         * Mtfaid_MtInteDusJusqFinCred
         */
        montantInterieurDusJusqFinCredit: number;
        /**
         * Ctfcaf_CodeAffecTypeObjt
         */
        codeAffectationTypeObjet: number;
        /**
         * Mefepd_MtecheHorsAccs
         */
        mtecheHorsAccessoire: number;
        /**
         * Cifca5_OrigInfoSurMtecheHorsAccs
         */
        origineInformationSurMtecheHorsAccessoire: number;
        /**
         * Trfrtx_TxRefe
         */
        tauxReference: number;
        /**
         * Cifac6_OrigInfoSurTxRefe
         */
        origineInformationSurTauxReference: number;
        /**
         * Dtfari_DateRappDonn
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateRappDonneur: string;
        /**
         * Cifac7_OrigInfoSurDateFinCred
         */
        origineInformationSurDateFinCredit: number;
        /**
         * Cifac8_OrigInfoSurMtRestDuSuurPretRach
         */
        origineInformationSurMontantRestantDuSuurPretRach: number;
        /**
         * Cifac9_OrigInfoSurTypeLoiScrvCredRach
         */
        origineInformationSurTypeLoiScrivenerCreditRach: number;
        /**
         * IdntPretReam
         */
        idPretReamenagement: string;
    }
    interface IPretReamenageableLecture extends IElementLecture {
        /**
         * InfoPret
         */
        informationPret: IPretReamenageLecture;
        /**
         * InfoRegroupement
         */
        informationRegroupement: IInfoRegroupementLecture;
    }
    interface IResultatListerPretReamenageableLecture {
        /**
         * ListAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
        /**
         * ListPretReamenageableLecture
         */
        listePretReamenageableLecture: Array<IPretReamenageableLecture>;
    }
}

declare namespace ICRest.Modeles.ListerDossier {
    interface IListerDossierRequest {
        versionWsdl: number;
        dateTraitement: string;
        codeApplication: number;
        critereDeRechercheDossier: ICriteresRechercheDossier;
        nombreDossierMaxi: number;
    }
    interface IAutorisationDossier {
        /**
         * Consultation
         */
        consultation: boolean;
        /**
         * ConsultationAvis
         */
        consultationAvis: boolean;
        /**
         * Instruction
         */
        instruction: boolean;
        /**
         * EmissionAvis
         */
        emissionAvis: boolean;
        /**
         * PassageSansSuite
         */
        passageSansSuite: boolean;
        /**
         * PriseEnCharge
         */
        priseEnCharge: boolean;
        /**
         * RetourPriseEnCharge
         */
        retourPriseEnCharge: boolean;
        /**
         * AnnulationTransfert
         */
        annulationTransfert: boolean;
        /**
         * MiseEnConformite
         */
        miseEnConformite: boolean;
        /**
         * RetourConformite
         */
        retourConformite: boolean;
        /**
         * AdminMDV
         */
        adminMDV: boolean;
        /**
         * Copie
         */
        copie: boolean;
        /**
         * Decision
         */
        decision: boolean;
        /**
         * RetourDecision
         */
        retourDecision: boolean;
        /**
         * MajAdmin
         */
        mAJAdmin: boolean;
        /**
         * Prorogation
         */
        prorogation: boolean;
        /**
         * Import
         */
        impor: boolean;
        /**
         * Duplication
         */
        duplication: boolean;
        /**
         * TransfertConformite
         */
        transfertConformite: boolean;
        /**
         * TransfertAutreBO
         */
        transfertAutreBO: boolean;
        /**
         * TransfertPropriete
         */
        transfertPropriete: boolean;
    }
    interface IDossierResume {
        /**
         * Idfadi_IdntDoss
         */
        idDossier: string;
        /**
         * VersDoss
         */
        versionDossier: number;
        /**
         * Dtfccr_DateCretDoss
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateCreationDossier: string;
        /**
         * Lbfpnm_NomRaisSoclEmpr
         */
        nomRaisonSocialeEmprunt: string;
        /**
         * Lbfaes_LiblEnttPrprDoss
         */
        libelleEntiteProprietaireDossier: string;
        /**
         * Lbfiba_LiblAgncAffec
         */
        libelleAgenceAffectation: string;
        /**
         * Cefado_CodeEttDoss
         */
        codeEtatDossier: number;
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Dmfidm_DateDernMaj
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDernierMAJ: string;
        /**
         * Cefwou_CodeEtatOuvrDoss
         */
        codeEtatOuvertureDossier: number;
        /**
         * Idfaec_IdntAgntConnDoss
         */
        idAgentConnaissanceDossier: string;
        /**
         * Ctfado_TypeDoss
         */
        typeDossier: number;
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * Cdfcke_CodeCatgEmpr
         */
        codeCategorieEmprunt: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * Idfaei_IdntAgntInstrDoss
         */
        idAgentInstructionDossier: string;
        /**
         * Lbfpen_NomPres
         */
        nomPres: string;
        /**
         * Llfcco_LiblConvPres
         */
        libelleConventionPres: string;
        /**
         * Idfas1_1erElmntStrc
         */
        premierElementStructure: string;
        /**
         * Idfas2_2eElmntStrc
         */
        deuxiemeElementStructure: string;
        /**
         * Idfas3_3eElmntStrc
         */
        troisiemeElementStructure: string;
        /**
         * Idfas4_4eElmntStrc
         */
        quatriemeElementStructure: string;
        /**
         * Idfas5_5eElmntStrc
         */
        cinquiemeElementStructure: string;
        /**
         * Idfas6_6eElmntStrc
         */
        sixiemeElementStructure: string;
        /**
         * Idfast_IdntelemStrcInstr
         */
        idElementStructureInstruction: string;
        /**
         * Lidanp_NomPatrPartc
         */
        nomPatrPartc: string;
        /**
         * Lidapp_PremPrnmEttCivlPartc
         */
        premierPrenomEtatCivilitePartc: string;
        /**
         * Dffavl_DateFinValdOffr
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateFinValiditeOffre: string;
        /**
         * NatureProjet
         */
        natureProjet: number;
        /**
         * Npfcof_NbPerdValdOffrCont
         */
        nombrePeriodeValiditeOffreContrat: number;
        /**
         * Dtfieo_DateEdtnOffr
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEditionOffre: string;
        /**
         * Cdfaod_CodeOrigDemn
         */
        codeOrigineDemande: number;
        /**
         * Dgfano_DateHorzProj
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHorizonProjet: string;
        /**
         * Cdfado_CodeVisbInstr
         */
        codeVisbInstruction: number;
        /**
         * Cdfiei_CodeImprParExprVers
         */
        codeImprParExpressionVersement: number;
        /**
         * Cdfiag_CodeAppliChrgDoss
         */
        codeApplicationChargeDossier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Ctfipi_CodePrcsInstr
         */
        codeProcessusInstruction: string;
        /**
         * Ctfitr_CodeTrtComp
         */
        codeTraitementComp: string;
        /**
         * Cefipc_CodeEttPrsChrgDoss
         */
        codeEtatPresenceChargeDossier: number;
        /**
         * Cefiac_CodeEttActvDoss
         */
        codeEtatActiviteDossier: number;
        /**
         * Ctfaen_CodeTypeEngg
         */
        codeTypeEngagement: string;
        /**
         * Idfaep_IdntEnttTitlClnt
         */
        idEntiteTitulaireClient: string;
        /**
         * Idfada_IdntAgntPourDecsConf
         */
        idAgentPourDecisionConf: string;
        /**
         * Ctfats_CodeTypeElmtStrc
         */
        codeTypeElementStructure: string;
        /**
         * Idfabp_IdntAgntBoActlChrgDoss
         */
        idAgentBoActuarielChargeDossier: string;
        /**
         * Idfabi_IdntEnttPourTrnfBo
         */
        idEntitePourTransfertBo: string;
        /**
         * Ctfabe_CodeTypeElmtStrcBo
         */
        codeTypeElementStructureBo: string;
        /**
         * Idfab1_1erElmntStrc
         */
        premierElementStructure1: string;
        /**
         * Idfab2_2eElmntStrc
         */
        deuxiemeElementStructure1: string;
        /**
         * Idfab3_3eElmntStrc
         */
        troisiemeElementStructure1: string;
        /**
         * Idfab4_4eElmntStrc
         */
        quatriemeElementStructure1: string;
        /**
         * Idfab5_5eElmntStrc
         */
        cinquiemeElementStructure1: string;
        /**
         * Idfab6_6eElmntStrc
         */
        sixiemeElementStructure1: string;
        /**
         * Idfaes_IdntAgntPrprDoss
         */
        idAgentProprietaireDossier: string;
        /**
         * Ctfcse_CodeEtpeSiml
         */
        codeEtapeSimulation: number;
        /**
         * Ctfiai_CodeAlrt
         */
        codeAlerte: number;
        /**
         * Ctfaev_CodeTypeEven
         */
        codeTypeEven: string;
        /**
         * Ctfiax_CodeAlrtEmis
         */
        codeAlerteEmis: string;
        /**
         * Nofiax_NumeAlrt
         */
        numeroAlerte: number;
        /**
         * Nofaed_NumeReltEvenDoss
         */
        numeroRelationEvenDossier: number;
        /**
         * RefrExtnAgntConn
         */
        referenceExterneAgentConnaissance: string;
        /**
         * Idfipp_IdntParnPrnc
         */
        idParentPrincipal: string;
        /**
         * Llfic1_CritRechAppli1
         */
        critereRechercheApplication1: string;
        /**
         * Llfic2_CritRechAppli2
         */
        critereRechercheApplication2: string;
        /**
         * Llfic3_CritRechAppli3
         */
        critereRechercheApplication3: string;
        /**
         * Llfic4_CritRechAppli4
         */
        critereRechercheApplication4: string;
        /**
         * Llfic5_CritRechAppli5
         */
        critereRechercheApplication5: string;
        /**
         * ActionsAutorisees
         */
        actionsAutorisees: IAutorisationDossier;
    }
    interface ICriteresRechercheDossier {
        /**
         * Idfaes_IdntAgntPrprDoss
         */
        idAgentProprietaireDossier: string;
        /**
         * Idfas1_1erElmntStrc
         */
        premierElementStructure: string;
        /**
         * Idfas2_2eElmntStrc
         */
        deuxiemeElementStructure: string;
        /**
         * Idfas3_3eElmntStrc
         */
        troisiemeElementStructure: string;
        /**
         * Idfas4_4eElmntStrc
         */
        quatriemeElementStructure: string;
        /**
         * Idfas5_5eElmntStrc
         */
        cinquiemeElementStructure: string;
        /**
         * Idfas6_6eElmntStrc
         */
        sixiemeElementStructure: string;
        /**
         * Cefado_CodeEttDoss
         */
        codeEtatDossier: number;
        /**
         * Cefadd_CodeTypeDest
         */
        codeTypeDestinataire: number;
        /**
         * Idfadi_IdntDoss
         */
        idDossier: string;
        /**
         * Lbfpnm_NomRaisSoclEmpr
         */
        nomRaisonSocialeEmprunt: string;
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Nufadn_RefeExtnDoss
         */
        referenceExterneDossier: string;
        /**
         * Idfaep_IdntEnttTitlClnt
         */
        idEntiteTitulaireClient: string;
        /**
         * Ddpe_DateDebuPerd
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDebutPeriode: string;
        /**
         * Dfpe_DateFinPerd
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateFinPeriode: string;
        /**
         * Ddpe1_DateDebuPerd
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDebutPeriode1: string;
        /**
         * Dfpe1_DateFinPerd
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateFinPeriode1: string;
        /**
         * Lbfpen_NomPres
         */
        nomPres: string;
        /**
         * Ddfino_DateDebuPerdSignNotr
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDebutPeriodeSigneNotaire: string;
        /**
         * Dffino_DateFinPerdSignNotr
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateFinPeriodeSigneNotaire: string;
        /**
         * Cdfado_CodeVisbInstr
         */
        codeVisbInstruction: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Ctfipi_CodePrcsInstr
         */
        codeProcessusInstruction: string;
        /**
         * Ctfitr_CodeTrtComp
         */
        codeTraitementComp: string;
        /**
         * Cdfaod_CodeOrigDemn
         */
        codeOrigineDemande: number;
        /**
         * Cdfiag_CodeAppliChrgDoss
         */
        codeApplicationChargeDossier: number;
        /**
         * Cdfiei_CodeImprParExprVers
         */
        codeImprParExpressionVersement: number;
        /**
         * Ctfcse_CodeEtpeSiml
         */
        codeEtapeSimulation: number;
        /**
         * Idfipp_IdntParnPrnc
         */
        idParentPrincipal: string;
        /**
         * Llfic1_CritRechAppli1
         */
        critereRechercheApplication1: string;
        /**
         * Llfic2_CritRechAppli2
         */
        critereRechercheApplication2: string;
        /**
         * Llfic3_CritRechAppli3
         */
        critereRechercheApplication3: string;
        /**
         * Llfic4_CritRechAppli4
         */
        critereRechercheApplication4: string;
        /**
         * Llfic5_CritRechAppli5
         */
        critereRechercheApplication5: string;
        /**
         * Idfadi_SuiteDoss
         */
        suiteDossier: string;
        /**
         * Cdfcsh_TypSgnDC
         */
        typeSgnDC: number;
        /**
         * EtatSgnElecDC
         */
        etatSgnElecDC: string;
        /**
         * Cdfcsg_TypSgn
         */
        typeSgn: number;
        /**
         * EtatSgnElec
         */
        etatSgnElec: string;
        /**
         * bNouveauSuivi
         */
        nouveauSuivi: boolean;
        /**
         * bSansSuite
         */
        sansSuite: boolean;
        /**
         * iOnglet
         */
        onglet: number;
        /**
         * bPourPriseEnChargeBO
         */
        pourPriseEnChargeBO: boolean;
        /**
         * bPourMoi
         */
        pourMoi: boolean;
        /**
         * bPourEds
         */
        pourEDS: boolean;
        /**
         * CritereFiltreParCodeAppliChr
         */
        critereFiltreParCodeApplicationChr: number;
        /**
         * FiltreCodeApplicationEnCharge
         */
        filtreCodeApplicationEnCharge: Array<string>;
    }
}

declare namespace ICRest.Modeles.ListerDrotisAPretEL {
    interface IDroitAPretELLecture {
        /**
         * Duree
         */
        duree: number;
        /**
         * TauxMoyen
         */
        tauxMoyen: number;
        /**
         * PretMaximum
         */
        pretMaximum: number;
        /**
         * EchHorsAcc
         */
        echHorsAccessoire: number;
        /**
         * EchAvecAcc
         */
        echAvecAccessoire: number;
        /**
         * CoutHorsAcc
         */
        coutHorsAccessoire: number;
        /**
         * CoutAvecAcc
         */
        coutAvecAccessoire: number;
    }
    interface IListerDroitsAPretELRequest {
        identifiantDossier: string;
        idwsCredit: string;
        periodicite: string;
    }
}

declare namespace ICRest.Modeles.ListerDroitsAcquisEL {
    interface ICritereAjustementCreditLecture {
        /**
         * MontantPret
         */
        montantPret: number;
        /**
         * MontantEcheance
         */
        montantEcheance: number;
        /**
         * DureeCredit
         */
        dureeCredit: number;
        /**
         * AlertePrime
         */
        alertePrime: boolean;
        /**
         * TexteAlertePrime
         */
        texteAlertePrime: string;
        /**
         * TauxActuariel
         */
        tauxActuariel: number;
        /**
         * MontantRAF
         */
        montantRAF: number;
    }
    interface IResultatCalculELLecture {
        /**
         * CritereAjustementCreditLecture
         */
        critereAjustementCreditLecture: ICritereAjustementCreditLecture;
        /**
         * ListeDroitAcquisELLecture
         */
        listeDroitAcquisELLecture: Array<IDroitAcquisELLecture>;
    }
    interface IListerDroitsAcquisELRequest {
        identifiantDossier: string;
        idwCredit: string;
        periodicite: string;
    }
    interface IDroitAcquisELLecture {
        /**
         * Idfadi_IdDossier
         */
        idDossier: string;
        /**
         * Nufpct_IdContrat
         */
        idContrat: string;
        /**
         * Nofpdp_NumRelatifDossier
         */
        numeroRelatifDossier: number;
        /**
         * IdwsTrancheEL
         */
        idwsTrancheEL: string;
        /**
         * Ddfpct_DateOuvertureContrat
         */
        dateOuvertureContrat: string;
        /**
         * Txfpep_TauxEpargne
         */
        tauxEpargne: number;
        /**
         * Mtfaac_MontantDroitsAcquis
         */
        montantDroitsAcquis: number;
        /**
         * Dtfpae_DateArrete
         */
        dateArrete: string;
        /**
         * Ctfpli_LienParenteAvecCedant
         */
        lienParenteAvecCedant: string;
        /**
         * Cdfadv
         */
        cdfadv: string;
        /**
         * Mtfadu_MtDroitsAcquisUtilises
         */
        montantDroitsAcquisUtilises: number;
        /**
         * Txftpr_TauxPretCatalogue
         */
        tauxPretCatalogue: number;
        /**
         * Mkfmax_CapMaxOct
         */
        capMaximumOct: number;
        /**
         * Mtfaoc_MtPretOctroye
         */
        montantPretOctroye: number;
        /**
         * Mtfmax_EchMaxOct
         */
        echMaximumOct: number;
        /**
         * Mtfape_MtEchUtilise
         */
        montantEchUtilise: number;
        /**
         * Mtfali_MtLimite
         */
        montantLimite: number;
        /**
         * DroitUtilisable
         */
        droitUtilisable: boolean;
        /**
         * PriseEnCompte
         */
        priseEnCompte: string;
        /**
         * ContratPostReforme
         */
        contratPosteReforme: boolean;
    }
}

declare namespace ICRest.Modeles.IListerGammesLissage {
    interface IListerGammesLissAutoRequest {
        identifiantDossier: string;
        identifiantProjet: string;
        codeDevise: string;
    }
    interface IGammeLissage {
        /**
         * IdntGammLiss
         */
        idGammeLissage: string;
        /**
         * LiblGammLiss
         */
        libelleGammeLissage: string;
        /**
         * NbPhasAmrtMin
         */
        nombrePhaseAmortissementMinimum: number;
        /**
         * NbPhasAmrtMax
         */
        nombrePhaseAmortissementMaximum: number;
        /**
         * IdntPremPrdtGamm
         */
        idPremierProduitGamme: string;
    }
}

declare namespace ICRest.Modeles.ListerInformationGarantie {
    interface IScInformationGarantie {
        /**
         * Cdfcod
         */
        cdfcod: string;
        /**
         * Cdfcng
         */
        cdfcng: string;
        /**
         * LibelleLong
         */
        libelleLong: string;
        /**
         * TopGarantie
         */
        topGarantie: boolean;
    }
    interface IListerInformationGarantieRequest {
        identifiantDossier: string;
        listeIdwsCredit: Array<string>;
        conseille: boolean;
    }
}

declare namespace ICRest.Modeles.listermodtierstyprol {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScModalitesTiersParTypeDeRole extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Idfpti_IdentifiantTiers
         */
        identifiantTiers: string;
        /**
         * Ctfprp_TypeRolePers
         */
        typeRolePersonne: string;
        /**
         * Lbfpa1_Intitule
         */
        intitule: string;
        /**
         * Lbfpa2_AdresseLigne3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdresseLigne4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePostal
         */
        codePostal: string;
        /**
         * Lbfpa5_Localite
         */
        localite: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        codeRole: string;
        intitule: string;
        codePostal: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.Modeles.listerModTypeDeRoleTiersParAcces {
    interface IAnyType {
    }
    interface IScCriteresAcces {
        /**
         * RubriquesFiltre
         */
        rubriquesFiltre: Array<string>;
        /**
         * ValeursFiltre
         */
        valeursFiltre: Array<IAnyType>;
        /**
         * RubriquesTri
         */
        rubriquesTri: Array<string>;
        /**
         * ValeurTri
         */
        valeurTri: string;
    }
    interface IScElement {
    }
    interface IScModalitesTypeDeRoleTiersParAccessoire extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Ctfcat_CodeSsTAccsCompl
         */
        codeSousTAccessoireComplement: string;
        /**
         * Ctfprp_TypeRolePers
         */
        typeRolePersonne: string;
        /**
         * Lbfprp_RoleLint
         */
        roleLint: string;
    }
    interface ICriteresFiltreRequest {
        versionWsdl: number;
        dateDeTraitement: string;
        codeSousTypeAccessoire: string;
        criteresAccess: IScCriteresAcces;
    }
}

declare namespace ICRest.Modeles.ListerPersonnes {
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IRelationEntrePersonnesLecture extends IElementLecture {
        /**
         * Cnfcrp_CodeNatureRelation
         */
        codeNatureRelation: string;
        /**
         * IdntPers1
         */
        idPersonne1: string;
        /**
         * IdntPers2
         */
        idPersonne2: string;
    }
    interface IPersonneMoraleLecture extends IPersonneLecture {
        /**
         * Nufpin_NumeInsee
         */
        numeroINSEE: string;
        /**
         * Dtfpir_DateInscRcs
         * Type date au format yyyy-MM-dd
         */
        dateInscRcs: string;
        /**
         * Dtfpcs_DateCretSoce
         * Type date au format yyyy-MM-dd
         */
        dateCreationSoce: string;
        /**
         * Mcfpch_ChffAffrHtExrcPrec
         */
        chiffreAffrHtExrcPrec: number;
        /**
         * Nbfpsa_NbSalr
         */
        nombreSalr: number;
        /**
         * Cdfpfj_FormJurd
         */
        formeJuridique: string;
        /**
         * Lbfpfj_LiblFormJurd
         */
        libelleFormeJuridique: string;
        /**
         * Cdfpdp_TypeDrtPersMorl
         */
        typeDroitPersonneMorl: number;
        /**
         * Mkfpca_MtCapt
         */
        montantCapital: number;
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
        /**
         * ListRolePersPhys
         */
        listeRolePersonnePhys: Array<string>;
    }
    interface IEtatDossierAssuranceLecture {
        /**
         * LibelleEtat
         */
        libelleEtat: string;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * LibelleDemande
         */
        libelleDemande: string;
        /**
         * LibelleDateEnvoi
         */
        libelleDateEnvoi: string;
    }
    interface IDecisionDossierAssuranceLecture {
        /**
         * AccesLectureDecision
         */
        accessoireLectureDecision: boolean;
        /**
         * AvisValide
         */
        avisValide: boolean;
        /**
         * CodeDecision
         */
        codeDecision: number;
        /**
         * LibelleCredit
         */
        libelleCredit: string;
        /**
         * LibelleAvis
         */
        libelleAvis: string;
        /**
         * LibelleErreur
         */
        libelleErreur: string;
    }
    interface IDossierAssuranceLecture {
        /**
         * EtatDossierAssurance
         */
        etatDossierAssurance: IEtatDossierAssuranceLecture;
        /**
         * DecisionDossierAssurance
         */
        decisionDossierAssurance: IDecisionDossierAssuranceLecture;
    }
    interface IListePersonnesRequest {
        identifiantDossier: string;
        dateNaissance: string;
        prenom: string;
        numeroCompte: string;
        numeroCarteBancaire: string;
        identifiantPersonne: string;
        rolePersonne: string;
        typePersonne: number;
        nom: string;
        numeroSiren: string;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IPersonnePhysiqueLecture extends IPersonneLecture {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpci_LiblTitrCivl
         */
        libelleTitreCivilite: string;
        /**
         * Lbfppn_Prnm
         */
        prenom: string;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Lbfpnj_NomJeunFill
         */
        nomJeunFill: string;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNais: string;
        /**
         * Lbfpna_LieuNais
         */
        lieuNais: string;
        /**
         * Cdfpce_CodePersCe
         */
        codePersonneCE: number;
        /**
         * Cdfprm_CodeRegmMatr
         */
        codeRegimeMatrimonial: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Lbfpsf_LibelleSittFaml
         */
        libelleSituationFamille: string;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpsp_CateSoc
         */
        cateInteret: string;
        /**
         * Lbfmfc_LiblCatSocioPro
         */
        libelleCatSocioPro: string;
        /**
         * Dtfpma_DateEfftSittFaml
         * Type date au format yyyy-MM-dd
         */
        dateEffetSituationFamille: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmlo_CodeModeLogm
         */
        codeModeLogement: number;
        /**
         * Lbfmlo_LibelleModeLogm
         */
        libelleModeLogement: string;
        /**
         * Dtfmlo_DateEntrLogm
         * Type date au format yyyy-MM-dd
         */
        dateEntrLogement: string;
        /**
         * Cdfmju_CodeCapcJurd
         */
        codeCapcJuridique: number;
        /**
         * LibelleCapaciteJurd
         */
        libelle_CapaciteJuridique: string;
        /**
         * Ctfccj_CodeTypeCapJurd
         */
        codeTypeCapJuridique: string;
        /**
         * Cdfmnt_CodeNatn
         */
        codeNational: number;
        /**
         * LibelleNationalite
         */
        libelle_Nationalite: string;
        /**
         * Cdfmtd_CodeSaisAvisTierDtnr
         */
        codeSaisieAvisTiersDtnr: number;
        /**
         * Cdfmcx_CodeCtx
         */
        codeContentieuxHorsComptCE: number;
        /**
         * Mtfmes_MtEncrSaccefHorsOprt
         */
        montantEncoursSaccefHorsOprt: number;
        /**
         * Cdfmtr_TypeTrspUtls
         */
        typeTrspUtilisation: number;
        /**
         * Cdfmge_CodeGeotAdrsDomc
         */
        codeGeotAdresseDomiciliation: string;
        /**
         * Cdfppb_CodePaysResdEmpr
         */
        codePaysResdEmprunt: string;
        /**
         * Cdfopb_CodePaysLocsEmpr
         */
        codePaysLocalisationEmprunt: string;
        /**
         * Cdfkpa_CodePrflEmpr
         */
        codeProfilEmprunt: number;
        /**
         * Cofcpn_CodePstlLieuNais
         */
        codePstlLieuNais: string;
        /**
         * DossierAssurance
         */
        dossierAssurance: IDossierAssuranceLecture;
        /**
         * IdntActv
         */
        idActivite: string;
        /**
         * IdntIntdBanc
         */
        idIntdBancaire: string;
        /**
         * ListIdntOpps
         */
        listeIdOpps: Array<string>;
        /**
         * Lbfce1_LbAdrEPS1
         */
        libelleAdresseEPS1: string;
        /**
         * Lbfce2_LbAdrEPS2
         */
        libelleAdresseEPS2: string;
        /**
         * Lbfce3_LbAdrEPS3
         */
        libelleAdresseEPS3: string;
        /**
         * Lbfce4_LbAdrEPS4
         */
        libelleAdresseEPS4: string;
        /**
         * Lbfce5_LbAdrEPS5
         */
        libelleAdresseEPS5: string;
        /**
         * Codaac_CatSocioPro
         */
        categorieSocioProfessionnelle: string;
        /**
         * Irdqsn_NumSirenEnt
         */
        numeroSirenEntreprise: string;
        /**
         * Lbfprm_LbRegMat
         */
        libelleRegimeMatrimonial: string;
        /**
         * Llfco1_LbClsRegMat
         */
        libelleClauseRegimeMatrimonial: string;
        /**
         * IdntEntrepreneurIndiv
         */
        idEntrepreneurIndiv: string;
        /**
         * IdntSignataire
         */
        idSignataire: string;
    }
    interface IPersonneLecture extends IElementLecture {
        /**
         * Cdfprs_CrteResd
         */
        crteResd: number;
        /**
         * LiblResidence
         */
        libelleResidence: string;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_CateTypeAdmnBafi
         */
        cateTypeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Idfpbd_CleBdf
         */
        cleBDF: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Dtfper_DateEntrReltAvecCons
         * Type date au format yyyy-MM-dd
         */
        dateEntrRelationAvecConsolide: string;
        /**
         * Cdfptp_CodeTypePers
         */
        codeTypePersonne: number;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Cdfpap_CodeAssmPartc
         */
        codeAssmPartc: number;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
        /**
         * Lbfpen_EnsgComm
         */
        ensgCommission: string;
        /**
         * Lbfpir_LieuInscRC
         */
        lieuInscRC: string;
        /**
         * Nufpir_NumeInscRC
         */
        numeroInscRC: string;
        /**
         * Ctfprp_RolsPersPourDoss
         */
        rolsPersonnePourDossier: Array<string>;
        /**
         * PersEstAssr
         */
        personneEstAssurance: boolean;
        /**
         * Nofpem_NumeOrdrPersEmpr
         */
        numeroOrdrePersonneEmprunt: number;
        /**
         * Ctfipe_CodeTypeBasePers
         */
        codeTypeBasePersonne: number;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Hefcsd_DateSignDmdeCred
         * Type date au format yyyy-MM-dd
         */
        dateSigneDmdeCredit: string;
        /**
         * Hefcso_DateSignOffre
         * Type date au format yyyy-MM-dd
         */
        dateSigneOffre: string;
        /**
         * ReltnEntrPers
         */
        reltnEntrPersonne: Array<IRelationEntrePersonnesLecture>;
        /**
         * ListIdntRess
         */
        listeIdRessource: Array<string>;
        /**
         * ListIdntChrg
         */
        listeIdCharge: Array<string>;
        /**
         * ListIdntCpte
         */
        listeIdCompte: Array<string>;
        /**
         * ListIdntFamlEprg
         */
        listeIdFamilleEpargne: Array<string>;
        /**
         * IdntFicheContact
         */
        idFicheContact: string;
    }
}

declare namespace ICRest.Modeles.ListerPretsRea {
    interface IListerPretsReaRequest {
        identifiantDossier: string;
        idwsReamenagement: string;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IPretReamenageLecture extends IElementLecture {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfao2_IdntDossOrig
         */
        idDossierOrigine: string;
        /**
         * Cdfcpo_CodePrdtetbl
         */
        codePrdtetbl: string;
        /**
         * Cdfars_CodeApparRes
         */
        codeApparRes: boolean;
        /**
         * Ctfars_TypeApparRes
         */
        typeApparRes: number;
        /**
         * Dtfccl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * Mefacg_MtechePerdPretRefn
         */
        mtechePeriodePretRefn: number;
        /**
         * Peface_Perdeche
         */
        perdeche: number;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Lbfcvs_LiblPrdt
         */
        libelleProduit: string;
        /**
         * Ctfals_TypeRegl
         */
        typeRegle: number;
        /**
         * Ctfmtc_TypeCred
         */
        typeCredit: number;
        /**
         * Lbfaep_NometblPret
         */
        nometblPret: string;
        /**
         * Ctfpag_CodeOrigAppliGestCred
         */
        codeOrigineApplicationGestionCredit: number;
        /**
         * Cdfidr_CodeDev
         */
        codeDev: string;
        /**
         * IdntReam
         */
        idReamenagement: string;
        /**
         * IdntInfoCompRegr
         */
        idInformationCompRegr: string;
    }
    interface IResultatListerPretReamenageLecture {
        /**
         * ListAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
        /**
         * ListPretReamenageLecture
         */
        listePretReamenageLecture: Array<IPretReamenageLecture>;
    }
}

declare namespace ICRest.Modeles.ListerProdEtFamAuto {
    interface IListerProdEtFamAutoRequest {
        identifiantDossier: string;
        idwsProjet: string;
        idwsPlanFinancement: string;
        codeProduit: string;
        codeDevise: string;
        estProduitLissage: boolean;
        estOptimAtrCredit: boolean;
    }
    interface IScElement {
    }
    interface IScProduitsAutorises extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Mtfcvp_MtMiniCrdt
         */
        montantMinimumCredit: number;
        /**
         * Msfcvp_MtMaxiCrdt
         */
        montantMaximumCredit: number;
        /**
         * Npfcfi_DurCrdt
         */
        dureeCredit: number;
        /**
         * Npfcf1_DurCrdt
         */
        dureeCredit1: number;
        /**
         * Txfcfa_QuotFinnAutr
         */
        quotientFinancierAutre: number;
        /**
         * Nbfcph_NbPhasAmrt
         */
        nombrePhaseAmortissement: number;
        /**
         * Cdfctt_CodePossDiffTotl
         */
        codePossibiliteDiffereTotal: number;
        /**
         * Cdfcdi_CdPossDiffAmrt
         */
        codePossibiliteDiffereAmortissement: number;
        /**
         * Cdfcrl_CodeCrdtRels
         */
        codeCreditRelease: number;
        /**
         * Cdfctd_CodeTxCrdtDir
         */
        codeTauxCreditDirecteur: number;
        /**
         * Cifctt_IndicTypeTx
         */
        indiceTypeTaux: number;
        /**
         * Cifccm_IndicCrdtModl
         */
        indiceCreditModele: number;
        /**
         * Cifcpl_IndicPrdtLiss
         */
        indiceProduitLissage: number;
        /**
         * Cifcpc_IndicPrdtCompl
         */
        indiceProduitComplement: number;
        /**
         * Idficl_CleRech
         */
        cleRecherche: string;
        /**
         * Ctfct0_CodeTypeTrchPret0
         */
        codeTypeTranchePret0: string;
        /**
         * Cdfacc_IndicCpte
         */
        indiceCompte: number;
        /**
         * Cdfcce_CodeEnggCnsol
         */
        codeEngagementConsolide: number;
        /**
         * Cdfcbp_CodePrdtRestt
         */
        codeProduitRestant: string;
        /**
         * Dffcap_DateFinValdPrdt
         * Type date au format yyyy-MM-dd
         */
        dateFinValiditeProduit: string;
        /**
         * bActif
         */
        actif: boolean;
        /**
         * Cdfcfc_CodeFamlCtrl
         */
        codeFamilleControle: string;
    }
    interface IScFamillesDeProduits extends IScElement {
        /**
         * Cdfcke_CodeCatgEmpr
         */
        codeCategorieEmprunt: string;
        /**
         * Cdfcni_TypeObjtFinnGarn
         */
        typeObjetFinancierGarantie: string;
        /**
         * Cdfctp_CodeStrcInstr
         */
        codeStructureInstruction: string;
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Lbfcpo_LiblLongFamlPrdt
         */
        libelleLongFamilleProduit: string;
        /**
         * ListeProduits
         */
        listeProduits: Array<IScProduitsAutorises>;
    }
}

declare namespace ICRest.Modeles.ListerRepriseDossier {
    interface IEntreeRepriseDossier {
        /**
         * iVersionWsdl
         */
        versionWsdl: number;
        /**
         * Dtfisy_DateTraitement
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Idfadi_IdDossierInstruction
         */
        idDossierInstruction: string;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IRepriseDossierLecture {
        /**
         * Idfadi_IdDossierInstruction
         */
        idDossierInstruction: string;
        /**
         * EtatOuvDossierCentral
         */
        etatOuvertureDossierCentral: number;
        /**
         * SauvegardeLocale
         */
        sauvegardeLocale: number;
        /**
         * SauvegardeLocaleValide
         */
        sauvegardeLocaleValide: number;
        /**
         * ListAnomaliesLecture
         */
        listeAnomaliesLecture: Array<IAnomalieLecture>;
    }
    interface IResultatListerRepriseDossier {
        /**
         * ListRepriseDossierLecture
         */
        listeRepriseDossierLecture: Array<IRepriseDossierLecture>;
        /**
         * ListAnomaliesLecture
         */
        listeAnomaliesLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.ListerSynthese {
    interface IEntreeSynthese {
        /**
         * IdntDoss
         */
        idDossier: string;
    }
    interface INoeudSynthese {
        /**
         * Ordre
         */
        ordre: number;
        /**
         * Actif
         */
        actif: boolean;
        /**
         * Gras
         */
        gras: boolean;
        /**
         * Id
         */
        id: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Ouvert
         */
        ouvert: boolean;
        /**
         * Parent
         */
        parent: string;
        /**
         * Selectable
         */
        selectable: boolean;
    }
    interface IRetourSynthese {
        /**
         * ListNoeudSynthese
         */
        listeNoeudSynthese: Array<INoeudSynthese>;
        /**
         * ListNoeudAlerte
         */
        listeNoeudAlerte: Array<INoeudSynthese>;
    }
}

declare namespace ICRest.Modeles.MajAccessoireComp {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IAccessoireMaj extends IElementMaj {
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Txfipf_PartFinnAccs
         */
        partFinancierAccessoire: number;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Ddfaaa_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffaaa_DateFinEfft
         * Type date au format yyyy-MM-dd
         */
        dateFinEffet: string;
    }
    interface IAccessoireComplementaireMaj extends IAccessoireMaj {
        /**
         * Cnfcoi_CodeNatrOrigAccs
         */
        codeNatureOrigineAccessoire: number;
    }
    interface IMiseAJourAccessoireComplementaireRequest {
        identifiantDossier: string;
        idwsCredit: string;
        accessoireComplementaireMaj: IAccessoireComplementaireMaj;
        montant: number;
        taux: number;
        nombrePaiement: number;
        tsIdwsCreditPhase: Array<string>;
    }
}

declare namespace ICRest.Modeles.MajAccessoireLieProd {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IAccessoireMaj extends IElementMaj {
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Txfipf_PartFinnAccs
         */
        partFinancierAccessoire: number;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Ddfaaa_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffaaa_DateFinEfft
         * Type date au format yyyy-MM-dd
         */
        dateFinEffet: string;
    }
    interface IAccessoireLieProduitMaj extends IAccessoireMaj {
    }
    interface IMiseAJourAccessoireLieProduitRequest {
        identifiantDossier: string;
        idwsCredit: string;
        accessoireLieProduitMaj: IAccessoireLieProduitMaj;
        montant: number;
        taux: number;
        nombrePaiement: number;
        tsIdwsCreditPhase: Array<string>;
    }
}

declare namespace ICRest.Modeles.MajElement {
    type IAnyType = any;
    interface IMiseAJourElementRequest {
        identifiantDossier: string;
        elementMiseAJour: IElementMaj;
        pourLeCompteDe: string;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IMarcheEPSMaj extends IElementMaj {
        /**
         * Ctfcme_CodeTypeMarche
         */
        codeTypeMarche: string;
        /**
         * Idfcmb_IdMarche
         */
        idMarche: string;
        /**
         * Idfcmp_IdTiersMarcePrinc
         */
        idTiersMarcePrinc: string;
        /**
         * Lbfcmo_LibMoeMarchePrinc
         */
        libelleMoeMarchePrinc: string;
        /**
         * Lbfcom_LibelleObjetMarche
         */
        libelleObjetMarche: string;
        /**
         * Mtfcmd_MontantMarche
         */
        montantMarche: number;
        /**
         * Dtfcma_DateSignMarche
         * Type date au format yyyy-MM-dd
         */
        dateSigneMarche: string;
        /**
         * Dffcme_DateFinMarche
         * Type date au format yyyy-MM-dd
         */
        dateFinMarche: string;
        /**
         * Lnfagr_NomGroupMarche
         */
        nomGroupMarche: string;
        /**
         * Lbfctr_LibLieuExecTravaux
         */
        libelleLieuExecTravaux: string;
        /**
         * Nxfctr_NumTranMarche
         */
        numeroTranMarche: string;
        /**
         * Nxfclo_NumLotMarche
         */
        numeroLotMarche: string;
        /**
         * Idfamp_refCautionPrincipale
         */
        refCautionPrincipale: string;
        /**
         * Dtfcmp_dateEmisCautionPrinc
         * Type date au format yyyy-MM-dd
         */
        dateEmisCautionPrinc: string;
        /**
         * Mtfccp_montantCautionPrinc
         */
        montantCautionPrinc: number;
        /**
         * Cdfadv_codeDevise
         */
        codeDevise: string;
    }
    interface IButLocatifMaj extends IElementMaj {
        /**
         * Cdfopl_IndicPretTrnsLocf
         */
        indicePretTransfertLocf: boolean;
        /**
         * Nufofg_NumeDecsFavrGlbl
         */
        numeroDecisionFavrGlbl: number;
        /**
         * Dtfodf_DateDecsFavrLoct
         * Type date au format yyyy-MM-dd
         */
        dateDecisionFavrLoct: string;
        /**
         * Cdfofg_IndicDecsGlblFavr
         */
        indiceDecisionGlblFavr: boolean;
        /**
         * Dtfocl_DateConvLoct
         * Type date au format yyyy-MM-dd
         */
        dateConventionLoct: string;
        /**
         * Cdfofi_NatrAvtgFisc
         */
        natureAvantageFiscal: string;
        /**
         * Mtfofi_MtAvtgFisc
         */
        montantAvantageFiscal: number;
        /**
         * Mtfogl_MtFrsAnnlGestLogm
         */
        montantFrsAnnulationGestionLogement: number;
        /**
         * Mtfoel_MtFrsAnnlEntnLogm
         */
        montantFrsAnnulationEntnLogement: number;
        /**
         * Mtfofo_MtTaxeFonc
         */
        montantTaxeFonc: number;
        /**
         * Cdfolg_PresServVacnLogm
         */
        presServiceVacnLogement: boolean;
        /**
         * Cdfoli_PresUneAssrLoyeImpe
         */
        presUneAssuranceLoyeImpe: boolean;
        /**
         * Mtfolp_MtAnnuLoyePerc
         */
        montantAnnuLoyePerc: number;
    }
    interface ISoulteFinanceeMaj extends IElementMaj {
        /**
         * Mtfoac_MtSoul
         */
        montantSoul: number;
        /**
         * Ctfmpt_PermDetrSiSoulFaitSuiteDivo
         */
        permDetrSiSoulFaitSuiteDivo: boolean;
        /**
         * Txfapo_PctPrprOrig
         */
        pourcentageProprietaireOrigine: number;
        /**
         * Mtfmvc_ValrActvCorrValrBienOrig
         */
        valeurActiviteCorrValeurBienOrigine: number;
        /**
         * Nbfosh_SurfHabtBienSous
         */
        surfHabitationBienSous: number;
        /**
         * Dtfoac_DateAcqsBienSous
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBienSous: string;
    }
    interface IBatimentHabitableFinanceMaj extends IElementMaj {
        /**
         * Nbfosh_SurfHabtCreeParConst
         */
        surfHabitationCreeParConstruction: number;
        /**
         * Nbfosa_SurfAnnx
         */
        surfAnnx: number;
        /**
         * Mtfoac_CoutAcqsBatmHabt
         */
        coutAcqsBatimentHabitation: number;
        /**
         * Ctfopm_CodePrixMarcBale2
         */
        codePrixMarcheBale2: number;
        /**
         * Mtfomf_MtMoblFinn
         */
        montantMoblFinancier: number;
        /**
         * Mtfcfn_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * Dtfaoc_DateAcqsBatmHabt
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBatimentHabitation: string;
        /**
         * Dtfoco_DateConstBatmHabt
         * Type date au format yyyy-MM-dd
         */
        dateConstructionBatimentHabitation: string;
        /**
         * Mtfotv_MtTvaFinnARemb
         */
        montantTVAFinancierARemboursement: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * Nbfolo_NbLogmConst
         */
        nombreLogementConstruction: number;
        /**
         * Nbfwpp_NbPiecPrncConst
         */
        nombrePiecePrincipalConstruction: number;
        /**
         * Ctfmoi_TypeLogm
         */
        typeLogement1: number;
    }
    interface IConstructionFinanceeMaj extends IElementMaj {
        /**
         * Mtfoco_CoutConstFinn
         */
        coutConstructionFinancier: number;
        /**
         * Dtfoac_DateDebtConst
         * Type date au format yyyy-MM-dd
         */
        dateDebutConstruction: string;
        /**
         * Dffotr_DateFinConst
         * Type date au format yyyy-MM-dd
         */
        dateFinConstruction: string;
        /**
         * Mtfotm_CoutTrvxAChrgMoa
         */
        coutTravauxAChargeMoa: number;
        /**
         * Mtfotv_MtTvaFinnARemb
         */
        montantTVAFinancierARemboursement: number;
        /**
         * Ctfmcc_TypeContConst
         */
        typeContratConstruction: number;
        /**
         * Cdfwti_TypeImeu
         */
        typeImeu: number;
        /**
         * Cdfoga_PresUneGarnAcheTrvx
         */
        presUneGarantieAcheTravaux: number;
        /**
         * Nbfosh_SurfHabtCreeParConst
         */
        surfHabitationCreeParConstruction: number;
        /**
         * Nbfosa_SurfAnnx
         */
        surfAnnx: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * Nbfolo_NbLogmConst
         */
        nombreLogementConstruction: number;
        /**
         * Nbfwpp_NbPiecPrncConst
         */
        nombrePiecePrincipalConstruction: number;
        /**
         * Ctfmoi_TypeLogm
         */
        typeLogement1: number;
    }
    interface ITerrainSousJacentMaj extends IBienSousJacentMaj {
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfoft_TerrEstFinnParCred
         */
        terrEstFinancierParCredit: number;
        /**
         * Dtfoat_DateEntrPtrmDateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateEntrPatrimoineDateAcqs: string;
        /**
         * MtLoyeParMois
         */
        montantLoyeParMois: number;
        /**
         * Ctfmma_ModeAcqsTerr
         */
        modeAcqsTerr: number;
    }
    interface IBienSousJacentMaj extends IElementMaj {
        /**
         * Ctfmma_ModeAcqsBien
         */
        modeAcqsBien: number;
        /**
         * Mkfmct_CrdBienSjac
         */
        crdbienSousJacent: number;
        /**
         * Dtfoat_DateEntrCaptDateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateEntrCapitalDateAcqs: string;
        /**
         * Ctfogp_ModeFinn
         */
        modeFinancier: number;
        /**
         * Cdfcni_TypeObjtComl
         */
        typeObjetCommercialisation: string;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Cnfcng_NatrGarnt
         */
        natureGarnt: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
    }
    interface ITravauxFinancesMaj extends IElementMaj {
        /**
         * Mtfotr_CoutTrvx
         */
        coutTravaux: number;
        /**
         * Dffotr_DateFinTrvx
         * Type date au format yyyy-MM-dd
         */
        dateFinTravaux: string;
        /**
         * Nbfose_SurfHabtCree
         */
        surfHabitationCree: number;
        /**
         * Cdfoig_TypeTrvxCadrEcpt
         */
        typeTravauxCadreEcpt: number;
        /**
         * Dtfoco_DateConstBatmSjac
         * Type date au format yyyy-MM-dd
         */
        dateConstructionBatimentSousJacent: string;
        /**
         * Nbfosh_SurfHabtBatmSjac
         */
        surfHabitationBatimentSousJacent: number;
        /**
         * Dtfoac_DateAcqsBatmSjac
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBatimentSousJacent: string;
        /**
         * Ctfmoi_TypeLogmBatmSous
         */
        typeLogementBatimentSous: number;
        /**
         * Nbfolo_NbreLogmBatmSous
         */
        nbreLogementBatimentSous: number;
        /**
         * Caftte_TypeEcoPtz
         */
        typeEcoPtz: number;
        /**
         * Mtfap6_MontantEcoPtzInitial
         */
        montantEcoPtzInitial: number;
        /**
         * Dtftde_DateCreationEcoPtzInitial
         * Type date au format yyyy-MM-dd
         */
        dateCreationEcoPtzInitial: string;
        /**
         * RealisationTravaux
         */
        realisationTravaux: number;
    }
    interface ISuiviEditionDocumentMaj extends IElementMaj {
        /**
         * codeHistorisationDocument
         */
        codeHistorisationDocument: number;
        /**
         * Hefisd_DateSignatureDocument
         * Type date au format yyyy-MM-dd
         */
        dateSignatureDocument: string;
        /**
         * ListeIdentifiantPersonne
         */
        listeIdentifiantPersonne: Array<string>;
    }
    interface ITerrainFinanceMaj extends IElementMaj {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
        /**
         * Dtfaot_DateAcqsTerr
         * Type date au format yyyy-MM-dd
         */
        dateAcqsTerr: string;
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfoft_CodeFinnTerr
         */
        codeFinancierTerr: number;
        /**
         * Mtfcfn_MtFrsNegc
         */
        montantFrsNegocie: number;
    }
    interface IDossierMaj extends IElementMaj {
        /**
         * Dgfano_DateHorzProj
         * Type date au format yyyy-MM-dd
         */
        dateHorizonProjet: string;
        /**
         * Cdfiei_CodeImprParExprVers
         */
        codeImprParExpressionVersement: number;
        /**
         * Cdfiag_CodeAppliChrgDoss
         */
        codeApplicationChargeDossier: number;
        /**
         * Cdfado_CodeVisbInstr
         */
        codeVisbInstruction: number;
        /**
         * Cifttv_TechVent
         */
        techniqueVent: number;
        /**
         * Cifoli_CodeLivrnImme
         */
        codeLivrnImme: boolean;
        /**
         * Nofaac_NumeAccrCmps
         */
        numeroAccrCmps: number;
        /**
         * Cnfaeg_EnggRevc
         */
        engagementRevc: number;
        /**
         * Dtfasp_DateSignPret
         * Type date au format yyyy-MM-dd
         */
        dateSignePret: string;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Idfccp_IdntConvPres
         */
        idConventionPres: string;
        /**
         * Idfipp_IdntPres
         */
        idPres: string;
        /**
         * Lbfpen_EnsgnPres
         */
        ensgnPres: string;
        /**
         * Ctfaoc_OrigCommProj
         */
        origineCommissionProjet: number;
        /**
         * Cefapd_CodeEttPlns
         */
        codeEtatPlns: number;
        /**
         * Cdfaar_CodeApplAnlsRisq
         */
        codeApplicationAnlsRisque: boolean;
        /**
         * Ctfacf_CodeTyplCadrFisc
         */
        codeTypologieCadreFiscal: string;
        /**
         * Cdfadv_CdeDevs
         */
        cdeDevise: string;
        /**
         * Cifcsb_CodeLevrSecrBanc
         */
        codeLevrSecrBancaire: number;
        /**
         * Dtfaro_DateRecpOffrParClnt
         * Type date au format yyyy-MM-dd
         */
        dateRecuperationOffreParClient: string;
        /**
         * Cdfdrg_ModeRegl
         */
        modeRegle: string;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nufpr1_NumeCpteSecoPrel
         */
        numeroCompteSecoPrel: string;
        /**
         * Nufddt_DomcTresCpteSeco
         */
        domiciliationTresCompteSeco: string;
        /**
         * Dtfart_DateLimtRetrEmprLoiConso
         * Type date au format yyyy-MM-dd
         */
        dateLimiteRetardEmpruntLoiConsommation: string;
        /**
         * Idfaex_IdntExtnDoss
         */
        idExterneDossier: string;
        /**
         * Ctfals_TypeLoiScrv
         */
        typeLoiScrivener: number;
        /**
         * Cdfafc_CodeAuthCont
         */
        codeAuthentiqueContrat: boolean;
        /**
         * Mtfcon_MtVerstCnvn
         */
        montantVersementCnvn: number;
        /**
         * Txaufi_PctFinn
         */
        pourcentageFinancier: number;
        /**
         * Idfano_IdntRedcActe
         */
        idReductionActe: string;
        /**
         * Idfaoc_IdntOrigDemn
         */
        idOrigineDemande: string;
        /**
         * Lbfaoc_LiblOrigDemn
         */
        libelleOrigineDemande: string;
        /**
         * Dgfapn_DatePrevSignNotr
         * Type date au format yyyy-MM-dd
         */
        datePrevSigneNotaire: string;
        /**
         * Nufadn_RefeExtnDoss
         */
        referenceExterneDossier: string;
        /**
         * Idfas5_ElemStrc5
         */
        elementStructure5: string;
        /**
         * Idfas6_ElemStrc6
         */
        elementStructure6: string;
        /**
         * Llfic1_CritRechAppli1
         */
        critereRechercheApplication1: string;
        /**
         * Llfic2_CritRechAppli2
         */
        critereRechercheApplication2: string;
        /**
         * Llfic3_CritRechAppli3
         */
        critereRechercheApplication3: string;
        /**
         * Llfic4_CritRechAppli4
         */
        critereRechercheApplication4: string;
        /**
         * Llfic5_CritRechAppli5
         */
        critereRechercheApplication5: string;
        /**
         * Ctfaen_CodeTypeEngg
         */
        codeTypeEngagement: string;
        /**
         * Idfaei_IdntAgntInstrDoss
         */
        idAgentInstructionDossier: string;
        /**
         * Idfada_IdntAgntPourDecsConf
         */
        idAgentPourDecisionConf: string;
        /**
         * Idfabi_IdntEnttPourTrnfBo
         */
        idEntitePourTransfertBo: string;
        /**
         * BlocNotes
         */
        blocNotes: string;
        /**
         * Ctfcse_CodeEtpeSiml
         */
        codeEtapeSimulation: number;
        /**
         * Idfifd_NumeFichPres
         */
        numeroFichPres: string;
        /**
         * Cifapp_CodePrscDossPres
         */
        codePrscDossierPres: number;
        /**
         * Cdficd_CodeDevCredDev
         */
        codeDevCreditDev: string;
        /**
         * Idfics_NumCompteDev
         */
        numeroCompteDev: string;
        /**
         * Ctfimr_ModeReglDev
         */
        modeRegleDev: string;
        /**
         * Ctfimv_ModReglVerstDev
         */
        modRegleVersementDev: string;
        /**
         * Ctfici_CanalDeDistribution
         */
        canalDeDistribution: string;
        /**
         * Defiag_DateEnvConvAG
         * Type date au format yyyy-MM-dd
         */
        dateEnvoiConventionAG: string;
        /**
         * Idfdma_ReferenceMandat
         */
        referenceMandat: string;
        /**
         * Dgfdms_DateSignMand
         * Type date au format yyyy-MM-dd
         */
        dateSigneMand: string;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * Cifpcd_OuvCpteSupEchCred
         */
        ouvertureCompteSupEchCredit: boolean;
        /**
         * Cdfcsg_TypeSignature
         */
        typeSignature: number;
        /**
         * CodeTypeEditionAutorisee
         */
        codeTypeEditionAutorisee: string;
    }
    interface IInterditBancaireMaj extends IElementMaj {
        /**
         * Cdfpbd_CodeRepnBdf
         */
        codeRepnBDF: number;
        /**
         * Cdfpfi_CodeRepnFicp
         */
        codeRepnFicp: number;
        /**
         * Ctfpbd_CodeTypeRepnBdf
         */
        codeTypeRepnBDF: string;
        /**
         * Ctfpfi_CodeTypeRepnFicp
         */
        codeTypeRepnFicp: string;
        /**
         * Dtfpbd_DateApplBdf
         * Type date au format yyyy-MM-dd
         */
        dateApplicationBDF: string;
        /**
         * Dtfpfi_DateApplFicp
         * Type date au format yyyy-MM-dd
         */
        dateApplicationFicp: string;
        /**
         * Lbfpbd_LiblRepnBdf
         */
        libelleRepnBDF: string;
        /**
         * Lbfpfi_LiblRepnFicp
         */
        libelleRepnFicp: string;
        /**
         * Cdfmas_CodeArreSurSalr
         */
        codeArreSurSalr: number;
        /**
         * Dtfpfb_DateApplFbe
         * Type date au format yyyy-MM-dd
         */
        dateApplicationFbe: string;
        /**
         * Cdfpfb_CodeRepnFbe
         */
        codeRepnFbe: number;
        /**
         * Cdfmln_CodePresListnSurCntrTechRegn
         */
        codePresListnSurCntrTechniqueRegn: number;
        /**
         * Lbfmln_LiblListnSurCntrTechRegn
         */
        libelleListnSurCntrTechniqueRegn: string;
        /**
         * Cbfpfb_CodeCottFibenDirg
         */
        codeCotisationFibenDirg: string;
    }
    interface IActiviteMaj extends IElementMaj {
        /**
         * Cdfmcs_CodeClssRisqCsp
         */
        codeClasseRisqueCSP: number;
        /**
         * Dtfmcs_DateEfftCsp
         * Type date au format yyyy-MM-dd
         */
        dateEffetCSP: string;
        /**
         * Dtfmea_DateEmbc
         * Type date au format yyyy-MM-dd
         */
        dateEmbc: string;
        /**
         * Ctfmce_CodeTypeContEmbc
         */
        codeTypeContratEmbc: number;
        /**
         * Lbfmpl_RaisSoclEmplr
         */
        raisonSocialeEmplr: string;
        /**
         * Cpfmpl_CodePostEmplr
         */
        codePosteEmplr: string;
        /**
         * Lofmpl_CodeApNEmplr
         */
        codeApNEmplr: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmsa_CodePresActvSalr
         */
        codePresActiviteSalr: number;
        /**
         * Cdfmsu_CodePresSuivPers
         */
        codePresSuivantPersonne: number;
        /**
         * Nbfmkm_NbKilmEtrLogmTrvl
         */
        nombreKilmEntreLogementTrvl: number;
        /**
         * Dffmea_DateFinCdd
         * Type date au format yyyy-MM-dd
         */
        dateFinCdd: string;
        /**
         * Ctfmsa_CodeSectActv
         */
        codeSecteurActivite: number;
    }
    interface IRefusAssuranceExterneMaj extends IElementMaj {
        /**
         * Lbfcia_CompagnieAssurance
         */
        compagnieAssurance: string;
        /**
         * Lbfrcc_ReferenceContrat
         */
        referenceContrat: string;
        /**
         * Ddfddr_DateReceptionDemande
         * Type date au format yyyy-MM-dd
         */
        dateReceptionDemande: string;
        /**
         * Llfprp_RolePersonne
         */
        rolePersonne: string;
        /**
         * Lvfdmr_MotifRefus
         */
        motifRefus: string;
    }
    interface IGarantMaj extends IElementMaj {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Ctfmfc_CodeTypeFctCpteDepoCeRecent
         */
        codeTypeFctCpteDepoCeRecent: number;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
    }
    interface IDonneesCreditMaj {
        /**
         * IdCreditModifie
         */
        idCreditModifie: string;
        /**
         * MontantCreditModifie
         */
        montantCreditModifie: string;
    }
    interface ICreditTauxFixeMaj {
        /**
         * ReferenceIndiceCredit
         */
        referenceIndiceCredit: string;
        /**
         * TauxFixeCredit
         */
        tauxFixeCredit: string;
    }
    interface IOutilMaj {
        /**
         * MarqueOutil
         */
        marqueOutil: string;
        /**
         * TypeOutil
         */
        typeOutil: string;
        /**
         * DateLivraisonOutil
         * Type date au format yyyy-MM-dd
         */
        dateLivraisonOutil: string;
        /**
         * SerieOutil
         */
        serieOutil: string;
        /**
         * PrixOutil
         */
        prixOutil: string;
        /**
         * VendIntituleOutil
         */
        vendIntituleOutil: string;
        /**
         * VendCpltIntOutil
         */
        vendCpltIntituleOutil: string;
        /**
         * VendAdrOutil
         */
        vendAdresseOutil: string;
        /**
         * VendCpltAdrOutil
         */
        vendCpltAdresseOutil: string;
        /**
         * VendCPOutil
         */
        vendCPOutil: string;
        /**
         * VendVilleOutil
         */
        vendVilleOutil: string;
        /**
         * AdrOutil
         */
        adresseOutil: string;
        /**
         * CpltAdrOutil
         */
        cpltAdresseOutil: string;
        /**
         * CPOutil
         */
        cPOutil: string;
        /**
         * VilleOutil
         */
        villeOutil: string;
        /**
         * DeplacementOutil
         */
        deplacementOutil: boolean;
    }
    interface IPretDeviseMaj {
        /**
         * IdentifiantProduitPretDevise
         */
        identifiantProduitPretDevise: string;
        /**
         * NumCreditPlanPretDevise
         */
        numeroCreditPlanPretDevise: string;
        /**
         * TypePretDevise
         */
        typePretDevise: string;
        /**
         * IdggiPretDevise
         */
        idggiPretDevise: string;
        /**
         * CdngPretDevise
         */
        cdngPretDevise: string;
        /**
         * FraisEnDevises
         */
        fraisEnDevises: string;
        /**
         * DevisePretDevise
         */
        devisePretDevise: string;
        /**
         * FraisContrePartiePretDevise
         */
        fraisContrePartiePretDevise: string;
    }
    interface IDonneesCautionPersonneMoraleMaj {
        /**
         * RepresCautionPersoMorale
         */
        represCautionPersoMorale: string;
        /**
         * AgissantQualiteCaution
         */
        agissantQualiteCaution: string;
        /**
         * AgissantVertuCaution
         */
        agissantVertuCaution: string;
        /**
         * Agissant3Caution
         */
        agissant3Caution: string;
        /**
         * Agissant4Caution
         */
        agissant4Caution: string;
        /**
         * Agissant5Caution
         */
        agissant5Caution: string;
    }
    interface ISaisiesComplementaireMaj extends IElementMaj {
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: string;
        /**
         * NombreCreditsAModifierACA
         */
        nombreCreditsAModifierACA: number;
        /**
         * ListeDonneesCreditAModifierACA
         */
        listeDonneesCreditAModifierACA: Array<IDonneesCreditMaj>;
        /**
         * An1AttestationPTZ
         */
        an1AttestationPTZ: boolean;
        /**
         * An2AttestationPTZ
         */
        an2AttestationPTZ: boolean;
        /**
         * An3AttestationPTZ
         */
        an3AttestationPTZ: boolean;
        /**
         * An4AttestationPTZ
         */
        an4AttestationPTZ: boolean;
        /**
         * An5AttestationPTZ
         */
        an5AttestationPTZ: boolean;
        /**
         * An6AttestationPTZ
         */
        an6AttestationPTZ: boolean;
        /**
         * An7AttestationPTZ
         */
        an7AttestationPTZ: boolean;
        /**
         * An8AttestationPTZ
         */
        an8AttestationPTZ: boolean;
        /**
         * An9AttestationPTZ
         */
        an9AttestationPTZ: boolean;
        /**
         * AnXAttestationPTZ
         */
        anXAttestationPTZ: boolean;
        /**
         * AnXIAttestationPTZ
         */
        anXIAttestationPTZ: boolean;
        /**
         * AnIIIAttestationPTZ
         */
        anIIIAttestationPTZ: boolean;
        /**
         * AnIVAttestationPTZ
         */
        anIVAttestationPTZ: boolean;
        /**
         * AnXIVAttestationPTZ
         */
        anXIVAttestationPTZ: boolean;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: boolean;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: boolean;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: boolean;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: boolean;
        /**
         * NomCopropriete
         */
        nomCopropriete: string;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: string;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: string;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: string;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: string;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: string;
        /**
         * EffetCopropriete
         */
        effetCopropriete: string;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeMaj>;
        /**
         * ContenuConditionsSuspensives
         */
        contenuConditionsSuspensives: string;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: boolean;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: string;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: boolean;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: string;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: boolean;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: string;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: boolean;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: string;
        /**
         * DateTransfertBoSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateTransfertBoSuiveuse: string;
        /**
         * DateDispositionFondsSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateDispositionFondsSuiveuse: string;
        /**
         * DateEnvoiNumerisationSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateEnvoiNumerisationSuiveuse: string;
        /**
         * DateSignatureNotaireSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureNotaireSuiveuse: string;
        /**
         * EditionSuiveuse
         */
        editionSuiveuse: string;
        /**
         * Statut1Suiveuse
         */
        statut1Suiveuse: Array<string>;
        /**
         * Statut2Suiveuse
         */
        statut2Suiveuse: Array<string>;
        /**
         * Statut3Suiveuse
         */
        statut3Suiveuse: Array<string>;
        /**
         * NumeroDossierAssocieSuiveuse
         */
        numeroDossierAssocieSuiveuse: string;
        /**
         * CorbeilleWorkflowSuiveuse
         */
        corbeilleWorkflowSuiveuse: string;
        /**
         * CommentaireSuiveuse
         */
        commentaireSuiveuse: string;
        /**
         * IndexGarantie
         */
        indexGarantie: number;
        /**
         * ExisteAgrementGarantie
         */
        existeAgrementGarantie: boolean;
        /**
         * DateAgrementGarantie
         * Type date au format yyyy-MM-dd
         */
        dateAgrementGarantie: string;
        /**
         * PublierGreffeGarantie
         */
        publierGreffeGarantie: boolean;
        /**
         * ConjointsEmprunteursGarantie
         */
        conjointsEmprunteursGarantie: string;
        /**
         * ConjointsCautionsGarantie
         */
        conjointsCautionsGarantie: string;
        /**
         * DateDebutLigneInvestissement
         * Type date au format yyyy-MM-dd
         */
        dateDebutLigneInvestissement: string;
        /**
         * DateFinLigneInvestissement
         * Type date au format yyyy-MM-dd
         */
        dateFinLigneInvestissement: string;
        /**
         * ATauxFixeLigneInvestissement
         */
        aTauxFixeLigneInvestissement: boolean;
        /**
         * TauxFixeLigneInvestissement
         */
        tauxFixeLigneInvestissement: string;
        /**
         * TauxRevisableLigneInvestissement
         */
        tauxRevisableLigneInvestissement: string;
        /**
         * ReferenceIndiceLigneInvestissement
         */
        referenceIndiceLigneInvestissement: string;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: string;
        /**
         * NomMandataire
         */
        nomMandataire: string;
        /**
         * VertuMandataire
         */
        vertuMandataire: string;
        /**
         * NombreOutils
         */
        nombreOutils: number;
        /**
         * AjoutNotices
         */
        ajoutNotices: boolean;
        /**
         * NumeroOrias
         */
        numeroOrias: string;
        /**
         * NombreCreditsAModifier
         */
        nombreCreditsAModifier: number;
        /**
         * ListeDonneesCreditAModifier
         */
        listeDonneesCreditAModifier: Array<IDonneesCreditMaj>;
        /**
         * ListeOutil
         */
        listeOutil: Array<IOutilMaj>;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: string;
        /**
         * LibelleEtablissementPouvoirNotaire
         */
        libelleEtablissementPouvoirNotaire: string;
        /**
         * DatePouvoirNotaire
         * Type date au format yyyy-MM-dd
         */
        datePouvoirNotaire: string;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: string;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: string;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: string;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: string;
        /**
         * RibPretDevise
         */
        ribPretDevise: string;
        /**
         * PretDevise
         */
        pretDevise: Array<IPretDeviseMaj>;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: string;
        /**
         * AccordPrincipe
         */
        accordPrincipe: boolean;
        /**
         * Rdv
         */
        rdv: boolean;
        /**
         * Deroulement
         */
        deroulement: boolean;
        /**
         * RaisonCaution
         */
        raisonCaution: string;
        /**
         * RepresentantCaution
         */
        representantCaution: string;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: string;
        /**
         * DatePouvoirCaution
         * Type date au format yyyy-MM-dd
         */
        datePouvoirCaution: string;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: string;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: string;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: string;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: string;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: string;
        /**
         * DateRCSEmprunteurBailleur
         * Type date au format yyyy-MM-dd
         */
        dateRCSEmprunteurBailleur: string;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: string;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: string;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: string;
        /**
         * DatePouvoirEmprunteurPersMorale
         * Type date au format yyyy-MM-dd
         */
        datePouvoirEmprunteurPersonneMorale: string;
        /**
         * PouvoirEmprunteurPersMorale
         */
        pouvoirEmprunteurPersonneMorale: string;
        /**
         * ListeDonneesCautionPersonneMorale
         */
        listeDonneesCautionPersonneMorale: Array<IDonneesCautionPersonneMoraleMaj>;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: string;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: string;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: string;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: string;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: string;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: string;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: string;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: string;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: string;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: string;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: string;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: string;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: string;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: string;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: string;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: string;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: string;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: string;
        /**
         * DatePourvoirPersoMoraleAssurance
         * Type date au format yyyy-MM-dd
         */
        datePourvoirPersoMoraleAssurance: string;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: string;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: string;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: string;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: string;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: string;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: string;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: string;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: string;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: string;
        /**
         * VilleTribunal
         */
        villeTribunal: string;
        /**
         * NomenclatureBiens
         */
        nomenclatureBiens: string;
        /**
         * ListeBienMC
         */
        listeBienMC: Array<IBienMaj>;
        /**
         * NombreBiensMC
         */
        nombreBiensMC: number;
        /**
         * TypeEnvoi
         */
        typeEnvoi: string;
        /**
         * RepresPersMoraleGageBienMeuble
         */
        represPersMoraleGageBienMeuble: string;
        /**
         * AgissantPersMoraleGageBienMeuble
         */
        agissantPersMoraleGageBienMeuble: string;
        /**
         * Vertu1PersMoraleGageBienMeuble
         */
        vertu1PersMoraleGageBienMeuble: string;
        /**
         * Vertu2PersMoraleGageBienMeuble
         */
        vertu2PersMoraleGageBienMeuble: string;
    }
    interface IAgentMaj extends IElementMaj {
    }
    interface IProjetNonImmobilierMaj extends IProjetMaj {
        /**
         * DescProjNonImmb
         */
        descriptionProjetNonImmobilier: string;
        /**
         * Dtfbso_DateMiseDispFond
         * Type date au format yyyy-MM-dd
         */
        dateMiseDispFond: string;
    }
    interface IProjetImmobilierMaj extends IProjetMaj {
        /**
         * Cifopa_DefnSiEmprEstPrm
         */
        defnSiEmpruntEstPrm: boolean;
        /**
         * Cofopz_CodeCondDergPourPtz
         */
        codeConditionDerogationPourPtz: number;
        /**
         * Cdfose_CodeBatmBassConso
         */
        codeBatimentBassConsommation: number;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cdfomo_CodeModlOccpLogm
         */
        codeModeleOccpLogement: number;
        /**
         * Ctfopm_CodePrixMarc
         */
        codePrixMarche: number;
        /**
         * Ctfmmc_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * Ctfmpo_TypePrpr
         */
        typeProprietaire: number;
        /**
         * Txfmpa_PctPrprApreOper
         */
        pourcentageProprietaireApreOper: number;
        /**
         * Mgfovh_MtInscHypt
         */
        montantInscHypotheque: number;
        /**
         * Cdfqem_QualEmplaProj
         */
        qualEmplaProjet: number;
        /**
         * ZoneReglRobnBien
         */
        zoneRegleRobnBien: string;
        /**
         * ZonePlusLogm
         */
        zonePlusLogement: string;
        /**
         * Cdfozg_CodeZoneGegrRegl
         */
        codeZoneGegrRegle: number;
        /**
         * Cdfizf_CodeZoneFrncSins
         */
        codeZoneFrncSinistre: number;
        /**
         * Cdfwti_TypeImeu
         */
        typeImeu: number;
        /**
         * Idfapi_IdntPrgmImmb
         */
        idProgrammeImmobilier: string;
        /**
         * Idfaap_IdntAccrPourInst
         */
        idAccrPourInstruction: string;
        /**
         * Cifcep_IndicemssNouvPartScpi
         */
        indicemssNouvPartScpi: number;
        /**
         * Ctfcve_CodeTypeMarcPourVent
         */
        codeTypeMarchePourVent: number;
        /**
         * Idfove_NomSoceGest
         */
        nomSoceGestion: string;
        /**
         * Cdfizf_CentreBourgRural
         */
        centreBourgadeRural: boolean;
        /**
         * Dtfipe_DateDPE
         * Type date au format yyyy-MM-dd
         */
        dateDPE: string;
        /**
         * Idfipe_IdntDPE
         */
        idDPE: string;
        /**
         * Ctfien_TypeLogmDPE
         */
        typeLogementDPE: number;
        /**
         * Cdfipf_CodeOrigDPE
         */
        codeOrigineDPE: string;
        /**
         * Qcfiep_CumlConsEnrgPrim
         */
        cumulConsoEnergiePrimaire: number;
        /**
         * Qcfigs_CumlEmisGazEfftSerr
         */
        cumulEmissionGazEffetSerre: number;
        /**
         * Idfibi_IdntBienImmb
         */
        idBienImmobilier: string;
    }
    interface IProjetEPSMaj extends IProjetMaj {
    }
    interface IProjetMaj extends IElementMaj {
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Cdfcon_NegcEffcParNotr
         */
        negocieEffcParNotaire: boolean;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Cdfomp_CodeMiseOeuvrProjPro
         */
        codeMiseOeuvrProjetPro: number;
        /**
         * Cdfwrl_IndicAchtRvnt
         */
        indiceAchtRvnt: boolean;
        /**
         * Cifocs_CoutObjtSaisCalcEnvl
         */
        coutObjetSaisieCalculEnvl: number;
        /**
         * Ctfgce_CritElgGarFEI
         */
        critereElgGarFEI: string;
        /**
         * Ctfici_CanalDeDistribution
         */
        canalDeDistribution: string;
        /**
         * Ctfoan_TypeAcqs
         */
        typeAcqs: number;
        /**
         * Ctfonu_NbUnteContPrgmImmb
         */
        nombreUnteContratProgrammeImmobilier: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Lbfoof_DescObjt
         */
        descriptionObjet: string;
        /**
         * CodePaysLocs
         */
        codePaysLocs: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * Mofcpz_CoutRelOper
         */
        coutRelOper: number;
        /**
         * Mtfcra_MtRachCren
         */
        montantRachCren: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Mtfofd_MtFrsDivr
         */
        montantFrsDivr: number;
        /**
         * Mtfofn_CoutFrsNotr
         */
        coutFrsNotaire: number;
        /**
         * Mtfoho_CoutTotlObjtHt
         */
        coutTotalObjetHt: number;
        /**
         * Mtfott_CoutTotlObjtTtc
         */
        coutTotalObjetTTC: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * bFinancementTCC
         */
        bFinancementTCC: boolean;
        /**
         * DescriptionProjet
         */
        descriptionProjet: string;
    }
    interface IComplementEPSMaj extends IElementMaj {
        /**
         * Cnfcnb_NatrGarnEps
         */
        natureGarantieEPS: string;
        /**
         * Idfapa_RefrExtnDossParn
         */
        referenceExterneDossierParent: string;
        /**
         * Ddfaen_DateDebuEngg
         * Type date au format yyyy-MM-dd
         */
        dateDebutEngagement: string;
        /**
         * Dffaen_DateFinEngg
         * Type date au format yyyy-MM-dd
         */
        dateFinEngagement: string;
        /**
         * Mgfggo_MtEnggGlblOrig
         */
        montantEngagementGlblOrigine: number;
        /**
         * Idfagl_IdntEnggGlbl
         */
        idEngagementGlbl: string;
        /**
         * Cifcrg_CodeIndRetrocessionEPS
         */
        codeIndicateurRetrocessionEPS: number;
        /**
         * Cifcrh_CodeIndicRadiationAutoEPS
         */
        codeIndiceRadiationAutomatiqueEPS: number;
        /**
         * Cifcri_CodeIndicEPSAmortissable
         */
        codeIndiceEPSAmortissable: number;
        /**
         * Cifeng_CodeEngagementGlobal
         */
        codeEngagementGlobal: number;
        /**
         * Cnfcnh_CodeTypeObjetEPS
         */
        codeTypeObjetEPS: string;
        /**
         * Cofcca_CodeCanalDistributionEPS
         */
        codeCanalDistributionEPS: string;
        /**
         * Cofcsi_CodeSignatureElectroniqueEPS
         */
        codeSignatureElectroniqueEPS: string;
        /**
         * Dtfcdd_DateDecisionEPS
         * Type date au format yyyy-MM-dd
         */
        dateDecisionEPS: string;
        /**
         * Idfaei_IdEntiteInstructeur
         */
        idEntiteInstructeur: string;
        /**
         * Idfagd_CodeAgentDecideur
         */
        codeAgentDecideur: string;
        /**
         * Idfcma_IdModeleActeEPS
         */
        idModeleActeEPS: string;
        /**
         * Idfcs1_IdEDSSignataire
         */
        idEDSSignataire: string;
        /**
         * Idfcs2_IdEDSSignataire
         */
        idEDSSignataire1: string;
        /**
         * Mtfcad_MontantAssietteCommission
         */
        montantAssietteCommission: number;
        /**
         * Nxfcse_NumSignatureElectroniqueEPS
         */
        numeroSignatureElectroniqueEPS: string;
        /**
         * Idfcfa_IdFamilleEPS
         */
        idFamilleEPS: string;
        /**
         * Dtfcru_DateRadiationEPS
         * Type date au format yyyy-MM-dd
         */
        dateRadiationEPS: string;
        /**
         * Idfaic_IdPreuveICG
         */
        idPreuveICG: string;
        /**
         * Idfapc_IdClientWeb
         */
        idClientWeb: string;
        /**
         * Lbfauc_LibelleUtilisateurWeb
         */
        libelleUtilisateurWeb: string;
        /**
         * Lbfas1_LibelleCiviliteSignataire1
         */
        libelleCiviliteSignataire1: string;
        /**
         * Lbfas3_LibelleCiviliteSignataire2
         */
        libelleCiviliteSignataire2: string;
        /**
         * Lbfas4_LibelleFonctionSignataire2
         */
        libelleFonctionSignataire2: string;
        /**
         * Lbfas2_LibelleFonctionSignataire1
         */
        libelleFonctionSignataire1: string;
        /**
         * Cdfcew_CodeEtatDossierEPSWeb
         */
        codeEtatDossierEPSWeb: string;
    }
    interface IControleManuelMaj extends IPieceMaj {
        /**
         * Llfccm_CommtCtrl
         */
        commentaireControle: string;
    }
    interface IPieceAgenceMaj extends IPieceMaj {
    }
    interface IPieceClientMaj extends IPieceMaj {
    }
    interface IPieceMaj extends IElementMaj {
        /**
         * Cdfaju_StttPiecCtrl
         */
        stttPieceControle: number;
    }
    interface ITresorerieFinanceeMaj extends IBienDetailleMaj {
        /**
         * Idfove_IdntVndr
         */
        idVendeur: string;
    }
    interface IBienEquipementProMaj extends IBienDetailleMaj {
    }
    interface IBienDetailleMaj extends IElementMaj {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
        /**
         * Mtfoac_CoutAcqsComlInds
         */
        coutAcqsCommercialisationInds: number;
        /**
         * Mtfoai_CoutAcqsHabt
         */
        coutAcqsHabitation: number;
        /**
         * Mtfoco_CoutConst
         */
        coutConstruction: number;
        /**
         * Mtfotr_CoutTrvxAmen
         */
        coutTravauxAmen: number;
        /**
         * Mtfopp_CoutPasPort
         */
        coutPasPort: number;
        /**
         * Mtfofc_CoutFondComc
         */
        coutFondComc: number;
        /**
         * Mtfomo_CoutEqpmMte
         */
        coutEqpmMte: number;
        /**
         * Mtfovp_CoutVehcPrfs
         */
        coutVehcPrfs: number;
        /**
         * Mtfops_CoutPartSocl
         */
        coutPartSociale: number;
        /**
         * Mtfofg_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * Mtfofn_MtFrsNotr
         */
        montantFrsNotaire: number;
        /**
         * Mtfost_CoutStck
         */
        coutStck: number;
        /**
         * Mtfosc_CoutStckHorsInstr
         */
        coutStckHorsInstruction: number;
        /**
         * Mtfobf_CoutBfr
         */
        coutBfr: number;
        /**
         * Mtfobc_CoutBfrHorsInstr
         */
        coutBfrHorsInstruction: number;
        /**
         * Mtfodv_CoutAutrFrsPrfs
         */
        coutAutreFrsPrfs: number;
        /**
         * Mtfodc_CoutAutrFrsPrfsHorsInstr
         */
        coutAutreFrsPrfsHorsInstruction: number;
        /**
         * Mcfotv_MtTvaFinn
         */
        montantTVAFinancier: number;
        /**
         * Mtfora_MtRachCren
         */
        montantRachCren: number;
        /**
         * Mtfods_CoutPartSoce
         */
        coutPartSoce: number;
    }
    interface IAutoMotoMaj extends IBienConsoFinanceMaj {
        /**
         * Ctfmov_TypeMotr
         */
        typeMotr: number;
        /**
         * Lbfmov_ModeVehc
         */
        modeVehc: string;
        /**
         * Lbfqov_MarqVehc
         */
        marqVehc: string;
        /**
         * Ctfmvh_TypeVehc
         */
        typeVehc: number;
        /**
         * Ctfmgv_GnreVehc
         */
        gnreVehc: number;
        /**
         * Cdfmpv_PuisFisc
         */
        puisFiscal: number;
        /**
         * Ddfmpc_DatePrmeMiseCircl
         * Type date au format yyyy-MM-dd
         */
        datePrmeMiseCircl: string;
    }
    interface IBienConsoFinanceMaj extends IElementMaj {
        /**
         * Idfove_IdntVndr
         */
        idVendeur: string;
        /**
         * Mgfovh_MtInscHypt
         */
        montantInscHypotheque: number;
    }
    interface IEvenementMaj extends IElementMaj {
        /**
         * Lbfamd_MessEnrgSurEvenDoss
         */
        messEnregistrementSurEvenDossier: string;
        /**
         * Dtfaee_DateEfftEven
         * Type date au format yyyy-MM-dd
         */
        dateEffetEven: string;
        /**
         * Idfase_IdntEnttSaisEven
         */
        idEntiteSaisieEven: string;
        /**
         * Lbfase_LiblEnttSaisEven
         */
        libelleEntiteSaisieEven: string;
        /**
         * Cefhgc_CodeIndicGestCentEven
         */
        codeIndiceGestionCentralEven: number;
        /**
         * Cdfabo_ElemStrcGestBackCent
         */
        elementStructureGestionBackCentral: string;
        /**
         * Idfce3_IdntCaisAsscBackCent
         */
        idCaisseAssuranceBackCentral: number;
    }
    interface IBlocNotesMaj extends IElementMaj {
        /**
         * ContBlc
         */
        contratBlocNote: string;
    }
    interface ICreditPalierProgressionMaj extends IElementMaj {
        /**
         * Txfcam_ValrTxPrgrAmrt
         */
        valeurTauxProgressifAmortissement: number;
        /**
         * Cdfdcg_CodeIndxTxPrgrAmrt
         */
        codeIndexTauxProgressifAmortissement: number;
        /**
         * Npfca1_NbPerdDureePalrPrgr
         */
        nombrePeriodeDureePalierProgressif: number;
    }
    interface IComplementPhasePretCombineMaj extends IElementMaj {
        /**
         * Mafaqa_MtAmrt
         */
        montantAmortissement: number;
        /**
         * Mkfaif_MtInfine
         */
        montantInfine: number;
        /**
         * Ctfark_ModeSaisReprCapt
         */
        modeSaisieReprCapital: number;
        /**
         * Tafaqa_QuotAmrt
         */
        quotientAmortissement: number;
    }
    interface ICreditPhaseAmortissementMaj extends ICreditPhaseMaj {
        /**
         * Txfcqa_QuotAmrt
         */
        quotientAmortissement: number;
        /**
         * Txfaom_TxConstPhasCred
         */
        tauxConstructionPhaseCredit: number;
        /**
         * Mefhcd_MtEchmOptm
         */
        montantEchmOptimisation: number;
    }
    interface ICreditPhaseDiffereAmortissementMaj extends ICreditPhaseMaj {
    }
    interface ICreditPhaseDiffereTotalMaj extends ICreditPhaseMaj {
    }
    interface ICreditPhaseMobilisationMaj extends ICreditPhaseMaj {
    }
    interface ICreditPhasePrefinancementMaj extends ICreditPhaseMaj {
        /**
         * Cdfppf_CodeRedcDureePref
         */
        codeReductionDureePref: number;
        /**
         * RedcDureePref
         */
        reductionDureePref: boolean;
    }
    interface ICreditPhaseMaj extends IElementMaj {
        /**
         * Capitalisation
         */
        capitalisation: boolean;
        /**
         * Ctfcki_ModeCaptRecvInte
         */
        modeCapitalRecouvrementInterieur: number;
        /**
         * Cdfcki_CodeCaptRecvInte
         */
        codeCapitalRecouvrementInterieur: number;
        /**
         * Ptfcin_CodePerdAsscCalcInte
         */
        codePeriodeAssuranceCalculInterieur: number;
        /**
         * Ptfcam_CodePerdCalcMer
         */
        codePeriodeCalculMER: number;
        /**
         * Npfcph_NbPerdPhas
         */
        nombrePeriodePhase: number;
        /**
         * Pefcph_CodePerdDurePhas
         */
        codePeriodeDurePhase: number;
        /**
         * ValrTxPhas
         */
        valeurTauxPhase: number;
    }
    interface ICreditParamRevisionParPeriodeMaj extends ICreditParamRevisionMaj {
    }
    interface ICreditParamRevisionParPhaseMaj extends ICreditParamRevisionMaj {
    }
    interface ICreditParamRevisionMaj extends IElementMaj {
        /**
         * Nofrji_NumeJeuIndcRevsAsscCred
         */
        numeroJeuxIndiceRevisionAssuranceCredit: number;
        /**
         * Ctfrub_ModeExprButrTxBais
         */
        modeExpressionButoireTauxBaisse: number;
        /**
         * Ctfruh_ModeExprButrTxHaus
         */
        modeExpressionButoireTauxHausse: number;
        /**
         * Tvfru1_ValrButrTxBais
         */
        valeurButoireTauxBaisse: number;
        /**
         * Tvfru2_ValrButrTxHaus
         */
        valeurButoireTauxHausse: number;
    }
    interface ICreditPalierTauxMaj extends IElementMaj {
        /**
         * Txfcpg_TxPrgrEcheSurPalr
         */
        tauxProgressifEcheanceSurPalier: number;
        /**
         * Npfcal_NbPerdDureePalr
         */
        nombrePeriodeDureePalier: number;
    }
    interface ISuiviPlanifieMaj extends IElementMaj {
        /**
         * Ddfarv_DatePremSuiv
         * Type date au format yyyy-MM-dd
         */
        datePremierSuivant: string;
        /**
         * Dtfarv_DateSuivPlnf
         * Type date au format yyyy-MM-dd
         */
        dateSuivantPlafond: string;
        /**
         * Lbfarw_LiblLibrAsscSuiv
         */
        libelleLibrAssuranceSuivant: string;
        /**
         * Idfccl_IdntClse
         */
        idClasse: string;
        /**
         * Npfcrw_NbPerdSuivPlnf
         */
        nombrePeriodeSuivantPlafond: number;
        /**
         * Ptfcrv_CodePerdSuivPlnf
         */
        codePeriodeSuivantPlafond: number;
    }
    interface ICreditModaliteMaj extends IElementMaj {
        /**
         * Idfcmi_IdntModlCalcImpe
         */
        idModeleCalculImpe: string;
        /**
         * Txfdri_TxIndmRembAntc
         */
        tauxIndemniteRemboursementAnticipe: number;
        /**
         * Nofcmc_NumeModlRembAntc
         */
        numeroModeleRemboursementAnticipe: number;
        /**
         * Txfcsr_SurcTxParRappRembAntc
         */
        surcTauxParRappRemboursementAnticipe: number;
        /**
         * Txffmi_TxInteRetdImpe
         */
        tauxInterieurRetardImpe: number;
        /**
         * Mtffmi_MtIndmImpe
         */
        montantIndemniteImpe: number;
        /**
         * Cdfccr_CodeTrtInteIntrSurImpe
         */
        codeTraitementInterieurIntrSurImpe: number;
    }
    interface ICompteCourantMaj extends IElementMaj {
        /**
         * Mtfasc_MtHyptCapt
         */
        montantHypothequeCapital: number;
        /**
         * Cifcmh_CodeIndicBlcgSaisMtHyptCapt
         */
        codeIndiceBlcgSaisieMontantHypothequeCapital: number;
    }
    interface IEmprunteurMaj extends IElementMaj {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * Lbfaem_DenmEmpr
         */
        denmEmprunt: string;
        /**
         * Lnfpem_LiblLongEmpr
         */
        libelleLongEmprunt: string;
        /**
         * Lbfain_IntlcEmpr
         */
        intlcEmprunt: string;
        /**
         * Idfaep_IdntEnttTitlClnt
         */
        idEntiteTitulaireClient: string;
        /**
         * Idfaeg_IdntElemStrcGest
         */
        idElementStructureGestion: string;
        /**
         * Cdfcke_CodeCateEmpr
         */
        codeCateEmprunt: string;
        /**
         * Ctfmfc_CodeTypeFctCpteDepoCeRecent
         */
        codeTypeFctCpteDepoCeRecent: number;
        /**
         * Ctfpmp_CodeTypeMarcPers
         */
        codeTypeMarchePersonne: number;
        /**
         * Ctfcae_CateAgntEcnmBafi
         */
        cateAgentEcnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_TypeAdmnBafi
         */
        typeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Cdfpsr_CodeSittFamlRegl
         */
        codeSituationFamilleRegle: number;
        /**
         * Nbfpnp_NbPersCmpstMeng
         */
        nombrePersonneCmpstMeng: number;
        /**
         * Cdfpma_NbActfMeng
         */
        nombreActfMeng: number;
        /**
         * Dtfpen_DateEncrEparLogm
         * Type date au format yyyy-MM-dd
         */
        dateEncoursEpargneLogement: string;
        /**
         * Mtftpl_EncrEncrIsssPretPel
         */
        encoursEncoursIsssPretPEL: number;
        /**
         * Mtftli_MtEncrIsssPretLel
         */
        montantEncoursIsssPretLEL: number;
        /**
         * Mtftlh_MtEncrLivrAutrEtbl
         */
        montantEncoursLivrAutreEtbl: number;
        /**
         * Mtftph_MtEncrPlnsAutrEtbl
         */
        montantEncoursPlnsAutreEtbl: number;
        /**
         * Mtfwrt_TotlRevnAnnlNets
         */
        totalRevnAnnulationNets: number;
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Cdfwsl_StttOccpLogmActl
         */
        stttOccpLogementActuariel: number;
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpnm_NomRaisSoclEmpr
         */
        nomRaisonSocialeEmprunt: string;
        /**
         * Lbfpa1_Intt
         */
        intituleLigne1: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_CompIntt
         */
        compIntituleLigne2: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cdfpse_CodeSectRatt
         */
        codeSecteurRattachement: string;
        /**
         * Cdfpjm_CodeJeunMeng
         */
        codeJeunMeng: number;
        /**
         * Qmfcvi_EsperVie
         */
        esperVie: number;
        /**
         * Qmfcvd_EsperVieDec
         */
        esperVieDecision: number;
        /**
         * Qmfcvs_EsperVieStrs
         */
        esperVieStress: number;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * Cdfadv_CodeDeviseEmprunteur
         */
        codeDeviseEmprunteur: string;
    }
    interface ICessionDaillyLoyerImmeubleMaj extends IBienPorteEnGarantieMaj {
    }
    interface IHypothequeAerienneMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_NumeSer
         */
        numeroSer: string;
        /**
         * Lbfolt_NumeImmt
         */
        numeroImmt: string;
    }
    interface IBonDeCaisseCapitalisationMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_NumeSiren
         */
        numeroSiren: string;
        /**
         * Lbfoo2_ValrBonOrig
         */
        valeurBonOrigine: number;
        /**
         * Lbfoo3_NumeContTitr
         */
        numeroContratTitre: string;
        /**
         * Lbfoo4_NatrBon
         */
        natureBon: string;
        /**
         * Lbfoo5_Dateeche
         * Type date au format yyyy-MM-dd
         */
        dateeche: string;
        /**
         * Lbfoo6_TitrNomPrenDeps
         */
        titreNomPrenDeps: string;
    }
    interface IDelegationLoyerMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_MtAnnuLoye
         */
        montantAnnuLoye: number;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_DateExtnBail
         * Type date au format yyyy-MM-dd
         */
        dateExterneBail: string;
        /**
         * Lbfoo2_NomGern
         */
        nomGern: string;
    }
    interface ICessionDaillyAutreMaj extends IBienPorteEnGarantieMaj {
    }
    interface IContratAssuranceMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_DateNaisAssr
         * Type date au format yyyy-MM-dd
         */
        dateNaisAssurance: string;
        /**
         * Lbfolt_NumeContAssr
         */
        numeroContratAssurance: string;
        /**
         * Lbfoo1_NomCieAssr
         */
        nomCieAssurance: string;
        /**
         * Lbfoo2_NumeSiren
         */
        numeroSiren: string;
        /**
         * Lbfoo3_CntrGest
         */
        cntrGestion: string;
        /**
         * Lbfoo4_TypeTechJurd
         */
        typeTechniqueJuridique: string;
        /**
         * Lbfoo5_NomContAssr
         */
        nomContratAssurance: string;
        /**
         * Lbfoo6_ApprPers
         */
        apportPersonne: number;
        /**
         * Lbfoo7_MtMinmVerstSign
         */
        montantMinimumVersementSigne: number;
        /**
         * Cdfvat_CodeIndicAttnVerst
         */
        codeIndiceAttnVersement: number;
    }
    interface IAntichreseMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_RefeCads
         */
        referenceCads: string;
        /**
         * Lbfolt_NumeLot
         */
        numeroLot: string;
    }
    interface IGageVehiculeMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_NumeSer
         */
        numeroSer: string;
        /**
         * Lbfolt_NumeImmt
         */
        numeroImmt: string;
    }
    interface IGageCompteInstrumentFinancierMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
    }
    interface INantissementPartSocialeMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_NumeEnrg
         */
        numeroEnregistrement: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_TitrInte
         */
        descriptionOtion: string;
    }
    interface INantissementValeurMaterielleMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_TypeValrMatr
         */
        typeValeurMatrimonial: string;
        /**
         * Lbfolt_NumeSer
         */
        numeroRefTypeLot: string;
    }
    interface INantissementValeurMobiliereMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
    }
    interface INantissementFondDeCommerceMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_NumeInscRcs
         */
        numeroInscRcs: string;
        /**
         * Lbfolt_LiblLibr
         */
        libelleLibr: string;
        /**
         * Cdfomo_TitrOccpLocLeqlFondEstExpl
         */
        titreOccpLocLeqlFondEstExpl: number;
    }
    interface IHypothequeImmobiliereMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_RefeCads
         */
        referenceCads: string;
        /**
         * Lbfolt_RefeLot
         */
        referenceLot: string;
        /**
         * Ctfmoi_TypeBien
         */
        typeBien: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * Cdfcdo_DestBien
         */
        destinataireBien: number;
        /**
         * Nbfosh_SurfHabt
         */
        surfHabitation: number;
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfcoi_ZoneImplBien
         */
        zoneImplBien: string;
        /**
         * Cdfqem_QualEmpla
         */
        qualEmpla: number;
        /**
         * Lbfoo1_MtDernMutt
         */
        montantDernierMutt: string;
        /**
         * Lbfoo2_DateDernMutt
         */
        dateDernierMutt: string;
        /**
         * Dtfoco_AnneConst
         */
        anneConstruction: number;
        /**
         * Lbfoo3_MtAnnuLoye
         */
        montantAnnuLoye: string;
        /**
         * Lbfoo5_NumeLotCopr
         */
        numeroLotCopr: string;
        /**
         * Lbfoo4_NumeSctn
         */
        numeroSctn: string;
        /**
         * Cifcoc_OccpActlBien
         */
        occpActuarielBien: number;
        /**
         * Cifcph_CodePresHypt
         */
        codePresHypotheque: number;
        /**
         * Idfceb_IdntExpr
         */
        idExpression: string;
        /**
         * Dtfcde_DateDemnExpr
         * Type date au format yyyy-MM-dd
         */
        dateDemandeExpression: string;
        /**
         * Dtfoac_DateAcquisitio
         * Type date au format yyyy-MM-dd
         */
        dateAcquisition: string;
        /**
         * Mtfoac_CoutAcquisition
         */
        coutAcquisition: number;
        /**
         * Nbfosa_SurfaceAnnexes
         */
        surfaceAnnexes: number;
        /**
         * Cdfomo_ModaliteOccupation
         */
        numeroDeVolume: number;
    }
    interface IBienDiversMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_Refe1
         */
        reference1: string;
        /**
         * Lbfolt_Refe2
         */
        reference2: string;
    }
    interface IBienPorteEnGarantieMaj extends IElementMaj {
        /**
         * Lbfoof_LiblObjt
         */
        libelleObjet: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Mtfgo2_MtEstmPrdn
         */
        montantEstmPrdn: number;
        /**
         * Dtfgo2_DateEstmPrdn
         * Type date au format yyyy-MM-dd
         */
        dateEstmPrdn: string;
        /**
         * Cdfgm2_CodeModlEstmPrdn
         */
        codeModeleEstmPrdn: string;
        /**
         * Cmfgt2_CodeMotfReSPrdn
         */
        codeMotfReSPrdn: string;
        /**
         * Dtfiex_DateExprBienCff
         * Type date au format yyyy-MM-dd
         */
        dateExpressionBienCff: string;
        /**
         * Lbfpex_NoteExprBienCff
         */
        noteExpressionBienCff: number;
        /**
         * Cifaan_SouscriptionContratAssurance
         */
        souscriptionContratAssurance: boolean;
    }
    interface ICreditHDMaj extends IElementMaj {
        /**
         * Nufpct_NumrContEpar
         */
        numeroContratEpargne: string;
        /**
         * Mtfggi_MtIntlGarn
         */
        montantInitialGarantie: number;
    }
    interface IGarantieHDMaj extends IElementMaj {
        /**
         * Cdfcng_NatrGarnHorsDoss
         */
        natureGarantieHorsDossier: string;
        /**
         * Idfgg1_IdntOrigGarnHorsDoss
         */
        idOrigineGarantieHorsDossier: string;
        /**
         * Nofghy_RangPrncHypt
         */
        rangPrincipalHypotheque: number;
        /**
         * Nofgsh_RangSecnHypt
         */
        rangSecnHypotheque: number;
        /**
         * Cdfgrh_CodeCessRangHypt
         */
        codeCessRangHypotheque: number;
        /**
         * IdnttblPrt
         */
        idEtabPreteur: string;
        /**
         * VilleConsvHypt
         */
        villeConsvHypotheque: string;
        /**
         * DatePublHypt
         * Type date au format yyyy-MM-dd
         */
        datePublHypotheque: string;
        /**
         * RfVolm
         */
        refVolume: string;
        /**
         * NumVolm
         */
        numeroVolume: number;
        /**
         * DateEfftHypt
         * Type date au format yyyy-MM-dd
         */
        dateEffetHypotheque: string;
        /**
         * DateFinHypt
         * Type date au format yyyy-MM-dd
         */
        dateFinHypotheque: string;
        /**
         * LiblEmpr
         */
        libelleEmprunt: string;
        /**
         * LiblNotr
         */
        libelleNotaire: string;
        /**
         * VilleNotr
         */
        villeNotaire: string;
        /**
         * MtInscHyptOrig
         */
        montantInscHypothequeOrigine: number;
        /**
         * MtHyptDisp
         */
        montantHypothequeDisp: number;
        /**
         * DateDispMt
         * Type date au format yyyy-MM-dd
         */
        dateDispMontant: string;
        /**
         * Cdfgpc_PactCommr
         */
        pactCommr: string;
        /**
         * Cefggi_CodEttGarn
         */
        codeEtatGarantie: number;
        /**
         * Cdfgex_CodeIndicGarnExtn
         */
        codeIndiceGarantieExterne: number;
        /**
         * CodeIndicTrfoGarn
         */
        codeIndiceTrfoGarantie: number;
        /**
         * Npfgdg_DurIntlMois
         */
        dureeInitialMois: number;
        /**
         * Ctfggm_CodeTypeGarnMyss
         */
        codeTypeGarantieMyss: string;
    }
    interface ICreditBonificationInfoMaj extends IElementMaj {
        /**
         * sCdfddi_CodeDetail
         */
        codeDetail: string;
    }
    interface ICreditBonificationMaj extends IElementMaj {
        /**
         * Idfdce_IdCreditExterne
         */
        idCreditExterne: string;
    }
    interface IGarantieReelleMaj extends IGarantieMaj {
        /**
         * Nofgsh_NumeRangSecnHypt
         */
        numeroRangSecnHypotheque: number;
        /**
         * Npfgdg_DureHyptMois
         */
        dureHypothequeMois: number;
        /**
         * Cdfgpc_PactCommr
         */
        pactCommr: number;
        /**
         * Nofghy_RangHypt
         */
        rangHypotheque: number;
        /**
         * Cdfgrh_CodeCessRangHypt
         */
        codeCessRangHypotheque: number;
        /**
         * Mtfghy_MtCouvParHyptRangInfe
         */
        montantCouvertureParHypothequeRangInfe: number;
        /**
         * Mtfghy_MtFrais
         */
        montantFrais: number;
        /**
         * Llfgvh_VilleConservationHypotheque
         */
        villeConservationHyp: string;
        /**
         * Llfgvo_LibelleReferenceVolume
         */
        lblRefVolume: string;
        /**
         * Dtfgpu_DateDePublication
         * Type date au format yyyy-MM-dd
         */
        datePublication: string;
        /**
         * Nofgvo_NumeroDeVolume
         */
        numeroDeVolume: number;
    }
    interface IGarantiePersonnelleMaj extends IGarantieMaj {
        /**
         * Cdfgtg_CodeNatrCaut
         */
        codeNatureCaution: number;
    }
    interface IGarantieMaj extends IAccessoireMaj {
        /**
         * Lbfgga_Commt
         */
        commentaire: string;
        /**
         * Cdfaag_CodeFormActeAuth
         */
        codeFormeActeAuthentique: number;
        /**
         * IdntPers
         */
        idPersonne: string;
    }
    interface IAssuranceMaj extends IAccessoireMaj {
        /**
         * Cdasdg_CodeDeleAssr
         */
        codeDeleAssurance: number;
        /**
         * Lbfabe_BenfAssrAvntVerst
         */
        beneficiaireAssuranceAvenantVersement: string;
        /**
         * Cdfaex_CodeCouvExts
         */
        codeCouvertureExts: number;
        /**
         * Ctfarq_TypeRisq
         */
        typeRisque: number;
        /**
         * CodeAssrObgt
         */
        codeAssuranceObligatoire: number;
        /**
         * Cdfaat_CodeAssrPart
         */
        codeAssurancePart: number;
        /**
         * Cdfarv_CodeResr
         */
        codeResr: number;
        /**
         * Lbfaex_LiblAssrExtn
         */
        libelleAssuranceExterne: string;
        /**
         * Nosrn_NumeSirenCieAssr
         */
        numeroSirenCieAssurance: string;
        /**
         * Nrfcan_NumeReglCalcDateEfft
         */
        numeroRegleCalculDateEffet: string;
        /**
         * Ctfaaa_CodeAgreAssrExtr
         */
        codeAgreAssuranceExtr: number;
        /**
         * MontantIndemniteJournaliere
         */
        montantIndemniteJournaliere: number;
        /**
         * Ctfact_EstQSSaisi
         */
        estQSSaisi: boolean;
    }
    interface IAccessoireComplementaireMaj extends IAccessoireMaj {
        /**
         * Cnfcoi_CodeNatrOrigAccs
         */
        codeNatureOrigineAccessoire: number;
    }
    interface IAccessoireLieProduitMaj extends IAccessoireMaj {
    }
    interface IServiceSurObjetMaj extends IAccessoireMaj {
        /**
         * Nrfcan_NumeReglCalcDateEfftServ
         */
        numeroRegleCalculDateEffetService: string;
    }
    interface IAccessoireMaj extends IElementMaj {
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Txfipf_PartFinnAccs
         */
        partFinancierAccessoire: number;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Ddfaaa_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffaaa_DateFinEfft
         * Type date au format yyyy-MM-dd
         */
        dateFinEffet: string;
        /**
         * Cdfpim_CodeBeneficiaire
         */
        codeBeneficiaire: string;
    }
    interface ITrancheMontantMaj extends ICotisationMaj {
        /**
         * Txfcaa_TxTrchMt
         */
        tauxTrancheMontant: number;
    }
    interface ICotisationTrancheAgeMaj extends ICotisationMaj {
    }
    interface ICotisationPhaseMaj extends ICotisationMaj {
    }
    interface ICotisationPeriodeMaj extends ICotisationMaj {
        /**
         * Npfcel_NbPerdetlm
         */
        nombrePerdetlm: number;
        /**
         * Pefcde_PerdEtlm
         */
        periodeEtlm: number;
    }
    interface ICotisationDerogationMaj extends ICotisationMaj {
    }
    interface ICotisationMaj extends IElementMaj {
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: number;
        /**
         * Cifccb_CodeIndicBlcgSaisMont
         */
        codeIndiceBlcgSaisieMontant: number;
        /**
         * Pefcac_CodePerdCalc
         */
        codePeriodeCalcul: number;
        /**
         * Dtfhac_DateApplCots
         * Type date au format yyyy-MM-dd
         */
        dateApplicationCotisation: string;
        /**
         * Ddfhac_DateDebtAppliCots
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplicationCotisation: string;
        /**
         * Dffhac_DateFinAppliCots
         * Type date au format yyyy-MM-dd
         */
        dateFinApplicationCotisation: string;
        /**
         * Mtfhac_MtAsst
         */
        montantAssiette: number;
        /**
         * Ctfcel_CodeTypeAsstCalculElt
         */
        codeTypeAssietteCalculElt: string;
        /**
         * Cdfc1a_CodeRegleEvtPremierAppel
         */
        codeRegleEvenementPremierAppel: string;
        /**
         * Ctftva_CodeTypeTvaAcc
         */
        codeTypeTVAAccessoire: string;
        /**
         * Npfdaa_NbJoursAnneeNumerateur
         */
        nombreJoursAnneeNumerateur: number;
        /**
         * Npfdad_NbJoursAnneeDenominateur
         */
        nombreJoursAnneeDenominateur: number;
        /**
         * Npfce1_NbPerdAppliCots
         */
        nombrePeriodeApplicationCotisation: number;
        /**
         * Pefcde_PerdAppliCots
         */
        periodeApplicationCotisation: number;
        /**
         * Mtfgfr_MtFrsGarn
         */
        montantFrsGarantie: number;
        /**
         * Txfipf_PartFinn
         */
        partFinancier: number;
        /**
         * Cdfceh_CodeRecv
         */
        codeRecouvrement: number;
    }
    interface ICouvertureCreditMaj extends IElementMaj {
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
        /**
         * Mefaas_MtEcheCouv
         */
        montantEcheanceCouverture: number;
        /**
         * Dffgaf_DateFinAffecCouv
         * Type date au format yyyy-MM-dd
         */
        dateFinAffectationCouverture: string;
        /**
         * Idfcoc_IdPretOrgCaution
         */
        idPretOrganismeCaution: string;
        /**
         * Mtfiae_CoutAssExt8Ans
         */
        coutAssuranceExterne8Ans: number;
        /**
         * Mcfiae_CoutTotAssExt
         */
        coutTotalAssuranceExterne: number;
    }
    interface IAplMaj extends IElementMaj {
        /**
         * Mtfiba_MtApl
         */
        montantAPL: number;
        /**
         * Ctfape_PerdicApl
         */
        periodiciteAPL: number;
    }
    interface ICompteProfessionnelMaj extends ICompteMaj {
        /**
         * Nbfmjp_NbJourDepsAutrPourCpteProf
         */
        nombreJourDepsAutrePourCompteProf: number;
        /**
         * Cdfmxp_CodeCtx
         */
        codeCtx: number;
    }
    interface ICompteDepotMaj extends ICompteMaj {
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmet_NumeEnttTitl
         */
        numeroEntiteTitulaire: number;
        /**
         * Lbfmet_LiblEnttTitl
         */
        libelleEntiteTitulaire: string;
        /**
         * Cdfmmc_CodeCompoEntiteTitulaire
         */
        codeCompositionEntiteTitulaire: number;
        /**
         * Cdfmcp_CodeEttPrdt
         */
        codeEtatProduit: number;
        /**
         * Mtfmmy_SoldMoyeLongTermCpteDepoCe
         */
        soldMoyenLongTermeCompteDepoCE: number;
        /**
         * Mtfmbs_SoldMiniCpteDepoCe
         */
        soldMinimumCompteDepoCE: number;
        /**
         * Mtfmds_SoldRelCpteDepoCe
         */
        soldRelCompteDepoCE: number;
        /**
         * Ctfmca_CodeTypeCart
         */
        codeTypeCartographie: number;
        /**
         * Dtfmca_DateDelvCart
         * Type date au format yyyy-MM-dd
         */
        dateDelvCartographie: string;
        /**
         * Ctfmtd_CodeTypeDecvCpteDepo
         */
        codeTypeDecvCompteDepo: number;
        /**
         * Mtfmde_MtDecvAutrSurCpteDepo
         */
        montantDecvAutreSurCompteDepo: number;
        /**
         * Mtfmvr_MtTotlVerstCredRelsSurCpteDepo
         */
        montantTotalVersementCreditReleaseSurCompteDepo: number;
        /**
         * Nbfmjd_NbJourDepsAutrDecv
         */
        nombreJourDepsAutreDecv: number;
        /**
         * Mtfmpe_MtPrelExteRelsSurCpteDepo
         */
        montantPrelExteReleaseSurCompteDepo: number;
        /**
         * Cdfmdj_CodeDepsJust
         */
        codeDepsJustificatif: number;
        /**
         * Cdfmdi_CodePresDecvIrreSurCpteDepo
         */
        codePresDecvIrreSurCompteDepo: number;
        /**
         * Cdfmae_CodeExstCartBancHorsCe
         */
        codeExisteCartographieBancaireHorsCE: number;
        /**
         * Cdfmrc_CodeComnRelvCpteHorsCe
         */
        codeComnRelvCompteHorsCE: number;
        /**
         * Cdfmch_CodeExstCheq
         */
        codeExisteCheq: number;
        /**
         * Mtfmyc_SoldMoyeMensCrtCpteDepoCe
         */
        soldMoyenMensCreationCompteDepoCE: number;
        /**
         * Mtfmcm_MvtCredMensSurCpteDepo
         */
        mvtCreditMensSurCompteDepo: number;
        /**
         * Ctfmfc_CodeTypeFctCpteDepoCeHorsCe
         */
        codeTypeFctCompteDepoCEHorsCE: number;
        /**
         * Ddfmhc_DateOuerCpteDepoHorsCe
         * Type date au format yyyy-MM-dd
         */
        dateOuerCompteDepoHorsCE: string;
        /**
         * Lifcee_LibEtabHorsCE
         */
        libelleEtablissementHorsCE: string;
        /**
         * Mcffa1_MtTotAgiosM1HorsCE
         */
        montantTotalAgiosM1HorsCE: number;
        /**
         * Mcffa2_MtTotAgiosM2HorsCE
         */
        montantTotalAgiosM2HorsCE: number;
        /**
         * Mcffa3_MtTotAgiosM3HorsCE
         */
        montantTotalAgiosM3HorsCE: number;
        /**
         * Ciffci_IndCommIntCDDHorsCE
         */
        indicateurCommIntervCDDHorsCE: number;
        /**
         * Ciffim_IndImpayeCDDHorsCE
         */
        indicateurImpayeCDDHorsCE: number;
        /**
         * Ciffrc_IndRejetChqCDDHorsCE
         */
        indicateurRejetChequeCDDHorsCE: number;
        /**
         * Ciffrp_IndRejetPrlvtCDDHorsCE
         */
        indicateurRejetPrelevCDDHorsCE: number;
        /**
         * Cifffi_IndFraisDosBDFCDDHorsCE
         */
        indicateurFraisDossBDFCDDHorsCE: number;
        /**
         * Ciffpp_IndPrlvtPartielCDDHorsCE
         */
        indicateurPrelevPartCDDHorsCE: number;
        /**
         * Nbffd1_NbJoursDebM1CDDHorsCE
         */
        nombreJoursDebiteurM1CDDHorsCE: number;
        /**
         * Nbffd2_NbJoursDebM2CDDHorsCE
         */
        nombreJoursDebiteurM2CDDHorsCE: number;
        /**
         * Nbffd3_NbJoursDebM3CDDHorsCE
         */
        nombreJoursDebiteurM3CDDHorsCE: number;
        /**
         * Mtfcsa_MtSoldeArreteM1CDDHorsCE
         */
        montantSoldeArreteM1CDDHorsCE: number;
        /**
         * Mtfcsb_MtSoldeArreteM2CDDHorsCE
         */
        montantSoldeArreteM2CDDHorsCE: number;
        /**
         * Mtfcsc_MtSoldeArreteM3CDDHorsCE
         */
        montantSoldeArreteM3CDDHorsCE: number;
    }
    interface ICompteMaj extends IElementMaj {
        /**
         * Dtfmou_DateOuvr
         * Type date au format yyyy-MM-dd
         */
        dateOuverture: string;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
    }
    interface IPhaseCreditExistantMaj extends IElementMaj {
        /**
         * Ddfcph_DateDebtPhas
         * Type date au format yyyy-MM-dd
         */
        dateDebutPhase: string;
        /**
         * Dffcph_DateFinPhas
         * Type date au format yyyy-MM-dd
         */
        dateFinPhase: string;
        /**
         * Meface_MtEchePhas
         */
        montantEcheancePhase: number;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Pftmam_PerdAmrt
         */
        periodeAmortissement: number;
    }
    interface ICreditExistantMaj extends IChargeMaj {
        /**
         * Cdfccg_CodeTypeCredCe
         */
        codeTypeCreditCE: string;
        /**
         * Cdfopc_CodePrsCompCred
         */
        codePresenceCompCredit: number;
        /**
         * Cdfimu_InvsUsgLocf
         */
        invsUsageLocf: number;
        /**
         * Ctfmlc_LienPersCred
         */
        lienPersonneCredit: number;
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Ctfmtc_CodeTypeCred
         */
        codeTypeCredit: number;
        /**
         * Mtfaoc_MtOrigCred
         */
        montantOrigineCredit: number;
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
        /**
         * Ddfmam_DateDebtAmrt
         * Type date au format yyyy-MM-dd
         */
        dateDebutAmortissement: string;
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmcp_RefePrdtCe
         */
        referenceProduitCE: string;
        /**
         * Nofmc2_CompRefePrdtCe
         */
        compReferenceProduitCE: string;
        /**
         * Nofmet_NumeEnttTitlCe
         */
        numeroEntiteTitulaireCE: number;
        /**
         * Lbfmet_LiblEnttTitlCe
         */
        libelleEntiteTitulaireCE: string;
        /**
         * Mkfmpc_MtCaptDejaRemb
         */
        montantCapitalDejaRemboursement: number;
        /**
         * Nbfmim_NbImpayes
         */
        nombreImpayes: number;
        /**
         * Nbfmir_NbImpeReglSurLesMoisGlss
         */
        nombreImpeRegleSurLesMoisGlss: number;
        /**
         * Npfmam_DureAmrt
         */
        dureAmortissement: number;
        /**
         * Cifgeh_CodeIndicAInclettHypt
         */
        codeIndiceAInclettHypotheque: boolean;
        /**
         * Mtfggi_MtGarn
         */
        montantGarantie: number;
        /**
         * Cmfmro_MotfRembAntc
         */
        motfRemboursementAnticipe: string;
        /**
         * Cdfmro_RembAvecAntc
         */
        remboursementAvecAnticipe: number;
        /**
         * Lbfmro_LiblMotfRembAntc
         */
        libelleMotfRemboursementAnticipe: string;
    }
    interface IChargeMaj extends IElementMaj {
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Txfmrc_TxPondChrg
         */
        tauxPondereCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Nufpct_NumeContEprg
         */
        numeroContratEpargne: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
    }
    interface IRevenuFiscalMaj extends IElementMaj {
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Ctfprm_TypeRevnMeng
         */
        typeRevnMeng: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
    }
    interface IPoolEPSMaj extends IElementMaj {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfaop_IdntOprtCess
         */
        idOprtCess: string;
        /**
         * Idfccf_IdntCadrFinn
         */
        idCadreFinancier: string;
        /**
         * Cnflpo_CodeNatrPool
         */
        codeNaturePool: number;
        /**
         * Cdfcor_CodeOrigCess
         */
        codeOrigineCess: number;
        /**
         * Ctfesr_TypeSousRolePool
         */
        typeSousRolePool: number;
        /**
         * Nofcca_NumVersionCadre
         */
        numeroVersionCadre: number;
    }
    interface ICourrierEPSMaj extends IElementMaj {
        /**
         * Ctfclv_TypeLettre
         */
        typeLettre: number;
        /**
         * Cdfpci_CodeCivilite
         */
        codeCivilite: string;
        /**
         * Lbfce1_AdresseLigne1
         */
        adresseLigne1: string;
        /**
         * Lbfce2_AdresseLigne2
         */
        adresseLigne2: string;
        /**
         * Lbfce3_AdresseLigne3
         */
        adresseLigne3: string;
        /**
         * Lbfce4_AdresseLigne4
         */
        adresseLigne4: string;
        /**
         * Lbfce5_AdresseLigne5
         */
        adresseLigne5: string;
        /**
         * Lbfce6_AdresseLigne6
         */
        adresseLigne6: string;
    }
    interface ICreditEPSMaj extends IElementMaj {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Txfccc_QuotCredCouvParEps
         */
        quotientCreditCouvertureParEPS: number;
        /**
         * Idfaez_RefeExtnCredCouvEps
         */
        referenceExterneCreditCouvertureEPS: string;
    }
    interface IPersonnePhysiqueMaj extends IPersonneMaj {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfppn_Prnm
         */
        prenom: string;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Lbfpnj_NomJeunFill
         */
        nomJeunFill: string;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNais: string;
        /**
         * Lbfpna_LieuNais
         */
        lieuNais: string;
        /**
         * Cdfpce_CodePersCe
         */
        codePersonneCE: number;
        /**
         * Cdfprm_CodeRegmMatr
         */
        codeRegimeMatrimonial: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpsp_CateSoc
         */
        cateInteret: string;
        /**
         * Dtfpma_DateEfftSittFaml
         * Type date au format yyyy-MM-dd
         */
        dateEffetSituationFamille: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmlo_CodeModeLogm
         */
        codeModeLogement: number;
        /**
         * Dtfmlo_DateEntrLogm
         * Type date au format yyyy-MM-dd
         */
        dateEntrLogement: string;
        /**
         * Cdfmju_CodeCapcJurd
         */
        codeCapcJuridique: number;
        /**
         * Ctfccj_CodeTypeCapJurd
         */
        codeTypeCapJuridique: string;
        /**
         * Cdfmnt_CodeNatn
         */
        codeNational: number;
        /**
         * Cdfmtd_CodeSaisAvisTierDtnr
         */
        codeSaisieAvisTiersDtnr: number;
        /**
         * Cdfmcx_CodeCtx
         */
        codeContentieuxHorsComptCE: number;
        /**
         * Mtfmes_MtEncrSaccefHorsOprt
         */
        montantEncoursSaccefHorsOprt: number;
        /**
         * Cdfmtr_TypeTrspUtls
         */
        typeTrspUtilisation: number;
        /**
         * Cdfmge_CodeGeotAdrsDomc
         */
        codeGeotAdresseDomiciliation: string;
        /**
         * Cdfppb_CodePaysResdEmpr
         */
        codePaysResdEmprunt: string;
        /**
         * Cdfopb_CodePaysLocsEmpr
         */
        codePaysLocalisationEmprunt: string;
        /**
         * Cdfkpa_CodePrflEmpr
         */
        codeProfilEmprunt: number;
        /**
         * Cofcpn_CodePstlLieuNais
         */
        codePstlLieuNais: string;
        /**
         * HebergementGratuit2Ans
         */
        hebergementGratuit2Ans: boolean;
        /**
         * RattachementFoyerFiscalN2
         */
        rattachementFoyerFiscalN2: boolean;
        /**
         * EnfantsGardeAlternee
         */
        enfantsGardeAlternee: boolean;
        /**
         * ActiviteProSeinLogement
         */
        activiteProSeinLogement: boolean;
    }
    interface IPersonneMoraleMaj extends IPersonneMaj {
        /**
         * Nufpin_NumeInsee
         */
        numeroINSEE: string;
        /**
         * Dtfpir_DateInscRcs
         * Type date au format yyyy-MM-dd
         */
        dateInscRcs: string;
        /**
         * Dtfpcs_DateCretSoce
         * Type date au format yyyy-MM-dd
         */
        dateCreationSoce: string;
        /**
         * Mcfpch_ChffAffrHtExrcPrec
         */
        chiffreAffrHtExrcPrec: number;
        /**
         * Nbfpsa_NbSalr
         */
        nombreSalr: number;
        /**
         * Cdfpfj_FormJurd
         */
        formeJuridique: string;
        /**
         * Cdfpdp_TypeDrtPersMorl
         */
        typeDroitPersonneMorl: number;
        /**
         * Mkfpca_MtCapt
         */
        montantCapital: number;
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
        /**
         * ListRolePersPhys
         */
        listeRolePersonnePhys: Array<string>;
    }
    interface IPersonneMaj extends IElementMaj {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Cdfprs_CrteResd
         */
        crteResd: number;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_CateTypeAdmnBafi
         */
        cateTypeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Idfpbd_CleBdf
         */
        cleBDF: string;
        /**
         * Dtfper_DateEntrReltAvecCons
         * Type date au format yyyy-MM-dd
         */
        dateEntrRelationAvecConsolide: string;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Cdfpap_CodeAssmPartc
         */
        codeAssmPartc: number;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
        /**
         * Lbfpen_EnsgComm
         */
        ensgCommission: string;
        /**
         * Lbfpir_LieuInscRC
         */
        lieuInscRC: string;
        /**
         * Nufpir_NumeInscRC
         */
        numeroInscRC: string;
        /**
         * RolePersonne
         */
        rolePersonne: number;
        /**
         * Rattachement
         */
        rattachement: boolean;
        /**
         * ForcerRattachement
         */
        forcerRattachement: boolean;
        /**
         * ForcerAjout
         */
        forcerAjout: boolean;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
    }
    interface IPayeurMaj extends IElementMaj {
        /**
         * Mtfdfx_MtPaieCred
         */
        montantPaiementCredit: number;
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
        /**
         * Cdfdrg_ModeReglUtlsParPayr
         */
        modeRegleUtilisationParPayr: string;
        /**
         * Nufddt_NumeCptePayr
         */
        numeroComptePayr: string;
        /**
         * PersonneMaj
         */
        personneMAJ: IPersonneMaj;
        /**
         * Idfdma_RefeUnqMand
         */
        referenceUniqueMand: string;
        /**
         * Dgfdma_DateSignMand
         * Type date au format yyyy-MM-dd
         */
        dateSigneMand: string;
        /**
         * Cdfdrs_ModeReglUtlsParPayrSecours
         */
        modeRegleUtilisationParPayrSecours: string;
        /**
         * NumeroComptePayeurSecours
         */
        numeroComptePayeurSecours: string;
        /**
         * Idfdms_RefeUnqMandSecours
         */
        referenceUniqueMandSecours: string;
        /**
         * Dgfdms_DateSignMandSecours
         * Type date au format yyyy-MM-dd
         */
        dateSigneMandSecours: string;
    }
    interface ICreditInterneMaj extends IElementMaj {
        /**
         * Idfccp_IdntConvPres
         */
        idConventionPres: string;
        /**
         * Cdfdae_CodeIndicEnvAvisEche
         */
        codeIndiceEnvoiAvisEcheance: number;
        /**
         * Cifaio_CodeIndicOptmImps
         */
        codeIndiceOptimisationImps: number;
        /**
         * Idfacs_RefeExtnCred
         */
        referenceExterneCredit: string;
        /**
         * Cdfccr_CodeIndicTrtInteIntr
         */
        codeIndiceTraitementInterieurIntr: number;
        /**
         * Cdfcia_CodeTypeActlInteIntr
         */
        codeTypeActuarielInterieurIntr: number;
        /**
         * Cdfbdv_CodeDevsVerst
         */
        codeDeviseVersement: string;
        /**
         * Cdfbje_CodeIndicExstPiecJustPourDeclechlVerst
         */
        codeIndiceExistePieceJustificatifPourDeclechlVersement: number;
        /**
         * Cdfbju_CodeExistJustDeclVerst
         */
        codeExistJustificatifDeclarationVersement: number;
        /**
         * Cdfbju_CodeTypeRattJustDecl
         */
        codeTypeRattachementJustificatifDeclaration: number;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Dhfacj_QuantEche
         */
        jourDateEcheance: number;
        /**
         * Cdfcie_CodeIndicelgbAuprInstemss
         */
        codeIndicelgbAuprInstemss: number;
        /**
         * Ccfarc_CodeIndicCalcAFaire
         */
        codeIndiceCalculAFaire: number;
        /**
         * Mtfael_MtPrimEparLogm
         */
        montantPrimeEpargneLogement: number;
        /**
         * Txfasr_TxNegcSurcRembAntc
         */
        tauxNegocieSurcRemboursementAnticipe: number;
        /**
         * Txfcpd_TxPondCntExtr
         */
        tauxPondereCntExtr: number;
        /**
         * Lbfpa1_InttCred
         */
        intituleLigneUn: string;
        /**
         * Nufbdt_DomcTres
         */
        domiciliationTres: string;
        /**
         * Nufbve_NumeDomcDispFond
         */
        numeroDomiciliationDispFond: string;
        /**
         * Mtfcve_MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * Cifaam_CodeIndicPresUneBonfUneMajreTx
         */
        codeIndicePresUneBonificationUneMajreTaux: number;
        /**
         * TegModeRestitution
         */
        tegModeRestitution: number;
        /**
         * Cefad0_CodeConfmRedcDurePTZ
         */
        codeConfirmationReductionDurePTZ: number;
        /**
         * Cefam0_CodeConfmRedcMtPTZ
         */
        codeConfirmationReductionMontantPTZ: number;
        /**
         * Mcface_MtCredEuro
         */
        montantCreditEuro: number;
        /**
         * Msfcpv_MtMaxPretPVH
         */
        montantMaximumPretPVH: number;
        /**
         * Cdfada_CodeDevsSaccef
         */
        codeDeviseSaccef: string;
        /**
         * Npfcfi_NbPerdCred
         */
        nombrePeriodeCredit: number;
        /**
         * Pefcfi_CodePerdCred
         */
        codePeriodeCredit: number;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
        /**
         * Mcfafd_CoutTotlFrsDossAsscCred
         */
        coutTotalFrsDossierAssuranceCredit: number;
        /**
         * Txfcmg_MargTxFutr
         */
        margeTauxFutr: number;
        /**
         * Txfacs_ValrTxIntl
         */
        valeurTauxInitial: number;
        /**
         * Txfamc_TxMontage
         */
        tauxMontage: number;
        /**
         * MontantPTZVerrouille
         */
        montantPTZVerrouille: boolean;
        /**
         * DureePTZVerrouillee
         */
        dureePTZVerrouillee: boolean;
        /**
         * EtatForcageFraisDossier
         */
        etatForcageFraisDossier: string;
    }
    interface ITACreditEPSMaj extends IElementMaj {
        /**
         * Nufcrl_NumRelCred
         */
        numeroRelCredit: number;
        /**
         * Dtfhpr_DateEchnMER
         * Type date au format yyyy-MM-dd
         */
        dateEcheanceMER: string;
        /**
         * Mkfh03_MtCaptAmrt
         */
        montantCapitalAmortissement: number;
        /**
         * Mkfd01_MtCaptRestDu
         */
        montantCapitalRestantDu: number;
        /**
         * Nufcet_NumEcheanceTable
         */
        numeroEcheanceTable: number;
    }
    interface IDroitUtiliseMaj extends IElementMaj {
        /**
         * Mtfadu_MtDrtAcqsUtls
         */
        montantDroitAcqsUtilisation: number;
        /**
         * Mtfali_MtDrtLimt
         */
        montantDroitLimite: number;
    }
    interface IDetailCoutObjetMaj extends IElementMaj {
        /**
         * Cnfctr_CodeNatrTrvx
         */
        codeNatureTravaux: string;
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Mtfoct_CoutTrvx
         */
        coutTravaux: number;
    }
    interface IComplementFicheContactMaj extends IElementMaj {
        /**
         * Hdfcpc_HrDebtPlgHor
         */
        hrDebutPlgHor: number;
        /**
         * Hffcpc_HrFinPlgHor
         */
        hrFinPlgHor: number;
        /**
         * Llfccp_Comentair
         */
        comentair: string;
    }
    interface IDocumentOffreIndustrialiseeMaj extends IElementMaj {
        /**
         * FluxDocument
         */
        fluxDocument: string;
    }
    interface IDocumentSignatureElectroniqueMaj extends IElementMaj {
        /**
         * IdentifiantComplet
         */
        identifiantComplet: string;
        /**
         * FluxBinaire
         */
        fluxBinaire: string;
    }
    interface IRessourceMaj extends IElementMaj {
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Mtfpre_MtRess
         */
        montantRessource: number;
        /**
         * Npfpre_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
    }
    interface IFamilleEpargneMaj extends IElementMaj {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Nbfmpr_NbPrdtDetnPourUneFamlPrdtAdr
         */
        nombreProduitDetnPourUneFamilleProduitAdresse: number;
        /**
         * Mtfmve_MtValrEprgAvntOper
         */
        montantValeurEpargneAvenantOper: number;
        /**
         * Lbfcej_LiblCaisEprg
         */
        libelleCaisseEpargne: string;
        /**
         * Dtfmve_DateValrEprg
         * Type date au format yyyy-MM-dd
         */
        dateValeurEpargne: string;
        /**
         * Mtfmep_MtEprgApreOper
         */
        montantEpargneApreOper: number;
    }
    interface IContratEpargneLogementMaj extends IElementMaj {
        /**
         * Cdfppr_CodeTypeEL
         */
        codeTypeEL: string;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
        /**
         * Ctfpli_LienParnAvecCedn
         */
        lienParentAvecCedn: number;
        /**
         * Lbfptc_LiblTitlCont
         */
        libelleTitulaireContrat: string;
        /**
         * Cdfpbc_CodeIndicBenePrimEl
         */
        codeIndiceBenePrimeEpargneLogement: number;
        /**
         * Ddfpct_DateOuvrCont
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureContrat: string;
        /**
         * Dtfprf_DateCltrCont
         * Type date au format yyyy-MM-dd
         */
        dateClotureContrat: string;
        /**
         * Cdfifr_CodeForc
         */
        codeForc: number;
        /**
         * Cdfiel_CodeRaptContEparLogm
         */
        codeRaptContratEpargneLogement: number;
        /**
         * Idfppc_IdntPersApprDrtCont
         */
        idPersonneApportDroitContrat: string;
        /**
         * Cdfpdj_CodeDrtJust
         */
        codeDroitJustificatif: number;
        /**
         * Cdfird_CodeResrDrtAcqs
         */
        codeResrDroitAcqs: number;
        /**
         * RapatrierTranche
         */
        rapatrierTranche: boolean;
        /**
         * DroitEstCede
         */
        droitEstCede: boolean;
        /**
         * Nufpct_IdntContEl
         */
        idContratEpargneLogement: string;
        /**
         * AttributionPrime
         */
        attributionPrime: boolean;
    }
    interface ITrancheELMaj extends IElementMaj {
        /**
         * Txfpep_TxEpar
         */
        tauxEpargne: number;
        /**
         * Mtfaac_MtDrtAcqs
         */
        montantDroitAcqs: number;
        /**
         * Dtfpae_DateArreEpar
         * Type date au format yyyy-MM-dd
         */
        dateArreEpargne: string;
        /**
         * Lbfpet_LibletblOrigDrtPret
         */
        libletblOrigineDroitPret: string;
        /**
         * Cdfdpj_CodeDrtJust
         */
        codeDroitJustificatif: number;
        /**
         * Cdfiel_CodeRaptContEparLogm
         */
        codeRaptContratEpargneLogement: number;
        /**
         * Mtfida_MtDrtAcqsDepsOrigContEparLogm
         */
        montantDroitAcqsDepsOrigineContratEpargneLogement: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfird_CodeResrDrtAcqs
         */
        codeResrDroitAcqs: number;
    }
    interface IOppositionMaj extends IElementMaj {
        /**
         * Cdfmop_CodeOppo
         */
        codeOpposition: string;
        /**
         * Ddfmop_DateDebtOppo
         * Type date au format yyyy-MM-dd
         */
        dateDebutOpposition: string;
        /**
         * Dffmop_DateFinOppo
         * Type date au format yyyy-MM-dd
         */
        dateFinOpposition: string;
    }
    interface IVersementFractionneMaj extends IElementMaj {
        /**
         * Ptfbmv_PerdicVerst
         */
        periodiciteVersement: number;
        /**
         * Mvfbmv_MtPremVerst
         */
        montantPremierVersement: number;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nufbve_NumrDomcMadFond
         */
        numeroDomiciliationMADFond: string;
        /**
         * Mvfbmf_MtVerstFrct
         */
        montantVersementFraction: number;
        /**
         * Nbfbvs_NbVerstSouh
         */
        nombreVersementSouh: number;
        /**
         * Mvfcpm_MtVerstPerdMaxm
         */
        montantVersementPeriodeMaximum: number;
        /**
         * Mvfcim_MtVerstIntlMaxm
         */
        montantVersementInitialMaximum: number;
        /**
         * Txfcpv_QuotPremVerst
         */
        quotientPremierVersement: number;
        /**
         * Txfcvp_QuotVerstPerd
         */
        quotientVersementPeriode: number;
    }
    interface IBienAVendreMaj extends IElementMaj {
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Ctfcor_CodeTypeObjtRegl
         */
        codeTypeObjetRegle: string;
        /**
         * Ctfmve_TypeVent
         */
        typeVent: number;
        /**
         * Mtfmvc_PrixNetVndr
         */
        prixNetVendeur: number;
        /**
         * Mtfmva_MtCrdSurBienVend
         */
        montantCRDSurBienVend: number;
        /**
         * Mtfgrd_MtCrdRachSurBienVend
         */
        montantCRDRachSurBienVend: number;
        /**
         * Mtfaag_MtComsAgnc
         */
        montantComsAgence: number;
        /**
         * Mtfaoc_MtAcqs
         */
        montantAcqs: number;
        /**
         * Dtfaoc_DateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateAcqs: string;
        /**
         * Ctfmma_ModeAcqs
         */
        modeAcqs: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
    }
    interface IComplementDossierMaj extends IElementMaj {
        /**
         * Llfidr_LiblDelRelsProj
         */
        libelleDelReleaseProjet: string;
        /**
         * Ctfipt_CodePrrtTrt
         */
        codePrrtTraitement: string;
        /**
         * Dtfisi_DateSaisSurItnt
         * Type date au format yyyy-MM-dd
         */
        dateSaisieSurInternet: string;
        /**
         * Hefisi_HeurSaisSurItnt
         */
        heureSaisieSurInternet: number;
    }
    interface IReamenagementMaj extends IElementMaj {
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
        /**
         * Ctfmup_UsgPretTres
         */
        usagePretTres: number;
        /**
         * Mtfmvc_AncnEche
         */
        ancnEcheance: number;
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * Mtfmvd_ValrAchtObjtFinn
         */
        valeurAchtObjetFinancier: number;
        /**
         * Npfmrp_DureResdPretRefn
         */
        dureResdPretRefn: number;
        /**
         * Dtfoac_DateAcqsObjtRefn
         * Type date au format yyyy-MM-dd
         */
        dateAcqsObjetRefn: string;
        /**
         * Mtfaoc_CoutAcqsObjtRefn
         */
        coutAcqsObjetRefn: number;
    }
    interface IPretReamenageMaj extends IElementMaj {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfao2_IdntDossOrig
         */
        idDossierOrigine: string;
        /**
         * Cdfcpo_CodePrdtetbl
         */
        codePrdtetbl: string;
        /**
         * Cdfars_CodeApparRes
         */
        codeApparRes: boolean;
        /**
         * Ctfars_TypeApparRes
         */
        typeApparRes: number;
        /**
         * Dtfccl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * Mefacg_MtechePerdPretRefn
         */
        mtechePeriodePretRefn: number;
        /**
         * Peface_Perdeche
         */
        perdeche: number;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Lbfcvs_LiblPrdt
         */
        libelleProduit: string;
        /**
         * Ctfals_TypeRegl
         */
        typeRegle: number;
        /**
         * Ctfmtc_TypeCred
         */
        typeCredit: number;
        /**
         * Lbfaep_NometblPret
         */
        nometblPret: string;
        /**
         * Ctfpag_CodeOrigAppliGestCred
         */
        codeOrigineApplicationGestionCredit: number;
        /**
         * Cdfidr_CodeDev
         */
        codeDev: string;
    }
    interface IInfoRegroupementMaj extends IElementMaj {
        /**
         * Mkfd01_MtCrd
         */
        montantCRD: number;
        /**
         * Cifcao_OrigInfoSurMtCrd
         */
        origineInformationSurMontantCRD: number;
        /**
         * Dtfcer_DateEnvsPourRembAntc
         * Type date au format yyyy-MM-dd
         */
        dateEnvsPourRemboursementAnticipe: string;
        /**
         * Cdfara_CodeExstModlIndmRaSurCred
         */
        codeExisteModeleIndemniteRaSurCredit: number;
        /**
         * Mtfhir_MtEstmRa
         */
        montantEstmRa: number;
        /**
         * Cifca1_OrigInfoSurMtEstmIndmRa
         */
        origineInformationSurMontantEstmIndemniteRa: number;
        /**
         * Cifafr_CodeIndicFinnIndmRa
         */
        codeIndiceFinancierIndemniteRa: number;
        /**
         * Cifamp_CodeModlPrevPourRa
         */
        codeModelePrevPourRa: number;
        /**
         * Cifca2_OrigInfoSurExstPrevCont
         */
        origineInformationSurExistePrevContrat: number;
        /**
         * Npfapr_DelPrevCont
         */
        delPrevContrat: number;
        /**
         * Cifca3_OrigInfoSurDelPrevCont
         */
        origineInformationSurDelPrevContrat: number;
        /**
         * Cifagh_ExstUneGarnHypt
         */
        existeUneGarantieHypotheque: number;
        /**
         * Mtfgmt_MtFrsMainTotlUneGarnHypt
         */
        montantFrsMainTotalUneGarantieHypotheque: number;
        /**
         * Cifac4_OrigInfoSurMtFrsMainTotl
         */
        origineInformationSurMontantFrsMainTotal: number;
        /**
         * Cifafm_CodeFinnFrsMain
         */
        codeFinancierFrsMain: number;
        /**
         * Mtfaid_MtInteDusJusqFinCred
         */
        montantInterieurDusJusqFinCredit: number;
        /**
         * Ctfcaf_CodeAffecTypeObjt
         */
        codeAffectationTypeObjet: number;
        /**
         * Mefepd_MtecheHorsAccs
         */
        mtecheHorsAccessoire: number;
        /**
         * Cifca5_OrigInfoSurMtecheHorsAccs
         */
        origineInformationSurMtecheHorsAccessoire: number;
        /**
         * Trfrtx_TxRefe
         */
        tauxReference: number;
        /**
         * Cifac6_OrigInfoSurTxRefe
         */
        origineInformationSurTauxReference: number;
        /**
         * Dtfari_DateRappDonn
         * Type date au format yyyy-MM-dd
         */
        dateRappDonneur: string;
        /**
         * Cifac7_OrigInfoSurDateFinCred
         */
        origineInformationSurDateFinCredit: number;
        /**
         * Cifac8_OrigInfoSurMtRestDuSuurPretRach
         */
        origineInformationSurMontantRestantDuSuurPretRach: number;
        /**
         * Cifac9_OrigInfoSurTypeLoiScrvCredRach
         */
        origineInformationSurTypeLoiScrivenerCreditRach: number;
    }
    interface IPlanFinancementMaj extends IElementMaj {
        /**
         * Cifaai_IndicAllt
         */
        indiceAllt: number;
        /**
         * Mtfaap_MtApprPers
         */
        montantApportPersonne: number;
        /**
         * Mtfmpl_MtPretEparLogmTher
         */
        montantPretEpargneLogementTher: number;
        /**
         * Dtfcep_DateEditPropCred
         * Type date au format yyyy-MM-dd
         */
        dateEditPropCredit: string;
        /**
         * Npfamo_DurSouh
         */
        dureeSouh: number;
    }
    interface ICreditExterneMaj extends IElementMaj {
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Npface_DureAmrtMois
         */
        dureAmortissementMois: number;
        /**
         * Txface_TxAmrt
         */
        tauxAmortissement: number;
        /**
         * Mkface_MtCapt
         */
        montantCapital: number;
        /**
         * Meface_MtecheAmrt
         */
        mtecheAmortissement: number;
        /**
         * Peface_CodePerdAmrt
         */
        codePeriodeAmortissement: number;
        /**
         * Cdfaia_CodeIndicInteTantPPers
         */
        codeIndiceInterieurTantPPersonne: number;
        /**
         * Lbface_LiblLibrSurConcr
         */
        libelleLibrSurConcr: string;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfwna_CodeIndicNatrPret
         */
        codeIndiceNaturePret: number;
        /**
         * Cnfctx_CodeIndicTxRevs
         */
        codeIndiceTauxRevision: number;
        /**
         * Npfwdd_DureDiffMois
         */
        dureDiffereMois: number;
        /**
         * Ctfwsr_TypeSurt
         */
        typeSurtaxe: number;
        /**
         * Cdfwch_CodeIndicPresAssrPertEmpl
         */
        codeIndicePresAssurancePertEmpl: number;
        /**
         * Ctfwtb_CodeIndicTypeRemb
         */
        codeIndiceTypeRemboursement: number;
        /**
         * Txfatg_TegActu
         */
        tegActu: number;
        /**
         * Mefadi_MtecheDiff
         */
        mtecheDiffere: number;
        /**
         * Pefadi_CodePerdDiff
         */
        codePeriodeDiffere: number;
    }
    interface IPalierContraintMaj extends IElementMaj {
        /**
         * Dfpe_DateFinPerd
         * Type date au format yyyy-MM-dd
         */
        dateFinPeriode: string;
        /**
         * Meface_MtEche
         */
        montantEcheance: number;
        /**
         * Npfpco_DurePalr
         */
        durePalier: number;
    }
    interface IVersementAttenduMaj extends IElementMaj {
        /**
         * Ctftve_TypeVerst
         */
        typeVersement: string;
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
        /**
         * Dtfdeb_DateDebt
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * Dtfvfn_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Ctfapi_PerdVerst
         */
        periodeVersement: number;
    }
    interface IProprietaireMaj extends IElementMaj {
        /**
         * Txffim_QuotPleinProp
         */
        quotientPleinProp: number;
        /**
         * Txfcnp_QuotNueProp
         */
        quotientNueProp: number;
        /**
         * Txfcdu_QuotUsuf
         */
        quotientUsuf: number;
        /**
         * Txfcus_QuotDroiUsag
         */
        quotientDroiUsag: number;
        /**
         * Ctfcdb_CdModDettnBien
         */
        codeModDettnBien: number;
    }
    interface IReferenceCadastraleMaj extends IElementMaj {
        /**
         * Lbfoca_ReferenceCadastre
         */
        referenceCadastre: string;
        /**
         * Lbfcsc_SectionCadastre
         */
        sectionCadastre: string;
        /**
         * Qtfcsc_SurfaceReferenceCadastrale
         */
        surfaceReferenceCadastrale: number;
        /**
         * Llfcob_commentaires
         */
        commentaires: string;
    }
    interface IReferenceLotMaj extends IElementMaj {
        /**
         * Lbfolt_ReferenceTypeDeLot
         */
        referenceTypeDeLot: string;
        /**
         * Llfcnl_NatureDuLot
         */
        natureDuLot: string;
        /**
         * Nbftta_Tantieme
         */
        tantieme: number;
    }
    interface IPatrimoineImmobilierMaj extends IElementMaj {
        /**
         * Ctfcnp_NatrPtrmImmb
         */
        naturePatrimoineImmobilier: number;
        /**
         * Cdfcdo_CodeIndicUsgLogm
         */
        codeIndiceUsageLogement: number;
        /**
         * Mtfmvb_ValrActlPtrm
         */
        valeurActuarielPatrimoine: number;
        /**
         * Dtfdac_DateAcqsPtrm
         * Type date au format yyyy-MM-dd
         */
        dateAcqsPatrimoine: string;
        /**
         * Mkfkrd_CaptRestSurPtrm
         */
        capitalRestantSurPatrimoine: number;
        /**
         * Mefhpa_MensPretSurPtrm
         */
        mensPretSurPatrimoine: number;
        /**
         * Dffacr_DateFinPretSurPtrm
         * Type date au format yyyy-MM-dd
         */
        dateFinPretSurPatrimoine: string;
    }
    interface IClausePersonnaliseeMaj extends IElementMaj {
        /**
         * DestClsePers
         */
        destinataireClausePersonne: number;
        /**
         * LiblClsePers
         */
        libelleClausePersonne: string;
    }
    interface IAvisMaj extends IElementMaj {
        /**
         * Dtfaad_DateSaisAvis
         * Type date au format yyyy-MM-dd
         */
        dateSaisieAvis: string;
        /**
         * Lbfaad_LiblAvis
         */
        libelleAvis: string;
        /**
         * Ctfita_CodeTyplAvis
         */
        codeTypologieAvis: string;
        /**
         * Valide
         */
        valide: boolean;
        /**
         * Motif
         */
        motif: string;
    }
    interface IAvisOrganismeExterneMaj extends IElementMaj {
        /**
         * Idfcex_IdntExtnEnv
         */
        idExterneEnvoi: string;
        /**
         * Dtfal1_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd
         */
        dateAvis: string;
        /**
         * Cifctr_CodeIndicTrtEnv
         */
        codeIndiceTraitementEnvoi: number;
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Cdfar2_CodeMotf
         */
        codeMotf: string;
        /**
         * Llfar1_LiblAvisDecs1
         */
        libelleAvisDecision1: string;
        /**
         * Llfar2_LiblAvisDecs2
         */
        libelleAvisDecision2: string;
        /**
         * Lbfpin_NomAgntInstr
         */
        nomAgentInstruction: string;
        /**
         * Nufpt1_NumeTeleInstr
         */
        numeroTeleInstruction: string;
        /**
         * Lbfpma_LiblAdrsMail
         */
        libelleAdresseMail: string;
        /**
         * Nufpt2_NumeFaxInstr
         */
        numeroFaxInstruction: string;
        /**
         * Cdfar1_TypeLiaiSaccefTp
         */
        typeLiaiSaccefTp: number;
        /**
         * Cdfar3_TypeRepnOrgnExtn
         */
        typeRepnOrgnExterne: number;
    }
    interface IVersementMaj extends IElementMaj {
        /**
         * MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * Txfave_PctVerst
         */
        pourcentageVersement: number;
        /**
         * Nufccl_NumeOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Lbfasa_LiblAvnc
         */
        libelleAvnc: string;
    }
    interface IOrigineApportMaj extends IElementMaj {
        /**
         * Cdfoap_CodeOrigine
         */
        codeOrigine: number;
        /**
         * Mtfoap_MontantApportOrigine
         */
        montantApportOrigine: number;
    }
    interface IRedacteurActeMaj extends IElementMaj {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Lbfpnm_NomRedcActe
         */
        nomReductionActe: string;
        /**
         * Lbfppn_PrenRedcActe
         */
        prenReductionActe: string;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IAplLecture extends IElementLecture {
        /**
         * Mtfiba_MtApl
         */
        montantAPL: number;
        /**
         * TypeApl
         */
        typeAPL: number;
        /**
         * Ctfape_PerdicApl
         */
        periodiciteAPL: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
    }
    interface ILigneTirageLecture extends IElementLecture {
        /**
         * Idfcej_IdntCaisEprg
         */
        idCaisseEpargne: number;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfcct_IdntCredElem
         */
        idCreditElement: string;
        /**
         * Lbvspo_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Npfbfi_DureCred
         */
        dureCredit: number;
        /**
         * Pefcfi_PerdCred
         */
        periodeCredit: number;
        /**
         * Mtfact_MtActlCred
         */
        montantActuarielCredit: number;
        /**
         * Txfamo_TxActuCred
         */
        tauxActuCredit: number;
    }
    interface ILigneInvestissementLecture extends IElementLecture {
        /**
         * Idfaoe_IdntOperAsscLignInvs
         */
        idOperAssuranceLigneInvs: string;
        /**
         * Dtfano_DateNotfAccr
         * Type date au format yyyy-MM-dd
         */
        dateNotfAccr: string;
        /**
         * Dffano_DateFinValdAccr
         * Type date au format yyyy-MM-dd
         */
        dateFinValiditeAccr: string;
        /**
         * Mtfaso_MtEmprTotlSurPlan
         */
        montantEmpruntTotalSurPlan: number;
        /**
         * Mkfadi_MtRestDisp
         */
        montantRestantDisp: number;
        /**
         * Dtam_DateAnnlModf
         * Type date au format yyyy-MM-dd
         */
        dateAnnulationModification: string;
        /**
         * Cdam_CodeMotfAnnlModf
         */
        codeMotfAnnulationModification: string;
        /**
         * ListIdntLignTirg
         */
        listeIdLigneTirg: Array<string>;
    }
    interface IInfoRegroupementLecture extends IElementLecture {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Mkfd01_MtCrd
         */
        montantCRD: number;
        /**
         * Cifcao_OrigInfoSurMtCrd
         */
        origineInformationSurMontantCRD: number;
        /**
         * Dtfcer_DateEnvsPourRembAntc
         * Type date au format yyyy-MM-dd
         */
        dateEnvsPourRemboursementAnticipe: string;
        /**
         * Cdfara_CodeExstModlIndmRaSurCred
         */
        codeExisteModeleIndemniteRaSurCredit: number;
        /**
         * Mtfhir_MtEstmRa
         */
        montantEstmRa: number;
        /**
         * Cifca1_OrigInfoSurMtEstmIndmRa
         */
        origineInformationSurMontantEstmIndemniteRa: number;
        /**
         * Cifafr_CodeIndicFinnIndmRa
         */
        codeIndiceFinancierIndemniteRa: number;
        /**
         * Cifamp_CodeModlPrevPourRa
         */
        codeModelePrevPourRa: number;
        /**
         * Cifca2_OrigInfoSurExstPrevCont
         */
        origineInformationSurExistePrevContrat: number;
        /**
         * Npfapr_DelPrevCont
         */
        delPrevContrat: number;
        /**
         * Cifca3_OrigInfoSurDelPrevCont
         */
        origineInformationSurDelPrevContrat: number;
        /**
         * Cifagh_ExstUneGarnHypt
         */
        existeUneGarantieHypotheque: number;
        /**
         * Mtfgmt_MtFrsMainTotlUneGarnHypt
         */
        montantFrsMainTotalUneGarantieHypotheque: number;
        /**
         * Cifac4_OrigInfoSurMtFrsMainTotl
         */
        origineInformationSurMontantFrsMainTotal: number;
        /**
         * Cifafm_CodeFinnFrsMain
         */
        codeFinancierFrsMain: number;
        /**
         * Mtfaid_MtInteDusJusqFinCred
         */
        montantInterieurDusJusqFinCredit: number;
        /**
         * Ctfcaf_CodeAffecTypeObjt
         */
        codeAffectationTypeObjet: number;
        /**
         * Mefepd_MtecheHorsAccs
         */
        mtecheHorsAccessoire: number;
        /**
         * Cifca5_OrigInfoSurMtecheHorsAccs
         */
        origineInformationSurMtecheHorsAccessoire: number;
        /**
         * Trfrtx_TxRefe
         */
        tauxReference: number;
        /**
         * Cifac6_OrigInfoSurTxRefe
         */
        origineInformationSurTauxReference: number;
        /**
         * Dtfari_DateRappDonn
         * Type date au format yyyy-MM-dd
         */
        dateRappDonneur: string;
        /**
         * Cifac7_OrigInfoSurDateFinCred
         */
        origineInformationSurDateFinCredit: number;
        /**
         * Cifac8_OrigInfoSurMtRestDuSuurPretRach
         */
        origineInformationSurMontantRestantDuSuurPretRach: number;
        /**
         * Cifac9_OrigInfoSurTypeLoiScrvCredRach
         */
        origineInformationSurTypeLoiScrivenerCreditRach: number;
        /**
         * IdntPretReam
         */
        idPretReamenagement: string;
    }
    interface ICompteProfessionnelLecture extends ICompteLecture {
        /**
         * Nofmcp_RefePrdtCe
         */
        referenceProduitCE: string;
        /**
         * Nbfmjp_NbJourDepsAutrPourCpteProf
         */
        nombreJourDepsAutrePourCompteProf: number;
        /**
         * Cdfmxp_CodeCtx
         */
        codeCtx: number;
    }
    interface ICompteDepotLecture extends ICompteLecture {
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmet_NumeEnttTitl
         */
        numeroEntiteTitulaire: number;
        /**
         * Lbfmet_LiblEnttTitl
         */
        libelleEntiteTitulaire: string;
        /**
         * Cdfmmc_CodeCompoEntiteTitulaire
         */
        codeCompositionEntiteTitulaire: number;
        /**
         * Cdfmcp_CodeEttPrdt
         */
        codeEtatProduit: number;
        /**
         * Mtfmmy_SoldMoyeLongTermCpteDepoCe
         */
        soldMoyenLongTermeCompteDepoCE: number;
        /**
         * Mtfmbs_SoldMiniCpteDepoCe
         */
        soldMinimumCompteDepoCE: number;
        /**
         * Mtfmds_SoldRelCpteDepoCe
         */
        soldRelCompteDepoCE: number;
        /**
         * Ctfmca_CodeTypeCart
         */
        codeTypeCartographie: number;
        /**
         * Dtfmca_DateDelvCart
         * Type date au format yyyy-MM-dd
         */
        dateDelvCartographie: string;
        /**
         * Ctfmtd_CodeTypeDecvCpteDepo
         */
        codeTypeDecvCompteDepo: number;
        /**
         * Mtfmde_MtDecvAutrSurCpteDepo
         */
        montantDecvAutreSurCompteDepo: number;
        /**
         * Mtfmvr_MtTotlVerstCredRelsSurCpteDepo
         */
        montantTotalVersementCreditReleaseSurCompteDepo: number;
        /**
         * Nbfmjd_NbJourDepsAutrDecv
         */
        nombreJourDepsAutreDecv: number;
        /**
         * Mtfmpe_MtPrelExteRelsSurCpteDepo
         */
        montantPrelExteReleaseSurCompteDepo: number;
        /**
         * Cdfmdj_CodeDepsJust
         */
        codeDepsJustificatif: number;
        /**
         * Cdfmdi_CodePresDecvIrreSurCpteDepo
         */
        codePresDecvIrreSurCompteDepo: number;
        /**
         * Cdfmae_CodeExstCartBancHorsCe
         */
        codeExisteCartographieBancaireHorsCE: number;
        /**
         * Cdfmrc_CodeComnRelvCpteHorsCe
         */
        codeComnRelvCompteHorsCE: number;
        /**
         * Cdfmch_CodeExstCheq
         */
        codeExisteCheq: number;
        /**
         * Mtfmyc_SoldMoyeMensCrtCpteDepoCe
         */
        soldMoyenMensCreationCompteDepoCE: number;
        /**
         * Mtfmcm_MvtCredMensSurCpteDepo
         */
        mvtCreditMensSurCompteDepo: number;
        /**
         * Ctfmfc_CodeTypeFctCpteDepoCeHorsCe
         */
        codeTypeFctCompteDepoCEHorsCE: number;
        /**
         * Ddfmhc_DateOuerCpteDepoHorsCe
         * Type date au format yyyy-MM-dd
         */
        dateOuerCompteDepoHorsCE: string;
        /**
         * Cdfmbq_Codeetbl
         */
        codeEtablissement: string;
        /**
         * Cdfmgu_CodeGuic
         */
        codeGuic: string;
        /**
         * LibelleFctCpteDepoCeHorsCe
         */
        libelleFctCpteDepoCeHorsCe: string;
        /**
         * Lifcee_LibEtabHorsCE
         */
        libelleEtablissementHorsCE: string;
        /**
         * Mcffa1_MtTotAgiosM1HorsCE
         */
        montantTotalAgiosM1HorsCE: number;
        /**
         * Mcffa2_MtTotAgiosM2HorsCE
         */
        montantTotalAgiosM2HorsCE: number;
        /**
         * Mcffa3_MtTotAgiosM3HorsCE
         */
        montantTotalAgiosM3HorsCE: number;
        /**
         * Ciffci_IndCommIntCDDHorsCE
         */
        indicateurCommIntervCDDHorsCE: number;
        /**
         * Ciffim_IndImpayeCDDHorsCE
         */
        indicateurImpayeCDDHorsCE: number;
        /**
         * Ciffrc_IndRejetChqCDDHorsCE
         */
        indicateurRejetChequeCDDHorsCE: number;
        /**
         * Ciffrp_IndRejetPrlvtCDDHorsCE
         */
        indicateurRejetPrelevCDDHorsCE: number;
        /**
         * Cifffi_IndFraisDosBDFCDDHorsCE
         */
        indicateurFraisDossBDFCDDHorsCE: number;
        /**
         * Ciffpp_IndPrlvtPartielCDDHorsCE
         */
        indicateurPrelevPartCDDHorsCE: number;
        /**
         * Nbffd1_NbJoursDebM1CDDHorsCE
         */
        nombreJoursDebiteurM1CDDHorsCE: number;
        /**
         * Nbffd2_NbJoursDebM2CDDHorsCE
         */
        nombreJoursDebiteurM2CDDHorsCE: number;
        /**
         * Nbffd3_NbJoursDebM3CDDHorsCE
         */
        nombreJoursDebiteurM3CDDHorsCE: number;
        /**
         * Mtfcsa_MtSoldeArreteM1CDDHorsCE
         */
        montantSoldeArreteM1CDDHorsCE: number;
        /**
         * Mtfcsb_MtSoldeArreteM2CDDHorsCE
         */
        montantSoldeArreteM2CDDHorsCE: number;
        /**
         * Mtfcsc_MtSoldeArreteM3CDDHorsCE
         */
        montantSoldeArreteM3CDDHorsCE: number;
    }
    interface ICompteLecture extends IElementLecture {
        /**
         * Nufpcp_NumeCpte
         */
        numeroCompte: string;
        /**
         * Dtfmou_DateOuvr
         * Type date au format yyyy-MM-dd
         */
        dateOuverture: string;
        /**
         * Ctfpdt_ModeCompo
         */
        modeComposition: number;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
        /**
         * Cdfppr_TypeCpte
         */
        typeCompte: string;
        /**
         * Libelle
         */
        libelle: string;
    }
    interface ICreditExistantLecture extends IChargeLecture {
        /**
         * Cdfccg_CodeTypeCredCe
         */
        codeTypeCreditCE: string;
        /**
         * Cdfopc_CodePrsCompCred
         */
        codePresenceCompCredit: number;
        /**
         * Cdfimu_InvsUsgLocf
         */
        invsUsageLocf: number;
        /**
         * Ctfmlc_LienPersCred
         */
        lienPersonneCredit: number;
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Ctfmtc_CodeTypeCred
         */
        codeTypeCredit: number;
        /**
         * Mtfaoc_MtOrigCred
         */
        montantOrigineCredit: number;
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
        /**
         * Ddfmam_DateDebtAmrt
         * Type date au format yyyy-MM-dd
         */
        dateDebutAmortissement: string;
        /**
         * Dtfam0_DateMer0
         * Type date au format yyyy-MM-dd
         */
        dateMER0: string;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmcp_RefePrdtCe
         */
        referenceProduitCE: string;
        /**
         * Nofmc2_CompRefePrdtCe
         */
        compReferenceProduitCE: string;
        /**
         * Nofmet_NumeEnttTitlCe
         */
        numeroEntiteTitulaireCE: number;
        /**
         * Lbfmet_LiblEnttTitlCe
         */
        libelleEntiteTitulaireCE: string;
        /**
         * Mkfmpc_MtCaptDejaRemb
         */
        montantCapitalDejaRemboursement: number;
        /**
         * Mefmpe_MtPrcheche
         */
        montantPrcheche: number;
        /**
         * Mefmea_MtPrmeecheAmrt
         */
        montantPrmeecheAmortissement: number;
        /**
         * Mefmpc_MtechePrsComp
         */
        mtechePresenceComp: number;
        /**
         * Nbfmim_NbImpayes
         */
        nombreImpayes: number;
        /**
         * Nbfmir_NbImpeReglSurLesMoisGlss
         */
        nombreImpeRegleSurLesMoisGlss: number;
        /**
         * Ptfmam_PerdAmrt
         */
        periodeAmortissement: number;
        /**
         * Npfmam_DureAmrt
         */
        dureAmortissement: number;
        /**
         * Cifgeh_CodeIndicAInclettHypt
         */
        codeIndiceAInclettHypotheque: boolean;
        /**
         * Mtfggi_MtGarn
         */
        montantGarantie: number;
        /**
         * Cmfmro_MotfRembAntc
         */
        motfRemboursementAnticipe: string;
        /**
         * Cdfmro_RembAvecAntc
         */
        remboursementAvecAnticipe: number;
        /**
         * Lbfmro_LiblMotfRembAntc
         */
        libelleMotfRemboursementAnticipe: string;
        /**
         * InvestissementLocatifVisible
         */
        investissementLocatifVisible: boolean;
        /**
         * InvestissementLocatifAccessible
         */
        investissementLocatifAccessible: boolean;
        /**
         * ListIdntPhssCredExst
         */
        listeIdPhssCreditExiste: Array<string>;
        /**
         * LibelleCodeTypeCred
         */
        libelleCodeTypeCred: string;
    }
    interface IChargeLecture extends IElementLecture {
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Txfmrc_TxPondChrg
         */
        tauxPondereCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Nufpct_NumeContEprg
         */
        numeroContratEpargne: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
        /**
         * Lbfpch_LiblCharge
         */
        libelleCharge: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * IdntGrpeIntv
         */
        idGrpeIntervenant: string;
    }
    interface IInterditBancaireLecture extends IElementLecture {
        /**
         * Cdfpbd_CodeRepnBdf
         */
        codeRepnBDF: number;
        /**
         * Cdfpfi_CodeRepnFicp
         */
        codeRepnFicp: number;
        /**
         * Ctfpbd_CodeTypeRepnBdf
         */
        codeTypeRepnBDF: string;
        /**
         * Ctfpfi_CodeTypeRepnFicp
         */
        codeTypeRepnFicp: string;
        /**
         * Dtfpbd_DateApplBdf
         * Type date au format yyyy-MM-dd
         */
        dateApplicationBDF: string;
        /**
         * Dtfpfi_DateApplFicp
         * Type date au format yyyy-MM-dd
         */
        dateApplicationFicp: string;
        /**
         * Lbfpbd_LiblRepnBdf
         */
        libelleRepnBDF: string;
        /**
         * Lbfpfi_LiblRepnFicp
         */
        libelleRepnFicp: string;
        /**
         * Cdfmas_CodeArreSurSalr
         */
        codeArreSurSalr: number;
        /**
         * Dtfpfb_DateApplFbe
         * Type date au format yyyy-MM-dd
         */
        dateApplicationFbe: string;
        /**
         * Cdfpfb_CodeRepnFbe
         */
        codeRepnFbe: number;
        /**
         * Cdfmln_CodePresListnSurCntrTechRegn
         */
        codePresListnSurCntrTechniqueRegn: number;
        /**
         * Lbfmln_LiblListnSurCntrTechRegn
         */
        libelleListnSurCntrTechniqueRegn: string;
        /**
         * Cbfpfb_CodeCottFibenDirg
         */
        codeCotisationFibenDirg: string;
        /**
         * IdntPersPhys
         */
        idPersonnePhys: string;
    }
    interface IActiviteLecture extends IElementLecture {
        /**
         * Cdfmcs_CodeClssRisqCsp
         */
        codeClasseRisqueCSP: number;
        /**
         * Lbfmcs_LibelleClssRisqCsp
         */
        libelleClasseRisqueCSP: string;
        /**
         * Dtfmcs_DateEfftCsp
         * Type date au format yyyy-MM-dd
         */
        dateEffetCSP: string;
        /**
         * Dtfmea_DateEmbc
         * Type date au format yyyy-MM-dd
         */
        dateEmbc: string;
        /**
         * Ctfmce_CodeTypeContEmbc
         */
        codeTypeContratEmbc: number;
        /**
         * Libelle_TypeContratEmbc
         */
        libelle_TypeContratEmbc: string;
        /**
         * Lbfmpl_RaisSoclEmplr
         */
        raisonSocialeEmplr: string;
        /**
         * Cpfmpl_CodePostEmplr
         */
        codePosteEmplr: string;
        /**
         * Lofmpl_CodeApNEmplr
         */
        codeApNEmplr: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmsa_CodePresActvSalr
         */
        codePresActiviteSalr: number;
        /**
         * Cdfmsu_CodePresSuivPers
         */
        codePresSuivantPersonne: number;
        /**
         * Nbfmkm_NbKilmEtrLogmTrvl
         */
        nombreKilmEntreLogementTrvl: number;
        /**
         * Dffmea_DateFinCdd
         * Type date au format yyyy-MM-dd
         */
        dateFinCdd: string;
        /**
         * Ctfmsa_CodeSectActv
         */
        codeSecteurActivite: number;
        /**
         * Libelle_SecteurActv
         */
        libelle_SecteurActivite: string;
        /**
         * IdntPersPhys
         */
        idPersonnePhys: string;
    }
    interface IButLocatifLecture extends IElementLecture {
        /**
         * Cdfopl_IndicPretTrnsLocf
         */
        indicePretTransfertLocf: boolean;
        /**
         * Nufofg_NumeDecsFavrGlbl
         */
        numeroDecisionFavrGlbl: number;
        /**
         * Dtfodf_DateDecsFavrLoct
         * Type date au format yyyy-MM-dd
         */
        dateDecisionFavrLoct: string;
        /**
         * Cdfofg_IndicDecsGlblFavr
         */
        indiceDecisionGlblFavr: boolean;
        /**
         * Dtfocl_DateConvLoct
         * Type date au format yyyy-MM-dd
         */
        dateConventionLoct: string;
        /**
         * Cdfofi_NatrAvtgFisc
         */
        natureAvantageFiscal: string;
        /**
         * Mtfofi_MtAvtgFisc
         */
        montantAvantageFiscal: number;
        /**
         * Mtfogl_MtFrsAnnlGestLogm
         */
        montantFrsAnnulationGestionLogement: number;
        /**
         * Mtfoel_MtFrsAnnlEntnLogm
         */
        montantFrsAnnulationEntnLogement: number;
        /**
         * Mtfofo_MtTaxeFonc
         */
        montantTaxeFonc: number;
        /**
         * Cdfolg_PresServVacnLogm
         */
        presServiceVacnLogement: boolean;
        /**
         * Cdfoli_PresUneAssrLoyeImpe
         */
        presUneAssuranceLoyeImpe: boolean;
        /**
         * Mtfolp_MtAnnuLoyePerc
         */
        montantAnnuLoyePerc: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface ISoulteFinanceeLecture extends IElementLecture {
        /**
         * Mtfoac_MtSoul
         */
        montantSoul: number;
        /**
         * Ctfmpt_PermDetrSiSoulFaitSuiteDivo
         */
        permDetrSiSoulFaitSuiteDivo: boolean;
        /**
         * Txfapo_PctPrprOrig
         */
        pourcentageProprietaireOrigine: number;
        /**
         * Mtfmvc_ValrActvCorrValrBienOrig
         */
        valeurActiviteCorrValeurBienOrigine: number;
        /**
         * Nbfosh_SurfHabtBienSous
         */
        surfHabitationBienSous: number;
        /**
         * Dtfoac_DateAcqsBienSous
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBienSous: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * IdntBienSjac
         */
        idBienSousJacent: string;
    }
    interface ITerrainSousJacentLecture extends IBienSousJacentLecture {
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfoft_TerrEstFinnParCred
         */
        terrEstFinancierParCredit: number;
        /**
         * Dtfoat_DateEntrPtrmDateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateEntrPatrimoineDateAcqs: string;
        /**
         * MtLoyeParMois
         */
        montantLoyeParMois: number;
        /**
         * Ctfmma_ModeAcqsTerr
         */
        modeAcqsTerr: number;
    }
    interface IDetailCoutObjetLecture extends IElementLecture {
        /**
         * Cnfctr_CodeNatrTrvx
         */
        codeNatureTravaux: string;
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Mtfoct_CoutTrvx
         */
        coutTravaux: number;
        /**
         * IdntTrvxFinn
         */
        idTravauxFinancier: string;
    }
    interface ITerrainFinanceLecture extends IElementLecture {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
        /**
         * Dtfaot_DateAcqsTerr
         * Type date au format yyyy-MM-dd
         */
        dateAcqsTerr: string;
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfodt_CodeDonTerr
         */
        codeDonTerr: number;
        /**
         * Cdfoft_CodeFinnTerr
         */
        codeFinancierTerr: number;
        /**
         * Mtfcfn_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IDossierLecture extends IElementLecture {
        /**
         * Idfadi_IdntDoss
         */
        idDossier: string;
        /**
         * VersDoss
         */
        versionDossier: number;
        /**
         * EstDossierPartenaire
         */
        estDossierPartenaire: boolean;
        /**
         * Cdfiei_CodeImprParExprVers
         */
        codeImprParExpressionVersement: number;
        /**
         * Cdfiag_CodeAppliChrgDoss
         */
        codeApplicationChargeDossier: number;
        /**
         * Nbfapo_NbPassOffr
         */
        nombrePassOffre: number;
        /**
         * Dtfmva_DateDernReslAdr
         * Type date au format yyyy-MM-dd
         */
        dateDernierReslAdresse: string;
        /**
         * Dgfano_DateHorzProj
         * Type date au format yyyy-MM-dd
         */
        dateHorizonProjet: string;
        /**
         * Cdfado_CodeVisbInstr
         */
        codeVisbInstruction: number;
        /**
         * DossExstCent
         */
        dossierExisteCentral: boolean;
        /**
         * NbPersAssrParDeft
         */
        nombrePersonneAssuranceParDeft: number;
        /**
         * ModfEffcPendSess
         */
        modificationEffcPendantSess: boolean;
        /**
         * ModeOuvrDoss
         */
        modeOuvertureDossier: number;
        /**
         * DossModf
         */
        dossierModification: boolean;
        /**
         * ExisteMandatSEPA
         */
        existeMandatSEPA: boolean;
        /**
         * PjPrealableToutesRecues
         */
        pjPrealableToutesRecues: boolean;
        /**
         * PjSuspensifToutesRecues
         */
        pjSuspensifToutesRecues: boolean;
        /**
         * TypeMoteurADR
         */
        typeMoteurADR: number;
        /**
         * Cifttv_TechVent
         */
        techniqueVent: number;
        /**
         * Cifoli_CodeLivrnImme
         */
        codeLivrnImme: boolean;
        /**
         * Nofaac_NumeAccrCmps
         */
        numeroAccrCmps: number;
        /**
         * Cnfaeg_EnggRevc
         */
        engagementRevc: number;
        /**
         * Dtfasp_DateSignPret
         * Type date au format yyyy-MM-dd
         */
        dateSignePret: string;
        /**
         * EvenMomnVertPourContConf
         */
        evenMomnVertPourContratConf: string;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * DateTrtRegl
         * Type date au format yyyy-MM-dd
         */
        dateTraitementRegle: string;
        /**
         * Cdfbve_ModReglVerst
         */
        modRegleVersement: string;
        /**
         * Cdfiro_IndicPrrgOffr
         */
        indicePrrgOffre: number;
        /**
         * Idfccp_IdntConvPres
         */
        idConventionPres: string;
        /**
         * Idfipp_IdntPres
         */
        idPres: string;
        /**
         * Lbfpen_EnsgnPres
         */
        ensgnPres: string;
        /**
         * Mtfasi_MtSouhIntlEmpr
         */
        montantSouhInitialEmprunt: number;
        /**
         * Ctfaoc_OrigCommProj
         */
        origineCommissionProjet: number;
        /**
         * Cefapd_CodeEttPlns
         */
        codeEtatPlns: number;
        /**
         * Cdfaar_CodeApplAnlsRisq
         */
        codeApplicationAnlsRisque: boolean;
        /**
         * Idfaac_IdntDossGest
         */
        idDossierGestion: string;
        /**
         * Idfaeg_IdntelemStrcGest
         */
        idElementStructureGestion: string;
        /**
         * Idfast_IdntelemStrcInstr
         */
        idElementStructureInstruction: string;
        /**
         * Idfagd_CodeAgntDecd
         */
        codeAgentDecd: string;
        /**
         * Ctfacf_CodeTyplCadrFisc
         */
        codeTypologieCadreFiscal: string;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cifcsb_CodeLevrSecrBanc
         */
        codeLevrSecrBancaire: number;
        /**
         * Dtfccr_DateCretDoss
         * Type date au format yyyy-MM-dd
         */
        dateCreationDossier: string;
        /**
         * Dmfidm_DateDernMaj
         * Type date au format yyyy-MM-dd
         */
        dateDernierMAJ: string;
        /**
         * Ctfado_EtatDoss
         */
        etatDossier: number;
        /**
         * Cefado_SousEtatDoss
         */
        sousEtatDossier: number;
        /**
         * Dtfadf_DateDemnFinn
         * Type date au format yyyy-MM-dd
         */
        dateDemandeFinancier: string;
        /**
         * Dtfaem_DateemssOffr
         * Type date au format yyyy-MM-dd
         */
        dateemssOffre: string;
        /**
         * Dtfirl_DateCiblProj
         * Type date au format yyyy-MM-dd
         */
        dateCiblProjet: string;
        /**
         * Cdfaod_CodeOrigDemn
         */
        codeOrigineDemande: string;
        /**
         * Dtfard_DateAccrPrtr
         * Type date au format yyyy-MM-dd
         */
        dateAccrPrtr: string;
        /**
         * Cefahb_CodeEttEnggHors
         */
        codeEtatEngagementHors: number;
        /**
         * Mtfahb_MtEnggHorsBiln
         */
        montantEngagementHorsBiln: number;
        /**
         * Dffavl_DateFinValdOffr
         * Type date au format yyyy-MM-dd
         */
        dateFinValiditeOffre: string;
        /**
         * Dtfaro_DateRecpOffrParClnt
         * Type date au format yyyy-MM-dd
         */
        dateRecuperationOffreParClient: string;
        /**
         * Dtfaef_DateEfftOffr
         * Type date au format yyyy-MM-dd
         */
        dateEffetOffre: string;
        /**
         * Cdfdrg_ModeRegl
         */
        modeRegle: string;
        /**
         * Nufpr1_NumeCpteSecoPrel
         */
        numeroCompteSecoPrel: string;
        /**
         * Nufddt_DomcTresCpteSeco
         */
        domiciliationTresCompteSeco: string;
        /**
         * Dtfart_DateLimtRetrEmprLoiConso
         * Type date au format yyyy-MM-dd
         */
        dateLimiteRetardEmpruntLoiConsommation: string;
        /**
         * Dffaof_DateLimtRetrOffrLoiConso
         * Type date au format yyyy-MM-dd
         */
        dateLimiteRetardOffreLoiConsommation: string;
        /**
         * Dffaao_DateMiniAccpOffrLoiImmo
         * Type date au format yyyy-MM-dd
         */
        dateMinimumAccpOffreLoiImmobilier: string;
        /**
         * Dtfasg_DateSignEmpr
         * Type date au format yyyy-MM-dd
         */
        dateSigneEmprunt: string;
        /**
         * Dtfare_DateRefuOffrParEmpr
         * Type date au format yyyy-MM-dd
         */
        dateRefuOffreParEmprunt: string;
        /**
         * Dffavi_DateMinnPourVerstFondLoiConso
         * Type date au format yyyy-MM-dd
         */
        dateMinnPourVersementFondLoiConsommation: string;
        /**
         * Dtfieo_DateEdtnOffr
         * Type date au format yyyy-MM-dd
         */
        dateEditionOffre: string;
        /**
         * Idfaex_IdntExtnDoss
         */
        idExterneDossier: string;
        /**
         * Ctfals_TypeLoiScrv
         */
        typeLoiScrivener: number;
        /**
         * Cdfafc_CodeAuthCont
         */
        codeAuthentiqueContrat: boolean;
        /**
         * Npfars_DelRetrScrv1
         */
        delRetardScrivener1: number;
        /**
         * Cdfive_CodeVersCret
         */
        codeVersementCreation: string;
        /**
         * Cdfwve_CodeVersDernModf
         */
        codeVersementDernierModification: string;
        /**
         * Mtfcon_MtVerstCnvn
         */
        montantVersementCnvn: number;
        /**
         * Txaufi_PctFinn
         */
        pourcentageFinancier: number;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Ctfco2_TorechlVerst
         */
        torechlVersement: string;
        /**
         * Cdfali_CodeEtatEnvDossSaccef
         */
        codeEtatEnvoiDossierSaccef: number;
        /**
         * Dtfali_DateLieEnvSaccef
         * Type date au format yyyy-MM-dd
         */
        dateLieEnvoiSaccef: string;
        /**
         * Idfcpo_IdntEnvSaccef
         */
        idEnvoiSaccef: string;
        /**
         * Idfaoc_IdntOrigDemn
         */
        idOrigineDemande: string;
        /**
         * Lbfaoc_LiblOrigDemn
         */
        libelleOrigineDemande: string;
        /**
         * Dgfapn_DatePrevSignNotr
         * Type date au format yyyy-MM-dd
         */
        datePrevSigneNotaire: string;
        /**
         * Nufadn_RefeExtnDoss
         */
        referenceExterneDossier: string;
        /**
         * Idfas5_ElemStrc5
         */
        elementStructure5: string;
        /**
         * Idfas6_ElemStrc6
         */
        elementStructure6: string;
        /**
         * ModeDecn
         */
        modeDecn: boolean;
        /**
         * Llfic1_CritRechAppli1
         */
        critereRechercheApplication1: string;
        /**
         * Llfic2_CritRechAppli2
         */
        critereRechercheApplication2: string;
        /**
         * Llfic3_CritRechAppli3
         */
        critereRechercheApplication3: string;
        /**
         * Llfic4_CritRechAppli4
         */
        critereRechercheApplication4: string;
        /**
         * Llfic5_CritRechAppli5
         */
        critereRechercheApplication5: string;
        /**
         * Ctfaen_CodeTypeEngg
         */
        codeTypeEngagement: string;
        /**
         * Dtfano_DateSignDossEnv
         * Type date au format yyyy-MM-dd
         */
        dateSigneDossierEnvoi: string;
        /**
         * Dffan1_DateFinValdAccr
         * Type date au format yyyy-MM-dd
         */
        dateFinValiditeAccr: string;
        /**
         * IndicOffrPre
         */
        indiceOffrePre: boolean;
        /**
         * Ctfipi_CodePrcsInstr
         */
        codeProcessusInstruction: string;
        /**
         * Ctfitr_CodeTrtComp
         */
        codeTraitementComp: string;
        /**
         * Cefipc_CodeEttPrsChrgDoss
         */
        codeEtatPresenceChargeDossier: number;
        /**
         * Cefiac_CodeEttActvDoss
         */
        codeEtatActiviteDossier: number;
        /**
         * IndicPrsChrgPiecJustParPiec
         */
        indicePresenceChargePieceJustificatifParPiece: number;
        /**
         * Idfabp_IdntAgntBoActlChrgDoss
         */
        idAgentBoActuarielChargeDossier: string;
        /**
         * Idfaes_IdntAgntPrprDoss
         */
        idAgentProprietaireDossier: string;
        /**
         * Idfaei_IdntAgntInstrDoss
         */
        idAgentInstructionDossier: string;
        /**
         * Idfaec_IdntAgntConnDoss
         */
        idAgentConnaissanceDossier: string;
        /**
         * Idfada_IdntAgntPourDecsConf
         */
        idAgentPourDecisionConf: string;
        /**
         * Idfael_IdntEnttDecs
         */
        idEntiteDecision: string;
        /**
         * Idfabi_IdntEnttPourTrnfBo
         */
        idEntitePourTransfertBo: string;
        /**
         * BlocNotes
         */
        blocNotes: string;
        /**
         * Ctfcse_CodeEtpeSiml
         */
        codeEtapeSimulation: number;
        /**
         * Idfifd_NumeFichPres
         */
        numeroFichPres: string;
        /**
         * Cifapp_CodePrscDossPres
         */
        codePrscDossierPres: number;
        /**
         * Idfdma_ReferenceMandat
         */
        referenceMandat: string;
        /**
         * Dgfdms_DateSignMand
         * Type date au format yyyy-MM-dd
         */
        dateSigneMand: string;
        /**
         * Ctfind_PrecisionTaux
         */
        precisionTaux: number;
        /**
         * Cdficd_CodeDevCredDev
         */
        codeDevCreditDev: string;
        /**
         * Idfics_NumCompteDev
         */
        numeroCompteDev: string;
        /**
         * Ctfimr_ModeReglDev
         */
        modeRegleDev: string;
        /**
         * Ctfimv_ModReglVerstDev
         */
        modRegleVersementDev: string;
        /**
         * IdntComplDoss
         */
        idComplementDossier: string;
        /**
         * Cifiid_IntegrationDossierDeVente
         */
        integrationDossierDeVente: number;
        /**
         * Ctficc_CanalDeCreation
         */
        canalDeCreation: string;
        /**
         * Ctfici_CanalDeDistribution
         */
        canalDeDistribution: string;
        /**
         * Defiag_DateEnvConvAG
         * Type date au format yyyy-MM-dd
         */
        dateEnvoiConventionAG: string;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * Cifpcd_OuvCpteSupEchCred
         */
        ouvertureCompteSupEchCredit: boolean;
        /**
         * CodeTypeEditionAutorisee
         */
        codeTypeEditionAutorisee: string;
        /**
         * EstEcoPtzCopro
         */
        estEcoPtzCopro: boolean;
        /**
         * EstCopro100
         */
        estCopro100: boolean;
        /**
         * AutoriserCalculIndicateurEditionAgence
         */
        autoriserCalculIndicateurEditionAgence: boolean;
        /**
         * Cdfcsg_TypeSignature
         */
        typeSignature: number;
        /**
         * IdntBlcNotsDivr
         */
        idBlocNoteNotsDivr: string;
        /**
         * IdntRedcActe
         */
        idReductionActe: string;
        /**
         * IdntEmpr
         */
        idEmprunt: string;
        /**
         * ListIdntEven
         */
        listeIdEven: Array<string>;
        /**
         * ListIdntAvis
         */
        listeIdAvis: Array<string>;
        /**
         * ListIdntAlrtEntr
         */
        listeIdAlerteEntr: Array<string>;
        /**
         * ListIdntAlrtSort
         */
        listeIdAlerteSort: Array<string>;
        /**
         * ListIdntPrjt
         */
        listeIdProjet: Array<string>;
        /**
         * ListIdntVerst
         */
        listeIdVersement: Array<string>;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntGarants
         */
        listeIdGarants: Array<string>;
        /**
         * ListIdntClssPers
         */
        listeIdClassePersonne: Array<string>;
        /**
         * ListIdntAgents
         */
        listeIdAgents: Array<string>;
        /**
         * IdntPoolEPS
         */
        idPoolEPS: string;
        /**
         * Cmmics_MotifConsultFICP
         */
        motifConsultFICP: number;
        /**
         * Mtfaff_MtFraisDebloAuto
         */
        montantFraisDebloAuto: number;
    }
    interface IAjustementTauxLecture extends IElementLecture {
        /**
         * RemiseMajoration
         */
        remiseMajoration: number;
        /**
         * NouvelleRemiseMajoration
         */
        nouvelleRemiseMajoration: number;
        /**
         * TauxActuel
         */
        tauxActuel: number;
        /**
         * TauxBonificationMajoration
         */
        tauxBonificationMajoration: number;
        /**
         * TauxConseillePondere
         */
        tauxConseillePondere: number;
        /**
         * MargeRevision
         */
        margeRevision: number;
        /**
         * RemiseTaux
         */
        remiseTaux: boolean;
        /**
         * ChangementTauxConseille
         */
        changementTauxConseille: boolean;
    }
    interface ISuiviPlanifieLecture extends IElementLecture {
        /**
         * Idfarv_IdntSuivPlnf
         */
        idSuivantPlafond: string;
        /**
         * Ctfcrw_CateSuivPlnf
         */
        cateSuivantPlafond: string;
        /**
         * Ctfcrv_CodeTypeSuivPlnf
         */
        codeTypeSuivantPlafond: string;
        /**
         * Ddfarv_DatePremSuiv
         * Type date au format yyyy-MM-dd
         */
        datePremierSuivant: string;
        /**
         * Dtfarv_DateSuivPlnf
         * Type date au format yyyy-MM-dd
         */
        dateSuivantPlafond: string;
        /**
         * Lbfarw_LiblLibrAsscSuiv
         */
        libelleLibrAssuranceSuivant: string;
        /**
         * Idfccl_IdntClse
         */
        idClasse: string;
        /**
         * Npfcrw_NbPerdSuivPlnf
         */
        nombrePeriodeSuivantPlafond: number;
        /**
         * Ptfcrv_CodePerdSuivPlnf
         */
        codePeriodeSuivantPlafond: number;
        /**
         * Ctfcrd_ReglDeclt
         */
        regleDeclaration: string;
        /**
         * Ctfcfp_TypePhasSuivPlnf
         */
        typePhaseSuivantPlafond: string;
        /**
         * Npfcrx_NbPerdDelDeclSuivPlnf
         */
        nombrePeriodeDelDeclarationSuivantPlafond: number;
        /**
         * Ptfcrx_CodePerdDelDeclSuivPlnf
         */
        codePeriodeDelDeclarationSuivantPlafond: number;
        /**
         * Ctfcrx_CodeAffecSuivPlnfPrdt
         */
        codeAffectationSuivantPlafondProduit: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface IOrigineApportLecture extends IElementLecture {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroPlanDossier
         */
        numeroPlanDossier: number;
        /**
         * Cdfoap_CodeOrigine
         */
        codeOrigine: number;
        /**
         * Mtfoap_MontantApportOrigine
         */
        montantApportOrigine: number;
    }
    interface IGarantLecture extends IElementLecture {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * Mcfpre_MtRessPond
         */
        montantRessourcePondere: number;
        /**
         * Mcfpce_MtChrgEmprHorsPrjtPond
         */
        montantChargeEmpruntHorsProjetPondere: number;
        /**
         * Mcfpac_MtAutrChrgPond
         */
        montantAutreChargePondere: number;
        /**
         * TotalEpargneContractuelle
         */
        totalEpargneContractuelle: number;
        /**
         * TotalEpargneLiquide
         */
        totalEpargneLiquide: number;
        /**
         * MtRessAvntProj
         */
        montantRessourceAvenantProjet: number;
        /**
         * MtChrgEmprAvntProj
         */
        montantChargeEmpruntAvenantProjet: number;
        /**
         * MtAutrChrgAvntProj
         */
        montantAutreChargeAvenantProjet: number;
        /**
         * RestVivrAvntProj
         */
        restantVivrAvenantProjet: number;
        /**
         * TxEndtAvntProj
         */
        tauxEndtAvenantProjet: number;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntCpteDeptGrpePers
         */
        listeIdCompteDeptGrpePersonne: Array<string>;
        /**
         * ListIdntCptePrfsPers
         */
        listeIdComptePrfsPersonne: Array<string>;
        /**
         * ListIdntRessGrpe
         */
        listeIdRessourceGrpe: Array<string>;
        /**
         * ListIdntChrgGrpe
         */
        listeIdChargeGrpe: Array<string>;
        /**
         * ListIdntCredExstGrpe
         */
        listeIdCreditExisteGrpe: Array<string>;
        /**
         * ListIdntFamlEprgPers
         */
        listeIdFamilleEpargnePersonne: Array<string>;
    }
    interface IRefusAssuranceExterneLecture extends IElementLecture {
        /**
         * Lvfdmr_MotifRefus
         */
        motifRefus: string;
        /**
         * Idfadi_IdDossierInstruction
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroRelatifPlanDossier
         */
        numeroRelatifPlanDossier: number;
        /**
         * Idfppe_Identifiantpersonne
         */
        identifiantpersonne: string;
        /**
         * Nofrfp_NumRangRefusProposition
         */
        numeroRangRefusProposition: number;
        /**
         * Lbfcia_CompagnieAssurance
         */
        compagnieAssurance: string;
        /**
         * Lbfrcc_ReferenceContrat
         */
        referenceContrat: string;
        /**
         * Ddfddr_DateReceptionDemande
         * Type date au format yyyy-MM-dd
         */
        dateReceptionDemande: string;
        /**
         * Ddfpic_DateImpressionDemande
         * Type date au format yyyy-MM-dd
         */
        dateImpressionDemande: string;
        /**
         * Cdfdda_CodeDecision
         */
        codeDecision: number;
        /**
         * Llfprp_RolePersonne
         */
        rolePersonne: string;
    }
    interface ILabel {
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampTextBox {
        /**
         * Text
         */
        text: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC003DC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IChampRadioButton {
        /**
         * Checked1
         */
        checked1: boolean;
        /**
         * Checked2
         */
        checked2: boolean;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle1
         */
        libelle1: string;
        /**
         * Libelle2
         */
        libelle2: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampCheckBox {
        /**
         * Checked
         */
        checked: boolean;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampTextBoxDate {
        /**
         * Text
         * Type date au format yyyy-MM-dd
         */
        text: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC003PC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
    }
    interface IFC003RE {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IFC004LA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: IChampTextBox;
    }
    interface IFC007ARO {
        /**
         * ContenuConditionsSuspensives
         */
        contenuConditionsSuspensives: IChampTextBox;
    }
    interface IFC010CP {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
    }
    interface ICreditTauxFixeLecture {
        /**
         * ReferenceIndiceCredit
         */
        referenceIndiceCredit: IChampTextBox;
        /**
         * TauxFixeCredit
         */
        tauxFixeCredit: IChampTextBox;
    }
    interface IFC010HS {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeLecture>;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: IChampTextBox;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: IChampTextBox;
        /**
         * DatePourvoirPersoMoraleAssurance
         */
        datePourvoirPersoMoraleAssurance: IChampTextBoxDate;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: IChampTextBox;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: IChampTextBox;
    }
    interface IFC010HSC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
    }
    interface IPretDevise {
        /**
         * IdentifiantProduitPretDevise
         */
        identifiantProduitPretDevise: IChampTextBox;
        /**
         * NumCreditPlanPretDevise
         */
        numeroCreditPlanPretDevise: IChampTextBox;
        /**
         * TypePretDevise
         */
        typePretDevise: IChampTextBox;
        /**
         * IdggiPretDevise
         */
        idggiPretDevise: IChampTextBox;
        /**
         * CdngPretDevise
         */
        cdngPretDevise: IChampTextBox;
        /**
         * FraisEnDevises
         */
        fraisEnDevises: IChampTextBox;
        /**
         * DevisePretDevise
         */
        devisePretDevise: IChampTextBox;
        /**
         * LabelInfoGarantieDevise
         */
        labelInformationGarantieDevise: ILabel;
        /**
         * FraisContrePartiePretDevise
         */
        fraisContrePartiePretDevise: IChampTextBox;
    }
    interface IFC010LCD {
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * RibPretDevise
         */
        ribPretDevise: IChampTextBox;
        /**
         * PretDevise
         */
        pretDevise: Array<IPretDevise>;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: IChampTextBox;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
    }
    interface IFC010LCM {
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * RibPretDevise
         */
        ribPretDevise: IChampTextBox;
        /**
         * PretDevise
         */
        pretDevise: Array<IPretDevise>;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: IChampTextBox;
    }
    interface IFC010LI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeLecture>;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: IChampTextBox;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: IChampTextBox;
        /**
         * DatePourvoirPersoMoraleAssurance
         */
        datePourvoirPersoMoraleAssurance: IChampTextBoxDate;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: IChampTextBox;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: IChampTextBox;
    }
    interface IChampTextArea {
        /**
         * Text
         */
        text: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC010LIA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
        /**
         * PouvoirEmprunteurPersMorale
         */
        pouvoirEmprunteurPersonneMorale: IChampTextArea;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
    }
    interface IFC010LIC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
    }
    interface IFC017ANL {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017BON {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017CAT {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017CGV {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017CIF {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017SCP {
        /**
         * IndexGarantie
         */
        indexGarantie: number;
        /**
         * ExisteAgrementGarantie
         */
        existeAgrementGarantie: IChampCheckBox;
        /**
         * DateAgrementGarantie
         */
        dateAgrementGarantie: IChampTextBoxDate;
        /**
         * PublierGreffeGarantie
         */
        publierGreffeGarantie: IChampCheckBox;
        /**
         * ConjointsEmprunteursGarantie
         */
        conjointsEmprunteursGarantie: IChampTextBox;
        /**
         * ConjointsCautionsGarantie
         */
        conjointsCautionsGarantie: IChampTextBox;
    }
    interface IFC019AN {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * An1AttestationPTZ
         */
        an1AttestationPTZ: IChampCheckBox;
        /**
         * An2AttestationPTZ
         */
        an2AttestationPTZ: IChampCheckBox;
        /**
         * An3AttestationPTZ
         */
        an3AttestationPTZ: IChampCheckBox;
        /**
         * An4AttestationPTZ
         */
        an4AttestationPTZ: IChampCheckBox;
        /**
         * An5AttestationPTZ
         */
        an5AttestationPTZ: IChampCheckBox;
        /**
         * An6AttestationPTZ
         */
        an6AttestationPTZ: IChampCheckBox;
        /**
         * An7AttestationPTZ
         */
        an7AttestationPTZ: IChampCheckBox;
        /**
         * An8AttestationPTZ
         */
        an8AttestationPTZ: IChampCheckBox;
        /**
         * An9AttestationPTZ
         */
        an9AttestationPTZ: IChampCheckBox;
        /**
         * AnXAttestationPTZ
         */
        anXAttestationPTZ: IChampCheckBox;
        /**
         * AnXIAttestationPTZ
         */
        anXIAttestationPTZ: IChampCheckBox;
        /**
         * AnIIIAttestationPTZ
         */
        anIIIAttestationPTZ: IChampCheckBox;
        /**
         * AnIVAttestationPTZ
         */
        anIVAttestationPTZ: IChampCheckBox;
        /**
         * AnXIVAttestationPTZ
         */
        anXIVAttestationPTZ: IChampCheckBox;
    }
    interface IFC028PNO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: IChampTextBox;
        /**
         * DatePouvoirNotaire
         */
        datePouvoirNotaire: IChampTextBoxDate;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: IChampTextBox;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: IChampTextBox;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: IChampTextBox;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: IChampTextBox;
    }
    interface IDonneesCreditLecture {
        /**
         * IdCreditModifie
         */
        idCreditModifie: string;
        /**
         * MontantCreditModifie
         */
        montantCreditModifie: IChampTextBox;
    }
    interface IFC050ACA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: IChampTextBox;
        /**
         * NombreCreditsAModifierACA
         */
        nombreCreditsAModifierACA: number;
        /**
         * ListeDonneesCreditAModifierACA
         */
        listeDonneesCreditAModifierACA: Array<IDonneesCreditLecture>;
    }
    interface IChampComboBox {
        /**
         * ListValue
         */
        listeValue: Array<string>;
        /**
         * SelectedValue
         */
        selectedValue: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampCheckBoxList {
        /**
         * ListValue
         */
        listeValue: Array<string>;
        /**
         * ListSelectedValue
         */
        listeSelectedValue: Array<string>;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC050FSC {
        /**
         * DateTransfertBoSuiveuse
         */
        dateTransfertBoSuiveuse: IChampTextBoxDate;
        /**
         * DateDispositionFondsSuiveuse
         */
        dateDispositionFondsSuiveuse: IChampTextBoxDate;
        /**
         * DateEnvoiNumerisationSuiveuse
         */
        dateEnvoiNumerisationSuiveuse: IChampTextBoxDate;
        /**
         * DateSignatureNotaireSuiveuse
         */
        dateSignatureNotaireSuiveuse: IChampTextBoxDate;
        /**
         * EditionSuiveuse
         */
        editionSuiveuse: IChampComboBox;
        /**
         * Statut1Suiveuse
         */
        statut1Suiveuse: IChampCheckBoxList;
        /**
         * Statut2Suiveuse
         */
        statut2Suiveuse: IChampCheckBoxList;
        /**
         * Statut3Suiveuse
         */
        statut3Suiveuse: IChampCheckBoxList;
        /**
         * NumeroDossierAssocieSuiveuse
         */
        numeroDossierAssocieSuiveuse: IChampTextBox;
        /**
         * CorbeilleWorkflowSuiveuse
         */
        corbeilleWorkflowSuiveuse: IChampComboBox;
        /**
         * CommentaireSuiveuse
         */
        commentaireSuiveuse: IChampTextBox;
    }
    interface IChampLabelMultiLine {
        /**
         * ListValue
         */
        listeValue: Array<string>;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampCache {
        /**
         * Value
         */
        value: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC050FSI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * Messages
         */
        messages: IChampLabelMultiLine;
        /**
         * NumeroOrias
         */
        numeroOrias: IChampCache;
        /**
         * NombreCreditsAModifier
         */
        nombreCreditsAModifier: IChampCache;
        /**
         * ListeDonneesCreditAModifier
         */
        listeDonneesCreditAModifier: Array<IDonneesCreditLecture>;
    }
    interface IDonneesCautionPersonneMoraleLecture {
        /**
         * NomCautionPersoMorale
         */
        nomCautionPersoMorale: IChampTextBox;
        /**
         * RepresCautionPersoMorale
         */
        represCautionPersoMorale: IChampTextBox;
        /**
         * AgissantQualiteCaution
         */
        agissantQualiteCaution: IChampTextBox;
        /**
         * AgissantVertuCaution
         */
        agissantVertuCaution: IChampTextBox;
        /**
         * Agissant3Caution
         */
        agissant3Caution: IChampTextBox;
        /**
         * Agissant4Caution
         */
        agissant4Caution: IChampTextBox;
        /**
         * Agissant5Caution
         */
        agissant5Caution: IChampTextBox;
    }
    interface IFC104LEC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * ListeDonneesCautionPersonneMorale
         */
        listeDonneesCautionPersonneMorale: Array<IDonneesCautionPersonneMoraleLecture>;
    }
    interface IFCM03DC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IFCM03RE {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IFCM04LA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: IChampTextBox;
    }
    interface IFCM10HS {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeLecture>;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: IChampTextBox;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: IChampTextBox;
        /**
         * DatePourvoirPersoMoraleAssurance
         */
        datePourvoirPersoMoraleAssurance: IChampTextBoxDate;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: IChampTextBox;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM10HSC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
    }
    interface IFCM17ANL {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17BON {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17CAT {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17CFG {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
    }
    interface IFCM17CGV {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17CIF {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17NFX {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: IChampTextBox;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: IChampTextBox;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: IChampTextBox;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: IChampTextBox;
    }
    interface IFCM17FDC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: IChampTextBox;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: IChampTextBox;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: IChampTextBox;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: IChampTextBox;
    }
    interface IOutilLecture {
        /**
         * MarqueOutil
         */
        marqueOutil: IChampTextBox;
        /**
         * TypeOutil
         */
        typeOutil: IChampTextBox;
        /**
         * DateLivraisonOutil
         */
        dateLivraisonOutil: IChampTextBoxDate;
        /**
         * SerieOutil
         */
        serieOutil: IChampTextBox;
        /**
         * PrixOutil
         */
        prixOutil: IChampTextBox;
        /**
         * VendIntituleOutil
         */
        vendIntituleOutil: IChampTextBox;
        /**
         * VendCpltIntOutil
         */
        vendCpltIntituleOutil: IChampTextBox;
        /**
         * VendAdrOutil
         */
        vendAdresseOutil: IChampTextBox;
        /**
         * VendCpltAdrOutil
         */
        vendCpltAdresseOutil: IChampTextBox;
        /**
         * VendCPOutil
         */
        vendCPOutil: IChampTextBox;
        /**
         * VendVilleOutil
         */
        vendVilleOutil: IChampTextBox;
        /**
         * AdrOutil
         */
        adresseOutil: IChampTextBox;
        /**
         * CpltAdrOutil
         */
        cpltAdresseOutil: IChampTextBox;
        /**
         * CPOutil
         */
        cPOutil: IChampTextBox;
        /**
         * VilleOutil
         */
        villeOutil: IChampTextBox;
        /**
         * DeplacementOutil
         */
        deplacementOutil: IChampCheckBox;
    }
    interface IFCM17OME {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NombreOutils
         */
        nombreOutils: number;
        /**
         * ListeOutil
         */
        listeOutil: Array<IOutilLecture>;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * VilleTribunal
         */
        villeTribunal: IChampTextBox;
    }
    interface IFCM20CLI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * DateDebutLigneInvestissement
         */
        dateDebutLigneInvestissement: IChampTextBoxDate;
        /**
         * DateFinLigneInvestissement
         */
        dateFinLigneInvestissement: IChampTextBoxDate;
        /**
         * ATauxFixeLigneInvestissement
         */
        aTauxFixeLigneInvestissement: IChampRadioButton;
        /**
         * TauxFixeLigneInvestissement
         */
        tauxFixeLigneInvestissement: IChampTextBox;
        /**
         * TauxRevisableLigneInvestissement
         */
        tauxRevisableLigneInvestissement: IChampTextBox;
        /**
         * ReferenceIndiceLigneInvestissement
         */
        referenceIndiceLigneInvestissement: IChampTextBox;
    }
    interface IFCM28PNO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: IChampTextBox;
        /**
         * DatePouvoirNotaire
         */
        datePouvoirNotaire: IChampTextBoxDate;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: IChampTextBox;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: IChampTextBox;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: IChampTextBox;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: IChampTextBox;
    }
    interface IFCM99LEI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
    }
    interface IFCX28PNO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: IChampTextBox;
        /**
         * DatePouvoirNotaire
         */
        datePouvoirNotaire: IChampTextBoxDate;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: IChampTextBox;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: IChampTextBox;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: IChampTextBox;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: IChampTextBox;
    }
    interface IFZ001SI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * AccordPrincipe
         */
        accordPrincipe: IChampCheckBox;
        /**
         * Rdv
         */
        rdv: IChampCheckBox;
        /**
         * Deroulement
         */
        deroulement: IChampCheckBox;
    }
    interface INOTICES {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * AjoutNotices
         */
        ajoutNotices: IChampCheckBox;
    }
    interface ISaisiesComplementaireLecture extends IElementLecture {
        /**
         * FC003DC
         */
        fC003DC: IFC003DC;
        /**
         * FC003PC
         */
        fC003PC: IFC003PC;
        /**
         * FC003RE
         */
        fC003RE: IFC003RE;
        /**
         * FC004LA
         */
        fC004LA: IFC004LA;
        /**
         * FC007ARO
         */
        fC007ARO: IFC007ARO;
        /**
         * FC010CP
         */
        fC010CP: IFC010CP;
        /**
         * FC010HS
         */
        fC010HS: IFC010HS;
        /**
         * FC010HSC
         */
        fC010HSC: IFC010HSC;
        /**
         * FC010LCD
         */
        fC010LCD: IFC010LCD;
        /**
         * FC010LCM
         */
        fC010LCM: IFC010LCM;
        /**
         * FC010LI
         */
        fC010LI: IFC010LI;
        /**
         * FC010LIA
         */
        fC010LIA: IFC010LIA;
        /**
         * FC010LIC
         */
        fC010LIC: IFC010LIC;
        /**
         * FC017ANL
         */
        fC017ANL: IFC017ANL;
        /**
         * FC017BON
         */
        fC017BON: IFC017BON;
        /**
         * FC017CAT
         */
        fC017CAT: IFC017CAT;
        /**
         * FC017CGV
         */
        fC017CGV: IFC017CGV;
        /**
         * FC017CIF
         */
        fC017CIF: IFC017CIF;
        /**
         * FC017SCP
         */
        fC017SCP: IFC017SCP;
        /**
         * FC019AN
         */
        fC019AN: IFC019AN;
        /**
         * FC028PNO
         */
        fC028PNO: IFC028PNO;
        /**
         * FC050ACA
         */
        fC050ACA: IFC050ACA;
        /**
         * FC050FSC
         */
        fC050FSC: IFC050FSC;
        /**
         * FC050FSI
         */
        fC050FSI: IFC050FSI;
        /**
         * FC104LEC
         */
        fC104LEC: IFC104LEC;
        /**
         * FCM03DC
         */
        fCM03DC: IFCM03DC;
        /**
         * FCM03RE
         */
        fCM03RE: IFCM03RE;
        /**
         * FCM04LA
         */
        fCM04LA: IFCM04LA;
        /**
         * FCM10HS
         */
        fCM10HS: IFCM10HS;
        /**
         * FCM10HSC
         */
        fCM10HSC: IFCM10HSC;
        /**
         * FCM17ANL
         */
        fCM17ANL: IFCM17ANL;
        /**
         * FCM17BON
         */
        fCM17BON: IFCM17BON;
        /**
         * FCM17CAT
         */
        fCM17CAT: IFCM17CAT;
        /**
         * FCM17CFG
         */
        fCM17CFG: IFCM17CFG;
        /**
         * FCM17CGV
         */
        fCM17CGV: IFCM17CGV;
        /**
         * FCM17CIF
         */
        fCM17CIF: IFCM17CIF;
        /**
         * FCM17FDC
         */
        fCM17FDC: IFCM17FDC;
        /**
         * FCM17OME
         */
        fCM17OME: IFCM17OME;
        /**
         * FCM20CLI
         */
        fCM20CLI: IFCM20CLI;
        /**
         * FCM28PNO
         */
        fCM28PNO: IFCM28PNO;
        /**
         * FCM99LEI
         */
        fCM99LEI: IFCM99LEI;
        /**
         * FCX28PNO
         */
        fCX28PNO: IFCX28PNO;
        /**
         * FZ001SI
         */
        fZ001SI: IFZ001SI;
        /**
         * NOTICES
         */
        nOTICES: INOTICES;
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: string;
        /**
         * An1AttestationPTZ
         */
        an1AttestationPTZ: boolean;
        /**
         * An2AttestationPTZ
         */
        an2AttestationPTZ: boolean;
        /**
         * An3AttestationPTZ
         */
        an3AttestationPTZ: boolean;
        /**
         * An4AttestationPTZ
         */
        an4AttestationPTZ: boolean;
        /**
         * An5AttestationPTZ
         */
        an5AttestationPTZ: boolean;
        /**
         * An6AttestationPTZ
         */
        an6AttestationPTZ: boolean;
        /**
         * An7AttestationPTZ
         */
        an7AttestationPTZ: boolean;
        /**
         * An8AttestationPTZ
         */
        an8AttestationPTZ: boolean;
        /**
         * An9AttestationPTZ
         */
        an9AttestationPTZ: boolean;
        /**
         * AnXAttestationPTZ
         */
        anXAttestationPTZ: boolean;
        /**
         * AnXIAttestationPTZ
         */
        anXIAttestationPTZ: boolean;
        /**
         * AnIIIAttestationPTZ
         */
        anIIIAttestationPTZ: boolean;
        /**
         * AnIVAttestationPTZ
         */
        anIVAttestationPTZ: boolean;
        /**
         * AnXIVAttestationPTZ
         */
        anXIVAttestationPTZ: boolean;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: boolean;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: boolean;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: boolean;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: boolean;
        /**
         * NomCopropriete
         */
        nomCopropriete: string;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: string;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: string;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: string;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: string;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: string;
        /**
         * EffetCopropriete
         */
        effetCopropriete: string;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeMaj>;
        /**
         * ContenuConditionsSuspensives
         */
        contenuConditionsSuspensives: string;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: boolean;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: string;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: boolean;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: string;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: boolean;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: string;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: boolean;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: string;
        /**
         * DateTransfertBoSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateTransfertBoSuiveuse: string;
        /**
         * DateDispositionFondsSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateDispositionFondsSuiveuse: string;
        /**
         * DateEnvoiNumerisationSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateEnvoiNumerisationSuiveuse: string;
        /**
         * DateSignatureNotaireSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureNotaireSuiveuse: string;
        /**
         * EditionSuiveuse
         */
        editionSuiveuse: string;
        /**
         * Statut1Suiveuse
         */
        statut1Suiveuse: Array<string>;
        /**
         * Statut2Suiveuse
         */
        statut2Suiveuse: Array<string>;
        /**
         * Statut3Suiveuse
         */
        statut3Suiveuse: Array<string>;
        /**
         * NumeroDossierAssocieSuiveuse
         */
        numeroDossierAssocieSuiveuse: string;
        /**
         * CorbeilleWorkflowSuiveuse
         */
        corbeilleWorkflowSuiveuse: string;
        /**
         * CommentaireSuiveuse
         */
        commentaireSuiveuse: string;
        /**
         * IndexGarantie
         */
        indexGarantie: number;
        /**
         * ExisteAgrementGarantie
         */
        existeAgrementGarantie: boolean;
        /**
         * DateAgrementGarantie
         * Type date au format yyyy-MM-dd
         */
        dateAgrementGarantie: string;
        /**
         * PublierGreffeGarantie
         */
        publierGreffeGarantie: boolean;
        /**
         * ConjointsEmprunteursGarantie
         */
        conjointsEmprunteursGarantie: string;
        /**
         * ConjointsCautionsGarantie
         */
        conjointsCautionsGarantie: string;
        /**
         * DateDebutLigneInvestissement
         * Type date au format yyyy-MM-dd
         */
        dateDebutLigneInvestissement: string;
        /**
         * DateFinLigneInvestissement
         * Type date au format yyyy-MM-dd
         */
        dateFinLigneInvestissement: string;
        /**
         * ATauxFixeLigneInvestissement
         */
        aTauxFixeLigneInvestissement: boolean;
        /**
         * TauxFixeLigneInvestissement
         */
        tauxFixeLigneInvestissement: string;
        /**
         * TauxRevisableLigneInvestissement
         */
        tauxRevisableLigneInvestissement: string;
        /**
         * ReferenceIndiceLigneInvestissement
         */
        referenceIndiceLigneInvestissement: string;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: string;
        /**
         * NomMandataire
         */
        nomMandataire: string;
        /**
         * VertuMandataire
         */
        vertuMandataire: string;
        /**
         * NombreOutils
         */
        nombreOutils: number;
        /**
         * AjoutNotices
         */
        ajoutNotices: boolean;
        /**
         * NumeroOrias
         */
        numeroOrias: string;
        /**
         * NombreCreditsAModifierFSI
         */
        nombreCreditsAModifierFSI: number;
        /**
         * ListeDonneesCreditAModifierFSI
         */
        listeDonneesCreditAModifierFSI: Array<IDonneesCreditLecture>;
        /**
         * ListeOutil
         */
        listeOutil: Array<IOutilMaj>;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: string;
        /**
         * DatePouvoirNotaire
         * Type date au format yyyy-MM-dd
         */
        datePouvoirNotaire: string;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: string;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: string;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: string;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: string;
        /**
         * RibPretDevise
         */
        ribPretDevise: string;
        /**
         * IdentifiantProduitPretDevise
         */
        identifiantProduitPretDevise: string;
        /**
         * NumCreditPlanPretDevise
         */
        numeroCreditPlanPretDevise: string;
        /**
         * TypePretDevise
         */
        typePretDevise: string;
        /**
         * IdggiPretDevise
         */
        idggiPretDevise: string;
        /**
         * CdngPretDevise
         */
        cdngPretDevise: string;
        /**
         * FraisEnDevises
         */
        fraisEnDevises: string;
        /**
         * DevisePretDevise
         */
        devisePretDevise: string;
        /**
         * FraisContrePartiePretDevise
         */
        fraisContrePartiePretDevise: string;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: string;
        /**
         * AccordPrincipe
         */
        accordPrincipe: boolean;
        /**
         * Rdv
         */
        rdv: boolean;
        /**
         * Deroulement
         */
        deroulement: boolean;
        /**
         * RaisonCaution
         */
        raisonCaution: string;
        /**
         * RepresentantCaution
         */
        representantCaution: string;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: string;
        /**
         * DatePouvoirCaution
         * Type date au format yyyy-MM-dd
         */
        datePouvoirCaution: string;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: string;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: string;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: string;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: string;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: string;
        /**
         * DateRCSEmprunteurBailleur
         * Type date au format yyyy-MM-dd
         */
        dateRCSEmprunteurBailleur: string;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: string;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: string;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: string;
        /**
         * DatePouvoirEmprunteurPersMorale
         * Type date au format yyyy-MM-dd
         */
        datePouvoirEmprunteurPersonneMorale: string;
        /**
         * ListeDonneesCautionPersonneMorale
         */
        listeDonneesCautionPersonneMorale: Array<IDonneesCautionPersonneMoraleMaj>;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: string;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: string;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: string;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: string;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: string;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: string;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: string;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: string;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: string;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: string;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: string;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: string;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: string;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: string;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: string;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: string;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: string;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: string;
        /**
         * DatePourvoirPersoMoraleAssurance
         * Type date au format yyyy-MM-dd
         */
        datePourvoirPersoMoraleAssurance: string;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: string;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: string;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: string;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: string;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: string;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: string;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: string;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: string;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: string;
        /**
         * VilleTribunal
         */
        villeTribunal: string;
        /**
         * mtoDocInfos
         */
        mtoDocInformation: Array<IAnyType>;
        /**
         * FCM17NFX
         */
        fCM17NFX: IFCM17NFX;
        /**
         * FCM17NFO
         */
        fCM17NFO: IFCM17NFO;
        /**
         * FCM17GBM
         */
        fCM17GBM: IFCM17GBM;
        /**
         * NomenclatureBiens
         */
        nomenclatureBiens: string;
        /**
         * LibelleNomenclatureBiens
         */
        libelleNomenclatureBiens: string;
        /**
         * ListeBienMC
         */
        listeBienMC: Array<IBienMaj>;
        /**
         * NombreBiensMC
         */
        nombreBiensMC: number;
        /**
         * FCM07LAN
         */
        fCM07LAN: IFCM07LAN;
    }
    interface IAgentLecture extends IElementLecture {
        /**
         * Idfaen_IdntAgent
         */
        idAgent: string;
        /**
         * Lbfaes_LblAgent
         */
        lblAgent: string;
        /**
         * Idfaeg_IdntEdsGest
         */
        idEDSGestion: string;
        /**
         * Lbfiba_LblAgenceRat
         */
        lblAgenceRat: string;
        /**
         * Cdfaaa_CdeAgentRat
         */
        cdeAgentRat: string;
        /**
         * Nofcdi_NivDelegation
         */
        niveauDelegation: string;
        /**
         * Ctfauc_TypeUtilisateurCo
         */
        typeUtilisateurCo: number;
        /**
         * Idfies_IdntAgentInterne
         */
        idAgentInterne: string;
        /**
         * Idfce3_EtabBaofCent
         */
        etabBaofCentral: number;
        /**
         * Cdfabo_IdntEdsBaofCent
         */
        idEDSBaofCentral: string;
        /**
         * Cifttv_TechniqueDeVente
         */
        techniqueDeVente: number;
        /**
         * EstAgentBO
         */
        estAgentBO: boolean;
        /**
         * EstBackup
         */
        estBackup: boolean;
        /**
         * EstAgentExterne
         */
        estAgentExterne: boolean;
        /**
         * DerogationBornes
         */
        derogationBornes: boolean;
        /**
         * AutoriserForcage
         */
        autoriserForcage: boolean;
        /**
         * AutoriserForcagePIECO
         */
        autoriserForcagePIECO: boolean;
        /**
         * AutoriserInstructionPourX
         */
        autoriserInstructionPourX: boolean;
        /**
         * AutoriserMajPourX
         */
        autoriserMAJPourX: boolean;
        /**
         * AutoriserDateTraitement
         */
        autoriserDateTraitement: boolean;
        /**
         * AutoriserAXANet
         */
        autoriserAXANet: boolean;
        /**
         * AutoriserDevisEcoPTZ
         */
        autoriserDevisEcoPTZ: boolean;
        /**
         * AutoriserCNPNet
         */
        autoriserCNPNet: boolean;
        /**
         * AutoriserCAPI
         */
        autoriserCAPI: boolean;
        /**
         * AutoriserSDPI
         */
        autoriserSDPI: boolean;
        /**
         * AutoriserAgrementAssurance
         */
        autoriserAgrementAssurance: boolean;
        /**
         * AutoriserAccesDNC
         */
        autoriserAccesDNC: boolean;
        /**
         * AutoriserGenerationNouvelleDemandeMyFlow
         */
        autoriserGeneNvelleDmdeMyFlow: boolean;
        /**
         * ListerHabilitation
         */
        listerHabilitation: Array<string>;
        /**
         * ListerEtablissementsGcm
         */
        listerEtablissementsGcm: Array<number>;
        /**
         * ExisteDossiersEnAlerte
         */
        existeDossiersEnAlerte: boolean;
        /**
         * EstAgentRefusAssuranceExterne
         */
        estAgentRefusAssuranceExterne: boolean;
        /**
         * ScPhasePilote
         */
        scPhasePilote: IScPhasePilote;
    }
    interface ISynthesePlanFinancementLecture extends IElementLecture {
        /**
         * Mcfoof_CoutTotalTTC
         */
        coutTotalTTC: number;
        /**
         * Mcfgfr_CoutTotalFraisGarantie
         */
        coutTotalFraisGarantie: number;
        /**
         * Mcfafd_CoutTotalFraisDossier
         */
        coutTotalFraisDossier: number;
        /**
         * Mtfaap_MtApportPersonnel
         */
        montantApportPersonnel: number;
        /**
         * nMtfaso_MtConcoursInternes
         */
        montantConcoursInternes: number;
        /**
         * nMkface_MtConcoursExternes
         */
        montantConcoursExternes: number;
        /**
         * Mcfacf_CoutTotalFraisCourtage
         */
        coutTotalFraisCourtage: number;
        /**
         * MtMensualiteAvecAssurance
         */
        montantMensualiteAvecAssurance: number;
        /**
         * MtMensualiteNet
         */
        montantMensualiteNet: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
    }
    interface ICourrierEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumPlanDossier
         */
        numeroPlanDossier: number;
        /**
         * Nofacp_NumCreditPlan
         */
        numeroCreditPlan: number;
        /**
         * Nufcrl_NumRelatif
         */
        numeroRelatif: number;
        /**
         * Ctfclv_TypeLettre
         */
        typeLettre: number;
        /**
         * Cdfpci_CodeCivilite
         */
        codeCivilite: string;
        /**
         * Lbfce1_AdresseLigne1
         */
        adresseLigne1: string;
        /**
         * Lbfce2_AdresseLigne2
         */
        adresseLigne2: string;
        /**
         * Lbfce3_AdresseLigne3
         */
        adresseLigne3: string;
        /**
         * Lbfce4_AdresseLigne4
         */
        adresseLigne4: string;
        /**
         * Lbfce5_AdresseLigne5
         */
        adresseLigne5: string;
        /**
         * Lbfce6_AdresseLigne6
         */
        adresseLigne6: string;
    }
    interface IMarcheEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDoss
         */
        numeroRelPlanDossier: number;
        /**
         * Nofacp_NumRelCreditPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Ctfcme_CodeTypeMarche
         */
        codeTypeMarche: string;
        /**
         * Idfcmb_IdMarche
         */
        idMarche: string;
        /**
         * Idfcmp_IdTiersMarcePrinc
         */
        idTiersMarcePrinc: string;
        /**
         * Lbfcmo_LibMoeMarchePrinc
         */
        libelleMoeMarchePrinc: string;
        /**
         * Lbfcom_LibelleObjetMarche
         */
        libelleObjetMarche: string;
        /**
         * Mtfcmd_MontantMarche
         */
        montantMarche: number;
        /**
         * Dtfcma_DateSignMarche
         * Type date au format yyyy-MM-dd
         */
        dateSigneMarche: string;
        /**
         * Dffcme_DateFinMarche
         * Type date au format yyyy-MM-dd
         */
        dateFinMarche: string;
        /**
         * Lnfagr_NomGroupMarche
         */
        nomGroupMarche: string;
        /**
         * Lbfctr_LibLieuExecTravaux
         */
        libelleLieuExecTravaux: string;
        /**
         * Nxfctr_NumTranMarche
         */
        numeroTranMarche: string;
        /**
         * Nxfclo_NumLotMarche
         */
        numeroLotMarche: string;
        /**
         * Idfamp_refCautionPrincipale
         */
        refCautionPrincipale: string;
        /**
         * Dtfcmp_dateEmisCautionPrinc
         * Type date au format yyyy-MM-dd
         */
        dateEmisCautionPrinc: string;
        /**
         * Mtfccp_montantCautionPrinc
         */
        montantCautionPrinc: number;
        /**
         * Cdfadv_codeDevise
         */
        codeDevise: string;
    }
    interface ITACreditEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDos
         */
        numeroRelPlanDos: number;
        /**
         * Nofacp_NumRelCredPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Nufcrl_NumRelCred
         */
        numeroRelCredit: number;
        /**
         * Dtfhpr_DateEchnMER
         * Type date au format yyyy-MM-dd
         */
        dateEcheanceMER: string;
        /**
         * Mkfh03_MtCaptAmrt
         */
        montantCapitalAmortissement: number;
        /**
         * Mkfd01_MtCaptRestDu
         */
        montantCapitalRestantDu: number;
        /**
         * Nufcet_NumEcheanceTable
         */
        numeroEcheanceTable: number;
    }
    interface IScElement {
    }
    interface IScConstante extends IScElement {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
    interface IProjetNonImmobilierLecture extends IProjetLecture {
        /**
         * IndicProjProf
         */
        indiceProjetProf: boolean;
        /**
         * IndicProjConsTres
         */
        indiceProjetConsolideTres: boolean;
        /**
         * ObjTresEtdn
         */
        objTresEtdn: boolean;
        /**
         * ObjFinnConso
         */
        objFinancierConsommation: boolean;
        /**
         * ObjTresPrfs
         */
        objTresPrfs: boolean;
        /**
         * DescProjNonImmb
         */
        descriptionProjetNonImmobilier: string;
        /**
         * Dtfbso_DateMiseDispFond
         * Type date au format yyyy-MM-dd
         */
        dateMiseDispFond: string;
        /**
         * IdntBienConso
         */
        idBienConsommation: string;
        /**
         * IdntBienEqpmProf
         */
        idBienEqpmProf: string;
        /**
         * IdntBienTres
         */
        idBienTres: string;
    }
    interface IProjetEPSLecture extends IProjetLecture {
    }
    interface ICreditEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDos
         */
        numeroRelPlanDos: number;
        /**
         * Nofacp_NumRelCredPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Nufcrl_NumRelCred
         */
        numeroRelCredit: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Txfccc_QuotCredCouvParEps
         */
        quotientCreditCouvertureParEPS: number;
        /**
         * Idfaez_RefeExtnCredCouvEps
         */
        referenceExterneCreditCouvertureEPS: string;
        /**
         * ListIdntTaCredCouvParEps
         */
        listeIdtaCreditCouvertureParEPS: Array<string>;
    }
    interface IComplementEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumrReltPlanDoss
         */
        numeroRelationPlanDossier: number;
        /**
         * Nofacp_NumrReltCrdtPlan
         */
        numeroRelationCreditPlan: number;
        /**
         * Cnfcnb_NatrGarnEps
         */
        natureGarantieEPS: string;
        /**
         * Idfapa_RefrExtnDossParn
         */
        referenceExterneDossierParent: string;
        /**
         * Ddfaen_DateDebuEngg
         * Type date au format yyyy-MM-dd
         */
        dateDebutEngagement: string;
        /**
         * Dffaen_DateFinEngg
         * Type date au format yyyy-MM-dd
         */
        dateFinEngagement: string;
        /**
         * Mgfggo_MtEnggGlblOrig
         */
        montantEngagementGlblOrigine: number;
        /**
         * Idfagl_IdntEnggGlbl
         */
        idEngagementGlbl: string;
        /**
         * Cifcrg_CodeIndRetrocessionEPS
         */
        codeIndicateurRetrocessionEPS: number;
        /**
         * Cifcrh_CodeIndicRadiationAutoEPS
         */
        codeIndiceRadiationAutomatiqueEPS: number;
        /**
         * Cifcri_CodeIndicEPSAmortissable
         */
        codeIndiceEPSAmortissable: number;
        /**
         * Cifeng_CodeEngagementGlobal
         */
        codeEngagementGlobal: number;
        /**
         * Cnfcnh_CodeTypeObjetEPS
         */
        codeTypeObjetEPS: string;
        /**
         * Cofcca_CodeCanalDistributionEPS
         */
        codeCanalDistributionEPS: string;
        /**
         * Cofcsi_CodeSignatureElectroniqueEPS
         */
        codeSignatureElectroniqueEPS: string;
        /**
         * Dtfcdd_DateDecisionEPS
         * Type date au format yyyy-MM-dd
         */
        dateDecisionEPS: string;
        /**
         * Idfaei_IdEntiteInstructeur
         */
        idEntiteInstructeur: string;
        /**
         * Idfagd_CodeAgentDecideur
         */
        codeAgentDecideur: string;
        /**
         * Idfcma_IdModeleActeEPS
         */
        idModeleActeEPS: string;
        /**
         * Idfcs1_IdEDSSignataire
         */
        idEDSSignataire: string;
        /**
         * Idfcs2_IdEDSSignataire
         */
        idEDSSignataire1: string;
        /**
         * Mtfcad_MontantAssietteCommission
         */
        montantAssietteCommission: number;
        /**
         * Nxfcse_NumSignatureElectroniqueEPS
         */
        numeroSignatureElectroniqueEPS: string;
        /**
         * ListIdntMarcheEPS
         */
        listeIdMarcheEPS: Array<string>;
        /**
         * Idfcfa_IdFamilleEPS
         */
        idFamilleEPS: string;
        /**
         * Dtfcru_DateRadiationEPS
         * Type date au format yyyy-MM-dd
         */
        dateRadiationEPS: string;
        /**
         * Idfaic_IdPreuveICG
         */
        idPreuveICG: string;
        /**
         * Idfapc_IdClientWeb
         */
        idClientWeb: string;
        /**
         * Lbfauc_LibelleUtilisateurWeb
         */
        libelleUtilisateurWeb: string;
        /**
         * Lbfas1_LibelleCiviliteSignataire1
         */
        libelleCiviliteSignataire1: string;
        /**
         * Lbfas3_LibelleCiviliteSignataire2
         */
        libelleCiviliteSignataire2: string;
        /**
         * Lbfas4_LibelleFonctionSignataire2
         */
        libelleFonctionSignataire2: string;
        /**
         * Lbfas2_LibelleFonctionSignataire1
         */
        libelleFonctionSignataire1: string;
        /**
         * Cdfcew_CodeEtatDossierEPSWeb
         */
        codeEtatDossierEPSWeb: string;
    }
    interface ITresorerieFinanceeLecture extends IBienDetailleLecture {
        /**
         * CodeIndicBienConso
         */
        codeIndiceBienConsommation: boolean;
        /**
         * CodeIndicTresProf
         */
        codeIndiceTresProf: boolean;
        /**
         * CodeIndicTresEtdn
         */
        codeIndiceTresEtdn: boolean;
        /**
         * Idfove_IdntVndr
         */
        idVendeur: string;
    }
    interface IBienEquipementProLecture extends IBienDetailleLecture {
    }
    interface IBienDetailleLecture extends IElementLecture {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
        /**
         * Mtfoac_CoutAcqsComlInds
         */
        coutAcqsCommercialisationInds: number;
        /**
         * Mtfoai_CoutAcqsHabt
         */
        coutAcqsHabitation: number;
        /**
         * Mtfoco_CoutConst
         */
        coutConstruction: number;
        /**
         * Mtfotr_CoutTrvxAmen
         */
        coutTravauxAmen: number;
        /**
         * Mtfopp_CoutPasPort
         */
        coutPasPort: number;
        /**
         * Mtfofc_CoutFondComc
         */
        coutFondComc: number;
        /**
         * Mtfomo_CoutEqpmMte
         */
        coutEqpmMte: number;
        /**
         * Mtfovp_CoutVehcPrfs
         */
        coutVehcPrfs: number;
        /**
         * Mtfops_CoutPartSocl
         */
        coutPartSociale: number;
        /**
         * Mtfofg_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * Mtfofn_MtFrsNotr
         */
        montantFrsNotaire: number;
        /**
         * Mtfost_CoutStck
         */
        coutStck: number;
        /**
         * Mtfosc_CoutStckHorsInstr
         */
        coutStckHorsInstruction: number;
        /**
         * Mtfobf_CoutBfr
         */
        coutBfr: number;
        /**
         * Mtfobc_CoutBfrHorsInstr
         */
        coutBfrHorsInstruction: number;
        /**
         * Mtfodv_CoutAutrFrsPrfs
         */
        coutAutreFrsPrfs: number;
        /**
         * Mtfodc_CoutAutrFrsPrfsHorsInstr
         */
        coutAutreFrsPrfsHorsInstruction: number;
        /**
         * Mcfotv_MtTvaFinn
         */
        montantTVAFinancier: number;
        /**
         * Mtfora_MtRachCren
         */
        montantRachCren: number;
        /**
         * Mtfods_CoutPartSoce
         */
        coutPartSoce: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IAutoMotoLecture extends IBienConsoFinanceLecture {
        /**
         * Ctfmov_TypeMotr
         */
        typeMotr: number;
        /**
         * Lbfmov_ModeVehc
         */
        modeVehc: string;
        /**
         * Lbfqov_MarqVehc
         */
        marqVehc: string;
        /**
         * Ctfmvh_TypeVehc
         */
        typeVehc: number;
        /**
         * Ctfmgv_GnreVehc
         */
        gnreVehc: number;
        /**
         * Cdfmpv_PuisFisc
         */
        puisFiscal: number;
        /**
         * Ddfmpc_DatePrmeMiseCircl
         * Type date au format yyyy-MM-dd
         */
        datePrmeMiseCircl: string;
    }
    interface IBienConsoFinanceLecture extends IElementLecture {
        /**
         * Idfove_IdntVndr
         */
        idVendeur: string;
        /**
         * Mgfovh_MtInscHypt
         */
        montantInscHypotheque: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IAlerteEnEntreeLecture extends IElementLecture {
        /**
         * Nofaix_NumeAlrt
         */
        numeroAlerte: number;
        /**
         * Ctfiai_CodeAlrt
         */
        codeAlerte: number;
        /**
         * Cdfiai_CodeTrtAlrt
         */
        codeTraitementAlerte: number;
        /**
         * Dcfiai_DateEmssAlrt
         * Type date au format yyyy-MM-dd
         */
        dateEmissionAlerte: string;
        /**
         * Lbfiai_LiblAlrt
         */
        libelleAlerte: string;
    }
    interface ITauxInteretAnnuelLecture {
        /**
         * ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * TxActu
         */
        tauxActu: number;
        /**
         * TxProp
         */
        tauxProp: number;
    }
    interface ITauxIndiceLecture extends ITauxInteretAnnuelLecture {
        /**
         * Marg
         */
        marge: number;
        /**
         * ValrIndc
         */
        valeurIndice: number;
    }
    interface ITauxFixeLecture extends ITauxInteretAnnuelLecture {
    }
    interface ITauxMixteLecture extends ITauxInteretAnnuelLecture {
        /**
         * Rpar
         */
        repartition: number;
        /**
         * TxIndcCmpstTxMixt
         */
        tauxIndiceCmpstTauxMixte: ITauxIndiceLecture;
        /**
         * TxFixeCmpstTxMixt
         */
        tauxFixeCmpstTauxMixte: ITauxFixeLecture;
    }
    interface ICreditPalierProgressionLecture extends IElementLecture {
        /**
         * Nufape_NumeReltPrmeEchePalrPhas
         */
        numeroRelationPrmeEcheancePalierPhase: number;
        /**
         * Nufapp_NumeReltDernEchePalrPhas
         */
        numeroRelationDernierEcheancePalierPhase: number;
        /**
         * Txfcam_TxPrgrAmrt
         */
        tauxProgressifAmortissement: ITauxInteretAnnuelLecture;
        /**
         * Cdfdcg_CodeIndxTxPrgrAmrt
         */
        codeIndexTauxProgressifAmortissement: number;
        /**
         * Ptfcpa_CodePerdPrgrAmrt
         */
        codePeriodeProgressifAmortissement: number;
        /**
         * Npfca1_NbPerdDureePalrPrgr
         */
        nombrePeriodeDureePalierProgressif: number;
        /**
         * Ctfcam_TypeTauxProgreAmort
         */
        typeTauxProgreAmort: number;
        /**
         * IdntCredPhasAM
         */
        idCreditPhaseAM: string;
        /**
         * IdntPalrPrgrAmrtNivPrdt
         */
        idPalierProgressifAmortissementNiveauProduit: string;
    }
    interface IComplementPhasePretCombineLecture extends IElementLecture {
        /**
         * Mafaqa_MtAmrt
         */
        montantAmortissement: number;
        /**
         * Mkfaif_MtInfine
         */
        montantInfine: number;
        /**
         * Ctfapa_CodeAjtInteCapt
         */
        codeAjtInterieurCapital: number;
        /**
         * Ctfark_ModeSaisReprCapt
         */
        modeSaisieReprCapital: number;
        /**
         * Tafaqa_QuotAmrt
         */
        quotientAmortissement: number;
        /**
         * IdntCredPhasAM
         */
        idCreditPhaseAM: string;
    }
    interface IScProduitPhase extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Nofcfp_NoReltPhas
         */
        numeroRelationPhase: number;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Pefcph_UnitDurDunPhas
         */
        uniteDureeDunPhase: number;
        /**
         * Cdfcph_ModeExprDurPhas
         */
        modeExpressionDureePhase: number;
        /**
         * Npfcq1_DurPhasPrdt
         */
        dureePhaseProduit: number;
        /**
         * Npfcq2_DurPhasPrdt
         */
        dureePhaseProduit1: number;
        /**
         * Npfcq3_DurPhasPrdt
         */
        dureePhaseProduit2: number;
        /**
         * Npfcq4_DurDunPhasPas
         */
        dureeDunPhasePas: number;
        /**
         * Ptfcin_PerdicCalcIntr
         */
        periodiciteCalculIntr: number;
        /**
         * Ptfci1_PerdicCalcIntr
         */
        periodiciteCalculIntr1: number;
        /**
         * Ptfci2_PerdicCalcIntr
         */
        periodiciteCalculIntr2: number;
        /**
         * Ptfci3_PerdicCalcIntr
         */
        periodiciteCalculIntr3: number;
        /**
         * Ptfci4_PerdicCalcIntr
         */
        periodiciteCalculIntr4: number;
        /**
         * Ptfcam_PerdicMerAmrt
         */
        periodiciteMERAmortissement: number;
        /**
         * Ptfca1_PerdicMerAmrt
         */
        periodiciteMERAmortissement1: number;
        /**
         * Ptfca2_PerdicMerAmrt
         */
        periodiciteMERAmortissement2: number;
        /**
         * Ptfca3_PerdicMerAmrt
         */
        periodiciteMERAmortissement3: number;
        /**
         * Ptfca4_PerdicMerAmrt
         */
        periodiciteMERAmortissement4: number;
        /**
         * Cdfcpt_CodePerdicDiffMer
         */
        codePeriodiciteDiffereMER: number;
        /**
         * Cdfcei_CdRecvIntrTermEchu
         */
        codeRecouvrementIntrTermeEchu: number;
        /**
         * Cdfcea_CdRecvAmrtTermEchu
         */
        codeRecouvrementAmortissementTermeEchu: number;
        /**
         * Cdfccf_CdTypeConfmTxIntr
         */
        codeTypeConfirmationTauxIntr: number;
        /**
         * Cdfctx_ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * Nbfcaa_NbJourAnnNumrt
         */
        nombreJourAnnulationNumerateur: number;
        /**
         * Cdfcam_ModeCalcAmrt
         */
        modeCalculAmortissement: number;
        /**
         * Mtfckr_CaptRefrTablCste
         */
        capitalReferenceTableConstante: number;
        /**
         * Ctfcrb_TypeAsstRemb
         */
        typeAssietteRemboursement: number;
        /**
         * Cdfcva_CdVerstAutrPendPhas
         */
        codeVersementAutrePendantPhase: number;
        /**
         * Cdfcfp_CodeRedcDurPrfn
         */
        codeReductionDureePrefinancement: number;
        /**
         * Cdfcpr_CodePrlnDurPrfn
         */
        codePrelevementDureePrefinancement: number;
        /**
         * Ctfcpe_CodeTypePrfn
         */
        codeTypePrefinancement: number;
        /**
         * Cdfcip_CodeRecvPartlIntr
         */
        codeRecouvrementPartielIntr: number;
        /**
         * Cdfcir_CodeCalcIntrRepr
         */
        codeCalculIntrRepr: number;
        /**
         * Cdfcki_CodeCaptIntrDiff
         */
        codeCapitalIntrDiffere: number;
        /**
         * Ptfcci_CalcIntrJourReel
         */
        calculIntrJourReel: number;
        /**
         * Ptfcd1_PerdicMerIntr
         */
        periodiciteMERIntr: number;
        /**
         * Ptfcd2_PerdicMerIntr
         */
        periodiciteMERIntr1: number;
        /**
         * Ptfcd3_PerdicMerIntr
         */
        periodiciteMERIntr2: number;
        /**
         * Ptfcd4_PerdicMerIntr
         */
        periodiciteMERIntr3: number;
        /**
         * Ctfck2_ModeCaptIntr
         */
        modeCapitalIntr: number;
        /**
         * Ctfck1_ModeRecvIntr
         */
        modeRecouvrementIntr: number;
        /**
         * Ptfcco_PerdicCompoIntr
         */
        periodiciteCompositionIntr: number;
        /**
         * Cdfcpm_CdModeExprTxMoyePhas
         */
        codeModeExpressionTauxMoyenPhase: number;
        /**
         * Txfcp1_ValrMinTxMoyePhas
         */
        valeurMinimumTauxMoyenPhase: number;
        /**
         * Txfcp2_ValrMaxTxMoyePhas
         */
        valeurMaximumTauxMoyenPhase: number;
        /**
         * Txfcp3_ValrConsTxMoyePhas
         */
        valeurConsolideTauxMoyenPhase: number;
        /**
         * Cdfcth_CodeTxPalrCalc
         */
        codeTauxPalierCalcul: number;
        /**
         * Cdfcin_CodeIndc
         */
        codeIndice: string;
        /**
         * Nbfrvd_NbMaxiPerdVartDur
         */
        nombreMaximumPeriodeVartDuree: number;
        /**
         * Cdfcop_CodeOptnSurPhasPrdt
         */
        codeOptionSurPhaseProduit: number;
        /**
         * Cdfcoo_CodeObjtOptn
         */
        codeObjetOption: number;
        /**
         * Cdfcto_TypeOptn
         */
        typeOption: number;
        /**
         * Cdfcsr_CodeCourPourPrsDopt
         */
        codeCourtPourPresenceDopt: number;
        /**
         * Npfcsr_DelaiCourPrsDopt
         */
        delaiCourtPresenceDopt: number;
        /**
         * Pefcpo_PerdicOptn
         */
        periodiciteOption: number;
        /**
         * Nbjja1_NbJourAnnDenom
         */
        nombreJourAnnulationDenomination: number;
        /**
         * Txfccz_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement: number;
        /**
         * Tpfcc1_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement: number;
        /**
         * Tsfcc1_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement: number;
        /**
         * Pefrie_UnitPerdValrIntIndc
         */
        unitePeriodeValeurIntituleIndice: number;
        /**
         * Npfrie_NbPerdValrIntIndc
         */
        nombrePeriodeValeurIntituleIndice: number;
        /**
         * Ctfcte_CodeTypeTrtDech
         */
        codeTypeTraitementDech: number;
        /**
         * Tsfcif_QuotMaxiCaptIfin
         */
        quotientMaximumCapitalIfin: number;
        /**
         * Txfcca_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement1: number;
        /**
         * Tpfcca_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement1: number;
        /**
         * Tsfcca_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement1: number;
        /**
         * Idfrbd_IdntReglButrDur
         */
        idRegleButoireDuree: string;
    }
    interface ICreditPhaseAmortissementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcea_CodeRecvAmrtTermEchu
         */
        codeRecouvrementAmortissementTermeEchu: number;
        /**
         * Txfcqa_QuotAmrt
         */
        quotientAmortissement: number;
        /**
         * Cdfcam_ModeCalcAmrt
         */
        modeCalculAmortissement: number;
        /**
         * Cifapi_CodePrelFinPhas
         */
        codePrelFinPhase: number;
        /**
         * Txfaom_TxConstPhasCred
         */
        tauxConstructionPhaseCredit: number;
        /**
         * AmrtPossible
         */
        amortissementPossible: boolean;
        /**
         * ProgTaux
         */
        progTaux: boolean;
        /**
         * TypePretCombine
         */
        typePretCombine: string;
        /**
         * IdntCompPhasPourPretComb
         */
        idCompPhasePourPretComb: string;
        /**
         * ListIdntPalrPrgrAmrt
         */
        listeIdPalierProgressifAmortissement: Array<string>;
    }
    interface ICreditPhaseDiffereAmortissementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcip_CodeRecvPartlInte
         */
        codeRecouvrementPartielInterieur: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhaseDiffereTotalLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhaseMobilisationLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcip_CodeRecvPartlInte
         */
        codeRecouvrementPartielInterieur: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhasePrefinancementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfppf_CodeRedcDureePref
         */
        codeReductionDureePref: number;
        /**
         * Personnalisable
         */
        personnalisable: boolean;
        /**
         * Reduction
         */
        reduction: boolean;
    }
    interface ICreditPhaseLecture extends IElementLecture {
        /**
         * Cdfcir_CodeCalcInteRepr
         */
        codeCalculInterieurRepr: number;
        /**
         * Ctfcki_ModeCaptRecvInte
         */
        modeCapitalRecouvrementInterieur: number;
        /**
         * Cdfcki_CodeCaptRecvInte
         */
        codeCapitalRecouvrementInterieur: number;
        /**
         * Ptfcin_CodePerdAsscCalcInte
         */
        codePeriodeAssuranceCalculInterieur: number;
        /**
         * Ptfcam_CodePerdCalcMer
         */
        codePeriodeCalculMER: number;
        /**
         * Ptfcci_CodeCalcInteJourRels
         */
        codeCalculInterieurJourRelease: number;
        /**
         * Ptfcco_CodePerdCompoInte
         */
        codePeriodeCompositionInterieur: number;
        /**
         * Mefoso_MtPrmeecheServ
         */
        montantPrmeecheService: number;
        /**
         * Mefafr_MtPrmeecheAccsComp
         */
        montantPrmeecheAccessoireComp: number;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Cdfava_CodeIndicVerstFondAutrPendPhas
         */
        codeIndiceVersementFondAutrePendantPhase: number;
        /**
         * Dtfccr_DateCretPhas
         * Type date au format yyyy-MM-dd
         */
        dateCreationPhase: string;
        /**
         * Cdfdcf_CodeConfmTxInteCred
         */
        codeConfirmationTauxInterieurCredit: number;
        /**
         * Npfcph_NbPerdPhas
         */
        nombrePeriodePhase: number;
        /**
         * Pefcph_CodePerdDurePhas
         */
        codePeriodeDurePhase: number;
        /**
         * Txfcmg_Marge
         */
        marge: number;
        /**
         * Txfcvi_Taux
         */
        taux: number;
        /**
         * Tvfrui_Repart
         */
        repart: number;
        /**
         * TxPhasFixe
         */
        tauxPhaseFixe: number;
        /**
         * TxPhasInit
         */
        tauxPhaseInit: number;
        /**
         * DateTraitIndic
         * Type date au format yyyy-MM-dd
         */
        dateTraitIndice: string;
        /**
         * MajorBonif
         */
        majorBonif: number;
        /**
         * CalculButoirHausse
         */
        calculButoirHausse: boolean;
        /**
         * CalculButoirBaisse
         */
        calculButoirBaisse: boolean;
        /**
         * PersoButoirHausse
         */
        persoButoirHausse: boolean;
        /**
         * PersoButoirBaisse
         */
        persoButoirBaisse: boolean;
        /**
         * ModeButoirHausse
         */
        modeButoirHausse: string;
        /**
         * ModeButoirBaisse
         */
        modeButoirBaisse: string;
        /**
         * DateButoirHausse
         */
        dateButoirHausse: string;
        /**
         * DateButoirBaisse
         */
        dateButoirBaisse: string;
        /**
         * TxPhas
         */
        tauxPhase: ITauxInteretAnnuelLecture;
        /**
         * TxPhasHorsBonfMajre
         */
        tauxPhaseHorsBonificationMajre: ITauxInteretAnnuelLecture;
        /**
         * Mefiha_MtPrmeecheHorsAccs
         */
        montantPrmeecheHorsAccessoire: number;
        /**
         * Mtfacc_MtPrmeecheAccsPerd
         */
        montantPrmeecheAccessoirePeriode: number;
        /**
         * InteretsDifferes
         */
        interetsDifferes: boolean;
        /**
         * CodeRecouvCapitInterets
         */
        codeRecouvCapitInterets: number;
        /**
         * ModeRecouvInterets
         */
        modeRecouvInterets: number;
        /**
         * ModeCapitInterets
         */
        modeCapitInterets: number;
        /**
         * CapitActive
         */
        capitActive: boolean;
        /**
         * RecouvActive
         */
        recouvActive: boolean;
        /**
         * ChoixCapitalisation
         */
        choixCapitalisation: boolean;
        /**
         * ChoixRecouvrement
         */
        choixRecouvrement: boolean;
        /**
         * Capitalisation
         */
        capitalisation: boolean;
        /**
         * Recouvrement
         */
        recouvrement: boolean;
        /**
         * MtPremiereEcheance
         */
        montantPremiereEcheance: number;
        /**
         * ChoixPeriode
         */
        choixPeriode: boolean;
        /**
         * ChoixPeriodicite
         */
        choixPeriodicite: boolean;
        /**
         * EstVisibleTaux
         */
        estVisibleTaux: boolean;
        /**
         * EstVisibleMarge
         */
        estVisibleMarge: boolean;
        /**
         * ListeChoixPeriode
         */
        listeChoixPeriode: Array<number>;
        /**
         * EstActifDuree
         */
        estActifDuree: boolean;
        /**
         * EstActifPeriodicite
         */
        estActifPeriodicite: boolean;
        /**
         * EstActifTaux
         */
        estActifTaux: boolean;
        /**
         * EstActifMarge
         */
        estActifMarge: boolean;
        /**
         * ListeModeCapitalisation
         */
        listeModeCapitalisation: Array<IScConstante>;
        /**
         * ListeModeRecouvrement
         */
        listeModeRecouvrement: Array<IScConstante>;
        /**
         * EstVisibleButoirHausse
         */
        estVisibleButoirHausse: boolean;
        /**
         * EstVisibleButoirBaisse
         */
        estVisibleButoirBaisse: boolean;
        /**
         * EstActifButoirHausse
         */
        estActifButoirHausse: boolean;
        /**
         * EstActifButoirBaisse
         */
        estActifButoirBaisse: boolean;
        /**
         * EstVisibleTauxHausse
         */
        estVisibleTauxHausse: boolean;
        /**
         * EstVisibleTauxBaisse
         */
        estVisibleTauxBaisse: boolean;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntParmRevsParPhas
         */
        idParametreRevisionParPhase: string;
        /**
         * ListIdntPalrTx
         */
        listeIdPalierTaux: Array<string>;
        /**
         * PhasePrdt
         */
        phaseProduit: IScProduitPhase;
    }
    interface ICreditParamIndexationLecture extends IElementLecture {
        /**
         * Nofrpe_NumePerdRevsAsscParmIndx
         */
        numeroPeriodeRevisionAssuranceParametreIndex: number;
        /**
         * Nofcfp_NumePhasPrdtAsscParmIndx
         */
        numeroPhaseProduitAssuranceParametreIndex: number;
        /**
         * Nofrji_NumeIndcRevsCred
         */
        numeroIndiceRevisionCredit: number;
        /**
         * Ctfrri_TypeRolIndc
         */
        typeRolIndice: string;
        /**
         * Cdfcin_CodeIndcRevs
         */
        codeIndiceRevision: string;
        /**
         * Ctfrui_ModeExprUtlsIndc
         */
        modeExpressionUtilisationIndice: number;
        /**
         * Cdfrui_ValrRefeIndc
         */
        valeurReferenceIndice: number;
        /**
         * Tvfrui_ValrCoefParmRevs
         */
        valeurCoefficientParametreRevision: number;
        /**
         * Cdfrop_CodeReptModfeche
         */
        codeReptModfeche: number;
        /**
         * Ctfrop_ModeReptModfeche
         */
        modeReptModfeche: number;
        /**
         * Nrfrrv_EvenDeclRevs
         */
        evenDeclarationRevision: string;
        /**
         * Nrfrr1_EvenDeclPrmeRevs
         */
        evenDeclarationPrmeRevision: string;
        /**
         * Npfrp1_NbPerdDetrPrmePerdRevs
         */
        nombrePeriodeDetrPrmePeriodeRevision: number;
        /**
         * Pefrp1_CodePerdDelUtlsDetrDatePrmeRevs
         */
        codePeriodeDelUtilisationDetrDatePrmeRevision: number;
        /**
         * Cdfrpj_CodeJourRevs
         */
        codeJourRevision: string;
        /**
         * Cdfrpp_CodeMoisRevs
         */
        codeMoisRevision: string;
        /**
         * Qcfrpj_NbJourAjtPourDetrDatePrmeRevs
         */
        nombreJourAjtPourDetrDatePrmeRevision: number;
        /**
         * Cnfrut_NatrLimtVart
         */
        natureLimiteVart: number;
        /**
         * Cdfrut_CodeValrRefeVartMaxi
         */
        codeValeurReferenceVartMaximum: number;
        /**
         * Ctfrut_ModeExprVartTxIndc
         */
        modeExpressionVartTauxIndice: number;
        /**
         * Tvfrut_ValrVartTxIndc
         */
        valeurVartTauxIndice: number;
        /**
         * Nrfrie_CodeEvenPermDetrValrIntlIndc
         */
        codeEvenPermDetrValeurInitialIndice: string;
        /**
         * Dtfrie_DateFixeDetrValrIntlIndc
         * Type date au format yyyy-MM-dd
         */
        dateFixeDetrValeurInitialIndice: string;
        /**
         * Npfrie_NbPerdDelEvenDetrDateValrIntlIndc
         */
        nombrePeriodeDelEvenDetrDateValeurInitialIndice: number;
        /**
         * Pefrie_CodePerdDelUtlsDetrValrIntlIndc
         */
        codePeriodeDelUtilisationDetrValeurInitialIndice: number;
        /**
         * Cdfrve_CodeIndicValrRefeVartEche
         */
        codeIndiceValeurReferenceVartEcheance: number;
        /**
         * Tvfrve_ValrVartMaxiEche
         */
        valeurVartMaximumEcheance: number;
        /**
         * IdntParmRevs
         */
        idParametreRevision: string;
    }
    interface ICreditParamRevisionParPeriodeLecture extends ICreditParamRevisionLecture {
        /**
         * Nofpre_NumePerdPrdt
         */
        numeroPeriodeProduit: number;
        /**
         * Npfrpf_NbPerdDurePerd
         */
        nombrePeriodeDurePeriode: number;
        /**
         * Ptfrpe_CodePerdDurePerd
         */
        codePeriodeDurePeriode: number;
        /**
         * Nxfrpe_EvenDeclDebtPerd
         */
        evenDeclarationDebutPeriode: string;
        /**
         * Npfrpe_NbPerdCmpstDelPremPerdRevs
         */
        nombrePeriodeCmpstDelPremierPeriodeRevision: number;
        /**
         * Pefrpe_CodePerdCorrNbPerdCmpstDel
         */
        codePeriodeCorrNombrePeriodeCmpstDel: number;
    }
    interface ICreditParamRevisionParPhaseLecture extends ICreditParamRevisionLecture {
        /**
         * Ctfcfp_CodeTypePhasAsscParmRevs
         */
        codeTypePhaseAssuranceParametreRevision: string;
    }
    interface ICreditParamRevisionLecture extends IElementLecture {
        /**
         * Idfrlr_IdntLoiRevs
         */
        idLoiRevision: string;
        /**
         * Nofrji_NumeJeuIndcRevsAsscCred
         */
        numeroJeuxIndiceRevisionAssuranceCredit: number;
        /**
         * Cdfres_CodeIndicecheRecl
         */
        codeIndicecheReclame: number;
        /**
         * Ctfrub_ModeExprButrTxBais
         */
        modeExpressionButoireTauxBaisse: number;
        /**
         * Ctfruh_ModeExprButrTxHaus
         */
        modeExpressionButoireTauxHausse: number;
        /**
         * Tvfru1_ValrButrTxBais
         */
        valeurButoireTauxBaisse: number;
        /**
         * Tvfru2_ValrButrTxHaus
         */
        valeurButoireTauxHausse: number;
        /**
         * Llfrlr_LibelleLoiRevision
         */
        libelleLoiRevision: string;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * ListIdntParmIndx
         */
        listeIdParametreIndex: Array<string>;
    }
    interface IEcheanceOptimisationLecture extends IElementLecture {
        /**
         * Mefhcd_MtRembSais
         */
        montantRemboursementSaisie: number;
        /**
         * Ctfhel_CodeTypeElemSais
         */
        codeTypeElementSaisie: number;
        /**
         * IdntPalrTx
         */
        idPalierTaux: string;
    }
    interface ICreditPalierTauxLecture extends IElementLecture {
        /**
         * TxIntePalr
         */
        tauxInterieurPalier: ITauxInteretAnnuelLecture;
        /**
         * Ctfctb_CodeTypeRemb
         */
        codeTypeRemboursement: number;
        /**
         * Txfcpg_TxPrgrEcheSurPalr
         */
        tauxProgressifEcheanceSurPalier: number;
        /**
         * Pefcpg_CodePerdAppliTxPrgrEchePalr
         */
        codePeriodeApplicationTauxProgressifEcheancePalier: number;
        /**
         * Nufape_NumeReltPrmeEchePalr
         */
        numeroRelationPrmeEcheancePalier: number;
        /**
         * Nufapp_NumeReltDernEchePalr
         */
        numeroRelationDernierEcheancePalier: number;
        /**
         * Npfcal_NbPerdDureePalr
         */
        nombrePeriodeDureePalier: number;
        /**
         * IdntCredPhas
         */
        idCreditPhase: string;
        /**
         * ListIdntEcheOptm
         */
        listeIdEcheanceOptimisation: Array<string>;
        /**
         * IdntPalrTxAsscPrdt
         */
        idPalierTauxAssuranceProduit: string;
    }
    interface ITrancheELLecture extends IElementLecture {
        /**
         * Txfpep_TxEpar
         */
        tauxEpargne: number;
        /**
         * Mtfaac_MtDrtAcqs
         */
        montantDroitAcqs: number;
        /**
         * Dtfpae_DateArreEpar
         * Type date au format yyyy-MM-dd
         */
        dateArreEpargne: string;
        /**
         * Lbfpet_LibletblOrigDrtPret
         */
        libletblOrigineDroitPret: string;
        /**
         * Cdfdpj_CodeDrtJust
         */
        codeDroitJustificatif: number;
        /**
         * Cdfiel_CodeRaptContEparLogm
         */
        codeRaptContratEpargneLogement: number;
        /**
         * Mtfida_MtDrtAcqsDepsOrigContEparLogm
         */
        montantDroitAcqsDepsOrigineContratEpargneLogement: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfird_CodeResrDrtAcqs
         */
        codeResrDroitAcqs: number;
        /**
         * IdntDrtUtls
         */
        idDroitUtilisation: string;
        /**
         * IdntContEparLogm
         */
        idContratEpargneLogement: string;
    }
    interface ICreditModaliteLecture extends IElementLecture {
        /**
         * Idfcmi_IdntModlCalcImpe
         */
        idModeleCalculImpe: string;
        /**
         * Txfdri_TxIndmRembAntc
         */
        tauxIndemniteRemboursementAnticipe: number;
        /**
         * Nofcmc_NumeModlRembAntc
         */
        numeroModeleRemboursementAnticipe: number;
        /**
         * Txfcsr_SurcTxParRappRembAntc
         */
        surcTauxParRappRemboursementAnticipe: number;
        /**
         * Txffmi_TxInteRetdImpe
         */
        tauxInterieurRetardImpe: number;
        /**
         * Mtffmi_MtIndmImpe
         */
        montantIndemniteImpe: number;
        /**
         * Cdfccr_CodeTrtInteIntrSurImpe
         */
        codeTraitementInterieurIntrSurImpe: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface ICompteCourantLecture extends IElementLecture {
        /**
         * Mtfasc_MtHyptCapt
         */
        montantHypothequeCapital: number;
        /**
         * Cifcmh_CodeIndicBlcgSaisMtHyptCapt
         */
        codeIndiceBlcgSaisieMontantHypothequeCapital: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface ICreditBonificationInfoLecture extends IElementLecture {
        /**
         * Cdfdic_CodeInfo
         */
        codeInformation: string;
        /**
         * sCdfddi_CodeDetail
         */
        codeDetail: string;
    }
    interface ICreditBonificationLecture extends IElementLecture {
        /**
         * Idfdce_IdCreditExterne
         */
        idCreditExterne: string;
        /**
         * Cifdcm_CodeEtat
         */
        codeEtat: number;
        /**
         * Mefdbc_MontantEtablissement
         */
        montantEtablissement: number;
        /**
         * Mefdbr_MontantPartenaire
         */
        montantPartenaire: number;
        /**
         * EstEligible
         */
        estEligible: boolean;
        /**
         * Lbfpnm_NomPartenaire
         */
        nomPartenaire: string;
        /**
         * ModeCalculTaux
         */
        modeCalculTaux: number;
        /**
         * TauxHorsBonif
         */
        tauxHorsBonif: number;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * Infos
         */
        information: Array<ICreditBonificationInfoLecture>;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface IHypothequeAerienneLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeSer
         */
        numeroSer: string;
        /**
         * Lbfolt_NumeImmt
         */
        numeroImmt: string;
    }
    interface IBonDeCaisseCapitalisationLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_NumeSiren
         */
        numeroSiren: string;
        /**
         * Lbfoo2_ValrBonOrig
         */
        valeurBonOrigine: number;
        /**
         * Lbfoo3_NumeContTitr
         */
        numeroContratTitre: string;
        /**
         * Lbfoo4_NatrBon
         */
        natureBon: string;
        /**
         * Lbfoo5_Dateeche
         * Type date au format yyyy-MM-dd
         */
        dateeche: string;
        /**
         * Lbfoo6_TitrNomPrenDeps
         */
        titreNomPrenDeps: string;
    }
    interface IDelegationLoyerLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_MtAnnuLoye
         */
        montantAnnuLoye: number;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_DateExtnBail
         * Type date au format yyyy-MM-dd
         */
        dateExterneBail: string;
        /**
         * Lbfoo2_NomGern
         */
        nomGern: string;
    }
    interface ICessionDaillyAutreLecture extends IBienPorteEnGarantieLecture {
    }
    interface IContratAssuranceLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_DateNaisAssr
         * Type date au format yyyy-MM-dd
         */
        dateNaisAssurance: string;
        /**
         * Lbfolt_NumeContAssr
         */
        numeroContratAssurance: string;
        /**
         * Lbfoo1_NomCieAssr
         */
        nomCieAssurance: string;
        /**
         * Lbfoo2_NumeSiren
         */
        numeroSiren: string;
        /**
         * Lbfoo3_CntrGest
         */
        cntrGestion: string;
        /**
         * Lbfoo4_TypeTechJurd
         */
        typeTechniqueJuridique: string;
        /**
         * Lbfoo5_NomContAssr
         */
        nomContratAssurance: string;
        /**
         * Lbfoo6_ApprPers
         */
        apportPersonne: number;
        /**
         * Lbfoo7_MtMinmVerstSign
         */
        montantMinimumVersementSigne: number;
        /**
         * Cdfvat_CodeIndicAttnVerst
         */
        codeIndiceAttnVersement: number;
        /**
         * ListIdntVerstAttn
         */
        listeIdVersementAttn: Array<string>;
    }
    interface IAntichreseLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_RefeCads
         */
        referenceCads: string;
        /**
         * Lbfolt_NumeLot
         */
        numeroLot: string;
    }
    interface ICessionDaillyLoyerImmeubleLecture extends IBienPorteEnGarantieLecture {
    }
    interface IGageVehiculeLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeSer
         */
        numeroSer: string;
        /**
         * Lbfolt_NumeImmt
         */
        numeroImmt: string;
    }
    interface IGageCompteInstrumentFinancierLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
    }
    interface INantissementPartSocialeLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeEnrg
         */
        numeroEnregistrement: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_TitrInte
         */
        descriptionOtion: string;
    }
    interface INantissementValeurMaterielleLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_TypeValrMatr
         */
        typeValeurMatrimonial: string;
        /**
         * Lbfolt_NumeSer
         */
        numeroRefTypeLot: string;
    }
    interface INantissementValeurMobiliereLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
    }
    interface INantissementFondDeCommerceLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeInscRcs
         */
        numeroInscRcs: string;
        /**
         * Lbfolt_LiblLibr
         */
        libelleLibr: string;
        /**
         * Cdfomo_TitrOccpLocLeqlFondEstExpl
         */
        titreOccpLocLeqlFondEstExpl: number;
    }
    interface IHypothequeImmobiliereLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_RefeCads
         */
        referenceCads: string;
        /**
         * Lbfolt_RefeLot
         */
        referenceLot: string;
        /**
         * Ctfmoi_TypeBien
         */
        typeBien: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * Cdfcdo_DestBien
         */
        destinataireBien: number;
        /**
         * Nbfosh_SurfHabt
         */
        surfHabitation: number;
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfcoi_ZoneImplBien
         */
        zoneImplBien: string;
        /**
         * Cdfqem_QualEmpla
         */
        qualEmpla: number;
        /**
         * Lbfoo1_MtDernMutt
         */
        montantDernierMutt: string;
        /**
         * Lbfoo2_DateDernMutt
         */
        dateDernierMutt: string;
        /**
         * Dtfoco_AnneConst
         */
        anneConstruction: number;
        /**
         * Lbfoo3_MtAnnuLoye
         */
        montantAnnuLoye: string;
        /**
         * Lbfoo5_NumeLotCopr
         */
        numeroLotCopr: string;
        /**
         * Lbfoo4_NumeSctn
         */
        numeroSctn: string;
        /**
         * Cifcoc_OccpActlBien
         */
        occpActuarielBien: number;
        /**
         * Cifcph_CodePresHypt
         */
        codePresHypotheque: number;
        /**
         * Idfceb_IdntExpr
         */
        idExpression: string;
        /**
         * Dtfcde_DateDemnExpr
         * Type date au format yyyy-MM-dd
         */
        dateDemandeExpression: string;
        /**
         * ListIdntProprios
         */
        listeIdProprios: Array<string>;
        /**
         * ListIdntRefCadastrls
         */
        listeIdReferenceCadastrls: Array<string>;
        /**
         * ListIdntRefLot
         */
        listeIdReferenceLot: Array<string>;
        /**
         * Dtfoac_DateAcquisitio
         * Type date au format yyyy-MM-dd
         */
        dateAcquisition: string;
        /**
         * Mtfoac_CoutAcquisition
         */
        coutAcquisition: number;
        /**
         * Nbfosa_SurfaceAnnexes
         */
        surfaceAnnexes: number;
        /**
         * Cdfomo_ModaliteOccupation
         */
        numeroDeVolume: number;
    }
    interface IBienDiversLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Refe1
         */
        reference1: string;
        /**
         * Lbfolt_Refe2
         */
        reference2: string;
    }
    interface IBienPorteEnGarantieLecture extends IElementLecture {
        /**
         * Lbfoof_LiblObjt
         */
        libelleObjet: string;
        /**
         * Cdfcni_TypeObjtComl
         */
        typeObjetCommercialisation: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Mtfgo2_MtEstmPrdn
         */
        montantEstmPrdn: number;
        /**
         * Dtfgo2_DateEstmPrdn
         * Type date au format yyyy-MM-dd
         */
        dateEstmPrdn: string;
        /**
         * Cdfgm2_CodeModlEstmPrdn
         */
        codeModeleEstmPrdn: string;
        /**
         * Cmfgt2_CodeMotfReSPrdn
         */
        codeMotfReSPrdn: string;
        /**
         * Dtfiex_DateExprBienCff
         * Type date au format yyyy-MM-dd
         */
        dateExpressionBienCff: string;
        /**
         * Lbfpex_NoteExprBienCff
         */
        noteExpressionBienCff: number;
        /**
         * Idfoof_IdntObjtGest
         */
        idObjetGestion: string;
        /**
         * PorteSurProjet
         */
        porteSurProjet: boolean;
        /**
         * Cifaan_SouscriptionContratAssurance
         */
        souscriptionContratAssurance: boolean;
        /**
         * IdntGarnReel
         */
        idGarantieReel: string;
    }
    interface ICreditHDLecture extends IElementLecture {
        /**
         * Txfgcr_Quot
         */
        pourcentCreditCouvert: number;
        /**
         * Mkfaco_CaptCouv
         */
        capitalCouverture: number;
        /**
         * Dtfgaf_DateAffec
         * Type date au format yyyy-MM-dd
         */
        dateAffectation: string;
        /**
         * Dffgaf_DateFinAffec
         * Type date au format yyyy-MM-dd
         */
        dateFinAffectation: string;
        /**
         * Idfcct_RefrPret
         */
        referencePret: string;
        /**
         * Idfadi_IdntDossRefe
         */
        idDossierReference: string;
        /**
         * Lbfcvs_LiblPret
         */
        libellePret: string;
        /**
         * Mtfaoc_MtPret
         */
        montantPret: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cnfctx_CodeRevs
         */
        codeRevision: boolean;
        /**
         * Txfama_Taux
         */
        tauxMoyen: number;
        /**
         * Cdfcin_CodeIndc
         */
        codeIndice: string;
        /**
         * Txfrrv_MargRevs
         */
        margeRevision: number;
        /**
         * Dtfam0_DateMer0
         * Type date au format yyyy-MM-dd
         */
        dateMER0: string;
        /**
         * Dtfaef_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffacr_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Mkfard_Crd
         */
        cRDCredit: number;
        /**
         * Mefmpe_MtEchnTotl
         */
        montantEcheanceTotal: number;
        /**
         * Cdfcno_NatrPret
         */
        naturePret: string;
        /**
         * Nufpct_NumrContEpar
         */
        numeroContratEpargne: string;
        /**
         * Mtfggi_MtIntlGarn
         */
        montantInitialGarantie: number;
        /**
         * EtabPrtr
         */
        etabPrtr: string;
        /**
         * Npfcfi_NbPerdCred
         */
        nombrePeriodeCredit: number;
        /**
         * Pefcfi_CodePerdCred
         */
        codePeriodeCredit: number;
        /**
         * TegModeRestitution
         */
        tegModeRestitution: number;
        /**
         * IdntCrdtExst
         */
        idCreditExiste: string;
    }
    interface IGarantieHDLecture extends IElementLecture {
        /**
         * Cdfcng_NatrGarnHorsDoss
         */
        natureGarantieHorsDossier: string;
        /**
         * Idfgg1_IdntOrigGarnHorsDoss
         */
        idOrigineGarantieHorsDossier: string;
        /**
         * CodeGarnRchab
         */
        codeGarantieRchab: number;
        /**
         * Nofghy_RangPrncHypt
         */
        rangPrincipalHypotheque: number;
        /**
         * Nofgsh_RangSecnHypt
         */
        rangSecnHypotheque: number;
        /**
         * Cdfgrh_CodeCessRangHypt
         */
        codeCessRangHypotheque: number;
        /**
         * IdnttblPrt
         */
        idEtabPreteur: string;
        /**
         * VilleConsvHypt
         */
        villeConsvHypotheque: string;
        /**
         * DatePublHypt
         * Type date au format yyyy-MM-dd
         */
        datePublHypotheque: string;
        /**
         * RfVolm
         */
        refVolume: string;
        /**
         * NumVolm
         */
        numeroVolume: number;
        /**
         * DateEfftHypt
         * Type date au format yyyy-MM-dd
         */
        dateEffetHypotheque: string;
        /**
         * DateFinHypt
         * Type date au format yyyy-MM-dd
         */
        dateFinHypotheque: string;
        /**
         * LiblEmpr
         */
        libelleEmprunt: string;
        /**
         * LiblNotr
         */
        libelleNotaire: string;
        /**
         * VilleNotr
         */
        villeNotaire: string;
        /**
         * MtInscHyptOrig
         */
        montantInscHypothequeOrigine: number;
        /**
         * MtHyptDisp
         */
        montantHypothequeDisp: number;
        /**
         * DateDispMt
         * Type date au format yyyy-MM-dd
         */
        dateDispMontant: string;
        /**
         * Cdfgpc_PactCommr
         */
        pactCommr: string;
        /**
         * Cefggi_CodEttGarn
         */
        codeEtatGarantie: number;
        /**
         * Cdfgex_CodeIndicGarnExtn
         */
        codeIndiceGarantieExterne: number;
        /**
         * CodeIndicTrfoGarn
         */
        codeIndiceTrfoGarantie: number;
        /**
         * Npfgdg_DurIntlMois
         */
        dureeInitialMois: number;
        /**
         * Idfoof_IdntObjtPortGarn
         */
        idObjetPortGarantie: string;
        /**
         * Ctfggm_CodeTypeGarnMyss
         */
        codeTypeGarantieMyss: string;
        /**
         * IdntGarnReel
         */
        idGarantieReel: string;
        /**
         * ListIdntCredExstHorsDoss
         */
        listeIdCreditExisteHorsDossier: Array<string>;
    }
    interface ITrancheMontantLecture extends IElementLecture {
        /**
         * Nufctr_NumeTrchMt
         */
        numeroTrancheMontant: number;
        /**
         * Txfcaa_TxTrchMt
         */
        tauxTrancheMontant: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * IdntCots
         */
        idCotisation: string;
        /**
         * IdntRemsClnt
         */
        idRemsClient: string;
    }
    interface ICotisationDerogationLecture extends ICotisationLecture {
        /**
         * Nufctr_NumeTrchAge
         */
        numeroTrancheAge: number;
        /**
         * Npfcap_NbPerdAppliDerg
         */
        nombrePeriodeApplicationDerogation: number;
        /**
         * Pefcap_PerdAppliDerg
         */
        periodeApplicationDerogation: number;
    }
    interface ICotisationTrancheAgeLecture extends ICotisationLecture {
        /**
         * Nufctr_NumeTrchAge
         */
        numeroTrancheAge: number;
        /**
         * Nbfcai_AgeMini
         */
        ageMinimum: number;
        /**
         * Nbfcae_AgeMaxi
         */
        ageMaximum: number;
    }
    interface ICotisationPhaseLecture extends ICotisationLecture {
        /**
         * IdntPhas
         */
        idPhase: string;
    }
    interface ICotisationPeriodeLecture extends ICotisationLecture {
        /**
         * Nufctr_NumeTrch
         */
        numeroTranche: number;
        /**
         * Npfcap_NbPerdPerd
         */
        nombrePeriodePeriode: number;
        /**
         * Pefcap_PerdPerd
         */
        periodePeriode: number;
        /**
         * Npfcel_NbPerdEtlm
         */
        nombrePeriodeEtlm: number;
        /**
         * Pefcde_PerdEtlm
         */
        periodeEtlm: number;
    }
    interface ICotisationLecture extends IElementLecture {
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: number;
        /**
         * CodeIndicBlcgSaisMont
         */
        codeIndiceBlcgSaisieMontant: number;
        /**
         * Ctfhac_CodeModeCalc
         */
        codeModeCalcul: number;
        /**
         * Cdfcap_CodeIndicApplEche
         */
        codeIndiceApplicationEcheance: boolean;
        /**
         * Pefcac_CodePerdCalc
         */
        codePeriodeCalcul: number;
        /**
         * Dtfhac_DateApplCots
         * Type date au format yyyy-MM-dd
         */
        dateApplicationCotisation: string;
        /**
         * Ddfhac_DateDebtAppliCots
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplicationCotisation: string;
        /**
         * Dffhac_DateFinAppliCots
         * Type date au format yyyy-MM-dd
         */
        dateFinApplicationCotisation: string;
        /**
         * Cdfceh_CodeRecv
         */
        codeRecouvrement: number;
        /**
         * Mtfhac_MtAsst
         */
        montantAssiette: number;
        /**
         * Ctfcac_TypeAccs
         */
        typeAccessoire: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
        /**
         * Ctfcel_CodeTypeAsstCalculElt
         */
        codeTypeAssietteCalculElt: string;
        /**
         * Cdfc1a_CodeRegleEvtPremierAppel
         */
        codeRegleEvenementPremierAppel: string;
        /**
         * Ctftva_CodeTypeTvaAcc
         */
        codeTypeTVAAccessoire: string;
        /**
         * Npfdaa_NbJoursAnneeNumerateur
         */
        nombreJoursAnneeNumerateur: number;
        /**
         * Npfdad_NbJoursAnneeDenominateur
         */
        nombreJoursAnneeDenominateur: number;
        /**
         * Npfce1_NbPerdAppliCots
         */
        nombrePeriodeApplicationCotisation: number;
        /**
         * Pefcde_PerdAppliCots
         */
        periodeApplicationCotisation: number;
        /**
         * Nrfccr_NumeReglCalcCots
         */
        numeroRegleCalculCotisation: string;
        /**
         * Nrfcmr_NumeReglAppliCots
         */
        numeroRegleApplicationCotisation: string;
        /**
         * Ctfcia_CodeTypeAppliCots
         */
        codeTypeApplicationCotisation: number;
        /**
         * Mtfgfr_MtFrsGarn
         */
        montantFrsGarantie: number;
        /**
         * Txfcac_TxConsFrsDoss
         */
        tauxConsolideFrsDossier: number;
        /**
         * Mtfca5_MtConsFrsDoss
         */
        montantConsolideFrsDossier: number;
        /**
         * Txfipf_PartFinn
         */
        partFinancier: number;
        /**
         * CodeIndicDepsBorn
         */
        codeIndiceDepsBorne: number;
        /**
         * Cifcip_CodeIndicIntePlanFinn
         */
        codeIndiceInterieurPlanFinancier: number;
        /**
         * IdntAccs
         */
        idAccessoire: string;
        /**
         * IdntCouv
         */
        idCouverture: string;
        /**
         * ListIdntTrchMt
         */
        listeIdTrancheMontant: Array<string>;
        /**
         * IdntRemsClnt
         */
        idRemsClient: string;
    }
    interface IRemiseClientLecture extends IElementLecture {
        /**
         * Ctfcrm_TypeRemsClnt
         */
        typeRemsClient: string;
        /**
         * MtAppl
         */
        montantApplication: number;
        /**
         * TxAppl
         */
        tauxApplication: number;
        /**
         * MargAppl
         */
        margeApplication: number;
        /**
         * Mtfirm_MtDerg
         */
        montantDerogation: number;
        /**
         * Txfirt_TxDerg
         */
        tauxDerogation: number;
        /**
         * Txfira_MargDerg
         */
        margeDerogation: number;
        /**
         * Mtfcac_MtCons
         */
        montantConsolide: number;
        /**
         * Txfcac_TxCons
         */
        tauxConsolide: number;
        /**
         * Txfcmc_MargCons
         */
        margeConsolide: number;
        /**
         * Cdfctx_ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * Dtfccr_DateCret
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Mtfire_MtRems
         */
        montantRems: number;
        /**
         * Mtfird_MtRemsDerg
         */
        montantRemsDerogation: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntCots
         */
        idCotisation: string;
        /**
         * IdntTrch
         */
        idTranche: string;
    }
    interface IPoolEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfaop_IdntOprtCess
         */
        idOprtCess: string;
        /**
         * Idfccf_IdntCadrFinn
         */
        idCadreFinancier: string;
        /**
         * Cnflpo_CodeNatrPool
         */
        codeNaturePool: number;
        /**
         * Cdfcor_CodeOrigCess
         */
        codeOrigineCess: number;
        /**
         * Ctfesr_TypeSousRolePool
         */
        typeSousRolePool: number;
        /**
         * Nofcca_NumVersionCadre
         */
        numeroVersionCadre: number;
    }
    interface IPayeurLecture extends IElementLecture {
        /**
         * Mtfdfx_MtPaieCred
         */
        montantPaiementCredit: number;
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
        /**
         * Cdfdrg_ModeReglUtlsParPayr
         */
        modeRegleUtilisationParPayr: string;
        /**
         * Nufddt_NumeCptePayr
         */
        numeroComptePayr: string;
        /**
         * Idfdma_RefeUnqMand
         */
        referenceUniqueMand: string;
        /**
         * Dgfdma_DateSignMand
         * Type date au format yyyy-MM-dd
         */
        dateSigneMand: string;
        /**
         * Cdfdrs_ModeReglUtlsParPayrSecours
         */
        modeRegleUtilisationParPayrSecours: string;
        /**
         * NumeroComptePayeurSecours
         */
        numeroComptePayeurSecours: string;
        /**
         * Idfdms_RefeUnqMandSecours
         */
        referenceUniqueMandSecours: string;
        /**
         * Dgfdms_DateSignMandSecours
         * Type date au format yyyy-MM-dd
         */
        dateSigneMandSecours: string;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntPersIdntCommPayr
         */
        idPersonneIdCommissionPayr: string;
    }
    interface IRelationEntrePersonnesLecture extends IElementLecture {
        /**
         * Cnfcrp_CodeNatureRelation
         */
        codeNatureRelation: string;
        /**
         * IdntPers1
         */
        idPersonne1: string;
        /**
         * IdntPers2
         */
        idPersonne2: string;
    }
    interface IPersonneMoraleLecture extends IPersonneLecture {
        /**
         * Nufpin_NumeInsee
         */
        numeroINSEE: string;
        /**
         * Dtfpir_DateInscRcs
         * Type date au format yyyy-MM-dd
         */
        dateInscRcs: string;
        /**
         * Dtfpcs_DateCretSoce
         * Type date au format yyyy-MM-dd
         */
        dateCreationSoce: string;
        /**
         * Mcfpch_ChffAffrHtExrcPrec
         */
        chiffreAffrHtExrcPrec: number;
        /**
         * Nbfpsa_NbSalr
         */
        nombreSalr: number;
        /**
         * Cdfpfj_FormJurd
         */
        formeJuridique: string;
        /**
         * Lbfpfj_LiblFormJurd
         */
        libelleFormeJuridique: string;
        /**
         * Cdfpdp_TypeDrtPersMorl
         */
        typeDroitPersonneMorl: number;
        /**
         * Mkfpca_MtCapt
         */
        montantCapital: number;
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
        /**
         * ListRolePersPhys
         */
        listeRolePersonnePhys: Array<string>;
    }
    interface IEtatDossierAssuranceLecture {
        /**
         * LibelleEtat
         */
        libelleEtat: string;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * LibelleDemande
         */
        libelleDemande: string;
        /**
         * LibelleDateEnvoi
         */
        libelleDateEnvoi: string;
    }
    interface IDecisionDossierAssuranceLecture {
        /**
         * AccesLectureDecision
         */
        accessoireLectureDecision: boolean;
        /**
         * AvisValide
         */
        avisValide: boolean;
        /**
         * CodeDecision
         */
        codeDecision: number;
        /**
         * LibelleCredit
         */
        libelleCredit: string;
        /**
         * LibelleAvis
         */
        libelleAvis: string;
        /**
         * LibelleErreur
         */
        libelleErreur: string;
    }
    interface IDossierAssuranceLecture {
        /**
         * EtatDossierAssurance
         */
        etatDossierAssurance: IEtatDossierAssuranceLecture;
        /**
         * DecisionDossierAssurance
         */
        decisionDossierAssurance: IDecisionDossierAssuranceLecture;
    }
    interface IPersonnePhysiqueLecture extends IPersonneLecture {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpci_LiblTitrCivl
         */
        libelleTitreCivilite: string;
        /**
         * Lbfppn_Prnm
         */
        prenom: string;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Lbfpnj_NomJeunFill
         */
        nomJeunFill: string;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNais: string;
        /**
         * Lbfpna_LieuNais
         */
        lieuNais: string;
        /**
         * Cdfpce_CodePersCe
         */
        codePersonneCE: number;
        /**
         * Cdfprm_CodeRegmMatr
         */
        codeRegimeMatrimonial: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Lbfpsf_LibelleSittFaml
         */
        libelleSituationFamille: string;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpsp_CateSoc
         */
        cateInteret: string;
        /**
         * Lbfmfc_LiblCatSocioPro
         */
        libelleCatSocioPro: string;
        /**
         * Dtfpma_DateEfftSittFaml
         * Type date au format yyyy-MM-dd
         */
        dateEffetSituationFamille: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmlo_CodeModeLogm
         */
        codeModeLogement: number;
        /**
         * Lbfmlo_LibelleModeLogm
         */
        libelleModeLogement: string;
        /**
         * Dtfmlo_DateEntrLogm
         * Type date au format yyyy-MM-dd
         */
        dateEntrLogement: string;
        /**
         * Cdfmju_CodeCapcJurd
         */
        codeCapcJuridique: number;
        /**
         * LibelleCapaciteJurd
         */
        libelle_CapaciteJuridique: string;
        /**
         * Ctfccj_CodeTypeCapJurd
         */
        codeTypeCapJuridique: string;
        /**
         * Cdfmnt_CodeNatn
         */
        codeNational: number;
        /**
         * LibelleNationalite
         */
        libelle_Nationalite: string;
        /**
         * Cdfmtd_CodeSaisAvisTierDtnr
         */
        codeSaisieAvisTiersDtnr: number;
        /**
         * Cdfmcx_CodeCtx
         */
        codeContentieuxHorsComptCE: number;
        /**
         * Mtfmes_MtEncrSaccefHorsOprt
         */
        montantEncoursSaccefHorsOprt: number;
        /**
         * Cdfmtr_TypeTrspUtls
         */
        typeTrspUtilisation: number;
        /**
         * Cdfmge_CodeGeotAdrsDomc
         */
        codeGeotAdresseDomiciliation: string;
        /**
         * Cdfppb_CodePaysResdEmpr
         */
        codePaysResdEmprunt: string;
        /**
         * Cdfopb_CodePaysLocsEmpr
         */
        codePaysLocalisationEmprunt: string;
        /**
         * Cdfkpa_CodePrflEmpr
         */
        codeProfilEmprunt: number;
        /**
         * Cofcpn_CodePstlLieuNais
         */
        codePstlLieuNais: string;
        /**
         * DossierAssurance
         */
        dossierAssurance: IDossierAssuranceLecture;
        /**
         * IdntActv
         */
        idActivite: string;
        /**
         * IdntIntdBanc
         */
        idIntdBancaire: string;
        /**
         * ListIdntOpps
         */
        listeIdOpps: Array<string>;
        /**
         * Lbfce1_LbAdrEPS1
         */
        libelleAdresseEPS1: string;
        /**
         * Lbfce2_LbAdrEPS2
         */
        libelleAdresseEPS2: string;
        /**
         * Lbfce3_LbAdrEPS3
         */
        libelleAdresseEPS3: string;
        /**
         * Lbfce4_LbAdrEPS4
         */
        libelleAdresseEPS4: string;
        /**
         * Lbfce5_LbAdrEPS5
         */
        libelleAdresseEPS5: string;
        /**
         * Codaac_CatSocioPro
         */
        categorieSocioProfessionnelle: string;
        /**
         * Irdqsn_NumSirenEnt
         */
        numeroSirenEntreprise: string;
        /**
         * Lbfprm_LbRegMat
         */
        libelleRegimeMatrimonial: string;
        /**
         * Llfco1_LbClsRegMat
         */
        libelleClauseRegimeMatrimonial: string;
        /**
         * IdntEntrepreneurIndiv
         */
        idEntrepreneurIndiv: string;
        /**
         * IdntSignataire
         */
        idSignataire: string;
    }
    interface IPersonneLecture extends IElementLecture {
        /**
         * Cdfprs_CrteResd
         */
        crteResd: number;
        /**
         * LiblResidence
         */
        libelleResidence: string;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_CateTypeAdmnBafi
         */
        cateTypeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Idfpbd_CleBdf
         */
        cleBDF: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Dtfper_DateEntrReltAvecCons
         * Type date au format yyyy-MM-dd
         */
        dateEntrRelationAvecConsolide: string;
        /**
         * Cdfptp_CodeTypePers
         */
        codeTypePersonne: number;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Cdfpap_CodeAssmPartc
         */
        codeAssmPartc: number;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
        /**
         * Lbfpen_EnsgComm
         */
        ensgCommission: string;
        /**
         * Lbfpir_LieuInscRC
         */
        lieuInscRC: string;
        /**
         * Nufpir_NumeInscRC
         */
        numeroInscRC: string;
        /**
         * Ctfprp_RolsPersPourDoss
         */
        rolsPersonnePourDossier: Array<string>;
        /**
         * PersEstAssr
         */
        personneEstAssurance: boolean;
        /**
         * Nofpem_NumeOrdrPersEmpr
         */
        numeroOrdrePersonneEmprunt: number;
        /**
         * Ctfipe_CodeTypeBasePers
         */
        codeTypeBasePersonne: number;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Hefcsd_DateSignDmdeCred
         * Type date au format yyyy-MM-dd
         */
        dateSigneDmdeCredit: string;
        /**
         * Hefcso_DateSignOffre
         * Type date au format yyyy-MM-dd
         */
        dateSigneOffre: string;
        /**
         * ReltnEntrPers
         */
        reltnEntrPersonne: Array<IRelationEntrePersonnesLecture>;
        /**
         * ListIdntRess
         */
        listeIdRessource: Array<string>;
        /**
         * ListIdntChrg
         */
        listeIdCharge: Array<string>;
        /**
         * ListIdntCpte
         */
        listeIdCompte: Array<string>;
        /**
         * ListIdntFamlEprg
         */
        listeIdFamilleEpargne: Array<string>;
        /**
         * IdntFicheContact
         */
        idFicheContact: string;
    }
    interface IGarantieReelleLecture extends IGarantieLecture {
        /**
         * Cdfghr_CodeGarnRchab
         */
        codeGarantieRchab: number;
        /**
         * Nofgsh_NumeRangSecnHypt
         */
        numeroRangSecnHypotheque: number;
        /**
         * Npfgdg_DureHyptMois
         */
        dureHypothequeMois: number;
        /**
         * Cdfgpc_PactCommr
         */
        pactCommr: number;
        /**
         * Nofghy_RangHypt
         */
        rangHypotheque: number;
        /**
         * Cdfgrh_CodeCessRangHypt
         */
        codeCessRangHypotheque: number;
        /**
         * Mtfghy_MtCouvParHyptRangInfe
         */
        montantCouvertureParHypothequeRangInfe: number;
        /**
         * PortesurProjet
         */
        portesurProjet: boolean;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
        /**
         * IdntGarnHorsDoss
         */
        idGarantieHorsDossier: string;
        /**
         * IdntObjtPortGarn
         */
        idObjetPortGarantie: string;
        /**
         * Llfgvh_VilleConservationHypotheque
         */
        villeConservationHyp: string;
        /**
         * Llfgvo_LibelleReferenceVolume
         */
        lblRefVolume: string;
        /**
         * Dtfgpu_DateDePublication
         * Type date au format yyyy-MM-dd
         */
        datePublication: string;
        /**
         * Nofgvo_NumeroDeVolume
         */
        numeroDeVolume: number;
    }
    interface IGarantiePersonnelleLecture extends IGarantieLecture {
        /**
         * Cdfgtg_CodeNatrCaut
         */
        codeNatureCaution: number;
        /**
         * Montant_Encours
         */
        montantEncours: number;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
        /**
         * ListErrrTechNonBlqn
         */
        listeErrrTechniqueNonBlqn: Array<string>;
    }
    interface IGarantieLecture extends IAccessoireLecture {
        /**
         * Cdfcng_NatrGarn
         */
        natureGarantie: string;
        /**
         * Lbfgga_Commt
         */
        commentaire: string;
        /**
         * Dtfgre_DateLimtRetrCaut
         * Type date au format yyyy-MM-dd
         */
        dateLimiteRetardCaution: string;
        /**
         * Cdfaag_CodeFormActeAuth
         */
        codeFormeActeAuthentique: number;
        /**
         * Ctfcgg_CodeClssGarn
         */
        codeClasseGarantie: number;
        /**
         * Ctfggm_CodeTypeGarantieMysys
         */
        codeTypeGarantieMysys: string;
        /**
         * Ctfcsu_TypeSurt
         */
        typeSurtaxe: number;
        /**
         * SaccefPossible
         */
        saccefPossible: boolean;
        /**
         * bAccesSaccef
         */
        accessoireSaccef: boolean;
        /**
         * EtatBoutonSaccef
         */
        etatBoutonSaccef: number;
        /**
         * bAccesENET
         */
        accessoireENET: boolean;
        /**
         * IdntPers
         */
        idPersonne: string;
    }
    interface IAssuranceLecture extends IAccessoireLecture {
        /**
         * EstAssuranceAXA
         */
        estAssuranceAXA: boolean;
        /**
         * EstAssuranceCNP
         */
        estAssuranceCNP: boolean;
        /**
         * EstAssuranceGroupePourTAEA
         */
        estAssuranceGroupePourTAEA: boolean;
        /**
         * Ctfcaa_TypeAssr
         */
        typeAssurance: string;
        /**
         * Cdasdg_CodeDeleAssr
         */
        codeDeleAssurance: number;
        /**
         * Lbfabe_BenfAssrAvntVerst
         */
        beneficiaireAssuranceAvenantVersement: string;
        /**
         * Cdfaex_CodeCouvExts
         */
        codeCouvertureExts: number;
        /**
         * Ctfarq_TypeRisq
         */
        typeRisque: number;
        /**
         * CodeAssrObgt
         */
        codeAssuranceObligatoire: number;
        /**
         * Cdfaat_CodeAssrPart
         */
        codeAssurancePart: number;
        /**
         * Facultative
         */
        facultative: number;
        /**
         * Obligatoire
         */
        obligatoire: number;
        /**
         * ObligatoirePartielle
         */
        obligatoirePartielle: number;
        /**
         * Cdfarv_CodeResr
         */
        codeResr: number;
        /**
         * Lbfaex_LiblAssrExtn
         */
        libelleAssuranceExterne: string;
        /**
         * Nosrn_NumeSirenCieAssr
         */
        numeroSirenCieAssurance: string;
        /**
         * Nrfcan_NumeReglCalcDateEfft
         */
        numeroRegleCalculDateEffet: string;
        /**
         * Ctfaaa_CodeAgreAssrExtr
         */
        codeAgreAssuranceExtr: number;
        /**
         * Montant_Encours
         */
        montant_Encours: number;
        /**
         * Idfaos_IdntConfOffrAssr
         */
        idConfOffreAssurance: string;
        /**
         * Nrfcrt_NumeReglTarfAssr
         */
        numeroRegleTarfAssurance: string;
        /**
         * Idfaof_IdntCrdtConfCnp
         */
        idCreditConfCnp: string;
        /**
         * Txfaso_TauxSoclAssr
         */
        tauxSocialeAssurance: number;
        /**
         * IdntPersAssr
         */
        idPersonneAssurance: string;
    }
    interface IAccessoireLieProduitLecture extends IAccessoireLecture {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
    }
    interface IAccessoireComplementaireLecture extends IAccessoireLecture {
        /**
         * Cnfcoi_CodeNatrOrigAccs
         */
        codeNatureOrigineAccessoire: number;
        /**
         * IdntCatlFrsComp
         */
        idCatlFrsComp: string;
        /**
         * IdntCatlParmRverTier
         */
        idCatlParametreRverTiers: string;
        /**
         * Ctfprp_RoleTiers
         */
        roleTiers: string;
        /**
         * Lbfpa1_Intitule
         */
        intitule: string;
    }
    interface IServiceSurObjetLecture extends IAccessoireLecture {
        /**
         * Nrfcan_NumeReglCalcDateEfftServ
         */
        numeroRegleCalculDateEffetService: string;
        /**
         * Nofood_NumeReltObjtDossAuqlEstRattServ
         */
        numeroRelationObjetDossierAuqlEstRattachementService: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
        /**
         * IdntObjtServ
         */
        idObjetService: string;
    }
    interface IAccessoireLecture extends IElementLecture {
        /**
         * Idfaaa_IdntAccsGest
         */
        idAccessoireGestion: string;
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Ctfcah_CodeTyplAccs
         */
        codeTypologieAccessoire: string;
        /**
         * Txfipf_PartFinnAccs
         */
        partFinancierAccessoire: number;
        /**
         * CodeIndicAccsAper
         */
        codeIndiceAccessoireAper: boolean;
        /**
         * CodeIndicAccsFinn
         */
        codeIndiceAccessoireFinancier: boolean;
        /**
         * Dtfccr_DateCret
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Ddfaaa_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffaaa_DateFinEfft
         * Type date au format yyyy-MM-dd
         */
        dateFinEffet: string;
        /**
         * Cdfpim_CodeBeneficiaire
         */
        codeBeneficiaire: string;
        /**
         * Cdfpnb_PersonnalisationBeneficiare
         */
        personnalisationBeneficiare: number;
        /**
         * MontantFraisAccessoire
         */
        montantFraisAccessoire: number;
        /**
         * MontantSouhaite
         */
        montantSouhaite: number;
        /**
         * TauxRetenuAccessoire
         */
        tauxRetenuAccessoire: number;
        /**
         * ListIdntCouv
         */
        listeIdCouverture: Array<string>;
        /**
         * ListIdntCots
         */
        listeIdCotisation: Array<string>;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * ListIdntAvisOrgnExtr
         */
        listeIdAvisOrgnExtr: Array<string>;
        /**
         * IdntPlan
         */
        idPlan: string;
    }
    interface IContexteCoproLecture extends IElementLecture {
        /**
         * EstCopro100
         */
        estCopro100: boolean;
    }
    interface IDroitUtiliseLecture extends IElementLecture {
        /**
         * Mtfadu_MtDrtAcqsUtls
         */
        montantDroitAcqsUtilisation: number;
        /**
         * Mtfali_MtDrtLimt
         */
        montantDroitLimite: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntTrchEparLogm
         */
        idTrancheEpargneLogement: string;
    }
    interface IVariationDureeLecture extends IElementLecture {
        /**
         * Npfarv_NbPerdVartPoss
         */
        nombrePeriodeVartPossibilite: number;
        /**
         * TypeButrVartDure
         */
        typeButoireVartDure: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface IPieceClientLecture extends IPieceLecture {
    }
    interface IControleManuelLecture extends IPieceLecture {
        /**
         * Ctfchq_TypeActrOrigCtrl
         */
        typeActrOrigineControle: number;
        /**
         * Llfccm_CommtCtrl
         */
        commentaireControle: string;
        /**
         * HistCtrl
         */
        histControle: Array<IControleManuelLecture>;
    }
    interface IPieceAgenceLecture extends IPieceLecture {
    }
    interface IPieceLecture extends IElementLecture {
        /**
         * IdentifiantPiece
         */
        identifiantPiece: string;
        /**
         * Llfcpt_LiblPiecCtrl
         */
        libellePieceControle: string;
        /**
         * Ctfcth_CodeThm
         */
        codeTheme: string;
        /**
         * Ctfcp1_CodePrcs
         */
        identifiantProcessusAuPlusTard: string;
        /**
         * Cifcch_IndicCasEchn
         */
        indiceCasEcheance: number;
        /**
         * Cifcob_IndicObgt
         */
        indiceObligatoire: number;
        /**
         * Cdfaju_StttPiecCtrl
         */
        stttPieceControle: number;
        /**
         * Dtfarj_DateDernMajSttt
         * Type date au format yyyy-MM-dd
         */
        dateDernierMAJSttt: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Llfcai_LiblAide
         */
        libelleAide: string;
        /**
         * CodeEtatAcquistion
         */
        codeEtatAcquistion: string;
    }
    interface IContratEpargneLogementLecture extends IElementLecture {
        /**
         * Cdfppr_CodeTypeEL
         */
        codeTypeEL: number;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
        /**
         * TypeDrt
         */
        typeDroit: number;
        /**
         * Ctfpli_LienParnAvecCedn
         */
        lienParentAvecCedn: number;
        /**
         * Nufpct_IdntContEl
         */
        idContratEpargneLogement: string;
        /**
         * Lbfptc_LiblTitlCont
         */
        libelleTitulaireContrat: string;
        /**
         * Cdfpbc_CodeIndicBenePrimEl
         */
        codeIndiceBenePrimeEpargneLogement: number;
        /**
         * Ddfpct_DateOuvrCont
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureContrat: string;
        /**
         * Dtfprf_DateCltrCont
         * Type date au format yyyy-MM-dd
         */
        dateClotureContrat: string;
        /**
         * Cdfifr_CodeForc
         */
        codeForc: number;
        /**
         * Cdfiel_CodeRaptContEparLogm
         */
        codeRaptContratEpargneLogement: number;
        /**
         * Lbfpet_EtabOrigInte
         */
        etabOrigineInterieur: string;
        /**
         * Idfppc_IdntPersApprDrtCont
         */
        idPersonneApportDroitContrat: string;
        /**
         * Cdfpdj_CodeDrtJust
         */
        codeDroitJustificatif: number;
        /**
         * Cdfird_CodeResrDrtAcqs
         */
        codeResrDroitAcqs: number;
        /**
         * ContratPostReforme
         */
        contratPosteReforme: boolean;
        /**
         * ListIdntTrncEl
         */
        listeIdTrancheEpargneLogement: Array<string>;
        /**
         * IdwsPersBenef
         */
        idPersonneBeneficiaire: string;
    }
    interface IComplementFicheContactLecture extends IElementLecture {
        /**
         * Hdfcpc_HrDebtPlgHor
         */
        hrDebutPlgHor: number;
        /**
         * Hffcpc_HrFinPlgHor
         */
        hrFinPlgHor: number;
        /**
         * Llfccp_Comentair
         */
        comentair: string;
    }
    interface IPiecoThemeLecture extends IElementLecture {
        /**
         * CodeTheme
         */
        codeTheme: string;
        /**
         * Llfcth_LibelleLong
         */
        libelleLong: string;
        /**
         * Lcfcth_LibelleCourt
         */
        libelleCourt: string;
        /**
         * Nufccl_NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Ctfcet_CodeTypeElement
         */
        codeTypeElement: string;
    }
    interface IPiecoElementLecture extends IElementLecture {
        /**
         * Id
         */
        id: string;
        /**
         * NumRel
         */
        numeroRel: number;
        /**
         * TypeElement
         */
        typeElement: string;
        /**
         * Theme
         */
        theme: IPiecoThemeLecture;
        /**
         * Libelle
         */
        libelle: string;
    }
    interface IMotifEvenementConformiteLecture extends IElementLecture {
        /**
         * Id
         */
        id: string;
        /**
         * Idfadi_Dossier
         */
        dossier: string;
        /**
         * Origine
         */
        origine: IPiecoElementLecture;
        /**
         * Hefima_DateDebut
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * Hefilm_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Dtfar4_DerniereMaj
         * Type date au format yyyy-MM-dd
         */
        derniereMAJ: string;
        /**
         * Idfaen_IdEntite
         */
        idEntite: string;
        /**
         * Nofajd_NumeroRelatif
         */
        numeroRelatif: number;
        /**
         * Cefima_EtatMotif
         */
        etatMotif: number;
        /**
         * Ctfcet_TypeMotif
         */
        typeMotif: string;
        /**
         * MotifActif
         */
        motifActif: boolean;
        /**
         * CtfCth_ThemeRegroupement
         */
        themeRegroupement: string;
        /**
         * Llfcth_LibelleLongTheme
         */
        libelleLongTheme: string;
        /**
         * Qcfima_CptEvenementConformite
         */
        cptEvenementConformite: number;
        /**
         * Llfcpt_LiblPiecCtrl
         */
        libellePieceControle: string;
    }
    interface IEvenementConformiteLecture extends IElementLecture {
        /**
         * Idfadi_Dossier
         */
        dossier: string;
        /**
         * Qcfima_CptEvenementConformite
         */
        cptEvenementConformite: number;
        /**
         * Motifs
         */
        motifs: Array<IMotifEvenementConformiteLecture>;
        /**
         * Hdfima_DateDebut
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * Hffima_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Llfima_Motif
         */
        motif: string;
        /**
         * LibelleType
         */
        libelleType: string;
    }
    interface IDocumentOffreIndustrialiseeLecture extends IElementLecture {
        /**
         * CodeEntiteFonctionnelle
         */
        codeEntiteFonctionnelle: string;
        /**
         * IdEntiteFonctionnelle
         */
        idEntiteFonctionnelle: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * LibelleDocument
         */
        libelleDocument: string;
        /**
         * LibelleAide
         */
        libelleAide: string;
        /**
         * CodeExterneDocument
         */
        codeExterneDocument: string;
        /**
         * IndicateurCasEcheant
         */
        indicateurCasEcheant: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Origine
         */
        origine: string;
        /**
         * DateCreation
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * DateModification
         * Type date au format yyyy-MM-dd
         */
        dateModification: string;
        /**
         * EtatDocument
         */
        etatDocument: string;
        /**
         * DocumentCommun
         */
        documentCommun: string;
        /**
         * Obligatoire
         */
        obligatoire: boolean;
        /**
         * Destinataire
         */
        destinataire: string;
        /**
         * UrlPDF
         */
        urlPDF: string;
        /**
         * EstDocNEO
         */
        estDocNEO: boolean;
        /**
         * EstDocOffre
         */
        estDocOffre: boolean;
    }
    interface IOffrePretIndustrialiseeLecture extends IElementLecture {
        /**
         * EditionEligible
         */
        editionEligible: boolean;
        /**
         * EditionEligibleEnAgence
         */
        editionEligibleEnAgence: boolean;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * DossierGdeACree
         */
        dossierGdeACree: boolean;
        /**
         * EtatDossierEdition
         */
        etatDossierEdition: string;
        /**
         * NbEnveloppesLigne1
         */
        nombreEnveloppesLigne1: number;
        /**
         * NbEnveloppesLigne2
         */
        nombreEnveloppesLigne2: number;
        /**
         * NbEnveloppesLigne3
         */
        nombreEnveloppesLigne3: number;
        /**
         * LibEnveloppeLigne1
         */
        libelleEnveloppeLigne1: string;
        /**
         * LibEnveloppeLigne2
         */
        libelleEnveloppeLigne2: string;
        /**
         * LibEnveloppeLigne3
         */
        libelleEnveloppeLigne3: string;
        /**
         * NbEnveloppesLigne1NO
         */
        nombreEnveloppesLigne1NO: number;
        /**
         * NbEnveloppesLigne2NO
         */
        nombreEnveloppesLigne2NO: number;
        /**
         * NbEnveloppesLigne3NO
         */
        nombreEnveloppesLigne3NO: number;
        /**
         * LibEnveloppeLigne1NO
         */
        libelleEnveloppeLigne1NO: string;
        /**
         * LibEnveloppeLigne2NO
         */
        libelleEnveloppeLigne2NO: string;
        /**
         * LibEnveloppeLigne3NO
         */
        libelleEnveloppeLigne3NO: string;
        /**
         * NbEnveloppesLigne1CA
         */
        nombreEnveloppesLigne1CA: number;
        /**
         * NbEnveloppesLigne2CA
         */
        nombreEnveloppesLigne2CA: number;
        /**
         * NbEnveloppesLigne3CA
         */
        nombreEnveloppesLigne3CA: number;
        /**
         * LibEnveloppeLigne1CA
         */
        libelleEnveloppeLigne1CA: string;
        /**
         * LibEnveloppeLigne2CA
         */
        libelleEnveloppeLigne2CA: string;
        /**
         * LibEnveloppeLigne3CA
         */
        libelleEnveloppeLigne3CA: string;
        /**
         * LibAbregeCaisse
         */
        libelleAbregeCaisse: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * EdsEdition
         */
        eDSEdition: string;
        /**
         * ValidationImplicite
         */
        validationImplicite: boolean;
        /**
         * DocumentGlobalPDF
         */
        documentGlobalPDF: string;
        /**
         * ListeDocIndusLecture
         */
        listeDocIndusLecture: Array<IDocumentOffreIndustrialiseeLecture>;
    }
    interface IDocumentSignatureElectroniqueLecture extends IElementLecture {
        /**
         * IdentifiantDocument
         */
        identifiantDocument: string;
        /**
         * CodeTypeEntite
         */
        codeTypeEntite: string;
        /**
         * IdentifiantIDN
         */
        identifiantIDN: string;
        /**
         * IdentifiantComplet
         */
        identifiantComplet: string;
        /**
         * NomDocument
         */
        nomDocument: string;
        /**
         * RefDocProd
         */
        referenceDocProd: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Origine
         */
        origine: string;
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * FluxBinaire
         */
        fluxBinaire: string;
        /**
         * EstPresent
         */
        estPresent: boolean;
        /**
         * IndicePlan
         */
        indicePlan: number;
        /**
         * IndiceCredit
         */
        indiceCredit: number;
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * LibelleEntiteRattachement
         */
        libelleEntiteRattachement: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Obligatoire
         */
        obligatoire: boolean;
        /**
         * estDocNeo
         */
        estDocNEO: boolean;
        /**
         * EstDocOffre
         */
        estDocOffre: boolean;
    }
    interface IInformationSignataire {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationDossierSignature {
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataire>;
    }
    interface IOffreSignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignature;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface IMandatLecture extends IElementLecture {
        /**
         * Cocxbq_CodeCaisse
         */
        codeCaisse: string;
        /**
         * Dgfdms_DateDeSignature
         * Type date au format yyyy-MM-dd
         */
        dateDeSignature: string;
        /**
         * Ctfdfm_TypeFrequenceMandat
         */
        typeFrequenceMandat: string;
        /**
         * Ctfdma_TypeMandatSepaSdd
         */
        typeMandatSepaSdd: number;
        /**
         * Cnfdma_CodeNatureMandat
         */
        codeNatureMandat: number;
        /**
         * Idfdma_RefeMandat
         */
        referenceMandat: string;
        /**
         * Llfdcr_NomDuCreancier
         */
        nomDuCreancier: string;
        /**
         * Llfdac_AdresseDuCreancier
         */
        adresseDuCreancier: string;
        /**
         * Cofdpc_CodePostalDuCreancier
         */
        codePostalDuCreancier: string;
        /**
         * Lcfdvc_VilleDuCreancier
         */
        villeDuCreancier: string;
        /**
         * Ctfdpa_CodePaysDuCreancier
         */
        codePaysDuCreancier: string;
        /**
         * Llfdpo_LibDuPaysDonneurOrdre
         */
        libelleDuPaysDonneurOrdre: string;
        /**
         * Idfdcr_IdntCreancierSepaDomaine
         */
        idCreancierSepaDomaine: string;
        /**
         * Llfddb_NomDuDebiteur
         */
        nomDuDebiteur: string;
        /**
         * Idfdb3_CodeBicDebiteur
         */
        codeBicDebiteur: string;
        /**
         * Idfdi3_NumeroIbanCompteDebiteur
         */
        numeroIbanCompteDebiteur: string;
        /**
         * Idfddb_IdntDuDebiteur
         */
        idDuDebiteur: string;
        /**
         * Llfdad_AdresseDuDebiteur
         */
        adresseDuDebiteur: string;
        /**
         * Cofdpd_CodePostalDuDebiteur
         */
        codePostalDuDebiteur: string;
        /**
         * Lcfdvd_VilleDuDebiteur
         */
        villeDuDebiteur: string;
        /**
         * Ctfdpd_CodePaysDuDebiteur
         */
        codePaysDuDebiteur: string;
        /**
         * Llfdpd_LibPaysDuDebiteur
         */
        libellePaysDuDebiteur: string;
        /**
         * Llfdci_LibCreancierInitial
         */
        libelleCreancierInitial: string;
        /**
         * Idfdct_IdntCreancierInitial
         */
        idCreancierInitial: string;
        /**
         * Llfddf_LibDebiteurFinal
         */
        libelleDebiteurFinal: string;
        /**
         * Idfddf_IdntDebiteurFinal
         */
        idDebiteurFinal: string;
    }
    interface IDossierMRHLecture extends IElementLecture {
        /**
         * UrlIHM
         */
        urlIHM: string;
        /**
         * codeReseau
         */
        codeReseau: string;
        /**
         * idInstanceProcessus
         */
        idInstanceProcessus: string;
        /**
         * codeProcessus
         */
        codeProcessus: string;
        /**
         * idEtape
         */
        idEtape: string;
        /**
         * codeEtape
         */
        codeEtape: string;
        /**
         * AgncDomc
         */
        agenceDomiciliation: string;
        /**
         * urlRetour
         */
        urlRetour: string;
        /**
         * Sigle
         */
        sigle: string;
        /**
         * CdPrflAssr
         */
        codeProfilAssurance: string;
        /**
         * IdActrEtab
         */
        idActrEtab: string;
        /**
         * CdOrgnFinnActrEtab
         */
        codeOrgnFinancierActrEtab: string;
        /**
         * NomUsgActrEtab
         */
        nomUsageActrEtab: string;
        /**
         * IdEdsActrEtabl
         */
        idEDSActrEtabl: string;
        /**
         * ModeIntgIhm
         */
        modeIntegrationIhm: number;
        /**
         * CdAffSynth
         */
        codeAffSynth: number;
        /**
         * CdModeAccesSynth
         */
        codeModeAccessoireSynth: number;
        /**
         * CdEtabFinnTier
         */
        codeEtabFinancierTiers: string;
        /**
         * IdTier
         */
        idTiers: string;
        /**
         * CdTypeCanlDistn
         */
        codeTypeCanlDistn: string;
        /**
         * CdTypePerimEnt
         */
        codeTypePerimEnt: string;
        /**
         * CdAppliApl
         */
        codeApplicationAPL: string;
        /**
         * DateAcces
         * Type date au format yyyy-MM-dd
         */
        dateAccessoire: string;
        /**
         * AppelEffectue
         */
        appelEffectue: boolean;
    }
    interface IRessourceLecture extends IElementLecture {
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Mtfpre_MtRess
         */
        montantRessource: number;
        /**
         * Txfmrc_TxPondRess
         */
        tauxPondereRessource: number;
        /**
         * Npfpre_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
        /**
         * Lbfpre_LiblRessource
         */
        libelleRessource: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * IdntGrpeIntv
         */
        idGrpeIntervenant: string;
    }
    interface IPhaseCreditExistantLecture extends IElementLecture {
        /**
         * Ddfcph_DateDebtPhas
         * Type date au format yyyy-MM-dd
         */
        dateDebutPhase: string;
        /**
         * Dffcph_DateFinPhas
         * Type date au format yyyy-MM-dd
         */
        dateFinPhase: string;
        /**
         * Meface_MtEchePhas
         */
        montantEcheancePhase: number;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Pftmam_PerdAmrt
         */
        periodeAmortissement: number;
        /**
         * Duree
         */
        duree: number;
        /**
         * IdntCredExst
         */
        idCreditExiste: string;
    }
    interface IFamilleEpargneLecture extends IElementLecture {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Nbfmpr_NbPrdtDetnPourUneFamlPrdtAdr
         */
        nombreProduitDetnPourUneFamilleProduitAdresse: number;
        /**
         * Mtfmve_MtValrEprgAvntOper
         */
        montantValeurEpargneAvenantOper: number;
        /**
         * Lbfcej_LiblCaisEprg
         */
        libelleCaisseEpargne: string;
        /**
         * Dtfmve_DateValrEprg
         * Type date au format yyyy-MM-dd
         */
        dateValeurEpargne: string;
        /**
         * Mtfmep_MtEprgApreOper
         */
        montantEpargneApreOper: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * Cdfmce_CodeProduitCE
         */
        codeProduitCE: number;
        /**
         * Lbfmpr_LibelleProduitAdr
         */
        libelleProduitAdresse: string;
    }
    interface IOppositionLecture extends IElementLecture {
        /**
         * Cdfmop_CodeOppo
         */
        codeOpposition: string;
        /**
         * Ddfmop_DateDebtOppo
         * Type date au format yyyy-MM-dd
         */
        dateDebutOpposition: string;
        /**
         * Dffmop_DateFinOppo
         * Type date au format yyyy-MM-dd
         */
        dateFinOpposition: string;
        /**
         * IdntPersPhys
         */
        idPersonnePhys: string;
    }
    interface IVersementFractionneLecture extends IElementLecture {
        /**
         * Ptfbmv_PerdicVerst
         */
        periodiciteVersement: number;
        /**
         * Mvfbmv_MtPremVerst
         */
        montantPremierVersement: number;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nufbve_NumrDomcMadFond
         */
        numeroDomiciliationMADFond: string;
        /**
         * Mvfbmf_MtVerstFrct
         */
        montantVersementFraction: number;
        /**
         * Nbfbvs_NbVerstSouh
         */
        nombreVersementSouh: number;
        /**
         * Mvfcpm_MtVerstPerdMaxm
         */
        montantVersementPeriodeMaximum: number;
        /**
         * Mvfcim_MtVerstIntlMaxm
         */
        montantVersementInitialMaximum: number;
        /**
         * Txfcpv_QuotPremVerst
         */
        quotientPremierVersement: number;
        /**
         * Txfcvp_QuotVerstPerd
         */
        quotientVersementPeriode: number;
    }
    interface IBienAVendreLecture extends IElementLecture {
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Ctfcor_CodeTypeObjtRegl
         */
        codeTypeObjetRegle: string;
        /**
         * Ctfmve_TypeVent
         */
        typeVent: number;
        /**
         * Mtfmvc_PrixNetVndr
         */
        prixNetVendeur: number;
        /**
         * Mtfmva_MtCrdSurBienVend
         */
        montantCRDSurBienVend: number;
        /**
         * Mtfgrd_MtCrdRachSurBienVend
         */
        montantCRDRachSurBienVend: number;
        /**
         * Mtfaag_MtComsAgnc
         */
        montantComsAgence: number;
        /**
         * Mtfaoc_MtAcqs
         */
        montantAcqs: number;
        /**
         * Dtfaoc_DateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateAcqs: string;
        /**
         * Ctfmma_ModeAcqs
         */
        modeAcqs: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IComplementDossierLecture extends IElementLecture {
        /**
         * Llfidr_LiblDelRelsProj
         */
        libelleDelReleaseProjet: string;
        /**
         * Ctfipt_CodePrrtTrt
         */
        codePrrtTraitement: string;
        /**
         * Dtfisi_DateSaisSurItnt
         * Type date au format yyyy-MM-dd
         */
        dateSaisieSurInternet: string;
        /**
         * Hefisi_HeurSaisSurItnt
         */
        heureSaisieSurInternet: number;
    }
    interface IReamenagementLecture extends IElementLecture {
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
        /**
         * Ctfmup_UsgPretTres
         */
        usagePretTres: number;
        /**
         * Mtfmvc_AncnEche
         */
        ancnEcheance: number;
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * Mtfmvd_ValrAchtObjtFinn
         */
        valeurAchtObjetFinancier: number;
        /**
         * Npfmrp_DureResdPretRefn
         */
        dureResdPretRefn: number;
        /**
         * Dtfoac_DateAcqsObjtRefn
         * Type date au format yyyy-MM-dd
         */
        dateAcqsObjetRefn: string;
        /**
         * Mtfaoc_CoutAcqsObjtRefn
         */
        coutAcqsObjetRefn: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * ListIdntPretReam
         */
        listeIdPretReamenagement: Array<string>;
    }
    interface IPretReamenageLecture extends IElementLecture {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfao2_IdntDossOrig
         */
        idDossierOrigine: string;
        /**
         * Cdfcpo_CodePrdtetbl
         */
        codePrdtetbl: string;
        /**
         * Cdfars_CodeApparRes
         */
        codeApparRes: boolean;
        /**
         * Ctfars_TypeApparRes
         */
        typeApparRes: number;
        /**
         * Dtfccl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * Mefacg_MtechePerdPretRefn
         */
        mtechePeriodePretRefn: number;
        /**
         * Peface_Perdeche
         */
        perdeche: number;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Lbfcvs_LiblPrdt
         */
        libelleProduit: string;
        /**
         * Ctfals_TypeRegl
         */
        typeRegle: number;
        /**
         * Ctfmtc_TypeCred
         */
        typeCredit: number;
        /**
         * Lbfaep_NometblPret
         */
        nometblPret: string;
        /**
         * Ctfpag_CodeOrigAppliGestCred
         */
        codeOrigineApplicationGestionCredit: number;
        /**
         * Cdfidr_CodeDev
         */
        codeDev: string;
        /**
         * IdntReam
         */
        idReamenagement: string;
        /**
         * IdntInfoCompRegr
         */
        idInformationCompRegr: string;
    }
    interface IPretReamenageableLecture extends IElementLecture {
        /**
         * InfoPret
         */
        informationPret: IPretReamenageLecture;
        /**
         * InfoRegroupement
         */
        informationRegroupement: IInfoRegroupementLecture;
    }
    interface IResultatControle {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Messages
         */
        messages: Array<string>;
    }
    interface IPlanFinancementLecture extends IElementLecture {
        /**
         * Lbfapl_LiblRetrAdr
         */
        libelleRetardAdresse: string;
        /**
         * Mtfaso_MtTotlEmprPlan
         */
        montantTotalEmpruntPlan: number;
        /**
         * Mtfarf_MtRestFinn
         */
        montantRestantFinancier: number;
        /**
         * Cefapl_CodeEttPlanFinn
         */
        codeEtatPlanFinancier: number;
        /**
         * Cdfacp_CodeContPlan
         */
        codeContratPlan: number;
        /**
         * Dtfccr_DateCretPlan
         * Type date au format yyyy-MM-dd
         */
        dateCreationPlan: string;
        /**
         * Dtfmva_DateDernAnlsAdr
         * Type date au format yyyy-MM-dd
         */
        dateDernierAnlsAdresse: string;
        /**
         * Dtfcep_DateEditPropCred
         * Type date au format yyyy-MM-dd
         */
        dateEditPropCredit: string;
        /**
         * Ntfmba_NotfEnggBale2
         */
        notfEngagementBale2: string;
        /**
         * Cdfmte_CodeAnlsMeneTerm
         */
        codeAnlsMeneTerme: number;
        /**
         * Cdfdsp_CodeDecsSpec
         */
        codeDecisionSpec: number;
        /**
         * Txfita_CorcTarfCalcParAdr
         */
        corcTarfCalculParAdresse: number;
        /**
         * Mtfiar_CottAnlsRisq
         */
        cotisationAnlsRisque: number;
        /**
         * Txfgca_CoefTarfCalcParAdr
         */
        coefficientTarfCalculParAdresse: number;
        /**
         * Cdfwor_CodeOrigPretPrnc
         */
        codeOriginePretPrincipal: number;
        /**
         * Cifaai_IndicAllt
         */
        indiceAllt: number;
        /**
         * Mtfaap_MtApprPers
         */
        montantApportPersonne: number;
        /**
         * Mtfmpl_MtPretEparLogmTher
         */
        montantPretEpargneLogementTher: number;
        /**
         * Idfcsm_NumrDossSmac
         */
        numeroDossierSmac: string;
        /**
         * Ctfico_TypeCritOptim
         */
        typeCritereOptim: number;
        /**
         * Nbfico_ValeurCritOptim
         */
        valeurCritereOptim: number;
        /**
         * AccordDePrincipe
         */
        accordDePrincipe: number;
        /**
         * ListResultatControle
         */
        listeResultatControle: Array<IResultatControle>;
        /**
         * EstEligibleApl
         */
        estEligibleAPL: boolean;
        /**
         * MontantAplModifiable
         */
        montantAPLModifiable: boolean;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * ListIdntCredIntr
         */
        listeIdCreditIntr: Array<string>;
        /**
         * ListIdntCredExtr
         */
        listeIdCreditExtr: Array<string>;
        /**
         * ListIdntAssr
         */
        listeIdAssurance: Array<string>;
        /**
         * ListIdntRefusAssExt
         */
        listeIdRefusAssuranceExterieur: Array<string>;
        /**
         * ListIdntGarn
         */
        listeIdGarantie: Array<string>;
        /**
         * ListIdntAccsComp
         */
        listeIdAccessoireComp: Array<string>;
        /**
         * ListIdntAccsLiesPrdt
         */
        listeIdAccessoireLiesProduit: Array<string>;
        /**
         * ListIdntServSurObjt
         */
        listeIdServiceSurObjet: Array<string>;
        /**
         * ListIdntPalrCont
         */
        listeIdPalierContrat: Array<string>;
        /**
         * IdntApl
         */
        idAPL: string;
        /**
         * IdntSynthesePlanFinancement
         */
        idSynthesePlanFinancement: string;
    }
    interface ICreditExterneLecture extends IElementLecture {
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Npface_DureAmrtMois
         */
        dureAmortissementMois: number;
        /**
         * Txface_TxAmrt
         */
        tauxAmortissement: number;
        /**
         * Mkface_MtCapt
         */
        montantCapital: number;
        /**
         * Meface_MtEcheAmrt
         */
        montantEcheanceAmortissement: number;
        /**
         * Peface_CodePerdAmrt
         */
        codePeriodeAmortissement: number;
        /**
         * Cdfaia_CodeIndicInteTantPPers
         */
        codeIndiceInterieurTantPPersonne: number;
        /**
         * Lbface_LiblLibrSurConcr
         */
        libelleLibrSurConcr: string;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfwna_CodeIndicNatrPret
         */
        codeIndiceNaturePret: number;
        /**
         * Cnfctx_CodeIndicTxRevs
         */
        codeIndiceTauxRevision: number;
        /**
         * Npfwdd_DureDiffMois
         */
        dureDiffereMois: number;
        /**
         * Ctfwsr_TypeSurt
         */
        typeSurtaxe: number;
        /**
         * Cdfwch_CodeIndicPresAssrPertEmpl
         */
        codeIndicePresAssurancePertEmpl: number;
        /**
         * Ctfwtb_CodeIndicTypeRemb
         */
        codeIndiceTypeRemboursement: number;
        /**
         * Txfatg_TegActu
         */
        tegActu: number;
        /**
         * Mefadi_MtecheDiff
         */
        mtecheDiffere: number;
        /**
         * Pefadi_CodePerdDiff
         */
        codePeriodeDiffere: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
    }
    interface IPalierContraintLecture extends IElementLecture {
        /**
         * Ddpe_DateDebtPerd
         * Type date au format yyyy-MM-dd
         */
        dateDebutPeriode: string;
        /**
         * Dfpe_DateFinPerd
         * Type date au format yyyy-MM-dd
         */
        dateFinPeriode: string;
        /**
         * Meface_MtEche
         */
        montantEcheance: number;
        /**
         * Npfpco_DurePalr
         */
        durePalier: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
    }
    interface IAlerteEnSortieLecture extends IElementLecture {
        /**
         * Nofiax_NumeAlrt
         */
        numeroAlerte: number;
        /**
         * Ctfiax_CodeAlrt
         */
        codeAlerte: string;
        /**
         * Cefiax_CodeTrtAlrt
         */
        codeTraitementAlerte: number;
        /**
         * Dcfiax_DateEmssAlrt
         * Type date au format yyyy-MM-dd
         */
        dateEmissionAlerte: string;
        /**
         * Drfiax_DateRepnAlrt
         * Type date au format yyyy-MM-dd
         */
        dateRepnAlerte: string;
    }
    interface IVersementAttenduLecture extends IElementLecture {
        /**
         * Nufcrl_NumeReltVerstAttn
         */
        numeroRelationVersementAttn: number;
        /**
         * Ctftve_TypeVerst
         */
        typeVersement: string;
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
        /**
         * Dtfdeb_DateDebt
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * Dtfvfn_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Ctfapi_PerdVerst
         */
        periodeVersement: number;
        /**
         * IdntContAssrGarn
         */
        idContratAssuranceGarantie: string;
    }
    interface IProprietaireLecture extends IElementLecture {
        /**
         * Txffim_QuotPleinProp
         */
        quotientPleinProp: number;
        /**
         * Txfcnp_QuotNueProp
         */
        quotientNueProp: number;
        /**
         * Txfcdu_QuotUsuf
         */
        quotientUsuf: number;
        /**
         * Txfcus_QuotDroiUsag
         */
        quotientDroiUsag: number;
        /**
         * Ctfcdb_CdModDettnBien
         */
        codeModDettnBien: number;
        /**
         * IdntPersn
         */
        idPersn: string;
    }
    interface IReferenceCadastraleLecture extends IElementLecture {
        /**
         * Lbfoca_ReferenceCadastre
         */
        referenceCadastre: string;
        /**
         * Lbfcsc_SectionCadastre
         */
        sectionCadastre: string;
        /**
         * Qtfcsc_SurfaceReferenceCadastrale
         */
        surfaceReferenceCadastrale: number;
        /**
         * Llfcob_commentaires
         */
        commentaires: string;
    }
    interface IReferenceLotLecture extends IElementLecture {
        /**
         * Lbfolt_ReferenceTypeDeLot
         */
        referenceTypeDeLot: string;
        /**
         * Llfcnl_NatureDuLot
         */
        natureDuLot: string;
        /**
         * Nbftta_Tantieme
         */
        tantieme: number;
    }
    interface ICouvertureCreditLecture extends IElementLecture {
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
        /**
         * Mefaas_MtEcheCouv
         */
        montantEcheanceCouverture: number;
        /**
         * Dffgaf_DateFinAffecCouv
         * Type date au format yyyy-MM-dd
         */
        dateFinAffectationCouverture: string;
        /**
         * IdntAccs
         */
        idAccessoire: string;
        /**
         * IdntCredCouv
         */
        idCreditCouverture: string;
        /**
         * ListIdntCots
         */
        listeIdCotisation: Array<string>;
        /**
         * Idfcoc_IdPretOrgCaution
         */
        idPretOrganismeCaution: string;
        /**
         * Mtfiae_CoutAssExt8Ans
         */
        coutAssuranceExterne8Ans: number;
        /**
         * Mcfiae_CoutTotAssExt
         */
        coutTotalAssuranceExterne: number;
    }
    interface IGroupeJustificationTEGLecture {
        /**
         * LibelleFrais
         */
        libelleFrais: string;
        /**
         * MessagesFrais
         */
        messagesFrais: Array<string>;
    }
    interface IEcheancesJustifieesAssocieesLecture {
        /**
         * TitreCredit
         */
        titreCredit: string;
        /**
         * MessagesInterets
         */
        messagesInterets: Array<string>;
        /**
         * TypesFrais
         */
        typesFrais: Array<IGroupeJustificationTEGLecture>;
    }
    interface ICreditInterneLecture extends IElementLecture {
        /**
         * IndicEvltTxConsPond
         */
        indiceEvolutionTauxConsolidePondere: number;
        /**
         * Idfccp_IdntConvPres
         */
        idConventionPres: string;
        /**
         * Cdfdae_CodeIndicEnvAvisEche
         */
        codeIndiceEnvoiAvisEcheance: number;
        /**
         * Cifaio_CodeIndicOptmImps
         */
        codeIndiceOptimisationImps: number;
        /**
         * Cnfctx_CodeIndicTxInteRevs
         */
        codeIndiceTauxInterieurRevision: number;
        /**
         * Nofapd_NumeCredPlanFinn
         */
        numeroCreditPlanFinancier: number;
        /**
         * Idfacs_RefeExtnCred
         */
        referenceExterneCredit: string;
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Cdfcfc_CodeFamlContRegl
         */
        codeFamilleContratRegle: string;
        /**
         * Ctfcbs_CodeSclssBafi
         */
        codeSousclasseBafi: string;
        /**
         * Cdfcrl_CodeIndicCredRels
         */
        codeIndiceCreditRelease: number;
        /**
         * Idfcct_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Cdfccr_CodeIndicTrtInteIntr
         */
        codeIndiceTraitementInterieurIntr: number;
        /**
         * Cdfcia_CodeTypeActlInteIntr
         */
        codeTypeActuarielInterieurIntr: number;
        /**
         * Cdfbdv_CodeDevsVerst
         */
        codeDeviseVersement: string;
        /**
         * Cdfbje_CodeIndicExstPiecJustPourDeclechlVerst
         */
        codeIndiceExistePieceJustificatifPourDeclechlVersement: number;
        /**
         * Cdfbju_CodeExistJustDeclVerst
         */
        codeExistJustificatifDeclarationVersement: number;
        /**
         * Cdfbju_CodeTypeRattJustDecl
         */
        codeTypeRattachementJustificatifDeclaration: number;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Dtfam0_DateMer0
         * Type date au format yyyy-MM-dd
         */
        dateMER0: string;
        /**
         * Dtfam1_DateMer1
         * Type date au format yyyy-MM-dd
         */
        dateMER1: string;
        /**
         * Dtfccr_DateCretCred
         * Type date au format yyyy-MM-dd
         */
        dateCreationCredit: string;
        /**
         * Dlfbct_DateLimtVerstFond
         * Type date au format yyyy-MM-dd
         */
        dateLimiteVersementFond: string;
        /**
         * Dhfacj_QuantEche
         */
        jourDateEcheance: number;
        /**
         * Dffb1v_DateLimtPremVerstFond
         * Type date au format yyyy-MM-dd
         */
        dateLimitePremierVersementFond: string;
        /**
         * Cdfaea_CodeIndicElgbApl
         */
        codeIndiceEligibiliteAPL: number;
        /**
         * Cdfcie_CodeIndicelgbAuprInstemss
         */
        codeIndicelgbAuprInstemss: number;
        /**
         * Cdfacc_CodeIndicGestCredAvecCpteCrrt
         */
        codeIndiceGestionCreditAvecCompteCrrt: number;
        /**
         * Dtfcdc_DateDernCalcCred
         * Type date au format yyyy-MM-dd
         */
        dateDernierCalculCredit: string;
        /**
         * Ccfarc_CodeIndicCalcAFaire
         */
        codeIndiceCalculAFaire: number;
        /**
         * Mtfael_MtPrimEparLogm
         */
        montantPrimeEpargneLogement: number;
        /**
         * Txfasr_TxNegcSurcRembAntc
         */
        tauxNegocieSurcRemboursementAnticipe: number;
        /**
         * Txfcpd_TxPondCntExtr
         */
        tauxPondereCntExtr: number;
        /**
         * Txfck4_TxPondCons
         */
        tauxPondereConsolide: number;
        /**
         * Txfrr1_MargPondCons
         */
        margePondereConsolide: number;
        /**
         * Ccfbec_CodeCalcEcheVerst
         */
        codeCalculEcheanceVersement: number;
        /**
         * Cefbec_CodeettEcheVerst
         */
        codeettEcheanceVersement: number;
        /**
         * Cdfbct_CodeIndcNatrEcheVerst
         */
        codeIndiceNatureEcheanceVersement: number;
        /**
         * Lbfpa1_InttCred
         */
        intituleLigneUn: string;
        /**
         * Nufbdt_DomcTres
         */
        domiciliationTres: string;
        /**
         * Nufbve_NumeDomcPourMiseADispFond
         */
        numeroDomiciliationPourMiseADispFond: string;
        /**
         * Mtfcve_MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * Ctfcpc_CodeIndicNatrPretComb
         */
        codeIndiceNaturePretComb: number;
        /**
         * Cifaam_CodeIndicPresUneBonfUneMajreTx
         */
        codeIndicePresUneBonificationUneMajreTaux: number;
        /**
         * Cefad0_CodeConfmRedcDurePTZ
         */
        codeConfirmationReductionDurePTZ: number;
        /**
         * Cefam0_CodeConfmRedcMtPTZ
         */
        codeConfirmationReductionMontantPTZ: number;
        /**
         * Mtfcpz_MtReglPTZ
         */
        montantReglePTZ: number;
        /**
         * MtMinPTZ
         */
        montantMinimumPTZ: number;
        /**
         * Mcface_MtCredEuro
         */
        montantCreditEuro: number;
        /**
         * Msfcpv_MtMaxPretPVH
         */
        montantMaximumPretPVH: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfada_CodeDevsSaccef
         */
        codeDeviseSaccef: string;
        /**
         * Npfcfi_NbPerdCred
         */
        nombrePeriodeCredit: number;
        /**
         * Pefcfi_CodePerdCred
         */
        codePeriodeCredit: number;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
        /**
         * Mefape_MtPrmeEcheHorsAccsCred
         */
        montantPrmeEcheanceHorsAccessoireCredit: number;
        /**
         * Mefacc_MtPrmeEcheAssr
         */
        montantPrmeEcheanceAssurance: number;
        /**
         * Mcafco_MtTotlCredHorsAccsHorsPerdPref
         */
        montantTotalCreditHorsAccessoireHorsPeriodePref: number;
        /**
         * Mcfaac_CoutTotlAccsPostSurCred
         */
        coutTotalAccessoirePosteSurCredit: number;
        /**
         * Mcfafd_CoutTotlFrsDossAsscCred
         */
        coutTotalFrsDossierAssuranceCredit: number;
        /**
         * Mcfgfr_CoutTotlFrsGarnAsscCred
         */
        coutTotalFrsGarantieAssuranceCredit: number;
        /**
         * Mcfacf_CoutTotlFrsCrtgeAsscCred
         */
        coutTotalFrsCrtgeAssuranceCredit: number;
        /**
         * Mcfosp_CoutTotlServSurObjtPerdAsscCred
         */
        coutTotalServiceSurObjetPeriodeAssuranceCredit: number;
        /**
         * Mcfafp_CoutTotlAccsCompPerdAsscCred
         */
        coutTotalAccessoireCompPeriodeAssuranceCredit: number;
        /**
         * Mcfoso_CoutTotlServSurObjtAperAsscCred
         */
        coutTotalServiceSurObjetAperAssuranceCredit: number;
        /**
         * Mcfafr_CoutTotlAccsCompAperAsscCred
         */
        coutTotalAccessoireCompAperAssuranceCredit: number;
        /**
         * Mefoso_MtPrmeEcheServSurObjt
         */
        montantPrmeEcheanceServiceSurObjet: number;
        /**
         * Mefafr_MtPrmeEcheAccsComp
         */
        montantPrmeEcheanceAccessoireComp: number;
        /**
         * Mcfaia_MtTotlAssrPerd
         */
        montantTotalAssurancePeriode: number;
        /**
         * CodeIndicModeCalcTx
         */
        codeIndiceModeCalculTaux: number;
        /**
         * TxMoyeActuHorsBonf
         */
        tauxMoyenActuHorsBonification: number;
        /**
         * TxMoyePropHorsBonf
         */
        tauxMoyenPropHorsBonification: number;
        /**
         * TxFutr
         */
        tauxFutr: ITauxIndiceLecture;
        /**
         * TxIntl
         */
        tauxInitial: ITauxInteretAnnuelLecture;
        /**
         * TxMoyeActu
         */
        tauxMoyenActu: number;
        /**
         * TxMoyeProp
         */
        tauxMoyenProp: number;
        /**
         * TegActu
         */
        tegActu: number;
        /**
         * TegProp
         */
        tegProp: number;
        /**
         * TAEA
         */
        tAEA: number;
        /**
         * Txfamc_TxMontage
         */
        tauxMontage: number;
        /**
         * BornesFraisDossier
         */
        bornesFraisDossier: Array<number>;
        /**
         * TegModeRestitution
         */
        tegModeRestitution: number;
        /**
         * MontantPTZVerrouille
         */
        montantPTZVerrouille: boolean;
        /**
         * DureePTZVerrouillee
         */
        dureePTZVerrouillee: boolean;
        /**
         * EcheancesJustifieesAssociees
         */
        echeancesJustifieesAssociees: IEcheancesJustifieesAssocieesLecture;
        /**
         * EtatForcageFraisDossier
         */
        etatForcageFraisDossier: string;
        /**
         * TxUsure
         */
        tauxUsure: number;
        /**
         * AjustementTaux
         */
        ajustementTaux: IAjustementTauxLecture;
        /**
         * MargeRevConseil
         */
        margeRevisionConseil: number;
        /**
         * ExisteAssuranceSurCRD
         */
        existeAssuranceSurCRD: boolean;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
        /**
         * IdntCpteCrrt
         */
        idCompteCrrt: string;
        /**
         * IdntModl
         */
        idModele: string;
        /**
         * IdntModlVersFrct
         */
        idModeleVersementFraction: string;
        /**
         * IdntRemsClnt
         */
        idRemsClient: string;
        /**
         * ListIdntDrtUtls
         */
        listeIdDroitUtilisation: Array<string>;
        /**
         * ListIdntPayr
         */
        listeIdPayr: Array<string>;
        /**
         * ListIdntPhas
         */
        listeIdPhase: Array<string>;
        /**
         * ListIdntSuivPlnf
         */
        listeIdSuivantPlafond: Array<string>;
        /**
         * ListIdntParmRevs
         */
        listeIdParametreRevision: Array<string>;
        /**
         * ListIdntVartDure
         */
        listeIdVartDure: Array<string>;
        /**
         * ListIdntAccs
         */
        listeIdAccessoire: Array<string>;
        /**
         * ListIdntAssr
         */
        listeIdAssurance: Array<string>;
        /**
         * ListIdntGarn
         */
        listeIdGarantie: Array<string>;
        /**
         * ListIdntAccsComp
         */
        listeIdAccessoireComp: Array<string>;
        /**
         * ListIdntAccsLiesPrdt
         */
        listeIdAccessoireLiesProduit: Array<string>;
        /**
         * ListIdntCreditsEPS
         */
        listeIdCreditsEPS: Array<string>;
        /**
         * IdntComplementEPS
         */
        idComplementEPS: string;
    }
    interface IPatrimoineImmobilierLecture extends IElementLecture {
        /**
         * Ctfcnp_NatrPtrmImmb
         */
        naturePatrimoineImmobilier: number;
        /**
         * Cdfcdo_CodeIndicUsgLogm
         */
        codeIndiceUsageLogement: number;
        /**
         * Mtfmvb_ValrActlPtrm
         */
        valeurActuarielPatrimoine: number;
        /**
         * Dtfdac_DateAcqsPtrm
         * Type date au format yyyy-MM-dd
         */
        dateAcqsPatrimoine: string;
        /**
         * Mkfkrd_CaptRestSurPtrm
         */
        capitalRestantSurPatrimoine: number;
        /**
         * Mefhpa_MensPretSurPtrm
         */
        mensPretSurPatrimoine: number;
        /**
         * Dffacr_DateFinPretSurPtrm
         * Type date au format yyyy-MM-dd
         */
        dateFinPretSurPatrimoine: string;
    }
    interface IBlocNotesLecture extends IElementLecture {
        /**
         * Idfwac_TypeBlc
         */
        typeBlocNote: string;
        /**
         * ContBlc
         */
        contratBlocNote: string;
    }
    interface IClausePersonnaliseeLecture extends IElementLecture {
        /**
         * DestClsePers
         */
        destinataireClassePersonne: number;
        /**
         * LiblClsePers
         */
        libelleClassePersonne: string;
        /**
         * NumeReltClsePers
         */
        numeroRelationClassePersonne: number;
    }
    interface IAvisLecture extends IElementLecture {
        /**
         * Dtfaad_DateSaisAvis
         * Type date au format yyyy-MM-dd
         */
        dateSaisieAvis: string;
        /**
         * Lbfaad_LiblAvis
         */
        libelleAvis: string;
        /**
         * Idfaen_IdntEnttSaisAvis
         */
        idEntiteSaisieAvis: string;
        /**
         * Lbfaen_LiblEnttSaisAvis
         */
        libelleEntiteSaisieAvis: string;
        /**
         * Ctfita_CodeTyplAvis
         */
        codeTypologieAvis: string;
        /**
         * Nofiav_NumeAvis
         */
        numeroAvis: number;
    }
    interface IAvisOrganismeExterneLecture extends IElementLecture {
        /**
         * Idfpit_IdntOrgnExtn
         */
        idOrgnExterne: string;
        /**
         * Idfcin_IdntInteEnv
         */
        idInterieurEnvoi: string;
        /**
         * Idfcex_IdntExtnEnv
         */
        idExterneEnvoi: string;
        /**
         * Dtfal1_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd
         */
        dateAvis: string;
        /**
         * Cifctr_CodeIndicTrtEnv
         */
        codeIndiceTraitementEnvoi: number;
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Cdfar2_CodeMotf
         */
        codeMotf: string;
        /**
         * Llfar1_LiblAvisDecs1
         */
        libelleAvisDecision1: string;
        /**
         * Llfar2_LiblAvisDecs2
         */
        libelleAvisDecision2: string;
        /**
         * Lbfpin_NomAgntInstr
         */
        nomAgentInstruction: string;
        /**
         * Nufpt1_NumeTeleInstr
         */
        numeroTeleInstruction: string;
        /**
         * Lbfpma_LiblAdrsMail
         */
        libelleAdresseMail: string;
        /**
         * Nufpt2_NumeFaxInstr
         */
        numeroFaxInstruction: string;
        /**
         * Cdfar1_TypeLiaiSaccefTp
         */
        typeLiaiSaccefTp: number;
        /**
         * Cdfar3_TypeRepnOrgnExtn
         */
        typeRepnOrgnExterne: number;
        /**
         * IdntAccs
         */
        idAccessoire: string;
    }
    interface IEvenementLecture extends IElementLecture {
        /**
         * Nofaed_NumeReltEvenDoss
         */
        numeroRelationEvenDossier: number;
        /**
         * Cefadc_CodeEttDoss
         */
        codeEtatDossier: number;
        /**
         * Dtfaed_DateSaisEven
         * Type date au format yyyy-MM-dd
         */
        dateSaisieEven: string;
        /**
         * Lbfamd_MessEnrgSurEvenDoss
         */
        messEnregistrementSurEvenDossier: string;
        /**
         * Dtfaee_DateEfftEven
         * Type date au format yyyy-MM-dd
         */
        dateEffetEven: string;
        /**
         * Ctfaev_CodeTypeEven
         */
        codeTypeEven: string;
        /**
         * Idfase_IdntEnttSaisEven
         */
        idEntiteSaisieEven: string;
        /**
         * Lbfase_LiblEnttSaisEven
         */
        libelleEntiteSaisieEven: string;
        /**
         * Cefhgc_CodeIndicGestCentEven
         */
        codeIndiceGestionCentralEven: number;
        /**
         * Cdfabo_ElemStrcGestBackCent
         */
        elementStructureGestionBackCentral: string;
        /**
         * Idfce3_IdntCaisAsscBackCent
         */
        idCaisseAssuranceBackCentral: number;
        /**
         * LiblEven
         */
        libelleEven: string;
        /**
         * CodeNatrEven
         */
        codeNatureEven: string;
        /**
         * IdntAvisAsscEven
         */
        idAvisAssuranceEven: string;
    }
    interface IVersementLecture extends IElementLecture {
        /**
         * MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * Txfave_PctVerst
         */
        pourcentageVersement: number;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Nufccl_NumeOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Lbfasa_LiblAvnc
         */
        libelleAvnc: string;
    }
    interface IPromotionImmobiliereLecture extends IElementLecture {
        /**
         * SittPrgm
         */
        situationProgramme: number;
        /**
         * LiblSyntDoss
         */
        libelleSyntDossier: string;
        /**
         * InttPrgm
         */
        intituleProgramme: string;
        /**
         * NomScpi
         */
        nomScpi: string;
        /**
         * DateDiss
         * Type date au format yyyy-MM-dd
         */
        dateDiss: string;
        /**
         * AdrsPrgmImmb
         */
        adresseProgrammeImmobilier: string;
        /**
         * LoclPrgmImmb
         */
        loclProgrammeImmobilier: string;
        /**
         * CodePostPrgmImmb
         */
        codePosteProgrammeImmobilier: string;
        /**
         * CodePays
         */
        codePays: string;
        /**
         * StttCapi
         */
        stttCapitalisation: number;
        /**
         * DateFinComl
         * Type date au format yyyy-MM-dd
         */
        dateFinCommercialisation: string;
        /**
         * IndicAlltDeps
         */
        indiceAlltDeps: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IRedacteurActeLecture extends IElementLecture {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Lbfpnm_NomRedcActe
         */
        nomReductionActe: string;
        /**
         * Lbfppn_PrenRedcActe
         */
        prenReductionActe: string;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
    }
    interface IEmprunteurLecture extends IElementLecture {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * LiblLienPersonne
         */
        libelleLienPersonne: string;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * Mcfpre_MtRessPond
         */
        montantRessourcePondere: number;
        /**
         * Mcfpce_MtChrgEmprHorsPrjtPond
         */
        montantChargeEmpruntHorsProjetPondere: number;
        /**
         * Mcfpac_MtAutrChrgPond
         */
        montantAutreChargePondere: number;
        /**
         * Lbfaem_DenmEmpr
         */
        denmEmprunt: string;
        /**
         * Lnfpem_LiblLongEmpr
         */
        libelleLongEmprunt: string;
        /**
         * Lbfain_IntlcEmpr
         */
        intlcEmprunt: string;
        /**
         * Idfaep_IdntEnttTitlClnt
         */
        idEntiteTitulaireClient: string;
        /**
         * Idfaeg_IdntelemStrcGest
         */
        idElementStructureGestion: string;
        /**
         * Cdfcke_CodeCateEmpr
         */
        codeCateEmprunt: string;
        /**
         * Lbfcke_LiblCateEmpr
         */
        libelleCateEmprunt: string;
        /**
         * Ctfcma_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * Ctfpmp_CodeTypeMarcPers
         */
        codeTypeMarchePersonne: number;
        /**
         * Ctfprm_CodeTypeRevnMeng
         */
        codeTypeRevnMeng: number;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_TypeAdmnBafi
         */
        typeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Lbfpsf_LiblSittFaml
         */
        libelleSituationFamille: string;
        /**
         * Cdfpsr_CodeSittFamlRegl
         */
        codeSituationFamilleRegle: number;
        /**
         * Nbfpnp_NbPersCmpstMeng
         */
        nombrePersonneCmpstMeng: number;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpma_NbActfMeng
         */
        nombreActfMeng: number;
        /**
         * Dtfpen_DateEncrEparLogm
         * Type date au format yyyy-MM-dd
         */
        dateEncoursEpargneLogement: string;
        /**
         * Mtftpl_MtEncrIsssPretPel
         */
        montantEncoursIsssPretPEL: number;
        /**
         * Mtftli_MtEncrIsssPretLel
         */
        montantEncoursIsssPretLEL: number;
        /**
         * Mtftlh_MtEncrLivrAutretbl
         */
        montantEncoursLivrAutretbl: number;
        /**
         * Mtftph_MtEncrPlnsAutretbl
         */
        montantEncoursPlnsAutretbl: number;
        /**
         * Mtfwrt_TotlRevnAnnlNets
         */
        totalRevnAnnulationNets: number;
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Cdfwsl_StttOccpLogmActl
         */
        stttOccpLogementActuariel: number;
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpnm_NomRaisSoclEmpr
         */
        nomRaisonSocialeEmprunt: string;
        /**
         * Lbfpa1_Intt
         */
        intituleLigne1: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_CompIntt
         */
        compIntituleLigne2: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cofopz_CodeCondDergPourPtz
         */
        codeConditionDerogationPourPtz: number;
        /**
         * Cdfpse_CodeSectRatt
         */
        codeSecteurRattachement: string;
        /**
         * Cdfpjm_CodeJeunMeng
         */
        codeJeunMeng: number;
        /**
         * PresUnePersAttnRepnFicp
         */
        presUnePersonneAttnRepnFicp: boolean;
        /**
         * PresUnePersFichFicp
         */
        presUnePersonneFichFicp: boolean;
        /**
         * Qmfcvi_EsperVie
         */
        esperVie: number;
        /**
         * Qmfcvd_EsperVieDec
         */
        esperVieDecision: number;
        /**
         * Qmfcvs_EsperVieStrs
         */
        esperVieStress: number;
        /**
         * MtRessAvntProj
         */
        montantRessourceAvenantProjet: number;
        /**
         * MtChrgEmprAvntProj
         */
        montantChargeEmpruntAvenantProjet: number;
        /**
         * MtAutrChrgAvntProj
         */
        montantAutreChargeAvenantProjet: number;
        /**
         * RestVivrAvntProj
         */
        restantVivrAvenantProjet: number;
        /**
         * IndicRestVivrAvntProj
         */
        indiceRestantVivrAvenantProjet: number;
        /**
         * TxEndtAvntProj
         */
        tauxEndtAvenantProjet: number;
        /**
         * TotalEpargneContractuelle
         */
        totalEpargneContractuelle: number;
        /**
         * TotalEpargneLiquide
         */
        totalEpargneLiquide: number;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * Cdfadv_CodeDeviseEmprunteur
         */
        codeDeviseEmprunteur: string;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntCpteDeptGrpePers
         */
        listeIdCompteDeptGrpePersonne: Array<string>;
        /**
         * ListIdntCptePrfsPers
         */
        listeIdComptePrfsPersonne: Array<string>;
        /**
         * ListIdntRessGrpe
         */
        listeIdRessourceGrpe: Array<string>;
        /**
         * ListIdntChrgGrpe
         */
        listeIdChargeGrpe: Array<string>;
        /**
         * ListIdntCredExstGrpe
         */
        listeIdCreditExisteGrpe: Array<string>;
        /**
         * ListIdntFamlEprgPers
         */
        listeIdFamilleEpargnePersonne: Array<string>;
        /**
         * ListIdntRevnFiscAsscEmpr
         */
        listeIdRevnFiscalAssuranceEmprunt: Array<string>;
        /**
         * ListIdntDonnPtrmImmb
         */
        listeIdDonneurPatrimoineImmobilier: Array<string>;
    }
    interface IRevenuFiscalLecture extends IElementLecture {
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Ctfprm_TypeRevnMeng
         */
        typeRevnMeng: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * IdntEmpr
         */
        idEmprunt: string;
    }
    interface IElementSchema {
        /**
         * Idws
         */
        idws: string;
        /**
         * Desc
         */
        description: string;
    }
    interface IBlocNotesSchema extends IElementSchema {
        /**
         * Idfwac_TypeBlc
         */
        typeBlocNote: string;
    }
    interface IClausePersonnaliseeSchema extends IElementSchema {
        /**
         * DestClsePers
         */
        destinataireClassePersonne: number;
    }
    interface IAlerteEnSortieSchema extends IElementSchema {
        /**
         * Ctfiax_CodeAlrt
         */
        codeAlerte: string;
        /**
         * Dcfiax_DateEmssAlrt
         * Type date au format yyyy-MM-dd
         */
        dateEmissionAlerte: string;
    }
    interface IAlerteEnEntreeSchema extends IElementSchema {
        /**
         * Ctfiai_CodeAlrt
         */
        codeAlerte: number;
        /**
         * Dcfiai_DateEmssAlrt
         * Type date au format yyyy-MM-dd
         */
        dateEmissionAlerte: string;
    }
    interface IAvisSchema extends IElementSchema {
        /**
         * Ctfita_CodeTyplAvis
         */
        codeTypologieAvis: string;
        /**
         * Dtfaad_DateSaisAvis
         * Type date au format yyyy-MM-dd
         */
        dateSaisieAvis: string;
        /**
         * Idfaen_IdntEnttSaisAvis
         */
        idEntiteSaisieAvis: string;
        /**
         * Lbfaen_LiblEnttSaisAvis
         */
        libelleEntiteSaisieAvis: string;
        /**
         * Nofiav_NumeAvis
         */
        numeroAvis: number;
    }
    interface IEvenementSchema extends IElementSchema {
        /**
         * Ctfaev_CodeTypeEven
         */
        codeTypeEven: string;
        /**
         * Dtfaee_DateEfftEven
         * Type date au format yyyy-MM-dd
         */
        dateEffetEven: string;
    }
    interface IVersementSchema extends IElementSchema {
        /**
         * Txfave_PctVerst
         */
        pourcentageVersement: number;
    }
    interface IRedacteurActeSchema extends IElementSchema {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
    }
    interface IRessourceSchema extends IElementSchema {
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Mtfpre_MtRess
         */
        montantRessource: number;
        /**
         * Npfpre_NbPerdParAn
         */
        nombrePeriodeParAn: number;
    }
    interface IChargeSchema extends IElementSchema {
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
    }
    interface IPhaseCreditExistantSchema extends IElementSchema {
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
    }
    interface ICreditExistantSchema extends IChargeSchema {
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
        /**
         * PhasesCreditExistant
         */
        phasesCreditExistant: Array<IPhaseCreditExistantSchema>;
    }
    interface IRevenuFiscalSchema extends IElementSchema {
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
    }
    interface IPatrimoineImmobilierSchema extends IElementSchema {
        /**
         * Ctfcnp_NatrPtrmImmb
         */
        naturePatrimoineImmobilier: number;
        /**
         * Mtfmvb_ValrActlPtrm
         */
        valeurActuarielPatrimoine: number;
    }
    interface IEmprunteurSchema extends IElementSchema {
        /**
         * IdwsPersonnes
         */
        idwsPersonnes: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
        /**
         * RevenusFiscaux
         */
        revenusFiscaux: Array<IRevenuFiscalSchema>;
        /**
         * PatrimoinesImmo
         */
        patrimoinesImmobilier: Array<IPatrimoineImmobilierSchema>;
    }
    interface IGarantSchema extends IElementSchema {
        /**
         * IdwsPersonnes
         */
        idwsPersonnes: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
    }
    interface IFamilleEpargneSchema extends IElementSchema {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Mtfmve_MtValrEprgAvntOper
         */
        montantValeurEpargneAvenantOper: number;
    }
    interface ICompteSchema extends IElementSchema {
        /**
         * Nufpcp_NumeCpte
         */
        numeroCompte: string;
        /**
         * Cdfppr_TypeCpte
         */
        typeCompte: string;
        /**
         * Composition
         */
        composition: string;
    }
    interface ICompteProfessionnelSchema extends ICompteSchema {
    }
    interface ICompteDepotSchema extends ICompteSchema {
    }
    interface IRelationEntrePersonnesSchema extends IElementSchema {
        /**
         * Cnfcrp_CodeNatureRelation
         */
        codeNatureRelation: string;
        /**
         * IdntPers2
         */
        idPersonne2: string;
    }
    interface IComplementFicheContactSchema extends IElementSchema {
    }
    interface IPersonneSchema extends IElementSchema {
        /**
         * Cdfptp_CodeTypePers
         */
        codeTypePersonne: number;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Roles
         */
        roles: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
        /**
         * FamillesEpargne
         */
        famillesEpargne: Array<IFamilleEpargneSchema>;
        /**
         * Comptes
         */
        comptes: Array<ICompteSchema>;
        /**
         * RelationsEntrePersonnes
         */
        relationsEntrePersonnes: Array<IRelationEntrePersonnesSchema>;
        /**
         * ComplementFicheContact
         */
        complementFicheContact: IComplementFicheContactSchema;
        /**
         * ComptesPrelVersModalite
         */
        comptesPrelVersementModalite: Array<ICompteSchema>;
    }
    interface IPersonneMoraleSchema extends IPersonneSchema {
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
    }
    interface IOppositionSchema extends IElementSchema {
        /**
         * Cdfmop_CodeOppo
         */
        codeOpposition: string;
        /**
         * Ddfmop_DateDebtOppo
         * Type date au format yyyy-MM-dd
         */
        dateDebutOpposition: string;
        /**
         * Dffmop_DateFinOppo
         * Type date au format yyyy-MM-dd
         */
        dateFinOpposition: string;
    }
    interface IInterditBancaireSchema extends IElementSchema {
    }
    interface IActiviteSchema extends IElementSchema {
        /**
         * Cdfmcs_CodeClssRisqCsp
         */
        codeClasseRisqueCSP: number;
    }
    interface IPersonnePhysiqueSchema extends IPersonneSchema {
        /**
         * Oppositions
         */
        oppositions: Array<IOppositionSchema>;
        /**
         * InterditBancaire
         */
        interditBancaire: IInterditBancaireSchema;
        /**
         * Activite
         */
        activite: IActiviteSchema;
    }
    interface IBienAVendreSchema extends IElementSchema {
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Ctfcor_CodeTypeObjtRegl
         */
        codeTypeObjetRegle: string;
        /**
         * Mtfmvc_PrixNetVndr
         */
        prixNetVendeur: number;
    }
    interface IInfoRegroupementSchema extends IElementSchema {
    }
    interface IPretReamenageSchema extends IElementSchema {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * InfosRegroupement
         */
        informationRegroupement: IInfoRegroupementSchema;
    }
    interface IReamenagementSchema extends IElementSchema {
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * PretsReamenages
         */
        pretsReamenages: Array<IPretReamenageSchema>;
    }
    interface IAplSchema extends IElementSchema {
        /**
         * Mtfiba_MtApl
         */
        montantAPL: number;
        /**
         * TypeApl
         */
        typeAPL: number;
    }
    interface ISynthesePlanFinancementSchema extends IElementSchema {
        /**
         * Mcfoof_CoutTotalTTC
         */
        coutTotalTTC: number;
        /**
         * Mcfgfr_CoutTotalFraisGarantie
         */
        coutTotalFraisGarantie: number;
        /**
         * Mcfafd_CoutTotalFraisDossier
         */
        coutTotalFraisDossier: number;
        /**
         * Mtfaap_MtApportPersonnel
         */
        montantApportPersonnel: number;
        /**
         * nMtfaso_MtConcoursInternes
         */
        mtfaso_MontantConcoursInternes: number;
        /**
         * nMkface_MtConcoursExternes
         */
        mkface_MontantConcoursExternes: number;
        /**
         * Mcfacf_CoutTotalFraisCourtage
         */
        coutTotalFraisCourtage: number;
        /**
         * MtMensualiteAvecAssurance
         */
        montantMensualiteAvecAssurance: number;
        /**
         * MtMensualiteNet
         */
        montantMensualiteNet: number;
    }
    interface ICreditExterneSchema extends IElementSchema {
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Mkface_MtCapt
         */
        montantCapital: number;
        /**
         * Txfatg_TegActu
         */
        tegActu: number;
    }
    interface IPalierContraintSchema extends IElementSchema {
        /**
         * Ddpe_DateDebtPerd
         * Type date au format yyyy-MM-dd
         */
        dateDebutPeriode: string;
        /**
         * Npfpco_DurePalr
         */
        durePalier: number;
        /**
         * Meface_MtEche
         */
        montantEcheance: number;
    }
    interface IRemiseClientSchema extends IElementSchema {
        /**
         * MtAppl
         */
        montantApplication: number;
        /**
         * TxAppl
         */
        tauxApplication: number;
    }
    interface ITrancheMontantSchema extends IElementSchema {
        /**
         * Txfcaa_TxTrchMt
         */
        tauxTrancheMontant: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
    }
    interface ICotisationSchema extends IElementSchema {
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: number;
        /**
         * Npfce1_NbPerdAppliCots
         */
        nombrePeriodeApplicationCotisation: number;
        /**
         * Txfipf_PartFinn
         */
        partFinancier: number;
        /**
         * Mtfgfr_MtFrsGarn
         */
        montantFrsGarantie: number;
        /**
         * Ctfcac_TypeAccs
         */
        typeAccessoire: string;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
        /**
         * TranchesMontant
         */
        tranchesMontant: Array<ITrancheMontantSchema>;
    }
    interface ICotisationPeriodeSchema extends ICotisationSchema {
    }
    interface ICotisationDerogationSchema extends ICotisationSchema {
    }
    interface ICotisationTrancheAgeSchema extends ICotisationSchema {
    }
    interface ICotisationPhaseSchema extends ICotisationSchema {
    }
    interface ICouvertureCreditSchema extends IElementSchema {
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
        /**
         * dMontantCoutTotalAssurance
         */
        montantCoutTotalAssurance: number;
        /**
         * dMontantEcheanceMaximale
         */
        montantEcheanceMaximale: number;
        /**
         * dMontantEcheanceMinimale
         */
        montantEcheanceMinimale: number;
        /**
         * dMontantMensualiteEcheance
         */
        montantMensualiteEcheance: number;
        /**
         * IdCredit
         */
        idCredit: string;
        /**
         * Cotisations
         */
        cotisations: Array<ICotisationSchema>;
    }
    interface IAccessoireSchema extends IElementSchema {
        /**
         * CouverturesCredits
         */
        couverturesCredits: Array<ICouvertureCreditSchema>;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
    }
    interface IAccessoireComplementaireSchema extends IAccessoireSchema {
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
    }
    interface IAccessoireLieProduitSchema extends IAccessoireSchema {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
    }
    interface IAvisOrganismeExterneSchema extends IElementSchema {
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd
         */
        dateAvis: string;
    }
    interface IAssuranceSchema extends IAccessoireSchema {
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * EstAssuranceAXA
         */
        estAssuranceAXA: boolean;
        /**
         * EstAssuranceCNP
         */
        estAssuranceCNP: boolean;
        /**
         * EstAssuranceGroupePourTAEA
         */
        estAssuranceGroupePourTAEA: boolean;
        /**
         * AvisOrganismeExterne
         */
        avisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * DerniersAvisOrganismeExterne
         */
        derniersAvisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
    }
    interface IGarantieSchema extends IAccessoireSchema {
        /**
         * IdPersonne
         */
        idPersonne: string;
    }
    interface IBienPorteEnGarantieSchema extends IElementSchema {
    }
    interface IHypothequeAerienneSchema extends IBienPorteEnGarantieSchema {
    }
    interface IBonDeCaisseCapitalisationSchema extends IBienPorteEnGarantieSchema {
    }
    interface IDelegationLoyerSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICessionDaillyAutreSchema extends IBienPorteEnGarantieSchema {
    }
    interface IVersementAttenduSchema extends IElementSchema {
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
    }
    interface IContratAssuranceSchema extends IBienPorteEnGarantieSchema {
        /**
         * VersementsAttendus
         */
        versementsAttendus: Array<IVersementAttenduSchema>;
    }
    interface IAntichreseSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICessionDaillyLoyerImmeubleSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageVehiculeSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageCompteInstrumentFinancierSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementPartSocialeSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementValeurMaterielleSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementValeurMobiliereSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementFondDeCommerceSchema extends IBienPorteEnGarantieSchema {
    }
    interface IProprietaireSchema extends IElementSchema {
    }
    interface IHypothequeImmobiliereSchema extends IBienPorteEnGarantieSchema {
        /**
         * Proprietaires
         */
        proprietaires: Array<IProprietaireSchema>;
    }
    interface IBienDiversSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICreditHDSchema extends IElementSchema {
        /**
         * Idfcct_RefrPret
         */
        referencePret: string;
        /**
         * Mtfaoc_MtPret
         */
        montantPret: number;
        /**
         * IdntCredExnt
         */
        idCreditExnt: string;
    }
    interface IGarantieHDSchema extends IElementSchema {
        /**
         * Cdfcng_NatrGarnHorsDoss
         */
        natureGarantieHorsDossier: string;
        /**
         * Idfgg1_IdntOrigGarnHorsDoss
         */
        idOrigineGarantieHorsDossier: string;
        /**
         * CreditsHD
         */
        creditsHD: Array<ICreditHDSchema>;
    }
    interface IGarantieReelleSchema extends IGarantieSchema {
        /**
         * BienPorteEnGarantie
         */
        bienPorteEnGarantie: IBienPorteEnGarantieSchema;
        /**
         * GarantieHD
         */
        garantieHD: IGarantieHDSchema;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
    }
    interface IGarantiePersonnelleSchema extends IGarantieSchema {
        /**
         * AvisOrganismeExterne
         */
        avisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * DerniersAvisOrganismeExterne
         */
        derniersAvisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface IServiceSurObjetSchema extends IAccessoireSchema {
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface IEcheanceOptimisationSchema extends IElementSchema {
        /**
         * Mefhcd_MtRembSais
         */
        montantRemboursementSaisie: number;
        /**
         * Ctfhel_CodeTypeElemSais
         */
        codeTypeElementSaisie: number;
    }
    interface ICreditPalierTauxSchema extends IElementSchema {
        /**
         * TxIntePalr
         */
        tauxInterieurPalier: ITauxInteretAnnuelLecture;
        /**
         * Txfcpg_TxPrgrEcheSurPalr
         */
        tauxProgressifEcheanceSurPalier: number;
        /**
         * DureeEnMois
         */
        dureeEnMois: number;
        /**
         * EcheancesOptimisation
         */
        echeancesOptimisation: Array<IEcheanceOptimisationSchema>;
    }
    interface ICreditParamIndexationSchema extends IElementSchema {
        /**
         * Nofrji_NumeIndcRevsCred
         */
        numeroIndiceRevisionCredit: number;
    }
    interface ICreditParamRevisionSchema extends IElementSchema {
        /**
         * Idfrlr_IdntLoiRevs
         */
        idLoiRevision: string;
        /**
         * Nofrji_NumeJeuIndcRevsAsscCred
         */
        numeroJeuxIndiceRevisionAssuranceCredit: number;
        /**
         * CreditParamsIndexation
         */
        creditParamsIndexation: Array<ICreditParamIndexationSchema>;
    }
    interface ICreditParamRevisionParPhaseSchema extends ICreditParamRevisionSchema {
    }
    interface ICreditPhaseSchema extends IElementSchema {
        /**
         * DureeEnMois
         */
        dureeEnMois: number;
        /**
         * CreditPaliersTaux
         */
        creditPaliersTaux: Array<ICreditPalierTauxSchema>;
        /**
         * CreditParamsRevisionParPhase
         */
        creditParamsRevisionParPhase: ICreditParamRevisionParPhaseSchema;
    }
    interface ICreditPalierProgressionSchema extends IElementSchema {
    }
    interface IComplementPhasePretCombineSchema extends IElementSchema {
    }
    interface ICreditPhaseAmortissementSchema extends ICreditPhaseSchema {
        /**
         * CreditPaliersProgression
         */
        creditPaliersProgression: Array<ICreditPalierProgressionSchema>;
        /**
         * ComplementPhasePretCombine
         */
        complementPhasePretCombine: IComplementPhasePretCombineSchema;
    }
    interface ICreditPhaseDiffereAmortissementSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhaseDiffereTotalSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhasePrefinancementSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhaseMobilisationSchema extends ICreditPhaseSchema {
    }
    interface ISuiviPlanifieSchema extends IElementSchema {
    }
    interface IPayeurSchema extends IElementSchema {
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
        /**
         * IdwsPersonne
         */
        idPersonne: string;
    }
    interface ICreditParamRevisionParPeriodeSchema extends ICreditParamRevisionSchema {
    }
    interface ICreditModaliteSchema extends IElementSchema {
        /**
         * Idfcmi_IdntModlCalcImpe
         */
        idModeleCalculImpe: string;
        /**
         * Nofcmc_NumeModlRembAntc
         */
        numeroModeleRemboursementAnticipe: number;
    }
    interface ICreditBonificationInfoSchema extends IElementSchema {
        /**
         * Cdfdic_CodeInfo
         */
        codeInformation: string;
        /**
         * sCdfddi_CodeDetail
         */
        codeDetail: string;
    }
    interface ICreditBonificationSchema extends IElementSchema {
        /**
         * IdentifiantConvention
         */
        idConvention: string;
        /**
         * Infos
         */
        information: Array<ICreditBonificationInfoSchema>;
    }
    interface IDroitUtiliseSchema extends IElementSchema {
        /**
         * Mtfadu_MtDrtAcqsUtls
         */
        montantDroitAcqsUtilisation: number;
        /**
         * IdntTrancheEL
         */
        idTrancheEL: string;
    }
    interface ICompteCourantSchema extends IElementSchema {
        /**
         * Mtfasc_MtHyptCapt
         */
        montantHypothequeCapital: number;
        /**
         * Cifcmh_CodeIndicBlcgSaisMtHyptCapt
         */
        codeIndiceBlcgSaisieMontantHypothequeCapital: number;
    }
    interface IVariationDureeSchema extends IElementSchema {
        /**
         * Npfarv_NbPerdVartPoss
         */
        nombrePeriodeVartPossibilite: number;
        /**
         * TypeButrVartDure
         */
        typeButoireVartDure: number;
    }
    interface IVersementFractionneSchema extends IElementSchema {
        /**
         * Nbfbvs_NbVerstSouh
         */
        nombreVersementSouh: number;
        /**
         * Mvfbmf_MtVerstFrct
         */
        montantVersementFraction: number;
    }
    interface IMarcheEPSSchema extends IElementSchema {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDoss
         */
        numeroRelPlanDossier: number;
        /**
         * Nofacp_NumRelCreditPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Ctfcme_CodeTypeMarche
         */
        codeTypeMarche: string;
    }
    interface IComplementEPSSchema extends IElementSchema {
        /**
         * Cnfcnb_NatrGarnEps
         */
        natureGarantieEPS: string;
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfapa_RefrExtnDossParn
         */
        referenceExterneDossierParent: string;
        /**
         * Idfcma_IdModeleActeEPS
         */
        idModeleActeEPS: string;
        /**
         * MarchesEPS
         */
        marchesEPS: Array<IMarcheEPSSchema>;
    }
    interface ITACreditEPSSchema extends IElementSchema {
        /**
         * Dtfhpr_DateEchnMER
         * Type date au format yyyy-MM-dd
         */
        dateEcheanceMER: string;
        /**
         * Mkfh03_MtCaptAmrt
         */
        montantCapitalAmortissement: number;
        /**
         * Mkfd01_MtCaptRestDu
         */
        montantCapitalRestantDu: number;
    }
    interface ICreditEPSSchema extends IElementSchema {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Txfccc_QuotCredCouvParEps
         */
        quotientCreditCouvertureParEPS: number;
        /**
         * Idfaez_RefeExtnCredCouvEps
         */
        referenceExterneCreditCouvertureEPS: string;
        /**
         * TaCredCouvParEps
         */
        taCreditCouvertureParEPS: Array<ITACreditEPSSchema>;
    }
    interface IAjustementTauxSchema extends IElementSchema {
    }
    interface ICreditInterneSchema extends IElementSchema {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
        /**
         * TegProp
         */
        tegProp: number;
        /**
         * Phases
         */
        phases: Array<ICreditPhaseSchema>;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
        /**
         * SuivisPlanifies
         */
        suivisPlanifies: Array<ISuiviPlanifieSchema>;
        /**
         * Payeurs
         */
        payeurs: Array<IPayeurSchema>;
        /**
         * CreditParamsRevision
         */
        creditParamsRevision: Array<ICreditParamRevisionSchema>;
        /**
         * CreditModalite
         */
        creditModalite: ICreditModaliteSchema;
        /**
         * CreditBonification
         */
        creditBonification: ICreditBonificationSchema;
        /**
         * DroitsUtilises
         */
        droitsUtilises: Array<IDroitUtiliseSchema>;
        /**
         * CompteCourant
         */
        compteCourant: ICompteCourantSchema;
        /**
         * VariationsDuree
         */
        variationsDuree: Array<IVariationDureeSchema>;
        /**
         * VersementFractionne
         */
        versementFractionne: IVersementFractionneSchema;
        /**
         * ComplementEPS
         */
        complementEPS: IComplementEPSSchema;
        /**
         * CreditsEPS
         */
        creditsEPS: Array<ICreditEPSSchema>;
        /**
         * AjustementTaux
         */
        ajustementTaux: IAjustementTauxSchema;
    }
    interface IRefusAssuranceExterneSchema extends IElementSchema {
        /**
         * Idfadi_IdDossierInstruction
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroRelatifPlanDossier
         */
        numeroRelatifPlanDossier: number;
        /**
         * Idfppe_Identifiantpersonne
         */
        identifiantpersonne: string;
        /**
         * Nofrfp_NumRangRefusProposition
         */
        numeroRangRefusProposition: number;
        /**
         * Lbfcia_CompagnieAssurance
         */
        compagnieAssurance: string;
        /**
         * Lbfrcc_ReferenceContrat
         */
        referenceContrat: string;
        /**
         * Ddfddr_DateReceptionDemande
         * Type date au format yyyy-MM-dd
         */
        dateReceptionDemande: string;
        /**
         * Ddfpic_DateImpressionDemande
         * Type date au format yyyy-MM-dd
         */
        dateImpressionDemande: string;
        /**
         * Cdfdda_CodeDecision
         */
        codeDecision: number;
        /**
         * Llfprp_RolePersonne
         */
        rolePersonne: string;
    }
    interface IOrigineApportSchema extends IElementSchema {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroPlanDossier
         */
        numeroPlanDossier: number;
        /**
         * Cdfoap_CodeOrigine
         */
        codeOrigine: number;
        /**
         * Mtfoap_MontantApportOrigine
         */
        montantApportOrigine: number;
    }
    interface IPlanFinancementSchema extends IElementSchema {
        /**
         * Mtfaso_MtTotlEmprPlan
         */
        montantTotalEmpruntPlan: number;
        /**
         * Mtfaap_MtApprPers
         */
        montantApportPersonne: number;
        /**
         * Mteh01_MtPreEchPhse
         */
        montantPreEchPhase: number;
        /**
         * Apl
         */
        aPL: IAplSchema;
        /**
         * SynthesePlanFinancement
         */
        synthesePlanFinancement: ISynthesePlanFinancementSchema;
        /**
         * CreditsExternes
         */
        creditsExternes: Array<ICreditExterneSchema>;
        /**
         * PaliersContraints
         */
        paliersContraints: Array<IPalierContraintSchema>;
        /**
         * AccessoiresComplementaires
         */
        accessoiresComplementaires: Array<IAccessoireComplementaireSchema>;
        /**
         * AccessoiresLiesProduit
         */
        accessoiresLiesProduit: Array<IAccessoireLieProduitSchema>;
        /**
         * Assurances
         */
        assurances: Array<IAssuranceSchema>;
        /**
         * Garanties
         */
        garanties: Array<IGarantieSchema>;
        /**
         * ServicesSurObjet
         */
        servicesSurObjet: Array<IServiceSurObjetSchema>;
        /**
         * CreditsInternes
         */
        creditsInternes: Array<ICreditInterneSchema>;
        /**
         * RefusAssuranceExternes
         */
        refusAssuranceExternes: Array<IRefusAssuranceExterneSchema>;
        /**
         * OriginesApport
         */
        originesApport: Array<IOrigineApportSchema>;
    }
    interface IProjetSchema extends IElementSchema {
        /**
         * Cdfcni_TypeObjtFinn
         */
        typeObjetFinancier: string;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * BienAVendre
         */
        bienAVendre: IBienAVendreSchema;
        /**
         * Reamenagement
         */
        reamenagement: IReamenagementSchema;
        /**
         * PlansFinancement
         */
        plansFinancement: Array<IPlanFinancementSchema>;
        /**
         * IdntPlanRetn
         */
        idPlanRetn: string;
    }
    interface IBienConsoFinanceSchema extends IElementSchema {
    }
    interface IAutoMotoSchema extends IBienConsoFinanceSchema {
    }
    interface IBienDetailleSchema extends IElementSchema {
    }
    interface IBienEquipementProSchema extends IBienDetailleSchema {
    }
    interface ITresorerieFinanceeSchema extends IBienDetailleSchema {
    }
    interface IProjetNonImmobilierSchema extends IProjetSchema {
        /**
         * BienConsoFinance
         */
        bienConsommationFinance: IBienConsoFinanceSchema;
        /**
         * BienEquipementPro
         */
        bienEquipementPro: IBienEquipementProSchema;
        /**
         * TresorerieFinancee
         */
        tresorerieFinancee: ITresorerieFinanceeSchema;
    }
    interface IPromotionImmobiliereSchema extends IElementSchema {
        /**
         * InttPrgm
         */
        intituleProgramme: string;
        /**
         * SittPrgm
         */
        situationProgramme: number;
    }
    interface ITerrainFinanceSchema extends IElementSchema {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
    }
    interface IBienSousJacentSchema extends IElementSchema {
    }
    interface ITerrainSousJacentSchema extends IBienSousJacentSchema {
    }
    interface ISoulteFinanceeSchema extends IElementSchema {
        /**
         * Mtfoac_MtSoul
         */
        montantSoul: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
    }
    interface IDetailCoutObjetSchema extends IElementSchema {
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Mtfoct_CoutTrvx
         */
        coutTravaux: number;
    }
    interface ITravauxFinancesSchema extends IElementSchema {
        /**
         * Mtfotr_CoutTrvx
         */
        coutTravaux: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
        /**
         * DetailsCoutObjet
         */
        detailsCoutObjet: Array<IDetailCoutObjetSchema>;
    }
    interface IConstructionFinanceeSchema extends IElementSchema {
        /**
         * Mtfoco_CoutConstFinn
         */
        coutConstructionFinancier: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
    }
    interface IBatimentHabitableFinanceSchema extends IElementSchema {
        /**
         * Mtfoac_CoutAcqsBatmHabt
         */
        coutAcqsBatimentHabitation: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
    }
    interface IButLocatifSchema extends IElementSchema {
        /**
         * Mtfolp_MtAnnuLoyePerc
         */
        montantAnnuLoyePerc: number;
    }
    interface ITrancheELSchema extends IElementSchema {
        /**
         * Mtfaac_MtDrtAcqs
         */
        montantDroitAcqs: number;
    }
    interface IContratEpargneLogementSchema extends IElementSchema {
        /**
         * Cdfppr_CodeTypeEL
         */
        codeTypeEL: number;
        /**
         * Nufpct_IdntContEl
         */
        idContratEpargneLogement: string;
        /**
         * TranchesEL
         */
        tranchesEL: Array<ITrancheELSchema>;
        /**
         * IdwsPersBenef
         */
        idPersonneBeneficiaire: string;
    }
    interface IProjetImmobilierSchema extends IProjetSchema {
        /**
         * PromotionImmobiliere
         */
        promotionImmobiliere: IPromotionImmobiliereSchema;
        /**
         * TerrainFinance
         */
        terrainFinance: ITerrainFinanceSchema;
        /**
         * SoulteFinance
         */
        soulteFinance: ISoulteFinanceeSchema;
        /**
         * TravauxFinance
         */
        travauxFinance: ITravauxFinancesSchema;
        /**
         * ConstructionFinance
         */
        constructionFinance: IConstructionFinanceeSchema;
        /**
         * BatimentHabitableFinance
         */
        batimentHabitableFinance: IBatimentHabitableFinanceSchema;
        /**
         * ButLocatif
         */
        butLocatif: IButLocatifSchema;
        /**
         * ContratsEL
         */
        contratsEL: Array<IContratEpargneLogementSchema>;
    }
    interface IProjetEPSSchema extends IProjetSchema {
    }
    interface IComplementDossierSchema extends IElementSchema {
        /**
         * Llfidr_LiblDelRelsProj
         */
        libelleDelReleaseProjet: string;
        /**
         * Ctfipt_CodePrrtTrt
         */
        codePrrtTraitement: string;
        /**
         * Dtfisi_DateSaisSurItnt
         * Type date au format yyyy-MM-dd
         */
        dateSaisieSurInternet: string;
        /**
         * Hefisi_HeurSaisSurItnt
         */
        heureSaisieSurInternet: number;
    }
    interface IPoolEPSSchema extends IElementSchema {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfaop_IdntOprtCess
         */
        idOprtCess: string;
        /**
         * Idfccf_IdntCadrFinn
         */
        idCadreFinancier: string;
        /**
         * Cnflpo_CodeNatrPool
         */
        codeNaturePool: number;
        /**
         * Cdfcor_CodeOrigCess
         */
        codeOrigineCess: number;
        /**
         * Ctfesr_TypeSousRolePool
         */
        typeSousRolePool: number;
        /**
         * Nofcca_NumVersionCadre
         */
        numeroVersionCadre: number;
    }
    interface IAgentSchema extends IElementSchema {
        /**
         * Idfaen_IdntAgent
         */
        idAgent: string;
        /**
         * Lbfaes_LblAgent
         */
        lblAgent: string;
        /**
         * EstAgentBO
         */
        estAgentBO: boolean;
        /**
         * EstBackup
         */
        estBackup: boolean;
        /**
         * EstAgentExterne
         */
        estAgentExterne: boolean;
        /**
         * Idfaeg_IdntEdsGest
         */
        idEDSGestion: string;
        /**
         * Lbfiba_LblAgenceRat
         */
        lblAgenceRat: string;
        /**
         * Cdfaaa_CdeAgentRat
         */
        cdeAgentRat: string;
        /**
         * Ctfauc_TypeUtilisateurCo
         */
        typeUtilisateurCo: number;
        /**
         * Idfce3_EtabBaofCent
         */
        etabBaofCentral: number;
        /**
         * Cdfabo_IdntEdsBaofCent
         */
        idEDSBaofCentral: string;
        /**
         * Cifttv_TechniqueDeVente
         */
        techniqueDeVente: number;
        /**
         * DerogationBornes
         */
        derogationBornes: boolean;
        /**
         * Role
         */
        role: number;
        /**
         * EstAgentRefusAssuranceExterne
         */
        estAgentRefusAssuranceExterne: boolean;
    }
    interface IDocumentOffreIndustrialiseeSchema extends IElementSchema {
        /**
         * DocumentCommun
         */
        documentCommun: string;
        /**
         * CodeEntiteFonctionnelle
         */
        codeEntiteFonctionnelle: string;
        /**
         * IdEntiteFonctionnelle
         */
        idEntiteFonctionnelle: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * LibelleDocument
         */
        libelleDocument: string;
        /**
         * IndicateurCasEcheant
         */
        indicateurCasEcheant: string;
        /**
         * EtatDocument
         */
        etatDocument: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Origine
         */
        origine: string;
    }
    interface IOffrePretIndustrialiseeSchema extends IElementSchema {
        /**
         * EditionEligible
         */
        editionEligible: boolean;
        /**
         * EditionEligibleEnAgence
         */
        editionEligibleEnAgence: boolean;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * DossierGdeACree
         */
        dossierGdeACree: boolean;
        /**
         * EtatDossierEdition
         */
        etatDossierEdition: string;
        /**
         * ListeDocumentsSchema
         */
        listeDocumentsSchema: Array<IDocumentOffreIndustrialiseeSchema>;
    }
    interface IDossierSchema extends IElementSchema {
        /**
         * Ctfado_EtatDoss
         */
        etatDossier: number;
        /**
         * TypeMoteurADR
         */
        typeMoteurADR: number;
        /**
         * Cefado_SousEtatDoss
         */
        sousEtatDossier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * EstEcoPtzCopro
         */
        estEcoPtzCopro: boolean;
        /**
         * EstDossierPartenaire
         */
        estDossierPartenaire: boolean;
        /**
         * BlocNotesDivers
         */
        blocNotesDivers: Array<IBlocNotesSchema>;
        /**
         * ClausesPersonnalisees
         */
        clausesPersonnalisees: Array<IClausePersonnaliseeSchema>;
        /**
         * AlertesEnSortie
         */
        alertesEnSortie: Array<IAlerteEnSortieSchema>;
        /**
         * AlertesEnEntree
         */
        alertesEnEntree: Array<IAlerteEnEntreeSchema>;
        /**
         * Avis
         */
        avis: Array<IAvisSchema>;
        /**
         * Evenements
         */
        evenements: Array<IEvenementSchema>;
        /**
         * Versements
         */
        versements: Array<IVersementSchema>;
        /**
         * RedacteurActe
         */
        redacteurActe: IRedacteurActeSchema;
        /**
         * Emprunteur
         */
        emprunteur: IEmprunteurSchema;
        /**
         * Garants
         */
        garants: Array<IGarantSchema>;
        /**
         * Personnes
         */
        personnes: Array<IPersonneSchema>;
        /**
         * Projet
         */
        projet: IProjetSchema;
        /**
         * ComplementDossier
         */
        complementDossier: IComplementDossierSchema;
        /**
         * PoolEPS
         */
        poolEPS: IPoolEPSSchema;
        /**
         * Agents
         */
        agents: Array<IAgentSchema>;
        /**
         * AnoCtlOuvrtDossier
         */
        anoCtlOuvrtDossier: Array<IAnomalieLecture>;
        /**
         * OffrePretIndustrialisee
         */
        offrePretIndustrialisee: IOffrePretIndustrialiseeSchema;
    }
    interface IEntrepreneurIndividuelMaj extends IElementMaj {
        /**
         * AccordConjoint
         */
        accordConjoint: boolean;
        /**
         * NomConjoint
         */
        nomConjoint: string;
        /**
         * NomMandataire
         */
        nomMandataire: string;
        /**
         * VertuMandataire
         */
        vertuMandataire: string;
    }
    interface ISignataireMaj extends IElementMaj {
        /**
         * EmailContact
         */
        emailContact: string;
        /**
         * NumeroContact
         */
        numeroContact: string;
        /**
         * EstSignataireEffectif
         */
        estSignataireEffectif: boolean;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
    }
    interface IEntrepreneurIndividuelSchema extends IElementSchema {
        /**
         * EstEIRL
         */
        estEIRL: boolean;
        /**
         * IndicateurEIRL
         */
        indicateurEIRL: number;
        /**
         * LibelleEIRL
         */
        libelleEIRL: string;
        /**
         * AccordConjoint
         */
        accordConjoint: boolean;
    }
    interface ISignataireSchema extends IElementSchema {
        /**
         * EmailContact
         */
        emailContact: string;
        /**
         * NumeroContact
         */
        numeroContact: string;
        /**
         * EstSignataireEffectif
         */
        estSignataireEffectif: boolean;
    }
    interface IInformationSignataireOffre {
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationSignataireDemandeDeCreditAgence {
        /**
         * DateMiseADispoDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateMiseADispoDemandeDeCredit: string;
        /**
         * DateSignatureDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateSignatureDemandeDeCredit: string;
    }
    interface IInformationSignataireGenerique {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * InformationsSignataireOffre
         */
        informationsSignataireOffre: IInformationSignataireOffre;
        /**
         * InformationSignataireDemandeDeCreditAgence
         */
        informationSignataireDemandeDeCreditAgence: IInformationSignataireDemandeDeCreditAgence;
    }
    interface IInformationDossierSignatureOffre {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierDemandeDeCreditAgence {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierSignatureGenerique {
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataireGenerique>;
        /**
         * InformationsSignatureOffre
         */
        informationsSignatureOffre: IInformationDossierSignatureOffre;
        /**
         * InformationsDemandeDeCreditAgence
         */
        informationsDemandeDeCreditAgence: IInformationDossierDemandeDeCreditAgence;
    }
    interface ISignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignatureGenerique;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface ISignataireLecture extends IElementLecture {
        /**
         * EmailContact
         */
        emailContact: string;
        /**
         * NumeroContact
         */
        numeroContact: string;
        /**
         * EmailsContactsChoisissables
         */
        emailsContactsChoisissables: Array<string>;
        /**
         * NumerosContactsChoisissables
         */
        numerosContactsChoisissables: string;
        /**
         * EstSignataireEffectif
         */
        estSignataireEffectif: boolean;
        /**
         * EstAutoriseASigner
         */
        estAutoriseASigner: boolean;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * TypeSignataire
         */
        typeSignataire: number;
    }
    interface IFCX50ACA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: IChampTextBox;
        /**
         * NombreCreditsAModifierACA
         */
        nombreCreditsAModifierACA: number;
        /**
         * ListeDonneesCreditAModifierACA
         */
        listeDonneesCreditAModifierACA: Array<IDonneesCreditLecture>;
    }
    interface IFC055FSI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * Messages
         */
        messages: IChampLabelMultiLine;
        /**
         * NumeroOrias
         */
        numeroOrias: IChampCache;
        /**
         * NombreCreditsAModifier
         */
        nombreCreditsAModifier: IChampCache;
        /**
         * ListeDonneesCreditAModifier
         */
        listeDonneesCreditAModifier: Array<IDonneesCreditLecture>;
    }
    interface IPersonneAutreLecture extends IPersonneLecture {
        /**
         * Prenoms
         */
        prenoms: string;
    }
    interface ILienEPSTirageLecture extends IElementLecture {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfaps_IdentifiantEPS
         */
        identifiantEPS: string;
        /**
         * Idfcej_Etablissement
         */
        etablissement: number;
    }
    interface IEntrepreneurIndividuelLecture extends IElementLecture {
    }
    interface IDocumentAssuranceLecture extends IElementLecture {
        /**
         * IdDocument
         */
        idDocument: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * IdContrat
         */
        idContrat: string;
        /**
         * TabDonneesDocument
         */
        tabDonneesDocument: string;
    }
    interface ICalculELLecture extends IElementLecture {
        /**
         * Tranche
         */
        tranche: ITrancheELLecture;
        /**
         * DroitUtilise
         */
        droitUtilise: IDroitUtiliseLecture;
        /**
         * Idfadi_IdDossier
         */
        idDossier: string;
        /**
         * Nufpct_IdContrat
         */
        idContrat: string;
        /**
         * Nofpdp_NumRelatifDossier
         */
        numeroRelatifDossier: number;
        /**
         * Ddfpct_DateOuvertureContrat
         */
        dateOuvertureContrat: string;
        /**
         * Txfpep_TauxEpargne
         */
        tauxEpargne: number;
        /**
         * Mtfaac_MontantDroitsAcquis
         */
        montantDroitsAcquis: number;
        /**
         * Dtfpae_DateArrete
         */
        dateArrete: string;
        /**
         * Ctfpli_LienParenteAvecCedant
         */
        lienParenteAvecCedant: string;
        /**
         * Cdfadv
         */
        cdfadv: string;
        /**
         * Mtfadu_MtDroitsAcquisUtilises
         */
        montantDroitsAcquisUtilises: number;
        /**
         * Txftpr_TauxPretCatalogue
         */
        tauxPretCatalogue: number;
        /**
         * Mkfmax_CapMaxOct
         */
        capMaximumOct: number;
        /**
         * Mtfaoc_MtPretOctroye
         */
        montantPretOctroye: number;
        /**
         * Mtfmax_EchMaxOct
         */
        echMaximumOct: number;
        /**
         * Mtfape_MtEchUtilise
         */
        montantEchUtilise: number;
        /**
         * Mtfali_MtLimite
         */
        montantLimite: number;
        /**
         * bDroitUtilisable
         */
        droitUtilisable: boolean;
    }
    interface ITravauxFinancesLecture extends IElementLecture {
        /**
         * Mtfotr_CoutTrvx
         */
        coutTravaux: number;
        /**
         * Dffotr_DateFinTrvx
         * Type date au format yyyy-MM-dd
         */
        dateFinTravaux: string;
        /**
         * Nbfose_SurfHabtCree
         */
        surfHabitationCree: number;
        /**
         * Cdfoig_TypeTrvxCadrEcpt
         */
        typeTravauxCadreEcpt: number;
        /**
         * SurfHabtTotlApreTrvx
         */
        surfHabitationTotalApreTravaux: number;
        /**
         * Dtfoco_DateConstBatmSjac
         * Type date au format yyyy-MM-dd
         */
        dateConstructionBatimentSousJacent: string;
        /**
         * Nbfosh_SurfHabtBatmSjac
         */
        surfHabitationBatimentSousJacent: number;
        /**
         * Dtfoac_DateAcqsBatmSjac
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBatimentSousJacent: string;
        /**
         * Ctfmoi_TypeLogmBatmSous
         */
        typeLogementBatimentSous: number;
        /**
         * LibelleTypeLogmBatmSous
         */
        libelleTypeLogementBatimentSous: string;
        /**
         * Nbfolo_NbreLogmBatmSous
         */
        nbreLogementBatimentSous: number;
        /**
         * Caftte_TypeEcoPtz
         */
        typeEcoPtz: number;
        /**
         * Mtfap6_MontantEcoPtzInitial
         */
        montantEcoPtzInitial: number;
        /**
         * Dtftde_DateCreationEcoPtzInitial
         * Type date au format yyyy-MM-dd
         */
        dateCreationEcoPtzInitial: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * IdntBienSjac
         */
        idBienSousJacent: string;
        /**
         * ListIdntDetlCoutTrvxEcpt
         */
        listeIdDetlCoutTravauxEcpt: Array<string>;
        /**
         * LibelleTypeTrvxCadrEcpt
         */
        libelleTypeTrvxCadrEcpt: string;
    }
    interface IProjetImmobilierLecture extends IProjetLecture {
        /**
         * Cifopa_DefnSiEmprEstPrm
         */
        defnSiEmpruntEstPrm: boolean;
        /**
         * Cofopz_CodeCondDergPourPtz
         */
        codeConditionDerogationPourPtz: number;
        /**
         * ValdelgbaPrmAccsPourCateReglAttr
         */
        valdelgbaPrmAccessoirePourCateRegleAttribut: boolean;
        /**
         * ElgbPtz
         */
        eligibilitePtz: boolean;
        /**
         * ElgbPc
         */
        eligibilitePC: boolean;
        /**
         * ElgbPas
         */
        eligibilitePas: boolean;
        /**
         * ElgbaEl
         */
        elgbaEpargneLogement: boolean;
        /**
         * ElgbaEcpt
         */
        elgbaEcpt: boolean;
        /**
         * Cdfose_CodeBatmBassConso
         */
        codeBatimentBassConsommation: number;
        /**
         * Cdfomo_CodeModlOccpLogm
         */
        codeModeleOccpLogement: number;
        /**
         * Ctfopm_CodePrixMarc
         */
        codePrixMarche: number;
        /**
         * LibelleCodePrixMarc
         */
        libelleCodePrixMarche: string;
        /**
         * Ctfmmc_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * LibelleCodeTypeMarc
         */
        libelleCodeTypeMarche: string;
        /**
         * Ctfmpo_TypePrpr
         */
        typeProprietaire: number;
        /**
         * LibelleTypePrpr
         */
        libelleTypeProprietaire: string;
        /**
         * Txfmpa_PctPrprApreOper
         */
        pourcentageProprietaireApreOper: number;
        /**
         * Mgfovh_MtInscHypt
         */
        montantInscHypotheque: number;
        /**
         * Cdfqem_QualEmplaProj
         */
        qualEmplaProjet: number;
        /**
         * ZoneReglRobnBien
         */
        zoneRegleRobnBien: string;
        /**
         * ZonePlusLogm
         */
        zonePlusLogement: string;
        /**
         * Cdfozg_CodeZoneGegrRegl
         */
        codeZoneGegrRegle: number;
        /**
         * Cdfwti_TypeImeu
         */
        typeImeu: number;
        /**
         * Cifclh_CodeLogmHlm
         */
        codeLogementHlm: number;
        /**
         * Cifclh_EstLogmHlm
         */
        estLogementHlm: boolean;
        /**
         * Idfapi_IdntPrgmImmb
         */
        idProgrammeImmobilier: string;
        /**
         * Idfaap_IdntAccrPourInst
         */
        idAccrPourInstruction: string;
        /**
         * Cifcep_IndicemssNouvPartScpi
         */
        indicemssNouvPartScpi: number;
        /**
         * Ctfcve_CodeTypeMarcPourVent
         */
        codeTypeMarchePourVent: number;
        /**
         * Idfove_NomSoceGest
         */
        nomSoceGestion: string;
        /**
         * Cdfizf_CentreBourgRural
         */
        centreBourgadeRural: boolean;
        /**
         * DroitAcquisPEL
         */
        droitAcquisPEL: number;
        /**
         * DroitAcquisCEL
         */
        droitAcquisCEL: number;
        /**
         * IdntTerrFinn
         */
        idTerrFinancier: string;
        /**
         * IdntTrvxFinn
         */
        idTravauxFinancier: string;
        /**
         * IdntConstFinn
         */
        idConstructionFinancier: string;
        /**
         * IdntBatmHabtFinn
         */
        idBatimentHabitationFinancier: string;
        /**
         * IdntSoulFinn
         */
        idSoulFinancier: string;
        /**
         * IdntObjtButLocf
         */
        idObjetButLocf: string;
        /**
         * IdntObjtPrmtImmb
         */
        idObjetPrmtImmobilier: string;
    }
    interface IProjetLecture extends IElementLecture {
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * BonificationEstValide
         */
        bonificationEstValide: boolean;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cdfcfo_CateReglAttr
         */
        cateRegleAttribut: string;
        /**
         * Cdfcni_TypeObjtFinn
         */
        typeObjetFinancier: string;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * LibelleModlEstVenl
         */
        libelleModeleEstVenl: string;
        /**
         * Cdfomp_CodeMiseOeuvrProjPro
         */
        codeMiseOeuvrProjetPro: number;
        /**
         * LibelleCodeMiseOeuvrProjPro
         */
        libelleCodeMiseOeuvrProjetPro: string;
        /**
         * Cdfonn_NegcEffcParNotr
         */
        negocieEffcParNotaire: boolean;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * Cdfwna_NaturesConcoursExternes
         */
        naturesConcoursExternes: Array<IScConstante>;
        /**
         * Cdfwrl_PresBienAVend
         */
        presBienAVend: boolean;
        /**
         * Cifocs_CoutObjtSaisCalcEnvl
         */
        coutObjetSaisieCalculEnvl: number;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Ctfgce_CritElgGarFEI
         */
        critereElgGarFEI: string;
        /**
         * Ctfifd_InteFrsDivrFinn
         */
        interieurFrsDivrFinancier: string;
        /**
         * Ctfoan_TypeAcqs
         */
        typeAcqs: number;
        /**
         * Ctfonu_NbUnteContPrgmImmb
         */
        nombreUnteContratProgrammeImmobilier: string;
        /**
         * Ctmicr_TypeLoiFICP
         */
        typeLoiFICP: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * FraisDeNotairesSaisissables
         */
        fraisDeNotairesSaisissables: boolean;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Lbfoof_DescObjt
         */
        descriptionObjet: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * Mofcpz_CoutRelOper
         */
        coutRelOper: number;
        /**
         * Mtfcra_MtRachCren
         */
        montantRachCren: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Mtfofd_MtFrsDivr
         */
        montantFrsDivr: number;
        /**
         * Mtfofn_CoutFrsNotr
         */
        coutFrsNotaire: number;
        /**
         * Mtfoho_CoutTotlObjtHt
         */
        coutTotalObjetHt: number;
        /**
         * Mtfott_CoutTotlObjtTtc
         */
        coutTotalObjetTTC: number;
        /**
         * PrendreBienSousJacentPourGarantie
         */
        prendreBienSousJacentPourGarantie: boolean;
        /**
         * RedacteurActeObligatoire
         */
        redacteurActeObligatoire: boolean;
        /**
         * IdntBienAVend
         */
        idBienAVend: string;
        /**
         * IdntLignInvs
         */
        idLigneInvs: string;
        /**
         * IdntLignTirg
         */
        idLigneTirg: string;
        /**
         * IdntPlanRetn
         */
        idPlanRetn: string;
        /**
         * IdntReam
         */
        idReamenagement: string;
        /**
         * ListIdntPlanFinn
         */
        listeIdPlanFinancier: Array<string>;
        /**
         * DescriptionProjet
         */
        descriptionProjet: string;
    }
    interface IConstructionFinanceeLecture extends IElementLecture {
        /**
         * Mtfoco_CoutConstFinn
         */
        coutConstructionFinancier: number;
        /**
         * Dtfoac_DateDebtConst
         * Type date au format yyyy-MM-dd
         */
        dateDebutConstruction: string;
        /**
         * Dffotr_DateFinConst
         * Type date au format yyyy-MM-dd
         */
        dateFinConstruction: string;
        /**
         * Mtfotm_CoutTrvxAChrgMoa
         */
        coutTravauxAChargeMoa: number;
        /**
         * Mtfotv_MtTvaFinnARemb
         */
        montantTVAFinancierARemboursement: number;
        /**
         * Ctfmcc_TypeContConst
         */
        typeContratConstruction: number;
        /**
         * LibelleTypeContConst
         */
        libelleTypeContratConstruction: string;
        /**
         * Cdfwti_TypeImeu
         */
        typeImeu: number;
        /**
         * Cdfoga_PresUneGarnAcheTrvx
         */
        presUneGarantieAcheTravaux: number;
        /**
         * LibellePresUneGarnAcheTrvx
         */
        libellePresUneGarantieAcheTravaux: string;
        /**
         * Nbfosh_SurfHabtCreeParConst
         */
        surfHabitationCreeParConstruction: number;
        /**
         * Nbfosa_SurfAnnx
         */
        surfAnnx: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * LibelleCtfoloTypeLogement
         */
        libelleTypeLogement: string;
        /**
         * Nbfolo_NbLogmConst
         */
        nombreLogementConstruction: number;
        /**
         * Nbfwpp_NbPiecPrncConst
         */
        nombrePiecePrincipalConstruction: number;
        /**
         * Ctfmoi_TypeLogm
         */
        typeLogement1: number;
        /**
         * LibelleCtfmoiTypeLogement
         */
        libelleTypeLogement1: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * IdntTerrSjac
         */
        idTerrSousJacent: string;
    }
    interface IBienSousJacentLecture extends IElementLecture {
        /**
         * Ctfmma_ModeAcqsBien
         */
        modeAcqsBien: number;
        /**
         * LibelleModeAcquisition
         */
        libelleModeAcquisition: string;
        /**
         * Mkfmct_CrdBienSjac
         */
        crdbienSousJacent: number;
        /**
         * Dtfoat_DateEntrCaptDateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateEntrCapitalDateAcqs: string;
        /**
         * Ctfogp_ModeFinn
         */
        modeFinancier: number;
        /**
         * LibelleModeFinancement
         */
        libelleModeFinancement: string;
        /**
         * Cdfcni_TypeObjtComl
         */
        typeObjetCommercialisation: string;
        /**
         * Lbni_LibelleLong
         */
        libelleTypeObjCom: string;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Lbfcor_LibelleLong
         */
        libelleTypeObjReg: string;
        /**
         * Cnfcng_NatrGarnt
         */
        natureGarnt: number;
        /**
         * LibelleNatureGarantie
         */
        libelleNatureGarantie: string;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * LibelleModlEstmVenl
         */
        libelleModeleEstmVenl: string;
        /**
         * IdntBien
         */
        idBien: string;
    }
    interface IBatimentHabitableFinanceLecture extends IElementLecture {
        /**
         * Nbfosh_SurfHabtCreeParConst
         */
        surfHabitationCreeParConstruction: number;
        /**
         * Nbfosa_SurfAnnx
         */
        surfAnnx: number;
        /**
         * Mtfoac_CoutAcqsBatmHabt
         */
        coutAcqsBatimentHabitation: number;
        /**
         * Ctfopm_CodePrixMarcBale2
         */
        codePrixMarcheBale2: number;
        /**
         * Mtfomf_MtMoblFinn
         */
        montantMoblFinancier: number;
        /**
         * Mtfcfn_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * Dtfaoc_DateAcqsBatmHabt
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBatimentHabitation: string;
        /**
         * Dtfoco_DateConstBatmHabt
         * Type date au format yyyy-MM-dd
         */
        dateConstructionBatimentHabitation: string;
        /**
         * Mtfotv_MtTvaFinnARemb
         */
        montantTVAFinancierARemboursement: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * LibelleCtfoloTypeLogement
         */
        libelleTypeLogement: string;
        /**
         * Nbfolo_NbLogmConst
         */
        nombreLogementConstruction: number;
        /**
         * Nbfwpp_NbPiecPrncConst
         */
        nombrePiecePrincipalConstruction: number;
        /**
         * Ctfmoi_TypeLogm
         */
        typeLogement1: number;
        /**
         * LibelleCtfmoiTypeLogement
         */
        libelleTypeLogement1: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * IdntTerrSjac
         */
        idTerrSousJacent: string;
    }
    interface IOccupantMaj extends IElementMaj {
        /**
         * LibelleOccupant
         */
        libelleOccupant: string;
        /**
         * Lien
         */
        lien: number;
        /**
         * RevenuFiscal
         */
        revenuFiscal: number;
    }
    interface IRattachementFoyerFiscalTiersMaj extends IElementMaj {
        /**
         * Identification
         */
        identification: string;
        /**
         * Annee
         */
        annee: number;
        /**
         * Montant
         */
        montant: number;
    }
    interface IInformationOccupationMaj extends IElementMaj {
        /**
         * DateDebut
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * StatutOccupation
         */
        statutOccupation: number;
        /**
         * RattachementAutre
         */
        rattachementAutre: string;
        /**
         * Adresse
         */
        adresse: string;
    }
    interface ITuteurMaj extends IElementMaj {
    }
    interface IFCM17NFO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: IChampTextBox;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: IChampTextBox;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: IChampTextBox;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: IChampTextBox;
    }
    interface IBienLecture {
        /**
         * NatureBien
         */
        natureBien: IChampTextBox;
        /**
         * QuantiteBien
         */
        quantiteBien: IChampTextBox;
        /**
         * ValeurBien
         */
        valeurBien: IChampTextBox;
        /**
         * LieuSituationBien
         */
        lieuSituationBien: IChampTextBox;
        /**
         * MarqueBien
         */
        marqueBien: IChampTextBox;
        /**
         * NumSerieBien
         */
        numeroSerieBien: IChampTextBox;
    }
    interface IFCM17GBM {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NombreBiensMC
         */
        nombreBiensMC: number;
        /**
         * NomenclatureBiens
         */
        nomenclatureBiens: IChampComboBox;
        /**
         * ListeBienMC
         */
        listeBienMC: Array<IBienLecture>;
        /**
         * RepresPersMoraleGageBienMeuble
         */
        represPersMoraleGageBienMeuble: IChampTextBox;
        /**
         * AgissantPersMoraleGageBienMeuble
         */
        agissantPersMoraleGageBienMeuble: IChampTextBox;
        /**
         * Vertu1PersMoraleGageBienMeuble
         */
        vertu1PersMoraleGageBienMeuble: IChampTextBox;
        /**
         * Vertu2PersMoraleGageBienMeuble
         */
        vertu2PersMoraleGageBienMeuble: IChampTextBox;
        /**
         * VilleTribunal
         */
        villeTribunal: IChampTextBox;
    }
    interface IBienMaj {
        /**
         * NatureBien
         */
        natureBien: string;
        /**
         * QuantiteBien
         */
        quantiteBien: string;
        /**
         * ValeurBien
         */
        valeurBien: string;
        /**
         * LieuSituationBien
         */
        lieuSituationBien: string;
        /**
         * MarqueBien
         */
        marqueBien: string;
        /**
         * NumSerieBien
         */
        numeroSerieBien: string;
    }
    interface IFCM07LAN {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * TypeEnvoi
         */
        typeEnvoi: IChampComboBox;
    }
    interface IInformationsComplementairesSCIMaj extends IElementMaj {
        /**
         * ObjetSocialDedieAcqBienFin
         */
        objetSocialDedieAcqBienFin: boolean;
        /**
         * BienOccupeTitreGratuit
         */
        bienOccupeTitreGratuit: boolean;
        /**
         * ChoixVolontaireLoiImmo
         */
        choixVolontaireLoiImmo: boolean;
    }
    interface IScPhasePilote extends IScElement {
        /**
         * FonctionsPilote
         */
        fonctionsPilote: Array<string>;
    }
}

declare namespace ICRest.Modeles.MajElements {
    type IAnyType = any;
    interface IMiseAJourElementsRequest {
        identifiantDossier: string;
        listeElementsMiseAJour: Array<IElementMaj>;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IMarcheEPSMaj extends IElementMaj {
        /**
         * Ctfcme_CodeTypeMarche
         */
        codeTypeMarche: string;
        /**
         * Idfcmb_IdMarche
         */
        idMarche: string;
        /**
         * Idfcmp_IdTiersMarcePrinc
         */
        idTiersMarcePrinc: string;
        /**
         * Lbfcmo_LibMoeMarchePrinc
         */
        libelleMoeMarchePrinc: string;
        /**
         * Lbfcom_LibelleObjetMarche
         */
        libelleObjetMarche: string;
        /**
         * Mtfcmd_MontantMarche
         */
        montantMarche: number;
        /**
         * Dtfcma_DateSignMarche
         * Type date au format yyyy-MM-dd
         */
        dateSigneMarche: string;
        /**
         * Dffcme_DateFinMarche
         * Type date au format yyyy-MM-dd
         */
        dateFinMarche: string;
        /**
         * Lnfagr_NomGroupMarche
         */
        nomGroupMarche: string;
        /**
         * Lbfctr_LibLieuExecTravaux
         */
        libelleLieuExecTravaux: string;
        /**
         * Nxfctr_NumTranMarche
         */
        numeroTranMarche: string;
        /**
         * Nxfclo_NumLotMarche
         */
        numeroLotMarche: string;
        /**
         * Idfamp_refCautionPrincipale
         */
        refCautionPrincipale: string;
        /**
         * Dtfcmp_dateEmisCautionPrinc
         * Type date au format yyyy-MM-dd
         */
        dateEmisCautionPrinc: string;
        /**
         * Mtfccp_montantCautionPrinc
         */
        montantCautionPrinc: number;
        /**
         * Cdfadv_codeDevise
         */
        codeDevise: string;
    }
    interface ISuiviEditionDocumentMaj extends IElementMaj {
        /**
         * codeHistorisationDocument
         */
        codeHistorisationDocument: number;
        /**
         * Hefisd_DateSignatureDocument
         * Type date au format yyyy-MM-dd
         */
        dateSignatureDocument: string;
        /**
         * ListeIdentifiantPersonne
         */
        listeIdentifiantPersonne: Array<string>;
    }
    interface IButLocatifMaj extends IElementMaj {
        /**
         * Cdfopl_IndicPretTrnsLocf
         */
        indicePretTransfertLocf: boolean;
        /**
         * Nufofg_NumeDecsFavrGlbl
         */
        numeroDecisionFavrGlbl: number;
        /**
         * Dtfodf_DateDecsFavrLoct
         * Type date au format yyyy-MM-dd
         */
        dateDecisionFavrLoct: string;
        /**
         * Cdfofg_IndicDecsGlblFavr
         */
        indiceDecisionGlblFavr: boolean;
        /**
         * Dtfocl_DateConvLoct
         * Type date au format yyyy-MM-dd
         */
        dateConventionLoct: string;
        /**
         * Cdfofi_NatrAvtgFisc
         */
        natureAvantageFiscal: string;
        /**
         * Mtfofi_MtAvtgFisc
         */
        montantAvantageFiscal: number;
        /**
         * Mtfogl_MtFrsAnnlGestLogm
         */
        montantFrsAnnulationGestionLogement: number;
        /**
         * Mtfoel_MtFrsAnnlEntnLogm
         */
        montantFrsAnnulationEntnLogement: number;
        /**
         * Mtfofo_MtTaxeFonc
         */
        montantTaxeFonc: number;
        /**
         * Cdfolg_PresServVacnLogm
         */
        presServiceVacnLogement: boolean;
        /**
         * Cdfoli_PresUneAssrLoyeImpe
         */
        presUneAssuranceLoyeImpe: boolean;
        /**
         * Mtfolp_MtAnnuLoyePerc
         */
        montantAnnuLoyePerc: number;
    }
    interface ISoulteFinanceeMaj extends IElementMaj {
        /**
         * Mtfoac_MtSoul
         */
        montantSoul: number;
        /**
         * Ctfmpt_PermDetrSiSoulFaitSuiteDivo
         */
        permDetrSiSoulFaitSuiteDivo: boolean;
        /**
         * Txfapo_PctPrprOrig
         */
        pourcentageProprietaireOrigine: number;
        /**
         * Mtfmvc_ValrActvCorrValrBienOrig
         */
        valeurActiviteCorrValeurBienOrigine: number;
        /**
         * Nbfosh_SurfHabtBienSous
         */
        surfHabitationBienSous: number;
        /**
         * Dtfoac_DateAcqsBienSous
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBienSous: string;
    }
    interface IBatimentHabitableFinanceMaj extends IElementMaj {
        /**
         * Nbfosh_SurfHabtCreeParConst
         */
        surfHabitationCreeParConstruction: number;
        /**
         * Nbfosa_SurfAnnx
         */
        surfAnnx: number;
        /**
         * Mtfoac_CoutAcqsBatmHabt
         */
        coutAcqsBatimentHabitation: number;
        /**
         * Ctfopm_CodePrixMarcBale2
         */
        codePrixMarcheBale2: number;
        /**
         * Mtfomf_MtMoblFinn
         */
        montantMoblFinancier: number;
        /**
         * Mtfcfn_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * Dtfaoc_DateAcqsBatmHabt
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBatimentHabitation: string;
        /**
         * Dtfoco_DateConstBatmHabt
         * Type date au format yyyy-MM-dd
         */
        dateConstructionBatimentHabitation: string;
        /**
         * Mtfotv_MtTvaFinnARemb
         */
        montantTVAFinancierARemboursement: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * Nbfolo_NbLogmConst
         */
        nombreLogementConstruction: number;
        /**
         * Nbfwpp_NbPiecPrncConst
         */
        nombrePiecePrincipalConstruction: number;
        /**
         * Ctfmoi_TypeLogm
         */
        typeLogement1: number;
    }
    interface IConstructionFinanceeMaj extends IElementMaj {
        /**
         * Mtfoco_CoutConstFinn
         */
        coutConstructionFinancier: number;
        /**
         * Dtfoac_DateDebtConst
         * Type date au format yyyy-MM-dd
         */
        dateDebutConstruction: string;
        /**
         * Dffotr_DateFinConst
         * Type date au format yyyy-MM-dd
         */
        dateFinConstruction: string;
        /**
         * Mtfotm_CoutTrvxAChrgMoa
         */
        coutTravauxAChargeMoa: number;
        /**
         * Mtfotv_MtTvaFinnARemb
         */
        montantTVAFinancierARemboursement: number;
        /**
         * Ctfmcc_TypeContConst
         */
        typeContratConstruction: number;
        /**
         * Cdfwti_TypeImeu
         */
        typeImeu: number;
        /**
         * Cdfoga_PresUneGarnAcheTrvx
         */
        presUneGarantieAcheTravaux: number;
        /**
         * Nbfosh_SurfHabtCreeParConst
         */
        surfHabitationCreeParConstruction: number;
        /**
         * Nbfosa_SurfAnnx
         */
        surfAnnx: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * Nbfolo_NbLogmConst
         */
        nombreLogementConstruction: number;
        /**
         * Nbfwpp_NbPiecPrncConst
         */
        nombrePiecePrincipalConstruction: number;
        /**
         * Ctfmoi_TypeLogm
         */
        typeLogement1: number;
    }
    interface ITerrainSousJacentMaj extends IBienSousJacentMaj {
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfoft_TerrEstFinnParCred
         */
        terrEstFinancierParCredit: number;
        /**
         * Dtfoat_DateEntrPtrmDateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateEntrPatrimoineDateAcqs: string;
        /**
         * MtLoyeParMois
         */
        montantLoyeParMois: number;
        /**
         * Ctfmma_ModeAcqsTerr
         */
        modeAcqsTerr: number;
    }
    interface IBienSousJacentMaj extends IElementMaj {
        /**
         * Ctfmma_ModeAcqsBien
         */
        modeAcqsBien: number;
        /**
         * Mkfmct_CrdBienSjac
         */
        crdbienSousJacent: number;
        /**
         * Dtfoat_DateEntrCaptDateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateEntrCapitalDateAcqs: string;
        /**
         * Ctfogp_ModeFinn
         */
        modeFinancier: number;
        /**
         * Cdfcni_TypeObjtComl
         */
        typeObjetCommercialisation: string;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Cnfcng_NatrGarnt
         */
        natureGarnt: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
    }
    interface ITravauxFinancesMaj extends IElementMaj {
        /**
         * Mtfotr_CoutTrvx
         */
        coutTravaux: number;
        /**
         * Dffotr_DateFinTrvx
         * Type date au format yyyy-MM-dd
         */
        dateFinTravaux: string;
        /**
         * Nbfose_SurfHabtCree
         */
        surfHabitationCree: number;
        /**
         * Cdfoig_TypeTrvxCadrEcpt
         */
        typeTravauxCadreEcpt: number;
        /**
         * Dtfoco_DateConstBatmSjac
         * Type date au format yyyy-MM-dd
         */
        dateConstructionBatimentSousJacent: string;
        /**
         * Nbfosh_SurfHabtBatmSjac
         */
        surfHabitationBatimentSousJacent: number;
        /**
         * Dtfoac_DateAcqsBatmSjac
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBatimentSousJacent: string;
        /**
         * Ctfmoi_TypeLogmBatmSous
         */
        typeLogementBatimentSous: number;
        /**
         * Nbfolo_NbreLogmBatmSous
         */
        nbreLogementBatimentSous: number;
        /**
         * Caftte_TypeEcoPtz
         */
        typeEcoPtz: number;
        /**
         * Mtfap6_MontantEcoPtzInitial
         */
        montantEcoPtzInitial: number;
        /**
         * Dtftde_DateCreationEcoPtzInitial
         * Type date au format yyyy-MM-dd
         */
        dateCreationEcoPtzInitial: string;
        /**
         * RealisationTravaux
         */
        realisationTravaux: number;
    }
    interface ITerrainFinanceMaj extends IElementMaj {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
        /**
         * Dtfaot_DateAcqsTerr
         * Type date au format yyyy-MM-dd
         */
        dateAcqsTerr: string;
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfoft_CodeFinnTerr
         */
        codeFinancierTerr: number;
        /**
         * Mtfcfn_MtFrsNegc
         */
        montantFrsNegocie: number;
    }
    interface IDossierMaj extends IElementMaj {
        /**
         * Dgfano_DateHorzProj
         * Type date au format yyyy-MM-dd
         */
        dateHorizonProjet: string;
        /**
         * Cdfiei_CodeImprParExprVers
         */
        codeImprParExpressionVersement: number;
        /**
         * Cdfiag_CodeAppliChrgDoss
         */
        codeApplicationChargeDossier: number;
        /**
         * Cdfado_CodeVisbInstr
         */
        codeVisbInstruction: number;
        /**
         * Cifttv_TechVent
         */
        techniqueVent: number;
        /**
         * Cifoli_CodeLivrnImme
         */
        codeLivrnImme: boolean;
        /**
         * Nofaac_NumeAccrCmps
         */
        numeroAccrCmps: number;
        /**
         * Cnfaeg_EnggRevc
         */
        engagementRevc: number;
        /**
         * Dtfasp_DateSignPret
         * Type date au format yyyy-MM-dd
         */
        dateSignePret: string;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Idfccp_IdntConvPres
         */
        idConventionPres: string;
        /**
         * Idfipp_IdntPres
         */
        idPres: string;
        /**
         * Lbfpen_EnsgnPres
         */
        ensgnPres: string;
        /**
         * Ctfaoc_OrigCommProj
         */
        origineCommissionProjet: number;
        /**
         * Cefapd_CodeEttPlns
         */
        codeEtatPlns: number;
        /**
         * Cdfaar_CodeApplAnlsRisq
         */
        codeApplicationAnlsRisque: boolean;
        /**
         * Ctfacf_CodeTyplCadrFisc
         */
        codeTypologieCadreFiscal: string;
        /**
         * Cdfadv_CdeDevs
         */
        cdeDevise: string;
        /**
         * Cifcsb_CodeLevrSecrBanc
         */
        codeLevrSecrBancaire: number;
        /**
         * Dtfaro_DateRecpOffrParClnt
         * Type date au format yyyy-MM-dd
         */
        dateRecuperationOffreParClient: string;
        /**
         * Cdfdrg_ModeRegl
         */
        modeRegle: string;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nufpr1_NumeCpteSecoPrel
         */
        numeroCompteSecoPrel: string;
        /**
         * Nufddt_DomcTresCpteSeco
         */
        domiciliationTresCompteSeco: string;
        /**
         * Dtfart_DateLimtRetrEmprLoiConso
         * Type date au format yyyy-MM-dd
         */
        dateLimiteRetardEmpruntLoiConsommation: string;
        /**
         * Idfaex_IdntExtnDoss
         */
        idExterneDossier: string;
        /**
         * Ctfals_TypeLoiScrv
         */
        typeLoiScrivener: number;
        /**
         * Cdfafc_CodeAuthCont
         */
        codeAuthentiqueContrat: boolean;
        /**
         * Mtfcon_MtVerstCnvn
         */
        montantVersementCnvn: number;
        /**
         * Txaufi_PctFinn
         */
        pourcentageFinancier: number;
        /**
         * Idfano_IdntRedcActe
         */
        idReductionActe: string;
        /**
         * Idfaoc_IdntOrigDemn
         */
        idOrigineDemande: string;
        /**
         * Lbfaoc_LiblOrigDemn
         */
        libelleOrigineDemande: string;
        /**
         * Dgfapn_DatePrevSignNotr
         * Type date au format yyyy-MM-dd
         */
        datePrevSigneNotaire: string;
        /**
         * Nufadn_RefeExtnDoss
         */
        referenceExterneDossier: string;
        /**
         * Idfas5_ElemStrc5
         */
        elementStructure5: string;
        /**
         * Idfas6_ElemStrc6
         */
        elementStructure6: string;
        /**
         * Llfic1_CritRechAppli1
         */
        critereRechercheApplication1: string;
        /**
         * Llfic2_CritRechAppli2
         */
        critereRechercheApplication2: string;
        /**
         * Llfic3_CritRechAppli3
         */
        critereRechercheApplication3: string;
        /**
         * Llfic4_CritRechAppli4
         */
        critereRechercheApplication4: string;
        /**
         * Llfic5_CritRechAppli5
         */
        critereRechercheApplication5: string;
        /**
         * Ctfaen_CodeTypeEngg
         */
        codeTypeEngagement: string;
        /**
         * Idfaei_IdntAgntInstrDoss
         */
        idAgentInstructionDossier: string;
        /**
         * Idfada_IdntAgntPourDecsConf
         */
        idAgentPourDecisionConf: string;
        /**
         * Idfabi_IdntEnttPourTrnfBo
         */
        idEntitePourTransfertBo: string;
        /**
         * BlocNotes
         */
        blocNotes: string;
        /**
         * Ctfcse_CodeEtpeSiml
         */
        codeEtapeSimulation: number;
        /**
         * Idfifd_NumeFichPres
         */
        numeroFichPres: string;
        /**
         * Cifapp_CodePrscDossPres
         */
        codePrscDossierPres: number;
        /**
         * Cdficd_CodeDevCredDev
         */
        codeDevCreditDev: string;
        /**
         * Idfics_NumCompteDev
         */
        numeroCompteDev: string;
        /**
         * Ctfimr_ModeReglDev
         */
        modeRegleDev: string;
        /**
         * Ctfimv_ModReglVerstDev
         */
        modRegleVersementDev: string;
        /**
         * Ctfici_CanalDeDistribution
         */
        canalDeDistribution: string;
        /**
         * Defiag_DateEnvConvAG
         * Type date au format yyyy-MM-dd
         */
        dateEnvoiConventionAG: string;
        /**
         * Idfdma_ReferenceMandat
         */
        referenceMandat: string;
        /**
         * Dgfdms_DateSignMand
         * Type date au format yyyy-MM-dd
         */
        dateSigneMand: string;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * Cifpcd_OuvCpteSupEchCred
         */
        ouvertureCompteSupEchCredit: boolean;
        /**
         * Cdfcsg_TypeSignature
         */
        typeSignature: number;
        /**
         * CodeTypeEditionAutorisee
         */
        codeTypeEditionAutorisee: string;
    }
    interface IInterditBancaireMaj extends IElementMaj {
        /**
         * Cdfpbd_CodeRepnBdf
         */
        codeRepnBDF: number;
        /**
         * Cdfpfi_CodeRepnFicp
         */
        codeRepnFicp: number;
        /**
         * Ctfpbd_CodeTypeRepnBdf
         */
        codeTypeRepnBDF: string;
        /**
         * Ctfpfi_CodeTypeRepnFicp
         */
        codeTypeRepnFicp: string;
        /**
         * Dtfpbd_DateApplBdf
         * Type date au format yyyy-MM-dd
         */
        dateApplicationBDF: string;
        /**
         * Dtfpfi_DateApplFicp
         * Type date au format yyyy-MM-dd
         */
        dateApplicationFicp: string;
        /**
         * Lbfpbd_LiblRepnBdf
         */
        libelleRepnBDF: string;
        /**
         * Lbfpfi_LiblRepnFicp
         */
        libelleRepnFicp: string;
        /**
         * Cdfmas_CodeArreSurSalr
         */
        codeArreSurSalr: number;
        /**
         * Dtfpfb_DateApplFbe
         * Type date au format yyyy-MM-dd
         */
        dateApplicationFbe: string;
        /**
         * Cdfpfb_CodeRepnFbe
         */
        codeRepnFbe: number;
        /**
         * Cdfmln_CodePresListnSurCntrTechRegn
         */
        codePresListnSurCntrTechniqueRegn: number;
        /**
         * Lbfmln_LiblListnSurCntrTechRegn
         */
        libelleListnSurCntrTechniqueRegn: string;
        /**
         * Cbfpfb_CodeCottFibenDirg
         */
        codeCotisationFibenDirg: string;
    }
    interface IActiviteMaj extends IElementMaj {
        /**
         * Cdfmcs_CodeClssRisqCsp
         */
        codeClasseRisqueCSP: number;
        /**
         * Dtfmcs_DateEfftCsp
         * Type date au format yyyy-MM-dd
         */
        dateEffetCSP: string;
        /**
         * Dtfmea_DateEmbc
         * Type date au format yyyy-MM-dd
         */
        dateEmbc: string;
        /**
         * Ctfmce_CodeTypeContEmbc
         */
        codeTypeContratEmbc: number;
        /**
         * Lbfmpl_RaisSoclEmplr
         */
        raisonSocialeEmplr: string;
        /**
         * Cpfmpl_CodePostEmplr
         */
        codePosteEmplr: string;
        /**
         * Lofmpl_CodeApNEmplr
         */
        codeApNEmplr: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmsa_CodePresActvSalr
         */
        codePresActiviteSalr: number;
        /**
         * Cdfmsu_CodePresSuivPers
         */
        codePresSuivantPersonne: number;
        /**
         * Nbfmkm_NbKilmEtrLogmTrvl
         */
        nombreKilmEntreLogementTrvl: number;
        /**
         * Dffmea_DateFinCdd
         * Type date au format yyyy-MM-dd
         */
        dateFinCdd: string;
        /**
         * Ctfmsa_CodeSectActv
         */
        codeSecteurActivite: number;
    }
    interface IRefusAssuranceExterneMaj extends IElementMaj {
        /**
         * Lbfcia_CompagnieAssurance
         */
        compagnieAssurance: string;
        /**
         * Lbfrcc_ReferenceContrat
         */
        referenceContrat: string;
        /**
         * Ddfddr_DateReceptionDemande
         * Type date au format yyyy-MM-dd
         */
        dateReceptionDemande: string;
        /**
         * Llfprp_RolePersonne
         */
        rolePersonne: string;
        /**
         * Lvfdmr_MotifRefus
         */
        motifRefus: string;
    }
    interface IGarantMaj extends IElementMaj {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Ctfmfc_CodeTypeFctCpteDepoCeRecent
         */
        codeTypeFctCpteDepoCeRecent: number;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
    }
    interface IDonneesCreditMaj {
        /**
         * IdCreditModifie
         */
        idCreditModifie: string;
        /**
         * MontantCreditModifie
         */
        montantCreditModifie: string;
    }
    interface ICreditTauxFixeMaj {
        /**
         * ReferenceIndiceCredit
         */
        referenceIndiceCredit: string;
        /**
         * TauxFixeCredit
         */
        tauxFixeCredit: string;
    }
    interface IOutilMaj {
        /**
         * MarqueOutil
         */
        marqueOutil: string;
        /**
         * TypeOutil
         */
        typeOutil: string;
        /**
         * DateLivraisonOutil
         * Type date au format yyyy-MM-dd
         */
        dateLivraisonOutil: string;
        /**
         * SerieOutil
         */
        serieOutil: string;
        /**
         * PrixOutil
         */
        prixOutil: string;
        /**
         * VendIntituleOutil
         */
        vendIntituleOutil: string;
        /**
         * VendCpltIntOutil
         */
        vendCpltIntituleOutil: string;
        /**
         * VendAdrOutil
         */
        vendAdresseOutil: string;
        /**
         * VendCpltAdrOutil
         */
        vendCpltAdresseOutil: string;
        /**
         * VendCPOutil
         */
        vendCPOutil: string;
        /**
         * VendVilleOutil
         */
        vendVilleOutil: string;
        /**
         * AdrOutil
         */
        adresseOutil: string;
        /**
         * CpltAdrOutil
         */
        cpltAdresseOutil: string;
        /**
         * CPOutil
         */
        cPOutil: string;
        /**
         * VilleOutil
         */
        villeOutil: string;
        /**
         * DeplacementOutil
         */
        deplacementOutil: boolean;
    }
    interface IPretDeviseMaj {
        /**
         * IdentifiantProduitPretDevise
         */
        identifiantProduitPretDevise: string;
        /**
         * NumCreditPlanPretDevise
         */
        numeroCreditPlanPretDevise: string;
        /**
         * TypePretDevise
         */
        typePretDevise: string;
        /**
         * IdggiPretDevise
         */
        idggiPretDevise: string;
        /**
         * CdngPretDevise
         */
        cdngPretDevise: string;
        /**
         * FraisEnDevises
         */
        fraisEnDevises: string;
        /**
         * DevisePretDevise
         */
        devisePretDevise: string;
        /**
         * FraisContrePartiePretDevise
         */
        fraisContrePartiePretDevise: string;
    }
    interface IDonneesCautionPersonneMoraleMaj {
        /**
         * RepresCautionPersoMorale
         */
        represCautionPersoMorale: string;
        /**
         * AgissantQualiteCaution
         */
        agissantQualiteCaution: string;
        /**
         * AgissantVertuCaution
         */
        agissantVertuCaution: string;
        /**
         * Agissant3Caution
         */
        agissant3Caution: string;
        /**
         * Agissant4Caution
         */
        agissant4Caution: string;
        /**
         * Agissant5Caution
         */
        agissant5Caution: string;
    }
    interface ISaisiesComplementaireMaj extends IElementMaj {
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: string;
        /**
         * NombreCreditsAModifierACA
         */
        nombreCreditsAModifierACA: number;
        /**
         * ListeDonneesCreditAModifierACA
         */
        listeDonneesCreditAModifierACA: Array<IDonneesCreditMaj>;
        /**
         * An1AttestationPTZ
         */
        an1AttestationPTZ: boolean;
        /**
         * An2AttestationPTZ
         */
        an2AttestationPTZ: boolean;
        /**
         * An3AttestationPTZ
         */
        an3AttestationPTZ: boolean;
        /**
         * An4AttestationPTZ
         */
        an4AttestationPTZ: boolean;
        /**
         * An5AttestationPTZ
         */
        an5AttestationPTZ: boolean;
        /**
         * An6AttestationPTZ
         */
        an6AttestationPTZ: boolean;
        /**
         * An7AttestationPTZ
         */
        an7AttestationPTZ: boolean;
        /**
         * An8AttestationPTZ
         */
        an8AttestationPTZ: boolean;
        /**
         * An9AttestationPTZ
         */
        an9AttestationPTZ: boolean;
        /**
         * AnXAttestationPTZ
         */
        anXAttestationPTZ: boolean;
        /**
         * AnXIAttestationPTZ
         */
        anXIAttestationPTZ: boolean;
        /**
         * AnIIIAttestationPTZ
         */
        anIIIAttestationPTZ: boolean;
        /**
         * AnIVAttestationPTZ
         */
        anIVAttestationPTZ: boolean;
        /**
         * AnXIVAttestationPTZ
         */
        anXIVAttestationPTZ: boolean;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: boolean;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: boolean;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: boolean;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: boolean;
        /**
         * NomCopropriete
         */
        nomCopropriete: string;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: string;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: string;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: string;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: string;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: string;
        /**
         * EffetCopropriete
         */
        effetCopropriete: string;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeMaj>;
        /**
         * ContenuConditionsSuspensives
         */
        contenuConditionsSuspensives: string;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: boolean;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: string;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: boolean;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: string;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: boolean;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: string;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: boolean;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: string;
        /**
         * DateTransfertBoSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateTransfertBoSuiveuse: string;
        /**
         * DateDispositionFondsSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateDispositionFondsSuiveuse: string;
        /**
         * DateEnvoiNumerisationSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateEnvoiNumerisationSuiveuse: string;
        /**
         * DateSignatureNotaireSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureNotaireSuiveuse: string;
        /**
         * EditionSuiveuse
         */
        editionSuiveuse: string;
        /**
         * Statut1Suiveuse
         */
        statut1Suiveuse: Array<string>;
        /**
         * Statut2Suiveuse
         */
        statut2Suiveuse: Array<string>;
        /**
         * Statut3Suiveuse
         */
        statut3Suiveuse: Array<string>;
        /**
         * NumeroDossierAssocieSuiveuse
         */
        numeroDossierAssocieSuiveuse: string;
        /**
         * CorbeilleWorkflowSuiveuse
         */
        corbeilleWorkflowSuiveuse: string;
        /**
         * CommentaireSuiveuse
         */
        commentaireSuiveuse: string;
        /**
         * IndexGarantie
         */
        indexGarantie: number;
        /**
         * ExisteAgrementGarantie
         */
        existeAgrementGarantie: boolean;
        /**
         * DateAgrementGarantie
         * Type date au format yyyy-MM-dd
         */
        dateAgrementGarantie: string;
        /**
         * PublierGreffeGarantie
         */
        publierGreffeGarantie: boolean;
        /**
         * ConjointsEmprunteursGarantie
         */
        conjointsEmprunteursGarantie: string;
        /**
         * ConjointsCautionsGarantie
         */
        conjointsCautionsGarantie: string;
        /**
         * DateDebutLigneInvestissement
         * Type date au format yyyy-MM-dd
         */
        dateDebutLigneInvestissement: string;
        /**
         * DateFinLigneInvestissement
         * Type date au format yyyy-MM-dd
         */
        dateFinLigneInvestissement: string;
        /**
         * ATauxFixeLigneInvestissement
         */
        aTauxFixeLigneInvestissement: boolean;
        /**
         * TauxFixeLigneInvestissement
         */
        tauxFixeLigneInvestissement: string;
        /**
         * TauxRevisableLigneInvestissement
         */
        tauxRevisableLigneInvestissement: string;
        /**
         * ReferenceIndiceLigneInvestissement
         */
        referenceIndiceLigneInvestissement: string;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: string;
        /**
         * NomMandataire
         */
        nomMandataire: string;
        /**
         * VertuMandataire
         */
        vertuMandataire: string;
        /**
         * NombreOutils
         */
        nombreOutils: number;
        /**
         * AjoutNotices
         */
        ajoutNotices: boolean;
        /**
         * NumeroOrias
         */
        numeroOrias: string;
        /**
         * NombreCreditsAModifier
         */
        nombreCreditsAModifier: number;
        /**
         * ListeDonneesCreditAModifier
         */
        listeDonneesCreditAModifier: Array<IDonneesCreditMaj>;
        /**
         * ListeOutil
         */
        listeOutil: Array<IOutilMaj>;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: string;
        /**
         * LibelleEtablissementPouvoirNotaire
         */
        libelleEtablissementPouvoirNotaire: string;
        /**
         * DatePouvoirNotaire
         * Type date au format yyyy-MM-dd
         */
        datePouvoirNotaire: string;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: string;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: string;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: string;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: string;
        /**
         * RibPretDevise
         */
        ribPretDevise: string;
        /**
         * PretDevise
         */
        pretDevise: Array<IPretDeviseMaj>;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: string;
        /**
         * AccordPrincipe
         */
        accordPrincipe: boolean;
        /**
         * Rdv
         */
        rdv: boolean;
        /**
         * Deroulement
         */
        deroulement: boolean;
        /**
         * RaisonCaution
         */
        raisonCaution: string;
        /**
         * RepresentantCaution
         */
        representantCaution: string;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: string;
        /**
         * DatePouvoirCaution
         * Type date au format yyyy-MM-dd
         */
        datePouvoirCaution: string;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: string;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: string;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: string;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: string;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: string;
        /**
         * DateRCSEmprunteurBailleur
         * Type date au format yyyy-MM-dd
         */
        dateRCSEmprunteurBailleur: string;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: string;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: string;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: string;
        /**
         * DatePouvoirEmprunteurPersMorale
         * Type date au format yyyy-MM-dd
         */
        datePouvoirEmprunteurPersonneMorale: string;
        /**
         * PouvoirEmprunteurPersMorale
         */
        pouvoirEmprunteurPersonneMorale: string;
        /**
         * ListeDonneesCautionPersonneMorale
         */
        listeDonneesCautionPersonneMorale: Array<IDonneesCautionPersonneMoraleMaj>;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: string;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: string;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: string;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: string;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: string;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: string;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: string;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: string;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: string;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: string;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: string;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: string;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: string;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: string;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: string;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: string;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: string;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: string;
        /**
         * DatePourvoirPersoMoraleAssurance
         * Type date au format yyyy-MM-dd
         */
        datePourvoirPersoMoraleAssurance: string;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: string;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: string;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: string;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: string;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: string;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: string;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: string;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: string;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: string;
        /**
         * VilleTribunal
         */
        villeTribunal: string;
        /**
         * NomenclatureBiens
         */
        nomenclatureBiens: string;
        /**
         * ListeBienMC
         */
        listeBienMC: Array<IBienMaj>;
        /**
         * NombreBiensMC
         */
        nombreBiensMC: number;
        /**
         * TypeEnvoi
         */
        typeEnvoi: string;
        /**
         * RepresPersMoraleGageBienMeuble
         */
        represPersMoraleGageBienMeuble: string;
        /**
         * AgissantPersMoraleGageBienMeuble
         */
        agissantPersMoraleGageBienMeuble: string;
        /**
         * Vertu1PersMoraleGageBienMeuble
         */
        vertu1PersMoraleGageBienMeuble: string;
        /**
         * Vertu2PersMoraleGageBienMeuble
         */
        vertu2PersMoraleGageBienMeuble: string;
    }
    interface IAgentMaj extends IElementMaj {
    }
    interface IProjetNonImmobilierMaj extends IProjetMaj {
        /**
         * DescProjNonImmb
         */
        descriptionProjetNonImmobilier: string;
        /**
         * Dtfbso_DateMiseDispFond
         * Type date au format yyyy-MM-dd
         */
        dateMiseDispFond: string;
    }
    interface IProjetImmobilierMaj extends IProjetMaj {
        /**
         * Cifopa_DefnSiEmprEstPrm
         */
        defnSiEmpruntEstPrm: boolean;
        /**
         * Cofopz_CodeCondDergPourPtz
         */
        codeConditionDerogationPourPtz: number;
        /**
         * Cdfose_CodeBatmBassConso
         */
        codeBatimentBassConsommation: number;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cdfomo_CodeModlOccpLogm
         */
        codeModeleOccpLogement: number;
        /**
         * Ctfopm_CodePrixMarc
         */
        codePrixMarche: number;
        /**
         * Ctfmmc_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * Ctfmpo_TypePrpr
         */
        typeProprietaire: number;
        /**
         * Txfmpa_PctPrprApreOper
         */
        pourcentageProprietaireApreOper: number;
        /**
         * Mgfovh_MtInscHypt
         */
        montantInscHypotheque: number;
        /**
         * Cdfqem_QualEmplaProj
         */
        qualEmplaProjet: number;
        /**
         * ZoneReglRobnBien
         */
        zoneRegleRobnBien: string;
        /**
         * ZonePlusLogm
         */
        zonePlusLogement: string;
        /**
         * Cdfozg_CodeZoneGegrRegl
         */
        codeZoneGegrRegle: number;
        /**
         * Cdfizf_CodeZoneFrncSins
         */
        codeZoneFrncSinistre: number;
        /**
         * Cdfwti_TypeImeu
         */
        typeImeu: number;
        /**
         * Idfapi_IdntPrgmImmb
         */
        idProgrammeImmobilier: string;
        /**
         * Idfaap_IdntAccrPourInst
         */
        idAccrPourInstruction: string;
        /**
         * Cifcep_IndicemssNouvPartScpi
         */
        indicemssNouvPartScpi: number;
        /**
         * Ctfcve_CodeTypeMarcPourVent
         */
        codeTypeMarchePourVent: number;
        /**
         * Idfove_NomSoceGest
         */
        nomSoceGestion: string;
        /**
         * Cdfizf_CentreBourgRural
         */
        centreBourgadeRural: boolean;
        /**
         * Dtfipe_DateDPE
         * Type date au format yyyy-MM-dd
         */
        dateDPE: string;
        /**
         * Idfipe_IdntDPE
         */
        idDPE: string;
        /**
         * Ctfien_TypeLogmDPE
         */
        typeLogementDPE: number;
        /**
         * Cdfipf_CodeOrigDPE
         */
        codeOrigineDPE: string;
        /**
         * Qcfiep_CumlConsEnrgPrim
         */
        cumulConsoEnergiePrimaire: number;
        /**
         * Qcfigs_CumlEmisGazEfftSerr
         */
        cumulEmissionGazEffetSerre: number;
        /**
         * Idfibi_IdntBienImmb
         */
        idBienImmobilier: string;
    }
    interface IProjetEPSMaj extends IProjetMaj {
    }
    interface IProjetMaj extends IElementMaj {
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Cdfcon_NegcEffcParNotr
         */
        negocieEffcParNotaire: boolean;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Cdfomp_CodeMiseOeuvrProjPro
         */
        codeMiseOeuvrProjetPro: number;
        /**
         * Cdfwrl_IndicAchtRvnt
         */
        indiceAchtRvnt: boolean;
        /**
         * Cifocs_CoutObjtSaisCalcEnvl
         */
        coutObjetSaisieCalculEnvl: number;
        /**
         * Ctfgce_CritElgGarFEI
         */
        critereElgGarFEI: string;
        /**
         * Ctfici_CanalDeDistribution
         */
        canalDeDistribution: string;
        /**
         * Ctfoan_TypeAcqs
         */
        typeAcqs: number;
        /**
         * Ctfonu_NbUnteContPrgmImmb
         */
        nombreUnteContratProgrammeImmobilier: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Lbfoof_DescObjt
         */
        descriptionObjet: string;
        /**
         * CodePaysLocs
         */
        codePaysLocs: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * Mofcpz_CoutRelOper
         */
        coutRelOper: number;
        /**
         * Mtfcra_MtRachCren
         */
        montantRachCren: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Mtfofd_MtFrsDivr
         */
        montantFrsDivr: number;
        /**
         * Mtfofn_CoutFrsNotr
         */
        coutFrsNotaire: number;
        /**
         * Mtfoho_CoutTotlObjtHt
         */
        coutTotalObjetHt: number;
        /**
         * Mtfott_CoutTotlObjtTtc
         */
        coutTotalObjetTTC: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * bFinancementTCC
         */
        bFinancementTCC: boolean;
        /**
         * DescriptionProjet
         */
        descriptionProjet: string;
    }
    interface IComplementEPSMaj extends IElementMaj {
        /**
         * Cnfcnb_NatrGarnEps
         */
        natureGarantieEPS: string;
        /**
         * Idfapa_RefrExtnDossParn
         */
        referenceExterneDossierParent: string;
        /**
         * Ddfaen_DateDebuEngg
         * Type date au format yyyy-MM-dd
         */
        dateDebutEngagement: string;
        /**
         * Dffaen_DateFinEngg
         * Type date au format yyyy-MM-dd
         */
        dateFinEngagement: string;
        /**
         * Mgfggo_MtEnggGlblOrig
         */
        montantEngagementGlblOrigine: number;
        /**
         * Idfagl_IdntEnggGlbl
         */
        idEngagementGlbl: string;
        /**
         * Cifcrg_CodeIndRetrocessionEPS
         */
        codeIndicateurRetrocessionEPS: number;
        /**
         * Cifcrh_CodeIndicRadiationAutoEPS
         */
        codeIndiceRadiationAutomatiqueEPS: number;
        /**
         * Cifcri_CodeIndicEPSAmortissable
         */
        codeIndiceEPSAmortissable: number;
        /**
         * Cifeng_CodeEngagementGlobal
         */
        codeEngagementGlobal: number;
        /**
         * Cnfcnh_CodeTypeObjetEPS
         */
        codeTypeObjetEPS: string;
        /**
         * Cofcca_CodeCanalDistributionEPS
         */
        codeCanalDistributionEPS: string;
        /**
         * Cofcsi_CodeSignatureElectroniqueEPS
         */
        codeSignatureElectroniqueEPS: string;
        /**
         * Dtfcdd_DateDecisionEPS
         * Type date au format yyyy-MM-dd
         */
        dateDecisionEPS: string;
        /**
         * Idfaei_IdEntiteInstructeur
         */
        idEntiteInstructeur: string;
        /**
         * Idfagd_CodeAgentDecideur
         */
        codeAgentDecideur: string;
        /**
         * Idfcma_IdModeleActeEPS
         */
        idModeleActeEPS: string;
        /**
         * Idfcs1_IdEDSSignataire
         */
        idEDSSignataire: string;
        /**
         * Idfcs2_IdEDSSignataire
         */
        idEDSSignataire1: string;
        /**
         * Mtfcad_MontantAssietteCommission
         */
        montantAssietteCommission: number;
        /**
         * Nxfcse_NumSignatureElectroniqueEPS
         */
        numeroSignatureElectroniqueEPS: string;
        /**
         * Idfcfa_IdFamilleEPS
         */
        idFamilleEPS: string;
        /**
         * Dtfcru_DateRadiationEPS
         * Type date au format yyyy-MM-dd
         */
        dateRadiationEPS: string;
        /**
         * Idfaic_IdPreuveICG
         */
        idPreuveICG: string;
        /**
         * Idfapc_IdClientWeb
         */
        idClientWeb: string;
        /**
         * Lbfauc_LibelleUtilisateurWeb
         */
        libelleUtilisateurWeb: string;
        /**
         * Lbfas1_LibelleCiviliteSignataire1
         */
        libelleCiviliteSignataire1: string;
        /**
         * Lbfas3_LibelleCiviliteSignataire2
         */
        libelleCiviliteSignataire2: string;
        /**
         * Lbfas4_LibelleFonctionSignataire2
         */
        libelleFonctionSignataire2: string;
        /**
         * Lbfas2_LibelleFonctionSignataire1
         */
        libelleFonctionSignataire1: string;
        /**
         * Cdfcew_CodeEtatDossierEPSWeb
         */
        codeEtatDossierEPSWeb: string;
    }
    interface IControleManuelMaj extends IPieceMaj {
        /**
         * Llfccm_CommtCtrl
         */
        commentaireControle: string;
    }
    interface IPieceAgenceMaj extends IPieceMaj {
    }
    interface IPieceClientMaj extends IPieceMaj {
    }
    interface IPieceMaj extends IElementMaj {
        /**
         * Cdfaju_StttPiecCtrl
         */
        stttPieceControle: number;
    }
    interface ITresorerieFinanceeMaj extends IBienDetailleMaj {
        /**
         * Idfove_IdntVndr
         */
        idVendeur: string;
    }
    interface IBienEquipementProMaj extends IBienDetailleMaj {
    }
    interface IBienDetailleMaj extends IElementMaj {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
        /**
         * Mtfoac_CoutAcqsComlInds
         */
        coutAcqsCommercialisationInds: number;
        /**
         * Mtfoai_CoutAcqsHabt
         */
        coutAcqsHabitation: number;
        /**
         * Mtfoco_CoutConst
         */
        coutConstruction: number;
        /**
         * Mtfotr_CoutTrvxAmen
         */
        coutTravauxAmen: number;
        /**
         * Mtfopp_CoutPasPort
         */
        coutPasPort: number;
        /**
         * Mtfofc_CoutFondComc
         */
        coutFondComc: number;
        /**
         * Mtfomo_CoutEqpmMte
         */
        coutEqpmMte: number;
        /**
         * Mtfovp_CoutVehcPrfs
         */
        coutVehcPrfs: number;
        /**
         * Mtfops_CoutPartSocl
         */
        coutPartSociale: number;
        /**
         * Mtfofg_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * Mtfofn_MtFrsNotr
         */
        montantFrsNotaire: number;
        /**
         * Mtfost_CoutStck
         */
        coutStck: number;
        /**
         * Mtfosc_CoutStckHorsInstr
         */
        coutStckHorsInstruction: number;
        /**
         * Mtfobf_CoutBfr
         */
        coutBfr: number;
        /**
         * Mtfobc_CoutBfrHorsInstr
         */
        coutBfrHorsInstruction: number;
        /**
         * Mtfodv_CoutAutrFrsPrfs
         */
        coutAutreFrsPrfs: number;
        /**
         * Mtfodc_CoutAutrFrsPrfsHorsInstr
         */
        coutAutreFrsPrfsHorsInstruction: number;
        /**
         * Mcfotv_MtTvaFinn
         */
        montantTVAFinancier: number;
        /**
         * Mtfora_MtRachCren
         */
        montantRachCren: number;
        /**
         * Mtfods_CoutPartSoce
         */
        coutPartSoce: number;
    }
    interface IAutoMotoMaj extends IBienConsoFinanceMaj {
        /**
         * Ctfmov_TypeMotr
         */
        typeMotr: number;
        /**
         * Lbfmov_ModeVehc
         */
        modeVehc: string;
        /**
         * Lbfqov_MarqVehc
         */
        marqVehc: string;
        /**
         * Ctfmvh_TypeVehc
         */
        typeVehc: number;
        /**
         * Ctfmgv_GnreVehc
         */
        gnreVehc: number;
        /**
         * Cdfmpv_PuisFisc
         */
        puisFiscal: number;
        /**
         * Ddfmpc_DatePrmeMiseCircl
         * Type date au format yyyy-MM-dd
         */
        datePrmeMiseCircl: string;
    }
    interface IBienConsoFinanceMaj extends IElementMaj {
        /**
         * Idfove_IdntVndr
         */
        idVendeur: string;
        /**
         * Mgfovh_MtInscHypt
         */
        montantInscHypotheque: number;
    }
    interface IEvenementMaj extends IElementMaj {
        /**
         * Lbfamd_MessEnrgSurEvenDoss
         */
        messEnregistrementSurEvenDossier: string;
        /**
         * Dtfaee_DateEfftEven
         * Type date au format yyyy-MM-dd
         */
        dateEffetEven: string;
        /**
         * Idfase_IdntEnttSaisEven
         */
        idEntiteSaisieEven: string;
        /**
         * Lbfase_LiblEnttSaisEven
         */
        libelleEntiteSaisieEven: string;
        /**
         * Cefhgc_CodeIndicGestCentEven
         */
        codeIndiceGestionCentralEven: number;
        /**
         * Cdfabo_ElemStrcGestBackCent
         */
        elementStructureGestionBackCentral: string;
        /**
         * Idfce3_IdntCaisAsscBackCent
         */
        idCaisseAssuranceBackCentral: number;
    }
    interface IBlocNotesMaj extends IElementMaj {
        /**
         * ContBlc
         */
        contratBlocNote: string;
    }
    interface ICreditPalierProgressionMaj extends IElementMaj {
        /**
         * Txfcam_ValrTxPrgrAmrt
         */
        valeurTauxProgressifAmortissement: number;
        /**
         * Cdfdcg_CodeIndxTxPrgrAmrt
         */
        codeIndexTauxProgressifAmortissement: number;
        /**
         * Npfca1_NbPerdDureePalrPrgr
         */
        nombrePeriodeDureePalierProgressif: number;
    }
    interface IComplementPhasePretCombineMaj extends IElementMaj {
        /**
         * Mafaqa_MtAmrt
         */
        montantAmortissement: number;
        /**
         * Mkfaif_MtInfine
         */
        montantInfine: number;
        /**
         * Ctfark_ModeSaisReprCapt
         */
        modeSaisieReprCapital: number;
        /**
         * Tafaqa_QuotAmrt
         */
        quotientAmortissement: number;
    }
    interface ICreditPhaseAmortissementMaj extends ICreditPhaseMaj {
        /**
         * Txfcqa_QuotAmrt
         */
        quotientAmortissement: number;
        /**
         * Txfaom_TxConstPhasCred
         */
        tauxConstructionPhaseCredit: number;
        /**
         * Mefhcd_MtEchmOptm
         */
        montantEchmOptimisation: number;
    }
    interface ICreditPhaseDiffereAmortissementMaj extends ICreditPhaseMaj {
    }
    interface ICreditPhaseDiffereTotalMaj extends ICreditPhaseMaj {
    }
    interface ICreditPhaseMobilisationMaj extends ICreditPhaseMaj {
    }
    interface ICreditPhasePrefinancementMaj extends ICreditPhaseMaj {
        /**
         * Cdfppf_CodeRedcDureePref
         */
        codeReductionDureePref: number;
        /**
         * RedcDureePref
         */
        reductionDureePref: boolean;
    }
    interface ICreditPhaseMaj extends IElementMaj {
        /**
         * Capitalisation
         */
        capitalisation: boolean;
        /**
         * Ctfcki_ModeCaptRecvInte
         */
        modeCapitalRecouvrementInterieur: number;
        /**
         * Cdfcki_CodeCaptRecvInte
         */
        codeCapitalRecouvrementInterieur: number;
        /**
         * Ptfcin_CodePerdAsscCalcInte
         */
        codePeriodeAssuranceCalculInterieur: number;
        /**
         * Ptfcam_CodePerdCalcMer
         */
        codePeriodeCalculMER: number;
        /**
         * Npfcph_NbPerdPhas
         */
        nombrePeriodePhase: number;
        /**
         * Pefcph_CodePerdDurePhas
         */
        codePeriodeDurePhase: number;
        /**
         * ValrTxPhas
         */
        valeurTauxPhase: number;
    }
    interface ICreditParamRevisionParPeriodeMaj extends ICreditParamRevisionMaj {
    }
    interface ICreditParamRevisionParPhaseMaj extends ICreditParamRevisionMaj {
    }
    interface ICreditParamRevisionMaj extends IElementMaj {
        /**
         * Nofrji_NumeJeuIndcRevsAsscCred
         */
        numeroJeuxIndiceRevisionAssuranceCredit: number;
        /**
         * Ctfrub_ModeExprButrTxBais
         */
        modeExpressionButoireTauxBaisse: number;
        /**
         * Ctfruh_ModeExprButrTxHaus
         */
        modeExpressionButoireTauxHausse: number;
        /**
         * Tvfru1_ValrButrTxBais
         */
        valeurButoireTauxBaisse: number;
        /**
         * Tvfru2_ValrButrTxHaus
         */
        valeurButoireTauxHausse: number;
    }
    interface ICreditPalierTauxMaj extends IElementMaj {
        /**
         * Txfcpg_TxPrgrEcheSurPalr
         */
        tauxProgressifEcheanceSurPalier: number;
        /**
         * Npfcal_NbPerdDureePalr
         */
        nombrePeriodeDureePalier: number;
    }
    interface ISuiviPlanifieMaj extends IElementMaj {
        /**
         * Ddfarv_DatePremSuiv
         * Type date au format yyyy-MM-dd
         */
        datePremierSuivant: string;
        /**
         * Dtfarv_DateSuivPlnf
         * Type date au format yyyy-MM-dd
         */
        dateSuivantPlafond: string;
        /**
         * Lbfarw_LiblLibrAsscSuiv
         */
        libelleLibrAssuranceSuivant: string;
        /**
         * Idfccl_IdntClse
         */
        idClasse: string;
        /**
         * Npfcrw_NbPerdSuivPlnf
         */
        nombrePeriodeSuivantPlafond: number;
        /**
         * Ptfcrv_CodePerdSuivPlnf
         */
        codePeriodeSuivantPlafond: number;
    }
    interface ICreditModaliteMaj extends IElementMaj {
        /**
         * Idfcmi_IdntModlCalcImpe
         */
        idModeleCalculImpe: string;
        /**
         * Txfdri_TxIndmRembAntc
         */
        tauxIndemniteRemboursementAnticipe: number;
        /**
         * Nofcmc_NumeModlRembAntc
         */
        numeroModeleRemboursementAnticipe: number;
        /**
         * Txfcsr_SurcTxParRappRembAntc
         */
        surcTauxParRappRemboursementAnticipe: number;
        /**
         * Txffmi_TxInteRetdImpe
         */
        tauxInterieurRetardImpe: number;
        /**
         * Mtffmi_MtIndmImpe
         */
        montantIndemniteImpe: number;
        /**
         * Cdfccr_CodeTrtInteIntrSurImpe
         */
        codeTraitementInterieurIntrSurImpe: number;
    }
    interface ICompteCourantMaj extends IElementMaj {
        /**
         * Mtfasc_MtHyptCapt
         */
        montantHypothequeCapital: number;
        /**
         * Cifcmh_CodeIndicBlcgSaisMtHyptCapt
         */
        codeIndiceBlcgSaisieMontantHypothequeCapital: number;
    }
    interface IEmprunteurMaj extends IElementMaj {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * Lbfaem_DenmEmpr
         */
        denmEmprunt: string;
        /**
         * Lnfpem_LiblLongEmpr
         */
        libelleLongEmprunt: string;
        /**
         * Lbfain_IntlcEmpr
         */
        intlcEmprunt: string;
        /**
         * Idfaep_IdntEnttTitlClnt
         */
        idEntiteTitulaireClient: string;
        /**
         * Idfaeg_IdntElemStrcGest
         */
        idElementStructureGestion: string;
        /**
         * Cdfcke_CodeCateEmpr
         */
        codeCateEmprunt: string;
        /**
         * Ctfmfc_CodeTypeFctCpteDepoCeRecent
         */
        codeTypeFctCpteDepoCeRecent: number;
        /**
         * Ctfpmp_CodeTypeMarcPers
         */
        codeTypeMarchePersonne: number;
        /**
         * Ctfcae_CateAgntEcnmBafi
         */
        cateAgentEcnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_TypeAdmnBafi
         */
        typeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Cdfpsr_CodeSittFamlRegl
         */
        codeSituationFamilleRegle: number;
        /**
         * Nbfpnp_NbPersCmpstMeng
         */
        nombrePersonneCmpstMeng: number;
        /**
         * Cdfpma_NbActfMeng
         */
        nombreActfMeng: number;
        /**
         * Dtfpen_DateEncrEparLogm
         * Type date au format yyyy-MM-dd
         */
        dateEncoursEpargneLogement: string;
        /**
         * Mtftpl_EncrEncrIsssPretPel
         */
        encoursEncoursIsssPretPEL: number;
        /**
         * Mtftli_MtEncrIsssPretLel
         */
        montantEncoursIsssPretLEL: number;
        /**
         * Mtftlh_MtEncrLivrAutrEtbl
         */
        montantEncoursLivrAutreEtbl: number;
        /**
         * Mtftph_MtEncrPlnsAutrEtbl
         */
        montantEncoursPlnsAutreEtbl: number;
        /**
         * Mtfwrt_TotlRevnAnnlNets
         */
        totalRevnAnnulationNets: number;
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Cdfwsl_StttOccpLogmActl
         */
        stttOccpLogementActuariel: number;
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpnm_NomRaisSoclEmpr
         */
        nomRaisonSocialeEmprunt: string;
        /**
         * Lbfpa1_Intt
         */
        intituleLigne1: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_CompIntt
         */
        compIntituleLigne2: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cdfpse_CodeSectRatt
         */
        codeSecteurRattachement: string;
        /**
         * Cdfpjm_CodeJeunMeng
         */
        codeJeunMeng: number;
        /**
         * Qmfcvi_EsperVie
         */
        esperVie: number;
        /**
         * Qmfcvd_EsperVieDec
         */
        esperVieDecision: number;
        /**
         * Qmfcvs_EsperVieStrs
         */
        esperVieStress: number;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * Cdfadv_CodeDeviseEmprunteur
         */
        codeDeviseEmprunteur: string;
    }
    interface ICessionDaillyLoyerImmeubleMaj extends IBienPorteEnGarantieMaj {
    }
    interface IHypothequeAerienneMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_NumeSer
         */
        numeroSer: string;
        /**
         * Lbfolt_NumeImmt
         */
        numeroImmt: string;
    }
    interface IBonDeCaisseCapitalisationMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_NumeSiren
         */
        numeroSiren: string;
        /**
         * Lbfoo2_ValrBonOrig
         */
        valeurBonOrigine: number;
        /**
         * Lbfoo3_NumeContTitr
         */
        numeroContratTitre: string;
        /**
         * Lbfoo4_NatrBon
         */
        natureBon: string;
        /**
         * Lbfoo5_Dateeche
         * Type date au format yyyy-MM-dd
         */
        dateeche: string;
        /**
         * Lbfoo6_TitrNomPrenDeps
         */
        titreNomPrenDeps: string;
    }
    interface IDelegationLoyerMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_MtAnnuLoye
         */
        montantAnnuLoye: number;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_DateExtnBail
         * Type date au format yyyy-MM-dd
         */
        dateExterneBail: string;
        /**
         * Lbfoo2_NomGern
         */
        nomGern: string;
    }
    interface ICessionDaillyAutreMaj extends IBienPorteEnGarantieMaj {
    }
    interface IContratAssuranceMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_DateNaisAssr
         * Type date au format yyyy-MM-dd
         */
        dateNaisAssurance: string;
        /**
         * Lbfolt_NumeContAssr
         */
        numeroContratAssurance: string;
        /**
         * Lbfoo1_NomCieAssr
         */
        nomCieAssurance: string;
        /**
         * Lbfoo2_NumeSiren
         */
        numeroSiren: string;
        /**
         * Lbfoo3_CntrGest
         */
        cntrGestion: string;
        /**
         * Lbfoo4_TypeTechJurd
         */
        typeTechniqueJuridique: string;
        /**
         * Lbfoo5_NomContAssr
         */
        nomContratAssurance: string;
        /**
         * Lbfoo6_ApprPers
         */
        apportPersonne: number;
        /**
         * Lbfoo7_MtMinmVerstSign
         */
        montantMinimumVersementSigne: number;
        /**
         * Cdfvat_CodeIndicAttnVerst
         */
        codeIndiceAttnVersement: number;
    }
    interface IAntichreseMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_RefeCads
         */
        referenceCads: string;
        /**
         * Lbfolt_NumeLot
         */
        numeroLot: string;
    }
    interface IGageVehiculeMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_NumeSer
         */
        numeroSer: string;
        /**
         * Lbfolt_NumeImmt
         */
        numeroImmt: string;
    }
    interface IGageCompteInstrumentFinancierMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
    }
    interface INantissementPartSocialeMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_NumeEnrg
         */
        numeroEnregistrement: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_TitrInte
         */
        descriptionOtion: string;
    }
    interface INantissementValeurMaterielleMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_TypeValrMatr
         */
        typeValeurMatrimonial: string;
        /**
         * Lbfolt_NumeSer
         */
        numeroRefTypeLot: string;
    }
    interface INantissementValeurMobiliereMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
    }
    interface INantissementFondDeCommerceMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_NumeInscRcs
         */
        numeroInscRcs: string;
        /**
         * Lbfolt_LiblLibr
         */
        libelleLibr: string;
        /**
         * Cdfomo_TitrOccpLocLeqlFondEstExpl
         */
        titreOccpLocLeqlFondEstExpl: number;
    }
    interface IHypothequeImmobiliereMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_RefeCads
         */
        referenceCads: string;
        /**
         * Lbfolt_RefeLot
         */
        referenceLot: string;
        /**
         * Ctfmoi_TypeBien
         */
        typeBien: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * Cdfcdo_DestBien
         */
        destinataireBien: number;
        /**
         * Nbfosh_SurfHabt
         */
        surfHabitation: number;
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfcoi_ZoneImplBien
         */
        zoneImplBien: string;
        /**
         * Cdfqem_QualEmpla
         */
        qualEmpla: number;
        /**
         * Lbfoo1_MtDernMutt
         */
        montantDernierMutt: string;
        /**
         * Lbfoo2_DateDernMutt
         */
        dateDernierMutt: string;
        /**
         * Dtfoco_AnneConst
         */
        anneConstruction: number;
        /**
         * Lbfoo3_MtAnnuLoye
         */
        montantAnnuLoye: string;
        /**
         * Lbfoo5_NumeLotCopr
         */
        numeroLotCopr: string;
        /**
         * Lbfoo4_NumeSctn
         */
        numeroSctn: string;
        /**
         * Cifcoc_OccpActlBien
         */
        occpActuarielBien: number;
        /**
         * Cifcph_CodePresHypt
         */
        codePresHypotheque: number;
        /**
         * Idfceb_IdntExpr
         */
        idExpression: string;
        /**
         * Dtfcde_DateDemnExpr
         * Type date au format yyyy-MM-dd
         */
        dateDemandeExpression: string;
        /**
         * Dtfoac_DateAcquisitio
         * Type date au format yyyy-MM-dd
         */
        dateAcquisition: string;
        /**
         * Mtfoac_CoutAcquisition
         */
        coutAcquisition: number;
        /**
         * Nbfosa_SurfaceAnnexes
         */
        surfaceAnnexes: number;
        /**
         * Cdfomo_ModaliteOccupation
         */
        numeroDeVolume: number;
    }
    interface IBienDiversMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_Refe1
         */
        reference1: string;
        /**
         * Lbfolt_Refe2
         */
        reference2: string;
    }
    interface IBienPorteEnGarantieMaj extends IElementMaj {
        /**
         * Lbfoof_LiblObjt
         */
        libelleObjet: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Mtfgo2_MtEstmPrdn
         */
        montantEstmPrdn: number;
        /**
         * Dtfgo2_DateEstmPrdn
         * Type date au format yyyy-MM-dd
         */
        dateEstmPrdn: string;
        /**
         * Cdfgm2_CodeModlEstmPrdn
         */
        codeModeleEstmPrdn: string;
        /**
         * Cmfgt2_CodeMotfReSPrdn
         */
        codeMotfReSPrdn: string;
        /**
         * Dtfiex_DateExprBienCff
         * Type date au format yyyy-MM-dd
         */
        dateExpressionBienCff: string;
        /**
         * Lbfpex_NoteExprBienCff
         */
        noteExpressionBienCff: number;
        /**
         * Cifaan_SouscriptionContratAssurance
         */
        souscriptionContratAssurance: boolean;
    }
    interface ICreditHDMaj extends IElementMaj {
        /**
         * Nufpct_NumrContEpar
         */
        numeroContratEpargne: string;
        /**
         * Mtfggi_MtIntlGarn
         */
        montantInitialGarantie: number;
    }
    interface IGarantieHDMaj extends IElementMaj {
        /**
         * Cdfcng_NatrGarnHorsDoss
         */
        natureGarantieHorsDossier: string;
        /**
         * Idfgg1_IdntOrigGarnHorsDoss
         */
        idOrigineGarantieHorsDossier: string;
        /**
         * Nofghy_RangPrncHypt
         */
        rangPrincipalHypotheque: number;
        /**
         * Nofgsh_RangSecnHypt
         */
        rangSecnHypotheque: number;
        /**
         * Cdfgrh_CodeCessRangHypt
         */
        codeCessRangHypotheque: number;
        /**
         * IdnttblPrt
         */
        idEtabPreteur: string;
        /**
         * VilleConsvHypt
         */
        villeConsvHypotheque: string;
        /**
         * DatePublHypt
         * Type date au format yyyy-MM-dd
         */
        datePublHypotheque: string;
        /**
         * RfVolm
         */
        refVolume: string;
        /**
         * NumVolm
         */
        numeroVolume: number;
        /**
         * DateEfftHypt
         * Type date au format yyyy-MM-dd
         */
        dateEffetHypotheque: string;
        /**
         * DateFinHypt
         * Type date au format yyyy-MM-dd
         */
        dateFinHypotheque: string;
        /**
         * LiblEmpr
         */
        libelleEmprunt: string;
        /**
         * LiblNotr
         */
        libelleNotaire: string;
        /**
         * VilleNotr
         */
        villeNotaire: string;
        /**
         * MtInscHyptOrig
         */
        montantInscHypothequeOrigine: number;
        /**
         * MtHyptDisp
         */
        montantHypothequeDisp: number;
        /**
         * DateDispMt
         * Type date au format yyyy-MM-dd
         */
        dateDispMontant: string;
        /**
         * Cdfgpc_PactCommr
         */
        pactCommr: string;
        /**
         * Cefggi_CodEttGarn
         */
        codeEtatGarantie: number;
        /**
         * Cdfgex_CodeIndicGarnExtn
         */
        codeIndiceGarantieExterne: number;
        /**
         * CodeIndicTrfoGarn
         */
        codeIndiceTrfoGarantie: number;
        /**
         * Npfgdg_DurIntlMois
         */
        dureeInitialMois: number;
        /**
         * Ctfggm_CodeTypeGarnMyss
         */
        codeTypeGarantieMyss: string;
    }
    interface ICreditBonificationInfoMaj extends IElementMaj {
        /**
         * sCdfddi_CodeDetail
         */
        codeDetail: string;
    }
    interface ICreditBonificationMaj extends IElementMaj {
        /**
         * Idfdce_IdCreditExterne
         */
        idCreditExterne: string;
    }
    interface IGarantieReelleMaj extends IGarantieMaj {
        /**
         * Nofgsh_NumeRangSecnHypt
         */
        numeroRangSecnHypotheque: number;
        /**
         * Npfgdg_DureHyptMois
         */
        dureHypothequeMois: number;
        /**
         * Cdfgpc_PactCommr
         */
        pactCommr: number;
        /**
         * Nofghy_RangHypt
         */
        rangHypotheque: number;
        /**
         * Cdfgrh_CodeCessRangHypt
         */
        codeCessRangHypotheque: number;
        /**
         * Mtfghy_MtCouvParHyptRangInfe
         */
        montantCouvertureParHypothequeRangInfe: number;
        /**
         * Mtfghy_MtFrais
         */
        montantFrais: number;
        /**
         * Llfgvh_VilleConservationHypotheque
         */
        villeConservationHyp: string;
        /**
         * Llfgvo_LibelleReferenceVolume
         */
        lblRefVolume: string;
        /**
         * Dtfgpu_DateDePublication
         * Type date au format yyyy-MM-dd
         */
        datePublication: string;
        /**
         * Nofgvo_NumeroDeVolume
         */
        numeroDeVolume: number;
    }
    interface IGarantiePersonnelleMaj extends IGarantieMaj {
        /**
         * Cdfgtg_CodeNatrCaut
         */
        codeNatureCaution: number;
    }
    interface IGarantieMaj extends IAccessoireMaj {
        /**
         * Lbfgga_Commt
         */
        commentaire: string;
        /**
         * Cdfaag_CodeFormActeAuth
         */
        codeFormeActeAuthentique: number;
        /**
         * IdntPers
         */
        idPersonne: string;
    }
    interface IAssuranceMaj extends IAccessoireMaj {
        /**
         * Cdasdg_CodeDeleAssr
         */
        codeDeleAssurance: number;
        /**
         * Lbfabe_BenfAssrAvntVerst
         */
        beneficiaireAssuranceAvenantVersement: string;
        /**
         * Cdfaex_CodeCouvExts
         */
        codeCouvertureExts: number;
        /**
         * Ctfarq_TypeRisq
         */
        typeRisque: number;
        /**
         * CodeAssrObgt
         */
        codeAssuranceObligatoire: number;
        /**
         * Cdfaat_CodeAssrPart
         */
        codeAssurancePart: number;
        /**
         * Cdfarv_CodeResr
         */
        codeResr: number;
        /**
         * Lbfaex_LiblAssrExtn
         */
        libelleAssuranceExterne: string;
        /**
         * Nosrn_NumeSirenCieAssr
         */
        numeroSirenCieAssurance: string;
        /**
         * Nrfcan_NumeReglCalcDateEfft
         */
        numeroRegleCalculDateEffet: string;
        /**
         * Ctfaaa_CodeAgreAssrExtr
         */
        codeAgreAssuranceExtr: number;
        /**
         * MontantIndemniteJournaliere
         */
        montantIndemniteJournaliere: number;
        /**
         * Ctfact_EstQSSaisi
         */
        estQSSaisi: boolean;
    }
    interface IAccessoireComplementaireMaj extends IAccessoireMaj {
        /**
         * Cnfcoi_CodeNatrOrigAccs
         */
        codeNatureOrigineAccessoire: number;
    }
    interface IAccessoireLieProduitMaj extends IAccessoireMaj {
    }
    interface IServiceSurObjetMaj extends IAccessoireMaj {
        /**
         * Nrfcan_NumeReglCalcDateEfftServ
         */
        numeroRegleCalculDateEffetService: string;
    }
    interface IAccessoireMaj extends IElementMaj {
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Txfipf_PartFinnAccs
         */
        partFinancierAccessoire: number;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Ddfaaa_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffaaa_DateFinEfft
         * Type date au format yyyy-MM-dd
         */
        dateFinEffet: string;
        /**
         * Cdfpim_CodeBeneficiaire
         */
        codeBeneficiaire: string;
    }
    interface ITrancheMontantMaj extends ICotisationMaj {
        /**
         * Txfcaa_TxTrchMt
         */
        tauxTrancheMontant: number;
    }
    interface ICotisationTrancheAgeMaj extends ICotisationMaj {
    }
    interface ICotisationPhaseMaj extends ICotisationMaj {
    }
    interface ICotisationPeriodeMaj extends ICotisationMaj {
        /**
         * Npfcel_NbPerdetlm
         */
        nombrePerdetlm: number;
        /**
         * Pefcde_PerdEtlm
         */
        periodeEtlm: number;
    }
    interface ICotisationDerogationMaj extends ICotisationMaj {
    }
    interface ICotisationMaj extends IElementMaj {
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: number;
        /**
         * Cifccb_CodeIndicBlcgSaisMont
         */
        codeIndiceBlcgSaisieMontant: number;
        /**
         * Pefcac_CodePerdCalc
         */
        codePeriodeCalcul: number;
        /**
         * Dtfhac_DateApplCots
         * Type date au format yyyy-MM-dd
         */
        dateApplicationCotisation: string;
        /**
         * Ddfhac_DateDebtAppliCots
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplicationCotisation: string;
        /**
         * Dffhac_DateFinAppliCots
         * Type date au format yyyy-MM-dd
         */
        dateFinApplicationCotisation: string;
        /**
         * Mtfhac_MtAsst
         */
        montantAssiette: number;
        /**
         * Ctfcel_CodeTypeAsstCalculElt
         */
        codeTypeAssietteCalculElt: string;
        /**
         * Cdfc1a_CodeRegleEvtPremierAppel
         */
        codeRegleEvenementPremierAppel: string;
        /**
         * Ctftva_CodeTypeTvaAcc
         */
        codeTypeTVAAccessoire: string;
        /**
         * Npfdaa_NbJoursAnneeNumerateur
         */
        nombreJoursAnneeNumerateur: number;
        /**
         * Npfdad_NbJoursAnneeDenominateur
         */
        nombreJoursAnneeDenominateur: number;
        /**
         * Npfce1_NbPerdAppliCots
         */
        nombrePeriodeApplicationCotisation: number;
        /**
         * Pefcde_PerdAppliCots
         */
        periodeApplicationCotisation: number;
        /**
         * Mtfgfr_MtFrsGarn
         */
        montantFrsGarantie: number;
        /**
         * Txfipf_PartFinn
         */
        partFinancier: number;
        /**
         * Cdfceh_CodeRecv
         */
        codeRecouvrement: number;
    }
    interface ICouvertureCreditMaj extends IElementMaj {
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
        /**
         * Mefaas_MtEcheCouv
         */
        montantEcheanceCouverture: number;
        /**
         * Dffgaf_DateFinAffecCouv
         * Type date au format yyyy-MM-dd
         */
        dateFinAffectationCouverture: string;
        /**
         * Idfcoc_IdPretOrgCaution
         */
        idPretOrganismeCaution: string;
        /**
         * Mtfiae_CoutAssExt8Ans
         */
        coutAssuranceExterne8Ans: number;
        /**
         * Mcfiae_CoutTotAssExt
         */
        coutTotalAssuranceExterne: number;
    }
    interface IAplMaj extends IElementMaj {
        /**
         * Mtfiba_MtApl
         */
        montantAPL: number;
        /**
         * Ctfape_PerdicApl
         */
        periodiciteAPL: number;
    }
    interface ICompteProfessionnelMaj extends ICompteMaj {
        /**
         * Nbfmjp_NbJourDepsAutrPourCpteProf
         */
        nombreJourDepsAutrePourCompteProf: number;
        /**
         * Cdfmxp_CodeCtx
         */
        codeCtx: number;
    }
    interface ICompteDepotMaj extends ICompteMaj {
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmet_NumeEnttTitl
         */
        numeroEntiteTitulaire: number;
        /**
         * Lbfmet_LiblEnttTitl
         */
        libelleEntiteTitulaire: string;
        /**
         * Cdfmmc_CodeCompoEntiteTitulaire
         */
        codeCompositionEntiteTitulaire: number;
        /**
         * Cdfmcp_CodeEttPrdt
         */
        codeEtatProduit: number;
        /**
         * Mtfmmy_SoldMoyeLongTermCpteDepoCe
         */
        soldMoyenLongTermeCompteDepoCE: number;
        /**
         * Mtfmbs_SoldMiniCpteDepoCe
         */
        soldMinimumCompteDepoCE: number;
        /**
         * Mtfmds_SoldRelCpteDepoCe
         */
        soldRelCompteDepoCE: number;
        /**
         * Ctfmca_CodeTypeCart
         */
        codeTypeCartographie: number;
        /**
         * Dtfmca_DateDelvCart
         * Type date au format yyyy-MM-dd
         */
        dateDelvCartographie: string;
        /**
         * Ctfmtd_CodeTypeDecvCpteDepo
         */
        codeTypeDecvCompteDepo: number;
        /**
         * Mtfmde_MtDecvAutrSurCpteDepo
         */
        montantDecvAutreSurCompteDepo: number;
        /**
         * Mtfmvr_MtTotlVerstCredRelsSurCpteDepo
         */
        montantTotalVersementCreditReleaseSurCompteDepo: number;
        /**
         * Nbfmjd_NbJourDepsAutrDecv
         */
        nombreJourDepsAutreDecv: number;
        /**
         * Mtfmpe_MtPrelExteRelsSurCpteDepo
         */
        montantPrelExteReleaseSurCompteDepo: number;
        /**
         * Cdfmdj_CodeDepsJust
         */
        codeDepsJustificatif: number;
        /**
         * Cdfmdi_CodePresDecvIrreSurCpteDepo
         */
        codePresDecvIrreSurCompteDepo: number;
        /**
         * Cdfmae_CodeExstCartBancHorsCe
         */
        codeExisteCartographieBancaireHorsCE: number;
        /**
         * Cdfmrc_CodeComnRelvCpteHorsCe
         */
        codeComnRelvCompteHorsCE: number;
        /**
         * Cdfmch_CodeExstCheq
         */
        codeExisteCheq: number;
        /**
         * Mtfmyc_SoldMoyeMensCrtCpteDepoCe
         */
        soldMoyenMensCreationCompteDepoCE: number;
        /**
         * Mtfmcm_MvtCredMensSurCpteDepo
         */
        mvtCreditMensSurCompteDepo: number;
        /**
         * Ctfmfc_CodeTypeFctCpteDepoCeHorsCe
         */
        codeTypeFctCompteDepoCEHorsCE: number;
        /**
         * Ddfmhc_DateOuerCpteDepoHorsCe
         * Type date au format yyyy-MM-dd
         */
        dateOuerCompteDepoHorsCE: string;
        /**
         * Lifcee_LibEtabHorsCE
         */
        libelleEtablissementHorsCE: string;
        /**
         * Mcffa1_MtTotAgiosM1HorsCE
         */
        montantTotalAgiosM1HorsCE: number;
        /**
         * Mcffa2_MtTotAgiosM2HorsCE
         */
        montantTotalAgiosM2HorsCE: number;
        /**
         * Mcffa3_MtTotAgiosM3HorsCE
         */
        montantTotalAgiosM3HorsCE: number;
        /**
         * Ciffci_IndCommIntCDDHorsCE
         */
        indicateurCommIntervCDDHorsCE: number;
        /**
         * Ciffim_IndImpayeCDDHorsCE
         */
        indicateurImpayeCDDHorsCE: number;
        /**
         * Ciffrc_IndRejetChqCDDHorsCE
         */
        indicateurRejetChequeCDDHorsCE: number;
        /**
         * Ciffrp_IndRejetPrlvtCDDHorsCE
         */
        indicateurRejetPrelevCDDHorsCE: number;
        /**
         * Cifffi_IndFraisDosBDFCDDHorsCE
         */
        indicateurFraisDossBDFCDDHorsCE: number;
        /**
         * Ciffpp_IndPrlvtPartielCDDHorsCE
         */
        indicateurPrelevPartCDDHorsCE: number;
        /**
         * Nbffd1_NbJoursDebM1CDDHorsCE
         */
        nombreJoursDebiteurM1CDDHorsCE: number;
        /**
         * Nbffd2_NbJoursDebM2CDDHorsCE
         */
        nombreJoursDebiteurM2CDDHorsCE: number;
        /**
         * Nbffd3_NbJoursDebM3CDDHorsCE
         */
        nombreJoursDebiteurM3CDDHorsCE: number;
        /**
         * Mtfcsa_MtSoldeArreteM1CDDHorsCE
         */
        montantSoldeArreteM1CDDHorsCE: number;
        /**
         * Mtfcsb_MtSoldeArreteM2CDDHorsCE
         */
        montantSoldeArreteM2CDDHorsCE: number;
        /**
         * Mtfcsc_MtSoldeArreteM3CDDHorsCE
         */
        montantSoldeArreteM3CDDHorsCE: number;
    }
    interface ICompteMaj extends IElementMaj {
        /**
         * Dtfmou_DateOuvr
         * Type date au format yyyy-MM-dd
         */
        dateOuverture: string;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
    }
    interface IPhaseCreditExistantMaj extends IElementMaj {
        /**
         * Ddfcph_DateDebtPhas
         * Type date au format yyyy-MM-dd
         */
        dateDebutPhase: string;
        /**
         * Dffcph_DateFinPhas
         * Type date au format yyyy-MM-dd
         */
        dateFinPhase: string;
        /**
         * Meface_MtEchePhas
         */
        montantEcheancePhase: number;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Pftmam_PerdAmrt
         */
        periodeAmortissement: number;
    }
    interface ICreditExistantMaj extends IChargeMaj {
        /**
         * Cdfccg_CodeTypeCredCe
         */
        codeTypeCreditCE: string;
        /**
         * Cdfopc_CodePrsCompCred
         */
        codePresenceCompCredit: number;
        /**
         * Cdfimu_InvsUsgLocf
         */
        invsUsageLocf: number;
        /**
         * Ctfmlc_LienPersCred
         */
        lienPersonneCredit: number;
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Ctfmtc_CodeTypeCred
         */
        codeTypeCredit: number;
        /**
         * Mtfaoc_MtOrigCred
         */
        montantOrigineCredit: number;
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
        /**
         * Ddfmam_DateDebtAmrt
         * Type date au format yyyy-MM-dd
         */
        dateDebutAmortissement: string;
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmcp_RefePrdtCe
         */
        referenceProduitCE: string;
        /**
         * Nofmc2_CompRefePrdtCe
         */
        compReferenceProduitCE: string;
        /**
         * Nofmet_NumeEnttTitlCe
         */
        numeroEntiteTitulaireCE: number;
        /**
         * Lbfmet_LiblEnttTitlCe
         */
        libelleEntiteTitulaireCE: string;
        /**
         * Mkfmpc_MtCaptDejaRemb
         */
        montantCapitalDejaRemboursement: number;
        /**
         * Nbfmim_NbImpayes
         */
        nombreImpayes: number;
        /**
         * Nbfmir_NbImpeReglSurLesMoisGlss
         */
        nombreImpeRegleSurLesMoisGlss: number;
        /**
         * Npfmam_DureAmrt
         */
        dureAmortissement: number;
        /**
         * Cifgeh_CodeIndicAInclettHypt
         */
        codeIndiceAInclettHypotheque: boolean;
        /**
         * Mtfggi_MtGarn
         */
        montantGarantie: number;
        /**
         * Cmfmro_MotfRembAntc
         */
        motfRemboursementAnticipe: string;
        /**
         * Cdfmro_RembAvecAntc
         */
        remboursementAvecAnticipe: number;
        /**
         * Lbfmro_LiblMotfRembAntc
         */
        libelleMotfRemboursementAnticipe: string;
    }
    interface IChargeMaj extends IElementMaj {
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Txfmrc_TxPondChrg
         */
        tauxPondereCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Nufpct_NumeContEprg
         */
        numeroContratEpargne: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
    }
    interface IRevenuFiscalMaj extends IElementMaj {
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Ctfprm_TypeRevnMeng
         */
        typeRevnMeng: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
    }
    interface IPoolEPSMaj extends IElementMaj {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfaop_IdntOprtCess
         */
        idOprtCess: string;
        /**
         * Idfccf_IdntCadrFinn
         */
        idCadreFinancier: string;
        /**
         * Cnflpo_CodeNatrPool
         */
        codeNaturePool: number;
        /**
         * Cdfcor_CodeOrigCess
         */
        codeOrigineCess: number;
        /**
         * Ctfesr_TypeSousRolePool
         */
        typeSousRolePool: number;
        /**
         * Nofcca_NumVersionCadre
         */
        numeroVersionCadre: number;
    }
    interface ICourrierEPSMaj extends IElementMaj {
        /**
         * Ctfclv_TypeLettre
         */
        typeLettre: number;
        /**
         * Cdfpci_CodeCivilite
         */
        codeCivilite: string;
        /**
         * Lbfce1_AdresseLigne1
         */
        adresseLigne1: string;
        /**
         * Lbfce2_AdresseLigne2
         */
        adresseLigne2: string;
        /**
         * Lbfce3_AdresseLigne3
         */
        adresseLigne3: string;
        /**
         * Lbfce4_AdresseLigne4
         */
        adresseLigne4: string;
        /**
         * Lbfce5_AdresseLigne5
         */
        adresseLigne5: string;
        /**
         * Lbfce6_AdresseLigne6
         */
        adresseLigne6: string;
    }
    interface ICreditEPSMaj extends IElementMaj {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Txfccc_QuotCredCouvParEps
         */
        quotientCreditCouvertureParEPS: number;
        /**
         * Idfaez_RefeExtnCredCouvEps
         */
        referenceExterneCreditCouvertureEPS: string;
    }
    interface IPersonnePhysiqueMaj extends IPersonneMaj {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfppn_Prnm
         */
        prenom: string;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Lbfpnj_NomJeunFill
         */
        nomJeunFill: string;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNais: string;
        /**
         * Lbfpna_LieuNais
         */
        lieuNais: string;
        /**
         * Cdfpce_CodePersCe
         */
        codePersonneCE: number;
        /**
         * Cdfprm_CodeRegmMatr
         */
        codeRegimeMatrimonial: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpsp_CateSoc
         */
        cateInteret: string;
        /**
         * Dtfpma_DateEfftSittFaml
         * Type date au format yyyy-MM-dd
         */
        dateEffetSituationFamille: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmlo_CodeModeLogm
         */
        codeModeLogement: number;
        /**
         * Dtfmlo_DateEntrLogm
         * Type date au format yyyy-MM-dd
         */
        dateEntrLogement: string;
        /**
         * Cdfmju_CodeCapcJurd
         */
        codeCapcJuridique: number;
        /**
         * Ctfccj_CodeTypeCapJurd
         */
        codeTypeCapJuridique: string;
        /**
         * Cdfmnt_CodeNatn
         */
        codeNational: number;
        /**
         * Cdfmtd_CodeSaisAvisTierDtnr
         */
        codeSaisieAvisTiersDtnr: number;
        /**
         * Cdfmcx_CodeCtx
         */
        codeContentieuxHorsComptCE: number;
        /**
         * Mtfmes_MtEncrSaccefHorsOprt
         */
        montantEncoursSaccefHorsOprt: number;
        /**
         * Cdfmtr_TypeTrspUtls
         */
        typeTrspUtilisation: number;
        /**
         * Cdfmge_CodeGeotAdrsDomc
         */
        codeGeotAdresseDomiciliation: string;
        /**
         * Cdfppb_CodePaysResdEmpr
         */
        codePaysResdEmprunt: string;
        /**
         * Cdfopb_CodePaysLocsEmpr
         */
        codePaysLocalisationEmprunt: string;
        /**
         * Cdfkpa_CodePrflEmpr
         */
        codeProfilEmprunt: number;
        /**
         * Cofcpn_CodePstlLieuNais
         */
        codePstlLieuNais: string;
        /**
         * HebergementGratuit2Ans
         */
        hebergementGratuit2Ans: boolean;
        /**
         * RattachementFoyerFiscalN2
         */
        rattachementFoyerFiscalN2: boolean;
        /**
         * EnfantsGardeAlternee
         */
        enfantsGardeAlternee: boolean;
        /**
         * ActiviteProSeinLogement
         */
        activiteProSeinLogement: boolean;
    }
    interface IPersonneMoraleMaj extends IPersonneMaj {
        /**
         * Nufpin_NumeInsee
         */
        numeroINSEE: string;
        /**
         * Dtfpir_DateInscRcs
         * Type date au format yyyy-MM-dd
         */
        dateInscRcs: string;
        /**
         * Dtfpcs_DateCretSoce
         * Type date au format yyyy-MM-dd
         */
        dateCreationSoce: string;
        /**
         * Mcfpch_ChffAffrHtExrcPrec
         */
        chiffreAffrHtExrcPrec: number;
        /**
         * Nbfpsa_NbSalr
         */
        nombreSalr: number;
        /**
         * Cdfpfj_FormJurd
         */
        formeJuridique: string;
        /**
         * Cdfpdp_TypeDrtPersMorl
         */
        typeDroitPersonneMorl: number;
        /**
         * Mkfpca_MtCapt
         */
        montantCapital: number;
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
        /**
         * ListRolePersPhys
         */
        listeRolePersonnePhys: Array<string>;
    }
    interface IPersonneMaj extends IElementMaj {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Cdfprs_CrteResd
         */
        crteResd: number;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_CateTypeAdmnBafi
         */
        cateTypeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Idfpbd_CleBdf
         */
        cleBDF: string;
        /**
         * Dtfper_DateEntrReltAvecCons
         * Type date au format yyyy-MM-dd
         */
        dateEntrRelationAvecConsolide: string;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Cdfpap_CodeAssmPartc
         */
        codeAssmPartc: number;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
        /**
         * Lbfpen_EnsgComm
         */
        ensgCommission: string;
        /**
         * Lbfpir_LieuInscRC
         */
        lieuInscRC: string;
        /**
         * Nufpir_NumeInscRC
         */
        numeroInscRC: string;
        /**
         * RolePersonne
         */
        rolePersonne: number;
        /**
         * Rattachement
         */
        rattachement: boolean;
        /**
         * ForcerRattachement
         */
        forcerRattachement: boolean;
        /**
         * ForcerAjout
         */
        forcerAjout: boolean;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
    }
    interface IPayeurMaj extends IElementMaj {
        /**
         * Mtfdfx_MtPaieCred
         */
        montantPaiementCredit: number;
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
        /**
         * Cdfdrg_ModeReglUtlsParPayr
         */
        modeRegleUtilisationParPayr: string;
        /**
         * Nufddt_NumeCptePayr
         */
        numeroComptePayr: string;
        /**
         * PersonneMaj
         */
        personneMAJ: IPersonneMaj;
        /**
         * Idfdma_RefeUnqMand
         */
        referenceUniqueMand: string;
        /**
         * Dgfdma_DateSignMand
         * Type date au format yyyy-MM-dd
         */
        dateSigneMand: string;
        /**
         * Cdfdrs_ModeReglUtlsParPayrSecours
         */
        modeRegleUtilisationParPayrSecours: string;
        /**
         * NumeroComptePayeurSecours
         */
        numeroComptePayeurSecours: string;
        /**
         * Idfdms_RefeUnqMandSecours
         */
        referenceUniqueMandSecours: string;
        /**
         * Dgfdms_DateSignMandSecours
         * Type date au format yyyy-MM-dd
         */
        dateSigneMandSecours: string;
    }
    interface ICreditInterneMaj extends IElementMaj {
        /**
         * Idfccp_IdntConvPres
         */
        idConventionPres: string;
        /**
         * Cdfdae_CodeIndicEnvAvisEche
         */
        codeIndiceEnvoiAvisEcheance: number;
        /**
         * Cifaio_CodeIndicOptmImps
         */
        codeIndiceOptimisationImps: number;
        /**
         * Idfacs_RefeExtnCred
         */
        referenceExterneCredit: string;
        /**
         * Cdfccr_CodeIndicTrtInteIntr
         */
        codeIndiceTraitementInterieurIntr: number;
        /**
         * Cdfcia_CodeTypeActlInteIntr
         */
        codeTypeActuarielInterieurIntr: number;
        /**
         * Cdfbdv_CodeDevsVerst
         */
        codeDeviseVersement: string;
        /**
         * Cdfbje_CodeIndicExstPiecJustPourDeclechlVerst
         */
        codeIndiceExistePieceJustificatifPourDeclechlVersement: number;
        /**
         * Cdfbju_CodeExistJustDeclVerst
         */
        codeExistJustificatifDeclarationVersement: number;
        /**
         * Cdfbju_CodeTypeRattJustDecl
         */
        codeTypeRattachementJustificatifDeclaration: number;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Dhfacj_QuantEche
         */
        jourDateEcheance: number;
        /**
         * Cdfcie_CodeIndicelgbAuprInstemss
         */
        codeIndicelgbAuprInstemss: number;
        /**
         * Ccfarc_CodeIndicCalcAFaire
         */
        codeIndiceCalculAFaire: number;
        /**
         * Mtfael_MtPrimEparLogm
         */
        montantPrimeEpargneLogement: number;
        /**
         * Txfasr_TxNegcSurcRembAntc
         */
        tauxNegocieSurcRemboursementAnticipe: number;
        /**
         * Txfcpd_TxPondCntExtr
         */
        tauxPondereCntExtr: number;
        /**
         * Lbfpa1_InttCred
         */
        intituleLigneUn: string;
        /**
         * Nufbdt_DomcTres
         */
        domiciliationTres: string;
        /**
         * Nufbve_NumeDomcDispFond
         */
        numeroDomiciliationDispFond: string;
        /**
         * Mtfcve_MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * Cifaam_CodeIndicPresUneBonfUneMajreTx
         */
        codeIndicePresUneBonificationUneMajreTaux: number;
        /**
         * TegModeRestitution
         */
        tegModeRestitution: number;
        /**
         * Cefad0_CodeConfmRedcDurePTZ
         */
        codeConfirmationReductionDurePTZ: number;
        /**
         * Cefam0_CodeConfmRedcMtPTZ
         */
        codeConfirmationReductionMontantPTZ: number;
        /**
         * Mcface_MtCredEuro
         */
        montantCreditEuro: number;
        /**
         * Msfcpv_MtMaxPretPVH
         */
        montantMaximumPretPVH: number;
        /**
         * Cdfada_CodeDevsSaccef
         */
        codeDeviseSaccef: string;
        /**
         * Npfcfi_NbPerdCred
         */
        nombrePeriodeCredit: number;
        /**
         * Pefcfi_CodePerdCred
         */
        codePeriodeCredit: number;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
        /**
         * Mcfafd_CoutTotlFrsDossAsscCred
         */
        coutTotalFrsDossierAssuranceCredit: number;
        /**
         * Txfcmg_MargTxFutr
         */
        margeTauxFutr: number;
        /**
         * Txfacs_ValrTxIntl
         */
        valeurTauxInitial: number;
        /**
         * Txfamc_TxMontage
         */
        tauxMontage: number;
        /**
         * MontantPTZVerrouille
         */
        montantPTZVerrouille: boolean;
        /**
         * DureePTZVerrouillee
         */
        dureePTZVerrouillee: boolean;
        /**
         * EtatForcageFraisDossier
         */
        etatForcageFraisDossier: string;
    }
    interface ITACreditEPSMaj extends IElementMaj {
        /**
         * Nufcrl_NumRelCred
         */
        numeroRelCredit: number;
        /**
         * Dtfhpr_DateEchnMER
         * Type date au format yyyy-MM-dd
         */
        dateEcheanceMER: string;
        /**
         * Mkfh03_MtCaptAmrt
         */
        montantCapitalAmortissement: number;
        /**
         * Mkfd01_MtCaptRestDu
         */
        montantCapitalRestantDu: number;
        /**
         * Nufcet_NumEcheanceTable
         */
        numeroEcheanceTable: number;
    }
    interface IDroitUtiliseMaj extends IElementMaj {
        /**
         * Mtfadu_MtDrtAcqsUtls
         */
        montantDroitAcqsUtilisation: number;
        /**
         * Mtfali_MtDrtLimt
         */
        montantDroitLimite: number;
    }
    interface IDetailCoutObjetMaj extends IElementMaj {
        /**
         * Cnfctr_CodeNatrTrvx
         */
        codeNatureTravaux: string;
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Mtfoct_CoutTrvx
         */
        coutTravaux: number;
    }
    interface IComplementFicheContactMaj extends IElementMaj {
        /**
         * Hdfcpc_HrDebtPlgHor
         */
        hrDebutPlgHor: number;
        /**
         * Hffcpc_HrFinPlgHor
         */
        hrFinPlgHor: number;
        /**
         * Llfccp_Comentair
         */
        comentair: string;
    }
    interface IDocumentOffreIndustrialiseeMaj extends IElementMaj {
        /**
         * FluxDocument
         */
        fluxDocument: string;
    }
    interface IDocumentSignatureElectroniqueMaj extends IElementMaj {
        /**
         * IdentifiantComplet
         */
        identifiantComplet: string;
        /**
         * FluxBinaire
         */
        fluxBinaire: string;
    }
    interface IRessourceMaj extends IElementMaj {
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Mtfpre_MtRess
         */
        montantRessource: number;
        /**
         * Npfpre_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
    }
    interface IFamilleEpargneMaj extends IElementMaj {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Nbfmpr_NbPrdtDetnPourUneFamlPrdtAdr
         */
        nombreProduitDetnPourUneFamilleProduitAdresse: number;
        /**
         * Mtfmve_MtValrEprgAvntOper
         */
        montantValeurEpargneAvenantOper: number;
        /**
         * Lbfcej_LiblCaisEprg
         */
        libelleCaisseEpargne: string;
        /**
         * Dtfmve_DateValrEprg
         * Type date au format yyyy-MM-dd
         */
        dateValeurEpargne: string;
        /**
         * Mtfmep_MtEprgApreOper
         */
        montantEpargneApreOper: number;
    }
    interface IContratEpargneLogementMaj extends IElementMaj {
        /**
         * Cdfppr_CodeTypeEL
         */
        codeTypeEL: string;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
        /**
         * Ctfpli_LienParnAvecCedn
         */
        lienParentAvecCedn: number;
        /**
         * Lbfptc_LiblTitlCont
         */
        libelleTitulaireContrat: string;
        /**
         * Cdfpbc_CodeIndicBenePrimEl
         */
        codeIndiceBenePrimeEpargneLogement: number;
        /**
         * Ddfpct_DateOuvrCont
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureContrat: string;
        /**
         * Dtfprf_DateCltrCont
         * Type date au format yyyy-MM-dd
         */
        dateClotureContrat: string;
        /**
         * Cdfifr_CodeForc
         */
        codeForc: number;
        /**
         * Cdfiel_CodeRaptContEparLogm
         */
        codeRaptContratEpargneLogement: number;
        /**
         * Idfppc_IdntPersApprDrtCont
         */
        idPersonneApportDroitContrat: string;
        /**
         * Cdfpdj_CodeDrtJust
         */
        codeDroitJustificatif: number;
        /**
         * Cdfird_CodeResrDrtAcqs
         */
        codeResrDroitAcqs: number;
        /**
         * RapatrierTranche
         */
        rapatrierTranche: boolean;
        /**
         * DroitEstCede
         */
        droitEstCede: boolean;
        /**
         * Nufpct_IdntContEl
         */
        idContratEpargneLogement: string;
        /**
         * AttributionPrime
         */
        attributionPrime: boolean;
    }
    interface ITrancheELMaj extends IElementMaj {
        /**
         * Txfpep_TxEpar
         */
        tauxEpargne: number;
        /**
         * Mtfaac_MtDrtAcqs
         */
        montantDroitAcqs: number;
        /**
         * Dtfpae_DateArreEpar
         * Type date au format yyyy-MM-dd
         */
        dateArreEpargne: string;
        /**
         * Lbfpet_LibletblOrigDrtPret
         */
        libletblOrigineDroitPret: string;
        /**
         * Cdfdpj_CodeDrtJust
         */
        codeDroitJustificatif: number;
        /**
         * Cdfiel_CodeRaptContEparLogm
         */
        codeRaptContratEpargneLogement: number;
        /**
         * Mtfida_MtDrtAcqsDepsOrigContEparLogm
         */
        montantDroitAcqsDepsOrigineContratEpargneLogement: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfird_CodeResrDrtAcqs
         */
        codeResrDroitAcqs: number;
    }
    interface IOppositionMaj extends IElementMaj {
        /**
         * Cdfmop_CodeOppo
         */
        codeOpposition: string;
        /**
         * Ddfmop_DateDebtOppo
         * Type date au format yyyy-MM-dd
         */
        dateDebutOpposition: string;
        /**
         * Dffmop_DateFinOppo
         * Type date au format yyyy-MM-dd
         */
        dateFinOpposition: string;
    }
    interface IVersementFractionneMaj extends IElementMaj {
        /**
         * Ptfbmv_PerdicVerst
         */
        periodiciteVersement: number;
        /**
         * Mvfbmv_MtPremVerst
         */
        montantPremierVersement: number;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nufbve_NumrDomcMadFond
         */
        numeroDomiciliationMADFond: string;
        /**
         * Mvfbmf_MtVerstFrct
         */
        montantVersementFraction: number;
        /**
         * Nbfbvs_NbVerstSouh
         */
        nombreVersementSouh: number;
        /**
         * Mvfcpm_MtVerstPerdMaxm
         */
        montantVersementPeriodeMaximum: number;
        /**
         * Mvfcim_MtVerstIntlMaxm
         */
        montantVersementInitialMaximum: number;
        /**
         * Txfcpv_QuotPremVerst
         */
        quotientPremierVersement: number;
        /**
         * Txfcvp_QuotVerstPerd
         */
        quotientVersementPeriode: number;
    }
    interface IBienAVendreMaj extends IElementMaj {
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Ctfcor_CodeTypeObjtRegl
         */
        codeTypeObjetRegle: string;
        /**
         * Ctfmve_TypeVent
         */
        typeVent: number;
        /**
         * Mtfmvc_PrixNetVndr
         */
        prixNetVendeur: number;
        /**
         * Mtfmva_MtCrdSurBienVend
         */
        montantCRDSurBienVend: number;
        /**
         * Mtfgrd_MtCrdRachSurBienVend
         */
        montantCRDRachSurBienVend: number;
        /**
         * Mtfaag_MtComsAgnc
         */
        montantComsAgence: number;
        /**
         * Mtfaoc_MtAcqs
         */
        montantAcqs: number;
        /**
         * Dtfaoc_DateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateAcqs: string;
        /**
         * Ctfmma_ModeAcqs
         */
        modeAcqs: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
    }
    interface IComplementDossierMaj extends IElementMaj {
        /**
         * Llfidr_LiblDelRelsProj
         */
        libelleDelReleaseProjet: string;
        /**
         * Ctfipt_CodePrrtTrt
         */
        codePrrtTraitement: string;
        /**
         * Dtfisi_DateSaisSurItnt
         * Type date au format yyyy-MM-dd
         */
        dateSaisieSurInternet: string;
        /**
         * Hefisi_HeurSaisSurItnt
         */
        heureSaisieSurInternet: number;
    }
    interface IReamenagementMaj extends IElementMaj {
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
        /**
         * Ctfmup_UsgPretTres
         */
        usagePretTres: number;
        /**
         * Mtfmvc_AncnEche
         */
        ancnEcheance: number;
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * Mtfmvd_ValrAchtObjtFinn
         */
        valeurAchtObjetFinancier: number;
        /**
         * Npfmrp_DureResdPretRefn
         */
        dureResdPretRefn: number;
        /**
         * Dtfoac_DateAcqsObjtRefn
         * Type date au format yyyy-MM-dd
         */
        dateAcqsObjetRefn: string;
        /**
         * Mtfaoc_CoutAcqsObjtRefn
         */
        coutAcqsObjetRefn: number;
    }
    interface IPretReamenageMaj extends IElementMaj {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfao2_IdntDossOrig
         */
        idDossierOrigine: string;
        /**
         * Cdfcpo_CodePrdtetbl
         */
        codePrdtetbl: string;
        /**
         * Cdfars_CodeApparRes
         */
        codeApparRes: boolean;
        /**
         * Ctfars_TypeApparRes
         */
        typeApparRes: number;
        /**
         * Dtfccl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * Mefacg_MtechePerdPretRefn
         */
        mtechePeriodePretRefn: number;
        /**
         * Peface_Perdeche
         */
        perdeche: number;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Lbfcvs_LiblPrdt
         */
        libelleProduit: string;
        /**
         * Ctfals_TypeRegl
         */
        typeRegle: number;
        /**
         * Ctfmtc_TypeCred
         */
        typeCredit: number;
        /**
         * Lbfaep_NometblPret
         */
        nometblPret: string;
        /**
         * Ctfpag_CodeOrigAppliGestCred
         */
        codeOrigineApplicationGestionCredit: number;
        /**
         * Cdfidr_CodeDev
         */
        codeDev: string;
    }
    interface IInfoRegroupementMaj extends IElementMaj {
        /**
         * Mkfd01_MtCrd
         */
        montantCRD: number;
        /**
         * Cifcao_OrigInfoSurMtCrd
         */
        origineInformationSurMontantCRD: number;
        /**
         * Dtfcer_DateEnvsPourRembAntc
         * Type date au format yyyy-MM-dd
         */
        dateEnvsPourRemboursementAnticipe: string;
        /**
         * Cdfara_CodeExstModlIndmRaSurCred
         */
        codeExisteModeleIndemniteRaSurCredit: number;
        /**
         * Mtfhir_MtEstmRa
         */
        montantEstmRa: number;
        /**
         * Cifca1_OrigInfoSurMtEstmIndmRa
         */
        origineInformationSurMontantEstmIndemniteRa: number;
        /**
         * Cifafr_CodeIndicFinnIndmRa
         */
        codeIndiceFinancierIndemniteRa: number;
        /**
         * Cifamp_CodeModlPrevPourRa
         */
        codeModelePrevPourRa: number;
        /**
         * Cifca2_OrigInfoSurExstPrevCont
         */
        origineInformationSurExistePrevContrat: number;
        /**
         * Npfapr_DelPrevCont
         */
        delPrevContrat: number;
        /**
         * Cifca3_OrigInfoSurDelPrevCont
         */
        origineInformationSurDelPrevContrat: number;
        /**
         * Cifagh_ExstUneGarnHypt
         */
        existeUneGarantieHypotheque: number;
        /**
         * Mtfgmt_MtFrsMainTotlUneGarnHypt
         */
        montantFrsMainTotalUneGarantieHypotheque: number;
        /**
         * Cifac4_OrigInfoSurMtFrsMainTotl
         */
        origineInformationSurMontantFrsMainTotal: number;
        /**
         * Cifafm_CodeFinnFrsMain
         */
        codeFinancierFrsMain: number;
        /**
         * Mtfaid_MtInteDusJusqFinCred
         */
        montantInterieurDusJusqFinCredit: number;
        /**
         * Ctfcaf_CodeAffecTypeObjt
         */
        codeAffectationTypeObjet: number;
        /**
         * Mefepd_MtecheHorsAccs
         */
        mtecheHorsAccessoire: number;
        /**
         * Cifca5_OrigInfoSurMtecheHorsAccs
         */
        origineInformationSurMtecheHorsAccessoire: number;
        /**
         * Trfrtx_TxRefe
         */
        tauxReference: number;
        /**
         * Cifac6_OrigInfoSurTxRefe
         */
        origineInformationSurTauxReference: number;
        /**
         * Dtfari_DateRappDonn
         * Type date au format yyyy-MM-dd
         */
        dateRappDonneur: string;
        /**
         * Cifac7_OrigInfoSurDateFinCred
         */
        origineInformationSurDateFinCredit: number;
        /**
         * Cifac8_OrigInfoSurMtRestDuSuurPretRach
         */
        origineInformationSurMontantRestantDuSuurPretRach: number;
        /**
         * Cifac9_OrigInfoSurTypeLoiScrvCredRach
         */
        origineInformationSurTypeLoiScrivenerCreditRach: number;
    }
    interface IPlanFinancementMaj extends IElementMaj {
        /**
         * Cifaai_IndicAllt
         */
        indiceAllt: number;
        /**
         * Mtfaap_MtApprPers
         */
        montantApportPersonne: number;
        /**
         * Mtfmpl_MtPretEparLogmTher
         */
        montantPretEpargneLogementTher: number;
        /**
         * Dtfcep_DateEditPropCred
         * Type date au format yyyy-MM-dd
         */
        dateEditPropCredit: string;
        /**
         * Npfamo_DurSouh
         */
        dureeSouh: number;
    }
    interface ICreditExterneMaj extends IElementMaj {
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Npface_DureAmrtMois
         */
        dureAmortissementMois: number;
        /**
         * Txface_TxAmrt
         */
        tauxAmortissement: number;
        /**
         * Mkface_MtCapt
         */
        montantCapital: number;
        /**
         * Meface_MtecheAmrt
         */
        mtecheAmortissement: number;
        /**
         * Peface_CodePerdAmrt
         */
        codePeriodeAmortissement: number;
        /**
         * Cdfaia_CodeIndicInteTantPPers
         */
        codeIndiceInterieurTantPPersonne: number;
        /**
         * Lbface_LiblLibrSurConcr
         */
        libelleLibrSurConcr: string;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfwna_CodeIndicNatrPret
         */
        codeIndiceNaturePret: number;
        /**
         * Cnfctx_CodeIndicTxRevs
         */
        codeIndiceTauxRevision: number;
        /**
         * Npfwdd_DureDiffMois
         */
        dureDiffereMois: number;
        /**
         * Ctfwsr_TypeSurt
         */
        typeSurtaxe: number;
        /**
         * Cdfwch_CodeIndicPresAssrPertEmpl
         */
        codeIndicePresAssurancePertEmpl: number;
        /**
         * Ctfwtb_CodeIndicTypeRemb
         */
        codeIndiceTypeRemboursement: number;
        /**
         * Txfatg_TegActu
         */
        tegActu: number;
        /**
         * Mefadi_MtecheDiff
         */
        mtecheDiffere: number;
        /**
         * Pefadi_CodePerdDiff
         */
        codePeriodeDiffere: number;
    }
    interface IPalierContraintMaj extends IElementMaj {
        /**
         * Dfpe_DateFinPerd
         * Type date au format yyyy-MM-dd
         */
        dateFinPeriode: string;
        /**
         * Meface_MtEche
         */
        montantEcheance: number;
        /**
         * Npfpco_DurePalr
         */
        durePalier: number;
    }
    interface IVersementAttenduMaj extends IElementMaj {
        /**
         * Ctftve_TypeVerst
         */
        typeVersement: string;
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
        /**
         * Dtfdeb_DateDebt
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * Dtfvfn_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Ctfapi_PerdVerst
         */
        periodeVersement: number;
    }
    interface IProprietaireMaj extends IElementMaj {
        /**
         * Txffim_QuotPleinProp
         */
        quotientPleinProp: number;
        /**
         * Txfcnp_QuotNueProp
         */
        quotientNueProp: number;
        /**
         * Txfcdu_QuotUsuf
         */
        quotientUsuf: number;
        /**
         * Txfcus_QuotDroiUsag
         */
        quotientDroiUsag: number;
        /**
         * Ctfcdb_CdModDettnBien
         */
        codeModDettnBien: number;
    }
    interface IReferenceCadastraleMaj extends IElementMaj {
        /**
         * Lbfoca_ReferenceCadastre
         */
        referenceCadastre: string;
        /**
         * Lbfcsc_SectionCadastre
         */
        sectionCadastre: string;
        /**
         * Qtfcsc_SurfaceReferenceCadastrale
         */
        surfaceReferenceCadastrale: number;
        /**
         * Llfcob_commentaires
         */
        commentaires: string;
    }
    interface IReferenceLotMaj extends IElementMaj {
        /**
         * Lbfolt_ReferenceTypeDeLot
         */
        referenceTypeDeLot: string;
        /**
         * Llfcnl_NatureDuLot
         */
        natureDuLot: string;
        /**
         * Nbftta_Tantieme
         */
        tantieme: number;
    }
    interface IPatrimoineImmobilierMaj extends IElementMaj {
        /**
         * Ctfcnp_NatrPtrmImmb
         */
        naturePatrimoineImmobilier: number;
        /**
         * Cdfcdo_CodeIndicUsgLogm
         */
        codeIndiceUsageLogement: number;
        /**
         * Mtfmvb_ValrActlPtrm
         */
        valeurActuarielPatrimoine: number;
        /**
         * Dtfdac_DateAcqsPtrm
         * Type date au format yyyy-MM-dd
         */
        dateAcqsPatrimoine: string;
        /**
         * Mkfkrd_CaptRestSurPtrm
         */
        capitalRestantSurPatrimoine: number;
        /**
         * Mefhpa_MensPretSurPtrm
         */
        mensPretSurPatrimoine: number;
        /**
         * Dffacr_DateFinPretSurPtrm
         * Type date au format yyyy-MM-dd
         */
        dateFinPretSurPatrimoine: string;
    }
    interface IClausePersonnaliseeMaj extends IElementMaj {
        /**
         * DestClsePers
         */
        destinataireClausePersonne: number;
        /**
         * LiblClsePers
         */
        libelleClausePersonne: string;
    }
    interface IAvisMaj extends IElementMaj {
        /**
         * Dtfaad_DateSaisAvis
         * Type date au format yyyy-MM-dd
         */
        dateSaisieAvis: string;
        /**
         * Lbfaad_LiblAvis
         */
        libelleAvis: string;
        /**
         * Ctfita_CodeTyplAvis
         */
        codeTypologieAvis: string;
        /**
         * Valide
         */
        valide: boolean;
        /**
         * Motif
         */
        motif: string;
    }
    interface IAvisOrganismeExterneMaj extends IElementMaj {
        /**
         * Idfcex_IdntExtnEnv
         */
        idExterneEnvoi: string;
        /**
         * Dtfal1_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd
         */
        dateAvis: string;
        /**
         * Cifctr_CodeIndicTrtEnv
         */
        codeIndiceTraitementEnvoi: number;
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Cdfar2_CodeMotf
         */
        codeMotf: string;
        /**
         * Llfar1_LiblAvisDecs1
         */
        libelleAvisDecision1: string;
        /**
         * Llfar2_LiblAvisDecs2
         */
        libelleAvisDecision2: string;
        /**
         * Lbfpin_NomAgntInstr
         */
        nomAgentInstruction: string;
        /**
         * Nufpt1_NumeTeleInstr
         */
        numeroTeleInstruction: string;
        /**
         * Lbfpma_LiblAdrsMail
         */
        libelleAdresseMail: string;
        /**
         * Nufpt2_NumeFaxInstr
         */
        numeroFaxInstruction: string;
        /**
         * Cdfar1_TypeLiaiSaccefTp
         */
        typeLiaiSaccefTp: number;
        /**
         * Cdfar3_TypeRepnOrgnExtn
         */
        typeRepnOrgnExterne: number;
    }
    interface IVersementMaj extends IElementMaj {
        /**
         * MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * Txfave_PctVerst
         */
        pourcentageVersement: number;
        /**
         * Nufccl_NumeOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Lbfasa_LiblAvnc
         */
        libelleAvnc: string;
    }
    interface IOrigineApportMaj extends IElementMaj {
        /**
         * Cdfoap_CodeOrigine
         */
        codeOrigine: number;
        /**
         * Mtfoap_MontantApportOrigine
         */
        montantApportOrigine: number;
    }
    interface IRedacteurActeMaj extends IElementMaj {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Lbfpnm_NomRedcActe
         */
        nomReductionActe: string;
        /**
         * Lbfppn_PrenRedcActe
         */
        prenReductionActe: string;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IAplLecture extends IElementLecture {
        /**
         * Mtfiba_MtApl
         */
        montantAPL: number;
        /**
         * TypeApl
         */
        typeAPL: number;
        /**
         * Ctfape_PerdicApl
         */
        periodiciteAPL: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
    }
    interface ILigneTirageLecture extends IElementLecture {
        /**
         * Idfcej_IdntCaisEprg
         */
        idCaisseEpargne: number;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfcct_IdntCredElem
         */
        idCreditElement: string;
        /**
         * Lbvspo_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Npfbfi_DureCred
         */
        dureCredit: number;
        /**
         * Pefcfi_PerdCred
         */
        periodeCredit: number;
        /**
         * Mtfact_MtActlCred
         */
        montantActuarielCredit: number;
        /**
         * Txfamo_TxActuCred
         */
        tauxActuCredit: number;
    }
    interface ILigneInvestissementLecture extends IElementLecture {
        /**
         * Idfaoe_IdntOperAsscLignInvs
         */
        idOperAssuranceLigneInvs: string;
        /**
         * Dtfano_DateNotfAccr
         * Type date au format yyyy-MM-dd
         */
        dateNotfAccr: string;
        /**
         * Dffano_DateFinValdAccr
         * Type date au format yyyy-MM-dd
         */
        dateFinValiditeAccr: string;
        /**
         * Mtfaso_MtEmprTotlSurPlan
         */
        montantEmpruntTotalSurPlan: number;
        /**
         * Mkfadi_MtRestDisp
         */
        montantRestantDisp: number;
        /**
         * Dtam_DateAnnlModf
         * Type date au format yyyy-MM-dd
         */
        dateAnnulationModification: string;
        /**
         * Cdam_CodeMotfAnnlModf
         */
        codeMotfAnnulationModification: string;
        /**
         * ListIdntLignTirg
         */
        listeIdLigneTirg: Array<string>;
    }
    interface IInfoRegroupementLecture extends IElementLecture {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Mkfd01_MtCrd
         */
        montantCRD: number;
        /**
         * Cifcao_OrigInfoSurMtCrd
         */
        origineInformationSurMontantCRD: number;
        /**
         * Dtfcer_DateEnvsPourRembAntc
         * Type date au format yyyy-MM-dd
         */
        dateEnvsPourRemboursementAnticipe: string;
        /**
         * Cdfara_CodeExstModlIndmRaSurCred
         */
        codeExisteModeleIndemniteRaSurCredit: number;
        /**
         * Mtfhir_MtEstmRa
         */
        montantEstmRa: number;
        /**
         * Cifca1_OrigInfoSurMtEstmIndmRa
         */
        origineInformationSurMontantEstmIndemniteRa: number;
        /**
         * Cifafr_CodeIndicFinnIndmRa
         */
        codeIndiceFinancierIndemniteRa: number;
        /**
         * Cifamp_CodeModlPrevPourRa
         */
        codeModelePrevPourRa: number;
        /**
         * Cifca2_OrigInfoSurExstPrevCont
         */
        origineInformationSurExistePrevContrat: number;
        /**
         * Npfapr_DelPrevCont
         */
        delPrevContrat: number;
        /**
         * Cifca3_OrigInfoSurDelPrevCont
         */
        origineInformationSurDelPrevContrat: number;
        /**
         * Cifagh_ExstUneGarnHypt
         */
        existeUneGarantieHypotheque: number;
        /**
         * Mtfgmt_MtFrsMainTotlUneGarnHypt
         */
        montantFrsMainTotalUneGarantieHypotheque: number;
        /**
         * Cifac4_OrigInfoSurMtFrsMainTotl
         */
        origineInformationSurMontantFrsMainTotal: number;
        /**
         * Cifafm_CodeFinnFrsMain
         */
        codeFinancierFrsMain: number;
        /**
         * Mtfaid_MtInteDusJusqFinCred
         */
        montantInterieurDusJusqFinCredit: number;
        /**
         * Ctfcaf_CodeAffecTypeObjt
         */
        codeAffectationTypeObjet: number;
        /**
         * Mefepd_MtecheHorsAccs
         */
        mtecheHorsAccessoire: number;
        /**
         * Cifca5_OrigInfoSurMtecheHorsAccs
         */
        origineInformationSurMtecheHorsAccessoire: number;
        /**
         * Trfrtx_TxRefe
         */
        tauxReference: number;
        /**
         * Cifac6_OrigInfoSurTxRefe
         */
        origineInformationSurTauxReference: number;
        /**
         * Dtfari_DateRappDonn
         * Type date au format yyyy-MM-dd
         */
        dateRappDonneur: string;
        /**
         * Cifac7_OrigInfoSurDateFinCred
         */
        origineInformationSurDateFinCredit: number;
        /**
         * Cifac8_OrigInfoSurMtRestDuSuurPretRach
         */
        origineInformationSurMontantRestantDuSuurPretRach: number;
        /**
         * Cifac9_OrigInfoSurTypeLoiScrvCredRach
         */
        origineInformationSurTypeLoiScrivenerCreditRach: number;
        /**
         * IdntPretReam
         */
        idPretReamenagement: string;
    }
    interface ICompteProfessionnelLecture extends ICompteLecture {
        /**
         * Nofmcp_RefePrdtCe
         */
        referenceProduitCE: string;
        /**
         * Nbfmjp_NbJourDepsAutrPourCpteProf
         */
        nombreJourDepsAutrePourCompteProf: number;
        /**
         * Cdfmxp_CodeCtx
         */
        codeCtx: number;
    }
    interface ICompteDepotLecture extends ICompteLecture {
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmet_NumeEnttTitl
         */
        numeroEntiteTitulaire: number;
        /**
         * Lbfmet_LiblEnttTitl
         */
        libelleEntiteTitulaire: string;
        /**
         * Cdfmmc_CodeCompoEntiteTitulaire
         */
        codeCompositionEntiteTitulaire: number;
        /**
         * Cdfmcp_CodeEttPrdt
         */
        codeEtatProduit: number;
        /**
         * Mtfmmy_SoldMoyeLongTermCpteDepoCe
         */
        soldMoyenLongTermeCompteDepoCE: number;
        /**
         * Mtfmbs_SoldMiniCpteDepoCe
         */
        soldMinimumCompteDepoCE: number;
        /**
         * Mtfmds_SoldRelCpteDepoCe
         */
        soldRelCompteDepoCE: number;
        /**
         * Ctfmca_CodeTypeCart
         */
        codeTypeCartographie: number;
        /**
         * Dtfmca_DateDelvCart
         * Type date au format yyyy-MM-dd
         */
        dateDelvCartographie: string;
        /**
         * Ctfmtd_CodeTypeDecvCpteDepo
         */
        codeTypeDecvCompteDepo: number;
        /**
         * Mtfmde_MtDecvAutrSurCpteDepo
         */
        montantDecvAutreSurCompteDepo: number;
        /**
         * Mtfmvr_MtTotlVerstCredRelsSurCpteDepo
         */
        montantTotalVersementCreditReleaseSurCompteDepo: number;
        /**
         * Nbfmjd_NbJourDepsAutrDecv
         */
        nombreJourDepsAutreDecv: number;
        /**
         * Mtfmpe_MtPrelExteRelsSurCpteDepo
         */
        montantPrelExteReleaseSurCompteDepo: number;
        /**
         * Cdfmdj_CodeDepsJust
         */
        codeDepsJustificatif: number;
        /**
         * Cdfmdi_CodePresDecvIrreSurCpteDepo
         */
        codePresDecvIrreSurCompteDepo: number;
        /**
         * Cdfmae_CodeExstCartBancHorsCe
         */
        codeExisteCartographieBancaireHorsCE: number;
        /**
         * Cdfmrc_CodeComnRelvCpteHorsCe
         */
        codeComnRelvCompteHorsCE: number;
        /**
         * Cdfmch_CodeExstCheq
         */
        codeExisteCheq: number;
        /**
         * Mtfmyc_SoldMoyeMensCrtCpteDepoCe
         */
        soldMoyenMensCreationCompteDepoCE: number;
        /**
         * Mtfmcm_MvtCredMensSurCpteDepo
         */
        mvtCreditMensSurCompteDepo: number;
        /**
         * Ctfmfc_CodeTypeFctCpteDepoCeHorsCe
         */
        codeTypeFctCompteDepoCEHorsCE: number;
        /**
         * Ddfmhc_DateOuerCpteDepoHorsCe
         * Type date au format yyyy-MM-dd
         */
        dateOuerCompteDepoHorsCE: string;
        /**
         * Cdfmbq_Codeetbl
         */
        codeEtablissement: string;
        /**
         * Cdfmgu_CodeGuic
         */
        codeGuic: string;
        /**
         * LibelleFctCpteDepoCeHorsCe
         */
        libelleFctCpteDepoCeHorsCe: string;
        /**
         * Lifcee_LibEtabHorsCE
         */
        libelleEtablissementHorsCE: string;
        /**
         * Mcffa1_MtTotAgiosM1HorsCE
         */
        montantTotalAgiosM1HorsCE: number;
        /**
         * Mcffa2_MtTotAgiosM2HorsCE
         */
        montantTotalAgiosM2HorsCE: number;
        /**
         * Mcffa3_MtTotAgiosM3HorsCE
         */
        montantTotalAgiosM3HorsCE: number;
        /**
         * Ciffci_IndCommIntCDDHorsCE
         */
        indicateurCommIntervCDDHorsCE: number;
        /**
         * Ciffim_IndImpayeCDDHorsCE
         */
        indicateurImpayeCDDHorsCE: number;
        /**
         * Ciffrc_IndRejetChqCDDHorsCE
         */
        indicateurRejetChequeCDDHorsCE: number;
        /**
         * Ciffrp_IndRejetPrlvtCDDHorsCE
         */
        indicateurRejetPrelevCDDHorsCE: number;
        /**
         * Cifffi_IndFraisDosBDFCDDHorsCE
         */
        indicateurFraisDossBDFCDDHorsCE: number;
        /**
         * Ciffpp_IndPrlvtPartielCDDHorsCE
         */
        indicateurPrelevPartCDDHorsCE: number;
        /**
         * Nbffd1_NbJoursDebM1CDDHorsCE
         */
        nombreJoursDebiteurM1CDDHorsCE: number;
        /**
         * Nbffd2_NbJoursDebM2CDDHorsCE
         */
        nombreJoursDebiteurM2CDDHorsCE: number;
        /**
         * Nbffd3_NbJoursDebM3CDDHorsCE
         */
        nombreJoursDebiteurM3CDDHorsCE: number;
        /**
         * Mtfcsa_MtSoldeArreteM1CDDHorsCE
         */
        montantSoldeArreteM1CDDHorsCE: number;
        /**
         * Mtfcsb_MtSoldeArreteM2CDDHorsCE
         */
        montantSoldeArreteM2CDDHorsCE: number;
        /**
         * Mtfcsc_MtSoldeArreteM3CDDHorsCE
         */
        montantSoldeArreteM3CDDHorsCE: number;
    }
    interface ICompteLecture extends IElementLecture {
        /**
         * Nufpcp_NumeCpte
         */
        numeroCompte: string;
        /**
         * Dtfmou_DateOuvr
         * Type date au format yyyy-MM-dd
         */
        dateOuverture: string;
        /**
         * Ctfpdt_ModeCompo
         */
        modeComposition: number;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
        /**
         * Cdfppr_TypeCpte
         */
        typeCompte: string;
        /**
         * Libelle
         */
        libelle: string;
    }
    interface ICreditExistantLecture extends IChargeLecture {
        /**
         * Cdfccg_CodeTypeCredCe
         */
        codeTypeCreditCE: string;
        /**
         * Cdfopc_CodePrsCompCred
         */
        codePresenceCompCredit: number;
        /**
         * Cdfimu_InvsUsgLocf
         */
        invsUsageLocf: number;
        /**
         * Ctfmlc_LienPersCred
         */
        lienPersonneCredit: number;
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Ctfmtc_CodeTypeCred
         */
        codeTypeCredit: number;
        /**
         * Mtfaoc_MtOrigCred
         */
        montantOrigineCredit: number;
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
        /**
         * Ddfmam_DateDebtAmrt
         * Type date au format yyyy-MM-dd
         */
        dateDebutAmortissement: string;
        /**
         * Dtfam0_DateMer0
         * Type date au format yyyy-MM-dd
         */
        dateMER0: string;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Cdfmce_CodePrdtCe
         */
        codeProduitCE: number;
        /**
         * Nofmcp_RefePrdtCe
         */
        referenceProduitCE: string;
        /**
         * Nofmc2_CompRefePrdtCe
         */
        compReferenceProduitCE: string;
        /**
         * Nofmet_NumeEnttTitlCe
         */
        numeroEntiteTitulaireCE: number;
        /**
         * Lbfmet_LiblEnttTitlCe
         */
        libelleEntiteTitulaireCE: string;
        /**
         * Mkfmpc_MtCaptDejaRemb
         */
        montantCapitalDejaRemboursement: number;
        /**
         * Mefmpe_MtPrcheche
         */
        montantPrcheche: number;
        /**
         * Mefmea_MtPrmeecheAmrt
         */
        montantPrmeecheAmortissement: number;
        /**
         * Mefmpc_MtechePrsComp
         */
        mtechePresenceComp: number;
        /**
         * Nbfmim_NbImpayes
         */
        nombreImpayes: number;
        /**
         * Nbfmir_NbImpeReglSurLesMoisGlss
         */
        nombreImpeRegleSurLesMoisGlss: number;
        /**
         * Ptfmam_PerdAmrt
         */
        periodeAmortissement: number;
        /**
         * Npfmam_DureAmrt
         */
        dureAmortissement: number;
        /**
         * Cifgeh_CodeIndicAInclettHypt
         */
        codeIndiceAInclettHypotheque: boolean;
        /**
         * Mtfggi_MtGarn
         */
        montantGarantie: number;
        /**
         * Cmfmro_MotfRembAntc
         */
        motfRemboursementAnticipe: string;
        /**
         * Cdfmro_RembAvecAntc
         */
        remboursementAvecAnticipe: number;
        /**
         * Lbfmro_LiblMotfRembAntc
         */
        libelleMotfRemboursementAnticipe: string;
        /**
         * InvestissementLocatifVisible
         */
        investissementLocatifVisible: boolean;
        /**
         * InvestissementLocatifAccessible
         */
        investissementLocatifAccessible: boolean;
        /**
         * ListIdntPhssCredExst
         */
        listeIdPhssCreditExiste: Array<string>;
        /**
         * LibelleCodeTypeCred
         */
        libelleCodeTypeCred: string;
    }
    interface IChargeLecture extends IElementLecture {
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Txfmrc_TxPondChrg
         */
        tauxPondereCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Nufpct_NumeContEprg
         */
        numeroContratEpargne: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
        /**
         * Lbfpch_LiblCharge
         */
        libelleCharge: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * IdntGrpeIntv
         */
        idGrpeIntervenant: string;
    }
    interface IInterditBancaireLecture extends IElementLecture {
        /**
         * Cdfpbd_CodeRepnBdf
         */
        codeRepnBDF: number;
        /**
         * Cdfpfi_CodeRepnFicp
         */
        codeRepnFicp: number;
        /**
         * Ctfpbd_CodeTypeRepnBdf
         */
        codeTypeRepnBDF: string;
        /**
         * Ctfpfi_CodeTypeRepnFicp
         */
        codeTypeRepnFicp: string;
        /**
         * Dtfpbd_DateApplBdf
         * Type date au format yyyy-MM-dd
         */
        dateApplicationBDF: string;
        /**
         * Dtfpfi_DateApplFicp
         * Type date au format yyyy-MM-dd
         */
        dateApplicationFicp: string;
        /**
         * Lbfpbd_LiblRepnBdf
         */
        libelleRepnBDF: string;
        /**
         * Lbfpfi_LiblRepnFicp
         */
        libelleRepnFicp: string;
        /**
         * Cdfmas_CodeArreSurSalr
         */
        codeArreSurSalr: number;
        /**
         * Dtfpfb_DateApplFbe
         * Type date au format yyyy-MM-dd
         */
        dateApplicationFbe: string;
        /**
         * Cdfpfb_CodeRepnFbe
         */
        codeRepnFbe: number;
        /**
         * Cdfmln_CodePresListnSurCntrTechRegn
         */
        codePresListnSurCntrTechniqueRegn: number;
        /**
         * Lbfmln_LiblListnSurCntrTechRegn
         */
        libelleListnSurCntrTechniqueRegn: string;
        /**
         * Cbfpfb_CodeCottFibenDirg
         */
        codeCotisationFibenDirg: string;
        /**
         * IdntPersPhys
         */
        idPersonnePhys: string;
    }
    interface IActiviteLecture extends IElementLecture {
        /**
         * Cdfmcs_CodeClssRisqCsp
         */
        codeClasseRisqueCSP: number;
        /**
         * Lbfmcs_LibelleClssRisqCsp
         */
        libelleClasseRisqueCSP: string;
        /**
         * Dtfmcs_DateEfftCsp
         * Type date au format yyyy-MM-dd
         */
        dateEffetCSP: string;
        /**
         * Dtfmea_DateEmbc
         * Type date au format yyyy-MM-dd
         */
        dateEmbc: string;
        /**
         * Ctfmce_CodeTypeContEmbc
         */
        codeTypeContratEmbc: number;
        /**
         * Libelle_TypeContratEmbc
         */
        libelle_TypeContratEmbc: string;
        /**
         * Lbfmpl_RaisSoclEmplr
         */
        raisonSocialeEmplr: string;
        /**
         * Cpfmpl_CodePostEmplr
         */
        codePosteEmplr: string;
        /**
         * Lofmpl_CodeApNEmplr
         */
        codeApNEmplr: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmsa_CodePresActvSalr
         */
        codePresActiviteSalr: number;
        /**
         * Cdfmsu_CodePresSuivPers
         */
        codePresSuivantPersonne: number;
        /**
         * Nbfmkm_NbKilmEtrLogmTrvl
         */
        nombreKilmEntreLogementTrvl: number;
        /**
         * Dffmea_DateFinCdd
         * Type date au format yyyy-MM-dd
         */
        dateFinCdd: string;
        /**
         * Ctfmsa_CodeSectActv
         */
        codeSecteurActivite: number;
        /**
         * Libelle_SecteurActv
         */
        libelle_SecteurActivite: string;
        /**
         * IdntPersPhys
         */
        idPersonnePhys: string;
    }
    interface IButLocatifLecture extends IElementLecture {
        /**
         * Cdfopl_IndicPretTrnsLocf
         */
        indicePretTransfertLocf: boolean;
        /**
         * Nufofg_NumeDecsFavrGlbl
         */
        numeroDecisionFavrGlbl: number;
        /**
         * Dtfodf_DateDecsFavrLoct
         * Type date au format yyyy-MM-dd
         */
        dateDecisionFavrLoct: string;
        /**
         * Cdfofg_IndicDecsGlblFavr
         */
        indiceDecisionGlblFavr: boolean;
        /**
         * Dtfocl_DateConvLoct
         * Type date au format yyyy-MM-dd
         */
        dateConventionLoct: string;
        /**
         * Cdfofi_NatrAvtgFisc
         */
        natureAvantageFiscal: string;
        /**
         * Mtfofi_MtAvtgFisc
         */
        montantAvantageFiscal: number;
        /**
         * Mtfogl_MtFrsAnnlGestLogm
         */
        montantFrsAnnulationGestionLogement: number;
        /**
         * Mtfoel_MtFrsAnnlEntnLogm
         */
        montantFrsAnnulationEntnLogement: number;
        /**
         * Mtfofo_MtTaxeFonc
         */
        montantTaxeFonc: number;
        /**
         * Cdfolg_PresServVacnLogm
         */
        presServiceVacnLogement: boolean;
        /**
         * Cdfoli_PresUneAssrLoyeImpe
         */
        presUneAssuranceLoyeImpe: boolean;
        /**
         * Mtfolp_MtAnnuLoyePerc
         */
        montantAnnuLoyePerc: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface ISoulteFinanceeLecture extends IElementLecture {
        /**
         * Mtfoac_MtSoul
         */
        montantSoul: number;
        /**
         * Ctfmpt_PermDetrSiSoulFaitSuiteDivo
         */
        permDetrSiSoulFaitSuiteDivo: boolean;
        /**
         * Txfapo_PctPrprOrig
         */
        pourcentageProprietaireOrigine: number;
        /**
         * Mtfmvc_ValrActvCorrValrBienOrig
         */
        valeurActiviteCorrValeurBienOrigine: number;
        /**
         * Nbfosh_SurfHabtBienSous
         */
        surfHabitationBienSous: number;
        /**
         * Dtfoac_DateAcqsBienSous
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBienSous: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * IdntBienSjac
         */
        idBienSousJacent: string;
    }
    interface ITerrainSousJacentLecture extends IBienSousJacentLecture {
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfoft_TerrEstFinnParCred
         */
        terrEstFinancierParCredit: number;
        /**
         * Dtfoat_DateEntrPtrmDateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateEntrPatrimoineDateAcqs: string;
        /**
         * MtLoyeParMois
         */
        montantLoyeParMois: number;
        /**
         * Ctfmma_ModeAcqsTerr
         */
        modeAcqsTerr: number;
    }
    interface IDetailCoutObjetLecture extends IElementLecture {
        /**
         * Cnfctr_CodeNatrTrvx
         */
        codeNatureTravaux: string;
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Mtfoct_CoutTrvx
         */
        coutTravaux: number;
        /**
         * IdntTrvxFinn
         */
        idTravauxFinancier: string;
    }
    interface ITerrainFinanceLecture extends IElementLecture {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
        /**
         * Dtfaot_DateAcqsTerr
         * Type date au format yyyy-MM-dd
         */
        dateAcqsTerr: string;
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfodt_CodeDonTerr
         */
        codeDonTerr: number;
        /**
         * Cdfoft_CodeFinnTerr
         */
        codeFinancierTerr: number;
        /**
         * Mtfcfn_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IDossierLecture extends IElementLecture {
        /**
         * Idfadi_IdntDoss
         */
        idDossier: string;
        /**
         * VersDoss
         */
        versionDossier: number;
        /**
         * EstDossierPartenaire
         */
        estDossierPartenaire: boolean;
        /**
         * Cdfiei_CodeImprParExprVers
         */
        codeImprParExpressionVersement: number;
        /**
         * Cdfiag_CodeAppliChrgDoss
         */
        codeApplicationChargeDossier: number;
        /**
         * Nbfapo_NbPassOffr
         */
        nombrePassOffre: number;
        /**
         * Dtfmva_DateDernReslAdr
         * Type date au format yyyy-MM-dd
         */
        dateDernierReslAdresse: string;
        /**
         * Dgfano_DateHorzProj
         * Type date au format yyyy-MM-dd
         */
        dateHorizonProjet: string;
        /**
         * Cdfado_CodeVisbInstr
         */
        codeVisbInstruction: number;
        /**
         * DossExstCent
         */
        dossierExisteCentral: boolean;
        /**
         * NbPersAssrParDeft
         */
        nombrePersonneAssuranceParDeft: number;
        /**
         * ModfEffcPendSess
         */
        modificationEffcPendantSess: boolean;
        /**
         * ModeOuvrDoss
         */
        modeOuvertureDossier: number;
        /**
         * DossModf
         */
        dossierModification: boolean;
        /**
         * ExisteMandatSEPA
         */
        existeMandatSEPA: boolean;
        /**
         * PjPrealableToutesRecues
         */
        pjPrealableToutesRecues: boolean;
        /**
         * PjSuspensifToutesRecues
         */
        pjSuspensifToutesRecues: boolean;
        /**
         * TypeMoteurADR
         */
        typeMoteurADR: number;
        /**
         * Cifttv_TechVent
         */
        techniqueVent: number;
        /**
         * Cifoli_CodeLivrnImme
         */
        codeLivrnImme: boolean;
        /**
         * Nofaac_NumeAccrCmps
         */
        numeroAccrCmps: number;
        /**
         * Cnfaeg_EnggRevc
         */
        engagementRevc: number;
        /**
         * Dtfasp_DateSignPret
         * Type date au format yyyy-MM-dd
         */
        dateSignePret: string;
        /**
         * EvenMomnVertPourContConf
         */
        evenMomnVertPourContratConf: string;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * DateTrtRegl
         * Type date au format yyyy-MM-dd
         */
        dateTraitementRegle: string;
        /**
         * Cdfbve_ModReglVerst
         */
        modRegleVersement: string;
        /**
         * Cdfiro_IndicPrrgOffr
         */
        indicePrrgOffre: number;
        /**
         * Idfccp_IdntConvPres
         */
        idConventionPres: string;
        /**
         * Idfipp_IdntPres
         */
        idPres: string;
        /**
         * Lbfpen_EnsgnPres
         */
        ensgnPres: string;
        /**
         * Mtfasi_MtSouhIntlEmpr
         */
        montantSouhInitialEmprunt: number;
        /**
         * Ctfaoc_OrigCommProj
         */
        origineCommissionProjet: number;
        /**
         * Cefapd_CodeEttPlns
         */
        codeEtatPlns: number;
        /**
         * Cdfaar_CodeApplAnlsRisq
         */
        codeApplicationAnlsRisque: boolean;
        /**
         * Idfaac_IdntDossGest
         */
        idDossierGestion: string;
        /**
         * Idfaeg_IdntelemStrcGest
         */
        idElementStructureGestion: string;
        /**
         * Idfast_IdntelemStrcInstr
         */
        idElementStructureInstruction: string;
        /**
         * Idfagd_CodeAgntDecd
         */
        codeAgentDecd: string;
        /**
         * Ctfacf_CodeTyplCadrFisc
         */
        codeTypologieCadreFiscal: string;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cifcsb_CodeLevrSecrBanc
         */
        codeLevrSecrBancaire: number;
        /**
         * Dtfccr_DateCretDoss
         * Type date au format yyyy-MM-dd
         */
        dateCreationDossier: string;
        /**
         * Dmfidm_DateDernMaj
         * Type date au format yyyy-MM-dd
         */
        dateDernierMAJ: string;
        /**
         * Ctfado_EtatDoss
         */
        etatDossier: number;
        /**
         * Cefado_SousEtatDoss
         */
        sousEtatDossier: number;
        /**
         * Dtfadf_DateDemnFinn
         * Type date au format yyyy-MM-dd
         */
        dateDemandeFinancier: string;
        /**
         * Dtfaem_DateemssOffr
         * Type date au format yyyy-MM-dd
         */
        dateemssOffre: string;
        /**
         * Dtfirl_DateCiblProj
         * Type date au format yyyy-MM-dd
         */
        dateCiblProjet: string;
        /**
         * Cdfaod_CodeOrigDemn
         */
        codeOrigineDemande: string;
        /**
         * Dtfard_DateAccrPrtr
         * Type date au format yyyy-MM-dd
         */
        dateAccrPrtr: string;
        /**
         * Cefahb_CodeEttEnggHors
         */
        codeEtatEngagementHors: number;
        /**
         * Mtfahb_MtEnggHorsBiln
         */
        montantEngagementHorsBiln: number;
        /**
         * Dffavl_DateFinValdOffr
         * Type date au format yyyy-MM-dd
         */
        dateFinValiditeOffre: string;
        /**
         * Dtfaro_DateRecpOffrParClnt
         * Type date au format yyyy-MM-dd
         */
        dateRecuperationOffreParClient: string;
        /**
         * Dtfaef_DateEfftOffr
         * Type date au format yyyy-MM-dd
         */
        dateEffetOffre: string;
        /**
         * Cdfdrg_ModeRegl
         */
        modeRegle: string;
        /**
         * Nufpr1_NumeCpteSecoPrel
         */
        numeroCompteSecoPrel: string;
        /**
         * Nufddt_DomcTresCpteSeco
         */
        domiciliationTresCompteSeco: string;
        /**
         * Dtfart_DateLimtRetrEmprLoiConso
         * Type date au format yyyy-MM-dd
         */
        dateLimiteRetardEmpruntLoiConsommation: string;
        /**
         * Dffaof_DateLimtRetrOffrLoiConso
         * Type date au format yyyy-MM-dd
         */
        dateLimiteRetardOffreLoiConsommation: string;
        /**
         * Dffaao_DateMiniAccpOffrLoiImmo
         * Type date au format yyyy-MM-dd
         */
        dateMinimumAccpOffreLoiImmobilier: string;
        /**
         * Dtfasg_DateSignEmpr
         * Type date au format yyyy-MM-dd
         */
        dateSigneEmprunt: string;
        /**
         * Dtfare_DateRefuOffrParEmpr
         * Type date au format yyyy-MM-dd
         */
        dateRefuOffreParEmprunt: string;
        /**
         * Dffavi_DateMinnPourVerstFondLoiConso
         * Type date au format yyyy-MM-dd
         */
        dateMinnPourVersementFondLoiConsommation: string;
        /**
         * Dtfieo_DateEdtnOffr
         * Type date au format yyyy-MM-dd
         */
        dateEditionOffre: string;
        /**
         * Idfaex_IdntExtnDoss
         */
        idExterneDossier: string;
        /**
         * Ctfals_TypeLoiScrv
         */
        typeLoiScrivener: number;
        /**
         * Cdfafc_CodeAuthCont
         */
        codeAuthentiqueContrat: boolean;
        /**
         * Npfars_DelRetrScrv1
         */
        delRetardScrivener1: number;
        /**
         * Cdfive_CodeVersCret
         */
        codeVersementCreation: string;
        /**
         * Cdfwve_CodeVersDernModf
         */
        codeVersementDernierModification: string;
        /**
         * Mtfcon_MtVerstCnvn
         */
        montantVersementCnvn: number;
        /**
         * Txaufi_PctFinn
         */
        pourcentageFinancier: number;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Ctfco2_TorechlVerst
         */
        torechlVersement: string;
        /**
         * Cdfali_CodeEtatEnvDossSaccef
         */
        codeEtatEnvoiDossierSaccef: number;
        /**
         * Dtfali_DateLieEnvSaccef
         * Type date au format yyyy-MM-dd
         */
        dateLieEnvoiSaccef: string;
        /**
         * Idfcpo_IdntEnvSaccef
         */
        idEnvoiSaccef: string;
        /**
         * Idfaoc_IdntOrigDemn
         */
        idOrigineDemande: string;
        /**
         * Lbfaoc_LiblOrigDemn
         */
        libelleOrigineDemande: string;
        /**
         * Dgfapn_DatePrevSignNotr
         * Type date au format yyyy-MM-dd
         */
        datePrevSigneNotaire: string;
        /**
         * Nufadn_RefeExtnDoss
         */
        referenceExterneDossier: string;
        /**
         * Idfas5_ElemStrc5
         */
        elementStructure5: string;
        /**
         * Idfas6_ElemStrc6
         */
        elementStructure6: string;
        /**
         * ModeDecn
         */
        modeDecn: boolean;
        /**
         * Llfic1_CritRechAppli1
         */
        critereRechercheApplication1: string;
        /**
         * Llfic2_CritRechAppli2
         */
        critereRechercheApplication2: string;
        /**
         * Llfic3_CritRechAppli3
         */
        critereRechercheApplication3: string;
        /**
         * Llfic4_CritRechAppli4
         */
        critereRechercheApplication4: string;
        /**
         * Llfic5_CritRechAppli5
         */
        critereRechercheApplication5: string;
        /**
         * Ctfaen_CodeTypeEngg
         */
        codeTypeEngagement: string;
        /**
         * Dtfano_DateSignDossEnv
         * Type date au format yyyy-MM-dd
         */
        dateSigneDossierEnvoi: string;
        /**
         * Dffan1_DateFinValdAccr
         * Type date au format yyyy-MM-dd
         */
        dateFinValiditeAccr: string;
        /**
         * IndicOffrPre
         */
        indiceOffrePre: boolean;
        /**
         * Ctfipi_CodePrcsInstr
         */
        codeProcessusInstruction: string;
        /**
         * Ctfitr_CodeTrtComp
         */
        codeTraitementComp: string;
        /**
         * Cefipc_CodeEttPrsChrgDoss
         */
        codeEtatPresenceChargeDossier: number;
        /**
         * Cefiac_CodeEttActvDoss
         */
        codeEtatActiviteDossier: number;
        /**
         * IndicPrsChrgPiecJustParPiec
         */
        indicePresenceChargePieceJustificatifParPiece: number;
        /**
         * Idfabp_IdntAgntBoActlChrgDoss
         */
        idAgentBoActuarielChargeDossier: string;
        /**
         * Idfaes_IdntAgntPrprDoss
         */
        idAgentProprietaireDossier: string;
        /**
         * Idfaei_IdntAgntInstrDoss
         */
        idAgentInstructionDossier: string;
        /**
         * Idfaec_IdntAgntConnDoss
         */
        idAgentConnaissanceDossier: string;
        /**
         * Idfada_IdntAgntPourDecsConf
         */
        idAgentPourDecisionConf: string;
        /**
         * Idfael_IdntEnttDecs
         */
        idEntiteDecision: string;
        /**
         * Idfabi_IdntEnttPourTrnfBo
         */
        idEntitePourTransfertBo: string;
        /**
         * BlocNotes
         */
        blocNotes: string;
        /**
         * Ctfcse_CodeEtpeSiml
         */
        codeEtapeSimulation: number;
        /**
         * Idfifd_NumeFichPres
         */
        numeroFichPres: string;
        /**
         * Cifapp_CodePrscDossPres
         */
        codePrscDossierPres: number;
        /**
         * Idfdma_ReferenceMandat
         */
        referenceMandat: string;
        /**
         * Dgfdms_DateSignMand
         * Type date au format yyyy-MM-dd
         */
        dateSigneMand: string;
        /**
         * Ctfind_PrecisionTaux
         */
        precisionTaux: number;
        /**
         * Cdficd_CodeDevCredDev
         */
        codeDevCreditDev: string;
        /**
         * Idfics_NumCompteDev
         */
        numeroCompteDev: string;
        /**
         * Ctfimr_ModeReglDev
         */
        modeRegleDev: string;
        /**
         * Ctfimv_ModReglVerstDev
         */
        modRegleVersementDev: string;
        /**
         * IdntComplDoss
         */
        idComplementDossier: string;
        /**
         * Cifiid_IntegrationDossierDeVente
         */
        integrationDossierDeVente: number;
        /**
         * Ctficc_CanalDeCreation
         */
        canalDeCreation: string;
        /**
         * Ctfici_CanalDeDistribution
         */
        canalDeDistribution: string;
        /**
         * Defiag_DateEnvConvAG
         * Type date au format yyyy-MM-dd
         */
        dateEnvoiConventionAG: string;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * Cifpcd_OuvCpteSupEchCred
         */
        ouvertureCompteSupEchCredit: boolean;
        /**
         * CodeTypeEditionAutorisee
         */
        codeTypeEditionAutorisee: string;
        /**
         * EstEcoPtzCopro
         */
        estEcoPtzCopro: boolean;
        /**
         * EstCopro100
         */
        estCopro100: boolean;
        /**
         * AutoriserCalculIndicateurEditionAgence
         */
        autoriserCalculIndicateurEditionAgence: boolean;
        /**
         * Cdfcsg_TypeSignature
         */
        typeSignature: number;
        /**
         * IdntBlcNotsDivr
         */
        idBlocNoteNotsDivr: string;
        /**
         * IdntRedcActe
         */
        idReductionActe: string;
        /**
         * IdntEmpr
         */
        idEmprunt: string;
        /**
         * ListIdntEven
         */
        listeIdEven: Array<string>;
        /**
         * ListIdntAvis
         */
        listeIdAvis: Array<string>;
        /**
         * ListIdntAlrtEntr
         */
        listeIdAlerteEntr: Array<string>;
        /**
         * ListIdntAlrtSort
         */
        listeIdAlerteSort: Array<string>;
        /**
         * ListIdntPrjt
         */
        listeIdProjet: Array<string>;
        /**
         * ListIdntVerst
         */
        listeIdVersement: Array<string>;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntGarants
         */
        listeIdGarants: Array<string>;
        /**
         * ListIdntClssPers
         */
        listeIdClassePersonne: Array<string>;
        /**
         * ListIdntAgents
         */
        listeIdAgents: Array<string>;
        /**
         * IdntPoolEPS
         */
        idPoolEPS: string;
        /**
         * Cmmics_MotifConsultFICP
         */
        motifConsultFICP: number;
        /**
         * Mtfaff_MtFraisDebloAuto
         */
        montantFraisDebloAuto: number;
    }
    interface IAjustementTauxLecture extends IElementLecture {
        /**
         * RemiseMajoration
         */
        remiseMajoration: number;
        /**
         * NouvelleRemiseMajoration
         */
        nouvelleRemiseMajoration: number;
        /**
         * TauxActuel
         */
        tauxActuel: number;
        /**
         * TauxBonificationMajoration
         */
        tauxBonificationMajoration: number;
        /**
         * TauxConseillePondere
         */
        tauxConseillePondere: number;
        /**
         * MargeRevision
         */
        margeRevision: number;
        /**
         * RemiseTaux
         */
        remiseTaux: boolean;
        /**
         * ChangementTauxConseille
         */
        changementTauxConseille: boolean;
    }
    interface ISuiviPlanifieLecture extends IElementLecture {
        /**
         * Idfarv_IdntSuivPlnf
         */
        idSuivantPlafond: string;
        /**
         * Ctfcrw_CateSuivPlnf
         */
        cateSuivantPlafond: string;
        /**
         * Ctfcrv_CodeTypeSuivPlnf
         */
        codeTypeSuivantPlafond: string;
        /**
         * Ddfarv_DatePremSuiv
         * Type date au format yyyy-MM-dd
         */
        datePremierSuivant: string;
        /**
         * Dtfarv_DateSuivPlnf
         * Type date au format yyyy-MM-dd
         */
        dateSuivantPlafond: string;
        /**
         * Lbfarw_LiblLibrAsscSuiv
         */
        libelleLibrAssuranceSuivant: string;
        /**
         * Idfccl_IdntClse
         */
        idClasse: string;
        /**
         * Npfcrw_NbPerdSuivPlnf
         */
        nombrePeriodeSuivantPlafond: number;
        /**
         * Ptfcrv_CodePerdSuivPlnf
         */
        codePeriodeSuivantPlafond: number;
        /**
         * Ctfcrd_ReglDeclt
         */
        regleDeclaration: string;
        /**
         * Ctfcfp_TypePhasSuivPlnf
         */
        typePhaseSuivantPlafond: string;
        /**
         * Npfcrx_NbPerdDelDeclSuivPlnf
         */
        nombrePeriodeDelDeclarationSuivantPlafond: number;
        /**
         * Ptfcrx_CodePerdDelDeclSuivPlnf
         */
        codePeriodeDelDeclarationSuivantPlafond: number;
        /**
         * Ctfcrx_CodeAffecSuivPlnfPrdt
         */
        codeAffectationSuivantPlafondProduit: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface IOrigineApportLecture extends IElementLecture {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroPlanDossier
         */
        numeroPlanDossier: number;
        /**
         * Cdfoap_CodeOrigine
         */
        codeOrigine: number;
        /**
         * Mtfoap_MontantApportOrigine
         */
        montantApportOrigine: number;
    }
    interface IGarantLecture extends IElementLecture {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * Mcfpre_MtRessPond
         */
        montantRessourcePondere: number;
        /**
         * Mcfpce_MtChrgEmprHorsPrjtPond
         */
        montantChargeEmpruntHorsProjetPondere: number;
        /**
         * Mcfpac_MtAutrChrgPond
         */
        montantAutreChargePondere: number;
        /**
         * TotalEpargneContractuelle
         */
        totalEpargneContractuelle: number;
        /**
         * TotalEpargneLiquide
         */
        totalEpargneLiquide: number;
        /**
         * MtRessAvntProj
         */
        montantRessourceAvenantProjet: number;
        /**
         * MtChrgEmprAvntProj
         */
        montantChargeEmpruntAvenantProjet: number;
        /**
         * MtAutrChrgAvntProj
         */
        montantAutreChargeAvenantProjet: number;
        /**
         * RestVivrAvntProj
         */
        restantVivrAvenantProjet: number;
        /**
         * TxEndtAvntProj
         */
        tauxEndtAvenantProjet: number;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntCpteDeptGrpePers
         */
        listeIdCompteDeptGrpePersonne: Array<string>;
        /**
         * ListIdntCptePrfsPers
         */
        listeIdComptePrfsPersonne: Array<string>;
        /**
         * ListIdntRessGrpe
         */
        listeIdRessourceGrpe: Array<string>;
        /**
         * ListIdntChrgGrpe
         */
        listeIdChargeGrpe: Array<string>;
        /**
         * ListIdntCredExstGrpe
         */
        listeIdCreditExisteGrpe: Array<string>;
        /**
         * ListIdntFamlEprgPers
         */
        listeIdFamilleEpargnePersonne: Array<string>;
    }
    interface IRefusAssuranceExterneLecture extends IElementLecture {
        /**
         * Lvfdmr_MotifRefus
         */
        motifRefus: string;
        /**
         * Idfadi_IdDossierInstruction
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroRelatifPlanDossier
         */
        numeroRelatifPlanDossier: number;
        /**
         * Idfppe_Identifiantpersonne
         */
        identifiantpersonne: string;
        /**
         * Nofrfp_NumRangRefusProposition
         */
        numeroRangRefusProposition: number;
        /**
         * Lbfcia_CompagnieAssurance
         */
        compagnieAssurance: string;
        /**
         * Lbfrcc_ReferenceContrat
         */
        referenceContrat: string;
        /**
         * Ddfddr_DateReceptionDemande
         * Type date au format yyyy-MM-dd
         */
        dateReceptionDemande: string;
        /**
         * Ddfpic_DateImpressionDemande
         * Type date au format yyyy-MM-dd
         */
        dateImpressionDemande: string;
        /**
         * Cdfdda_CodeDecision
         */
        codeDecision: number;
        /**
         * Llfprp_RolePersonne
         */
        rolePersonne: string;
    }
    interface ILabel {
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampTextBox {
        /**
         * Text
         */
        text: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC003DC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IChampRadioButton {
        /**
         * Checked1
         */
        checked1: boolean;
        /**
         * Checked2
         */
        checked2: boolean;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle1
         */
        libelle1: string;
        /**
         * Libelle2
         */
        libelle2: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampCheckBox {
        /**
         * Checked
         */
        checked: boolean;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampTextBoxDate {
        /**
         * Text
         * Type date au format yyyy-MM-dd
         */
        text: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC003PC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
    }
    interface IFC003RE {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IFC004LA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: IChampTextBox;
    }
    interface IFC007ARO {
        /**
         * ContenuConditionsSuspensives
         */
        contenuConditionsSuspensives: IChampTextBox;
    }
    interface IFC010CP {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
    }
    interface ICreditTauxFixeLecture {
        /**
         * ReferenceIndiceCredit
         */
        referenceIndiceCredit: IChampTextBox;
        /**
         * TauxFixeCredit
         */
        tauxFixeCredit: IChampTextBox;
    }
    interface IFC010HS {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeLecture>;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: IChampTextBox;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: IChampTextBox;
        /**
         * DatePourvoirPersoMoraleAssurance
         */
        datePourvoirPersoMoraleAssurance: IChampTextBoxDate;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: IChampTextBox;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: IChampTextBox;
    }
    interface IFC010HSC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
    }
    interface IPretDevise {
        /**
         * IdentifiantProduitPretDevise
         */
        identifiantProduitPretDevise: IChampTextBox;
        /**
         * NumCreditPlanPretDevise
         */
        numeroCreditPlanPretDevise: IChampTextBox;
        /**
         * TypePretDevise
         */
        typePretDevise: IChampTextBox;
        /**
         * IdggiPretDevise
         */
        idggiPretDevise: IChampTextBox;
        /**
         * CdngPretDevise
         */
        cdngPretDevise: IChampTextBox;
        /**
         * FraisEnDevises
         */
        fraisEnDevises: IChampTextBox;
        /**
         * DevisePretDevise
         */
        devisePretDevise: IChampTextBox;
        /**
         * LabelInfoGarantieDevise
         */
        labelInformationGarantieDevise: ILabel;
        /**
         * FraisContrePartiePretDevise
         */
        fraisContrePartiePretDevise: IChampTextBox;
    }
    interface IFC010LCD {
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * RibPretDevise
         */
        ribPretDevise: IChampTextBox;
        /**
         * PretDevise
         */
        pretDevise: Array<IPretDevise>;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: IChampTextBox;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
    }
    interface IFC010LCM {
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * RibPretDevise
         */
        ribPretDevise: IChampTextBox;
        /**
         * PretDevise
         */
        pretDevise: Array<IPretDevise>;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: IChampTextBox;
    }
    interface IFC010LI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeLecture>;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: IChampTextBox;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: IChampTextBox;
        /**
         * DatePourvoirPersoMoraleAssurance
         */
        datePourvoirPersoMoraleAssurance: IChampTextBoxDate;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: IChampTextBox;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: IChampTextBox;
    }
    interface IChampTextArea {
        /**
         * Text
         */
        text: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC010LIA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
        /**
         * PouvoirEmprunteurPersMorale
         */
        pouvoirEmprunteurPersonneMorale: IChampTextArea;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
    }
    interface IFC010LIC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
    }
    interface IFC017ANL {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017BON {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017CAT {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017CGV {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017CIF {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFC017SCP {
        /**
         * IndexGarantie
         */
        indexGarantie: number;
        /**
         * ExisteAgrementGarantie
         */
        existeAgrementGarantie: IChampCheckBox;
        /**
         * DateAgrementGarantie
         */
        dateAgrementGarantie: IChampTextBoxDate;
        /**
         * PublierGreffeGarantie
         */
        publierGreffeGarantie: IChampCheckBox;
        /**
         * ConjointsEmprunteursGarantie
         */
        conjointsEmprunteursGarantie: IChampTextBox;
        /**
         * ConjointsCautionsGarantie
         */
        conjointsCautionsGarantie: IChampTextBox;
    }
    interface IFC019AN {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * An1AttestationPTZ
         */
        an1AttestationPTZ: IChampCheckBox;
        /**
         * An2AttestationPTZ
         */
        an2AttestationPTZ: IChampCheckBox;
        /**
         * An3AttestationPTZ
         */
        an3AttestationPTZ: IChampCheckBox;
        /**
         * An4AttestationPTZ
         */
        an4AttestationPTZ: IChampCheckBox;
        /**
         * An5AttestationPTZ
         */
        an5AttestationPTZ: IChampCheckBox;
        /**
         * An6AttestationPTZ
         */
        an6AttestationPTZ: IChampCheckBox;
        /**
         * An7AttestationPTZ
         */
        an7AttestationPTZ: IChampCheckBox;
        /**
         * An8AttestationPTZ
         */
        an8AttestationPTZ: IChampCheckBox;
        /**
         * An9AttestationPTZ
         */
        an9AttestationPTZ: IChampCheckBox;
        /**
         * AnXAttestationPTZ
         */
        anXAttestationPTZ: IChampCheckBox;
        /**
         * AnXIAttestationPTZ
         */
        anXIAttestationPTZ: IChampCheckBox;
        /**
         * AnIIIAttestationPTZ
         */
        anIIIAttestationPTZ: IChampCheckBox;
        /**
         * AnIVAttestationPTZ
         */
        anIVAttestationPTZ: IChampCheckBox;
        /**
         * AnXIVAttestationPTZ
         */
        anXIVAttestationPTZ: IChampCheckBox;
    }
    interface IFC028PNO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: IChampTextBox;
        libelleEtabPouvoirNotaire: IChampTextBox;
        /**
         * DatePouvoirNotaire
         */
        datePouvoirNotaire: IChampTextBoxDate;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: IChampTextBox;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: IChampTextBox;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: IChampTextBox;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: IChampTextBox;
    }
    interface IDonneesCreditLecture {
        /**
         * IdCreditModifie
         */
        idCreditModifie: string;
        /**
         * MontantCreditModifie
         */
        montantCreditModifie: IChampTextBox;
    }
    interface IFC050ACA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: IChampTextBox;
        /**
         * NombreCreditsAModifierACA
         */
        nombreCreditsAModifierACA: number;
        /**
         * ListeDonneesCreditAModifierACA
         */
        listeDonneesCreditAModifierACA: Array<IDonneesCreditLecture>;
    }
    interface IChampComboBox {
        /**
         * ListValue
         */
        listeValue: Array<string>;
        /**
         * SelectedValue
         */
        selectedValue: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampCheckBoxList {
        /**
         * ListValue
         */
        listeValue: Array<string>;
        /**
         * ListSelectedValue
         */
        listeSelectedValue: Array<string>;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC050FSC {
        /**
         * DateTransfertBoSuiveuse
         */
        dateTransfertBoSuiveuse: IChampTextBoxDate;
        /**
         * DateDispositionFondsSuiveuse
         */
        dateDispositionFondsSuiveuse: IChampTextBoxDate;
        /**
         * DateEnvoiNumerisationSuiveuse
         */
        dateEnvoiNumerisationSuiveuse: IChampTextBoxDate;
        /**
         * DateSignatureNotaireSuiveuse
         */
        dateSignatureNotaireSuiveuse: IChampTextBoxDate;
        /**
         * EditionSuiveuse
         */
        editionSuiveuse: IChampComboBox;
        /**
         * Statut1Suiveuse
         */
        statut1Suiveuse: IChampCheckBoxList;
        /**
         * Statut2Suiveuse
         */
        statut2Suiveuse: IChampCheckBoxList;
        /**
         * Statut3Suiveuse
         */
        statut3Suiveuse: IChampCheckBoxList;
        /**
         * NumeroDossierAssocieSuiveuse
         */
        numeroDossierAssocieSuiveuse: IChampTextBox;
        /**
         * CorbeilleWorkflowSuiveuse
         */
        corbeilleWorkflowSuiveuse: IChampComboBox;
        /**
         * CommentaireSuiveuse
         */
        commentaireSuiveuse: IChampTextBox;
    }
    interface IChampLabelMultiLine {
        /**
         * ListValue
         */
        listeValue: Array<string>;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IChampCache {
        /**
         * Value
         */
        value: string;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Required
         */
        required: boolean;
    }
    interface IFC050FSI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * Messages
         */
        messages: IChampLabelMultiLine;
        /**
         * NumeroOrias
         */
        numeroOrias: IChampCache;
        /**
         * NombreCreditsAModifier
         */
        nombreCreditsAModifier: IChampCache;
        /**
         * ListeDonneesCreditAModifier
         */
        listeDonneesCreditAModifier: Array<IDonneesCreditLecture>;
    }
    interface IDonneesCautionPersonneMoraleLecture {
        /**
         * NomCautionPersoMorale
         */
        nomCautionPersoMorale: IChampTextBox;
        /**
         * RepresCautionPersoMorale
         */
        represCautionPersoMorale: IChampTextBox;
        /**
         * AgissantQualiteCaution
         */
        agissantQualiteCaution: IChampTextBox;
        /**
         * AgissantVertuCaution
         */
        agissantVertuCaution: IChampTextBox;
        /**
         * Agissant3Caution
         */
        agissant3Caution: IChampTextBox;
        /**
         * Agissant4Caution
         */
        agissant4Caution: IChampTextBox;
        /**
         * Agissant5Caution
         */
        agissant5Caution: IChampTextBox;
    }
    interface IFC104LEC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * ListeDonneesCautionPersonneMorale
         */
        listeDonneesCautionPersonneMorale: Array<IDonneesCautionPersonneMoraleLecture>;
    }
    interface IFCM03DC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IFCM03RE {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
    }
    interface IFCM04LA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: IChampTextBox;
    }
    interface IFCM10HS {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeLecture>;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: IChampTextBox;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: IChampTextBox;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: IChampTextBox;
        /**
         * DatePourvoirPersoMoraleAssurance
         */
        datePourvoirPersoMoraleAssurance: IChampTextBoxDate;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: IChampTextBox;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM10HSC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: IChampRadioButton;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: IChampTextBox;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: IChampCheckBox;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: IChampTextBox;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: IChampTextBox;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: IChampTextBox;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: IChampTextBox;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: IChampTextBox;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: IChampTextBox;
        /**
         * DateRCSEmprunteurBailleur
         */
        dateRCSEmprunteurBailleur: IChampTextBoxDate;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: IChampTextBox;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: IChampTextBox;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: IChampTextBox;
        /**
         * DatePouvoirEmprunteurPersMorale
         */
        datePouvoirEmprunteurPersonneMorale: IChampTextBoxDate;
        /**
         * RaisonCaution
         */
        raisonCaution: IChampTextBox;
        /**
         * RepresentantCaution
         */
        representantCaution: IChampTextBox;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: IChampTextBox;
        /**
         * DatePouvoirCaution
         */
        datePouvoirCaution: IChampTextBoxDate;
    }
    interface IFCM17ANL {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17BON {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17CAT {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17CFG {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * NomCopropriete
         */
        nomCopropriete: IChampTextBox;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: IChampTextBox;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: IChampTextBox;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: IChampTextBox;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: IChampRadioButton;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: IChampTextBox;
        /**
         * EffetCopropriete
         */
        effetCopropriete: IChampTextBox;
    }
    interface IFCM17CGV {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17CIF {
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
    }
    interface IFCM17NFX {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: IChampTextBox;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: IChampTextBox;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: IChampTextBox;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: IChampTextBox;
    }
    interface IFCM17FDC {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: IChampTextBox;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: IChampTextBox;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: IChampTextBox;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: IChampTextBox;
    }
    interface IOutilLecture {
        /**
         * MarqueOutil
         */
        marqueOutil: IChampTextBox;
        /**
         * TypeOutil
         */
        typeOutil: IChampTextBox;
        /**
         * DateLivraisonOutil
         */
        dateLivraisonOutil: IChampTextBoxDate;
        /**
         * SerieOutil
         */
        serieOutil: IChampTextBox;
        /**
         * PrixOutil
         */
        prixOutil: IChampTextBox;
        /**
         * VendIntituleOutil
         */
        vendIntituleOutil: IChampTextBox;
        /**
         * VendCpltIntOutil
         */
        vendCpltIntituleOutil: IChampTextBox;
        /**
         * VendAdrOutil
         */
        vendAdresseOutil: IChampTextBox;
        /**
         * VendCpltAdrOutil
         */
        vendCpltAdresseOutil: IChampTextBox;
        /**
         * VendCPOutil
         */
        vendCPOutil: IChampTextBox;
        /**
         * VendVilleOutil
         */
        vendVilleOutil: IChampTextBox;
        /**
         * AdrOutil
         */
        adresseOutil: IChampTextBox;
        /**
         * CpltAdrOutil
         */
        cpltAdresseOutil: IChampTextBox;
        /**
         * CPOutil
         */
        cPOutil: IChampTextBox;
        /**
         * VilleOutil
         */
        villeOutil: IChampTextBox;
        /**
         * DeplacementOutil
         */
        deplacementOutil: IChampCheckBox;
    }
    interface IFCM17OME {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NombreOutils
         */
        nombreOutils: number;
        /**
         * ListeOutil
         */
        listeOutil: Array<IOutilLecture>;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * VilleTribunal
         */
        villeTribunal: IChampTextBox;
    }
    interface IFCM20CLI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * DateDebutLigneInvestissement
         */
        dateDebutLigneInvestissement: IChampTextBoxDate;
        /**
         * DateFinLigneInvestissement
         */
        dateFinLigneInvestissement: IChampTextBoxDate;
        /**
         * ATauxFixeLigneInvestissement
         */
        aTauxFixeLigneInvestissement: IChampRadioButton;
        /**
         * TauxFixeLigneInvestissement
         */
        tauxFixeLigneInvestissement: IChampTextBox;
        /**
         * TauxRevisableLigneInvestissement
         */
        tauxRevisableLigneInvestissement: IChampTextBox;
        /**
         * ReferenceIndiceLigneInvestissement
         */
        referenceIndiceLigneInvestissement: IChampTextBox;
    }
    interface IFCM28PNO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: IChampTextBox;
        /**
         * DatePouvoirNotaire
         */
        datePouvoirNotaire: IChampTextBoxDate;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: IChampTextBox;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: IChampTextBox;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: IChampTextBox;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: IChampTextBox;
    }
    interface IFCM99LEI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
    }
    interface IFCX28PNO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: IChampTextBox;
        /**
         * DatePouvoirNotaire
         */
        datePouvoirNotaire: IChampTextBoxDate;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: IChampTextBox;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: IChampTextBox;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: IChampTextBox;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: IChampTextBox;
    }
    interface IFZ001SI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * AccordPrincipe
         */
        accordPrincipe: IChampCheckBox;
        /**
         * Rdv
         */
        rdv: IChampCheckBox;
        /**
         * Deroulement
         */
        deroulement: IChampCheckBox;
    }
    interface INOTICES {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * AjoutNotices
         */
        ajoutNotices: IChampCheckBox;
    }
    interface ISaisiesComplementaireLecture extends IElementLecture {
        /**
         * FC003DC
         */
        fC003DC: IFC003DC;
        /**
         * FC003PC
         */
        fC003PC: IFC003PC;
        /**
         * FC003RE
         */
        fC003RE: IFC003RE;
        /**
         * FC004LA
         */
        fC004LA: IFC004LA;
        /**
         * FC007ARO
         */
        fC007ARO: IFC007ARO;
        /**
         * FC010CP
         */
        fC010CP: IFC010CP;
        /**
         * FC010HS
         */
        fC010HS: IFC010HS;
        /**
         * FC010HSC
         */
        fC010HSC: IFC010HSC;
        /**
         * FC010LCD
         */
        fC010LCD: IFC010LCD;
        /**
         * FC010LCM
         */
        fC010LCM: IFC010LCM;
        /**
         * FC010LI
         */
        fC010LI: IFC010LI;
        /**
         * FC010LIA
         */
        fC010LIA: IFC010LIA;
        /**
         * FC010LIC
         */
        fC010LIC: IFC010LIC;
        /**
         * FC017ANL
         */
        fC017ANL: IFC017ANL;
        /**
         * FC017BON
         */
        fC017BON: IFC017BON;
        /**
         * FC017CAT
         */
        fC017CAT: IFC017CAT;
        /**
         * FC017CGV
         */
        fC017CGV: IFC017CGV;
        /**
         * FC017CIF
         */
        fC017CIF: IFC017CIF;
        /**
         * FC017SCP
         */
        fC017SCP: IFC017SCP;
        /**
         * FC019AN
         */
        fC019AN: IFC019AN;
        /**
         * FC028PNO
         */
        fC028PNO: IFC028PNO;
        /**
         * FC050ACA
         */
        fC050ACA: IFC050ACA;
        /**
         * FC050FSC
         */
        fC050FSC: IFC050FSC;
        /**
         * FC050FSI
         */
        fC050FSI: IFC050FSI;
        /**
         * FC104LEC
         */
        fC104LEC: IFC104LEC;
        /**
         * FCM03DC
         */
        fCM03DC: IFCM03DC;
        /**
         * FCM03RE
         */
        fCM03RE: IFCM03RE;
        /**
         * FCM04LA
         */
        fCM04LA: IFCM04LA;
        /**
         * FCM10HS
         */
        fCM10HS: IFCM10HS;
        /**
         * FCM10HSC
         */
        fCM10HSC: IFCM10HSC;
        /**
         * FCM17ANL
         */
        fCM17ANL: IFCM17ANL;
        /**
         * FCM17BON
         */
        fCM17BON: IFCM17BON;
        /**
         * FCM17CAT
         */
        fCM17CAT: IFCM17CAT;
        /**
         * FCM17CFG
         */
        fCM17CFG: IFCM17CFG;
        /**
         * FCM17CGV
         */
        fCM17CGV: IFCM17CGV;
        /**
         * FCM17CIF
         */
        fCM17CIF: IFCM17CIF;
        /**
         * FCM17FDC
         */
        fCM17FDC: IFCM17FDC;
        /**
         * FCM17OME
         */
        fCM17OME: IFCM17OME;
        /**
         * FCM20CLI
         */
        fCM20CLI: IFCM20CLI;
        /**
         * FCM28PNO
         */
        fCM28PNO: IFCM28PNO;
        /**
         * FCM99LEI
         */
        fCM99LEI: IFCM99LEI;
        /**
         * FCX28PNO
         */
        fCX28PNO: IFCX28PNO;
        /**
         * FZ001SI
         */
        fZ001SI: IFZ001SI;
        /**
         * NOTICES
         */
        nOTICES: INOTICES;
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: string;
        /**
         * An1AttestationPTZ
         */
        an1AttestationPTZ: boolean;
        /**
         * An2AttestationPTZ
         */
        an2AttestationPTZ: boolean;
        /**
         * An3AttestationPTZ
         */
        an3AttestationPTZ: boolean;
        /**
         * An4AttestationPTZ
         */
        an4AttestationPTZ: boolean;
        /**
         * An5AttestationPTZ
         */
        an5AttestationPTZ: boolean;
        /**
         * An6AttestationPTZ
         */
        an6AttestationPTZ: boolean;
        /**
         * An7AttestationPTZ
         */
        an7AttestationPTZ: boolean;
        /**
         * An8AttestationPTZ
         */
        an8AttestationPTZ: boolean;
        /**
         * An9AttestationPTZ
         */
        an9AttestationPTZ: boolean;
        /**
         * AnXAttestationPTZ
         */
        anXAttestationPTZ: boolean;
        /**
         * AnXIAttestationPTZ
         */
        anXIAttestationPTZ: boolean;
        /**
         * AnIIIAttestationPTZ
         */
        anIIIAttestationPTZ: boolean;
        /**
         * AnIVAttestationPTZ
         */
        anIVAttestationPTZ: boolean;
        /**
         * AnXIVAttestationPTZ
         */
        anXIVAttestationPTZ: boolean;
        /**
         * ValeurCondGenLIA
         */
        valeurConditionGenLIA: boolean;
        /**
         * VisibiliteCheckBoxCondGenLIA
         */
        visibiliteCheckBoxConditionGenLIA: boolean;
        /**
         * ValeurCondSpeLIA
         */
        valeurConditionSpeLIA: boolean;
        /**
         * VisibiliteCheckBoxCondSpeLIA
         */
        visibiliteCheckBoxConditionSpeLIA: boolean;
        /**
         * NomCopropriete
         */
        nomCopropriete: string;
        /**
         * Adresse1Copropriete
         */
        adresse1Copropriete: string;
        /**
         * Adresse2Copropriete
         */
        adresse2Copropriete: string;
        /**
         * Adresse3Copropriete
         */
        adresse3Copropriete: string;
        /**
         * TypePersonneCopropriete
         */
        typePersonneCopropriete: string;
        /**
         * MandataireCopropriete
         */
        mandataireCopropriete: string;
        /**
         * EffetCopropriete
         */
        effetCopropriete: string;
        /**
         * ListeCreditTauxFixe
         */
        listeCreditTauxFixe: Array<ICreditTauxFixeMaj>;
        /**
         * ContenuConditionsSuspensives
         */
        contenuConditionsSuspensives: string;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: boolean;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: string;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: boolean;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: string;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: boolean;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: string;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: boolean;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: string;
        /**
         * DateTransfertBoSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateTransfertBoSuiveuse: string;
        /**
         * DateDispositionFondsSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateDispositionFondsSuiveuse: string;
        /**
         * DateEnvoiNumerisationSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateEnvoiNumerisationSuiveuse: string;
        /**
         * DateSignatureNotaireSuiveuse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureNotaireSuiveuse: string;
        /**
         * EditionSuiveuse
         */
        editionSuiveuse: string;
        /**
         * Statut1Suiveuse
         */
        statut1Suiveuse: Array<string>;
        /**
         * Statut2Suiveuse
         */
        statut2Suiveuse: Array<string>;
        /**
         * Statut3Suiveuse
         */
        statut3Suiveuse: Array<string>;
        /**
         * NumeroDossierAssocieSuiveuse
         */
        numeroDossierAssocieSuiveuse: string;
        /**
         * CorbeilleWorkflowSuiveuse
         */
        corbeilleWorkflowSuiveuse: string;
        /**
         * CommentaireSuiveuse
         */
        commentaireSuiveuse: string;
        /**
         * IndexGarantie
         */
        indexGarantie: number;
        /**
         * ExisteAgrementGarantie
         */
        existeAgrementGarantie: boolean;
        /**
         * DateAgrementGarantie
         * Type date au format yyyy-MM-dd
         */
        dateAgrementGarantie: string;
        /**
         * PublierGreffeGarantie
         */
        publierGreffeGarantie: boolean;
        /**
         * ConjointsEmprunteursGarantie
         */
        conjointsEmprunteursGarantie: string;
        /**
         * ConjointsCautionsGarantie
         */
        conjointsCautionsGarantie: string;
        /**
         * DateDebutLigneInvestissement
         * Type date au format yyyy-MM-dd
         */
        dateDebutLigneInvestissement: string;
        /**
         * DateFinLigneInvestissement
         * Type date au format yyyy-MM-dd
         */
        dateFinLigneInvestissement: string;
        /**
         * ATauxFixeLigneInvestissement
         */
        aTauxFixeLigneInvestissement: boolean;
        /**
         * TauxFixeLigneInvestissement
         */
        tauxFixeLigneInvestissement: string;
        /**
         * TauxRevisableLigneInvestissement
         */
        tauxRevisableLigneInvestissement: string;
        /**
         * ReferenceIndiceLigneInvestissement
         */
        referenceIndiceLigneInvestissement: string;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: string;
        /**
         * NomMandataire
         */
        nomMandataire: string;
        /**
         * VertuMandataire
         */
        vertuMandataire: string;
        /**
         * NombreOutils
         */
        nombreOutils: number;
        /**
         * AjoutNotices
         */
        ajoutNotices: boolean;
        /**
         * NumeroOrias
         */
        numeroOrias: string;
        /**
         * NombreCreditsAModifierFSI
         */
        nombreCreditsAModifierFSI: number;
        /**
         * ListeDonneesCreditAModifierFSI
         */
        listeDonneesCreditAModifierFSI: Array<IDonneesCreditLecture>;
        /**
         * ListeOutil
         */
        listeOutil: Array<IOutilMaj>;
        /**
         * SousignePouvoirNotaire
         */
        sousignePouvoirNotaire: string;
        /**
         * DatePouvoirNotaire
         * Type date au format yyyy-MM-dd
         */
        datePouvoirNotaire: string;
        /**
         * Nom1PouvoirNotaire
         */
        nom1PouvoirNotaire: string;
        /**
         * Nom2PouvoirNotaire
         */
        nom2PouvoirNotaire: string;
        /**
         * Nom3PouvoirNotaire
         */
        nom3PouvoirNotaire: string;
        /**
         * Nom4PouvoirNotaire
         */
        nom4PouvoirNotaire: string;
        /**
         * RibPretDevise
         */
        ribPretDevise: string;
        /**
         * IdentifiantProduitPretDevise
         */
        identifiantProduitPretDevise: string;
        /**
         * NumCreditPlanPretDevise
         */
        numeroCreditPlanPretDevise: string;
        /**
         * TypePretDevise
         */
        typePretDevise: string;
        /**
         * IdggiPretDevise
         */
        idggiPretDevise: string;
        /**
         * CdngPretDevise
         */
        cdngPretDevise: string;
        /**
         * FraisEnDevises
         */
        fraisEnDevises: string;
        /**
         * DevisePretDevise
         */
        devisePretDevise: string;
        /**
         * FraisContrePartiePretDevise
         */
        fraisContrePartiePretDevise: string;
        /**
         * MontantMiniDeblocagePretDevise
         */
        montantMinimumDeblocagePretDevise: string;
        /**
         * AccordPrincipe
         */
        accordPrincipe: boolean;
        /**
         * Rdv
         */
        rdv: boolean;
        /**
         * Deroulement
         */
        deroulement: boolean;
        /**
         * RaisonCaution
         */
        raisonCaution: string;
        /**
         * RepresentantCaution
         */
        representantCaution: string;
        /**
         * EnQualiteCaution
         */
        enQualiteCaution: string;
        /**
         * DatePouvoirCaution
         * Type date au format yyyy-MM-dd
         */
        datePouvoirCaution: string;
        /**
         * NomSocieteEmprunteurBailleur
         */
        nomSocieteEmprunteurBailleur: string;
        /**
         * CapitalEmprunteurBailleur
         */
        capitalEmprunteurBailleur: string;
        /**
         * SiegeEmprunteurBailleur
         */
        siegeEmprunteurBailleur: string;
        /**
         * LieuRCSEmprunteurBailleur
         */
        lieuRCSEmprunteurBailleur: string;
        /**
         * NumeroRCSEmprunteurBailleur
         */
        numeroRCSEmprunteurBailleur: string;
        /**
         * DateRCSEmprunteurBailleur
         * Type date au format yyyy-MM-dd
         */
        dateRCSEmprunteurBailleur: string;
        /**
         * RepresentantEmprunteurBailleur
         */
        representantEmprunteurBailleur: string;
        /**
         * LibelleRepresEmprunteurPersMorale
         */
        libelleRepresEmprunteurPersonneMorale: string;
        /**
         * EnQualiteEmprunteurPersMorale
         */
        enQualiteEmprunteurPersonneMorale: string;
        /**
         * DatePouvoirEmprunteurPersMorale
         * Type date au format yyyy-MM-dd
         */
        datePouvoirEmprunteurPersonneMorale: string;
        /**
         * ListeDonneesCautionPersonneMorale
         */
        listeDonneesCautionPersonneMorale: Array<IDonneesCautionPersonneMoraleMaj>;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: string;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: string;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: string;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: string;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: string;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: string;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: string;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: string;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: string;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: string;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: string;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: string;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: string;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: string;
        /**
         * RepresPersoMoraleAssurance
         */
        represPersoMoraleAssurance: string;
        /**
         * AgissantQualitePersoMoraleAssurance
         */
        agissantQualitePersoMoraleAssurance: string;
        /**
         * Vertu1PersoMoraleAssurance
         */
        vertu1PersoMoraleAssurance: string;
        /**
         * Vertu2PersoMoraleAssurance
         */
        vertu2PersoMoraleAssurance: string;
        /**
         * DatePourvoirPersoMoraleAssurance
         * Type date au format yyyy-MM-dd
         */
        datePourvoirPersoMoraleAssurance: string;
        /**
         * Vertu4PersoMoraleAssurance
         */
        vertu4PersoMoraleAssurance: string;
        /**
         * CompoOffrePersoMoraleAssurance
         */
        compositionOffrePersoMoraleAssurance: string;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: string;
        /**
         * ReservesRedacteur
         */
        reservesRedacteur: string;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: string;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: string;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: string;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: string;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: string;
        /**
         * VilleTribunal
         */
        villeTribunal: string;
        /**
         * mtoDocInfos
         */
        mtoDocInformation: Array<IAnyType>;
        /**
         * FCM17NFX
         */
        fCM17NFX: IFCM17NFX;
        /**
         * FCM17NFO
         */
        fCM17NFO: IFCM17NFO;
        /**
         * FCM17GBM
         */
        fCM17GBM: IFCM17GBM;
        /**
         * NomenclatureBiens
         */
        nomenclatureBiens: string;
        /**
         * LibelleNomenclatureBiens
         */
        libelleNomenclatureBiens: string;
        /**
         * ListeBienMC
         */
        listeBienMC: Array<IBienMaj>;
        /**
         * NombreBiensMC
         */
        nombreBiensMC: number;
        /**
         * FCM07LAN
         */
        fCM07LAN: IFCM07LAN;
    }
    interface IAgentLecture extends IElementLecture {
        /**
         * Idfaen_IdntAgent
         */
        idAgent: string;
        /**
         * Lbfaes_LblAgent
         */
        lblAgent: string;
        /**
         * Idfaeg_IdntEdsGest
         */
        idEDSGestion: string;
        /**
         * Lbfiba_LblAgenceRat
         */
        lblAgenceRat: string;
        /**
         * Cdfaaa_CdeAgentRat
         */
        cdeAgentRat: string;
        /**
         * Nofcdi_NivDelegation
         */
        niveauDelegation: string;
        /**
         * Ctfauc_TypeUtilisateurCo
         */
        typeUtilisateurCo: number;
        /**
         * Idfies_IdntAgentInterne
         */
        idAgentInterne: string;
        /**
         * Idfce3_EtabBaofCent
         */
        etabBaofCentral: number;
        /**
         * Cdfabo_IdntEdsBaofCent
         */
        idEDSBaofCentral: string;
        /**
         * Cifttv_TechniqueDeVente
         */
        techniqueDeVente: number;
        /**
         * EstAgentBO
         */
        estAgentBO: boolean;
        /**
         * EstBackup
         */
        estBackup: boolean;
        /**
         * EstAgentExterne
         */
        estAgentExterne: boolean;
        /**
         * DerogationBornes
         */
        derogationBornes: boolean;
        /**
         * AutoriserForcage
         */
        autoriserForcage: boolean;
        /**
         * AutoriserForcagePIECO
         */
        autoriserForcagePIECO: boolean;
        /**
         * AutoriserInstructionPourX
         */
        autoriserInstructionPourX: boolean;
        /**
         * AutoriserMajPourX
         */
        autoriserMAJPourX: boolean;
        /**
         * AutoriserDateTraitement
         */
        autoriserDateTraitement: boolean;
        /**
         * AutoriserAXANet
         */
        autoriserAXANet: boolean;
        /**
         * AutoriserDevisEcoPTZ
         */
        autoriserDevisEcoPTZ: boolean;
        /**
         * AutoriserCNPNet
         */
        autoriserCNPNet: boolean;
        /**
         * AutoriserCAPI
         */
        autoriserCAPI: boolean;
        /**
         * AutoriserSDPI
         */
        autoriserSDPI: boolean;
        /**
         * AutoriserAgrementAssurance
         */
        autoriserAgrementAssurance: boolean;
        /**
         * AutoriserAccesDNC
         */
        autoriserAccesDNC: boolean;
        /**
         * AutoriserGenerationNouvelleDemandeMyFlow
         */
        autoriserGeneNvelleDmdeMyFlow: boolean;
        /**
         * ListerHabilitation
         */
        listerHabilitation: Array<string>;
        /**
         * ListerEtablissementsGcm
         */
        listerEtablissementsGcm: Array<number>;
        /**
         * ExisteDossiersEnAlerte
         */
        existeDossiersEnAlerte: boolean;
        /**
         * EstAgentRefusAssuranceExterne
         */
        estAgentRefusAssuranceExterne: boolean;
        /**
         * ScPhasePilote
         */
        scPhasePilote: IScPhasePilote;
    }
    interface ISynthesePlanFinancementLecture extends IElementLecture {
        /**
         * Mcfoof_CoutTotalTTC
         */
        coutTotalTTC: number;
        /**
         * Mcfgfr_CoutTotalFraisGarantie
         */
        coutTotalFraisGarantie: number;
        /**
         * Mcfafd_CoutTotalFraisDossier
         */
        coutTotalFraisDossier: number;
        /**
         * Mtfaap_MtApportPersonnel
         */
        montantApportPersonnel: number;
        /**
         * nMtfaso_MtConcoursInternes
         */
        montantConcoursInternes: number;
        /**
         * nMkface_MtConcoursExternes
         */
        montantConcoursExternes: number;
        /**
         * Mcfacf_CoutTotalFraisCourtage
         */
        coutTotalFraisCourtage: number;
        /**
         * MtMensualiteAvecAssurance
         */
        montantMensualiteAvecAssurance: number;
        /**
         * MtMensualiteNet
         */
        montantMensualiteNet: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
    }
    interface ICourrierEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumPlanDossier
         */
        numeroPlanDossier: number;
        /**
         * Nofacp_NumCreditPlan
         */
        numeroCreditPlan: number;
        /**
         * Nufcrl_NumRelatif
         */
        numeroRelatif: number;
        /**
         * Ctfclv_TypeLettre
         */
        typeLettre: number;
        /**
         * Cdfpci_CodeCivilite
         */
        codeCivilite: string;
        /**
         * Lbfce1_AdresseLigne1
         */
        adresseLigne1: string;
        /**
         * Lbfce2_AdresseLigne2
         */
        adresseLigne2: string;
        /**
         * Lbfce3_AdresseLigne3
         */
        adresseLigne3: string;
        /**
         * Lbfce4_AdresseLigne4
         */
        adresseLigne4: string;
        /**
         * Lbfce5_AdresseLigne5
         */
        adresseLigne5: string;
        /**
         * Lbfce6_AdresseLigne6
         */
        adresseLigne6: string;
    }
    interface IMarcheEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDoss
         */
        numeroRelPlanDossier: number;
        /**
         * Nofacp_NumRelCreditPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Ctfcme_CodeTypeMarche
         */
        codeTypeMarche: string;
        /**
         * Idfcmb_IdMarche
         */
        idMarche: string;
        /**
         * Idfcmp_IdTiersMarcePrinc
         */
        idTiersMarcePrinc: string;
        /**
         * Lbfcmo_LibMoeMarchePrinc
         */
        libelleMoeMarchePrinc: string;
        /**
         * Lbfcom_LibelleObjetMarche
         */
        libelleObjetMarche: string;
        /**
         * Mtfcmd_MontantMarche
         */
        montantMarche: number;
        /**
         * Dtfcma_DateSignMarche
         * Type date au format yyyy-MM-dd
         */
        dateSigneMarche: string;
        /**
         * Dffcme_DateFinMarche
         * Type date au format yyyy-MM-dd
         */
        dateFinMarche: string;
        /**
         * Lnfagr_NomGroupMarche
         */
        nomGroupMarche: string;
        /**
         * Lbfctr_LibLieuExecTravaux
         */
        libelleLieuExecTravaux: string;
        /**
         * Nxfctr_NumTranMarche
         */
        numeroTranMarche: string;
        /**
         * Nxfclo_NumLotMarche
         */
        numeroLotMarche: string;
        /**
         * Idfamp_refCautionPrincipale
         */
        refCautionPrincipale: string;
        /**
         * Dtfcmp_dateEmisCautionPrinc
         * Type date au format yyyy-MM-dd
         */
        dateEmisCautionPrinc: string;
        /**
         * Mtfccp_montantCautionPrinc
         */
        montantCautionPrinc: number;
        /**
         * Cdfadv_codeDevise
         */
        codeDevise: string;
    }
    interface ITACreditEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDos
         */
        numeroRelPlanDos: number;
        /**
         * Nofacp_NumRelCredPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Nufcrl_NumRelCred
         */
        numeroRelCredit: number;
        /**
         * Dtfhpr_DateEchnMER
         * Type date au format yyyy-MM-dd
         */
        dateEcheanceMER: string;
        /**
         * Mkfh03_MtCaptAmrt
         */
        montantCapitalAmortissement: number;
        /**
         * Mkfd01_MtCaptRestDu
         */
        montantCapitalRestantDu: number;
        /**
         * Nufcet_NumEcheanceTable
         */
        numeroEcheanceTable: number;
    }
    interface IScElement {
    }
    interface IScConstante extends IScElement {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
    interface IProjetNonImmobilierLecture extends IProjetLecture {
        /**
         * IndicProjProf
         */
        indiceProjetProf: boolean;
        /**
         * IndicProjConsTres
         */
        indiceProjetConsolideTres: boolean;
        /**
         * ObjTresEtdn
         */
        objTresEtdn: boolean;
        /**
         * ObjFinnConso
         */
        objFinancierConsommation: boolean;
        /**
         * ObjTresPrfs
         */
        objTresPrfs: boolean;
        /**
         * DescProjNonImmb
         */
        descriptionProjetNonImmobilier: string;
        /**
         * Dtfbso_DateMiseDispFond
         * Type date au format yyyy-MM-dd
         */
        dateMiseDispFond: string;
        /**
         * IdntBienConso
         */
        idBienConsommation: string;
        /**
         * IdntBienEqpmProf
         */
        idBienEqpmProf: string;
        /**
         * IdntBienTres
         */
        idBienTres: string;
    }
    interface IProjetEPSLecture extends IProjetLecture {
    }
    interface ICreditEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDos
         */
        numeroRelPlanDos: number;
        /**
         * Nofacp_NumRelCredPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Nufcrl_NumRelCred
         */
        numeroRelCredit: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Txfccc_QuotCredCouvParEps
         */
        quotientCreditCouvertureParEPS: number;
        /**
         * Idfaez_RefeExtnCredCouvEps
         */
        referenceExterneCreditCouvertureEPS: string;
        /**
         * ListIdntTaCredCouvParEps
         */
        listeIdtaCreditCouvertureParEPS: Array<string>;
    }
    interface IComplementEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumrReltPlanDoss
         */
        numeroRelationPlanDossier: number;
        /**
         * Nofacp_NumrReltCrdtPlan
         */
        numeroRelationCreditPlan: number;
        /**
         * Cnfcnb_NatrGarnEps
         */
        natureGarantieEPS: string;
        /**
         * Idfapa_RefrExtnDossParn
         */
        referenceExterneDossierParent: string;
        /**
         * Ddfaen_DateDebuEngg
         * Type date au format yyyy-MM-dd
         */
        dateDebutEngagement: string;
        /**
         * Dffaen_DateFinEngg
         * Type date au format yyyy-MM-dd
         */
        dateFinEngagement: string;
        /**
         * Mgfggo_MtEnggGlblOrig
         */
        montantEngagementGlblOrigine: number;
        /**
         * Idfagl_IdntEnggGlbl
         */
        idEngagementGlbl: string;
        /**
         * Cifcrg_CodeIndRetrocessionEPS
         */
        codeIndicateurRetrocessionEPS: number;
        /**
         * Cifcrh_CodeIndicRadiationAutoEPS
         */
        codeIndiceRadiationAutomatiqueEPS: number;
        /**
         * Cifcri_CodeIndicEPSAmortissable
         */
        codeIndiceEPSAmortissable: number;
        /**
         * Cifeng_CodeEngagementGlobal
         */
        codeEngagementGlobal: number;
        /**
         * Cnfcnh_CodeTypeObjetEPS
         */
        codeTypeObjetEPS: string;
        /**
         * Cofcca_CodeCanalDistributionEPS
         */
        codeCanalDistributionEPS: string;
        /**
         * Cofcsi_CodeSignatureElectroniqueEPS
         */
        codeSignatureElectroniqueEPS: string;
        /**
         * Dtfcdd_DateDecisionEPS
         * Type date au format yyyy-MM-dd
         */
        dateDecisionEPS: string;
        /**
         * Idfaei_IdEntiteInstructeur
         */
        idEntiteInstructeur: string;
        /**
         * Idfagd_CodeAgentDecideur
         */
        codeAgentDecideur: string;
        /**
         * Idfcma_IdModeleActeEPS
         */
        idModeleActeEPS: string;
        /**
         * Idfcs1_IdEDSSignataire
         */
        idEDSSignataire: string;
        /**
         * Idfcs2_IdEDSSignataire
         */
        idEDSSignataire1: string;
        /**
         * Mtfcad_MontantAssietteCommission
         */
        montantAssietteCommission: number;
        /**
         * Nxfcse_NumSignatureElectroniqueEPS
         */
        numeroSignatureElectroniqueEPS: string;
        /**
         * ListIdntMarcheEPS
         */
        listeIdMarcheEPS: Array<string>;
        /**
         * Idfcfa_IdFamilleEPS
         */
        idFamilleEPS: string;
        /**
         * Dtfcru_DateRadiationEPS
         * Type date au format yyyy-MM-dd
         */
        dateRadiationEPS: string;
        /**
         * Idfaic_IdPreuveICG
         */
        idPreuveICG: string;
        /**
         * Idfapc_IdClientWeb
         */
        idClientWeb: string;
        /**
         * Lbfauc_LibelleUtilisateurWeb
         */
        libelleUtilisateurWeb: string;
        /**
         * Lbfas1_LibelleCiviliteSignataire1
         */
        libelleCiviliteSignataire1: string;
        /**
         * Lbfas3_LibelleCiviliteSignataire2
         */
        libelleCiviliteSignataire2: string;
        /**
         * Lbfas4_LibelleFonctionSignataire2
         */
        libelleFonctionSignataire2: string;
        /**
         * Lbfas2_LibelleFonctionSignataire1
         */
        libelleFonctionSignataire1: string;
        /**
         * Cdfcew_CodeEtatDossierEPSWeb
         */
        codeEtatDossierEPSWeb: string;
    }
    interface ITresorerieFinanceeLecture extends IBienDetailleLecture {
        /**
         * CodeIndicBienConso
         */
        codeIndiceBienConsommation: boolean;
        /**
         * CodeIndicTresProf
         */
        codeIndiceTresProf: boolean;
        /**
         * CodeIndicTresEtdn
         */
        codeIndiceTresEtdn: boolean;
        /**
         * Idfove_IdntVndr
         */
        idVendeur: string;
    }
    interface IBienEquipementProLecture extends IBienDetailleLecture {
    }
    interface IBienDetailleLecture extends IElementLecture {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
        /**
         * Mtfoac_CoutAcqsComlInds
         */
        coutAcqsCommercialisationInds: number;
        /**
         * Mtfoai_CoutAcqsHabt
         */
        coutAcqsHabitation: number;
        /**
         * Mtfoco_CoutConst
         */
        coutConstruction: number;
        /**
         * Mtfotr_CoutTrvxAmen
         */
        coutTravauxAmen: number;
        /**
         * Mtfopp_CoutPasPort
         */
        coutPasPort: number;
        /**
         * Mtfofc_CoutFondComc
         */
        coutFondComc: number;
        /**
         * Mtfomo_CoutEqpmMte
         */
        coutEqpmMte: number;
        /**
         * Mtfovp_CoutVehcPrfs
         */
        coutVehcPrfs: number;
        /**
         * Mtfops_CoutPartSocl
         */
        coutPartSociale: number;
        /**
         * Mtfofg_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * Mtfofn_MtFrsNotr
         */
        montantFrsNotaire: number;
        /**
         * Mtfost_CoutStck
         */
        coutStck: number;
        /**
         * Mtfosc_CoutStckHorsInstr
         */
        coutStckHorsInstruction: number;
        /**
         * Mtfobf_CoutBfr
         */
        coutBfr: number;
        /**
         * Mtfobc_CoutBfrHorsInstr
         */
        coutBfrHorsInstruction: number;
        /**
         * Mtfodv_CoutAutrFrsPrfs
         */
        coutAutreFrsPrfs: number;
        /**
         * Mtfodc_CoutAutrFrsPrfsHorsInstr
         */
        coutAutreFrsPrfsHorsInstruction: number;
        /**
         * Mcfotv_MtTvaFinn
         */
        montantTVAFinancier: number;
        /**
         * Mtfora_MtRachCren
         */
        montantRachCren: number;
        /**
         * Mtfods_CoutPartSoce
         */
        coutPartSoce: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IAutoMotoLecture extends IBienConsoFinanceLecture {
        /**
         * Ctfmov_TypeMotr
         */
        typeMotr: number;
        /**
         * Lbfmov_ModeVehc
         */
        modeVehc: string;
        /**
         * Lbfqov_MarqVehc
         */
        marqVehc: string;
        /**
         * Ctfmvh_TypeVehc
         */
        typeVehc: number;
        /**
         * Ctfmgv_GnreVehc
         */
        gnreVehc: number;
        /**
         * Cdfmpv_PuisFisc
         */
        puisFiscal: number;
        /**
         * Ddfmpc_DatePrmeMiseCircl
         * Type date au format yyyy-MM-dd
         */
        datePrmeMiseCircl: string;
    }
    interface IBienConsoFinanceLecture extends IElementLecture {
        /**
         * Idfove_IdntVndr
         */
        idVendeur: string;
        /**
         * Mgfovh_MtInscHypt
         */
        montantInscHypotheque: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IAlerteEnEntreeLecture extends IElementLecture {
        /**
         * Nofaix_NumeAlrt
         */
        numeroAlerte: number;
        /**
         * Ctfiai_CodeAlrt
         */
        codeAlerte: number;
        /**
         * Cdfiai_CodeTrtAlrt
         */
        codeTraitementAlerte: number;
        /**
         * Dcfiai_DateEmssAlrt
         * Type date au format yyyy-MM-dd
         */
        dateEmissionAlerte: string;
        /**
         * Lbfiai_LiblAlrt
         */
        libelleAlerte: string;
    }
    interface ITauxInteretAnnuelLecture {
        /**
         * ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * TxActu
         */
        tauxActu: number;
        /**
         * TxProp
         */
        tauxProp: number;
    }
    interface ITauxIndiceLecture extends ITauxInteretAnnuelLecture {
        /**
         * Marg
         */
        marge: number;
        /**
         * ValrIndc
         */
        valeurIndice: number;
    }
    interface ITauxFixeLecture extends ITauxInteretAnnuelLecture {
    }
    interface ITauxMixteLecture extends ITauxInteretAnnuelLecture {
        /**
         * Rpar
         */
        repartition: number;
        /**
         * TxIndcCmpstTxMixt
         */
        tauxIndiceCmpstTauxMixte: ITauxIndiceLecture;
        /**
         * TxFixeCmpstTxMixt
         */
        tauxFixeCmpstTauxMixte: ITauxFixeLecture;
    }
    interface ICreditPalierProgressionLecture extends IElementLecture {
        /**
         * Nufape_NumeReltPrmeEchePalrPhas
         */
        numeroRelationPrmeEcheancePalierPhase: number;
        /**
         * Nufapp_NumeReltDernEchePalrPhas
         */
        numeroRelationDernierEcheancePalierPhase: number;
        /**
         * Txfcam_TxPrgrAmrt
         */
        tauxProgressifAmortissement: ITauxInteretAnnuelLecture;
        /**
         * Cdfdcg_CodeIndxTxPrgrAmrt
         */
        codeIndexTauxProgressifAmortissement: number;
        /**
         * Ptfcpa_CodePerdPrgrAmrt
         */
        codePeriodeProgressifAmortissement: number;
        /**
         * Npfca1_NbPerdDureePalrPrgr
         */
        nombrePeriodeDureePalierProgressif: number;
        /**
         * Ctfcam_TypeTauxProgreAmort
         */
        typeTauxProgreAmort: number;
        /**
         * IdntCredPhasAM
         */
        idCreditPhaseAM: string;
        /**
         * IdntPalrPrgrAmrtNivPrdt
         */
        idPalierProgressifAmortissementNiveauProduit: string;
    }
    interface IComplementPhasePretCombineLecture extends IElementLecture {
        /**
         * Mafaqa_MtAmrt
         */
        montantAmortissement: number;
        /**
         * Mkfaif_MtInfine
         */
        montantInfine: number;
        /**
         * Ctfapa_CodeAjtInteCapt
         */
        codeAjtInterieurCapital: number;
        /**
         * Ctfark_ModeSaisReprCapt
         */
        modeSaisieReprCapital: number;
        /**
         * Tafaqa_QuotAmrt
         */
        quotientAmortissement: number;
        /**
         * IdntCredPhasAM
         */
        idCreditPhaseAM: string;
    }
    interface IScProduitPhase extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Nofcfp_NoReltPhas
         */
        numeroRelationPhase: number;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Pefcph_UnitDurDunPhas
         */
        uniteDureeDunPhase: number;
        /**
         * Cdfcph_ModeExprDurPhas
         */
        modeExpressionDureePhase: number;
        /**
         * Npfcq1_DurPhasPrdt
         */
        dureePhaseProduit: number;
        /**
         * Npfcq2_DurPhasPrdt
         */
        dureePhaseProduit1: number;
        /**
         * Npfcq3_DurPhasPrdt
         */
        dureePhaseProduit2: number;
        /**
         * Npfcq4_DurDunPhasPas
         */
        dureeDunPhasePas: number;
        /**
         * Ptfcin_PerdicCalcIntr
         */
        periodiciteCalculIntr: number;
        /**
         * Ptfci1_PerdicCalcIntr
         */
        periodiciteCalculIntr1: number;
        /**
         * Ptfci2_PerdicCalcIntr
         */
        periodiciteCalculIntr2: number;
        /**
         * Ptfci3_PerdicCalcIntr
         */
        periodiciteCalculIntr3: number;
        /**
         * Ptfci4_PerdicCalcIntr
         */
        periodiciteCalculIntr4: number;
        /**
         * Ptfcam_PerdicMerAmrt
         */
        periodiciteMERAmortissement: number;
        /**
         * Ptfca1_PerdicMerAmrt
         */
        periodiciteMERAmortissement1: number;
        /**
         * Ptfca2_PerdicMerAmrt
         */
        periodiciteMERAmortissement2: number;
        /**
         * Ptfca3_PerdicMerAmrt
         */
        periodiciteMERAmortissement3: number;
        /**
         * Ptfca4_PerdicMerAmrt
         */
        periodiciteMERAmortissement4: number;
        /**
         * Cdfcpt_CodePerdicDiffMer
         */
        codePeriodiciteDiffereMER: number;
        /**
         * Cdfcei_CdRecvIntrTermEchu
         */
        codeRecouvrementIntrTermeEchu: number;
        /**
         * Cdfcea_CdRecvAmrtTermEchu
         */
        codeRecouvrementAmortissementTermeEchu: number;
        /**
         * Cdfccf_CdTypeConfmTxIntr
         */
        codeTypeConfirmationTauxIntr: number;
        /**
         * Cdfctx_ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * Nbfcaa_NbJourAnnNumrt
         */
        nombreJourAnnulationNumerateur: number;
        /**
         * Cdfcam_ModeCalcAmrt
         */
        modeCalculAmortissement: number;
        /**
         * Mtfckr_CaptRefrTablCste
         */
        capitalReferenceTableConstante: number;
        /**
         * Ctfcrb_TypeAsstRemb
         */
        typeAssietteRemboursement: number;
        /**
         * Cdfcva_CdVerstAutrPendPhas
         */
        codeVersementAutrePendantPhase: number;
        /**
         * Cdfcfp_CodeRedcDurPrfn
         */
        codeReductionDureePrefinancement: number;
        /**
         * Cdfcpr_CodePrlnDurPrfn
         */
        codePrelevementDureePrefinancement: number;
        /**
         * Ctfcpe_CodeTypePrfn
         */
        codeTypePrefinancement: number;
        /**
         * Cdfcip_CodeRecvPartlIntr
         */
        codeRecouvrementPartielIntr: number;
        /**
         * Cdfcir_CodeCalcIntrRepr
         */
        codeCalculIntrRepr: number;
        /**
         * Cdfcki_CodeCaptIntrDiff
         */
        codeCapitalIntrDiffere: number;
        /**
         * Ptfcci_CalcIntrJourReel
         */
        calculIntrJourReel: number;
        /**
         * Ptfcd1_PerdicMerIntr
         */
        periodiciteMERIntr: number;
        /**
         * Ptfcd2_PerdicMerIntr
         */
        periodiciteMERIntr1: number;
        /**
         * Ptfcd3_PerdicMerIntr
         */
        periodiciteMERIntr2: number;
        /**
         * Ptfcd4_PerdicMerIntr
         */
        periodiciteMERIntr3: number;
        /**
         * Ctfck2_ModeCaptIntr
         */
        modeCapitalIntr: number;
        /**
         * Ctfck1_ModeRecvIntr
         */
        modeRecouvrementIntr: number;
        /**
         * Ptfcco_PerdicCompoIntr
         */
        periodiciteCompositionIntr: number;
        /**
         * Cdfcpm_CdModeExprTxMoyePhas
         */
        codeModeExpressionTauxMoyenPhase: number;
        /**
         * Txfcp1_ValrMinTxMoyePhas
         */
        valeurMinimumTauxMoyenPhase: number;
        /**
         * Txfcp2_ValrMaxTxMoyePhas
         */
        valeurMaximumTauxMoyenPhase: number;
        /**
         * Txfcp3_ValrConsTxMoyePhas
         */
        valeurConsolideTauxMoyenPhase: number;
        /**
         * Cdfcth_CodeTxPalrCalc
         */
        codeTauxPalierCalcul: number;
        /**
         * Cdfcin_CodeIndc
         */
        codeIndice: string;
        /**
         * Nbfrvd_NbMaxiPerdVartDur
         */
        nombreMaximumPeriodeVartDuree: number;
        /**
         * Cdfcop_CodeOptnSurPhasPrdt
         */
        codeOptionSurPhaseProduit: number;
        /**
         * Cdfcoo_CodeObjtOptn
         */
        codeObjetOption: number;
        /**
         * Cdfcto_TypeOptn
         */
        typeOption: number;
        /**
         * Cdfcsr_CodeCourPourPrsDopt
         */
        codeCourtPourPresenceDopt: number;
        /**
         * Npfcsr_DelaiCourPrsDopt
         */
        delaiCourtPresenceDopt: number;
        /**
         * Pefcpo_PerdicOptn
         */
        periodiciteOption: number;
        /**
         * Nbjja1_NbJourAnnDenom
         */
        nombreJourAnnulationDenomination: number;
        /**
         * Txfccz_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement: number;
        /**
         * Tpfcc1_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement: number;
        /**
         * Tsfcc1_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement: number;
        /**
         * Pefrie_UnitPerdValrIntIndc
         */
        unitePeriodeValeurIntituleIndice: number;
        /**
         * Npfrie_NbPerdValrIntIndc
         */
        nombrePeriodeValeurIntituleIndice: number;
        /**
         * Ctfcte_CodeTypeTrtDech
         */
        codeTypeTraitementDech: number;
        /**
         * Tsfcif_QuotMaxiCaptIfin
         */
        quotientMaximumCapitalIfin: number;
        /**
         * Txfcca_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement1: number;
        /**
         * Tpfcca_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement1: number;
        /**
         * Tsfcca_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement1: number;
        /**
         * Idfrbd_IdntReglButrDur
         */
        idRegleButoireDuree: string;
    }
    interface ICreditPhaseAmortissementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcea_CodeRecvAmrtTermEchu
         */
        codeRecouvrementAmortissementTermeEchu: number;
        /**
         * Txfcqa_QuotAmrt
         */
        quotientAmortissement: number;
        /**
         * Cdfcam_ModeCalcAmrt
         */
        modeCalculAmortissement: number;
        /**
         * Cifapi_CodePrelFinPhas
         */
        codePrelFinPhase: number;
        /**
         * Txfaom_TxConstPhasCred
         */
        tauxConstructionPhaseCredit: number;
        /**
         * AmrtPossible
         */
        amortissementPossible: boolean;
        /**
         * ProgTaux
         */
        progTaux: boolean;
        /**
         * TypePretCombine
         */
        typePretCombine: string;
        /**
         * IdntCompPhasPourPretComb
         */
        idCompPhasePourPretComb: string;
        /**
         * ListIdntPalrPrgrAmrt
         */
        listeIdPalierProgressifAmortissement: Array<string>;
    }
    interface ICreditPhaseDiffereAmortissementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcip_CodeRecvPartlInte
         */
        codeRecouvrementPartielInterieur: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhaseDiffereTotalLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhaseMobilisationLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcip_CodeRecvPartlInte
         */
        codeRecouvrementPartielInterieur: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhasePrefinancementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfppf_CodeRedcDureePref
         */
        codeReductionDureePref: number;
        /**
         * Personnalisable
         */
        personnalisable: boolean;
        /**
         * Reduction
         */
        reduction: boolean;
    }
    interface ICreditPhaseLecture extends IElementLecture {
        /**
         * Cdfcir_CodeCalcInteRepr
         */
        codeCalculInterieurRepr: number;
        /**
         * Ctfcki_ModeCaptRecvInte
         */
        modeCapitalRecouvrementInterieur: number;
        /**
         * Cdfcki_CodeCaptRecvInte
         */
        codeCapitalRecouvrementInterieur: number;
        /**
         * Ptfcin_CodePerdAsscCalcInte
         */
        codePeriodeAssuranceCalculInterieur: number;
        /**
         * Ptfcam_CodePerdCalcMer
         */
        codePeriodeCalculMER: number;
        /**
         * Ptfcci_CodeCalcInteJourRels
         */
        codeCalculInterieurJourRelease: number;
        /**
         * Ptfcco_CodePerdCompoInte
         */
        codePeriodeCompositionInterieur: number;
        /**
         * Mefoso_MtPrmeecheServ
         */
        montantPrmeecheService: number;
        /**
         * Mefafr_MtPrmeecheAccsComp
         */
        montantPrmeecheAccessoireComp: number;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Cdfava_CodeIndicVerstFondAutrPendPhas
         */
        codeIndiceVersementFondAutrePendantPhase: number;
        /**
         * Dtfccr_DateCretPhas
         * Type date au format yyyy-MM-dd
         */
        dateCreationPhase: string;
        /**
         * Cdfdcf_CodeConfmTxInteCred
         */
        codeConfirmationTauxInterieurCredit: number;
        /**
         * Npfcph_NbPerdPhas
         */
        nombrePeriodePhase: number;
        /**
         * Pefcph_CodePerdDurePhas
         */
        codePeriodeDurePhase: number;
        /**
         * Txfcmg_Marge
         */
        marge: number;
        /**
         * Txfcvi_Taux
         */
        taux: number;
        /**
         * Tvfrui_Repart
         */
        repart: number;
        /**
         * TxPhasFixe
         */
        tauxPhaseFixe: number;
        /**
         * TxPhasInit
         */
        tauxPhaseInit: number;
        /**
         * DateTraitIndic
         * Type date au format yyyy-MM-dd
         */
        dateTraitIndice: string;
        /**
         * MajorBonif
         */
        majorBonif: number;
        /**
         * CalculButoirHausse
         */
        calculButoirHausse: boolean;
        /**
         * CalculButoirBaisse
         */
        calculButoirBaisse: boolean;
        /**
         * PersoButoirHausse
         */
        persoButoirHausse: boolean;
        /**
         * PersoButoirBaisse
         */
        persoButoirBaisse: boolean;
        /**
         * ModeButoirHausse
         */
        modeButoirHausse: string;
        /**
         * ModeButoirBaisse
         */
        modeButoirBaisse: string;
        /**
         * DateButoirHausse
         */
        dateButoirHausse: string;
        /**
         * DateButoirBaisse
         */
        dateButoirBaisse: string;
        /**
         * TxPhas
         */
        tauxPhase: ITauxInteretAnnuelLecture;
        /**
         * TxPhasHorsBonfMajre
         */
        tauxPhaseHorsBonificationMajre: ITauxInteretAnnuelLecture;
        /**
         * Mefiha_MtPrmeecheHorsAccs
         */
        montantPrmeecheHorsAccessoire: number;
        /**
         * Mtfacc_MtPrmeecheAccsPerd
         */
        montantPrmeecheAccessoirePeriode: number;
        /**
         * InteretsDifferes
         */
        interetsDifferes: boolean;
        /**
         * CodeRecouvCapitInterets
         */
        codeRecouvCapitInterets: number;
        /**
         * ModeRecouvInterets
         */
        modeRecouvInterets: number;
        /**
         * ModeCapitInterets
         */
        modeCapitInterets: number;
        /**
         * CapitActive
         */
        capitActive: boolean;
        /**
         * RecouvActive
         */
        recouvActive: boolean;
        /**
         * ChoixCapitalisation
         */
        choixCapitalisation: boolean;
        /**
         * ChoixRecouvrement
         */
        choixRecouvrement: boolean;
        /**
         * Capitalisation
         */
        capitalisation: boolean;
        /**
         * Recouvrement
         */
        recouvrement: boolean;
        /**
         * MtPremiereEcheance
         */
        montantPremiereEcheance: number;
        /**
         * ChoixPeriode
         */
        choixPeriode: boolean;
        /**
         * ChoixPeriodicite
         */
        choixPeriodicite: boolean;
        /**
         * EstVisibleTaux
         */
        estVisibleTaux: boolean;
        /**
         * EstVisibleMarge
         */
        estVisibleMarge: boolean;
        /**
         * ListeChoixPeriode
         */
        listeChoixPeriode: Array<number>;
        /**
         * EstActifDuree
         */
        estActifDuree: boolean;
        /**
         * EstActifPeriodicite
         */
        estActifPeriodicite: boolean;
        /**
         * EstActifTaux
         */
        estActifTaux: boolean;
        /**
         * EstActifMarge
         */
        estActifMarge: boolean;
        /**
         * ListeModeCapitalisation
         */
        listeModeCapitalisation: Array<IScConstante>;
        /**
         * ListeModeRecouvrement
         */
        listeModeRecouvrement: Array<IScConstante>;
        /**
         * EstVisibleButoirHausse
         */
        estVisibleButoirHausse: boolean;
        /**
         * EstVisibleButoirBaisse
         */
        estVisibleButoirBaisse: boolean;
        /**
         * EstActifButoirHausse
         */
        estActifButoirHausse: boolean;
        /**
         * EstActifButoirBaisse
         */
        estActifButoirBaisse: boolean;
        /**
         * EstVisibleTauxHausse
         */
        estVisibleTauxHausse: boolean;
        /**
         * EstVisibleTauxBaisse
         */
        estVisibleTauxBaisse: boolean;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntParmRevsParPhas
         */
        idParametreRevisionParPhase: string;
        /**
         * ListIdntPalrTx
         */
        listeIdPalierTaux: Array<string>;
        /**
         * PhasePrdt
         */
        phaseProduit: IScProduitPhase;
    }
    interface ICreditParamIndexationLecture extends IElementLecture {
        /**
         * Nofrpe_NumePerdRevsAsscParmIndx
         */
        numeroPeriodeRevisionAssuranceParametreIndex: number;
        /**
         * Nofcfp_NumePhasPrdtAsscParmIndx
         */
        numeroPhaseProduitAssuranceParametreIndex: number;
        /**
         * Nofrji_NumeIndcRevsCred
         */
        numeroIndiceRevisionCredit: number;
        /**
         * Ctfrri_TypeRolIndc
         */
        typeRolIndice: string;
        /**
         * Cdfcin_CodeIndcRevs
         */
        codeIndiceRevision: string;
        /**
         * Ctfrui_ModeExprUtlsIndc
         */
        modeExpressionUtilisationIndice: number;
        /**
         * Cdfrui_ValrRefeIndc
         */
        valeurReferenceIndice: number;
        /**
         * Tvfrui_ValrCoefParmRevs
         */
        valeurCoefficientParametreRevision: number;
        /**
         * Cdfrop_CodeReptModfeche
         */
        codeReptModfeche: number;
        /**
         * Ctfrop_ModeReptModfeche
         */
        modeReptModfeche: number;
        /**
         * Nrfrrv_EvenDeclRevs
         */
        evenDeclarationRevision: string;
        /**
         * Nrfrr1_EvenDeclPrmeRevs
         */
        evenDeclarationPrmeRevision: string;
        /**
         * Npfrp1_NbPerdDetrPrmePerdRevs
         */
        nombrePeriodeDetrPrmePeriodeRevision: number;
        /**
         * Pefrp1_CodePerdDelUtlsDetrDatePrmeRevs
         */
        codePeriodeDelUtilisationDetrDatePrmeRevision: number;
        /**
         * Cdfrpj_CodeJourRevs
         */
        codeJourRevision: string;
        /**
         * Cdfrpp_CodeMoisRevs
         */
        codeMoisRevision: string;
        /**
         * Qcfrpj_NbJourAjtPourDetrDatePrmeRevs
         */
        nombreJourAjtPourDetrDatePrmeRevision: number;
        /**
         * Cnfrut_NatrLimtVart
         */
        natureLimiteVart: number;
        /**
         * Cdfrut_CodeValrRefeVartMaxi
         */
        codeValeurReferenceVartMaximum: number;
        /**
         * Ctfrut_ModeExprVartTxIndc
         */
        modeExpressionVartTauxIndice: number;
        /**
         * Tvfrut_ValrVartTxIndc
         */
        valeurVartTauxIndice: number;
        /**
         * Nrfrie_CodeEvenPermDetrValrIntlIndc
         */
        codeEvenPermDetrValeurInitialIndice: string;
        /**
         * Dtfrie_DateFixeDetrValrIntlIndc
         * Type date au format yyyy-MM-dd
         */
        dateFixeDetrValeurInitialIndice: string;
        /**
         * Npfrie_NbPerdDelEvenDetrDateValrIntlIndc
         */
        nombrePeriodeDelEvenDetrDateValeurInitialIndice: number;
        /**
         * Pefrie_CodePerdDelUtlsDetrValrIntlIndc
         */
        codePeriodeDelUtilisationDetrValeurInitialIndice: number;
        /**
         * Cdfrve_CodeIndicValrRefeVartEche
         */
        codeIndiceValeurReferenceVartEcheance: number;
        /**
         * Tvfrve_ValrVartMaxiEche
         */
        valeurVartMaximumEcheance: number;
        /**
         * IdntParmRevs
         */
        idParametreRevision: string;
    }
    interface ICreditParamRevisionParPeriodeLecture extends ICreditParamRevisionLecture {
        /**
         * Nofpre_NumePerdPrdt
         */
        numeroPeriodeProduit: number;
        /**
         * Npfrpf_NbPerdDurePerd
         */
        nombrePeriodeDurePeriode: number;
        /**
         * Ptfrpe_CodePerdDurePerd
         */
        codePeriodeDurePeriode: number;
        /**
         * Nxfrpe_EvenDeclDebtPerd
         */
        evenDeclarationDebutPeriode: string;
        /**
         * Npfrpe_NbPerdCmpstDelPremPerdRevs
         */
        nombrePeriodeCmpstDelPremierPeriodeRevision: number;
        /**
         * Pefrpe_CodePerdCorrNbPerdCmpstDel
         */
        codePeriodeCorrNombrePeriodeCmpstDel: number;
    }
    interface ICreditParamRevisionParPhaseLecture extends ICreditParamRevisionLecture {
        /**
         * Ctfcfp_CodeTypePhasAsscParmRevs
         */
        codeTypePhaseAssuranceParametreRevision: string;
    }
    interface ICreditParamRevisionLecture extends IElementLecture {
        /**
         * Idfrlr_IdntLoiRevs
         */
        idLoiRevision: string;
        /**
         * Nofrji_NumeJeuIndcRevsAsscCred
         */
        numeroJeuxIndiceRevisionAssuranceCredit: number;
        /**
         * Cdfres_CodeIndicecheRecl
         */
        codeIndicecheReclame: number;
        /**
         * Ctfrub_ModeExprButrTxBais
         */
        modeExpressionButoireTauxBaisse: number;
        /**
         * Ctfruh_ModeExprButrTxHaus
         */
        modeExpressionButoireTauxHausse: number;
        /**
         * Tvfru1_ValrButrTxBais
         */
        valeurButoireTauxBaisse: number;
        /**
         * Tvfru2_ValrButrTxHaus
         */
        valeurButoireTauxHausse: number;
        /**
         * Llfrlr_LibelleLoiRevision
         */
        libelleLoiRevision: string;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * ListIdntParmIndx
         */
        listeIdParametreIndex: Array<string>;
    }
    interface IEcheanceOptimisationLecture extends IElementLecture {
        /**
         * Mefhcd_MtRembSais
         */
        montantRemboursementSaisie: number;
        /**
         * Ctfhel_CodeTypeElemSais
         */
        codeTypeElementSaisie: number;
        /**
         * IdntPalrTx
         */
        idPalierTaux: string;
    }
    interface ICreditPalierTauxLecture extends IElementLecture {
        /**
         * TxIntePalr
         */
        tauxInterieurPalier: ITauxInteretAnnuelLecture;
        /**
         * Ctfctb_CodeTypeRemb
         */
        codeTypeRemboursement: number;
        /**
         * Txfcpg_TxPrgrEcheSurPalr
         */
        tauxProgressifEcheanceSurPalier: number;
        /**
         * Pefcpg_CodePerdAppliTxPrgrEchePalr
         */
        codePeriodeApplicationTauxProgressifEcheancePalier: number;
        /**
         * Nufape_NumeReltPrmeEchePalr
         */
        numeroRelationPrmeEcheancePalier: number;
        /**
         * Nufapp_NumeReltDernEchePalr
         */
        numeroRelationDernierEcheancePalier: number;
        /**
         * Npfcal_NbPerdDureePalr
         */
        nombrePeriodeDureePalier: number;
        /**
         * IdntCredPhas
         */
        idCreditPhase: string;
        /**
         * ListIdntEcheOptm
         */
        listeIdEcheanceOptimisation: Array<string>;
        /**
         * IdntPalrTxAsscPrdt
         */
        idPalierTauxAssuranceProduit: string;
    }
    interface ITrancheELLecture extends IElementLecture {
        /**
         * Txfpep_TxEpar
         */
        tauxEpargne: number;
        /**
         * Mtfaac_MtDrtAcqs
         */
        montantDroitAcqs: number;
        /**
         * Dtfpae_DateArreEpar
         * Type date au format yyyy-MM-dd
         */
        dateArreEpargne: string;
        /**
         * Lbfpet_LibletblOrigDrtPret
         */
        libletblOrigineDroitPret: string;
        /**
         * Cdfdpj_CodeDrtJust
         */
        codeDroitJustificatif: number;
        /**
         * Cdfiel_CodeRaptContEparLogm
         */
        codeRaptContratEpargneLogement: number;
        /**
         * Mtfida_MtDrtAcqsDepsOrigContEparLogm
         */
        montantDroitAcqsDepsOrigineContratEpargneLogement: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfird_CodeResrDrtAcqs
         */
        codeResrDroitAcqs: number;
        /**
         * IdntDrtUtls
         */
        idDroitUtilisation: string;
        /**
         * IdntContEparLogm
         */
        idContratEpargneLogement: string;
    }
    interface ICreditModaliteLecture extends IElementLecture {
        /**
         * Idfcmi_IdntModlCalcImpe
         */
        idModeleCalculImpe: string;
        /**
         * Txfdri_TxIndmRembAntc
         */
        tauxIndemniteRemboursementAnticipe: number;
        /**
         * Nofcmc_NumeModlRembAntc
         */
        numeroModeleRemboursementAnticipe: number;
        /**
         * Txfcsr_SurcTxParRappRembAntc
         */
        surcTauxParRappRemboursementAnticipe: number;
        /**
         * Txffmi_TxInteRetdImpe
         */
        tauxInterieurRetardImpe: number;
        /**
         * Mtffmi_MtIndmImpe
         */
        montantIndemniteImpe: number;
        /**
         * Cdfccr_CodeTrtInteIntrSurImpe
         */
        codeTraitementInterieurIntrSurImpe: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface ICompteCourantLecture extends IElementLecture {
        /**
         * Mtfasc_MtHyptCapt
         */
        montantHypothequeCapital: number;
        /**
         * Cifcmh_CodeIndicBlcgSaisMtHyptCapt
         */
        codeIndiceBlcgSaisieMontantHypothequeCapital: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface ICreditBonificationInfoLecture extends IElementLecture {
        /**
         * Cdfdic_CodeInfo
         */
        codeInformation: string;
        /**
         * sCdfddi_CodeDetail
         */
        codeDetail: string;
    }
    interface ICreditBonificationLecture extends IElementLecture {
        /**
         * Idfdce_IdCreditExterne
         */
        idCreditExterne: string;
        /**
         * Cifdcm_CodeEtat
         */
        codeEtat: number;
        /**
         * Mefdbc_MontantEtablissement
         */
        montantEtablissement: number;
        /**
         * Mefdbr_MontantPartenaire
         */
        montantPartenaire: number;
        /**
         * EstEligible
         */
        estEligible: boolean;
        /**
         * Lbfpnm_NomPartenaire
         */
        nomPartenaire: string;
        /**
         * ModeCalculTaux
         */
        modeCalculTaux: number;
        /**
         * TauxHorsBonif
         */
        tauxHorsBonif: number;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * Infos
         */
        information: Array<ICreditBonificationInfoLecture>;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface IHypothequeAerienneLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeSer
         */
        numeroSer: string;
        /**
         * Lbfolt_NumeImmt
         */
        numeroImmt: string;
    }
    interface IBonDeCaisseCapitalisationLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_NumeSiren
         */
        numeroSiren: string;
        /**
         * Lbfoo2_ValrBonOrig
         */
        valeurBonOrigine: number;
        /**
         * Lbfoo3_NumeContTitr
         */
        numeroContratTitre: string;
        /**
         * Lbfoo4_NatrBon
         */
        natureBon: string;
        /**
         * Lbfoo5_Dateeche
         * Type date au format yyyy-MM-dd
         */
        dateeche: string;
        /**
         * Lbfoo6_TitrNomPrenDeps
         */
        titreNomPrenDeps: string;
    }
    interface IDelegationLoyerLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_MtAnnuLoye
         */
        montantAnnuLoye: number;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_DateExtnBail
         * Type date au format yyyy-MM-dd
         */
        dateExterneBail: string;
        /**
         * Lbfoo2_NomGern
         */
        nomGern: string;
    }
    interface ICessionDaillyAutreLecture extends IBienPorteEnGarantieLecture {
    }
    interface IContratAssuranceLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_DateNaisAssr
         * Type date au format yyyy-MM-dd
         */
        dateNaisAssurance: string;
        /**
         * Lbfolt_NumeContAssr
         */
        numeroContratAssurance: string;
        /**
         * Lbfoo1_NomCieAssr
         */
        nomCieAssurance: string;
        /**
         * Lbfoo2_NumeSiren
         */
        numeroSiren: string;
        /**
         * Lbfoo3_CntrGest
         */
        cntrGestion: string;
        /**
         * Lbfoo4_TypeTechJurd
         */
        typeTechniqueJuridique: string;
        /**
         * Lbfoo5_NomContAssr
         */
        nomContratAssurance: string;
        /**
         * Lbfoo6_ApprPers
         */
        apportPersonne: number;
        /**
         * Lbfoo7_MtMinmVerstSign
         */
        montantMinimumVersementSigne: number;
        /**
         * Cdfvat_CodeIndicAttnVerst
         */
        codeIndiceAttnVersement: number;
        /**
         * ListIdntVerstAttn
         */
        listeIdVersementAttn: Array<string>;
    }
    interface IAntichreseLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_RefeCads
         */
        referenceCads: string;
        /**
         * Lbfolt_NumeLot
         */
        numeroLot: string;
    }
    interface ICessionDaillyLoyerImmeubleLecture extends IBienPorteEnGarantieLecture {
    }
    interface IGageVehiculeLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeSer
         */
        numeroSer: string;
        /**
         * Lbfolt_NumeImmt
         */
        numeroImmt: string;
    }
    interface IGageCompteInstrumentFinancierLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
    }
    interface INantissementPartSocialeLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeEnrg
         */
        numeroEnregistrement: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
        /**
         * Lbfoo1_TitrInte
         */
        descriptionOtion: string;
    }
    interface INantissementValeurMaterielleLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_TypeValrMatr
         */
        typeValeurMatrimonial: string;
        /**
         * Lbfolt_NumeSer
         */
        numeroRefTypeLot: string;
    }
    interface INantissementValeurMobiliereLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Etab
         */
        referenceCadastrale: string;
        /**
         * Lbfolt_NumeCpte
         */
        numeroCompte: string;
    }
    interface INantissementFondDeCommerceLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_NumeInscRcs
         */
        numeroInscRcs: string;
        /**
         * Lbfolt_LiblLibr
         */
        libelleLibr: string;
        /**
         * Cdfomo_TitrOccpLocLeqlFondEstExpl
         */
        titreOccpLocLeqlFondEstExpl: number;
    }
    interface IHypothequeImmobiliereLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_RefeCads
         */
        referenceCads: string;
        /**
         * Lbfolt_RefeLot
         */
        referenceLot: string;
        /**
         * Ctfmoi_TypeBien
         */
        typeBien: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * Cdfcdo_DestBien
         */
        destinataireBien: number;
        /**
         * Nbfosh_SurfHabt
         */
        surfHabitation: number;
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfcoi_ZoneImplBien
         */
        zoneImplBien: string;
        /**
         * Cdfqem_QualEmpla
         */
        qualEmpla: number;
        /**
         * Lbfoo1_MtDernMutt
         */
        montantDernierMutt: string;
        /**
         * Lbfoo2_DateDernMutt
         */
        dateDernierMutt: string;
        /**
         * Dtfoco_AnneConst
         */
        anneConstruction: number;
        /**
         * Lbfoo3_MtAnnuLoye
         */
        montantAnnuLoye: string;
        /**
         * Lbfoo5_NumeLotCopr
         */
        numeroLotCopr: string;
        /**
         * Lbfoo4_NumeSctn
         */
        numeroSctn: string;
        /**
         * Cifcoc_OccpActlBien
         */
        occpActuarielBien: number;
        /**
         * Cifcph_CodePresHypt
         */
        codePresHypotheque: number;
        /**
         * Idfceb_IdntExpr
         */
        idExpression: string;
        /**
         * Dtfcde_DateDemnExpr
         * Type date au format yyyy-MM-dd
         */
        dateDemandeExpression: string;
        /**
         * ListIdntProprios
         */
        listeIdProprios: Array<string>;
        /**
         * ListIdntRefCadastrls
         */
        listeIdReferenceCadastrls: Array<string>;
        /**
         * ListIdntRefLot
         */
        listeIdReferenceLot: Array<string>;
        /**
         * Dtfoac_DateAcquisitio
         * Type date au format yyyy-MM-dd
         */
        dateAcquisition: string;
        /**
         * Mtfoac_CoutAcquisition
         */
        coutAcquisition: number;
        /**
         * Nbfosa_SurfaceAnnexes
         */
        surfaceAnnexes: number;
        /**
         * Cdfomo_ModaliteOccupation
         */
        numeroDeVolume: number;
    }
    interface IBienDiversLecture extends IBienPorteEnGarantieLecture {
        /**
         * Lbfoca_Refe1
         */
        reference1: string;
        /**
         * Lbfolt_Refe2
         */
        reference2: string;
    }
    interface IBienPorteEnGarantieLecture extends IElementLecture {
        /**
         * Lbfoof_LiblObjt
         */
        libelleObjet: string;
        /**
         * Cdfcni_TypeObjtComl
         */
        typeObjetCommercialisation: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Mtfgo2_MtEstmPrdn
         */
        montantEstmPrdn: number;
        /**
         * Dtfgo2_DateEstmPrdn
         * Type date au format yyyy-MM-dd
         */
        dateEstmPrdn: string;
        /**
         * Cdfgm2_CodeModlEstmPrdn
         */
        codeModeleEstmPrdn: string;
        /**
         * Cmfgt2_CodeMotfReSPrdn
         */
        codeMotfReSPrdn: string;
        /**
         * Dtfiex_DateExprBienCff
         * Type date au format yyyy-MM-dd
         */
        dateExpressionBienCff: string;
        /**
         * Lbfpex_NoteExprBienCff
         */
        noteExpressionBienCff: number;
        /**
         * Idfoof_IdntObjtGest
         */
        idObjetGestion: string;
        /**
         * PorteSurProjet
         */
        porteSurProjet: boolean;
        /**
         * Cifaan_SouscriptionContratAssurance
         */
        souscriptionContratAssurance: boolean;
        /**
         * IdntGarnReel
         */
        idGarantieReel: string;
    }
    interface ICreditHDLecture extends IElementLecture {
        /**
         * Txfgcr_Quot
         */
        pourcentCreditCouvert: number;
        /**
         * Mkfaco_CaptCouv
         */
        capitalCouverture: number;
        /**
         * Dtfgaf_DateAffec
         * Type date au format yyyy-MM-dd
         */
        dateAffectation: string;
        /**
         * Dffgaf_DateFinAffec
         * Type date au format yyyy-MM-dd
         */
        dateFinAffectation: string;
        /**
         * Idfcct_RefrPret
         */
        referencePret: string;
        /**
         * Idfadi_IdntDossRefe
         */
        idDossierReference: string;
        /**
         * Lbfcvs_LiblPret
         */
        libellePret: string;
        /**
         * Mtfaoc_MtPret
         */
        montantPret: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cnfctx_CodeRevs
         */
        codeRevision: boolean;
        /**
         * Txfama_Taux
         */
        tauxMoyen: number;
        /**
         * Cdfcin_CodeIndc
         */
        codeIndice: string;
        /**
         * Txfrrv_MargRevs
         */
        margeRevision: number;
        /**
         * Dtfam0_DateMer0
         * Type date au format yyyy-MM-dd
         */
        dateMER0: string;
        /**
         * Dtfaef_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffacr_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Mkfard_Crd
         */
        cRDCredit: number;
        /**
         * Mefmpe_MtEchnTotl
         */
        montantEcheanceTotal: number;
        /**
         * Cdfcno_NatrPret
         */
        naturePret: string;
        /**
         * Nufpct_NumrContEpar
         */
        numeroContratEpargne: string;
        /**
         * Mtfggi_MtIntlGarn
         */
        montantInitialGarantie: number;
        /**
         * EtabPrtr
         */
        etabPrtr: string;
        /**
         * Npfcfi_NbPerdCred
         */
        nombrePeriodeCredit: number;
        /**
         * Pefcfi_CodePerdCred
         */
        codePeriodeCredit: number;
        /**
         * TegModeRestitution
         */
        tegModeRestitution: number;
        /**
         * IdntCrdtExst
         */
        idCreditExiste: string;
    }
    interface IGarantieHDLecture extends IElementLecture {
        /**
         * Cdfcng_NatrGarnHorsDoss
         */
        natureGarantieHorsDossier: string;
        /**
         * Idfgg1_IdntOrigGarnHorsDoss
         */
        idOrigineGarantieHorsDossier: string;
        /**
         * CodeGarnRchab
         */
        codeGarantieRchab: number;
        /**
         * Nofghy_RangPrncHypt
         */
        rangPrincipalHypotheque: number;
        /**
         * Nofgsh_RangSecnHypt
         */
        rangSecnHypotheque: number;
        /**
         * Cdfgrh_CodeCessRangHypt
         */
        codeCessRangHypotheque: number;
        /**
         * IdnttblPrt
         */
        idEtabPreteur: string;
        /**
         * VilleConsvHypt
         */
        villeConsvHypotheque: string;
        /**
         * DatePublHypt
         * Type date au format yyyy-MM-dd
         */
        datePublHypotheque: string;
        /**
         * RfVolm
         */
        refVolume: string;
        /**
         * NumVolm
         */
        numeroVolume: number;
        /**
         * DateEfftHypt
         * Type date au format yyyy-MM-dd
         */
        dateEffetHypotheque: string;
        /**
         * DateFinHypt
         * Type date au format yyyy-MM-dd
         */
        dateFinHypotheque: string;
        /**
         * LiblEmpr
         */
        libelleEmprunt: string;
        /**
         * LiblNotr
         */
        libelleNotaire: string;
        /**
         * VilleNotr
         */
        villeNotaire: string;
        /**
         * MtInscHyptOrig
         */
        montantInscHypothequeOrigine: number;
        /**
         * MtHyptDisp
         */
        montantHypothequeDisp: number;
        /**
         * DateDispMt
         * Type date au format yyyy-MM-dd
         */
        dateDispMontant: string;
        /**
         * Cdfgpc_PactCommr
         */
        pactCommr: string;
        /**
         * Cefggi_CodEttGarn
         */
        codeEtatGarantie: number;
        /**
         * Cdfgex_CodeIndicGarnExtn
         */
        codeIndiceGarantieExterne: number;
        /**
         * CodeIndicTrfoGarn
         */
        codeIndiceTrfoGarantie: number;
        /**
         * Npfgdg_DurIntlMois
         */
        dureeInitialMois: number;
        /**
         * Idfoof_IdntObjtPortGarn
         */
        idObjetPortGarantie: string;
        /**
         * Ctfggm_CodeTypeGarnMyss
         */
        codeTypeGarantieMyss: string;
        /**
         * IdntGarnReel
         */
        idGarantieReel: string;
        /**
         * ListIdntCredExstHorsDoss
         */
        listeIdCreditExisteHorsDossier: Array<string>;
    }
    interface ITrancheMontantLecture extends IElementLecture {
        /**
         * Nufctr_NumeTrchMt
         */
        numeroTrancheMontant: number;
        /**
         * Txfcaa_TxTrchMt
         */
        tauxTrancheMontant: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * IdntCots
         */
        idCotisation: string;
        /**
         * IdntRemsClnt
         */
        idRemsClient: string;
    }
    interface ICotisationDerogationLecture extends ICotisationLecture {
        /**
         * Nufctr_NumeTrchAge
         */
        numeroTrancheAge: number;
        /**
         * Npfcap_NbPerdAppliDerg
         */
        nombrePeriodeApplicationDerogation: number;
        /**
         * Pefcap_PerdAppliDerg
         */
        periodeApplicationDerogation: number;
    }
    interface ICotisationTrancheAgeLecture extends ICotisationLecture {
        /**
         * Nufctr_NumeTrchAge
         */
        numeroTrancheAge: number;
        /**
         * Nbfcai_AgeMini
         */
        ageMinimum: number;
        /**
         * Nbfcae_AgeMaxi
         */
        ageMaximum: number;
    }
    interface ICotisationPhaseLecture extends ICotisationLecture {
        /**
         * IdntPhas
         */
        idPhase: string;
    }
    interface ICotisationPeriodeLecture extends ICotisationLecture {
        /**
         * Nufctr_NumeTrch
         */
        numeroTranche: number;
        /**
         * Npfcap_NbPerdPerd
         */
        nombrePeriodePeriode: number;
        /**
         * Pefcap_PerdPerd
         */
        periodePeriode: number;
        /**
         * Npfcel_NbPerdEtlm
         */
        nombrePeriodeEtlm: number;
        /**
         * Pefcde_PerdEtlm
         */
        periodeEtlm: number;
    }
    interface ICotisationLecture extends IElementLecture {
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: number;
        /**
         * CodeIndicBlcgSaisMont
         */
        codeIndiceBlcgSaisieMontant: number;
        /**
         * Ctfhac_CodeModeCalc
         */
        codeModeCalcul: number;
        /**
         * Cdfcap_CodeIndicApplEche
         */
        codeIndiceApplicationEcheance: boolean;
        /**
         * Pefcac_CodePerdCalc
         */
        codePeriodeCalcul: number;
        /**
         * Dtfhac_DateApplCots
         * Type date au format yyyy-MM-dd
         */
        dateApplicationCotisation: string;
        /**
         * Ddfhac_DateDebtAppliCots
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplicationCotisation: string;
        /**
         * Dffhac_DateFinAppliCots
         * Type date au format yyyy-MM-dd
         */
        dateFinApplicationCotisation: string;
        /**
         * Cdfceh_CodeRecv
         */
        codeRecouvrement: number;
        /**
         * Mtfhac_MtAsst
         */
        montantAssiette: number;
        /**
         * Ctfcac_TypeAccs
         */
        typeAccessoire: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
        /**
         * Ctfcel_CodeTypeAsstCalculElt
         */
        codeTypeAssietteCalculElt: string;
        /**
         * Cdfc1a_CodeRegleEvtPremierAppel
         */
        codeRegleEvenementPremierAppel: string;
        /**
         * Ctftva_CodeTypeTvaAcc
         */
        codeTypeTVAAccessoire: string;
        /**
         * Npfdaa_NbJoursAnneeNumerateur
         */
        nombreJoursAnneeNumerateur: number;
        /**
         * Npfdad_NbJoursAnneeDenominateur
         */
        nombreJoursAnneeDenominateur: number;
        /**
         * Npfce1_NbPerdAppliCots
         */
        nombrePeriodeApplicationCotisation: number;
        /**
         * Pefcde_PerdAppliCots
         */
        periodeApplicationCotisation: number;
        /**
         * Nrfccr_NumeReglCalcCots
         */
        numeroRegleCalculCotisation: string;
        /**
         * Nrfcmr_NumeReglAppliCots
         */
        numeroRegleApplicationCotisation: string;
        /**
         * Ctfcia_CodeTypeAppliCots
         */
        codeTypeApplicationCotisation: number;
        /**
         * Mtfgfr_MtFrsGarn
         */
        montantFrsGarantie: number;
        /**
         * Txfcac_TxConsFrsDoss
         */
        tauxConsolideFrsDossier: number;
        /**
         * Mtfca5_MtConsFrsDoss
         */
        montantConsolideFrsDossier: number;
        /**
         * Txfipf_PartFinn
         */
        partFinancier: number;
        /**
         * CodeIndicDepsBorn
         */
        codeIndiceDepsBorne: number;
        /**
         * Cifcip_CodeIndicIntePlanFinn
         */
        codeIndiceInterieurPlanFinancier: number;
        /**
         * IdntAccs
         */
        idAccessoire: string;
        /**
         * IdntCouv
         */
        idCouverture: string;
        /**
         * ListIdntTrchMt
         */
        listeIdTrancheMontant: Array<string>;
        /**
         * IdntRemsClnt
         */
        idRemsClient: string;
    }
    interface IRemiseClientLecture extends IElementLecture {
        /**
         * Ctfcrm_TypeRemsClnt
         */
        typeRemsClient: string;
        /**
         * MtAppl
         */
        montantApplication: number;
        /**
         * TxAppl
         */
        tauxApplication: number;
        /**
         * MargAppl
         */
        margeApplication: number;
        /**
         * Mtfirm_MtDerg
         */
        montantDerogation: number;
        /**
         * Txfirt_TxDerg
         */
        tauxDerogation: number;
        /**
         * Txfira_MargDerg
         */
        margeDerogation: number;
        /**
         * Mtfcac_MtCons
         */
        montantConsolide: number;
        /**
         * Txfcac_TxCons
         */
        tauxConsolide: number;
        /**
         * Txfcmc_MargCons
         */
        margeConsolide: number;
        /**
         * Cdfctx_ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * Dtfccr_DateCret
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Mtfire_MtRems
         */
        montantRems: number;
        /**
         * Mtfird_MtRemsDerg
         */
        montantRemsDerogation: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntCots
         */
        idCotisation: string;
        /**
         * IdntTrch
         */
        idTranche: string;
    }
    interface IPoolEPSLecture extends IElementLecture {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfaop_IdntOprtCess
         */
        idOprtCess: string;
        /**
         * Idfccf_IdntCadrFinn
         */
        idCadreFinancier: string;
        /**
         * Cnflpo_CodeNatrPool
         */
        codeNaturePool: number;
        /**
         * Cdfcor_CodeOrigCess
         */
        codeOrigineCess: number;
        /**
         * Ctfesr_TypeSousRolePool
         */
        typeSousRolePool: number;
        /**
         * Nofcca_NumVersionCadre
         */
        numeroVersionCadre: number;
    }
    interface IPayeurLecture extends IElementLecture {
        /**
         * Mtfdfx_MtPaieCred
         */
        montantPaiementCredit: number;
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
        /**
         * Cdfdrg_ModeReglUtlsParPayr
         */
        modeRegleUtilisationParPayr: string;
        /**
         * Nufddt_NumeCptePayr
         */
        numeroComptePayr: string;
        /**
         * Idfdma_RefeUnqMand
         */
        referenceUniqueMand: string;
        /**
         * Dgfdma_DateSignMand
         * Type date au format yyyy-MM-dd
         */
        dateSigneMand: string;
        /**
         * Cdfdrs_ModeReglUtlsParPayrSecours
         */
        modeRegleUtilisationParPayrSecours: string;
        /**
         * NumeroComptePayeurSecours
         */
        numeroComptePayeurSecours: string;
        /**
         * Idfdms_RefeUnqMandSecours
         */
        referenceUniqueMandSecours: string;
        /**
         * Dgfdms_DateSignMandSecours
         * Type date au format yyyy-MM-dd
         */
        dateSigneMandSecours: string;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntPersIdntCommPayr
         */
        idPersonneIdCommissionPayr: string;
    }
    interface IRelationEntrePersonnesLecture extends IElementLecture {
        /**
         * Cnfcrp_CodeNatureRelation
         */
        codeNatureRelation: string;
        /**
         * IdntPers1
         */
        idPersonne1: string;
        /**
         * IdntPers2
         */
        idPersonne2: string;
    }
    interface IPersonneMoraleLecture extends IPersonneLecture {
        /**
         * Nufpin_NumeInsee
         */
        numeroINSEE: string;
        /**
         * Dtfpir_DateInscRcs
         * Type date au format yyyy-MM-dd
         */
        dateInscRcs: string;
        /**
         * Dtfpcs_DateCretSoce
         * Type date au format yyyy-MM-dd
         */
        dateCreationSoce: string;
        /**
         * Mcfpch_ChffAffrHtExrcPrec
         */
        chiffreAffrHtExrcPrec: number;
        /**
         * Nbfpsa_NbSalr
         */
        nombreSalr: number;
        /**
         * Cdfpfj_FormJurd
         */
        formeJuridique: string;
        /**
         * Lbfpfj_LiblFormJurd
         */
        libelleFormeJuridique: string;
        /**
         * Cdfpdp_TypeDrtPersMorl
         */
        typeDroitPersonneMorl: number;
        /**
         * Mkfpca_MtCapt
         */
        montantCapital: number;
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
        /**
         * ListRolePersPhys
         */
        listeRolePersonnePhys: Array<string>;
    }
    interface IEtatDossierAssuranceLecture {
        /**
         * LibelleEtat
         */
        libelleEtat: string;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * LibelleDemande
         */
        libelleDemande: string;
        /**
         * LibelleDateEnvoi
         */
        libelleDateEnvoi: string;
    }
    interface IDecisionDossierAssuranceLecture {
        /**
         * AccesLectureDecision
         */
        accessoireLectureDecision: boolean;
        /**
         * AvisValide
         */
        avisValide: boolean;
        /**
         * CodeDecision
         */
        codeDecision: number;
        /**
         * LibelleCredit
         */
        libelleCredit: string;
        /**
         * LibelleAvis
         */
        libelleAvis: string;
        /**
         * LibelleErreur
         */
        libelleErreur: string;
    }
    interface IDossierAssuranceLecture {
        /**
         * EtatDossierAssurance
         */
        etatDossierAssurance: IEtatDossierAssuranceLecture;
        /**
         * DecisionDossierAssurance
         */
        decisionDossierAssurance: IDecisionDossierAssuranceLecture;
    }
    interface IPersonnePhysiqueLecture extends IPersonneLecture {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpci_LiblTitrCivl
         */
        libelleTitreCivilite: string;
        /**
         * Lbfppn_Prnm
         */
        prenom: string;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Lbfpnj_NomJeunFill
         */
        nomJeunFill: string;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNais: string;
        /**
         * Lbfpna_LieuNais
         */
        lieuNais: string;
        /**
         * Cdfpce_CodePersCe
         */
        codePersonneCE: number;
        /**
         * Cdfprm_CodeRegmMatr
         */
        codeRegimeMatrimonial: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Lbfpsf_LibelleSittFaml
         */
        libelleSituationFamille: string;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpsp_CateSoc
         */
        cateInteret: string;
        /**
         * Lbfmfc_LiblCatSocioPro
         */
        libelleCatSocioPro: string;
        /**
         * Dtfpma_DateEfftSittFaml
         * Type date au format yyyy-MM-dd
         */
        dateEffetSituationFamille: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmlo_CodeModeLogm
         */
        codeModeLogement: number;
        /**
         * Lbfmlo_LibelleModeLogm
         */
        libelleModeLogement: string;
        /**
         * Dtfmlo_DateEntrLogm
         * Type date au format yyyy-MM-dd
         */
        dateEntrLogement: string;
        /**
         * Cdfmju_CodeCapcJurd
         */
        codeCapcJuridique: number;
        /**
         * LibelleCapaciteJurd
         */
        libelle_CapaciteJuridique: string;
        /**
         * Ctfccj_CodeTypeCapJurd
         */
        codeTypeCapJuridique: string;
        /**
         * Cdfmnt_CodeNatn
         */
        codeNational: number;
        /**
         * LibelleNationalite
         */
        libelle_Nationalite: string;
        /**
         * Cdfmtd_CodeSaisAvisTierDtnr
         */
        codeSaisieAvisTiersDtnr: number;
        /**
         * Cdfmcx_CodeCtx
         */
        codeContentieuxHorsComptCE: number;
        /**
         * Mtfmes_MtEncrSaccefHorsOprt
         */
        montantEncoursSaccefHorsOprt: number;
        /**
         * Cdfmtr_TypeTrspUtls
         */
        typeTrspUtilisation: number;
        /**
         * Cdfmge_CodeGeotAdrsDomc
         */
        codeGeotAdresseDomiciliation: string;
        /**
         * Cdfppb_CodePaysResdEmpr
         */
        codePaysResdEmprunt: string;
        /**
         * Cdfopb_CodePaysLocsEmpr
         */
        codePaysLocalisationEmprunt: string;
        /**
         * Cdfkpa_CodePrflEmpr
         */
        codeProfilEmprunt: number;
        /**
         * Cofcpn_CodePstlLieuNais
         */
        codePstlLieuNais: string;
        /**
         * DossierAssurance
         */
        dossierAssurance: IDossierAssuranceLecture;
        /**
         * IdntActv
         */
        idActivite: string;
        /**
         * IdntIntdBanc
         */
        idIntdBancaire: string;
        /**
         * ListIdntOpps
         */
        listeIdOpps: Array<string>;
        /**
         * Lbfce1_LbAdrEPS1
         */
        libelleAdresseEPS1: string;
        /**
         * Lbfce2_LbAdrEPS2
         */
        libelleAdresseEPS2: string;
        /**
         * Lbfce3_LbAdrEPS3
         */
        libelleAdresseEPS3: string;
        /**
         * Lbfce4_LbAdrEPS4
         */
        libelleAdresseEPS4: string;
        /**
         * Lbfce5_LbAdrEPS5
         */
        libelleAdresseEPS5: string;
        /**
         * Codaac_CatSocioPro
         */
        categorieSocioProfessionnelle: string;
        /**
         * Irdqsn_NumSirenEnt
         */
        numeroSirenEntreprise: string;
        /**
         * Lbfprm_LbRegMat
         */
        libelleRegimeMatrimonial: string;
        /**
         * Llfco1_LbClsRegMat
         */
        libelleClauseRegimeMatrimonial: string;
        /**
         * IdntEntrepreneurIndiv
         */
        idEntrepreneurIndiv: string;
        /**
         * IdntSignataire
         */
        idSignataire: string;
    }
    interface IPersonneLecture extends IElementLecture {
        /**
         * Cdfprs_CrteResd
         */
        crteResd: number;
        /**
         * LiblResidence
         */
        libelleResidence: string;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_CateTypeAdmnBafi
         */
        cateTypeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Idfpbd_CleBdf
         */
        cleBDF: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Dtfper_DateEntrReltAvecCons
         * Type date au format yyyy-MM-dd
         */
        dateEntrRelationAvecConsolide: string;
        /**
         * Cdfptp_CodeTypePers
         */
        codeTypePersonne: number;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Cdfpap_CodeAssmPartc
         */
        codeAssmPartc: number;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
        /**
         * Lbfpen_EnsgComm
         */
        ensgCommission: string;
        /**
         * Lbfpir_LieuInscRC
         */
        lieuInscRC: string;
        /**
         * Nufpir_NumeInscRC
         */
        numeroInscRC: string;
        /**
         * Ctfprp_RolsPersPourDoss
         */
        rolsPersonnePourDossier: Array<string>;
        /**
         * PersEstAssr
         */
        personneEstAssurance: boolean;
        /**
         * Nofpem_NumeOrdrPersEmpr
         */
        numeroOrdrePersonneEmprunt: number;
        /**
         * Ctfipe_CodeTypeBasePers
         */
        codeTypeBasePersonne: number;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Hefcsd_DateSignDmdeCred
         * Type date au format yyyy-MM-dd
         */
        dateSigneDmdeCredit: string;
        /**
         * Hefcso_DateSignOffre
         * Type date au format yyyy-MM-dd
         */
        dateSigneOffre: string;
        /**
         * ReltnEntrPers
         */
        reltnEntrPersonne: Array<IRelationEntrePersonnesLecture>;
        /**
         * ListIdntRess
         */
        listeIdRessource: Array<string>;
        /**
         * ListIdntChrg
         */
        listeIdCharge: Array<string>;
        /**
         * ListIdntCpte
         */
        listeIdCompte: Array<string>;
        /**
         * ListIdntFamlEprg
         */
        listeIdFamilleEpargne: Array<string>;
        /**
         * IdntFicheContact
         */
        idFicheContact: string;
    }
    interface IGarantieReelleLecture extends IGarantieLecture {
        /**
         * Cdfghr_CodeGarnRchab
         */
        codeGarantieRchab: number;
        /**
         * Nofgsh_NumeRangSecnHypt
         */
        numeroRangSecnHypotheque: number;
        /**
         * Npfgdg_DureHyptMois
         */
        dureHypothequeMois: number;
        /**
         * Cdfgpc_PactCommr
         */
        pactCommr: number;
        /**
         * Nofghy_RangHypt
         */
        rangHypotheque: number;
        /**
         * Cdfgrh_CodeCessRangHypt
         */
        codeCessRangHypotheque: number;
        /**
         * Mtfghy_MtCouvParHyptRangInfe
         */
        montantCouvertureParHypothequeRangInfe: number;
        /**
         * PortesurProjet
         */
        portesurProjet: boolean;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
        /**
         * IdntGarnHorsDoss
         */
        idGarantieHorsDossier: string;
        /**
         * IdntObjtPortGarn
         */
        idObjetPortGarantie: string;
        /**
         * Llfgvh_VilleConservationHypotheque
         */
        villeConservationHyp: string;
        /**
         * Llfgvo_LibelleReferenceVolume
         */
        lblRefVolume: string;
        /**
         * Dtfgpu_DateDePublication
         * Type date au format yyyy-MM-dd
         */
        datePublication: string;
        /**
         * Nofgvo_NumeroDeVolume
         */
        numeroDeVolume: number;
    }
    interface IGarantiePersonnelleLecture extends IGarantieLecture {
        /**
         * Cdfgtg_CodeNatrCaut
         */
        codeNatureCaution: number;
        /**
         * Montant_Encours
         */
        montantEncours: number;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
        /**
         * CalculSaccefAuto
         */
        calculSaccefAuto: boolean;
        /**
         * ListErrrTechNonBlqn
         */
        listeErrrTechniqueNonBlqn: Array<string>;
    }
    interface IGarantieLecture extends IAccessoireLecture {
        /**
         * Cdfcng_NatrGarn
         */
        natureGarantie: string;
        /**
         * Lbfgga_Commt
         */
        commentaire: string;
        /**
         * Dtfgre_DateLimtRetrCaut
         * Type date au format yyyy-MM-dd
         */
        dateLimiteRetardCaution: string;
        /**
         * Cdfaag_CodeFormActeAuth
         */
        codeFormeActeAuthentique: number;
        /**
         * Ctfcgg_CodeClssGarn
         */
        codeClasseGarantie: number;
        /**
         * Ctfggm_CodeTypeGarantieMysys
         */
        codeTypeGarantieMysys: string;
        /**
         * Ctfcsu_TypeSurt
         */
        typeSurtaxe: number;
        /**
         * SaccefPossible
         */
        saccefPossible: boolean;
        /**
         * bAccesSaccef
         */
        accessoireSaccef: boolean;
        /**
         * EtatBoutonSaccef
         */
        etatBoutonSaccef: number;
        /**
         * bAccesENET
         */
        accessoireENET: boolean;
        /**
         * IdntPers
         */
        idPersonne: string;
    }
    interface IAssuranceLecture extends IAccessoireLecture {
        /**
         * EstAssuranceAXA
         */
        estAssuranceAXA: boolean;
        /**
         * EstAssuranceCNP
         */
        estAssuranceCNP: boolean;
        /**
         * EstAssuranceGroupePourTAEA
         */
        estAssuranceGroupePourTAEA: boolean;
        /**
         * Ctfcaa_TypeAssr
         */
        typeAssurance: string;
        /**
         * Cdasdg_CodeDeleAssr
         */
        codeDeleAssurance: number;
        /**
         * Lbfabe_BenfAssrAvntVerst
         */
        beneficiaireAssuranceAvenantVersement: string;
        /**
         * Cdfaex_CodeCouvExts
         */
        codeCouvertureExts: number;
        /**
         * Ctfarq_TypeRisq
         */
        typeRisque: number;
        /**
         * CodeAssrObgt
         */
        codeAssuranceObligatoire: number;
        /**
         * Cdfaat_CodeAssrPart
         */
        codeAssurancePart: number;
        /**
         * Facultative
         */
        facultative: number;
        /**
         * Obligatoire
         */
        obligatoire: number;
        /**
         * ObligatoirePartielle
         */
        obligatoirePartielle: number;
        /**
         * Cdfarv_CodeResr
         */
        codeResr: number;
        /**
         * Lbfaex_LiblAssrExtn
         */
        libelleAssuranceExterne: string;
        /**
         * Nosrn_NumeSirenCieAssr
         */
        numeroSirenCieAssurance: string;
        /**
         * Nrfcan_NumeReglCalcDateEfft
         */
        numeroRegleCalculDateEffet: string;
        /**
         * Ctfaaa_CodeAgreAssrExtr
         */
        codeAgreAssuranceExtr: number;
        /**
         * Montant_Encours
         */
        montant_Encours: number;
        /**
         * Idfaos_IdntConfOffrAssr
         */
        idConfOffreAssurance: string;
        /**
         * Nrfcrt_NumeReglTarfAssr
         */
        numeroRegleTarfAssurance: string;
        /**
         * Idfaof_IdntCrdtConfCnp
         */
        idCreditConfCnp: string;
        /**
         * Txfaso_TauxSoclAssr
         */
        tauxSocialeAssurance: number;
        /**
         * IdntPersAssr
         */
        idPersonneAssurance: string;
    }
    interface IAccessoireLieProduitLecture extends IAccessoireLecture {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
    }
    interface IAccessoireComplementaireLecture extends IAccessoireLecture {
        /**
         * Cnfcoi_CodeNatrOrigAccs
         */
        codeNatureOrigineAccessoire: number;
        /**
         * IdntCatlFrsComp
         */
        idCatlFrsComp: string;
        /**
         * IdntCatlParmRverTier
         */
        idCatlParametreRverTiers: string;
        /**
         * Ctfprp_RoleTiers
         */
        roleTiers: string;
        /**
         * Lbfpa1_Intitule
         */
        intitule: string;
    }
    interface IServiceSurObjetLecture extends IAccessoireLecture {
        /**
         * Nrfcan_NumeReglCalcDateEfftServ
         */
        numeroRegleCalculDateEffetService: string;
        /**
         * Nofood_NumeReltObjtDossAuqlEstRattServ
         */
        numeroRelationObjetDossierAuqlEstRattachementService: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
        /**
         * IdntObjtServ
         */
        idObjetService: string;
    }
    interface IAccessoireLecture extends IElementLecture {
        /**
         * Idfaaa_IdntAccsGest
         */
        idAccessoireGestion: string;
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Ctfcah_CodeTyplAccs
         */
        codeTypologieAccessoire: string;
        /**
         * Txfipf_PartFinnAccs
         */
        partFinancierAccessoire: number;
        /**
         * CodeIndicAccsAper
         */
        codeIndiceAccessoireAper: boolean;
        /**
         * CodeIndicAccsFinn
         */
        codeIndiceAccessoireFinancier: boolean;
        /**
         * Dtfccr_DateCret
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Ddfaaa_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffaaa_DateFinEfft
         * Type date au format yyyy-MM-dd
         */
        dateFinEffet: string;
        /**
         * Cdfpim_CodeBeneficiaire
         */
        codeBeneficiaire: string;
        /**
         * Cdfpnb_PersonnalisationBeneficiare
         */
        personnalisationBeneficiare: number;
        /**
         * MontantFraisAccessoire
         */
        montantFraisAccessoire: number;
        /**
         * MontantSouhaite
         */
        montantSouhaite: number;
        /**
         * TauxRetenuAccessoire
         */
        tauxRetenuAccessoire: number;
        /**
         * ListIdntCouv
         */
        listeIdCouverture: Array<string>;
        /**
         * ListIdntCots
         */
        listeIdCotisation: Array<string>;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * ListIdntAvisOrgnExtr
         */
        listeIdAvisOrgnExtr: Array<string>;
        /**
         * IdntPlan
         */
        idPlan: string;
    }
    interface IContexteCoproLecture extends IElementLecture {
        /**
         * EstCopro100
         */
        estCopro100: boolean;
    }
    interface IDroitUtiliseLecture extends IElementLecture {
        /**
         * Mtfadu_MtDrtAcqsUtls
         */
        montantDroitAcqsUtilisation: number;
        /**
         * Mtfali_MtDrtLimt
         */
        montantDroitLimite: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntTrchEparLogm
         */
        idTrancheEpargneLogement: string;
    }
    interface IVariationDureeLecture extends IElementLecture {
        /**
         * Npfarv_NbPerdVartPoss
         */
        nombrePeriodeVartPossibilite: number;
        /**
         * TypeButrVartDure
         */
        typeButoireVartDure: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
    }
    interface IPieceClientLecture extends IPieceLecture {
    }
    interface IControleManuelLecture extends IPieceLecture {
        /**
         * Ctfchq_TypeActrOrigCtrl
         */
        typeActrOrigineControle: number;
        /**
         * Llfccm_CommtCtrl
         */
        commentaireControle: string;
        /**
         * HistCtrl
         */
        histControle: Array<IControleManuelLecture>;
    }
    interface IPieceAgenceLecture extends IPieceLecture {
    }
    interface IPieceLecture extends IElementLecture {
        /**
         * IdentifiantPiece
         */
        identifiantPiece: string;
        /**
         * Llfcpt_LiblPiecCtrl
         */
        libellePieceControle: string;
        /**
         * Ctfcth_CodeThm
         */
        codeTheme: string;
        /**
         * Ctfcp1_CodePrcs
         */
        identifiantProcessusAuPlusTard: string;
        /**
         * Cifcch_IndicCasEchn
         */
        indiceCasEcheance: number;
        /**
         * Cifcob_IndicObgt
         */
        indiceObligatoire: number;
        /**
         * Cdfaju_StttPiecCtrl
         */
        stttPieceControle: number;
        /**
         * Dtfarj_DateDernMajSttt
         * Type date au format yyyy-MM-dd
         */
        dateDernierMAJSttt: string;
        /**
         * Nufccl_NumrOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Llfcai_LiblAide
         */
        libelleAide: string;
        /**
         * CodeEtatAcquistion
         */
        codeEtatAcquistion: string;
    }
    interface IContratEpargneLogementLecture extends IElementLecture {
        /**
         * Cdfppr_CodeTypeEL
         */
        codeTypeEL: number;
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
        /**
         * TypeDrt
         */
        typeDroit: number;
        /**
         * Ctfpli_LienParnAvecCedn
         */
        lienParentAvecCedn: number;
        /**
         * Nufpct_IdntContEl
         */
        idContratEpargneLogement: string;
        /**
         * Lbfptc_LiblTitlCont
         */
        libelleTitulaireContrat: string;
        /**
         * Cdfpbc_CodeIndicBenePrimEl
         */
        codeIndiceBenePrimeEpargneLogement: number;
        /**
         * Ddfpct_DateOuvrCont
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureContrat: string;
        /**
         * Dtfprf_DateCltrCont
         * Type date au format yyyy-MM-dd
         */
        dateClotureContrat: string;
        /**
         * Cdfifr_CodeForc
         */
        codeForc: number;
        /**
         * Cdfiel_CodeRaptContEparLogm
         */
        codeRaptContratEpargneLogement: number;
        /**
         * Lbfpet_EtabOrigInte
         */
        etabOrigineInterieur: string;
        /**
         * Idfppc_IdntPersApprDrtCont
         */
        idPersonneApportDroitContrat: string;
        /**
         * Cdfpdj_CodeDrtJust
         */
        codeDroitJustificatif: number;
        /**
         * Cdfird_CodeResrDrtAcqs
         */
        codeResrDroitAcqs: number;
        /**
         * ContratPostReforme
         */
        contratPosteReforme: boolean;
        /**
         * ListIdntTrncEl
         */
        listeIdTrancheEpargneLogement: Array<string>;
        /**
         * IdwsPersBenef
         */
        idPersonneBeneficiaire: string;
    }
    interface IComplementFicheContactLecture extends IElementLecture {
        /**
         * Hdfcpc_HrDebtPlgHor
         */
        hrDebutPlgHor: number;
        /**
         * Hffcpc_HrFinPlgHor
         */
        hrFinPlgHor: number;
        /**
         * Llfccp_Comentair
         */
        comentair: string;
    }
    interface IPiecoThemeLecture extends IElementLecture {
        /**
         * CodeTheme
         */
        codeTheme: string;
        /**
         * Llfcth_LibelleLong
         */
        libelleLong: string;
        /**
         * Lcfcth_LibelleCourt
         */
        libelleCourt: string;
        /**
         * Nufccl_NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Ctfcet_CodeTypeElement
         */
        codeTypeElement: string;
    }
    interface IPiecoElementLecture extends IElementLecture {
        /**
         * Id
         */
        id: string;
        /**
         * NumRel
         */
        numeroRel: number;
        /**
         * TypeElement
         */
        typeElement: string;
        /**
         * Theme
         */
        theme: IPiecoThemeLecture;
        /**
         * Libelle
         */
        libelle: string;
    }
    interface IMotifEvenementConformiteLecture extends IElementLecture {
        /**
         * Id
         */
        id: string;
        /**
         * Idfadi_Dossier
         */
        dossier: string;
        /**
         * Origine
         */
        origine: IPiecoElementLecture;
        /**
         * Hefima_DateDebut
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * Hefilm_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Dtfar4_DerniereMaj
         * Type date au format yyyy-MM-dd
         */
        derniereMAJ: string;
        /**
         * Idfaen_IdEntite
         */
        idEntite: string;
        /**
         * Nofajd_NumeroRelatif
         */
        numeroRelatif: number;
        /**
         * Cefima_EtatMotif
         */
        etatMotif: number;
        /**
         * Ctfcet_TypeMotif
         */
        typeMotif: string;
        /**
         * MotifActif
         */
        motifActif: boolean;
        /**
         * CtfCth_ThemeRegroupement
         */
        themeRegroupement: string;
        /**
         * Llfcth_LibelleLongTheme
         */
        libelleLongTheme: string;
        /**
         * Qcfima_CptEvenementConformite
         */
        cptEvenementConformite: number;
        /**
         * Llfcpt_LiblPiecCtrl
         */
        libellePieceControle: string;
    }
    interface IEvenementConformiteLecture extends IElementLecture {
        /**
         * Idfadi_Dossier
         */
        dossier: string;
        /**
         * Qcfima_CptEvenementConformite
         */
        cptEvenementConformite: number;
        /**
         * Motifs
         */
        motifs: Array<IMotifEvenementConformiteLecture>;
        /**
         * Hdfima_DateDebut
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * Hffima_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Llfima_Motif
         */
        motif: string;
        /**
         * LibelleType
         */
        libelleType: string;
    }
    interface IDocumentOffreIndustrialiseeLecture extends IElementLecture {
        /**
         * CodeEntiteFonctionnelle
         */
        codeEntiteFonctionnelle: string;
        /**
         * IdEntiteFonctionnelle
         */
        idEntiteFonctionnelle: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * LibelleDocument
         */
        libelleDocument: string;
        /**
         * LibelleAide
         */
        libelleAide: string;
        /**
         * CodeExterneDocument
         */
        codeExterneDocument: string;
        /**
         * IndicateurCasEcheant
         */
        indicateurCasEcheant: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Origine
         */
        origine: string;
        /**
         * DateCreation
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * DateModification
         * Type date au format yyyy-MM-dd
         */
        dateModification: string;
        /**
         * EtatDocument
         */
        etatDocument: string;
        /**
         * DocumentCommun
         */
        documentCommun: string;
        /**
         * Obligatoire
         */
        obligatoire: boolean;
        /**
         * Destinataire
         */
        destinataire: string;
        /**
         * UrlPDF
         */
        urlPDF: string;
        /**
         * EstDocNEO
         */
        estDocNEO: boolean;
        /**
         * EstDocOffre
         */
        estDocOffre: boolean;
    }
    interface IOffrePretIndustrialiseeLecture extends IElementLecture {
        /**
         * EditionEligible
         */
        editionEligible: boolean;
        /**
         * EditionEligibleEnAgence
         */
        editionEligibleEnAgence: boolean;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * DossierGdeACree
         */
        dossierGdeACree: boolean;
        /**
         * EtatDossierEdition
         */
        etatDossierEdition: string;
        /**
         * NbEnveloppesLigne1
         */
        nombreEnveloppesLigne1: number;
        /**
         * NbEnveloppesLigne2
         */
        nombreEnveloppesLigne2: number;
        /**
         * NbEnveloppesLigne3
         */
        nombreEnveloppesLigne3: number;
        /**
         * LibEnveloppeLigne1
         */
        libelleEnveloppeLigne1: string;
        /**
         * LibEnveloppeLigne2
         */
        libelleEnveloppeLigne2: string;
        /**
         * LibEnveloppeLigne3
         */
        libelleEnveloppeLigne3: string;
        /**
         * NbEnveloppesLigne1NO
         */
        nombreEnveloppesLigne1NO: number;
        /**
         * NbEnveloppesLigne2NO
         */
        nombreEnveloppesLigne2NO: number;
        /**
         * NbEnveloppesLigne3NO
         */
        nombreEnveloppesLigne3NO: number;
        /**
         * LibEnveloppeLigne1NO
         */
        libelleEnveloppeLigne1NO: string;
        /**
         * LibEnveloppeLigne2NO
         */
        libelleEnveloppeLigne2NO: string;
        /**
         * LibEnveloppeLigne3NO
         */
        libelleEnveloppeLigne3NO: string;
        /**
         * NbEnveloppesLigne1CA
         */
        nombreEnveloppesLigne1CA: number;
        /**
         * NbEnveloppesLigne2CA
         */
        nombreEnveloppesLigne2CA: number;
        /**
         * NbEnveloppesLigne3CA
         */
        nombreEnveloppesLigne3CA: number;
        /**
         * LibEnveloppeLigne1CA
         */
        libelleEnveloppeLigne1CA: string;
        /**
         * LibEnveloppeLigne2CA
         */
        libelleEnveloppeLigne2CA: string;
        /**
         * LibEnveloppeLigne3CA
         */
        libelleEnveloppeLigne3CA: string;
        /**
         * LibAbregeCaisse
         */
        libelleAbregeCaisse: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * EdsEdition
         */
        eDSEdition: string;
        /**
         * ValidationImplicite
         */
        validationImplicite: boolean;
        /**
         * DocumentGlobalPDF
         */
        documentGlobalPDF: string;
        /**
         * ListeDocIndusLecture
         */
        listeDocIndusLecture: Array<IDocumentOffreIndustrialiseeLecture>;
    }
    interface IDocumentSignatureElectroniqueLecture extends IElementLecture {
        /**
         * IdentifiantDocument
         */
        identifiantDocument: string;
        /**
         * CodeTypeEntite
         */
        codeTypeEntite: string;
        /**
         * IdentifiantIDN
         */
        identifiantIDN: string;
        /**
         * IdentifiantComplet
         */
        identifiantComplet: string;
        /**
         * NomDocument
         */
        nomDocument: string;
        /**
         * RefDocProd
         */
        referenceDocProd: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Origine
         */
        origine: string;
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * FluxBinaire
         */
        fluxBinaire: string;
        /**
         * EstPresent
         */
        estPresent: boolean;
        /**
         * IndicePlan
         */
        indicePlan: number;
        /**
         * IndiceCredit
         */
        indiceCredit: number;
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * LibelleEntiteRattachement
         */
        libelleEntiteRattachement: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Obligatoire
         */
        obligatoire: boolean;
        /**
         * estDocNeo
         */
        estDocNEO: boolean;
        /**
         * EstDocOffre
         */
        estDocOffre: boolean;
    }
    interface IInformationSignataire {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationDossierSignature {
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataire>;
    }
    interface IOffreSignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignature;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface IMandatLecture extends IElementLecture {
        /**
         * Cocxbq_CodeCaisse
         */
        codeCaisse: string;
        /**
         * Dgfdms_DateDeSignature
         * Type date au format yyyy-MM-dd
         */
        dateDeSignature: string;
        /**
         * Ctfdfm_TypeFrequenceMandat
         */
        typeFrequenceMandat: string;
        /**
         * Ctfdma_TypeMandatSepaSdd
         */
        typeMandatSepaSdd: number;
        /**
         * Cnfdma_CodeNatureMandat
         */
        codeNatureMandat: number;
        /**
         * Idfdma_RefeMandat
         */
        referenceMandat: string;
        /**
         * Llfdcr_NomDuCreancier
         */
        nomDuCreancier: string;
        /**
         * Llfdac_AdresseDuCreancier
         */
        adresseDuCreancier: string;
        /**
         * Cofdpc_CodePostalDuCreancier
         */
        codePostalDuCreancier: string;
        /**
         * Lcfdvc_VilleDuCreancier
         */
        villeDuCreancier: string;
        /**
         * Ctfdpa_CodePaysDuCreancier
         */
        codePaysDuCreancier: string;
        /**
         * Llfdpo_LibDuPaysDonneurOrdre
         */
        libelleDuPaysDonneurOrdre: string;
        /**
         * Idfdcr_IdntCreancierSepaDomaine
         */
        idCreancierSepaDomaine: string;
        /**
         * Llfddb_NomDuDebiteur
         */
        nomDuDebiteur: string;
        /**
         * Idfdb3_CodeBicDebiteur
         */
        codeBicDebiteur: string;
        /**
         * Idfdi3_NumeroIbanCompteDebiteur
         */
        numeroIbanCompteDebiteur: string;
        /**
         * Idfddb_IdntDuDebiteur
         */
        idDuDebiteur: string;
        /**
         * Llfdad_AdresseDuDebiteur
         */
        adresseDuDebiteur: string;
        /**
         * Cofdpd_CodePostalDuDebiteur
         */
        codePostalDuDebiteur: string;
        /**
         * Lcfdvd_VilleDuDebiteur
         */
        villeDuDebiteur: string;
        /**
         * Ctfdpd_CodePaysDuDebiteur
         */
        codePaysDuDebiteur: string;
        /**
         * Llfdpd_LibPaysDuDebiteur
         */
        libellePaysDuDebiteur: string;
        /**
         * Llfdci_LibCreancierInitial
         */
        libelleCreancierInitial: string;
        /**
         * Idfdct_IdntCreancierInitial
         */
        idCreancierInitial: string;
        /**
         * Llfddf_LibDebiteurFinal
         */
        libelleDebiteurFinal: string;
        /**
         * Idfddf_IdntDebiteurFinal
         */
        idDebiteurFinal: string;
    }
    interface IDossierMRHLecture extends IElementLecture {
        /**
         * UrlIHM
         */
        urlIHM: string;
        /**
         * codeReseau
         */
        codeReseau: string;
        /**
         * idInstanceProcessus
         */
        idInstanceProcessus: string;
        /**
         * codeProcessus
         */
        codeProcessus: string;
        /**
         * idEtape
         */
        idEtape: string;
        /**
         * codeEtape
         */
        codeEtape: string;
        /**
         * AgncDomc
         */
        agenceDomiciliation: string;
        /**
         * urlRetour
         */
        urlRetour: string;
        /**
         * Sigle
         */
        sigle: string;
        /**
         * CdPrflAssr
         */
        codeProfilAssurance: string;
        /**
         * IdActrEtab
         */
        idActrEtab: string;
        /**
         * CdOrgnFinnActrEtab
         */
        codeOrgnFinancierActrEtab: string;
        /**
         * NomUsgActrEtab
         */
        nomUsageActrEtab: string;
        /**
         * IdEdsActrEtabl
         */
        idEDSActrEtabl: string;
        /**
         * ModeIntgIhm
         */
        modeIntegrationIhm: number;
        /**
         * CdAffSynth
         */
        codeAffSynth: number;
        /**
         * CdModeAccesSynth
         */
        codeModeAccessoireSynth: number;
        /**
         * CdEtabFinnTier
         */
        codeEtabFinancierTiers: string;
        /**
         * IdTier
         */
        idTiers: string;
        /**
         * CdTypeCanlDistn
         */
        codeTypeCanlDistn: string;
        /**
         * CdTypePerimEnt
         */
        codeTypePerimEnt: string;
        /**
         * CdAppliApl
         */
        codeApplicationAPL: string;
        /**
         * DateAcces
         * Type date au format yyyy-MM-dd
         */
        dateAccessoire: string;
        /**
         * AppelEffectue
         */
        appelEffectue: boolean;
    }
    interface IRessourceLecture extends IElementLecture {
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Mtfpre_MtRess
         */
        montantRessource: number;
        /**
         * Txfmrc_TxPondRess
         */
        tauxPondereRessource: number;
        /**
         * Npfpre_NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
        /**
         * Lbfpre_LiblRessource
         */
        libelleRessource: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * IdntGrpeIntv
         */
        idGrpeIntervenant: string;
    }
    interface IPhaseCreditExistantLecture extends IElementLecture {
        /**
         * Ddfcph_DateDebtPhas
         * Type date au format yyyy-MM-dd
         */
        dateDebutPhase: string;
        /**
         * Dffcph_DateFinPhas
         * Type date au format yyyy-MM-dd
         */
        dateFinPhase: string;
        /**
         * Meface_MtEchePhas
         */
        montantEcheancePhase: number;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Pftmam_PerdAmrt
         */
        periodeAmortissement: number;
        /**
         * Duree
         */
        duree: number;
        /**
         * IdntCredExst
         */
        idCreditExiste: string;
    }
    interface IFamilleEpargneLecture extends IElementLecture {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Nbfmpr_NbPrdtDetnPourUneFamlPrdtAdr
         */
        nombreProduitDetnPourUneFamilleProduitAdresse: number;
        /**
         * Mtfmve_MtValrEprgAvntOper
         */
        montantValeurEpargneAvenantOper: number;
        /**
         * Lbfcej_LiblCaisEprg
         */
        libelleCaisseEpargne: string;
        /**
         * Dtfmve_DateValrEprg
         * Type date au format yyyy-MM-dd
         */
        dateValeurEpargne: string;
        /**
         * Mtfmep_MtEprgApreOper
         */
        montantEpargneApreOper: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * Cdfmce_CodeProduitCE
         */
        codeProduitCE: number;
        /**
         * Lbfmpr_LibelleProduitAdr
         */
        libelleProduitAdresse: string;
    }
    interface IOppositionLecture extends IElementLecture {
        /**
         * Cdfmop_CodeOppo
         */
        codeOpposition: string;
        /**
         * Ddfmop_DateDebtOppo
         * Type date au format yyyy-MM-dd
         */
        dateDebutOpposition: string;
        /**
         * Dffmop_DateFinOppo
         * Type date au format yyyy-MM-dd
         */
        dateFinOpposition: string;
        /**
         * IdntPersPhys
         */
        idPersonnePhys: string;
    }
    interface IVersementFractionneLecture extends IElementLecture {
        /**
         * Ptfbmv_PerdicVerst
         */
        periodiciteVersement: number;
        /**
         * Mvfbmv_MtPremVerst
         */
        montantPremierVersement: number;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nufbve_NumrDomcMadFond
         */
        numeroDomiciliationMADFond: string;
        /**
         * Mvfbmf_MtVerstFrct
         */
        montantVersementFraction: number;
        /**
         * Nbfbvs_NbVerstSouh
         */
        nombreVersementSouh: number;
        /**
         * Mvfcpm_MtVerstPerdMaxm
         */
        montantVersementPeriodeMaximum: number;
        /**
         * Mvfcim_MtVerstIntlMaxm
         */
        montantVersementInitialMaximum: number;
        /**
         * Txfcpv_QuotPremVerst
         */
        quotientPremierVersement: number;
        /**
         * Txfcvp_QuotVerstPerd
         */
        quotientVersementPeriode: number;
    }
    interface IBienAVendreLecture extends IElementLecture {
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Ctfcor_CodeTypeObjtRegl
         */
        codeTypeObjetRegle: string;
        /**
         * Ctfmve_TypeVent
         */
        typeVent: number;
        /**
         * Mtfmvc_PrixNetVndr
         */
        prixNetVendeur: number;
        /**
         * Mtfmva_MtCrdSurBienVend
         */
        montantCRDSurBienVend: number;
        /**
         * Mtfgrd_MtCrdRachSurBienVend
         */
        montantCRDRachSurBienVend: number;
        /**
         * Mtfaag_MtComsAgnc
         */
        montantComsAgence: number;
        /**
         * Mtfaoc_MtAcqs
         */
        montantAcqs: number;
        /**
         * Dtfaoc_DateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateAcqs: string;
        /**
         * Ctfmma_ModeAcqs
         */
        modeAcqs: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IComplementDossierLecture extends IElementLecture {
        /**
         * Llfidr_LiblDelRelsProj
         */
        libelleDelReleaseProjet: string;
        /**
         * Ctfipt_CodePrrtTrt
         */
        codePrrtTraitement: string;
        /**
         * Dtfisi_DateSaisSurItnt
         * Type date au format yyyy-MM-dd
         */
        dateSaisieSurInternet: string;
        /**
         * Hefisi_HeurSaisSurItnt
         */
        heureSaisieSurInternet: number;
    }
    interface IReamenagementLecture extends IElementLecture {
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
        /**
         * Ctfmup_UsgPretTres
         */
        usagePretTres: number;
        /**
         * Mtfmvc_AncnEche
         */
        ancnEcheance: number;
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * Mtfmvd_ValrAchtObjtFinn
         */
        valeurAchtObjetFinancier: number;
        /**
         * Npfmrp_DureResdPretRefn
         */
        dureResdPretRefn: number;
        /**
         * Dtfoac_DateAcqsObjtRefn
         * Type date au format yyyy-MM-dd
         */
        dateAcqsObjetRefn: string;
        /**
         * Mtfaoc_CoutAcqsObjtRefn
         */
        coutAcqsObjetRefn: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * ListIdntPretReam
         */
        listeIdPretReamenagement: Array<string>;
    }
    interface IPretReamenageLecture extends IElementLecture {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Idfaac_IdntDossComl
         */
        idDossierCommercialisation: string;
        /**
         * Idfao2_IdntDossOrig
         */
        idDossierOrigine: string;
        /**
         * Cdfcpo_CodePrdtetbl
         */
        codePrdtetbl: string;
        /**
         * Cdfars_CodeApparRes
         */
        codeApparRes: boolean;
        /**
         * Ctfars_TypeApparRes
         */
        typeApparRes: number;
        /**
         * Dtfccl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * Mefacg_MtechePerdPretRefn
         */
        mtechePeriodePretRefn: number;
        /**
         * Peface_Perdeche
         */
        perdeche: number;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
        /**
         * Lbfcvs_LiblPrdt
         */
        libelleProduit: string;
        /**
         * Ctfals_TypeRegl
         */
        typeRegle: number;
        /**
         * Ctfmtc_TypeCred
         */
        typeCredit: number;
        /**
         * Lbfaep_NometblPret
         */
        nometblPret: string;
        /**
         * Ctfpag_CodeOrigAppliGestCred
         */
        codeOrigineApplicationGestionCredit: number;
        /**
         * Cdfidr_CodeDev
         */
        codeDev: string;
        /**
         * IdntReam
         */
        idReamenagement: string;
        /**
         * IdntInfoCompRegr
         */
        idInformationCompRegr: string;
    }
    interface IPretReamenageableLecture extends IElementLecture {
        /**
         * InfoPret
         */
        informationPret: IPretReamenageLecture;
        /**
         * InfoRegroupement
         */
        informationRegroupement: IInfoRegroupementLecture;
    }
    interface IResultatControle {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Messages
         */
        messages: Array<string>;
    }
    interface IPlanFinancementLecture extends IElementLecture {
        /**
         * Lbfapl_LiblRetrAdr
         */
        libelleRetardAdresse: string;
        /**
         * Mtfaso_MtTotlEmprPlan
         */
        montantTotalEmpruntPlan: number;
        /**
         * Mtfarf_MtRestFinn
         */
        montantRestantFinancier: number;
        /**
         * Cefapl_CodeEttPlanFinn
         */
        codeEtatPlanFinancier: number;
        /**
         * Cdfacp_CodeContPlan
         */
        codeContratPlan: number;
        /**
         * Dtfccr_DateCretPlan
         * Type date au format yyyy-MM-dd
         */
        dateCreationPlan: string;
        /**
         * Dtfmva_DateDernAnlsAdr
         * Type date au format yyyy-MM-dd
         */
        dateDernierAnlsAdresse: string;
        /**
         * Dtfcep_DateEditPropCred
         * Type date au format yyyy-MM-dd
         */
        dateEditPropCredit: string;
        /**
         * Ntfmba_NotfEnggBale2
         */
        notfEngagementBale2: string;
        /**
         * Cdfmte_CodeAnlsMeneTerm
         */
        codeAnlsMeneTerme: number;
        /**
         * Cdfdsp_CodeDecsSpec
         */
        codeDecisionSpec: number;
        /**
         * Txfita_CorcTarfCalcParAdr
         */
        corcTarfCalculParAdresse: number;
        /**
         * Mtfiar_CottAnlsRisq
         */
        cotisationAnlsRisque: number;
        /**
         * Txfgca_CoefTarfCalcParAdr
         */
        coefficientTarfCalculParAdresse: number;
        /**
         * Cdfwor_CodeOrigPretPrnc
         */
        codeOriginePretPrincipal: number;
        /**
         * Cifaai_IndicAllt
         */
        indiceAllt: number;
        /**
         * Mtfaap_MtApprPers
         */
        montantApportPersonne: number;
        /**
         * Mtfmpl_MtPretEparLogmTher
         */
        montantPretEpargneLogementTher: number;
        /**
         * Idfcsm_NumrDossSmac
         */
        numeroDossierSmac: string;
        /**
         * Ctfico_TypeCritOptim
         */
        typeCritereOptim: number;
        /**
         * Nbfico_ValeurCritOptim
         */
        valeurCritereOptim: number;
        /**
         * AccordDePrincipe
         */
        accordDePrincipe: number;
        /**
         * ListResultatControle
         */
        listeResultatControle: Array<IResultatControle>;
        /**
         * EstEligibleApl
         */
        estEligibleAPL: boolean;
        /**
         * MontantAplModifiable
         */
        montantAPLModifiable: boolean;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * ListIdntCredIntr
         */
        listeIdCreditIntr: Array<string>;
        /**
         * ListIdntCredExtr
         */
        listeIdCreditExtr: Array<string>;
        /**
         * ListIdntAssr
         */
        listeIdAssurance: Array<string>;
        /**
         * ListIdntRefusAssExt
         */
        listeIdRefusAssuranceExterieur: Array<string>;
        /**
         * ListIdntGarn
         */
        listeIdGarantie: Array<string>;
        /**
         * ListIdntAccsComp
         */
        listeIdAccessoireComp: Array<string>;
        /**
         * ListIdntAccsLiesPrdt
         */
        listeIdAccessoireLiesProduit: Array<string>;
        /**
         * ListIdntServSurObjt
         */
        listeIdServiceSurObjet: Array<string>;
        /**
         * ListIdntPalrCont
         */
        listeIdPalierContrat: Array<string>;
        /**
         * IdntApl
         */
        idAPL: string;
        /**
         * IdntSynthesePlanFinancement
         */
        idSynthesePlanFinancement: string;
    }
    interface ICreditExterneLecture extends IElementLecture {
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Npface_DureAmrtMois
         */
        dureAmortissementMois: number;
        /**
         * Txface_TxAmrt
         */
        tauxAmortissement: number;
        /**
         * Mkface_MtCapt
         */
        montantCapital: number;
        /**
         * Meface_MtEcheAmrt
         */
        montantEcheanceAmortissement: number;
        /**
         * Peface_CodePerdAmrt
         */
        codePeriodeAmortissement: number;
        /**
         * Cdfaia_CodeIndicInteTantPPers
         */
        codeIndiceInterieurTantPPersonne: number;
        /**
         * Lbface_LiblLibrSurConcr
         */
        libelleLibrSurConcr: string;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfwna_CodeIndicNatrPret
         */
        codeIndiceNaturePret: number;
        /**
         * Cnfctx_CodeIndicTxRevs
         */
        codeIndiceTauxRevision: number;
        /**
         * Npfwdd_DureDiffMois
         */
        dureDiffereMois: number;
        /**
         * Ctfwsr_TypeSurt
         */
        typeSurtaxe: number;
        /**
         * Cdfwch_CodeIndicPresAssrPertEmpl
         */
        codeIndicePresAssurancePertEmpl: number;
        /**
         * Ctfwtb_CodeIndicTypeRemb
         */
        codeIndiceTypeRemboursement: number;
        /**
         * Txfatg_TegActu
         */
        tegActu: number;
        /**
         * Mefadi_MtecheDiff
         */
        mtecheDiffere: number;
        /**
         * Pefadi_CodePerdDiff
         */
        codePeriodeDiffere: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
    }
    interface IPalierContraintLecture extends IElementLecture {
        /**
         * Ddpe_DateDebtPerd
         * Type date au format yyyy-MM-dd
         */
        dateDebutPeriode: string;
        /**
         * Dfpe_DateFinPerd
         * Type date au format yyyy-MM-dd
         */
        dateFinPeriode: string;
        /**
         * Meface_MtEche
         */
        montantEcheance: number;
        /**
         * Npfpco_DurePalr
         */
        durePalier: number;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
    }
    interface IAlerteEnSortieLecture extends IElementLecture {
        /**
         * Nofiax_NumeAlrt
         */
        numeroAlerte: number;
        /**
         * Ctfiax_CodeAlrt
         */
        codeAlerte: string;
        /**
         * Cefiax_CodeTrtAlrt
         */
        codeTraitementAlerte: number;
        /**
         * Dcfiax_DateEmssAlrt
         * Type date au format yyyy-MM-dd
         */
        dateEmissionAlerte: string;
        /**
         * Drfiax_DateRepnAlrt
         * Type date au format yyyy-MM-dd
         */
        dateRepnAlerte: string;
    }
    interface IVersementAttenduLecture extends IElementLecture {
        /**
         * Nufcrl_NumeReltVerstAttn
         */
        numeroRelationVersementAttn: number;
        /**
         * Ctftve_TypeVerst
         */
        typeVersement: string;
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
        /**
         * Dtfdeb_DateDebt
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * Dtfvfn_DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * Ctfapi_PerdVerst
         */
        periodeVersement: number;
        /**
         * IdntContAssrGarn
         */
        idContratAssuranceGarantie: string;
    }
    interface IProprietaireLecture extends IElementLecture {
        /**
         * Txffim_QuotPleinProp
         */
        quotientPleinProp: number;
        /**
         * Txfcnp_QuotNueProp
         */
        quotientNueProp: number;
        /**
         * Txfcdu_QuotUsuf
         */
        quotientUsuf: number;
        /**
         * Txfcus_QuotDroiUsag
         */
        quotientDroiUsag: number;
        /**
         * Ctfcdb_CdModDettnBien
         */
        codeModDettnBien: number;
        /**
         * IdntPersn
         */
        idPersn: string;
    }
    interface IReferenceCadastraleLecture extends IElementLecture {
        /**
         * Lbfoca_ReferenceCadastre
         */
        referenceCadastre: string;
        /**
         * Lbfcsc_SectionCadastre
         */
        sectionCadastre: string;
        /**
         * Qtfcsc_SurfaceReferenceCadastrale
         */
        surfaceReferenceCadastrale: number;
        /**
         * Llfcob_commentaires
         */
        commentaires: string;
    }
    interface IReferenceLotLecture extends IElementLecture {
        /**
         * Lbfolt_ReferenceTypeDeLot
         */
        referenceTypeDeLot: string;
        /**
         * Llfcnl_NatureDuLot
         */
        natureDuLot: string;
        /**
         * Nbftta_Tantieme
         */
        tantieme: number;
    }
    interface ICouvertureCreditLecture extends IElementLecture {
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
        /**
         * Mefaas_MtEcheCouv
         */
        montantEcheanceCouverture: number;
        /**
         * Dffgaf_DateFinAffecCouv
         * Type date au format yyyy-MM-dd
         */
        dateFinAffectationCouverture: string;
        /**
         * IdntAccs
         */
        idAccessoire: string;
        /**
         * IdntCredCouv
         */
        idCreditCouverture: string;
        /**
         * ListIdntCots
         */
        listeIdCotisation: Array<string>;
        /**
         * Idfcoc_IdPretOrgCaution
         */
        idPretOrganismeCaution: string;
        /**
         * Mtfiae_CoutAssExt8Ans
         */
        coutAssuranceExterne8Ans: number;
        /**
         * Mcfiae_CoutTotAssExt
         */
        coutTotalAssuranceExterne: number;
    }
    interface IGroupeJustificationTEGLecture {
        /**
         * LibelleFrais
         */
        libelleFrais: string;
        /**
         * MessagesFrais
         */
        messagesFrais: Array<string>;
    }
    interface IEcheancesJustifieesAssocieesLecture {
        /**
         * TitreCredit
         */
        titreCredit: string;
        /**
         * MessagesInterets
         */
        messagesInterets: Array<string>;
        /**
         * TypesFrais
         */
        typesFrais: Array<IGroupeJustificationTEGLecture>;
    }
    interface ICreditInterneLecture extends IElementLecture {
        /**
         * IndicEvltTxConsPond
         */
        indiceEvolutionTauxConsolidePondere: number;
        /**
         * Idfccp_IdntConvPres
         */
        idConventionPres: string;
        /**
         * Cdfdae_CodeIndicEnvAvisEche
         */
        codeIndiceEnvoiAvisEcheance: number;
        /**
         * Cifaio_CodeIndicOptmImps
         */
        codeIndiceOptimisationImps: number;
        /**
         * Cnfctx_CodeIndicTxInteRevs
         */
        codeIndiceTauxInterieurRevision: number;
        /**
         * Nofapd_NumeCredPlanFinn
         */
        numeroCreditPlanFinancier: number;
        /**
         * Idfacs_RefeExtnCred
         */
        referenceExterneCredit: string;
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Cdfcfc_CodeFamlContRegl
         */
        codeFamilleContratRegle: string;
        /**
         * Ctfcbs_CodeSclssBafi
         */
        codeSousclasseBafi: string;
        /**
         * Cdfcrl_CodeIndicCredRels
         */
        codeIndiceCreditRelease: number;
        /**
         * Idfcct_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Cdfccr_CodeIndicTrtInteIntr
         */
        codeIndiceTraitementInterieurIntr: number;
        /**
         * Cdfcia_CodeTypeActlInteIntr
         */
        codeTypeActuarielInterieurIntr: number;
        /**
         * Cdfbdv_CodeDevsVerst
         */
        codeDeviseVersement: string;
        /**
         * Cdfbje_CodeIndicExstPiecJustPourDeclechlVerst
         */
        codeIndiceExistePieceJustificatifPourDeclechlVersement: number;
        /**
         * Cdfbju_CodeExistJustDeclVerst
         */
        codeExistJustificatifDeclarationVersement: number;
        /**
         * Cdfbju_CodeTypeRattJustDecl
         */
        codeTypeRattachementJustificatifDeclaration: number;
        /**
         * Cdfbve_ModeReglVerst
         */
        modeRegleVersement: string;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Dtfam0_DateMer0
         * Type date au format yyyy-MM-dd
         */
        dateMER0: string;
        /**
         * Dtfam1_DateMer1
         * Type date au format yyyy-MM-dd
         */
        dateMER1: string;
        /**
         * Dtfccr_DateCretCred
         * Type date au format yyyy-MM-dd
         */
        dateCreationCredit: string;
        /**
         * Dlfbct_DateLimtVerstFond
         * Type date au format yyyy-MM-dd
         */
        dateLimiteVersementFond: string;
        /**
         * Dhfacj_QuantEche
         */
        jourDateEcheance: number;
        /**
         * Dffb1v_DateLimtPremVerstFond
         * Type date au format yyyy-MM-dd
         */
        dateLimitePremierVersementFond: string;
        /**
         * Cdfaea_CodeIndicElgbApl
         */
        codeIndiceEligibiliteAPL: number;
        /**
         * Cdfcie_CodeIndicelgbAuprInstemss
         */
        codeIndicelgbAuprInstemss: number;
        /**
         * Cdfacc_CodeIndicGestCredAvecCpteCrrt
         */
        codeIndiceGestionCreditAvecCompteCrrt: number;
        /**
         * Dtfcdc_DateDernCalcCred
         * Type date au format yyyy-MM-dd
         */
        dateDernierCalculCredit: string;
        /**
         * Ccfarc_CodeIndicCalcAFaire
         */
        codeIndiceCalculAFaire: number;
        /**
         * Mtfael_MtPrimEparLogm
         */
        montantPrimeEpargneLogement: number;
        /**
         * Txfasr_TxNegcSurcRembAntc
         */
        tauxNegocieSurcRemboursementAnticipe: number;
        /**
         * Txfcpd_TxPondCntExtr
         */
        tauxPondereCntExtr: number;
        /**
         * Txfck4_TxPondCons
         */
        tauxPondereConsolide: number;
        /**
         * Txfrr1_MargPondCons
         */
        margePondereConsolide: number;
        /**
         * Ccfbec_CodeCalcEcheVerst
         */
        codeCalculEcheanceVersement: number;
        /**
         * Cefbec_CodeettEcheVerst
         */
        codeettEcheanceVersement: number;
        /**
         * Cdfbct_CodeIndcNatrEcheVerst
         */
        codeIndiceNatureEcheanceVersement: number;
        /**
         * Lbfpa1_InttCred
         */
        intituleLigneUn: string;
        /**
         * Nufbdt_DomcTres
         */
        domiciliationTres: string;
        /**
         * Nufbve_NumeDomcPourMiseADispFond
         */
        numeroDomiciliationPourMiseADispFond: string;
        /**
         * Mtfcve_MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * Ctfcpc_CodeIndicNatrPretComb
         */
        codeIndiceNaturePretComb: number;
        /**
         * Cifaam_CodeIndicPresUneBonfUneMajreTx
         */
        codeIndicePresUneBonificationUneMajreTaux: number;
        /**
         * Cefad0_CodeConfmRedcDurePTZ
         */
        codeConfirmationReductionDurePTZ: number;
        /**
         * Cefam0_CodeConfmRedcMtPTZ
         */
        codeConfirmationReductionMontantPTZ: number;
        /**
         * Mtfcpz_MtReglPTZ
         */
        montantReglePTZ: number;
        /**
         * MtMinPTZ
         */
        montantMinimumPTZ: number;
        /**
         * Mcface_MtCredEuro
         */
        montantCreditEuro: number;
        /**
         * Msfcpv_MtMaxPretPVH
         */
        montantMaximumPretPVH: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfada_CodeDevsSaccef
         */
        codeDeviseSaccef: string;
        /**
         * Npfcfi_NbPerdCred
         */
        nombrePeriodeCredit: number;
        /**
         * Pefcfi_CodePerdCred
         */
        codePeriodeCredit: number;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
        /**
         * Mefape_MtPrmeEcheHorsAccsCred
         */
        montantPrmeEcheanceHorsAccessoireCredit: number;
        /**
         * Mefacc_MtPrmeEcheAssr
         */
        montantPrmeEcheanceAssurance: number;
        /**
         * Mcafco_MtTotlCredHorsAccsHorsPerdPref
         */
        montantTotalCreditHorsAccessoireHorsPeriodePref: number;
        /**
         * Mcfaac_CoutTotlAccsPostSurCred
         */
        coutTotalAccessoirePosteSurCredit: number;
        /**
         * Mcfafd_CoutTotlFrsDossAsscCred
         */
        coutTotalFrsDossierAssuranceCredit: number;
        /**
         * Mcfgfr_CoutTotlFrsGarnAsscCred
         */
        coutTotalFrsGarantieAssuranceCredit: number;
        /**
         * Mcfacf_CoutTotlFrsCrtgeAsscCred
         */
        coutTotalFrsCrtgeAssuranceCredit: number;
        /**
         * Mcfosp_CoutTotlServSurObjtPerdAsscCred
         */
        coutTotalServiceSurObjetPeriodeAssuranceCredit: number;
        /**
         * Mcfafp_CoutTotlAccsCompPerdAsscCred
         */
        coutTotalAccessoireCompPeriodeAssuranceCredit: number;
        /**
         * Mcfoso_CoutTotlServSurObjtAperAsscCred
         */
        coutTotalServiceSurObjetAperAssuranceCredit: number;
        /**
         * Mcfafr_CoutTotlAccsCompAperAsscCred
         */
        coutTotalAccessoireCompAperAssuranceCredit: number;
        /**
         * Mefoso_MtPrmeEcheServSurObjt
         */
        montantPrmeEcheanceServiceSurObjet: number;
        /**
         * Mefafr_MtPrmeEcheAccsComp
         */
        montantPrmeEcheanceAccessoireComp: number;
        /**
         * Mcfaia_MtTotlAssrPerd
         */
        montantTotalAssurancePeriode: number;
        /**
         * CodeIndicModeCalcTx
         */
        codeIndiceModeCalculTaux: number;
        /**
         * TxMoyeActuHorsBonf
         */
        tauxMoyenActuHorsBonification: number;
        /**
         * TxMoyePropHorsBonf
         */
        tauxMoyenPropHorsBonification: number;
        /**
         * TxFutr
         */
        tauxFutr: ITauxIndiceLecture;
        /**
         * TxIntl
         */
        tauxInitial: ITauxInteretAnnuelLecture;
        /**
         * TxMoyeActu
         */
        tauxMoyenActu: number;
        /**
         * TxMoyeProp
         */
        tauxMoyenProp: number;
        /**
         * TegActu
         */
        tegActu: number;
        /**
         * TegProp
         */
        tegProp: number;
        /**
         * TAEA
         */
        tAEA: number;
        /**
         * Txfamc_TxMontage
         */
        tauxMontage: number;
        /**
         * BornesFraisDossier
         */
        bornesFraisDossier: Array<number>;
        /**
         * TegModeRestitution
         */
        tegModeRestitution: number;
        /**
         * MontantPTZVerrouille
         */
        montantPTZVerrouille: boolean;
        /**
         * DureePTZVerrouillee
         */
        dureePTZVerrouillee: boolean;
        /**
         * EcheancesJustifieesAssociees
         */
        echeancesJustifieesAssociees: IEcheancesJustifieesAssocieesLecture;
        /**
         * EtatForcageFraisDossier
         */
        etatForcageFraisDossier: string;
        /**
         * TxUsure
         */
        tauxUsure: number;
        /**
         * AjustementTaux
         */
        ajustementTaux: IAjustementTauxLecture;
        /**
         * MargeRevConseil
         */
        margeRevisionConseil: number;
        /**
         * ExisteAssuranceSurCRD
         */
        existeAssuranceSurCRD: boolean;
        /**
         * IdntPlanFinn
         */
        idPlanFinancier: string;
        /**
         * IdntCpteCrrt
         */
        idCompteCrrt: string;
        /**
         * IdntModl
         */
        idModele: string;
        /**
         * IdntModlVersFrct
         */
        idModeleVersementFraction: string;
        /**
         * IdntRemsClnt
         */
        idRemsClient: string;
        /**
         * ListIdntDrtUtls
         */
        listeIdDroitUtilisation: Array<string>;
        /**
         * ListIdntPayr
         */
        listeIdPayr: Array<string>;
        /**
         * ListIdntPhas
         */
        listeIdPhase: Array<string>;
        /**
         * ListIdntSuivPlnf
         */
        listeIdSuivantPlafond: Array<string>;
        /**
         * ListIdntParmRevs
         */
        listeIdParametreRevision: Array<string>;
        /**
         * ListIdntVartDure
         */
        listeIdVartDure: Array<string>;
        /**
         * ListIdntAccs
         */
        listeIdAccessoire: Array<string>;
        /**
         * ListIdntAssr
         */
        listeIdAssurance: Array<string>;
        /**
         * ListIdntGarn
         */
        listeIdGarantie: Array<string>;
        /**
         * ListIdntAccsComp
         */
        listeIdAccessoireComp: Array<string>;
        /**
         * ListIdntAccsLiesPrdt
         */
        listeIdAccessoireLiesProduit: Array<string>;
        /**
         * ListIdntCreditsEPS
         */
        listeIdCreditsEPS: Array<string>;
        /**
         * IdntComplementEPS
         */
        idComplementEPS: string;
    }
    interface IPatrimoineImmobilierLecture extends IElementLecture {
        /**
         * Ctfcnp_NatrPtrmImmb
         */
        naturePatrimoineImmobilier: number;
        /**
         * Cdfcdo_CodeIndicUsgLogm
         */
        codeIndiceUsageLogement: number;
        /**
         * Mtfmvb_ValrActlPtrm
         */
        valeurActuarielPatrimoine: number;
        /**
         * Dtfdac_DateAcqsPtrm
         * Type date au format yyyy-MM-dd
         */
        dateAcqsPatrimoine: string;
        /**
         * Mkfkrd_CaptRestSurPtrm
         */
        capitalRestantSurPatrimoine: number;
        /**
         * Mefhpa_MensPretSurPtrm
         */
        mensPretSurPatrimoine: number;
        /**
         * Dffacr_DateFinPretSurPtrm
         * Type date au format yyyy-MM-dd
         */
        dateFinPretSurPatrimoine: string;
    }
    interface IBlocNotesLecture extends IElementLecture {
        /**
         * Idfwac_TypeBlc
         */
        typeBlocNote: string;
        /**
         * ContBlc
         */
        contratBlocNote: string;
    }
    interface IClausePersonnaliseeLecture extends IElementLecture {
        /**
         * DestClsePers
         */
        destinataireClassePersonne: number;
        /**
         * LiblClsePers
         */
        libelleClassePersonne: string;
        /**
         * NumeReltClsePers
         */
        numeroRelationClassePersonne: number;
    }
    interface IAvisLecture extends IElementLecture {
        /**
         * Dtfaad_DateSaisAvis
         * Type date au format yyyy-MM-dd
         */
        dateSaisieAvis: string;
        /**
         * Lbfaad_LiblAvis
         */
        libelleAvis: string;
        /**
         * Idfaen_IdntEnttSaisAvis
         */
        idEntiteSaisieAvis: string;
        /**
         * Lbfaen_LiblEnttSaisAvis
         */
        libelleEntiteSaisieAvis: string;
        /**
         * Ctfita_CodeTyplAvis
         */
        codeTypologieAvis: string;
        /**
         * Nofiav_NumeAvis
         */
        numeroAvis: number;
    }
    interface IAvisOrganismeExterneLecture extends IElementLecture {
        /**
         * Idfpit_IdntOrgnExtn
         */
        idOrgnExterne: string;
        /**
         * Idfcin_IdntInteEnv
         */
        idInterieurEnvoi: string;
        /**
         * Idfcex_IdntExtnEnv
         */
        idExterneEnvoi: string;
        /**
         * Dtfal1_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd
         */
        dateAvis: string;
        /**
         * Cifctr_CodeIndicTrtEnv
         */
        codeIndiceTraitementEnvoi: number;
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Cdfar2_CodeMotf
         */
        codeMotf: string;
        /**
         * Llfar1_LiblAvisDecs1
         */
        libelleAvisDecision1: string;
        /**
         * Llfar2_LiblAvisDecs2
         */
        libelleAvisDecision2: string;
        /**
         * Lbfpin_NomAgntInstr
         */
        nomAgentInstruction: string;
        /**
         * Nufpt1_NumeTeleInstr
         */
        numeroTeleInstruction: string;
        /**
         * Lbfpma_LiblAdrsMail
         */
        libelleAdresseMail: string;
        /**
         * Nufpt2_NumeFaxInstr
         */
        numeroFaxInstruction: string;
        /**
         * Cdfar1_TypeLiaiSaccefTp
         */
        typeLiaiSaccefTp: number;
        /**
         * Cdfar3_TypeRepnOrgnExtn
         */
        typeRepnOrgnExterne: number;
        /**
         * IdntAccs
         */
        idAccessoire: string;
    }
    interface IEvenementLecture extends IElementLecture {
        /**
         * Nofaed_NumeReltEvenDoss
         */
        numeroRelationEvenDossier: number;
        /**
         * Cefadc_CodeEttDoss
         */
        codeEtatDossier: number;
        /**
         * Dtfaed_DateSaisEven
         * Type date au format yyyy-MM-dd
         */
        dateSaisieEven: string;
        /**
         * Lbfamd_MessEnrgSurEvenDoss
         */
        messEnregistrementSurEvenDossier: string;
        /**
         * Dtfaee_DateEfftEven
         * Type date au format yyyy-MM-dd
         */
        dateEffetEven: string;
        /**
         * Ctfaev_CodeTypeEven
         */
        codeTypeEven: string;
        /**
         * Idfase_IdntEnttSaisEven
         */
        idEntiteSaisieEven: string;
        /**
         * Lbfase_LiblEnttSaisEven
         */
        libelleEntiteSaisieEven: string;
        /**
         * Cefhgc_CodeIndicGestCentEven
         */
        codeIndiceGestionCentralEven: number;
        /**
         * Cdfabo_ElemStrcGestBackCent
         */
        elementStructureGestionBackCentral: string;
        /**
         * Idfce3_IdntCaisAsscBackCent
         */
        idCaisseAssuranceBackCentral: number;
        /**
         * LiblEven
         */
        libelleEven: string;
        /**
         * CodeNatrEven
         */
        codeNatureEven: string;
        /**
         * IdntAvisAsscEven
         */
        idAvisAssuranceEven: string;
    }
    interface IVersementLecture extends IElementLecture {
        /**
         * MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * Txfave_PctVerst
         */
        pourcentageVersement: number;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Nufccl_NumeOrdrClss
         */
        numeroOrdreClasse: number;
        /**
         * Lbfasa_LiblAvnc
         */
        libelleAvnc: string;
    }
    interface IPromotionImmobiliereLecture extends IElementLecture {
        /**
         * SittPrgm
         */
        situationProgramme: number;
        /**
         * LiblSyntDoss
         */
        libelleSyntDossier: string;
        /**
         * InttPrgm
         */
        intituleProgramme: string;
        /**
         * NomScpi
         */
        nomScpi: string;
        /**
         * DateDiss
         * Type date au format yyyy-MM-dd
         */
        dateDiss: string;
        /**
         * AdrsPrgmImmb
         */
        adresseProgrammeImmobilier: string;
        /**
         * LoclPrgmImmb
         */
        loclProgrammeImmobilier: string;
        /**
         * CodePostPrgmImmb
         */
        codePosteProgrammeImmobilier: string;
        /**
         * CodePays
         */
        codePays: string;
        /**
         * StttCapi
         */
        stttCapitalisation: number;
        /**
         * DateFinComl
         * Type date au format yyyy-MM-dd
         */
        dateFinCommercialisation: string;
        /**
         * IndicAlltDeps
         */
        indiceAlltDeps: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
    }
    interface IRedacteurActeLecture extends IElementLecture {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Lbfpnm_NomRedcActe
         */
        nomReductionActe: string;
        /**
         * Lbfppn_PrenRedcActe
         */
        prenReductionActe: string;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
    }
    interface IEmprunteurLecture extends IElementLecture {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * LiblLienPersonne
         */
        libelleLienPersonne: string;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * Mcfpre_MtRessPond
         */
        montantRessourcePondere: number;
        /**
         * Mcfpce_MtChrgEmprHorsPrjtPond
         */
        montantChargeEmpruntHorsProjetPondere: number;
        /**
         * Mcfpac_MtAutrChrgPond
         */
        montantAutreChargePondere: number;
        /**
         * Lbfaem_DenmEmpr
         */
        denmEmprunt: string;
        /**
         * Lnfpem_LiblLongEmpr
         */
        libelleLongEmprunt: string;
        /**
         * Lbfain_IntlcEmpr
         */
        intlcEmprunt: string;
        /**
         * Idfaep_IdntEnttTitlClnt
         */
        idEntiteTitulaireClient: string;
        /**
         * Idfaeg_IdntelemStrcGest
         */
        idElementStructureGestion: string;
        /**
         * Cdfcke_CodeCateEmpr
         */
        codeCateEmprunt: string;
        /**
         * Lbfcke_LiblCateEmpr
         */
        libelleCateEmprunt: string;
        /**
         * Ctfcma_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * Ctfpmp_CodeTypeMarcPers
         */
        codeTypeMarchePersonne: number;
        /**
         * Ctfprm_CodeTypeRevnMeng
         */
        codeTypeRevnMeng: number;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_TypeAdmnBafi
         */
        typeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Lbfpsf_LiblSittFaml
         */
        libelleSituationFamille: string;
        /**
         * Cdfpsr_CodeSittFamlRegl
         */
        codeSituationFamilleRegle: number;
        /**
         * Nbfpnp_NbPersCmpstMeng
         */
        nombrePersonneCmpstMeng: number;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpma_NbActfMeng
         */
        nombreActfMeng: number;
        /**
         * Dtfpen_DateEncrEparLogm
         * Type date au format yyyy-MM-dd
         */
        dateEncoursEpargneLogement: string;
        /**
         * Mtftpl_MtEncrIsssPretPel
         */
        montantEncoursIsssPretPEL: number;
        /**
         * Mtftli_MtEncrIsssPretLel
         */
        montantEncoursIsssPretLEL: number;
        /**
         * Mtftlh_MtEncrLivrAutretbl
         */
        montantEncoursLivrAutretbl: number;
        /**
         * Mtftph_MtEncrPlnsAutretbl
         */
        montantEncoursPlnsAutretbl: number;
        /**
         * Mtfwrt_TotlRevnAnnlNets
         */
        totalRevnAnnulationNets: number;
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Cdfwsl_StttOccpLogmActl
         */
        stttOccpLogementActuariel: number;
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpnm_NomRaisSoclEmpr
         */
        nomRaisonSocialeEmprunt: string;
        /**
         * Lbfpa1_Intt
         */
        intituleLigne1: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_CompIntt
         */
        compIntituleLigne2: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cofopz_CodeCondDergPourPtz
         */
        codeConditionDerogationPourPtz: number;
        /**
         * Cdfpse_CodeSectRatt
         */
        codeSecteurRattachement: string;
        /**
         * Cdfpjm_CodeJeunMeng
         */
        codeJeunMeng: number;
        /**
         * PresUnePersAttnRepnFicp
         */
        presUnePersonneAttnRepnFicp: boolean;
        /**
         * PresUnePersFichFicp
         */
        presUnePersonneFichFicp: boolean;
        /**
         * Qmfcvi_EsperVie
         */
        esperVie: number;
        /**
         * Qmfcvd_EsperVieDec
         */
        esperVieDecision: number;
        /**
         * Qmfcvs_EsperVieStrs
         */
        esperVieStress: number;
        /**
         * MtRessAvntProj
         */
        montantRessourceAvenantProjet: number;
        /**
         * MtChrgEmprAvntProj
         */
        montantChargeEmpruntAvenantProjet: number;
        /**
         * MtAutrChrgAvntProj
         */
        montantAutreChargeAvenantProjet: number;
        /**
         * RestVivrAvntProj
         */
        restantVivrAvenantProjet: number;
        /**
         * IndicRestVivrAvntProj
         */
        indiceRestantVivrAvenantProjet: number;
        /**
         * TxEndtAvntProj
         */
        tauxEndtAvenantProjet: number;
        /**
         * TotalEpargneContractuelle
         */
        totalEpargneContractuelle: number;
        /**
         * TotalEpargneLiquide
         */
        totalEpargneLiquide: number;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * Cdfadv_CodeDeviseEmprunteur
         */
        codeDeviseEmprunteur: string;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntCpteDeptGrpePers
         */
        listeIdCompteDeptGrpePersonne: Array<string>;
        /**
         * ListIdntCptePrfsPers
         */
        listeIdComptePrfsPersonne: Array<string>;
        /**
         * ListIdntRessGrpe
         */
        listeIdRessourceGrpe: Array<string>;
        /**
         * ListIdntChrgGrpe
         */
        listeIdChargeGrpe: Array<string>;
        /**
         * ListIdntCredExstGrpe
         */
        listeIdCreditExisteGrpe: Array<string>;
        /**
         * ListIdntFamlEprgPers
         */
        listeIdFamilleEpargnePersonne: Array<string>;
        /**
         * ListIdntRevnFiscAsscEmpr
         */
        listeIdRevnFiscalAssuranceEmprunt: Array<string>;
        /**
         * ListIdntDonnPtrmImmb
         */
        listeIdDonneurPatrimoineImmobilier: Array<string>;
    }
    interface IRevenuFiscalLecture extends IElementLecture {
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Ctfprm_TypeRevnMeng
         */
        typeRevnMeng: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * IdntEmpr
         */
        idEmprunt: string;
    }
    interface IElementSchema {
        /**
         * Idws
         */
        idws: string;
        /**
         * Desc
         */
        description: string;
    }
    interface IBlocNotesSchema extends IElementSchema {
        /**
         * Idfwac_TypeBlc
         */
        typeBlocNote: string;
    }
    interface IClausePersonnaliseeSchema extends IElementSchema {
        /**
         * DestClsePers
         */
        destinataireClassePersonne: number;
    }
    interface IAlerteEnSortieSchema extends IElementSchema {
        /**
         * Ctfiax_CodeAlrt
         */
        codeAlerte: string;
        /**
         * Dcfiax_DateEmssAlrt
         * Type date au format yyyy-MM-dd
         */
        dateEmissionAlerte: string;
    }
    interface IAlerteEnEntreeSchema extends IElementSchema {
        /**
         * Ctfiai_CodeAlrt
         */
        codeAlerte: number;
        /**
         * Dcfiai_DateEmssAlrt
         * Type date au format yyyy-MM-dd
         */
        dateEmissionAlerte: string;
    }
    interface IAvisSchema extends IElementSchema {
        /**
         * Ctfita_CodeTyplAvis
         */
        codeTypologieAvis: string;
        /**
         * Dtfaad_DateSaisAvis
         * Type date au format yyyy-MM-dd
         */
        dateSaisieAvis: string;
        /**
         * Idfaen_IdntEnttSaisAvis
         */
        idEntiteSaisieAvis: string;
        /**
         * Lbfaen_LiblEnttSaisAvis
         */
        libelleEntiteSaisieAvis: string;
        /**
         * Nofiav_NumeAvis
         */
        numeroAvis: number;
    }
    interface IEvenementSchema extends IElementSchema {
        /**
         * Ctfaev_CodeTypeEven
         */
        codeTypeEven: string;
        /**
         * Dtfaee_DateEfftEven
         * Type date au format yyyy-MM-dd
         */
        dateEffetEven: string;
    }
    interface IVersementSchema extends IElementSchema {
        /**
         * Txfave_PctVerst
         */
        pourcentageVersement: number;
    }
    interface IRedacteurActeSchema extends IElementSchema {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
    }
    interface IRessourceSchema extends IElementSchema {
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Mtfpre_MtRess
         */
        montantRessource: number;
        /**
         * Npfpre_NbPerdParAn
         */
        nombrePeriodeParAn: number;
    }
    interface IChargeSchema extends IElementSchema {
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
    }
    interface IPhaseCreditExistantSchema extends IElementSchema {
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
    }
    interface ICreditExistantSchema extends IChargeSchema {
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
        /**
         * PhasesCreditExistant
         */
        phasesCreditExistant: Array<IPhaseCreditExistantSchema>;
    }
    interface IRevenuFiscalSchema extends IElementSchema {
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
    }
    interface IPatrimoineImmobilierSchema extends IElementSchema {
        /**
         * Ctfcnp_NatrPtrmImmb
         */
        naturePatrimoineImmobilier: number;
        /**
         * Mtfmvb_ValrActlPtrm
         */
        valeurActuarielPatrimoine: number;
    }
    interface IEmprunteurSchema extends IElementSchema {
        /**
         * IdwsPersonnes
         */
        idwsPersonnes: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
        /**
         * RevenusFiscaux
         */
        revenusFiscaux: Array<IRevenuFiscalSchema>;
        /**
         * PatrimoinesImmo
         */
        patrimoinesImmobilier: Array<IPatrimoineImmobilierSchema>;
    }
    interface IGarantSchema extends IElementSchema {
        /**
         * IdwsPersonnes
         */
        idwsPersonnes: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
    }
    interface IFamilleEpargneSchema extends IElementSchema {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Mtfmve_MtValrEprgAvntOper
         */
        montantValeurEpargneAvenantOper: number;
    }
    interface ICompteSchema extends IElementSchema {
        /**
         * Nufpcp_NumeCpte
         */
        numeroCompte: string;
        /**
         * Cdfppr_TypeCpte
         */
        typeCompte: string;
        /**
         * Composition
         */
        composition: string;
    }
    interface ICompteProfessionnelSchema extends ICompteSchema {
    }
    interface ICompteDepotSchema extends ICompteSchema {
    }
    interface IRelationEntrePersonnesSchema extends IElementSchema {
        /**
         * Cnfcrp_CodeNatureRelation
         */
        codeNatureRelation: string;
        /**
         * IdntPers2
         */
        idPersonne2: string;
    }
    interface IComplementFicheContactSchema extends IElementSchema {
    }
    interface IPersonneSchema extends IElementSchema {
        /**
         * Cdfptp_CodeTypePers
         */
        codeTypePersonne: number;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Roles
         */
        roles: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
        /**
         * FamillesEpargne
         */
        famillesEpargne: Array<IFamilleEpargneSchema>;
        /**
         * Comptes
         */
        comptes: Array<ICompteSchema>;
        /**
         * RelationsEntrePersonnes
         */
        relationsEntrePersonnes: Array<IRelationEntrePersonnesSchema>;
        /**
         * ComplementFicheContact
         */
        complementFicheContact: IComplementFicheContactSchema;
        /**
         * ComptesPrelVersModalite
         */
        comptesPrelVersementModalite: Array<ICompteSchema>;
    }
    interface IPersonneMoraleSchema extends IPersonneSchema {
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
    }
    interface IOppositionSchema extends IElementSchema {
        /**
         * Cdfmop_CodeOppo
         */
        codeOpposition: string;
        /**
         * Ddfmop_DateDebtOppo
         * Type date au format yyyy-MM-dd
         */
        dateDebutOpposition: string;
        /**
         * Dffmop_DateFinOppo
         * Type date au format yyyy-MM-dd
         */
        dateFinOpposition: string;
    }
    interface IInterditBancaireSchema extends IElementSchema {
    }
    interface IActiviteSchema extends IElementSchema {
        /**
         * Cdfmcs_CodeClssRisqCsp
         */
        codeClasseRisqueCSP: number;
    }
    interface IPersonnePhysiqueSchema extends IPersonneSchema {
        /**
         * Oppositions
         */
        oppositions: Array<IOppositionSchema>;
        /**
         * InterditBancaire
         */
        interditBancaire: IInterditBancaireSchema;
        /**
         * Activite
         */
        activite: IActiviteSchema;
    }
    interface IBienAVendreSchema extends IElementSchema {
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Ctfcor_CodeTypeObjtRegl
         */
        codeTypeObjetRegle: string;
        /**
         * Mtfmvc_PrixNetVndr
         */
        prixNetVendeur: number;
    }
    interface IInfoRegroupementSchema extends IElementSchema {
    }
    interface IPretReamenageSchema extends IElementSchema {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * InfosRegroupement
         */
        informationRegroupement: IInfoRegroupementSchema;
    }
    interface IReamenagementSchema extends IElementSchema {
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * PretsReamenages
         */
        pretsReamenages: Array<IPretReamenageSchema>;
    }
    interface IAplSchema extends IElementSchema {
        /**
         * Mtfiba_MtApl
         */
        montantAPL: number;
        /**
         * TypeApl
         */
        typeAPL: number;
    }
    interface ISynthesePlanFinancementSchema extends IElementSchema {
        /**
         * Mcfoof_CoutTotalTTC
         */
        coutTotalTTC: number;
        /**
         * Mcfgfr_CoutTotalFraisGarantie
         */
        coutTotalFraisGarantie: number;
        /**
         * Mcfafd_CoutTotalFraisDossier
         */
        coutTotalFraisDossier: number;
        /**
         * Mtfaap_MtApportPersonnel
         */
        montantApportPersonnel: number;
        /**
         * nMtfaso_MtConcoursInternes
         */
        mtfaso_MontantConcoursInternes: number;
        /**
         * nMkface_MtConcoursExternes
         */
        mkface_MontantConcoursExternes: number;
        /**
         * Mcfacf_CoutTotalFraisCourtage
         */
        coutTotalFraisCourtage: number;
        /**
         * MtMensualiteAvecAssurance
         */
        montantMensualiteAvecAssurance: number;
        /**
         * MtMensualiteNet
         */
        montantMensualiteNet: number;
    }
    interface ICreditExterneSchema extends IElementSchema {
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Mkface_MtCapt
         */
        montantCapital: number;
        /**
         * Txfatg_TegActu
         */
        tegActu: number;
    }
    interface IPalierContraintSchema extends IElementSchema {
        /**
         * Ddpe_DateDebtPerd
         * Type date au format yyyy-MM-dd
         */
        dateDebutPeriode: string;
        /**
         * Npfpco_DurePalr
         */
        durePalier: number;
        /**
         * Meface_MtEche
         */
        montantEcheance: number;
    }
    interface IRemiseClientSchema extends IElementSchema {
        /**
         * MtAppl
         */
        montantApplication: number;
        /**
         * TxAppl
         */
        tauxApplication: number;
    }
    interface ITrancheMontantSchema extends IElementSchema {
        /**
         * Txfcaa_TxTrchMt
         */
        tauxTrancheMontant: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
    }
    interface ICotisationSchema extends IElementSchema {
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: number;
        /**
         * Npfce1_NbPerdAppliCots
         */
        nombrePeriodeApplicationCotisation: number;
        /**
         * Txfipf_PartFinn
         */
        partFinancier: number;
        /**
         * Mtfgfr_MtFrsGarn
         */
        montantFrsGarantie: number;
        /**
         * Ctfcac_TypeAccs
         */
        typeAccessoire: string;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
        /**
         * TranchesMontant
         */
        tranchesMontant: Array<ITrancheMontantSchema>;
    }
    interface ICotisationPeriodeSchema extends ICotisationSchema {
    }
    interface ICotisationDerogationSchema extends ICotisationSchema {
    }
    interface ICotisationTrancheAgeSchema extends ICotisationSchema {
    }
    interface ICotisationPhaseSchema extends ICotisationSchema {
    }
    interface ICouvertureCreditSchema extends IElementSchema {
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
        /**
         * dMontantCoutTotalAssurance
         */
        montantCoutTotalAssurance: number;
        /**
         * dMontantEcheanceMaximale
         */
        montantEcheanceMaximale: number;
        /**
         * dMontantEcheanceMinimale
         */
        montantEcheanceMinimale: number;
        /**
         * dMontantMensualiteEcheance
         */
        montantMensualiteEcheance: number;
        /**
         * IdCredit
         */
        idCredit: string;
        /**
         * Cotisations
         */
        cotisations: Array<ICotisationSchema>;
    }
    interface IAccessoireSchema extends IElementSchema {
        /**
         * CouverturesCredits
         */
        couverturesCredits: Array<ICouvertureCreditSchema>;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
    }
    interface IAccessoireComplementaireSchema extends IAccessoireSchema {
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
    }
    interface IAccessoireLieProduitSchema extends IAccessoireSchema {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
    }
    interface IAvisOrganismeExterneSchema extends IElementSchema {
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd
         */
        dateAvis: string;
    }
    interface IAssuranceSchema extends IAccessoireSchema {
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * EstAssuranceAXA
         */
        estAssuranceAXA: boolean;
        /**
         * EstAssuranceCNP
         */
        estAssuranceCNP: boolean;
        /**
         * EstAssuranceGroupePourTAEA
         */
        estAssuranceGroupePourTAEA: boolean;
        /**
         * AvisOrganismeExterne
         */
        avisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * DerniersAvisOrganismeExterne
         */
        derniersAvisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
    }
    interface IGarantieSchema extends IAccessoireSchema {
        /**
         * IdPersonne
         */
        idPersonne: string;
    }
    interface IBienPorteEnGarantieSchema extends IElementSchema {
    }
    interface IHypothequeAerienneSchema extends IBienPorteEnGarantieSchema {
    }
    interface IBonDeCaisseCapitalisationSchema extends IBienPorteEnGarantieSchema {
    }
    interface IDelegationLoyerSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICessionDaillyAutreSchema extends IBienPorteEnGarantieSchema {
    }
    interface IVersementAttenduSchema extends IElementSchema {
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
    }
    interface IContratAssuranceSchema extends IBienPorteEnGarantieSchema {
        /**
         * VersementsAttendus
         */
        versementsAttendus: Array<IVersementAttenduSchema>;
    }
    interface IAntichreseSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICessionDaillyLoyerImmeubleSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageVehiculeSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageCompteInstrumentFinancierSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementPartSocialeSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementValeurMaterielleSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementValeurMobiliereSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementFondDeCommerceSchema extends IBienPorteEnGarantieSchema {
    }
    interface IProprietaireSchema extends IElementSchema {
    }
    interface IHypothequeImmobiliereSchema extends IBienPorteEnGarantieSchema {
        /**
         * Proprietaires
         */
        proprietaires: Array<IProprietaireSchema>;
    }
    interface IBienDiversSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICreditHDSchema extends IElementSchema {
        /**
         * Idfcct_RefrPret
         */
        referencePret: string;
        /**
         * Mtfaoc_MtPret
         */
        montantPret: number;
        /**
         * IdntCredExnt
         */
        idCreditExnt: string;
    }
    interface IGarantieHDSchema extends IElementSchema {
        /**
         * Cdfcng_NatrGarnHorsDoss
         */
        natureGarantieHorsDossier: string;
        /**
         * Idfgg1_IdntOrigGarnHorsDoss
         */
        idOrigineGarantieHorsDossier: string;
        /**
         * CreditsHD
         */
        creditsHD: Array<ICreditHDSchema>;
    }
    interface IGarantieReelleSchema extends IGarantieSchema {
        /**
         * BienPorteEnGarantie
         */
        bienPorteEnGarantie: IBienPorteEnGarantieSchema;
        /**
         * GarantieHD
         */
        garantieHD: IGarantieHDSchema;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
    }
    interface IGarantiePersonnelleSchema extends IGarantieSchema {
        /**
         * AvisOrganismeExterne
         */
        avisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * DerniersAvisOrganismeExterne
         */
        derniersAvisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface IServiceSurObjetSchema extends IAccessoireSchema {
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface IEcheanceOptimisationSchema extends IElementSchema {
        /**
         * Mefhcd_MtRembSais
         */
        montantRemboursementSaisie: number;
        /**
         * Ctfhel_CodeTypeElemSais
         */
        codeTypeElementSaisie: number;
    }
    interface ICreditPalierTauxSchema extends IElementSchema {
        /**
         * TxIntePalr
         */
        tauxInterieurPalier: ITauxInteretAnnuelLecture;
        /**
         * Txfcpg_TxPrgrEcheSurPalr
         */
        tauxProgressifEcheanceSurPalier: number;
        /**
         * DureeEnMois
         */
        dureeEnMois: number;
        /**
         * EcheancesOptimisation
         */
        echeancesOptimisation: Array<IEcheanceOptimisationSchema>;
    }
    interface ICreditParamIndexationSchema extends IElementSchema {
        /**
         * Nofrji_NumeIndcRevsCred
         */
        numeroIndiceRevisionCredit: number;
    }
    interface ICreditParamRevisionSchema extends IElementSchema {
        /**
         * Idfrlr_IdntLoiRevs
         */
        idLoiRevision: string;
        /**
         * Nofrji_NumeJeuIndcRevsAsscCred
         */
        numeroJeuxIndiceRevisionAssuranceCredit: number;
        /**
         * CreditParamsIndexation
         */
        creditParamsIndexation: Array<ICreditParamIndexationSchema>;
    }
    interface ICreditParamRevisionParPhaseSchema extends ICreditParamRevisionSchema {
    }
    interface ICreditPhaseSchema extends IElementSchema {
        /**
         * DureeEnMois
         */
        dureeEnMois: number;
        /**
         * CreditPaliersTaux
         */
        creditPaliersTaux: Array<ICreditPalierTauxSchema>;
        /**
         * CreditParamsRevisionParPhase
         */
        creditParamsRevisionParPhase: ICreditParamRevisionParPhaseSchema;
    }
    interface ICreditPalierProgressionSchema extends IElementSchema {
    }
    interface IComplementPhasePretCombineSchema extends IElementSchema {
    }
    interface ICreditPhaseAmortissementSchema extends ICreditPhaseSchema {
        /**
         * CreditPaliersProgression
         */
        creditPaliersProgression: Array<ICreditPalierProgressionSchema>;
        /**
         * ComplementPhasePretCombine
         */
        complementPhasePretCombine: IComplementPhasePretCombineSchema;
    }
    interface ICreditPhaseDiffereAmortissementSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhaseDiffereTotalSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhasePrefinancementSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhaseMobilisationSchema extends ICreditPhaseSchema {
    }
    interface ISuiviPlanifieSchema extends IElementSchema {
    }
    interface IPayeurSchema extends IElementSchema {
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
        /**
         * IdwsPersonne
         */
        idPersonne: string;
    }
    interface ICreditParamRevisionParPeriodeSchema extends ICreditParamRevisionSchema {
    }
    interface ICreditModaliteSchema extends IElementSchema {
        /**
         * Idfcmi_IdntModlCalcImpe
         */
        idModeleCalculImpe: string;
        /**
         * Nofcmc_NumeModlRembAntc
         */
        numeroModeleRemboursementAnticipe: number;
    }
    interface ICreditBonificationInfoSchema extends IElementSchema {
        /**
         * Cdfdic_CodeInfo
         */
        codeInformation: string;
        /**
         * sCdfddi_CodeDetail
         */
        codeDetail: string;
    }
    interface ICreditBonificationSchema extends IElementSchema {
        /**
         * IdentifiantConvention
         */
        idConvention: string;
        /**
         * Infos
         */
        information: Array<ICreditBonificationInfoSchema>;
    }
    interface IDroitUtiliseSchema extends IElementSchema {
        /**
         * Mtfadu_MtDrtAcqsUtls
         */
        montantDroitAcqsUtilisation: number;
        /**
         * IdntTrancheEL
         */
        idTrancheEL: string;
    }
    interface ICompteCourantSchema extends IElementSchema {
        /**
         * Mtfasc_MtHyptCapt
         */
        montantHypothequeCapital: number;
        /**
         * Cifcmh_CodeIndicBlcgSaisMtHyptCapt
         */
        codeIndiceBlcgSaisieMontantHypothequeCapital: number;
    }
    interface IVariationDureeSchema extends IElementSchema {
        /**
         * Npfarv_NbPerdVartPoss
         */
        nombrePeriodeVartPossibilite: number;
        /**
         * TypeButrVartDure
         */
        typeButoireVartDure: number;
    }
    interface IVersementFractionneSchema extends IElementSchema {
        /**
         * Nbfbvs_NbVerstSouh
         */
        nombreVersementSouh: number;
        /**
         * Mvfbmf_MtVerstFrct
         */
        montantVersementFraction: number;
    }
    interface IMarcheEPSSchema extends IElementSchema {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDoss
         */
        numeroRelPlanDossier: number;
        /**
         * Nofacp_NumRelCreditPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Ctfcme_CodeTypeMarche
         */
        codeTypeMarche: string;
    }
    interface IComplementEPSSchema extends IElementSchema {
        /**
         * Cnfcnb_NatrGarnEps
         */
        natureGarantieEPS: string;
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfapa_RefrExtnDossParn
         */
        referenceExterneDossierParent: string;
        /**
         * Idfcma_IdModeleActeEPS
         */
        idModeleActeEPS: string;
        /**
         * MarchesEPS
         */
        marchesEPS: Array<IMarcheEPSSchema>;
    }
    interface ITACreditEPSSchema extends IElementSchema {
        /**
         * Dtfhpr_DateEchnMER
         * Type date au format yyyy-MM-dd
         */
        dateEcheanceMER: string;
        /**
         * Mkfh03_MtCaptAmrt
         */
        montantCapitalAmortissement: number;
        /**
         * Mkfd01_MtCaptRestDu
         */
        montantCapitalRestantDu: number;
    }
    interface ICreditEPSSchema extends IElementSchema {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Txfccc_QuotCredCouvParEps
         */
        quotientCreditCouvertureParEPS: number;
        /**
         * Idfaez_RefeExtnCredCouvEps
         */
        referenceExterneCreditCouvertureEPS: string;
        /**
         * TaCredCouvParEps
         */
        taCreditCouvertureParEPS: Array<ITACreditEPSSchema>;
    }
    interface IAjustementTauxSchema extends IElementSchema {
    }
    interface ICreditInterneSchema extends IElementSchema {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
        /**
         * TegProp
         */
        tegProp: number;
        /**
         * Phases
         */
        phases: Array<ICreditPhaseSchema>;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
        /**
         * SuivisPlanifies
         */
        suivisPlanifies: Array<ISuiviPlanifieSchema>;
        /**
         * Payeurs
         */
        payeurs: Array<IPayeurSchema>;
        /**
         * CreditParamsRevision
         */
        creditParamsRevision: Array<ICreditParamRevisionSchema>;
        /**
         * CreditModalite
         */
        creditModalite: ICreditModaliteSchema;
        /**
         * CreditBonification
         */
        creditBonification: ICreditBonificationSchema;
        /**
         * DroitsUtilises
         */
        droitsUtilises: Array<IDroitUtiliseSchema>;
        /**
         * CompteCourant
         */
        compteCourant: ICompteCourantSchema;
        /**
         * VariationsDuree
         */
        variationsDuree: Array<IVariationDureeSchema>;
        /**
         * VersementFractionne
         */
        versementFractionne: IVersementFractionneSchema;
        /**
         * ComplementEPS
         */
        complementEPS: IComplementEPSSchema;
        /**
         * CreditsEPS
         */
        creditsEPS: Array<ICreditEPSSchema>;
        /**
         * AjustementTaux
         */
        ajustementTaux: IAjustementTauxSchema;
    }
    interface IRefusAssuranceExterneSchema extends IElementSchema {
        /**
         * Idfadi_IdDossierInstruction
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroRelatifPlanDossier
         */
        numeroRelatifPlanDossier: number;
        /**
         * Idfppe_Identifiantpersonne
         */
        identifiantpersonne: string;
        /**
         * Nofrfp_NumRangRefusProposition
         */
        numeroRangRefusProposition: number;
        /**
         * Lbfcia_CompagnieAssurance
         */
        compagnieAssurance: string;
        /**
         * Lbfrcc_ReferenceContrat
         */
        referenceContrat: string;
        /**
         * Ddfddr_DateReceptionDemande
         * Type date au format yyyy-MM-dd
         */
        dateReceptionDemande: string;
        /**
         * Ddfpic_DateImpressionDemande
         * Type date au format yyyy-MM-dd
         */
        dateImpressionDemande: string;
        /**
         * Cdfdda_CodeDecision
         */
        codeDecision: number;
        /**
         * Llfprp_RolePersonne
         */
        rolePersonne: string;
    }
    interface IOrigineApportSchema extends IElementSchema {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroPlanDossier
         */
        numeroPlanDossier: number;
        /**
         * Cdfoap_CodeOrigine
         */
        codeOrigine: number;
        /**
         * Mtfoap_MontantApportOrigine
         */
        montantApportOrigine: number;
    }
    interface IPlanFinancementSchema extends IElementSchema {
        /**
         * Mtfaso_MtTotlEmprPlan
         */
        montantTotalEmpruntPlan: number;
        /**
         * Mtfaap_MtApprPers
         */
        montantApportPersonne: number;
        /**
         * Mteh01_MtPreEchPhse
         */
        montantPreEchPhase: number;
        /**
         * Apl
         */
        aPL: IAplSchema;
        /**
         * SynthesePlanFinancement
         */
        synthesePlanFinancement: ISynthesePlanFinancementSchema;
        /**
         * CreditsExternes
         */
        creditsExternes: Array<ICreditExterneSchema>;
        /**
         * PaliersContraints
         */
        paliersContraints: Array<IPalierContraintSchema>;
        /**
         * AccessoiresComplementaires
         */
        accessoiresComplementaires: Array<IAccessoireComplementaireSchema>;
        /**
         * AccessoiresLiesProduit
         */
        accessoiresLiesProduit: Array<IAccessoireLieProduitSchema>;
        /**
         * Assurances
         */
        assurances: Array<IAssuranceSchema>;
        /**
         * Garanties
         */
        garanties: Array<IGarantieSchema>;
        /**
         * ServicesSurObjet
         */
        servicesSurObjet: Array<IServiceSurObjetSchema>;
        /**
         * CreditsInternes
         */
        creditsInternes: Array<ICreditInterneSchema>;
        /**
         * RefusAssuranceExternes
         */
        refusAssuranceExternes: Array<IRefusAssuranceExterneSchema>;
        /**
         * OriginesApport
         */
        originesApport: Array<IOrigineApportSchema>;
    }
    interface IProjetSchema extends IElementSchema {
        /**
         * Cdfcni_TypeObjtFinn
         */
        typeObjetFinancier: string;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * BienAVendre
         */
        bienAVendre: IBienAVendreSchema;
        /**
         * Reamenagement
         */
        reamenagement: IReamenagementSchema;
        /**
         * PlansFinancement
         */
        plansFinancement: Array<IPlanFinancementSchema>;
        /**
         * IdntPlanRetn
         */
        idPlanRetn: string;
    }
    interface IBienConsoFinanceSchema extends IElementSchema {
    }
    interface IAutoMotoSchema extends IBienConsoFinanceSchema {
    }
    interface IBienDetailleSchema extends IElementSchema {
    }
    interface IBienEquipementProSchema extends IBienDetailleSchema {
    }
    interface ITresorerieFinanceeSchema extends IBienDetailleSchema {
    }
    interface IProjetNonImmobilierSchema extends IProjetSchema {
        /**
         * BienConsoFinance
         */
        bienConsommationFinance: IBienConsoFinanceSchema;
        /**
         * BienEquipementPro
         */
        bienEquipementPro: IBienEquipementProSchema;
        /**
         * TresorerieFinancee
         */
        tresorerieFinancee: ITresorerieFinanceeSchema;
    }
    interface IPromotionImmobiliereSchema extends IElementSchema {
        /**
         * InttPrgm
         */
        intituleProgramme: string;
        /**
         * SittPrgm
         */
        situationProgramme: number;
    }
    interface ITerrainFinanceSchema extends IElementSchema {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
    }
    interface IBienSousJacentSchema extends IElementSchema {
    }
    interface ITerrainSousJacentSchema extends IBienSousJacentSchema {
    }
    interface ISoulteFinanceeSchema extends IElementSchema {
        /**
         * Mtfoac_MtSoul
         */
        montantSoul: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
    }
    interface IDetailCoutObjetSchema extends IElementSchema {
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Mtfoct_CoutTrvx
         */
        coutTravaux: number;
    }
    interface ITravauxFinancesSchema extends IElementSchema {
        /**
         * Mtfotr_CoutTrvx
         */
        coutTravaux: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
        /**
         * DetailsCoutObjet
         */
        detailsCoutObjet: Array<IDetailCoutObjetSchema>;
    }
    interface IConstructionFinanceeSchema extends IElementSchema {
        /**
         * Mtfoco_CoutConstFinn
         */
        coutConstructionFinancier: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
    }
    interface IBatimentHabitableFinanceSchema extends IElementSchema {
        /**
         * Mtfoac_CoutAcqsBatmHabt
         */
        coutAcqsBatimentHabitation: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
    }
    interface IButLocatifSchema extends IElementSchema {
        /**
         * Mtfolp_MtAnnuLoyePerc
         */
        montantAnnuLoyePerc: number;
    }
    interface ITrancheELSchema extends IElementSchema {
        /**
         * Mtfaac_MtDrtAcqs
         */
        montantDroitAcqs: number;
    }
    interface IContratEpargneLogementSchema extends IElementSchema {
        /**
         * Cdfppr_CodeTypeEL
         */
        codeTypeEL: number;
        /**
         * Nufpct_IdntContEl
         */
        idContratEpargneLogement: string;
        /**
         * TranchesEL
         */
        tranchesEL: Array<ITrancheELSchema>;
        /**
         * IdwsPersBenef
         */
        idPersonneBeneficiaire: string;
    }
    interface IProjetImmobilierSchema extends IProjetSchema {
        /**
         * PromotionImmobiliere
         */
        promotionImmobiliere: IPromotionImmobiliereSchema;
        /**
         * TerrainFinance
         */
        terrainFinance: ITerrainFinanceSchema;
        /**
         * SoulteFinance
         */
        soulteFinance: ISoulteFinanceeSchema;
        /**
         * TravauxFinance
         */
        travauxFinance: ITravauxFinancesSchema;
        /**
         * ConstructionFinance
         */
        constructionFinance: IConstructionFinanceeSchema;
        /**
         * BatimentHabitableFinance
         */
        batimentHabitableFinance: IBatimentHabitableFinanceSchema;
        /**
         * ButLocatif
         */
        butLocatif: IButLocatifSchema;
        /**
         * ContratsEL
         */
        contratsEL: Array<IContratEpargneLogementSchema>;
    }
    interface IProjetEPSSchema extends IProjetSchema {
    }
    interface IComplementDossierSchema extends IElementSchema {
        /**
         * Llfidr_LiblDelRelsProj
         */
        libelleDelReleaseProjet: string;
        /**
         * Ctfipt_CodePrrtTrt
         */
        codePrrtTraitement: string;
        /**
         * Dtfisi_DateSaisSurItnt
         * Type date au format yyyy-MM-dd
         */
        dateSaisieSurInternet: string;
        /**
         * Hefisi_HeurSaisSurItnt
         */
        heureSaisieSurInternet: number;
    }
    interface IPoolEPSSchema extends IElementSchema {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfaop_IdntOprtCess
         */
        idOprtCess: string;
        /**
         * Idfccf_IdntCadrFinn
         */
        idCadreFinancier: string;
        /**
         * Cnflpo_CodeNatrPool
         */
        codeNaturePool: number;
        /**
         * Cdfcor_CodeOrigCess
         */
        codeOrigineCess: number;
        /**
         * Ctfesr_TypeSousRolePool
         */
        typeSousRolePool: number;
        /**
         * Nofcca_NumVersionCadre
         */
        numeroVersionCadre: number;
    }
    interface IAgentSchema extends IElementSchema {
        /**
         * Idfaen_IdntAgent
         */
        idAgent: string;
        /**
         * Lbfaes_LblAgent
         */
        lblAgent: string;
        /**
         * EstAgentBO
         */
        estAgentBO: boolean;
        /**
         * EstBackup
         */
        estBackup: boolean;
        /**
         * EstAgentExterne
         */
        estAgentExterne: boolean;
        /**
         * Idfaeg_IdntEdsGest
         */
        idEDSGestion: string;
        /**
         * Lbfiba_LblAgenceRat
         */
        lblAgenceRat: string;
        /**
         * Cdfaaa_CdeAgentRat
         */
        cdeAgentRat: string;
        /**
         * Ctfauc_TypeUtilisateurCo
         */
        typeUtilisateurCo: number;
        /**
         * Idfce3_EtabBaofCent
         */
        etabBaofCentral: number;
        /**
         * Cdfabo_IdntEdsBaofCent
         */
        idEDSBaofCentral: string;
        /**
         * Cifttv_TechniqueDeVente
         */
        techniqueDeVente: number;
        /**
         * DerogationBornes
         */
        derogationBornes: boolean;
        /**
         * Role
         */
        role: number;
        /**
         * EstAgentRefusAssuranceExterne
         */
        estAgentRefusAssuranceExterne: boolean;
    }
    interface IDocumentOffreIndustrialiseeSchema extends IElementSchema {
        /**
         * DocumentCommun
         */
        documentCommun: string;
        /**
         * CodeEntiteFonctionnelle
         */
        codeEntiteFonctionnelle: string;
        /**
         * IdEntiteFonctionnelle
         */
        idEntiteFonctionnelle: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * LibelleDocument
         */
        libelleDocument: string;
        /**
         * IndicateurCasEcheant
         */
        indicateurCasEcheant: string;
        /**
         * EtatDocument
         */
        etatDocument: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Origine
         */
        origine: string;
    }
    interface IOffrePretIndustrialiseeSchema extends IElementSchema {
        /**
         * EditionEligible
         */
        editionEligible: boolean;
        /**
         * EditionEligibleEnAgence
         */
        editionEligibleEnAgence: boolean;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * DossierGdeACree
         */
        dossierGdeACree: boolean;
        /**
         * EtatDossierEdition
         */
        etatDossierEdition: string;
        /**
         * ListeDocumentsSchema
         */
        listeDocumentsSchema: Array<IDocumentOffreIndustrialiseeSchema>;
    }
    interface IDossierSchema extends IElementSchema {
        /**
         * Ctfado_EtatDoss
         */
        etatDossier: number;
        /**
         * TypeMoteurADR
         */
        typeMoteurADR: number;
        /**
         * Cefado_SousEtatDoss
         */
        sousEtatDossier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * EstEcoPtzCopro
         */
        estEcoPtzCopro: boolean;
        /**
         * EstDossierPartenaire
         */
        estDossierPartenaire: boolean;
        /**
         * BlocNotesDivers
         */
        blocNotesDivers: Array<IBlocNotesSchema>;
        /**
         * ClausesPersonnalisees
         */
        clausesPersonnalisees: Array<IClausePersonnaliseeSchema>;
        /**
         * AlertesEnSortie
         */
        alertesEnSortie: Array<IAlerteEnSortieSchema>;
        /**
         * AlertesEnEntree
         */
        alertesEnEntree: Array<IAlerteEnEntreeSchema>;
        /**
         * Avis
         */
        avis: Array<IAvisSchema>;
        /**
         * Evenements
         */
        evenements: Array<IEvenementSchema>;
        /**
         * Versements
         */
        versements: Array<IVersementSchema>;
        /**
         * RedacteurActe
         */
        redacteurActe: IRedacteurActeSchema;
        /**
         * Emprunteur
         */
        emprunteur: IEmprunteurSchema;
        /**
         * Garants
         */
        garants: Array<IGarantSchema>;
        /**
         * Personnes
         */
        personnes: Array<IPersonneSchema>;
        /**
         * Projet
         */
        projet: IProjetSchema;
        /**
         * ComplementDossier
         */
        complementDossier: IComplementDossierSchema;
        /**
         * PoolEPS
         */
        poolEPS: IPoolEPSSchema;
        /**
         * Agents
         */
        agents: Array<IAgentSchema>;
        /**
         * AnoCtlOuvrtDossier
         */
        anoCtlOuvrtDossier: Array<IAnomalieLecture>;
        /**
         * OffrePretIndustrialisee
         */
        offrePretIndustrialisee: IOffrePretIndustrialiseeSchema;
    }
    interface ILienEPSTirageLecture extends IElementLecture {
        /**
         * Idfadi_IdntDossInstr
         */
        sIdntDoss: string;
        /**
         * Idfaps_IdentifiantEPS
         */
        identifiantEPS: string;
        /**
         * Idfcej_Etablissement
         */
        etablissement: number;
    }
    interface ILienEPSTirageSchema extends IElementSchema {
        /**
         * Idfadi_IdntDossInstr
         */
        sIdntDoss: string;
        /**
         * Idfaps_IdentifiantEPS
         */
        identifiantEPS: string;
        /**
         * Idfcej_Etablissement
         */
        etablissement: number;
    }
    interface ILienEPSTirageMaj extends IElementMaj {
        /**
         * Idfadi_IdntDossInstr
         */
        sIdntDoss: string;
        /**
         * Idfaps_IdentifiantEPS
         */
        identifiantEPS: string;
        /**
         * Idfcej_Etablissement
         */
        etablissement: number;
    }
    interface IEntrepreneurIndividuelMaj extends IElementMaj {
        /**
         * AccordConjoint
         */
        accordConjoint: boolean;
        /**
         * NomConjoint
         */
        nomConjoint: string;
        /**
         * NomMandataire
         */
        nomMandataire: string;
        /**
         * VertuMandataire
         */
        vertuMandataire: string;
    }
    interface ISignataireMaj extends IElementMaj {
        /**
         * EmailContact
         */
        emailContact: string;
        /**
         * NumeroContact
         */
        numeroContact: string;
        /**
         * EstSignataireEffectif
         */
        estSignataireEffectif: boolean;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
    }
    interface IEntrepreneurIndividuelSchema extends IElementSchema {
        /**
         * EstEIRL
         */
        estEIRL: boolean;
        /**
         * IndicateurEIRL
         */
        indicateurEIRL: number;
        /**
         * LibelleEIRL
         */
        libelleEIRL: string;
        /**
         * AccordConjoint
         */
        accordConjoint: boolean;
    }
    interface ISignataireSchema extends IElementSchema {
        /**
         * EmailContact
         */
        emailContact: string;
        /**
         * NumeroContact
         */
        numeroContact: string;
        /**
         * EstSignataireEffectif
         */
        estSignataireEffectif: boolean;
    }
    interface IPretReamenageableMaj extends IElementMaj {
        /**
         * InfoPretMaj
         */
        informationPretMAJ: IPretReamenageMaj;
        /**
         * InfoRegroupementMaj
         */
        informationRegroupementMAJ: IInfoRegroupementMaj;
    }
    interface IPersonneAutreMaj extends IPersonneMaj {
        /**
         * Prenoms
         */
        prenoms: string;
    }
    interface IOffreSignatureElectroniqueMaj extends IElementMaj {
    }
    interface IOffrePretIndustrialiseeMaj extends IElementMaj {
    }
    interface IMotifEvenementConformiteMaj extends IElementMaj {
    }
    interface IEvenementConformiteMaj extends IElementMaj {
    }
    interface IDossierMRHMaj extends IElementMaj {
        /**
         * AppelEffectue
         */
        appelEffectue: boolean;
    }
    interface IAlerteEnSortieMaj extends IElementMaj {
        /**
         * Idfcej_IdCaisse
         */
        idCaisse: string;
        /**
         * Idfadi_IdntDoss
         */
        idDossier: string;
        /**
         * Dcfiax_DateAlerte
         * Type date au format yyyy-MM-dd
         */
        dateAlerte: string;
        /**
         * Drfiax_dateReponseAlerte
         * Type date au format yyyy-MM-dd
         */
        drfiax_DateReponseAlerte: string;
        /**
         * Ctfiax_TypeAlerte
         */
        typeAlerte: string;
        /**
         * Cefiax_EtatAlerte
         */
        etatAlerte: number;
        /**
         * Nofiax_NumRelatifAlerte
         */
        numeroRelatifAlerte: number;
    }
    interface IAjustementTauxMaj extends IElementMaj {
    }
    interface IInformationSignataireOffre {
        /**
         * DateSignatureRecepisse
         * Type date au format yyyy-MM-dd
         */
        dateSignatureRecepisse: string;
        /**
         * DateMiseAdispoOffre
         * Type date au format yyyy-MM-dd
         */
        dateMiseAdispoOffre: string;
        /**
         * DateSignatureOffre
         * Type date au format yyyy-MM-dd
         */
        dateSignatureOffre: string;
    }
    interface IInformationSignataireDemandeDeCreditAgence {
        /**
         * DateMiseADispoDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateMiseADispoDemandeDeCredit: string;
        /**
         * DateSignatureDemandeDeCredit
         * Type date au format yyyy-MM-dd
         */
        dateSignatureDemandeDeCredit: string;
    }
    interface IInformationSignataireGenerique {
        /**
         * LibelleTitreCivilite
         */
        libelleTitreCivilite: string;
        /**
         * NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Prenoms
         */
        prenoms: string;
        /**
         * InformationsSignataireOffre
         */
        informationsSignataireOffre: IInformationSignataireOffre;
        /**
         * InformationSignataireDemandeDeCreditAgence
         */
        informationSignataireDemandeDeCreditAgence: IInformationSignataireDemandeDeCreditAgence;
    }
    interface IInformationDossierSignatureOffre {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierDemandeDeCreditAgence {
        /**
         * EstProcessusLance
         */
        estProcessusLance: boolean;
    }
    interface IInformationDossierSignatureGenerique {
        /**
         * TypeSignature
         */
        typeSignature: string;
        /**
         * IdentifiantActeIDN
         */
        identifiantActeIDN: string;
        /**
         * DateCreationDosElec
         */
        dateCreationDosElec: string;
        /**
         * DateOuvertureTransaction
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureTransaction: string;
        /**
         * DateCreationActe
         * Type date au format yyyy-MM-dd
         */
        dateCreationActe: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * MotifAnnulation
         */
        motifAnnulation: string;
        /**
         * ActeExiste
         */
        acteExiste: boolean;
        /**
         * EstDossierComplete
         */
        estDossierComplete: boolean;
        /**
         * EstDossierValide
         */
        estDossierValide: boolean;
        /**
         * EstDossierSigne
         */
        estDossierSigne: boolean;
        /**
         * InformationsSignataire
         */
        informationsSignataire: Array<IInformationSignataireGenerique>;
        /**
         * InformationsSignatureOffre
         */
        informationsSignatureOffre: IInformationDossierSignatureOffre;
        /**
         * InformationsDemandeDeCreditAgence
         */
        informationsDemandeDeCreditAgence: IInformationDossierDemandeDeCreditAgence;
    }
    interface ISignatureElectroniqueLecture extends IElementLecture {
        /**
         * InformationDossierSignature
         */
        informationDossierSignature: IInformationDossierSignatureGenerique;
        /**
         * ListeDocumentIDN
         */
        listeDocumentIDN: Array<IDocumentSignatureElectroniqueLecture>;
    }
    interface ISignataireLecture extends IElementLecture {
        /**
         * EmailContact
         */
        emailContact: string;
        /**
         * NumeroContact
         */
        numeroContact: string;
        /**
         * EmailsContactsChoisissables
         */
        emailsContactsChoisissables: Array<string>;
        /**
         * NumerosContactsChoisissables
         */
        numerosContactsChoisissables: string;
        /**
         * EstSignataireEffectif
         */
        estSignataireEffectif: boolean;
        /**
         * EstAutoriseASigner
         */
        estAutoriseASigner: boolean;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * TypeSignataire
         */
        typeSignataire: number;
    }
    interface IFCX50ACA {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * NomPersonneMorale
         */
        nomPersonneMorale: IChampTextBox;
        /**
         * NombreCreditsAModifierACA
         */
        nombreCreditsAModifierACA: number;
        /**
         * ListeDonneesCreditAModifierACA
         */
        listeDonneesCreditAModifierACA: Array<IDonneesCreditLecture>;
    }
    interface IFC055FSI {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * SaisieComplementaireNecessaire
         */
        saisieComplementaireNecessaire: boolean;
        /**
         * Messages
         */
        messages: IChampLabelMultiLine;
        /**
         * NumeroOrias
         */
        numeroOrias: IChampCache;
        /**
         * NombreCreditsAModifier
         */
        nombreCreditsAModifier: IChampCache;
        /**
         * ListeDonneesCreditAModifier
         */
        listeDonneesCreditAModifier: Array<IDonneesCreditLecture>;
    }
    interface IPersonneAutreLecture extends IPersonneLecture {
        /**
         * Prenoms
         */
        prenoms: string;
    }
    interface IEntrepreneurIndividuelLecture extends IElementLecture {
    }
    interface IDocumentAssuranceLecture extends IElementLecture {
        /**
         * IdDocument
         */
        idDocument: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * IdContrat
         */
        idContrat: string;
        /**
         * TabDonneesDocument
         */
        tabDonneesDocument: string;
    }
    interface ICalculELLecture extends IElementLecture {
        /**
         * Tranche
         */
        tranche: ITrancheELLecture;
        /**
         * DroitUtilise
         */
        droitUtilise: IDroitUtiliseLecture;
        /**
         * Idfadi_IdDossier
         */
        idDossier: string;
        /**
         * Nufpct_IdContrat
         */
        idContrat: string;
        /**
         * Nofpdp_NumRelatifDossier
         */
        numeroRelatifDossier: number;
        /**
         * Ddfpct_DateOuvertureContrat
         */
        dateOuvertureContrat: string;
        /**
         * Txfpep_TauxEpargne
         */
        tauxEpargne: number;
        /**
         * Mtfaac_MontantDroitsAcquis
         */
        montantDroitsAcquis: number;
        /**
         * Dtfpae_DateArrete
         */
        dateArrete: string;
        /**
         * Ctfpli_LienParenteAvecCedant
         */
        lienParenteAvecCedant: string;
        /**
         * Cdfadv
         */
        cdfadv: string;
        /**
         * Mtfadu_MtDroitsAcquisUtilises
         */
        montantDroitsAcquisUtilises: number;
        /**
         * Txftpr_TauxPretCatalogue
         */
        tauxPretCatalogue: number;
        /**
         * Mkfmax_CapMaxOct
         */
        capMaximumOct: number;
        /**
         * Mtfaoc_MtPretOctroye
         */
        montantPretOctroye: number;
        /**
         * Mtfmax_EchMaxOct
         */
        echMaximumOct: number;
        /**
         * Mtfape_MtEchUtilise
         */
        montantEchUtilise: number;
        /**
         * Mtfali_MtLimite
         */
        montantLimite: number;
        /**
         * bDroitUtilisable
         */
        droitUtilisable: boolean;
    }
    interface ITravauxFinancesLecture extends IElementLecture {
        /**
         * Mtfotr_CoutTrvx
         */
        coutTravaux: number;
        /**
         * Dffotr_DateFinTrvx
         * Type date au format yyyy-MM-dd
         */
        dateFinTravaux: string;
        /**
         * Nbfose_SurfHabtCree
         */
        surfHabitationCree: number;
        /**
         * Cdfoig_TypeTrvxCadrEcpt
         */
        typeTravauxCadreEcpt: number;
        /**
         * SurfHabtTotlApreTrvx
         */
        surfHabitationTotalApreTravaux: number;
        /**
         * Dtfoco_DateConstBatmSjac
         * Type date au format yyyy-MM-dd
         */
        dateConstructionBatimentSousJacent: string;
        /**
         * Nbfosh_SurfHabtBatmSjac
         */
        surfHabitationBatimentSousJacent: number;
        /**
         * Dtfoac_DateAcqsBatmSjac
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBatimentSousJacent: string;
        /**
         * Ctfmoi_TypeLogmBatmSous
         */
        typeLogementBatimentSous: number;
        /**
         * LibelleTypeLogmBatmSous
         */
        libelleTypeLogementBatimentSous: string;
        /**
         * Nbfolo_NbreLogmBatmSous
         */
        nbreLogementBatimentSous: number;
        /**
         * Caftte_TypeEcoPtz
         */
        typeEcoPtz: number;
        /**
         * Mtfap6_MontantEcoPtzInitial
         */
        montantEcoPtzInitial: number;
        /**
         * Dtftde_DateCreationEcoPtzInitial
         * Type date au format yyyy-MM-dd
         */
        dateCreationEcoPtzInitial: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * IdntBienSjac
         */
        idBienSousJacent: string;
        /**
         * ListIdntDetlCoutTrvxEcpt
         */
        listeIdDetlCoutTravauxEcpt: Array<string>;
        /**
         * LibelleTypeTrvxCadrEcpt
         */
        libelleTypeTrvxCadrEcpt: string;
    }
    interface IProjetImmobilierLecture extends IProjetLecture {
        /**
         * Cifopa_DefnSiEmprEstPrm
         */
        defnSiEmpruntEstPrm: boolean;
        /**
         * Cofopz_CodeCondDergPourPtz
         */
        codeConditionDerogationPourPtz: number;
        /**
         * ValdelgbaPrmAccsPourCateReglAttr
         */
        valdelgbaPrmAccessoirePourCateRegleAttribut: boolean;
        /**
         * ElgbPtz
         */
        eligibilitePtz: boolean;
        /**
         * ElgbPc
         */
        eligibilitePC: boolean;
        /**
         * ElgbPas
         */
        eligibilitePas: boolean;
        /**
         * ElgbaEl
         */
        elgbaEpargneLogement: boolean;
        /**
         * ElgbaEcpt
         */
        elgbaEcpt: boolean;
        /**
         * Cdfose_CodeBatmBassConso
         */
        codeBatimentBassConsommation: number;
        /**
         * Cdfomo_CodeModlOccpLogm
         */
        codeModeleOccpLogement: number;
        /**
         * Ctfopm_CodePrixMarc
         */
        codePrixMarche: number;
        /**
         * LibelleCodePrixMarc
         */
        libelleCodePrixMarche: string;
        /**
         * Ctfmmc_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * LibelleCodeTypeMarc
         */
        libelleCodeTypeMarche: string;
        /**
         * Ctfmpo_TypePrpr
         */
        typeProprietaire: number;
        /**
         * LibelleTypePrpr
         */
        libelleTypeProprietaire: string;
        /**
         * Txfmpa_PctPrprApreOper
         */
        pourcentageProprietaireApreOper: number;
        /**
         * Mgfovh_MtInscHypt
         */
        montantInscHypotheque: number;
        /**
         * Cdfqem_QualEmplaProj
         */
        qualEmplaProjet: number;
        /**
         * ZoneReglRobnBien
         */
        zoneRegleRobnBien: string;
        /**
         * ZonePlusLogm
         */
        zonePlusLogement: string;
        /**
         * Cdfozg_CodeZoneGegrRegl
         */
        codeZoneGegrRegle: number;
        /**
         * Cdfwti_TypeImeu
         */
        typeImeu: number;
        /**
         * Cifclh_CodeLogmHlm
         */
        codeLogementHlm: number;
        /**
         * Cifclh_EstLogmHlm
         */
        estLogementHlm: boolean;
        /**
         * Idfapi_IdntPrgmImmb
         */
        idProgrammeImmobilier: string;
        /**
         * Idfaap_IdntAccrPourInst
         */
        idAccrPourInstruction: string;
        /**
         * Cifcep_IndicemssNouvPartScpi
         */
        indicemssNouvPartScpi: number;
        /**
         * Ctfcve_CodeTypeMarcPourVent
         */
        codeTypeMarchePourVent: number;
        /**
         * Idfove_NomSoceGest
         */
        nomSoceGestion: string;
        /**
         * Cdfizf_CentreBourgRural
         */
        centreBourgadeRural: boolean;
        /**
         * DroitAcquisPEL
         */
        droitAcquisPEL: number;
        /**
         * DroitAcquisCEL
         */
        droitAcquisCEL: number;
        /**
         * IdntTerrFinn
         */
        idTerrFinancier: string;
        /**
         * IdntTrvxFinn
         */
        idTravauxFinancier: string;
        /**
         * IdntConstFinn
         */
        idConstructionFinancier: string;
        /**
         * IdntBatmHabtFinn
         */
        idBatimentHabitationFinancier: string;
        /**
         * IdntSoulFinn
         */
        idSoulFinancier: string;
        /**
         * IdntObjtButLocf
         */
        idObjetButLocf: string;
        /**
         * IdntObjtPrmtImmb
         */
        idObjetPrmtImmobilier: string;
    }
    interface IProjetLecture extends IElementLecture {
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * BonificationEstValide
         */
        bonificationEstValide: boolean;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cdfcfo_CateReglAttr
         */
        cateRegleAttribut: string;
        /**
         * Cdfcni_TypeObjtFinn
         */
        typeObjetFinancier: string;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * LibelleModlEstVenl
         */
        libelleModeleEstVenl: string;
        /**
         * Cdfomp_CodeMiseOeuvrProjPro
         */
        codeMiseOeuvrProjetPro: number;
        /**
         * LibelleCodeMiseOeuvrProjPro
         */
        libelleCodeMiseOeuvrProjetPro: string;
        /**
         * Cdfonn_NegcEffcParNotr
         */
        negocieEffcParNotaire: boolean;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * Cdfwna_NaturesConcoursExternes
         */
        naturesConcoursExternes: Array<IScConstante>;
        /**
         * Cdfwrl_PresBienAVend
         */
        presBienAVend: boolean;
        /**
         * Cifocs_CoutObjtSaisCalcEnvl
         */
        coutObjetSaisieCalculEnvl: number;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Ctfgce_CritElgGarFEI
         */
        critereElgGarFEI: string;
        /**
         * Ctfifd_InteFrsDivrFinn
         */
        interieurFrsDivrFinancier: string;
        /**
         * Ctfoan_TypeAcqs
         */
        typeAcqs: number;
        /**
         * Ctfonu_NbUnteContPrgmImmb
         */
        nombreUnteContratProgrammeImmobilier: string;
        /**
         * Ctmicr_TypeLoiFICP
         */
        typeLoiFICP: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * FraisDeNotairesSaisissables
         */
        fraisDeNotairesSaisissables: boolean;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Lbfoof_DescObjt
         */
        descriptionObjet: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * Mofcpz_CoutRelOper
         */
        coutRelOper: number;
        /**
         * Mtfcra_MtRachCren
         */
        montantRachCren: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Mtfofd_MtFrsDivr
         */
        montantFrsDivr: number;
        /**
         * Mtfofn_CoutFrsNotr
         */
        coutFrsNotaire: number;
        /**
         * Mtfoho_CoutTotlObjtHt
         */
        coutTotalObjetHt: number;
        /**
         * Mtfott_CoutTotlObjtTtc
         */
        coutTotalObjetTTC: number;
        /**
         * PrendreBienSousJacentPourGarantie
         */
        prendreBienSousJacentPourGarantie: boolean;
        /**
         * RedacteurActeObligatoire
         */
        redacteurActeObligatoire: boolean;
        /**
         * IdntBienAVend
         */
        idBienAVend: string;
        /**
         * IdntLignInvs
         */
        idLigneInvs: string;
        /**
         * IdntLignTirg
         */
        idLigneTirg: string;
        /**
         * IdntPlanRetn
         */
        idPlanRetn: string;
        /**
         * IdntReam
         */
        idReamenagement: string;
        /**
         * ListIdntPlanFinn
         */
        listeIdPlanFinancier: Array<string>;
        /**
         * DescriptionProjet
         */
        descriptionProjet: string;
    }
    interface IConstructionFinanceeLecture extends IElementLecture {
        /**
         * Mtfoco_CoutConstFinn
         */
        coutConstructionFinancier: number;
        /**
         * Dtfoac_DateDebtConst
         * Type date au format yyyy-MM-dd
         */
        dateDebutConstruction: string;
        /**
         * Dffotr_DateFinConst
         * Type date au format yyyy-MM-dd
         */
        dateFinConstruction: string;
        /**
         * Mtfotm_CoutTrvxAChrgMoa
         */
        coutTravauxAChargeMoa: number;
        /**
         * Mtfotv_MtTvaFinnARemb
         */
        montantTVAFinancierARemboursement: number;
        /**
         * Ctfmcc_TypeContConst
         */
        typeContratConstruction: number;
        /**
         * LibelleTypeContConst
         */
        libelleTypeContratConstruction: string;
        /**
         * Cdfwti_TypeImeu
         */
        typeImeu: number;
        /**
         * Cdfoga_PresUneGarnAcheTrvx
         */
        presUneGarantieAcheTravaux: number;
        /**
         * LibellePresUneGarnAcheTrvx
         */
        libellePresUneGarantieAcheTravaux: string;
        /**
         * Nbfosh_SurfHabtCreeParConst
         */
        surfHabitationCreeParConstruction: number;
        /**
         * Nbfosa_SurfAnnx
         */
        surfAnnx: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * LibelleCtfoloTypeLogement
         */
        libelleTypeLogement: string;
        /**
         * Nbfolo_NbLogmConst
         */
        nombreLogementConstruction: number;
        /**
         * Nbfwpp_NbPiecPrncConst
         */
        nombrePiecePrincipalConstruction: number;
        /**
         * Ctfmoi_TypeLogm
         */
        typeLogement1: number;
        /**
         * LibelleCtfmoiTypeLogement
         */
        libelleTypeLogement1: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * IdntTerrSjac
         */
        idTerrSousJacent: string;
    }
    interface IBienSousJacentLecture extends IElementLecture {
        /**
         * Ctfmma_ModeAcqsBien
         */
        modeAcqsBien: number;
        /**
         * LibelleModeAcquisition
         */
        libelleModeAcquisition: string;
        /**
         * Mkfmct_CrdBienSjac
         */
        crdbienSousJacent: number;
        /**
         * Dtfoat_DateEntrCaptDateAcqs
         * Type date au format yyyy-MM-dd
         */
        dateEntrCapitalDateAcqs: string;
        /**
         * Ctfogp_ModeFinn
         */
        modeFinancier: number;
        /**
         * LibelleModeFinancement
         */
        libelleModeFinancement: string;
        /**
         * Cdfcni_TypeObjtComl
         */
        typeObjetCommercialisation: string;
        /**
         * Lbni_LibelleLong
         */
        libelleTypeObjCom: string;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Lbfcor_LibelleLong
         */
        libelleTypeObjReg: string;
        /**
         * Cnfcng_NatrGarnt
         */
        natureGarnt: number;
        /**
         * LibelleNatureGarantie
         */
        libelleNatureGarantie: string;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * LibelleModlEstmVenl
         */
        libelleModeleEstmVenl: string;
        /**
         * IdntBien
         */
        idBien: string;
    }
    interface IBatimentHabitableFinanceLecture extends IElementLecture {
        /**
         * Nbfosh_SurfHabtCreeParConst
         */
        surfHabitationCreeParConstruction: number;
        /**
         * Nbfosa_SurfAnnx
         */
        surfAnnx: number;
        /**
         * Mtfoac_CoutAcqsBatmHabt
         */
        coutAcqsBatimentHabitation: number;
        /**
         * Ctfopm_CodePrixMarcBale2
         */
        codePrixMarcheBale2: number;
        /**
         * Mtfomf_MtMoblFinn
         */
        montantMoblFinancier: number;
        /**
         * Mtfcfn_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * Dtfaoc_DateAcqsBatmHabt
         * Type date au format yyyy-MM-dd
         */
        dateAcqsBatimentHabitation: string;
        /**
         * Dtfoco_DateConstBatmHabt
         * Type date au format yyyy-MM-dd
         */
        dateConstructionBatimentHabitation: string;
        /**
         * Mtfotv_MtTvaFinnARemb
         */
        montantTVAFinancierARemboursement: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * LibelleCtfoloTypeLogement
         */
        libelleTypeLogement: string;
        /**
         * Nbfolo_NbLogmConst
         */
        nombreLogementConstruction: number;
        /**
         * Nbfwpp_NbPiecPrncConst
         */
        nombrePiecePrincipalConstruction: number;
        /**
         * Ctfmoi_TypeLogm
         */
        typeLogement1: number;
        /**
         * LibelleCtfmoiTypeLogement
         */
        libelleTypeLogement1: string;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * IdntTerrSjac
         */
        idTerrSousJacent: string;
    }
    interface IOccupantMaj extends IElementMaj {
        /**
         * LibelleOccupant
         */
        libelleOccupant: string;
        /**
         * Lien
         */
        lien: number;
        /**
         * RevenuFiscal
         */
        revenuFiscal: number;
    }
    interface IRattachementFoyerFiscalTiersMaj extends IElementMaj {
        /**
         * Identification
         */
        identification: string;
        /**
         * Annee
         */
        annee: number;
        /**
         * Montant
         */
        montant: number;
    }
    interface IInformationOccupationMaj extends IElementMaj {
        /**
         * DateDebut
         * Type date au format yyyy-MM-dd
         */
        dateDebut: string;
        /**
         * DateFin
         * Type date au format yyyy-MM-dd
         */
        dateFin: string;
        /**
         * StatutOccupation
         */
        statutOccupation: number;
        /**
         * RattachementAutre
         */
        rattachementAutre: string;
        /**
         * Adresse
         */
        adresse: string;
    }
    interface ITuteurMaj extends IElementMaj {
    }
    interface IFCM17NFO {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * PresenceEINonEmprunteur
         */
        presenceEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleEINonEmprunteur
         */
        libelleEINonEmprunteur: IChampTextBox;
        /**
         * AccordConjointEINonEmprunteur
         */
        accordConjointEINonEmprunteur: IChampRadioButton;
        /**
         * LibelleConjointEINonEmprunteur
         */
        libelleConjointEINonEmprunteur: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * RepresPersMorale
         */
        represPersonneMorale: IChampTextBox;
        /**
         * AgissantPersMorale
         */
        agissantPersonneMorale: IChampTextBox;
        /**
         * Vertu1PersMorale
         */
        vertu1PersonneMorale: IChampTextBox;
        /**
         * Vertu2PersMorale
         */
        vertu2PersonneMorale: IChampTextBox;
        /**
         * Vertu3PersMorale
         */
        vertu3PersonneMorale: IChampTextBox;
        /**
         * Vertu4PersMorale
         */
        vertu4PersonneMorale: IChampTextBox;
        /**
         * Vertu5PersMorale
         */
        vertu5PersonneMorale: IChampTextBox;
        /**
         * Vertu6PersMorale
         */
        vertu6PersonneMorale: IChampTextBox;
        /**
         * Vertu7PersMorale
         */
        vertu7PersonneMorale: IChampTextBox;
        /**
         * Vertu8PersMorale
         */
        vertu8PersonneMorale: IChampTextBox;
        /**
         * Vertu9PersMorale
         */
        vertu9PersonneMorale: IChampTextBox;
        /**
         * Vertu10PersMorale
         */
        vertu10PersonneMorale: IChampTextBox;
        /**
         * Vertu11PersMorale
         */
        vertu11PersonneMorale: IChampTextBox;
        /**
         * Vertu12PersMorale
         */
        vertu12PersonneMorale: IChampTextBox;
        /**
         * RepresPreteurCE
         */
        represPreteurCE: IChampTextBox;
        /**
         * RaisonSocialePersMoraleNantissement
         */
        raisonSocialePersonneMoraleNantissement: IChampTextBox;
        /**
         * RepresPersMoraleNantissement
         */
        represPersonneMoraleNantissement: IChampTextBox;
        /**
         * EnQualitePersMoraleNantissement
         */
        enQualitePersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu1PersMoraleNantissement
         */
        vertu1PersonneMoraleNantissement: IChampTextBox;
        /**
         * Vertu2PersMoraleNantissement
         */
        vertu2PersonneMoraleNantissement: IChampTextBox;
    }
    interface IBienLecture {
        /**
         * NatureBien
         */
        natureBien: IChampTextBox;
        /**
         * QuantiteBien
         */
        quantiteBien: IChampTextBox;
        /**
         * ValeurBien
         */
        valeurBien: IChampTextBox;
        /**
         * LieuSituationBien
         */
        lieuSituationBien: IChampTextBox;
        /**
         * MarqueBien
         */
        marqueBien: IChampTextBox;
        /**
         * NumSerieBien
         */
        numeroSerieBien: IChampTextBox;
    }
    interface IFCM17GBM {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * PresenceEmprunteurIndividuel
         */
        presenceEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleEmprunteurIndividuel
         */
        libelleEmprunteurIndividuel: IChampTextBox;
        /**
         * AccordConjointEmprunteurIndividuel
         */
        accordConjointEmprunteurIndividuel: IChampRadioButton;
        /**
         * LibelleConjointEmprunteurIndividuel
         */
        libelleConjointEmprunteurIndividuel: IChampTextBox;
        /**
         * RaisonConstituantMandataire
         */
        raisonConstituantMandataire: IChampTextBox;
        /**
         * NomMandataire
         */
        nomMandataire: IChampTextBox;
        /**
         * VertuMandataire
         */
        vertuMandataire: IChampTextBox;
        /**
         * NombreBiensMC
         */
        nombreBiensMC: number;
        /**
         * NomenclatureBiens
         */
        nomenclatureBiens: IChampComboBox;
        /**
         * ListeBienMC
         */
        listeBienMC: Array<IBienLecture>;
        /**
         * RepresPersMoraleGageBienMeuble
         */
        represPersMoraleGageBienMeuble: IChampTextBox;
        /**
         * AgissantPersMoraleGageBienMeuble
         */
        agissantPersMoraleGageBienMeuble: IChampTextBox;
        /**
         * Vertu1PersMoraleGageBienMeuble
         */
        vertu1PersMoraleGageBienMeuble: IChampTextBox;
        /**
         * Vertu2PersMoraleGageBienMeuble
         */
        vertu2PersMoraleGageBienMeuble: IChampTextBox;
        /**
         * VilleTribunal
         */
        villeTribunal: IChampTextBox;
    }
    interface IBienMaj {
        /**
         * NatureBien
         */
        natureBien: string;
        /**
         * QuantiteBien
         */
        quantiteBien: string;
        /**
         * ValeurBien
         */
        valeurBien: string;
        /**
         * LieuSituationBien
         */
        lieuSituationBien: string;
        /**
         * MarqueBien
         */
        marqueBien: string;
        /**
         * NumSerieBien
         */
        numeroSerieBien: string;
    }
    interface IFCM07LAN {
        /**
         * Titre
         */
        titre: ILabel;
        /**
         * TypeEnvoi
         */
        typeEnvoi: IChampComboBox;
    }
    interface IInformationsComplementairesSCIMaj extends IElementMaj {
        /**
         * ObjetSocialDedieAcqBienFin
         */
        objetSocialDedieAcqBienFin: boolean;
        /**
         * BienOccupeTitreGratuit
         */
        bienOccupeTitreGratuit: boolean;
        /**
         * ChoixVolontaireLoiImmo
         */
        choixVolontaireLoiImmo: boolean;
    }
    interface IScPhasePilote extends IScElement {
        /**
         * FonctionsPilote
         */
        fonctionsPilote: Array<string>;
    }
}

declare namespace ICRest.Modeles.MiseAJourPhase {
    interface IMiseAJourPhaseRequest {
        identifiantDossier: string;
        creditPhaseMAJ: ICreditPhaseMaj;
        complementPhasePretCbinMAJ: IComplementPhasePretCombineMaj;
        creditParamRevisionPhaseMAJ: ICreditParamRevisionParPhaseMaj;
    }
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface ICreditPhaseMaj extends IElementMaj {
        /**
         * Capitalisation
         */
        capitalisation: boolean;
        /**
         * Ctfcki_ModeCaptRecvInte
         */
        modeCapitalRecouvrementInterieur: number;
        /**
         * Cdfcki_CodeCaptRecvInte
         */
        codeCapitalRecouvrementInterieur: number;
        /**
         * Ptfcin_CodePerdAsscCalcInte
         */
        codePeriodeAssuranceCalculInterieur: number;
        /**
         * Ptfcam_CodePerdCalcMer
         */
        codePeriodeCalculMER: number;
        /**
         * Npfcph_NbPerdPhas
         */
        nombrePeriodePhase: number;
        /**
         * Pefcph_CodePerdDurePhas
         */
        codePeriodeDurePhase: number;
        /**
         * ValrTxPhas
         */
        valeurTauxPhase: number;
    }
    interface ICreditPhaseAmortissementMaj extends ICreditPhaseMaj {
        /**
         * Txfcqa_QuotAmrt
         */
        quotientAmortissement: number;
        /**
         * Txfaom_TxConstPhasCred
         */
        tauxConstructionPhaseCredit: number;
        /**
         * Mefhcd_MtEchmOptm
         */
        montantEchmOptimisation: number;
    }
    interface ICreditPhaseDiffereAmortissementMaj extends ICreditPhaseMaj {
    }
    interface ICreditPhaseDiffereTotalMaj extends ICreditPhaseMaj {
    }
    interface ICreditPhaseMobilisationMaj extends ICreditPhaseMaj {
    }
    interface ICreditPhasePrefinancementMaj extends ICreditPhaseMaj {
        /**
         * Cdfppf_CodeRedcDureePref
         */
        codeReductionDureePref: number;
        /**
         * RedcDureePref
         */
        reductionDureePref: boolean;
    }
    interface IComplementPhasePretCombineMaj extends IElementMaj {
        /**
         * Mafaqa_MtAmrt
         */
        montantAmortissement: number;
        /**
         * Mkfaif_MtInfine
         */
        montantInfine: number;
        /**
         * Ctfark_ModeSaisReprCapt
         */
        modeSaisieReprCapital: number;
        /**
         * Tafaqa_QuotAmrt
         */
        quotientAmortissement: number;
    }
    interface ICreditParamRevisionMaj extends IElementMaj {
        /**
         * Nofrji_NumeJeuIndcRevsAsscCred
         */
        numeroJeuxIndiceRevisionAssuranceCredit: number;
        /**
         * Ctfrub_ModeExprButrTxBais
         */
        modeExpressionButoireTauxBaisse: number;
        /**
         * Ctfruh_ModeExprButrTxHaus
         */
        modeExpressionButoireTauxHausse: number;
        /**
         * Tvfru1_ValrButrTxBais
         */
        valeurButoireTauxBaisse: number;
        /**
         * Tvfru2_ValrButrTxHaus
         */
        valeurButoireTauxHausse: number;
    }
    interface ICreditParamRevisionParPhaseMaj extends ICreditParamRevisionMaj {
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface ITauxInteretAnnuelLecture {
        /**
         * ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * TxActu
         */
        tauxActu: number;
        /**
         * TxProp
         */
        tauxProp: number;
    }
    interface ITauxIndiceLecture extends ITauxInteretAnnuelLecture {
        /**
         * Marg
         */
        marge: number;
        /**
         * ValrIndc
         */
        valeurIndice: number;
    }
    interface ITauxFixeLecture extends ITauxInteretAnnuelLecture {
    }
    interface ITauxMixteLecture extends ITauxInteretAnnuelLecture {
        /**
         * Rpar
         */
        repartition: number;
        /**
         * TxIndcCmpstTxMixt
         */
        tauxIndiceCmpstTauxMixte: ITauxIndiceLecture;
        /**
         * TxFixeCmpstTxMixt
         */
        tauxFixeCmpstTauxMixte: ITauxFixeLecture;
    }
    interface IScElement {
    }
    interface IScProduitPhase extends IScElement {
        /**
         * Cdfcpo_CodeFamlPrdt
         */
        codeFamilleProduit: string;
        /**
         * Nofcvp_NumrReltPrdt
         */
        numeroRelationProduit: string;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Nofcfp_NoReltPhas
         */
        numeroRelationPhase: number;
        /**
         * Dtfisy_DateTrt
         * Type date au format yyyy-MM-dd
         */
        dateTraitement: string;
        /**
         * Dffcap_DateFinAppli
         * Type date au format yyyy-MM-dd
         */
        dateFinApplication: string;
        /**
         * Ddfcap_DateDebuAppli
         * Type date au format yyyy-MM-dd
         */
        dateDebutApplication: string;
        /**
         * Pefcph_UnitDurDunPhas
         */
        uniteDureeDunPhase: number;
        /**
         * Cdfcph_ModeExprDurPhas
         */
        modeExpressionDureePhase: number;
        /**
         * Npfcq1_DurPhasPrdt
         */
        dureePhaseProduit: number;
        /**
         * Npfcq2_DurPhasPrdt
         */
        dureePhaseProduit1: number;
        /**
         * Npfcq3_DurPhasPrdt
         */
        dureePhaseProduit2: number;
        /**
         * Npfcq4_DurDunPhasPas
         */
        dureeDunPhasePas: number;
        /**
         * Ptfcin_PerdicCalcIntr
         */
        periodiciteCalculIntr: number;
        /**
         * Ptfci1_PerdicCalcIntr
         */
        periodiciteCalculIntr1: number;
        /**
         * Ptfci2_PerdicCalcIntr
         */
        periodiciteCalculIntr2: number;
        /**
         * Ptfci3_PerdicCalcIntr
         */
        periodiciteCalculIntr3: number;
        /**
         * Ptfci4_PerdicCalcIntr
         */
        periodiciteCalculIntr4: number;
        /**
         * Ptfcam_PerdicMerAmrt
         */
        periodiciteMERAmortissement: number;
        /**
         * Ptfca1_PerdicMerAmrt
         */
        periodiciteMERAmortissement1: number;
        /**
         * Ptfca2_PerdicMerAmrt
         */
        periodiciteMERAmortissement2: number;
        /**
         * Ptfca3_PerdicMerAmrt
         */
        periodiciteMERAmortissement3: number;
        /**
         * Ptfca4_PerdicMerAmrt
         */
        periodiciteMERAmortissement4: number;
        /**
         * Cdfcpt_CodePerdicDiffMer
         */
        codePeriodiciteDiffereMER: number;
        /**
         * Cdfcei_CdRecvIntrTermEchu
         */
        codeRecouvrementIntrTermeEchu: number;
        /**
         * Cdfcea_CdRecvAmrtTermEchu
         */
        codeRecouvrementAmortissementTermeEchu: number;
        /**
         * Cdfccf_CdTypeConfmTxIntr
         */
        codeTypeConfirmationTauxIntr: number;
        /**
         * Cdfctx_ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * Nbfcaa_NbJourAnnNumrt
         */
        nombreJourAnnulationNumerateur: number;
        /**
         * Cdfcam_ModeCalcAmrt
         */
        modeCalculAmortissement: number;
        /**
         * Mtfckr_CaptRefrTablCste
         */
        capitalReferenceTableConstante: number;
        /**
         * Ctfcrb_TypeAsstRemb
         */
        typeAssietteRemboursement: number;
        /**
         * Cdfcva_CdVerstAutrPendPhas
         */
        codeVersementAutrePendantPhase: number;
        /**
         * Cdfcfp_CodeRedcDurPrfn
         */
        codeReductionDureePrefinancement: number;
        /**
         * Cdfcpr_CodePrlnDurPrfn
         */
        codePrelevementDureePrefinancement: number;
        /**
         * Ctfcpe_CodeTypePrfn
         */
        codeTypePrefinancement: number;
        /**
         * Cdfcip_CodeRecvPartlIntr
         */
        codeRecouvrementPartielIntr: number;
        /**
         * Cdfcir_CodeCalcIntrRepr
         */
        codeCalculIntrRepr: number;
        /**
         * Cdfcki_CodeCaptIntrDiff
         */
        codeCapitalIntrDiffere: number;
        /**
         * Ptfcci_CalcIntrJourReel
         */
        calculIntrJourReel: number;
        /**
         * Ptfcd1_PerdicMerIntr
         */
        periodiciteMERIntr: number;
        /**
         * Ptfcd2_PerdicMerIntr
         */
        periodiciteMERIntr1: number;
        /**
         * Ptfcd3_PerdicMerIntr
         */
        periodiciteMERIntr2: number;
        /**
         * Ptfcd4_PerdicMerIntr
         */
        periodiciteMERIntr3: number;
        /**
         * Ctfck2_ModeCaptIntr
         */
        modeCapitalIntr: number;
        /**
         * Ctfck1_ModeRecvIntr
         */
        modeRecouvrementIntr: number;
        /**
         * Ptfcco_PerdicCompoIntr
         */
        periodiciteCompositionIntr: number;
        /**
         * Cdfcpm_CdModeExprTxMoyePhas
         */
        codeModeExpressionTauxMoyenPhase: number;
        /**
         * Txfcp1_ValrMinTxMoyePhas
         */
        valeurMinimumTauxMoyenPhase: number;
        /**
         * Txfcp2_ValrMaxTxMoyePhas
         */
        valeurMaximumTauxMoyenPhase: number;
        /**
         * Txfcp3_ValrConsTxMoyePhas
         */
        valeurConsolideTauxMoyenPhase: number;
        /**
         * Cdfcth_CodeTxPalrCalc
         */
        codeTauxPalierCalcul: number;
        /**
         * Cdfcin_CodeIndc
         */
        codeIndice: string;
        /**
         * Nbfrvd_NbMaxiPerdVartDur
         */
        nombreMaximumPeriodeVartDuree: number;
        /**
         * Cdfcop_CodeOptnSurPhasPrdt
         */
        codeOptionSurPhaseProduit: number;
        /**
         * Cdfcoo_CodeObjtOptn
         */
        codeObjetOption: number;
        /**
         * Cdfcto_TypeOptn
         */
        typeOption: number;
        /**
         * Cdfcsr_CodeCourPourPrsDopt
         */
        codeCourtPourPresenceDopt: number;
        /**
         * Npfcsr_DelaiCourPrsDopt
         */
        delaiCourtPresenceDopt: number;
        /**
         * Pefcpo_PerdicOptn
         */
        periodiciteOption: number;
        /**
         * Nbjja1_NbJourAnnDenom
         */
        nombreJourAnnulationDenomination: number;
        /**
         * Txfccz_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement: number;
        /**
         * Tpfcc1_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement: number;
        /**
         * Tsfcc1_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement: number;
        /**
         * Pefrie_UnitPerdValrIntIndc
         */
        unitePeriodeValeurIntituleIndice: number;
        /**
         * Npfrie_NbPerdValrIntIndc
         */
        nombrePeriodeValeurIntituleIndice: number;
        /**
         * Ctfcte_CodeTypeTrtDech
         */
        codeTypeTraitementDech: number;
        /**
         * Tsfcif_QuotMaxiCaptIfin
         */
        quotientMaximumCapitalIfin: number;
        /**
         * Txfcca_QuotConsCaptAmrt
         */
        quotientConsolideCapitalAmortissement1: number;
        /**
         * Tpfcca_QuotMiniCaptAmrt
         */
        quotientMinimumCapitalAmortissement1: number;
        /**
         * Tsfcca_QuotMaxiCaptAmrt
         */
        quotientMaximumCapitalAmortissement1: number;
        /**
         * Idfrbd_IdntReglButrDur
         */
        idRegleButoireDuree: string;
    }
    interface ICreditPhaseLecture extends IElementLecture {
        /**
         * Cdfcir_CodeCalcInteRepr
         */
        codeCalculInterieurRepr: number;
        /**
         * Ctfcki_ModeCaptRecvInte
         */
        modeCapitalRecouvrementInterieur: number;
        /**
         * Cdfcki_CodeCaptRecvInte
         */
        codeCapitalRecouvrementInterieur: number;
        /**
         * Ptfcin_CodePerdAsscCalcInte
         */
        codePeriodeAssuranceCalculInterieur: number;
        /**
         * Ptfcam_CodePerdCalcMer
         */
        codePeriodeCalculMER: number;
        /**
         * Ptfcci_CodeCalcInteJourRels
         */
        codeCalculInterieurJourRelease: number;
        /**
         * Ptfcco_CodePerdCompoInte
         */
        codePeriodeCompositionInterieur: number;
        /**
         * Mefoso_MtPrmeecheServ
         */
        montantPrmeecheService: number;
        /**
         * Mefafr_MtPrmeecheAccsComp
         */
        montantPrmeecheAccessoireComp: number;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * Cdfava_CodeIndicVerstFondAutrPendPhas
         */
        codeIndiceVersementFondAutrePendantPhase: number;
        /**
         * Dtfccr_DateCretPhas
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateCreationPhase: string;
        /**
         * Cdfdcf_CodeConfmTxInteCred
         */
        codeConfirmationTauxInterieurCredit: number;
        /**
         * Npfcph_NbPerdPhas
         */
        nombrePeriodePhase: number;
        /**
         * Pefcph_CodePerdDurePhas
         */
        codePeriodeDurePhase: number;
        /**
         * Txfcmg_Marge
         */
        marge: number;
        /**
         * Txfcvi_Taux
         */
        taux: number;
        /**
         * Tvfrui_Repart
         */
        repart: number;
        /**
         * TxPhasFixe
         */
        tauxPhaseFixe: number;
        /**
         * TxPhasInit
         */
        tauxPhaseInit: number;
        /**
         * DateTraitIndic
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateTraitIndice: string;
        /**
         * MajorBonif
         */
        majorBonif: number;
        /**
         * CalculButoirHausse
         */
        calculButoirHausse: boolean;
        /**
         * CalculButoirBaisse
         */
        calculButoirBaisse: boolean;
        /**
         * PersoButoirHausse
         */
        persoButoirHausse: boolean;
        /**
         * PersoButoirBaisse
         */
        persoButoirBaisse: boolean;
        /**
         * ModeButoirHausse
         */
        modeButoirHausse: string;
        /**
         * ModeButoirBaisse
         */
        modeButoirBaisse: string;
        /**
         * DateButoirHausse
         */
        dateButoirHausse: string;
        /**
         * DateButoirBaisse
         */
        dateButoirBaisse: string;
        /**
         * TauxButoirHausse
         */
        tauxButoirHausse: number;
        /**
         * TauxButoirBaisse
         */
        tauxButoirBaisse: number;
        /**
         * TypeTaux
         */
        typeTaux: string;
        /**
         * TxPhas
         */
        tauxPhase: ITauxInteretAnnuelLecture;
        /**
         * TxPhasHorsBonfMajre
         */
        tauxPhaseHorsBonificationMajre: ITauxInteretAnnuelLecture;
        /**
         * Mefiha_MtPrmeecheHorsAccs
         */
        montantPrmeecheHorsAccessoire: number;
        /**
         * Mtfacc_MtPrmeecheAccsPerd
         */
        montantPrmeecheAccessoirePeriode: number;
        /**
         * InteretsDifferes
         */
        interetsDifferes: boolean;
        /**
         * CodeRecouvCapitInterets
         */
        codeRecouvCapitInterets: number;
        /**
         * ModeRecouvInterets
         */
        modeRecouvInterets: number;
        /**
         * ModeCapitInterets
         */
        modeCapitInterets: number;
        /**
         * CapitActive
         */
        capitActive: boolean;
        /**
         * RecouvActive
         */
        recouvActive: boolean;
        /**
         * ChoixCapitalisation
         */
        choixCapitalisation: boolean;
        /**
         * ChoixRecouvrement
         */
        choixRecouvrement: boolean;
        /**
         * Capitalisation
         */
        capitalisation: boolean;
        /**
         * Recouvrement
         */
        recouvrement: boolean;
        /**
         * MtPremiereEcheance
         */
        montantPremiereEcheance: number;
        /**
         * ChoixPeriode
         */
        choixPeriode: boolean;
        /**
         * ChoixPeriodicite
         */
        choixPeriodicite: boolean;
        /**
         * EstVisibleTaux
         */
        estVisibleTaux: boolean;
        /**
         * EstVisibleMarge
         */
        estVisibleMarge: boolean;
        /**
         * ListeChoixPeriode
         */
        listeChoixPeriode: Array<number>;
        /**
         * EstActifDuree
         */
        estActifDuree: boolean;
        /**
         * EstActifPeriodicite
         */
        estActifPeriodicite: boolean;
        /**
         * EstActifTaux
         */
        estActifTaux: boolean;
        /**
         * EstActifMarge
         */
        estActifMarge: boolean;
        /**
         * ListeModeCapitalisation
         */
        listeModeCapitalisation: Array<IScConstante>;
        /**
         * ListeModeRecouvrement
         */
        listeModeRecouvrement: Array<IScConstante>;
        /**
         * EstVisibleButoirHausse
         */
        estVisibleButoirHausse: boolean;
        /**
         * EstVisibleButoirBaisse
         */
        estVisibleButoirBaisse: boolean;
        /**
         * EstActifButoirHausse
         */
        estActifButoirHausse: boolean;
        /**
         * EstActifButoirBaisse
         */
        estActifButoirBaisse: boolean;
        /**
         * EstVisibleTauxHausse
         */
        estVisibleTauxHausse: boolean;
        /**
         * EstVisibleTauxBaisse
         */
        estVisibleTauxBaisse: boolean;
        /**
         * EstVisibleJeuDeParametres
         */
        estVisibleJeuxDeParametres: boolean;
        /**
         * EstActifJeuDeParametres
         */
        estActifJeuxDeParametres: boolean;
        /**
         * EstVisibleQuotite
         */
        estVisibleQuotite: boolean;
        /**
         * EstActifQuotite
         */
        estActifQuotite: boolean;
        /**
         * ListeJeuxParametresRevision
         */
        listeJeuxParametresRevision: Array<string>;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntParmRevsParPhas
         */
        idParametreRevisionParPhase: string;
        /**
         * ListIdntPalrTx
         */
        listeIdPalierTaux: Array<string>;
        /**
         * PhasePrdt
         */
        phaseProduit: IScProduitPhase;
    }
    interface IScConstante extends IScElement {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
    interface ICreditPhaseAmortissementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcea_CodeRecvAmrtTermEchu
         */
        codeRecouvrementAmortissementTermeEchu: number;
        /**
         * Txfcqa_QuotAmrt
         */
        quotientAmortissement: number;
        /**
         * Cdfcam_ModeCalcAmrt
         */
        modeCalculAmortissement: number;
        /**
         * Cifapi_CodePrelFinPhas
         */
        codePrelFinPhase: number;
        /**
         * Txfaom_TxConstPhasCred
         */
        tauxConstructionPhaseCredit: number;
        /**
         * AmrtPossible
         */
        amortissementPossible: boolean;
        /**
         * ProgTaux
         */
        progTaux: boolean;
        /**
         * TypePretCombine
         */
        typePretCombine: string;
        /**
         * IdntCompPhasPourPretComb
         */
        idCompPhasePourPretComb: string;
        /**
         * ListIdntPalrPrgrAmrt
         */
        listeIdPalierProgressifAmortissement: Array<string>;
    }
    interface ICreditPhaseDiffereAmortissementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcip_CodeRecvPartlInte
         */
        codeRecouvrementPartielInterieur: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhaseDiffereTotalLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhaseMobilisationLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfcip_CodeRecvPartlInte
         */
        codeRecouvrementPartielInterieur: number;
        /**
         * Cdfcam_CodeIndicRembIfin
         */
        codeIndiceRemboursementIfin: number;
    }
    interface ICreditPhasePrefinancementLecture extends ICreditPhaseLecture {
        /**
         * Cdfcei_CodeRecvInteTermEchu
         */
        codeRecouvrementInterieurTermeEchu: number;
        /**
         * Cdfppf_CodeRedcDureePref
         */
        codeReductionDureePref: number;
        /**
         * Personnalisable
         */
        personnalisable: boolean;
        /**
         * Reduction
         */
        reduction: boolean;
    }
}

declare namespace ICRest.Modeles.ModifierAccord {
    interface IEntreeControleDecision {
        /**
         * IdntDoss
         */
        idDossier: string;
        /**
         * DateAccordPreteur
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateAccordPreteur: string;
        /**
         * bForcerCtrlAvtAccPret
         */
        forcerControleAvtAccessoirePret: boolean;
        /**
         * bForcerCtrlBale2
         */
        forcerControleBale2: boolean;
        /**
         * bForcerCtrlReglementaire
         */
        forcerControleReglementaire: boolean;
    }
    interface IEntreeModificationAccordPreteur {
        /**
         * EntreeControleDecision
         */
        entreeControleDecision: IEntreeControleDecision;
        /**
         * Avis
         */
        avis: string;
        /**
         * bCtrlDecisionEffectue
         */
        controleDecisionEffectue: boolean;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IRetourControleDecision {
        /**
         * ValidationPossible
         */
        validationPossible: boolean;
        /**
         * ModificationPossible
         */
        modificationPossible: boolean;
        /**
         * RefusPossible
         */
        refusPossible: boolean;
        /**
         * ExisteImpactTarification
         */
        existeImpactTarification: boolean;
        /**
         * TransfertPossible
         */
        transfertPossible: boolean;
        /**
         * VisualisationDetailPossible
         */
        visualisationDetailPossible: boolean;
        /**
         * Anomalies
         */
        anomalies: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlAvtAccPret
         */
        anomaliesControleAvtAccessoirePret: Array<IAnomalieLecture>;
        /**
         * AnomalieImpactTarification
         */
        anomalieImpactTarification: IAnomalieLecture;
        /**
         * NoteBale2
         */
        noteBale2: string;
        /**
         * LibelleRisque
         */
        libelleRisque: string;
        /**
         * Marge
         */
        marge: string;
        /**
         * MargeCom
         */
        margeCom: string;
        /**
         * LibelleErreurDelegationTaux
         */
        libelleErreurDelegationTaux: string;
        /**
         * AnomaliesCtrlBale2
         */
        anomaliesControleBale2: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlReglementaire
         */
        anomaliesControleReglementaire: Array<IAnomalieLecture>;
        /**
         * CtrlReglementaireForcee
         */
        controleReglementaireForcee: boolean;
        /**
         * CtrlCtfprmA3Forcee
         */
        controleCtfprmA3Forcee: boolean;
    }
    interface IRetourModificationAccordPreteur {
        /**
         * ModificationReussie
         */
        modificationReussie: boolean;
        /**
         * RetourControleDecision
         */
        retourControleDecision: IRetourControleDecision;
        /**
         * Anomalies
         */
        anomalies: Array<IAnomalieLecture>;
        /**
         * AnomaliesPreRequis
         */
        anomaliesPreRequis: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.Optimisation {
    interface IEntreeOptimisationCredit {
        /**
         * IdwsCredit
         */
        idwsCredit: string;
        /**
         * DureeFixe
         */
        dureeFixe: boolean;
        /**
         * InclureCreditPriorite
         */
        inclureCreditPriorite: boolean;
    }
    interface IEntreeOptimisation {
        /**
         * IdwsPlanFin
         */
        idwsPlanFin: string;
        /**
         * MtEchnMaxi
         */
        montantEcheanceMaximum: number;
        /**
         * TxEndtMaxi
         */
        tauxEndtMaximum: number;
        /**
         * InclAssr
         */
        inclAssurance: boolean;
        /**
         * LissTotl
         */
        lissageTotal: boolean;
        /**
         * ListeEntreeOptimisationCredit
         */
        listeEntreeOptimisationCredit: Array<IEntreeOptimisationCredit>;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface ISortieOptimisation extends IElementLecture {
    }
    interface IRequest {
        idDossier: string;
        entreeOptimisation: IEntreeOptimisation;
    }
}

declare namespace ICRest.Modeles.OuvrirBlocNotes {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IBlocNotesLecture extends IElementLecture {
        /**
         * Idfwac_TypeBlc
         */
        typeBlocNote: string;
        /**
         * ContBlc
         */
        contratBlocNote: string;
    }
}

declare namespace ICRest.Modeles.OuvrirDossier {
    interface IOuvrirDossierRequest {
        versionWsdl: number;
        dateTraitement: string;
        identifiantDossier: string;
        codeApplication: number;
        /**
         * Consultation = 0
         * Instruction = 1,
         * Decision = 2,
         * Maj = 3, (Mise à jour administrative ou conformité)
         * Conformite = 4, (Ouverture pour controle de conformite)
         * PriseEnChargeBO = 5 (Action où le l'agent BO se transfère un dossier (par le lien Prendre en charge))
         */
        actionSurDossier: number;
        ignorerControlModeOuverture: boolean;
        identifiantPourLeCompteDe: string;
    }
}

declare namespace ICRest.Modeles.PasserDossierSansSuite {
    interface IPasserDosserSsSuiteRequest {
        identifiantDossier: string;
        codeEvenement: string;
        dateEvenement: string;
    }
}

declare namespace ICRest.Modeles.PrendreCompteDroitAcquis {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IDroitUtiliseLecture extends IElementLecture {
        /**
         * Mtfadu_MtDrtAcqsUtls
         */
        montantDroitAcqsUtilisation: number;
        /**
         * Mtfali_MtDrtLimt
         */
        montantDroitLimite: number;
        /**
         * IdntCredIntr
         */
        idCreditIntr: string;
        /**
         * IdntTrchEparLogm
         */
        idTrancheEpargneLogement: string;
    }
    interface IDefinirPriseEnCompteRequest {
        /**
         * idDossier
         */
        idDossier: string;
        /**
         * idwsCredit
         */
        idwsCredit: string;
        /**
         * idwsTrancheEpargneLogement
         */
        idwsTrancheEpargneLogement: string;
        /**
         * prendreEnCompte
         */
        prendreEnCompte: boolean;
    }
}

declare namespace ICRest.Modeles.RafraichirEmprunteurDossier {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IEmprunteurLecture extends IElementLecture {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * Mcfpre_MtRessPond
         */
        montantRessourcePondere: number;
        /**
         * Mcfpce_MtChrgEmprHorsPrjtPond
         */
        montantChargeEmpruntHorsProjetPondere: number;
        /**
         * Mcfpac_MtAutrChrgPond
         */
        montantAutreChargePondere: number;
        /**
         * Lbfaem_DenmEmpr
         */
        denmEmprunt: string;
        /**
         * Lnfpem_LiblLongEmpr
         */
        libelleLongEmprunt: string;
        /**
         * Lbfain_IntlcEmpr
         */
        intlcEmprunt: string;
        /**
         * Idfaep_IdntEnttTitlClnt
         */
        idEntiteTitulaireClient: string;
        /**
         * Idfaeg_IdntelemStrcGest
         */
        idElementStructureGestion: string;
        /**
         * Cdfcke_CodeCateEmpr
         */
        codeCateEmprunt: string;
        /**
         * Ctfcma_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * Ctfpmp_CodeTypeMarcPers
         */
        codeTypeMarchePersonne: number;
        /**
         * Ctfprm_CodeTypeRevnMeng
         */
        codeTypeRevnMeng: number;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_TypeAdmnBafi
         */
        typeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Cdfpsr_CodeSittFamlRegl
         */
        codeSituationFamilleRegle: number;
        /**
         * Nbfpnp_NbPersCmpstMeng
         */
        nombrePersonneCmpstMeng: number;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpma_NbActfMeng
         */
        nombreActfMeng: number;
        /**
         * Dtfpen_DateEncrEparLogm
         * Type date au format yyyy-MM-dd
         */
        dateEncoursEpargneLogement: string;
        /**
         * Mtftpl_MtEncrIsssPretPel
         */
        montantEncoursIsssPretPEL: number;
        /**
         * Mtftli_MtEncrIsssPretLel
         */
        montantEncoursIsssPretLEL: number;
        /**
         * Mtftlh_MtEncrLivrAutretbl
         */
        montantEncoursLivrAutretbl: number;
        /**
         * Mtftph_MtEncrPlnsAutretbl
         */
        montantEncoursPlnsAutretbl: number;
        /**
         * Mtfwrt_TotlRevnAnnlNets
         */
        totalRevnAnnulationNets: number;
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Cdfwsl_StttOccpLogmActl
         */
        stttOccpLogementActuariel: number;
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpnm_NomRaisSoclEmpr
         */
        nomRaisonSocialeEmprunt: string;
        /**
         * Lbfpa1_Intt
         */
        intituleLigne1: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_CompIntt
         */
        compIntituleLigne2: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cdfpse_CodeSectRatt
         */
        codeSecteurRattachement: string;
        /**
         * Cdfpjm_CodeJeunMeng
         */
        codeJeunMeng: number;
        /**
         * PresUnePersAttnRepnFicp
         */
        presUnePersonneAttnRepnFicp: boolean;
        /**
         * PresUnePersFichFicp
         */
        presUnePersonneFichFicp: boolean;
        /**
         * Qmfcvi_EsperVie
         */
        esperVie: number;
        /**
         * Qmfcvd_EsperVieDec
         */
        esperVieDecision: number;
        /**
         * Qmfcvs_EsperVieStrs
         */
        esperVieStress: number;
        /**
         * MtRessAvntProj
         */
        montantRessourceAvenantProjet: number;
        /**
         * MtChrgEmprAvntProj
         */
        montantChargeEmpruntAvenantProjet: number;
        /**
         * MtAutrChrgAvntProj
         */
        montantAutreChargeAvenantProjet: number;
        /**
         * RestVivrAvntProj
         */
        restantVivrAvenantProjet: number;
        /**
         * IndicRestVivrAvntProj
         */
        indiceRestantVivrAvenantProjet: number;
        /**
         * TxEndtAvntProj
         */
        tauxEndtAvenantProjet: number;
        /**
         * TotalEpargneContractuelle
         */
        totalEpargneContractuelle: number;
        /**
         * TotalEpargneLiquide
         */
        totalEpargneLiquide: number;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * Cdfadv_CodeDeviseEmprunteur
         */
        codeDeviseEmprunteur: string;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntCpteDeptGrpePers
         */
        listeIdCompteDeptGrpePersonne: Array<string>;
        /**
         * ListIdntCptePrfsPers
         */
        listeIdComptePrfsPersonne: Array<string>;
        /**
         * ListIdntRessGrpe
         */
        listeIdRessourceGrpe: Array<string>;
        /**
         * ListIdntChrgGrpe
         */
        listeIdChargeGrpe: Array<string>;
        /**
         * ListIdntCredExstGrpe
         */
        listeIdCreditExisteGrpe: Array<string>;
        /**
         * ListIdntFamlEprgPers
         */
        listeIdFamilleEpargnePersonne: Array<string>;
        /**
         * ListIdntRevnFiscAsscEmpr
         */
        listeIdRevnFiscalAssuranceEmprunt: Array<string>;
        /**
         * ListIdntDonnPtrmImmb
         */
        listeIdDonneurPatrimoineImmobilier: Array<string>;
    }
    interface IRafraichirEmprunteurDossierRequest {
        identifiantDossier: string;
        supprRCEmprunteur: boolean;
    }
}

declare namespace ICRest.Modeles.RafraichirIntervDoss {
    interface IEntreeTransaction {
        /**
         * ForceeControle
         */
        forceeControle: boolean;
        /**
         * Idws
         */
        idws: string;
    }
    interface IEntreeRafraichirIntervenant extends IEntreeTransaction {
        /**
         * TypeRafraichissement
         */
        typeRafraichissement: number;
        /**
         * ConserverRCEmprunteur
         */
        conserverRCEmprunteur: boolean;
        /**
         * ListeIdfppe
         */
        listeIdfppe: Array<string>;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IRapportTransaction {
        /**
         * OperationReussie
         */
        operationReussie: boolean;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IRelationEntrePersonnesLecture extends IElementLecture {
        /**
         * Cnfcrp_CodeNatureRelation
         */
        codeNatureRelation: string;
        /**
         * IdntPers1
         */
        idPersonne1: string;
        /**
         * IdntPers2
         */
        idPersonne2: string;
    }
    interface IPersonneLecture extends IElementLecture {
        /**
         * Cdfprs_CrteResd
         */
        crteResd: number;
        /**
         * LiblResidence
         */
        libelleResidence: string;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_CateTypeAdmnBafi
         */
        cateTypeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Idfpbd_CleBdf
         */
        cleBDF: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Dtfper_DateEntrReltAvecCons
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEntrRelationAvecConsolide: string;
        /**
         * Cdfptp_CodeTypePers
         */
        codeTypePersonne: number;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Cdfpap_CodeAssmPartc
         */
        codeAssmPartc: number;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
        /**
         * Lbfpen_EnsgComm
         */
        ensgCommission: string;
        /**
         * Lbfpir_LieuInscRC
         */
        lieuInscRC: string;
        /**
         * Nufpir_NumeInscRC
         */
        numeroInscRC: string;
        /**
         * Ctfprp_RolsPersPourDoss
         */
        rolsPersonnePourDossier: Array<string>;
        /**
         * PersEstAssr
         */
        personneEstAssurance: boolean;
        /**
         * Nofpem_NumeOrdrPersEmpr
         */
        numeroOrdrePersonneEmprunt: number;
        /**
         * Ctfipe_CodeTypeBasePers
         */
        codeTypeBasePersonne: number;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Hefcsd_DateSignDmdeCred
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSigneDmdeCredit: string;
        /**
         * Hefcso_DateSignOffre
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSigneOffre: string;
        /**
         * ReltnEntrPers
         */
        reltnEntrPersonne: Array<IRelationEntrePersonnesLecture>;
        /**
         * ListIdntRess
         */
        listeIdRessource: Array<string>;
        /**
         * ListIdntChrg
         */
        listeIdCharge: Array<string>;
        /**
         * ListIdntCpte
         */
        listeIdCompte: Array<string>;
        /**
         * ListIdntFamlEprg
         */
        listeIdFamilleEpargne: Array<string>;
        /**
         * IdntFicheContact
         */
        idFicheContact: string;
    }
    interface IPersonneMoraleLecture extends IPersonneLecture {
        /**
         * Nufpin_NumeInsee
         */
        numeroINSEE: string;
        /**
         * Dtfpir_DateInscRcs
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateInscRcs: string;
        /**
         * Dtfpcs_DateCretSoce
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateCreationSoce: string;
        /**
         * Mcfpch_ChffAffrHtExrcPrec
         */
        chiffreAffrHtExrcPrec: number;
        /**
         * Nbfpsa_NbSalr
         */
        nombreSalr: number;
        /**
         * Cdfpfj_FormJurd
         */
        formeJuridique: string;
        /**
         * Lbfpfj_LiblFormJurd
         */
        libelleFormeJuridique: string;
        /**
         * Cdfpdp_TypeDrtPersMorl
         */
        typeDroitPersonneMorl: number;
        /**
         * Mkfpca_MtCapt
         */
        montantCapital: number;
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
        /**
         * ListRolePersPhys
         */
        listeRolePersonnePhys: Array<string>;
    }
    interface IEtatDossierAssuranceLecture {
        /**
         * LibelleEtat
         */
        libelleEtat: string;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * LibelleDemande
         */
        libelleDemande: string;
        /**
         * LibelleDateEnvoi
         */
        libelleDateEnvoi: string;
    }
    interface IDecisionDossierAssuranceLecture {
        /**
         * AccesLectureDecision
         */
        accessoireLectureDecision: boolean;
        /**
         * AvisValide
         */
        avisValide: boolean;
        /**
         * CodeDecision
         */
        codeDecision: number;
        /**
         * LibelleCredit
         */
        libelleCredit: string;
        /**
         * LibelleAvis
         */
        libelleAvis: string;
        /**
         * LibelleErreur
         */
        libelleErreur: string;
    }
    interface IDossierAssuranceLecture {
        /**
         * EtatDossierAssurance
         */
        etatDossierAssurance: IEtatDossierAssuranceLecture;
        /**
         * DecisionDossierAssurance
         */
        decisionDossierAssurance: IDecisionDossierAssuranceLecture;
    }
    interface IPersonnePhysiqueLecture extends IPersonneLecture {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpci_LiblTitrCivl
         */
        libelleTitreCivilite: string;
        /**
         * Lbfppn_Prnm
         */
        prenom: string;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Lbfpnj_NomJeunFill
         */
        nomJeunFill: string;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNais: string;
        /**
         * Lbfpna_LieuNais
         */
        lieuNais: string;
        /**
         * Cdfpce_CodePersCe
         */
        codePersonneCE: number;
        /**
         * Cdfprm_CodeRegmMatr
         */
        codeRegimeMatrimonial: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Lbfpsf_LibelleSittFaml
         */
        libelleSituationFamille: string;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpsp_CateSoc
         */
        cateInteret: string;
        /**
         * Lbfmfc_LiblCatSocioPro
         */
        libelleCatSocioPro: string;
        /**
         * Dtfpma_DateEfftSittFaml
         * Type date au format yyyy-MM-dd
         */
        dateEffetSituationFamille: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmlo_CodeModeLogm
         */
        codeModeLogement: number;
        /**
         * Lbfmlo_LibelleModeLogm
         */
        libelleModeLogement: string;
        /**
         * Dtfmlo_DateEntrLogm
         * Type date au format yyyy-MM-dd
         */
        dateEntrLogement: string;
        /**
         * Cdfmju_CodeCapcJurd
         */
        codeCapcJuridique: number;
        /**
         * LibelleCapaciteJurd
         */
        libelleCapaciteJuridique: string;
        /**
         * Ctfccj_CodeTypeCapJurd
         */
        codeTypeCapJuridique: string;
        /**
         * Cdfmnt_CodeNatn
         */
        codeNational: number;
        /**
         * LibelleNationalite
         */
        libelleNationalite: string;
        /**
         * Cdfmtd_CodeSaisAvisTierDtnr
         */
        codeSaisieAvisTiersDtnr: number;
        /**
         * Cdfmcx_CodeCtx
         */
        codeContentieuxHorsComptCE: number;
        /**
         * Mtfmes_MtEncrSaccefHorsOprt
         */
        montantEncoursSaccefHorsOprt: number;
        /**
         * Cdfmtr_TypeTrspUtls
         */
        typeTrspUtilisation: number;
        /**
         * Cdfmge_CodeGeotAdrsDomc
         */
        codeGeotAdresseDomiciliation: string;
        /**
         * Cdfppb_CodePaysResdEmpr
         */
        codePaysResdEmprunt: string;
        /**
         * Cdfopb_CodePaysLocsEmpr
         */
        codePaysLocalisationEmprunt: string;
        /**
         * Cdfkpa_CodePrflEmpr
         */
        codeProfilEmprunt: number;
        /**
         * Cofcpn_CodePstlLieuNais
         */
        codePstlLieuNais: string;
        /**
         * DossierAssurance
         */
        dossierAssurance: IDossierAssuranceLecture;
        /**
         * IdntActv
         */
        idActivite: string;
        /**
         * IdntIntdBanc
         */
        idIntdBancaire: string;
        /**
         * ListIdntOpps
         */
        listeIdOpps: Array<string>;
        /**
         * Lbfce1_LbAdrEPS1
         */
        libelleAdresseEPS1: string;
        /**
         * Lbfce2_LbAdrEPS2
         */
        libelleAdresseEPS2: string;
        /**
         * Lbfce3_LbAdrEPS3
         */
        libelleAdresseEPS3: string;
        /**
         * Lbfce4_LbAdrEPS4
         */
        libelleAdresseEPS4: string;
        /**
         * Lbfce5_LbAdrEPS5
         */
        libelleAdresseEPS5: string;
        /**
         * Codaac_CatSocioPro
         */
        categorieSocioProfessionnelle: string;
        /**
         * Irdqsn_NumSirenEnt
         */
        numeroSirenEntreprise: string;
        /**
         * Lbfprm_LbRegMat
         */
        libelleRegimeMatrimonial: string;
        /**
         * Llfco1_LbClsRegMat
         */
        libelleClauseRegimeMatrimonial: string;
        /**
         * IdntEntrepreneurIndiv
         */
        idEntrepreneurIndiv: string;
        /**
         * IdntSignataire
         */
        idSignataire: string;
    }
    interface IEmprunteurLecture extends IElementLecture {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * LiblLienPersonne
         */
        libelleLienPersonne: string;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * Mcfpre_MtRessPond
         */
        montantRessourcePondere: number;
        /**
         * Mcfpce_MtChrgEmprHorsPrjtPond
         */
        montantChargeEmpruntHorsProjetPondere: number;
        /**
         * Mcfpac_MtAutrChrgPond
         */
        montantAutreChargePondere: number;
        /**
         * Lbfaem_DenmEmpr
         */
        denmEmprunt: string;
        /**
         * Lnfpem_LiblLongEmpr
         */
        libelleLongEmprunt: string;
        /**
         * Lbfain_IntlcEmpr
         */
        intlcEmprunt: string;
        /**
         * Idfaep_IdntEnttTitlClnt
         */
        idEntiteTitulaireClient: string;
        /**
         * Idfaeg_IdntelemStrcGest
         */
        idElementStructureGestion: string;
        /**
         * Cdfcke_CodeCateEmpr
         */
        codeCateEmprunt: string;
        /**
         * Lbfcke_LiblCateEmpr
         */
        libelleCateEmprunt: string;
        /**
         * Ctfcma_CodeTypeMarc
         */
        codeTypeMarche: number;
        /**
         * Ctfpmp_CodeTypeMarcPers
         */
        codeTypeMarchePersonne: number;
        /**
         * Ctfprm_CodeTypeRevnMeng
         */
        codeTypeRevnMeng: number;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_TypeAdmnBafi
         */
        typeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Lbfpsf_LiblSittFaml
         */
        libelleSituationFamille: string;
        /**
         * Cdfpsr_CodeSittFamlRegl
         */
        codeSituationFamilleRegle: number;
        /**
         * Nbfpnp_NbPersCmpstMeng
         */
        nombrePersonneCmpstMeng: number;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpma_NbActfMeng
         */
        nombreActfMeng: number;
        /**
         * Dtfpen_DateEncrEparLogm
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEncoursEpargneLogement: string;
        /**
         * Mtftpl_MtEncrIsssPretPel
         */
        montantEncoursIsssPretPEL: number;
        /**
         * Mtftli_MtEncrIsssPretLel
         */
        montantEncoursIsssPretLEL: number;
        /**
         * Mtftlh_MtEncrLivrAutretbl
         */
        montantEncoursLivrAutretbl: number;
        /**
         * Mtftph_MtEncrPlnsAutretbl
         */
        montantEncoursPlnsAutretbl: number;
        /**
         * Mtfwrt_TotlRevnAnnlNets
         */
        totalRevnAnnulationNets: number;
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
        /**
         * Cdfwsl_StttOccpLogmActl
         */
        stttOccpLogementActuariel: number;
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpnm_NomRaisSoclEmpr
         */
        nomRaisonSocialeEmprunt: string;
        /**
         * Lbfpa1_Intt
         */
        intituleLigne1: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_CompIntt
         */
        compIntituleLigne2: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cofopz_CodeCondDergPourPtz
         */
        codeConditionDerogationPourPtz: number;
        /**
         * Cdfpse_CodeSectRatt
         */
        codeSecteurRattachement: string;
        /**
         * Cdfpjm_CodeJeunMeng
         */
        codeJeunMeng: number;
        /**
         * PresUnePersAttnRepnFicp
         */
        presUnePersonneAttnRepnFicp: boolean;
        /**
         * PresUnePersFichFicp
         */
        presUnePersonneFichFicp: boolean;
        /**
         * Qmfcvi_EsperVie
         */
        esperVie: number;
        /**
         * Qmfcvd_EsperVieDec
         */
        esperVieDecision: number;
        /**
         * Qmfcvs_EsperVieStrs
         */
        esperVieStress: number;
        /**
         * MtRessAvntProj
         */
        montantRessourceAvenantProjet: number;
        /**
         * MtChrgEmprAvntProj
         */
        montantChargeEmpruntAvenantProjet: number;
        /**
         * MtAutrChrgAvntProj
         */
        montantAutreChargeAvenantProjet: number;
        /**
         * RestVivrAvntProj
         */
        restantVivrAvenantProjet: number;
        /**
         * IndicRestVivrAvntProj
         */
        indiceRestantVivrAvenantProjet: number;
        /**
         * TxEndtAvntProj
         */
        tauxEndtAvenantProjet: number;
        /**
         * TotalEpargneContractuelle
         */
        totalEpargneContractuelle: number;
        /**
         * TotalEpargneLiquide
         */
        totalEpargneLiquide: number;
        /**
         * Ctfarp_EnvoiMailSms
         */
        envoiMailSms: string;
        /**
         * Cdfadv_CodeDeviseEmprunteur
         */
        codeDeviseEmprunteur: string;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntCpteDeptGrpePers
         */
        listeIdCompteDeptGrpePersonne: Array<string>;
        /**
         * ListIdntCptePrfsPers
         */
        listeIdComptePrfsPersonne: Array<string>;
        /**
         * ListIdntRessGrpe
         */
        listeIdRessourceGrpe: Array<string>;
        /**
         * ListIdntChrgGrpe
         */
        listeIdChargeGrpe: Array<string>;
        /**
         * ListIdntCredExstGrpe
         */
        listeIdCreditExisteGrpe: Array<string>;
        /**
         * ListIdntFamlEprgPers
         */
        listeIdFamilleEpargnePersonne: Array<string>;
        /**
         * ListIdntRevnFiscAsscEmpr
         */
        listeIdRevnFiscalAssuranceEmprunt: Array<string>;
        /**
         * ListIdntDonnPtrmImmb
         */
        listeIdDonneurPatrimoineImmobilier: Array<string>;
    }
    interface IGarantLecture extends IElementLecture {
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmpf_NbPersGrpe
         */
        nombrePersonneGrpe: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Ctfmli_TypeLienEtrLesPers
         */
        typeLienEntreLesPersonne: number;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * Lbfmae_AgsEnfn
         */
        ageEnfant: Array<number>;
        /**
         * Dtfmrp_DateDernRapp
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDernierRapp: string;
        /**
         * Nbfma_AnneNaisEnfn
         */
        anneNaisEnfant: Array<number>;
        /**
         * Cdfmec_CodeEmplrComun
         */
        codeEmplrComun: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmac_AncnChrgLiesAOperImmb
         */
        ancnChargeLiesAOperImmobilier: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Nbfmvo_NbVoit
         */
        nombreVoiture: number;
        /**
         * Mcfpre_MtRessPond
         */
        montantRessourcePondere: number;
        /**
         * Mcfpce_MtChrgEmprHorsPrjtPond
         */
        montantChargeEmpruntHorsProjetPondere: number;
        /**
         * Mcfpac_MtAutrChrgPond
         */
        montantAutreChargePondere: number;
        /**
         * TotalEpargneContractuelle
         */
        totalEpargneContractuelle: number;
        /**
         * TotalEpargneLiquide
         */
        totalEpargneLiquide: number;
        /**
         * MtRessAvntProj
         */
        montantRessourceAvenantProjet: number;
        /**
         * MtChrgEmprAvntProj
         */
        montantChargeEmpruntAvenantProjet: number;
        /**
         * MtAutrChrgAvntProj
         */
        montantAutreChargeAvenantProjet: number;
        /**
         * RestVivrAvntProj
         */
        restantVivrAvenantProjet: number;
        /**
         * TxEndtAvntProj
         */
        tauxEndtAvenantProjet: number;
        /**
         * ListIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * ListIdntCpteDeptGrpePers
         */
        listeIdCompteDeptGrpePersonne: Array<string>;
        /**
         * ListIdntCptePrfsPers
         */
        listeIdComptePrfsPersonne: Array<string>;
        /**
         * ListIdntRessGrpe
         */
        listeIdRessourceGrpe: Array<string>;
        /**
         * ListIdntChrgGrpe
         */
        listeIdChargeGrpe: Array<string>;
        /**
         * ListIdntCredExstGrpe
         */
        listeIdCreditExisteGrpe: Array<string>;
        /**
         * ListIdntFamlEprgPers
         */
        listeIdFamilleEpargnePersonne: Array<string>;
    }
    interface IRapportRafraichirIntervenant extends IRapportTransaction {
        /**
         * ListePersonneLecture
         */
        listePersonneLecture: Array<IPersonneLecture>;
        /**
         * EmprunteurLecture
         */
        emprunteurLecture: IEmprunteurLecture;
        /**
         * ListeGarantLecture
         */
        listeGarantLecture: Array<IGarantLecture>;
    }
}

declare namespace ICRest.Modeles.RafraichirPersonnes {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IEntreeRafraichirPersonnes {
        /**
         * IdentifiantDossier
         */
        identifiantDossier: string;
        /**
         * ConserverRCPersonnes
         */
        conserverRCPersonnes: boolean;
        /**
         * ListeIdfppe
         */
        listeIdfppe: Array<string>;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IRelationEntrePersonnesLecture extends IElementLecture {
        /**
         * Cnfcrp_CodeNatureRelation
         */
        codeNatureRelation: string;
        /**
         * IdntPers1
         */
        idPersonne1: string;
        /**
         * IdntPers2
         */
        idPersonne2: string;
    }
    interface IPersonneLecture extends IElementLecture {
        /**
         * Cdfprs_CrteResd
         */
        crteResd: number;
        /**
         * LiblResidence
         */
        libelleResidence: string;
        /**
         * Ctfcae_CateAgntecnmBafi
         */
        cateAgntecnmBafi: number;
        /**
         * Ctfccl_CateClntBafi
         */
        cateClientBafi: number;
        /**
         * Ctfcad_CateTypeAdmnBafi
         */
        cateTypeAdmnBafi: number;
        /**
         * Ctfcba_ClssAgntBafi
         */
        classeAgentBafi: string;
        /**
         * Idfpbd_CleBdf
         */
        cleBDF: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Dtfper_DateEntrReltAvecCons
         * Type date au format yyyy-MM-dd
         */
        dateEntrRelationAvecConsolide: string;
        /**
         * Cdfptp_CodeTypePers
         */
        codeTypePersonne: number;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Cdfpap_CodeAssmPartc
         */
        codeAssmPartc: number;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
        /**
         * Lbfpen_EnsgComm
         */
        ensgCommission: string;
        /**
         * Lbfpir_LieuInscRC
         */
        lieuInscRC: string;
        /**
         * Nufpir_NumeInscRC
         */
        numeroInscRC: string;
        /**
         * Ctfprp_RolsPersPourDoss
         */
        rolsPersonnePourDossier: Array<string>;
        /**
         * PersEstAssr
         */
        personneEstAssurance: boolean;
        /**
         * Nofpem_NumeOrdrPersEmpr
         */
        numeroOrdrePersonneEmprunt: number;
        /**
         * Ctfipe_CodeTypeBasePers
         */
        codeTypeBasePersonne: number;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Hefcsd_DateSignDmdeCred
         * Type date au format yyyy-MM-dd
         */
        dateSigneDmdeCredit: string;
        /**
         * Hefcso_DateSignOffre
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSigneOffre: string;
        /**
         * ReltnEntrPers
         */
        reltnEntrPersonne: Array<IRelationEntrePersonnesLecture>;
        /**
         * ListIdntRess
         */
        listeIdRessource: Array<string>;
        /**
         * ListIdntChrg
         */
        listeIdCharge: Array<string>;
        /**
         * ListIdntCpte
         */
        listeIdCompte: Array<string>;
        /**
         * ListIdntFamlEprg
         */
        listeIdFamilleEpargne: Array<string>;
        /**
         * IdntFicheContact
         */
        idFicheContact: string;
    }
    interface IPersonneMoraleLecture extends IPersonneLecture {
        /**
         * Nufpin_NumeInsee
         */
        numeroINSEE: string;
        /**
         * Dtfpir_DateInscRcs
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateInscRcs: string;
        /**
         * Dtfpcs_DateCretSoce
         * Type date au format yyyy-MM-dd
         */
        dateCreationSoce: string;
        /**
         * Mcfpch_ChffAffrHtExrcPrec
         */
        chiffreAffrHtExrcPrec: number;
        /**
         * Nbfpsa_NbSalr
         */
        nombreSalr: number;
        /**
         * Cdfpfj_FormJurd
         */
        formeJuridique: string;
        /**
         * Lbfpfj_LiblFormJurd
         */
        libelleFormeJuridique: string;
        /**
         * Cdfpdp_TypeDrtPersMorl
         */
        typeDroitPersonneMorl: number;
        /**
         * Mkfpca_MtCapt
         */
        montantCapital: number;
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
        /**
         * ListRolePersPhys
         */
        listeRolePersonnePhys: Array<string>;
    }
    interface IEtatDossierAssuranceLecture {
        /**
         * LibelleEtat
         */
        libelleEtat: string;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * LibelleDemande
         */
        libelleDemande: string;
        /**
         * LibelleDateEnvoi
         */
        libelleDateEnvoi: string;
    }
    interface IDecisionDossierAssuranceLecture {
        /**
         * AccesLectureDecision
         */
        accessoireLectureDecision: boolean;
        /**
         * AvisValide
         */
        avisValide: boolean;
        /**
         * CodeDecision
         */
        codeDecision: number;
        /**
         * LibelleCredit
         */
        libelleCredit: string;
        /**
         * LibelleAvis
         */
        libelleAvis: string;
        /**
         * LibelleErreur
         */
        libelleErreur: string;
    }
    interface IDossierAssuranceLecture {
        /**
         * EtatDossierAssurance
         */
        etatDossierAssurance: IEtatDossierAssuranceLecture;
        /**
         * DecisionDossierAssurance
         */
        decisionDossierAssurance: IDecisionDossierAssuranceLecture;
    }
    interface IPersonnePhysiqueLecture extends IPersonneLecture {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpci_LiblTitrCivl
         */
        libelleTitreCivilite: string;
        /**
         * Lbfppn_Prnm
         */
        prenom: string;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Lbfpnj_NomJeunFill
         */
        nomJeunFill: string;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNais: string;
        /**
         * Lbfpna_LieuNais
         */
        lieuNais: string;
        /**
         * Cdfpce_CodePersCe
         */
        codePersonneCE: number;
        /**
         * Cdfprm_CodeRegmMatr
         */
        codeRegimeMatrimonial: string;
        /**
         * Cdfpsf_CodeSittFaml
         */
        codeSituationFamille: number;
        /**
         * Lbfpsf_LibelleSittFaml
         */
        libelleSituationFamille: string;
        /**
         * Nbfppc_NbPersAChrg
         */
        nombrePersonneACharge: number;
        /**
         * Cdfpsp_CateSoc
         */
        cateInteret: string;
        /**
         * Lbfmfc_LiblCatSocioPro
         */
        libelleCatSocioPro: string;
        /**
         * Dtfpma_DateEfftSittFaml
         * Type date au format yyyy-MM-dd
         */
        dateEffetSituationFamille: string;
        /**
         * Cdfmdo_CodeSalrDomcCe
         */
        codeSalrDomiciliationCE: number;
        /**
         * Cdfmlo_CodeModeLogm
         */
        codeModeLogement: number;
        /**
         * Lbfmlo_LibelleModeLogm
         */
        libelleModeLogement: string;
        /**
         * Dtfmlo_DateEntrLogm
         * Type date au format yyyy-MM-dd
         */
        dateEntrLogement: string;
        /**
         * Cdfmju_CodeCapcJurd
         */
        codeCapcJuridique: number;
        /**
         * LibelleCapaciteJurd
         */
        libelleCapaciteJuridique: string;
        /**
         * Ctfccj_CodeTypeCapJurd
         */
        codeTypeCapJuridique: string;
        /**
         * Cdfmnt_CodeNatn
         */
        codeNational: number;
        /**
         * LibelleNationalite
         */
        libelleNationalite: string;
        /**
         * Cdfmtd_CodeSaisAvisTierDtnr
         */
        codeSaisieAvisTiersDtnr: number;
        /**
         * Cdfmcx_CodeCtx
         */
        codeContentieuxHorsComptCE: number;
        /**
         * Mtfmes_MtEncrSaccefHorsOprt
         */
        montantEncoursSaccefHorsOprt: number;
        /**
         * Cdfmtr_TypeTrspUtls
         */
        typeTrspUtilisation: number;
        /**
         * Cdfmge_CodeGeotAdrsDomc
         */
        codeGeotAdresseDomiciliation: string;
        /**
         * Cdfppb_CodePaysResdEmpr
         */
        codePaysResdEmprunt: string;
        /**
         * Cdfopb_CodePaysLocsEmpr
         */
        codePaysLocalisationEmprunt: string;
        /**
         * Cdfkpa_CodePrflEmpr
         */
        codeProfilEmprunt: number;
        /**
         * Cofcpn_CodePstlLieuNais
         */
        codePstlLieuNais: string;
        /**
         * DossierAssurance
         */
        dossierAssurance: IDossierAssuranceLecture;
        /**
         * IdntActv
         */
        idActivite: string;
        /**
         * IdntIntdBanc
         */
        idIntdBancaire: string;
        /**
         * ListIdntOpps
         */
        listeIdOpps: Array<string>;
        /**
         * Lbfce1_LbAdrEPS1
         */
        libelleAdresseEPS1: string;
        /**
         * Lbfce2_LbAdrEPS2
         */
        libelleAdresseEPS2: string;
        /**
         * Lbfce3_LbAdrEPS3
         */
        libelleAdresseEPS3: string;
        /**
         * Lbfce4_LbAdrEPS4
         */
        libelleAdresseEPS4: string;
        /**
         * Lbfce5_LbAdrEPS5
         */
        libelleAdresseEPS5: string;
        /**
         * Codaac_CatSocioPro
         */
        categorieSocioProfessionnelle: string;
        /**
         * Irdqsn_NumSirenEnt
         */
        numeroSirenEntreprise: string;
        /**
         * Lbfprm_LbRegMat
         */
        libelleRegimeMatrimonial: string;
        /**
         * Llfco1_LbClsRegMat
         */
        libelleClauseRegimeMatrimonial: string;
        /**
         * IdntEntrepreneurIndiv
         */
        idEntrepreneurIndiv: string;
        /**
         * IdntSignataire
         */
        idSignataire: string;
    }
    interface ISortieRafraichirPersonne {
        /**
         * ListePersonneLecture
         */
        listePersonneLecture: Array<IPersonneLecture>;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.RecupererContexteCnp {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IResultatContexteCnp {
        /**
         * IdDossierCNP
         */
        idDossierCNP: string;
        /**
         * LibErreur
         */
        libelleErreur: string;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
        /**
         * ActionCtxCNP
         */
        actionCtxCNP: string;
        /**
         * JetonCtxCNP
         */
        jetonCtxCNP: string;
        /**
         * RefCtxCNP
         */
        referenceCtxCNP: string;
        /**
         * CodeCollSelectCtxCNP
         */
        codeCollSelectCtxCNP: string;
        /**
         * NomCtxCNP
         */
        nomCtxCNP: string;
        /**
         * PrenomCtxCNP
         */
        prenomCtxCNP: string;
        /**
         * DateNaissanceCtxCNP
         */
        dateNaissanceCtxCNP: string;
    }
}

declare namespace ICRest.Modeles.RecupererContexteEdition {
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IContexteIndustrialisation {
        /**
         * PrerequisEditionIndustrialisee
         */
        prerequisEditionIndustrialisee: boolean;
        /**
         * EstMultiDestinatairesAutorise
         */
        estMultiDestinatairesAutorise: boolean;
    }
    interface IContexteNumerisation {
        /**
         * EstDossierNumeriqueActive
         */
        estDossierNumeriqueActive: boolean;
        /**
         * UrlAcquDossierNumerique
         */
        urlAcquDossierNumerique: string;
        /**
         * UrlConsDossierNumerique
         */
        urlConsolideDossierNumerique: string;
        /**
         * ErreurDossierNumerique
         */
        erreurDossierNumerique: boolean;
        /**
         * ListeAnomalieDossierNumerique
         */
        listeAnomalieDossierNumerique: Array<IAnomalieLecture>;
        /**
         * RefRegr
         */
        referenceRegr: string;
    }
    interface IResultatEligibiliteSignatureElectronique {
        /**
         * EstEligible
         */
        estEligible: boolean;
        /**
         * MessagesErreur
         */
        messagesErreur: Array<string>;
        /**
         * MessagesErreurPieco
         */
        messagesErreurPieco: Array<string>;
        /**
         * MessageErreurContelec
         */
        messageErreurContelec: Array<string>;
    }
    interface IContexteElectronique {
        /**
         * EstSignatureElectroniqueActivee
         */
        estSignatureElectroniqueActivee: boolean;
        /**
         * ResultatSignatureElectroniqueEligible
         */
        resultatSignaElecEligible: IResultatEligibiliteSignatureElectronique;
        /**
         * EstSignatureElectroniqueAgregationEligible
         */
        estSignaElecAgregationEligible: boolean;
        /**
         * EstSignatureDemandeCreditSAGActivee
         */
        estSignatureDemandeCreditSAGActivee: boolean;
        /**
         * ResultatSignatureDemandeCreditSAGEligible
         */
        resultatSignatureDemandeCreditSAGEligible: IResultatEligibiliteSignatureElectronique;
        /**
         * EstSignatureDemandeCreditSEDActivee
         */
        estSignatureDemandeCreditSEDActivee: boolean;
        /**
         * ResultatSignatureDemandeCreditSEDEligible
         */
        resultatSignatureDemandeCreditSEDEligible: IResultatEligibiliteSignatureElectronique;
    }
    interface IContexteAnnexe {
        /**
         * EditionEligibleSED
         */
        editionEligibleSED: boolean;
        /**
         * EditionEligibleSAG
         */
        editionEligibleSAG: boolean;
        /**
         * AfficherFormStatutOccupation
         */
        afficherFormeStatutOccupation: boolean;
        /**
         * AfficherFormLienAvecEmprunteur
         */
        afficherFormeLienAvecEmprunteur: boolean;
        /**
         * AfficherFormRattachementFoyerFiscal
         */
        afficherFormeRattachementFoyerFiscal: boolean;
        /**
         * ListeAnomalies
         */
        listeAnomalies: Array<IAnomalieLecture>;
    }
    interface IContexteEditique {
        /**
         * AutorisationEditionOffre
         */
        autorisationEditionOffre: boolean;
        /**
         * AutoriserEditionOffreAgence
         */
        autoriserEditionOffreAgence: boolean;
        /**
         * DocumentOffrePresent
         */
        documentOffrePresent: boolean;
        /**
         * EstDossierPartenaire
         */
        estDossierPartenaire: boolean;
        /**
         * LibelleAutorisationEdition
         */
        libelleAutorisationEdition: string;
        /**
         * Cefado_SousEtatDoss
         */
        sousEtatDossier: number;
        /**
         * CodeTypeEditionAutorisee
         */
        codeTypeEditionAutorisee: string;
        /**
         * ListeAnomalieEdition
         */
        listeAnomalieEdition: Array<IAnomalieLecture>;
        /**
         * ContexteEditionIndustrialisee
         */
        contexteEditionIndustrialisee: IContexteIndustrialisation;
        /**
         * ContexteDossierNumerique
         */
        contexteDossierNumerique: IContexteNumerisation;
        /**
         * ContexteSignatureElectronique
         */
        contexteSignatureElectronique: IContexteElectronique;
        /**
         * ContexteAnnexe
         */
        contexteAnnexe: IContexteAnnexe;
    }
}

declare namespace ICRest.Modeles.RecupererInfoCompPTZ {
    interface IEntreeRecuperationInfoPTZ {
        /**
         * sIdntDoss
         */
        idDossier: string;
        /**
         * sIdntPlanFin
         */
        idPlanFin: string;
    }
    interface IInformationsMajorationPTZ {
        /**
         * Visible
         */
        visible: boolean;
        /**
         * EligibleENL
         */
        eligibleENL: boolean;
        /**
         * MontantMajorationENL
         */
        montantMajorationENL: number;
        /**
         * EligibleBBC
         */
        eligibleBBC: boolean;
        /**
         * MontantMajorationBBC
         */
        montantMajorationBBC: number;
        /**
         * MontantMinimumApport
         */
        montantMinimumApport: number;
        /**
         * MontantGlobalPATZ
         */
        montantGlobalPATZ: number;
    }
    interface ISortieRecuperationInfoPTZ {
        /**
         * LibelleRegle1
         */
        libelleRegle1: string;
        /**
         * MontantPlafondReglementaire
         */
        montantPlafondReglementaire: number;
        /**
         * LibelleRegle2
         */
        libelleRegle2: string;
        /**
         * MontantPlafondDeduit
         */
        montantPlafondDeduit: number;
        /**
         * LibelleRegleReductionViaDuree
         */
        libelleRegleReductionViaDuree: string;
        /**
         * LibelleRegleReductionViaTaux
         */
        libelleRegleReductionViaTaux: string;
        /**
         * LibelleRegle3
         */
        libelleRegle3: string;
        /**
         * LibellePretPincipal
         */
        libellePretPincipal: string;
        /**
         * DureePretPrincipal
         */
        dureePretPrincipal: number;
        /**
         * CoefficientFamilial
         */
        coefficientFamilial: number;
        /**
         * MontantRessourcePondere
         */
        montantRessourcePondere: number;
        /**
         * CoutOperationPondere
         */
        coutOperationPondere: number;
        /**
         * LibelleCoutOperation
         */
        libelleCoutOperation: string;
        /**
         * BlocInformationMajoration
         */
        blocInformationMajoration: IInformationsMajorationPTZ;
    }
}

declare namespace ICRest.Modeles.RefusAccessoire {
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IMandatLecture extends IElementLecture {
        /**
         * Cocxbq_CodeCaisse
         */
        codeCaisse: string;
        /**
         * Dgfdms_DateDeSignature
         * Type date au format yyyy-MM-dd
         */
        dateDeSignature: string;
        /**
         * Ctfdfm_TypeFrequenceMandat
         */
        typeFrequenceMandat: string;
        /**
         * Ctfdma_TypeMandatSepaSdd
         */
        typeMandatSepaSdd: number;
        /**
         * Cnfdma_CodeNatureMandat
         */
        codeNatureMandat: number;
        /**
         * Idfdma_RefeMandat
         */
        referenceMandat: string;
        /**
         * Llfdcr_NomDuCreancier
         */
        nomDuCreancier: string;
        /**
         * Llfdac_AdresseDuCreancier
         */
        adresseDuCreancier: string;
        /**
         * Cofdpc_CodePostalDuCreancier
         */
        codePostalDuCreancier: string;
        /**
         * Lcfdvc_VilleDuCreancier
         */
        villeDuCreancier: string;
        /**
         * Ctfdpa_CodePaysDuCreancier
         */
        codePaysDuCreancier: string;
        /**
         * Llfdpo_LibDuPaysDonneurOrdre
         */
        libelleDuPaysDonneurOrdre: string;
        /**
         * Idfdcr_IdntCreancierSepaDomaine
         */
        idCreancierSepaDomaine: string;
        /**
         * Llfddb_NomDuDebiteur
         */
        nomDuDebiteur: string;
        /**
         * Idfdb3_CodeBicDebiteur
         */
        codeBicDebiteur: string;
        /**
         * Idfdi3_NumeroIbanCompteDebiteur
         */
        numeroIbanCompteDebiteur: string;
        /**
         * Idfddb_IdntDuDebiteur
         */
        idDuDebiteur: string;
        /**
         * Llfdad_AdresseDuDebiteur
         */
        adresseDuDebiteur: string;
        /**
         * Cofdpd_CodePostalDuDebiteur
         */
        codePostalDuDebiteur: string;
        /**
         * Lcfdvd_VilleDuDebiteur
         */
        villeDuDebiteur: string;
        /**
         * Ctfdpd_CodePaysDuDebiteur
         */
        codePaysDuDebiteur: string;
        /**
         * Llfdpd_LibPaysDuDebiteur
         */
        libellePaysDuDebiteur: string;
        /**
         * Llfdci_LibCreancierInitial
         */
        libelleCreancierInitial: string;
        /**
         * Idfdct_IdntCreancierInitial
         */
        idCreancierInitial: string;
        /**
         * Llfddf_LibDebiteurFinal
         */
        libelleDebiteurFinal: string;
        /**
         * Idfddf_IdntDebiteurFinal
         */
        idDebiteurFinal: string;
    }
}

declare namespace ICRest.Modeles.RendreDossierViaId {
    interface IEntreeTransaction {
        /**
         * ForceeControle
         */
        forceeControle: boolean;
        /**
         * Idws
         */
        idws: string;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IRapportTransaction {
        /**
         * OperationReussie
         */
        operationReussie: boolean;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.RetenirPropositionEL {
    interface IRetenirPropositionELRequest {
        identifiantDossier: string;
        idwsCredit: string;
        periodicite: string;
        duree: number;
        montantPret: number;
        montantEcheance: number;
        tauxPret: number;
        estEcheance: boolean;
        estManuel: boolean;
    }
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IReamenagementLecture extends IElementLecture {
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
        /**
         * Ctfmup_UsgPretTres
         */
        usagePretTres: number;
        /**
         * Mtfmvc_AncnEche
         */
        ancnEcheance: number;
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * Mtfmvd_ValrAchtObjtFinn
         */
        valeurAchtObjetFinancier: number;
        /**
         * Npfmrp_DureResdPretRefn
         */
        dureResdPretRefn: number;
        /**
         * Dtfoac_DateAcqsObjtRefn
         * Type date au format yyyy-MM-dd
         */
        dateAcqsObjetRefn: string;
        /**
         * Mtfaoc_CoutAcqsObjtRefn
         */
        coutAcqsObjetRefn: number;
        /**
         * IdntPrjt
         */
        idProjet: string;
        /**
         * ListIdntPretReam
         */
        listeIdPretReamenagement: Array<string>;
    }
}

declare namespace ICRest.Modeles.SauverDossier {
    interface ISauverDossierRequest {
        identifiantDossier: string;
    }
}

declare namespace ICRest.Modeles.SchemaComplet {
    interface ILireSchemasCompletRequest {
        identifiantDossier: string;
        listeEntreeLireSchemaComplet: Array<IEntreeLireSchemaComplet>;
    }
    interface IElementComplet {
        /**
         * Idws
         */
        idws: string;
    }
    interface IPretReamenageComplet extends IElementComplet {
        /**
         * Lbfcvs_LiblPrdt
         */
        libelleProduit: string;
        /**
         * listeIdws
         */
        listeIdws: Array<string>;
        /**
         * Cdfidr_CodeDev
         */
        codeDev: string;
        /**
         * Mkfd01_CRD
         */
        crd: number;
        /**
         * EstCapitalRestantDuVisible
         */
        estCapitalRestantDuVisible: boolean;
        /**
         * Dtfcer_DateEnvsPourRembAntc
         * Type date au format yyyy-MM-dd
         */
        dateEnvsPourRemboursementAnticipe: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * EstSommeRestantDueVisible
         */
        estSommeRestantDueVisible: boolean;
        /**
         * EstExterne
         */
        estExterne: boolean;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Mefacg_MtechePerdPretRefn
         */
        montantEcheancePeriodiquePretRefn: number;
        /**
         * Dffmce_DateFinCred
         * Type date au format yyyy-MM-dd
         */
        dateFinCredit: string;
    }
    interface IRedacteurActeComplet extends IElementComplet {
        /**
         * RedacteurActeObligatoire
         */
        redacteurActeObligatoire: boolean;
        /**
         * Dgfapn_DatePrevSignNotr
         * Type date au format yyyy-MM-dd
         */
        datePrevSigneNotaire: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Lbfpnm_NomRedcActe
         */
        nomReductionActe: string;
        /**
         * Lbfppn_PrenRedcActe
         */
        prenReductionActe: string;
        /**
         * Lbfpa1_InttAdrs
         */
        intituleAdresse: string;
        /**
         * Lbfpa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfpa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfpa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfpa5_Ville
         */
        ville: string;
        /**
         * Lbfpa6_ComplIntt
         */
        complementIntitule: string;
        /**
         * Lbfpa7_AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Llfaem_EmailPerso
         */
        emailPerso: string;
        /**
         * Nufptb_NumeTeleProf
         */
        numeroTeleProf: string;
        /**
         * Nufptl_NumeTelePers
         */
        numeroTelePersonne: string;
        /**
         * Nufptx_NumeTcpyProf
         */
        numeroTcpyProf: string;
        /**
         * Nufpto_NumePortPers
         */
        numeroPortPersonne: string;
    }
    interface IControleIhm {
        /**
         * EstActif
         */
        estActif: boolean;
        /**
         * EstSelectionne
         */
        estSelectionne: boolean;
        /**
         * EstVisible
         */
        estVisible: boolean;
        /**
         * InfoBulle
         */
        informationBulle: string;
        /**
         * Nom
         */
        nom: string;
    }
    interface IMontantComplet extends IElementComplet {
        /**
         * MontantConseille
         */
        montantConseille: number;
        /**
         * MontantMaximal
         */
        montantMaximal: number;
        /**
         * MontantMinimal
         */
        montantMinimal: number;
        /**
         * MontantSaisi
         */
        montantSaisi: number;
        /**
         * Pas
         */
        pas: number;
    }
    interface ITauxComplet extends IElementComplet {
        /**
         * TauxConseille
         */
        tauxConseille: number;
        /**
         * TauxMaximal
         */
        tauxMaximal: number;
        /**
         * TauxMinimal
         */
        tauxMinimal: number;
        /**
         * TauxSaisi
         */
        tauxSaisi: number;
    }
    interface IAccessoireComplementaireComplet extends IAccessoireComplet {
        /**
         * LibelleFraisComplementaire
         */
        libelleFraisComplementaire: string;
        /**
         * Ctfprp_RoleTiers
         */
        roleTiers: string;
        /**
         * Lbfpa1_Intitule
         */
        intitule: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
    }
    interface IAccessoireLieProduitComplet extends IAccessoireComplet {
        /**
         * Llfcac_LibelleTypeAccessoire
         */
        libelleTypeAccessoire: string;
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
    }
    interface ICompteProfessionnelComplet extends ICompteComplet {
    }
    interface IPersonneComplet extends IElementComplet {
        /**
         * Ctfipe_CodeTypeBasePers
         */
        codeTypeBasePersonne: number;
        /**
         * ListComptesDepots
         */
        listeComptesDepots: Array<ICompteDepotComplet>;
        /**
         * ListComptesPrelVersModalite
         */
        listeComptesPrelVersementModalite: Array<ICompteComplet>;
        /**
         * Cdfptp_CodeTypePers
         */
        codeTypePersonne: number;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
    }
    interface IInterditBancaireComplet extends IElementComplet {
    }
    interface IOppositionComplet extends IElementComplet {
    }
    interface IRoleComplet extends IElementComplet {
        /**
         * Ctfprp_TypeRolePersonne
         */
        typeRolePersonne: string;
        /**
         * LibelleRole
         */
        libelleRole: string;
    }
    interface IEntrepreneurIndividuelComplet extends IElementComplet {
        /**
         * CodeNace
         */
        codeNace: string;
        /**
         * CodeInsee
         */
        codeINSEE: string;
        /**
         * DateDebutEIRL
         * Type date au format yyyy-MM-dd
         */
        dateDebutEIRL: string;
        /**
         * DateFinEIRL
         * Type date au format yyyy-MM-dd
         */
        dateFinEIRL: string;
        /**
         * IndicateurOpposabiliteEIRL
         */
        indicateurOpposabiliteEIRL: number;
        /**
         * NomConjoint
         */
        nomConjoint: string;
        /**
         * EstMandataire
         */
        estMandataire: boolean;
        /**
         * NomMandataire
         */
        nomMandataire: string;
        /**
         * VertuMandataire
         */
        vertuMandataire: string;
        /**
         * Controles
         */
        controles: Array<IControleIhm>;
        /**
         * EstEIRL
         */
        estEIRL: boolean;
        /**
         * IndicateurEIRL
         */
        indicateurEIRL: number;
        /**
         * LibelleEIRL
         */
        libelleEIRL: string;
        /**
         * AccordConjoint
         */
        accordConjoint: boolean;
    }
    interface ISignataireComplet extends IElementComplet {
        /**
         * ListEmailsContactsChoisissables
         */
        listeEmailsContactsChoisissables: Array<string>;
        /**
         * ListNumerosContactsChoisissables
         */
        listeNumerosContactsChoisissables: Array<string>;
        /**
         * EstAutoriseASigner
         */
        estAutoriseASigner: boolean;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * TypeSignataire
         */
        typeSignataire: number;
        /**
         * Controles
         */
        controles: Array<IControleIhm>;
        /**
         * EmailContact
         */
        emailContact: string;
        /**
         * NumeroContact
         */
        numeroContact: string;
        /**
         * EstSignataireEffectif
         */
        estSignataireEffectif: boolean;
    }
    interface IPersonneMoraleComplet extends IPersonneComplet {
        /**
         * Nufpin_NumeInsee
         */
        numeroINSEE: string;
        /**
         * ListRoles
         */
        listeRoles: Array<IRoleComplet>;
        /**
         * ListRepresantants
         */
        listeRepresantants: Array<IPersonneComplet>;
    }
    interface IRetenueImpayeComplet extends IElementComplet {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: number;
        /**
         * TypeDonnee
         */
        typeDonnee: number;
    }
    interface IRetenuesImpayesComplet extends IElementComplet {
        /**
         * RIRetard
         */
        rIRetard: IRetenueImpayeComplet;
        /**
         * RIIndemnite
         */
        rIIndemnite: IRetenueImpayeComplet;
        /**
         * RIReduction
         */
        rIReduction: IRetenueImpayeComplet;
    }
    interface ICreditModaliteComplet extends IElementComplet {
        /**
         * Controles
         */
        controles: Array<IControleIhm>;
        /**
         * RetenuesImpayesComplet
         */
        retenuesImpayesComplet: IRetenuesImpayesComplet;
        /**
         * TauxIndemniteRemboursementAnticipe
         */
        tauxIndemniteRemboursementAnticipe: ITauxComplet;
        /**
         * SurcoutTauxRemboursementAnticipe
         */
        surcoutTauxRemboursementAnticipe: ITauxComplet;
        /**
         * Txffmi_TxInteRetdImpe
         */
        tauxInterieurRetardImpe: number;
        /**
         * Cdfccr_CodeTrtInteIntrSurImpe
         */
        codeTraitementInterieurIntrSurImpe: number;
        /**
         * Libelle_CodeTrtInteIntrSurImpe
         */
        libelleTraitementInterieurIntrSurImpe: string;
        /**
         * Idfcmi_IdntModlCalcImpe
         */
        idModeleCalculImpe: string;
        /**
         * Nofcmc_NumeModlRembAntc
         */
        numeroModeleRemboursementAnticipe: number;
    }
    interface IPayeurComplet extends IElementComplet {
        /**
         * Cdfdrg_ModeReglUtlsParPayr
         */
        modeRegleUtilisationParPayr: string;
        /**
         * Nufddt_NumeCptePayr
         */
        numeroComptePayr: string;
        /**
         * Ctfctd_CodeTypeDom
         */
        codeTypeDom: string;
        /**
         * Llmreg_LibModRegl
         */
        libelleModRegle: string;
        /**
         * Mtfdfx_MtPaieCred
         */
        montantPaiementCredit: number;
        /**
         * Idfdma_RefeUnqMand
         */
        referenceUniqueMand: string;
        /**
         * Bic
         */
        bic: string;
        /**
         * Iban
         */
        iban: string;
        /**
         * Dgfdma_DateSignMand
         * Type date au format yyyy-MM-dd
         */
        dateSigneMand: string;
        /**
         * Cdfdrs_ModeReglUtlsParPayrSecours
         */
        modeRegleUtilisationParPayrSecours: string;
        /**
         * Ctfctd_CodeTypeDomSecours
         */
        codeTypeDomSecours: string;
        /**
         * Llmreg_LibModReglSecours
         */
        libelleModRegleSecours: string;
        /**
         * NumeroComptePayeurSecours
         */
        numeroComptePayeurSecours: string;
        /**
         * Idfdms_RefeUnqMandSecours
         */
        referenceUniqueMandSecours: string;
        /**
         * BicSecours
         */
        bicSecours: string;
        /**
         * IbanSecours
         */
        ibanSecours: string;
        /**
         * Dgfdms_DateSignMandSecours
         * Type date au format yyyy-MM-dd
         */
        dateSigneMandSecours: string;
        /**
         * IdwsPersonne
         */
        idPersonne: string;
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
    }
    interface ISuiviPlanifieComplet extends IElementComplet {
        /**
         * Dtfarv_DateSuivPlnf
         * Type date au format yyyy-MM-dd
         */
        dateSuiviPlanifie: string;
        /**
         * Ctfcrx_CodeAffecSuivPlnfPrdt
         */
        codeAffectationSuivantPlafondProduit: number;
        /**
         * Llfcrv_LiblSuivPlnf
         */
        libelleSuivantPlafond: string;
        /**
         * Llfcrd_LiblRegleDeclmt
         */
        libelleRegleDeclmt: string;
        /**
         * Cifcai_CodeSuivPlnfAutoIntr
         */
        codeSuivantPlafondAutomatiqueIntr: number;
        /**
         * Cifcpd_CodePostnmtDefaut
         */
        codePostnmtDefaut: number;
        /**
         * Ctfcrv_CodeTypeSuivPlnf
         */
        codeTypeSuiviPlanifie: string;
    }
    interface IPhaseCreditExistantComplet extends IElementComplet {
        /**
         * LibelleTypePhase
         */
        libelleTypePhase: string;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
    }
    interface IFamilleEpargneComplet extends IElementComplet {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * CodeProduitCE
         */
        codeProduitCE: number;
        /**
         * Lbfmpr_LibelleProduitAdr
         */
        libelleProduitAdresse: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Mtfmve_MtValrEprgAvntOper
         */
        montantValeurEpargneAvenantOper: number;
    }
    interface IRevenuFiscalComplet extends IElementComplet {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
    }
    interface IPatrimoineImmobilierComplet extends IElementComplet {
        /**
         * LibelleNaturePatrimoineImmmobilier
         */
        libelleNaturePatrimoineImmmobilier: string;
        /**
         * Ctfcnp_NatrPtrmImmb
         */
        naturePatrimoineImmobilier: number;
        /**
         * Mtfmvb_ValrActlPtrm
         */
        valeurActuarielPatrimoine: number;
    }
    interface IContratEpargneLogementComplet extends IElementComplet {
        /**
         * Ddfpct_DateOuvrCont
         * Type date au format yyyy-MM-dd
         */
        dateOuvertureContrat: string;
        /**
         * Lbfptc_LiblTitlCont
         */
        libelleTitulaireContrat: string;
        /**
         * LibelleCdfpprTypeEL
         */
        libelleCdfpprTypeEL: string;
        /**
         * LibelleTypeDrt
         */
        libelleTypeDroit: string;
        /**
         * Nufpct_IdntContEl
         */
        idContratEpargneLogement: string;
    }
    interface IDateComplet extends IElementComplet {
        /**
         * DateMaximale
         * Type date au format yyyy-MM-dd
         */
        dateMaximale: string;
        /**
         * DateMinimale
         * Type date au format yyyy-MM-dd
         */
        dateMinimale: string;
        /**
         * DateConseille
         * Type date au format yyyy-MM-dd
         */
        dateConseille: string;
        /**
         * DateSaisie
         * Type date au format yyyy-MM-dd
         */
        dateSaisie: string;
    }
    interface IDecisionPreteurComplet extends IElementComplet {
        /**
         * AutorisationADecider
         */
        autorisationADecider: boolean;
        /**
         * Controles
         */
        controles: Array<IControleIhm>;
        /**
         * Cvfide_NiveauRequis
         */
        niveauRequis: string;
        /**
         * DateDecision
         */
        dateDecision: IDateComplet;
        /**
         * EtatDossier
         */
        etatDossier: string;
        /**
         * LibelleNiveauRequis
         */
        libelleNiveauRequis: string;
        /**
         * MessageAlerteDelegation
         */
        messageAlerteDelegation: string;
        /**
         * MoteurDelegationExterne
         */
        moteurDelegationExterne: boolean;
        /**
         * Nofcdi_NiveauDelegationAgent
         */
        niveauDelegationAgent: string;
        /**
         * Ntfmba_NotifEngagementBale2
         */
        notifEngagementBale2: string;
        /**
         * Tvfyal_ValeurDelegation
         */
        valeurDelegation: string;
    }
    interface IReamenagementComplet extends IElementComplet {
        /**
         * LibelleTypeReamenagement
         */
        libelleTypeReamenagement: string;
        /**
         * Mtfmva_CapitalRestantDu
         */
        capitalRestantDu: number;
        /**
         * Mttotdu_MontantTotalDu
         */
        mttotdu_MontantTotalDu: number;
        /**
         * Mtfmvc_AncienneEcheance
         */
        ancienneEcheance: number;
        /**
         * Npfmrp_DureeResiduelle
         */
        dureeResiduelle: number;
        /**
         * Mtfmvd_ValeurAchatObjetFinance
         */
        valeurAchatObjetFinance: number;
        /**
         * GenreReamenagement
         */
        genreReamenagement: number;
        /**
         * EstAjoutCreditInternePossible
         */
        estAjoutCreditInternePossible: boolean;
        /**
         * EstAjoutCreditExternePossible
         */
        estAjoutCreditExternePossible: boolean;
        /**
         * EstSommeRestantDueVisible
         */
        estSommeRestantDueVisible: boolean;
        /**
         * EstMontantTotalDuVisible
         */
        estMontantTotalDuVisible: boolean;
        /**
         * LibelleReamenagement
         */
        libelleReamenagement: string;
        /**
         * IdwsProjet
         */
        idwsProjet: string;
        /**
         * Cdfadv_codeDevise
         */
        codeDevise: string;
        /**
         * EstReamenagementUnSeulCredit
         */
        estReamenagementUnSeulCredit: boolean;
        /**
         * listeTypeReamenagement
         */
        listeTypeReamenagement: Array<IScConstante>;
        /**
         * PretsReamenages
         */
        pretsReamenages: Array<IPretReamenageComplet>;
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
    }
    interface IScElement {
    }
    interface IScConstante extends IScElement {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Valeur
         */
        valeur: string;
    }
    interface IIntervenantComplet extends IElementComplet {
        /**
         * Signe
         */
        signe: boolean;
        /**
         * Refuse
         */
        refuse: boolean;
        /**
         * DateReponse
         * Type date au format yyyy-MM-dd
         */
        dateReponse: string;
        /**
         * IdwsPersonne
         */
        idPersonne: string;
        /**
         * Ctfprp_RolsPersPourDoss
         */
        rolsPersonnePourDossier: Array<string>;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * LibelleRole
         */
        libelleRole: string;
    }
    interface IBienAVendreComplet extends IElementComplet {
        /**
         * Mtfgrd_MtCrdRachSurBienVend
         */
        montantCRDRachSurBienVend: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
    }
    interface IBienConsoFinanceComplet extends IElementComplet {
        /**
         * Idfove_IdntVndr
         */
        idVendeur: string;
    }
    interface IBienDetailleComplet extends IElementComplet {
        /**
         * MontantTotalHorsInstruction
         */
        montantTotalHorsInstruction: number;
        /**
         * Mtfote_CoutTerrain
         */
        coutTerrain: number;
        /**
         * Mtfoac_CoutAcquisitCommercial
         */
        coutAcquisitCommercial: number;
        /**
         * Mtfoai_CoutAcquisitHabitation
         */
        coutAcquisitHabitation: number;
        /**
         * Mtfoco_CoutConstruction
         */
        coutConstruction: number;
        /**
         * Mtfotr_CoutTravauxAmenagement
         */
        coutTravauxAmenagement: number;
        /**
         * Mtfopp_CoutPasPort
         */
        coutPasPort: number;
        /**
         * Mtfofc_CoutFondDeCommerce
         */
        coutFondDeCommerce: number;
        /**
         * Mtfomo_CoutEquipements
         */
        coutEquipements: number;
        /**
         * Mtfovp_CoutVehiculesPrfs
         */
        coutVehiculesPrfs: number;
        /**
         * Mtfops_CoutPartsSociales
         */
        coutPartsSociales: number;
        /**
         * Mtfofg_MontantFraisNegociatio
         */
        montantFraisNegociatio: number;
        /**
         * Mtfofn_CoutFraisNotaire
         */
        coutFraisNotaire: number;
        /**
         * Mtfost_CoutStocks
         */
        coutStocks: number;
        /**
         * Mtfosc_CoutStocksHorsInstruct
         */
        coutStocksHorsInstruct: number;
        /**
         * Mtfobf_CoutBFR
         */
        coutBFR: number;
        /**
         * Mtfobc_CoutBFRHorsInstruction
         */
        coutBFRHorsInstruction: number;
        /**
         * Mtfodv_CoutAutresFraisPrfs
         */
        coutAutresFraisPrfs: number;
        /**
         * Mtfodc_CoutEmpruntHInstuction
         */
        coutEmpruntHInstuction: number;
        /**
         * Mcfotv_MontantTVA
         */
        montantTVA: number;
        /**
         * Mtfora_MontantRachatCreances
         */
        montantRachatCreances: number;
        /**
         * Mtfods_CoutPartsSocietes
         */
        coutPartsSocietes: number;
    }
    interface IBienEquipementProComplet extends IBienDetailleComplet {
    }
    interface ITresorerieFinanceeComplet extends IBienDetailleComplet {
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface ISignatairesComplet extends IElementComplet {
        /**
         * Signataires
         */
        signataires: Array<IPersonneComplet>;
        /**
         * Anomalies
         */
        anomalies: Array<IAnomalieLecture>;
    }
    interface IAvisComplet extends IElementComplet {
        /**
         * Lbfaad_LiblAvis
         */
        libelleAvis: string;
        /**
         * Motif
         */
        motif: string;
        /**
         * Conformite
         */
        conformite: boolean;
        /**
         * Ctfita_CodeTyplAvis
         */
        codeTypologieAvis: string;
        /**
         * Dtfaad_DateSaisAvis
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSaisieAvis: string;
        /**
         * Idfaen_IdntEnttSaisAvis
         */
        idEntiteSaisieAvis: string;
        /**
         * Lbfaen_LiblEnttSaisAvis
         */
        libelleEntiteSaisieAvis: string;
        /**
         * Nofiav_NumeAvis
         */
        numeroAvis: number;
    }
    interface IResultatLireSchemaComplet {
        /**
         * ListElementComplet
         */
        listeElementComplet: Array<IElementComplet>;
        /**
         * ListAno
         */
        listeAno: Array<IAnomalieLecture>;
        /**
         * MemoObject
         */
        memoObject: string;
        /**
         * IdwsObjectParent
         */
        idwsObjectParent: string;
    }
    interface IRattachementFoyerFiscalTiersComplet extends IElementComplet {
        /**
         * Identification
         */
        identification: string;
        /**
         * Annee
         */
        annee: number;
        /**
         * Montant
         */
        montant: number;
    }
    interface IFormulaireLienAvecEmprunteurComplet extends IElementComplet {
        /**
         * MontantRFRN2
         */
        montantRFRN2: number;
        /**
         * ListeOccupant
         */
        listeOccupant: Array<IOccupantComplet>;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
        /**
         * IdentifiantRattache
         */
        identifiantRattache: string;
    }
    interface IFormulaireStatutOccupationPTZComplet extends IElementComplet {
        /**
         * LibellePersonne
         */
        libellePersonne: string;
        /**
         * ListeInformationOccupation
         */
        listeInformationOccupation: Array<IInformationOccupationComplet>;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
        /**
         * IdentifiantRattache
         */
        identifiantRattache: string;
    }
    interface IChampRadioButton {
        /**
         * Checked1
         */
        checked1: boolean;
        /**
         * Checked2
         */
        checked2: boolean;
        /**
         * Enabled
         */
        enabled: boolean;
        /**
         * Visible
         */
        visible: boolean;
        /**
         * Type
         */
        type: string;
        /**
         * Libelle1
         */
        libelle1: string;
        /**
         * Libelle2
         */
        libelle2: string;
    }
    interface IReponseQuestionComplet extends IElementComplet {
        /**
         * IdentifiantRattache
         */
        identifiantRattache: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * RadioButton
         */
        radioButton: IChampRadioButton;
    }
    interface IQuestionnaireAnnexeComplet extends IElementComplet {
        /**
         * ListeQuestionAnnexe
         */
        listeQuestionAnnexe: Array<IQuestionAnnexeComplet>;
        /**
         * ListeFormulaireStatutOccupation
         */
        listeFormulaireStatutOccupation: Array<IFormulaireStatutOccupationPTZComplet>;
        /**
         * FormulaireLienAvecEmprunteur
         */
        formulaireLienAvecEmprunteur: IFormulaireLienAvecEmprunteurComplet;
        /**
         * ListeFormulaireRattachementFoyerFiscal
         */
        listeFormulaireRattachementFoyerFiscal: Array<IFormulaireRattachementFoyerFiscalComplet>;
    }
    interface IClausePersonnaliseeComplet extends IElementComplet {
        /**
         * LiblClsePers
         */
        libelleClassePersonne: string;
        /**
         * NumeReltClsePers
         */
        numeroRelationClassePersonne: number;
        /**
         * DestClsePers
         */
        destinataireClassePersonne: number;
    }
    interface IClausesPersonnaliseesComplet extends IElementComplet {
        /**
         * ClausesPersonnalisees
         */
        clausesPersonnalisees: Array<IClausePersonnaliseeComplet>;
        /**
         * PresenceRedacteurActe
         */
        presenceRedacteurActe: boolean;
    }
    interface IFormulaireRattachementFoyerFiscalComplet extends IElementComplet {
        /**
         * LibellePersonne
         */
        libellePersonne: string;
        /**
         * RattachementFoyerFiscalTiers
         */
        rattachementFoyerFiscalTiers: IRattachementFoyerFiscalTiersComplet;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
        /**
         * IdentifiantRattache
         */
        identifiantRattache: string;
    }
    interface IOccupantComplet extends IElementComplet {
        /**
         * LibelleOccupant
         */
        libelleOccupant: string;
        /**
         * Lien
         */
        lien: number;
        /**
         * LibelleLien
         */
        libelleLien: string;
        /**
         * RevenuFiscal
         */
        revenuFiscal: number;
    }
    interface IInformationOccupationComplet extends IElementComplet {
        /**
         * DateDebutOccupation
         * Type date au format yyyy-MM-dd
         */
        dateDebutOccupation: string;
        /**
         * DateFinOccupation
         * Type date au format yyyy-MM-dd
         */
        dateFinOccupation: string;
        /**
         * LibelleStatutOccupation
         */
        libelleStatutOccupation: string;
        /**
         * StatutOccupation
         */
        statutOccupation: number;
        /**
         * RattachementAutre
         */
        rattachementAutre: string;
        /**
         * Adresse
         */
        adresse: string;
    }
    interface ITerrainFinanceComplet extends IElementComplet {
        /**
         * Mtfcfn_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
    }
    interface ISoulteFinanceComplet extends IElementComplet {
        /**
         * Mtfoac_MtSoul
         */
        montantSoul: number;
    }
    interface IDetailCoutObjetComplet extends IElementComplet {
        /**
         * Mtfoct_CoutTrvx
         */
        coutTravaux: number;
    }
    interface ITravauxFinancesComplet extends IElementComplet {
        /**
         * Dffotr_DateFinTrvx
         * Type date au format yyyy-MM-dd
         */
        dateFinTravaux: string;
        /**
         * Dtfoco_DateConstBatmSjac
         * Type date au format yyyy-MM-dd
         */
        dateConstructionBatimentSousJacent: string;
        /**
         * Nbfosh_SurfHabtBatmSjac
         */
        surfHabitationBatimentSousJacent: number;
        /**
         * DetailsCoutObjet
         */
        detailsCoutObjet: Array<IDetailCoutObjetComplet>;
        /**
         * Mtfotr_CoutTrvx
         */
        coutTravaux: number;
    }
    interface IConstructionFinanceeComplet extends IElementComplet {
        /**
         * Dffotr_DateFinConst
         * Type date au format yyyy-MM-dd
         */
        dateFinConstruction: string;
        /**
         * Mtfotm_CoutTrvxAChrgMoa
         */
        coutTravauxAChargeMoa: number;
        /**
         * Mtfotv_MtTvaFinnARemb
         */
        montantTVAFinancierARemboursement: number;
        /**
         * Nbfosh_SurfHabtCreeParConst
         */
        surfHabitationCreeParConstruction: number;
        /**
         * Mtfoco_CoutConstFinn
         */
        coutConstructionFinancier: number;
    }
    interface IComplementDossierComplet extends IElementComplet {
        /**
         * Llfidr_LiblDelRelsProj
         */
        libelleDelReleaseProjet: string;
    }
    interface IProprietaireComplet extends IElementComplet {
        /**
         * Civilite
         */
        civilite: string;
        /**
         * Lbfpnm_Nom
         */
        nom: string;
        /**
         * Lbfppn_Prenom
         */
        prenom: string;
        /**
         * Age
         */
        age: number;
        /**
         * IsEmprunteur
         */
        isEmprunteur: boolean;
        /**
         * Txffim_QuotPleinProp
         */
        quotientPleinProp: number;
        /**
         * Txfcnp_QuotNueProp
         */
        quotientNueProp: number;
        /**
         * Txfcdu_QuotUsuf
         */
        quotientUsuf: number;
        /**
         * Txfcus_QuotDroiUsag
         */
        quotientDroiUsag: number;
        /**
         * Ctfcdb_CdModDettnBien
         */
        codeModDettnBien: number;
        /**
         * IdntPersn
         */
        idPersn: string;
    }
    interface IQuestionAnnexeComplet extends IElementComplet {
        /**
         * LibelleQuestion
         */
        libelleQuestion: string;
        /**
         * LibelleEntiteRattachement
         */
        libelleEntiteRattachement: string;
        /**
         * LibelleDonneeARestituer
         */
        libelleDonneeARestituer: string;
        /**
         * Reponses
         */
        reponses: Array<IReponseQuestionComplet>;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
    }
    interface ICreditExterneComplet extends IElementComplet {
        /**
         * Lbface_LiblLibrSurConcr
         */
        libelleLibrSurConcr: string;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Npface_DureAmrtMois
         */
        dureAmortissementMois: number;
        /**
         * Txface_TxAmrt
         */
        tauxAmortissement: number;
        /**
         * Meface_MtEcheAmrt
         */
        montantEcheanceAmortissement: number;
        /**
         * Mkface_MtCapt
         */
        montantCapital: number;
    }
    interface IProjetNonImmobilierComplet extends IProjetComplet {
        /**
         * Description
         */
        description: string;
        /**
         * BienConsoFinance
         */
        bienConsommationFinance: IBienConsoFinanceComplet;
        /**
         * BienEquipementProComplet
         */
        bienEquipementProComplet: IBienEquipementProComplet;
        /**
         * TresorerieFinanceeComplet
         */
        tresorerieFinanceeComplet: ITresorerieFinanceeComplet;
        /**
         * ProprietairesComplet
         */
        proprietairesComplet: Array<IProprietaireComplet>;
    }
    interface ISuiviSignataireComplet extends IElementComplet {
        /**
         * LibelleSignataire
         */
        libelleSignataire: string;
        /**
         * LibelleRole
         */
        libelleRole: string;
        /**
         * IdentifiantPersonne
         */
        identifiantPersonne: string;
        /**
         * CodeEtatSignatureDocument
         */
        codeEtatSignatureDocument: string;
        /**
         * EtatSignatureDocument
         */
        etatSignatureDocument: string;
        /**
         * DateEnvoiDocument
         * Type date au format yyyy-MM-dd
         */
        dateEnvoiDocument: string;
        /**
         * DateSignature
         * Type date au format yyyy-MM-dd
         */
        dateSignature: string;
    }
    interface ISuiviEditionDocumentComplet extends IElementComplet {
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * LibelleDocument
         */
        libelleDocument: string;
        /**
         * IdentifiantWsPersonne
         */
        identifiantWsPersonne: string;
        /**
         * LibellePersonne
         */
        libellePersonne: string;
        /**
         * EstSignElectEligible
         */
        estSigneElectEligible: boolean;
        /**
         * CodeEtatSignatureDocument
         */
        codeEtatSignatureDocument: string;
        /**
         * EtatSignature
         */
        etatSignature: string;
        /**
         * DateEdition
         * Type date au format yyyy-MM-dd
         */
        dateEdition: string;
        /**
         * CanalEdition
         */
        canalEdition: number;
        /**
         * LibelleCanalEdition
         */
        libelleCanalEdition: string;
        /**
         * DateEnvoiDocument
         * Type date au format yyyy-MM-dd
         */
        dateEnvoiDocument: string;
        /**
         * DateSignature
         * Type date au format yyyy-MM-dd
         */
        dateSignature: string;
        /**
         * EstEditionEnCours
         */
        estEditionEnCours: boolean;
        /**
         * SuiviSignataires
         */
        suiviSignataires: Array<ISuiviSignataireComplet>;
    }
    interface IRefusAssuranceExterneComplet extends IElementComplet {
        /**
         * LibellePersonneAssure
         */
        libellePersonneAssure: string;
        /**
         * IdentifiantAssure
         */
        identifiantAssure: string;
        /**
         * Lbfcia_CompagnieAssurance
         */
        compagnieAssurance: string;
        /**
         * Lbfrcc_ReferenceContrat
         */
        referenceContrat: string;
        /**
         * Ddfpic_DateImpressionDemande
         * Type date au format yyyy-MM-dd
         */
        dateImpressionDemande: string;
    }
    interface IProduitFinancierComplet extends IElementComplet {
        /**
         * DureeCatDureeListeValeur
         */
        dureeCatDureeListeValeur: boolean;
        /**
         * Npfcfi_DureeMin
         */
        dureeMinimum: number;
        /**
         * Npfcf1_DureeMax
         */
        dureeMaximum: number;
        /**
         * Npfcf3_DureePas
         */
        dureePas: number;
        /**
         * ListDuree
         */
        listeDuree: Array<number>;
        /**
         * EstECOPATZ
         */
        estECOPATZ: boolean;
        /**
         * EstLissage
         */
        estLissage: boolean;
        /**
         * EstPATZ
         */
        estPATZ: boolean;
    }
    interface ISuiviDocumentComplet extends IElementComplet {
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * LibelleDocument
         */
        libelleDocument: string;
        /**
         * EntiteRattachementDocument
         */
        entiteRattachementDocument: number;
        /**
         * SuiviObligatoire
         */
        suiviObligatoire: boolean;
        /**
         * SuiviEditionDocuments
         */
        suiviEditionDocuments: Array<ISuiviEditionDocumentComplet>;
    }
    interface IExpertiseComplet extends IElementComplet {
        /**
         * IdentifiantExpertisePVH
         */
        identifiantExpertisePVH: string;
        /**
         * DateEstimationExpertisePVH
         * Type date au format yyyy-MM-dd
         */
        dateEstimationExpertisePVH: string;
        /**
         * MontantEstimationExpertisePVH
         */
        montantEstimationExpertisePVH: number;
        /**
         * NoteBienExpertisePVH
         */
        noteBienExpertisePVH: number;
        /**
         * AdressesMailDestinataire
         */
        adressesMailDestinataire: Array<string>;
        /**
         * IdwsHypothequeImmobiliere
         */
        idwsHypothequeImmobiliere: string;
        /**
         * DateDemandeExpertisePVH
         * Type date au format yyyy-MM-dd
         */
        dateDemandeExpertisePVH: string;
    }
    interface ISynthesePhaseComplet extends IElementComplet {
        /**
         * ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * TxActu
         */
        tauxActu: number;
        /**
         * TxProp
         */
        tauxProp: number;
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
        /**
         * MontantTotal1ereEcheance
         */
        montantTotal1ereEcheance: number;
        /**
         * Mtfacc_MtPrmeecheAccsPerd
         */
        montantPrmeecheAccessoirePeriode: number;
        /**
         * Npfcph_NbPerdPhas
         */
        nombrePeriodePhase: number;
        /**
         * Pefcph_CodePerdDurePhas
         */
        codePeriodeDurePhase: number;
    }
    interface IGraphEch {
        /**
         * Debut
         */
        debut: number;
        /**
         * Fin
         */
        fin: number;
        /**
         * mtEch
         */
        montantEch: number;
    }
    interface ISyntheseGroupeJustificationTEGComplet {
        /**
         * LibelleFrais
         */
        libelleFrais: string;
        /**
         * MessagesFrais
         */
        messagesFrais: Array<string>;
    }
    interface ISyntheseEcheancesJustifieesAssocieesComplet {
        /**
         * TitreCredit
         */
        titreCredit: string;
        /**
         * MessagesInterets
         */
        messagesInterets: Array<string>;
        /**
         * TypesFrais
         */
        typesFrais: Array<ISyntheseGroupeJustificationTEGComplet>;
    }
    interface IEntreeLireSchemaComplet {
        /**
         * MemoObject
         */
        memoObject: string;
        /**
         * BloquerSousObjets
         */
        bloquerSousObjets: boolean;
        /**
         * IdwsObjectParent
         */
        idwsObjectParent: string;
        /**
         * Idws
         */
        idws?: string;
    }
    interface ICompteComplet extends IElementComplet {
        /**
         * Cdfadv_CodeDevsCpte
         */
        codeDeviseCompte: string;
        /**
         * CompteJoint
         */
        compteJoint: boolean;
        /**
         * Dtfmou_DateOuvr
         * Type date au format yyyy-MM-dd
         */
        dateOuverture: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * Cdfppr_TypeCpte
         */
        typeCompte: string;
        /**
         * Nufpcp_NumeCpte
         */
        numeroCompte: string;
    }
    interface IPalierContraintComplet extends IElementComplet {
        /**
         * Ddpe_DateDebutPeriode
         * Type date au format yyyy-MM-dd
         */
        dateDebutPeriode: string;
        /**
         * Dfpe_DateFinPeriode
         * Type date au format yyyy-MM-dd
         */
        dateFinPeriode: string;
        /**
         * Meface_MontantEcheance
         */
        montantEcheance: number;
        /**
         * Npfpco_DureePalier
         */
        dureePalier: number;
    }
    interface ICriteresOptimisationComplet extends IElementComplet {
        /**
         * IdwsPlanFinancement
         */
        idwsPlanFinancement: string;
        /**
         * Ctfico_TypeCritOptim
         */
        typeCritereOptim: number;
        /**
         * Nbfico_ValeurCritOptim
         */
        valeurCritereOptim: number;
        /**
         * Cifaao_HorsAssurances
         */
        horsAssurances: boolean;
        /**
         * ListPaliersContraints
         */
        listePaliersContraints: Array<IPalierContraintComplet>;
    }
    interface ISyntheseCreditExterneComplet extends IElementComplet {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Lbface_LiblLibrSurConcr
         */
        libelleLibrSurConcr: string;
        /**
         * Mkface_MtCapt
         */
        montantCapital: number;
        /**
         * Npface_DureAmrtMois
         */
        dureAmortissementMois: number;
        /**
         * Meface_MtEcheAmrt
         */
        montantEcheanceAmortissement: number;
        /**
         * Npfwdd_DureDiffMois
         */
        dureDiffereMois: number;
        /**
         * Mefadi_MtecheDiff
         */
        mtecheDiffere: number;
        /**
         * Echeances
         */
        echeances: Array<IGraphEch>;
    }
    interface ITuteurComplet extends IElementComplet {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Lbfpci_LiblTitrCivl
         */
        libelleTitreCivilite: string;
        /**
         * Lbfppn_Prnm
         */
        prenom: string;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Lbfpnj_NomJeunFill
         */
        nomJeunFill: string;
        /**
         * Lbfpnm_NomRaisonSociale
         */
        nomRaisonSociale: string;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNais: string;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * IdntActv
         */
        idActivite: string;
        /**
         * IdntIntdBanc
         */
        idIntdBancaire: string;
        /**
         * ListIdntOpps
         */
        listeIdOpps: Array<string>;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * IdntPersPhys
         */
        idPersonnePhys: string;
    }
    interface IChargeComplet extends IElementComplet {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfpao_CodeExstCharApreOper
         */
        codeExisteCharApreOper: number;
        /**
         * Lbfpch_LiblCharge
         */
        libelleCharge: string;
        /**
         * LibelleCodeExstCharApreOper
         */
        libelleCodeExisteCharApreOper: string;
        /**
         * Txfmrc_TxPondChrg
         */
        tauxPondereCharge: number;
        /**
         * IdntGrpeIntv
         */
        idGrpeIntervenant: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
    }
    interface IRessourceComplet extends IElementComplet {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfpao_CodeExstRessApreOper
         */
        codeExisteRessourceApreOper: number;
        /**
         * Lbfpre_LiblRessource
         */
        libelleRessource: string;
        /**
         * LibelleCodeExstCharApreOper
         */
        libelleCodeExisteCharApreOper: string;
        /**
         * Txfmrc_TxPondRess
         */
        tauxPondereRessource: number;
        /**
         * IdntGrpeIntv
         */
        idGrpeIntervenant: string;
        /**
         * IdntPers
         */
        idPersonne: string;
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Mtfpre_MtRess
         */
        montantRessource: number;
        /**
         * Npfpre_NbPerdParAn
         */
        nombrePeriodeParAn: number;
    }
    interface IResultatControle {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Messages
         */
        messages: Array<string>;
    }
    interface ICreditBonificationComplet extends IElementComplet {
        /**
         * Llfcco_LibLongConv
         */
        libelleLongConvention: string;
        /**
         * Mefdbc_MontantEtablissement
         */
        montantEtablissement: number;
        /**
         * Mefdbr_MontantPartenaire
         */
        montantPartenaire: number;
        /**
         * IdentifiantConvention
         */
        identifiantConvention: string;
    }
    interface IBatimentHabitableFinanceComplet extends IElementComplet {
        /**
         * Dtfoco_DateConstBatmHabt
         * Type date au format yyyy-MM-dd
         */
        dateConstructionBatimentHabitation: string;
        /**
         * Mtfcfn_MtFrsNegc
         */
        montantFrsNegocie: number;
        /**
         * Mtfcmf_MtMobilierFinancable
         */
        montantMobilierFinancable: number;
        /**
         * Mtfotv_MtTvaFinnARemb
         */
        montantTVAFinancierARemboursement: number;
        /**
         * Nbfosh_SurfHabtCreeParConst
         */
        surfHabitationCreeParConstruction: number;
        /**
         * Mtfoac_CoutAcqsBatmHabt
         */
        coutAcqsBatimentHabitation: number;
    }
    interface ISyntheseCreditInterneComplet extends IElementComplet {
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * MontantCapital
         */
        montantCapital: number;
        /**
         * CoutTotal
         */
        coutTotal: number;
        /**
         * Cdfcfc_CodeFamlContRegl
         */
        codeFamilleContratRegle: string;
        /**
         * TegModeRestitution
         */
        tegModeRestitution: number;
        /**
         * TegActu
         */
        tegActu: number;
        /**
         * TegProp
         */
        tegProp: number;
        /**
         * SynthesePhaseComplets
         */
        synthesePhaseComplets: Array<ISynthesePhaseComplet>;
        /**
         * Echeances
         */
        echeances: Array<IGraphEch>;
        /**
         * SyntheseEcheancesJustifieesAssocieesComplet
         */
        syntheseEcheancesJustifieesAssocieesComplet: ISyntheseEcheancesJustifieesAssocieesComplet;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Txfamc_TxMontage
         */
        tauxMontage: number;
        /**
         * ExisteAssuranceSurCRD
         */
        existeAssuranceSurCRD: boolean;
        /**
         * EstLissage
         */
        estLissage: boolean;
        /**
         * EstRelais
         */
        estRelais: boolean;
    }
    interface ICompteDepotComplet extends ICompteComplet {
        /**
         * Cdfmce_CodeProduitCE
         */
        codeProduitCE: number;
        /**
         * Lbfmet_LiblEnttTitl
         */
        libelleEntiteTitulaire: string;
    }
    interface IFormulePaiementComplet extends IElementComplet {
        /**
         * Idfcct_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Cdfdrg_ModeReglUtlsParPayr
         */
        modeRegleUtilisationParPayr: string;
        /**
         * Llmreg_LibModRegl
         */
        libelleModRegle: string;
        /**
         * Idfdma_RefeUnqMand
         */
        referenceUniqueMand: string;
        /**
         * Bic
         */
        bic: string;
        /**
         * Iban
         */
        iban: string;
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
        /**
         * Dgfdma_DateSignMand
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSigneMand: string;
        /**
         * MandatIban
         */
        mandatIban: boolean;
        /**
         * Editable
         */
        editable: boolean;
        /**
         * Cdfadv_CodeDevise
         */
        codeDevise: string;
        /**
         * DomiciliationTresorCompte
         */
        domiciliationTresorCompte: string;
        /**
         * DureeCredit
         */
        dureeCredit: number;
        /**
         * Mtfaoc_MontantCapital
         */
        montantCapital: number;
        /**
         * EstSecours
         */
        estSecours: boolean;
    }
    interface IDebiteurComplet extends IElementComplet {
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Usage
         */
        usage: number;
        /**
         * IdPayeur
         */
        idPayeur: string;
        /**
         * ListeFormulePaiement
         */
        listeFormulePaiement: Array<IFormulePaiementComplet>;
    }
    interface IGarantComplet extends IElementComplet {
        /**
         * Ctfmfc_CodeTypeFctCpteDepoCeRecent
         */
        codeTypeFctCompteDepoCERecent: number;
        /**
         * Lbfmgp_NomGrpe
         */
        nomGrpe: string;
        /**
         * LibelleFctCpteDepoCeRecent
         */
        libelleFctCompteDepoCERecent: string;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmep_MtPartEprgLgmt
         */
        montantPartEpargneLgmt: number;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * PresenceCompteDepotCeRecent
         */
        presenceCompteDepotCERecent: boolean;
        /**
         * TotalEpargneContractuelle
         */
        totalEpargneContractuelle: number;
        /**
         * TotalEpargneLiquide
         */
        totalEpargneLiquide: number;
        /**
         * ListCharges
         */
        listeCharges: Array<IChargeComplet>;
        /**
         * ListComptes
         */
        listeComptes: Array<ICompteComplet>;
        /**
         * ListFamillesEpargneComplet
         */
        listeFamillesEpargneComplet: Array<IFamilleEpargneComplet>;
        /**
         * ListPersonnes
         */
        listePersonnes: Array<IPersonneComplet>;
        /**
         * ListRessources
         */
        listeRessources: Array<IRessourceComplet>;
    }
    interface IAvisOrganismeExterneComplet extends IElementComplet {
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateAvis: string;
        /**
         * Nufpt2_NumeFaxInstr
         */
        numeroFaxInstruction: string;
    }
    interface IPlanFinancementComplet extends IElementComplet {
        /**
         * CalcAFaire
         */
        calculAFaire: boolean;
        /**
         * Cdfazc_CodeProduitAtoutClic
         */
        codeProduitAtoutClic: string;
        /**
         * Cifocs_CoutObjtSaisCalcEnvl
         */
        coutObjetSaisieCalculEnvl: boolean;
        /**
         * DureePlanGLobale
         */
        dureePlanGLobale: number;
        /**
         * Lbfcor_LibelleLong
         */
        libelleLong: string;
        /**
         * Lbfomo_LibelleMeta
         */
        libelleMeta: string;
        /**
         * Lbni_LibelleLong
         */
        libelleLong1: string;
        /**
         * LoanToValue
         */
        loanToValue: number;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * Mtfarf_MtRestFinn
         */
        montantRestantFinancier: number;
        /**
         * MtMensualiteAvecAssurance
         */
        montantMensualiteAvecAssurance: number;
        /**
         * PresenceLissage
         */
        presenceLissage: boolean;
        /**
         * MontantAtoutClic
         */
        montantAtoutClic: number;
        /**
         * TauxApportPersonnel
         */
        tauxApportPersonnel: number;
        /**
         * IdwsSynthesePlanFinancement
         */
        idwsSynthesePlanFinancement: string;
        /**
         * ListAccessoiresComplementaires
         */
        listeAccessoiresComplementaires: Array<IAccessoireComplementaireComplet>;
        /**
         * ListAccessoiresLiesProduit
         */
        listeAccessoiresLiesProduit: Array<IAccessoireLieProduitComplet>;
        /**
         * ListAssurances
         */
        listeAssurances: Array<IAssuranceComplet>;
        /**
         * ListCreditsExternes
         */
        listeCreditsExternes: Array<ICreditExterneComplet>;
        /**
         * ListCreditsInternes
         */
        listeCreditsInternes: Array<ICreditInterneComplet>;
        /**
         * ListeCreditComplementaires
         */
        listeCreditComplementaires: Array<ICreditExistantComplet>;
        /**
         * ListeCreditsExistantsPourLissage
         */
        listeCreditsExistantsPourLissage: Array<ICreditExistantComplet>;
        /**
         * ListGaranties
         */
        listeGaranties: Array<IGarantieComplet>;
        /**
         * Controles
         */
        controles: Array<IControleIhm>;
        /**
         * Mtfaap_MtApprPers
         */
        montantApportPersonne: number;
        /**
         * Mtfaso_MtTotlEmprPlan
         */
        montantTotalEmpruntPlan: number;
        /**
         * MultiDevise
         */
        multiDevise: boolean;
        /**
         * MontantFraisHorsGarantiesAssurances
         */
        montantFraisHorsGarantiesAssurances: number;
        /**
         * Ntfmba_NotifEngagementBale2
         */
        notifEngagementBale2: string;
        /**
         * LoanToValueMax
         */
        loanToValueMax: number;
    }
    interface IGestionAdministrativeComplet extends IElementComplet {
        /**
         * Cdfafc_CodeAuthCont
         */
        codeAuthentiqueContrat: boolean;
        /**
         * Cdfbve_ModeReglementVersement
         */
        modeReglementVersement: string;
        /**
         * Cdfdrg_ModeReglementSecours
         */
        modeReglementSecours: string;
        /**
         * Cifpcd_OuvCpteSupEchCred
         */
        ouvertureCompteSupEchCredit: boolean;
        /**
         * Controles
         */
        controles: Array<IControleIhm>;
        /**
         * Ctfals_TypeLoiScrv
         */
        typeLoiScrivener: number;
        /**
         * Ctfctd_CodeTypeDomRegSecours
         */
        codeTypeDomRegSecours: string;
        /**
         * Ctfctd_CodeTypeDomRegSecoursEnDevise
         */
        codeTypeDomRegSecoursEnDevise: string;
        /**
         * Ctfctd_CodeTypeDomVersement
         */
        codeTypeDomVersement: string;
        /**
         * Ctfctd_CodeTypeDomVersementEnDevise
         */
        codeTypeDomVersementEnDevise: string;
        /**
         * LibelleTypeLoiScrv
         */
        libelleTypeLoiScrivener: string;
        /**
         * Llmreg_LibelleModeRegSecours
         */
        libelleModeRegSecours: string;
        /**
         * Llmreg_LibelleModeRegSecoursEnDevise
         */
        libelleModeRegSecoursEnDevise: string;
        /**
         * Llmreg_LibelleModeVersement
         */
        libelleModeVersement: string;
        /**
         * Llmreg_LibelleModeVersementEnDevise
         */
        libelleModeVersementEnDevise: string;
        /**
         * Mtfcon_MontantConvenu
         */
        montantConvenu: number;
        /**
         * Nufpr1_NumeCpteSecoPrel
         */
        numeroCompteSecoPrel: string;
        /**
         * NumeroComptePayeurSecours
         */
        numeroComptePayeurSecours: string;
        /**
         * NumeroComptePayeurSecoursEnDevise
         */
        numeroComptePayeurSecoursEnDevise: string;
        /**
         * NumeroCompteVersement
         */
        numeroCompteVersement: string;
        /**
         * NumeroCompteVersementEnDevise
         */
        numeroCompteVersementEnDevise: string;
        /**
         * EstCopro100
         */
        estCopro100: boolean;
        /**
         * ListAssurances
         */
        listeAssurances: Array<IAssuranceComplet>;
        /**
         * ListCreditsInternes
         */
        listeCreditsInternes: Array<ICreditInterneComplet>;
        /**
         * ListGaranties
         */
        listeGaranties: Array<IGarantieComplet>;
        /**
         * ListPersonnes
         */
        listePersonnes: Array<IPersonneComplet>;
    }
    interface IEntiteExterneCreditComplet extends IElementComplet {
        /**
         * Idfaie_IdEntiteExterneCredit
         */
        idEntiteExterneCredit: string;
    }
    interface IParametreFonctionnelComplet extends IElementComplet {
        /**
         * CodeParametre
         */
        codeParametre: string;
        /**
         * Actif
         */
        actif: boolean;
        /**
         * IdntObjtConcerne
         */
        idObjetConcerne: string;
    }
    interface IEndettementComplet extends IElementComplet {
        /**
         * MtRessources
         */
        montantRessources: number;
        /**
         * MtRessourcesAvecApl
         */
        montantRessourcesAvecAPL: number;
        /**
         * MtCharges
         */
        montantCharges: number;
        /**
         * MtChargesAvecApl
         */
        montantChargesAvecAPL: number;
        /**
         * TxEndettement
         */
        tauxEndettement: number;
        /**
         * TxEndettementAvecApl
         */
        tauxEndettementAvecAPL: number;
        /**
         * MntResteAVivre
         */
        mntResteAVivre: number;
        /**
         * MntResteAVivreParPersonne
         */
        mntResteAVivreParPersonne: number;
        /**
         * IndicResteAVivre
         */
        indiceResteAVivre: number;
        /**
         * IndicResteAVivreAvecApl
         */
        indiceResteAVivreAvecAPL: number;
        /**
         * MtEchConcoursInt
         */
        montantEchConcoursIntitule: number;
        /**
         * MtEchConcoursExt
         */
        montantEchConcoursExterieur: number;
        /**
         * MntResteAVivreAvecApl
         */
        mntResteAVivreAvecAPL: number;
        /**
         * MntRAVAvecAplParPersonne
         */
        mntRAVAvecAPLParPersonne: number;
        /**
         * DebtToIncome
         */
        debutToIncome: number;
        /**
         * Mpfprr_SeuilMinimumRAV
         */
        seuilMinimumRAV: number;
        /**
         * Txftpa_TauxEndettementMax
         */
        tauxEndettementMaximum: number;
    }
    interface ICreditHistogramme {
        /**
         * Idws
         */
        idws: string;
        /**
         * Type
         */
        type: number;
        /**
         * Libelle
         */
        libelle: string;
        /**
         * Montant
         */
        montant: number;
        /**
         * CodeDevise
         */
        codeDevise: string;
        /**
         * Taux
         */
        taux: number;
        /**
         * LibelleEtabPret
         */
        libelleEtabPret: string;
    }
    interface IHistogrammeCredits {
        /**
         * DateEcheance
         * Type date au format yyyy-MM-dd
         */
        dateEcheance: string;
        /**
         * MontantTotalCharges
         */
        montantTotalCharges: number;
        /**
         * Devise
         */
        devise: string;
        /**
         * ListeCredits
         */
        listeCredits: Array<ICreditHistogramme>;
    }
    interface IEligibiliteFicpFccComplet extends IElementComplet {
        /**
         * EligibiliteFicp
         */
        eligibiliteFicp: number;
        /**
         * EligibiliteFcc
         */
        eligibiliteFcc: number;
        /**
         * InterroFicpAJour
         */
        interroFicpAJour: boolean;
        /**
         * InterroFccAJour
         */
        interroFccAJour: boolean;
    }
    interface ICreditInterneComplet extends IElementComplet {
        /**
         * Ccfarc_CodeIndicCalcAFaire
         */
        codeIndiceCalculAFaire: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfbje_CodeIndicExstPiecJustPourDeclechlVerst
         */
        codeIndiceExistePieceJustificatifPourDeclechlVersement: number;
        /**
         * Cdfbju_CodeTypeRattJustDecl
         */
        codeTypeRattachementJustificatifDeclaration: number;
        /**
         * Cifaio_CodeIndicOptmImps
         */
        codeIndiceOptimisationImps: number;
        /**
         * CoutMoyenAssurance
         */
        coutMoyenAssurance: number;
        /**
         * Dhfacj_QuantEche
         */
        jourDateEcheance: number;
        /**
         * Controles
         */
        controles: Array<IControleIhm>;
        /**
         * Idfcct_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * IndicEvltTxConsPond
         */
        indiceEvolutionTauxConsolidePondere: number;
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Lbfech_LibelleEchelle
         */
        libelleEchelle: string;
        /**
         * LibelleTegModeRestitution
         */
        libelletegModeRestitution: string;
        /**
         * ListCdfcngNatrGarn
         */
        listeCdfcngNatureGarantie: Array<string>;
        /**
         * ListIdntPhas
         */
        listeIdPhase: Array<string>;
        /**
         * Mcfafd_CoutTotlFrsDossAsscCred
         */
        coutTotalFrsDossierAssuranceCredit: number;
        /**
         * Mcfgfr_CoutTotlFrsGarnAsscCred
         */
        coutTotalFrsGarantieAssuranceCredit: number;
        /**
         * Mcfaia_MtTotlAssrPerd
         */
        montantTotalAssurancePeriode: number;
        /**
         * Mefacc_MtPrmeEcheAssr
         */
        montantPrmeEcheanceAssurance: number;
        /**
         * Mefape_MtPrmeEcheHorsAccsCred
         */
        montantPrmeEcheanceHorsAccessoireCredit: number;
        /**
         * Mtfcve_MtMiniVerst
         */
        montantMinimumVersement: number;
        /**
         * MontantEcheance
         */
        montantEcheance: number;
        /**
         * Npfcfi_NbPerdCred
         */
        nombrePeriodeCredit: number;
        /**
         * Nofech_NumeEchlVerst
         */
        numeroEchelleVersement: number;
        /**
         * Pefcfi_CodePerdCred
         */
        codePeriodeCredit: number;
        /**
         * Ptfcin_CodePerdAsscCalcInte
         */
        codePeriodiciteAssocieCalculInteret: number;
        /**
         * TauxAffiche
         */
        tauxAffiche: number;
        /**
         * TauxAnnuelEffectifGlobal
         */
        tauxAnnuelEffectifGlobal: number;
        /**
         * TauxUsure
         */
        tauxUsure: number;
        /**
         * TegModeRestitution
         */
        tegModeRestitution: number;
        /**
         * Txfasr_TxNegcSurcRembAntc
         */
        tauxNegocieSurcRemboursementAnticipe: number;
        /**
         * Txfcmg_MargeTauxFutur
         */
        margeTauxFutur: number;
        /**
         * Cdfcie_CodeIndicelgbAuprInstemss
         */
        codeIndicelgbAuprInstemss: number;
        /**
         * LibelleIndicelgbAuprInstemss
         */
        libelleIndicelgbAuprInstemss: string;
        /**
         * ProduitFinancierComplet
         */
        produitFinancierComplet: IProduitFinancierComplet;
        /**
         * CreditModaliteComplet
         */
        creditModaliteComplet: ICreditModaliteComplet;
        /**
         * CreditBonificationComplet
         */
        creditBonificationComplet: ICreditBonificationComplet;
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
        /**
         * EstBonifiableFlat
         */
        estBonifiableFlat: boolean;
        /**
         * ExistePhasePF
         */
        existePhasePF: boolean;
        /**
         * ExistePhaseAM
         */
        existePhaseAM: boolean;
        /**
         * Txfamc_TxMontage
         */
        tauxMontage: number;
        /**
         * MontantMaxPretPVH
         */
        montantMaximumPretPVH: number;
        /**
         * Mcface_MtCredEuro
         */
        montantCreditEuro: number;
        /**
         * EstAjustable
         */
        estAjustable: boolean;
        /**
         * Cdfdae_CodeIndicEnvAvisEche
         */
        codeIndiceEnvoiAvisEcheance: number;
        /**
         * Ctfind_PrecisionTaux
         */
        precisionTaux: number;
        /**
         * ListPayeurs
         */
        listePayeurs: Array<IPayeurComplet>;
        /**
         * ListSuivisPlanifies
         */
        listeSuivisPlanifies: Array<ISuiviPlanifieComplet>;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
    }
    interface IDossierComplet extends IElementComplet {
        /**
         * Cifapp_CodePrscDossPres
         */
        codePrscDossierPres: number;
        /**
         * Cdfiag_CodeAppliChrgDoss
         */
        codeApplicationChargeDossier: number;
        /**
         * Ctfipi_CodePrcsInstr
         */
        codeProcessusInstruction: string;
        /**
         * Ctfitr_CodeTrtComp
         */
        codeTraitementComp: string;
        /**
         * EstDossierDefi
         */
        estDossierDefi: boolean;
        /**
         * Idfaac_IdntDossGest
         */
        idDossierGestion: string;
        /**
         * Lbfaem_Denomination
         */
        denomination: string;
        /**
         * ListIdws
         */
        listeIdws: Array<string>;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * NatureProjet
         */
        natureProjet: number;
        /**
         * PresEmprunteur
         */
        presEmprunteur: boolean;
        /**
         * PresencePATZPlanRetenu
         */
        presencePATZPlanRetenu: boolean;
        /**
         * Cifcgd_CodeActivationGestionDevises
         */
        activationGestionDevises: boolean;
        /**
         * CodeEtapeSimulation
         */
        codeEtapeSimulation: number;
        /**
         * Idfast_EntiteInstructeur
         */
        entiteInstructeur: string;
        /**
         * Cifocs_CoutObjtSaisCalcEnvl
         */
        coutObjetSaisieCalculEnvl: boolean;
        /**
         * PresenceRefusAssuranceEdite
         */
        presenceRefusAssuranceEdite: boolean;
        /**
         * DevisEcoPTZExiste
         */
        devisEcoPTZExiste: boolean;
        /**
         * CreationDossierSGFGASPossible
         */
        creationDossierSGFGASPossible: boolean;
        /**
         * PresenceNotesDossier
         */
        presenceNotesDossier: boolean;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cefado_SousEtatDoss
         */
        sousEtatDossier: number;
        /**
         * Ctfado_EtatDoss
         */
        etatDossier: number;
    }
    interface IContratComplet extends IElementComplet {
        /**
         * CalculBonificationRequise
         */
        calculBonificationRequise: boolean;
        /**
         * Cdfcsg_TypeSignature
         */
        typeSignature: number;
        /**
         * Ctfals_TypeLoiScrv
         */
        typeLoiScrivener: number;
        /**
         * Ctfaen_CodeTypeEngg
         */
        codeTypeEngagement: string;
        /**
         * Dtfieo_DateEdtnOffr
         * Type date au format yyyy-MM-dd
         */
        dateEditionOffre: string;
        /**
         * IdentifiantEtatDossier
         */
        identifiantEtatDossier: string;
        /**
         * EtatDossierEditionIndustrialisee
         */
        etatDossierEditionIndustrialisee: string;
        /**
         * LibelleTypeLoiScrv
         */
        libelleTypeLoiScrivener: string;
        /**
         * NumeroOffre
         */
        numeroOffre: number;
        /**
         * LibelleAutorisationEdition
         */
        libelleAutorisationEdition: string;
        /**
         * ClausesPersonnalisees
         */
        clausesPersonnalisees: IClausesPersonnaliseesComplet;
        /**
         * ListCreditsInternes
         */
        listeCreditsInternes: Array<ICreditInterneComplet>;
        /**
         * Signataires
         */
        signataires: ISignatairesComplet;
        /**
         * Projet
         */
        projet: IProjetComplet;
        /**
         * DebiteurComplets
         */
        debiteurComplets: Array<IDebiteurComplet>;
        /**
         * Interventants
         */
        interventants: Array<IIntervenantComplet>;
        /**
         * DelaiValiditeProposition
         */
        delaiValiditeProposition: number;
        /**
         * DateRemiseOffre
         * Type date au format yyyy-MM-dd
         */
        dateRemiseOffre: string;
    }
    interface ISynthesePlanFinancementComplet extends IElementComplet {
        /**
         * Ctfals_TypeLoiScrv
         */
        typeLoiScrivener: number;
        /**
         * LibelleAcquisition
         */
        libelleAcquisition: string;
        /**
         * Mcfoof_CoutTotalTTC
         */
        coutTotalTTC: number;
        /**
         * Mcfafd_CoutTotalFraisDossier
         */
        coutTotalFraisDossier: number;
        /**
         * Mcfacf_CoutTotalFraisCourtage
         */
        coutTotalFraisCourtage: number;
        /**
         * Mcfgfr_CoutTotalFraisGarantie
         */
        coutTotalFraisGarantie: number;
        /**
         * MontantTotalOperation
         */
        montantTotalOperation: number;
        /**
         * Mtfaap_MtApportPersonnel
         */
        montantApportPersonnel: number;
        /**
         * nMkface_MtConcoursExternes
         */
        mkface_MontantConcoursExternes: number;
        /**
         * nMtfaso_MtConcoursInternes
         */
        mtfaso_MontantConcoursInternes: number;
        /**
         * DureePlanGlobale
         */
        dureePlanGlobale: number;
        /**
         * MtMensualiteAvecAssurance
         */
        montantMensualiteAvecAssurance: number;
        /**
         * MtPremiereMensualiteAvecAssurance
         */
        montantPremiereMensualiteAvecAssurance: number;
        /**
         * MtMensualiteHorsAssurances
         */
        montantMensualiteHorsAssurances: number;
        /**
         * CoutTotalCreditsInternes
         */
        coutTotalCreditsInternes: number;
        /**
         * TxEndettement
         */
        tauxEndettement: number;
        /**
         * MntResteAVivre
         */
        mntResteAVivre: number;
        /**
         * CoutTotalHorsAccessoires
         */
        coutTotalHorsAccessoires: number;
        /**
         * CoutTotalAssurance
         */
        coutTotalAssurance: number;
        /**
         * MontantFraisDivers
         */
        montantFraisDivers: number;
        /**
         * MontantBienFinance
         */
        montantBienFinance: number;
        /**
         * MontantFraisNotaire
         */
        montantFraisNotaire: number;
        /**
         * MtRessourcesAvecApl
         */
        montantRessourcesAvecAPL: number;
        /**
         * MtChargesAvecApl
         */
        montantChargesAvecAPL: number;
        /**
         * MtChargesOctroiAvecApl
         */
        montantChargesOctroiAvecAPL: number;
        /**
         * TxEndettementAvecApl
         */
        tauxEndettementAvecAPL: number;
        /**
         * MntResteAVivreAvecApl
         */
        mntResteAVivreAvecAPL: number;
        /**
         * DebtToIncome
         */
        debutToIncome: number;
        /**
         * LoanToValue
         */
        loanToValue: number;
        /**
         * TauxApportPersonnel
         */
        tauxApportPersonnel: number;
        /**
         * Mtfiba_MtApl
         */
        montantAPL: number;
        /**
         * MtMensualiteNet
         */
        montantMensualiteNet: number;
        /**
         * SyntheseCreditInterneComplets
         */
        syntheseCreditInterneComplets: Array<ISyntheseCreditInterneComplet>;
        /**
         * SyntheseCreditExterneComplets
         */
        syntheseCreditExterneComplets: Array<ISyntheseCreditExterneComplet>;
        /**
         * AccordDePrincipe
         */
        accordDePrincipe: number;
        /**
         * ListResultatControle
         */
        listeResultatControle: Array<IResultatControle>;
        /**
         * HistogrammeCredits
         */
        histogrammeCredits: IHistogrammeCredits;
    }
    interface ICouvertureCreditComplet {
        /**
         * Cdfadv_CodeDevsCred
         */
        codeDeviseCredit: string;
        /**
         * IdwsCreditInterne
         */
        idwsCreditInterne: string;
        /**
         * Lbfcvs_LiblLongPrdt
         */
        libelleLongProduit: string;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
        /**
         * Mtfgfr_MontantFraisGarantie
         */
        montantFraisGarantie: number;
        /**
         * Npfcfi_NbPerdCred
         */
        nombrePeriodeCredit: number;
        /**
         * Pefcfi_CodePerdCred
         */
        codePeriodeCredit: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: IMontantComplet;
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: ITauxComplet;
        /**
         * Mtfiae_CoutAssExt8Ans
         */
        coutAssuranceExterieur8Ans: number;
        /**
         * Mcfiae_CoutTotAssExt
         */
        coutTotalAssuranceExterieur: number;
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
    }
    interface IPersonnePhysiqueComplet extends IPersonneComplet {
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Ctfpse_CodeSexePers
         */
        codeSexePersonne: number;
        /**
         * Dtfpna_DateNais
         * Type date au format yyyy-MM-dd
         */
        dateNais: string;
        /**
         * EstEntrepreneurIndividuel
         */
        estEntrepreneurIndividuel: boolean;
        /**
         * Lbfpci_LiblTitrCivl
         */
        libelleTitreCivilite: string;
        /**
         * Lbfpnj_NomJeunFill
         */
        nomJeunFill: string;
        /**
         * Lbfppn_Prnm
         */
        prenom: string;
        /**
         * Llfco1_LibelleTypeLien
         */
        libelleTypeLien: string;
        /**
         * Lbfpsf_LibelleSittFaml
         */
        libelleSituationFamille: string;
        /**
         * Lbfprm_LbRegMat
         */
        libelleRegMat: string;
        /**
         * Cdfmsa_CodePresActvSalr
         */
        codePresActiviteSalr: number;
        /**
         * Lbfmfc_LiblCatSocioPro
         */
        libelleCatSocioPro: string;
        /**
         * InterditBancaire
         */
        interditBancaire: IInterditBancaireComplet;
        /**
         * ListOpposition
         */
        listeOpposition: Array<IOppositionComplet>;
        /**
         * ListRoles
         */
        listeRoles: Array<IRoleComplet>;
        /**
         * EntrepreneurIndividuel
         */
        entrepreneurIndividuel: IEntrepreneurIndividuelComplet;
        /**
         * Signataire
         */
        signataire: ISignataireComplet;
        /**
         * EligibiliteFicpFcc
         */
        eligibiliteFicpFcc: IEligibiliteFicpFccComplet;
        /**
         * IdntActv
         */
        idActivite: string;
    }
    interface IEmprunteurComplet extends IElementComplet {
        /**
         * Cdfadv_CodeDeviseEmprunteur
         */
        codeDeviseEmprunteur: string;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cdfcke_CodeCateEmpr
         */
        codeCateEmprunt: string;
        /**
         * Cdfwsl_StttOccpLogmActl
         */
        stttOccpLogementActuariel: number;
        /**
         * Cofopz_CodeCondDergPourPtz
         */
        codeConditionDerogationPourPtz: number;
        /**
         * Ctfmfc_CodeTypeFctCpteDepoCeRecent
         */
        codeTypeFctCompteDepoCERecent: number;
        /**
         * Idfaep_IdntEnttTitlClnt
         */
        idEntiteTitulaireClient: string;
        /**
         * Lbfaem_DenmEmpr
         */
        denmEmprunt: string;
        /**
         * Lbfcke_LiblCateEmpr
         */
        libelleCateEmprunt: string;
        /**
         * LibelleCondDergPourPtz
         */
        libelleConditionDerogationPourPtz: string;
        /**
         * LibelleFctCpteDepoCeRecent
         */
        libelleFctCompteDepoCERecent: string;
        /**
         * LibelleStttOccpLogmActl
         */
        libelleStttOccpLogementActuariel: string;
        /**
         * Lbfmae_ListAgesEnfants
         */
        listeAgesEnfants: Array<number>;
        /**
         * MntMaxAutoriseCEL
         */
        mntMaximumAutoriseCEL: number;
        /**
         * MntMaxAutorisePEL
         */
        mntMaximumAutorisePEL: number;
        /**
         * MntMaxAutorisePELCEL
         */
        mntMaximumAutorisePELCEL: number;
        /**
         * Mtfmcv_CapceprgAvntOper
         */
        capceprgAvenantOper: number;
        /**
         * Mtfmep_MtPartEprgLgmt
         */
        montantPartEpargneLgmt: number;
        /**
         * Mtfmpa_MtPtrmMobl
         */
        montantPatrimoineMobl: number;
        /**
         * Mtfmvp_ValrPtrmImmb
         */
        valeurPatrimoineImmobilier: number;
        /**
         * Mtftlh_EncoursLivretsAutresEtabs
         */
        encoursLivretsAutresEtabs: number;
        /**
         * Mtftli_EncoursPretsIssusLEL
         */
        encoursPretsIssusLEL: number;
        /**
         * Mtftph_EncoursPlansAutresEtabs
         */
        encoursPlansAutresEtabs: number;
        /**
         * Mtftpl_EncoursPretsIssusPEL
         */
        encoursPretsIssusPEL: number;
        /**
         * Nbfmec_NbEnfnChrg
         */
        nombreEnfantCharge: number;
        /**
         * Nbfmps_NbPersSuppChrg
         */
        nombrePersonneSuppCharge: number;
        /**
         * Nbfpnp_NbPersCmpstMeng
         */
        nombrePersonneCmpstMeng: number;
        /**
         * PlafondMaxCEL
         */
        plafondMaximumCEL: number;
        /**
         * PlafondMaxPEL
         */
        plafondMaximumPEL: number;
        /**
         * PlafondMaxPELCEL
         */
        plafondMaximumPELCEL: number;
        /**
         * PresenceCompteDepotCeRecent
         */
        presenceCompteDepotCERecent: boolean;
        /**
         * TotalEpargneContractuelle
         */
        totalEpargneContractuelle: number;
        /**
         * TotalEpargneLiquide
         */
        totalEpargneLiquide: number;
        /**
         * SaisiPrimoAccedantObligatoire
         */
        saisiPrimoAccedantObligatoire: boolean;
        /**
         * ListCharges
         */
        listeCharges: Array<IChargeComplet>;
        /**
         * ListComptes
         */
        listeComptes: Array<ICompteComplet>;
        /**
         * ListContratsEpargneLogement
         */
        listeContratsEpargneLogement: Array<IContratEpargneLogementComplet>;
        /**
         * ListFamillesEpargneComplet
         */
        listeFamillesEpargneComplet: Array<IFamilleEpargneComplet>;
        /**
         * ListPatrimoinesImmo
         */
        listePatrimoinesImmobilier: Array<IPatrimoineImmobilierComplet>;
        /**
         * ListPersonnes
         */
        listePersonnes: Array<IPersonneComplet>;
        /**
         * ListRessources
         */
        listeRessources: Array<IRessourceComplet>;
        /**
         * ListRevenusFiscaux
         */
        listeRevenusFiscaux: Array<IRevenuFiscalComplet>;
        /**
         * HistogrammeCredits
         */
        histogrammeCredits: IHistogrammeCredits;
    }
    interface ICreditExistantComplet extends IChargeComplet {
        /**
         * Ctfmtc_CodeTypeCred
         */
        codeTypeCredit: number;
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Lbfmet_LiblEnttTitlCe
         */
        libelleEntiteTitulaireCE: string;
        /**
         * LibelleCodeTypeCred
         */
        libelleCodeTypeCredit: string;
        /**
         * Mefmpe_MtPrcheche
         */
        montantPrcheche: number;
        /**
         * Mkfmpc_MtCaptDejaRemb
         */
        montantCapitalDejaRemboursement: number;
        /**
         * Npfmam_DureAmrt
         */
        dureAmortissement: number;
        /**
         * TauxCalcule
         */
        tauxCalcule: number;
        /**
         * MontantDateDuJour
         */
        montantDateDuJour: number;
        /**
         * Ptfmam_PerdAmrt
         */
        periodeAmortissement: number;
        /**
         * ListPhasesCreditExistant
         */
        listePhasesCreditExistant: Array<IPhaseCreditExistantComplet>;
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
    }
    interface IInformationsComplementairesSCIComplet extends IElementComplet {
        /**
         * ObjetSocialDedieAcqBienFin
         */
        objetSocialDedieAcqBienFin: boolean;
        /**
         * BienOccupeTitreGratuit
         */
        bienOccupeTitreGratuit: boolean;
        /**
         * ChoixVolontaireLoiImmo
         */
        choixVolontaireLoiImmo: boolean;
    }
    interface ISuiviEditionComplet extends IElementComplet {
        /**
         * SuiviDocuments
         */
        suiviDocuments: Array<ISuiviDocumentComplet>;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
    }
    interface IAccessoireComplet extends IElementComplet {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Cdfpim_CodeBeneficiaire
         */
        codeBeneficiaire: string;
        /**
         * Controles
         */
        controles: Array<IControleIhm>;
        /**
         * Ctfcas_CodeTypeAssiette
         */
        codeTypeAssiette: number;
        /**
         * EstFinance
         */
        estFinance: boolean;
        /**
         * Lbfpne_LibelleBeneficiaire
         */
        libelleBeneficiaire: string;
        /**
         * LibelleTypeAssiette
         */
        libelleTypeAssiette: string;
        /**
         * ListMontantSouhaite
         */
        listeMontantsSouhaite: Array<number>;
        /**
         * ListTauxSouhaite
         */
        listeTauxSouhaite: Array<number>;
        /**
         * Obligatoire
         */
        obligatoire: boolean;
        /**
         * Montant
         */
        montant: number;
        /**
         * MontantConseille
         */
        montantConseille: number;
        /**
         * MontantSouhaite
         */
        montantSouhaite: number;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
        /**
         * Npfcfi_NbPerdCred
         */
        nombrePeriodeCredit: number;
        /**
         * Pefcfi_CodePerdCred
         */
        codePeriodeCredit: number;
        /**
         * TauxConseille
         */
        tauxConseille: number;
        /**
         * TauxSouhaite
         */
        tauxSouhaite: number;
        /**
         * Payabilite
         */
        payabilite: string;
        /**
         * Periodicite
         */
        periodicite: number;
        /**
         * NbPeriodes
         */
        nombrePeriodes: number;
        /**
         * Cnfcga_ModeDexp
         */
        modeDexp: number;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * SaisieMontantEtTaux
         */
        saisieMontantEtTaux: boolean;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * LibelleDecision
         */
        libelleDecision: string;
        /**
         * ListCouverturesCredits
         */
        listeCouverturesCredits: Array<ICouvertureCreditComplet>;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Transmis
         */
        transmis: boolean;
    }
    interface IAssuranceComplet extends IAccessoireComplet {
        /**
         * Lcfcaa_LibelleCourtTypeAssr
         */
        libelleCourtTypeAssurance: string;
        /**
         * LibelleEtatDossier
         */
        libelleEtatDossier: string;
        /**
         * Llfcco_LiblLongConv
         */
        libelleLongConvention: string;
        /**
         * LibCompAssr
         */
        libelleCompAssurance: string;
        /**
         * CodeDecision
         */
        codeDecision: number;
        /**
         * EstApe
         */
        estApe: boolean;
        /**
         * EstConfigurateurCnp
         */
        estConfigurateurCnp: boolean;
        /**
         * EstParcoursManuel
         */
        estParcoursManuel: boolean;
        /**
         * EstTarifDerogatoire
         */
        estTarifDerogatoire: boolean;
        /**
         * Idfaos_IdntConfOffrAssr
         */
        idConfOffreAssurance: string;
        /**
         * IndemniteJournaliereObligatoire
         */
        indemniteJournaliereObligatoire: boolean;
        /**
         * IndemniteJournaliere
         */
        indemniteJournaliere: IMontantComplet;
        /**
         * LibelleAssuranceExterne
         */
        libelleAssuranceExterne: string;
        /**
         * DernierAvisOrganismeExt
         */
        dernierAvisOrganismeExterieur: IAvisOrganismeExterneComplet;
        /**
         * Personne
         */
        personne: IPersonneComplet;
        /**
         * EstAssuranceCNP
         */
        estAssuranceCNP: boolean;
        /**
         * EstQSSaisi
         */
        estQSSaisi: boolean;
        /**
         * EstAssuranceCBP
         */
        estAssuranceCBP: boolean;
        /**
         * IdExterne
         */
        idExterne: string;
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface IGarantieComplet extends IAccessoireComplet {
        /**
         * Cdfaag_CodeFormActeAuth
         */
        codeFormeActeAuthentique: number;
        /**
         * Lbfcng_LibelleNatureGarantie
         */
        libelleNatureGarantie: string;
        /**
         * Lcfcni_LibelleCourt
         */
        libelleCourt: string;
        /**
         * LibelleGarant
         */
        libelleGarant: string;
        /**
         * Llfcco_LibelleConvention
         */
        libelleConvention: string;
        /**
         * MontantFraisGarantie
         */
        montantFraisGarantie: number;
        /**
         * EtatBoutonSaccef
         */
        etatBoutonSaccef: number;
        /**
         * EstComplete
         */
        estComplete: boolean;
        /**
         * CodeDecision
         */
        codeDecision: number;
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * Cdfcng_NatrGarn
         */
        natureGarantie: string;
        /**
         * EstCEGC
         */
        estCEGC: boolean;
    }
    interface IProjetImmobilierComplet extends IProjetComplet {
        /**
         * Cdfomo_OccupePar
         */
        occupePar: number;
        /**
         * Cdfose_CodeBatmBassConso
         */
        codeBatimentBassConsommation: number;
        /**
         * Cdfqem_QualEmplaProj
         */
        qualEmplaProjet: number;
        /**
         * Cifclh_EstLogmHLM
         */
        estLogementHLM: boolean;
        /**
         * Ctfacf_CadreFiscal
         */
        cadreFiscal: string;
        /**
         * Ctfcve_CodeTypeMarcPourVent
         */
        codeTypeMarchePourVent: number;
        /**
         * LibelleCadreFiscal
         */
        libelleCadreFiscal: string;
        /**
         * LibelleConsoEnergieBatiment
         */
        libelleConsoEnergieBatiment: string;
        /**
         * LibelleModeOccupation
         */
        libelleModeOccupation: string;
        /**
         * LibelleQualiteEmplacement
         */
        libelleQualiteEmplacement: string;
        /**
         * LibelleTypeMarcPourVent
         */
        libelleTypeMarchePourVent: string;
        /**
         * ListeIdws
         */
        listeIdws: Array<string>;
        /**
         * ZoneReglRobnBien
         */
        zoneRegleRobnBien: string;
        /**
         * Dtfipe_DateDPE
         * Type date au format yyyy-MM-dd
         */
        dateDPE: string;
        /**
         * SaisieDPEObligatoire
         */
        saisieDPEObligatoire: boolean;
        /**
         * Idfipe_IdntDPE
         */
        idDPE: string;
        /**
         * Ctfien_TypeLogmDPE
         */
        typeLogementDPE: number;
        /**
         * Cdfipf_CodeOrigDPE
         */
        codeOrigineDPE: string;
        /**
         * Qcfiep_CumlConsEnrgPrim
         */
        cumulConsoEnergiePrimaire: number;
        /**
         * Qcfigs_CumlEmisGazEfftSerr
         */
        cumulEmissionGazEffetSerre: number;
        /**
         * Idfibi_IdntBienImmb
         */
        idBienImmobilier: string;
        /**
         * BatimentHabitableFinanceComplet
         */
        batimentHabitableFinanceComplet: IBatimentHabitableFinanceComplet;
        /**
         * ConstructionFinanceeComplet
         */
        constructionFinanceeComplet: IConstructionFinanceeComplet;
        /**
         * TravauxFinancesComplet
         */
        travauxFinancesComplet: ITravauxFinancesComplet;
        /**
         * SoulteFinanceeComplet
         */
        soulteFinanceeComplet: ISoulteFinanceComplet;
        /**
         * TerrainFinanceComplet
         */
        terrainFinanceComplet: ITerrainFinanceComplet;
    }
    interface IProjetComplet extends IElementComplet {
        /**
         * DescriptionProjet
         */
        descriptionProjet: string;
        /**
         * Cdfcdo_CodeDestAutrParObjt
         */
        codeDestinataireAutreParObjet: number;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Cdfomp_CodeMiseOeuvrProjPro
         */
        codeMiseOeuvrProjetPro: number;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * Cdfwrl_PresBienAVend
         */
        presBienAVend: boolean;
        /**
         * Cifapp_CodePrscDossPres
         */
        codePrscDossierPres: number;
        /**
         * Cifocs_CoutObjtSaisCalcEnvl
         */
        coutObjetSaisieCalculEnvl: boolean;
        /**
         * Cifttv_TechVent
         */
        techniqueVent: number;
        /**
         * Ctfaen_TypeEngagement
         */
        typeEngagement: string;
        /**
         * Ctfaoc_OrigCommProj
         */
        origineCommissionProjet: number;
        /**
         * Ctfici_CanalDeDistribution
         */
        canalDeDistribution: string;
        /**
         * Ctfgce_CritElgGarFEI
         */
        critereEligibiliteFEI: string;
        /**
         * Controles
         */
        controles: Array<IControleIhm>;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * GenreReamenagement
         */
        genreReamenagement: number;
        /**
         * Lbfcor_LibelleLong
         */
        libelleLong: string;
        /**
         * Lbfiaa_LibelleModEstimation
         */
        libelleModEstimation: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Lbfomo_LibelleMeta
         */
        libelleMeta: string;
        /**
         * Lbfpen_EnsgnPres
         */
        ensgnPres: string;
        /**
         * Lbni_LibelleLong
         */
        libelleLong1: string;
        /**
         * LibelleCanalDeDistribution
         */
        libelleCanalDeDistribution: string;
        /**
         * LibelleOrigineCommProjet
         */
        libelleOrigineCommissionProjet: string;
        /**
         * LibelleMiseEnOeuvre
         */
        libelleMiseEnOeuvre: string;
        /**
         * LibelleTechniqueVente
         */
        libelleTechniqueVente: string;
        /**
         * LibelleUsageDuBien
         */
        libelleUsageDuBien: string;
        /**
         * Mtfcra_MtRachCren
         */
        montantRachCren: number;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Mtfofd_MtFrsDivr
         */
        montantFrsDivr: number;
        /**
         * Mtfofn_CoutFrsNotr
         */
        coutFrsNotaire: number;
        /**
         * Mtfoho_CoutTotlObjtHt
         */
        coutTotalObjetHt: number;
        /**
         * Mtfott_CoutTotlObjtTtc
         */
        coutTotalObjetTTC: number;
        /**
         * FraisDeNotairesSaisissables
         */
        fraisDeNotairesSaisissables: boolean;
        /**
         * EstHT
         */
        estHT: boolean;
        /**
         * ListReamenagement
         */
        listeReamenagement: Array<IScConstante>;
        /**
         * ListCtfgceCritEligGarFEI
         */
        listeCritereEligibiliteFEI: Array<IScConstante>;
        /**
         * BienAVendreComplet
         */
        bienAVendreComplet: IBienAVendreComplet;
        /**
         * ExpertiseComplet
         */
        expertiseComplet: IExpertiseComplet;
        /**
         * Cdfcni_TypeObjtFinn
         */
        typeObjetFinancier: string;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
    }
    interface IBlocNotesComplet extends IElementComplet {
        /**
         * ContBlc
         */
        contratBlocNote: string;
        /**
         * Idfwac_TypeBlc
         */
        typeBlocNote: string;
    }
}

declare namespace ICRest.Modeles.Schema {
    interface IElementSchema {
        /**
         * Idws
         */
        idws: string;
        /**
         * Desc
         */
        description: string;
    }
    interface IBlocNotesSchema extends IElementSchema {
        /**
         * Idfwac_TypeBlc
         */
        typeBlocNote: string;
    }
    interface IClausePersonnaliseeSchema extends IElementSchema {
        /**
         * DestClsePers
         */
        destinataireClassePersonne: number;
    }
    interface IAlerteEnSortieSchema extends IElementSchema {
        /**
         * Ctfiax_CodeAlrt
         */
        codeAlerte: string;
        /**
         * Dcfiax_DateEmssAlrt
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEmissionAlerte: string;
    }
    interface IAlerteEnEntreeSchema extends IElementSchema {
        /**
         * Ctfiai_CodeAlrt
         */
        codeAlerte: number;
        /**
         * Dcfiai_DateEmssAlrt
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEmissionAlerte: string;
    }
    interface IAvisSchema extends IElementSchema {
        /**
         * Ctfita_CodeTyplAvis
         */
        codeTypologieAvis: string;
        /**
         * Dtfaad_DateSaisAvis
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSaisieAvis: string;
        /**
         * Idfaen_IdntEnttSaisAvis
         */
        idEntiteSaisieAvis: string;
        /**
         * Lbfaen_LiblEnttSaisAvis
         */
        libelleEntiteSaisieAvis: string;
        /**
         * Nofiav_NumeAvis
         */
        numeroAvis: number;
    }
    interface IEvenementSchema extends IElementSchema {
        /**
         * Ctfaev_CodeTypeEven
         */
        codeTypeEven: string;
        /**
         * Dtfaee_DateEfftEven
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEffetEven: string;
    }
    interface IVersementSchema extends IElementSchema {
        /**
         * Txfave_PctVerst
         */
        pourcentageVersement: number;
    }
    interface IRedacteurActeSchema extends IElementSchema {
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
    }
    interface IRessourceSchema extends IElementSchema {
        /**
         * Ctfpre_TypeRess
         */
        typeRessource: string;
        /**
         * Mtfpre_MtRess
         */
        montantRessource: number;
        /**
         * Npfpre_NbPerdParAn
         */
        nombrePeriodeParAn: number;
    }
    interface IChargeSchema extends IElementSchema {
        /**
         * Ctfpch_TypeDech
         */
        typeDech: string;
        /**
         * Mtfpch_MtChrg
         */
        montantCharge: number;
        /**
         * Npfpch_NbPerdParAn
         */
        nombrePeriodeParAn: number;
    }
    interface IPhaseCreditExistantSchema extends IElementSchema {
        /**
         * Ctfcfp_CodeTypePhas
         */
        codeTypePhase: string;
    }
    interface ICreditExistantSchema extends IChargeSchema {
        /**
         * Mkfard_MtRestDu
         */
        montantRestantDu: number;
        /**
         * PhasesCreditExistant
         */
        phasesCreditExistant: Array<IPhaseCreditExistantSchema>;
    }
    interface ICompteSchema extends IElementSchema {
        /**
         * Nufpcp_NumeCpte
         */
        numeroCompte: string;
        /**
         * Cdfppr_TypeCpte
         */
        typeCompte: string;
        /**
         * Composition
         */
        composition: string;
    }
    interface ICompteProfessionnelSchema extends ICompteSchema {
    }
    interface ICompteDepotSchema extends ICompteSchema {
    }
    interface IRevenuFiscalSchema extends IElementSchema {
        /**
         * Mtfprm_MtRevnMeng
         */
        montantRevnMeng: number;
    }
    interface IPatrimoineImmobilierSchema extends IElementSchema {
        /**
         * Ctfcnp_NatrPtrmImmb
         */
        naturePatrimoineImmobilier: number;
        /**
         * Mtfmvb_ValrActlPtrm
         */
        valeurActuarielPatrimoine: number;
    }
    interface IEmprunteurSchema extends IElementSchema {
        /**
         * IdwsPersonnes
         */
        idwsPersonnes: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
        /**
         * Comptes
         */
        comptes: Array<ICompteSchema>;
        /**
         * RevenusFiscaux
         */
        revenusFiscaux: Array<IRevenuFiscalSchema>;
        /**
         * PatrimoinesImmo
         */
        patrimoinesImmobilier: Array<IPatrimoineImmobilierSchema>;
    }
    interface IGarantSchema extends IElementSchema {
        /**
         * IdwsPersonnes
         */
        idwsPersonnes: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
    }
    interface IFamilleEpargneSchema extends IElementSchema {
        /**
         * Cdfmpr_CodeFamlPrdtAdr
         */
        codeFamilleProduitAdresse: string;
        /**
         * Mtfmve_MtValrEprgAvntOper
         */
        montantValeurEpargneAvenantOper: number;
    }
    interface IRelationEntrePersonnesSchema extends IElementSchema {
        /**
         * Cnfcrp_CodeNatureRelation
         */
        codeNatureRelation: string;
        /**
         * IdntPers2
         */
        idPersonne2: string;
    }
    interface IComplementFicheContactSchema extends IElementSchema {
    }
    interface IPersonneSchema extends IElementSchema {
        /**
         * Cdfptp_CodeTypePers
         */
        codeTypePersonne: number;
        /**
         * Lbfpnm_NomRaisSocl
         */
        nomRaisonSociale: string;
        /**
         * Idfppe_IdntPersSI
         */
        idPersonneSI: string;
        /**
         * Cifcps_AutoriseSignatureElectronique
         */
        autoriseSignatureElectronique: boolean;
        /**
         * Roles
         */
        roles: Array<string>;
        /**
         * Ressources
         */
        ressources: Array<IRessourceSchema>;
        /**
         * Charges
         */
        charges: Array<IChargeSchema>;
        /**
         * FamillesEpargne
         */
        famillesEpargne: Array<IFamilleEpargneSchema>;
        /**
         * Comptes
         */
        comptes: Array<ICompteSchema>;
        /**
         * RelationsEntrePersonnes
         */
        relationsEntrePersonnes: Array<IRelationEntrePersonnesSchema>;
        /**
         * ComplementFicheContact
         */
        complementFicheContact: IComplementFicheContactSchema;
        /**
         * ComptesPrelVersModalite
         */
        comptesPrelVersementModalite: Array<ICompteSchema>;
    }
    interface IPersonneMoraleSchema extends IPersonneSchema {
        /**
         * ListIdntPersPhys
         */
        listeIdPersonnePhys: Array<string>;
    }
    interface IOppositionSchema extends IElementSchema {
        /**
         * Cdfmop_CodeOppo
         */
        codeOpposition: string;
        /**
         * Ddfmop_DateDebtOppo
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDebutOpposition: string;
        /**
         * Dffmop_DateFinOppo
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateFinOpposition: string;
    }
    interface IInterditBancaireSchema extends IElementSchema {
    }
    interface IActiviteSchema extends IElementSchema {
        /**
         * Cdfmcs_CodeClssRisqCsp
         */
        codeClasseRisqueCSP: number;
    }
    interface IPersonnePhysiqueSchema extends IPersonneSchema {
        /**
         * Oppositions
         */
        oppositions: Array<IOppositionSchema>;
        /**
         * InterditBancaire
         */
        interditBancaire: IInterditBancaireSchema;
        /**
         * Activite
         */
        activite: IActiviteSchema;
    }
    interface IBienAVendreSchema extends IElementSchema {
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Ctfcor_CodeTypeObjtRegl
         */
        codeTypeObjetRegle: string;
        /**
         * Mtfmvc_PrixNetVndr
         */
        prixNetVendeur: number;
    }
    interface IInfoRegroupementSchema extends IElementSchema {
    }
    interface IPretReamenageSchema extends IElementSchema {
        /**
         * Cdfpbq_CodeBanq
         */
        codeBanque: string;
        /**
         * Idfct1_IdntCredGest
         */
        idCreditGestion: string;
        /**
         * Mtfard_MtRestDuSurPretRefn
         */
        montantRestantDuSurPretRefn: number;
        /**
         * InfosRegroupement
         */
        informationRegroupement: IInfoRegroupementSchema;
    }
    interface IReamenagementSchema extends IElementSchema {
        /**
         * Cdfare_TypeReam
         */
        typeReamenagement: number;
        /**
         * Mtfmva_CaptRestDu
         */
        capitalRestantDu: number;
        /**
         * PretsReamenages
         */
        pretsReamenages: Array<IPretReamenageSchema>;
    }
    interface IAplSchema extends IElementSchema {
        /**
         * Mtfiba_MtApl
         */
        montantAPL: number;
        /**
         * TypeApl
         */
        typeAPL: number;
    }
    interface ISynthesePlanFinancementSchema extends IElementSchema {
        /**
         * Mcfoof_CoutTotalTTC
         */
        coutTotalTTC: number;
        /**
         * Mcfgfr_CoutTotalFraisGarantie
         */
        coutTotalFraisGarantie: number;
        /**
         * Mcfafd_CoutTotalFraisDossier
         */
        coutTotalFraisDossier: number;
        /**
         * Mtfaap_MtApportPersonnel
         */
        montantApportPersonnel: number;
        /**
         * nMtfaso_MtConcoursInternes
         */
        mtfaso_MontantConcoursInternes: number;
        /**
         * nMkface_MtConcoursExternes
         */
        mkface_MontantConcoursExternes: number;
        /**
         * Mcfacf_CoutTotalFraisCourtage
         */
        coutTotalFraisCourtage: number;
        /**
         * MtMensualiteAvecAssurance
         */
        montantMensualiteAvecAssurance: number;
        /**
         * MtMensualiteNet
         */
        montantMensualiteNet: number;
    }
    interface ICreditExterneSchema extends IElementSchema {
        /**
         * Lbfaep_LibletblPret
         */
        libletblPret: string;
        /**
         * Mkface_MtCapt
         */
        montantCapital: number;
        /**
         * Txfatg_TegActu
         */
        tegActu: number;
    }
    interface IPalierContraintSchema extends IElementSchema {
        /**
         * Ddpe_DateDebtPerd
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDebutPeriode: string;
        /**
         * Npfpco_DurePalr
         */
        durePalier: number;
        /**
         * Meface_MtEche
         */
        montantEcheance: number;
    }
    interface IRemiseClientSchema extends IElementSchema {
        /**
         * MtAppl
         */
        montantApplication: number;
        /**
         * TxAppl
         */
        tauxApplication: number;
    }
    interface ITrancheMontantSchema extends IElementSchema {
        /**
         * Txfcaa_TxTrchMt
         */
        tauxTrancheMontant: number;
        /**
         * DebtTrchMt
         */
        debutTrancheMontant: number;
        /**
         * FinTrchMt
         */
        finTrancheMontant: number;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
    }
    interface ICotisationSchema extends IElementSchema {
        /**
         * Txfca1_TxCots
         */
        tauxCotisation: number;
        /**
         * Mtfcac_MtCots
         */
        montantCotisation: number;
        /**
         * Npfce1_NbPerdAppliCots
         */
        nombrePeriodeApplicationCotisation: number;
        /**
         * Txfipf_PartFinn
         */
        partFinancier: number;
        /**
         * Mtfgfr_MtFrsGarn
         */
        montantFrsGarantie: number;
        /**
         * Ctfcac_TypeAccs
         */
        typeAccessoire: string;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
        /**
         * TranchesMontant
         */
        tranchesMontant: Array<ITrancheMontantSchema>;
    }
    interface ICotisationPhaseSchema extends ICotisationSchema {
    }
    interface ICotisationPeriodeSchema extends ICotisationSchema {
    }
    interface ICotisationDerogationSchema extends ICotisationSchema {
    }
    interface ICotisationTrancheAgeSchema extends ICotisationSchema {
    }
    interface ICouvertureCreditSchema extends IElementSchema {
        /**
         * Mkfaco_MtCouv
         */
        montantCouverture: number;
        /**
         * Txfacr_QuotCouv
         */
        quotientCouverture: number;
        /**
         * dMontantCoutTotalAssurance
         */
        montantCoutTotalAssurance: number;
        /**
         * dMontantEcheanceMaximale
         */
        montantEcheanceMaximale: number;
        /**
         * dMontantEcheanceMinimale
         */
        montantEcheanceMinimale: number;
        /**
         * dMontantMensualiteEcheance
         */
        montantMensualiteEcheance: number;
        /**
         * IdCredit
         */
        idCredit: string;
        /**
         * Cotisations
         */
        cotisations: Array<ICotisationSchema>;
    }
    interface IAccessoireSchema extends IElementSchema {
        /**
         * CouverturesCredits
         */
        couverturesCredits: Array<ICouvertureCreditSchema>;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
    }
    interface IAccessoireComplementaireSchema extends IAccessoireSchema {
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
    }
    interface IAccessoireLieProduitSchema extends IAccessoireSchema {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
    }
    interface IAvisOrganismeExterneSchema extends IElementSchema {
        /**
         * Cdfads_CodeDecs
         */
        codeDecision: string;
        /**
         * Dtfaad_DateAvis
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateAvis: string;
    }
    interface IAssuranceSchema extends IAccessoireSchema {
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * EstAssuranceAXA
         */
        estAssuranceAXA: boolean;
        /**
         * EstAssuranceCNP
         */
        estAssuranceCNP: boolean;
        /**
         * EstAssuranceGroupePourTAEA
         */
        estAssuranceGroupePourTAEA: boolean;
        /**
         * AvisOrganismeExterne
         */
        avisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * DerniersAvisOrganismeExterne
         */
        derniersAvisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
    }
    interface IGarantieSchema extends IAccessoireSchema {
        /**
         * IdPersonne
         */
        idPersonne: string;
        /**
         * Cdfcng_NatrGarn
         */
        natureGarantie: string;
    }
    interface IGarantiePersonnelleSchema extends IGarantieSchema {
        /**
         * AvisOrganismeExterne
         */
        avisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * DerniersAvisOrganismeExterne
         */
        derniersAvisOrganismeExterne: Array<IAvisOrganismeExterneSchema>;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface IBienPorteEnGarantieSchema extends IElementSchema {
    }
    interface IHypothequeAerienneSchema extends IBienPorteEnGarantieSchema {
    }
    interface IBonDeCaisseCapitalisationSchema extends IBienPorteEnGarantieSchema {
    }
    interface IDelegationLoyerSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICessionDaillyAutreSchema extends IBienPorteEnGarantieSchema {
    }
    interface IVersementAttenduSchema extends IElementSchema {
        /**
         * Mtfvat_MtVerst
         */
        montantVersement: number;
    }
    interface IContratAssuranceSchema extends IBienPorteEnGarantieSchema {
        /**
         * VersementsAttendus
         */
        versementsAttendus: Array<IVersementAttenduSchema>;
    }
    interface IAntichreseSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICessionDaillyLoyerImmeubleSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageVehiculeSchema extends IBienPorteEnGarantieSchema {
    }
    interface IGageCompteInstrumentFinancierSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementPartSocialeSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementValeurMaterielleSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementValeurMobiliereSchema extends IBienPorteEnGarantieSchema {
    }
    interface INantissementFondDeCommerceSchema extends IBienPorteEnGarantieSchema {
    }
    interface IProprietaireSchema extends IElementSchema {
    }
    interface IHypothequeImmobiliereSchema extends IBienPorteEnGarantieSchema {
        /**
         * Proprietaires
         */
        proprietaires: Array<IProprietaireSchema>;
    }
    interface IBienDiversSchema extends IBienPorteEnGarantieSchema {
    }
    interface ICreditHDSchema extends IElementSchema {
        /**
         * Idfcct_RefrPret
         */
        referencePret: string;
        /**
         * Mtfaoc_MtPret
         */
        montantPret: number;
        /**
         * IdntCredExnt
         */
        idCreditExnt: string;
    }
    interface IGarantieHDSchema extends IElementSchema {
        /**
         * Cdfcng_NatrGarnHorsDoss
         */
        natureGarantieHorsDossier: string;
        /**
         * Idfgg1_IdntOrigGarnHorsDoss
         */
        idOrigineGarantieHorsDossier: string;
        /**
         * CreditsHD
         */
        creditsHD: Array<ICreditHDSchema>;
    }
    interface IGarantieReelleSchema extends IGarantieSchema {
        /**
         * BienPorteEnGarantie
         */
        bienPorteEnGarantie: IBienPorteEnGarantieSchema;
        /**
         * GarantieHD
         */
        garantieHD: IGarantieHDSchema;
        /**
         * FinancableEstVisible
         */
        financableEstVisible: boolean;
        /**
         * FinancableEstActif
         */
        financableEstActif: boolean;
        /**
         * FinancableEstCoche
         */
        financableEstCoche: boolean;
    }
    interface IServiceSurObjetSchema extends IAccessoireSchema {
        /**
         * IdntConv
         */
        idConvention: string;
    }
    interface ITauxInteretAnnuelLecture {
        /**
         * ModeCalcTx
         */
        modeCalculTaux: number;
        /**
         * NbPerdParAn
         */
        nombrePeriodeParAn: number;
        /**
         * TxActu
         */
        tauxActu: number;
        /**
         * TxProp
         */
        tauxProp: number;
    }
    interface ITauxIndiceLecture extends ITauxInteretAnnuelLecture {
        /**
         * Marg
         */
        marge: number;
        /**
         * ValrIndc
         */
        valeurIndice: number;
    }
    interface ITauxFixeLecture extends ITauxInteretAnnuelLecture {
    }
    interface ITauxMixteLecture extends ITauxInteretAnnuelLecture {
        /**
         * Rpar
         */
        repartition: number;
        /**
         * TxIndcCmpstTxMixt
         */
        tauxIndiceCmpstTauxMixte: ITauxIndiceLecture;
        /**
         * TxFixeCmpstTxMixt
         */
        tauxFixeCmpstTauxMixte: ITauxFixeLecture;
    }
    interface IEcheanceOptimisationSchema extends IElementSchema {
        /**
         * Mefhcd_MtRembSais
         */
        montantRemboursementSaisie: number;
        /**
         * Ctfhel_CodeTypeElemSais
         */
        codeTypeElementSaisie: number;
    }
    interface ICreditPalierTauxSchema extends IElementSchema {
        /**
         * TxIntePalr
         */
        tauxInterieurPalier: ITauxInteretAnnuelLecture;
        /**
         * Txfcpg_TxPrgrEcheSurPalr
         */
        tauxProgressifEcheanceSurPalier: number;
        /**
         * DureeEnMois
         */
        dureeEnMois: number;
        /**
         * EcheancesOptimisation
         */
        echeancesOptimisation: Array<IEcheanceOptimisationSchema>;
    }
    interface ICreditParamIndexationSchema extends IElementSchema {
        /**
         * Nofrji_NumeIndcRevsCred
         */
        numeroIndiceRevisionCredit: number;
    }
    interface ICreditParamRevisionSchema extends IElementSchema {
        /**
         * Idfrlr_IdntLoiRevs
         */
        idLoiRevision: string;
        /**
         * Nofrji_NumeJeuIndcRevsAsscCred
         */
        numeroJeuxIndiceRevisionAssuranceCredit: number;
        /**
         * CreditParamsIndexation
         */
        creditParamsIndexation: Array<ICreditParamIndexationSchema>;
    }
    interface ICreditParamRevisionParPhaseSchema extends ICreditParamRevisionSchema {
    }
    interface ICreditPhaseSchema extends IElementSchema {
        /**
         * DureeEnMois
         */
        dureeEnMois: number;
        /**
         * CreditPaliersTaux
         */
        creditPaliersTaux: Array<ICreditPalierTauxSchema>;
        /**
         * CreditParamsRevisionParPhase
         */
        creditParamsRevisionParPhase: ICreditParamRevisionParPhaseSchema;
    }
    interface ICreditPalierProgressionSchema extends IElementSchema {
    }
    interface IComplementPhasePretCombineSchema extends IElementSchema {
    }
    interface ICreditPhaseAmortissementSchema extends ICreditPhaseSchema {
        /**
         * CreditPaliersProgression
         */
        creditPaliersProgression: Array<ICreditPalierProgressionSchema>;
        /**
         * ComplementPhasePretCombine
         */
        complementPhasePretCombine: IComplementPhasePretCombineSchema;
    }
    interface ICreditPhaseDiffereAmortissementSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhaseDiffereTotalSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhaseMobilisationSchema extends ICreditPhaseSchema {
    }
    interface ICreditPhasePrefinancementSchema extends ICreditPhaseSchema {
    }
    interface ISuiviPlanifieSchema extends IElementSchema {
    }
    interface IPayeurSchema extends IElementSchema {
        /**
         * Txfdec_PctPaieCred
         */
        pourcentagePaiementCredit: number;
        /**
         * IdwsPersonne
         */
        idPersonne: string;
    }
    interface ICreditParamRevisionParPeriodeSchema extends ICreditParamRevisionSchema {
    }
    interface ICreditModaliteSchema extends IElementSchema {
        /**
         * Idfcmi_IdntModlCalcImpe
         */
        idModeleCalculImpe: string;
        /**
         * Nofcmc_NumeModlRembAntc
         */
        numeroModeleRemboursementAnticipe: number;
    }
    interface ICreditBonificationInfoSchema extends IElementSchema {
        /**
         * Cdfdic_CodeInfo
         */
        codeInformation: string;
        /**
         * sCdfddi_CodeDetail
         */
        codeDetail: string;
    }
    interface ICreditBonificationSchema extends IElementSchema {
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * Infos
         */
        information: Array<ICreditBonificationInfoSchema>;
    }
    interface IDroitUtiliseSchema extends IElementSchema {
        /**
         * Mtfadu_MtDrtAcqsUtls
         */
        montantDroitAcqsUtilisation: number;
        /**
         * IdntTrancheEL
         */
        idTrancheEL: string;
    }
    interface ICompteCourantSchema extends IElementSchema {
        /**
         * Mtfasc_MtHyptCapt
         */
        montantHypothequeCapital: number;
        /**
         * Cifcmh_CodeIndicBlcgSaisMtHyptCapt
         */
        codeIndiceBlcgSaisieMontantHypothequeCapital: number;
    }
    interface IVariationDureeSchema extends IElementSchema {
        /**
         * Npfarv_NbPerdVartPoss
         */
        nombrePeriodeVartPossibilite: number;
        /**
         * TypeButrVartDure
         */
        typeButoireVartDure: number;
    }
    interface IVersementFractionneSchema extends IElementSchema {
        /**
         * Nbfbvs_NbVerstSouh
         */
        nombreVersementSouh: number;
        /**
         * Mvfbmf_MtVerstFrct
         */
        montantVersementFraction: number;
    }
    interface IMarcheEPSSchema extends IElementSchema {
        /**
         * Idfadi_IdDosInst
         */
        idDosInstruction: string;
        /**
         * Nofapd_NumRelPlanDoss
         */
        numeroRelPlanDossier: number;
        /**
         * Nofacp_NumRelCreditPlan
         */
        numeroRelCreditPlan: number;
        /**
         * Ctfcme_CodeTypeMarche
         */
        codeTypeMarche: string;
    }
    interface IComplementEPSSchema extends IElementSchema {
        /**
         * Cnfcnb_NatrGarnEps
         */
        natureGarantieEPS: string;
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfapa_RefrExtnDossParn
         */
        referenceExterneDossierParent: string;
        /**
         * Idfcma_IdModeleActeEPS
         */
        idModeleActeEPS: string;
        /**
         * MarchesEPS
         */
        marchesEPS: Array<IMarcheEPSSchema>;
    }
    interface ITACreditEPSSchema extends IElementSchema {
        /**
         * Dtfhpr_DateEchnMER
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEcheanceMER: string;
        /**
         * Mkfh03_MtCaptAmrt
         */
        montantCapitalAmortissement: number;
        /**
         * Mkfd01_MtCaptRestDu
         */
        montantCapitalRestantDu: number;
    }
    interface ICreditEPSSchema extends IElementSchema {
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Txfccc_QuotCredCouvParEps
         */
        quotientCreditCouvertureParEPS: number;
        /**
         * Idfaez_RefeExtnCredCouvEps
         */
        referenceExterneCreditCouvertureEPS: string;
        /**
         * TaCredCouvParEps
         */
        taCreditCouvertureParEPS: Array<ITACreditEPSSchema>;
    }
    interface IAjustementTauxSchema extends IElementSchema {
    }
    interface ICreditInterneSchema extends IElementSchema {
        /**
         * Idfcvp_IdntPrdtFinn
         */
        idProduitFinancier: string;
        /**
         * Mtfaoc_MtCaptCred
         */
        montantCapitalCredit: number;
        /**
         * TegProp
         */
        tegProp: number;
        /**
         * Phases
         */
        phases: Array<ICreditPhaseSchema>;
        /**
         * RemiseClient
         */
        remiseClient: IRemiseClientSchema;
        /**
         * SuivisPlanifies
         */
        suivisPlanifies: Array<ISuiviPlanifieSchema>;
        /**
         * Payeurs
         */
        payeurs: Array<IPayeurSchema>;
        /**
         * CreditParamsRevision
         */
        creditParamsRevision: Array<ICreditParamRevisionSchema>;
        /**
         * CreditModalite
         */
        creditModalite: ICreditModaliteSchema;
        /**
         * CreditBonification
         */
        creditBonification: ICreditBonificationSchema;
        /**
         * DroitsUtilises
         */
        droitsUtilises: Array<IDroitUtiliseSchema>;
        /**
         * CompteCourant
         */
        compteCourant: ICompteCourantSchema;
        /**
         * VariationsDuree
         */
        variationsDuree: Array<IVariationDureeSchema>;
        /**
         * VersementFractionne
         */
        versementFractionne: IVersementFractionneSchema;
        /**
         * ComplementEPS
         */
        complementEPS: IComplementEPSSchema;
        /**
         * CreditsEPS
         */
        creditsEPS: Array<ICreditEPSSchema>;
        /**
         * AjustementTaux
         */
        ajustementTaux: IAjustementTauxSchema;
    }
    interface IRefusAssuranceExterneSchema extends IElementSchema {
        /**
         * Idfadi_IdDossierInstruction
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroRelatifPlanDossier
         */
        numeroRelatifPlanDossier: number;
        /**
         * Idfppe_Identifiantpersonne
         */
        identifiantpersonne: string;
        /**
         * Nofrfp_NumRangRefusProposition
         */
        numeroRangRefusProposition: number;
        /**
         * Lbfcia_CompagnieAssurance
         */
        compagnieAssurance: string;
        /**
         * Lbfrcc_ReferenceContrat
         */
        referenceContrat: string;
        /**
         * Ddfddr_DateReceptionDemande
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateReceptionDemande: string;
        /**
         * Ddfpic_DateImpressionDemande
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateImpressionDemande: string;
        /**
         * Cdfdda_CodeDecision
         */
        codeDecision: number;
        /**
         * Llfprp_RolePersonne
         */
        rolePersonne: string;
    }
    interface IOrigineApportSchema extends IElementSchema {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Nofapd_NumeroPlanDossier
         */
        numeroPlanDossier: number;
        /**
         * Cdfoap_CodeOrigine
         */
        codeOrigine: number;
        /**
         * Mtfoap_MontantApportOrigine
         */
        montantApportOrigine: number;
    }
    interface IPlanFinancementSchema extends IElementSchema {
        /**
         * Mtfaso_MtTotlEmprPlan
         */
        montantTotalEmpruntPlan: number;
        /**
         * Mtfaap_MtApprPers
         */
        montantApportPersonne: number;
        /**
         * Mteh01_MtPreEchPhse
         */
        montantPreEchPhase: number;
        /**
         * Apl
         */
        aPL: IAplSchema;
        /**
         * SynthesePlanFinancement
         */
        synthesePlanFinancement: ISynthesePlanFinancementSchema;
        /**
         * CreditsExternes
         */
        creditsExternes: Array<ICreditExterneSchema>;
        /**
         * PaliersContraints
         */
        paliersContraints: Array<IPalierContraintSchema>;
        /**
         * AccessoiresComplementaires
         */
        accessoiresComplementaires: Array<IAccessoireComplementaireSchema>;
        /**
         * AccessoiresLiesProduit
         */
        accessoiresLiesProduit: Array<IAccessoireLieProduitSchema>;
        /**
         * Assurances
         */
        assurances: Array<IAssuranceSchema>;
        /**
         * Garanties
         */
        garanties: Array<IGarantieSchema>;
        /**
         * ServicesSurObjet
         */
        servicesSurObjet: Array<IServiceSurObjetSchema>;
        /**
         * CreditsInternes
         */
        creditsInternes: Array<ICreditInterneSchema>;
        /**
         * RefusAssuranceExternes
         */
        refusAssuranceExternes: Array<IRefusAssuranceExterneSchema>;
        /**
         * OriginesApport
         */
        originesApport: Array<IOrigineApportSchema>;
    }
    interface IProjetSchema extends IElementSchema {
        /**
         * Cdfcni_TypeObjtFinn
         */
        typeObjetFinancier: string;
        /**
         * Ctfcor_TypeObjtRegl
         */
        typeObjetRegle: string;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * BienAVendre
         */
        bienAVendre: IBienAVendreSchema;
        /**
         * Reamenagement
         */
        reamenagement: IReamenagementSchema;
        /**
         * PlansFinancement
         */
        plansFinancement: Array<IPlanFinancementSchema>;
        /**
         * IdntPlanRetn
         */
        idPlanRetn: string;
    }
    interface IBienConsoFinanceSchema extends IElementSchema {
    }
    interface IAutoMotoSchema extends IBienConsoFinanceSchema {
    }
    interface IBienDetailleSchema extends IElementSchema {
    }
    interface IBienEquipementProSchema extends IBienDetailleSchema {
    }
    interface ITresorerieFinanceeSchema extends IBienDetailleSchema {
    }
    interface IProjetNonImmobilierSchema extends IProjetSchema {
        /**
         * BienConsoFinance
         */
        bienConsommationFinance: IBienConsoFinanceSchema;
        /**
         * BienEquipementPro
         */
        bienEquipementPro: IBienEquipementProSchema;
        /**
         * TresorerieFinancee
         */
        tresorerieFinancee: ITresorerieFinanceeSchema;
    }
    interface IPromotionImmobiliereSchema extends IElementSchema {
        /**
         * InttPrgm
         */
        intituleProgramme: string;
        /**
         * SittPrgm
         */
        situationProgramme: number;
    }
    interface ITerrainFinanceSchema extends IElementSchema {
        /**
         * Mtfote_CoutTerr
         */
        coutTerr: number;
    }
    interface IBienSousJacentSchema extends IElementSchema {
    }
    interface ITerrainSousJacentSchema extends IBienSousJacentSchema {
    }
    interface ISoulteFinanceeSchema extends IElementSchema {
        /**
         * Mtfoac_MtSoul
         */
        montantSoul: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
    }
    interface IDetailCoutObjetSchema extends IElementSchema {
        /**
         * Ctfccc_CodeTyplCoutTrvx
         */
        codeTypologieCoutTravaux: string;
        /**
         * Mtfoct_CoutTrvx
         */
        coutTravaux: number;
    }
    interface ITravauxFinancesSchema extends IElementSchema {
        /**
         * Mtfotr_CoutTrvx
         */
        coutTravaux: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
        /**
         * DetailsCoutObjet
         */
        detailsCoutObjet: Array<IDetailCoutObjetSchema>;
    }
    interface IConstructionFinanceeSchema extends IElementSchema {
        /**
         * Mtfoco_CoutConstFinn
         */
        coutConstructionFinancier: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
    }
    interface IBatimentHabitableFinanceSchema extends IElementSchema {
        /**
         * Mtfoac_CoutAcqsBatmHabt
         */
        coutAcqsBatimentHabitation: number;
        /**
         * BienSousJacent
         */
        bienSousJacent: IBienSousJacentSchema;
    }
    interface IButLocatifSchema extends IElementSchema {
        /**
         * Mtfolp_MtAnnuLoyePerc
         */
        montantAnnuLoyePerc: number;
    }
    interface ITrancheELSchema extends IElementSchema {
        /**
         * Mtfaac_MtDrtAcqs
         */
        montantDroitAcqs: number;
    }
    interface IContratEpargneLogementSchema extends IElementSchema {
        /**
         * Cdfppr_CodeTypeEL
         */
        codeTypeEL: number;
        /**
         * Nufpct_IdntContEl
         */
        idContratEpargneLogement: string;
        /**
         * TranchesEL
         */
        tranchesEL: Array<ITrancheELSchema>;
        /**
         * IdwsPersBenef
         */
        idPersonneBeneficiaire: string;
    }
    interface IProjetImmobilierSchema extends IProjetSchema {
        /**
         * PromotionImmobiliere
         */
        promotionImmobiliere: IPromotionImmobiliereSchema;
        /**
         * TerrainFinance
         */
        terrainFinance: ITerrainFinanceSchema;
        /**
         * SoulteFinance
         */
        soulteFinance: ISoulteFinanceeSchema;
        /**
         * TravauxFinance
         */
        travauxFinance: ITravauxFinancesSchema;
        /**
         * ConstructionFinance
         */
        constructionFinance: IConstructionFinanceeSchema;
        /**
         * BatimentHabitableFinance
         */
        batimentHabitableFinance: IBatimentHabitableFinanceSchema;
        /**
         * ButLocatif
         */
        butLocatif: IButLocatifSchema;
        /**
         * ContratsEL
         */
        contratsEL: Array<IContratEpargneLogementSchema>;
    }
    interface IProjetEPSSchema extends IProjetSchema {
    }
    interface IComplementDossierSchema extends IElementSchema {
        /**
         * Llfidr_LiblDelRelsProj
         */
        libelleDelReleaseProjet: string;
        /**
         * Ctfipt_CodePrrtTrt
         */
        codePrrtTraitement: string;
        /**
         * Dtfisi_DateSaisSurItnt
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateSaisieSurInternet: string;
        /**
         * Hefisi_HeurSaisSurItnt
         */
        heureSaisieSurInternet: number;
    }
    interface IPoolEPSSchema extends IElementSchema {
        /**
         * Idfadi_IdntDossInstr
         */
        idDossierInstruction: string;
        /**
         * Idfaop_IdntOprtCess
         */
        idOprtCess: string;
        /**
         * Idfccf_IdntCadrFinn
         */
        idCadreFinancier: string;
        /**
         * Cnflpo_CodeNatrPool
         */
        codeNaturePool: number;
        /**
         * Cdfcor_CodeOrigCess
         */
        codeOrigineCess: number;
        /**
         * Ctfesr_TypeSousRolePool
         */
        typeSousRolePool: number;
        /**
         * Nofcca_NumVersionCadre
         */
        numeroVersionCadre: number;
    }
    interface IAgentSchema extends IElementSchema {
        /**
         * Idfaen_IdntAgent
         */
        idAgent: string;
        /**
         * Lbfaes_LblAgent
         */
        lblAgent: string;
        /**
         * EstAgentBO
         */
        estAgentBO: boolean;
        /**
         * EstBackup
         */
        estBackup: boolean;
        /**
         * EstAgentExterne
         */
        estAgentExterne: boolean;
        /**
         * Idfaeg_IdntEdsGest
         */
        idEDSGestion: string;
        /**
         * Lbfiba_LblAgenceRat
         */
        lblAgenceRat: string;
        /**
         * Cdfaaa_CdeAgentRat
         */
        cdeAgentRat: string;
        /**
         * Ctfauc_TypeUtilisateurCo
         */
        typeUtilisateurCo: number;
        /**
         * Idfce3_EtabBaofCent
         */
        etabBaofCentral: number;
        /**
         * Cdfabo_IdntEdsBaofCent
         */
        idEDSBaofCentral: string;
        /**
         * Cifttv_TechniqueDeVente
         */
        techniqueDeVente: number;
        /**
         * DerogationBornes
         */
        derogationBornes: boolean;
        /**
         * Role
         */
        role: number;
        /**
         * EstAgentRefusAssuranceExterne
         */
        estAgentRefusAssuranceExterne: boolean;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeContrôle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idContrôleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IDocumentOffreIndustrialiseeSchema extends IElementSchema {
        /**
         * DocumentCommun
         */
        documentCommun: string;
        /**
         * CodeEntiteFonctionnelle
         */
        codeEntiteFonctionnelle: string;
        /**
         * IdEntiteFonctionnelle
         */
        idEntiteFonctionnelle: string;
        /**
         * Exemplaire
         */
        exemplaire: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * LibelleDocument
         */
        libelleDocument: string;
        /**
         * IndicateurCasEcheant
         */
        indicateurCasEcheant: string;
        /**
         * EtatDocument
         */
        etatDocument: string;
        /**
         * NumeroOrdre
         */
        numeroOrdre: number;
        /**
         * Origine
         */
        origine: string;
    }
    interface IOffrePretIndustrialiseeSchema extends IElementSchema {
        /**
         * EditionEligible
         */
        editionEligible: boolean;
        /**
         * EditionEligibleEnAgence
         */
        editionEligibleEnAgence: boolean;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * DossierGdeACree
         */
        dossierGdeACree: boolean;
        /**
         * EtatDossierEdition
         */
        etatDossierEdition: string;
        /**
         * ListeDocumentsSchema
         */
        listeDocumentsSchema: Array<IDocumentOffreIndustrialiseeSchema>;
    }
    interface IDossierSchema extends IElementSchema {
        /**
         * Ctfado_EtatDoss
         */
        etatDossier: number;
        /**
         * TypeMoteurADR
         */
        typeMoteurADR: number;
        /**
         * Cefado_SousEtatDoss
         */
        sousEtatDossier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * EstEcoPtzCopro
         */
        estEcoPtzCopro: boolean;
        /**
         * EstDossierPartenaire
         */
        estDossierPartenaire: boolean;
        /**
         * BlocNotesDivers
         */
        blocNotesDivers: Array<IBlocNotesSchema>;
        /**
         * ClausesPersonnalisees
         */
        clausesPersonnalisees: Array<IClausePersonnaliseeSchema>;
        /**
         * AlertesEnSortie
         */
        alertesEnSortie: Array<IAlerteEnSortieSchema>;
        /**
         * AlertesEnEntree
         */
        alertesEnEntree: Array<IAlerteEnEntreeSchema>;
        /**
         * Avis
         */
        avis: Array<IAvisSchema>;
        /**
         * Evenements
         */
        evenements: Array<IEvenementSchema>;
        /**
         * Versements
         */
        versements: Array<IVersementSchema>;
        /**
         * RedacteurActe
         */
        redacteurActe: IRedacteurActeSchema;
        /**
         * Emprunteur
         */
        emprunteur: IEmprunteurSchema;
        /**
         * Garants
         */
        garants: Array<IGarantSchema>;
        /**
         * Personnes
         */
        personnes: Array<IPersonneSchema>;
        /**
         * Projet
         */
        projet: IProjetSchema;
        /**
         * ComplementDossier
         */
        complementDossier: IComplementDossierSchema;
        /**
         * PoolEPS
         */
        poolEPS: IPoolEPSSchema;
        /**
         * Agents
         */
        agents: Array<IAgentSchema>;
        /**
         * AnoCtlOuvrtDossier
         */
        anoCtlOuvrtDossier: Array<IAnomalieLecture>;
        /**
         * OffrePretIndustrialisee
         */
        offrePretIndustrialisee: IOffrePretIndustrialiseeSchema;
    }
}

declare namespace ICRest.Modeles.SetDebug {
    interface IEntreeDebug {
        /**
         * Activer
         */
        activer: boolean;
        /**
         * PrefixeNomFichier
         */
        prefixeNomFichier?: string;
        /**
         * ActiverTracesSelectionnees
         */
        activerTracesSelectionnees?: boolean;
        /**
         * TracesActives
         */
        tracesActives?: string;
        /**
         * Indice
         */
        indice?: number;
        /**
         * Historiser
         */
        historiser?: boolean;
    }
    interface ISortieDebug {
        /**
         * Success
         */
        success: boolean;
        /**
         * ContenuTrace
         */
        contenuTrace: string;
        /**
         * Message
         */
        message: string;
        /**
         * Indice
         */
        indice: number;
    }
}

declare namespace ICRest.Modeles.SignerMandat {
    interface ISignerMandatRequest {
        identifiantDossier: string;
        referenceMandat: string;
        dateSignature: string;
    }
}

declare namespace ICRest.Modeles.SignerOffrePret {
    interface IEntreeSignatureOffre {
        /**
         * IdntDoss
         */
        idDossier: string;
        /**
         * DateSignature
         * Type date au format yyyy-MM-dd
         */
        dateSignature: string;
        /**
         * NumeroOffre
         */
        numeroOffre: string;
        /**
         * ListeIdntPers
         */
        listeIdPersonne: Array<string>;
        /**
         * bSigne
         */
        signe: boolean;
        /**
         * bForcerCtrlusureLorsSignature
         */
        forcerCtrlusureLorsSignature: boolean;
    }
    interface IRetourSignatureOffre {
        /**
         * Anomalies
         */
        anomalies: Array<IAnomalieLecture>;
        /**
         * AnomaliesPreRequis
         */
        anomaliesPreRequis: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlusureLorsSignature
         */
        anomaliesCtrlusureLorsSignature: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlCalculNivDelgDecision
         */
        anomaliesControleCalculNiveauDelegationDecision: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlAvantEnvSaccef
         */
        anomaliesControleAvantEnvoiSaccef: Array<IAnomalieLecture>;
        /**
         * AnomaliesPassageEnGestionLecture
         */
        anomaliesPassageEnGestionLecture: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlVerifDates
         */
        anomaliesControleVerifDates: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlVerifGlobale
         */
        anomaliesControleVerifGlobale: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.SuivisPlanifies {
    interface IAjouterSuiviPlanifieRequest {
        identifiantDossier: string;
        identifiantCredit: string;
        typeSuivantPlafond: string;
    }
}

declare namespace ICRest.Modeles.SupprimerElementAvecControle {
    interface IEntreeTransaction {
        /**
         * ForceeControle
         */
        forceeControle: boolean;
        /**
         * Idws
         */
        idws: string;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IRapportTransaction {
        /**
         * OperationReussie
         */
        operationReussie: boolean;
        /**
         * ListeAnomalie
         */
        listeAnomalie: Array<IAnomalieLecture>;
    }
    interface ISupprimerElementAvecControleRequest {
        identifiantDossier: string;
        entreeTransaction: IEntreeTransaction;
    }
}

declare namespace ICRest.Modeles.SupprimerElements {
    interface ISupprimerElementsRequest {
        identifiantDossier: string;
        listeIdentifiantsElement: Array<string>;
    }
}

declare namespace ICRest.Modeles.SupprmerTierComp {
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IAccessoireLecture extends IElementLecture {
        /**
         * Idfaaa_IdntAccsGest
         */
        idAccessoireGestion: string;
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Ctfcat_CodeSousTypeAccs
         */
        codeSousTypeAccessoire: string;
        /**
         * Ctfcac_CodeTypeAccs
         */
        codeTypeAccessoire: string;
        /**
         * Ctfcah_CodeTyplAccs
         */
        codeTypologieAccessoire: string;
        /**
         * Txfipf_PartFinnAccs
         */
        partFinancierAccessoire: number;
        /**
         * CodeIndicAccsAper
         */
        codeIndiceAccessoireAper: boolean;
        /**
         * CodeIndicAccsFinn
         */
        codeIndiceAccessoireFinancier: boolean;
        /**
         * Dtfccr_DateCret
         * Type date au format yyyy-MM-dd
         */
        dateCreation: string;
        /**
         * Dtfaaa_DateAccpAccs
         * Type date au format yyyy-MM-dd
         */
        dateAccpAccessoire: string;
        /**
         * Dffacl_DateCltr
         * Type date au format yyyy-MM-dd
         */
        dateCloture: string;
        /**
         * Cefaas_CodeEtatAccs
         */
        codeEtatAccessoire: number;
        /**
         * Dtfaev_DateEnv
         * Type date au format yyyy-MM-dd
         */
        dateEnvoi: string;
        /**
         * Ddfaaa_DateEfft
         * Type date au format yyyy-MM-dd
         */
        dateEffet: string;
        /**
         * Dffaaa_DateFinEfft
         * Type date au format yyyy-MM-dd
         */
        dateFinEffet: string;
        /**
         * Cdfpim_CodeBeneficiaire
         */
        codeBeneficiaire: string;
        /**
         * Cdfpnb_PersonnalisationBeneficiare
         */
        personnalisationBeneficiare: number;
        /**
         * MontantFraisAccessoire
         */
        montantFraisAccessoire: number;
        /**
         * TauxRetenuAccessoire
         */
        tauxRetenuAccessoire: number;
        /**
         * ListIdntCouv
         */
        listeIdCouverture: Array<string>;
        /**
         * ListIdntCots
         */
        listeIdCotisation: Array<string>;
        /**
         * IdntConv
         */
        idConvention: string;
        /**
         * ListIdntAvisOrgnExtr
         */
        listeIdAvisOrgnExtr: Array<string>;
        /**
         * IdntPlan
         */
        idPlan: string;
    }
    interface IAccessoireComplementaireLecture extends IAccessoireLecture {
        /**
         * Cnfcoi_CodeNatrOrigAccs
         */
        codeNatureOrigineAccessoire: number;
        /**
         * IdntCatlFrsComp
         */
        idCatlFrsComp: string;
        /**
         * IdntCatlParmRverTier
         */
        idCatlParametreRverTiers: string;
        /**
         * Ctfprp_RoleTiers
         */
        roleTiers: string;
        /**
         * Lbfpa1_Intitule
         */
        intitule: string;
    }
}

declare namespace ICRest.Modeles.SynchroniserAvecSmac {
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
}

declare namespace ICRest.Modeles.TraiterExpertisePvh {
    interface IElementMaj {
        /**
         * Idws
         */
        idws: string;
    }
    interface IBienPorteEnGarantieMaj extends IElementMaj {
        /**
         * Lbfoof_LiblObjt
         */
        libelleObjet: string;
        /**
         * Lbfoa1_Intt
         */
        adresseLigne1: string;
        /**
         * Lbfoa2_AdrsLign3
         */
        adresseLigne3: string;
        /**
         * Lbfoa3_AdrsLign4
         */
        adresseLigne4: string;
        /**
         * Lbfoa4_CodePost
         */
        codePoste: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Lbfoa6_CompIntt
         */
        adresseLigne1Suite: string;
        /**
         * Cdfopa_CodePays
         */
        codePays: string;
        /**
         * AdrsLign5
         */
        adresseLigne5: string;
        /**
         * Mtfgob_MtEstmVenl
         */
        montantEstmVenl: number;
        /**
         * Dtfgob_DateEstmVenl
         * Type date au format yyyy-MM-dd
         */
        dateEstmVenl: string;
        /**
         * Cdfgme_CodeModlEstmVenl
         */
        codeModeleEstmVenl: string;
        /**
         * Mtfgo2_MtEstmPrdn
         */
        montantEstmPrdn: number;
        /**
         * Dtfgo2_DateEstmPrdn
         * Type date au format yyyy-MM-dd
         */
        dateEstmPrdn: string;
        /**
         * Cdfgm2_CodeModlEstmPrdn
         */
        codeModeleEstmPrdn: string;
        /**
         * Cmfgt2_CodeMotfReSPrdn
         */
        codeMotfReSPrdn: string;
        /**
         * Dtfiex_DateExprBienCff
         * Type date au format yyyy-MM-dd
         */
        dateExpressionBienCff: string;
        /**
         * Lbfpex_NoteExprBienCff
         */
        noteExpressionBienCff: number;
        /**
         * Cifaan_SouscriptionContratAssurance
         */
        souscriptionContratAssurance: boolean;
    }
    interface IHypothequeImmobiliereMaj extends IBienPorteEnGarantieMaj {
        /**
         * Lbfoca_RefeCads
         */
        referenceCads: string;
        /**
         * Lbfolt_RefeLot
         */
        referenceLot: string;
        /**
         * Ctfmoi_TypeBien
         */
        typeBien: number;
        /**
         * Ctfolo_TypeLogm
         */
        typeLogement: string;
        /**
         * Cdfcdo_DestBien
         */
        destinataireBien: number;
        /**
         * Nbfosh_SurfHabt
         */
        surfHabitation: number;
        /**
         * Nbfost_SurfTerr
         */
        surfTerr: number;
        /**
         * Cdfcoi_ZoneImplBien
         */
        zoneImplBien: string;
        /**
         * Cdfqem_QualEmpla
         */
        qualEmpla: number;
        /**
         * Lbfoo1_MtDernMutt
         */
        montantDernierMutt: string;
        /**
         * Lbfoo2_DateDernMutt
         */
        dateDernierMutt: string;
        /**
         * Dtfoco_AnneConst
         */
        anneConstruction: number;
        /**
         * Lbfoo3_MtAnnuLoye
         */
        montantAnnuLoye: string;
        /**
         * Lbfoo5_NumeLotCopr
         */
        numeroLotCopr: string;
        /**
         * Lbfoo4_NumeSctn
         */
        numeroSctn: string;
        /**
         * Cifcoc_OccpActlBien
         */
        occpActuarielBien: number;
        /**
         * Cifcph_CodePresHypt
         */
        codePresHypotheque: number;
        /**
         * Idfceb_IdntExpr
         */
        idExpression: string;
        /**
         * Dtfcde_DateDemnExpr
         * Type date au format yyyy-MM-dd
         */
        dateDemandeExpression: string;
        /**
         * Dtfoac_DateAcquisition
         * Type date au format yyyy-MM-dd
         */
        dateAcquisition: string;
        /**
         * Mtfoac_CoutAcquisition
         */
        coutAcquisition: number;
        /**
         * Cdfomo_ModaliteOccupation
         */
        modaliteOccupation: number;
        /**
         * Nbfosa_SurfaceAnnexes
         */
        surfaceAnnexes: number;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IResultatLireExpertisePVH {
        /**
         * ListeAnomalies
         */
        listeAnomalies: Array<IAnomalieLecture>;
        /**
         * IdentifiantExpertise
         */
        identifiantExpertise: string;
        /**
         * Note
         */
        note: number;
        /**
         * MontantEstimation
         */
        montantEstimation: number;
        /**
         * DateEstimation
         * Type date au format yyyy-MM-dd
         */
        dateEstimation: string;
        /**
         * Observation
         */
        observation: string;
    }
    interface ITraiterExpertisePVHRequest {
        sidntDossier: string;
        hypothequeImmobiliereMaj: IHypothequeImmobiliereMaj;
    }
}

declare namespace ICRest.Modeles.TraiterReponseCEGC {
    interface IResultatCegc {
        /**
         * Type
         */
        type: string;
        /**
         * Cdfarx_CodeMotif
         */
        codeMotif: string;
        /**
         * Llfar1_LibelleDecision
         */
        libelleDecision: string;
    }
    interface IResultatTarificationCegc {
        /**
         * Idfac2_IdentifiantCredit
         */
        identifiantCredit: string;
        /**
         * Mtfacn_MontantCommission
         */
        montantCommission: number;
        /**
         * Txin6_TauxCommision
         */
        tauxCommision: number;
        /**
         * Messages
         */
        messages: Array<string>;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface IResultatTraitementCegc {
        /**
         * Idfcp1_IdentifiantCegcDossier
         */
        identifiantCegcDossier: string;
        /**
         * Dtfarz_DateReceptionCegc
         * Type date au format yyyy-MM-dd
         */
        dateReceptionCegc: string;
        /**
         * Hefars_HeureReceptionCegc
         */
        heureReceptionCegc: string;
        /**
         * Dtfaad_DateAvisDossier
         * Type date au format yyyy-MM-dd
         */
        dateAvisDossier: string;
        /**
         * Hefaav_HeureAvisDossier
         */
        heureAvisDossier: string;
        /**
         * Cdfarx_CodeMotif
         */
        codeMotif: string;
        /**
         * Lifadc_LibelleDecision
         */
        libelleDecision: string;
        /**
         * ResultatCegc
         */
        resultatCegc: Array<IResultatCegc>;
        /**
         * TarificationCredit
         */
        tarificationCredit: Array<IResultatTarificationCegc>;
        /**
         * Anomalies
         */
        anomalies: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.TransfererDossierDansApp {
    interface IEntreeTransfererDossierVersApplication {
        /**
         * Idfadi_IdDossierInstruction
         */
        idDossierInstruction: string;
        /**
         * Cdfado_CodeVisibiliteInstruction
         */
        codeVisibiliteInstruction: boolean;
        /**
         * TypeTransfertApplication
         */
        typeTransfertApplication: number;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IResultatTransfererDossierVersApplication {
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
        /**
         * EstDossierTransfere
         */
        estDossierTransfere: boolean;
    }
}

declare namespace ICRest.Modeles.Transfert {
    interface ITransfererDossierViasIdentifiantRequest {
        identifiantDossier: string;
        informationTransfert: ISdInformationTransfert;
        /**
         * bLancerControleDossier
         */
        bLancerControleDossier: boolean;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
    }
    interface ISdInformationTransfert {
        /**
         * TypeTraitementTransfertDossier
         */
        typeTraitementTransfertDossier: number;
        /**
         * TypeTransfertDossier
         */
        typeTransfertDossier: number;
        /**
         * SIdntAgntTranf
         */
        sIdAgentTranf: string;
        /**
         * Idfas1_1erElmntStrc
         */
        premierElementStructure: string;
        /**
         * Idfas2_2eElmntStrc
         */
        deuxiemeElementStructure: string;
        /**
         * Idfas3_3eElmntStrc
         */
        troisiemeElementStructure: string;
        /**
         * Idfas4_4eElmntStrc
         */
        quatriemeElementStructure: string;
        /**
         * Idfas5_5eElmntStrc
         */
        cinquiemeElementStructure: string;
        /**
         * Idfas6_6eElmntStrc
         */
        sixiemeElementStructure: string;
        /**
         * Raison
         */
        raison: string;
        /**
         * Avis
         */
        avis: string;
    }
    interface IRetourTranfererDossier {
        /**
         * Anomalies
         */
        anomalies: Array<IAnomalieLecture>;
        /**
         * bEstTransferer
         */
        estTransferer: boolean;
    }
    interface ITransfererDossierViaResumeRequest {
        dossierResume: Array<IDossierResume>;
        informationTransfert: ISdInformationTransfert;
    }
    interface IAutorisationDossier {
        /**
         * Consultation
         */
        consultation: boolean;
        /**
         * ConsultationAvis
         */
        consultationAvis: boolean;
        /**
         * Instruction
         */
        instruction: boolean;
        /**
         * EmissionAvis
         */
        emissionAvis: boolean;
        /**
         * PassageSansSuite
         */
        passageSansSuite: boolean;
        /**
         * PriseEnCharge
         */
        priseEnCharge: boolean;
        /**
         * RetourPriseEnCharge
         */
        retourPriseEnCharge: boolean;
        /**
         * AnnulationTransfert
         */
        annulationTransfert: boolean;
        /**
         * MiseEnConformite
         */
        miseEnConformite: boolean;
        /**
         * RetourConformite
         */
        retourConformite: boolean;
        /**
         * AdminMDV
         */
        adminMDV: boolean;
        /**
         * Copie
         */
        copie: boolean;
        /**
         * Decision
         */
        decision: boolean;
        /**
         * RetourDecision
         */
        retourDecision: boolean;
        /**
         * MajAdmin
         */
        mAJAdmin: boolean;
        /**
         * Prorogation
         */
        prorogation: boolean;
        /**
         * Import
         */
        impor: boolean;
        /**
         * Duplication
         */
        duplication: boolean;
        /**
         * TransfertConformite
         */
        transfertConformite: boolean;
        /**
         * TransfertAutreBO
         */
        transfertAutreBO: boolean;
        /**
         * TransfertPropriete
         */
        transfertPropriete: boolean;
    }
    interface IDossierResume {
        /**
         * Idfadi_IdntDoss
         */
        idDossier: string;
        /**
         * VersDoss
         */
        versionDossier: number;
        /**
         * Dtfccr_DateCretDoss
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateCreationDossier: string;
        /**
         * Lbfpnm_NomRaisSoclEmpr
         */
        nomRaisonSocialeEmprunt: string;
        /**
         * Lbfaes_LiblEnttPrprDoss
         */
        libelleEntiteProprietaireDossier: string;
        /**
         * Lbfiba_LiblAgncAffec
         */
        libelleAgenceAffectation: string;
        /**
         * Cefado_CodeEttDoss
         */
        codeEtatDossier: number;
        /**
         * Cdfpci_CodeTitrCivl
         */
        codeTitreCivilite: string;
        /**
         * Dmfidm_DateDernMaj
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateDernierMAJ: string;
        /**
         * Cefwou_CodeEtatOuvrDoss
         */
        codeEtatOuvertureDossier: number;
        /**
         * Idfaec_IdntAgntConnDoss
         */
        idAgentConnaissanceDossier: string;
        /**
         * Ctfado_TypeDoss
         */
        typeDossier: number;
        /**
         * Cdfcni_CodeTypeObjtComl
         */
        codeTypeObjetCommercialisation: string;
        /**
         * Cdfcno_CodeNatrFinn
         */
        codeNatureFinancier: string;
        /**
         * Cdfcke_CodeCatgEmpr
         */
        codeCategorieEmprunt: string;
        /**
         * Lbfoa5_Ville
         */
        ville: string;
        /**
         * Mcfoof_CoutTotlObjt
         */
        coutTotalObjet: number;
        /**
         * Idfaei_IdntAgntInstrDoss
         */
        idAgentInstructionDossier: string;
        /**
         * Lbfpen_NomPres
         */
        nomPres: string;
        /**
         * Llfcco_LiblConvPres
         */
        libelleConventionPres: string;
        /**
         * Idfas1_1erElmntStrc
         */
        premierElementStructure: string;
        /**
         * Idfas2_2eElmntStrc
         */
        deuxiemeElementStructure: string;
        /**
         * Idfas3_3eElmntStrc
         */
        troisiemeElementStructure: string;
        /**
         * Idfas4_4eElmntStrc
         */
        quatriemeElementStructure: string;
        /**
         * Idfas5_5eElmntStrc
         */
        cinquiemeElementStructure: string;
        /**
         * Idfas6_6eElmntStrc
         */
        sixiemeElementStructure: string;
        /**
         * Idfast_IdntelemStrcInstr
         */
        idElementStructureInstruction: string;
        /**
         * Lidanp_NomPatrPartc
         */
        nomPatrPartc: string;
        /**
         * Lidapp_PremPrnmEttCivlPartc
         */
        premierPrenomEtatCivilitePartc: string;
        /**
         * Dffavl_DateFinValdOffr
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateFinValiditeOffre: string;
        /**
         * NatureProjet
         */
        natureProjet: number;
        /**
         * Npfcof_NbPerdValdOffrCont
         */
        nombrePeriodeValiditeOffreContrat: number;
        /**
         * Dtfieo_DateEdtnOffr
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateEditionOffre: string;
        /**
         * Cdfaod_CodeOrigDemn
         */
        codeOrigineDemande: number;
        /**
         * Dgfano_DateHorzProj
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHorizonProjet: string;
        /**
         * Cdfado_CodeVisbInstr
         */
        codeVisbInstruction: number;
        /**
         * Cdfiei_CodeImprParExprVers
         */
        codeImprParExpressionVersement: number;
        /**
         * Cdfiag_CodeAppliChrgDoss
         */
        codeApplicationChargeDossier: number;
        /**
         * Cdfadv_CodeDevs
         */
        codeDevise: string;
        /**
         * Ctfipi_CodePrcsInstr
         */
        codeProcessusInstruction: string;
        /**
         * Ctfitr_CodeTrtComp
         */
        codeTraitementComp: string;
        /**
         * Cefipc_CodeEttPrsChrgDoss
         */
        codeEtatPresenceChargeDossier: number;
        /**
         * Cefiac_CodeEttActvDoss
         */
        codeEtatActiviteDossier: number;
        /**
         * Ctfaen_CodeTypeEngg
         */
        codeTypeEngagement: string;
        /**
         * Idfaep_IdntEnttTitlClnt
         */
        idEntiteTitulaireClient: string;
        /**
         * Idfada_IdntAgntPourDecsConf
         */
        idAgentPourDecisionConf: string;
        /**
         * Ctfats_CodeTypeElmtStrc
         */
        codeTypeElementStructure: string;
        /**
         * Idfabp_IdntAgntBoActlChrgDoss
         */
        idAgentBoActuarielChargeDossier: string;
        /**
         * Idfabi_IdntEnttPourTrnfBo
         */
        idEntitePourTransfertBo: string;
        /**
         * Ctfabe_CodeTypeElmtStrcBo
         */
        codeTypeElementStructureBo: string;
        /**
         * Idfab1_1erElmntStrc
         */
        premierElementStructure1: string;
        /**
         * Idfab2_2eElmntStrc
         */
        deuxiemeElementStructure1: string;
        /**
         * Idfab3_3eElmntStrc
         */
        troisiemeElementStructure1: string;
        /**
         * Idfab4_4eElmntStrc
         */
        quatriemeElementStructure1: string;
        /**
         * Idfab5_5eElmntStrc
         */
        cinquiemeElementStructure1: string;
        /**
         * Idfab6_6eElmntStrc
         */
        sixiemeElementStructure1: string;
        /**
         * Idfaes_IdntAgntPrprDoss
         */
        idAgentProprietaireDossier: string;
        /**
         * Ctfcse_CodeEtpeSiml
         */
        codeEtapeSimulation: number;
        /**
         * Ctfiai_CodeAlrt
         */
        codeAlerte: number;
        /**
         * Ctfaev_CodeTypeEven
         */
        codeTypeEven: string;
        /**
         * Ctfiax_CodeAlrtEmis
         */
        codeAlerteEmis: string;
        /**
         * Nofiax_NumeAlrt
         */
        numeroAlerte: number;
        /**
         * Nofaed_NumeReltEvenDoss
         */
        numeroRelationEvenDossier: number;
        /**
         * RefrExtnAgntConn
         */
        referenceExterneAgentConnaissance: string;
        /**
         * Idfipp_IdntParnPrnc
         */
        idParentPrincipal: string;
        /**
         * Llfic1_CritRechAppli1
         */
        critereRechercheApplication1: string;
        /**
         * Llfic2_CritRechAppli2
         */
        critereRechercheApplication2: string;
        /**
         * Llfic3_CritRechAppli3
         */
        critereRechercheApplication3: string;
        /**
         * Llfic4_CritRechAppli4
         */
        critereRechercheApplication4: string;
        /**
         * Llfic5_CritRechAppli5
         */
        critereRechercheApplication5: string;
        /**
         * ActionsAutorisees
         */
        actionsAutorisees: IAutorisationDossier;
    }
}

declare namespace ICRest.Modeles.TransmettrePropCnp {
    interface IEntreeTransmissionProposition {
        /**
         * IdntDoss
         */
        idDossier: string;
        /**
         * Idfaos_IdntPropAssrCnp
         */
        idPropAssuranceCnp: string;
        /**
         * Nufaaa_IdntExtnAccs
         */
        idExterneAccessoire: string;
        /**
         * Idws_IdntPers
         */
        idPersonne: string;
        /**
         * ForcerControles
         */
        forcerControles: boolean;
    }
    interface IEtatDossierAssuranceLecture {
        /**
         * LibelleEtat
         */
        libelleEtat: string;
        /**
         * LibelleDossier
         */
        libelleDossier: string;
        /**
         * LibelleDemande
         */
        libelleDemande: string;
        /**
         * LibelleDateEnvoi
         */
        libelleDateEnvoi: string;
    }
    interface IDecisionDossierAssuranceLecture {
        /**
         * AccesLectureDecision
         */
        accessoireLectureDecision: boolean;
        /**
         * AvisValide
         */
        avisValide: boolean;
        /**
         * CodeDecision
         */
        codeDecision: number;
        /**
         * LibelleCredit
         */
        libelleCredit: string;
        /**
         * LibelleAvis
         */
        libelleAvis: string;
        /**
         * LibelleErreur
         */
        libelleErreur: string;
    }
    interface IDossierAssuranceLecture {
        /**
         * EtatDossierAssurance
         */
        etatDossierAssurance: IEtatDossierAssuranceLecture;
        /**
         * DecisionDossierAssurance
         */
        decisionDossierAssurance: IDecisionDossierAssuranceLecture;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface IResultatCreationDossierCNP {
        /**
         * IdDossierCNP
         */
        idDossierCNP: string;
        /**
         * LibErreur
         */
        libelleErreur: string;
        /**
         * DossierAssurance
         */
        dossierAssurance: IDossierAssuranceLecture;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.TypeEds {
    interface IScElement {
    }
    interface IScTypeEds extends IScElement {
        /**
         * Idfcej_IdntCaisEpar
         */
        idCaisseEpargne: number;
        /**
         * Ctfats_CodeTypeDelmStrc
         */
        codeTypeDelementDeStructure: string;
        /**
         * Lbfats_LiblTypeDelmStrc
         */
        libelleTypeDelementDeStructure: string;
        /**
         * Cdfat1_CodeIndicDentPrpr
         */
        entiteProprietaire: number;
        /**
         * Cdfat2_CodeIndicStrcInstr
         */
        codeIndiceStructureInstruction: number;
        /**
         * Cnfarg_RangNivStrc
         */
        rangNiveauStructure: number;
        /**
         * Ctfaoe_CodeMetrCrdtEds
         */
        structureDinstruction: number;
    }
}

declare namespace ICRest.Modeles.ValidationAccordClient {
    interface IEntreeValidationAccordClient {
        /**
         * sIdntDoss
         */
        idDossier: string;
        /**
         * sIdntPlanFin
         */
        idPlanFin: string;
        /**
         * bForcerCtrlAvtAccClient
         */
        forcerCtrlAvtAccClient: boolean;
    }
    interface IAnomalieLecture {
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd
         */
        dateHeureAno: string;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * ClasseAnomalie
         */
        classeAnomalie: number;
    }
    interface ISortieValidationAccordClient {
        /**
         * ValidationReussie
         */
        validationReussie: boolean;
        /**
         * AnomaliesPreRequis
         */
        anomaliesPreRequis: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlAvtAccClient
         */
        anomaliesCtrlAvtAccClient: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.ValiderAccordPreteur {
    interface IEntreeControleDecision {
        /**
         * IdntDoss
         */
        idDossier: string;
        /**
         * DateAccordPreteur
         * Type date au format yyyy-MM-dd
         */
        dateAccordPreteur: string;
        /**
         * bForcerCtrlAvtAccPret
         */
        forcerControleAvtAccessoirePret: boolean;
        /**
         * bForcerCtrlBale2
         */
        forcerControleBale2: boolean;
        /**
         * bForcerCtrlReglementaire
         */
        forcerControleReglementaire: boolean;
    }
    interface IEntreePasserAccordPreteur {
        /**
         * EntreeControleDecision
         */
        entreeControleDecision: IEntreeControleDecision;
        /**
         * Avis
         */
        avis: string;
        /**
         * bCtrlDecisionEffectue
         */
        controleDecisionEffectue: boolean;
        /**
         * bCtrlReglementaireForcee
         */
        controleReglementaireForcee: boolean;
        /**
         * bCtrlCtfprmA3Forcee
         */
        controleCtfprmA3Forcee: boolean;
    }
    interface IRetourControleDecision {
        /**
         * ValidationPossible
         */
        validationPossible: boolean;
        /**
         * Anomalies
         */
        anomalies: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlAvtAccPret
         */
        anomaliesControleAvtAccessoirePret: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlReglementaire
         */
        anomaliesControleReglementaire: Array<IAnomalieLecture>;
        /**
         * NoteBale2
         */
        noteBale2: string;
        /**
         * LibelleRisque
         */
        libelleRisque: string;
        /**
         * Marge
         */
        marge: string;
        /**
         * MargeCom
         */
        margeCom: string;
        /**
         * LibelleErreurDelegationTaux
         */
        libelleErreurDelegationTaux: string;
        /**
         * AnomaliesCtrlBale2
         */
        anomaliesControleBale2: Array<IAnomalieLecture>;
        /**
         * CtrlReglementaireForcee
         */
        controleReglementaireForcee: boolean;
        /**
         * CtrlCtfprmA3Forcee
         */
        controleCtfprmA3Forcee: boolean;
    }
    interface IRetourPasserAccordPreteur {
        /**
         * ValidationReussie
         */
        validationReussie: boolean;
        /**
         * RetourControleDecision
         */
        retourControleDecision: IRetourControleDecision;
        /**
         * Anomalies
         */
        anomalies: Array<IAnomalieLecture>;
        /**
         * AnomaliesPreRequis
         */
        anomaliesPreRequis: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlBale2ApresValidation
         */
        anomaliesControleBale2ApresValidation: Array<IAnomalieLecture>;
        /**
         * AnomaliesCtrlAvantEnvSaccef
         */
        anomaliesControleAvantEnvoiSaccef: Array<IAnomalieLecture>;
    }
}

declare namespace ICRest.Modeles.VerifierComptePayeur {
    interface IElementLecture {
        /**
         * Idws
         */
        idws: string;
    }
    interface IMandatLecture extends IElementLecture {
        /**
         * Cocxbq_CodeCaisse
         */
        codeCaisse: string;
        /**
         * Dgfdms_DateDeSignature
         * Type date au format yyyy-MM-dd
         */
        dateDeSignature: string;
        /**
         * Ctfdfm_TypeFrequenceMandat
         */
        typeFrequenceMandat: string;
        /**
         * Ctfdma_TypeMandatSepaSdd
         */
        typeMandatSepaSdd: number;
        /**
         * Cnfdma_CodeNatureMandat
         */
        codeNatureMandat: number;
        /**
         * Idfdma_RefeMandat
         */
        referenceMandat: string;
        /**
         * Llfdcr_NomDuCreancier
         */
        nomDuCreancier: string;
        /**
         * Llfdac_AdresseDuCreancier
         */
        adresseDuCreancier: string;
        /**
         * Cofdpc_CodePostalDuCreancier
         */
        codePostalDuCreancier: string;
        /**
         * Lcfdvc_VilleDuCreancier
         */
        villeDuCreancier: string;
        /**
         * Ctfdpa_CodePaysDuCreancier
         */
        codePaysDuCreancier: string;
        /**
         * Llfdpo_LibDuPaysDonneurOrdre
         */
        libelleDuPaysDonneurOrdre: string;
        /**
         * Idfdcr_IdntCreancierSepaDomaine
         */
        idCreancierSepaDomaine: string;
        /**
         * Llfddb_NomDuDebiteur
         */
        nomDuDebiteur: string;
        /**
         * Idfdb3_CodeBicDebiteur
         */
        codeBicDebiteur: string;
        /**
         * Idfdi3_NumeroIbanCompteDebiteur
         */
        numeroIbanCompteDebiteur: string;
        /**
         * Idfddb_IdntDuDebiteur
         */
        idDuDebiteur: string;
        /**
         * Llfdad_AdresseDuDebiteur
         */
        adresseDuDebiteur: string;
        /**
         * Cofdpd_CodePostalDuDebiteur
         */
        codePostalDuDebiteur: string;
        /**
         * Lcfdvd_VilleDuDebiteur
         */
        villeDuDebiteur: string;
        /**
         * Ctfdpd_CodePaysDuDebiteur
         */
        codePaysDuDebiteur: string;
        /**
         * Llfdpd_LibPaysDuDebiteur
         */
        libellePaysDuDebiteur: string;
        /**
         * Llfdci_LibCreancierInitial
         */
        libelleCreancierInitial: string;
        /**
         * Idfdct_IdntCreancierInitial
         */
        idCreancierInitial: string;
        /**
         * Llfddf_LibDebiteurFinal
         */
        libelleDebiteurFinal: string;
        /**
         * Idfddf_IdntDebiteurFinal
         */
        idDebiteurFinal: string;
    }
}

declare namespace ICRest.Modeles.QualiteDossier {
    interface IQualiteDossier {
        /**
         * code de l'établissement
         */
        idEtablissement: string;
        /**
         * indicateur de l'application appellante
         *
         * ex : "DEFI" pour demande de financement
         *        "Instruction" pour instruction vente
         *
         * A valider
         */
        codeApplication: string;
        /**
         * Identifiant du dossier DEFI ou crédit instruction
         */
        idDossier: string;
        categorieEmprunteur: string;
        idEmprunteur: string;
        typePersonne: string;
        /**
         * Determine si emprunteur EI ou EIRL pour les personnes physique
         */
        indTypEmprunteurInd: string;
        marche: string;
        natureFinancement: string;
        typeObjetReglemente: string;
        typeObjetCommercialise: string;
        listeGarantie: Array<IGarantie>;
        listeAssurance: Array<IAssurance>;
    }
    interface IRepQualiteDossier {
        dossierDNPresent: boolean;
        dossierCompletDN: boolean;
        piecesToutesValidees: boolean;
        piecesKO: boolean;
        /**
         * est à true quand PIECO indique des pièces supplémentaire par rapport aux pièces contrôlés dans la P92X
         */
        piecesPiecoSupl: boolean;
    }
    interface IGarantie {
        idPersonne: string;
        natureGarantie: string;
    }
    interface IAssurance {
        idPersAssuree: string;
        assuranceCNP: boolean;
    }
    interface IPieceConcours {
        codeEtab: string;
        idDemandeFinancement: string;
        idConcours: string;
        codeCategoriePiece: string;
        numSequence: number;
        numeroPersonne: string;
        codeStatutPiece: string;
        idPiece: string;
        codeTypeEntite: string;
        idDemandePieco: string;
        idPersonne: string;
        codeTypeProcessusMetier: string;
        idProcessusPlusTard: string;
        codeIndicateurObligatoire: string;
        codeIndicateurCasEcheant: string;
        codeRegroupementRestitution: string;
        numeroOrdre: number;
        codeClassePJClient: string;
        codeSsClassePJClient: string;
        codeNaturePJClient: string;
        dateCreation: string;
        dateMaj: string;
        idAgentCreation: string;
        idAgentMaj: string;
        idExtCredit: string;
    }
}

declare namespace ICRest.Services.QualiteDossier {
    interface IQualiteDossierService {
        getQualiteDossier(qualiteDossier: Modeles.QualiteDossier.IQualiteDossier): ng.IPromise<Modeles.QualiteDossier.IRepQualiteDossier>;
    }
    class QualiteDossierService implements IQualiteDossierService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: RestService);
        getQualiteDossier(qualiteDossier: Modeles.QualiteDossier.IQualiteDossier): ng.IPromise<Modeles.QualiteDossier.IRepQualiteDossier>;
    }
}

declare namespace ICRest.Modeles.Eds {
    interface IContextePoste {
        /**
         * Code banque sous lequel l'établissement est répertorié à la Banque de France
         */
        codeEtablissement: string;
        identifantPosteFonctionnel: number;
        referencePosteFonctionnel: number;
        typeElementStructurePF: string;
        identifiantEDSRattachementPF: number;
        referenceEDSRattachementPF: number;
        typeEDSRattachementPF: string;
        typeFonction: string;
        qualiteAffectationAgentPF: string;
        identifiantGuichetOperation: number;
        referenceGuichetOperation: number;
        typeElementStructureGuichet: string;
        identifiantEDSRattachementGuichet: number;
        referenceEDSRattachementGuichet: number;
        typeEDSRattachementGuichet: string;
        typeAgenceEDSRattachementPF: string;
    }
}

declare namespace ICRest.Modeles.Eds {
    interface IDonneesCommunesEDS {
        /**
         * Code banque sous lequel l'établissement est répertorié à la Banque de France
         */
        codeEtablissement: string;
        /**
         * Numéro d'identification interne d'un élément de structure d'un Etablissement du GCE. Correspond à un type :
         * - siège
         * - agence
         * - service
         * - poste fonctionnel
         * - ...
         *
         * Numéro chronologique attribué par le système : Référence unique dans MYSYS (identifiant interne).
         */
        identifiantElementStructure: number;
        /**
         * Indique le type organisationnel d'un élément de structure d'un Etablissement du GCE. Typologie gérée dans la table CU1B.
         * Typologie propre à chaque Etablissement du GCE. Certains types d'EDS sont INVARIANTS dans le SI et sont communs à tous les Etablissements :
         * 008 - Siège
         * 003 - Agence (Point de vente)
         * 010 - GAB
         * 020 - Guichet (au sens arrêté de caisse)
         * 001 - Poste fonctionnel
         * 002 - Service
         * 009 - Entité Administrative (Guichet interbancaire)
         *
         * Attention : un type d'EDS invariant peut avoir un libellé spécifique par Etablissement (exemple : type '003', agence ou point de vente)
         */
        typeElementStructure: string;
        /**
         * Dénomination courte du type de l'élément de  structure. Exemple :
         * EA     - Entité administrative
         * AGENCE - Agence
         * GROUPE - Groupe commercial
         * ...
         */
        libelleCourtTypeEDS: string;
        /**
         * Dénomination du type de l'élément de structure.
         */
        libelleLongTypeEDS: string;
        /**
         * Référence externe d'un élément de structure dans un établissement du GCE. Référence connue de l'Etablissement. Identifiant défini en fonction du type d'élément de structure
         */
        referenceExterneEDS: number;
        /**
         * ibellé de désignation d'un élément de structure appartenant à un Etablissement du GCE.
         */
        libelleElementStructure: string;
        /**
         * Désignation décrivant l'élément de structure.
         * Cette désignation est construite par concaténation du libellé court du type d'EDS et de la désignation de l'EDS.
         * Sauf si l'EDS est un poste fonctionnel, on trouve alors le Nom + Prénom de l'Agent titulaire du PF.
         */
        libelleCourtEDS: string;
        /**
         * Désignation décrivant l'élément de structure.
         * Cette désignation est construite par concaténation du libellé long du type d'EDS et de la désignation de l'EDS.
         * Si l'EDS est un poste fonctionnel, on trouve alors le Nom + Prénom de l'Agent titulaire du poste fonctionnel, précédé de la civilité (Mr...).
         */
        libelleLongEDS: string;
        /**
         * Date de début de validité de l’élément de structure.
         * Type date au format yyyy-MM-dd
         */
        dateDebutValiditeEDS: string;
        /**
         * Date de fin de validité de l’élément de structure.
         * Type date au format yyyy-MM-dd
         */
        dateFinValiditeEDS: string;
        /**
         * Identifiant de l'élément de structure qui dirige : Responsable hiérarchique (poste fonctionnel).
         */
        identifiantEDSDirigeant: number;
    }
}

declare namespace ICRest.Eds.Services {
    interface IEdsService {
        recherche(typeRecherche: number, codeEtab: string, type: string, identifiantExterne: string, libelle: string, identifiantInterne: string): ng.IPromise<ICRest.Modeles.Eds.IDonneesCommunesEDS[]>;
    }
    class EdsService implements IEdsService {
        private restService;
        private cacheService;
        static $inject: Array<string>;
        constructor(restService: ICRest.Services.IRestService, cacheService: ICRest.Services.Common.ICacheService);
        /**
         * Recherche d'un EDS
         * @param typeRecherche code: 1 Par identifiant interne d’EDS, 2 Par référence externe et par type d'EDS, 3 Par libellé d'EDS, 4 Par type d'EDS
         * @param codeEtab code établissement
         * @param type type d'EDS
         * @param identifiantExterne identifiant externe de l'EDS
         * @param libelle libellé de l'EDS
         * @param identifiantInterne identifiant interne de l'EDS
         */
        recherche(typeRecherche: number, codeEtab: string, type: string, identifiantExterne: string, libelle: string, identifiantInterne: string): ng.IPromise<ICRest.Modeles.Eds.IDonneesCommunesEDS[]>;
    }
}

declare namespace ICRest.Modeles.EntiteTitulaire.Informationentitetitulaire {
    interface IInformationEntiteTitulaire {
        /**
         * Caractéristiques de l'entité titulaire (libellé, mode de composition, code usage, ...)
         */
        caracteristiqueEntiteTitulaire: ICaracteristiqueEntiteTitulaire;
        compositionEntiteTitulaire: ICompositionEntiteTitulaire;
    }
    interface ICompositionEntiteTitulaire {
        listePersonneTitulaire: Array<IPersonneEntiteTitulaire>;
        listePersonneUsufruitier: Array<IPersonneEntiteTitulaire>;
        listePersonneMandataire: Array<IPersonneEntiteTitulaire>;
    }
    interface ICaracteristiqueEntiteTitulaire {
        /**
         * Désignation courte de l'entité titulaire, optionnelle et choisie au niveau de l'entité titulaire, lorsque la désignation bancaire calculée sur 32 caractères ne convient pas au client (cas de forçage).
         * Cette désignation sera utilisée dans la ligne  V1 de l'adresse.
         */
        designationEntiteTitulaire: string;
        /**
         * Détermine si l'entité titulaire est privée ou professionnelle.
         * Valeurs :
         *  - 1 Usage privé
         *  - 2 Usage professionnel
         */
        codeUsageEntiteTitulaire: string;
        /**
         * Mode de relation des personnes composant une entité titulaire.
         * Valeurs :
         *  - 1 mode simple
         *  - 2 mode joint entre époux
         *  - 3 mode joint entre tiers
         *  - 4 mode indivision
         */
        modeCompositionEntiteTitulaire: string;
        /**
         * Complément désignation courte de l'entité titulaire, optionnelle et choisie au niveau de l'ET, lorsque la désignation bancaire calculée sur 2x32 caractères
         * ne convient pas au client (cas de forçage).
         * Ce complément de désignation sera utilisée dans la ligne V2 de l'adresse.
         */
        complementDesignationBancaire: string;
        /**
         * Définit l'état de l'entité titulaire à une date donnée dans la gestion administrative.
         * Valeurs :
         *  - 0 Actif
         *  - 1 Clôturé
         */
        codeEtatEntiteTitulaire: string;
        /**
         * Date enregistrement de l'entité titulaire.
         * Type date au format yyyy-MM-dd
         */
        dateMAJEntiteTitulaire: string;
        /**
         * Code indiquant le motif de la clôture administrative d'une entité titulaire.
         * Valeurs :
         *  - ' ' Non clôturé
         *  - '1' Plus d'activité bancaire
         *  - '2' Décédé
         *  - '3' Transféré
         *  - '4' Incident
         *  - '5' Indésirable
         *  - '6' Séparé
         *  - '7' Fusionné
         */
        codeMotifClotureEntiteTitulaire: string;
        /**
         * Date de fermeture de l'entité titulaire.
         * Type date au format yyyy-MM-dd
         */
        dateClotureEntiteTitulaire: string;
        /**
         * Spécifie le type d'indivision.
         * Valeurs :
         *  - 1 Mode indivision successorale
         *  - 2 Mode indivision conventionnel avec solidarité
         *  - 3 Mode indivision conventionnel sans solidarité
         */
        sousCodeModeCompositionET: string;
        /**
         * Numéro d'identification de l' agent de gestion de l'entité titulaire.
         */
        codeAgentGestionEntiteTitulaire: number;
        /**
         * Libellé de l'EDS de Gestion de l'entité titulaire.
         */
        libelleEDSGestionEntiteTitulaire: string;
        /**
         * Libellé associé au Code Etat de l'entité titulaire.
         */
        libelleEtatEntiteTitulaire: string;
        /**
         * Libellé associé au Type de désignation de l'entité titulaire.
         */
        libelleTypeDesignationEntiteTitulaire: string;
        /**
         * Libellé associé au Code usage de l"entité titulaire.
         */
        libelleUsageEntiteTitulaire: string;
        /**
         * Libellé associé au Mode de composition de l'entité titulaire.
         */
        libelleModeCompositionEntiteTitulaire: string;
        /**
         * Libellé associé au Sous-code Mode de composition de l'entité titulaire.
         */
        libelleSousCodeModeCompositionET: string;
        /**
         * Libellé de l'EDS de Domiciliation de l'entité titulaire.
         */
        libelleEDSDomiciliationEntiteTitulaire: string;
        /**
         * Libellé associé au Code Motif de clôture de l'entité titulaire.
         */
        libelleMotifClotureEntiteTitulaire: string;
        /**
         * Identifiant de l'agence de domiciliation de l'entité titulaire.
         */
        identifiantEDSDomiciliationEntiteTitulaire: number;
        /**
         * Identifiant d'un Etablissement du Réseau BPCE.
         * Correspond au code Banque sous lequel un établissement du réseau BPCE est répertoriée par la
         * Banque de France.
         */
        codeEtablissement: string;
        /**
         * Numéro d'identification d'un client détenteur de contrat(s) de produit/service dans le SI d'un établissement de BPCE.
         * Synonyme : Client bancaire
         * Une entité titulaire (ET) se compose d'une ou plusieurs personnes.
         */
        identifiantEntiteTitulaire: number;
        /**
         * Numéro d'identification d'une adresse en tant que localisation géographique.
         */
        identifiantAdresseEntiteTitulaire: number;
        /**
         * Identifiant de l'EDS de gestion de l'entité titulaire.
         */
        identifiantEDSGestionEntiteTitulaire: number;
        /**
         * Référence externe du Géré par = EDS de gestion de l'entité titulaire
         */
        refExterneEDSGestionET: number;
        /**
         * Référence externe du Domicilié à = EDS de domiciliation de l'entité titulaire
         */
        refExterneEDSDomiciliationET: number;
        /**
         * Le type de désignation bancaire codifie toutes les désignations bancaires standards (première ligne de l'intitulé bancaire) que le client est susceptible de choisir.
         * Le type de désignation bancaire est fonction des personnes composant l'entité titulaire, du mode de composition et de l'usage.
         * Valeurs :
         *  * POUR ET MODE SIMPLE
         *  11 Désignation de la personne
         *  * POUR ET A USAGE PROFESSIONNEL
         *  21 Nom commercial
         *  22 Désignation courte de l'établissement
         *  23 Enseigne commerciale de l'établissement
         *  * POUR ET MODE JOINT ENTRE EPOUX ET USAGE
         *  PRIVE
         *  31 Mr ou Mme+nom patronymique Mr+prénom Mr
         *  32 Mr ou Mme+nom patronymique Mr+nom
         *  patronymique Mme+prénom Mme
         *  * POUR ET MODE JOINT ET USAGE PRIVE
         *  41 Désignation personne 1 ou désignation
         *  personne 2
         *  42 Désignation personne 2 ou désignation
         *  personne 1
         *
         *  99 Forçage
         */
        codeTypeDesignationEntiteTitulaire: string;
        /**
         * Type élément structure
         */
        typeElementStructure: string;
        /**
         * Nouvelle identifiant élement de structure gestion de l'entité titulaire
         */
        identEDSGestionETNouveau: number;
        /**
         * Nouvelle identifiant élement de structure domicilation de l'entité titulaire
         */
        identEDSDomiciliationETNouveau: number;
        /**
         * identifiant élement de structure du guichet de l'entité titulaire
         */
        identifiantEDSGuichet: number;
    }
    interface IPersonneEntiteTitulaire {
        /**
         * Numéro d'identification de la personne dans le SI d'un Etablissement.
         * Référence interne MYSYS.
         * Personne référencée comme client, tiers ou prospect.
         */
        identifiantTiers: number;
        /**
         * Numéro d'identification de l'activité professionnelle d'une personne dans le SI d'un Etablissement du Groupe BPCE.
         * Numéro chrono attribué par le système.
         * Une personne morale est enregistrée sous une seule activité : valeur 1.
         * Une personne physique peut avoir plusieurs activités en tant que professionnel : enregistrement chrono.
         * Un professionnel est référencé dans le SI d'un Etablissement du Groupe BPCE par :
         *  - NODAPE / Numéro de personne
         *  - NODAPS / Numéro chrono Professionnel
         * Constitue une référence unique dans MYSYS.
         */
        identifiantProfessionnel: number;
        /**
         * Numéro d'identification du lieu d'activité d'un
         * professionnel dans le SI d'un Etablissement du Groupe BPCE.
         * Implantation d'une activité d'un professionnel.
         * Peut correspondre à un établissement au sens INSEE.
         * Numéro chrono attribué par le système.
         * Identification du lieu :
         *  - NODAPE / Numéro de personne
         *  - NODAPS / Numéro chrono Professionnel
         *  - NODALS / Numéro chrono Lieu d'activité
         * Constitue une référence unique dans MYSYS.
         */
        identifiantLieuActivite: number;
        /**
         * Dénomination commerciale se rapportant à un fonds
         * de commerce exploité par une société ou assimilée
         * Nom commercial du professionnel. C'est la dénomination vis à vis de la clientèle. Elle peut correspondre à l'enseigne. Une société peut avoir un nom commercial différent pour chacun des fonds de commerce qu'elle exploite.
         * Exemples :  La Samaritaine, But ...
         */
        nomCommercialProfessionnel: string;
        /**
         * Enseigne du lieu d'activité d'un professionnel.
         * Signe/marque/appellation apposé sur un établissement commercial le distinguant des autres établissements. L'enseigne peut être commune.
         * Elle désigne :
         * - un nom de personne
         * - un emblème
         * - une dénomination de fantaisie
         * Exemple : Café du Commerce
         */
        enseigneCommercialeLieuActivite: string;
        /**
         * Libellé court du lieu d'activité du Professionnel.
         */
        designationCourteLieuActivite: string;
        /**
         * Permet de désigner la personne responsable d'une entité titulaire
         * Gestion des incidents sur le compte de dépôts : les co-titulaires d'un compte collectif peuvent désigner celui d'entre eux qui sera considéré comme responsable des incidents pouvant survenir sur le compte.
         * En cas de survenance d'incidents :
         *  - le co-titulaire désigné : interdiction bancaire sur l'ensemble de ses comptes
         *  - pour les autres co-titulaires : interdiction bancaire sur le seul compte collectif en cause.
         * Valeurs :
         * '0' non responsable
         * '1' responsable
         */
        indicateurResponsableCompteET: string;
        /**
         * Détermine le numéro d'ordre d'une personne donnée dans la composition d'une Entité Titulaire.
         * Numéro chrono attribué par le système à chaque création de personne dans l'ET.
         */
        codeRangEntiteTitulaire: string;
        /**
         * Désignation de la personne physique, du professionnel ou du lieu d'activité :
         *  - Désignation courte du particulier si personne physique
         *  - Nom commercial si professionnel
         *  - Désignation courte du lieu d'activité si lieu d'activité
         */
        designationTiers: string;
        /**
         * Indique quelle est la nature du lien Personne / Entité titulaire.
         * Valeurs :
         * PE : Lien Entité Titulaire / Personne
         * PR : Lien Entité Titulaire / Professionnel
         * LA : Lien Entité Titulaire / Lieu d'activité
         */
        natureLienET: string;
        /**
         * Pourcentage de Nue Propriété (valeur max 100,00 %)
         */
        pourcentageNuePropriete: number;
        /**
         * Pourcentage de pleine propriété (valeur max 100,00 %)
         */
        pourcentagePleinePropriete: number;
        /**
         * Pourcentage d'usufruit (valeur max 100,00 %)
         */
        pourcentageUsufruit: number;
        /**
         * Personne titulaire à qui on a affecté l'adresse de l'entité titulaire. (Notion non applicable aux usufruitiers).
         */
        indicateurAffectationAdresse: boolean;
        /**
         * Le type de mandat permet d'enregistrer une
         * procuration qu'accorde un client sur tout
         * ou partie de ses comptes à une autre personne.
         *
         *            Valeurs :
         * 'G'        Procuration générale (sauf CDD,cpte titre,coffre)
         *            On donne procuration sur tous les comptes
         *            de la personne.
         * 'P'        Procuration générale par compte
         *            On donne procuration sur un compte
         *            en disposition
         * 'PS'       Procuration spéciale d'administration
         *            On donne le droit de gérer le compte, mais
         *            pas d'en bénéficier.
         * 'K'        Procuration spéciale porteur de carte pro
         *            On donne procuration sur les comptes support
         *            pour détention de carte
         */
        typeMandat: string;
    }
}

declare namespace ICRest.Modeles.EntiteTitulaire.Recherche {
    interface IEntiteTitulaire {
        /**
         * Numéro d'identification d'un client détenteur de contrat(s) de produit/service dans le SI d'un Etablissement du GCE.
         * Une ET se compose d'une ou plusieurs personnes.
         */
        identifiantEntiteTitulaire: number;
        /**
         * Identifiant d'un Etablissement de BPCE.
         * Correspond au code Banque sous lequel une Caisse ou un Etablissement du réseau CE est répertoriée par la Banque de France.
         */
        codeEtablissement: string;
        /**
         * Désignation courte de l'entité titulaire, optionnelle et choisie au niveau de l'entité titulaire, lorsque la désignation bancaire calculée sur 32 caractères ne convient pas au client (cas de forçage).
         * Cette désignation sera utilisée dans la ligne V1 de l'adresse.
         */
        designationEntiteTitulaire: string;
        /**
         * Détermine si l'entité titulaire est privée ou professionnelle.
         * Valeurs :
         *    - 1   Usage privé
         *    - 2   Usage professionnel
         */
        codeUsageEntiteTitulaire: string;
        /**
         * Mode de relation des personnes composant une entité titulaire.
         * Permet de qualifier le client détenteur d'un contrat.
         * Valeurs :
         *    - 1   mode simple
         *    - 2   mode joint entre époux
         *    - 3   mode joint entre tiers
         *    - 4   mode indivision
         */
        modeCompositionEntiteTitulaire: string;
        /**
         * Définit l'état de l'entité titulaire à une date donnée dans la gestion administrative des personnes.
         * Valeurs :
         *    - 0   Actif
         *    - 1   Clôturé
         */
        codeEtatEntiteTitulaire: string;
        /**
         * Précise le type d'indivision.
         * Valeurs :
         *    - 1   Mode indivision successorale
         *    - 2   Mode indivision conventionnel avec solidarité
         *    - 3   Mode indivision conventionnel sans solidarité
         */
        modeCompositionIndivision: string;
        /**
         * Complément de la désignation courte de l'entité titulaire,
         * optionnelle et choisie au niveau de l'ET, lorsque la désignation bancaire calculée sur 2x32 caractères ne convient pas au client (cas de forçage).
         * Ce complément de désignation sera utilisée dans la ligne V2 de l'adresse.
         */
        complementDesignationEntiteTitulaire: string;
    }
    interface IListePersonneRecherche {
        /**
         * Identifiant d'un Etablissement de BPCE.
         * Correspond au code Banque sous lequel une Caisse ou un Etablissement du réseau CE est répertoriée par la Banque de France.
         */
        codeEtablissement: string;
        /**
         * Numéro d'identification de la personne dans le SI d'un Etablissement.
         * Référence interne MYSYS.
         * Personne référencée comme client, tiers ou prospect.
         */
        identifiantPersonne1: number;
        /**
         * Numéro d'identification de la personne dans le SI d'un Etablissement.
         * Référence interne MYSYS.
         * Personne référencée comme client, tiers ou prospect.
         */
        identifiantPersonne2: number;
        /**
         * Numéro d'identification de la personne dans le SI d'un Etablissement.
         * Référence interne MYSYS.
         * Personne référencée comme client, tiers ou prospect.
         */
        identifiantPersonne3: number;
        /**
         * Numéro d'identification de la personne dans le SI d'un Etablissement.
         * Référence interne MYSYS.
         * Personne référencée comme client, tiers ou prospect.
         */
        identifiantPersonne4: number;
        /**
         * Numéro d'identification de la personne dans le SI d'un Etablissement.
         * Référence interne MYSYS.
         * Personne référencée comme client, tiers ou prospect.
         */
        identifiantPersonne5: number;
        /**
         * Numéro d'identification de la personne dans le SI d'un Etablissement.
         * Référence interne MYSYS.
         * Personne référencée comme client, tiers ou prospect.
         */
        identifiantPersonne6: number;
        /**
         * Numéro d'identification de la personne dans le SI d'un Etablissement.
         * Référence interne MYSYS.
         * Personne référencée comme client, tiers ou prospect.
         */
        identifiantPersonne7: number;
        /**
         * Numéro d'identification de la personne dans le SI d'un Etablissement.
         * Référence interne MYSYS.
         * Personne référencée comme client, tiers ou prospect.
         */
        identifiantPersonne8: number;
        /**
         * Numéro d'identification de la personne dans le SI d'un Etablissement.
         * Référence interne MYSYS.
         * Personne référencée comme client, tiers ou prospect.
         */
        identifiantPersonne9: number;
        /**
         * Numéro d'identification de la personne dans le SI d'un Etablissement.
         * Référence interne MYSYS.
         * Personne référencée comme client, tiers ou prospect.
         */
        identifiantPersonne10: number;
    }
}

declare namespace ICRest.Services.EntiteTitulaire {
    interface IGetRechercheEntiteTitulaireInput {
        codeEtablissement: string;
        identifiantTiers: number;
        typeRechercheEntiteTitulaire: string;
    }
    interface IGetInformationEntiteTitulaireInput {
        codeEtablissement: string;
        identifiantEntiteTitulaire: number;
    }
    interface IEntiteTitulaireService {
        /**
         * Apelle la ressource REST qui recherche les entités titulaires de la personne en GET
         * ATTENTION: Récupère également les ET fermée
         * @param codeEtablissement Numéro d'identification de l'établissement
         * @param identifiantTiers Numéro d'identification de la personne dans le SI d'un Etablissement. Référence interne MYSYS. Personne référencée comme client, tiers ou prospect.
         * @param typeRechercheEntiteTitulaire Valeur "1" Recherche par identifiant Tiers (n° personne) ==> 1 seule valeur sur Rest IT
         */
        getRechercheEntitesTitulaires(codeEtablissement: string, identifiantTiers: number, typeRechercheEntiteTitulaire: string): ng.IPromise<Modeles.EntiteTitulaire.Recherche.IEntiteTitulaire[]>;
        /**
         * Appel la ressource REST qui récupère les informations d'une entité titulaire'
         * @param codeEtablissement Numéro d'identification de l'établissement
         * @param identifiantEntiteTitulaire Identifiant de l'entité titulaire
         */
        getInformationEntiteTitulaire(codeEtablissement: string, identifiantEntiteTitulaire: number): ng.IPromise<Modeles.EntiteTitulaire.Informationentitetitulaire.IInformationEntiteTitulaire>;
    }
    class EntiteTitulaireService implements IEntiteTitulaireService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: ICRest.Services.IRestService);
        getRechercheEntitesTitulaires(codeEtablissement: string, identifiantTiers: number, typeRechercheEntiteTitulaire: string): ng.IPromise<Modeles.EntiteTitulaire.Recherche.IEntiteTitulaire[]>;
        getInformationEntiteTitulaire(codeEtablissement: string, identifiantEntiteTitulaire: number): ng.IPromise<Modeles.EntiteTitulaire.Informationentitetitulaire.IInformationEntiteTitulaire>;
    }
}

declare namespace ICRest.Impression.Models {
    interface IEditerDocumentsRequest {
        identifiantDossier: string;
        parametreEdition: IParametreEdition;
    }
    interface IAnomalieLecture {
        /**
         * IdntAno
         */
        idAno: string;
        /**
         * LiblAno
         */
        libelleAno: string;
        /**
         * TypeAno
         */
        typeAno: number;
        /**
         * DateHeurAno
         * Type date au format yyyy-MM-dd'T'HH:mm:ss.SSSZ
         */
        dateHeureAno: string;
        /**
         * IdntObjt
         */
        idObjet: string;
        /**
         * TypeCtrl
         */
        typeControle: number;
        /**
         * Idfaco_IdntCtrlRegl
         */
        idControleRegle: string;
    }
    interface IParamEditique {
        /**
         * Id
         */
        id: string;
        /**
         * Data
         */
        data: string;
    }
    interface IParametreEdition {
        /**
         * IdentifiantWsDocument
         */
        identifiantWsDocument: string;
        /**
         * CodeDocument
         */
        codeDocument: string;
        /**
         * CodeSignature
         */
        codeSignature: number;
        /**
         * NiveauTraitement
         */
        niveauTraitement: number;
        /**
         * IdEntiteFonctionnelle
         */
        idEntiteFonctionnelle: string;
        /**
         * CodeTypeEntite
         */
        codeTypeEntite: string;
        /**
         * ModeEdition
         */
        modeEdition: number;
        /**
         * TypeEditique
         */
        typeEditique: number;
        /**
         * FormatEditique
         */
        formatEditique: number;
        /**
         * Params
         */
        params: Array<IParamEditique>;
        /**
         * ForceCtrlEdition
         */
        forceControleEdition: boolean;
        /**
         * ForceCtrlGestion
         */
        forceControleGestion: boolean;
    }
    interface IDocument {
        /**
         * FluxImpression
         */
        fluxImpression: string;
        /**
         * Nom
         */
        nom: string;
        /**
         * Libelle
         */
        libelle: string;
    }
    interface IResultatEditionDocuments {
        /**
         * ListeDocument
         */
        listeDocument: Array<IDocument>;
        /**
         * AnomaliesLecture
         */
        anomaliesLecture: Array<IAnomalieLecture>;
    }
    interface IResultatEditionOffreLecture {
        /**
         * ListeDocumentsOffre
         */
        listeDocumentsOffre: Array<IDocument>;
        /**
         * ListeAnomalieControleEditionOffreLecture
         */
        listeAnomalieControleEditionOffreLecture: Array<IAnomalieLecture>;
        /**
         * ListeAnomaliePassageEnGestionLecture
         */
        listeAnomaliePassageEnGestionLecture: Array<IAnomalieLecture>;
        /**
         * ListeAnomalieLecture
         */
        listeAnomalieLecture: Array<IAnomalieLecture>;
    }
    interface IEditerOffrePretRequest {
        identifiantDossier: string;
        parametreEdition: IParametreEdition;
    }
}

declare namespace ICRest.Tiers.Models.CorporateActiviteProfessionnelle {
    interface ISituationFinanciere {
        /**
         * Détermine le montant brut de l'activité d'un professionnel sur un exercice annuel :
         * - Le chiffre d'affaires social concerne les entreprises total des ventes TTC de biens et de services
         * - Le montant du budget concerne plus particulièrement les collectivités locales : total des enveloppes de crédits permettant les dépenses de l'exercice.
         *
         * Exprimé en milliers d'euros.
         */
        montantChiffreAffaires: number;
        /**
         * Année de référence du chiffre d'affaire ou du montant du budget.
         */
        anneeChiffreAffaires: number;
        /**
         * Montant des apports (en biens ou numéraires) effectué par les actionnaires ou associés au moment de la création ou de l'augmentation de capital de la société. En milliers d'euros.
         */
        montantCapitalSocial: number;
        /**
         * Montant du capital social de la personne morale exprimé en centimes d'euros.
         */
        montantCapitalSocialEnCentimes: number;
        /**
         * Correspond au volume d'affaire de l'activité de promotion immobilière. Il est stocké en centimes d'Euros, mais restitué au poste de travail en KEuros.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        montantDuCADeLaPromotionImmobiliere: number;
        /**
         * Définition : correspond à l'année de valorisation du volume d'affaire de l'activité de promotion immobilière.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        anneeDuCADeLaPromotionImmobiliere: number;
        /**
         * Cette rubrique permet au central de mettre à jour la date de traçage de la rubrique CA si le CA est saisi sur le PTU. Elle permet aussi au PTU de ne pas afficher les zéros par défaut.
         *
         * Valorisation:
         * - __O__ : Rubrique CA renseignée
         * - __N__ : Rubrique CA non renseignée (zéro par défaut)
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        indicateurDePresenceDuCA: string;
    }
    interface ISecteurActivite {
        /**
         * Famille de code activité exercée par le professionnel.
         *
         * Exemple:
         * - __01__ : agriculture
         * - __03__ : pêche
         * - __16__ : industrie du verre
         */
        codeDeLaFamilleAPE: string;
        /**
         * Classification des catégories juridiques des personnes selon l'INSEE. Correspond au niveau 2 de la nomenclature de l'INSEE.
         * Correspond aux deux premiers caractères du code catégorie juridique / CODACJ.
         *
         * Typologie gérée dans la table DU1F / appli GESTADM.
         *
         * Exemples:
         * - __11__ : artisan - commerçant
         * - __12__ : commercant
         * - __13__ : artisant
         * - __14__ : officier public ou ministériel
         * - __15__ : profession libéral
         * - __16__ : Exploitant agricole
         * - __19__ : autre personne physique
         */
        codeFamilleCategorieJuridique: string;
        /**
         * Détermine le statut dans une catégorie juridique donnée. Correspond à la typologie de niveau 3 de l'INSEE .
         * Correspond aux 2 derniers caractères du code catégorie juridique / CODACJ : format X4.
         */
        codeCategoJuridi2DerCaracteres: string;
        /**
         * Cette rubrique permet de définir les deux derniers caractères du code APE.
         */
        deuxDernierCaracteresAPE: string;
        /**
         * Précise l'activité économique principale du professionnel. Complète le code APE.
         *
         * Exemples:
         * - Concessionnaire Renault
         * - Franchisé Rodier
         */
        activiteEconomiquePrincipale: string;
        /**
         * Libellé libre qui précise le code APE du lieu d'activité.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        activiteEconomiqueReelleDuLieu: string;
        /**
         * Détermine une famille d'activités des personnes selon l'INSEE.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        codeDeLaFamilleNAF: string;
        /**
         * Détermine une activité au sein d'une famille d'activités selon l'INSEE.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        codeNAF3DerniersCaracteres: string;
        /**
         * Code associé à la branche d'activité.
         * Codification pour l'ensemble des caisses.
         * Donnée relative aux personnes morales et entrepreneurs individuels, basée sur une approche commerciale ou sectorielle, permettant de paramétrer des regroupements fonctionnels de codes NAF.
         * Format XX9999
         */
        brancheActivite: string;
    }
    interface IInformationJuridique {
        /**
         * Date à laquelle une entité professionnelle a commencé d'exister:
         * - date de début d'exploitation pour les personnes physiques
         * - date de création pour les personnes morales
         * Type date au format yyyy-MM-dd
         */
        dateDeCreation: string;
        /**
         * Date à partir de laquelle une entité professionnelle a cessé d'exister :
         * - date de fin d'exploitation pour les personnes physique
         * - date de dissolution d'une personne morale
         * Type date au format yyyy-MM-dd
         */
        dateDeCloture: string;
        /**
         * Le code situation juridique indique dans quel état juridique se trouve une entité professionnelle.
         *
         * Valorisation:
         * - __1__ : En formation
         * - __2__ : Normale
         * - __3__ : Dissoute
         * - __4__ : Sans objet (pseudo personne morale)
         * - __5__ : En cours d'immatriculation
         *
         * __Gestion des incidents__ : Pour avoir un état complet du professionnel, il faut également vérifier qu'il ne fait pas l'objet d'un incident "redressement liquidation judiciaire".
         */
        codeSituation: string;
        /**
         * Détermine le type de personnalité juridique de la personne.
         *
         * Il existe principalement deux types de personnalité :
         * - PJ physique : concerne les individus
         * - PJ morale : concerne les groupes d'individus et les entités reconnus comme sujets de droit (ex : sociétés, associations ...)
         *
         * La personnalité juridique conditionne les droits et obligations.
         *
         * Valorisation:
         * - __1__ : Personne physique
         * - __2__ : Personne morale ou assimilée morale
         */
        indicateurPersonnePhysiqueOuMorale: string;
        /**
         * Détermine si l'entrepreneur individuel a opté pour le statut à responsabilité limitée.
         * Se traduit par la création d'un patrimoine affecté à l'activité professionnelle et séparé du patrimoine personnel.
         *
         * Valorisation:
         * - __O__ : EI
         * - __N__ : Non Concerné (cas des personnes morales)
         */
        indicateurEIRL: string;
        /**
         * Détermine la date de début de validité de l'option de statut à responsabilité limitée pour un entrepreneur individuel donné.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         * Type date au format yyyy-MM-dd
         */
        dateDeDebutDeOptionEIRL: string;
        /**
         * Détermine la date de fin de validité de l'option de statut à responsabilité limitée pour un entrepreneur individuel donné.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         * Type date au format yyyy-MM-dd
         */
        dateDeFinDeOptionEIRL: string;
        /**
         * Détermine si l'Entrepreneur Individuel a indiqué l'option d'opposabilité de son patrimoine pour ses créances antérieures.
         * Le patrimoine exclusivement affecté à l'activité professionnelle est pris en compte, également pour les litiges antérieurs à la déclaration en EIRL.
         *
         * Valorisation:
         * - __O__ : Oui
         * - __N__ : Non
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        indicateurDeOptionOpposabiliteEIRL: string;
        /**
         * Date de début d'exploitation du lieu d'activité.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         * Type date au format yyyy-MM-dd
         */
        dateDeDebutExploitationDuLieu: string;
        /**
         * Date de fin d'exploitation du lieu d'activité.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         * Type date au format yyyy-MM-dd
         */
        dateDeFinExploitationDuLieu: string;
        /**
         * Indicateur de droit au compte
         */
        indicateurDroitAuCompte: string;
        /**
         * Référence d'identification des entités juridiques (LEI : LEGAL ENTITY IDENTIFIER) effectuant des transactions financières.
         */
        identifiantLei: string;
        /**
         * Classification de la personne selon le règlement EMIR / European Market and Infrastructure Regulation.
         * Attribut porté par une contrepartie effectuant une transaction sur le marché des dérivés
         */
        codeEmir: string;
        /**
         * Autorisation donnée par le Client pour que l'Etablissement puisse effectuer des déclarations à sa place (LEI, classification EMIR).
         * 'O' Etab autorisé à effectuer les déclarations 'N' Etab non autorisé à effectuer les déclarations
         */
        indicateurDelegationDeclaration: string;
    }
    interface IDonneeAdministrative {
        /**
         * Code positionné par traitement qui indique si les données professionnel sont à vérifier.
         *
         * Valorisation:
         * - __0__ : pas de vérification
         * - __1__ : vérification à effectuer
         */
        codeDeRafraichissement: string;
        /**
         * Date système de dernière vérification des données du professionnel.
         * Type date au format yyyy-MM-dd
         */
        dateDeDerniereVerification: string;
        /**
         * Référence libre de la pièce justificative qui a servi lors de la gestion administrative du professionnel.
         *
         * Exemple:
         * - __EXEMPLAIRE DES STATUTS CERTIFIE CONFORME__
         * - __EXEMPLAIRE DU JOURNAL OFFICIEL__
         * - __EXTRAIT DE DELIBERATION SIGNE__
         */
        referenceDeLaPieceJustificative: string;
        /**
         * Code indiquant si l'entreprise est étrangère.
         *
         * Valorisation:
         * - __0__ : Oui
         * - __1__ : Non
         */
        codeIndicateurEntrepriseEtrangere: string;
        /**
         * Détermine une monnaie / devise selon la nomenclature ISO 4217 alpha.
         *
         * Exemple:
         * - __USD__ : dollar - USA
         * - __JPY__ : yen - JAPON
         * - __CNY__ : yuan - CHINE
         * - __DKK__ : couronne - DANEMARK
         */
        codeDevise: string;
        /**
         * __TODO__: Déterminer la différence entre la rubrique ECOLIDV (codeDevise) et la rubrique ECOLID9 (codeDeviseBis).
         */
        codeDeviseBis: string;
        /**
         * Détermine le niveau de relation de la personne avec l’Établissement GCE, personne connue comme :
         * - client : personne détentrice de contrat(s) de produit / service
         * - tiers : personne non _client_ en lien avec une personne _client_; concerne la sphère du Particulier ou Professionnel.
         * Ex : participant à un contrat, représentant légal
         *
         * Le prospect est enregistré comme un tiers au niveau de CODATI et est explicitement déterminé comme prospect dans CDDAPO.
         * Le tiers requiert moins d'information que le client dans la gestion administrative.
         *
         * Caractéristique de la personne / table DU7A. Permet de déterminer la relation-type de la personne.
         *
         * connue avec L’Établissement -> voir CTDAPR en fonction de CDDAPO / code prospect.
         *
         * Valorisation:
         * - __0__ : Client
         * - __1__ : Tiers
         */
        indicateurClientOuTier: string;
        /**
         * Identifie une personne (tiers) dans BPCE. Identifiant Chrono affecté par la Direction. Risque du Groupe via le flux retour de la Base Tiers Groupe (BTG).
         * Cet identifiant correspond à l'identifiant unique de la personne pour l'ensemble du Groupe BPCE.
         *
         * Cet identifiant peut être modifié durant l'existence de la personne au sein du Systeme d'Information.
         * En effet la BTG considère une personne active lorsque celle-ci à des engagements au sens Bâle 2.
         */
        identifiantDuTiersGCE: string;
        /**
         * Code établissement de l'entité appartenant à BPCE identifiée par la DRG comme pilote des données sur un Tiers (personne).
         */
        codeEtablissementDeLEntitePilote: string;
        /**
         * Mode d'imposition auquel est assujetti un professionnel entreprise ou entrepreneur individuel.
         *
         * Valorisation:
         * - __1__ : Forfait
         * - __2__ : Réel
         * - __3__ : Impôt sur les sociétés (IS)
         * - __4__ : Sans régime particulier
         * - __5__ : Réel simplifié
         * - __6__ : Impôt sur le revenu des personnes physiques (IRPP)
         */
        codeRegimeFiscal: string;
        /**
         * Mois d'arrêté de la déclaration risques BDF. Format SSAAMM.
         */
        moisDArreteDesRisquesBDF: string;
        /**
         * Dénomination commerciale se rapportant à un fonds de commerce exploité par une société ou assimilée. Dénomination vis à vis de la clientèle.
         * Peut correspondre à l'enseigne. Une société peut avoir un nom commercial différent pour chacun des fonds de commerce qu'elle exploite.
         *
         * Exemples:
         * - La Samaritaine
         * - But
         */
        nomCommercial: string;
        /**
         * Ordre de grandeur du nombre de salariés (en effet l'effectif peut varier en fonction de l'activité du professionnel).
         */
        nombreDeSalaries: number;
        /**
         * Jour d'arrêté du bilan d'un professionnel pour un exercice donné. Format : JJMM. utilisée en complément de l'année du bilan.
         */
        dateArreteComptable: number;
        /**
         * Date système de mise à jour d'au moins une des données professionnel.
         * Type date au format yyyy-MM-dd
         */
        dateDeMiseAJour: string;
        /**
         * Date système d'enregistrement du professionnel.
         * Type date au format yyyy-MM-dd
         */
        dateEnregistrement: string;
        /**
         * Correspond à l'expérience du dirigeant dans l'activité de promotion immobilière.
         *
         * Valorisation:
         * - __1__ : Moins de 5 ans
         * - __2__ : 5 ans et plus
         * - _blanc_ : Inconnue
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        experienceDuDirigeantEnImmobilier: string;
        /**
         * Correspond à l'année de valorisation de l'expérience du dirigeant concernant l'activité de promotion immobilière.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        anneeDeSaisieDeExperienceDuDirigeant: string;
        /**
         * Nature de l'organisation commerciale; Caractérise l'activité professionnelle.
         *
         * Valorisation:
         * - _blanc_ : Inconnu
         * - __0__ : Non concerné
         * - __1__ : Franchisé ou Entreprise Affiliée
         * - __2__ : Franchiseur ou Tête de Réseau
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        natureDeLOrganisationCommerciale: string;
        /**
         * Détermine le profil d'un professionnel. Classification des professionnels selon la gestion des données comptables et financières.
         *
         * Valorisation:
         * - __Z1__ : 2050 PRO REEL NORMAL
         * - __Z2__ : 2033 PRO REEL SIMPLIFIE
         * - __Z3__ : 2035 PROFESSION LIBERALE
         * - __Z4__ : 2050 PME REEL NORMAL
         * - __Z5__ : AUTRE PRO REEL NORMAL
         * - __Z6__ : AUTRE PRO REEL SIMPLIFIE
         * - __Z7__ : PROFESSIONNEL AU FORFAIT
         * - __ZA__ : 2050 PROMOTEUR
         * - __ZB__ : 2050 LOTISSEUR
         * - __ZC__ : 2050 MARCHAND DE BIENS
         * - __ZD__ : 2050 INVESTISSEUR
         * - __ZE__ : 2050 PRO AUTRES SR
         * - __ZF__ : 2050 PME AUTRES SR
         * - __ZG__ : 2033 PRO AUTRES SR
         * - __ZH__ : 2035 PRO AUTRES SR
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        codeDuProfilClient: string;
        /**
         * Résidents:
         * - Personnes physiques ayant leur principal centre d'interet en FRANCE
         * - Fonctionnaires et autres agents publics français en poste à l'etranger
         * - Personnes morales françaises ou étrangères pour leurs etablissement en FRANCE
         * La France est définie comme suit :
         * 	- France métropolitaine (avec la principaute de MONACO )
         * 	- DOM (avec Saint-Pierre et Miquelon)
         * 	- TOM (avec Mayotte)..
         *
         * Non résidents:
         * - Personnes physiques ayant leur principal centre d'interet à l'etranger
         * - Fonctionnaires et autres agents publics étrangers en poste en FRANCE
         * L'étranger est défini comme suite :
         * 	- Pays autre que la France (y compris les Etats dont dont l'Institut d'Emission est lié au Trésor Français
         * 	par un compte d'opérations).
         * - La distinction entre les deux types de non-résidents
         * 	- Non-résident zone euro : Personnes appartenant à un un Etat membre de la zone de monnaie unique (EMUM),hors-France,
         * 	- Non-résident hors zones euro : Personnes appartenant à un autre pays étranger (non-EMUM).
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        codeResident: string;
        /**
         * Code permettant d'identifier l'établissement qui souhaite être pilote ou qui est pilote du Tiers.
         *
         * Valorisation:
         * - __1__ : Je suis pilote, ou je souhaite être pilote
         * - __2__ : Je ne suis pas pilote, ou je ne souhaite pas être pilote
         * - __3__ : Je ne me prononce pas, je n'ai pas d'avis
         * - _blanc_ : N.C.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        codePiloteDuTiers: string;
        /**
         * Détermine un type de pièce justifiant d'une activité/situation professionnelle.
         *
         * Exemples:
         * - __00__ : EXEMPLAIRE DES STATUTS CERTIFIE CONFORME
         * - __01__ : EXEMPLAIRE DU JOURNAL OFFICIEL
         * - __02__ : EXTRAIT DE DELIBERATION SIGNE
         * - __03__ : COPIE CERTIFIE CONFORME DU J.O
         * - __04__ : AGREMENT DE L'ASSOCIATION
         * - __05__ : COPIE DE L'ACTE AUTHENTIQUE OU TESTAMENT
         * - __06__ : STATUTS DE LA DELEGATION DEPARTEMENTALE
         * - __07__ : DECRET DE RECONNAISSANCE LEGALE
         * - __08__ : COPIE DES STATUTS CERTIFIEE CONFORME
         * - __09__ : COPIE DE L'EXTRAIT KBIS REG. DU COMMERCE
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        codeDeLaPieceJustificativeProfessionnelle: string;
        /**
         * Cette rubrique permet au central de mettre à jour la date de traçage de la rubrique nb de salariés si le nb de salariés est saisi sur le PTU.
         * Elle permet aussi au PTU de ne pas afficher les zéros par défaut.
         *
         * Valorisation:
         * - __O__ : Rubrique nb de salariés renseignée
         * - __N__ : Rubrique nb de salariés non renseignée (zéro par défaut)
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        indicateurDePresenceDuNombreDeSalarie: string;
        /**
         * Désignation longue du lieu d'activité. Elle est utilisée pour l'impression du volet un de l'adresse.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        designationLongueDuLieuActivite: string;
        /**
         * Libellé de désignation de l'enseigne d'un lieu d'activité d'un Professionnel. Signe/marque/appellation apposé sur un établissement commercial le distinguant des autres établissements.
         * Élément incorporel du fonds de commerce, elle désigne :
         * - un nom de personne
         * - un emblème
         * - une dénomination de fantaisie
         *
         * L'enseigne peut ne pas être unique mais commune, ex: Café du Commerce.
         *
         * Désignation longue qui référence le volet un et deux de l'adresse.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        enseigneCommercialeDuLieuActivite: string;
        /**
         * Numéro de télex du lieu activité.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        numeroDeTelexDuLieuActivite: string;
        /**
         * Numéro de télécopie du lieu d'activité.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        numeroTelecopieurDuLieuActivite: string;
    }
    interface ICotation {
        /**
         * Cote d'une entreprise établie à une date donnée. Concerne les entreprises suivies dans la base FIBEN.
         */
        cotation: string;
        /**
         * En retour des traitements FIBEN, contient la date de cotation de la Banque de France, en lien avec la cote Banque de France COMRCT.
         * Type date au format yyyy-MM-dd
         */
        dateDeLaCotation: string;
        /**
         * Cotation précédemment enregistrée pour une entreprise donnée.
         */
        cotationPrecedente: string;
        /**
         * Date de cotation Fiben BDF N-1.
         * Type date au format yyyy-MM-dd
         */
        dateDeLaCotationPrecedente: string;
        /**
         * Détermine la cotation FIBEN d'un dirigeant donné pour une personne morale donnée.
         *
         * Valorisation:
         * - __000__ : Pas de réserve
         * - __040__ : Attention particulière
         * - __050__ : Réserves
         * - __060__ : Réserves sérieuses
         */
        cotationDuDirigeant: string;
        /**
         * Date à laquelle est référencée la dernière mise à jour de la cotation FIBEN du dirigeant.
         * Type date au format yyyy-MM-dd
         */
        dateDeLaCotationDuDirigeant: string;
        /**
         * La cotation FIBEN du dirigeant est attribué au dirigeant d'une personne morale ou de l'activité d'une personne physique.
         *
         * Règles de gestion et types de contrôle : La cotation du dirigeant est saisie et stockée sur l'activité. Aucune application ne l'utilise.
         * Elle est utilisée par des procédures internes caisses.
         *
         * Valorisation:
         * - __0__ : Pas de réserve
         * - __4__ : Attention particulière
         * - __5__ : Réserves
         * - __6__ : Réserves sérieuses
         */
        cotationSimplifieDuDirigeant: string;
        /**
         * Date à laquelle est référencée la dernière mise à jour de la cotation professionnelle.
         * Type date au format yyyy-MM-dd
         */
        dateDeDerniereMiseAJourDeLaCotation: string;
        /**
         * Cette rubrique identifie la date de dernière révision de l'activité professionnelle.
         * Dans le cadre des interfaces ANADEFI --> SIRIS, elle correspond à la date de dernière mise à jour du dossier ANADEFI, même si la cotation n'évolue pas.
         * Type date au format yyyy-MM-dd
         */
        dateDeDerniereRevisionDeLaCotation: string;
        /**
         * Précise la "qualité" d'un professionnel/collectivité.
         *
         * Règles de gestion et types de contrôle : Obligation de côter tout client ouvrant un compte commercial. La cote permet d'établir les fourchettes de taux d'agios ou de frais.
         *
         * Valorisation:
         * - __A__ : Affaire excellente
         * - __B__ : Bonne affaire : rien de défavorable
         * - __C__ : Affaire de qualité moyenne : précautions à prendre
         * - __D__ : Affaire de mauvaise qualité : à surveiller
         * - _blanc_ : Client non encore coté ('*' à l'édition)
         * - __E__ : Contentieux
         */
        codeCotation: string;
    }
    interface IActiviteProfessionnelle {
        /**
         * Numéro de SIREN du professionnel enregistré dans le SI d'un Établissement du GCE.
         */
        numeroSiren: string;
        /**
         * Identifiant d'un Établissement du RCE. Il correspond au code Banque sous lequel une Caisse ou un établissement du réseau CE est répertoriée par la Banque de France.
         */
        codeEtablissement: string;
        /**
         * Numéro d'identification de la personne dans le SI d'un Etablissement Référence interne MYSYS Perso.
         */
        identifiantTiers: number;
        /**
         * Numéro d'identification de l'activité professionnelle d'une personne dans le SI d'un Établissement du Groupe CE. Numéro chrono attribué par le système.
         * Une personne morale est enregistrée sous une seule activité : valeur 1. Une personne physique peut avoir plusieurs activités en tant que professionnel : enregistrement chrono.
         *
         * Un professionnel est référencé dans le SI d'un Établissement du Groupe CE par :
         * - NODAPE / Numéro de personne
         * - NODAPS / Numéro chrono Prof
         * Constitue une référence unique dans MYSYS.
         */
        numeroChrono: number;
        situationFinanciere: ISituationFinanciere;
        secteurActivite: ISecteurActivite;
        donneAdministrative: IDonneeAdministrative;
        informationJuridique: IInformationJuridique;
        cotation: ICotation;
        listeImmatriculation: Array<IImmatriculation>;
        listeAdresse: Array<IAdresse>;
        listeEtablissement: Array<IEtablissement>;
        /**
         * RUBRIQUE MERE : IKDQST
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        numeroComplementaireSIRET: string;
        /**
         * à partir de la V17.01 seulement
         *
         * Si 'T' : mise à jour complète avec les Immatriculations
         * Si 'I' : mise à jour des Immatriculations seulement
         * Sinon mise à jour de corporateInformation sans les Immatriculations
         */
        codeMajImmatriculation: string;
        /**
         * Indicateur précisant si une personne connue est un prospect : personne n'étant ni client ni tiers et généralement référencée dans le cadre d'une relation d'avant vente (simulation, pré-souscription d'une offre).
         *
         * Valeurs :
         *
         * '1' personne prospect
         * '0' personne non prospect
         */
        indicateurProspect: string;
    }
    interface IParametreCorporate {
        compteurEnregistrement: number;
        /**
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        referenceExterneDeAgent: number;
        /**
         * Poste fonctionnel en qualité de titulaire, remplaçant, suppléant ou au titre d'une affectation temporaire.
         *
         * Valorisation:
         * - __T__ : Titulaire
         * - __R__ : Remplaçant
         * - __S__ : Suppléant
         * - __A__ : Affectation temporaire
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        codeQualiteDeAgentAffecte: string;
        /**
         * Trouver la différence entre les rubriques _ENOCEE1_ et _ENOCEE6_.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        identifiantDeElementDeStructure: number;
        /**
         * Trouver la différence entre les rubriques _ENOCEE1_ et _ENOCEE6_.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        identifiantDeElementDeStructureBis: number;
        /**
         * Indique si la personne est à l'état bloquée dans la table VAO.
         *
         * Valorisation:
         * - __N__ : Non bloqué
         * - __B__ : Bloqué
         * - __D__ : Débloqué
         */
        codeDeBlocageVAO: string;
        /**
         * La rubrique CIDCCB indique si un client bancaire existe pour une activité professionnelle.
         *
         * Valorisation:
         * - __O__ : Existe
         * - __N__ : N'existe pas
         */
        indicateurExistanceDeEntiteTitulaire: string;
    }
    interface ICorporateActiviteProfessionnelle {
        activitesProfessionnelles: Array<IActiviteProfessionnelle>;
        parametreCorporate: IParametreCorporate;
        listeMessageFonctionnel: Array<IMessageFonctionnel>;
    }
    interface IImmatriculation {
        /**
         * Identifiant d'un Etablissement du RCE. Correspond au code Banque sous lequel une Caisse ou un Etablissement du réseau CE est répertoriée par la Banque de France.
         */
        codeEtablissement: string;
        /**
         * Numéro d'identification de la personne dans le SI d'un Etablissement bancaire
         */
        identifiantPersonne: number;
        /**
         * Numéro d'identification de l'activité professionnelle d'une personne dans le SI d'un Etablissement du Groupe CE.
         */
        numeroChronoProfesionnel: number;
        /**
         * Détermine un registre officiel en France permettant l'immatriculation de personnes ou la publication d'informations
         * 01 RCS (Registre du commerce et des sociétés
         * 02 RM (Répertoire des métiers)
         * 03 MSA (Mutualité sociale agricole)
         * 04 Publication journal officiel
         * 05 Préfecture
         * 06 Mairie
         * 07 Ordre des métiers
         * 08 Autres
         */
        codeTypeRegistre: string;
        /**
         * Numéro d'immatriculation à un registre officiel d'un professionnel.
         *
         * Ce numéro peut être notamment :
         * - un numéro RCS
         * - un numéro Registre des métiers
         * - un numéro d'inscription à la préfecture
         * - un numéro d'inscription à la MSA
         * - un ordre des métiers pour les professions libérales
         * - un numéro de publication au JO
         *
         * Le contenu de NODAIM est interprété en fonction de la valeur du code CTDARI qui lui correspond.
         */
        numeroImmatriculationRegistre: string;
        /**
         * Libellé du lieu d'inscription au registre.
         */
        lieuInscriptionRegistre: string;
        /**
         * Date à laquelle une personne est immatriculé en tant que professionnel auprès d'un organisme habilité (ex: chambre de commerce,...).
         * Type date au format yyyy-MM-dd
         */
        dateImmatriculation: string;
    }
    interface IAdresse {
        /**
         * Numéro d'identification d'une adresse en tant que localisation géographique d'une personne référencée dans Client-Tiers / appli GESTADM.
         */
        identifiantAdresse: number;
        /**
         * Indique le numéro de la voie au fichier des PTT pour les voies francaises répertoriées.
         */
        numeroDeLaVoiePTT: number;
        /**
         * RUBRIQUE MERE : CODGCP. CODIFICATION NON NORMALISEE : UTILISER CODGCP.
         */
        numeroDuCodePostalPTT: string;
        /**
         * Détermine le quartier d'une adresse.
         */
        codeDuQuartier: string;
        /**
         * Numéro de la tournée du facteur. Cette donnée pourra être utilisée à des fins de ciblage marketing de la clientèle.
         */
        numeroDeLaTourneeDuFacteur: number;
        /**
         * Numéro de téléphone associé à une adresse et concernant un particulier ou un lieu d'activité pour un professionnel.
         */
        numeroDeTelephoneAdresse: string;
        /**
         * Identifie un pays ou territoire selon la norme INSEE.
         *
         * Exemples:
         * - __99000__ : France
         * - __99132__ : Grande Bretagne
         * - __99109__ : Allemagne
         * - __99134__ : Espagne
         */
        codeDuPaysINSEE: string;
        /**
         * Identifie une commune / lieu-dit selon la nomenclature INSEE.
         *
         * Format du code INSEE des communes :
         * - numéro minéralogique du département
         * - numéro de code de la commune
         *
         * Format du code pour les lieux-dits (localités n'ayant pas le statut de commune) :
         * - numéro minéralogique du département
         * - numéro de code du lieu-dit
         */
        codeDeLaLocaliteINSEE: string;
        /**
         * Permet de savoir qui est le possesseur de l'adresse.
         *
         * Valorisation:
         * - __1__ : PERSONNE
         * - __2__ : LIEU D'ACTIVITE
         * - __3__ : ENTITE JURIDIQUE (pas géré)
         * - __4__ : ELEMENT DE STRUCTURE (pas géré)
         */
        indicateurDePossessionAdresse: string;
        /**
         * Numéro d'identification du lieu d'activité d'un professionnel dans le SI d'un Établissement du Groupe CE. Implantation d'une activité d'un professionnel.
         * Peut correspondre à un établissement au sens INSEE.
         *
         * Numéro chrono attribué par le système. Identification du lieu :
         * - NODAPE / Numéro de personne
         * - NODAPS / Numéro chrono Prof
         * - NODALS / Numéro chrono Lieu
         *
         * Constitue une référence unique dans MYSYS.
         */
        numeroChronoDuLieuActivite: number;
        /**
         * Détermine la nature/finalité d'une adresse.
         *
         * Valorisation:
         * - __1__ : Adresse légale (domicile), localisation pour un lieu d'activité
         * - __4__ : Adresse communication (correspondance)
         * - __6__ : Adresse spéciale communication
         */
        codeDuTypeAdresse: string;
        /**
         * Code validité de l'adresse. Code initialisé lors du traitement de l'adresse par le logiciel UNICONVERT.
         *
         * Valorisation:
         * - __00__ : Adresse correcte
         * - __XY__ : Adresse forcée avec X : contrôle analyse syntaxique et Y : contrôle analyse géographique (code issu d'une transposition des codes retour UNISERV).
         */
        codeDeValiditeAdresse: string;
        /**
         * Cette rubrique est initialisée lors de la saisie des adresses au PTMS. Elle indique si le téléphone de la personne est en liste rouge ou non.
         *
         * Valorisation:
         * - __0__ : Pas en liste rouge
         * - __1__ : En liste rouge
         */
        indicateurDeTelephoneSurListeRouge: string;
        /**
         * Numéro de fax du particulier ou du lieu d'activité pour un professionnel. Pour un particulier, il s'agit dans la plupart des cas, du numéro de fax du domicile.
         */
        numeroFax: string;
        /**
         * Cette rubrique indique si le client détient un téléphone.
         * Permet d'indiquer que la rubrique numéro de téléphone de l'adresse client n'est pas renseignée parce que le client n'a pas le téléphone.
         *
         * Valorisation:
         * - _blanc_ : Valeur d'initialisation
         * - __1__ : Ne détient pas de téléphone
         */
        indicateurDeDetentionDeTelephone: string;
        /**
         * Cette donnée précise à quoi correspond le téléphone NODATP.
         */
        commentaireTelephone: string;
        /**
         * Indique le numéro de la voie du fichier HEXAVIA pour les voies francaises répertoriées.
         */
        numeroDeVoieHEXAVIA: number;
        /**
         * Code postal pour la France et l'étranger :
         * - Sur 5 caractères pour la France
         * - Sur 9 caractères pour l'étranger : peut être en alphanumérique
         */
        codePostalPourFranceEtEtranger: string;
        /**
         * RUBRIQUE MERE : LIDGCM
         */
        libelleCommune: string;
        /**
         * Libellé de la ligne 2 d'une adresse normée AFNOR. La ligne 2 permet d'indiquer le point de remise ou un complément d'identifiaction du destinataire : N° APP ou BAL-ETAGE-COULOIR-ESC.
         *
         * La ligne 2 correspond à tout ce qui est situé à l'intérieur d'un bâtiment, cela peut être l'indication d'étage, d'appartement, de porte, de numéro de boite aux lettres, etc ...
         */
        ligne2AdresseAFNOR: string;
        /**
         * Libellé de la ligne 3 d'une adresse normée AFNOR. La ligne 3 permet d'indiquer le point de remise (informations complémentaires de distribution) : ENTREE-BATIMENT-IMMEUBLE-RESIDENCE.
         *
         * La ligne 3 correspond à tout ce qui est à l'extérieur du batiment. entrée, batiment, bloc, tour etc ...
         */
        ligne3AdresseAFNOR: string;
        /**
         * Libellé de la ligne 4 d'une adresse normée AFNOR. La ligne 4 permet d'identifier la voie de destination NUMERO-LIBELLE DE LA VOIE. Peut comprendre :
         * - Le numéro dans la voie, type et nom de voie
         * - Le nom d'une résidence ou d'un ensemble immobilier qui ne peut être assimilé à une commune ou à un lieu-dit
         * - Un service X
         * - Une boîte postale
         * - Un numéro de CEDEX
         */
        ligne4AdresseAFNOR: string;
        /**
         * Libellé de la ligne 5 d'une adresse normée AFNOR. La ligne 5 permet d'identifier la destination : LIEU DIT ou SERVICE PARTICULIER DE DISTRIBUTION. Peut comprendre :
         * - Nom d'un quartier, d'un lieu dit, d'un hameau
         * - Nom d'un ensemble immobilier pouvant être assimilé à une commune ou à un lieu dit et possédant plusieurs voies internes.
         */
        ligne5AdresseAFNOR: string;
        /**
         * Libellé de la ligne 6 d'une adresse normée AFNOR. La ligne 6 permet d'identifier la destination : CODE POSTAL et LOCALITE DE DESTINATION ou CODE CEDEX et LIBELLE CEDEX. Peut comprendre :
         * - Le numéro de code postal et nom de la localite
         * - Le numéro de code spécifique et nom de la localité complétés éventuellement par la mention CEDEX
         */
        ligne6AdresseAFNOR: string;
        /**
         * le code iso du pays
         */
        codeISOPays: string;
        /**
         * le libelle du pays
         */
        libelleISOPays: string;
        /**
         * indicatif du téléphone :
         *  - +33 pour la france
         * - + 32 pour la belgique
         */
        indicatifTelephone: string;
        /**
         * indicatif du téléphone du fax :
         *  - +33 pour la france
         * - + 32 pour la belgique
         */
        indicatifTelephoneFax: string;
    }
    interface IEtablissement {
        /**
         * Numéro de télex du lieu activité.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        numeroDeTelexDuLieuActivite: string;
        /**
         * Numéro de télécopie du lieu d'activité.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        numeroTelecopieurDuLieuActivite: string;
        /**
         * Désignation longue du lieu d'activité. Elle est utilisée pour l'impression du volet un de l'adresse.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        designationLongueDuLieuActivite: string;
        /**
         * Libellé de désignation de l'enseigne d'un lieu d'activité d'un Professionnel. Signe/marque/appellation apposé sur un établissement commercial le distinguant des autres établissements.
         * Élément incorporel du fonds de commerce, elle désigne :
         * - un nom de personne
         * - un emblème
         * - une dénomination de fantaisie
         *
         * L'enseigne peut ne pas être unique mais commune, ex: Café du Commerce.
         *
         * Désignation longue qui référence le volet un et deux de l'adresse.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        enseigneCommercialeDuLieuActivite: string;
        /**
         * RUBRIQUE MERE : IKDQST
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        numeroComplementaireSIRET: string;
        /**
         * Date de début d'exploitation du lieu d'activité.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         * Type date au format yyyy-MM-dd
         */
        dateDeDebutExploitationDuLieu: string;
        /**
         * Date de fin d'exploitation du lieu d'activité.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         * Type date au format yyyy-MM-dd
         */
        dateDeFinExploitationDuLieu: string;
        /**
         * Libellé libre qui précise le code APE du lieu d'activité.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        activiteEconomiqueReelleDuLieu: string;
        /**
         * Détermine une famille d'activités des personnes selon l'INSEE.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        codeDeLaFamilleNAF: string;
        /**
         * Détermine une activité au sein d'une famille d'activités selon l'INSEE.
         *
         * __Remarque__: Ce champs est utilisé uniquement lors de la __création__ d'une activité professionnelle.
         */
        codeNAF3DerniersCaracteres: string;
        /**
         * Détermine le statut du lieu d'activité d'un professionnel.
         * Permet de déterminer le siège
         *
         * Valeurs :
         *
         * - '1'        Etablissement siège
         * - '2'        Etablissement secondaire
         */
        codeStatut: string;
        listeAdresse: Array<IAdresse>;
        /**
         * Numéro d'identification du lieu d'activité d'un professionnel dans le SI d'un Établissement du Groupe CE. Implantation d'une activité d'un professionnel.
         * Peut correspondre à un établissement au sens INSEE.
         *
         * Numéro chrono attribué par le système. Identification du lieu :
         * - NODAPE / Numéro de personne
         * - NODAPS / Numéro chrono Prof
         * - NODALS / Numéro chrono Lieu
         *
         * Constitue une référence unique dans MYSYS.
         */
        numeroChronoDuLieuActivite: number;
        /**
         * Code associé à la branche d'activité.
         * Codification pour l'ensemble des caisses.
         * Donnée relative aux personnes morales et entrepreneurs individuels, basée sur une approche commerciale ou sectorielle, permettant de paramétrer des regroupements fonctionnels de codes NAF.
         * Format XX9999
         */
        brancheActivite: string;
    }
    interface IMessageFonctionnel {
        /**
         * Avec le code Domaine, ce code Message Erreur compose l'identifiant réduit pour le poste PETRA d'un Message d'erreur.
         * Valeurs : La composition de ce code se déduit de l'identifiant complet d'un Message d'Erreur en reprenant :
         *
         * la partie utile du code entité (sur 4 car.) .
         * pour une entité programme ou dialogue, cela correspond aux 4 derniers caractères du code sachant que les 2 premiers sont connus dans le code bibliothèque (première composante de la clé) .
         * pour un segment, elle correspond aux 4 carac. codifiant le segment. le rang de la rubrique (sur 3 car.) le type de l'erreur (sur 1 car.)
         */
        code: string;
        /**
         * Libellé de description d'une anomalie / erreur associé à un code erreur.
         * Correspond à une erreur de traitement, de contenu de données reçues via un interface (écran de saisie, PTMS, autre Q/R, fichier séquentiel, ...).
         */
        libelle: string;
    }
}

declare namespace ICRest.Modeles.Tiers.Identification {
    interface ICodeMarche {
        /**
         * Code Marché de la personne.
         *
         * Exemple :
         * MN 101102 /  Particuliers : Particuliers non Professionnels
         * MN 102102 /  Professionnels : Professions Libérales
         * MN 206101 /  Professionnels Privé : Promoteurs
         */
        codeMarche: string;
        /**
         * Libellé de désignation d'un segment clientèle.
         */
        libelleLongCodeMarche: string;
        /**
         * Libellé court de la segmentation clientèle pour affichage sur le poste de travail.
         * Libellé à caractère confidentiel pour ne pas être interprété par la clientèle.
         */
        libelleCourtCodeMarche: string;
        /**
         * Ce libellé permet de restituer le libellé de la famille du code marché.
         *
         * Exemple :
         * 101 : Particuliers
         */
        libelleFamilleCodeMarche: string;
    }
    interface IDonneeIdentification {
        /**
         * Identifiant d'un Etablissement du RCE.
         * Correspond au code Banque sous lequel une Caisse ou
         * un Etablissement du réseau CE est répertoriée par la
         * Banque de France
         */
        codeEtablissement: string;
        /**
         * Numéro d'identification de la personne dans le
         *  SI d'un Etablissement.
         *  Personne référencée comme client, tiers ou prospect.
         */
        identifiantPersonne: number;
        /**
         * Détermine le type de personnalité juridique de la personne.
         *
         * Valeurs :
         * 1=personne physique
         * 2=personne morale / assimilée morale
         */
        codePersonnaliteJuridique: string;
        /**
         * Libelle du code qui indique le type de personnalité juridique de la personne.
         */
        libellePersonnaliteJuridique: string;
        /**
         * Définit l'état de la personne ou de l'entité titulaire à une date donnée dans la gestion administrative des personnes :
         *
         *            Valeurs :
         * '0'        Actif
         * '1'        Cloturé
         */
        codeEtatPersonne: string;
        /**
         * Détermine la relation de la personne connue avec
         * l'Etablissement :
         * - client : personne détentrice de contrat(s) de produit / service
         * - tiers : personne non 'client' en lien avec une personne 'client' - lien particulier ou professionnel (ex : participant à un contrat, représentant légal)
         * - prospect : personne n'étant ni client ni tiers
         *
         * Valeurs possibles :
         * '0'        Personne connue comme client
         * '1'        Personne connue comme tiers
         * '2'        Personne connue comme prospect
         */
        codeTypeRelation: string;
        /**
         * Libelle du code qui indique le type de relation de la personne avec l’établissement
         */
        libelleTypeRelation: string;
        /**
         * Date de première entrée en relation d'une personne
         * donnée avec l'Etablissement (CE).
         * Type date au format yyyy-MM-dd
         */
        dateEntreeRelation: string;
    }
    interface IIdentification {
        donneeIdentification: IDonneeIdentification;
        lutteAntiBlanchiment: ILutteAntiBlanchiment;
        listMarche: Array<ICodeMarche>;
        suiviComercial: ISuiviCommercial;
    }
    interface ILutteAntiBlanchiment {
        /**
         * Code alerte VAO. Il indique si une alerte est détectée lors du filtrage.
         * Valeurs :
         * - 'O' : Alerte
         * - 'N' : Pas d'alerte
         */
        codeAlerteVAO: boolean;
        /**
         * Message VAO. Il permet de de préciser à l'agent s'il y a alerte ou non sur la personne filtrée.
         */
        messageAlerteVAO: string;
    }
    interface ISuiviCommercial {
        /**
         * Numéro d'identification interne d'un élément de structure d'un Etablissement du GCE.
         * Correspond à un type : siège, agence, service, poste fonctionnel, ...
         * Numéro chronologique attribué par le système : référence unique dans MYSYS (identifiant interne).
         */
        identifiantEDSSuiviCommercial: number;
        /**
         * Indique le type organisationnel d'un élément de structure d'un Etablissement du GCE.
         * Typologie propre à chaque Etablissement du GCE.
         * Certains types d'EDS sont INVARIANTS dans le SI et sont communs à tous les Etablissements :
         * '008' Siège
         * '003' Agence (Point de vente)
         * '010' GAB
         * '020' Guichet (au sens arrêté de caisse)
         * '001' Poste fonctionnel
         * '002' Service
         * '009' Entité Administrative (Guichet interbancaire)
         * Attention : un type d'EDS invariant peut avoir un libellé spécifique par Etablissement.
         * Exemple : type '003' = agence / point de vente.
         *
         * Valeurs :
         * '001'      poste fonctionnel
         * '002'      service
         * '003'      agence
         * '004'      unité commerciale
         * '005'      secteur commercial
         * '006'      groupe commercial
         * '007'      direction
         * '008'      siège
         * '009'      entité administrative
         * '010'      GAB
         */
        typeEDSSuiviCommercial: string;
        /**
         * Référence externe d'un élément de structure dans un Etablissement du GCE.
         * Référence connue de l'Etablissement.
         * Identifiant défini en fonction du type d'élément de structure.
         */
        referenceExterneEDSSuiviCommercial: number;
        /**
         * Alimenté uniquement pour les EDS de type Poste fonctionnel (001)
         *
         * Numéro d'identification d'un agent au sein d'un établissement du réseau GCE.
         * Correspond à un individu ou à un acteur générique.
         * Numéro chrono attribué par le système, pour les établissements.
         * Référence unique dans MYSYS.
         */
        identifiantAgent: number;
        /**
         * Désignation décrivant l'élément de structure.
         * Cette désignation est construite par concaténation :
         *      - Si l'EDS n'est pas un Poste fonctionnel, du libellé court du type d'EDS et de la désignation de l'EDS.
         *      - Si c'est un Poste fonctionnel, du nom et du prénom de l'agent titulaire du Poste fonctionnel.
         */
        designationCourteEDS: string;
        /**
         * Désignation décrivant l'élément de structure.
         * Cette désignation est construite par concaténation :
         *      - Si l'EDS n'est pas un Poste fonctionnel, du libellé long du type d'EDS et de la désignation de l'EDS.
         *      - Si c'est un Poste fonctionnel, de la civilité, du nom et du prénom de l'agent titulaire du Poste fonctionnel.
         */
        designationLongueEDS: string;
    }
}

declare namespace ICRest.Impression.Services {
    interface IImpressionService {
        editerOffrePret(idDossier: string, idDocument: string, identifiantWs: string, paramsEditiques: ICRest.Impression.Models.IParamEditique[], modeEdition: number, niveauTraitement: number, formatEditique: number, codeSignature: number, forceControleGestion: boolean, forceControleEdition: boolean): ng.IPromise<ICRest.Impression.Models.IResultatEditionOffreLecture>;
    }
}

declare namespace ICRest.Impression.Services {
    /**
     * Classe implémentant l'interface IParametrageApplicatif
     */
    class ImpressionService implements IImpressionService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: ICRest.Services.IRestService);
        /**
         * Méthode d'édition/impression d'un document
         *
         * @param idDossier identifiant du dossier en instruction
         * @param idDocument identifiant du document (i.e. modèle théorique)
         * @param identifiantWs
         * @param paramsEditiques paramètres d'éditique (i.e. couple clé/valeurs d'éventuelles données complémentaires)
         * @param niveauTraitement niveau de traitement porté dans l'objet InfoDocument permettant de lister les documents affichés pour édition
         *                         3 valeurs sont possibles : 49 pour 1 niveau dossier, 50 pour 2 niveau plan ou 51 pour niveau crédit.
         * @param formatEditique paramètre pour savoir si l'on est en format papier, industrialisé ou signature électronique
         * @param codeSignature code pout  demande de crédit SED (4) ou SAG (3), ou offre (2), ou offre en SAG (1), ou défaut (0) ou non initialisé (-30)
         * @param forcControleGestion booléen pour le forçage des contrôles au passage en gestion
         * @param forceControleEdition booléen pour le contrôle à l'édition de l'offre
         */
        editerDocument(idDossier: string, idDocument: string, identifiantWs: string, paramsEditiques: ICRest.Impression.Models.IParamEditique[], modeEdition: number, niveauTraitement: number, formatEditique: number, codeSignature: number, forceControleGestion: boolean, forceControleEdition?: boolean): ng.IPromise<ICRest.Impression.Models.IResultatEditionDocuments>;
        /**
         * Méthode d'édition/impression de l'offre de prêt/contrat
         *
         * @param idDossier identifiant du dossier en instruction
         * @param idDocument identifiant du document (i.e. modèle théorique)
         * @param identifiantWs
         * @param paramsEditiques paramètres d'éditique (i.e. couple clé/valeurs d'éventuelles données complémentaires)
         * @param niveauTraitement
         * @param formatEditique
         * @param codeSignature code pout  demande de crédit SED (4) ou SAG (3), ou offre (2), ou offre en SAG (1), ou défaut (0) ou non initialisé (-30)
         * @param forceControleGestion booléen pour le forçage des contrôles au passage en gestion
         * @param forceControleEdition booléen pour le contrôle à l'édition de l'offre
         */
        editerOffrePret(idDossier: string, idDocument: string, identifiantWs: string, paramsEditiques: ICRest.Impression.Models.IParamEditique[], modeEdition: number, niveauTraitement: number, formatEditique: number, codeSignature: number, forceControleGestion: boolean, forceControleEdition?: boolean): ng.IPromise<ICRest.Impression.Models.IResultatEditionOffreLecture>;
    }
}

declare namespace ICRest.Tiers.Services {
    interface IGetCorporateActiviteProfessionnelleRequest {
        codeEtablissement: string;
        identifiantTiers: number;
    }
    interface IEntreesIdentification {
        codeEtablissement: string;
        identifiantPersonne: number;
    }
    interface ITiersService {
        /**
         * Apelle la ressource REST qui renvoie les activités professionnelles d'une personne
         * @param codeEtablissement
         * @param identifiantTiers
         */
        getCorporateActiviteProfessionnelle(codeEtablissement: string, identifiantTiers: number): ng.IPromise<Models.CorporateActiviteProfessionnelle.ICorporateActiviteProfessionnelle>;
        /**
         * Récupère les informations d'un tiers
         * @param codeEtablissement
         * @param identifiantPersonne
         */
        getIdentification(codeEtablissement: string, identifiantPersonne: number): ng.IPromise<Modeles.Tiers.Identification.IIdentification>;
    }
    class TiersService implements ITiersService {
        private restService;
        static $inject: Array<string>;
        constructor(restService: ICRest.Services.IRestService);
        getCorporateActiviteProfessionnelle(codeEtablissement: string, identifiantTiers: number): ng.IPromise<Models.CorporateActiviteProfessionnelle.ICorporateActiviteProfessionnelle>;
        getIdentification(codeEtablissement: string, identifiantPersonne: number): ng.IPromise<Modeles.Tiers.Identification.IIdentification>;
    }
}
